8,TYPE_DECL,,cmake\SQLAllocHandleTest.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cmake\SQLAllocHandleTest.cpp,cmake\SQLAllocHandleTest.cpp:<global>,,false,1,<global>,3
42,TYPE_DECL,,cmake\boost-fallback\test-boostatomic.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cmake\boost-fallback\test-boostatomic.cpp,cmake\boost-fallback\test-boostatomic.cpp:<global>,,false,1,<global>,2
56,TYPE_DECL,,cmake\boost-fallback\test-boostfilesystem.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cmake\boost-fallback\test-boostfilesystem.cpp,cmake\boost-fallback\test-boostfilesystem.cpp:<global>,,false,1,<global>,2
70,TYPE_DECL,,cmake\boost-fallback\test-boostmutex.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cmake\boost-fallback\test-boostmutex.cpp,cmake\boost-fallback\test-boostmutex.cpp:<global>,,false,1,<global>,2
86,TYPE_DECL,,cmake\boost-fallback\test-boostsharedmutex.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cmake\boost-fallback\test-boostsharedmutex.cpp,cmake\boost-fallback\test-boostsharedmutex.cpp:<global>,,false,1,<global>,2
102,TYPE_DECL,,cmake\boost-fallback\test-boostsharedptr.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cmake\boost-fallback\test-boostsharedptr.cpp,cmake\boost-fallback\test-boostsharedptr.cpp:<global>,,false,1,<global>,2
105,TYPE_DECL,,,,"struct foo{
	int x;
}",1,cmake\boost-fallback\test-boostsharedptr.cpp,foo,,false,3,foo,1
120,TYPE_DECL,,cmake\boost-fallback\test-boostthread.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cmake\boost-fallback\test-boostthread.cpp,cmake\boost-fallback\test-boostthread.cpp:<global>,,false,1,<global>,2
136,TYPE_DECL,,cmake\boost-fallback\test-stdatomic.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cmake\boost-fallback\test-stdatomic.cpp,cmake\boost-fallback\test-stdatomic.cpp:<global>,,false,1,<global>,2
150,TYPE_DECL,,cmake\boost-fallback\test-stdexpfilesystem.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cmake\boost-fallback\test-stdexpfilesystem.cpp,cmake\boost-fallback\test-stdexpfilesystem.cpp:<global>,,false,1,<global>,2
164,TYPE_DECL,,cmake\boost-fallback\test-stdfilesystem.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cmake\boost-fallback\test-stdfilesystem.cpp,cmake\boost-fallback\test-stdfilesystem.cpp:<global>,,false,1,<global>,2
178,TYPE_DECL,,cmake\boost-fallback\test-stdmutex.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cmake\boost-fallback\test-stdmutex.cpp,cmake\boost-fallback\test-stdmutex.cpp:<global>,,false,1,<global>,2
194,TYPE_DECL,,cmake\boost-fallback\test-stdsharedmutex.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cmake\boost-fallback\test-stdsharedmutex.cpp,cmake\boost-fallback\test-stdsharedmutex.cpp:<global>,,false,1,<global>,2
210,TYPE_DECL,,cmake\boost-fallback\test-stdsharedptr.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cmake\boost-fallback\test-stdsharedptr.cpp,cmake\boost-fallback\test-stdsharedptr.cpp:<global>,,false,1,<global>,2
213,TYPE_DECL,,,,"struct foo{
	int x;
}",1,cmake\boost-fallback\test-stdsharedptr.cpp,foo,,false,3,foo,1
228,TYPE_DECL,,cmake\boost-fallback\test-stdthread.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cmake\boost-fallback\test-stdthread.cpp,cmake\boost-fallback\test-stdthread.cpp:<global>,,false,1,<global>,2
244,TYPE_DECL,,cmake\compiler-features\test-make-unique.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cmake\compiler-features\test-make-unique.cpp,cmake\compiler-features\test-make-unique.cpp:<global>,,false,1,<global>,2
264,TYPE_DECL,,cmake\compiler-features\test-thread-local.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cmake\compiler-features\test-thread-local.cpp,cmake\compiler-features\test-thread-local.cpp:<global>,,false,1,<global>,2
287,TYPE_DECL,,cmake\compiler-features\test-unicode.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cmake\compiler-features\test-unicode.cpp,cmake\compiler-features\test-unicode.cpp:<global>,,false,1,<global>,3
290,TYPE_DECL,short unsigned,,,using UniChar = unsigned short;,1,cmake\compiler-features\test-unicode.cpp,UniChar,,false,8,UniChar,1
291,TYPE_DECL,ANY,,,using StringType = std::basic_string<UniChar>;,1,cmake\compiler-features\test-unicode.cpp,StringType,,false,9,StringType,2
292,TYPE_DECL,ANY,,,using StreamType = std::basic_ostringstream<UniChar>;,1,cmake\compiler-features\test-unicode.cpp,StreamType,,false,10,StreamType,3
308,TYPE_DECL,,cmake\pthread\test-pthread-getname.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cmake\pthread\test-pthread-getname.cpp,cmake\pthread\test-pthread-getname.cpp:<global>,,false,1,<global>,2
326,TYPE_DECL,,cmake\pthread\test-pthread-setname.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cmake\pthread\test-pthread-setname.cpp,cmake\pthread\test-pthread-setname.cpp:<global>,,false,1,<global>,2
345,TYPE_DECL,,examples\cpp\MyApp-qt.cpp:<global>,NAMESPACE_BLOCK,<global>,1,examples\cpp\MyApp-qt.cpp,examples\cpp\MyApp-qt.cpp:<global>,,false,1,<global>,4
413,TYPE_DECL,,examples\cpp\MyApp1.cpp:<global>,NAMESPACE_BLOCK,<global>,1,examples\cpp\MyApp1.cpp,examples\cpp\MyApp1.cpp:<global>,,false,1,<global>,3
485,TYPE_DECL,,examples\cpp\MyApp2.cpp:<global>,NAMESPACE_BLOCK,<global>,1,examples\cpp\MyApp2.cpp,examples\cpp\MyApp2.cpp:<global>,,false,1,<global>,3
531,TYPE_DECL,,examples\cpp\auto-configured.cpp:<global>,NAMESPACE_BLOCK,<global>,1,examples\cpp\auto-configured.cpp,examples\cpp\auto-configured.cpp:<global>,,false,1,<global>,2
543,TYPE_DECL,static_object,,,"struct ExampleStaticData {
	ExampleStaticData()	{
		LOG4CXX_DEBUG(rootLogger, ""static initializer message"");
	}
}",1,examples\cpp\auto-configured.cpp,ExampleStaticData,,false,21,ExampleStaticData,3
567,TYPE_DECL,,examples\cpp\com\foo\bar-qt.cpp:<global>,NAMESPACE_BLOCK,<global>,1,examples\cpp\com\foo\bar-qt.cpp,examples\cpp\com\foo\bar-qt.cpp:<global>,,false,1,<global>,3
589,TYPE_DECL,,examples\cpp\com\foo\bar.cpp:<global>,NAMESPACE_BLOCK,<global>,1,examples\cpp\com\foo\bar.cpp,examples\cpp\com\foo\bar.cpp:<global>,,false,1,<global>,2
607,TYPE_DECL,,examples\cpp\com\foo\bar.hpp:<global>,NAMESPACE_BLOCK,<global>,1,examples\cpp\com\foo\bar.hpp,examples\cpp\com\foo\bar.hpp:<global>,,false,1,<global>,2
612,TYPE_DECL,,,,"class Bar {
    static LoggerPtr m_logger;
    public:
        void doIt();
}",1,examples\cpp\com\foo\bar.hpp,com.foo.Bar,,false,6,Bar,1
638,TYPE_DECL,,examples\cpp\com\foo\config-qt.cpp:<global>,NAMESPACE_BLOCK,<global>,1,examples\cpp\com\foo\config-qt.cpp,examples\cpp\com\foo\config-qt.cpp:<global>,,false,1,<global>,10
760,TYPE_DECL,,examples\cpp\com\foo\config-qt.hpp:<global>,NAMESPACE_BLOCK,<global>,1,examples\cpp\com\foo\config-qt.hpp,examples\cpp\com\foo\config-qt.hpp:<global>,,false,1,<global>,2
769,TYPE_DECL,ANY,,,using LoggerPtr = log4cxx::LoggerPtr;,1,examples\cpp\com\foo\config-qt.hpp,LoggerPtr,,false,12,LoggerPtr,2
784,TYPE_DECL,,examples\cpp\com\foo\config.hpp:<global>,NAMESPACE_BLOCK,<global>,1,examples\cpp\com\foo\config.hpp,examples\cpp\com\foo\config.hpp:<global>,,false,1,<global>,2
789,TYPE_DECL,ANY,,,using LoggerPtr = log4cxx::LoggerPtr;,1,examples\cpp\com\foo\config.hpp,LoggerPtr,,false,9,LoggerPtr,1
803,TYPE_DECL,,examples\cpp\com\foo\config1.cpp:<global>,NAMESPACE_BLOCK,<global>,1,examples\cpp\com\foo\config1.cpp,examples\cpp\com\foo\config1.cpp:<global>,,false,1,<global>,4
839,TYPE_DECL,,examples\cpp\com\foo\config2.cpp:<global>,NAMESPACE_BLOCK,<global>,1,examples\cpp\com\foo\config2.cpp,examples\cpp\com\foo\config2.cpp:<global>,,false,1,<global>,5
893,TYPE_DECL,,examples\cpp\com\foo\config3.cpp:<global>,NAMESPACE_BLOCK,<global>,1,examples\cpp\com\foo\config3.cpp,examples\cpp\com\foo\config3.cpp:<global>,,false,1,<global>,14
1229,TYPE_DECL,,examples\cpp\console.cpp:<global>,NAMESPACE_BLOCK,<global>,1,examples\cpp\console.cpp,examples\cpp\console.cpp:<global>,,false,1,<global>,9
1469,TYPE_DECL,,examples\cpp\custom-appender.cpp:<global>,NAMESPACE_BLOCK,<global>,1,examples\cpp\custom-appender.cpp,examples\cpp\custom-appender.cpp:<global>,,false,1,<global>,5
1473,TYPE_DECL,,,,"class NullWriterAppender : public AppenderSkeleton {
public:
	DECLARE_LOG4CXX_OBJECT(NullWriterAppender)
	BEGIN_LOG4CXX_CAST_MAP()
	LOG4CXX_CAST_ENTRY(NullWriterAppender)
	LOG4CXX_CAST_ENTRY_CHAIN(AppenderSkeleton)
	END_LOG4CXX_CAST_MAP()

	NullWriterAppender(){}

	void close() override{}

	bool requiresLayout() const override {
		return false;
	}

	void append(const spi::LoggingEventPtr& event, helpers::Pool& p) override {
		// This gets called whenever there is a valid event for our appender.
	}

	void activateOptions(helpers::Pool& /* pool */) override {
		// Given all of our options, do something useful(e.g. open a file)
	}

	void setOption(const LogString& option, const LogString& value) override {
		if (helpers::StringHelper::equalsIgnoreCase(option,
										   LOG4CXX_STR(""SOMEVALUE""), LOG4CXX_STR(""somevalue""))){
			// Do something with the 'value' here.
		}
	}
}",1,examples\cpp\custom-appender.cpp,LOG4CXX_NS.NullWriterAppender,AppenderSkeleton,false,25,NullWriterAppender,1
1575,TYPE_DECL,,examples\cpp\delayedloop.cpp:<global>,NAMESPACE_BLOCK,<global>,1,examples\cpp\delayedloop.cpp,examples\cpp\delayedloop.cpp:<global>,,false,1,<global>,11
1578,TYPE_DECL,,,,"class DelayedLoop
{
        static LoggerPtr logger;

public:
        static void main(int argc, const char * const argv[])
        {
                if(argc == 2)
                {
                        init(argv[1]);
                }
                else
                {
                        usage(argv[0], ""Wrong number of arguments."");
                }

                test();
        }

        static void usage(const char * programName, const char * msg)
        {
                std::cout << msg << std::endl;
                std::cout << ""Usage: "" << programName <<
                                "" configFile"" << std::endl;
                exit(1);
        }


        static void init(const std::string& configFile)
        {
                if(configFile.length() > 4 &&
                     configFile.substr(configFile.length() - 4) == "".xml"")
                {
                        xml::DOMConfigurator::configureAndWatch(configFile, 3000);
                }
        ...",1,examples\cpp\delayedloop.cpp,DelayedLoop,,false,38,DelayedLoop,1
1756,TYPE_DECL,,examples\cpp\format-string.cpp:<global>,NAMESPACE_BLOCK,<global>,1,examples\cpp\format-string.cpp,examples\cpp\format-string.cpp:<global>,,false,1,<global>,10
1759,TYPE_DECL,,,,"struct MyStruct {
		int x;
}",1,examples\cpp\format-string.cpp,MyStruct,,false,31,MyStruct,1
1866,TYPE_DECL,,examples\cpp\ndc-example.cpp:<global>,NAMESPACE_BLOCK,<global>,1,examples\cpp\ndc-example.cpp,examples\cpp\ndc-example.cpp:<global>,,false,1,<global>,6
1929,TYPE_DECL,,examples\cpp\stream.cpp:<global>,NAMESPACE_BLOCK,<global>,1,examples\cpp\stream.cpp,examples\cpp\stream.cpp:<global>,,false,1,<global>,7
2050,TYPE_DECL,,main\cpp-qt\configuration.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp-qt\configuration.cpp,main\cpp-qt\configuration.cpp:<global>,,false,1,<global>,11
2357,TYPE_DECL,,main\cpp-qt\messagehandler.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp-qt\messagehandler.cpp,main\cpp-qt\messagehandler.cpp:<global>,,false,1,<global>,4
2491,TYPE_DECL,,main\cpp\action.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\action.cpp,main\cpp\action.cpp:<global>,,false,1,<global>,6
2595,TYPE_DECL,,main\cpp\andfilter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\andfilter.cpp,main\cpp\andfilter.cpp:<global>,,false,1,<global>,6
2598,TYPE_DECL,,,,"struct AndFilter::AndFilterPrivate : public FilterPrivate
{
	AndFilterPrivate() : FilterPrivate(),
		headFilter(),
		tailFilter(),
		acceptOnMatch(true) {}

	LOG4CXX_NS::spi::FilterPtr headFilter;
	LOG4CXX_NS::spi::FilterPtr tailFilter;
	bool acceptOnMatch;
}",1,main\cpp\andfilter.cpp,AndFilterPrivate,FilterPrivate,false,31,AndFilterPrivate,1
2780,TYPE_DECL,,main\cpp\appenderattachableimpl.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\appenderattachableimpl.cpp,main\cpp\appenderattachableimpl.cpp:<global>,,false,1,<global>,8
2785,TYPE_DECL,,,,"struct AppenderAttachableImpl::priv_data
{
	/** Array of appenders. */
	AppenderList  appenderList;
	mutable std::mutex m_mutex;
}",1,main\cpp\appenderattachableimpl.cpp,priv_data,,false,31,priv_data,3
3232,TYPE_DECL,,main\cpp\appenderskeleton.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\appenderskeleton.cpp,main\cpp\appenderskeleton.cpp:<global>,,false,1,<global>,9
3616,TYPE_DECL,,main\cpp\aprdatagramsocket.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\aprdatagramsocket.cpp,main\cpp\aprdatagramsocket.cpp:<global>,,false,1,<global>,5
3621,TYPE_DECL,,,,"struct APRDatagramSocket::APRDatagramSocketPriv : public DatagramSocketPriv {
	APRDatagramSocketPriv() :
		DatagramSocketPriv(),
		socket(nullptr)
	{}

	APRDatagramSocketPriv(int port) :
		DatagramSocketPriv(port),
		socket(nullptr)
	{}

	APRDatagramSocketPriv(int port, InetAddressPtr localAddress) :
		DatagramSocketPriv(port, localAddress),
		socket(nullptr)
	{}

	/** The APR socket */
	apr_socket_t* socket;

	/** The memory pool for the socket */
	Pool socketPool;
}",1,main\cpp\aprdatagramsocket.cpp,LOG4CXX_NS.helpers.APRDatagramSocketPriv,DatagramSocketPriv,false,30,APRDatagramSocketPriv,1
4111,TYPE_DECL,,main\cpp\aprinitializer.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\aprinitializer.cpp,main\cpp\aprinitializer.cpp:<global>,,false,1,<global>,9
4118,TYPE_DECL,,,,"struct APRInitializer::APRInitializerPrivate{
	APRInitializerPrivate() :
		p(0),
		startTime(0),
		tlsKey(0){

	}

	apr_pool_t* p;
	std::mutex mutex;
	std::list<FileWatchdog*> watchdogs;
	log4cxx_time_t startTime;
	apr_threadkey_t* tlsKey;
	std::map<size_t, ObjectPtr> objects;
}",1,main\cpp\aprinitializer.cpp,APRInitializerPrivate,,false,34,APRInitializerPrivate,3
4148,TYPE_DECL,,,,"struct apr_environment
{
    apr_environment()
    {
        apr_initialize();
    }
    ~apr_environment()
    {
        apr_terminate();
    }
}",1,main\cpp\aprinitializer.cpp,anonymous_namespace_4.apr_environment,,false,68,apr_environment,1
4466,TYPE_DECL,,main\cpp\aprserversocket.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\aprserversocket.cpp,main\cpp\aprserversocket.cpp:<global>,,false,1,<global>,7
4471,TYPE_DECL,,,,"struct APRServerSocket::APRServerSocketPriv : public ServerSocketPrivate {
	Pool pool;
	std::mutex mutex;
	apr_socket_t* socket;
}",1,main\cpp\aprserversocket.cpp,LOG4CXX_NS.helpers.APRServerSocketPriv,ServerSocketPrivate,false,32,APRServerSocketPriv,1
4906,TYPE_DECL,,main\cpp\aprsocket.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\aprsocket.cpp,main\cpp\aprsocket.cpp:<global>,,false,1,<global>,7
4911,TYPE_DECL,,,,"struct APRSocket::APRSocketPriv : public Socket::SocketPrivate {
	APRSocketPriv(InetAddressPtr& address, int port)
		: Socket::SocketPrivate(address, port)
		, socket(nullptr)
	{}

	APRSocketPriv(apr_socket_t* sock, apr_pool_t* p) :
		pool(p, true),
		socket(sock)
	{}

	Pool pool;
	apr_socket_t* socket;
}",1,main\cpp\aprsocket.cpp,LOG4CXX_NS.helpers.APRSocketPriv,Socket.SocketPrivate,false,31,APRSocketPriv,1
5281,TYPE_DECL,,main\cpp\asyncappender.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\asyncappender.cpp,main\cpp\asyncappender.cpp:<global>,,false,1,<global>,11
5337,TYPE_DECL,,,,enum { DEFAULT_BUFFER_SIZE = 128 },1,main\cpp\asyncappender.cpp,anonymous_enum_0,,false,47,anonymous_enum_0,1
5346,TYPE_DECL,,,,"class DiscardSummary
{
	private:
		/**
		 * First event of the highest severity.
		*/
		::LOG4CXX_NS::spi::LoggingEventPtr maxEvent;

		/**
		* Total count of messages discarded.
		*/
		int count;

	public:
		/**
		 * Create new instance.
		 *
		 * @param event event, may not be null.
		*/
		DiscardSummary(const ::LOG4CXX_NS::spi::LoggingEventPtr& event);
		/** Copy constructor.  */
		DiscardSummary(const DiscardSummary& src);
		/** Assignment operator. */
		DiscardSummary& operator=(const DiscardSummary& src);

		/**
		 * Add discarded event to summary.
		 *
		 * @param event event, may not be null.
		*/
		void add(const ::LOG4CXX_NS::spi::LoggingEventPtr& event);

		/**
		 * Create event with summary information.
		 *
		 * @return new event.
		 */
		::LOG4CXX_NS::spi::LoggingEventPtr createEvent(::LOG4CXX_NS::helpers::Pool& p);

		static
		::LOG4CXX_NS::spi::LoggingEventPtr createEvent(::LOG4CXX_NS::helpers::Pool& p,
			size_t discardedCount);
}",1,main\cpp\asyncappender.cpp,DiscardSummary,,false,49,DiscardSummary,2
5380,TYPE_DECL,ANY,,,"typedef std::map<LogString, DiscardSummary> DiscardMap;",45,main\cpp\asyncappender.cpp,DiscardMap,,false,93,DiscardMap,3
5381,TYPE_DECL,,,,"struct AsyncAppender::AsyncAppenderPriv : public AppenderSkeleton::AppenderSkeletonPrivate
{
	AsyncAppenderPriv() :
		AppenderSkeletonPrivate(),
		buffer(),
		bufferSize(DEFAULT_BUFFER_SIZE),
		appenders(std::make_shared<AppenderAttachableImpl>(pool)),
		dispatcher(),
		locationInfo(false),
		blocking(true)
#if LOG4CXX_EVENTS_AT_EXIT
		, atExitRegistryRaii([this]{atExitActivated();})
#endif
	{
	}

#if LOG4CXX_EVENTS_AT_EXIT
	void atExitActivated()
	{
		std::unique_lock<std::mutex> lock(bufferMutex);
		bufferNotFull.wait(lock, [this]() -> bool
			{ return buffer.empty() || closed; }
		);
	}
#endif

	/**
	 * Event buffer.
	*/
	LoggingEventList buffer;

	/**
	 *  Mutex used to guard access to buffer and discardMap.
	 */
	std::mutex bufferMutex;

	std::condition_variable bufferNotFull;
	std::condition_variable bufferNotEmpty;

	/**
	  * Map of DiscardSummary objects keyed by logger name.
	*/
	DiscardMap discardMap;

	/**
	 * Buffer size.
	*/
	int bufferSize;

	/**
	 * Nested appenders.
...",1,main\cpp\asyncappender.cpp,AsyncAppenderPriv,AppenderSkeleton.AppenderSkeletonPrivate,false,99,AsyncAppenderPriv,4
6679,TYPE_DECL,,main\cpp\atexitregistry.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\atexitregistry.cpp,main\cpp\atexitregistry.cpp:<global>,,false,1,<global>,4
6683,TYPE_DECL,s_instance,,,"struct AtExitRegistryImpl : public AtExitRegistry
	{
		~AtExitRegistryImpl()
		{
			std::lock_guard<std::recursive_mutex> lock(mutex);
			while(!actions.empty())
			{
				std::function<void()> action = std::move(actions.begin()->second);
				actions.erase(actions.begin());
				action();
			}
		}

		void add(void* key, std::function<void()> action)
		{
			std::lock_guard<std::recursive_mutex> lock(mutex);
			actions.emplace(key, std::move(action));
		}

		void del(void* key)
		{
			std::lock_guard<std::recursive_mutex> lock(mutex);
			actions.erase(key);
		}

	private:
		std::recursive_mutex mutex;
		std::map<void*, std::function<void()>> actions;
	}",2,main\cpp\atexitregistry.cpp,anonymous_namespace_1.AtExitRegistryImpl,AtExitRegistry,false,26,AtExitRegistryImpl,1
6832,TYPE_DECL,,main\cpp\basicconfigurator.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\basicconfigurator.cpp,main\cpp\basicconfigurator.cpp:<global>,,false,1,<global>,8
6920,TYPE_DECL,,main\cpp\bufferedwriter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\bufferedwriter.cpp,main\cpp\bufferedwriter.cpp:<global>,,false,1,<global>,4
6923,TYPE_DECL,,,,"struct BufferedWriter::BufferedWriterPriv
{
	BufferedWriterPriv(WriterPtr& out1, size_t sz1) :
		out(out1),
		sz(sz1)
	{}

	WriterPtr out;
	size_t sz;
	LogString buf;
}",1,main\cpp\bufferedwriter.cpp,BufferedWriterPriv,,false,24,BufferedWriterPriv,1
7101,TYPE_DECL,,main\cpp\bytearrayinputstream.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\bytearrayinputstream.cpp,main\cpp\bytearrayinputstream.cpp:<global>,,false,1,<global>,8
7104,TYPE_DECL,,,,"struct ByteArrayInputStream::ByteArrayInputStreamPriv
{
	ByteArrayInputStreamPriv(const ByteList& bytes) :
		buf(bytes),
		pos(0) {}

	ByteList buf;
	size_t pos;
}",1,main\cpp\bytearrayinputstream.cpp,ByteArrayInputStreamPriv,,false,29,ByteArrayInputStreamPriv,1
7215,TYPE_DECL,,main\cpp\bytearrayoutputstream.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\bytearrayoutputstream.cpp,main\cpp\bytearrayoutputstream.cpp:<global>,,false,1,<global>,6
7218,TYPE_DECL,,,,"struct ByteArrayOutputStream::ByteArrayOutputStreamPriv
{
	ByteList array;
}",1,main\cpp\bytearrayoutputstream.cpp,ByteArrayOutputStreamPriv,,false,27,ByteArrayOutputStreamPriv,1
7308,TYPE_DECL,,main\cpp\bytebuffer.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\bytebuffer.cpp,main\cpp\bytebuffer.cpp:<global>,,false,1,<global>,5
7311,TYPE_DECL,,,,"struct ByteBuffer::ByteBufferPriv
{
	ByteBufferPriv(char* data1, size_t capacity) :
		base(data1), pos(0), lim(capacity), cap(capacity) {}

	char* base;
	size_t pos;
	size_t lim;
	size_t cap;
}",1,main\cpp\bytebuffer.cpp,ByteBufferPriv,,false,25,ByteBufferPriv,1
7519,TYPE_DECL,,main\cpp\cacheddateformat.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\cacheddateformat.cpp,main\cpp\cacheddateformat.cpp:<global>,,false,1,<global>,6
7522,TYPE_DECL,,,,"struct CachedDateFormat::CachedDateFormatPriv
{
	CachedDateFormatPriv(DateFormatPtr dateFormat, int expiration1) :
		formatter(dateFormat),
		millisecondStart(0),
		slotBegin(std::numeric_limits<log4cxx_time_t>::min()),
		cache(50, 0x20),
		expiration(expiration1),
		previousTime(std::numeric_limits<log4cxx_time_t>::min())
	{}

	/**
	 *   Wrapped formatter.
	 */
	LOG4CXX_NS::helpers::DateFormatPtr formatter;

	/**
	 *  Index of initial digit of millisecond pattern or
	 *   UNRECOGNIZED_MILLISECONDS or NO_MILLISECONDS.
	 */
	mutable int millisecondStart;

	/**
	 *  Integral second preceding the previous convered Date.
	 */
	mutable log4cxx_time_t slotBegin;


	/**
	 *  Cache of previous conversion.
	 */
	mutable LogString cache;


	/**
	 *  Maximum validity period for the cache.
	 *  Typically 1, use cache for duplicate requests only, or
	 *  1000000, use cache for requests within the same integral second.
	 */
	const int expiration;

	/**
	 *  Date requested in previous conversion.
...",1,main\cpp\cacheddateformat.cpp,CachedDateFormatPriv,,false,29,CachedDateFormatPriv,1
8229,TYPE_DECL,,main\cpp\charsetdecoder.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\charsetdecoder.cpp,main\cpp\charsetdecoder.cpp:<global>,,false,1,<global>,14
8236,TYPE_DECL,,,,"class TrivialCharsetDecoder : public CharsetDecoder
{
	public:
		TrivialCharsetDecoder()
		{
		}

		virtual ~TrivialCharsetDecoder()
		{
		}

		virtual log4cxx_status_t decode(ByteBuffer& in,
			LogString& out)
		{
			size_t remaining = in.remaining();

			if ( remaining > 0)
			{
				const logchar* src = (const logchar*) (in.data() + in.position());
				size_t count = remaining / sizeof(logchar);
				out.append(src, count);
				in.position(in.position() + remaining);
			}

			return APR_SUCCESS;
		}



	private:
		TrivialCharsetDecoder(const TrivialCharsetDecoder&);
		TrivialCharsetDecoder& operator=(const TrivialCharsetDecoder&);
}",1,main\cpp\charsetdecoder.cpp,LOG4CXX_NS.helpers.TrivialCharsetDecoder,CharsetDecoder,false,233,TrivialCharsetDecoder,1
8312,TYPE_DECL,,,,"class UTF8CharsetDecoder : public CharsetDecoder
{
	public:
		UTF8CharsetDecoder()
		{
		}

		virtual ~UTF8CharsetDecoder()
		{
		}

	private:
		virtual log4cxx_status_t decode(ByteBuffer& in,
			LogString& out)
		{
			if (in.remaining() > 0)
			{
				std::string tmp(in.current(), in.remaining());
				std::string::const_iterator iter = tmp.begin();

				while (iter != tmp.end())
				{
					unsigned int sv = Transcoder::decode(tmp, iter);

					if (sv == 0xFFFF)
					{
						size_t offset = iter - tmp.begin();
						in.position(in.position() + offset);
						return APR_BADARG;
					}
					else
					{
						Transcoder::encode(sv, out);
					}
				}

				in.position(in.limit());
			}

			return APR_SUCCESS;
		}

	private:
		UTF8CharsetDecoder(const UTF8CharsetDecoder&);
		UTF8CharsetDecoder& operator=(const UTF8CharsetDecoder&);
}",1,main\cpp\charsetdecoder.cpp,LOG4CXX_NS.helpers.UTF8CharsetDecoder,CharsetDecoder,false,275,UTF8CharsetDecoder,2
8423,TYPE_DECL,,,,"class ISOLatinCharsetDecoder : public CharsetDecoder
{
	public:
		ISOLatinCharsetDecoder()
		{
		}

		virtual ~ISOLatinCharsetDecoder()
		{
		}

	private:
		virtual log4cxx_status_t decode(ByteBuffer& in,
			LogString& out)
		{
			if (in.remaining() > 0)
			{

				const unsigned char* src = (unsigned char*) in.current();
				const unsigned char* srcEnd = src + in.remaining();

				while (src < srcEnd)
				{
					unsigned int sv = *(src++);
					Transcoder::encode(sv, out);
				}

				in.position(in.limit());
			}

			return APR_SUCCESS;
		}



	private:
		ISOLatinCharsetDecoder(const ISOLatinCharsetDecoder&);
		ISOLatinCharsetDecoder& operator=(const ISOLatinCharsetDecoder&);
}",1,main\cpp\charsetdecoder.cpp,LOG4CXX_NS.helpers.ISOLatinCharsetDecoder,CharsetDecoder,false,327,ISOLatinCharsetDecoder,3
8501,TYPE_DECL,,,,"class USASCIICharsetDecoder : public CharsetDecoder
{
	public:
		USASCIICharsetDecoder()
		{
		}

		virtual ~USASCIICharsetDecoder()
		{
		}

	private:

		virtual log4cxx_status_t decode(ByteBuffer& in,
			LogString& out)
		{
			log4cxx_status_t stat = APR_SUCCESS;

			if (in.remaining() > 0)
			{

				const unsigned char* src = (unsigned char*) in.current();
				const unsigned char* srcEnd = src + in.remaining();

				while (src < srcEnd)
				{
					unsigned char sv = *src;

					if (sv < 0x80)
					{
						src++;
						Transcoder::encode(sv, out);
					}
					else
					{
						stat = APR_BADARG;
						break;
					}
				}

				in.position(src - (const unsigned char*) in.data());
			}

			return stat;
		}



	private:
		USASCIICharsetDecoder(const USASCIICharsetDecoder&);
		USASCIICharsetDecoder& operator=(const USASCIICharsetDecoder&);
}",1,main\cpp\charsetdecoder.cpp,LOG4CXX_NS.helpers.USASCIICharsetDecoder,CharsetDecoder,false,372,USASCIICharsetDecoder,4
8599,TYPE_DECL,,,,"class LocaleCharsetDecoder : public CharsetDecoder
{
	public:
		LocaleCharsetDecoder() : state()
		{
		}
		log4cxx_status_t decode(ByteBuffer& in, LogString& out) override
		{
			log4cxx_status_t result = APR_SUCCESS;
			const char* p = in.current();
			size_t i = in.position();
			size_t remain = in.limit() - i;
#if !LOG4CXX_CHARSET_EBCDIC
			if (std::mbsinit(&this->state)) // ByteBuffer not partially decoded?
			{
				// Copy single byte characters
				for (; 0 < remain && ((unsigned int) *p) < 0x80; --remain, ++i, p++)
				{
					out.append(1, *p);
				}
			}
#endif
			// Decode characters that may be represented by multiple bytes
			while (0 < remain)
			{
				wchar_t ch = 0;
				size_t n = std::mbrtowc(&ch, p, remain, &this->state);
				if (0 == n) // NULL encountered?
				{
					++i;
					break;
				}
				if (static_cast<std::size_t>(-1) == n) // decoding error?
				{
					result = APR_BADARG;
					break;
				}
				if (static_cast<std::size_t>(-2) == n) // incomplete sequence?...",1,main\cpp\charsetdecoder.cpp,LOG4CXX_NS.helpers.LocaleCharsetDecoder,CharsetDecoder,false,428,LocaleCharsetDecoder,5
8995,TYPE_DECL,,main\cpp\charsetencoder.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\charsetencoder.cpp,main\cpp\charsetencoder.cpp:<global>,,false,1,<global>,13
9027,TYPE_DECL,,,,"class USASCIICharsetEncoder : public CharsetEncoder
{
	public:
		USASCIICharsetEncoder()
		{
		}

		virtual log4cxx_status_t encode(const LogString& in,
			LogString::const_iterator& iter,
			ByteBuffer& out)
		{
			log4cxx_status_t stat = APR_SUCCESS;

			if (iter != in.end())
			{
				while (out.remaining() > 0 && iter != in.end())
				{
					LogString::const_iterator prev(iter);
					unsigned int sv = Transcoder::decode(in, iter);

					if (sv <= 0x7F)
					{
						out.put((char) sv);
					}
					else
					{
						iter = prev;
						stat = APR_BADARG;
						break;
					}
				}
			}

			return stat;
		}

	private:
		USASCIICharsetEncoder(const USASCIICharsetEncoder&);
		USASCIICharsetEncoder& operator=(const USASCIICharsetEncoder&);
}",1,main\cpp\charsetencoder.cpp,LOG4CXX_NS.helpers.USASCIICharsetEncoder,CharsetEncoder,false,218,USASCIICharsetEncoder,1
9111,TYPE_DECL,,,,"class ISOLatinCharsetEncoder : public CharsetEncoder
{
	public:
		ISOLatinCharsetEncoder()
		{
		}

		virtual log4cxx_status_t encode(const LogString& in,
			LogString::const_iterator& iter,
			ByteBuffer& out)
		{
			log4cxx_status_t stat = APR_SUCCESS;

			if (iter != in.end())
			{
				while (out.remaining() > 0 && iter != in.end())
				{
					LogString::const_iterator prev(iter);
					unsigned int sv = Transcoder::decode(in, iter);

					if (sv <= 0xFF)
					{
						out.put((char) sv);
					}
					else
					{
						iter = prev;
						stat = APR_BADARG;
						break;
					}
				}
			}

			return stat;
		}

	private:
		ISOLatinCharsetEncoder(const ISOLatinCharsetEncoder&);
		ISOLatinCharsetEncoder& operator=(const ISOLatinCharsetEncoder&);
}",1,main\cpp\charsetencoder.cpp,LOG4CXX_NS.helpers.ISOLatinCharsetEncoder,CharsetEncoder,false,262,ISOLatinCharsetEncoder,2
9195,TYPE_DECL,,,,"class TrivialCharsetEncoder : public CharsetEncoder
{
	public:
		TrivialCharsetEncoder()
		{
		}


		virtual log4cxx_status_t encode(const LogString& in,
			LogString::const_iterator& iter,
			ByteBuffer& out)
		{
			if (iter != in.end())
			{
				size_t requested = in.length() - (iter - in.begin());

				if (requested > out.remaining() / sizeof(logchar))
				{
					requested = out.remaining() / sizeof(logchar);
				}

				memcpy(out.current(),
					(const char*) in.data() + (iter - in.begin()),
					requested * sizeof(logchar));
				iter += requested;
				out.position(out.position() + requested * sizeof(logchar));
			}

			return APR_SUCCESS;
		}

	private:
		TrivialCharsetEncoder(const TrivialCharsetEncoder&);
		TrivialCharsetEncoder& operator=(const TrivialCharsetEncoder&);
}",1,main\cpp\charsetencoder.cpp,LOG4CXX_NS.helpers.TrivialCharsetEncoder,CharsetEncoder,false,306,TrivialCharsetEncoder,3
9299,TYPE_DECL,,,,"class UTF8CharsetEncoder : public CharsetEncoder
{
	public:
		UTF8CharsetEncoder()
		{
		}

		virtual log4cxx_status_t encode(const LogString& in,
			LogString::const_iterator& iter,
			ByteBuffer& out)
		{
			while (iter != in.end() && out.remaining() >= 8)
			{
				unsigned int sv = Transcoder::decode(in, iter);

				if (sv == 0xFFFF)
				{
					return APR_BADARG;
				}

				Transcoder::encodeUTF8(sv, out);
			}

			return APR_SUCCESS;
		}

	private:
		UTF8CharsetEncoder(const UTF8CharsetEncoder&);
		UTF8CharsetEncoder& operator=(const UTF8CharsetEncoder&);
}",1,main\cpp\charsetencoder.cpp,LOG4CXX_NS.helpers.UTF8CharsetEncoder,CharsetEncoder,false,348,UTF8CharsetEncoder,4
9360,TYPE_DECL,,,,"class UTF16BECharsetEncoder : public CharsetEncoder
{
	public:
		UTF16BECharsetEncoder()
		{
		}

		virtual log4cxx_status_t encode(const LogString& in,
			LogString::const_iterator& iter,
			ByteBuffer& out)
		{
			while (iter != in.end() && out.remaining() >= 4)
			{
				unsigned int sv = Transcoder::decode(in, iter);

				if (sv == 0xFFFF)
				{
					return APR_BADARG;
				}

				Transcoder::encodeUTF16BE(sv, out);
			}

			return APR_SUCCESS;
		}

	private:
		UTF16BECharsetEncoder(const UTF16BECharsetEncoder&);
		UTF16BECharsetEncoder& operator=(const UTF16BECharsetEncoder&);
}",1,main\cpp\charsetencoder.cpp,LOG4CXX_NS.helpers.UTF16BECharsetEncoder,CharsetEncoder,false,383,UTF16BECharsetEncoder,5
9421,TYPE_DECL,,,,"class UTF16LECharsetEncoder : public CharsetEncoder
{
	public:
		UTF16LECharsetEncoder()
		{
		}


		virtual log4cxx_status_t encode(const LogString& in,
			LogString::const_iterator& iter,
			ByteBuffer& out)
		{
			while (iter != in.end() && out.remaining() >= 4)
			{
				unsigned int sv = Transcoder::decode(in, iter);

				if (sv == 0xFFFF)
				{
					return APR_BADARG;
				}

				Transcoder::encodeUTF16LE(sv, out);
			}

			return APR_SUCCESS;
		}
	private:
		UTF16LECharsetEncoder(const UTF16LECharsetEncoder&);
		UTF16LECharsetEncoder& operator=(const UTF16LECharsetEncoder&);
}",1,main\cpp\charsetencoder.cpp,LOG4CXX_NS.helpers.UTF16LECharsetEncoder,CharsetEncoder,false,417,UTF16LECharsetEncoder,6
9482,TYPE_DECL,,,,"class LocaleCharsetEncoder : public CharsetEncoder
{
	public:
		LocaleCharsetEncoder() : state()
		{
		}
		log4cxx_status_t encode
			( const LogString&           in
			, LogString::const_iterator& iter
			, ByteBuffer&                out
			) override
		{
			log4cxx_status_t result = APR_SUCCESS;
#if !LOG4CXX_CHARSET_EBCDIC
			char* current = out.current();
			size_t remain = out.remaining();
			if (std::mbsinit(&this->state)) // ByteBuffer not partially encoded?
			{
				// Copy single byte characters
				for (;
					iter != in.end() && ((unsigned int) *iter) < 0x80 && 0 < remain;
					iter++, remain--, current++)
				{
					*current = *iter;
				}
			}
#endif
			// Encode characters that may require multiple bytes
			while (iter != in.end() && MB_CUR_MAX <= remain)
			{
				auto ch = Transcoder::decode(in, iter);
				auto n = std::wcrtomb(current, ch, &this->state);
				if (static_cast<std::size_t>(-1) == n) // not a valid wide character?
				{
					result = APR_BADARG;
					brea...",1,main\cpp\charsetencoder.cpp,LOG4CXX_NS.helpers.LocaleCharsetEncoder,CharsetEncoder,false,451,LocaleCharsetEncoder,7
10047,TYPE_DECL,,main\cpp\class.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\class.cpp,main\cpp\class.cpp:<global>,,false,1,<global>,40
10345,TYPE_DECL,,main\cpp\classnamepatternconverter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\classnamepatternconverter.cpp,main\cpp\classnamepatternconverter.cpp:<global>,,false,1,<global>,5
10424,TYPE_DECL,,main\cpp\classregistration.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\classregistration.cpp,main\cpp\classregistration.cpp:<global>,,false,1,<global>,4
10451,TYPE_DECL,,main\cpp\colorendpatternconverter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\colorendpatternconverter.cpp,main\cpp\colorendpatternconverter.cpp:<global>,,false,1,<global>,6
10501,TYPE_DECL,,main\cpp\colorstartpatternconverter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\colorstartpatternconverter.cpp,main\cpp\colorstartpatternconverter.cpp:<global>,,false,1,<global>,7
10950,TYPE_DECL,,,,"struct ColorStartPatternConverter::ColorPatternConverterPrivate : public PatternConverterPrivate
{
	ColorPatternConverterPrivate( const LogString& name, const LogString& style ) :
		PatternConverterPrivate( name, style ){}

	LogString m_fatalColor;
	LogString m_errorColor;
	LogString m_warnColor;
	LogString m_infoColor;
	LogString m_debugColor;
	LogString m_traceColor;
}",1,main\cpp\colorstartpatternconverter.cpp,ColorPatternConverterPrivate,PatternConverterPrivate,false,135,ColorPatternConverterPrivate,6
11445,TYPE_DECL,,main\cpp\configurator.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\configurator.cpp,main\cpp\configurator.cpp:<global>,,false,1,<global>,5
11474,TYPE_DECL,,main\cpp\consoleappender.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\consoleappender.cpp,main\cpp\consoleappender.cpp:<global>,,false,1,<global>,10
11477,TYPE_DECL,,,,"struct ConsoleAppender::ConsoleAppenderPriv : public WriterAppender::WriterAppenderPriv
{
	ConsoleAppenderPriv(LogString target) :
		WriterAppenderPriv(),
		target(target) {}

	LogString target;
}",1,main\cpp\consoleappender.cpp,ConsoleAppenderPriv,WriterAppender.WriterAppenderPriv,false,30,ConsoleAppenderPriv,1
11764,TYPE_DECL,,main\cpp\cyclicbuffer.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\cyclicbuffer.cpp,main\cpp\cyclicbuffer.cpp:<global>,,false,1,<global>,7
11767,TYPE_DECL,,,,"struct CyclicBuffer::CyclicBufferPriv
{
	CyclicBufferPriv(int maxSize1) :
		ea(maxSize1), first(0), last(0), numElems(0), maxSize(maxSize1) {}

	LOG4CXX_NS::spi::LoggingEventList ea;
	int first;
	int last;
	int numElems;
	int maxSize;
}",1,main\cpp\cyclicbuffer.cpp,CyclicBufferPriv,,false,28,CyclicBufferPriv,1
12116,TYPE_DECL,,main\cpp\datagrampacket.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\datagrampacket.cpp,main\cpp\datagrampacket.cpp:<global>,,false,1,<global>,3
12119,TYPE_DECL,,,,"struct DatagramPacket::DatagramPacketPriv
{
	DatagramPacketPriv(void* buf1, int length1)
		: buf(buf1), offset(0), length(length1), address(), port(0)
	{
	}

	DatagramPacketPriv(void* buf1, int length1, InetAddressPtr address1,
		int port1)
		: buf(buf1), offset(0), length(length1), address(address1), port(port1)
	{
	}

	DatagramPacketPriv(void* buf1, int offset1, int length1)
		: buf(buf1), offset(offset1), length(length1), address(), port(0)
	{
	}

	DatagramPacketPriv(void* buf1, int offset1, int length1,
		InetAddressPtr address1, int port1)
		: buf(buf1), offset(offset1), length(length1), address(address1), port(port1)
	{
	}

	/** the data for this packet. */
	void* buf;

	/** The offset of the data for this packet. */
	int offset;

	/** The length of the data for this packet. */
	int length;

	/** The IP address for this packet. */
	InetAddressPtr address;

	/** The UDP port number of the remote host. */
	int port;
}",1,main\cpp\datagrampacket.cpp,DatagramPacketPriv,,false,23,DatagramPacketPriv,1
12309,TYPE_DECL,,main\cpp\datagramsocket.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\datagramsocket.cpp,main\cpp\datagramsocket.cpp:<global>,,false,1,<global>,8
12457,TYPE_DECL,,main\cpp\date.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\date.cpp,main\cpp\date.cpp:<global>,,false,1,<global>,4
12566,TYPE_DECL,,main\cpp\dateformat.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\dateformat.cpp,main\cpp\dateformat.cpp:<global>,,false,1,<global>,4
12626,TYPE_DECL,,main\cpp\datepatternconverter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\datepatternconverter.cpp,main\cpp\datepatternconverter.cpp:<global>,,false,1,<global>,14
12629,TYPE_DECL,,,,"struct DatePatternConverter::DatePatternConverterPrivate : public PatternConverterPrivate
{
	DatePatternConverterPrivate( const LogString& name, const LogString& style, DateFormatPtr _df ):
		PatternConverterPrivate(name, style),
		df(_df) {}
	/**
	 * Date format.
	 */
	LOG4CXX_NS::helpers::DateFormatPtr df;
}",1,main\cpp\datepatternconverter.cpp,DatePatternConverterPrivate,PatternConverterPrivate,false,37,DatePatternConverterPrivate,1
13008,TYPE_DECL,,main\cpp\dbappender.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\dbappender.cpp,main\cpp\dbappender.cpp:<global>,,false,1,<global>,24
13013,TYPE_DECL,,,,"struct DBAppender::DBAppenderPriv : public AppenderSkeleton::AppenderSkeletonPrivate
{
    DBAppenderPriv() :
        AppenderSkeletonPrivate()
	{
		static bool initialized = false;
		if (!initialized)
		{
			initialized = true;
			apr_status_t stat = apr_dbd_init(m_pool.getAPRPool());
			assert(stat == APR_SUCCESS);
		}
	}

    apr_dbd_driver_t* m_driver = nullptr;
    apr_dbd_t* m_databaseHandle = nullptr;
    apr_dbd_prepared_t* preparedStmt = nullptr;
    std::vector<LogString> mappedName;
    std::string driverName;
    std::string driverParams;
    std::string databaseName;
    std::string sqlStatement;
    Pool m_pool;
    std::vector<pattern::LoggingEventPatternConverterPtr> converters;
}",1,main\cpp\dbappender.cpp,DBAppenderPriv,AppenderSkeleton.AppenderSkeletonPrivate,false,51,DBAppenderPriv,3
14242,TYPE_DECL,,main\cpp\defaultconfigurator.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\defaultconfigurator.cpp,main\cpp\defaultconfigurator.cpp:<global>,,false,1,<global>,11
14576,TYPE_DECL,ANY,,,"using ResultType = std::tuple<LOG4CXX_NS::spi::ConfigurationStatus, LogString>;",2,main\cpp\defaultconfigurator.cpp,ResultType,,false,175,ResultType,1
14668,TYPE_DECL,,main\cpp\defaultloggerfactory.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\defaultloggerfactory.cpp,main\cpp\defaultloggerfactory.cpp:<global>,,false,1,<global>,4
14694,TYPE_DECL,,main\cpp\defaultrepositoryselector.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\defaultrepositoryselector.cpp,main\cpp\defaultrepositoryselector.cpp:<global>,,false,1,<global>,2
14697,TYPE_DECL,,,,"struct DefaultRepositorySelector::DefaultRepositorySelectorPrivate
{
	LoggerRepositoryPtr repository;
}",1,main\cpp\defaultrepositoryselector.cpp,DefaultRepositorySelectorPrivate,,false,24,DefaultRepositorySelectorPrivate,1
14787,TYPE_DECL,,main\cpp\domconfigurator.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\domconfigurator.cpp,main\cpp\domconfigurator.cpp:<global>,,false,1,<global>,33
14790,TYPE_DECL,,,,"struct DOMConfigurator::DOMConfiguratorPrivate
{
	helpers::Properties props;
	spi::LoggerRepositoryPtr repository;
	spi::LoggerFactoryPtr loggerFactory;
}",1,main\cpp\domconfigurator.cpp,DOMConfiguratorPrivate,,false,61,DOMConfiguratorPrivate,1
14796,TYPE_DECL,,,,"class XMLWatchdog  : public FileWatchdog
{
	public:
		XMLWatchdog(const File& filename) : FileWatchdog(filename)
		{
		}

		/**
		Call DOMConfigurator#doConfigure with the
		<code>filename</code> to reconfigure log4cxx.
		*/
		void doOnChange()
		{
			DOMConfigurator().doConfigure(file(),
				LogManager::getLoggerRepository());
		}
}",1,main\cpp\domconfigurator.cpp,LOG4CXX_NS.xml.XMLWatchdog,FileWatchdog,false,72,XMLWatchdog,1
17450,TYPE_DECL,,main\cpp\exception.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\exception.cpp,main\cpp\exception.cpp:<global>,,false,1,<global>,9
18207,TYPE_DECL,,main\cpp\fallbackerrorhandler.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\fallbackerrorhandler.cpp,main\cpp\fallbackerrorhandler.cpp:<global>,,false,1,<global>,10
18212,TYPE_DECL,,,,"struct FallbackErrorHandler::FallbackErrorHandlerPrivate
{
	AppenderWeakPtr backup;
	AppenderWeakPtr primary;
	std::vector<LoggerPtr> loggers;
}",1,main\cpp\fallbackerrorhandler.cpp,FallbackErrorHandlerPrivate,,false,35,FallbackErrorHandlerPrivate,3
18513,TYPE_DECL,,main\cpp\file.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\file.cpp,main\cpp\file.cpp:<global>,,false,1,<global>,9
18516,TYPE_DECL,,,,"struct File::FilePrivate{
	FilePrivate() :
		autoDelete(false)
	{}

	FilePrivate(LogString path) :
		path(path),
		autoDelete(false)
	{}

	FilePrivate(LogString path, bool autoDelete) :
		path(path),
		autoDelete(autoDelete)
	{}

	LogString path;
	bool autoDelete;
}",1,main\cpp\file.cpp,FilePrivate,,false,30,FilePrivate,1
19177,TYPE_DECL,,main\cpp\fileappender.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\fileappender.cpp,main\cpp\fileappender.cpp:<global>,,false,1,<global>,14
20193,TYPE_DECL,,main\cpp\filedatepatternconverter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\filedatepatternconverter.cpp,main\cpp\filedatepatternconverter.cpp:<global>,,false,1,<global>,4
20250,TYPE_DECL,,main\cpp\fileinputstream.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\fileinputstream.cpp,main\cpp\fileinputstream.cpp:<global>,,false,1,<global>,8
20253,TYPE_DECL,,,,"struct FileInputStream::FileInputStreamPrivate
{
	FileInputStreamPrivate() : fileptr(nullptr) {}

	Pool pool;
	apr_file_t* fileptr;
}",1,main\cpp\fileinputstream.cpp,FileInputStreamPrivate,,false,32,FileInputStreamPrivate,1
20473,TYPE_DECL,,main\cpp\filelocationpatternconverter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\filelocationpatternconverter.cpp,main\cpp\filelocationpatternconverter.cpp:<global>,,false,1,<global>,5
20528,TYPE_DECL,,main\cpp\fileoutputstream.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\fileoutputstream.cpp,main\cpp\fileoutputstream.cpp:<global>,,false,1,<global>,8
20531,TYPE_DECL,,,,"struct FileOutputStream::FileOutputStreamPrivate
{
	FileOutputStreamPrivate() : fileptr(nullptr) {}

	Pool pool;
	apr_file_t* fileptr;
}",1,main\cpp\fileoutputstream.cpp,FileOutputStreamPrivate,,false,32,FileOutputStreamPrivate,1
20782,TYPE_DECL,,main\cpp\filerenameaction.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\filerenameaction.cpp,main\cpp\filerenameaction.cpp:<global>,,false,1,<global>,4
20785,TYPE_DECL,,,,"struct FileRenameAction::FileRenameActionPrivate : public ActionPrivate
{
	FileRenameActionPrivate( const File& toRename,
		const File& renameTo,
		bool renameEmptyFile1):
		source(toRename), destination(renameTo), renameEmptyFile(renameEmptyFile1) {}

	const File source;
	const File destination;
	bool renameEmptyFile;
}",1,main\cpp\filerenameaction.cpp,FileRenameActionPrivate,ActionPrivate,false,28,FileRenameActionPrivate,1
20853,TYPE_DECL,,main\cpp\filewatchdog.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\filewatchdog.cpp,main\cpp\filewatchdog.cpp:<global>,,false,1,<global>,10
20860,TYPE_DECL,,,,"struct FileWatchdog::FileWatchdogPrivate{
	FileWatchdogPrivate(const File& file1) :
		file(file1), delay(DEFAULT_DELAY), lastModif(0),
		warnedAlready(false), interrupted(0), thread(){}

	/**
	The name of the file to observe  for changes.
	*/
	File file;

	/**
	The delay to observe between every check.
	By default set DEFAULT_DELAY.*/
	long delay;
	log4cxx_time_t lastModif;
	bool warnedAlready;
	volatile int interrupted;
	Pool pool;
	std::thread thread;
	std::condition_variable interrupt;
	std::mutex interrupt_mutex;
}",1,main\cpp\filewatchdog.cpp,FileWatchdogPrivate,,false,33,FileWatchdogPrivate,3
21220,TYPE_DECL,,main\cpp\filter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\filter.cpp,main\cpp\filter.cpp:<global>,,false,1,<global>,4
21273,TYPE_DECL,,main\cpp\filterbasedtriggeringpolicy.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\filterbasedtriggeringpolicy.cpp,main\cpp\filterbasedtriggeringpolicy.cpp:<global>,,false,1,<global>,4
21278,TYPE_DECL,,,,"struct FilterBasedTriggeringPolicy::FilterBasedTriggeringPolicyPrivate{

	/**
	 * The first filter in the filter chain. Set to <code>null</code> initially.
	 */
	LOG4CXX_NS::spi::FilterPtr headFilter;

	/**
	 * The last filter in the filter chain.
	 */
	LOG4CXX_NS::spi::FilterPtr tailFilter;
}",1,main\cpp\filterbasedtriggeringpolicy.cpp,FilterBasedTriggeringPolicyPrivate,,false,28,FilterBasedTriggeringPolicyPrivate,3
21473,TYPE_DECL,,main\cpp\fixedwindowrollingpolicy.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\fixedwindowrollingpolicy.cpp,main\cpp\fixedwindowrollingpolicy.cpp:<global>,,false,1,<global>,15
21476,TYPE_DECL,,,,"struct FixedWindowRollingPolicy::FixedWindowRollingPolicyPrivate : public RollingPolicyBasePrivate {
	FixedWindowRollingPolicyPrivate() :
		RollingPolicyBasePrivate(),
		minIndex(1),
		maxIndex(7),
		explicitActiveFile(false)
	{}

	int minIndex;
	int maxIndex;
	bool explicitActiveFile;
	bool throwIOExceptionOnForkFailure = true;
}",1,main\cpp\fixedwindowrollingpolicy.cpp,FixedWindowRollingPolicyPrivate,RollingPolicyBasePrivate,false,39,FixedWindowRollingPolicyPrivate,1
22528,TYPE_DECL,,main\cpp\fmtlayout.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\fmtlayout.cpp,main\cpp\fmtlayout.cpp:<global>,,false,1,<global>,12
22531,TYPE_DECL,,,,"struct FMTLayout::FMTLayoutPrivate{
	FMTLayoutPrivate()
		: expectedPatternLength(100)
		{}

	FMTLayoutPrivate(const LogString& pattern)
		: conversionPattern(pattern)
		, expectedPatternLength(100)
	{}

	LogString conversionPattern;

	// Expected length of a formatted event excluding the message text
	size_t expectedPatternLength;
}",1,main\cpp\fmtlayout.cpp,FMTLayoutPrivate,,false,33,FMTLayoutPrivate,1
22948,TYPE_DECL,,main\cpp\formattinginfo.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\formattinginfo.cpp,main\cpp\formattinginfo.cpp:<global>,,false,1,<global>,4
22951,TYPE_DECL,,,,"struct FormattingInfo::FormattingInfoPrivate
{
	FormattingInfoPrivate(const bool leftAlign1, const int minLength1, const int maxLength1):
		minLength(minLength1),
		maxLength(maxLength1),
		leftAlign(leftAlign1) {}

	/**
	 * Minimum length.
	 */
	const int minLength;

	/**
	 * Maximum length.
	 */
	const int maxLength;

	/**
	 * Alignment.
	 */
	const bool leftAlign;
}",1,main\cpp\formattinginfo.cpp,FormattingInfoPrivate,,false,25,FormattingInfoPrivate,1
23116,TYPE_DECL,,main\cpp\fulllocationpatternconverter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\fulllocationpatternconverter.cpp,main\cpp\fulllocationpatternconverter.cpp:<global>,,false,1,<global>,6
23200,TYPE_DECL,,main\cpp\gzcompressaction.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\gzcompressaction.cpp,main\cpp\gzcompressaction.cpp:<global>,,false,1,<global>,8
23203,TYPE_DECL,,,,"struct GZCompressAction::GZCompressActionPrivate : public ActionPrivate
{
	GZCompressActionPrivate( const File& toRename,
		const File& renameTo,
		bool deleteSource):
		source(toRename), destination(renameTo), deleteSource(deleteSource) {}

	const File source;
	File destination;
	bool deleteSource;
	bool throwIOExceptionOnForkFailure = true;
}",1,main\cpp\gzcompressaction.cpp,GZCompressActionPrivate,ActionPrivate,false,32,GZCompressActionPrivate,1
23624,TYPE_DECL,,main\cpp\hexdump.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\hexdump.cpp,main\cpp\hexdump.cpp:<global>,,false,1,<global>,8
23627,TYPE_DECL,ANY,,,typedef std::basic_stringstream<logchar> LogStream;,42,main\cpp\hexdump.cpp,LogStream,,false,32,LogStream,1
24010,TYPE_DECL,,main\cpp\hierarchy.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\hierarchy.cpp,main\cpp\hierarchy.cpp:<global>,,false,1,<global>,16
24044,TYPE_DECL,ANY,,,"typedef std::map<LogString, LoggerPtr> LoggerMap;",40,main\cpp\hierarchy.cpp,LoggerMap,,false,43,LoggerMap,1
24045,TYPE_DECL,ANY,,,"typedef std::map<LogString, ProvisionNode> ProvisionNodeMap;",44,main\cpp\hierarchy.cpp,ProvisionNodeMap,,false,44,ProvisionNodeMap,2
24046,TYPE_DECL,,,,"struct Hierarchy::HierarchyPrivate
{
	HierarchyPrivate()
		: configured(false)
		, emittedNoAppenderWarning(false)
		, emittedNoResourceBundleWarning(false)
		, thresholdInt(Level::ALL_INT)
	{
	}

	helpers::Pool pool;
	mutable std::recursive_mutex mutex;
	mutable std::mutex configuredMutex;
	bool configured;
	bool emittedNoAppenderWarning;
	bool emittedNoResourceBundleWarning;
	int thresholdInt;

	spi::HierarchyEventListenerList listeners;
	LoggerPtr root;
	LevelPtr threshold;
	LoggerMap loggers;
	ProvisionNodeMap provisionNodes;

	std::vector<AppenderPtr> allAppenders;
}",1,main\cpp\hierarchy.cpp,HierarchyPrivate,,false,46,HierarchyPrivate,3
25560,TYPE_DECL,,main\cpp\htmllayout.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\htmllayout.cpp,main\cpp\htmllayout.cpp:<global>,,false,1,<global>,11
25563,TYPE_DECL,,,,"struct HTMLLayout::HTMLLayoutPrivate
{
	HTMLLayoutPrivate()
		: locationInfo(false)
		, title(LOG4CXX_STR(""Log4cxx Log Messages""))
		, dateFormat()
		, expectedPatternLength(100)
		{}

	// Print no location info by default
	bool locationInfo; //= false

	LogString title;

	helpers::ISO8601DateFormat dateFormat;

	// Expected length of a formatted event excluding the message text
	size_t expectedPatternLength;
}",1,main\cpp\htmllayout.cpp,HTMLLayoutPrivate,,false,33,HTMLLayoutPrivate,1
26469,TYPE_DECL,,main\cpp\inetaddress.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\inetaddress.cpp,main\cpp\inetaddress.cpp:<global>,,false,1,<global>,7
26474,TYPE_DECL,,,,"struct InetAddress::InetAddressPrivate{

	LogString ipAddrString;
	LogString hostNameString;
}",1,main\cpp\inetaddress.cpp,InetAddressPrivate,,false,31,InetAddressPrivate,3
26745,TYPE_DECL,,main\cpp\inputstream.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\inputstream.cpp,main\cpp\inputstream.cpp:<global>,,false,1,<global>,3
26774,TYPE_DECL,,main\cpp\inputstreamreader.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\inputstreamreader.cpp,main\cpp\inputstreamreader.cpp:<global>,,false,1,<global>,8
26779,TYPE_DECL,,,,"struct InputStreamReader::InputStreamReaderPrivate{
	InputStreamReaderPrivate(const InputStreamPtr& in1) :
		in(in1), dec(CharsetDecoder::getDefaultDecoder()){}

	InputStreamReaderPrivate(const InputStreamPtr& in1, const CharsetDecoderPtr& dec1) :
		in(in1), dec(dec1) {}

	InputStreamPtr in;
	CharsetDecoderPtr dec;
}",1,main\cpp\inputstreamreader.cpp,InputStreamReaderPrivate,,false,32,InputStreamReaderPrivate,3
26941,TYPE_DECL,,main\cpp\integer.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\integer.cpp,main\cpp\integer.cpp:<global>,,false,1,<global>,3
26969,TYPE_DECL,,main\cpp\integerpatternconverter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\integerpatternconverter.cpp,main\cpp\integerpatternconverter.cpp:<global>,,false,1,<global>,5
27044,TYPE_DECL,,main\cpp\jsonlayout.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\jsonlayout.cpp,main\cpp\jsonlayout.cpp:<global>,,false,1,<global>,10
27049,TYPE_DECL,,,,"struct JSONLayout::JSONLayoutPrivate
{
	JSONLayoutPrivate() :
		locationInfo(false),
		prettyPrint(false),
		dateFormat(),
		ppIndentL1(LOG4CXX_STR(""  "")),
		ppIndentL2(LOG4CXX_STR(""    "")),
		expectedPatternLength(100),
		threadInfo(false) {}

	// Print no location info by default
	bool locationInfo; //= false
	bool prettyPrint; //= false

	helpers::ISO8601DateFormat dateFormat;

	LogString ppIndentL1;
	LogString ppIndentL2;

	// Expected length of a formatted event excluding the message text
	size_t expectedPatternLength;

	// Thread info is not included by default
	bool threadInfo; //= false
}",1,main\cpp\jsonlayout.cpp,JSONLayoutPrivate,,false,35,JSONLayoutPrivate,3
28303,TYPE_DECL,,main\cpp\layout.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\layout.cpp,main\cpp\layout.cpp:<global>,,false,1,<global>,3
28381,TYPE_DECL,,main\cpp\level.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\level.cpp,main\cpp\level.cpp:<global>,,false,1,<global>,7
28858,TYPE_DECL,,main\cpp\levelmatchfilter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\levelmatchfilter.cpp,main\cpp\levelmatchfilter.cpp:<global>,,false,1,<global>,8
28861,TYPE_DECL,,,,"struct LevelMatchFilter::LevelMatchFilterPrivate : public FilterPrivate
{
	bool acceptOnMatch;
	LevelPtr levelToMatch;
}",1,main\cpp\levelmatchfilter.cpp,LevelMatchFilterPrivate,FilterPrivate,false,33,LevelMatchFilterPrivate,1
29102,TYPE_DECL,,main\cpp\levelpatternconverter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\levelpatternconverter.cpp,main\cpp\levelpatternconverter.cpp:<global>,,false,1,<global>,6
29250,TYPE_DECL,,main\cpp\levelrangefilter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\levelrangefilter.cpp,main\cpp\levelrangefilter.cpp:<global>,,false,1,<global>,8
29253,TYPE_DECL,,,,"struct LevelRangeFilter::LevelRangeFilterPrivate : public FilterPrivate
{
	LevelRangeFilterPrivate() : acceptOnMatch(false), levelMin(Level::getAll()), levelMax(Level::getOff()) {}

	/**
	Do we return ACCEPT when a match occurs. Default is
	<code>false</code>, so that later filters get run by default
	*/
	bool acceptOnMatch;
	LevelPtr levelMin;
	LevelPtr levelMax;
}",1,main\cpp\levelrangefilter.cpp,LevelRangeFilterPrivate,FilterPrivate,false,33,LevelRangeFilterPrivate,1
29604,TYPE_DECL,,main\cpp\linelocationpatternconverter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\linelocationpatternconverter.cpp,main\cpp\linelocationpatternconverter.cpp:<global>,,false,1,<global>,6
29657,TYPE_DECL,,main\cpp\lineseparatorpatternconverter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\lineseparatorpatternconverter.cpp,main\cpp\lineseparatorpatternconverter.cpp:<global>,,false,1,<global>,5
29716,TYPE_DECL,,main\cpp\literalpatternconverter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\literalpatternconverter.cpp,main\cpp\literalpatternconverter.cpp:<global>,,false,1,<global>,6
29719,TYPE_DECL,,,,"struct LiteralPatternConverter::LiteralPatternConverterPrivate : public PatternConverterPrivate
{
	LiteralPatternConverterPrivate( const LogString& name, const LogString& style, const LogString& literal1 ) :
		PatternConverterPrivate( name, style ),
		literal(literal1) {}

	/**
	 * String literal.
	 */
	const LogString literal;
}",1,main\cpp\literalpatternconverter.cpp,LiteralPatternConverterPrivate,PatternConverterPrivate,false,31,LiteralPatternConverterPrivate,1
29852,TYPE_DECL,,main\cpp\loader.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\loader.cpp,main\cpp\loader.cpp:<global>,,false,1,<global>,18
29918,TYPE_DECL,,main\cpp\locale.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\locale.cpp,main\cpp\locale.cpp:<global>,,false,1,<global>,2
29921,TYPE_DECL,,,,"struct Locale::LocalePrivate
{
	LocalePrivate(const LogString& language1)
		: language(language1)
	{
	}

	LocalePrivate(const LogString& language1, const LogString& country1)
		: language(language1), country(country1)
	{
	}

	LocalePrivate(const LogString& language1, const LogString& country1,
		const LogString& variant1)
		: language(language1), country(country1), variant(variant1)
	{
	}

	const LogString language;
	const LogString country;
	const LogString variant;
}",1,main\cpp\locale.cpp,LocalePrivate,,false,23,LocalePrivate,1
29997,TYPE_DECL,,main\cpp\locationinfo.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\locationinfo.cpp,main\cpp\locationinfo.cpp:<global>,,false,1,<global>,4
30277,TYPE_DECL,,main\cpp\locationinfofilter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\locationinfofilter.cpp,main\cpp\locationinfofilter.cpp:<global>,,false,1,<global>,9
30280,TYPE_DECL,,,,"struct LocationInfoFilter::LocationInfoFilterPrivate : public FilterPrivate
{
	LocationInfoFilterPrivate() : FilterPrivate(),
		acceptOnMatch(true),
		mustMatchAll(false),
		lineNumber(-1)
	{}

	bool    acceptOnMatch;
	bool    mustMatchAll; // true = AND; false = OR
	int     lineNumber;
	std::string methodName;
}",1,main\cpp\locationinfofilter.cpp,LocationInfoFilterPrivate,FilterPrivate,false,34,LocationInfoFilterPrivate,1
30756,TYPE_DECL,,main\cpp\logger.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\logger.cpp,main\cpp\logger.cpp:<global>,,false,1,<global>,16
30759,TYPE_DECL,,,,"struct Logger::LoggerPrivate
{
	LoggerPrivate(Pool& p, const LogString& name1):
		name(name1),
		repositoryRaw(0),
		aai(p),
		additive(true) {}

	/**
	The name of this logger.
	*/
	LogString name;

	/**
	The assigned level of this logger.  The
	<code>level</code> variable need not be assigned a value in
	which case it is inherited form the hierarchy.  */
	LevelPtr level;

	/**
	The parent of this logger. All loggers have at least one
	ancestor which is the root logger. */
	LoggerPtr parent;

	/** The resourceBundle for localized messages.

	@see setResourceBundle, getResourceBundle
	*/
	helpers::ResourceBundlePtr resourceBundle;


	// Loggers need to know what Hierarchy they are in
	LOG4CXX_NS::spi::LoggerRepository* repositoryRaw;

	helpers::AppenderAttachableImpl aai;

	/** Additivity is set to true by default, that is children inherit
	        the appenders of their ancestors by default. If this variable is
	        set to <code>false</code> then the appenders found in the
	    ...",1,main\cpp\logger.cpp,LoggerPrivate,,false,41,LoggerPrivate,1
32285,TYPE_DECL,,main\cpp\loggermatchfilter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\loggermatchfilter.cpp,main\cpp\loggermatchfilter.cpp:<global>,,false,1,<global>,7
32288,TYPE_DECL,,,,"struct LoggerMatchFilter::LoggerMatchFilterPrivate : public FilterPrivate
{
	LoggerMatchFilterPrivate() : FilterPrivate(),
		acceptOnMatch(true),
		loggerToMatch(LOG4CXX_STR(""root"")) {}

	bool acceptOnMatch;
	LogString loggerToMatch;
}",1,main\cpp\loggermatchfilter.cpp,LoggerMatchFilterPrivate,FilterPrivate,false,32,LoggerMatchFilterPrivate,1
32491,TYPE_DECL,,main\cpp\loggerpatternconverter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\loggerpatternconverter.cpp,main\cpp\loggerpatternconverter.cpp:<global>,,false,1,<global>,5
32575,TYPE_DECL,,main\cpp\loggingevent.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\loggingevent.cpp,main\cpp\loggingevent.cpp:<global>,,false,1,<global>,18
32613,TYPE_DECL,,,,"struct LoggingEvent::LoggingEventPrivate
{
	LoggingEventPrivate() :
		ndc(0),
		mdcCopy(0),
		properties(0),
		ndcLookupRequired(true),
		mdcCopyLookupRequired(true),
		timeStamp(0),
		locationInfo(),
		threadName(getCurrentThreadName()),
		threadUserName(getCurrentThreadUserName())
	{
	}

	LoggingEventPrivate
		( const LogString& logger1
		, const LevelPtr& level1
		, const LocationInfo& locationInfo1
		, LogString&& message1
		) :
		logger(logger1),
		level(level1),
		ndc(0),
		mdcCopy(0),
		properties(0),
		ndcLookupRequired(true),
		mdcCopyLookupRequired(true),
		message(std::move(message1)),
		timeStamp(Date::currentTime()),
		locationInfo(locationInfo1),
		threadName(getCurrentThreadName()),
		threadUserName(getCurrentThreadUserName()),
		chronoTimeStamp(std::chrono::microseconds(timeStamp))
	{
	}

	LoggingEventPrivate(
		const LogString& logger1, const LevelPtr& level1,
		const LogString& message1, const LocationInfo& locationInfo1) :
		logger(logger1),
		level(level1),
		ndc...",1,main\cpp\loggingevent.cpp,LoggingEventPrivate,,false,45,LoggingEventPrivate,1
33049,TYPE_DECL,int,,,using ThreadIdType = int;,2,main\cpp\loggingevent.cpp,ThreadIdType,,false,349,ThreadIdType,1
33053,TYPE_DECL,ANY,,,"using ListItem = std::pair<ThreadIdType, LogString>;",2,main\cpp\loggingevent.cpp,ListItem,,false,356,ListItem,4
33250,TYPE_DECL,,main\cpp\loggingeventpatternconverter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\loggingeventpatternconverter.cpp,main\cpp\loggingeventpatternconverter.cpp:<global>,,false,1,<global>,5
33318,TYPE_DECL,,main\cpp\loglog.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\loglog.cpp,main\cpp\loglog.cpp:<global>,,false,1,<global>,10
33321,TYPE_DECL,,,,"struct LogLog::LogLogPrivate {
	LogLogPrivate() :
		debugEnabled(false),
		quietMode(false){}

	~LogLogPrivate()
	{
		quietMode = true; // Prevent output after deletion by onexit processing chain.
	}

	bool debugEnabled;

	/**
		   In quietMode not even errors generate any output.
	 */
	bool quietMode;
	std::mutex mutex;
}",1,main\cpp\loglog.cpp,LogLogPrivate,,false,34,LogLogPrivate,1
33769,TYPE_DECL,,main\cpp\logmanager.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\logmanager.cpp,main\cpp\logmanager.cpp:<global>,,false,1,<global>,17
34084,TYPE_DECL,,main\cpp\logstream.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\logstream.cpp,main\cpp\logstream.cpp:<global>,,false,1,<global>,6
34757,TYPE_DECL,,main\cpp\manualtriggeringpolicy.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\manualtriggeringpolicy.cpp,main\cpp\manualtriggeringpolicy.cpp:<global>,,false,1,<global>,4
34801,TYPE_DECL,,main\cpp\mapfilter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\mapfilter.cpp,main\cpp\mapfilter.cpp:<global>,,false,1,<global>,7
34804,TYPE_DECL,,,,"struct MapFilter::MapFilterPrivate : public FilterPrivate
{
	MapFilterPrivate() : FilterPrivate(),
		acceptOnMatch(true), mustMatchAll(false) {}

	bool    acceptOnMatch;
	bool    mustMatchAll; // true = AND; false = OR
	KeyVals keyVals;
}",1,main\cpp\mapfilter.cpp,MapFilterPrivate,FilterPrivate,false,32,MapFilterPrivate,1
35210,TYPE_DECL,,main\cpp\mdc.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\mdc.cpp,main\cpp\mdc.cpp:<global>,,false,1,<global>,5
35477,TYPE_DECL,,main\cpp\mdcpatternconverter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\mdcpatternconverter.cpp,main\cpp\mdcpatternconverter.cpp:<global>,,false,1,<global>,5
35679,TYPE_DECL,,main\cpp\messagebuffer.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\messagebuffer.cpp,main\cpp\messagebuffer.cpp:<global>,,false,1,<global>,9
35683,TYPE_DECL,anonymous_namespace_1.StringOrStream<T>,,,"struct StringOrStream
{
	std::basic_string<T> buf;
	std::basic_ostringstream<T>* stream;

	StringOrStream()
		: stream(nullptr)
		{}
	~StringOrStream()
	{
#if !LOG4CXX_HAS_THREAD_LOCAL
		delete stream;
#endif
	}
	/**
	 * Move the character buffer from \c buf to \c stream
	 */
	std::basic_ostringstream<T>& StreamFromBuf()
	{
		if (!this->stream)
		{
#if LOG4CXX_HAS_THREAD_LOCAL
			const static std::basic_ostringstream<T> initialState;
			thread_local static std::basic_ostringstream<T> sStream;
			this->stream = &sStream;
			this->stream->clear();
			this->stream->precision(initialState.precision());
			this->stream->width(initialState.width());
			this->stream->setf(initialState.flags(), ~initialState.flags());
			this->stream->fill(initialState.fill());
#else
			this->stream = new std::basic_ostringstream<T>();
#endif
			auto index = this->buf.size();
			this->stream->str(std::move(this->buf));
			this->stream->seekp(index);
		}
		return *this->stream;
	}
	/**
	 * Move the character...",1,main\cpp\messagebuffer.cpp,anonymous_namespace_1.StringOrStream,,false,35,StringOrStream,1
35797,TYPE_DECL,,,,struct CharMessageBuffer::CharMessageBufferPrivate : public StringOrStream<char> {},1,main\cpp\messagebuffer.cpp,CharMessageBufferPrivate,StringOrStream<char>,false,91,CharMessageBufferPrivate,2
36160,TYPE_DECL,,main\cpp\messagepatternconverter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\messagepatternconverter.cpp,main\cpp\messagepatternconverter.cpp:<global>,,false,1,<global>,5
36166,TYPE_DECL,,,,"class QuotedMessagePatternConverter : public LoggingEventPatternConverter
{
	logchar m_quote;
	public:
		QuotedMessagePatternConverter(logchar quote)
			: LoggingEventPatternConverter(LOG4CXX_STR(""Message""), LOG4CXX_STR(""quoted""))
			, m_quote(quote)
			{}

		using LoggingEventPatternConverter::format;

		// Duplicate any quote character in the event message
		void format
			( const spi::LoggingEventPtr& event
			, LogString&                  toAppendTo
			, helpers::Pool&              p
			) const override
		{
			auto& input = event->getRenderedMessage();
			size_t endIndex, startIndex = 0;
			while ((endIndex = input.find(m_quote, startIndex)) != input.npos)
			{
				toAppendTo.append(input.substr(startIndex, endIndex - startIndex + 1));
				toAppendTo += m_quote;
				startIndex = endIndex + 1;
			}
			toAppendTo.append(input.substr(startIndex));
		}
}",1,main\cpp\messagepatternconverter.cpp,anonymous_namespace_1.QuotedMessagePatternConverter,LoggingEventPatternConverter,false,33,QuotedMessagePatternConverter,1
36308,TYPE_DECL,,main\cpp\methodlocationpatternconverter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\methodlocationpatternconverter.cpp,main\cpp\methodlocationpatternconverter.cpp:<global>,,false,1,<global>,5
36383,TYPE_DECL,,main\cpp\multiprocessrollingfileappender.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\multiprocessrollingfileappender.cpp,main\cpp\multiprocessrollingfileappender.cpp:<global>,,false,1,<global>,18
36386,TYPE_DECL,,,,"struct MultiprocessRollingFileAppender::MultiprocessRollingFileAppenderPriv : public FileAppenderPriv
{
	MultiprocessRollingFileAppenderPriv() :
		FileAppenderPriv(),
		fileLength(0) {}

	/**
	 * Triggering policy.
	 */
	TriggeringPolicyPtr triggeringPolicy;

	/**
	 * Rolling policy.
	 */
	RollingPolicyPtr rollingPolicy;

	/**
	 * Length of current active log file.
	 */
	size_t fileLength;

	/**
	 *  save the loggingevent
	 */
	spi::LoggingEventPtr _event;
}",1,main\cpp\multiprocessrollingfileappender.cpp,MultiprocessRollingFileAppenderPriv,FileAppenderPriv,false,45,MultiprocessRollingFileAppenderPriv,1
37983,TYPE_DECL,,,,"class CountingOutputStream : public OutputStream
{
		/**
		 * Wrapped output stream.
		 */
	private:
		OutputStreamPtr os;

		/**
		 * Rolling file appender to inform of stream writes.
		 */
		MultiprocessRollingFileAppender* rfa;

	public:
		/**
		 * Constructor.
		 * @param os output stream to wrap.
		 * @param rfa rolling file appender to inform.
		 */
		CountingOutputStream(
			OutputStreamPtr& os1, MultiprocessRollingFileAppender* rfa1) :
			os(os1), rfa(rfa1)
		{
		}

		/**
		 * {@inheritDoc}
		 */
		void close(Pool& p)
		{
			os->close(p);
			rfa = 0;
		}

		/**
		 * {@inheritDoc}
		 */
		void flush(Pool& p)
		{
			os->flush(p);
		}

		/**
		 * {@inheritDoc}
		 */
		void write(ByteBuffer& buf, Pool& p)
		{
			os->write(buf, p);

			if (rfa != 0)
			{
				rfa->setFileLength(File().setPath(rfa->getFile()).length(p));
			}
		}

		OutputStream& getFileOutPutStreamPtr()
		{
			return *os;
		}
}",1,main\cpp\multiprocessrollingfileappender.cpp,LOG4CXX_NS.rolling.CountingOutputStream,OutputStream,false,596,CountingOutputStream,1
38140,TYPE_DECL,,main\cpp\nameabbreviator.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\nameabbreviator.cpp,main\cpp\nameabbreviator.cpp:<global>,,false,1,<global>,6
38155,TYPE_DECL,,,,"class NOPAbbreviator : public NameAbbreviator
{
	public:
		DECLARE_ABSTRACT_LOG4CXX_OBJECT(NOPAbbreviator)
		BEGIN_LOG4CXX_CAST_MAP()
		LOG4CXX_CAST_ENTRY(NOPAbbreviator)
		LOG4CXX_CAST_ENTRY_CHAIN(NameAbbreviator)
		END_LOG4CXX_CAST_MAP()

		/**
		 * Constructor.
		 */
		NOPAbbreviator()
		{
		}

		/**
		 * {@inheritDoc}
		 */
		void abbreviate(LogString::size_type /* nameStart */, LogString& /* buf */) const override
		{
		}
}",1,main\cpp\nameabbreviator.cpp,LOG4CXX_NS.pattern.NOPAbbreviator,NameAbbreviator,false,45,NOPAbbreviator,1
38165,TYPE_DECL,,,,"class MaxElementAbbreviator : public NameAbbreviator
{
		/**
		 * Maximum number of path elements to output.
		 */
		const int count;

	public:
		DECLARE_ABSTRACT_LOG4CXX_OBJECT(MaxElementAbbreviator)
		BEGIN_LOG4CXX_CAST_MAP()
		LOG4CXX_CAST_ENTRY(MaxElementAbbreviator)
		LOG4CXX_CAST_ENTRY_CHAIN(NameAbbreviator)
		END_LOG4CXX_CAST_MAP()
		/**
		 * Create new instance.
		 * @param count maximum number of path elements to output.
		 */
		MaxElementAbbreviator(const int count1) : count(count1)
		{
		}

		/**
		 * Abbreviate name.
		 * @param buf buffer to append abbreviation.
		 * @param nameStart start of name to abbreviate.
		 */
		void abbreviate(LogString::size_type nameStart, LogString& buf) const override
		{
			// We substract 1 from 'len' when assigning to 'end' to avoid out of
			// bounds exception in return r.substring(end+1, len). This can happen if
			// precision is 1 and the logger name ends with a dot.
			LogString::size_type end = buf.length() - 1;

			for (LogString...",1,main\cpp\nameabbreviator.cpp,LOG4CXX_NS.pattern.MaxElementAbbreviator,NameAbbreviator,false,73,MaxElementAbbreviator,2
38237,TYPE_DECL,,,,"class PatternAbbreviatorFragment
{
		/**
		 * Count of initial characters of element to output.
		 */
		LogString::size_type charCount;

		/**
		 *  Character used to represent dropped characters.
		 * '\0' indicates no representation of dropped characters.
		 */
		logchar ellipsis;

	public:
		/**
		 * Creates a PatternAbbreviatorFragment.
		 * @param charCount number of initial characters to preserve.
		 * @param ellipsis character to represent elimination of characters,
		 *    '\0' if no ellipsis is desired.
		 */
		PatternAbbreviatorFragment(
			const int charCount1, const logchar ellipsis1)
			: charCount(charCount1), ellipsis(ellipsis1)
		{
		}
		PatternAbbreviatorFragment() : charCount(0), ellipsis(0)
		{
		}

		PatternAbbreviatorFragment(const PatternAbbreviatorFragment& src)
			: charCount(src.charCount), ellipsis(src.ellipsis)
		{
		}

		PatternAbbreviatorFragment& operator=(const PatternAbbreviatorFragment& src)
		{
			charCount = src.charCount;
			ellipsis = src.ellipsi...",1,main\cpp\nameabbreviator.cpp,LOG4CXX_NS.pattern.PatternAbbreviatorFragment,,false,124,PatternAbbreviatorFragment,3
38343,TYPE_DECL,,,,"class PatternAbbreviator : public NameAbbreviator
{
		/**
		 * Element abbreviation patterns.
		 */
		std::vector<PatternAbbreviatorFragment> fragments;

	public:
		DECLARE_ABSTRACT_LOG4CXX_OBJECT(PatternAbbreviator)
		BEGIN_LOG4CXX_CAST_MAP()
		LOG4CXX_CAST_ENTRY(PatternAbbreviator)
		LOG4CXX_CAST_ENTRY_CHAIN(NameAbbreviator)
		END_LOG4CXX_CAST_MAP()
		/**
		 * Create PatternAbbreviator.
		 *
		 * @param fragments element abbreviation patterns.
		 */
		PatternAbbreviator(const std::vector<PatternAbbreviatorFragment>& fragments1) :
			fragments(fragments1)
		{
			if (fragments1.size() == 0)
			{
				throw IllegalArgumentException(LOG4CXX_STR(""fragments parameter must contain at least one element""));
			}
		}

		/**
		 * Abbreviate name.
		 * @param buf buffer that abbreviated name is appended.
		 * @param nameStart start of name.
		 */
		void abbreviate(LogString::size_type nameStart, LogString& buf) const override
		{
			//
			//  all non-terminal patterns are executed once
			//
	...",1,main\cpp\nameabbreviator.cpp,LOG4CXX_NS.pattern.PatternAbbreviator,NameAbbreviator,false,201,PatternAbbreviator,4
38651,TYPE_DECL,,main\cpp\namepatternconverter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\namepatternconverter.cpp,main\cpp\namepatternconverter.cpp:<global>,,false,1,<global>,6
38654,TYPE_DECL,,,,"struct NamePatternConverter::NamePatternConverterPrivate : public PatternConverterPrivate
{
	NamePatternConverterPrivate( const LogString& name, const LogString& style, const NameAbbreviatorPtr abbrev ) :
		PatternConverterPrivate( name, style ),
		abbreviator(abbrev) {}

	/**
	 * Abbreviator.
	 */
	const NameAbbreviatorPtr abbreviator;
}",1,main\cpp\namepatternconverter.cpp,NamePatternConverterPrivate,PatternConverterPrivate,false,30,NamePatternConverterPrivate,1
38727,TYPE_DECL,,main\cpp\ndc.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\ndc.cpp,main\cpp\ndc.cpp:<global>,,false,1,<global>,4
39221,TYPE_DECL,,main\cpp\ndcpatternconverter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\ndcpatternconverter.cpp,main\cpp\ndcpatternconverter.cpp:<global>,,false,1,<global>,5
39287,TYPE_DECL,,main\cpp\nteventlogappender.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\nteventlogappender.cpp,main\cpp\nteventlogappender.cpp:<global>,,false,1,<global>,11
39350,TYPE_DECL,,main\cpp\odbcappender.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\odbcappender.cpp,main\cpp\odbcappender.cpp:<global>,,false,1,<global>,30
39353,TYPE_DECL,void*,,,typedef void* SQLHSTMT;,14,main\cpp\odbcappender.cpp,SQLHSTMT,,false,52,SQLHSTMT,1
40271,TYPE_DECL,,main\cpp\onlyonceerrorhandler.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\onlyonceerrorhandler.cpp,main\cpp\onlyonceerrorhandler.cpp:<global>,,false,1,<global>,5
40276,TYPE_DECL,,,,"struct OnlyOnceErrorHandler::OnlyOnceErrorHandlerPrivate{
	OnlyOnceErrorHandlerPrivate() :
		WARN_PREFIX(LOG4CXX_STR(""log4cxx warning: "")),
		ERROR_PREFIX(LOG4CXX_STR(""log4cxx error: "")),
		firstTime(true){}

	LogString WARN_PREFIX;
	LogString ERROR_PREFIX;
	mutable bool firstTime;
}",1,main\cpp\onlyonceerrorhandler.cpp,OnlyOnceErrorHandlerPrivate,,false,29,OnlyOnceErrorHandlerPrivate,3
40423,TYPE_DECL,,main\cpp\optionconverter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\optionconverter.cpp,main\cpp\optionconverter.cpp:<global>,,false,1,<global>,25
40427,TYPE_DECL,,,,"class ConfiguratorWatchdog  : public helpers::FileWatchdog
{
	spi::ConfiguratorPtr m_config;
	public:
    ConfiguratorWatchdog(const spi::ConfiguratorPtr& config, const File& filename)
        : helpers::FileWatchdog(filename)
        , m_config(config)
    {
    }

    /**
    Call PropertyConfigurator#doConfigure(const String& configFileName,
    const spi::LoggerRepositoryPtr& hierarchy) with the
    <code>filename</code> to reconfigure log4cxx.
    */
    void doOnChange() override
    {
        m_config->doConfigure(file(), LogManager::getLoggerRepository());
    }
}",1,main\cpp\optionconverter.cpp,LOG4CXX_NS.ConfiguratorWatchdog,helpers.FileWatchdog,false,49,ConfiguratorWatchdog,1
41406,TYPE_DECL,,main\cpp\outputdebugstringappender.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\outputdebugstringappender.cpp,main\cpp\outputdebugstringappender.cpp:<global>,,false,1,<global>,5
41417,TYPE_DECL,,main\cpp\outputstream.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\outputstream.cpp,main\cpp\outputstream.cpp:<global>,,false,1,<global>,4
41444,TYPE_DECL,,main\cpp\outputstreamwriter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\outputstreamwriter.cpp,main\cpp\outputstreamwriter.cpp:<global>,,false,1,<global>,7
41449,TYPE_DECL,,,,"struct OutputStreamWriter::OutputStreamWriterPrivate{
	OutputStreamWriterPrivate(OutputStreamPtr& out1) : out(out1), enc(CharsetEncoder::getDefaultEncoder()){}

	OutputStreamWriterPrivate(OutputStreamPtr& out1,
							  CharsetEncoderPtr& enc1)
		: out(out1), enc(enc1){}

	OutputStreamPtr out;
	CharsetEncoderPtr enc;
}",1,main\cpp\outputstreamwriter.cpp,OutputStreamWriterPrivate,,false,30,OutputStreamWriterPrivate,3
41684,TYPE_DECL,,main\cpp\patternconverter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\patternconverter.cpp,main\cpp\patternconverter.cpp:<global>,,false,1,<global>,5
41801,TYPE_DECL,,main\cpp\patternlayout.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\patternlayout.cpp,main\cpp\patternlayout.cpp:<global>,,false,1,<global>,33
41804,TYPE_DECL,,,,"struct PatternLayout::PatternLayoutPrivate
{
	PatternLayoutPrivate()
		: expectedPatternLength(100)
		{}
	PatternLayoutPrivate(const LogString& pattern)
		: conversionPattern(pattern)
		, expectedPatternLength(100)
		{}

	/**
	 * Conversion pattern.
	 */
	LogString conversionPattern;

	/**
	 * Pattern converters.
	 */
	LoggingEventPatternConverterList patternConverters;

	/**
	 * Field widths and alignment corresponding to pattern converters.
	 */
	FormattingInfoList patternFields;

	LogString m_fatalColor = LOG4CXX_STR(""\\x1B[35m""); //magenta
	LogString m_errorColor = LOG4CXX_STR(""\\x1B[31m""); //red
	LogString m_warnColor = LOG4CXX_STR(""\\x1B[33m""); //yellow
	LogString m_infoColor = LOG4CXX_STR(""\\x1B[32m""); //green
	LogString m_debugColor = LOG4CXX_STR(""\\x1B[36m""); //cyan;
	LogString m_traceColor = LOG4CXX_STR(""\\x1B[34m""); //blue;

	// Expected length of a formatted event excluding the message text
	size_t expectedPatternLength;
}",1,main\cpp\patternlayout.cpp,PatternLayoutPrivate,,false,58,PatternLayoutPrivate,1
42884,TYPE_DECL,,main\cpp\patternparser.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\patternparser.cpp,main\cpp\patternparser.cpp:<global>,,false,1,<global>,5
43869,TYPE_DECL,,main\cpp\pool.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\pool.cpp,main\cpp\pool.cpp:<global>,,false,1,<global>,8
44016,TYPE_DECL,,main\cpp\properties.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\properties.cpp,main\cpp\properties.cpp:<global>,,false,1,<global>,6
44019,TYPE_DECL,,,,"class PropertyParser
{
	public:
		void parse(LogString& in, Properties& properties)
		{
			LogString key, element;
			LexemType lexemType = BEGIN;
			logchar c;
			bool finished = false;

			if (!get(in, c))
			{
				return;
			}

			while (!finished)
			{
				switch (lexemType)
				{
					case BEGIN:
						switch (c)
						{
							case 0x20: // ' '
							case 0x09: // '\t'
							case 0x0A: // '\n'
							case 0x0D: // '\r'
								if (!get(in, c))
								{
									finished = true;
								}

								break;

							case 0x23: // '#'
							case 0x21: // '!'
								lexemType = COMMENT;

								if (!get(in, c))
								{
									finished = true;
								}

								break;

							default:
								lexemType = KEY;
								break;
						}

						break;

					case KEY:
						switch (c)
						{
							case 0x5C: // '\\'
								lexemType = KEY_ESCAPE;

								if (!get(in, c))
								{
									finished = true;
								}

								break;

							case 0x09: // '\t'
							case 0x20: ...",1,main\cpp\properties.cpp,PropertyParser,,false,27,PropertyParser,1
44623,TYPE_DECL,,,,"typedef enum
		{
			BEGIN,
			KEY,
			KEY_ESCAPE,
			KEY_CONTINUE,
			KEY_CONTINUE2,
			DELIMITER,
			ELEMENT,
			ELEMENT_ESCAPE,
			ELEMENT_CONTINUE,
			ELEMENT_CONTINUE2,
			COMMENT
		}",3,main\cpp\properties.cpp,PropertyParser.LexemType,,false,381,LexemType,3
44815,TYPE_DECL,,main\cpp\propertiespatternconverter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\propertiespatternconverter.cpp,main\cpp\propertiespatternconverter.cpp:<global>,,false,1,<global>,7
44818,TYPE_DECL,,,,"struct PropertiesPatternConverter::PropertiesPatternConverterPrivate : public PatternConverterPrivate
{
	PropertiesPatternConverterPrivate( const LogString& name, const LogString& style, const LogString& propertyName ) :
		PatternConverterPrivate( name, style ),
		option(propertyName) {}

	/**
	 * Name of property to output.
	 */
	const LogString option;
}",1,main\cpp\propertiespatternconverter.cpp,PropertiesPatternConverterPrivate,PatternConverterPrivate,false,33,PropertiesPatternConverterPrivate,1
45063,TYPE_DECL,,main\cpp\propertyconfigurator.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\propertyconfigurator.cpp,main\cpp\propertyconfigurator.cpp:<global>,,false,1,<global>,25
45067,TYPE_DECL,,,,"class PropertyWatchdog  : public FileWatchdog
{
	public:
		PropertyWatchdog(const File& filename) : FileWatchdog(filename)
		{
		}

		/**
		Call PropertyConfigurator#doConfigure(const String& configFileName,
		const spi::LoggerRepositoryPtr& hierarchy) with the
		<code>filename</code> to reconfigure log4cxx.
		*/
		void doOnChange()
		{
			PropertyConfigurator().doConfigure(file(),
				LogManager::getLoggerRepository());
		}
}",1,main\cpp\propertyconfigurator.cpp,LOG4CXX_NS.PropertyWatchdog,FileWatchdog,false,53,PropertyWatchdog,1
46597,TYPE_DECL,,main\cpp\propertyresourcebundle.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\propertyresourcebundle.cpp,main\cpp\propertyresourcebundle.cpp:<global>,,false,1,<global>,5
46681,TYPE_DECL,,main\cpp\propertysetter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\propertysetter.cpp,main\cpp\propertysetter.cpp:<global>,,false,1,<global>,11
46920,TYPE_DECL,,main\cpp\reader.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\reader.cpp,main\cpp\reader.cpp:<global>,,false,1,<global>,3
46943,TYPE_DECL,,main\cpp\relativetimedateformat.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\relativetimedateformat.cpp,main\cpp\relativetimedateformat.cpp:<global>,,false,1,<global>,5
46985,TYPE_DECL,,main\cpp\relativetimepatternconverter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\relativetimepatternconverter.cpp,main\cpp\relativetimepatternconverter.cpp:<global>,,false,1,<global>,6
47052,TYPE_DECL,,main\cpp\resourcebundle.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\resourcebundle.cpp,main\cpp\resourcebundle.cpp:<global>,,false,1,<global>,8
47324,TYPE_DECL,,main\cpp\rollingfileappender.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\rollingfileappender.cpp,main\cpp\rollingfileappender.cpp:<global>,,false,1,<global>,14
47327,TYPE_DECL,,,,"struct RollingFileAppender::RollingFileAppenderPriv : public FileAppenderPriv
{
	RollingFileAppenderPriv() :
		FileAppenderPriv(),
		fileLength(0) {}

	/**
	 * Triggering policy.
	 */
	TriggeringPolicyPtr triggeringPolicy;

	/**
	 * Rolling policy.
	 */
	RollingPolicyPtr rollingPolicy;

	/**
	 * Length of current active log file.
	 */
	size_t fileLength;

	/**
	 *  save the loggingevent
	 */
	spi::LoggingEventPtr _event;
}",1,main\cpp\rollingfileappender.cpp,RollingFileAppenderPriv,FileAppenderPriv,false,37,RollingFileAppenderPriv,1
48769,TYPE_DECL,,,,"class CountingOutputStream : public OutputStream
{
		/**
		 * Wrapped output stream.
		 */
	private:
		OutputStreamPtr os;

		/**
		 * Rolling file appender to inform of stream writes.
		 */
		RollingFileAppender* rfa;

	public:
		/**
		 * Constructor.
		 * @param os output stream to wrap.
		 * @param rfa rolling file appender to inform.
		 */
		CountingOutputStream(
			OutputStreamPtr& os1, RollingFileAppender* rfa1) :
			os(os1), rfa(rfa1)
		{
		}

		/**
		 * {@inheritDoc}
		 */
		void close(Pool& p)
		{
			os->close(p);
			rfa = 0;
		}

		/**
		 * {@inheritDoc}
		 */
		void flush(Pool& p)
		{
			os->flush(p);
		}

		/**
		 * {@inheritDoc}
		 */
		void write(ByteBuffer& buf, Pool& p)
		{
			os->write(buf, p);

			if (rfa != 0)
			{
				rfa->incrementFileLength(buf.limit());
			}
		}
}",1,main\cpp\rollingfileappender.cpp,LOG4CXX_NS.rolling.CountingOutputStream,OutputStream,false,532,CountingOutputStream,1
48886,TYPE_DECL,,main\cpp\rollingpolicy.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\rollingpolicy.cpp,main\cpp\rollingpolicy.cpp:<global>,,false,1,<global>,2
48914,TYPE_DECL,,main\cpp\rollingpolicybase.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\rollingpolicybase.cpp,main\cpp\rollingpolicybase.cpp:<global>,,false,1,<global>,12
49288,TYPE_DECL,,main\cpp\rolloverdescription.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\rolloverdescription.cpp,main\cpp\rolloverdescription.cpp:<global>,,false,1,<global>,3
49293,TYPE_DECL,,,,"struct RolloverDescription::RolloverDescriptionPrivate{
	RolloverDescriptionPrivate(){}

	RolloverDescriptionPrivate(
		const LogString& activeFileName1,
		const bool append1,
		const ActionPtr& synchronous1,
		const ActionPtr& asynchronous1)
		: activeFileName(activeFileName1),
		  append(append1),
		  synchronous(synchronous1),
		  asynchronous(asynchronous1)
	{}

	/**
	 * Active log file name after rollover.
	 */
	LogString activeFileName;

	/**
	 * Should active file be opened for appending.
	 */
	bool append;

	/**
	 * Action to be completed after close of current active log file
	 * before returning control to caller.
	 */
	ActionPtr synchronous;

	/**
	 * Action to be completed after close of current active log file
	 * and before next rollover attempt, may be executed asynchronously.
	 */
	ActionPtr asynchronous;
}",1,main\cpp\rolloverdescription.cpp,RolloverDescriptionPrivate,,false,27,RolloverDescriptionPrivate,3
49370,TYPE_DECL,,main\cpp\rootlogger.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\rootlogger.cpp,main\cpp\rootlogger.cpp:<global>,,false,1,<global>,6
49418,TYPE_DECL,,main\cpp\serversocket.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\serversocket.cpp,main\cpp\serversocket.cpp:<global>,,false,1,<global>,4
49476,TYPE_DECL,,main\cpp\shortfilelocationpatternconverter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\shortfilelocationpatternconverter.cpp,main\cpp\shortfilelocationpatternconverter.cpp:<global>,,false,1,<global>,5
49536,TYPE_DECL,,main\cpp\simpledateformat.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\simpledateformat.cpp,main\cpp\simpledateformat.cpp:<global>,,false,1,<global>,12
49548,TYPE_DECL,,,,"class PatternToken
{
	public:
		PatternToken()
		{
		}

		virtual ~PatternToken()
		{
		}

		/**
		 * Sets the time zone.
		 * @param zone new time zone.
		 */
		virtual void setTimeZone(const TimeZonePtr& zone)
		{
		}

		/**
		 * Appends the formatted content to the string.
		 * @param s string to which format contribution is appended.
		 * @param date exploded date/time.
		 * @param p memory pool.
		 */
		virtual void format(LogString& s,
			const apr_time_exp_t& date,
			LOG4CXX_NS::helpers::Pool& p) const = 0;

	protected:

		static void incrementMonth(tm& time, apr_time_exp_t& aprtime)
		{
			time.tm_mon++;
			aprtime.tm_mon++;
		}

		static void incrementDay(tm& time, apr_time_exp_t& aprtime)
		{
			time.tm_wday++;
			aprtime.tm_wday++;
		}

		static void incrementHalfDay(tm& time, apr_time_exp_t& aprtime)
		{
			time.tm_hour += 12;
			aprtime.tm_hour += 12;
		}

		static void renderFacet(const std::locale* locale,
			incrementFunction inc,
			char spec,
			unsigned int wspec...",1,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken,,false,68,PatternToken,2
49721,TYPE_DECL,,,,"class LiteralToken : public PatternToken
{
	public:
		LiteralToken( logchar ch1, int count1 ) : ch( ch1 ), count( count1 )
		{
		}

		void format( LogString& s, const apr_time_exp_t&, Pool& /* p */ ) const
		{
			s.append( count, ch );
		}

	private:
		logchar ch;
		int count;
}",1,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.LiteralToken,PatternToken,false,202,LiteralToken,3
49743,TYPE_DECL,,,,"class EraToken : public PatternToken
{
	public:
		EraToken( int /* count */, const std::locale* /* locale */  )
		{
		}

		void format(LogString& s, const apr_time_exp_t& /* tm */, Pool& /* p */ ) const
		{
			s.append(1, (logchar) 0x41 /* 'A' */);
			s.append(1, (logchar) 0x44 /* 'D' */);
		}
}",1,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.EraToken,PatternToken,false,221,EraToken,4
49773,TYPE_DECL,,,,"class NumericToken : public PatternToken
{
	public:
		NumericToken( size_t width1 ) : width( width1 )
		{
		}

		virtual int getField( const apr_time_exp_t& tm ) const = 0;

		void format( LogString& s, const apr_time_exp_t& tm, Pool& p ) const
		{
			size_t initialLength = s.length();

			StringHelper::toString( getField( tm ), p, s );
			size_t finalLength = s.length();

			if ( initialLength + width > finalLength )
			{
				s.insert( initialLength, ( initialLength + width ) - finalLength, (logchar) 0x30 /* '0' */);
			}
		}

	private:
		size_t width;
}",1,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.NumericToken,PatternToken,false,237,NumericToken,5
49834,TYPE_DECL,,,,"class YearToken : public NumericToken
{
	public:
		YearToken( int width1 ) : NumericToken( width1 )
		{
		}

		int getField( const apr_time_exp_t& tm ) const
		{
			return 1900 + tm.tm_year;
		}
}",1,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.YearToken,NumericToken,false,265,YearToken,6
49851,TYPE_DECL,,,,"class MonthToken : public NumericToken
{
	public:
		MonthToken( int width1 ) : NumericToken( width1 )
		{
		}

		int getField( const apr_time_exp_t& tm ) const
		{
			return tm.tm_mon + 1;
		}
}",1,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.MonthToken,NumericToken,false,280,MonthToken,7
49868,TYPE_DECL,,,,"class AbbreviatedMonthNameToken : public PatternToken
{
	public:
		AbbreviatedMonthNameToken(int, const std::locale* locale) : names( 12 )
		{
			renderFacet(locale, PatternToken::incrementMonth, 'b', 0x62, ""%b"", names);
		}

		void format(LogString& s, const apr_time_exp_t& tm, Pool& /* p */ ) const
		{
			s.append( names[tm.tm_mon] );
		}

	private:
		std::vector < LogString > names;
}",1,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.AbbreviatedMonthNameToken,PatternToken,false,295,AbbreviatedMonthNameToken,8
49901,TYPE_DECL,,,,"class FullMonthNameToken : public PatternToken
{
	public:
		FullMonthNameToken( int width, const std::locale* locale) : names( 12 )
		{
			renderFacet(locale, PatternToken::incrementMonth, 'B', 0x42, ""%B"", names);
		}

		void format( LogString& s, const apr_time_exp_t& tm, Pool& /* p */ ) const
		{
			s.append( names[tm.tm_mon] );
		}

	private:
		std::vector < LogString > names;
}",1,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.FullMonthNameToken,PatternToken,false,314,FullMonthNameToken,9
49934,TYPE_DECL,,,,"class WeekInYearToken : public NumericToken
{
	public:
		WeekInYearToken( int width1 ) : NumericToken( width1 )
		{
		}

		int getField( const apr_time_exp_t& tm ) const
		{
			return tm.tm_yday / 7;
		}
}",1,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.WeekInYearToken,NumericToken,false,333,WeekInYearToken,10
49951,TYPE_DECL,,,,"class WeekInMonthToken : public NumericToken
{
	public:
		WeekInMonthToken( int width1 ) : NumericToken( width1 )
		{
		}

		int getField( const apr_time_exp_t& tm ) const
		{
			return tm.tm_mday / 7;
		}
}",1,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.WeekInMonthToken,NumericToken,false,348,WeekInMonthToken,11
49968,TYPE_DECL,,,,"class DayInMonthToken : public NumericToken
{
	public:
		DayInMonthToken( int width1 ) : NumericToken( width1 )
		{
		}

		int getField( const apr_time_exp_t& tm ) const
		{
			return tm.tm_mday;
		}
}",1,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.DayInMonthToken,NumericToken,false,363,DayInMonthToken,12
49983,TYPE_DECL,,,,"class DayInYearToken : public NumericToken
{
	public:
		DayInYearToken( int width1 ) : NumericToken( width1 )
		{
		}

		int getField( const apr_time_exp_t& tm ) const
		{
			return tm.tm_yday;
		}
}",1,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.DayInYearToken,NumericToken,false,378,DayInYearToken,13
49998,TYPE_DECL,,,,"class DayOfWeekInMonthToken : public NumericToken
{
	public:
		DayOfWeekInMonthToken( int width1 ) : NumericToken( width1 )
		{
		}

		int getField( const apr_time_exp_t& /* tm */ ) const
		{
			return -1;
		}
}",1,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.DayOfWeekInMonthToken,NumericToken,false,393,DayOfWeekInMonthToken,14
50012,TYPE_DECL,,,,"class AbbreviatedDayNameToken : public PatternToken
{
	public:
		AbbreviatedDayNameToken( int width, const std::locale* locale) : names( 7 )
		{
			renderFacet(locale, PatternToken::incrementDay, 'a', 0x61, ""%a"", names);
		}

		void format( LogString& s, const apr_time_exp_t& tm, Pool& /* p */ ) const
		{
			s.append( names[tm.tm_wday] );
		}

	private:
		std::vector < LogString > names;

}",1,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.AbbreviatedDayNameToken,PatternToken,false,408,AbbreviatedDayNameToken,15
50045,TYPE_DECL,,,,"class FullDayNameToken : public PatternToken
{
	public:
		FullDayNameToken( int width, const std::locale* locale) : names( 7 )
		{
			renderFacet(locale, PatternToken::incrementDay, 'A', 0x41, ""%A"", names);
		}

		void format( LogString& s, const apr_time_exp_t& tm, Pool& /* p */ ) const
		{
			s.append( names[tm.tm_wday] );
		}

	private:
		std::vector < LogString > names;

}",1,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.FullDayNameToken,PatternToken,false,428,FullDayNameToken,16
50078,TYPE_DECL,,,,"class MilitaryHourToken : public NumericToken
{
	public:
		MilitaryHourToken( int width1, int offset1 ) : NumericToken( width1 ), offset( offset1 )
		{
		}

		int getField( const apr_time_exp_t& tm ) const
		{
			return tm.tm_hour + offset;
		}

	private:
		int offset;
}",1,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.MilitaryHourToken,NumericToken,false,448,MilitaryHourToken,17
50097,TYPE_DECL,,,,"class HourToken : public NumericToken
{
	public:
		HourToken( int width1, int /* offset1 */ ) : NumericToken( width1 ), offset( 0 )
		{
		}

		int getField( const apr_time_exp_t& tm ) const
		{
			return ( ( tm.tm_hour + 12 - offset ) % 12 ) + offset;
		}

	private:
		int offset;
}",1,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.HourToken,NumericToken,false,466,HourToken,18
50122,TYPE_DECL,,,,"class MinuteToken : public NumericToken
{
	public:
		MinuteToken( int width1 ) : NumericToken( width1 )
		{
		}

		int getField( const apr_time_exp_t& tm ) const
		{
			return tm.tm_min;
		}
}",1,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.MinuteToken,NumericToken,false,484,MinuteToken,19
50137,TYPE_DECL,,,,"class SecondToken : public NumericToken
{
	public:
		SecondToken( int width1 ) : NumericToken( width1 )
		{
		}

		int getField( const apr_time_exp_t& tm ) const
		{
			return tm.tm_sec;
		}
}",1,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.SecondToken,NumericToken,false,499,SecondToken,20
50152,TYPE_DECL,,,,"class MillisecondToken : public NumericToken
{
	public:
		MillisecondToken( int width1 ) : NumericToken( width1 )
		{
		}

		int getField( const apr_time_exp_t& tm ) const
		{
			return tm.tm_usec / 1000;
		}
}",1,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.MillisecondToken,NumericToken,false,514,MillisecondToken,21
50169,TYPE_DECL,,,,"class MicrosecondToken : public NumericToken
{
	public:
		MicrosecondToken( int width1 ) : NumericToken( width1 )
		{
		}

		int getField( const apr_time_exp_t& tm ) const
		{
			return tm.tm_usec;
		}
}",1,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.MicrosecondToken,NumericToken,false,529,MicrosecondToken,22
50184,TYPE_DECL,,,,"class AMPMToken : public PatternToken
{
	public:
		AMPMToken( int width, const std::locale* locale) : names( 2 )
		{
			renderFacet(locale, PatternToken::incrementHalfDay, 'p', 0x70, ""%p"", names);
		}

		void format( LogString& s, const apr_time_exp_t& tm, Pool& /* p */ ) const
		{
			s.append( names[tm.tm_hour / 12] );
		}

	private:
		std::vector < LogString > names;
}",1,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.AMPMToken,PatternToken,false,544,AMPMToken,23
50219,TYPE_DECL,,,,"class GeneralTimeZoneToken : public PatternToken
{
	public:
		GeneralTimeZoneToken( int /* width */ )
		{
		}

		void format( LogString& s, const apr_time_exp_t&, Pool& /* p */ ) const
		{
			s.append(timeZone->getID());
		}

		void setTimeZone( const TimeZonePtr& zone )
		{
			timeZone = zone;
		}

	private:
		TimeZonePtr timeZone;
}",1,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.GeneralTimeZoneToken,PatternToken,false,563,GeneralTimeZoneToken,24
50249,TYPE_DECL,,,,"class RFC822TimeZoneToken : public PatternToken
{
	public:
		RFC822TimeZoneToken( int /* width */ )
		{
		}

		void format( LogString& s, const apr_time_exp_t& tm, Pool& p ) const
		{
			if ( tm.tm_gmtoff == 0 )
			{
				s.append( 1, (logchar) 0x5A /* 'Z'  */ );
			}
			else
			{
				apr_int32_t off = tm.tm_gmtoff;
				size_t basePos = s.length();
				s.append( LOG4CXX_STR( ""+0000"" ) );

				if ( off < 0 )
				{
					s[basePos] = 0x2D; // '-'
					off = -off;
				}

				LogString hours;
				StringHelper::toString( off / 3600, p, hours );
				size_t hourPos = basePos + 2;

				//
				//   assumes that point values for 0-9 are same between char and wchar_t
				//
				for ( size_t i = hours.length(); i-- > 0; )
				{
					s[hourPos--] = hours[i];
				}

				LogString min;
				StringHelper::toString( ( off % 3600 ) / 60, p, min );
				size_t minPos = basePos + 4;

				//
				//   assumes that point values for 0-9 are same between char and wchar_t
				//
				for ( size_t j = min.length()...",1,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.RFC822TimeZoneToken,PatternToken,false,586,RFC822TimeZoneToken,25
50701,TYPE_DECL,,,,"struct SimpleDateFormat::SimpleDateFormatPrivate{
	SimpleDateFormatPrivate() :
		timeZone(TimeZone::getDefault())
	{}

	/**
	 * Time zone.
	 */
	TimeZonePtr timeZone;

	/**
	 * List of tokens.
	 */
	PatternTokenList pattern;
}",1,main\cpp\simpledateformat.cpp,SimpleDateFormatPrivate,,false,799,SimpleDateFormatPrivate,4
50895,TYPE_DECL,,main\cpp\simplelayout.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\simplelayout.cpp,main\cpp\simplelayout.cpp:<global>,,false,1,<global>,5
50945,TYPE_DECL,,main\cpp\sizebasedtriggeringpolicy.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\sizebasedtriggeringpolicy.cpp,main\cpp\sizebasedtriggeringpolicy.cpp:<global>,,false,1,<global>,4
51048,TYPE_DECL,,main\cpp\smtpappender.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\smtpappender.cpp,main\cpp\smtpappender.cpp:<global>,,false,1,<global>,17
51058,TYPE_DECL,,,,"struct SMTPAppender::SMTPPriv : public AppenderSkeletonPrivate
{
	SMTPPriv() :
		AppenderSkeletonPrivate(),
		smtpPort(25),
		bufferSize(512),
		locationInfo(false),
		cb(bufferSize),
		evaluator(new DefaultEvaluator()) {}

	SMTPPriv(spi::TriggeringEventEvaluatorPtr evaluator) :
		AppenderSkeletonPrivate(),
		smtpPort(25),
		bufferSize(512),
		locationInfo(false),
		cb(bufferSize),
		evaluator(evaluator) {}

	LogString to;
	LogString cc;
	LogString bcc;
	LogString from;
	LogString subject;
	LogString smtpHost;
	LogString smtpUsername;
	LogString smtpPassword;
	int smtpPort;
	int bufferSize; // 512
	bool locationInfo;
	helpers::CyclicBuffer cb;
	spi::TriggeringEventEvaluatorPtr evaluator;
}",1,main\cpp\smtpappender.cpp,SMTPPriv,AppenderSkeletonPrivate,false,383,SMTPPriv,6
52226,TYPE_DECL,,main\cpp\socket.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\socket.cpp,main\cpp\socket.cpp:<global>,,false,1,<global>,6
52299,TYPE_DECL,,main\cpp\socketappenderskeleton.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\socketappenderskeleton.cpp,main\cpp\socketappenderskeleton.cpp:<global>,,false,1,<global>,13
53278,TYPE_DECL,,main\cpp\socketoutputstream.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\socketoutputstream.cpp,main\cpp\socketoutputstream.cpp:<global>,,false,1,<global>,7
53281,TYPE_DECL,,,,"struct SocketOutputStream::SocketOutputStreamPrivate
{
	ByteList array;
	SocketPtr socket;
}",1,main\cpp\socketoutputstream.cpp,SocketOutputStreamPrivate,,false,29,SocketOutputStreamPrivate,1
53426,TYPE_DECL,,main\cpp\strftimedateformat.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\strftimedateformat.cpp,main\cpp\strftimedateformat.cpp:<global>,,false,1,<global>,5
53429,TYPE_DECL,,,,"struct StrftimeDateFormat::StrftimeDateFormatPrivate{
	StrftimeDateFormatPrivate() :
		timeZone(TimeZone::getDefault())
	{}

	/**
	*    Time zone.
	*/
	TimeZonePtr timeZone;
	std::string pattern;
}",1,main\cpp\strftimedateformat.cpp,StrftimeDateFormatPrivate,,false,27,StrftimeDateFormatPrivate,1
53551,TYPE_DECL,,main\cpp\stringhelper.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\stringhelper.cpp,main\cpp\stringhelper.cpp:<global>,,false,1,<global>,9
54032,TYPE_DECL,,main\cpp\stringmatchfilter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\stringmatchfilter.cpp,main\cpp\stringmatchfilter.cpp:<global>,,false,1,<global>,7
54035,TYPE_DECL,,,,"struct StringMatchFilter::StringMatchFilterPrivate : public FilterPrivate
{
	StringMatchFilterPrivate() : FilterPrivate(),
		acceptOnMatch(true),
		stringToMatch() {}

	bool acceptOnMatch;
	LogString stringToMatch;
}",1,main\cpp\stringmatchfilter.cpp,StringMatchFilterPrivate,FilterPrivate,false,32,StringMatchFilterPrivate,1
54280,TYPE_DECL,,main\cpp\stringtokenizer.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\stringtokenizer.cpp,main\cpp\stringtokenizer.cpp:<global>,,false,1,<global>,5
54283,TYPE_DECL,,,,"struct StringTokenizer::StringTokenizerPrivate{
	StringTokenizerPrivate(const LogString& str, const LogString& delim1) : src(str), delim(delim1), pos(0){}
	LogString src;
	LogString delim;
	size_t pos;
}",1,main\cpp\stringtokenizer.cpp,StringTokenizerPrivate,,false,29,StringTokenizerPrivate,1
54435,TYPE_DECL,,main\cpp\syslogappender.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\syslogappender.cpp,main\cpp\syslogappender.cpp:<global>,,false,1,<global>,11
55724,TYPE_DECL,,main\cpp\syslogwriter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\syslogwriter.cpp,main\cpp\syslogwriter.cpp:<global>,,false,1,<global>,8
55727,TYPE_DECL,,,,"struct SyslogWriter::SyslogWriterPrivate {
	SyslogWriterPrivate(const LogString& syslogHost1, int syslogHostPort1)
		: syslogHost(syslogHost1), syslogHostPort(syslogHostPort1){}

	LogString syslogHost;
	int syslogHostPort;
	InetAddressPtr address;
	DatagramSocketPtr ds;
}",1,main\cpp\syslogwriter.cpp,SyslogWriterPrivate,,false,29,SyslogWriterPrivate,1
55872,TYPE_DECL,,main\cpp\system.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\system.cpp,main\cpp\system.cpp:<global>,,false,1,<global>,8
56009,TYPE_DECL,,main\cpp\systemerrwriter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\systemerrwriter.cpp,main\cpp\systemerrwriter.cpp:<global>,,false,1,<global>,6
56078,TYPE_DECL,,main\cpp\systemoutwriter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\systemoutwriter.cpp,main\cpp\systemoutwriter.cpp:<global>,,false,1,<global>,6
56155,TYPE_DECL,,main\cpp\telnetappender.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\telnetappender.cpp,main\cpp\telnetappender.cpp:<global>,,false,1,<global>,10
56160,TYPE_DECL,,,,"struct TelnetAppender::TelnetAppenderPriv : public AppenderSkeletonPrivate
{
	TelnetAppenderPriv( int port, int maxConnections ) : AppenderSkeletonPrivate(),
		port(port),
		connections(maxConnections),
		encoding(LOG4CXX_STR(""UTF-8"")),
		encoder(CharsetEncoder::getUTF8Encoder()),
		sh(),
		activeConnections(0) {}

	int port;
	ConnectionList connections;
	LogString encoding;
	LOG4CXX_NS::helpers::CharsetEncoderPtr encoder;
	std::unique_ptr<helpers::ServerSocket> serverSocket;
	std::thread sh;
	size_t activeConnections;
}",1,main\cpp\telnetappender.cpp,TelnetAppenderPriv,AppenderSkeletonPrivate,false,34,TelnetAppenderPriv,3
57188,TYPE_DECL,,main\cpp\threadlocal.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\threadlocal.cpp,main\cpp\threadlocal.cpp:<global>,,false,1,<global>,4
57235,TYPE_DECL,,main\cpp\threadpatternconverter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\threadpatternconverter.cpp,main\cpp\threadpatternconverter.cpp:<global>,,false,1,<global>,5
57285,TYPE_DECL,,main\cpp\threadspecificdata.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\threadspecificdata.cpp,main\cpp\threadspecificdata.cpp:<global>,,false,1,<global>,6
57288,TYPE_DECL,,,,"struct ThreadSpecificData::ThreadSpecificDataPrivate{
	LOG4CXX_NS::NDC::Stack ndcStack;
	LOG4CXX_NS::MDC::Map mdcMap;
}",1,main\cpp\threadspecificdata.cpp,ThreadSpecificDataPrivate,,false,30,ThreadSpecificDataPrivate,1
57486,TYPE_DECL,,main\cpp\threadusernamepatternconverter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\threadusernamepatternconverter.cpp,main\cpp\threadusernamepatternconverter.cpp:<global>,,false,1,<global>,5
57542,TYPE_DECL,,main\cpp\threadutility.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\threadutility.cpp,main\cpp\threadutility.cpp:<global>,,false,1,<global>,9
57547,TYPE_DECL,,,,"struct ThreadUtility::priv_data
{
	priv_data()
	{
		start_pre = nullptr;
		started = nullptr;
		start_post = nullptr;
	}

	ThreadStartPre start_pre;
	ThreadStarted started;
	ThreadStartPost start_post;
}",1,main\cpp\threadutility.cpp,LOG4CXX_NS.helpers.priv_data,,false,39,priv_data,1
57827,TYPE_DECL,,main\cpp\throwableinformationpatternconverter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\throwableinformationpatternconverter.cpp,main\cpp\throwableinformationpatternconverter.cpp:<global>,,false,1,<global>,7
57830,TYPE_DECL,,,,"struct ThrowableInformationPatternConverter::ThrowableInformationPatternConverterPrivate :
	public PatternConverterPrivate
{
	ThrowableInformationPatternConverterPrivate( const LogString& name, const LogString& style, bool shortReport ) :
		PatternConverterPrivate( name, style ),
		shortReport(shortReport) {}

	/**
	 * If ""short"", only first line of throwable report will be formatted.
	 */
	const bool shortReport;
}",1,main\cpp\throwableinformationpatternconverter.cpp,ThrowableInformationPatternConverterPrivate,PatternConverterPrivate,false,30,ThrowableInformationPatternConverterPrivate,1
57941,TYPE_DECL,,main\cpp\timebasedrollingpolicy.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\timebasedrollingpolicy.cpp,main\cpp\timebasedrollingpolicy.cpp:<global>,,false,1,<global>,17
57946,TYPE_DECL,,,,"struct TimeBasedRollingPolicy::TimeBasedRollingPolicyPrivate{
#if LOG4CXX_HAS_MULTIPROCESS_ROLLING_FILE_APPENDER
	TimeBasedRollingPolicyPrivate() :
		_mmap(nullptr),
		_file_map(nullptr),
		_lock_file(nullptr),
		bAlreadyInitialized(false),
		bRefreshCurFile(false){}
#else
	TimeBasedRollingPolicyPrivate(){}
#endif

		/**
		 * Time for next determination if time for rollover.
		 */
		log4cxx_time_t nextCheck;

		/**
		 * File name at last rollover.
		 */
		LogString lastFileName;

		/**
		 * Length of any file type suffix (.gz, .zip).
		 */
		int suffixLength;

		/**
		 * mmap pointer
		 */
		apr_mmap_t* _mmap;

		/*
		 * pool for mmap handler
		 * */
		LOG4CXX_NS::helpers::Pool _mmapPool;

		/**
		 * mmap file descriptor
		 */
		apr_file_t* _file_map;

		/**
		 * mmap file name
		 */
		std::string _mapFileName;

		/*
		 * lock file handle
		 * */
		apr_file_t* _lock_file;

		/**
		 * Check nextCheck if it has already been set
		 * Timebased rolling policy has an issue when working a...",1,main\cpp\timebasedrollingpolicy.cpp,TimeBasedRollingPolicyPrivate,,false,42,TimeBasedRollingPolicyPrivate,3
58655,TYPE_DECL,,main\cpp\timezone.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\timezone.cpp,main\cpp\timezone.cpp:<global>,,false,1,<global>,11
58663,TYPE_DECL,,,,"class GMTTimeZone : public TimeZone
{
	public:
		/** Class factory. */
		static const TimeZonePtr& getInstance()
		{
			static WideLife<TimeZonePtr> tz = std::make_shared<GMTTimeZone>();
			return tz;
		}

		/** Explode time to human readable form. */
		log4cxx_status_t explode( apr_time_exp_t* result, log4cxx_time_t input ) const
		{
			apr_status_t stat;

			//  APR 1.1 and early mishandles microseconds on dates
			//   before 1970, APR bug 32520
			if (LOG4CXX_UNLIKELY(input < 0 && apr_time_usec(input) < 0))
			{
				apr_time_t floorTime = (apr_time_sec(input) - 1) * APR_USEC_PER_SEC;
				stat = apr_time_exp_gmt(result, floorTime);
				result->tm_usec = (int) (input - floorTime);
			}
			else
			{
				stat = apr_time_exp_gmt( result, input );
			}

			return stat;
		}

		GMTTimeZone() : TimeZone( LOG4CXX_STR(""GMT"") )
		{
		}
}",1,main\cpp\timezone.cpp,LOG4CXX_NS.helpers.TimeZoneImpl.GMTTimeZone,TimeZone,false,43,GMTTimeZone,1
58731,TYPE_DECL,,,,"class LocalTimeZone : public TimeZone
{
	public:
		/** Class factory. */
		static const TimeZonePtr& getInstance()
		{
			static WideLife<TimeZonePtr> tz = std::make_shared<LocalTimeZone>();
			return tz;
		}

		/** Explode time to human readable form. */
		log4cxx_status_t explode( apr_time_exp_t* result, log4cxx_time_t input ) const
		{
			apr_status_t stat;

			//  APR 1.1 and early mishandles microseconds on dates
			//   before 1970, APR bug 32520
			if (LOG4CXX_UNLIKELY(input < 0 && apr_time_usec(input) < 0))
			{
				apr_time_t floorTime = (apr_time_sec(input) - 1) * APR_USEC_PER_SEC;
				stat = apr_time_exp_lt(result, floorTime);
				result->tm_usec = (int) (input - floorTime);
			}
			else
			{
				stat = apr_time_exp_lt( result, input );
			}

			return stat;
		}


		LocalTimeZone() : TimeZone( getTimeZoneName() )
		{
		}

	private:
		static const LogString getTimeZoneName()
		{
			const int MAX_TZ_LENGTH = 255;
			char tzName[MAX_TZ_LENGTH];
			apr_size_t tzLength;
			apr...",1,main\cpp\timezone.cpp,LOG4CXX_NS.helpers.TimeZoneImpl.LocalTimeZone,TimeZone,false,82,LocalTimeZone,2
58853,TYPE_DECL,,,,"class FixedTimeZone : public TimeZone
{
	public:
		FixedTimeZone( const LogString& name, apr_int32_t offset1 ) : TimeZone( name ), offset( offset1 )
		{
		}

		/** Explode time to human readable form. */
		log4cxx_status_t explode( apr_time_exp_t* result, log4cxx_time_t input ) const
		{
			apr_status_t stat;

			//  APR 1.1 and early mishandles microseconds on dates
			//   before 1970, APR bug 32520
			if (LOG4CXX_UNLIKELY(input < 0 && apr_time_usec(input) < 0))
			{
				apr_time_t floorTime = (apr_time_sec(input) - 1) * APR_USEC_PER_SEC;
				stat = apr_time_exp_tz(result, floorTime, offset);
				result->tm_usec = (int) (input - floorTime);
			}
			else
			{
				stat = apr_time_exp_tz( result, input, offset );
			}

			return stat;
		}


	private:
		const apr_int32_t offset;
}",1,main\cpp\timezone.cpp,LOG4CXX_NS.helpers.TimeZoneImpl.FixedTimeZone,TimeZone,false,144,FixedTimeZone,3
59286,TYPE_DECL,,main\cpp\transcoder.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\transcoder.cpp,main\cpp\transcoder.cpp:<global>,,false,1,<global>,15
60723,TYPE_DECL,,main\cpp\transform.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\transform.cpp,main\cpp\transform.cpp:<global>,,false,1,<global>,4
60996,TYPE_DECL,,main\cpp\triggeringpolicy.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\triggeringpolicy.cpp,main\cpp\triggeringpolicy.cpp:<global>,,false,1,<global>,2
61015,TYPE_DECL,,main\cpp\writer.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\writer.cpp,main\cpp\writer.cpp:<global>,,false,1,<global>,5
61044,TYPE_DECL,,main\cpp\writerappender.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\writerappender.cpp,main\cpp\writerappender.cpp:<global>,,false,1,<global>,8
61925,TYPE_DECL,,main\cpp\xmllayout.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\xmllayout.cpp,main\cpp\xmllayout.cpp:<global>,,false,1,<global>,11
61928,TYPE_DECL,,,,"struct XMLLayout::XMLLayoutPrivate
{
	XMLLayoutPrivate()
		: locationInfo(false)
		, properties(false)
		, expectedPatternLength(100)
		{}

	// Print no location info by default
	bool locationInfo; //= false
	bool properties; // = false

	// Expected length of a formatted event excluding the message text
	size_t expectedPatternLength;
}",1,main\cpp\xmllayout.cpp,XMLLayoutPrivate,,false,35,XMLLayoutPrivate,1
62521,TYPE_DECL,,main\cpp\xmlsocketappender.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\xmlsocketappender.cpp,main\cpp\xmlsocketappender.cpp:<global>,,false,1,<global>,14
62524,TYPE_DECL,,,,"struct XMLSocketAppender::XMLSocketAppenderPriv : public SocketAppenderSkeletonPriv
{
	XMLSocketAppenderPriv(int defaultPort, int reconnectionDelay) :
		SocketAppenderSkeletonPriv(defaultPort, reconnectionDelay) {}

	XMLSocketAppenderPriv(InetAddressPtr address, int defaultPort, int reconnectionDelay) :
		SocketAppenderSkeletonPriv( address, defaultPort, reconnectionDelay ) {}

	XMLSocketAppenderPriv(const LogString& host, int port, int delay) :
		SocketAppenderSkeletonPriv( host, port, delay ) {}

	LOG4CXX_NS::helpers::WriterPtr writer;
}",1,main\cpp\xmlsocketappender.cpp,XMLSocketAppenderPriv,SocketAppenderSkeletonPriv,false,37,XMLSocketAppenderPriv,1
62860,TYPE_DECL,,main\cpp\zipcompressaction.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\cpp\zipcompressaction.cpp,main\cpp\zipcompressaction.cpp:<global>,,false,1,<global>,8
62863,TYPE_DECL,,,,"struct ZipCompressAction::ZipCompressActionPrivate : public ActionPrivate
{
	ZipCompressActionPrivate( const File& toRename,
		const File& renameTo,
		bool deleteSource):
		source(toRename), destination(renameTo), deleteSource(deleteSource) {}

	const File source;
	const File destination;
	bool deleteSource;
	bool throwIOExceptionOnForkFailure = true;
}",1,main\cpp\zipcompressaction.cpp,ZipCompressActionPrivate,ActionPrivate,false,32,ZipCompressActionPrivate,1
63230,TYPE_DECL,,main\include\log4cxx-qt\configuration.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx-qt\configuration.hpp,main\include\log4cxx-qt\configuration.hpp:<global>,,false,1,<global>,5
63242,TYPE_DECL,,main\include\log4cxx-qt\logger.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx-qt\logger.hpp,main\include\log4cxx-qt\logger.hpp:<global>,,false,1,<global>,3
63249,TYPE_DECL,,main\include\log4cxx-qt\messagebuffer.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx-qt\messagebuffer.hpp,main\include\log4cxx-qt\messagebuffer.hpp:<global>,,false,1,<global>,2
63271,TYPE_DECL,,main\include\log4cxx-qt\messagehandler.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx-qt\messagehandler.hpp,main\include\log4cxx-qt\messagehandler.hpp:<global>,,false,1,<global>,3
63290,TYPE_DECL,,main\include\log4cxx-qt\transcoder.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx-qt\transcoder.hpp,main\include\log4cxx-qt\transcoder.hpp:<global>,,false,1,<global>,3
63301,TYPE_DECL,,main\include\log4cxx\appender.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\appender.hpp,main\include\log4cxx\appender.hpp:<global>,,false,1,<global>,4
63306,TYPE_DECL,,,,class LoggingEvent,1,main\include\log4cxx\appender.hpp,LOG4CXX_NS.spi.LoggingEvent,,false,31,LoggingEvent,1
63307,TYPE_DECL,ANY,,,typedef std::shared_ptr<LoggingEvent> LoggingEventPtr;,39,main\include\log4cxx\appender.hpp,LoggingEventPtr,,false,32,LoggingEventPtr,2
63308,TYPE_DECL,,,,class Filter,1,main\include\log4cxx\appender.hpp,LOG4CXX_NS.spi.Filter,,false,34,Filter,3
63309,TYPE_DECL,ANY,,,typedef std::shared_ptr<Filter> FilterPtr;,33,main\include\log4cxx\appender.hpp,FilterPtr,,false,35,FilterPtr,4
63310,TYPE_DECL,,,,class ErrorHandler,1,main\include\log4cxx\appender.hpp,LOG4CXX_NS.spi.ErrorHandler,,false,37,ErrorHandler,5
63311,TYPE_DECL,ANY,,,typedef std::shared_ptr<ErrorHandler> ErrorHandlerPtr;,39,main\include\log4cxx\appender.hpp,ErrorHandlerPtr,,false,38,ErrorHandlerPtr,6
63312,TYPE_DECL,,,,class Layout,1,main\include\log4cxx\appender.hpp,LOG4CXX_NS.Layout,,false,41,Layout,2
63313,TYPE_DECL,ANY,,,typedef std::shared_ptr<Layout> LayoutPtr;,33,main\include\log4cxx\appender.hpp,LayoutPtr,,false,42,LayoutPtr,3
63333,TYPE_DECL,,main\include\log4cxx\appenderskeleton.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\appenderskeleton.hpp,main\include\log4cxx\appenderskeleton.hpp:<global>,,false,1,<global>,8
63346,TYPE_DECL,,main\include\log4cxx\asyncappender.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\asyncappender.hpp,main\include\log4cxx\asyncappender.hpp:<global>,,false,1,<global>,4
63363,TYPE_DECL,,main\include\log4cxx\basicconfigurator.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\basicconfigurator.hpp,main\include\log4cxx\basicconfigurator.hpp:<global>,,false,1,<global>,5
63367,TYPE_DECL,,,,class Appender,1,main\include\log4cxx\basicconfigurator.hpp,LOG4CXX_NS.Appender,,false,28,Appender,1
63368,TYPE_DECL,ANY,,,typedef std::shared_ptr<Appender> AppenderPtr;,35,main\include\log4cxx\basicconfigurator.hpp,AppenderPtr,,false,29,AppenderPtr,2
63376,TYPE_DECL,,main\include\log4cxx\config\propertysetter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\config\propertysetter.hpp,main\include\log4cxx\config\propertysetter.hpp:<global>,,false,1,<global>,3
63381,TYPE_DECL,,,,class Object,1,main\include\log4cxx\config\propertysetter.hpp,LOG4CXX_NS.helpers.Object,,false,28,Object,1
63386,TYPE_DECL,,,,class Properties,1,main\include\log4cxx\config\propertysetter.hpp,LOG4CXX_NS.helpers.Properties,,false,40,Properties,1
63387,TYPE_DECL,,,,class Pool,1,main\include\log4cxx\config\propertysetter.hpp,LOG4CXX_NS.helpers.Pool,,false,41,Pool,2
63394,TYPE_DECL,,main\include\log4cxx\consoleappender.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\consoleappender.hpp,main\include\log4cxx\consoleappender.hpp:<global>,,false,1,<global>,2
63414,TYPE_DECL,,main\include\log4cxx\db\dbappender.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\db\dbappender.hpp,main\include\log4cxx\db\dbappender.hpp:<global>,,false,1,<global>,7
63437,TYPE_DECL,,main\include\log4cxx\db\odbcappender.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\db\odbcappender.hpp,main\include\log4cxx\db\odbcappender.hpp:<global>,,false,1,<global>,8
63453,TYPE_DECL,,main\include\log4cxx\defaultconfigurator.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\defaultconfigurator.hpp,main\include\log4cxx\defaultconfigurator.hpp:<global>,,false,1,<global>,4
63464,TYPE_DECL,,main\include\log4cxx\defaultloggerfactory.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\defaultloggerfactory.hpp,main\include\log4cxx\defaultloggerfactory.hpp:<global>,,false,1,<global>,3
63468,TYPE_DECL,,,,class Logger,1,main\include\log4cxx\defaultloggerfactory.hpp,LOG4CXX_NS.Logger,,false,26,Logger,1
63469,TYPE_DECL,ANY,,,typedef std::shared_ptr<Logger> LoggerPtr;,33,main\include\log4cxx\defaultloggerfactory.hpp,LoggerPtr,,false,27,LoggerPtr,2
63477,TYPE_DECL,,main\include\log4cxx\file.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\file.hpp,main\include\log4cxx\file.hpp:<global>,,false,1,<global>,3
63480,TYPE_DECL,,,,struct apr_file_t,2,main\include\log4cxx\file.hpp,apr_file_t,,false,25,apr_file_t,1
63481,TYPE_DECL,,,,struct apr_finfo_t,2,main\include\log4cxx\file.hpp,apr_finfo_t,,false,26,apr_finfo_t,2
63484,TYPE_DECL,,,,class Transcoder,1,main\include\log4cxx\file.hpp,LOG4CXX_NS.helpers.Transcoder,,false,33,Transcoder,1
63485,TYPE_DECL,,,,class Pool,1,main\include\log4cxx\file.hpp,LOG4CXX_NS.helpers.Pool,,false,34,Pool,2
63499,TYPE_DECL,,main\include\log4cxx\fileappender.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\fileappender.hpp,main\include\log4cxx\fileappender.hpp:<global>,,false,1,<global>,6
63504,TYPE_DECL,,,,class Pool,1,main\include\log4cxx\fileappender.hpp,LOG4CXX_NS.helpers.Pool,,false,31,Pool,1
63513,TYPE_DECL,,main\include\log4cxx\filter\andfilter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\filter\andfilter.hpp,main\include\log4cxx\filter\andfilter.hpp:<global>,,false,1,<global>,3
63524,TYPE_DECL,,main\include\log4cxx\filter\denyallfilter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\filter\denyallfilter.hpp,main\include\log4cxx\filter\denyallfilter.hpp:<global>,,false,1,<global>,2
63535,TYPE_DECL,,main\include\log4cxx\filter\expressionfilter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\filter\expressionfilter.hpp,main\include\log4cxx\filter\expressionfilter.hpp:<global>,,false,1,<global>,2
63540,TYPE_DECL,,,,class Rule,1,main\include\log4cxx\filter\expressionfilter.hpp,LOG4CXX_NS.rule.Rule,,false,27,Rule,1
63541,TYPE_DECL,ANY,,,typedef helpers::ObjectPtrT < Rule > RulePtr;,38,main\include\log4cxx\filter\expressionfilter.hpp,RulePtr,,false,28,RulePtr,2
63550,TYPE_DECL,,main\include\log4cxx\filter\levelmatchfilter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\filter\levelmatchfilter.hpp,main\include\log4cxx\filter\levelmatchfilter.hpp:<global>,,false,1,<global>,3
63554,TYPE_DECL,,,,class Level,1,main\include\log4cxx\filter\levelmatchfilter.hpp,LOG4CXX_NS.Level,,false,26,Level,1
63564,TYPE_DECL,,main\include\log4cxx\filter\levelrangefilter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\filter\levelrangefilter.hpp,main\include\log4cxx\filter\levelrangefilter.hpp:<global>,,false,1,<global>,3
63575,TYPE_DECL,,main\include\log4cxx\filter\locationinfofilter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\filter\locationinfofilter.hpp,main\include\log4cxx\filter\locationinfofilter.hpp:<global>,,false,1,<global>,2
63588,TYPE_DECL,,main\include\log4cxx\filter\loggermatchfilter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\filter\loggermatchfilter.hpp,main\include\log4cxx\filter\loggermatchfilter.hpp:<global>,,false,1,<global>,3
63592,TYPE_DECL,,,,class Level,1,main\include\log4cxx\filter\loggermatchfilter.hpp,LOG4CXX_NS.Level,,false,26,Level,1
63600,TYPE_DECL,,main\include\log4cxx\filter\mapfilter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\filter\mapfilter.hpp,main\include\log4cxx\filter\mapfilter.hpp:<global>,,false,1,<global>,2
63613,TYPE_DECL,,main\include\log4cxx\filter\propertyfilter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\filter\propertyfilter.hpp,main\include\log4cxx\filter\propertyfilter.hpp:<global>,,false,1,<global>,3
63623,TYPE_DECL,,main\include\log4cxx\filter\stringmatchfilter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\filter\stringmatchfilter.hpp,main\include\log4cxx\filter\stringmatchfilter.hpp:<global>,,false,1,<global>,2
63634,TYPE_DECL,,main\include\log4cxx\fmtlayout.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\fmtlayout.hpp,main\include\log4cxx\fmtlayout.hpp:<global>,,false,1,<global>,2
63644,TYPE_DECL,,main\include\log4cxx\helpers\absolutetimedateformat.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\absolutetimedateformat.hpp,main\include\log4cxx\helpers\absolutetimedateformat.hpp:<global>,,false,1,<global>,2
63662,TYPE_DECL,,main\include\log4cxx\helpers\appenderattachableimpl.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\appenderattachableimpl.hpp,main\include\log4cxx\helpers\appenderattachableimpl.hpp:<global>,,false,1,<global>,6
63667,TYPE_DECL,,,,class LoggingEvent,1,main\include\log4cxx\helpers\appenderattachableimpl.hpp,LOG4CXX_NS.spi.LoggingEvent,,false,32,LoggingEvent,1
63668,TYPE_DECL,ANY,,,typedef std::shared_ptr<LoggingEvent> LoggingEventPtr;,39,main\include\log4cxx\helpers\appenderattachableimpl.hpp,LoggingEventPtr,,false,33,LoggingEventPtr,2
63686,TYPE_DECL,,main\include\log4cxx\helpers\aprinitializer.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\aprinitializer.hpp,main\include\log4cxx\helpers\aprinitializer.hpp:<global>,,false,1,<global>,7
63689,TYPE_DECL,,,,struct apr_threadkey_t,2,main\include\log4cxx\helpers\aprinitializer.hpp,apr_threadkey_t,,false,31,apr_threadkey_t,1
63690,TYPE_DECL,,,,struct apr_pool_t,2,main\include\log4cxx\helpers\aprinitializer.hpp,apr_pool_t,,false,32,apr_pool_t,2
63693,TYPE_DECL,,,,class FileWatchdog,1,main\include\log4cxx\helpers\aprinitializer.hpp,LOG4CXX_NS.helpers.FileWatchdog,,false,42,FileWatchdog,1
63694,TYPE_DECL,,,,"class APRInitializer
{
	public:
		static log4cxx_time_t initialize();
		static apr_pool_t* getRootPool();
		static apr_threadkey_t* getTlsKey();
		static bool isDestructed;

		/**
		 *  Register a FileWatchdog for deletion prior to termination.
		 *    FileWatchdog must be
		 *    allocated on heap and not deleted elsewhere.
		 */
		static void registerCleanup(FileWatchdog* watchdog);
		static void unregisterCleanup(FileWatchdog* watchdog);
		static void unregisterAll();
		/**
		 *  Store a single instance type ObjectPtr for deletion prior to termination
		 */
		template <class T> static void setUnique(const std::shared_ptr<T>& pObject)
		{
			getInstance().addObject(typeid(T).hash_code(), pObject);
		}
		/**
		 *  Fetch or add a single instance type ObjectPtr for deletion prior to termination
		 */
		template <class T> static std::shared_ptr<T> getOrAddUnique(std::function<ObjectPtr()> creator)
		{
			return cast<T>(getInstance().findOrAddObject(typeid(T).hash_code(), creator));
		...",1,main\include\log4cxx\helpers\aprinitializer.hpp,LOG4CXX_NS.helpers.APRInitializer,,false,44,APRInitializer,2
63757,TYPE_DECL,,,,friend class helpers::WideLife<APRInitializer>,3,main\include\log4cxx\helpers\aprinitializer.hpp,LOG4CXX_NS.helpers.APRInitializer.WideLife<APRInitializer>,,false,77,WideLife<APRInitializer>,10
63797,TYPE_DECL,,main\include\log4cxx\helpers\bufferedwriter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\bufferedwriter.hpp,main\include\log4cxx\helpers\bufferedwriter.hpp:<global>,,false,1,<global>,2
63809,TYPE_DECL,,main\include\log4cxx\helpers\bytearrayinputstream.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\bytearrayinputstream.hpp,main\include\log4cxx\helpers\bytearrayinputstream.hpp:<global>,,false,1,<global>,3
63823,TYPE_DECL,,main\include\log4cxx\helpers\bytearrayoutputstream.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\bytearrayoutputstream.hpp,main\include\log4cxx\helpers\bytearrayoutputstream.hpp:<global>,,false,1,<global>,3
63828,TYPE_DECL,,,,class Pool,1,main\include\log4cxx\helpers\bytearrayoutputstream.hpp,LOG4CXX_NS.helpers.Pool,,false,29,Pool,1
63838,TYPE_DECL,,main\include\log4cxx\helpers\bytebuffer.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\bytebuffer.hpp,main\include\log4cxx\helpers\bytebuffer.hpp:<global>,,false,1,<global>,3
63848,TYPE_DECL,,main\include\log4cxx\helpers\cacheddateformat.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\cacheddateformat.hpp,main\include\log4cxx\helpers\cacheddateformat.hpp:<global>,,false,1,<global>,2
63858,TYPE_DECL,,main\include\log4cxx\helpers\charsetdecoder.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\charsetdecoder.hpp,main\include\log4cxx\helpers\charsetdecoder.hpp:<global>,,false,1,<global>,2
63863,TYPE_DECL,,,,class CharsetDecoder,1,main\include\log4cxx\helpers\charsetdecoder.hpp,LOG4CXX_NS.helpers.CharsetDecoder,,false,27,CharsetDecoder,1
63865,TYPE_DECL,,,,class ByteBuffer,1,main\include\log4cxx\helpers\charsetdecoder.hpp,LOG4CXX_NS.helpers.ByteBuffer,,false,29,ByteBuffer,3
63873,TYPE_DECL,,main\include\log4cxx\helpers\charsetencoder.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\charsetencoder.hpp,main\include\log4cxx\helpers\charsetencoder.hpp:<global>,,false,1,<global>,3
63878,TYPE_DECL,,,,class ByteBuffer,1,main\include\log4cxx\helpers\charsetencoder.hpp,LOG4CXX_NS.helpers.ByteBuffer,,false,29,ByteBuffer,1
63879,TYPE_DECL,,,,class CharsetEncoder,1,main\include\log4cxx\helpers\charsetencoder.hpp,LOG4CXX_NS.helpers.CharsetEncoder,,false,30,CharsetEncoder,2
63888,TYPE_DECL,,main\include\log4cxx\helpers\class.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\class.hpp,main\include\log4cxx\helpers\class.hpp:<global>,,false,1,<global>,3
63893,TYPE_DECL,,,,class Object,1,main\include\log4cxx\helpers\class.hpp,LOG4CXX_NS.helpers.Object,,false,28,Object,1
63899,TYPE_DECL,,main\include\log4cxx\helpers\classregistration.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\classregistration.hpp,main\include\log4cxx\helpers\classregistration.hpp:<global>,,false,1,<global>,2
63904,TYPE_DECL,,,,class Class,1,main\include\log4cxx\helpers\classregistration.hpp,LOG4CXX_NS.helpers.Class,,false,27,Class,1
63912,TYPE_DECL,,main\include\log4cxx\helpers\cyclicbuffer.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\cyclicbuffer.hpp,main\include\log4cxx\helpers\cyclicbuffer.hpp:<global>,,false,1,<global>,3
63924,TYPE_DECL,,main\include\log4cxx\helpers\datagrampacket.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\datagrampacket.hpp,main\include\log4cxx\helpers\datagrampacket.hpp:<global>,,false,1,<global>,3
63941,TYPE_DECL,,main\include\log4cxx\helpers\datagramsocket.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\datagramsocket.hpp,main\include\log4cxx\helpers\datagramsocket.hpp:<global>,,false,1,<global>,5
63946,TYPE_DECL,,,,class DatagramSocket,1,main\include\log4cxx\helpers\datagramsocket.hpp,LOG4CXX_NS.helpers.DatagramSocket,,false,31,DatagramSocket,1
63958,TYPE_DECL,,main\include\log4cxx\helpers\date.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\date.hpp,main\include\log4cxx\helpers\date.hpp:<global>,,false,1,<global>,4
63969,TYPE_DECL,,main\include\log4cxx\helpers\dateformat.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\dateformat.hpp,main\include\log4cxx\helpers\dateformat.hpp:<global>,,false,1,<global>,2
63980,TYPE_DECL,,main\include\log4cxx\helpers\datetimedateformat.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\datetimedateformat.hpp,main\include\log4cxx\helpers\datetimedateformat.hpp:<global>,,false,1,<global>,2
63994,TYPE_DECL,,main\include\log4cxx\helpers\exception.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\exception.hpp,main\include\log4cxx\helpers\exception.hpp:<global>,,false,1,<global>,4
64012,TYPE_DECL,,,,"class NoSuchElementException : public Exception
{
	public:
		NoSuchElementException();
		NoSuchElementException(const NoSuchElementException&);
		NoSuchElementException& operator=(const NoSuchElementException&);
}",1,main\include\log4cxx\helpers\exception.hpp,LOG4CXX_NS.helpers.NoSuchElementException,Exception,false,193,NoSuchElementException,14
64027,TYPE_DECL,,,,"class IllegalStateException : public Exception
{
	public:
		IllegalStateException();
		IllegalStateException(const IllegalStateException&);
		IllegalStateException& operator=(const IllegalStateException&);
}",1,main\include\log4cxx\helpers\exception.hpp,LOG4CXX_NS.helpers.IllegalStateException,Exception,false,201,IllegalStateException,15
64058,TYPE_DECL,,main\include\log4cxx\helpers\fileinputstream.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\fileinputstream.hpp,main\include\log4cxx\helpers\fileinputstream.hpp:<global>,,false,1,<global>,5
64073,TYPE_DECL,,main\include\log4cxx\helpers\fileoutputstream.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\fileoutputstream.hpp,main\include\log4cxx\helpers\fileoutputstream.hpp:<global>,,false,1,<global>,4
64096,TYPE_DECL,,main\include\log4cxx\helpers\filewatchdog.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\filewatchdog.hpp,main\include\log4cxx\helpers\filewatchdog.hpp:<global>,,false,1,<global>,8
64112,TYPE_DECL,,main\include\log4cxx\helpers\inetaddress.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\inetaddress.hpp,main\include\log4cxx\helpers\inetaddress.hpp:<global>,,false,1,<global>,5
64117,TYPE_DECL,,,,"class UnknownHostException : public Exception
{
	public:
		UnknownHostException(const LogString& msg);
		UnknownHostException(const UnknownHostException& src);
		UnknownHostException& operator=(const UnknownHostException& src);
}",1,main\include\log4cxx\helpers\inetaddress.hpp,LOG4CXX_NS.helpers.UnknownHostException,Exception,false,30,UnknownHostException,1
64133,TYPE_DECL,,,,class InetAddress,1,main\include\log4cxx\helpers\inetaddress.hpp,LOG4CXX_NS.helpers.InetAddress,,false,39,InetAddress,2
64141,TYPE_DECL,,main\include\log4cxx\helpers\inputstream.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\inputstream.hpp,main\include\log4cxx\helpers\inputstream.hpp:<global>,,false,1,<global>,2
64146,TYPE_DECL,,,,class ByteBuffer,1,main\include\log4cxx\helpers\inputstream.hpp,LOG4CXX_NS.helpers.ByteBuffer,,false,28,ByteBuffer,1
64157,TYPE_DECL,,main\include\log4cxx\helpers\inputstreamreader.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\inputstreamreader.hpp,main\include\log4cxx\helpers\inputstreamreader.hpp:<global>,,false,1,<global>,4
64170,TYPE_DECL,,main\include\log4cxx\helpers\integer.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\integer.hpp,main\include\log4cxx\helpers\integer.hpp:<global>,,false,1,<global>,2
64181,TYPE_DECL,,main\include\log4cxx\helpers\iso8601dateformat.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\iso8601dateformat.hpp,main\include\log4cxx\helpers\iso8601dateformat.hpp:<global>,,false,1,<global>,2
64197,TYPE_DECL,,main\include\log4cxx\helpers\loader.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\loader.hpp,main\include\log4cxx\helpers\loader.hpp:<global>,,false,1,<global>,5
64202,TYPE_DECL,,,,class Class,1,main\include\log4cxx\helpers\loader.hpp,LOG4CXX_NS.helpers.Class,,false,31,Class,1
64210,TYPE_DECL,,main\include\log4cxx\helpers\locale.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\locale.hpp,main\include\log4cxx\helpers\locale.hpp:<global>,,false,1,<global>,3
64226,TYPE_DECL,,main\include\log4cxx\helpers\loglog.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\loglog.hpp,main\include\log4cxx\helpers\loglog.hpp:<global>,,false,1,<global>,5
64240,TYPE_DECL,,main\include\log4cxx\helpers\messagebuffer.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\messagebuffer.hpp,main\include\log4cxx\helpers\messagebuffer.hpp:<global>,,false,1,<global>,4
64263,TYPE_DECL,ANY,,,typedef CharMessageBuffer MessageBuffer;,27,main\include\log4cxx\helpers\messagebuffer.hpp,MessageBuffer,,false,903,MessageBuffer,4
64264,TYPE_DECL,ANY,,,typedef CharMessageBuffer LogCharMessageBuffer;,27,main\include\log4cxx\helpers\messagebuffer.hpp,LogCharMessageBuffer,,false,904,LogCharMessageBuffer,5
64275,TYPE_DECL,,main\include\log4cxx\helpers\object.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\object.hpp,main\include\log4cxx\helpers\object.hpp:<global>,,false,1,<global>,5
64279,TYPE_DECL,,,,class AppenderSkeleton,1,main\include\log4cxx\helpers\object.hpp,LOG4CXX_NS.AppenderSkeleton,,false,97,AppenderSkeleton,1
64280,TYPE_DECL,,,,class Logger,1,main\include\log4cxx\helpers\object.hpp,LOG4CXX_NS.Logger,,false,98,Logger,2
64282,TYPE_DECL,,,,class Pool,1,main\include\log4cxx\helpers\object.hpp,LOG4CXX_NS.helpers.Pool,,false,102,Pool,1
64339,TYPE_DECL,,main\include\log4cxx\helpers\onlyonceerrorhandler.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\onlyonceerrorhandler.hpp,main\include\log4cxx\helpers\onlyonceerrorhandler.hpp:<global>,,false,1,<global>,3
64351,TYPE_DECL,,main\include\log4cxx\helpers\optionconverter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\optionconverter.hpp,main\include\log4cxx\helpers\optionconverter.hpp:<global>,,false,1,<global>,3
64355,TYPE_DECL,,,,class Level,1,main\include\log4cxx\helpers\optionconverter.hpp,LOG4CXX_NS.Level,,false,26,Level,1
64356,TYPE_DECL,,,,class File,1,main\include\log4cxx\helpers\optionconverter.hpp,LOG4CXX_NS.File,,false,27,File,2
64357,TYPE_DECL,ANY,,,typedef std::shared_ptr<Level> LevelPtr;,32,main\include\log4cxx\helpers\optionconverter.hpp,LevelPtr,,false,28,LevelPtr,3
64359,TYPE_DECL,,,,class LoggerRepository,1,main\include\log4cxx\helpers\optionconverter.hpp,LOG4CXX_NS.spi.LoggerRepository,,false,32,LoggerRepository,1
64360,TYPE_DECL,ANY,,,typedef std::shared_ptr<LoggerRepository> LoggerRepositoryPtr;,43,main\include\log4cxx\helpers\optionconverter.hpp,LoggerRepositoryPtr,,false,33,LoggerRepositoryPtr,2
64362,TYPE_DECL,,,,class Properties,1,main\include\log4cxx\helpers\optionconverter.hpp,LOG4CXX_NS.helpers.Properties,,false,38,Properties,1
64363,TYPE_DECL,,,,class Object,1,main\include\log4cxx\helpers\optionconverter.hpp,LOG4CXX_NS.helpers.Object,,false,40,Object,2
64364,TYPE_DECL,ANY,,,typedef std::shared_ptr<Object> ObjectPtr;,33,main\include\log4cxx\helpers\optionconverter.hpp,ObjectPtr,,false,41,ObjectPtr,3
64365,TYPE_DECL,,,,class Class,1,main\include\log4cxx\helpers\optionconverter.hpp,LOG4CXX_NS.helpers.Class,,false,43,Class,4
64371,TYPE_DECL,,main\include\log4cxx\helpers\outputstream.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\outputstream.hpp,main\include\log4cxx\helpers\outputstream.hpp:<global>,,false,1,<global>,2
64376,TYPE_DECL,,,,class ByteBuffer,1,main\include\log4cxx\helpers\outputstream.hpp,LOG4CXX_NS.helpers.ByteBuffer,,false,28,ByteBuffer,1
64387,TYPE_DECL,,main\include\log4cxx\helpers\outputstreamwriter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\outputstreamwriter.hpp,main\include\log4cxx\helpers\outputstreamwriter.hpp:<global>,,false,1,<global>,4
64400,TYPE_DECL,,main\include\log4cxx\helpers\pool.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\pool.hpp,main\include\log4cxx\helpers\pool.hpp:<global>,,false,1,<global>,3
64403,TYPE_DECL,,,,struct apr_pool_t,2,main\include\log4cxx\helpers\pool.hpp,apr_pool_t,,false,25,apr_pool_t,1
64421,TYPE_DECL,,main\include\log4cxx\helpers\properties.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\properties.hpp,main\include\log4cxx\helpers\properties.hpp:<global>,,false,1,<global>,7
64435,TYPE_DECL,,main\include\log4cxx\helpers\propertyresourcebundle.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\propertyresourcebundle.hpp,main\include\log4cxx\helpers\propertyresourcebundle.hpp:<global>,,false,1,<global>,4
64446,TYPE_DECL,,main\include\log4cxx\helpers\reader.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\reader.hpp,main\include\log4cxx\helpers\reader.hpp:<global>,,false,1,<global>,2
64457,TYPE_DECL,,main\include\log4cxx\helpers\relativetimedateformat.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\relativetimedateformat.hpp,main\include\log4cxx\helpers\relativetimedateformat.hpp:<global>,,false,1,<global>,2
64467,TYPE_DECL,,main\include\log4cxx\helpers\resourcebundle.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\resourcebundle.hpp,main\include\log4cxx\helpers\resourcebundle.hpp:<global>,,false,1,<global>,2
64472,TYPE_DECL,,,,class Locale,1,main\include\log4cxx\helpers\resourcebundle.hpp,LOG4CXX_NS.helpers.Locale,,false,27,Locale,1
64473,TYPE_DECL,,,,class ResourceBundle,1,main\include\log4cxx\helpers\resourcebundle.hpp,LOG4CXX_NS.helpers.ResourceBundle,,false,29,ResourceBundle,2
64482,TYPE_DECL,,main\include\log4cxx\helpers\serversocket.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\serversocket.hpp,main\include\log4cxx\helpers\serversocket.hpp:<global>,,false,1,<global>,3
64487,TYPE_DECL,,,,class ServerSocket,1,main\include\log4cxx\helpers\serversocket.hpp,LOG4CXX_NS.helpers.ServerSocket,,false,29,ServerSocket,1
64501,TYPE_DECL,,main\include\log4cxx\helpers\simpledateformat.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\simpledateformat.hpp,main\include\log4cxx\helpers\simpledateformat.hpp:<global>,,false,1,<global>,5
64507,TYPE_DECL,,,,class PatternToken,1,main\include\log4cxx\helpers\simpledateformat.hpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken,,false,35,PatternToken,1
64516,TYPE_DECL,,main\include\log4cxx\helpers\socket.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\socket.hpp,main\include\log4cxx\helpers\socket.hpp:<global>,,false,1,<global>,3
64521,TYPE_DECL,,,,class ByteBuffer,1,main\include\log4cxx\helpers\socket.hpp,LOG4CXX_NS.helpers.ByteBuffer,,false,29,ByteBuffer,1
64522,TYPE_DECL,,,,class Socket,1,main\include\log4cxx\helpers\socket.hpp,LOG4CXX_NS.helpers.Socket,,false,31,Socket,2
64534,TYPE_DECL,,main\include\log4cxx\helpers\socketoutputstream.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\socketoutputstream.hpp,main\include\log4cxx\helpers\socketoutputstream.hpp:<global>,,false,1,<global>,4
64546,TYPE_DECL,,main\include\log4cxx\helpers\strftimedateformat.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\strftimedateformat.hpp,main\include\log4cxx\helpers\strftimedateformat.hpp:<global>,,false,1,<global>,2
64556,TYPE_DECL,,main\include\log4cxx\helpers\strictmath.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\strictmath.hpp,main\include\log4cxx\helpers\strictmath.hpp:<global>,,false,1,<global>,2
64561,TYPE_DECL,,,,"class StrictMath
{
	public:
		template<typename _type> static inline const _type&
		minimum(const _type& a, const _type& b)
		{
			return (a < b) ? a : b;
		}

		template<typename _type> static inline const _type&
		maximum(const _type& a, const _type& b)
		{
			return (a > b) ? a : b;
		}
}",1,main\include\log4cxx\helpers\strictmath.hpp,LOG4CXX_NS.helpers.StrictMath,,false,31,StrictMath,1
64594,TYPE_DECL,,main\include\log4cxx\helpers\stringhelper.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\stringhelper.hpp,main\include\log4cxx\helpers\stringhelper.hpp:<global>,,false,1,<global>,3
64599,TYPE_DECL,,,,class Pool,1,main\include\log4cxx\helpers\stringhelper.hpp,LOG4CXX_NS.helpers.Pool,,false,29,Pool,1
64607,TYPE_DECL,,main\include\log4cxx\helpers\stringtokenizer.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\stringtokenizer.hpp,main\include\log4cxx\helpers\stringtokenizer.hpp:<global>,,false,1,<global>,3
64621,TYPE_DECL,,main\include\log4cxx\helpers\syslogwriter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\syslogwriter.hpp,main\include\log4cxx\helpers\syslogwriter.hpp:<global>,,false,1,<global>,4
64633,TYPE_DECL,,main\include\log4cxx\helpers\system.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\system.hpp,main\include\log4cxx\helpers\system.hpp:<global>,,false,1,<global>,3
64638,TYPE_DECL,,,,class Properties,1,main\include\log4cxx\helpers\system.hpp,LOG4CXX_NS.helpers.Properties,,false,28,Properties,1
64644,TYPE_DECL,,main\include\log4cxx\helpers\systemerrwriter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\systemerrwriter.hpp,main\include\log4cxx\helpers\systemerrwriter.hpp:<global>,,false,1,<global>,2
64654,TYPE_DECL,,main\include\log4cxx\helpers\systemoutwriter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\systemoutwriter.hpp,main\include\log4cxx\helpers\systemoutwriter.hpp:<global>,,false,1,<global>,2
64662,TYPE_DECL,,main\include\log4cxx\helpers\tchar.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\tchar.hpp,main\include\log4cxx\helpers\tchar.hpp:<global>,,false,1,<global>,1
64671,TYPE_DECL,,main\include\log4cxx\helpers\threadlocal.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\threadlocal.hpp,main\include\log4cxx\helpers\threadlocal.hpp:<global>,,false,1,<global>,3
64674,TYPE_DECL,,,,struct apr_threadkey_t,2,main\include\log4cxx\helpers\threadlocal.hpp,apr_threadkey_t,,false,34,apr_threadkey_t,1
64684,TYPE_DECL,,main\include\log4cxx\helpers\threadspecificdata.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\threadspecificdata.hpp,main\include\log4cxx\helpers\threadspecificdata.hpp:<global>,,false,1,<global>,3
64702,TYPE_DECL,,main\include\log4cxx\helpers\threadutility.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\threadutility.hpp,main\include\log4cxx\helpers\threadutility.hpp:<global>,,false,1,<global>,6
64707,TYPE_DECL,ANY,,,typedef std::function<void()> ThreadStartPre;,31,main\include\log4cxx\helpers\threadutility.hpp,ThreadStartPre,,false,38,ThreadStartPre,1
64708,TYPE_DECL,ANY,,,"typedef std::function<void( LogString threadName,
	std::thread::id threadId,
	std::thread::native_handle_type nativeHandle )> ThreadStarted;",50,main\include\log4cxx\helpers\threadutility.hpp,ThreadStarted,,false,51,ThreadStarted,2
64709,TYPE_DECL,ANY,,,typedef std::function<void()> ThreadStartPost;,31,main\include\log4cxx\helpers\threadutility.hpp,ThreadStartPost,,false,57,ThreadStartPost,3
64710,TYPE_DECL,,,,"enum class ThreadConfigurationType
{
	NoConfiguration,
	BlockSignalsOnly,
	NameThreadOnly,
	BlockSignalsAndNameThread,
}",1,main\include\log4cxx\helpers\threadutility.hpp,LOG4CXX_NS.helpers.ThreadConfigurationType,,false,59,ThreadConfigurationType,4
64715,TYPE_DECL,,,,class ThreadUtility,1,main\include\log4cxx\helpers\threadutility.hpp,LOG4CXX_NS.helpers.ThreadUtility,,false,67,ThreadUtility,5
64724,TYPE_DECL,,main\include\log4cxx\helpers\timezone.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\timezone.hpp,main\include\log4cxx\helpers\timezone.hpp:<global>,,false,1,<global>,3
64727,TYPE_DECL,,,,struct apr_time_exp_t,1,main\include\log4cxx\helpers\timezone.hpp,apr_time_exp_t,,false,24,apr_time_exp_t,1
64730,TYPE_DECL,,,,class TimeZone,1,main\include\log4cxx\helpers\timezone.hpp,LOG4CXX_NS.helpers.TimeZone,,false,30,TimeZone,1
64737,TYPE_DECL,,main\include\log4cxx\helpers\transcoder.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\transcoder.hpp,main\include\log4cxx\helpers\transcoder.hpp:<global>,,false,1,<global>,2
64742,TYPE_DECL,,,,class ByteBuffer,1,main\include\log4cxx\helpers\transcoder.hpp,LOG4CXX_NS.helpers.ByteBuffer,,false,28,ByteBuffer,1
64743,TYPE_DECL,,,,class Pool,1,main\include\log4cxx\helpers\transcoder.hpp,LOG4CXX_NS.helpers.Pool,,false,29,Pool,2
64749,TYPE_DECL,,main\include\log4cxx\helpers\transform.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\transform.hpp,main\include\log4cxx\helpers\transform.hpp:<global>,,false,1,<global>,2
64761,TYPE_DECL,,main\include\log4cxx\helpers\widelife.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\widelife.hpp,main\include\log4cxx\helpers\widelife.hpp:<global>,,false,1,<global>,3
64766,TYPE_DECL,LOG4CXX_NS.helpers.WideLife<T>,,,"class WideLife
{
public:
	WideLife()
	{		
		new(&storage) T();
	}
	template <class Arg0, class... Args>
#if defined(__cpp_concepts) && __cpp_concepts >= 201500
		requires (!std::same_as<WideLife, Arg0>)
#endif
	WideLife(Arg0&& arg0, Args&&... args)
	{		
		new(&storage) T(std::forward<Arg0>(arg0), std::forward<Args>(args)...);
	}
	
	~WideLife()
	{
#if LOG4CXX_EVENTS_AT_EXIT
		// keep the holded value alive
#else
		value().~T();
#endif
	}

	T& value()
	{
		return *reinterpret_cast<T*>(&storage);
	}
	
	const T& value() const
	{
		return *reinterpret_cast<const T*>(&storage);
	}
	
	operator T&()
	{
		return value();
	}
	
	operator const T&() const
	{
		return value();
	}

private:
	alignas(T) char storage[sizeof(T)];
	// Non-copyable
	WideLife(const WideLife& other) = delete;
	WideLife(const WideLife&& other) = delete;
	// Non-assignable
	WideLife& operator=(const WideLife& other) = delete;
	WideLife& operator=(const WideLife&& other) = delete;
}",1,main\include\log4cxx\helpers\widelife.hpp,LOG4CXX_NS.helpers.WideLife,,false,36,WideLife,1
64873,TYPE_DECL,,main\include\log4cxx\helpers\writer.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\writer.hpp,main\include\log4cxx\helpers\writer.hpp:<global>,,false,1,<global>,3
64888,TYPE_DECL,,main\include\log4cxx\helpers\xml.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\helpers\xml.hpp,main\include\log4cxx\helpers\xml.hpp:<global>,,false,1,<global>,4
64892,TYPE_DECL,,,,class File,1,main\include\log4cxx\helpers\xml.hpp,LOG4CXX_NS.File,,false,27,File,1
64894,TYPE_DECL,,,,class XMLDOMNode,1,main\include\log4cxx\helpers\xml.hpp,LOG4CXX_NS.helpers.XMLDOMNode,,false,30,XMLDOMNode,1
64895,TYPE_DECL,ANY,,,typedef std::shared_ptr<XMLDOMNode> XMLDOMNodePtr;,37,main\include\log4cxx\helpers\xml.hpp,XMLDOMNodePtr,,false,31,XMLDOMNodePtr,2
64896,TYPE_DECL,,,,class XMLDOMDocument,1,main\include\log4cxx\helpers\xml.hpp,LOG4CXX_NS.helpers.XMLDOMDocument,,false,33,XMLDOMDocument,3
64897,TYPE_DECL,ANY,,,typedef std::shared_ptr<XMLDOMDocument> XMLDOMDocumentPtr;,41,main\include\log4cxx\helpers\xml.hpp,XMLDOMDocumentPtr,,false,34,XMLDOMDocumentPtr,4
64898,TYPE_DECL,,,,class XMLDOMNodeList,1,main\include\log4cxx\helpers\xml.hpp,LOG4CXX_NS.helpers.XMLDOMNodeList,,false,36,XMLDOMNodeList,5
64899,TYPE_DECL,ANY,,,typedef std::shared_ptr<XMLDOMNodeList> XMLDOMNodeListPtr;,41,main\include\log4cxx\helpers\xml.hpp,XMLDOMNodeListPtr,,false,37,XMLDOMNodeListPtr,6
64915,TYPE_DECL,,main\include\log4cxx\hexdump.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\hexdump.hpp,main\include\log4cxx\hexdump.hpp:<global>,,false,1,<global>,3
64919,TYPE_DECL,,,,"enum class HexdumpFlags : uint32_t{
	None,
	AddStartingNewline = (0x01 << 0),
	AddEndingNewline = (0x01 << 1),
	AddNewline = AddStartingNewline | AddEndingNewline,
}",1,main\include\log4cxx\hexdump.hpp,LOG4CXX_NS.HexdumpFlags,,false,27,HexdumpFlags,1
65001,TYPE_DECL,,main\include\log4cxx\hierarchy.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\hierarchy.hpp,main\include\log4cxx\hierarchy.hpp:<global>,,false,1,<global>,9
65005,TYPE_DECL,,,,class Hierarchy,1,main\include\log4cxx\hierarchy.hpp,LOG4CXX_NS.Hierarchy,,false,34,Hierarchy,1
65014,TYPE_DECL,,main\include\log4cxx\htmllayout.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\htmllayout.hpp,main\include\log4cxx\htmllayout.hpp:<global>,,false,1,<global>,3
65028,TYPE_DECL,,main\include\log4cxx\jsonlayout.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\jsonlayout.hpp,main\include\log4cxx\jsonlayout.hpp:<global>,,false,1,<global>,4
65042,TYPE_DECL,,main\include\log4cxx\layout.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\layout.hpp,main\include\log4cxx\layout.hpp:<global>,,false,1,<global>,4
65058,TYPE_DECL,,main\include\log4cxx\level.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\level.hpp,main\include\log4cxx\level.hpp:<global>,,false,1,<global>,5
65062,TYPE_DECL,,,,class Level,1,main\include\log4cxx\level.hpp,LOG4CXX_NS.Level,,false,37,Level,1
65063,TYPE_DECL,ANY,,,typedef std::shared_ptr<Level> LevelPtr;,32,main\include\log4cxx\level.hpp,LevelPtr,,false,38,LevelPtr,2
65071,TYPE_DECL,,main\include\log4cxx\levelchange.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\levelchange.hpp,main\include\log4cxx\levelchange.hpp:<global>,,false,1,<global>,3
65075,TYPE_DECL,,,,"class LevelChange
{
	LoggerPtr m_otherCategory;
	LevelPtr m_savedLevel;
public: // ...structors
	/// Set \c otherCategory to \c level
	LevelChange(const LoggerPtr& otherCategory, const LevelPtr& level)
		: m_otherCategory(otherCategory)
		, m_savedLevel(otherCategory->getLevel())
	{
		m_otherCategory->setLevel(level);
	}
	/// Set \c otherCategory to the level of \c thisCategory
	LevelChange(const LoggerPtr& otherCategory, const LoggerPtr& thisCategory)
		: LevelChange(otherCategory, m_otherCategory->getLevel())
	{
	}
	/// Set the logger named \c otherCategory to \c level
	template <class StringType>
	LevelChange(const StringType& otherCategory, const LevelPtr& level)
		: LevelChange(LogManager::getLogger(otherCategory), level)
	{
	}
	/// Set the logger named \c otherCategory to the level of \c thisCategory
	template <class StringType>
	LevelChange(const StringType& otherCategory, const LoggerPtr& thisCategory)
		: LevelChange(LogManager::getLogger(otherCategory), thisCategory->getLe...",2,main\include\log4cxx\levelchange.hpp,LOG4CXX_NS.LevelChange,,false,41,LevelChange,1
65158,TYPE_DECL,,main\include\log4cxx\logger.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\logger.hpp,main\include\log4cxx\logger.hpp:<global>,,false,1,<global>,11
65163,TYPE_DECL,,,,class LoggerRepository,1,main\include\log4cxx\logger.hpp,LOG4CXX_NS.spi.LoggerRepository,,false,33,LoggerRepository,1
65165,TYPE_DECL,,,,class LoggerFactory,1,main\include\log4cxx\logger.hpp,LOG4CXX_NS.spi.LoggerFactory,,false,35,LoggerFactory,3
65167,TYPE_DECL,,,,class Logger,1,main\include\log4cxx\logger.hpp,LOG4CXX_NS.Logger,,false,39,Logger,2
65178,TYPE_DECL,,main\include\log4cxx\loggerinstance.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\loggerinstance.hpp,main\include\log4cxx\loggerinstance.hpp:<global>,,false,1,<global>,3
65182,TYPE_DECL,,,,"class LoggerInstancePtr
{
	bool m_hadConfiguration; //!< Did the logger repository hold a \c m_logger before creation of this instance?
	LoggerPtr m_logger;
public: // ...structors
	/// A null LoggerPtr
	LoggerInstancePtr() : m_hadConfiguration(false)
	{}
	/// A separately configurable logger named \c instanceName
	template <class StringType>
	LoggerInstancePtr(const StringType& instanceName)
		: m_hadConfiguration(LogManager::exists(instanceName))
		, m_logger(LogManager::getLogger(instanceName))
	{
	}
	/// Conditionally remove the logger from the the spi::LoggerRepository
	~LoggerInstancePtr()
	{
		reset();
	}

	const LoggerPtr& operator->() const noexcept
	{
		return m_logger;
	}

	explicit operator bool() const noexcept
	{
		return !!m_logger;
	}

	operator LoggerPtr&() noexcept
	{
		return m_logger;
	}

	operator const LoggerPtr&() const noexcept
	{
		return m_logger;
	}

	Logger* get() noexcept
	{
		return m_logger.get();
	}

	const Logger* get() const noexcept
	{
		return m_l...",2,main\include\log4cxx\loggerinstance.hpp,LOG4CXX_NS.LoggerInstancePtr,,false,46,LoggerInstancePtr,1
65308,TYPE_DECL,,main\include\log4cxx\logmanager.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\logmanager.hpp,main\include\log4cxx\logmanager.hpp:<global>,,false,1,<global>,4
65312,TYPE_DECL,,,,class Logger,1,main\include\log4cxx\logmanager.hpp,LOG4CXX_NS.Logger,,false,27,Logger,1
65313,TYPE_DECL,ANY,,,typedef std::shared_ptr<Logger> LoggerPtr;,33,main\include\log4cxx\logmanager.hpp,LoggerPtr,,false,28,LoggerPtr,2
65314,TYPE_DECL,ANY,,,typedef std::vector<LoggerPtr> LoggerList;,32,main\include\log4cxx\logmanager.hpp,LoggerList,,false,29,LoggerList,3
65316,TYPE_DECL,,,,class LoggerFactory,1,main\include\log4cxx\logmanager.hpp,LOG4CXX_NS.spi.LoggerFactory,,false,33,LoggerFactory,1
65317,TYPE_DECL,ANY,,,typedef std::shared_ptr<LoggerFactory> LoggerFactoryPtr;,40,main\include\log4cxx\logmanager.hpp,LoggerFactoryPtr,,false,34,LoggerFactoryPtr,2
65327,TYPE_DECL,,main\include\log4cxx\logstring.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\logstring.hpp,main\include\log4cxx\logstring.hpp:<global>,,false,1,<global>,4
65331,TYPE_DECL,ANY,,,typedef std::basic_string<logchar> LogString;,36,main\include\log4cxx\logstring.hpp,LogString,,false,60,LogString,1
65340,TYPE_DECL,,main\include\log4cxx\mdc.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\mdc.hpp,main\include\log4cxx\mdc.hpp:<global>,,false,1,<global>,4
65353,TYPE_DECL,,main\include\log4cxx\ndc.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\ndc.hpp,main\include\log4cxx\ndc.hpp:<global>,,false,1,<global>,4
65366,TYPE_DECL,,main\include\log4cxx\net\smtpappender.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\net\smtpappender.hpp,main\include\log4cxx\net\smtpappender.hpp:<global>,,false,1,<global>,4
65383,TYPE_DECL,,main\include\log4cxx\net\socketappenderskeleton.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\net\socketappenderskeleton.hpp,main\include\log4cxx\net\socketappenderskeleton.hpp:<global>,,false,1,<global>,5
65395,TYPE_DECL,,main\include\log4cxx\net\syslogappender.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\net\syslogappender.hpp,main\include\log4cxx\net\syslogappender.hpp:<global>,,false,1,<global>,3
65416,TYPE_DECL,,main\include\log4cxx\net\telnetappender.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\net\telnetappender.hpp,main\include\log4cxx\net\telnetappender.hpp:<global>,,false,1,<global>,7
65421,TYPE_DECL,,,,class ByteBuffer,1,main\include\log4cxx\net\telnetappender.hpp,LOG4CXX_NS.helpers.ByteBuffer,,false,32,ByteBuffer,1
65423,TYPE_DECL,ANY,,,typedef LOG4CXX_NS::helpers::SocketPtr Connection;,40,main\include\log4cxx\net\telnetappender.hpp,Connection,,false,36,Connection,1
65433,TYPE_DECL,,main\include\log4cxx\net\xmlsocketappender.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\net\xmlsocketappender.hpp,main\include\log4cxx\net\xmlsocketappender.hpp:<global>,,false,1,<global>,3
65444,TYPE_DECL,,main\include\log4cxx\nt\nteventlogappender.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\nt\nteventlogappender.hpp,main\include\log4cxx\nt\nteventlogappender.hpp:<global>,,false,1,<global>,2
65455,TYPE_DECL,,main\include\log4cxx\nt\outputdebugstringappender.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\nt\outputdebugstringappender.hpp,main\include\log4cxx\nt\outputdebugstringappender.hpp:<global>,,false,1,<global>,2
65465,TYPE_DECL,,main\include\log4cxx\pattern\classnamepatternconverter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\pattern\classnamepatternconverter.hpp,main\include\log4cxx\pattern\classnamepatternconverter.hpp:<global>,,false,1,<global>,2
65475,TYPE_DECL,,main\include\log4cxx\pattern\colorendpatternconverter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\pattern\colorendpatternconverter.hpp,main\include\log4cxx\pattern\colorendpatternconverter.hpp:<global>,,false,1,<global>,2
65485,TYPE_DECL,,main\include\log4cxx\pattern\colorstartpatternconverter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\pattern\colorstartpatternconverter.hpp,main\include\log4cxx\pattern\colorstartpatternconverter.hpp:<global>,,false,1,<global>,2
65501,TYPE_DECL,,main\include\log4cxx\pattern\datepatternconverter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\pattern\datepatternconverter.hpp,main\include\log4cxx\pattern\datepatternconverter.hpp:<global>,,false,1,<global>,5
65512,TYPE_DECL,,main\include\log4cxx\pattern\filedatepatternconverter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\pattern\filedatepatternconverter.hpp,main\include\log4cxx\pattern\filedatepatternconverter.hpp:<global>,,false,1,<global>,2
65522,TYPE_DECL,,main\include\log4cxx\pattern\filelocationpatternconverter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\pattern\filelocationpatternconverter.hpp,main\include\log4cxx\pattern\filelocationpatternconverter.hpp:<global>,,false,1,<global>,2
65534,TYPE_DECL,,main\include\log4cxx\pattern\formattinginfo.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\pattern\formattinginfo.hpp,main\include\log4cxx\pattern\formattinginfo.hpp:<global>,,false,1,<global>,3
65539,TYPE_DECL,,,,class FormattingInfo,1,main\include\log4cxx\pattern\formattinginfo.hpp,LOG4CXX_NS.pattern.FormattingInfo,,false,31,FormattingInfo,1
65540,TYPE_DECL,ANY,,,typedef std::shared_ptr<FormattingInfo> FormattingInfoPtr;,41,main\include\log4cxx\pattern\formattinginfo.hpp,FormattingInfoPtr,,false,32,FormattingInfoPtr,2
65547,TYPE_DECL,,main\include\log4cxx\pattern\fulllocationpatternconverter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\pattern\fulllocationpatternconverter.hpp,main\include\log4cxx\pattern\fulllocationpatternconverter.hpp:<global>,,false,1,<global>,2
65557,TYPE_DECL,,main\include\log4cxx\pattern\integerpatternconverter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\pattern\integerpatternconverter.hpp,main\include\log4cxx\pattern\integerpatternconverter.hpp:<global>,,false,1,<global>,2
65568,TYPE_DECL,,main\include\log4cxx\pattern\levelpatternconverter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\pattern\levelpatternconverter.hpp,main\include\log4cxx\pattern\levelpatternconverter.hpp:<global>,,false,1,<global>,2
65578,TYPE_DECL,,main\include\log4cxx\pattern\linelocationpatternconverter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\pattern\linelocationpatternconverter.hpp,main\include\log4cxx\pattern\linelocationpatternconverter.hpp:<global>,,false,1,<global>,2
65588,TYPE_DECL,,main\include\log4cxx\pattern\lineseparatorpatternconverter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\pattern\lineseparatorpatternconverter.hpp,main\include\log4cxx\pattern\lineseparatorpatternconverter.hpp:<global>,,false,1,<global>,2
65598,TYPE_DECL,,main\include\log4cxx\pattern\literalpatternconverter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\pattern\literalpatternconverter.hpp,main\include\log4cxx\pattern\literalpatternconverter.hpp:<global>,,false,1,<global>,2
65608,TYPE_DECL,,main\include\log4cxx\pattern\loggerpatternconverter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\pattern\loggerpatternconverter.hpp,main\include\log4cxx\pattern\loggerpatternconverter.hpp:<global>,,false,1,<global>,2
65620,TYPE_DECL,,main\include\log4cxx\pattern\loggingeventpatternconverter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\pattern\loggingeventpatternconverter.hpp,main\include\log4cxx\pattern\loggingeventpatternconverter.hpp:<global>,,false,1,<global>,3
65631,TYPE_DECL,,main\include\log4cxx\pattern\mdcpatternconverter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\pattern\mdcpatternconverter.hpp,main\include\log4cxx\pattern\mdcpatternconverter.hpp:<global>,,false,1,<global>,2
65641,TYPE_DECL,,main\include\log4cxx\pattern\messagepatternconverter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\pattern\messagepatternconverter.hpp,main\include\log4cxx\pattern\messagepatternconverter.hpp:<global>,,false,1,<global>,2
65651,TYPE_DECL,,main\include\log4cxx\pattern\methodlocationpatternconverter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\pattern\methodlocationpatternconverter.hpp,main\include\log4cxx\pattern\methodlocationpatternconverter.hpp:<global>,,false,1,<global>,2
65663,TYPE_DECL,,main\include\log4cxx\pattern\nameabbreviator.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\pattern\nameabbreviator.hpp,main\include\log4cxx\pattern\nameabbreviator.hpp:<global>,,false,1,<global>,3
65668,TYPE_DECL,,,,class NameAbbreviator,1,main\include\log4cxx\pattern\nameabbreviator.hpp,LOG4CXX_NS.pattern.NameAbbreviator,,false,29,NameAbbreviator,1
65679,TYPE_DECL,,main\include\log4cxx\pattern\namepatternconverter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\pattern\namepatternconverter.hpp,main\include\log4cxx\pattern\namepatternconverter.hpp:<global>,,false,1,<global>,4
65689,TYPE_DECL,,main\include\log4cxx\pattern\ndcpatternconverter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\pattern\ndcpatternconverter.hpp,main\include\log4cxx\pattern\ndcpatternconverter.hpp:<global>,,false,1,<global>,2
65703,TYPE_DECL,,main\include\log4cxx\pattern\patternconverter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\pattern\patternconverter.hpp,main\include\log4cxx\pattern\patternconverter.hpp:<global>,,false,1,<global>,4
65708,TYPE_DECL,ANY,,,typedef std::vector<LogString> OptionsList;,32,main\include\log4cxx\pattern\patternconverter.hpp,OptionsList,,false,33,OptionsList,1
65725,TYPE_DECL,,main\include\log4cxx\pattern\patternparser.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\pattern\patternparser.hpp,main\include\log4cxx\pattern\patternparser.hpp:<global>,,false,1,<global>,7
65730,TYPE_DECL,ANY,,,typedef std::function<PatternConverterPtr(const std::vector<LogString>& options)> PatternConstructor;,83,main\include\log4cxx\pattern\patternparser.hpp,PatternConstructor,,false,34,PatternConstructor,1
65731,TYPE_DECL,ANY,,,"typedef std::map<LogString, PatternConstructor> PatternMap;",49,main\include\log4cxx\pattern\patternparser.hpp,PatternMap,,false,35,PatternMap,2
65737,TYPE_DECL,,main\include\log4cxx\pattern\propertiespatternconverter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\pattern\propertiespatternconverter.hpp,main\include\log4cxx\pattern\propertiespatternconverter.hpp:<global>,,false,1,<global>,2
65747,TYPE_DECL,,main\include\log4cxx\pattern\relativetimepatternconverter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\pattern\relativetimepatternconverter.hpp,main\include\log4cxx\pattern\relativetimepatternconverter.hpp:<global>,,false,1,<global>,2
65757,TYPE_DECL,,main\include\log4cxx\pattern\shortfilelocationpatternconverter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\pattern\shortfilelocationpatternconverter.hpp,main\include\log4cxx\pattern\shortfilelocationpatternconverter.hpp:<global>,,false,1,<global>,2
65767,TYPE_DECL,,main\include\log4cxx\pattern\threadpatternconverter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\pattern\threadpatternconverter.hpp,main\include\log4cxx\pattern\threadpatternconverter.hpp:<global>,,false,1,<global>,2
65779,TYPE_DECL,,main\include\log4cxx\pattern\threadusernamepatternconverter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\pattern\threadusernamepatternconverter.hpp,main\include\log4cxx\pattern\threadusernamepatternconverter.hpp:<global>,,false,1,<global>,3
65789,TYPE_DECL,,main\include\log4cxx\pattern\throwableinformationpatternconverter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\pattern\throwableinformationpatternconverter.hpp,main\include\log4cxx\pattern\throwableinformationpatternconverter.hpp:<global>,,false,1,<global>,2
65805,TYPE_DECL,,main\include\log4cxx\patternlayout.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\patternlayout.hpp,main\include\log4cxx\patternlayout.hpp:<global>,,false,1,<global>,5
65817,TYPE_DECL,,main\include\log4cxx\private\action_priv.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\private\action_priv.hpp,main\include\log4cxx\private\action_priv.hpp:<global>,,false,1,<global>,2
65822,TYPE_DECL,,,,"struct Action::ActionPrivate
{
	ActionPrivate() :
		complete(false),
		interrupted(false),
		pool() {}

	virtual ~ActionPrivate(){}

	/**
	 * Is action complete.
	 */
	bool complete;

	/**
	 * Is action interrupted.
	 */
	bool interrupted;

	LOG4CXX_NS::helpers::Pool pool;
	std::mutex mutex;
}",1,main\include\log4cxx\private\action_priv.hpp,LOG4CXX_NS.rolling.ActionPrivate,,false,27,ActionPrivate,1
65843,TYPE_DECL,,main\include\log4cxx\private\appenderskeleton_priv.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\private\appenderskeleton_priv.hpp,main\include\log4cxx\private\appenderskeleton_priv.hpp:<global>,,false,1,<global>,4
65847,TYPE_DECL,,,,"struct AppenderSkeleton::AppenderSkeletonPrivate
{
	AppenderSkeletonPrivate() :
		threshold(Level::getAll()),
		errorHandler(std::make_shared<LOG4CXX_NS::helpers::OnlyOnceErrorHandler>()),
		closed(false) {}

	AppenderSkeletonPrivate( LayoutPtr lay ) :
		layout( lay ),
		threshold(Level::getAll()),
		errorHandler(std::make_shared<LOG4CXX_NS::helpers::OnlyOnceErrorHandler>()),
		closed(false) {}

	virtual ~AppenderSkeletonPrivate(){}

	/** The layout variable does not need to be set if the appender
	implementation has its own layout. */
	LayoutPtr layout;

	/** Appenders are named. */
	LogString name;

	/**
	There is no level threshold filtering by default.  */
	LevelPtr threshold;

	/**
	It is assumed and enforced that errorHandler is never null.
	*/
	spi::ErrorHandlerPtr errorHandler;

	/** The first filter in the filter chain. Set to <code>null</code>
	initially. */
	spi::FilterPtr headFilter;

	/** The last filter in the filter chain. */
	spi::FilterPtr tailFilter;

	/**
	Is this...",1,main\include\log4cxx\private\appenderskeleton_priv.hpp,LOG4CXX_NS.AppenderSkeletonPrivate,,false,28,AppenderSkeletonPrivate,1
65874,TYPE_DECL,,main\include\log4cxx\private\aprdatagramsocket.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\private\aprdatagramsocket.hpp,main\include\log4cxx\private\aprdatagramsocket.hpp:<global>,,false,1,<global>,2
65879,TYPE_DECL,,,,"class APRDatagramSocket : public DatagramSocket {
    private:
        struct APRDatagramSocketPriv;

    public:
	APRDatagramSocket();

	APRDatagramSocket(int port);

	APRDatagramSocket(int port, InetAddressPtr laddr);

	void bind(int lport, InetAddressPtr laddress) override;

	void close() override;

	bool isClosed() const override;

	/**  Receives a datagram packet from this socket. */
	virtual void receive(DatagramPacketPtr& p) override;

	/** Sends a datagram packet from this socket. */
	virtual void  send(DatagramPacketPtr& p) override;

	virtual void connect(InetAddressPtr address, int port) override;

    private:
	void init();
}",1,main\include\log4cxx\private\aprdatagramsocket.hpp,LOG4CXX_NS.helpers.APRDatagramSocket,DatagramSocket,false,27,APRDatagramSocket,1
65880,TYPE_DECL,,,,struct APRDatagramSocketPriv,9,main\include\log4cxx\private\aprdatagramsocket.hpp,LOG4CXX_NS.helpers.APRDatagramSocket.APRDatagramSocketPriv,,false,29,APRDatagramSocketPriv,1
65934,TYPE_DECL,,main\include\log4cxx\private\aprserversocket.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\private\aprserversocket.hpp,main\include\log4cxx\private\aprserversocket.hpp:<global>,,false,1,<global>,2
65944,TYPE_DECL,,main\include\log4cxx\private\aprsocket.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\private\aprsocket.hpp,main\include\log4cxx\private\aprsocket.hpp:<global>,,false,1,<global>,2
65947,TYPE_DECL,,,,struct apr_socket_t,1,main\include\log4cxx\private\aprsocket.hpp,apr_socket_t,,false,23,apr_socket_t,1
65957,TYPE_DECL,,main\include\log4cxx\private\atexitregistry.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\private\atexitregistry.hpp,main\include\log4cxx\private\atexitregistry.hpp:<global>,,false,1,<global>,3
65967,TYPE_DECL,,main\include\log4cxx\private\datagramsocket_priv.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\private\datagramsocket_priv.hpp,main\include\log4cxx\private\datagramsocket_priv.hpp:<global>,,false,1,<global>,2
65972,TYPE_DECL,,,,"struct DatagramSocket::DatagramSocketPriv
{
	DatagramSocketPriv()
		: port(0), localPort(0)
	{
	}

	DatagramSocketPriv(int localPort1)
		: port(0), localPort(localPort1)
	{
	}

	DatagramSocketPriv(int localPort1, InetAddressPtr localAddress1)
		: localAddress(localAddress1), port(0), localPort(localPort1)
	{
	}

	~DatagramSocketPriv() = default;

	InetAddressPtr address;

	InetAddressPtr localAddress;

	int port;

	/** The local port number to which this socket is connected. */
	int localPort;
}",1,main\include\log4cxx\private\datagramsocket_priv.hpp,LOG4CXX_NS.helpers.DatagramSocketPriv,,false,28,DatagramSocketPriv,1
66002,TYPE_DECL,,main\include\log4cxx\private\fileappender_priv.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\private\fileappender_priv.hpp,main\include\log4cxx\private\fileappender_priv.hpp:<global>,,false,1,<global>,3
66006,TYPE_DECL,,,,"struct FileAppender::FileAppenderPriv : public WriterAppender::WriterAppenderPriv
{
	FileAppenderPriv
		( LayoutPtr _layout = LayoutPtr()
		, const LogString& _fileName = LogString()
		, bool _fileAppend = true
		, bool _bufferedIO = false
		, int _bufferSize = 8 * 1024
		)
		: WriterAppenderPriv(_layout)
		, fileAppend(_fileAppend)
		, fileName(_fileName)
		, bufferedIO(_bufferedIO)
		, bufferSize(_bufferSize)
		{}

	/** Append to or truncate the file? The default value for this
	variable is <code>true</code>, meaning that by default a
	<code>FileAppender</code> will append to an existing file and
	not truncate it.
	<p>This option is meaningful only if the FileAppender opens the
	file.
	*/
	bool fileAppend;

	/**
	The name of the log file. */
	LogString fileName;

	/**
	Do we do bufferedIO? */
	bool bufferedIO;

	/**
	How big should the IO buffer be? Default is 8K. */
	int bufferSize;
}",1,main\include\log4cxx\private\fileappender_priv.hpp,LOG4CXX_NS.FileAppenderPriv,WriterAppender.WriterAppenderPriv,false,27,FileAppenderPriv,1
66024,TYPE_DECL,,main\include\log4cxx\private\filter_priv.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\private\filter_priv.hpp,main\include\log4cxx\private\filter_priv.hpp:<global>,,false,1,<global>,2
66029,TYPE_DECL,,,,"struct Filter::FilterPrivate
{
	virtual ~FilterPrivate(){}

	/**
	Points to the next filter in the filter chain.
	*/
	FilterPtr next;
}",1,main\include\log4cxx\private\filter_priv.hpp,LOG4CXX_NS.spi.FilterPrivate,,false,27,FilterPrivate,1
66037,TYPE_DECL,,main\include\log4cxx\private\nteventlogappender_priv.hpp:<global>,NAMESPACE_BLOCK,<global>,,main\include\log4cxx\private\nteventlogappender_priv.hpp,main\include\log4cxx\private\nteventlogappender_priv.hpp:<global>,,false,,<global>,1
66056,TYPE_DECL,,main\include\log4cxx\private\odbcappender_priv.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\private\odbcappender_priv.hpp,main\include\log4cxx\private\odbcappender_priv.hpp:<global>,,false,1,<global>,8
66059,TYPE_DECL,void*,,,typedef void* SQLHSTMT;,14,main\include\log4cxx\private\odbcappender_priv.hpp,SQLHSTMT,,false,35,SQLHSTMT,1
66060,TYPE_DECL,void*,,,typedef void* SQLPOINTER;,14,main\include\log4cxx\private\odbcappender_priv.hpp,SQLPOINTER,,false,36,SQLPOINTER,2
66061,TYPE_DECL,ANY,,,typedef uint64_t SQLULEN;,19,main\include\log4cxx\private\odbcappender_priv.hpp,SQLULEN,,false,37,SQLULEN,3
66062,TYPE_DECL,ANY,,,typedef int64_t SQLLEN;,18,main\include\log4cxx\private\odbcappender_priv.hpp,SQLLEN,,false,38,SQLLEN,4
66063,TYPE_DECL,long int,,,typedef long SQLINTEGER;,15,main\include\log4cxx\private\odbcappender_priv.hpp,SQLINTEGER,,false,39,SQLINTEGER,5
66064,TYPE_DECL,short int,,,typedef short SQLSMALLINT;,16,main\include\log4cxx\private\odbcappender_priv.hpp,SQLSMALLINT,,false,40,SQLSMALLINT,6
66067,TYPE_DECL,,,,"struct ODBCAppender::ODBCAppenderPriv : public AppenderSkeleton::AppenderSkeletonPrivate
{
	ODBCAppenderPriv(
#if LOG4CXX_EVENTS_AT_EXIT
		std::function<void()> atExitActivated
#endif
			)
		: AppenderSkeletonPrivate()
		, connection(0)
		, env(0)
		, preparedStatement(0)
		, bufferSize(1)
		, timeZone(helpers::TimeZone::getDefault())
#if LOG4CXX_EVENTS_AT_EXIT
		, atExitRegistryRaii(std::move(atExitActivated))
#endif
		{}

	/**
	* URL of the DB for default connection handling
	*/
	LogString databaseURL;

	/**
	* User to connect as for default connection handling
	*/
	LogString databaseUser;

	/**
	* User to use for default connection handling
	*/
	LogString databasePassword;

	/**
	* Connection used by default.  The connection is opened the first time it
	* is needed and then held open until the appender is closed (usually at
	* garbage collection).  This behavior is best modified by creating a
	* sub-class and overriding the <code>getConnection</code> and
	* <code>closeConnection<...",1,main\include\log4cxx\private\odbcappender_priv.hpp,LOG4CXX_NS.db.ODBCAppenderPriv,AppenderSkeleton.AppenderSkeletonPrivate,false,52,ODBCAppenderPriv,1
66082,TYPE_DECL,,,,"struct DataBinding
	{
		using ConverterPtr = pattern::LoggingEventPatternConverterPtr;
		ConverterPtr converter;
		SQLSMALLINT  paramType;
		SQLULEN      paramMaxCharCount;
		SQLPOINTER   paramValue;
		SQLINTEGER   paramValueSize;
		SQLLEN       strLen_or_Ind;
	}",2,main\include\log4cxx\private\odbcappender_priv.hpp,LOG4CXX_NS.db.ODBCAppenderPriv.DataBinding,,false,118,DataBinding,12
66083,TYPE_DECL,ANY,,,using ConverterPtr = pattern::LoggingEventPatternConverterPtr;,3,main\include\log4cxx\private\odbcappender_priv.hpp,ConverterPtr,,false,120,ConverterPtr,1
66109,TYPE_DECL,,main\include\log4cxx\private\patternconverter_priv.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\private\patternconverter_priv.hpp,main\include\log4cxx\private\patternconverter_priv.hpp:<global>,,false,1,<global>,2
66114,TYPE_DECL,,,,"struct PatternConverter::PatternConverterPrivate
{
	PatternConverterPrivate( const LogString& _name, const LogString& _style ) :
		name(_name),
		style(_style) {}

	virtual ~PatternConverterPrivate(){}

	/**
	 * Converter name.
	 */
	const LogString name;
	/**
	 * Converter style name.
	 */
	const LogString style;
}",1,main\include\log4cxx\private\patternconverter_priv.hpp,LOG4CXX_NS.pattern.PatternConverterPrivate,,false,31,PatternConverterPrivate,1
66137,TYPE_DECL,,main\include\log4cxx\private\rollingpolicybase_priv.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\private\rollingpolicybase_priv.hpp,main\include\log4cxx\private\rollingpolicybase_priv.hpp:<global>,,false,1,<global>,5
66142,TYPE_DECL,,,,"struct RollingPolicyBase::RollingPolicyBasePrivate {
    virtual ~RollingPolicyBasePrivate() = default;

    /**
     * File name pattern converters.
     */
    PatternConverterList patternConverters;

    /**
     * File name field specifiers.
     */
    FormattingInfoList patternFields;

    /**
     * File name pattern.
     */
    LogString fileNamePatternStr;

	bool createIntermediateDirectories = true;
}",1,main\include\log4cxx\private\rollingpolicybase_priv.hpp,LOG4CXX_NS.rolling.RollingPolicyBasePrivate,,false,30,RollingPolicyBasePrivate,1
66162,TYPE_DECL,,main\include\log4cxx\private\serversocket_priv.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\private\serversocket_priv.hpp,main\include\log4cxx\private\serversocket_priv.hpp:<global>,,false,1,<global>,2
66167,TYPE_DECL,,,,"struct ServerSocket::ServerSocketPrivate{
	ServerSocketPrivate() :
		timeout(0){}
	virtual ~ServerSocketPrivate() = default;
	int timeout;
}",1,main\include\log4cxx\private\serversocket_priv.hpp,LOG4CXX_NS.helpers.ServerSocketPrivate,,false,28,ServerSocketPrivate,1
66181,TYPE_DECL,,main\include\log4cxx\private\socket_priv.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\private\socket_priv.hpp,main\include\log4cxx\private\socket_priv.hpp:<global>,,false,1,<global>,2
66186,TYPE_DECL,,,,"struct Socket::SocketPrivate
{
	SocketPrivate(const InetAddressPtr& addr = InetAddressPtr(), int _port = 0)
		: address(addr), port(_port) {}
	virtual ~SocketPrivate() = default;
	/** The IP address of the remote end of this socket. */
	InetAddressPtr address;

	/** The port number on the remote host to which
	this socket is connected. */
	int port;
}",1,main\include\log4cxx\private\socket_priv.hpp,LOG4CXX_NS.helpers.SocketPrivate,,false,28,SocketPrivate,1
66207,TYPE_DECL,,main\include\log4cxx\private\socketappenderskeleton_priv.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\private\socketappenderskeleton_priv.hpp,main\include\log4cxx\private\socketappenderskeleton_priv.hpp:<global>,,false,1,<global>,4
66212,TYPE_DECL,,,,"struct SocketAppenderSkeleton::SocketAppenderSkeletonPriv : public AppenderSkeletonPrivate
{
	SocketAppenderSkeletonPriv(int defaultPort, int reconnectionDelay) :
		AppenderSkeletonPrivate(),
		remoteHost(),
		address(),
		port(defaultPort),
		reconnectionDelay(reconnectionDelay),
		locationInfo(false),
		thread() {}

	SocketAppenderSkeletonPriv(helpers::InetAddressPtr address, int defaultPort, int reconnectionDelay) :
		AppenderSkeletonPrivate(),
		remoteHost(),
		address(address),
		port(defaultPort),
		reconnectionDelay(reconnectionDelay),
		locationInfo(false),
		thread() {}

	SocketAppenderSkeletonPriv(const LogString& host, int port, int delay) :
		AppenderSkeletonPrivate(),
		remoteHost(host),
		address(helpers::InetAddress::getByName(host)),
		port(port),
		reconnectionDelay(delay),
		locationInfo(false),
		thread() {}

	/**
	host name
	*/
	LogString remoteHost;

	/**
	IP address
	*/
	helpers::InetAddressPtr address;

	int port;
	int reconnectionDelay;
	bool locationInfo;
	s...",1,main\include\log4cxx\private\socketappenderskeleton_priv.hpp,LOG4CXX_NS.net.SocketAppenderSkeletonPriv,AppenderSkeletonPrivate,false,29,SocketAppenderSkeletonPriv,1
66247,TYPE_DECL,,main\include\log4cxx\private\string_c11.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\private\string_c11.hpp,main\include\log4cxx\private\string_c11.hpp:<global>,,false,1,<global>,3
66379,TYPE_DECL,,main\include\log4cxx\private\syslogappender_priv.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\private\syslogappender_priv.hpp,main\include\log4cxx\private\syslogappender_priv.hpp:<global>,,false,1,<global>,5
66384,TYPE_DECL,,,,"struct SyslogAppender::SyslogAppenderPriv : public AppenderSkeleton::AppenderSkeletonPrivate
{
	SyslogAppenderPriv() :
		AppenderSkeletonPrivate(),
		syslogFacility(LOG_USER),
		facilityPrinting(false),
		maxMessageLength(1024)
	{

	}

	SyslogAppenderPriv(const LayoutPtr& layout, int syslogFacility) :
		AppenderSkeletonPrivate (layout),
		syslogFacility(syslogFacility),
		facilityPrinting(false),
		maxMessageLength(1024)
	{

	}

	SyslogAppenderPriv(const LayoutPtr& layout,
		const LogString& syslogHost, int syslogFacility) :
		AppenderSkeletonPrivate(layout),
		syslogFacility(syslogFacility),
		facilityPrinting(false),
		maxMessageLength(1024)
	{

	}

	int syslogFacility; // Have LOG_USER as default
	LogString facilityStr;
	bool facilityPrinting;
	std::unique_ptr<helpers::SyslogWriter> sw;
	LogString syslogHost;
	int syslogHostPort;
	int maxMessageLength;
}",1,main\include\log4cxx\private\syslogappender_priv.hpp,LOG4CXX_NS.net.SyslogAppenderPriv,AppenderSkeleton.AppenderSkeletonPrivate,false,57,SyslogAppenderPriv,1
66421,TYPE_DECL,,main\include\log4cxx\private\writerappender_priv.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\private\writerappender_priv.hpp,main\include\log4cxx\private\writerappender_priv.hpp:<global>,,false,1,<global>,6
66425,TYPE_DECL,,,,"struct WriterAppender::WriterAppenderPriv : public AppenderSkeleton::AppenderSkeletonPrivate
{
	WriterAppenderPriv() :
		AppenderSkeletonPrivate(),
		immediateFlush(true)
#if LOG4CXX_EVENTS_AT_EXIT
		, atExitRegistryRaii([this]{atExitActivated();})
#endif
	{
	}

	WriterAppenderPriv(const LayoutPtr& layout1,
		LOG4CXX_NS::helpers::WriterPtr& writer1) :
		AppenderSkeletonPrivate(layout1),
		immediateFlush(true),
		writer(writer1)
#if LOG4CXX_EVENTS_AT_EXIT
		, atExitRegistryRaii([this]{atExitActivated();})
#endif
	{
	}

	WriterAppenderPriv(const LayoutPtr& layout1) :
		AppenderSkeletonPrivate(layout1),
		immediateFlush(true)
#if LOG4CXX_EVENTS_AT_EXIT
		, atExitRegistryRaii([this]{atExitActivated();})
#endif
	{
	}

#if LOG4CXX_EVENTS_AT_EXIT
	void atExitActivated()
	{
		std::lock_guard<std::recursive_mutex> lock(mutex);
		if (writer)
			writer->flush(pool);
	}
#endif

	/**
	Immediate flush means that the underlying writer or output stream
	will be flushed at the end of each append ope...",1,main\include\log4cxx\private\writerappender_priv.hpp,LOG4CXX_NS.WriterAppenderPriv,AppenderSkeleton.AppenderSkeletonPrivate,false,34,WriterAppenderPriv,1
66461,TYPE_DECL,,main\include\log4cxx\propertyconfigurator.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\propertyconfigurator.hpp,main\include\log4cxx\propertyconfigurator.hpp:<global>,,false,1,<global>,6
66465,TYPE_DECL,,,,class Logger,1,main\include\log4cxx\propertyconfigurator.hpp,LOG4CXX_NS.Logger,,false,30,Logger,1
66466,TYPE_DECL,ANY,,,typedef std::shared_ptr<Logger> LoggerPtr;,33,main\include\log4cxx\propertyconfigurator.hpp,LoggerPtr,,false,31,LoggerPtr,2
66467,TYPE_DECL,,,,class Appender,1,main\include\log4cxx\propertyconfigurator.hpp,LOG4CXX_NS.Appender,,false,33,Appender,3
66468,TYPE_DECL,ANY,,,typedef std::shared_ptr<Appender> AppenderPtr;,35,main\include\log4cxx\propertyconfigurator.hpp,AppenderPtr,,false,34,AppenderPtr,4
66470,TYPE_DECL,,,,class Properties,1,main\include\log4cxx\propertyconfigurator.hpp,LOG4CXX_NS.helpers.Properties,,false,38,Properties,1
66472,TYPE_DECL,,,,class LoggerFactory,1,main\include\log4cxx\propertyconfigurator.hpp,LOG4CXX_NS.spi.LoggerFactory,,false,44,LoggerFactory,1
66473,TYPE_DECL,ANY,,,typedef std::shared_ptr<LoggerFactory> LoggerFactoryPtr;,40,main\include\log4cxx\propertyconfigurator.hpp,LoggerFactoryPtr,,false,45,LoggerFactoryPtr,2
66474,TYPE_DECL,,,,class PropertyWatchdog,1,main\include\log4cxx\propertyconfigurator.hpp,LOG4CXX_NS.PropertyWatchdog,,false,48,PropertyWatchdog,7
66484,TYPE_DECL,,main\include\log4cxx\provisionnode.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\provisionnode.hpp,main\include\log4cxx\provisionnode.hpp:<global>,,false,1,<global>,4
66488,TYPE_DECL,,,,class Logger,1,main\include\log4cxx\provisionnode.hpp,LOG4CXX_NS.Logger,,false,27,Logger,1
66489,TYPE_DECL,ANY,,,typedef std::shared_ptr<Logger> LoggerPtr;,33,main\include\log4cxx\provisionnode.hpp,LoggerPtr,,false,28,LoggerPtr,2
66490,TYPE_DECL,ANY,,,typedef std::vector<LoggerPtr> ProvisionNode;,32,main\include\log4cxx\provisionnode.hpp,ProvisionNode,,false,31,ProvisionNode,3
66501,TYPE_DECL,,main\include\log4cxx\rolling\action.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\rolling\action.hpp,main\include\log4cxx\rolling\action.hpp:<global>,,false,1,<global>,5
66506,TYPE_DECL,,,,"class Action : public virtual LOG4CXX_NS::helpers::Object
{
		DECLARE_ABSTRACT_LOG4CXX_OBJECT(Action)
		BEGIN_LOG4CXX_CAST_MAP()
		LOG4CXX_CAST_ENTRY(Action)
		END_LOG4CXX_CAST_MAP()

		LOG4CXX_DECLARE_PRIVATE_MEMBER_PTR(ActionPrivate, m_priv)

	protected:
		/**
		 * Constructor.
		 */
		Action();
		Action(LOG4CXX_PRIVATE_PTR(ActionPrivate) priv);
		virtual ~Action();

	public:
		/**
		 * Perform action.
		 *
		 * @return true if successful.
		 */
		virtual bool execute(LOG4CXX_NS::helpers::Pool& pool) const = 0;

		void run(LOG4CXX_NS::helpers::Pool& pool);

		void close();

		/**
		 * Tests if the action is complete.
		 * @return true if action is complete.
		 */
		bool isComplete() const;

		void reportException(const std::exception&);


}",1,main\include\log4cxx\rolling\action.hpp,LOG4CXX_NS.rolling.Action,LOG4CXX_NS.helpers.Object,false,35,Action,1
66545,TYPE_DECL,,main\include\log4cxx\rolling\filerenameaction.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\rolling\filerenameaction.hpp,main\include\log4cxx\rolling\filerenameaction.hpp:<global>,,false,1,<global>,3
66550,TYPE_DECL,,,,"class FileRenameAction : public Action
{
		struct FileRenameActionPrivate;
	public:
		DECLARE_ABSTRACT_LOG4CXX_OBJECT(FileRenameAction)
		BEGIN_LOG4CXX_CAST_MAP()
		LOG4CXX_CAST_ENTRY(FileRenameAction)
		LOG4CXX_CAST_ENTRY_CHAIN(Action)
		END_LOG4CXX_CAST_MAP()

		/**
		 * Constructor.
		 */
		FileRenameAction(const File& toRename,
			const File& renameTo,
			bool renameEmptyFile);

		/**
		 * Perform action.
		 *
		 * @return true if successful.
		 */
		bool execute(LOG4CXX_NS::helpers::Pool& pool) const override;
}",1,main\include\log4cxx\rolling\filerenameaction.hpp,LOG4CXX_NS.rolling.FileRenameAction,Action,false,30,FileRenameAction,1
66551,TYPE_DECL,,,,struct FileRenameActionPrivate,3,main\include\log4cxx\rolling\filerenameaction.hpp,LOG4CXX_NS.rolling.FileRenameAction.FileRenameActionPrivate,,false,32,FileRenameActionPrivate,1
66567,TYPE_DECL,,main\include\log4cxx\rolling\filterbasedtriggeringpolicy.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\rolling\filterbasedtriggeringpolicy.hpp,main\include\log4cxx\rolling\filterbasedtriggeringpolicy.hpp:<global>,,false,1,<global>,3
66572,TYPE_DECL,,,,class File,1,main\include\log4cxx\rolling\filterbasedtriggeringpolicy.hpp,LOG4CXX_NS.File,,false,30,File,1
66574,TYPE_DECL,,,,class Pool,1,main\include\log4cxx\rolling\filterbasedtriggeringpolicy.hpp,LOG4CXX_NS.helpers.Pool,,false,34,Pool,1
66582,TYPE_DECL,,main\include\log4cxx\rolling\fixedwindowrollingpolicy.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\rolling\fixedwindowrollingpolicy.hpp,main\include\log4cxx\rolling\fixedwindowrollingpolicy.hpp:<global>,,false,1,<global>,2
66587,TYPE_DECL,,,,class Pool,1,main\include\log4cxx\rolling\fixedwindowrollingpolicy.hpp,LOG4CXX_NS.helpers.Pool,,false,31,Pool,1
66597,TYPE_DECL,,main\include\log4cxx\rolling\gzcompressaction.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\rolling\gzcompressaction.hpp,main\include\log4cxx\rolling\gzcompressaction.hpp:<global>,,false,1,<global>,3
66602,TYPE_DECL,,,,"class GZCompressAction : public Action
{
		struct GZCompressActionPrivate;
	public:
		DECLARE_ABSTRACT_LOG4CXX_OBJECT(GZCompressAction)
		BEGIN_LOG4CXX_CAST_MAP()
		LOG4CXX_CAST_ENTRY(GZCompressAction)
		LOG4CXX_CAST_ENTRY_CHAIN(Action)
		END_LOG4CXX_CAST_MAP()

		/**
		 * Constructor.
		 */
		GZCompressAction(const File& source,
			const File& destination,
			bool deleteSource);
		~GZCompressAction();

		/**
		 * Perform action.
		 *
		 * @return true if successful.
		 */
		bool execute(LOG4CXX_NS::helpers::Pool& pool) const override;

		/**
		 * Set to true to throw an IOException on a fork failure.  By default, this
		 * is true.  When an IOException is thrown, this will automatically cause the
		 * error handler to be called(which is the recommended way of handling this
		 * problem).  By setting this to false, the GZCompressAction effectively
		 * turns into a FileRenameAction if any errors are encountered.
		 *
		 * @param throwIO
		 */
		void setThrowIOExceptionOnForkFailure(...",1,main\include\log4cxx\rolling\gzcompressaction.hpp,LOG4CXX_NS.rolling.GZCompressAction,Action,false,30,GZCompressAction,1
66603,TYPE_DECL,,,,struct GZCompressActionPrivate,3,main\include\log4cxx\rolling\gzcompressaction.hpp,LOG4CXX_NS.rolling.GZCompressAction.GZCompressActionPrivate,,false,32,GZCompressActionPrivate,1
66636,TYPE_DECL,,main\include\log4cxx\rolling\manualtriggeringpolicy.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\rolling\manualtriggeringpolicy.hpp,main\include\log4cxx\rolling\manualtriggeringpolicy.hpp:<global>,,false,1,<global>,2
66640,TYPE_DECL,,,,class File,1,main\include\log4cxx\rolling\manualtriggeringpolicy.hpp,LOG4CXX_NS.File,,false,26,File,1
66642,TYPE_DECL,,,,class Pool,1,main\include\log4cxx\rolling\manualtriggeringpolicy.hpp,LOG4CXX_NS.helpers.Pool,,false,30,Pool,1
66659,TYPE_DECL,,main\include\log4cxx\rolling\multiprocessrollingfileappender.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\rolling\multiprocessrollingfileappender.hpp,main\include\log4cxx\rolling\multiprocessrollingfileappender.hpp:<global>,,false,1,<global>,7
66680,TYPE_DECL,,main\include\log4cxx\rolling\rollingfileappender.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\rolling\rollingfileappender.hpp,main\include\log4cxx\rolling\rollingfileappender.hpp:<global>,,false,1,<global>,7
66695,TYPE_DECL,,main\include\log4cxx\rolling\rollingpolicy.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\rolling\rollingpolicy.hpp,main\include\log4cxx\rolling\rollingpolicy.hpp:<global>,,false,1,<global>,4
66718,TYPE_DECL,,main\include\log4cxx\rolling\rollingpolicybase.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\rolling\rollingpolicybase.hpp,main\include\log4cxx\rolling\rollingpolicybase.hpp:<global>,,false,1,<global>,8
66731,TYPE_DECL,,main\include\log4cxx\rolling\rolloverdescription.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\rolling\rolloverdescription.hpp,main\include\log4cxx\rolling\rolloverdescription.hpp:<global>,,false,1,<global>,2
66736,TYPE_DECL,,,,"class RolloverDescription : public LOG4CXX_NS::helpers::Object
{
		DECLARE_LOG4CXX_OBJECT(RolloverDescription)
		BEGIN_LOG4CXX_CAST_MAP()
		LOG4CXX_CAST_ENTRY(RolloverDescription)
		END_LOG4CXX_CAST_MAP()

		LOG4CXX_DECLARE_PRIVATE_MEMBER_PTR(RolloverDescriptionPrivate, m_priv)

	public:
		RolloverDescription();
		/**
		 * Create new instance.
		 * @param activeFileName active log file name after rollover, may not be null.
		 * @param append true if active log file after rollover should be opened for appending.
		 * @param synchronous action to be completed after close of current active log file, may be null.
		 * @param asynchronous action to be completed after close of current active log file and
		 * before next rollover attempt.
		 */
		RolloverDescription(
			const LogString& activeFileName,
			const bool append,
			const ActionPtr& synchronous,
			const ActionPtr& asynchronous);

		~RolloverDescription();

		/**
		 * Active log file name after rollover.
		 * @return active log...",1,main\include\log4cxx\rolling\rolloverdescription.hpp,LOG4CXX_NS.rolling.RolloverDescription,LOG4CXX_NS.helpers.Object,false,29,RolloverDescription,1
66773,TYPE_DECL,,main\include\log4cxx\rolling\sizebasedtriggeringpolicy.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\rolling\sizebasedtriggeringpolicy.hpp,main\include\log4cxx\rolling\sizebasedtriggeringpolicy.hpp:<global>,,false,1,<global>,2
66777,TYPE_DECL,,,,class File,1,main\include\log4cxx\rolling\sizebasedtriggeringpolicy.hpp,LOG4CXX_NS.File,,false,26,File,1
66779,TYPE_DECL,,,,class Pool,1,main\include\log4cxx\rolling\sizebasedtriggeringpolicy.hpp,LOG4CXX_NS.helpers.Pool,,false,30,Pool,1
66795,TYPE_DECL,,main\include\log4cxx\rolling\timebasedrollingpolicy.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\rolling\timebasedrollingpolicy.hpp,main\include\log4cxx\rolling\timebasedrollingpolicy.hpp:<global>,,false,1,<global>,6
66812,TYPE_DECL,,main\include\log4cxx\rolling\triggeringpolicy.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\rolling\triggeringpolicy.hpp,main\include\log4cxx\rolling\triggeringpolicy.hpp:<global>,,false,1,<global>,5
66816,TYPE_DECL,,,,class File,1,main\include\log4cxx\rolling\triggeringpolicy.hpp,LOG4CXX_NS.File,,false,30,File,1
66826,TYPE_DECL,,main\include\log4cxx\rolling\zipcompressaction.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\rolling\zipcompressaction.hpp,main\include\log4cxx\rolling\zipcompressaction.hpp:<global>,,false,1,<global>,3
66831,TYPE_DECL,,,,"class ZipCompressAction : public Action
{
		struct ZipCompressActionPrivate;
	public:
		DECLARE_ABSTRACT_LOG4CXX_OBJECT(ZipCompressAction)
		BEGIN_LOG4CXX_CAST_MAP()
		LOG4CXX_CAST_ENTRY(ZipCompressAction)
		LOG4CXX_CAST_ENTRY_CHAIN(Action)
		END_LOG4CXX_CAST_MAP()

		/**
		 * Constructor.
		 */
		ZipCompressAction(const File& source,
			const File& destination,
			bool deleteSource);

		/**
		 * Perform action.
		 *
		 * @return true if successful.
		 */
		bool execute(LOG4CXX_NS::helpers::Pool& pool) const override;

		/**
		 * Set to true to throw an IOException on a fork failure.  By default, this
		 * is true.  When an IOException is thrown, this will automatically cause the
		 * error handler to be called(which is the recommended way of handling this
		 * problem).  By setting this to false, the ZipCompressAction effectively
		 * turns into a FileRenameAction if any errors are encountered.
		 *
		 * @param throwIO
		 */
		void setThrowIOExceptionOnForkFailure(bool throwIO);

	...",1,main\include\log4cxx\rolling\zipcompressaction.hpp,LOG4CXX_NS.rolling.ZipCompressAction,Action,false,30,ZipCompressAction,1
66832,TYPE_DECL,,,,struct ZipCompressActionPrivate,3,main\include\log4cxx\rolling\zipcompressaction.hpp,LOG4CXX_NS.rolling.ZipCompressAction.ZipCompressActionPrivate,,false,32,ZipCompressActionPrivate,1
66861,TYPE_DECL,,main\include\log4cxx\simplelayout.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\simplelayout.hpp,main\include\log4cxx\simplelayout.hpp:<global>,,false,1,<global>,2
66877,TYPE_DECL,,main\include\log4cxx\spi\appenderattachable.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\spi\appenderattachable.hpp,main\include\log4cxx\spi\appenderattachable.hpp:<global>,,false,1,<global>,5
66888,TYPE_DECL,,main\include\log4cxx\spi\configurator.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\spi\configurator.hpp,main\include\log4cxx\spi\configurator.hpp:<global>,,false,1,<global>,2
66892,TYPE_DECL,,,,class File,1,main\include\log4cxx\spi\configurator.hpp,LOG4CXX_NS.File,,false,25,File,1
66894,TYPE_DECL,,,,"enum class ConfigurationStatus{
	Configured,
	NotConfigured,
}",1,main\include\log4cxx\spi\configurator.hpp,LOG4CXX_NS.spi.ConfigurationStatus,,false,30,ConfigurationStatus,1
66909,TYPE_DECL,,main\include\log4cxx\spi\defaultrepositoryselector.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\spi\defaultrepositoryselector.hpp,main\include\log4cxx\spi\defaultrepositoryselector.hpp:<global>,,false,1,<global>,5
66925,TYPE_DECL,,main\include\log4cxx\spi\errorhandler.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\spi\errorhandler.hpp,main\include\log4cxx\spi\errorhandler.hpp:<global>,,false,1,<global>,5
66930,TYPE_DECL,,,,"class ErrorCode
{
	public:
		enum
		{
			GENERIC_FAILURE = 0,
			WRITE_FAILURE = 1,
			FLUSH_FAILURE = 2,
			CLOSE_FAILURE = 3,
			FILE_OPEN_FAILURE = 4,
			MISSING_LAYOUT = 5,
			ADDRESS_PARSE_FAILURE = 6
		};
}",1,main\include\log4cxx\spi\errorhandler.hpp,LOG4CXX_NS.spi.ErrorCode,,false,30,ErrorCode,1
66931,TYPE_DECL,,,,"enum
		{
			GENERIC_FAILURE = 0,
			WRITE_FAILURE = 1,
			FLUSH_FAILURE = 2,
			CLOSE_FAILURE = 3,
			FILE_OPEN_FAILURE = 4,
			MISSING_LAYOUT = 5,
			ADDRESS_PARSE_FAILURE = 6
		}",3,main\include\log4cxx\spi\errorhandler.hpp,LOG4CXX_NS.spi.ErrorCode.anonymous_enum_0,,false,33,anonymous_enum_0,1
66974,TYPE_DECL,,main\include\log4cxx\spi\filter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\spi\filter.hpp,main\include\log4cxx\spi\filter.hpp:<global>,,false,1,<global>,4
66979,TYPE_DECL,,,,class Filter,1,main\include\log4cxx\spi\filter.hpp,LOG4CXX_NS.spi.Filter,,false,29,Filter,1
66988,TYPE_DECL,,main\include\log4cxx\spi\hierarchyeventlistener.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\spi\hierarchyeventlistener.hpp,main\include\log4cxx\spi\hierarchyeventlistener.hpp:<global>,,false,1,<global>,3
66992,TYPE_DECL,,,,class Logger,1,main\include\log4cxx\spi\hierarchyeventlistener.hpp,LOG4CXX_NS.Logger,,false,26,Logger,1
66993,TYPE_DECL,,,,class Appender,1,main\include\log4cxx\spi\hierarchyeventlistener.hpp,LOG4CXX_NS.Appender,,false,27,Appender,2
67008,TYPE_DECL,,main\include\log4cxx\spi\location\locationinfo.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\spi\location\locationinfo.hpp,main\include\log4cxx\spi\location\locationinfo.hpp:<global>,,false,1,<global>,5
67018,TYPE_DECL,,main\include\log4cxx\spi\loggerfactory.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\spi\loggerfactory.hpp,main\include\log4cxx\spi\loggerfactory.hpp:<global>,,false,1,<global>,2
67036,TYPE_DECL,,main\include\log4cxx\spi\loggerrepository.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\spi\loggerrepository.hpp,main\include\log4cxx\spi\loggerrepository.hpp:<global>,,false,1,<global>,6
67058,TYPE_DECL,,main\include\log4cxx\spi\loggingevent.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\spi\loggingevent.hpp,main\include\log4cxx\spi\loggingevent.hpp:<global>,,false,1,<global>,8
67063,TYPE_DECL,,,,class ObjectOutputStream,1,main\include\log4cxx\spi\loggingevent.hpp,LOG4CXX_NS.helpers.ObjectOutputStream,,false,34,ObjectOutputStream,1
67075,TYPE_DECL,,main\include\log4cxx\spi\optionhandler.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\spi\optionhandler.hpp,main\include\log4cxx\spi\optionhandler.hpp:<global>,,false,1,<global>,3
67080,TYPE_DECL,,,,class OptionHandler,1,main\include\log4cxx\spi\optionhandler.hpp,LOG4CXX_NS.spi.OptionHandler,,false,28,OptionHandler,1
67081,TYPE_DECL,ANY,,,typedef std::shared_ptr<OptionHandler> OptionHandlerPtr;,40,main\include\log4cxx\spi\optionhandler.hpp,OptionHandlerPtr,,false,29,OptionHandlerPtr,2
67087,TYPE_DECL,,main\include\log4cxx\spi\repositoryselector.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\spi\repositoryselector.hpp,main\include\log4cxx\spi\repositoryselector.hpp:<global>,,false,1,<global>,2
67092,TYPE_DECL,,,,class LoggerRepository,1,main\include\log4cxx\spi\repositoryselector.hpp,LOG4CXX_NS.spi.LoggerRepository,,false,27,LoggerRepository,1
67093,TYPE_DECL,ANY,,,typedef std::shared_ptr<LoggerRepository> LoggerRepositoryPtr;,43,main\include\log4cxx\spi\repositoryselector.hpp,LoggerRepositoryPtr,,false,28,LoggerRepositoryPtr,2
67100,TYPE_DECL,,main\include\log4cxx\spi\rootlogger.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\spi\rootlogger.hpp,main\include\log4cxx\spi\rootlogger.hpp:<global>,,false,1,<global>,2
67110,TYPE_DECL,,main\include\log4cxx\spi\triggeringeventevaluator.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\spi\triggeringeventevaluator.hpp,main\include\log4cxx\spi\triggeringeventevaluator.hpp:<global>,,false,1,<global>,2
67125,TYPE_DECL,,main\include\log4cxx\stream.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\stream.hpp,main\include\log4cxx\stream.hpp:<global>,,false,1,<global>,4
67148,TYPE_DECL,,main\include\log4cxx\varia\fallbackerrorhandler.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\varia\fallbackerrorhandler.hpp,main\include\log4cxx\varia\fallbackerrorhandler.hpp:<global>,,false,1,<global>,6
67163,TYPE_DECL,,main\include\log4cxx\writerappender.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\writerappender.hpp,main\include\log4cxx\writerappender.hpp:<global>,,false,1,<global>,4
67168,TYPE_DECL,,,,class Transcoder,1,main\include\log4cxx\writerappender.hpp,LOG4CXX_NS.helpers.Transcoder,,false,30,Transcoder,1
67199,TYPE_DECL,,main\include\log4cxx\xml\domconfigurator.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\xml\domconfigurator.hpp,main\include\log4cxx\xml\domconfigurator.hpp:<global>,,false,1,<global>,14
67206,TYPE_DECL,,main\include\log4cxx\xml\xmllayout.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\include\log4cxx\xml\xmllayout.hpp,main\include\log4cxx\xml\xmllayout.hpp:<global>,,false,1,<global>,2
67223,TYPE_DECL,,main\mock-apple\CFString.cpp:<global>,NAMESPACE_BLOCK,<global>,1,main\mock-apple\CFString.cpp,main\mock-apple\CFString.cpp:<global>,,false,1,<global>,5
67417,TYPE_DECL,,main\mock-apple\CoreFoundation\CFString.hpp:<global>,NAMESPACE_BLOCK,<global>,1,main\mock-apple\CoreFoundation\CFString.hpp,main\mock-apple\CoreFoundation\CFString.hpp:<global>,,false,1,<global>,2
67420,TYPE_DECL,unsigned shortint,,,typedef unsigned short UniChar;,24,main\mock-apple\CoreFoundation\CFString.hpp,UniChar,,false,7,UniChar,1
67421,TYPE_DECL,long int,,,typedef long CFIndex;,14,main\mock-apple\CoreFoundation\CFString.hpp,CFIndex,,false,8,CFIndex,2
67422,TYPE_DECL,CFRange,,,"typedef struct __CFRange {
	CFIndex location;
	CFIndex length;
}",1,main\mock-apple\CoreFoundation\CFString.hpp,__CFRange,,false,9,__CFRange,3
67425,TYPE_DECL,__CFRange,,,"typedef struct __CFRange {
	CFIndex location;
	CFIndex length;
} CFRange;",3,main\mock-apple\CoreFoundation\CFString.hpp,CFRange,,false,12,CFRange,4
67426,TYPE_DECL,CFStringRef,,,typedef const struct __CFString,1,main\mock-apple\CoreFoundation\CFString.hpp,__CFString,,false,13,__CFString,5
67427,TYPE_DECL,__CFString,,,typedef const struct __CFString* CFStringRef;,32,main\mock-apple\CoreFoundation\CFString.hpp,CFStringRef,,false,13,CFStringRef,6
67428,TYPE_DECL,CFAllocatorRef,,,typedef const struct __CFAllocator,1,main\mock-apple\CoreFoundation\CFString.hpp,__CFAllocator,,false,14,__CFAllocator,7
67429,TYPE_DECL,__CFAllocator,,,typedef const struct __CFAllocator* CFAllocatorRef;,35,main\mock-apple\CoreFoundation\CFString.hpp,CFAllocatorRef,,false,14,CFAllocatorRef,8
67430,TYPE_DECL,ANY,,,typedef uint32_t CFStringEncoding;,18,main\mock-apple\CoreFoundation\CFString.hpp,CFStringEncoding,,false,15,CFStringEncoding,9
68219,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,BINDING_NO_CLASS!,,<includes>,!ISemanticProblem.BINDING_NO_CLASS!,,true,,BINDING_NO_CLASS!,-1
68220,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AMPMToken,,<includes>,AMPMToken,,true,,AMPMToken,-1
68221,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ANY,,<includes>,ANY,,true,,ANY,-1
68222,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ANY*,,<includes>,ANY*,,true,,ANY*,-1
68223,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,APRInitializer,,<includes>,APRInitializer,,true,,APRInitializer,-1
68224,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AbbreviatedDayNameToken,,<includes>,AbbreviatedDayNameToken,,true,,AbbreviatedDayNameToken,-1
68225,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AbbreviatedMonthNameToken,,<includes>,AbbreviatedMonthNameToken,,true,,AbbreviatedMonthNameToken,-1
68226,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Action,,<includes>,Action,,true,,Action,-1
68227,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ActionPrivate,,<includes>,ActionPrivate,,true,,ActionPrivate,-1
68228,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ActionPtr,,<includes>,ActionPtr,,true,,ActionPtr,-1
68229,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Appender*,,<includes>,Appender*,,true,,Appender*,-1
68230,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AppenderAttachablePtr,,<includes>,AppenderAttachablePtr,,true,,AppenderAttachablePtr,-1
68231,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AppenderList,,<includes>,AppenderList,,true,,AppenderList,-1
68232,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AppenderMap,,<includes>,AppenderMap,,true,,AppenderMap,-1
68233,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AppenderSkeleton,,<includes>,AppenderSkeleton,,true,,AppenderSkeleton,-1
68234,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AppenderSkeletonPrivate,,<includes>,AppenderSkeleton.AppenderSkeletonPrivate,,true,,AppenderSkeletonPrivate,-1
68235,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AppenderSkeletonPrivate,,<includes>,AppenderSkeletonPrivate,,true,,AppenderSkeletonPrivate,-1
68236,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AppenderWeakPtr,,<includes>,AppenderWeakPtr,,true,,AppenderWeakPtr,-1
68237,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Arg0,,<includes>,Arg0,,true,,Arg0,-1
68238,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Args,,<includes>,Args,,true,,Args,-1
68239,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AsyncAppender,,<includes>,AsyncAppender,,true,,AsyncAppender,-1
68240,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AtExitRegistry,,<includes>,AtExitRegistry,,true,,AtExitRegistry,-1
68241,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AtExitRegistryImpl,,<includes>,AtExitRegistryImpl,,true,,AtExitRegistryImpl,-1
68242,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,BasicConfigurator,,<includes>,BasicConfigurator,,true,,BasicConfigurator,-1
68243,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,BindException,,<includes>,BindException,,true,,BindException,-1
68244,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ByteBuffer,,<includes>,ByteBuffer,,true,,ByteBuffer,-1
68245,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ByteList,,<includes>,ByteList,,true,,ByteList,-1
68246,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Ch*,,<includes>,Ch*,,true,,Ch*,-1
68247,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CharMessageBuffer,,<includes>,CharMessageBuffer,,true,,CharMessageBuffer,-1
68248,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CharsetDecoder,,<includes>,CharsetDecoder,,true,,CharsetDecoder,-1
68249,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CharsetDecoderPtr,,<includes>,CharsetDecoderPtr,,true,,CharsetDecoderPtr,-1
68250,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CharsetEncoder,,<includes>,CharsetEncoder,,true,,CharsetEncoder,-1
68251,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CharsetEncoderPtr,,<includes>,CharsetEncoderPtr,,true,,CharsetEncoderPtr,-1
68252,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Class,,<includes>,Class,,true,,Class,-1
68253,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Class*,,<includes>,Class*,,true,,Class*,-1
68254,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ClassAccessor,,<includes>,ClassAccessor,,true,,ClassAccessor,-1
68255,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ClassMap,,<includes>,ClassMap,,true,,ClassMap,-1
68256,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ClassNamePatternConverter,,<includes>,ClassNamePatternConverter,,true,,ClassNamePatternConverter,-1
68257,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ClassNotFoundException,,<includes>,ClassNotFoundException,,true,,ClassNotFoundException,-1
68258,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ClosedChannelException,,<includes>,ClosedChannelException,,true,,ClosedChannelException,-1
68259,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Configuration,,<includes>,Configuration,,true,,Configuration,-1
68260,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ConfigurationStatus,,<includes>,ConfigurationStatus,,true,,ConfigurationStatus,-1
68261,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ConfiguratorPtr,,<includes>,ConfiguratorPtr,,true,,ConfiguratorPtr,-1
68262,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ConfiguratorWatchdog,,<includes>,ConfiguratorWatchdog,,true,,ConfiguratorWatchdog,-1
68263,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ConnectException,,<includes>,ConnectException,,true,,ConnectException,-1
68264,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ConnectionList,,<includes>,ConnectionList,,true,,ConnectionList,-1
68265,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CountingOutputStream,,<includes>,CountingOutputStream,,true,,CountingOutputStream,-1
68266,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DECLARE_ABSTRACT_LOG4CXX_OBJECT,,<includes>,DECLARE_ABSTRACT_LOG4CXX_OBJECT,,true,,DECLARE_ABSTRACT_LOG4CXX_OBJECT,-1
68267,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DECLARE_LOG4CXX_OBJECT,,<includes>,DECLARE_LOG4CXX_OBJECT,,true,,DECLARE_LOG4CXX_OBJECT,-1
68268,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DOMConfigurator,,<includes>,DOMConfigurator,,true,,DOMConfigurator,-1
68269,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DatagramPacketPtr,,<includes>,DatagramPacketPtr,,true,,DatagramPacketPtr,-1
68270,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DatagramSocket,,<includes>,DatagramSocket,,true,,DatagramSocket,-1
68271,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DatagramSocketPriv,,<includes>,DatagramSocketPriv,,true,,DatagramSocketPriv,-1
68272,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DatagramSocketPtr,,<includes>,DatagramSocketPtr,,true,,DatagramSocketPtr,-1
68273,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DatagramSocketUniquePtr,,<includes>,DatagramSocketUniquePtr,,true,,DatagramSocketUniquePtr,-1
68274,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Date,,<includes>,Date,,true,,Date,-1
68275,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DateFormatPtr,,<includes>,DateFormatPtr,,true,,DateFormatPtr,-1
68276,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DatePatternConverter,,<includes>,DatePatternConverter,,true,,DatePatternConverter,-1
68277,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DatePatternConverterPtr,,<includes>,DatePatternConverterPtr,,true,,DatePatternConverterPtr,-1
68278,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DatePtr,,<includes>,DatePtr,,true,,DatePtr,-1
68279,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DayInMonthToken,,<includes>,DayInMonthToken,,true,,DayInMonthToken,-1
68280,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DayInYearToken,,<includes>,DayInYearToken,,true,,DayInYearToken,-1
68281,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DayOfWeekInMonthToken,,<includes>,DayOfWeekInMonthToken,,true,,DayOfWeekInMonthToken,-1
68282,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DiscardSummary*,,<includes>,DiscardSummary*,,true,,DiscardSummary*,-1
68283,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,EraToken,,<includes>,EraToken,,true,,EraToken,-1
68284,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Exception,,<includes>,Exception,,true,,Exception,-1
68285,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FMTLayout,,<includes>,FMTLayout,,true,,FMTLayout,-1
68286,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FallbackErrorHandler,,<includes>,FallbackErrorHandler,,true,,FallbackErrorHandler,-1
68287,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,File,,<includes>,File,,true,,File,-1
68288,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,File*,,<includes>,File*,,true,,File*,-1
68289,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FileAppenderPriv,,<includes>,FileAppenderPriv,,true,,FileAppenderPriv,-1
68290,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FileInputStream,,<includes>,FileInputStream,,true,,FileInputStream,-1
68291,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FileLocationPatternConverter,,<includes>,FileLocationPatternConverter,,true,,FileLocationPatternConverter,-1
68292,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FileOutputStream,,<includes>,FileOutputStream,,true,,FileOutputStream,-1
68293,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FileOutputStreamPtr,,<includes>,FileOutputStreamPtr,,true,,FileOutputStreamPtr,-1
68294,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FileWatchdog,,<includes>,FileWatchdog,,true,,FileWatchdog,-1
68295,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FileWatchdog*,,<includes>,FileWatchdog*,,true,,FileWatchdog*,-1
68296,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FilterBasedTriggeringPolicy,,<includes>,FilterBasedTriggeringPolicy,,true,,FilterBasedTriggeringPolicy,-1
68297,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FilterBasedTriggeringPolicyPtr,,<includes>,FilterBasedTriggeringPolicyPtr,,true,,FilterBasedTriggeringPolicyPtr,-1
68298,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FilterDecision,,<includes>,FilterDecision,,true,,FilterDecision,-1
68299,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FilterPrivate,,<includes>,FilterPrivate,,true,,FilterPrivate,-1
68300,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FixedWindowRollingPolicy,,<includes>,FixedWindowRollingPolicy,,true,,FixedWindowRollingPolicy,-1
68301,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FormattingInfoList,,<includes>,FormattingInfoList,,true,,FormattingInfoList,-1
68302,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FullDayNameToken,,<includes>,FullDayNameToken,,true,,FullDayNameToken,-1
68303,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FullLocationPatternConverter,,<includes>,FullLocationPatternConverter,,true,,FullLocationPatternConverter,-1
68304,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FullMonthNameToken,,<includes>,FullMonthNameToken,,true,,FullMonthNameToken,-1
68305,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,GMTTimeZone,,<includes>,GMTTimeZone,,true,,GMTTimeZone,-1
68306,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,GZCompressAction,,<includes>,GZCompressAction,,true,,GZCompressAction,-1
68307,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,GZCompressActionPtr,,<includes>,GZCompressActionPtr,,true,,GZCompressActionPtr,-1
68308,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,GeneralTimeZoneToken,,<includes>,GeneralTimeZoneToken,,true,,GeneralTimeZoneToken,-1
68309,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,GetCurrentTimeFn,,<includes>,GetCurrentTimeFn,,true,,GetCurrentTimeFn,-1
68310,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HTMLLayout,,<includes>,HTMLLayout,,true,,HTMLLayout,-1
68311,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HexdumpFlags,,<includes>,HexdumpFlags,,true,,HexdumpFlags,-1
68312,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Hierarchy,,<includes>,Hierarchy,,true,,Hierarchy,-1
68313,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Hierarchy*,,<includes>,Hierarchy*,,true,,Hierarchy*,-1
68314,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HierarchyEventListenerList,,<includes>,HierarchyEventListenerList,,true,,HierarchyEventListenerList,-1
68315,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HierarchyEventListenerPtr,,<includes>,HierarchyEventListenerPtr,,true,,HierarchyEventListenerPtr,-1
68316,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HierarchyPtr,,<includes>,HierarchyPtr,,true,,HierarchyPtr,-1
68317,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HourToken,,<includes>,HourToken,,true,,HourToken,-1
68318,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IMPLEMENT_LOG4CXX_OBJECT,,<includes>,IMPLEMENT_LOG4CXX_OBJECT,,true,,IMPLEMENT_LOG4CXX_OBJECT,-1
68319,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IOException,,<includes>,IOException,,true,,IOException,-1
68320,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ISOLatinCharsetDecoder,,<includes>,ISOLatinCharsetDecoder,,true,,ISOLatinCharsetDecoder,-1
68321,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ISOLatinCharsetEncoder,,<includes>,ISOLatinCharsetEncoder,,true,,ISOLatinCharsetEncoder,-1
68322,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IllegalArgumentException,,<includes>,IllegalArgumentException,,true,,IllegalArgumentException,-1
68323,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IllegalMonitorStateException,,<includes>,IllegalMonitorStateException,,true,,IllegalMonitorStateException,-1
68324,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IllegalStateException,,<includes>,IllegalStateException,,true,,IllegalStateException,-1
68325,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,InetAddress,,<includes>,InetAddress,,true,,InetAddress,-1
68326,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,InetAddressPtr,,<includes>,InetAddressPtr,,true,,InetAddressPtr,-1
68327,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,InputStreamPtr,,<includes>,InputStreamPtr,,true,,InputStreamPtr,-1
68328,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,InstantiationException,,<includes>,InstantiationException,,true,,InstantiationException,-1
68329,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IntegerPatternConverterPtr,,<includes>,IntegerPatternConverterPtr,,true,,IntegerPatternConverterPtr,-1
68330,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IntegerPtr,,<includes>,IntegerPtr,,true,,IntegerPtr,-1
68331,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,InterruptedException,,<includes>,InterruptedException,,true,,InterruptedException,-1
68332,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,InterruptedIOException,,<includes>,InterruptedIOException,,true,,InterruptedIOException,-1
68333,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Iterator,,<includes>,Iterator,,true,,Iterator,-1
68334,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,JSONLayout,,<includes>,JSONLayout,,true,,JSONLayout,-1
68335,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,KeySet,,<includes>,KeySet,,true,,KeySet,-1
68336,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,KeyVals,,<includes>,KeyVals,,true,,KeyVals,-1
68337,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LOG4CXX_INSTANTIATE_EXPORTED_PTR,,<includes>,LOG4CXX_INSTANTIATE_EXPORTED_PTR,,true,,LOG4CXX_INSTANTIATE_EXPORTED_PTR,-1
68338,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LOG4CXX_NS,,<includes>,LOG4CXX_NS,,true,,LOG4CXX_NS,-1
68339,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WideLife<T>,,<includes>,LOG4CXX_NS.helpers.WideLife<T>,,true,,WideLife<T>,-1
68340,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LOG4CXX_PTR_DEF,,<includes>,LOG4CXX_PTR_DEF,,true,,LOG4CXX_PTR_DEF,-1
68341,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LOG4CXX_UNIQUE_PTR_DEF,,<includes>,LOG4CXX_UNIQUE_PTR_DEF,,true,,LOG4CXX_UNIQUE_PTR_DEF,-1
68342,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LOG4CXX_UNLIKELY,,<includes>,LOG4CXX_UNLIKELY,,true,,LOG4CXX_UNLIKELY,-1
68343,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Level,,<includes>,Level,,true,,Level,-1
68344,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LevelChange,,<includes>,LevelChange,,true,,LevelChange,-1
68345,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LevelPatternConverter,,<includes>,LevelPatternConverter,,true,,LevelPatternConverter,-1
68346,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LexemType,,<includes>,LexemType,,true,,LexemType,-1
68347,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LineLocationPatternConverter,,<includes>,LineLocationPatternConverter,,true,,LineLocationPatternConverter,-1
68348,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LiteralToken,,<includes>,LiteralToken,,true,,LiteralToken,-1
68349,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LocalTimeZone,,<includes>,LocalTimeZone,,true,,LocalTimeZone,-1
68350,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Locale,,<includes>,Locale,,true,,Locale,-1
68351,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LocaleCharsetDecoder,,<includes>,LocaleCharsetDecoder,,true,,LocaleCharsetDecoder,-1
68352,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LocaleCharsetEncoder,,<includes>,LocaleCharsetEncoder,,true,,LocaleCharsetEncoder,-1
68353,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LocationInfo,,<includes>,LocationInfo,,true,,LocationInfo,-1
68354,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LogLog,,<includes>,LogLog,,true,,LogLog,-1
68355,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LogManager,,<includes>,LogManager,,true,,LogManager,-1
68356,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LogString*,,<includes>,LogString*,,true,,LogString*,-1
68357,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LogString[4],,<includes>,LogString[4],,true,,LogString[4],-1
68358,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Logger,,<includes>,Logger,,true,,Logger,-1
68359,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Logger*,,<includes>,Logger*,,true,,Logger*,-1
68360,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LoggerInstancePtr,,<includes>,LoggerInstancePtr,,true,,LoggerInstancePtr,-1
68361,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LoggerPatternConverter,,<includes>,LoggerPatternConverter,,true,,LoggerPatternConverter,-1
68362,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LoggerRepository,,<includes>,LoggerRepository,,true,,LoggerRepository,-1
68363,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LoggerRepository*,,<includes>,LoggerRepository*,,true,,LoggerRepository*,-1
68364,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LoggingEventList,,<includes>,LoggingEventList,,true,,LoggingEventList,-1
68365,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LoggingEventPatternConverter,,<includes>,LoggingEventPatternConverter,,true,,LoggingEventPatternConverter,-1
68366,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LoggingEventPatternConverterList,,<includes>,LoggingEventPatternConverterList,,true,,LoggingEventPatternConverterList,-1
68367,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LoggingEventPatternConverterPtr,,<includes>,LoggingEventPatternConverterPtr,,true,,LoggingEventPatternConverterPtr,-1
68368,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MDCPatternConverter,,<includes>,MDCPatternConverter,,true,,MDCPatternConverter,-1
68369,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ManualTriggeringPolicy,,<includes>,ManualTriggeringPolicy,,true,,ManualTriggeringPolicy,-1
68370,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Map,,<includes>,Map,,true,,Map,-1
68371,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MessagePatternConverter,,<includes>,MessagePatternConverter,,true,,MessagePatternConverter,-1
68372,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MethodLocationPatternConverter,,<includes>,MethodLocationPatternConverter,,true,,MethodLocationPatternConverter,-1
68373,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MicrosecondToken,,<includes>,MicrosecondToken,,true,,MicrosecondToken,-1
68374,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MilitaryHourToken,,<includes>,MilitaryHourToken,,true,,MilitaryHourToken,-1
68375,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MillisecondToken,,<includes>,MillisecondToken,,true,,MillisecondToken,-1
68376,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MinuteToken,,<includes>,MinuteToken,,true,,MinuteToken,-1
68377,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MissingResourceException,,<includes>,MissingResourceException,,true,,MissingResourceException,-1
68378,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MonthToken,,<includes>,MonthToken,,true,,MonthToken,-1
68379,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MultiprocessRollingFileAppender,,<includes>,MultiprocessRollingFileAppender,,true,,MultiprocessRollingFileAppender,-1
68380,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MultiprocessRollingFileAppender*,,<includes>,MultiprocessRollingFileAppender*,,true,,MultiprocessRollingFileAppender*,-1
68381,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,NDC,,<includes>,NDC,,true,,NDC,-1
68382,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,NDCPatternConverter,,<includes>,NDCPatternConverter,,true,,NDCPatternConverter,-1
68383,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,NameAbbreviator,,<includes>,NameAbbreviator,,true,,NameAbbreviator,-1
68384,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,NameAbbreviatorPtr,,<includes>,NameAbbreviatorPtr,,true,,NameAbbreviatorPtr,-1
68385,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,NoSuchElementException,,<includes>,NoSuchElementException,,true,,NoSuchElementException,-1
68386,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,NullPointerException,,<includes>,NullPointerException,,true,,NullPointerException,-1
68387,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,NumericToken,,<includes>,NumericToken,,true,,NumericToken,-1
68388,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ODBCAppender,,<includes>,ODBCAppender,,true,,ODBCAppender,-1
68389,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Object,,<includes>,Object,,true,,Object,-1
68390,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,OptionConverter,,<includes>,OptionConverter,,true,,OptionConverter,-1
68391,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,OutputStream,,<includes>,OutputStream,,true,,OutputStream,-1
68392,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,OutputStreamPtr,,<includes>,OutputStreamPtr,,true,,OutputStreamPtr,-1
68393,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,OutputStreamWriter,,<includes>,OutputStreamWriter,,true,,OutputStreamWriter,-1
68394,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PatternAbbreviatorFragment,,<includes>,PatternAbbreviatorFragment,,true,,PatternAbbreviatorFragment,-1
68395,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PatternConverterList,,<includes>,PatternConverterList,,true,,PatternConverterList,-1
68396,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PatternConverterPrivate,,<includes>,PatternConverterPrivate,,true,,PatternConverterPrivate,-1
68397,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PatternConverterPtr,,<includes>,PatternConverterPtr,,true,,PatternConverterPtr,-1
68398,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PatternLayout,,<includes>,PatternLayout,,true,,PatternLayout,-1
68399,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PatternToken,,<includes>,PatternToken,,true,,PatternToken,-1
68400,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PatternToken*,,<includes>,PatternToken*,,true,,PatternToken*,-1
68401,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PatternTokenList,,<includes>,PatternTokenList,,true,,PatternTokenList,-1
68402,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Pool,,<includes>,Pool,,true,,Pool,-1
68403,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PoolException,,<includes>,PoolException,,true,,PoolException,-1
68404,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Properties,,<includes>,Properties,,true,,Properties,-1
68405,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PropertyConfigurator,,<includes>,PropertyConfigurator,,true,,PropertyConfigurator,-1
68406,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PropertyResourceBundle*,,<includes>,PropertyResourceBundle*,,true,,PropertyResourceBundle*,-1
68407,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PropertyResourceBundlePtr,,<includes>,PropertyResourceBundlePtr,,true,,PropertyResourceBundlePtr,-1
68408,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PropertySetter,,<includes>,PropertySetter,,true,,PropertySetter,-1
68409,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PropertyWatchdog,,<includes>,PropertyWatchdog,,true,,PropertyWatchdog,-1
68410,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PropertyWatchdog*,,<includes>,PropertyWatchdog*,,true,,PropertyWatchdog*,-1
68411,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,QCoreApplication,,<includes>,QCoreApplication,,true,,QCoreApplication,-1
68412,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,QFile,,<includes>,QFile,,true,,QFile,-1
68413,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,QFileInfo,,<includes>,QFileInfo,,true,,QFileInfo,-1
68414,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,QMessageLogContext,,<includes>,QMessageLogContext,,true,,QMessageLogContext,-1
68415,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,QString,,<includes>,QString,,true,,QString,-1
68416,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,QVector<QString>,,<includes>,QVector<QString>,,true,,QVector<QString>,-1
68417,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,QtMsgType,,<includes>,QtMsgType,,true,,QtMsgType,-1
68418,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,QuotedMessagePatternConverter,,<includes>,QuotedMessagePatternConverter,,true,,QuotedMessagePatternConverter,-1
68419,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,RFC822TimeZoneToken,,<includes>,RFC822TimeZoneToken,,true,,RFC822TimeZoneToken,-1
68420,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,RepositorySelectorPtr,,<includes>,RepositorySelectorPtr,,true,,RepositorySelectorPtr,-1
68421,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ResourceBundlePtr,,<includes>,ResourceBundlePtr,,true,,ResourceBundlePtr,-1
68422,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Ret*,,<includes>,Ret*,,true,,Ret*,-1
68423,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,RollingFileAppender,,<includes>,RollingFileAppender,,true,,RollingFileAppender,-1
68424,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,RollingFileAppender*,,<includes>,RollingFileAppender*,,true,,RollingFileAppender*,-1
68425,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,RollingFileAppenderPtr,,<includes>,RollingFileAppenderPtr,,true,,RollingFileAppenderPtr,-1
68426,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,RollingPolicyBasePrivate,,<includes>,RollingPolicyBasePrivate,,true,,RollingPolicyBasePrivate,-1
68427,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,RollingPolicyBasePtr,,<includes>,RollingPolicyBasePtr,,true,,RollingPolicyBasePtr,-1
68428,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,RollingPolicyPtr,,<includes>,RollingPolicyPtr,,true,,RollingPolicyPtr,-1
68429,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,RolloverDescriptionPtr,,<includes>,RolloverDescriptionPtr,,true,,RolloverDescriptionPtr,-1
68430,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,RuntimeException,,<includes>,RuntimeException,,true,,RuntimeException,-1
68431,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,S*,,<includes>,S*,,true,,S*,-1
68432,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SMTPAppender,,<includes>,SMTPAppender,,true,,SMTPAppender,-1
68433,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SQLException,,<includes>,SQLException,,true,,SQLException,-1
68434,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SQLHDBC,,<includes>,SQLHDBC,,true,,SQLHDBC,-1
68435,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SQLHENV,,<includes>,SQLHENV,,true,,SQLHENV,-1
68436,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SQLRETURN,,<includes>,SQLRETURN,,true,,SQLRETURN,-1
68437,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SecondToken,,<includes>,SecondToken,,true,,SecondToken,-1
68438,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ServerSocketPrivate,,<includes>,ServerSocketPrivate,,true,,ServerSocketPrivate,-1
68439,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ServerSocketUniquePtr,,<includes>,ServerSocketUniquePtr,,true,,ServerSocketUniquePtr,-1
68440,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ShortFileLocationPatternConverter,,<includes>,ShortFileLocationPatternConverter,,true,,ShortFileLocationPatternConverter,-1
68441,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SizeBasedTriggeringPolicy,,<includes>,SizeBasedTriggeringPolicy,,true,,SizeBasedTriggeringPolicy,-1
68442,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SocketPrivate,,<includes>,Socket.SocketPrivate,,true,,SocketPrivate,-1
68443,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SocketAppenderSkeleton,,<includes>,SocketAppenderSkeleton,,true,,SocketAppenderSkeleton,-1
68444,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SocketAppenderSkeletonPriv,,<includes>,SocketAppenderSkeletonPriv,,true,,SocketAppenderSkeletonPriv,-1
68445,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SocketException,,<includes>,SocketException,,true,,SocketException,-1
68446,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SocketPtr,,<includes>,SocketPtr,,true,,SocketPtr,-1
68447,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SocketTimeoutException,,<includes>,SocketTimeoutException,,true,,SocketTimeoutException,-1
68448,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SocketUniquePtr,,<includes>,SocketUniquePtr,,true,,SocketUniquePtr,-1
68449,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Stack,,<includes>,Stack,,true,,Stack,-1
68450,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,StrftimeDateFormat,,<includes>,StrftimeDateFormat,,true,,StrftimeDateFormat,-1
68451,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,String,,<includes>,String,,true,,String,-1
68452,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,StringHelper,,<includes>,StringHelper,,true,,StringHelper,-1
68453,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,StringOrStream<char>,,<includes>,StringOrStream<char>,,true,,StringOrStream<char>,-1
68454,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,StringTokenizer,,<includes>,StringTokenizer,,true,,StringTokenizer,-1
68455,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SyslogAppender,,<includes>,SyslogAppender,,true,,SyslogAppender,-1
68456,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,T,,<includes>,T,,true,,T,-1
68457,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ThreadConfigurationType,,<includes>,ThreadConfigurationType,,true,,ThreadConfigurationType,-1
68458,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ThreadException,,<includes>,ThreadException,,true,,ThreadException,-1
68459,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ThreadPatternConverter,,<includes>,ThreadPatternConverter,,true,,ThreadPatternConverter,-1
68460,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ThreadSpecificData,,<includes>,ThreadSpecificData,,true,,ThreadSpecificData,-1
68461,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ThreadSpecificData*,,<includes>,ThreadSpecificData*,,true,,ThreadSpecificData*,-1
68462,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ThreadUsernamePatternConverter,,<includes>,ThreadUsernamePatternConverter,,true,,ThreadUsernamePatternConverter,-1
68463,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ThreadUtility,,<includes>,ThreadUtility,,true,,ThreadUtility,-1
68464,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TimeBasedRollingPolicy,,<includes>,TimeBasedRollingPolicy,,true,,TimeBasedRollingPolicy,-1
68465,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TimeBasedRollingPolicyPtr,,<includes>,TimeBasedRollingPolicyPtr,,true,,TimeBasedRollingPolicyPtr,-1
68466,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TimeZone,,<includes>,TimeZone,,true,,TimeZone,-1
68467,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TimeZoneImpl,,<includes>,TimeZoneImpl,,true,,TimeZoneImpl,-1
68468,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TimeZonePtr,,<includes>,TimeZonePtr,,true,,TimeZonePtr,-1
68469,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Transcoder,,<includes>,Transcoder,,true,,Transcoder,-1
68470,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TranscoderException,,<includes>,TranscoderException,,true,,TranscoderException,-1
68471,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TriggeringEventEvaluatorPtr,,<includes>,TriggeringEventEvaluatorPtr,,true,,TriggeringEventEvaluatorPtr,-1
68472,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TriggeringPolicyPtr,,<includes>,TriggeringPolicyPtr,,true,,TriggeringPolicyPtr,-1
68473,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TrivialCharsetDecoder,,<includes>,TrivialCharsetDecoder,,true,,TrivialCharsetDecoder,-1
68474,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TrivialCharsetEncoder,,<includes>,TrivialCharsetEncoder,,true,,TrivialCharsetEncoder,-1
68475,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,USASCIICharsetDecoder,,<includes>,USASCIICharsetDecoder,,true,,USASCIICharsetDecoder,-1
68476,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,USASCIICharsetEncoder,,<includes>,USASCIICharsetEncoder,,true,,USASCIICharsetEncoder,-1
68477,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,UTF16BECharsetEncoder,,<includes>,UTF16BECharsetEncoder,,true,,UTF16BECharsetEncoder,-1
68478,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,UTF16LECharsetEncoder,,<includes>,UTF16LECharsetEncoder,,true,,UTF16LECharsetEncoder,-1
68479,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,UTF8CharsetDecoder,,<includes>,UTF8CharsetDecoder,,true,,UTF8CharsetDecoder,-1
68480,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,UTF8CharsetEncoder,,<includes>,UTF8CharsetEncoder,,true,,UTF8CharsetEncoder,-1
68481,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,UniChar*,,<includes>,UniChar*,,true,,UniChar*,-1
68482,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,UnknownHostException,,<includes>,UnknownHostException,,true,,UnknownHostException,-1
68483,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,V,,<includes>,V,,true,,V,-1
68484,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WeekInMonthToken,,<includes>,WeekInMonthToken,,true,,WeekInMonthToken,-1
68485,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WeekInYearToken,,<includes>,WeekInYearToken,,true,,WeekInYearToken,-1
68486,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WideLife,,<includes>,WideLife,,true,,WideLife,-1
68487,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WideLife<APRInitializer>,,<includes>,WideLife<APRInitializer>,,true,,WideLife<APRInitializer>,-1
68488,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WideLife<CharsetDecoderPtr>,,<includes>,WideLife<CharsetDecoderPtr>,,true,,WideLife<CharsetDecoderPtr>,-1
68489,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WideLife<CharsetEncoderPtr>,,<includes>,WideLife<CharsetEncoderPtr>,,true,,WideLife<CharsetEncoderPtr>,-1
68490,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WideLife<ClassMap>,,<includes>,WideLife<ClassMap>,,true,,WideLife<ClassMap>,-1
68491,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WideLife<LevelPtr>,,<includes>,WideLife<LevelPtr>,,true,,WideLife<LevelPtr>,-1
68492,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WideLife<LocationInfo>,,<includes>,WideLife<LocationInfo>,,true,,WideLife<LocationInfo>,-1
68493,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WideLife<LogLog>,,<includes>,WideLife<LogLog>,,true,,WideLife<LogLog>,-1
68494,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WideLife<LogString>,,<includes>,WideLife<LogString>,,true,,WideLife<LogString>,-1
68495,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WideLife<NameAbbreviatorPtr>,,<includes>,WideLife<NameAbbreviatorPtr>,,true,,WideLife<NameAbbreviatorPtr>,-1
68496,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WideLife<PatternConverterPtr>,,<includes>,WideLife<PatternConverterPtr>,,true,,WideLife<PatternConverterPtr>,-1
68497,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WideLife<ThreadSpecificData>,,<includes>,WideLife<ThreadSpecificData>,,true,,WideLife<ThreadSpecificData>,-1
68498,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WideLife<ThreadUtility>,,<includes>,WideLife<ThreadUtility>,,true,,WideLife<ThreadUtility>,-1
68499,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WideLife<TimeZonePtr>,,<includes>,WideLife<TimeZonePtr>,,true,,WideLife<TimeZonePtr>,-1
68500,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WideLife<apr_environment>,,<includes>,WideLife<apr_environment>,,true,,WideLife<apr_environment>,-1
68501,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WriterAppenderPriv,,<includes>,WriterAppender.WriterAppenderPriv,,true,,WriterAppenderPriv,-1
68502,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WriterPtr,,<includes>,WriterPtr,,true,,WriterPtr,-1
68503,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,XMLLayout,,<includes>,XMLLayout,,true,,XMLLayout,-1
68504,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,XMLWatchdog,,<includes>,XMLWatchdog,,true,,XMLWatchdog,-1
68505,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,XMLWatchdog*,,<includes>,XMLWatchdog*,,true,,XMLWatchdog*,-1
68506,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,YearToken,,<includes>,YearToken,,true,,YearToken,-1
68507,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ZipCompressAction,,<includes>,ZipCompressAction,,true,,ZipCompressAction,-1
68508,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ZipCompressActionPtr,,<includes>,ZipCompressActionPtr,,true,,ZipCompressActionPtr,-1
68509,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_type,,<includes>,_type,,true,,_type,-1
68510,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,StringOrStream<T>,,<includes>,anonymous_namespace_1.StringOrStream<T>,,true,,StringOrStream<T>,-1
68511,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,apr_dbd_driver_t*,,<includes>,apr_dbd_driver_t*,,true,,apr_dbd_driver_t*,-1
68512,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,apr_dbd_prepared_t*,,<includes>,apr_dbd_prepared_t*,,true,,apr_dbd_prepared_t*,-1
68513,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,apr_dbd_t*,,<includes>,apr_dbd_t*,,true,,apr_dbd_t*,-1
68514,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,apr_dir_t*,,<includes>,apr_dir_t*,,true,,apr_dir_t*,-1
68515,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,apr_file_t*,,<includes>,apr_file_t*,,true,,apr_file_t*,-1
68516,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,apr_file_t**,,<includes>,apr_file_t**,,true,,apr_file_t**,-1
68517,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,apr_fileperms_t,,<includes>,apr_fileperms_t,,true,,apr_fileperms_t,-1
68518,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,apr_gid_t,,<includes>,apr_gid_t,,true,,apr_gid_t,-1
68519,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,apr_int32_t,,<includes>,apr_int32_t,,true,,apr_int32_t,-1
68520,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,apr_interval_time_t,,<includes>,apr_interval_time_t,,true,,apr_interval_time_t,-1
68521,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,apr_mmap_t*,,<includes>,apr_mmap_t*,,true,,apr_mmap_t*,-1
68522,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,apr_pollfd_t,,<includes>,apr_pollfd_t,,true,,apr_pollfd_t,-1
68523,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,apr_pool_destroy,,<includes>,apr_pool_destroy,,true,,apr_pool_destroy,-1
68524,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,apr_pool_t*,,<includes>,apr_pool_t*,,true,,apr_pool_t*,-1
68525,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,apr_proc_t,,<includes>,apr_proc_t,,true,,apr_proc_t,-1
68526,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,apr_procattr_t*,,<includes>,apr_procattr_t*,,true,,apr_procattr_t*,-1
68527,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,apr_size_t,,<includes>,apr_size_t,,true,,apr_size_t,-1
68528,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,apr_sockaddr_t*,,<includes>,apr_sockaddr_t*,,true,,apr_sockaddr_t*,-1
68529,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,apr_socket_t*,,<includes>,apr_socket_t*,,true,,apr_socket_t*,-1
68530,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,apr_status_t,,<includes>,apr_status_t,,true,,apr_status_t,-1
68531,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,apr_threadkey_t*,,<includes>,apr_threadkey_t*,,true,,apr_threadkey_t*,-1
68532,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,apr_time_exp_t*,,<includes>,apr_time_exp_t*,,true,,apr_time_exp_t*,-1
68533,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,apr_time_t,,<includes>,apr_time_t,,true,,apr_time_t,-1
68534,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,apr_uid_t,,<includes>,apr_uid_t,,true,,apr_uid_t,-1
68535,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,apr_xml_attr*,,<includes>,apr_xml_attr*,,true,,apr_xml_attr*,-1
68536,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,apr_xml_doc*,,<includes>,apr_xml_doc*,,true,,apr_xml_doc*,-1
68537,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,apr_xml_elem*,,<includes>,apr_xml_elem*,,true,,apr_xml_elem*,-1
68538,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,apr_xml_parser*,,<includes>,apr_xml_parser*,,true,,apr_xml_parser*,-1
68539,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,auto,,<includes>,auto,,true,,auto,-1
68540,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,basic_ostream<char>,,<includes>,basic_ostream<char>,,true,,basic_ostream<char>,-1
68541,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,basic_ostringstream<T>,,<includes>,basic_ostringstream<T>,,true,,basic_ostringstream<T>,-1
68542,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,basic_string<T>,,<includes>,basic_string<T>,,true,,basic_string<T>,-1
68543,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,basic_string<char>,,<includes>,basic_string<char>,,true,,basic_string<char>,-1
68544,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,bool,,<includes>,bool,,true,,bool,-1
68545,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char,,<includes>,char,,true,,char,-1
68546,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char*,,<includes>,char*,,true,,char*,-1
68547,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char**,,<includes>,char**,,true,,char**,-1
68548,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[1024],,<includes>,char[1024],,true,,char[1024],-1
68549,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[109],,<includes>,char[109],,true,,char[109],-1
68550,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[10],,<includes>,char[10],,true,,char[10],-1
68551,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[11],,<includes>,char[11],,true,,char[11],-1
68552,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[12],,<includes>,char[12],,true,,char[12],-1
68553,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[13],,<includes>,char[13],,true,,char[13],-1
68554,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[14],,<includes>,char[14],,true,,char[14],-1
68555,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[15],,<includes>,char[15],,true,,char[15],-1
68556,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[16],,<includes>,char[16],,true,,char[16],-1
68557,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[17],,<includes>,char[17],,true,,char[17],-1
68558,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[18],,<includes>,char[18],,true,,char[18],-1
68559,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[19],,<includes>,char[19],,true,,char[19],-1
68560,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[1],,<includes>,char[1],,true,,char[1],-1
68561,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[2000],,<includes>,char[2000],,true,,char[2000],-1
68562,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[2048],,<includes>,char[2048],,true,,char[2048],-1
68563,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[20],,<includes>,char[20],,true,,char[20],-1
68564,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[21],,<includes>,char[21],,true,,char[21],-1
68565,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[22],,<includes>,char[22],,true,,char[22],-1
68566,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[23],,<includes>,char[23],,true,,char[23],-1
68567,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[24],,<includes>,char[24],,true,,char[24],-1
68568,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[255],,<includes>,char[255],,true,,char[255],-1
68569,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[256],,<includes>,char[256],,true,,char[256],-1
68570,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[25],,<includes>,char[25],,true,,char[25],-1
68571,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[26],,<includes>,char[26],,true,,char[26],-1
68572,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[27],,<includes>,char[27],,true,,char[27],-1
68573,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[28],,<includes>,char[28],,true,,char[28],-1
68574,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[29],,<includes>,char[29],,true,,char[29],-1
68575,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[2],,<includes>,char[2],,true,,char[2],-1
68576,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[30],,<includes>,char[30],,true,,char[30],-1
68577,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[31],,<includes>,char[31],,true,,char[31],-1
68578,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[32],,<includes>,char[32],,true,,char[32],-1
68579,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[33],,<includes>,char[33],,true,,char[33],-1
68580,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[34],,<includes>,char[34],,true,,char[34],-1
68581,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[35],,<includes>,char[35],,true,,char[35],-1
68582,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[36],,<includes>,char[36],,true,,char[36],-1
68583,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[37],,<includes>,char[37],,true,,char[37],-1
68584,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[38],,<includes>,char[38],,true,,char[38],-1
68585,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[39],,<includes>,char[39],,true,,char[39],-1
68586,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[3],,<includes>,char[3],,true,,char[3],-1
68587,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[4097],,<includes>,char[4097],,true,,char[4097],-1
68588,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[40],,<includes>,char[40],,true,,char[40],-1
68589,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[41],,<includes>,char[41],,true,,char[41],-1
68590,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[42],,<includes>,char[42],,true,,char[42],-1
68591,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[43],,<includes>,char[43],,true,,char[43],-1
68592,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[44],,<includes>,char[44],,true,,char[44],-1
68593,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[45],,<includes>,char[45],,true,,char[45],-1
68594,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[46],,<includes>,char[46],,true,,char[46],-1
68595,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[47],,<includes>,char[47],,true,,char[47],-1
68596,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[48],,<includes>,char[48],,true,,char[48],-1
68597,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[49],,<includes>,char[49],,true,,char[49],-1
68598,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[4],,<includes>,char[4],,true,,char[4],-1
68599,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[50],,<includes>,char[50],,true,,char[50],-1
68600,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[51],,<includes>,char[51],,true,,char[51],-1
68601,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[52],,<includes>,char[52],,true,,char[52],-1
68602,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[53],,<includes>,char[53],,true,,char[53],-1
68603,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[54],,<includes>,char[54],,true,,char[54],-1
68604,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[55],,<includes>,char[55],,true,,char[55],-1
68605,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[57],,<includes>,char[57],,true,,char[57],-1
68606,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[59],,<includes>,char[59],,true,,char[59],-1
68607,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[5],,<includes>,char[5],,true,,char[5],-1
68608,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[60],,<includes>,char[60],,true,,char[60],-1
68609,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[63],,<includes>,char[63],,true,,char[63],-1
68610,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[65],,<includes>,char[65],,true,,char[65],-1
68611,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[67],,<includes>,char[67],,true,,char[67],-1
68612,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[68],,<includes>,char[68],,true,,char[68],-1
68613,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[6],,<includes>,char[6],,true,,char[6],-1
68614,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[70],,<includes>,char[70],,true,,char[70],-1
68615,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[71],,<includes>,char[71],,true,,char[71],-1
68616,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[77],,<includes>,char[77],,true,,char[77],-1
68617,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[78],,<includes>,char[78],,true,,char[78],-1
68618,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[7],,<includes>,char[7],,true,,char[7],-1
68619,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[86],,<includes>,char[86],,true,,char[86],-1
68620,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[8],,<includes>,char[8],,true,,char[8],-1
68621,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[95],,<includes>,char[95],,true,,char[95],-1
68622,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[9],,<includes>,char[9],,true,,char[9],-1
68623,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[],,<includes>,char[],,true,,char[],-1
68624,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[]*,,<includes>,char[]*,,true,,char[]*,-1
68625,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,chrono,,<includes>,chrono,,true,,chrono,-1
68626,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,color,,<includes>,color,,true,,color,-1
68627,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,const char*,,<includes>,const char*,,true,,const char*,-1
68628,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,db,,<includes>,db,,true,,db,-1
68629,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,digits,,<includes>,digits,,true,,digits,-1
68630,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,double,,<includes>,double,,true,,double,-1
68631,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,enum,,<includes>,enum,,true,,enum,-1
68632,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,fflush,,<includes>,fflush,,true,,fflush,-1
68633,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,float,,<includes>,float,,true,,float,-1
68634,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,fmt,,<includes>,fmt,,true,,fmt,-1
68635,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,fmtflags,,<includes>,fmtflags,,true,,fmtflags,-1
68636,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,helpers,,<includes>,helpers,,true,,helpers,-1
68637,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FileWatchdog,,<includes>,helpers.FileWatchdog,,true,,FileWatchdog,-1
68638,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,incrementFunction,,<includes>,incrementFunction,,true,,incrementFunction,-1
68639,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,int,,<includes>,int,,true,,int,-1
68640,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,int64_t,,<includes>,int64_t,,true,,int64_t,-1
68641,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ios_base,,<includes>,ios_base,,true,,ios_base,-1
68642,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ios_base_manip,,<includes>,ios_base_manip,,true,,ios_base_manip,-1
68643,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,log4cxx_finalizer,,<includes>,log4cxx_finalizer,,true,,log4cxx_finalizer,-1
68644,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,log4cxx_initializer,,<includes>,log4cxx_initializer,,true,,log4cxx_initializer,-1
68645,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,log4cxx_status_t,,<includes>,log4cxx_status_t,,true,,log4cxx_status_t,-1
68646,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,log4cxx_time_t,,<includes>,log4cxx_time_t,,true,,log4cxx_time_t,-1
68647,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,logchar,,<includes>,logchar,,true,,logchar,-1
68648,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,logchar*,,<includes>,logchar*,,true,,logchar*,-1
68649,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,logchar[5],,<includes>,logchar[5],,true,,logchar[5],-1
68650,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,logchar[8],,<includes>,logchar[8],,true,,logchar[8],-1
68651,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,logstream,,<includes>,logstream,,true,,logstream,-1
68652,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,logstream_base,,<includes>,logstream_base,,true,,logstream_base,-1
68653,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,long,,<includes>,long,,true,,long,-1
68654,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,long double,,<includes>,long double,,true,,long double,-1
68655,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,long int,,<includes>,long int,,true,,long int,-1
68656,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,long long int,,<includes>,long long int,,true,,long long int,-1
68657,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,long unsigned,,<includes>,long unsigned,,true,,long unsigned,-1
68658,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,magicString1,,<includes>,magicString1,,true,,magicString1,-1
68659,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,magicString2,,<includes>,magicString2,,true,,magicString2,-1
68660,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,mutable bool,,<includes>,mutable bool,,true,,mutable bool,-1
68661,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,mutable int,,<includes>,mutable int,,true,,mutable int,-1
68662,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,net,,<includes>,net,,true,,net,-1
68663,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ostream,,<includes>,ostream,,true,,ostream,-1
68664,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,placeholders,,<includes>,placeholders,,true,,placeholders,-1
68665,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,pthread_t,,<includes>,pthread_t,,true,,pthread_t,-1
68666,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,pushLS,,<includes>,pushLS,,true,,pushLS,-1
68667,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,rolling,,<includes>,rolling,,true,,rolling,-1
68668,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,s_instance,,<includes>,s_instance,,true,,s_instance,-1
68669,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,setFile,,<includes>,setFile,,true,,setFile,-1
68670,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,shared_ptr<Ret>,,<includes>,shared_ptr<Ret>,,true,,shared_ptr<Ret>,-1
68671,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,shared_ptr<T>,,<includes>,shared_ptr<T>,,true,,shared_ptr<T>,-1
68672,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,short,,<includes>,short,,true,,short,-1
68673,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,short int,,<includes>,short int,,true,,short int,-1
68674,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,short unsigned,,<includes>,short unsigned,,true,,short unsigned,-1
68675,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,shortunsigned*,,<includes>,shortunsigned*,,true,,shortunsigned*,-1
68676,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,shortunsigned**,,<includes>,shortunsigned**,,true,,shortunsigned**,-1
68677,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,size_t,,<includes>,size_t,,true,,size_t,-1
68678,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,size_type,,<includes>,size_type,,true,,size_type,-1
68679,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,spi,,<includes>,spi,,true,,spi,-1
68680,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,static_object,,<includes>,static_object,,true,,static_object,-1
68681,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,std,,<includes>,std,,true,,std,-1
68682,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,string,,<includes>,string,,true,,string,-1
68683,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,system_clock,,<includes>,system_clock,,true,,system_clock,-1
68684,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,this_thread,,<includes>,this_thread,,true,,this_thread,-1
68685,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,system_clock>,,<includes>,time_point<std.chrono.system_clock>,,true,,system_clock>,-1
68686,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,tm,,<includes>,tm,,true,,tm,-1
68687,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"ConfigurationStatus,LogString>",,<includes>,"tuple<LOG4CXX_NS.spi.ConfigurationStatus,LogString>",,true,,"ConfigurationStatus,LogString>",-1
68688,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"ConfigurationStatus,QString>",,<includes>,"tuple<LOG4CXX_NS.spi.ConfigurationStatus,QString>",,true,,"ConfigurationStatus,QString>",-1
68689,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,uint32_t,,<includes>,uint32_t,,true,,uint32_t,-1
68690,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,uint8_t*,,<includes>,uint8_t*,,true,,uint8_t*,-1
68691,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,unsigned,,<includes>,unsigned,,true,,unsigned,-1
68692,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,unsigned char,,<includes>,unsigned char,,true,,unsigned char,-1
68693,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,unsigned char*,,<includes>,unsigned char*,,true,,unsigned char*,-1
68694,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,unsigned int,,<includes>,unsigned int,,true,,unsigned int,-1
68695,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,unsigned longlongint,,<includes>,unsigned longlongint,,true,,unsigned longlongint,-1
68696,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,unsigned shortint,,<includes>,unsigned shortint,,true,,unsigned shortint,-1
68697,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,varia,,<includes>,varia,,true,,varia,-1
68698,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,vector<InetAddressPtr>,,<includes>,vector<InetAddressPtr>,,true,,vector<InetAddressPtr>,-1
68699,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,vector<LogString>,,<includes>,vector<LogString>,,true,,vector<LogString>,-1
68700,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,vector<unsigned char>,,<includes>,vector<unsigned char>,,true,,vector<unsigned char>,-1
68701,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,virtual,,<includes>,virtual,,true,,virtual,-1
68702,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,void,,<includes>,void,,true,,void,-1
68703,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,void (),,<includes>,void (),,true,,void (),-1
68704,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"void (int, char )",,<includes>,"void (int, char )",,true,,"void (int, char )",-1
68705,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,void*,,<includes>,void*,,true,,void*,-1
68706,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t,,<includes>,wchar_t,,true,,wchar_t,-1
68707,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,xml,,<includes>,xml,,true,,xml,-1
68708,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,zeroString,,<includes>,zeroString,,true,,zeroString,-1
