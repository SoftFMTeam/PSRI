9,METHOD,cmake\SQLAllocHandleTest.cpp:<global>,TYPE_DECL,<global>,1,1,cmake\SQLAllocHandleTest.cpp,cmake\SQLAllocHandleTest.cpp:<global>,,false,1,15,<global>,,,1,
11,METHOD,cmake\SQLAllocHandleTest.cpp:<global>,TYPE_DECL,"int main() {
   SQLHENV henv;
   SQLRETURN retcode;

   retcode = SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &henv);
   if (retcode == SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO) {
       SQLFreeHandle(SQL_HANDLE_ENV, henv);
   }
   return 1;
}",1,1,cmake\SQLAllocHandleTest.cpp,main,,false,6,15,main,,,1,int main ()
43,METHOD,cmake\boost-fallback\test-boostatomic.cpp:<global>,TYPE_DECL,<global>,1,2,cmake\boost-fallback\test-boostatomic.cpp,cmake\boost-fallback\test-boostatomic.cpp:<global>,,false,1,5,<global>,,,1,
45,METHOD,cmake\boost-fallback\test-boostatomic.cpp:<global>,TYPE_DECL,"int main(int argc, char** argv){
	boost::atomic<bool> b;
}",1,1,cmake\boost-fallback\test-boostatomic.cpp,main,,false,3,5,main,,,1,"int main (int,char**)"
57,METHOD,cmake\boost-fallback\test-boostfilesystem.cpp:<global>,TYPE_DECL,<global>,1,2,cmake\boost-fallback\test-boostfilesystem.cpp,cmake\boost-fallback\test-boostfilesystem.cpp:<global>,,false,1,5,<global>,,,1,
59,METHOD,cmake\boost-fallback\test-boostfilesystem.cpp:<global>,TYPE_DECL,"int main(int argc, char** argv){
	boost::filesystem::path p;
}",1,1,cmake\boost-fallback\test-boostfilesystem.cpp,main,,false,3,5,main,,,1,"int main (int,char**)"
71,METHOD,cmake\boost-fallback\test-boostmutex.cpp:<global>,TYPE_DECL,<global>,1,1,cmake\boost-fallback\test-boostmutex.cpp,cmake\boost-fallback\test-boostmutex.cpp:<global>,,false,1,6,<global>,,,1,
73,METHOD,cmake\boost-fallback\test-boostmutex.cpp:<global>,TYPE_DECL,"int main(int argc, char** argv){
	boost::mutex mutex;
	return 0;
}",1,1,cmake\boost-fallback\test-boostmutex.cpp,main,,false,3,6,main,,,1,"int main (int,char**)"
87,METHOD,cmake\boost-fallback\test-boostsharedmutex.cpp:<global>,TYPE_DECL,<global>,1,1,cmake\boost-fallback\test-boostsharedmutex.cpp,cmake\boost-fallback\test-boostsharedmutex.cpp:<global>,,false,1,6,<global>,,,1,
89,METHOD,cmake\boost-fallback\test-boostsharedmutex.cpp:<global>,TYPE_DECL,"int main(int argc, char** argv){
	boost::shared_mutex mtx;
	return 0;
}",1,1,cmake\boost-fallback\test-boostsharedmutex.cpp,main,,false,3,6,main,,,1,"int main (int,char**)"
103,METHOD,cmake\boost-fallback\test-boostsharedptr.cpp:<global>,TYPE_DECL,<global>,1,1,cmake\boost-fallback\test-boostsharedptr.cpp,cmake\boost-fallback\test-boostsharedptr.cpp:<global>,,false,1,10,<global>,,,1,
107,METHOD,cmake\boost-fallback\test-boostsharedptr.cpp:<global>,TYPE_DECL,"int main(int argc, char** argv){
	boost::shared_ptr<foo> fooptr;
	return 0;
}",1,1,cmake\boost-fallback\test-boostsharedptr.cpp,main,,false,7,10,main,,,2,"int main (int,char**)"
121,METHOD,cmake\boost-fallback\test-boostthread.cpp:<global>,TYPE_DECL,<global>,1,1,cmake\boost-fallback\test-boostthread.cpp,cmake\boost-fallback\test-boostthread.cpp:<global>,,false,1,6,<global>,,,1,
123,METHOD,cmake\boost-fallback\test-boostthread.cpp:<global>,TYPE_DECL,"int main(int argc, char** argv){
	boost::thread th;
	return 0;
}",1,1,cmake\boost-fallback\test-boostthread.cpp,main,,false,3,6,main,,,1,"int main (int,char**)"
137,METHOD,cmake\boost-fallback\test-stdatomic.cpp:<global>,TYPE_DECL,<global>,1,1,cmake\boost-fallback\test-stdatomic.cpp,cmake\boost-fallback\test-stdatomic.cpp:<global>,,false,1,5,<global>,,,1,
139,METHOD,cmake\boost-fallback\test-stdatomic.cpp:<global>,TYPE_DECL,"int main(int argc, char** argv){
	std::atomic<bool> b;
}",1,1,cmake\boost-fallback\test-stdatomic.cpp,main,,false,3,5,main,,,1,"int main (int,char**)"
151,METHOD,cmake\boost-fallback\test-stdexpfilesystem.cpp:<global>,TYPE_DECL,<global>,1,1,cmake\boost-fallback\test-stdexpfilesystem.cpp,cmake\boost-fallback\test-stdexpfilesystem.cpp:<global>,,false,1,5,<global>,,,1,
153,METHOD,cmake\boost-fallback\test-stdexpfilesystem.cpp:<global>,TYPE_DECL,"int main(int argc, char** argv){
	std::experimental::filesystem::path p;
}",1,1,cmake\boost-fallback\test-stdexpfilesystem.cpp,main,,false,3,5,main,,,1,"int main (int,char**)"
165,METHOD,cmake\boost-fallback\test-stdfilesystem.cpp:<global>,TYPE_DECL,<global>,1,1,cmake\boost-fallback\test-stdfilesystem.cpp,cmake\boost-fallback\test-stdfilesystem.cpp:<global>,,false,1,5,<global>,,,1,
167,METHOD,cmake\boost-fallback\test-stdfilesystem.cpp:<global>,TYPE_DECL,"int main(int argc, char** argv){
	std::filesystem::path p;
}",1,1,cmake\boost-fallback\test-stdfilesystem.cpp,main,,false,3,5,main,,,1,"int main (int,char**)"
179,METHOD,cmake\boost-fallback\test-stdmutex.cpp:<global>,TYPE_DECL,<global>,1,1,cmake\boost-fallback\test-stdmutex.cpp,cmake\boost-fallback\test-stdmutex.cpp:<global>,,false,1,6,<global>,,,1,
181,METHOD,cmake\boost-fallback\test-stdmutex.cpp:<global>,TYPE_DECL,"int main(int argc, char** argv){
	std::mutex mutex;
	return 0;
}",1,1,cmake\boost-fallback\test-stdmutex.cpp,main,,false,3,6,main,,,1,"int main (int,char**)"
195,METHOD,cmake\boost-fallback\test-stdsharedmutex.cpp:<global>,TYPE_DECL,<global>,1,1,cmake\boost-fallback\test-stdsharedmutex.cpp,cmake\boost-fallback\test-stdsharedmutex.cpp:<global>,,false,1,6,<global>,,,1,
197,METHOD,cmake\boost-fallback\test-stdsharedmutex.cpp:<global>,TYPE_DECL,"int main(int argc, char** argv){
	std::shared_mutex shared;
	return 0;
}",1,1,cmake\boost-fallback\test-stdsharedmutex.cpp,main,,false,3,6,main,,,1,"int main (int,char**)"
211,METHOD,cmake\boost-fallback\test-stdsharedptr.cpp:<global>,TYPE_DECL,<global>,1,1,cmake\boost-fallback\test-stdsharedptr.cpp,cmake\boost-fallback\test-stdsharedptr.cpp:<global>,,false,1,10,<global>,,,1,
215,METHOD,cmake\boost-fallback\test-stdsharedptr.cpp:<global>,TYPE_DECL,"int main(int argc, char** argv){
	std::shared_ptr<foo> fooptr;
	return 0;
}",1,1,cmake\boost-fallback\test-stdsharedptr.cpp,main,,false,7,10,main,,,2,"int main (int,char**)"
229,METHOD,cmake\boost-fallback\test-stdthread.cpp:<global>,TYPE_DECL,<global>,1,1,cmake\boost-fallback\test-stdthread.cpp,cmake\boost-fallback\test-stdthread.cpp:<global>,,false,1,6,<global>,,,1,
231,METHOD,cmake\boost-fallback\test-stdthread.cpp:<global>,TYPE_DECL,"int main(int argc, char** argv){
	std::thread th;
	return 0;
}",1,1,cmake\boost-fallback\test-stdthread.cpp,main,,false,3,6,main,,,1,"int main (int,char**)"
245,METHOD,cmake\compiler-features\test-make-unique.cpp:<global>,TYPE_DECL,<global>,1,1,cmake\compiler-features\test-make-unique.cpp,cmake\compiler-features\test-make-unique.cpp:<global>,,false,1,6,<global>,,,1,
247,METHOD,cmake\compiler-features\test-make-unique.cpp:<global>,TYPE_DECL,"int main(int argc, char** argv){
	std::make_unique<int>(5);
	return 0;
}",1,1,cmake\compiler-features\test-make-unique.cpp,main,,false,3,6,main,,,1,"int main (int,char**)"
265,METHOD,cmake\compiler-features\test-thread-local.cpp:<global>,TYPE_DECL,<global>,1,1,cmake\compiler-features\test-thread-local.cpp,cmake\compiler-features\test-thread-local.cpp:<global>,,false,1,11,<global>,,,1,
267,METHOD,cmake\compiler-features\test-thread-local.cpp:<global>,TYPE_DECL,"std::string& getCurrentThreadVar()
{
	thread_local std::string thread_id_string;
    return thread_id_string;
}",1,1,cmake\compiler-features\test-thread-local.cpp,getCurrentThreadVar,,false,3,7,getCurrentThreadVar,,,1,string getCurrentThreadVar ()
274,METHOD,cmake\compiler-features\test-thread-local.cpp:<global>,TYPE_DECL,"int main(){
	getCurrentThreadVar() = ""name"";
}",1,1,cmake\compiler-features\test-thread-local.cpp,main,,false,9,11,main,,,2,int main ()
288,METHOD,cmake\compiler-features\test-unicode.cpp:<global>,TYPE_DECL,<global>,1,1,cmake\compiler-features\test-unicode.cpp,cmake\compiler-features\test-unicode.cpp:<global>,,false,1,17,<global>,,,1,
293,METHOD,cmake\compiler-features\test-unicode.cpp:<global>,TYPE_DECL,"int main()
{
	StringType str;
	StreamType ss;
    ss << str;
    return 0;
}",1,1,cmake\compiler-features\test-unicode.cpp,main,,false,11,17,main,,,4,int main ()
309,METHOD,cmake\pthread\test-pthread-getname.cpp:<global>,TYPE_DECL,<global>,1,1,cmake\pthread\test-pthread-getname.cpp,cmake\pthread\test-pthread-getname.cpp:<global>,,false,1,7,<global>,,,1,
311,METHOD,cmake\pthread\test-pthread-getname.cpp:<global>,TYPE_DECL,"int main(){
	pthread_t tid;
	char buffer[16];
	pthread_getname_np(tid, buffer, sizeof(buffer));
}",1,1,cmake\pthread\test-pthread-getname.cpp,main,,false,3,7,main,,,1,int main ()
327,METHOD,cmake\pthread\test-pthread-setname.cpp:<global>,TYPE_DECL,<global>,1,1,cmake\pthread\test-pthread-setname.cpp,cmake\pthread\test-pthread-setname.cpp:<global>,,false,1,6,<global>,,,1,
329,METHOD,cmake\pthread\test-pthread-setname.cpp:<global>,TYPE_DECL,"int main(){
	pthread_t tid;
	pthread_setname_np(tid, ""name"");
}",1,1,cmake\pthread\test-pthread-setname.cpp,main,,false,3,6,main,,,1,int main ()
346,METHOD,examples\cpp\MyApp-qt.cpp:<global>,TYPE_DECL,<global>,1,28,examples\cpp\MyApp-qt.cpp,examples\cpp\MyApp-qt.cpp:<global>,,false,1,20,<global>,,,1,
348,METHOD,examples\cpp\MyApp-qt.cpp:<global>,TYPE_DECL,"int main(int argc, char **argv) {
	int result = EXIT_SUCCESS;
	QCoreApplication app(argc, argv);
	com::foo::ConfigureLogging();
	try {
		auto logger = com::foo::getLogger(""MyApp"");
		LOG4CXX_INFO(logger, QString(""Message %1"").arg(1));
		com::foo::Bar bar;
		bar.doIt();
		LOG4CXX_INFO(logger, QString(""Message %1"").arg(2));
	}
	catch(std::exception&) {
		result = EXIT_FAILURE;
	}
	return result;
}",1,1,examples\cpp\MyApp-qt.cpp,main,,false,5,20,main,,,1,"int main (int,char**)"
414,METHOD,examples\cpp\MyApp1.cpp:<global>,TYPE_DECL,<global>,1,1,examples\cpp\MyApp1.cpp,examples\cpp\MyApp1.cpp:<global>,,false,1,24,<global>,,,1,
426,METHOD,examples\cpp\MyApp1.cpp:<global>,TYPE_DECL,"void foo() {
	// Get a logger that is a child of the statically declared logger
	auto fooLogger = log4cxx::Logger::getLogger(""MyApp.foo"");
	LOG4CXX_TRACE(fooLogger, ""Doing foo at trace level"");
	LOG4CXX_DEBUG(fooLogger, ""Doing foo at debug level"");
	LOG4CXX_INFO(fooLogger, ""Doing foo at info level"");
	LOG4CXX_WARN(fooLogger, ""Doing foo at warn level"");
	LOG4CXX_ERROR(fooLogger, ""Doing foo at error level"");
	LOG4CXX_FATAL(fooLogger, ""Doing foo at fatal level"");
}",1,1,examples\cpp\MyApp1.cpp,foo,,false,6,15,foo,,,3,void foo ()
458,METHOD,examples\cpp\MyApp1.cpp:<global>,TYPE_DECL,"int main(int argc, char **argv) {
	// Log to standard output.
	log4cxx::BasicConfigurator::configure();
	LOG4CXX_INFO(logger, ""Entering application."");
	foo();
	LOG4CXX_INFO(logger, ""Exiting application."");
	return EXIT_SUCCESS;
}",1,1,examples\cpp\MyApp1.cpp,main,,false,17,24,main,,,4,"int main (int,char**)"
486,METHOD,examples\cpp\MyApp2.cpp:<global>,TYPE_DECL,<global>,1,27,examples\cpp\com\foo\config.hpp,examples\cpp\MyApp2.cpp:<global>,,false,1,17,<global>,,,1,
488,METHOD,examples\cpp\MyApp2.cpp:<global>,TYPE_DECL,"int main(int argc, char **argv) {
	int result = EXIT_SUCCESS;
	try {
		auto logger = com::foo::getLogger(""MyApp"");
		LOG4CXX_INFO(logger, ""Entering application."");
		com::foo::Bar bar;
		bar.doIt();
		LOG4CXX_INFO(logger, ""Exiting application."");
	}
	catch(std::exception&) {
		result = EXIT_FAILURE;
	}
	return result;
}",1,1,examples\cpp\MyApp2.cpp,main,,false,4,17,main,,,1,"int main (int,char**)"
532,METHOD,examples\cpp\auto-configured.cpp:<global>,TYPE_DECL,<global>,1,4,examples\cpp\auto-configured.cpp,examples\cpp\auto-configured.cpp:<global>,,false,1,30,<global>,,,1,
544,METHOD,ExampleStaticData,TYPE_DECL,"ExampleStaticData()	{
		LOG4CXX_DEBUG(rootLogger, ""static initializer message"");
	}",2,2,examples\cpp\auto-configured.cpp,ExampleStaticData.ExampleStaticData,,false,22,24,ExampleStaticData,,,1,ANY ExampleStaticData.ExampleStaticData ()
552,METHOD,examples\cpp\auto-configured.cpp:<global>,TYPE_DECL,"int main() {
	LOG4CXX_INFO(rootLogger, ""main function message"");
	return EXIT_SUCCESS;
}",1,1,examples\cpp\auto-configured.cpp,main,,false,27,30,main,,,5,int main ()
568,METHOD,examples\cpp\com\foo\bar-qt.cpp:<global>,TYPE_DECL,<global>,1,23,examples\cpp\com\foo\bar.hpp,examples\cpp\com\foo\bar-qt.cpp:<global>,,false,1,10,<global>,,,1,
574,METHOD,examples\cpp\com\foo\bar-qt.cpp:<global>,TYPE_DECL,"void Bar::doIt() {
	LOG4CXX_DEBUG(m_logger, QString(""Did it again!"") << QString("" - again!""));
}",1,1,examples\cpp\com\foo\bar-qt.cpp,Bar.doIt,,false,8,10,doIt,,,3,void Bar.doIt ()
590,METHOD,examples\cpp\com\foo\bar.cpp:<global>,TYPE_DECL,<global>,1,23,examples\cpp\com\foo\bar.hpp,examples\cpp\com\foo\bar.cpp:<global>,,false,1,9,<global>,,,1,
596,METHOD,examples\cpp\com\foo\bar.cpp:<global>,TYPE_DECL,"void Bar::doIt() {
	LOG4CXX_DEBUG(m_logger, ""Did it again!"");
}",1,1,examples\cpp\com\foo\bar.cpp,Bar.doIt,,false,7,9,doIt,,,3,void Bar.doIt ()
608,METHOD,examples\cpp\com\foo\bar.hpp:<global>,TYPE_DECL,<global>,1,23,examples\cpp\com\foo\bar.hpp,examples\cpp\com\foo\bar.hpp:<global>,,false,1,13,<global>,,,1,
614,METHOD,com.foo.Bar,TYPE_DECL,void doIt();,14,19,examples\cpp\com\foo\bar.hpp,com.foo.Bar.doIt,,false,9,9,doIt,,,2,void com.foo.Bar.doIt ()
639,METHOD,examples\cpp\com\foo\config-qt.cpp:<global>,TYPE_DECL,<global>,1,4,examples\cpp\com\foo\config-qt.cpp,examples\cpp\com\foo\config-qt.cpp:<global>,,false,1,79,<global>,,,1,
643,METHOD,examples\cpp\com\foo\config-qt.cpp:<global>,TYPE_DECL,"void ConfigureLogging() {
	using namespace log4cxx;
	static struct log4cxx_finalizer {
		~log4cxx_finalizer() {
			LogManager::shutdown();
		}
	} finaliser;
	QFileInfo app{QCoreApplication::applicationFilePath()};
	QString basename{app.baseName()};
	QVector<QString> paths =
		{ QString(""."")
		, app.absoluteDir().absolutePath()
		};
	QVector<QString> names =
		{ QString(basename + "".xml"")
		, QString(basename + "".properties"")
		, QString(""MyApp.properties"")
		, QString(""log4cxx.xml"")
		, QString(""log4cxx.properties"")
		, QString(""log4j.xml"")
		, QString(""log4j.properties"")
	};
#if defined(_DEBUG)
	helpers::LogLog::setInternalDebugging(true);
#endif
	auto status       = spi::ConfigurationStatus::NotConfigured;
	auto selectedPath = QString();
	std::tie(status, selectedPath) = qt::Configuration::configureFromFileAndWatch(paths, names);
	if (status == spi::ConfigurationStatus::NotConfigured)
		BasicConfigurator::configure(); // Send events to the console
}",1,1,examples\cpp\com\foo\config-qt.cpp,com.foo.ConfigureLogging,,false,31,61,ConfigureLogging,,,1,void com.foo.ConfigureLogging ()
716,METHOD,examples\cpp\com\foo\config-qt.cpp:<global>,TYPE_DECL,"auto getLogger(const QString& name) -> LoggerPtr {
	using namespace log4cxx;
	return name.isEmpty()
		? LogManager::getRootLogger()
		: LogManager::getLogger(name.toStdString());
}",1,1,examples\cpp\com\foo\config-qt.cpp,com.foo.getLogger,,false,64,69,getLogger,,,2,ANY com.foo.getLogger (QString)
739,METHOD,examples\cpp\com\foo\config-qt.cpp:<global>,TYPE_DECL,"auto getLogger(const char* name) -> LoggerPtr {
	using namespace log4cxx;
	return name
		? LogManager::getLogger(name)
		: LogManager::getRootLogger();
}",1,1,examples\cpp\com\foo\config-qt.cpp,com.foo.getLogger,,false,72,77,getLogger,,,3,ANY com.foo.getLogger (char*)
761,METHOD,examples\cpp\com\foo\config-qt.hpp:<global>,TYPE_DECL,<global>,1,30,examples\cpp\com\foo\config-qt.hpp,examples\cpp\com\foo\config-qt.hpp:<global>,,false,1,21,<global>,,,1,
765,METHOD,examples\cpp\com\foo\config-qt.hpp:<global>,TYPE_DECL,void ConfigureLogging();,6,23,examples\cpp\com\foo\config-qt.hpp,com.foo.ConfigureLogging,,false,9,9,ConfigureLogging,,,1,void com.foo.ConfigureLogging ()
770,METHOD,examples\cpp\com\foo\config-qt.hpp:<global>,TYPE_DECL,extern auto getLogger(const QString& name) -> LoggerPtr;,13,55,examples\cpp\com\foo\config-qt.hpp,com.foo.getLogger,,false,15,15,getLogger,,,3,auto com.foo.getLogger (QString)
775,METHOD,examples\cpp\com\foo\config-qt.hpp:<global>,TYPE_DECL,extern auto getLogger(const char* name = NULL) -> LoggerPtr;,13,59,examples\cpp\com\foo\config-qt.hpp,com.foo.getLogger,,false,18,18,getLogger,,,4,auto com.foo.getLogger (char*)
785,METHOD,examples\cpp\com\foo\config.hpp:<global>,TYPE_DECL,<global>,1,27,examples\cpp\com\foo\config.hpp,examples\cpp\com\foo\config.hpp:<global>,,false,1,16,<global>,,,1,
790,METHOD,examples\cpp\com\foo\config.hpp:<global>,TYPE_DECL,extern auto getLogger(const std::string& name = std::string()) -> LoggerPtr;,13,75,examples\cpp\com\foo\config.hpp,com.foo.getLogger,,false,13,13,getLogger,,,2,auto com.foo.getLogger (ANY)
804,METHOD,examples\cpp\com\foo\config1.cpp:<global>,TYPE_DECL,<global>,1,27,examples\cpp\com\foo\config.hpp,examples\cpp\com\foo\config1.cpp:<global>,,false,1,23,<global>,,,1,
808,METHOD,examples\cpp\com\foo\config1.cpp:<global>,TYPE_DECL,"auto getLogger(const std::string& name) -> LoggerPtr {
	using namespace log4cxx;
	static struct log4cxx_initializer {
		log4cxx_initializer() {
			// Set up a simple configuration that logs on the console.
			BasicConfigurator::configure();
		}
		~log4cxx_initializer() {
			LogManager::shutdown();
		}
	} initAndShutdown;
	return name.empty()
		? LogManager::getRootLogger()
		: LogManager::getLogger(name);
}",1,1,examples\cpp\com\foo\config1.cpp,com.foo.getLogger,,false,7,21,getLogger,,,1,ANY com.foo.getLogger (ANY)
840,METHOD,examples\cpp\com\foo\config2.cpp:<global>,TYPE_DECL,<global>,1,27,examples\cpp\com\foo\config.hpp,examples\cpp\com\foo\config2.cpp:<global>,,false,1,24,<global>,,,1,
844,METHOD,examples\cpp\com\foo\config2.cpp:<global>,TYPE_DECL,"auto getLogger(const std::string& name) -> LoggerPtr {
	using namespace log4cxx;
	static struct log4cxx_initializer {
		log4cxx_initializer() {
			if (PropertyConfigurator::configure(""MyApp.properties"") == spi::ConfigurationStatus::NotConfigured)
				BasicConfigurator::configure(); // Send events to the console
		}
		~log4cxx_initializer() {
			LogManager::shutdown();
		}
	} initAndShutdown;
	return name.empty()
		? LogManager::getRootLogger()
		: LogManager::getLogger(name);
}",1,1,examples\cpp\com\foo\config2.cpp,com.foo.getLogger,,false,8,22,getLogger,,,1,ANY com.foo.getLogger (ANY)
894,METHOD,examples\cpp\com\foo\config3.cpp:<global>,TYPE_DECL,<global>,1,4,examples\cpp\com\foo\config3.cpp,examples\cpp\com\foo\config3.cpp:<global>,,false,1,171,<global>,,,1,
897,METHOD,examples\cpp\com\foo\config3.cpp:<global>,TYPE_DECL,"auto DefaultConfigurationFileNames(std::string& altPrefix) -> std::vector<std::string> {
	std::vector<std::string> result;

	// Find the executable file name
	static const int bufSize = 4096;
	char buf[bufSize+1] = {0}, pathSepar = '/';
	uint32_t bufCount = 0;
#if defined(WIN32)
	GetModuleFileName(NULL, buf, bufSize);
	pathSepar = '\\';
#elif defined(__APPLE__)
	_NSGetExecutablePath(buf, &bufCount);
#elif (defined(_XOPEN_SOURCE) && _XOPEN_SOURCE >= 500) || (defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE >= 200112L)
	std::ostringstream exeLink;
	exeLink << ""/proc/"" << getpid() << ""/exe"";
	bufCount = readlink(exeLink.str().c_str(), buf, bufSize);
	if (0 < bufCount)
		buf[bufCount] = 0;
#else
	strncpy(buf, ""auto-configured"", bufSize);
#endif
	std::string programFileName(buf);
	auto slashIndex = programFileName.rfind(pathSepar);
	if (std::string::npos != slashIndex) {
		// Extract the path
		altPrefix = programFileName.substr(0, slashIndex + 1);
#if defined(_DEBUG)
		LogString msg1 = LOG4C...",1,1,examples\cpp\com\foo\config3.cpp,anonymous_namespace_1.DefaultConfigurationFileNames,,false,44,113,DefaultConfigurationFileNames,,,1,ANY anonymous_namespace_1.DefaultConfigurationFileNames (ANY)
1060,METHOD,examples\cpp\com\foo\config3.cpp:<global>,TYPE_DECL,"void SelectConfigurationFile() {
#if defined(_DEBUG)
	helpers::LogLog::setInternalDebugging(true);
#endif
	const char* extension[] = { "".xml"", "".properties"", 0 };
	std::string altPrefix;
	helpers::Pool pool;

	for (auto baseName : DefaultConfigurationFileNames(altPrefix)) {
		int i = 0;
		for (; extension[i]; ++i) {
			File current_working_dir_candidate(baseName + extension[i]);
			if (current_working_dir_candidate.exists(pool)) {
				DefaultConfigurator::setConfigurationFileName(current_working_dir_candidate.getPath());
				DefaultConfigurator::setConfigurationWatchSeconds(5);
				break;
			}
			if (!altPrefix.empty()) {
				File alt_dir_candidate(altPrefix + baseName + extension[i]);
				if (alt_dir_candidate.exists(pool)) {
					DefaultConfigurator::setConfigurationFileName(alt_dir_candidate.getPath());
					DefaultConfigurator::setConfigurationWatchSeconds(5);
					break;
				}
			}
		}
		if (extension[i]) // Found a configuration file?
			return;
	}
	// Configuration file not f...",1,1,examples\cpp\com\foo\config3.cpp,anonymous_namespace_2.SelectConfigurationFile,,false,117,148,SelectConfigurationFile,,,2,void anonymous_namespace_2.SelectConfigurationFile ()
1167,METHOD,examples\cpp\com\foo\config3.cpp:<global>,TYPE_DECL,"auto getLogger(const std::string& name) -> LoggerPtr {
	using namespace log4cxx;
	static struct log4cxx_initializer {
		log4cxx_initializer() {
			SelectConfigurationFile();
		}
		~log4cxx_initializer() {
			LogManager::shutdown();
		}
	} initialiser;
	return name.empty()
		? LogManager::getRootLogger()
		: LogManager::getLogger(name);
}",1,1,examples\cpp\com\foo\config3.cpp,com.foo.getLogger,,false,156,169,getLogger,,,1,ANY com.foo.getLogger (ANY)
1189,METHOD,examples\cpp\console.cpp:<global>,TYPE_DECL,"[r,err]() {
        auto appender = std::make_shared<ConsoleAppender>
            ( std::make_shared<SimpleLayout>()
            , err ? ConsoleAppender::getSystemErr() : ConsoleAppender::getSystemOut()
            );
        r->getRootLogger()->addAppender(appender);
    }",27,5,examples\cpp\console.cpp,configure.<lambda>0,,false,35,41,<lambda>0,,,1,ANY configure.<lambda>0 ()
1247,METHOD,examples\cpp\console.cpp:<global>,TYPE_DECL,<global>,1,1,examples\cpp\console.cpp,examples\cpp\console.cpp:<global>,,false,1,112,<global>,,,1,
1249,METHOD,examples\cpp\console.cpp:<global>,TYPE_DECL,"static void configure(bool err)
{
    using namespace log4cxx;
    auto r = LogManager::getLoggerRepository();
    r->ensureIsConfigured([r,err]() {
        auto appender = std::make_shared<ConsoleAppender>
            ( std::make_shared<SimpleLayout>()
            , err ? ConsoleAppender::getSystemErr() : ConsoleAppender::getSystemOut()
            );
        r->getRootLogger()->addAppender(appender);
    });
}",1,1,examples\cpp\console.cpp,configure,,false,31,42,configure,,,1,void configure (bool)
1264,METHOD,examples\cpp\console.cpp:<global>,TYPE_DECL,"int main(int argc, char** argv)
{
    setlocale(LC_ALL, """");
    if (argc <= 1) {
        puts(""Console test program\nUsage: console [-err] [ puts | putws | cout | wcout | configure | log | wide | byte ]*\n"");  
    }
    bool configured = false;
    bool err = false;
    for (int i = 1; i < argc; i++) {
        if (strcmp(""-err"", argv[i]) == 0) {
            err = true;
        } else if (strcmp(""puts"", argv[i]) == 0) {
            fputs(""Hello, fputs\n"", err ? stderr : stdout);
#if LOG4CXX_WCHAR_T_API
        } else if (strcmp(""putws"", argv[i]) == 0) {
            fputws(L""Hello, fputws\n"", err ? stderr : stdout);
#endif
        } else if (strcmp(""cout"", argv[i]) == 0) {
            if (err) {
                std::cerr << ""Hello, cout"" << std::endl;
            } else {
                std::cout << ""Hello, cout"" << std::endl;
            }
        } else if (strcmp(""wcout"", argv[i]) == 0) {
            if (err) {
            #if LOG4CXX_HAS_STD_WCOUT
                std::wcerr << ...",1,1,examples\cpp\console.cpp,main,,false,52,112,main,,,2,"int main (int,char**)"
1470,METHOD,examples\cpp\custom-appender.cpp:<global>,TYPE_DECL,<global>,1,1,examples\cpp\custom-appender.cpp,examples\cpp\custom-appender.cpp:<global>,,false,1,72,<global>,,,1,
1477,METHOD,LOG4CXX_NS.NullWriterAppender,TYPE_DECL,void close() override{},2,24,examples\cpp\custom-appender.cpp,LOG4CXX_NS.NullWriterAppender.close,,false,35,35,close,,,4,void LOG4CXX_NS.NullWriterAppender.close ()
1481,METHOD,LOG4CXX_NS.NullWriterAppender,TYPE_DECL,"bool requiresLayout() const override {
		return false;
	}",2,2,examples\cpp\custom-appender.cpp,LOG4CXX_NS.NullWriterAppender.requiresLayout,,false,37,39,requiresLayout,,,5,bool LOG4CXX_NS.NullWriterAppender.requiresLayout ()
1487,METHOD,LOG4CXX_NS.NullWriterAppender,TYPE_DECL,"void append(const spi::LoggingEventPtr& event, helpers::Pool& p) override {
		// This gets called whenever there is a valid event for our appender.
	}",2,2,examples\cpp\custom-appender.cpp,LOG4CXX_NS.NullWriterAppender.append,,false,41,43,append,,,6,"void LOG4CXX_NS.NullWriterAppender.append (ANY,ANY)"
1493,METHOD,LOG4CXX_NS.NullWriterAppender,TYPE_DECL,"void activateOptions(helpers::Pool& /* pool */) override {
		// Given all of our options, do something useful(e.g. open a file)
	}",2,2,examples\cpp\custom-appender.cpp,LOG4CXX_NS.NullWriterAppender.activateOptions,,false,45,47,activateOptions,,,7,void LOG4CXX_NS.NullWriterAppender.activateOptions (ANY)
1498,METHOD,LOG4CXX_NS.NullWriterAppender,TYPE_DECL,"void setOption(const LogString& option, const LogString& value) override {
		if (helpers::StringHelper::equalsIgnoreCase(option,
										   LOG4CXX_STR(""SOMEVALUE""), LOG4CXX_STR(""somevalue""))){
			// Do something with the 'value' here.
		}
	}",2,2,examples\cpp\custom-appender.cpp,LOG4CXX_NS.NullWriterAppender.setOption,,false,49,54,setOption,,,8,"void LOG4CXX_NS.NullWriterAppender.setOption (LogString,LogString)"
1519,METHOD,examples\cpp\custom-appender.cpp:<global>,TYPE_DECL,"int main( int argc, char** argv )
{
    using namespace log4cxx;

	xml::DOMConfigurator::configure( ""custom-appender.xml"" );

	LoggerPtr rootLogger = Logger::getRootLogger();
	LoggerPtr nullLogger = Logger::getLogger( ""NullLogger"" );

	LOG4CXX_INFO( rootLogger, ""This is some root message"" );
	LOG4CXX_INFO( nullLogger, ""This message will be discarded"" );
}",1,1,examples\cpp\custom-appender.cpp,main,,false,61,72,main,,,2,"int main (int,char**)"
1576,METHOD,examples\cpp\delayedloop.cpp:<global>,TYPE_DECL,<global>,1,1,examples\cpp\delayedloop.cpp,examples\cpp\delayedloop.cpp:<global>,,false,1,113,<global>,,,1,
1580,METHOD,DelayedLoop,TYPE_DECL,"static void main(int argc, const char * const argv[])
        {
                if(argc == 2)
                {
                        init(argv[1]);
                }
                else
                {
                        usage(argv[0], ""Wrong number of arguments."");
                }

                test();
        }",9,9,examples\cpp\delayedloop.cpp,DelayedLoop.main,,false,43,55,main,,,2,"void DelayedLoop.main (int,char[]*)"
1603,METHOD,DelayedLoop,TYPE_DECL,"static void usage(const char * programName, const char * msg)
        {
                std::cout << msg << std::endl;
                std::cout << ""Usage: "" << programName <<
                                "" configFile"" << std::endl;
                exit(1);
        }",9,9,examples\cpp\delayedloop.cpp,DelayedLoop.usage,,false,57,63,usage,,,3,"void DelayedLoop.usage (char*,char*)"
1633,METHOD,DelayedLoop,TYPE_DECL,"static void init(const std::string& configFile)
        {
                if(configFile.length() > 4 &&
                     configFile.substr(configFile.length() - 4) == "".xml"")
                {
                        xml::DOMConfigurator::configureAndWatch(configFile, 3000);
                }
                else
                {
                        PropertyConfigurator::configureAndWatch(configFile, 3000);
                }
        }",9,9,examples\cpp\delayedloop.cpp,DelayedLoop.init,,false,66,77,init,,,4,void DelayedLoop.init (ANY)
1675,METHOD,DelayedLoop,TYPE_DECL,"static void test()
        {
                int i = 0;
                while(true)
                {
                   LOG4CXX_DEBUG(logger, ""MSG "" << i++);
                        try
                        {
                                apr_sleep(1000000);
                        }
                        catch(std::exception&)
                        {
                        }
                }
        }",9,9,examples\cpp\delayedloop.cpp,DelayedLoop.test,,false,79,93,test,,,5,void DelayedLoop.test ()
1705,METHOD,examples\cpp\delayedloop.cpp:<global>,TYPE_DECL,"int main(int argc, const char * const argv[])
{
    apr_app_initialize(&argc, &argv, NULL);
    int result = EXIT_SUCCESS;
    try
    {
        DelayedLoop::main(argc, argv);
    }
    catch(std::exception&)
    {
        result = EXIT_FAILURE;
    }

    apr_terminate();
    return result;
}",1,1,examples\cpp\delayedloop.cpp,main,,false,98,113,main,,,4,"int main (int,char[]*)"
1757,METHOD,examples\cpp\format-string.cpp:<global>,TYPE_DECL,<global>,1,1,examples\cpp\format-string.cpp,examples\cpp\format-string.cpp:<global>,,false,1,82,<global>,,,1,
1761,METHOD,examples\cpp\format-string.cpp:<global>,TYPE_DECL,"std::ostream& operator<<( std::ostream& stream, const MyStruct& mystruct ){
		stream << ""[MyStruct x:"" << mystruct.x << ""]"";
		return stream;
}",1,1,examples\cpp\format-string.cpp,operator <<,,false,35,38,operator <<,,,2,"ostream operator << (ANY,MyStruct)"
1778,METHOD,examples\cpp\format-string.cpp:<global>,TYPE_DECL,"int main()
{
	setlocale(LC_ALL, """");

	using namespace log4cxx;
	BasicConfigurator::configure();
	auto rootLogger = Logger::getRootLogger();

	LOG4CXX_INFO_FMT( rootLogger, ""This is a {} mesage"", ""test"" );
#if !LOG4CXX_USING_STD_FORMAT
	LOG4CXX_INFO_FMT( rootLogger, fmt::fg(fmt::color::red), ""Messages can be colored"" );
#endif
	LOG4CXX_INFO_FMT( rootLogger, ""We can also align text to the {:<10} or {:>10}"", ""left"", ""right"" );

	MyStruct mine{ 42 };
	LOG4CXX_INFO_FMT( rootLogger, ""This custom type {} can also be logged, since it implements operator<<"", mine );

	LOG4CXX_INFO( rootLogger, ""Numbers can be formatted with excessive operator<<: ""
				  << std::setprecision(3) << 22.456
				  << "" And as hex: ""
				  << std::setbase( 16 ) << 123 );
	LOG4CXX_INFO_FMT( rootLogger, ""Numbers can be formatted with a format string {:.1f} and as hex: {:x}"", 22.456, 123 );

	return 0;
}",1,1,examples\cpp\format-string.cpp,main,,false,58,82,main,,,3,int main ()
1867,METHOD,examples\cpp\ndc-example.cpp:<global>,TYPE_DECL,<global>,1,1,examples\cpp\ndc-example.cpp,examples\cpp\ndc-example.cpp:<global>,,false,1,48,<global>,,,1,
1869,METHOD,examples\cpp\ndc-example.cpp:<global>,TYPE_DECL,"int main()
{
    setlocale(LC_ALL, """"); // Use the user-preferred locale
    int result = EXIT_SUCCESS;
    try
    {
        BasicConfigurator::configure();
        LoggerPtr rootLogger = Logger::getRootLogger();

        NDC context1(""[outer]"");
        LOG4CXX_INFO(rootLogger, ""info message""); // log entry contains ""[outer]""
        {
            NDC context2(""[inner]"");
            LOG4CXX_DEBUG(rootLogger, ""debug message""); // log entry contains ""[outer] [inner]""
        }
        LOG4CXX_WARN(rootLogger, ""warn message""); // log entry contains ""[outer]""
    }
    catch(std::exception&)
    {
        result = EXIT_FAILURE;
    }

    return result;
}",1,1,examples\cpp\ndc-example.cpp,main,,false,25,48,main,,,1,int main ()
1930,METHOD,examples\cpp\stream.cpp:<global>,TYPE_DECL,<global>,1,2,examples\cpp\stream.cpp,examples\cpp\stream.cpp:<global>,,false,1,56,<global>,,,1,
1932,METHOD,examples\cpp\stream.cpp:<global>,TYPE_DECL,"int main()
{
    setlocale(LC_ALL, """");
    int result = EXIT_SUCCESS;
    try
    {
                BasicConfigurator::configure();
                LoggerPtr rootLogger = Logger::getRootLogger();

                NDC::push(""trivial context"");

                log4cxx::logstream logstream(rootLogger, Level::getDebug());
                logstream << ""debug message "" << 1 << LOG4CXX_ENDMSG;
                logstream.setLevel(Level::getInfo());
                logstream << ""info message"" << LOG4CXX_ENDMSG;
                logstream << Level::getWarn() << ""warn message"" << LOG4CXX_ENDMSG;
                logstream << Level::getError() << ""error message"" << LOG4CXX_ENDMSG;
                logstream << Level::getFatal() << ""fatal message"" << LOG4CXX_ENDMSG;


                NDC::pop();
        }
        catch(std::exception&)
        {
                result = EXIT_FAILURE;
        }

    return result;
}",1,1,examples\cpp\stream.cpp,main,,false,28,56,main,,,1,int main ()
2051,METHOD,main\cpp-qt\configuration.cpp:<global>,TYPE_DECL,<global>,1,21,main\cpp-qt\configuration.cpp,main\cpp-qt\configuration.cpp:<global>,,false,1,129,<global>,,,1,
2057,METHOD,main\cpp-qt\configuration.cpp:<global>,TYPE_DECL,"static void loadXMLFile(const QString& path){
	QFileInfo fi(configFilename);
	if(!fi.exists()){
		return;
	}
	LOG4CXX_NS::xml::DOMConfigurator::configure(path.toStdString());
}",1,1,main\cpp-qt\configuration.cpp,LOG4CXX_NS.qt.loadXMLFile,,false,38,44,loadXMLFile,,,3,void LOG4CXX_NS.qt.loadXMLFile (QString)
2085,METHOD,main\cpp-qt\configuration.cpp:<global>,TYPE_DECL,"static void loadPropertiesFile(const QString& path){
	QFileInfo fi(configFilename);
	if(!fi.exists()){
		return;
	}
	LOG4CXX_NS::PropertyConfigurator::configure(path.toStdString());
}",1,1,main\cpp-qt\configuration.cpp,LOG4CXX_NS.qt.loadPropertiesFile,,false,46,52,loadPropertiesFile,,,4,void LOG4CXX_NS.qt.loadPropertiesFile (QString)
2111,METHOD,main\cpp-qt\configuration.cpp:<global>,TYPE_DECL,"static void dirChanged(const QString&){
	QFileInfo fi(configFilename);
	if(fi.exists()){
		// From the Qt docs:
		// Note that QFileSystemWatcher stops monitoring files once they have been renamed
		// or removed from disk, and directories once they have been removed from disk.
		//
		// Some text editing programs will replace the file with a new one, which deletes
		// the old file(thus causing Qt to remove the watch), so we need to add in the
		// file whenever the directory changes.
		// See also: https://stackoverflow.com/questions/18300376/qt-qfilesystemwatcher-signal-filechanged-gets-emited-only-once
		watcher->addPath(configFilename);
	}
}",1,1,main\cpp-qt\configuration.cpp,LOG4CXX_NS.qt.dirChanged,,false,54,67,dirChanged,,,5,void LOG4CXX_NS.qt.dirChanged (QString)
2130,METHOD,main\cpp-qt\configuration.cpp:<global>,TYPE_DECL,Configuration::Configuration(){},1,32,main\cpp-qt\configuration.cpp,LOG4CXX_NS.qt.Configuration.Configuration,,false,69,69,Configuration,,,6,ANY LOG4CXX_NS.qt.Configuration.Configuration ()
2134,METHOD,main\cpp-qt\configuration.cpp:<global>,TYPE_DECL,"LOG4CXX_NS::spi::ConfigurationStatus Configuration::tryLoadFile(const QString& filename){
	LOG4CXX_NS::spi::ConfigurationStatus stat =LOG4CXX_NS::spi::ConfigurationStatus::NotConfigured;
	bool isXML = false;

	if(filename.endsWith("".xml"")){
		stat = LOG4CXX_NS::xml::DOMConfigurator::configure(filename.toStdString());
		isXML = true;
	}else if(filename.endsWith("".properties"")){
		stat = LOG4CXX_NS::PropertyConfigurator::configure(filename.toStdString());
	}

	if( stat == LOG4CXX_NS::spi::ConfigurationStatus::Configured ){
		watcher = std::make_unique<QFileSystemWatcher>();
		configFilename = filename;
		QFileInfo fi(filename);
		watcher->addPath(fi.dir().absolutePath());
		watcher->addPath(filename);

		QObject::connect(watcher.get(), &QFileSystemWatcher::directoryChanged,
						 &dirChanged);
		if(isXML){
			QObject::connect(watcher.get(), &QFileSystemWatcher::fileChanged,
							 &loadXMLFile);
		}else{
			QObject::connect(watcher.get(), &QFileSystemWatcher::fileChanged,
							 &l...",1,1,main\cpp-qt\configuration.cpp,LOG4CXX_NS.qt.Configuration.tryLoadFile,,false,71,101,tryLoadFile,,,7,ConfigurationStatus LOG4CXX_NS.qt.Configuration.tryLoadFile (QString)
2286,METHOD,main\cpp-qt\configuration.cpp:<global>,TYPE_DECL,"std::tuple<LOG4CXX_NS::spi::ConfigurationStatus,QString>
Configuration::configureFromFileAndWatch(const QVector<QString>& directories,
										 const QVector<QString>& filenames){
	for( QString dir : directories ){
		for( QString fname : filenames ){
			QString canidate_str = dir + ""/"" + fname;
			QFile candidate(canidate_str);

			LOG4CXX_DECODE_QSTRING(msg, ""Checking file "" + canidate_str);
			LogLog::debug(msg);
			if (candidate.exists())
			{
				LOG4CXX_NS::spi::ConfigurationStatus configStatus = tryLoadFile(canidate_str);
				if( configStatus == LOG4CXX_NS::spi::ConfigurationStatus::Configured ){
					return {configStatus, canidate_str};
				}
				LOG4CXX_DECODE_QSTRING(failmsg, ""Unable to load  "" + canidate_str + "": trying next"");
				LogLog::debug(failmsg);
			}
		}
	}

	return {LOG4CXX_NS::spi::ConfigurationStatus::NotConfigured, QString()};
}",1,1,main\cpp-qt\configuration.cpp,LOG4CXX_NS.qt.Configuration.configureFromFileAndWatch,,false,103,126,configureFromFileAndWatch,,,8,"tuple<LOG4CXX_NS::spi::ConfigurationStatus,QString> LOG4CXX_NS.qt.Configuration.configureFromFileAndWatch (QVector<QString>,QVector<QString>)"
2358,METHOD,main\cpp-qt\messagehandler.cpp:<global>,TYPE_DECL,<global>,1,25,main\cpp-qt\messagehandler.cpp,main\cpp-qt\messagehandler.cpp:<global>,,false,1,59,<global>,,,1,
2362,METHOD,main\cpp-qt\messagehandler.cpp:<global>,TYPE_DECL,"void messageHandler(QtMsgType type, const QMessageLogContext& context, const QString& message )
{
	LOG4CXX_NS::LoggerPtr qtLogger = LOG4CXX_NS::Logger::getLogger( context.category );
	LOG4CXX_NS::spi::LocationInfo location( context.file,
										 LOG4CXX_NS::spi::LocationInfo::calcShortFileName(context.file),
										 context.function,
										 context.line );

	switch ( type )
	{
		case QtMsgType::QtDebugMsg:
			qtLogger->debug( message.toStdString(), location );
			break;

		case QtMsgType::QtWarningMsg:
			qtLogger->warn( message.toStdString(), location );
			break;
#if QT_VERSION >= QT_VERSION_CHECK(5, 5, 0)

		case QtMsgType::QtInfoMsg:
			qtLogger->info( message.toStdString(), location );
			break;
#endif

		case QtMsgType::QtCriticalMsg:
			qtLogger->error( message.toStdString(), location );
			break;

		case QtMsgType::QtFatalMsg:
			qtLogger->fatal( message.toStdString(), location );
			std::abort();
	}
}",1,1,main\cpp-qt\messagehandler.cpp,LOG4CXX_NS.qt.messageHandler,,false,24,56,messageHandler,,,1,"void LOG4CXX_NS.qt.messageHandler (QtMsgType,QMessageLogContext,QString)"
2492,METHOD,main\cpp\action.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\action.cpp,main\cpp\action.cpp:<global>,,false,1,89,<global>,,,1,
2496,METHOD,main\cpp\action.cpp:<global>,TYPE_DECL,"Action::Action() :
	m_priv( std::make_unique<Action::ActionPrivate>() )
{
}",1,1,main\cpp\action.cpp,Action.Action,,false,29,32,Action,,,3,ANY Action.Action ()
2500,METHOD,main\cpp\action.cpp:<global>,TYPE_DECL,"Action::Action( std::unique_ptr<ActionPrivate> priv ) :
	m_priv( std::move(priv) ) {}",1,29,main\cpp\action.cpp,Action.Action,,false,34,35,Action,,,4,ANY Action.Action (ANY)
2505,METHOD,main\cpp\action.cpp:<global>,TYPE_DECL,"Action::~Action()
{
}",1,1,main\cpp\action.cpp,Action.~Action,,false,37,39,~Action,,,5,ANY Action.~Action ()
2509,METHOD,main\cpp\action.cpp:<global>,TYPE_DECL,"void Action::run(LOG4CXX_NS::helpers::Pool& pool1)
{
	std::unique_lock<std::mutex> lock(m_priv->mutex);

	if (!m_priv->interrupted)
	{
		try
		{
			execute(pool1);
		}
		catch (std::exception& ex)
		{
			reportException(ex);
		}

		m_priv->complete = true;
		m_priv->interrupted = true;
	}
}",1,1,main\cpp\action.cpp,Action.run,,false,44,62,run,,,6,void Action.run (ANY)
2549,METHOD,main\cpp\action.cpp:<global>,TYPE_DECL,"void Action::close()
{
	std::unique_lock<std::mutex> lock(m_priv->mutex);
	m_priv->interrupted = true;
}",1,1,main\cpp\action.cpp,Action.close,,false,67,71,close,,,7,void Action.close ()
2570,METHOD,main\cpp\action.cpp:<global>,TYPE_DECL,"bool Action::isComplete() const
{
	return m_priv->complete;
}",1,1,main\cpp\action.cpp,Action.isComplete,,false,77,80,isComplete,,,8,bool Action.isComplete ()
2578,METHOD,main\cpp\action.cpp:<global>,TYPE_DECL,"void Action::reportException(const std::exception& /* ex */)
{
}",1,1,main\cpp\action.cpp,Action.reportException,,false,87,89,reportException,,,9,void Action.reportException (ANY)
2596,METHOD,main\cpp\andfilter.cpp:<global>,TYPE_DECL,<global>,1,5,main\cpp\andfilter.cpp,main\cpp\andfilter.cpp:<global>,,false,1,94,<global>,,,1,
2599,METHOD,AndFilterPrivate,TYPE_DECL,"AndFilterPrivate() : FilterPrivate(),
		headFilter(),
		tailFilter(),
		acceptOnMatch(true) {}",2,24,main\cpp\andfilter.cpp,AndFilterPrivate.AndFilterPrivate,,false,33,36,AndFilterPrivate,,,1,ANY AndFilterPrivate.AndFilterPrivate ()
2608,METHOD,main\cpp\andfilter.cpp:<global>,TYPE_DECL,"AndFilter::AndFilter()
	: Filter( std::make_unique<AndFilterPrivate>() )
{
}",1,1,main\cpp\andfilter.cpp,AndFilter.AndFilter,,false,45,48,AndFilter,,,4,ANY AndFilter.AndFilter ()
2612,METHOD,main\cpp\andfilter.cpp:<global>,TYPE_DECL,AndFilter::~AndFilter() {},1,26,main\cpp\andfilter.cpp,AndFilter.~AndFilter,,false,50,50,~AndFilter,,,5,ANY AndFilter.~AndFilter ()
2616,METHOD,main\cpp\andfilter.cpp:<global>,TYPE_DECL,"void AndFilter::addFilter(const FilterPtr& filter)
{
	if (priv->headFilter == NULL)
	{
		priv->headFilter = filter;
		priv->tailFilter = filter;
	}
	else
	{
		priv->tailFilter->setNext(filter);
	}
}",1,5,main\cpp\andfilter.cpp,AndFilter.addFilter,,false,52,63,addFilter,,,6,void AndFilter.addFilter (FilterPtr)
2675,METHOD,main\cpp\andfilter.cpp:<global>,TYPE_DECL,"void AndFilter::setAcceptOnMatch(bool newValue)
{
	priv->acceptOnMatch = newValue;
}",1,1,main\cpp\andfilter.cpp,AndFilter.setAcceptOnMatch,,false,66,69,setAcceptOnMatch,,,7,void AndFilter.setAcceptOnMatch (bool)
2692,METHOD,main\cpp\andfilter.cpp:<global>,TYPE_DECL,"Filter::FilterDecision AndFilter::decide(
	const spi::LoggingEventPtr& event) const
{
	bool accepted = true;
	FilterPtr f(priv->headFilter);

	while (f != NULL)
	{
		accepted = accepted && (Filter::ACCEPT == f->decide(event));
		f = f->getNext();
	}

	if (accepted)
	{
		if (priv->acceptOnMatch)
		{
			return Filter::ACCEPT;
		}

		return Filter::DENY;
	}

	return Filter::NEUTRAL;
}",1,13,main\cpp\andfilter.cpp,AndFilter.decide,,false,71,94,decide,,,8,FilterDecision AndFilter.decide (ANY)
2781,METHOD,main\cpp\appenderattachableimpl.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\appenderattachableimpl.cpp,main\cpp\appenderattachableimpl.cpp:<global>,,false,1,184,<global>,,,1,
2788,METHOD,main\cpp\appenderattachableimpl.cpp:<global>,TYPE_DECL,"AppenderAttachableImpl::AppenderAttachableImpl(Pool& pool) :
	m_priv(std::make_unique<AppenderAttachableImpl::priv_data>())
{
}",1,1,main\cpp\appenderattachableimpl.cpp,AppenderAttachableImpl.AppenderAttachableImpl,,false,39,42,AppenderAttachableImpl,,,4,ANY AppenderAttachableImpl.AppenderAttachableImpl (Pool)
2793,METHOD,main\cpp\appenderattachableimpl.cpp:<global>,TYPE_DECL,"AppenderAttachableImpl::~AppenderAttachableImpl()
{

}",1,1,main\cpp\appenderattachableimpl.cpp,AppenderAttachableImpl.~AppenderAttachableImpl,,false,44,47,~AppenderAttachableImpl,,,5,ANY AppenderAttachableImpl.~AppenderAttachableImpl ()
2797,METHOD,main\cpp\appenderattachableimpl.cpp:<global>,TYPE_DECL,"void AppenderAttachableImpl::addAppender(const AppenderPtr newAppender)
{
	// Null values for newAppender parameter are strictly forbidden.
	if (newAppender == 0)
	{
		return;
	}

	std::lock_guard<std::mutex> lock( m_priv->m_mutex );
	AppenderList::iterator it = std::find(
			m_priv->appenderList.begin(), m_priv->appenderList.end(), newAppender);

	if (it == m_priv->appenderList.end())
	{
		m_priv->appenderList.push_back(newAppender);
	}
}",1,1,main\cpp\appenderattachableimpl.cpp,AppenderAttachableImpl.addAppender,,false,49,65,addAppender,,,6,void AppenderAttachableImpl.addAppender (AppenderPtr)
2857,METHOD,main\cpp\appenderattachableimpl.cpp:<global>,TYPE_DECL,"int AppenderAttachableImpl::appendLoopOnAppenders(
	const spi::LoggingEventPtr& event,
	Pool& p)
{
	int numberAppended = 0;
	// FallbackErrorHandler::error() may modify our list of appenders
	// while we are iterating over them (if it holds the same logger).
	// So, make a local copy of the appenders that we want to iterate over
	// before actually iterating over them.
	AppenderList allAppenders = getAllAppenders();
	for (auto appender : allAppenders)
	{
		appender->doAppend(event, p);
		numberAppended++;
	}

	return numberAppended;
}",1,1,main\cpp\appenderattachableimpl.cpp,AppenderAttachableImpl.appendLoopOnAppenders,,false,67,84,appendLoopOnAppenders,,,7,"int AppenderAttachableImpl.appendLoopOnAppenders (ANY,Pool)"
2885,METHOD,main\cpp\appenderattachableimpl.cpp:<global>,TYPE_DECL,"AppenderList AppenderAttachableImpl::getAllAppenders() const
{
	std::lock_guard<std::mutex> lock( m_priv->m_mutex );
	return m_priv->appenderList;
}",1,1,main\cpp\appenderattachableimpl.cpp,AppenderAttachableImpl.getAllAppenders,,false,86,90,getAllAppenders,,,8,AppenderList AppenderAttachableImpl.getAllAppenders ()
2905,METHOD,main\cpp\appenderattachableimpl.cpp:<global>,TYPE_DECL,"AppenderPtr AppenderAttachableImpl::getAppender(const LogString& name) const
{
	if (name.empty())
	{
		return 0;
	}

	std::lock_guard<std::mutex> lock( m_priv->m_mutex );
	AppenderList::const_iterator it, itEnd = m_priv->appenderList.end();
	AppenderPtr appender;

	for (it = m_priv->appenderList.begin(); it != itEnd; it++)
	{
		appender = *it;

		if (name == appender->getName())
		{
			return appender;
		}
	}

	return 0;
}",1,1,main\cpp\appenderattachableimpl.cpp,AppenderAttachableImpl.getAppender,,false,92,114,getAppender,,,9,AppenderPtr AppenderAttachableImpl.getAppender (LogString)
2973,METHOD,main\cpp\appenderattachableimpl.cpp:<global>,TYPE_DECL,"bool AppenderAttachableImpl::isAttached(const AppenderPtr appender) const
{
	if (appender == 0)
	{
		return false;
	}

	std::lock_guard<std::mutex> lock( m_priv->m_mutex );
	AppenderList::const_iterator it = std::find(
			m_priv->appenderList.begin(), m_priv->appenderList.end(), appender);

	return it != m_priv->appenderList.end();
}",1,1,main\cpp\appenderattachableimpl.cpp,AppenderAttachableImpl.isAttached,,false,116,128,isAttached,,,10,bool AppenderAttachableImpl.isAttached (AppenderPtr)
3026,METHOD,main\cpp\appenderattachableimpl.cpp:<global>,TYPE_DECL,"void AppenderAttachableImpl::removeAllAppenders()
{
	std::lock_guard<std::mutex> lock( m_priv->m_mutex );
	AppenderList::iterator it, itEnd = m_priv->appenderList.end();
	AppenderPtr a;

	for (it = m_priv->appenderList.begin(); it != itEnd; it++)
	{
		a = *it;
		a->close();
	}

	m_priv->appenderList.clear();
}",1,1,main\cpp\appenderattachableimpl.cpp,AppenderAttachableImpl.removeAllAppenders,,false,130,143,removeAllAppenders,,,11,void AppenderAttachableImpl.removeAllAppenders ()
3083,METHOD,main\cpp\appenderattachableimpl.cpp:<global>,TYPE_DECL,"void AppenderAttachableImpl::removeAppender(const AppenderPtr appender)
{
	if (appender == 0)
	{
		return;
	}

	std::lock_guard<std::mutex> lock( m_priv->m_mutex );
	AppenderList::iterator it = std::find(
			m_priv->appenderList.begin(), m_priv->appenderList.end(), appender);

	if (it != m_priv->appenderList.end())
	{
		m_priv->appenderList.erase(it);
	}
}",1,1,main\cpp\appenderattachableimpl.cpp,AppenderAttachableImpl.removeAppender,,false,145,160,removeAppender,,,12,void AppenderAttachableImpl.removeAppender (AppenderPtr)
3143,METHOD,main\cpp\appenderattachableimpl.cpp:<global>,TYPE_DECL,"void AppenderAttachableImpl::removeAppender(const LogString& name)
{
	if (name.empty())
	{
		return;
	}

	std::lock_guard<std::mutex> lock( m_priv->m_mutex );
	AppenderList::iterator it, itEnd = m_priv->appenderList.end();
	AppenderPtr appender;

	for (it = m_priv->appenderList.begin(); it != itEnd; it++)
	{
		appender = *it;

		if (name == appender->getName())
		{
			m_priv->appenderList.erase(it);
			return;
		}
	}
}",1,1,main\cpp\appenderattachableimpl.cpp,AppenderAttachableImpl.removeAppender,,false,162,183,removeAppender,,,13,void AppenderAttachableImpl.removeAppender (LogString)
3233,METHOD,main\cpp\appenderskeleton.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\appenderskeleton.cpp,main\cpp\appenderskeleton.cpp:<global>,,false,1,204,<global>,,,1,
3237,METHOD,main\cpp\appenderskeleton.cpp:<global>,TYPE_DECL,"AppenderSkeleton::AppenderSkeleton( std::unique_ptr<AppenderSkeletonPrivate> priv )
	:   m_priv(std::move(priv))
{

}",1,1,main\cpp\appenderskeleton.cpp,AppenderSkeleton.AppenderSkeleton,,false,33,37,AppenderSkeleton,,,3,ANY AppenderSkeleton.AppenderSkeleton (ANY)
3242,METHOD,main\cpp\appenderskeleton.cpp:<global>,TYPE_DECL,"AppenderSkeleton::AppenderSkeleton()
	:   m_priv(std::make_unique<AppenderSkeletonPrivate>())
{

}",1,1,main\cpp\appenderskeleton.cpp,AppenderSkeleton.AppenderSkeleton,,false,39,43,AppenderSkeleton,,,4,ANY AppenderSkeleton.AppenderSkeleton ()
3246,METHOD,main\cpp\appenderskeleton.cpp:<global>,TYPE_DECL,"AppenderSkeleton::AppenderSkeleton(const LayoutPtr& layout1)
	:   m_priv(std::make_unique<AppenderSkeletonPrivate>())
{

}",1,1,main\cpp\appenderskeleton.cpp,AppenderSkeleton.AppenderSkeleton,,false,45,49,AppenderSkeleton,,,5,ANY AppenderSkeleton.AppenderSkeleton (LayoutPtr)
3251,METHOD,main\cpp\appenderskeleton.cpp:<global>,TYPE_DECL,AppenderSkeleton::~AppenderSkeleton() {},1,40,main\cpp\appenderskeleton.cpp,AppenderSkeleton.~AppenderSkeleton,,false,51,51,~AppenderSkeleton,,,6,ANY AppenderSkeleton.~AppenderSkeleton ()
3255,METHOD,main\cpp\appenderskeleton.cpp:<global>,TYPE_DECL,"void AppenderSkeleton::finalize()
{
	// An appender might be closed then garbage collected. There is no
	// point in closing twice.
	if (m_priv->closed)
	{
		return;
	}

	close();
}",1,1,main\cpp\appenderskeleton.cpp,AppenderSkeleton.finalize,,false,53,63,finalize,,,7,void AppenderSkeleton.finalize ()
3266,METHOD,main\cpp\appenderskeleton.cpp:<global>,TYPE_DECL,"void AppenderSkeleton::addFilter(const spi::FilterPtr newFilter)
{
	std::lock_guard<std::recursive_mutex> lock(m_priv->mutex);

	if (m_priv->headFilter == nullptr)
	{
		m_priv->headFilter = m_priv->tailFilter = newFilter;
	}
	else
	{
		m_priv->tailFilter->setNext(newFilter);
		m_priv->tailFilter = newFilter;
	}
}",1,1,main\cpp\appenderskeleton.cpp,AppenderSkeleton.addFilter,,false,65,78,addFilter,,,8,void AppenderSkeleton.addFilter (ANY)
3313,METHOD,main\cpp\appenderskeleton.cpp:<global>,TYPE_DECL,"void AppenderSkeleton::clearFilters()
{
	std::lock_guard<std::recursive_mutex> lock(m_priv->mutex);
	m_priv->headFilter = m_priv->tailFilter = nullptr;
}",1,1,main\cpp\appenderskeleton.cpp,AppenderSkeleton.clearFilters,,false,80,84,clearFilters,,,9,void AppenderSkeleton.clearFilters ()
3338,METHOD,main\cpp\appenderskeleton.cpp:<global>,TYPE_DECL,"bool AppenderSkeleton::isAsSevereAsThreshold(const LevelPtr& level) const
{
	return ((level == 0) || level->isGreaterOrEqual(m_priv->threshold));
}",1,1,main\cpp\appenderskeleton.cpp,AppenderSkeleton.isAsSevereAsThreshold,,false,86,89,isAsSevereAsThreshold,,,10,bool AppenderSkeleton.isAsSevereAsThreshold (LevelPtr)
3355,METHOD,main\cpp\appenderskeleton.cpp:<global>,TYPE_DECL,"void AppenderSkeleton::doAppend(const spi::LoggingEventPtr& event, Pool& pool1)
{
	std::lock_guard<std::recursive_mutex> lock(m_priv->mutex);

	doAppendImpl(event, pool1);
}",1,1,main\cpp\appenderskeleton.cpp,AppenderSkeleton.doAppend,,false,91,96,doAppend,,,11,"void AppenderSkeleton.doAppend (ANY,Pool)"
3376,METHOD,main\cpp\appenderskeleton.cpp:<global>,TYPE_DECL,"void AppenderSkeleton::doAppendImpl(const spi::LoggingEventPtr& event, Pool& pool1)
{
	if (m_priv->closed)
	{
		LogLog::error(((LogString) LOG4CXX_STR(""Attempted to append to closed appender named [""))
			+ m_priv->name + LOG4CXX_STR(""].""));
		return;
	}

	if (!isAsSevereAsThreshold(event->getLevel()))
	{
		return;
	}

	FilterPtr f = m_priv->headFilter;


	while (f != 0)
	{
		switch (f->decide(event))
		{
			case Filter::DENY:
				return;

			case Filter::ACCEPT:
				f = nullptr;
				break;

			case Filter::NEUTRAL:
				f = f->getNext();
		}
	}

	append(event, pool1);
}",1,1,main\cpp\appenderskeleton.cpp,AppenderSkeleton.doAppendImpl,,false,98,132,doAppendImpl,,,12,"void AppenderSkeleton.doAppendImpl (ANY,Pool)"
3456,METHOD,main\cpp\appenderskeleton.cpp:<global>,TYPE_DECL,"void AppenderSkeleton::setErrorHandler(const spi::ErrorHandlerPtr errorHandler1)
{
	std::lock_guard<std::recursive_mutex> lock(m_priv->mutex);

	if (errorHandler1 == nullptr)
	{
		// We do not throw exception here since the cause is probably a
		// bad config file.
		LogLog::warn(LOG4CXX_STR(""You have tried to set a null error-handler.""));
	}
	else
	{
		m_priv->errorHandler = errorHandler1;
	}
}",1,1,main\cpp\appenderskeleton.cpp,AppenderSkeleton.setErrorHandler,,false,134,148,setErrorHandler,,,13,void AppenderSkeleton.setErrorHandler (ANY)
3491,METHOD,main\cpp\appenderskeleton.cpp:<global>,TYPE_DECL,"void AppenderSkeleton::setThreshold(const LevelPtr& threshold1)
{
	std::lock_guard<std::recursive_mutex> lock(m_priv->mutex);
	m_priv->threshold = threshold1;
}",1,1,main\cpp\appenderskeleton.cpp,AppenderSkeleton.setThreshold,,false,150,154,setThreshold,,,14,void AppenderSkeleton.setThreshold (LevelPtr)
3513,METHOD,main\cpp\appenderskeleton.cpp:<global>,TYPE_DECL,"void AppenderSkeleton::setOption(const LogString& option,
	const LogString& value)
{
	if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""THRESHOLD""), LOG4CXX_STR(""threshold"")))
	{
		setThreshold(Level::toLevelLS(value));
	}
}",1,1,main\cpp\appenderskeleton.cpp,AppenderSkeleton.setOption,,false,156,164,setOption,,,15,"void AppenderSkeleton.setOption (LogString,LogString)"
3536,METHOD,main\cpp\appenderskeleton.cpp:<global>,TYPE_DECL,"const spi::ErrorHandlerPtr AppenderSkeleton::getErrorHandler() const
{
	return m_priv->errorHandler;
}",1,1,main\cpp\appenderskeleton.cpp,AppenderSkeleton.getErrorHandler,,false,166,169,getErrorHandler,,,16,ErrorHandlerPtr AppenderSkeleton.getErrorHandler ()
3544,METHOD,main\cpp\appenderskeleton.cpp:<global>,TYPE_DECL,"spi::FilterPtr AppenderSkeleton::getFilter() const
{
	return m_priv->headFilter;
}",1,1,main\cpp\appenderskeleton.cpp,AppenderSkeleton.getFilter,,false,171,174,getFilter,,,17,FilterPtr AppenderSkeleton.getFilter ()
3552,METHOD,main\cpp\appenderskeleton.cpp:<global>,TYPE_DECL,"const spi::FilterPtr AppenderSkeleton::getFirstFilter() const
{
	return m_priv->headFilter;
}",1,1,main\cpp\appenderskeleton.cpp,AppenderSkeleton.getFirstFilter,,false,176,179,getFirstFilter,,,18,FilterPtr AppenderSkeleton.getFirstFilter ()
3560,METHOD,main\cpp\appenderskeleton.cpp:<global>,TYPE_DECL,"LayoutPtr AppenderSkeleton::getLayout() const
{
	return m_priv->layout;
}",1,1,main\cpp\appenderskeleton.cpp,AppenderSkeleton.getLayout,,false,181,184,getLayout,,,19,LayoutPtr AppenderSkeleton.getLayout ()
3568,METHOD,main\cpp\appenderskeleton.cpp:<global>,TYPE_DECL,"LogString AppenderSkeleton::getName() const
{
	return m_priv->name;
}",1,1,main\cpp\appenderskeleton.cpp,AppenderSkeleton.getName,,false,186,189,getName,,,20,LogString AppenderSkeleton.getName ()
3576,METHOD,main\cpp\appenderskeleton.cpp:<global>,TYPE_DECL,"const LevelPtr AppenderSkeleton::getThreshold() const
{
	return m_priv->threshold;
}",1,1,main\cpp\appenderskeleton.cpp,AppenderSkeleton.getThreshold,,false,191,194,getThreshold,,,21,LevelPtr AppenderSkeleton.getThreshold ()
3584,METHOD,main\cpp\appenderskeleton.cpp:<global>,TYPE_DECL,"void AppenderSkeleton::setLayout(const LayoutPtr layout1)
{
	m_priv->layout = layout1;
}",1,1,main\cpp\appenderskeleton.cpp,AppenderSkeleton.setLayout,,false,196,199,setLayout,,,22,void AppenderSkeleton.setLayout (LayoutPtr)
3594,METHOD,main\cpp\appenderskeleton.cpp:<global>,TYPE_DECL,"void AppenderSkeleton::setName(const LogString& name1)
{
	m_priv->name.assign(name1);
}",1,1,main\cpp\appenderskeleton.cpp,AppenderSkeleton.setName,,false,201,204,setName,,,23,void AppenderSkeleton.setName (LogString)
3617,METHOD,main\cpp\aprdatagramsocket.cpp:<global>,TYPE_DECL,<global>,1,18,main\cpp\aprdatagramsocket.cpp,main\cpp\aprdatagramsocket.cpp:<global>,,false,1,215,<global>,,,1,
3622,METHOD,LOG4CXX_NS.helpers.APRDatagramSocketPriv,TYPE_DECL,"APRDatagramSocketPriv() :
		DatagramSocketPriv(),
		socket(nullptr)
	{}",2,3,main\cpp\aprdatagramsocket.cpp,LOG4CXX_NS.helpers.APRDatagramSocketPriv.APRDatagramSocketPriv,,false,31,34,APRDatagramSocketPriv,,,1,ANY LOG4CXX_NS.helpers.APRDatagramSocketPriv.APRDatagramSocketPriv ()
3626,METHOD,LOG4CXX_NS.helpers.APRDatagramSocketPriv,TYPE_DECL,"APRDatagramSocketPriv(int port) :
		DatagramSocketPriv(port),
		socket(nullptr)
	{}",2,3,main\cpp\aprdatagramsocket.cpp,LOG4CXX_NS.helpers.APRDatagramSocketPriv.APRDatagramSocketPriv,,false,36,39,APRDatagramSocketPriv,,,2,ANY LOG4CXX_NS.helpers.APRDatagramSocketPriv.APRDatagramSocketPriv (int)
3631,METHOD,LOG4CXX_NS.helpers.APRDatagramSocketPriv,TYPE_DECL,"APRDatagramSocketPriv(int port, InetAddressPtr localAddress) :
		DatagramSocketPriv(port, localAddress),
		socket(nullptr)
	{}",2,3,main\cpp\aprdatagramsocket.cpp,LOG4CXX_NS.helpers.APRDatagramSocketPriv.APRDatagramSocketPriv,,false,41,44,APRDatagramSocketPriv,,,3,"ANY LOG4CXX_NS.helpers.APRDatagramSocketPriv.APRDatagramSocketPriv (int,InetAddressPtr)"
3639,METHOD,main\cpp\aprdatagramsocket.cpp:<global>,TYPE_DECL,"APRDatagramSocket::APRDatagramSocket() :
	DatagramSocket(std::make_unique<APRDatagramSocketPriv>()){
	init();
}",1,1,main\cpp\aprdatagramsocket.cpp,LOG4CXX_NS.helpers.APRDatagramSocket.APRDatagramSocket,,false,53,56,APRDatagramSocket,,,2,ANY LOG4CXX_NS.helpers.APRDatagramSocket.APRDatagramSocket ()
3644,METHOD,main\cpp\aprdatagramsocket.cpp:<global>,TYPE_DECL,"APRDatagramSocket::APRDatagramSocket(int port) :
	DatagramSocket(std::make_unique<APRDatagramSocketPriv>(port)){
	init();
}",1,1,main\cpp\aprdatagramsocket.cpp,LOG4CXX_NS.helpers.APRDatagramSocket.APRDatagramSocket,,false,58,61,APRDatagramSocket,,,3,ANY LOG4CXX_NS.helpers.APRDatagramSocket.APRDatagramSocket (int)
3650,METHOD,main\cpp\aprdatagramsocket.cpp:<global>,TYPE_DECL,"APRDatagramSocket::APRDatagramSocket(int port, InetAddressPtr laddr) :
	DatagramSocket(std::make_unique<APRDatagramSocketPriv>(port, laddr)){
	init();
}",1,1,main\cpp\aprdatagramsocket.cpp,LOG4CXX_NS.helpers.APRDatagramSocket.APRDatagramSocket,,false,63,66,APRDatagramSocket,,,4,"ANY LOG4CXX_NS.helpers.APRDatagramSocket.APRDatagramSocket (int,InetAddressPtr)"
3657,METHOD,main\cpp\aprdatagramsocket.cpp:<global>,TYPE_DECL,"void APRDatagramSocket::init()
{
	apr_socket_t* newSocket;
	apr_status_t status =
		apr_socket_create(&newSocket, APR_INET, SOCK_DGRAM,
			APR_PROTO_UDP, _priv->socketPool.getAPRPool());
	_priv->socket = newSocket;

	if (status != APR_SUCCESS)
	{
		throw SocketException(status);
	}
}",1,18,main\cpp\aprdatagramsocket.cpp,LOG4CXX_NS.helpers.APRDatagramSocket.init,,false,68,80,init,,,5,void LOG4CXX_NS.helpers.APRDatagramSocket.init ()
3704,METHOD,main\cpp\aprdatagramsocket.cpp:<global>,TYPE_DECL,"void APRDatagramSocket::receive(DatagramPacketPtr& p)
{
	Pool addrPool;

	// Create the address from which to receive the datagram packet
	LOG4CXX_ENCODE_CHAR(hostAddr, p->getAddress()->getHostAddress());
	apr_sockaddr_t* addr;
	apr_status_t status =
		apr_sockaddr_info_get(&addr, hostAddr.c_str(), APR_INET,
			p->getPort(), 0, addrPool.getAPRPool());

	if (status != APR_SUCCESS)
	{
		throw SocketException(status);
	}

	// receive the datagram packet
	apr_size_t len = p->getLength();
	status = apr_socket_recvfrom(addr, _priv->socket, 0,
			(char*)p->getData(), &len);

	if (status != APR_SUCCESS)
	{
		throw IOException(status);
	}
}",1,36,main\cpp\aprdatagramsocket.cpp,LOG4CXX_NS.helpers.APRDatagramSocket.receive,,false,82,107,receive,,,6,void LOG4CXX_NS.helpers.APRDatagramSocket.receive (DatagramPacketPtr)
3786,METHOD,main\cpp\aprdatagramsocket.cpp:<global>,TYPE_DECL,"void APRDatagramSocket::send(DatagramPacketPtr& p)
{
	Pool addrPool;

	// create the adress to which to send the datagram packet
	LOG4CXX_ENCODE_CHAR(hostAddr, p->getAddress()->getHostAddress());
	apr_sockaddr_t* addr;
	apr_status_t status =
		apr_sockaddr_info_get(&addr, hostAddr.c_str(), APR_INET, p->getPort(),
			0, addrPool.getAPRPool());

	if (status != APR_SUCCESS)
	{
		throw SocketException(status);
	}

	// send the datagram packet
	apr_size_t len = p->getLength();
	status = apr_socket_sendto(_priv->socket, addr, 0,
			(char*)p->getData(), &len);

	if (status != APR_SUCCESS)
	{
		throw IOException(status);
	}
}",1,28,main\cpp\aprdatagramsocket.cpp,LOG4CXX_NS.helpers.APRDatagramSocket.send,,false,109,134,send,,,7,void LOG4CXX_NS.helpers.APRDatagramSocket.send (DatagramPacketPtr)
3868,METHOD,main\cpp\aprdatagramsocket.cpp:<global>,TYPE_DECL,"void APRDatagramSocket::close(){
	if (_priv->socket != 0)
	{
		apr_status_t status = apr_socket_close(_priv->socket);

		if (status != APR_SUCCESS)
		{
			throw SocketException(status);
		}

		_priv->socket = 0;
		_priv->localPort = 0;
	}
}",1,5,main\cpp\aprdatagramsocket.cpp,LOG4CXX_NS.helpers.APRDatagramSocket.close,,false,136,149,close,,,8,void LOG4CXX_NS.helpers.APRDatagramSocket.close ()
3932,METHOD,main\cpp\aprdatagramsocket.cpp:<global>,TYPE_DECL,"void APRDatagramSocket::bind(int localPort1, InetAddressPtr localAddress1)
{
	Pool addrPool;

	// Create server socket address (including port number)
	LOG4CXX_ENCODE_CHAR(hostAddr, localAddress1->getHostAddress());
	apr_sockaddr_t* server_addr;
	apr_status_t status =
		apr_sockaddr_info_get(&server_addr, hostAddr.c_str(), APR_INET,
			localPort1, 0, addrPool.getAPRPool());

	if (status != APR_SUCCESS)
	{
		throw BindException(status);
	}

	// bind the socket to the address
	status = apr_socket_bind(_priv->socket, server_addr);

	if (status != APR_SUCCESS)
	{
		throw BindException(status);
	}

	m_priv->localPort = localPort1;
	m_priv->localAddress = localAddress1;
}",1,26,main\cpp\aprdatagramsocket.cpp,LOG4CXX_NS.helpers.APRDatagramSocket.bind,,false,151,177,bind,,,9,"void LOG4CXX_NS.helpers.APRDatagramSocket.bind (int,InetAddressPtr)"
4003,METHOD,main\cpp\aprdatagramsocket.cpp:<global>,TYPE_DECL,"void APRDatagramSocket::connect(InetAddressPtr address1, int port1)
{
	m_priv->address = address1;
	m_priv->port = port1;

	Pool addrPool;

	// create socket address
	LOG4CXX_ENCODE_CHAR(hostAddr, address1->getHostAddress());
	apr_sockaddr_t* client_addr;
	apr_status_t status =
		apr_sockaddr_info_get(&client_addr, hostAddr.c_str(), APR_INET,
			m_priv->port, 0, addrPool.getAPRPool());

	if (status != APR_SUCCESS)
	{
		throw ConnectException(status);
	}

	// connect the socket
	status = apr_socket_connect(_priv->socket, client_addr);

	if (status != APR_SUCCESS)
	{
		throw ConnectException(status);
	}
}",1,29,main\cpp\aprdatagramsocket.cpp,LOG4CXX_NS.helpers.APRDatagramSocket.connect,,false,180,206,connect,,,10,"void LOG4CXX_NS.helpers.APRDatagramSocket.connect (InetAddressPtr,int)"
4076,METHOD,main\cpp\aprdatagramsocket.cpp:<global>,TYPE_DECL,"bool APRDatagramSocket::isClosed() const
{
	return _priv->socket != nullptr;
}",1,8,main\cpp\aprdatagramsocket.cpp,LOG4CXX_NS.helpers.APRDatagramSocket.isClosed,,false,209,212,isClosed,,,11,bool LOG4CXX_NS.helpers.APRDatagramSocket.isClosed ()
4112,METHOD,main\cpp\aprinitializer.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\aprinitializer.cpp,main\cpp\aprinitializer.cpp:<global>,,false,1,181,<global>,,,1,
4119,METHOD,APRInitializerPrivate,TYPE_DECL,"APRInitializerPrivate() :
		p(0),
		startTime(0),
		tlsKey(0){

	}",2,2,main\cpp\aprinitializer.cpp,APRInitializerPrivate.APRInitializerPrivate,,false,35,40,APRInitializerPrivate,,,1,ANY APRInitializerPrivate.APRInitializerPrivate ()
4130,METHOD,main\cpp\aprinitializer.cpp:<global>,TYPE_DECL,"void tlsDestructImpl(void* ptr)
{
	delete ((ThreadSpecificData*) ptr);
}",1,1,main\cpp\aprinitializer.cpp,anonymous_namespace_1.tlsDestructImpl,,false,52,55,tlsDestructImpl,,,1,void anonymous_namespace_1.tlsDestructImpl (void*)
4139,METHOD,main\cpp\aprinitializer.cpp:<global>,TYPE_DECL,"void tlsDestruct(void* ptr)
{
	return tlsDestructImpl(ptr);
}",12,1,main\cpp\aprinitializer.cpp,tlsDestruct,,false,59,62,tlsDestruct,,,5,void tlsDestruct (void*)
4149,METHOD,anonymous_namespace_4.apr_environment,TYPE_DECL,"apr_environment()
    {
        apr_initialize();
    }",5,5,main\cpp\aprinitializer.cpp,anonymous_namespace_5.apr_environment.apr_environment,,false,70,73,apr_environment,,,1,ANY anonymous_namespace_5.apr_environment.apr_environment ()
4154,METHOD,anonymous_namespace_4.apr_environment,TYPE_DECL,"~apr_environment()
    {
        apr_terminate();
    }",5,5,main\cpp\aprinitializer.cpp,anonymous_namespace_6.apr_environment.~apr_environment,,false,74,77,~apr_environment,,,2,ANY anonymous_namespace_6.apr_environment.~apr_environment ()
4159,METHOD,main\cpp\aprinitializer.cpp:<global>,TYPE_DECL,"APRInitializer::APRInitializer() :
	m_priv(std::make_unique<APRInitializerPrivate>())
{
	apr_pool_create(&m_priv->p, NULL);
	m_priv->startTime = Date::currentTime();
#if APR_HAS_THREADS
	apr_status_t stat = apr_threadkey_private_create(&m_priv->tlsKey, tlsDestructImpl, m_priv->p);
	assert(stat == APR_SUCCESS);
#endif
}",1,1,main\cpp\aprinitializer.cpp,APRInitializer.APRInitializer,,false,83,92,APRInitializer,,,7,ANY APRInitializer.APRInitializer ()
4177,METHOD,main\cpp\aprinitializer.cpp:<global>,TYPE_DECL,"APRInitializer::~APRInitializer()
{
	stopWatchDogs();
	isDestructed = true;
#if APR_HAS_THREADS
	std::unique_lock<std::mutex> lock(m_priv->mutex);
	apr_threadkey_private_delete(m_priv->tlsKey);
#endif
}",1,1,main\cpp\aprinitializer.cpp,APRInitializer.~APRInitializer,,false,94,102,~APRInitializer,,,8,ANY APRInitializer.~APRInitializer ()
4185,METHOD,main\cpp\aprinitializer.cpp:<global>,TYPE_DECL,"void APRInitializer::stopWatchDogs()
{
	std::unique_lock<std::mutex> lock(m_priv->mutex);

	while (!m_priv->watchdogs.empty())
	{
		m_priv->watchdogs.back()->stop();
		delete m_priv->watchdogs.back();
		m_priv->watchdogs.pop_back();
	}
}",1,1,main\cpp\aprinitializer.cpp,APRInitializer.stopWatchDogs,,false,104,114,stopWatchDogs,,,9,void APRInitializer.stopWatchDogs ()
4232,METHOD,main\cpp\aprinitializer.cpp:<global>,TYPE_DECL,"void APRInitializer::unregisterAll()
{
	getInstance().stopWatchDogs();
}",1,1,main\cpp\aprinitializer.cpp,APRInitializer.unregisterAll,,false,116,119,unregisterAll,,,10,void APRInitializer.unregisterAll ()
4240,METHOD,main\cpp\aprinitializer.cpp:<global>,TYPE_DECL,"APRInitializer& APRInitializer::getInstance()
{
	static WideLife<apr_environment> env;
	static WideLife<APRInitializer> init;
	return init;
}",1,1,main\cpp\aprinitializer.cpp,APRInitializer.getInstance,,false,121,126,getInstance,,,11,APRInitializer APRInitializer.getInstance ()
4248,METHOD,main\cpp\aprinitializer.cpp:<global>,TYPE_DECL,"log4cxx_time_t APRInitializer::initialize()
{
	return getInstance().m_priv->startTime;
}",1,1,main\cpp\aprinitializer.cpp,APRInitializer.initialize,,false,129,132,initialize,,,12,log4cxx_time_t APRInitializer.initialize ()
4258,METHOD,main\cpp\aprinitializer.cpp:<global>,TYPE_DECL,"apr_pool_t* APRInitializer::getRootPool()
{
	return getInstance().m_priv->p;
}",1,1,main\cpp\aprinitializer.cpp,APRInitializer.getRootPool,,false,134,137,getRootPool,,,13,apr_pool_t APRInitializer.getRootPool ()
4268,METHOD,main\cpp\aprinitializer.cpp:<global>,TYPE_DECL,"apr_threadkey_t* APRInitializer::getTlsKey()
{
	return getInstance().m_priv->tlsKey;
}",1,1,main\cpp\aprinitializer.cpp,APRInitializer.getTlsKey,,false,139,142,getTlsKey,,,14,apr_threadkey_t APRInitializer.getTlsKey ()
4278,METHOD,main\cpp\aprinitializer.cpp:<global>,TYPE_DECL,"void APRInitializer::registerCleanup(FileWatchdog* watchdog)
{
	APRInitializer& instance(getInstance());
	std::unique_lock<std::mutex> lock(instance.m_priv->mutex);
	instance.m_priv->watchdogs.push_back(watchdog);
}",1,1,main\cpp\aprinitializer.cpp,APRInitializer.registerCleanup,,false,144,149,registerCleanup,,,15,void APRInitializer.registerCleanup (FileWatchdog*)
4309,METHOD,main\cpp\aprinitializer.cpp:<global>,TYPE_DECL,"void APRInitializer::unregisterCleanup(FileWatchdog* watchdog)
{
	APRInitializer& instance(getInstance());
	std::unique_lock<std::mutex> lock(instance.m_priv->mutex);

	for (std::list<FileWatchdog*>::iterator iter = instance.m_priv->watchdogs.begin();
		iter != instance.m_priv->watchdogs.end();
		iter++)
	{
		if (*iter == watchdog)
		{
			instance.m_priv->watchdogs.erase(iter);
			return;
		}
	}
}",1,1,main\cpp\aprinitializer.cpp,APRInitializer.unregisterCleanup,,false,151,166,unregisterCleanup,,,16,void APRInitializer.unregisterCleanup (FileWatchdog*)
4373,METHOD,main\cpp\aprinitializer.cpp:<global>,TYPE_DECL,"void APRInitializer::addObject(size_t key, const ObjectPtr& pObject)
{
	std::unique_lock<std::mutex> lock(m_priv->mutex);
	m_priv->objects[key] = pObject;
}",1,1,main\cpp\aprinitializer.cpp,APRInitializer.addObject,,false,168,172,addObject,,,17,"void APRInitializer.addObject (size_t,ObjectPtr)"
4398,METHOD,main\cpp\aprinitializer.cpp:<global>,TYPE_DECL,"const ObjectPtr& APRInitializer::findOrAddObject(size_t key, std::function<ObjectPtr()> creator)
{
	std::unique_lock<std::mutex> lock(m_priv->mutex);
	auto pItem = m_priv->objects.find(key);
	if (m_priv->objects.end() == pItem)
		pItem = m_priv->objects.emplace(key, creator()).first;
	return pItem->second;
}",1,1,main\cpp\aprinitializer.cpp,APRInitializer.findOrAddObject,,false,174,181,findOrAddObject,,,18,"ObjectPtr APRInitializer.findOrAddObject (size_t,ANY)"
4467,METHOD,main\cpp\aprserversocket.cpp:<global>,TYPE_DECL,<global>,1,21,main\cpp\aprserversocket.cpp,main\cpp\aprserversocket.cpp:<global>,,false,1,163,<global>,,,1,
4475,METHOD,main\cpp\aprserversocket.cpp:<global>,TYPE_DECL,"APRServerSocket::APRServerSocket(int port) :
	ServerSocket(std::make_unique<APRServerSocketPriv>()){
	apr_status_t status =
		apr_socket_create(&_priv->socket, APR_INET, SOCK_STREAM,
			APR_PROTO_TCP, _priv->pool.getAPRPool());

	if (status != APR_SUCCESS)
	{
		throw SocketException(status);
	}

	status = apr_socket_opt_set(_priv->socket, APR_SO_NONBLOCK, 1);

	if (status != APR_SUCCESS)
	{
		throw SocketException(status);
	}

	// Create server socket address (including port number)
	apr_sockaddr_t* server_addr;
	status =
		apr_sockaddr_info_get(&server_addr, NULL, APR_INET,
			port, 0, _priv->pool.getAPRPool());

	if (status != APR_SUCCESS)
	{
		throw ConnectException(status);
	}

	// bind the socket to the address
	status = apr_socket_bind(_priv->socket, server_addr);

	if (status != APR_SUCCESS)
	{
		throw BindException(status);
	}


	status = apr_socket_listen(_priv->socket, 50);

	if (status != APR_SUCCESS)
	{
		throw SocketException(status);
	}
}",1,21,main\cpp\aprserversocket.cpp,LOG4CXX_NS.helpers.APRServerSocket.APRServerSocket,,false,38,82,APRServerSocket,,,2,ANY LOG4CXX_NS.helpers.APRServerSocket.APRServerSocket (int)
4617,METHOD,main\cpp\aprserversocket.cpp:<global>,TYPE_DECL,"void APRServerSocket::close(){
	std::unique_lock<std::mutex> lock(_priv->mutex);

	if (_priv->socket != 0)
	{
		apr_status_t status = apr_socket_close(_priv->socket);

		if (status != APR_SUCCESS)
		{
			throw SocketException(status);
		}

		_priv->socket = 0;
	}
}",1,35,main\cpp\aprserversocket.cpp,LOG4CXX_NS.helpers.APRServerSocket.close,,false,84,98,close,,,3,void LOG4CXX_NS.helpers.APRServerSocket.close ()
4688,METHOD,main\cpp\aprserversocket.cpp:<global>,TYPE_DECL,"SocketPtr APRServerSocket::accept()
{
	std::unique_lock<std::mutex> lock(_priv->mutex);

	if (_priv->socket == 0)
	{
		throw IOException();
	}

	apr_pollfd_t poll;
	poll.p = _priv->pool.getAPRPool();
	poll.desc_type = APR_POLL_SOCKET;
	poll.reqevents = APR_POLLIN;
	poll.rtnevents = 0;
	poll.desc.s = _priv->socket;
	poll.client_data = NULL;

	apr_int32_t signaled;
	apr_interval_time_t to = _priv->timeout * 1000;
	apr_status_t status = apr_poll(&poll, 1, &signaled, to);

	if (APR_STATUS_IS_TIMEUP(status))
	{
		throw SocketTimeoutException();
	}
	else if (status != APR_SUCCESS)
	{
		throw SocketException(status);
	}

	apr_pool_t* newPool;
	status = apr_pool_create(&newPool, 0);

	if (status != APR_SUCCESS)
	{
		throw PoolException(status);
	}

	apr_socket_t* newSocket;
	status = apr_socket_accept(&newSocket, _priv->socket, newPool);

	if (status != APR_SUCCESS)
	{
		apr_pool_destroy(newPool);
		throw SocketException(status);
	}

	status = apr_socket_opt_set(newSocket, APR_SO_NONBLOCK, ...",1,35,main\cpp\aprserversocket.cpp,LOG4CXX_NS.helpers.APRServerSocket.accept,,false,104,160,accept,,,4,SocketPtr LOG4CXX_NS.helpers.APRServerSocket.accept ()
4907,METHOD,main\cpp\aprsocket.cpp:<global>,TYPE_DECL,<global>,1,21,main\cpp\aprsocket.cpp,main\cpp\aprsocket.cpp:<global>,,false,1,163,<global>,,,1,
4912,METHOD,LOG4CXX_NS.helpers.APRSocketPriv,TYPE_DECL,"APRSocketPriv(InetAddressPtr& address, int port)
		: Socket::SocketPrivate(address, port)
		, socket(nullptr)
	{}",2,3,main\cpp\aprsocket.cpp,LOG4CXX_NS.helpers.APRSocketPriv.APRSocketPriv,,false,32,35,APRSocketPriv,,,1,"ANY LOG4CXX_NS.helpers.APRSocketPriv.APRSocketPriv (InetAddressPtr,int)"
4918,METHOD,LOG4CXX_NS.helpers.APRSocketPriv,TYPE_DECL,"APRSocketPriv(apr_socket_t* sock, apr_pool_t* p) :
		pool(p, true),
		socket(sock)
	{}",2,3,main\cpp\aprsocket.cpp,LOG4CXX_NS.helpers.APRSocketPriv.APRSocketPriv,,false,37,40,APRSocketPriv,,,2,"ANY LOG4CXX_NS.helpers.APRSocketPriv.APRSocketPriv (apr_socket_t*,apr_pool_t*)"
4926,METHOD,main\cpp\aprsocket.cpp:<global>,TYPE_DECL,"APRSocket::APRSocket(InetAddressPtr& address, int port) :
	Socket(std::make_unique<APRSocketPriv>(address, port)){
	apr_status_t status =
		apr_socket_create(&_priv->socket, APR_INET, SOCK_STREAM,
			APR_PROTO_TCP, _priv->pool.getAPRPool());

	if (status != APR_SUCCESS)
	{
		throw SocketException(status);
	}

	LOG4CXX_ENCODE_CHAR(host, address->getHostAddress());

	// create socket address (including port)
	apr_sockaddr_t* client_addr;
	status =
		apr_sockaddr_info_get(&client_addr, host.c_str(), APR_INET,
			port, 0, _priv->pool.getAPRPool());

	if (status != APR_SUCCESS)
	{
		throw ConnectException(status);
	}

	// connect the socket
	status =  apr_socket_connect(_priv->socket, client_addr);

	if (status != APR_SUCCESS)
	{
		throw ConnectException(status);
	}
}",1,21,main\cpp\aprsocket.cpp,LOG4CXX_NS.helpers.APRSocket.APRSocket,,false,48,79,APRSocket,,,2,"ANY LOG4CXX_NS.helpers.APRSocket.APRSocket (InetAddressPtr,int)"
5033,METHOD,main\cpp\aprsocket.cpp:<global>,TYPE_DECL,"APRSocket::APRSocket(apr_socket_t* s, apr_pool_t* pool) :
	Socket(std::make_unique<APRSocketPriv>(s, pool)){
	apr_sockaddr_t* sa;
	apr_status_t status = apr_socket_addr_get(&sa, APR_REMOTE, s);

	if (status == APR_SUCCESS)
	{
		_priv->port = sa->port;
		LogString remotename;
		LogString remoteip;

		if (sa->hostname != NULL)
		{
			Transcoder::decode(sa->hostname, remotename);
		}

		char* buf = 0;
		status = apr_sockaddr_ip_get(&buf, sa);

		if (status == APR_SUCCESS)
		{
			Transcoder::decode(buf, remoteip);
		}

		_priv->address = std::make_shared<InetAddress>(remotename, remoteip);
	}
}",1,2,main\cpp\aprsocket.cpp,LOG4CXX_NS.helpers.APRSocket.APRSocket,,false,81,107,APRSocket,,,3,"ANY LOG4CXX_NS.helpers.APRSocket.APRSocket (apr_socket_t*,apr_pool_t*)"
5126,METHOD,main\cpp\aprsocket.cpp:<global>,TYPE_DECL,"size_t APRSocket::write(ByteBuffer& buf)
{
	if (_priv->socket == 0)
	{
		throw ClosedChannelException();
	}

	size_t totalWritten = 0;

	while (buf.remaining() > 0)
	{
		apr_size_t written = buf.remaining();

		// while writing to the socket, we need to ignore the SIGPIPE
		// signal. Otherwise, when the client has closed the connection,
		// the send() function would not return an error but call the
		// SIGPIPE handler.
#if APR_HAVE_SIGACTION
		apr_sigfunc_t* old = apr_signal(SIGPIPE, SIG_IGN);
		apr_status_t status = apr_socket_send(_priv->socket, buf.current(), &written);
		apr_signal(SIGPIPE, old);
#else
		apr_status_t status = apr_socket_send(_priv->socket, buf.current(), &written);
#endif

		buf.position(buf.position() + written);
		totalWritten += written;

		if (status != APR_SUCCESS)
		{
			throw SocketException(status);
		}
	}

	return totalWritten;
}",1,5,main\cpp\aprsocket.cpp,LOG4CXX_NS.helpers.APRSocket.write,,false,109,144,write,,,4,size_t LOG4CXX_NS.helpers.APRSocket.write (ByteBuffer)
5209,METHOD,main\cpp\aprsocket.cpp:<global>,TYPE_DECL,"void APRSocket::close()
{
	if (_priv->socket != 0)
	{
		apr_status_t status = apr_socket_close(_priv->socket);

		if (status != APR_SUCCESS)
		{
			throw SocketException(status);
		}

		_priv->socket = 0;
	}
}",1,5,main\cpp\aprsocket.cpp,LOG4CXX_NS.helpers.APRSocket.close,,false,147,160,close,,,5,void LOG4CXX_NS.helpers.APRSocket.close ()
5262,METHOD,main\cpp\asyncappender.cpp:<global>,TYPE_DECL,"[this]()
			{
				return priv->buffer.empty();
			}",35,11,main\cpp\asyncappender.cpp,AsyncAppender.append.<lambda>0,,false,271,274,<lambda>0,,,1,ANY AsyncAppender.append.<lambda>0 ()
5282,METHOD,main\cpp\asyncappender.cpp:<global>,TYPE_DECL,"[this]() -> bool
				{ return 0 < priv->buffer.size() || priv->closed; }",36,17,main\cpp\asyncappender.cpp,AsyncAppender.dispatch.<lambda>1,,false,471,472,<lambda>1,,,1,bool AsyncAppender.dispatch.<lambda>1 ()
5335,METHOD,main\cpp\asyncappender.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\asyncappender.cpp,main\cpp\asyncappender.cpp:<global>,,false,1,522,<global>,,,1,
5339,METHOD,<empty>,<empty>,<empty>,1,,main\cpp\asyncappender.cpp,anonymous_enum_0:<clinit>,,false,47,,<clinit>,,,2,
5349,METHOD,DiscardSummary,TYPE_DECL,DiscardSummary(const ::LOG4CXX_NS::spi::LoggingEventPtr& event);,3,65,main\cpp\asyncappender.cpp,DiscardSummary.DiscardSummary,,false,68,68,DiscardSummary,,,3,ANY DiscardSummary.DiscardSummary (ANY)
5354,METHOD,DiscardSummary,TYPE_DECL,DiscardSummary(const DiscardSummary& src);,3,43,main\cpp\asyncappender.cpp,DiscardSummary.DiscardSummary,,false,70,70,DiscardSummary,,,4,ANY DiscardSummary.DiscardSummary (DiscardSummary)
5359,METHOD,DiscardSummary,TYPE_DECL,DiscardSummary& operator=(const DiscardSummary& src);,17,54,main\cpp\asyncappender.cpp,DiscardSummary.operator =,,false,72,72,operator =,,,5,DiscardSummary DiscardSummary.operator = (DiscardSummary)
5364,METHOD,DiscardSummary,TYPE_DECL,void add(const ::LOG4CXX_NS::spi::LoggingEventPtr& event);,8,59,main\cpp\asyncappender.cpp,DiscardSummary.add,,false,79,79,add,,,6,void DiscardSummary.add (ANY)
5369,METHOD,DiscardSummary,TYPE_DECL,::LOG4CXX_NS::spi::LoggingEventPtr createEvent(::LOG4CXX_NS::helpers::Pool& p);,38,80,main\cpp\asyncappender.cpp,DiscardSummary.createEvent,,false,86,86,createEvent,,,7,ANY DiscardSummary.createEvent (ANY)
5374,METHOD,DiscardSummary,TYPE_DECL,"static
		::LOG4CXX_NS::spi::LoggingEventPtr createEvent(::LOG4CXX_NS::helpers::Pool& p,
			size_t discardedCount);",38,25,main\cpp\asyncappender.cpp,DiscardSummary.createEvent,,false,89,90,createEvent,,,8,"ANY DiscardSummary.createEvent (ANY,size_t)"
5382,METHOD,AsyncAppenderPriv,TYPE_DECL,"AsyncAppenderPriv() :
		AppenderSkeletonPrivate(),
		buffer(),
		bufferSize(DEFAULT_BUFFER_SIZE),
		appenders(std::make_shared<AppenderAttachableImpl>(pool)),
		dispatcher(),
		locationInfo(false),
		blocking(true)
#if LOG4CXX_EVENTS_AT_EXIT
		, atExitRegistryRaii([this]{atExitActivated();})
#endif
	{
	}",2,2,main\cpp\asyncappender.cpp,AsyncAppenderPriv.AsyncAppenderPriv,,false,101,113,AsyncAppenderPriv,,,1,ANY AsyncAppenderPriv.AsyncAppenderPriv ()
5386,METHOD,AsyncAppenderPriv,TYPE_DECL,"void atExitActivated()
	{
		std::unique_lock<std::mutex> lock(bufferMutex);
		bufferNotFull.wait(lock, [this]() -> bool
			{ return buffer.empty() || closed; }
		);
	}",2,2,main\cpp\asyncappender.cpp,AsyncAppenderPriv.atExitActivated,,false,116,122,atExitActivated,,,2,void AsyncAppenderPriv.atExitActivated ()
5403,METHOD,main\cpp\asyncappender.cpp:<global>,TYPE_DECL,"AsyncAppender::AsyncAppender()
	: AppenderSkeleton(std::make_unique<AsyncAppenderPriv>())
{
}",1,1,main\cpp\asyncappender.cpp,AsyncAppender.AsyncAppender,,false,178,181,AsyncAppender,,,7,ANY AsyncAppender.AsyncAppender ()
5407,METHOD,main\cpp\asyncappender.cpp:<global>,TYPE_DECL,"AsyncAppender::~AsyncAppender()
{
	finalize();
}",1,1,main\cpp\asyncappender.cpp,AsyncAppender.~AsyncAppender,,false,183,186,~AsyncAppender,,,8,ANY AsyncAppender.~AsyncAppender ()
5412,METHOD,main\cpp\asyncappender.cpp:<global>,TYPE_DECL,"void AsyncAppender::addAppender(const AppenderPtr newAppender)
{
	priv->appenders->addAppender(newAppender);
}",1,1,main\cpp\asyncappender.cpp,AsyncAppender.addAppender,,false,188,191,addAppender,,,9,void AsyncAppender.addAppender (AppenderPtr)
5431,METHOD,main\cpp\asyncappender.cpp:<global>,TYPE_DECL,"void AsyncAppender::setOption(const LogString& option,
	const LogString& value)
{
	if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""LOCATIONINFO""), LOG4CXX_STR(""locationinfo"")))
	{
		setLocationInfo(OptionConverter::toBoolean(value, false));
	}

	if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""BUFFERSIZE""), LOG4CXX_STR(""buffersize"")))
	{
		setBufferSize(OptionConverter::toInt(value, DEFAULT_BUFFER_SIZE));
	}

	if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""BLOCKING""), LOG4CXX_STR(""blocking"")))
	{
		setBlocking(OptionConverter::toBoolean(value, true));
	}
	else
	{
		AppenderSkeleton::setOption(option, value);
	}
}",1,1,main\cpp\asyncappender.cpp,AsyncAppender.setOption,,false,194,215,setOption,,,10,"void AsyncAppender.setOption (LogString,LogString)"
5499,METHOD,main\cpp\asyncappender.cpp:<global>,TYPE_DECL,"void AsyncAppender::doAppend(const spi::LoggingEventPtr& event, Pool& pool1)
{
	doAppendImpl(event, pool1);
}",1,1,main\cpp\asyncappender.cpp,AsyncAppender.doAppend,,false,218,221,doAppend,,,11,"void AsyncAppender.doAppend (ANY,Pool)"
5508,METHOD,main\cpp\asyncappender.cpp:<global>,TYPE_DECL,"void AsyncAppender::append(const spi::LoggingEventPtr& event, Pool& p)
{
	if (priv->bufferSize <= 0)
	{
		priv->appenders->appendLoopOnAppenders(event, p);
	}

	// Set the NDC and MDC for the calling thread as these
	// LoggingEvent fields were not set at event creation time.
	LogString ndcVal;
	event->getNDC(ndcVal);
	// Get a copy of this thread's MDC.
	event->getMDCCopy();

	std::unique_lock<std::mutex> lock(priv->bufferMutex);
	if (!priv->dispatcher.joinable())
	{
		priv->dispatcher = ThreadUtility::instance()->createThread( LOG4CXX_STR(""AsyncAppender""), &AsyncAppender::dispatch, this );
	}
	while (true)
	{
		size_t previousSize = priv->buffer.size();

		if (previousSize < (size_t)priv->bufferSize)
		{
			priv->buffer.push_back(event);

			if (previousSize == 0)
			{
				priv->bufferNotEmpty.notify_all();
			}

			break;
		}

		//
		//   Following code is only reachable if buffer is full
		//
		//
		//   if blocking and thread is not already interrupted
		//      and not the dis...",1,5,main\cpp\asyncappender.cpp,AsyncAppender.append,,false,223,300,append,,,12,"void AsyncAppender.append (ANY,Pool)"
5823,METHOD,main\cpp\asyncappender.cpp:<global>,TYPE_DECL,"void AsyncAppender::close()
{
	{
		std::lock_guard<std::mutex> lock(priv->bufferMutex);
		priv->closed = true;
		priv->bufferNotEmpty.notify_all();
		priv->bufferNotFull.notify_all();
	}

	if ( priv->dispatcher.joinable() )
	{
		priv->dispatcher.join();
	}

	{
		AppenderList appenderList = priv->appenders->getAllAppenders();

		for (AppenderList::iterator iter = appenderList.begin();
			iter != appenderList.end();
			iter++)
		{
			(*iter)->close();
		}
	}
}",1,35,main\cpp\asyncappender.cpp,AsyncAppender.close,,false,302,326,close,,,13,void AsyncAppender.close ()
5955,METHOD,main\cpp\asyncappender.cpp:<global>,TYPE_DECL,"AppenderList AsyncAppender::getAllAppenders() const
{
	return priv->appenders->getAllAppenders();
}",1,8,main\cpp\asyncappender.cpp,AsyncAppender.getAllAppenders,,false,328,331,getAllAppenders,,,14,AppenderList AsyncAppender.getAllAppenders ()
5973,METHOD,main\cpp\asyncappender.cpp:<global>,TYPE_DECL,"AppenderPtr AsyncAppender::getAppender(const LogString& n) const
{
	return priv->appenders->getAppender(n);
}",1,8,main\cpp\asyncappender.cpp,AsyncAppender.getAppender,,false,333,336,getAppender,,,15,AppenderPtr AsyncAppender.getAppender (LogString)
5993,METHOD,main\cpp\asyncappender.cpp:<global>,TYPE_DECL,"bool AsyncAppender::isAttached(const AppenderPtr appender) const
{
	return priv->appenders->isAttached(appender);
}",1,8,main\cpp\asyncappender.cpp,AsyncAppender.isAttached,,false,338,341,isAttached,,,16,bool AsyncAppender.isAttached (AppenderPtr)
6013,METHOD,main\cpp\asyncappender.cpp:<global>,TYPE_DECL,"bool AsyncAppender::requiresLayout() const
{
	return false;
}",1,1,main\cpp\asyncappender.cpp,AsyncAppender.requiresLayout,,false,343,346,requiresLayout,,,17,bool AsyncAppender.requiresLayout ()
6019,METHOD,main\cpp\asyncappender.cpp:<global>,TYPE_DECL,"void AsyncAppender::removeAllAppenders()
{
	priv->appenders->removeAllAppenders();
}",1,1,main\cpp\asyncappender.cpp,AsyncAppender.removeAllAppenders,,false,348,351,removeAllAppenders,,,18,void AsyncAppender.removeAllAppenders ()
6036,METHOD,main\cpp\asyncappender.cpp:<global>,TYPE_DECL,"void AsyncAppender::removeAppender(const AppenderPtr appender)
{
	priv->appenders->removeAppender(appender);
}",1,1,main\cpp\asyncappender.cpp,AsyncAppender.removeAppender,,false,353,356,removeAppender,,,19,void AsyncAppender.removeAppender (AppenderPtr)
6055,METHOD,main\cpp\asyncappender.cpp:<global>,TYPE_DECL,"void AsyncAppender::removeAppender(const LogString& n)
{
	priv->appenders->removeAppender(n);
}",1,1,main\cpp\asyncappender.cpp,AsyncAppender.removeAppender,,false,358,361,removeAppender,,,20,void AsyncAppender.removeAppender (LogString)
6074,METHOD,main\cpp\asyncappender.cpp:<global>,TYPE_DECL,"bool AsyncAppender::getLocationInfo() const
{
	return priv->locationInfo;
}",1,8,main\cpp\asyncappender.cpp,AsyncAppender.getLocationInfo,,false,363,366,getLocationInfo,,,21,bool AsyncAppender.getLocationInfo ()
6089,METHOD,main\cpp\asyncappender.cpp:<global>,TYPE_DECL,"void AsyncAppender::setLocationInfo(bool flag)
{
	priv->locationInfo = flag;
}",1,1,main\cpp\asyncappender.cpp,AsyncAppender.setLocationInfo,,false,368,371,setLocationInfo,,,22,void AsyncAppender.setLocationInfo (bool)
6106,METHOD,main\cpp\asyncappender.cpp:<global>,TYPE_DECL,"void AsyncAppender::setBufferSize(int size)
{
	if (size < 0)
	{
		throw IllegalArgumentException(LOG4CXX_STR(""size argument must be non-negative""));
	}

	std::lock_guard<std::mutex> lock(priv->bufferMutex);
	priv->bufferSize = (size < 1) ? 1 : size;
	priv->bufferNotFull.notify_all();
}",1,34,main\cpp\asyncappender.cpp,AsyncAppender.setBufferSize,,false,374,384,setBufferSize,,,23,void AsyncAppender.setBufferSize (int)
6169,METHOD,main\cpp\asyncappender.cpp:<global>,TYPE_DECL,"int AsyncAppender::getBufferSize() const
{
	return priv->bufferSize;
}",1,8,main\cpp\asyncappender.cpp,AsyncAppender.getBufferSize,,false,386,389,getBufferSize,,,24,int AsyncAppender.getBufferSize ()
6184,METHOD,main\cpp\asyncappender.cpp:<global>,TYPE_DECL,"void AsyncAppender::setBlocking(bool value)
{
	std::lock_guard<std::mutex> lock(priv->bufferMutex);
	priv->blocking = value;
	priv->bufferNotFull.notify_all();
}",1,34,main\cpp\asyncappender.cpp,AsyncAppender.setBlocking,,false,391,396,setBlocking,,,25,void AsyncAppender.setBlocking (bool)
6233,METHOD,main\cpp\asyncappender.cpp:<global>,TYPE_DECL,"bool AsyncAppender::getBlocking() const
{
	return priv->blocking;
}",1,8,main\cpp\asyncappender.cpp,AsyncAppender.getBlocking,,false,398,401,getBlocking,,,26,bool AsyncAppender.getBlocking ()
6248,METHOD,main\cpp\asyncappender.cpp:<global>,TYPE_DECL,"DiscardSummary::DiscardSummary(const LoggingEventPtr& event) :
	maxEvent(event), count(1)
{
}",1,1,main\cpp\asyncappender.cpp,DiscardSummary.DiscardSummary,,false,403,406,DiscardSummary,,,27,ANY DiscardSummary.DiscardSummary (LoggingEventPtr)
6253,METHOD,main\cpp\asyncappender.cpp:<global>,TYPE_DECL,"DiscardSummary::DiscardSummary(const DiscardSummary& src) :
	maxEvent(src.maxEvent), count(src.count)
{
}",1,1,main\cpp\asyncappender.cpp,DiscardSummary.DiscardSummary,,false,408,411,DiscardSummary,,,28,ANY DiscardSummary.DiscardSummary (DiscardSummary)
6258,METHOD,main\cpp\asyncappender.cpp:<global>,TYPE_DECL,"DiscardSummary& DiscardSummary::operator=(const DiscardSummary& src)
{
	maxEvent = src.maxEvent;
	count = src.count;
	return *this;
}",1,1,main\cpp\asyncappender.cpp,DiscardSummary.operator =,,false,413,418,operator =,,,29,DiscardSummary DiscardSummary.operator = (DiscardSummary)
6276,METHOD,main\cpp\asyncappender.cpp:<global>,TYPE_DECL,"void DiscardSummary::add(const LoggingEventPtr& event)
{
	if (event->getLevel()->toInt() > maxEvent->getLevel()->toInt())
	{
		maxEvent = event;
	}

	count++;
}",1,1,main\cpp\asyncappender.cpp,DiscardSummary.add,,false,420,428,add,,,30,void DiscardSummary.add (LoggingEventPtr)
6303,METHOD,main\cpp\asyncappender.cpp:<global>,TYPE_DECL,"LoggingEventPtr DiscardSummary::createEvent(Pool& p)
{
	LogString msg(LOG4CXX_STR(""Discarded ""));
	StringHelper::toString(count, p, msg);
	msg.append(LOG4CXX_STR("" messages due to a full event buffer including: ""));
	msg.append(maxEvent->getMessage());
	return std::make_shared<LoggingEvent>(
				maxEvent->getLoggerName(),
				maxEvent->getLevel(),
				msg,
				LocationInfo::getLocationUnavailable() );
}",1,1,main\cpp\asyncappender.cpp,DiscardSummary.createEvent,,false,430,441,createEvent,,,31,LoggingEventPtr DiscardSummary.createEvent (Pool)
6355,METHOD,main\cpp\asyncappender.cpp:<global>,TYPE_DECL,"::LOG4CXX_NS::spi::LoggingEventPtr
DiscardSummary::createEvent(::LOG4CXX_NS::helpers::Pool& p,
	size_t discardedCount)
{
	LogString msg(LOG4CXX_STR(""Discarded ""));
	StringHelper::toString(discardedCount, p, msg);
	msg.append(LOG4CXX_STR("" messages due to a full event buffer""));

	return std::make_shared<LoggingEvent>(
				LOG4CXX_STR(""""),
				LOG4CXX_NS::Level::getError(),
				msg,
				LocationInfo::getLocationUnavailable() );
}",1,1,main\cpp\asyncappender.cpp,DiscardSummary.createEvent,,false,443,456,createEvent,,,32,"LoggingEventPtr DiscardSummary.createEvent (ANY,size_t)"
6400,METHOD,main\cpp\asyncappender.cpp:<global>,TYPE_DECL,"void AsyncAppender::dispatch()
{
	bool isActive = true;

	while (isActive)
	{
		//
		//   process events after lock on buffer is released.
		//
		Pool p;
		LoggingEventList events;
		{
			std::unique_lock<std::mutex> lock(priv->bufferMutex);
			priv->bufferNotEmpty.wait(lock, [this]() -> bool
				{ return 0 < priv->buffer.size() || priv->closed; }
			);
			isActive = !priv->closed;

			for (LoggingEventList::iterator eventIter = priv->buffer.begin();
				eventIter != priv->buffer.end();
				eventIter++)
			{
				events.push_back(*eventIter);
			}

			for (DiscardMap::iterator discardIter = priv->discardMap.begin();
				discardIter != priv->discardMap.end();
				discardIter++)
			{
				events.push_back(discardIter->second.createEvent(p));
			}

			priv->buffer.clear();
			priv->discardMap.clear();
			priv->bufferNotFull.notify_all();
		}

		for (LoggingEventList::iterator iter = events.begin();
			iter != events.end();
			iter++)
		{
			try
			{
				priv->appenders->appendLoopOnAppen...",1,37,main\cpp\asyncappender.cpp,AsyncAppender.dispatch,,false,458,522,dispatch,,,33,void AsyncAppender.dispatch ()
6680,METHOD,main\cpp\atexitregistry.cpp:<global>,TYPE_DECL,<global>,1,2,main\cpp\atexitregistry.cpp,main\cpp\atexitregistry.cpp:<global>,,false,1,70,<global>,,,1,
6684,METHOD,anonymous_namespace_1.AtExitRegistryImpl,TYPE_DECL,"~AtExitRegistryImpl()
		{
			std::lock_guard<std::recursive_mutex> lock(mutex);
			while(!actions.empty())
			{
				std::function<void()> action = std::move(actions.begin()->second);
				actions.erase(actions.begin());
				action();
			}
		}",3,3,main\cpp\atexitregistry.cpp,anonymous_namespace_2.AtExitRegistryImpl.~AtExitRegistryImpl,,false,28,37,~AtExitRegistryImpl,,,1,ANY anonymous_namespace_2.AtExitRegistryImpl.~AtExitRegistryImpl ()
6733,METHOD,anonymous_namespace_1.AtExitRegistryImpl,TYPE_DECL,"void add(void* key, std::function<void()> action)
		{
			std::lock_guard<std::recursive_mutex> lock(mutex);
			actions.emplace(key, std::move(action));
		}",3,3,main\cpp\atexitregistry.cpp,anonymous_namespace_3.AtExitRegistryImpl.add,,false,39,43,add,,,2,"void anonymous_namespace_3.AtExitRegistryImpl.add (void*,ANY)"
6759,METHOD,anonymous_namespace_1.AtExitRegistryImpl,TYPE_DECL,"void del(void* key)
		{
			std::lock_guard<std::recursive_mutex> lock(mutex);
			actions.erase(key);
		}",3,3,main\cpp\atexitregistry.cpp,anonymous_namespace_4.AtExitRegistryImpl.del,,false,45,49,del,,,3,void anonymous_namespace_4.AtExitRegistryImpl.del (void*)
6782,METHOD,main\cpp\atexitregistry.cpp:<global>,TYPE_DECL,"AtExitRegistry& AtExitRegistry::instance()
{
	return s_instance;
}",1,1,main\cpp\atexitregistry.cpp,AtExitRegistry.instance,,false,57,60,instance,,,2,AtExitRegistry AtExitRegistry.instance ()
6788,METHOD,main\cpp\atexitregistry.cpp:<global>,TYPE_DECL,"void AtExitRegistry::add(void* key, std::function<void()> action)
{
	return s_instance.add(key, std::move(action));
}",1,1,main\cpp\atexitregistry.cpp,AtExitRegistry.add,,false,62,65,add,,,3,"void AtExitRegistry.add (void*,ANY)"
6805,METHOD,main\cpp\atexitregistry.cpp:<global>,TYPE_DECL,"void AtExitRegistry::del(void* key)
{
	return s_instance.del(key);
}",1,1,main\cpp\atexitregistry.cpp,AtExitRegistry.del,,false,67,70,del,,,4,void AtExitRegistry.del (void*)
6833,METHOD,main\cpp\basicconfigurator.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\basicconfigurator.cpp,main\cpp\basicconfigurator.cpp:<global>,,false,1,49,<global>,,,1,
6835,METHOD,main\cpp\basicconfigurator.cpp:<global>,TYPE_DECL,"void BasicConfigurator::configure(const LayoutPtr& layoutArg)
{
	LogManager::getLoggerRepository()->setConfigured(true);
	auto layout = layoutArg;
	if (!layout)
	{
		static const helpers::WideLife<LogString> TTCC_CONVERSION_PATTERN(LOG4CXX_STR(""%r [%t] %p %c %x - %m%n""));
		layout = std::make_shared<PatternLayout>(TTCC_CONVERSION_PATTERN);
	}
	auto appender = std::make_shared<ConsoleAppender>(layout);
	Logger::getRootLogger()->addAppender(appender);
}",1,1,main\cpp\basicconfigurator.cpp,BasicConfigurator.configure,,false,27,38,configure,,,1,void BasicConfigurator.configure (LayoutPtr)
6887,METHOD,main\cpp\basicconfigurator.cpp:<global>,TYPE_DECL,"void BasicConfigurator::configure(const AppenderPtr& appender)
{
	LoggerPtr root = Logger::getRootLogger();
	root->addAppender(appender);
}",1,1,main\cpp\basicconfigurator.cpp,BasicConfigurator.configure,,false,40,44,configure,,,2,void BasicConfigurator.configure (AppenderPtr)
6904,METHOD,main\cpp\basicconfigurator.cpp:<global>,TYPE_DECL,"void BasicConfigurator::resetConfiguration()
{
	LogManager::resetConfiguration();
}",1,1,main\cpp\basicconfigurator.cpp,BasicConfigurator.resetConfiguration,,false,46,49,resetConfiguration,,,3,void BasicConfigurator.resetConfiguration ()
6921,METHOD,main\cpp\bufferedwriter.cpp:<global>,TYPE_DECL,<global>,1,2,main\cpp\bufferedwriter.cpp,main\cpp\bufferedwriter.cpp:<global>,,false,1,83,<global>,,,1,
6924,METHOD,BufferedWriterPriv,TYPE_DECL,"BufferedWriterPriv(WriterPtr& out1, size_t sz1) :
		out(out1),
		sz(sz1)
	{}",2,3,main\cpp\bufferedwriter.cpp,BufferedWriterPriv.BufferedWriterPriv,,false,26,29,BufferedWriterPriv,,,1,"ANY BufferedWriterPriv.BufferedWriterPriv (WriterPtr,size_t)"
6935,METHOD,main\cpp\bufferedwriter.cpp:<global>,TYPE_DECL,"BufferedWriter::BufferedWriter(WriterPtr& out1)
	: BufferedWriter(out1, 1024)
{
}",1,1,main\cpp\bufferedwriter.cpp,BufferedWriter.BufferedWriter,,false,38,41,BufferedWriter,,,4,ANY BufferedWriter.BufferedWriter (WriterPtr)
6940,METHOD,main\cpp\bufferedwriter.cpp:<global>,TYPE_DECL,"BufferedWriter::BufferedWriter(WriterPtr& out1, size_t sz1)
	: m_priv(std::make_unique<BufferedWriterPriv>(out1, sz1))
{
}",1,1,main\cpp\bufferedwriter.cpp,BufferedWriter.BufferedWriter,,false,43,46,BufferedWriter,,,5,"ANY BufferedWriter.BufferedWriter (WriterPtr,size_t)"
6946,METHOD,main\cpp\bufferedwriter.cpp:<global>,TYPE_DECL,"BufferedWriter::~BufferedWriter()
{
}",1,1,main\cpp\bufferedwriter.cpp,BufferedWriter.~BufferedWriter,,false,48,50,~BufferedWriter,,,6,ANY BufferedWriter.~BufferedWriter ()
6950,METHOD,main\cpp\bufferedwriter.cpp:<global>,TYPE_DECL,"void BufferedWriter::close(Pool& p)
{
	flush(p);
	m_priv->out->close(p);
}",1,1,main\cpp\bufferedwriter.cpp,BufferedWriter.close,,false,52,56,close,,,7,void BufferedWriter.close (Pool)
6964,METHOD,main\cpp\bufferedwriter.cpp:<global>,TYPE_DECL,"void BufferedWriter::flush(Pool& p)
{
	if (m_priv->buf.length() > 0)
	{
		m_priv->out->write(m_priv->buf, p);
		m_priv->buf.erase(m_priv->buf.begin(), m_priv->buf.end());
	}
}",1,1,main\cpp\bufferedwriter.cpp,BufferedWriter.flush,,false,58,65,flush,,,8,void BufferedWriter.flush (Pool)
7007,METHOD,main\cpp\bufferedwriter.cpp:<global>,TYPE_DECL,"void BufferedWriter::write(const LogString& str, Pool& p)
{
	if (m_priv->buf.length() + str.length() > m_priv->sz)
	{
		m_priv->out->write(m_priv->buf, p);
		m_priv->buf.erase(m_priv->buf.begin(), m_priv->buf.end());
	}

	if (str.length() > m_priv->sz)
	{
		m_priv->out->write(str, p);
	}
	else
	{
		m_priv->buf.append(str);
	}
}",1,1,main\cpp\bufferedwriter.cpp,BufferedWriter.write,,false,67,83,write,,,9,"void BufferedWriter.write (LogString,Pool)"
7102,METHOD,main\cpp\bytearrayinputstream.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\bytearrayinputstream.cpp,main\cpp\bytearrayinputstream.cpp:<global>,,false,1,72,<global>,,,1,
7105,METHOD,ByteArrayInputStreamPriv,TYPE_DECL,"ByteArrayInputStreamPriv(const ByteList& bytes) :
		buf(bytes),
		pos(0) {}",2,11,main\cpp\bytearrayinputstream.cpp,ByteArrayInputStreamPriv.ByteArrayInputStreamPriv,,false,31,33,ByteArrayInputStreamPriv,,,1,ANY ByteArrayInputStreamPriv.ByteArrayInputStreamPriv (ByteList)
7114,METHOD,main\cpp\bytearrayinputstream.cpp:<global>,TYPE_DECL,"ByteArrayInputStream::ByteArrayInputStream(const std::vector<unsigned char>& bytes) :
	m_priv(std::make_unique<ByteArrayInputStreamPriv>(bytes))
{
}",1,1,main\cpp\bytearrayinputstream.cpp,ByteArrayInputStream.ByteArrayInputStream,,false,41,44,ByteArrayInputStream,,,4,ANY ByteArrayInputStream.ByteArrayInputStream (ANY)
7119,METHOD,main\cpp\bytearrayinputstream.cpp:<global>,TYPE_DECL,"ByteArrayInputStream::~ByteArrayInputStream()
{
}",1,1,main\cpp\bytearrayinputstream.cpp,ByteArrayInputStream.~ByteArrayInputStream,,false,48,50,~ByteArrayInputStream,,,5,ANY ByteArrayInputStream.~ByteArrayInputStream ()
7123,METHOD,main\cpp\bytearrayinputstream.cpp:<global>,TYPE_DECL,"void ByteArrayInputStream::close()
{
}",1,1,main\cpp\bytearrayinputstream.cpp,ByteArrayInputStream.close,,false,53,55,close,,,6,void ByteArrayInputStream.close ()
7127,METHOD,main\cpp\bytearrayinputstream.cpp:<global>,TYPE_DECL,"int ByteArrayInputStream::read(ByteBuffer& dst)
{
	if (m_priv->pos >= m_priv->buf.size())
	{
		return -1;
	}
	else
	{
		size_t bytesCopied = min(dst.remaining(), m_priv->buf.size() - m_priv->pos);
		std::memcpy(dst.current(), &m_priv->buf[m_priv->pos], bytesCopied);
		m_priv->pos += bytesCopied;
		dst.position(dst.position() + bytesCopied);
		return (int)bytesCopied;
	}
}",1,1,main\cpp\bytearrayinputstream.cpp,ByteArrayInputStream.read,,false,58,72,read,,,7,int ByteArrayInputStream.read (ByteBuffer)
7216,METHOD,main\cpp\bytearrayoutputstream.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\bytearrayoutputstream.cpp,main\cpp\bytearrayoutputstream.cpp:<global>,,false,1,63,<global>,,,1,
7222,METHOD,main\cpp\bytearrayoutputstream.cpp:<global>,TYPE_DECL,"ByteArrayOutputStream::ByteArrayOutputStream()
{
}",1,1,main\cpp\bytearrayoutputstream.cpp,ByteArrayOutputStream.ByteArrayOutputStream,,false,34,36,ByteArrayOutputStream,,,4,ANY ByteArrayOutputStream.ByteArrayOutputStream ()
7226,METHOD,main\cpp\bytearrayoutputstream.cpp:<global>,TYPE_DECL,"ByteArrayOutputStream::~ByteArrayOutputStream()
{
}",1,1,main\cpp\bytearrayoutputstream.cpp,ByteArrayOutputStream.~ByteArrayOutputStream,,false,38,40,~ByteArrayOutputStream,,,5,ANY ByteArrayOutputStream.~ByteArrayOutputStream ()
7230,METHOD,main\cpp\bytearrayoutputstream.cpp:<global>,TYPE_DECL,"void ByteArrayOutputStream::close(Pool& /* p */)
{
}",1,1,main\cpp\bytearrayoutputstream.cpp,ByteArrayOutputStream.close,,false,42,44,close,,,6,void ByteArrayOutputStream.close (Pool)
7235,METHOD,main\cpp\bytearrayoutputstream.cpp:<global>,TYPE_DECL,"void ByteArrayOutputStream::flush(Pool& /* p */)
{
}",1,1,main\cpp\bytearrayoutputstream.cpp,ByteArrayOutputStream.flush,,false,46,48,flush,,,7,void ByteArrayOutputStream.flush (Pool)
7240,METHOD,main\cpp\bytearrayoutputstream.cpp:<global>,TYPE_DECL,"void ByteArrayOutputStream::write(ByteBuffer& buf, Pool& /* p */ )
{
	size_t sz = m_priv->array.size();
	m_priv->array.resize(sz + buf.remaining());
	memcpy(&m_priv->array[sz], buf.current(), buf.remaining());
	buf.position(buf.limit());
}",1,1,main\cpp\bytearrayoutputstream.cpp,ByteArrayOutputStream.write,,false,50,56,write,,,8,"void ByteArrayOutputStream.write (ByteBuffer,Pool)"
7290,METHOD,main\cpp\bytearrayoutputstream.cpp:<global>,TYPE_DECL,"std::vector<unsigned char> ByteArrayOutputStream::toByteArray() const
{
	return m_priv->array;
}",1,1,main\cpp\bytearrayoutputstream.cpp,ByteArrayOutputStream.toByteArray,,false,58,61,toByteArray,,,9,vector<unsigned char> ByteArrayOutputStream.toByteArray ()
7309,METHOD,main\cpp\bytebuffer.cpp:<global>,TYPE_DECL,<global>,1,2,main\cpp\bytebuffer.cpp,main\cpp\bytebuffer.cpp:<global>,,false,1,124,<global>,,,1,
7312,METHOD,ByteBufferPriv,TYPE_DECL,"ByteBufferPriv(char* data1, size_t capacity) :
		base(data1), pos(0), lim(capacity), cap(capacity) {}",2,54,main\cpp\bytebuffer.cpp,ByteBufferPriv.ByteBufferPriv,,false,27,28,ByteBufferPriv,,,1,"ANY ByteBufferPriv.ByteBufferPriv (char*,size_t)"
7322,METHOD,main\cpp\bytebuffer.cpp:<global>,TYPE_DECL,"ByteBuffer::ByteBuffer(char* data1, size_t capacity)
	: m_priv(std::make_unique<ByteBufferPriv>(data1, capacity))
{
}",1,1,main\cpp\bytebuffer.cpp,ByteBuffer.ByteBuffer,,false,36,39,ByteBuffer,,,2,"ANY ByteBuffer.ByteBuffer (char*,size_t)"
7328,METHOD,main\cpp\bytebuffer.cpp:<global>,TYPE_DECL,"ByteBuffer::~ByteBuffer()
{
}",1,1,main\cpp\bytebuffer.cpp,ByteBuffer.~ByteBuffer,,false,41,43,~ByteBuffer,,,3,ANY ByteBuffer.~ByteBuffer ()
7332,METHOD,main\cpp\bytebuffer.cpp:<global>,TYPE_DECL,"void ByteBuffer::clear()
{
	m_priv->lim = m_priv->cap;
	m_priv->pos = 0;
}",1,1,main\cpp\bytebuffer.cpp,ByteBuffer.clear,,false,45,49,clear,,,4,void ByteBuffer.clear ()
7348,METHOD,main\cpp\bytebuffer.cpp:<global>,TYPE_DECL,"void ByteBuffer::flip()
{
	m_priv->lim = m_priv->pos;
	m_priv->pos = 0;
}",1,1,main\cpp\bytebuffer.cpp,ByteBuffer.flip,,false,51,55,flip,,,5,void ByteBuffer.flip ()
7364,METHOD,main\cpp\bytebuffer.cpp:<global>,TYPE_DECL,"void ByteBuffer::position(size_t newPosition)
{
	if (newPosition < m_priv->lim)
	{
		m_priv->pos = newPosition;
	}
	else
	{
		m_priv->pos = m_priv->lim;
	}
}",1,1,main\cpp\bytebuffer.cpp,ByteBuffer.position,,false,57,67,position,,,6,void ByteBuffer.position (size_t)
7390,METHOD,main\cpp\bytebuffer.cpp:<global>,TYPE_DECL,"void ByteBuffer::limit(size_t newLimit)
{
	if (newLimit > m_priv->cap)
	{
		throw IllegalArgumentException(LOG4CXX_STR(""newLimit""));
	}

	m_priv->lim = newLimit;
}",1,1,main\cpp\bytebuffer.cpp,ByteBuffer.limit,,false,69,77,limit,,,7,void ByteBuffer.limit (size_t)
7411,METHOD,main\cpp\bytebuffer.cpp:<global>,TYPE_DECL,"bool ByteBuffer::put(char byte)
{
	if (m_priv->pos < m_priv->lim)
	{
		m_priv->base[m_priv->pos++] = byte;
		return true;
	}

	return false;
}",1,1,main\cpp\bytebuffer.cpp,ByteBuffer.put,,false,80,89,put,,,8,bool ByteBuffer.put (char)
7439,METHOD,main\cpp\bytebuffer.cpp:<global>,TYPE_DECL,"char* ByteBuffer::data()
{
	return m_priv->base;
}",1,1,main\cpp\bytebuffer.cpp,ByteBuffer.data,,false,91,94,data,,,9,char* ByteBuffer.data ()
7447,METHOD,main\cpp\bytebuffer.cpp:<global>,TYPE_DECL,"const char* ByteBuffer::data() const
{
	return m_priv->base;
}",1,1,main\cpp\bytebuffer.cpp,ByteBuffer.data,,false,96,99,data,,,10,const char* ByteBuffer.data ()
7455,METHOD,main\cpp\bytebuffer.cpp:<global>,TYPE_DECL,"char* ByteBuffer::current()
{
	return m_priv->base + m_priv->pos;
}",1,1,main\cpp\bytebuffer.cpp,ByteBuffer.current,,false,101,104,current,,,11,char* ByteBuffer.current ()
7467,METHOD,main\cpp\bytebuffer.cpp:<global>,TYPE_DECL,"const char* ByteBuffer::current() const
{
	return m_priv->base + m_priv->pos;
}",1,1,main\cpp\bytebuffer.cpp,ByteBuffer.current,,false,106,109,current,,,12,const char* ByteBuffer.current ()
7479,METHOD,main\cpp\bytebuffer.cpp:<global>,TYPE_DECL,"size_t ByteBuffer::limit() const
{
	return m_priv->lim;
}",1,1,main\cpp\bytebuffer.cpp,ByteBuffer.limit,,false,111,114,limit,,,13,size_t ByteBuffer.limit ()
7487,METHOD,main\cpp\bytebuffer.cpp:<global>,TYPE_DECL,"size_t ByteBuffer::position() const
{
	return m_priv->pos;
}",1,1,main\cpp\bytebuffer.cpp,ByteBuffer.position,,false,116,119,position,,,14,size_t ByteBuffer.position ()
7495,METHOD,main\cpp\bytebuffer.cpp:<global>,TYPE_DECL,"size_t ByteBuffer::remaining() const
{
	return m_priv->lim - m_priv->pos;
}",1,1,main\cpp\bytebuffer.cpp,ByteBuffer.remaining,,false,121,124,remaining,,,15,size_t ByteBuffer.remaining ()
7520,METHOD,main\cpp\cacheddateformat.cpp:<global>,TYPE_DECL,<global>,1,2,main\cpp\cacheddateformat.cpp,main\cpp\cacheddateformat.cpp:<global>,,false,1,401,<global>,,,1,
7523,METHOD,CachedDateFormatPriv,TYPE_DECL,"CachedDateFormatPriv(DateFormatPtr dateFormat, int expiration1) :
		formatter(dateFormat),
		millisecondStart(0),
		slotBegin(std::numeric_limits<log4cxx_time_t>::min()),
		cache(50, 0x20),
		expiration(expiration1),
		previousTime(std::numeric_limits<log4cxx_time_t>::min())
	{}",2,3,main\cpp\cacheddateformat.cpp,CachedDateFormatPriv.CachedDateFormatPriv,,false,31,38,CachedDateFormatPriv,,,1,"ANY CachedDateFormatPriv.CachedDateFormatPriv (DateFormatPtr,int)"
7582,METHOD,main\cpp\cacheddateformat.cpp:<global>,TYPE_DECL,"CachedDateFormat::CachedDateFormat(const DateFormatPtr& dateFormat,
	int expiration1) :
	m_priv(std::make_unique<CachedDateFormatPriv>(dateFormat, expiration1))
{
	if (dateFormat == NULL)
	{
		throw IllegalArgumentException(LOG4CXX_STR(""dateFormat cannot be null""));
	}

	if (expiration1 < 0)
	{
		throw IllegalArgumentException(LOG4CXX_STR(""expiration must be non-negative""));
	}
}",1,1,main\cpp\cacheddateformat.cpp,CachedDateFormat.CachedDateFormat,,false,125,138,CachedDateFormat,,,14,"ANY CachedDateFormat.CachedDateFormat (DateFormatPtr,int)"
7606,METHOD,main\cpp\cacheddateformat.cpp:<global>,TYPE_DECL,CachedDateFormat::~CachedDateFormat() {},1,40,main\cpp\cacheddateformat.cpp,CachedDateFormat.~CachedDateFormat,,false,140,140,~CachedDateFormat,,,15,ANY CachedDateFormat.~CachedDateFormat ()
7610,METHOD,main\cpp\cacheddateformat.cpp:<global>,TYPE_DECL,"int CachedDateFormat::findMillisecondStart(
	log4cxx_time_t time, const LogString& formatted,
	const DateFormatPtr& formatter,
	Pool& pool)
{

	log4cxx_time_t slotBegin = (time / 1000000) * 1000000;

	if (slotBegin > time)
	{
		slotBegin -= 1000000;
	}

	int millis = (int) (time - slotBegin) / 1000;

	// the magic numbers are in microseconds
	int magic = magic1;
	LogString magicString(magicString1);

	if (millis == magic1 / 1000)
	{
		magic = magic2;
		magicString = magicString2;
	}

	LogString plusMagic;
	formatter->format(plusMagic, slotBegin + magic, pool);

	/**
	 *   If the string lengths differ then
	 *      we can't use the cache except for duplicate requests.
	 */
	if (plusMagic.length() != formatted.length())
	{
		return UNRECOGNIZED_MILLISECONDS;
	}
	else
	{
		// find first difference between values
		for (LogString::size_type i = 0; i < formatted.length(); i++)
		{
			if (formatted[i] != plusMagic[i])
			{
				//
				//   determine the expected digits for the base time
		...",1,1,main\cpp\cacheddateformat.cpp,CachedDateFormat.findMillisecondStart,,false,152,234,findMillisecondStart,,,16,"int CachedDateFormat.findMillisecondStart (log4cxx_time_t,LogString,DateFormatPtr,Pool)"
7830,METHOD,main\cpp\cacheddateformat.cpp:<global>,TYPE_DECL,"void CachedDateFormat::format(LogString& buf, log4cxx_time_t now, Pool& p) const
{

	//
	// If the current requested time is identical to the previously
	//     requested time, then append the cache contents.
	//
	if (now == m_priv->previousTime)
	{
		buf.append(m_priv->cache);
		return;
	}

	//
	//   If millisecond pattern was not unrecognized
	//     (that is if it was found or milliseconds did not appear)
	//
	if (m_priv->millisecondStart != UNRECOGNIZED_MILLISECONDS)
	{
		//    Check if the cache is still valid.
		//    If the requested time is within the same integral second
		//       as the last request and a shorter expiration was not requested.
		if (now < m_priv->slotBegin + m_priv->expiration
			&& now >= m_priv->slotBegin
			&& now < m_priv->slotBegin + 1000000L)
		{
			//
			//    if there was a millisecond field then update it
			//
			if (m_priv->millisecondStart >= 0)
			{
				millisecondFormat((int) ((now - m_priv->slotBegin) / 1000), m_priv->cache, m_priv->millisec...",1,1,main\cpp\cacheddateformat.cpp,CachedDateFormat.format,,false,243,309,format,,,17,"void CachedDateFormat.format (LogString,log4cxx_time_t,Pool)"
8006,METHOD,main\cpp\cacheddateformat.cpp:<global>,TYPE_DECL,"void CachedDateFormat::millisecondFormat(int millis,
	LogString& buf,
	int offset)
{
	buf[offset] = digits[millis / 100];
	buf[offset + 1] = digits[(millis / 10) % 10];
	buf[offset + 2] = digits[millis  % 10];
}",1,1,main\cpp\cacheddateformat.cpp,CachedDateFormat.millisecondFormat,,false,318,325,millisecondFormat,,,18,"void CachedDateFormat.millisecondFormat (int,LogString,int)"
8046,METHOD,main\cpp\cacheddateformat.cpp:<global>,TYPE_DECL,"void CachedDateFormat::setTimeZone(const TimeZonePtr& timeZone)
{
	m_priv->formatter->setTimeZone(timeZone);
	m_priv->previousTime = std::numeric_limits<log4cxx_time_t>::min();
	m_priv->slotBegin = std::numeric_limits<log4cxx_time_t>::min();
}",1,1,main\cpp\cacheddateformat.cpp,CachedDateFormat.setTimeZone,,false,334,339,setTimeZone,,,19,void CachedDateFormat.setTimeZone (TimeZonePtr)
8086,METHOD,main\cpp\cacheddateformat.cpp:<global>,TYPE_DECL,"void CachedDateFormat::numberFormat(LogString& s, int n, Pool& p) const
{
	m_priv->formatter->numberFormat(s, n, p);
}",1,1,main\cpp\cacheddateformat.cpp,CachedDateFormat.numberFormat,,false,343,346,numberFormat,,,20,"void CachedDateFormat.numberFormat (LogString,int,Pool)"
8102,METHOD,main\cpp\cacheddateformat.cpp:<global>,TYPE_DECL,"int CachedDateFormat::getMaximumCacheValidity(const LogString& pattern)
{
	//
	//   If there are more ""S"" in the pattern than just one ""SSS"" then
	//      (for example, ""HH:mm:ss,SSS SSS""), then set the expiration to
	//      one millisecond which should only perform duplicate request caching.
	//
	const logchar S = 0x53;
	const logchar SSS[] = { 0x53, 0x53, 0x53, 0 };
	size_t firstS = pattern.find(S);
	size_t len = pattern.length();

	//
	//   if there are no S's or
	//      three that start with the first S and no fourth S in the string
	//
	if (firstS == LogString::npos ||
		(len >= firstS + 3 && pattern.compare(firstS, 3, SSS) == 0
			&& (len == firstS + 3 ||
				pattern.find(S, firstS + 3) == LogString::npos)))
	{
		return 1000000;
	}

	return 1000;
}",1,1,main\cpp\cacheddateformat.cpp,CachedDateFormat.getMaximumCacheValidity,,false,356,381,getMaximumCacheValidity,,,21,int CachedDateFormat.getMaximumCacheValidity (LogString)
8180,METHOD,main\cpp\cacheddateformat.cpp:<global>,TYPE_DECL,"bool CachedDateFormat::regionMatches(
	const LogString& target,
	size_t toffset,
	const LogString& other,
	size_t ooffset,
	size_t len)
{
	return target.compare(toffset, len, other, ooffset, len) == 0;
}",1,1,main\cpp\cacheddateformat.cpp,CachedDateFormat.regionMatches,,false,393,401,regionMatches,,,22,"bool CachedDateFormat.regionMatches (LogString,size_t,LogString,size_t,size_t)"
8230,METHOD,main\cpp\charsetdecoder.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\charsetdecoder.cpp,main\cpp\charsetdecoder.cpp:<global>,,false,1,591,<global>,,,1,
8237,METHOD,LOG4CXX_NS.helpers.TrivialCharsetDecoder,TYPE_DECL,"TrivialCharsetDecoder()
		{
		}",3,3,main\cpp\charsetdecoder.cpp,LOG4CXX_NS.helpers.TrivialCharsetDecoder.TrivialCharsetDecoder,,false,236,238,TrivialCharsetDecoder,,,1,ANY LOG4CXX_NS.helpers.TrivialCharsetDecoder.TrivialCharsetDecoder ()
8241,METHOD,LOG4CXX_NS.helpers.TrivialCharsetDecoder,TYPE_DECL,"virtual ~TrivialCharsetDecoder()
		{
		}",3,3,main\cpp\charsetdecoder.cpp,LOG4CXX_NS.helpers.TrivialCharsetDecoder.~TrivialCharsetDecoder,,false,240,242,~TrivialCharsetDecoder,,,2,ANY LOG4CXX_NS.helpers.TrivialCharsetDecoder.~TrivialCharsetDecoder ()
8245,METHOD,LOG4CXX_NS.helpers.TrivialCharsetDecoder,TYPE_DECL,"virtual log4cxx_status_t decode(ByteBuffer& in,
			LogString& out)
		{
			size_t remaining = in.remaining();

			if ( remaining > 0)
			{
				const logchar* src = (const logchar*) (in.data() + in.position());
				size_t count = remaining / sizeof(logchar);
				out.append(src, count);
				in.position(in.position() + remaining);
			}

			return APR_SUCCESS;
		}",3,3,main\cpp\charsetdecoder.cpp,LOG4CXX_NS.helpers.TrivialCharsetDecoder.decode,,false,244,258,decode,,,3,"log4cxx_status_t LOG4CXX_NS.helpers.TrivialCharsetDecoder.decode (ByteBuffer,LogString)"
8302,METHOD,LOG4CXX_NS.helpers.TrivialCharsetDecoder,TYPE_DECL,TrivialCharsetDecoder(const TrivialCharsetDecoder&);,3,53,main\cpp\charsetdecoder.cpp,LOG4CXX_NS.helpers.TrivialCharsetDecoder.TrivialCharsetDecoder,,false,263,263,TrivialCharsetDecoder,,,4,ANY LOG4CXX_NS.helpers.TrivialCharsetDecoder.TrivialCharsetDecoder (TrivialCharsetDecoder)
8307,METHOD,LOG4CXX_NS.helpers.TrivialCharsetDecoder,TYPE_DECL,TrivialCharsetDecoder& operator=(const TrivialCharsetDecoder&);,24,64,main\cpp\charsetdecoder.cpp,LOG4CXX_NS.helpers.TrivialCharsetDecoder.operator =,,false,264,264,operator =,,,5,TrivialCharsetDecoder LOG4CXX_NS.helpers.TrivialCharsetDecoder.operator = (TrivialCharsetDecoder)
8313,METHOD,LOG4CXX_NS.helpers.UTF8CharsetDecoder,TYPE_DECL,"UTF8CharsetDecoder()
		{
		}",3,3,main\cpp\charsetdecoder.cpp,LOG4CXX_NS.helpers.UTF8CharsetDecoder.UTF8CharsetDecoder,,false,278,280,UTF8CharsetDecoder,,,1,ANY LOG4CXX_NS.helpers.UTF8CharsetDecoder.UTF8CharsetDecoder ()
8317,METHOD,LOG4CXX_NS.helpers.UTF8CharsetDecoder,TYPE_DECL,"virtual ~UTF8CharsetDecoder()
		{
		}",3,3,main\cpp\charsetdecoder.cpp,LOG4CXX_NS.helpers.UTF8CharsetDecoder.~UTF8CharsetDecoder,,false,282,284,~UTF8CharsetDecoder,,,2,ANY LOG4CXX_NS.helpers.UTF8CharsetDecoder.~UTF8CharsetDecoder ()
8321,METHOD,LOG4CXX_NS.helpers.UTF8CharsetDecoder,TYPE_DECL,"virtual log4cxx_status_t decode(ByteBuffer& in,
			LogString& out)
		{
			if (in.remaining() > 0)
			{
				std::string tmp(in.current(), in.remaining());
				std::string::const_iterator iter = tmp.begin();

				while (iter != tmp.end())
				{
					unsigned int sv = Transcoder::decode(tmp, iter);

					if (sv == 0xFFFF)
					{
						size_t offset = iter - tmp.begin();
						in.position(in.position() + offset);
						return APR_BADARG;
					}
					else
					{
						Transcoder::encode(sv, out);
					}
				}

				in.position(in.limit());
			}

			return APR_SUCCESS;
		}",3,3,main\cpp\charsetdecoder.cpp,LOG4CXX_NS.helpers.UTF8CharsetDecoder.decode,,false,287,315,decode,,,3,"log4cxx_status_t LOG4CXX_NS.helpers.UTF8CharsetDecoder.decode (ByteBuffer,LogString)"
8413,METHOD,LOG4CXX_NS.helpers.UTF8CharsetDecoder,TYPE_DECL,UTF8CharsetDecoder(const UTF8CharsetDecoder&);,3,47,main\cpp\charsetdecoder.cpp,LOG4CXX_NS.helpers.UTF8CharsetDecoder.UTF8CharsetDecoder,,false,318,318,UTF8CharsetDecoder,,,4,ANY LOG4CXX_NS.helpers.UTF8CharsetDecoder.UTF8CharsetDecoder (UTF8CharsetDecoder)
8418,METHOD,LOG4CXX_NS.helpers.UTF8CharsetDecoder,TYPE_DECL,UTF8CharsetDecoder& operator=(const UTF8CharsetDecoder&);,21,58,main\cpp\charsetdecoder.cpp,LOG4CXX_NS.helpers.UTF8CharsetDecoder.operator =,,false,319,319,operator =,,,5,UTF8CharsetDecoder LOG4CXX_NS.helpers.UTF8CharsetDecoder.operator = (UTF8CharsetDecoder)
8424,METHOD,LOG4CXX_NS.helpers.ISOLatinCharsetDecoder,TYPE_DECL,"ISOLatinCharsetDecoder()
		{
		}",3,3,main\cpp\charsetdecoder.cpp,LOG4CXX_NS.helpers.ISOLatinCharsetDecoder.ISOLatinCharsetDecoder,,false,330,332,ISOLatinCharsetDecoder,,,1,ANY LOG4CXX_NS.helpers.ISOLatinCharsetDecoder.ISOLatinCharsetDecoder ()
8428,METHOD,LOG4CXX_NS.helpers.ISOLatinCharsetDecoder,TYPE_DECL,"virtual ~ISOLatinCharsetDecoder()
		{
		}",3,3,main\cpp\charsetdecoder.cpp,LOG4CXX_NS.helpers.ISOLatinCharsetDecoder.~ISOLatinCharsetDecoder,,false,334,336,~ISOLatinCharsetDecoder,,,2,ANY LOG4CXX_NS.helpers.ISOLatinCharsetDecoder.~ISOLatinCharsetDecoder ()
8432,METHOD,LOG4CXX_NS.helpers.ISOLatinCharsetDecoder,TYPE_DECL,"virtual log4cxx_status_t decode(ByteBuffer& in,
			LogString& out)
		{
			if (in.remaining() > 0)
			{

				const unsigned char* src = (unsigned char*) in.current();
				const unsigned char* srcEnd = src + in.remaining();

				while (src < srcEnd)
				{
					unsigned int sv = *(src++);
					Transcoder::encode(sv, out);
				}

				in.position(in.limit());
			}

			return APR_SUCCESS;
		}",3,3,main\cpp\charsetdecoder.cpp,LOG4CXX_NS.helpers.ISOLatinCharsetDecoder.decode,,false,339,358,decode,,,3,"log4cxx_status_t LOG4CXX_NS.helpers.ISOLatinCharsetDecoder.decode (ByteBuffer,LogString)"
8491,METHOD,LOG4CXX_NS.helpers.ISOLatinCharsetDecoder,TYPE_DECL,ISOLatinCharsetDecoder(const ISOLatinCharsetDecoder&);,3,55,main\cpp\charsetdecoder.cpp,LOG4CXX_NS.helpers.ISOLatinCharsetDecoder.ISOLatinCharsetDecoder,,false,363,363,ISOLatinCharsetDecoder,,,4,ANY LOG4CXX_NS.helpers.ISOLatinCharsetDecoder.ISOLatinCharsetDecoder (ISOLatinCharsetDecoder)
8496,METHOD,LOG4CXX_NS.helpers.ISOLatinCharsetDecoder,TYPE_DECL,ISOLatinCharsetDecoder& operator=(const ISOLatinCharsetDecoder&);,25,66,main\cpp\charsetdecoder.cpp,LOG4CXX_NS.helpers.ISOLatinCharsetDecoder.operator =,,false,364,364,operator =,,,5,ISOLatinCharsetDecoder LOG4CXX_NS.helpers.ISOLatinCharsetDecoder.operator = (ISOLatinCharsetDecoder)
8502,METHOD,LOG4CXX_NS.helpers.USASCIICharsetDecoder,TYPE_DECL,"USASCIICharsetDecoder()
		{
		}",3,3,main\cpp\charsetdecoder.cpp,LOG4CXX_NS.helpers.USASCIICharsetDecoder.USASCIICharsetDecoder,,false,375,377,USASCIICharsetDecoder,,,1,ANY LOG4CXX_NS.helpers.USASCIICharsetDecoder.USASCIICharsetDecoder ()
8506,METHOD,LOG4CXX_NS.helpers.USASCIICharsetDecoder,TYPE_DECL,"virtual ~USASCIICharsetDecoder()
		{
		}",3,3,main\cpp\charsetdecoder.cpp,LOG4CXX_NS.helpers.USASCIICharsetDecoder.~USASCIICharsetDecoder,,false,379,381,~USASCIICharsetDecoder,,,2,ANY LOG4CXX_NS.helpers.USASCIICharsetDecoder.~USASCIICharsetDecoder ()
8510,METHOD,LOG4CXX_NS.helpers.USASCIICharsetDecoder,TYPE_DECL,"virtual log4cxx_status_t decode(ByteBuffer& in,
			LogString& out)
		{
			log4cxx_status_t stat = APR_SUCCESS;

			if (in.remaining() > 0)
			{

				const unsigned char* src = (unsigned char*) in.current();
				const unsigned char* srcEnd = src + in.remaining();

				while (src < srcEnd)
				{
					unsigned char sv = *src;

					if (sv < 0x80)
					{
						src++;
						Transcoder::encode(sv, out);
					}
					else
					{
						stat = APR_BADARG;
						break;
					}
				}

				in.position(src - (const unsigned char*) in.data());
			}

			return stat;
		}",3,3,main\cpp\charsetdecoder.cpp,LOG4CXX_NS.helpers.USASCIICharsetDecoder.decode,,false,385,416,decode,,,3,"log4cxx_status_t LOG4CXX_NS.helpers.USASCIICharsetDecoder.decode (ByteBuffer,LogString)"
8589,METHOD,LOG4CXX_NS.helpers.USASCIICharsetDecoder,TYPE_DECL,USASCIICharsetDecoder(const USASCIICharsetDecoder&);,3,53,main\cpp\charsetdecoder.cpp,LOG4CXX_NS.helpers.USASCIICharsetDecoder.USASCIICharsetDecoder,,false,421,421,USASCIICharsetDecoder,,,4,ANY LOG4CXX_NS.helpers.USASCIICharsetDecoder.USASCIICharsetDecoder (USASCIICharsetDecoder)
8594,METHOD,LOG4CXX_NS.helpers.USASCIICharsetDecoder,TYPE_DECL,USASCIICharsetDecoder& operator=(const USASCIICharsetDecoder&);,24,64,main\cpp\charsetdecoder.cpp,LOG4CXX_NS.helpers.USASCIICharsetDecoder.operator =,,false,422,422,operator =,,,5,USASCIICharsetDecoder LOG4CXX_NS.helpers.USASCIICharsetDecoder.operator = (USASCIICharsetDecoder)
8600,METHOD,LOG4CXX_NS.helpers.LocaleCharsetDecoder,TYPE_DECL,"LocaleCharsetDecoder() : state()
		{
		}",3,3,main\cpp\charsetdecoder.cpp,LOG4CXX_NS.helpers.LocaleCharsetDecoder.LocaleCharsetDecoder,,false,431,433,LocaleCharsetDecoder,,,1,ANY LOG4CXX_NS.helpers.LocaleCharsetDecoder.LocaleCharsetDecoder ()
8604,METHOD,LOG4CXX_NS.helpers.LocaleCharsetDecoder,TYPE_DECL,"log4cxx_status_t decode(ByteBuffer& in, LogString& out) override
		{
			log4cxx_status_t result = APR_SUCCESS;
			const char* p = in.current();
			size_t i = in.position();
			size_t remain = in.limit() - i;
#if !LOG4CXX_CHARSET_EBCDIC
			if (std::mbsinit(&this->state)) // ByteBuffer not partially decoded?
			{
				// Copy single byte characters
				for (; 0 < remain && ((unsigned int) *p) < 0x80; --remain, ++i, p++)
				{
					out.append(1, *p);
				}
			}
#endif
			// Decode characters that may be represented by multiple bytes
			while (0 < remain)
			{
				wchar_t ch = 0;
				size_t n = std::mbrtowc(&ch, p, remain, &this->state);
				if (0 == n) // NULL encountered?
				{
					++i;
					break;
				}
				if (static_cast<std::size_t>(-1) == n) // decoding error?
				{
					result = APR_BADARG;
					break;
				}
				if (static_cast<std::size_t>(-2) == n) // incomplete sequence?
				{
					break;
				}
				Transcoder::encode(static_cast<unsigned int>(ch), out);
				remain -= n;
				i...",3,3,main\cpp\charsetdecoder.cpp,LOG4CXX_NS.helpers.LocaleCharsetDecoder.decode,,false,434,476,decode,,,2,"log4cxx_status_t LOG4CXX_NS.helpers.LocaleCharsetDecoder.decode (ByteBuffer,LogString)"
8752,METHOD,main\cpp\charsetdecoder.cpp:<global>,TYPE_DECL,"CharsetDecoder::CharsetDecoder()
{
}",1,1,main\cpp\charsetdecoder.cpp,CharsetDecoder.CharsetDecoder,,false,489,491,CharsetDecoder,,,4,ANY CharsetDecoder.CharsetDecoder ()
8756,METHOD,main\cpp\charsetdecoder.cpp:<global>,TYPE_DECL,"CharsetDecoder::~CharsetDecoder()
{
}",1,1,main\cpp\charsetdecoder.cpp,CharsetDecoder.~CharsetDecoder,,false,494,496,~CharsetDecoder,,,5,ANY CharsetDecoder.~CharsetDecoder ()
8760,METHOD,main\cpp\charsetdecoder.cpp:<global>,TYPE_DECL,"CharsetDecoder* CharsetDecoder::createDefaultDecoder()
{
#if LOG4CXX_CHARSET_UTF8
	return new UTF8CharsetDecoder();
#elif LOG4CXX_CHARSET_ISO88591 || defined(_WIN32_WCE)
	return new ISOLatinCharsetDecoder();
#elif LOG4CXX_CHARSET_USASCII
	return new USASCIICharsetDecoder();
#elif LOG4CXX_LOGCHAR_IS_WCHAR && LOG4CXX_HAS_MBSRTOWCS
	return new MbstowcsCharsetDecoder();
#else
	return new LocaleCharsetDecoder();
#endif
}",1,1,main\cpp\charsetdecoder.cpp,CharsetDecoder.createDefaultDecoder,,false,498,511,createDefaultDecoder,,,6,CharsetDecoder CharsetDecoder.createDefaultDecoder ()
8767,METHOD,main\cpp\charsetdecoder.cpp:<global>,TYPE_DECL,"CharsetDecoderPtr CharsetDecoder::getDefaultDecoder()
{
	static WideLife<CharsetDecoderPtr> decoder(createDefaultDecoder());

	//
	//  if invoked after static variable destruction
	//     (if logging is called in the destructor of a static object)
	//     then create a new decoder.
	//
	if (decoder.value() == 0)
	{
		return CharsetDecoderPtr( createDefaultDecoder() );
	}

	return decoder;
}",1,1,main\cpp\charsetdecoder.cpp,CharsetDecoder.getDefaultDecoder,,false,513,528,getDefaultDecoder,,,7,CharsetDecoderPtr CharsetDecoder.getDefaultDecoder ()
8787,METHOD,main\cpp\charsetdecoder.cpp:<global>,TYPE_DECL,"CharsetDecoderPtr CharsetDecoder::getUTF8Decoder()
{
	static WideLife<CharsetDecoderPtr> decoder(new UTF8CharsetDecoder());

	//
	//  if invoked after static variable destruction
	//     (if logging is called in the destructor of a static object)
	//     then create a new decoder.
	//
	if (decoder.value() == 0)
	{
		return std::make_shared<UTF8CharsetDecoder>();
	}

	return decoder;
}",1,1,main\cpp\charsetdecoder.cpp,CharsetDecoder.getUTF8Decoder,,false,530,545,getUTF8Decoder,,,8,CharsetDecoderPtr CharsetDecoder.getUTF8Decoder ()
8810,METHOD,main\cpp\charsetdecoder.cpp:<global>,TYPE_DECL,"CharsetDecoderPtr CharsetDecoder::getISOLatinDecoder()
{
	return std::make_shared<ISOLatinCharsetDecoder>();
}",1,1,main\cpp\charsetdecoder.cpp,CharsetDecoder.getISOLatinDecoder,,false,547,550,getISOLatinDecoder,,,9,CharsetDecoderPtr CharsetDecoder.getISOLatinDecoder ()
8819,METHOD,main\cpp\charsetdecoder.cpp:<global>,TYPE_DECL,"CharsetDecoderPtr CharsetDecoder::getDecoder(const LogString& charset)
{
	if (StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR(""UTF-8""), LOG4CXX_STR(""utf-8"")) ||
		StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR(""UTF8""), LOG4CXX_STR(""utf8"")) ||
		StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR(""CP65001""), LOG4CXX_STR(""cp65001"")))
	{
		return std::make_shared<UTF8CharsetDecoder>();
	}
	else if (StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR(""C""), LOG4CXX_STR(""c"")) ||
		charset == LOG4CXX_STR(""646"") ||
		StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR(""US-ASCII""), LOG4CXX_STR(""us-ascii"")) ||
		StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR(""ISO646-US""), LOG4CXX_STR(""iso646-US"")) ||
		StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR(""ANSI_X3.4-1968""), LOG4CXX_STR(""ansi_x3.4-1968"")) ||
		StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR(""CP20127""), LOG4CXX_STR(""cp20127"")))
	{
		return std::make_shared<USASCIICharsetDecoder>();
	}
	else if (StringHelper::equ...",1,1,main\cpp\charsetdecoder.cpp,CharsetDecoder.getDecoder,,false,553,586,getDecoder,,,10,CharsetDecoderPtr CharsetDecoder.getDecoder (LogString)
8983,METHOD,main\cpp\charsetencoder.cpp:<global>,TYPE_DECL,[](const logchar& ch) -> bool { return 0x80 <= (unsigned int)ch; },6,71,main\cpp\charsetencoder.cpp,CharsetEncoder.isTriviallyCopyable.<lambda>0,,false,638,638,<lambda>0,,,1,bool CharsetEncoder.isTriviallyCopyable.<lambda>0 (logchar)
9021,METHOD,main\cpp\charsetencoder.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\charsetencoder.cpp,main\cpp\charsetencoder.cpp:<global>,,false,1,644,<global>,,,1,
9028,METHOD,LOG4CXX_NS.helpers.USASCIICharsetEncoder,TYPE_DECL,"USASCIICharsetEncoder()
		{
		}",3,3,main\cpp\charsetencoder.cpp,LOG4CXX_NS.helpers.USASCIICharsetEncoder.USASCIICharsetEncoder,,false,221,223,USASCIICharsetEncoder,,,1,ANY LOG4CXX_NS.helpers.USASCIICharsetEncoder.USASCIICharsetEncoder ()
9032,METHOD,LOG4CXX_NS.helpers.USASCIICharsetEncoder,TYPE_DECL,"virtual log4cxx_status_t encode(const LogString& in,
			LogString::const_iterator& iter,
			ByteBuffer& out)
		{
			log4cxx_status_t stat = APR_SUCCESS;

			if (iter != in.end())
			{
				while (out.remaining() > 0 && iter != in.end())
				{
					LogString::const_iterator prev(iter);
					unsigned int sv = Transcoder::decode(in, iter);

					if (sv <= 0x7F)
					{
						out.put((char) sv);
					}
					else
					{
						iter = prev;
						stat = APR_BADARG;
						break;
					}
				}
			}

			return stat;
		}",3,3,main\cpp\charsetencoder.cpp,LOG4CXX_NS.helpers.USASCIICharsetEncoder.encode,,false,225,252,encode,,,2,"log4cxx_status_t LOG4CXX_NS.helpers.USASCIICharsetEncoder.encode (LogString,ANY,ByteBuffer)"
9101,METHOD,LOG4CXX_NS.helpers.USASCIICharsetEncoder,TYPE_DECL,USASCIICharsetEncoder(const USASCIICharsetEncoder&);,3,53,main\cpp\charsetencoder.cpp,LOG4CXX_NS.helpers.USASCIICharsetEncoder.USASCIICharsetEncoder,,false,255,255,USASCIICharsetEncoder,,,3,ANY LOG4CXX_NS.helpers.USASCIICharsetEncoder.USASCIICharsetEncoder (USASCIICharsetEncoder)
9106,METHOD,LOG4CXX_NS.helpers.USASCIICharsetEncoder,TYPE_DECL,USASCIICharsetEncoder& operator=(const USASCIICharsetEncoder&);,24,64,main\cpp\charsetencoder.cpp,LOG4CXX_NS.helpers.USASCIICharsetEncoder.operator =,,false,256,256,operator =,,,4,USASCIICharsetEncoder LOG4CXX_NS.helpers.USASCIICharsetEncoder.operator = (USASCIICharsetEncoder)
9112,METHOD,LOG4CXX_NS.helpers.ISOLatinCharsetEncoder,TYPE_DECL,"ISOLatinCharsetEncoder()
		{
		}",3,3,main\cpp\charsetencoder.cpp,LOG4CXX_NS.helpers.ISOLatinCharsetEncoder.ISOLatinCharsetEncoder,,false,265,267,ISOLatinCharsetEncoder,,,1,ANY LOG4CXX_NS.helpers.ISOLatinCharsetEncoder.ISOLatinCharsetEncoder ()
9116,METHOD,LOG4CXX_NS.helpers.ISOLatinCharsetEncoder,TYPE_DECL,"virtual log4cxx_status_t encode(const LogString& in,
			LogString::const_iterator& iter,
			ByteBuffer& out)
		{
			log4cxx_status_t stat = APR_SUCCESS;

			if (iter != in.end())
			{
				while (out.remaining() > 0 && iter != in.end())
				{
					LogString::const_iterator prev(iter);
					unsigned int sv = Transcoder::decode(in, iter);

					if (sv <= 0xFF)
					{
						out.put((char) sv);
					}
					else
					{
						iter = prev;
						stat = APR_BADARG;
						break;
					}
				}
			}

			return stat;
		}",3,3,main\cpp\charsetencoder.cpp,LOG4CXX_NS.helpers.ISOLatinCharsetEncoder.encode,,false,269,296,encode,,,2,"log4cxx_status_t LOG4CXX_NS.helpers.ISOLatinCharsetEncoder.encode (LogString,ANY,ByteBuffer)"
9185,METHOD,LOG4CXX_NS.helpers.ISOLatinCharsetEncoder,TYPE_DECL,ISOLatinCharsetEncoder(const ISOLatinCharsetEncoder&);,3,55,main\cpp\charsetencoder.cpp,LOG4CXX_NS.helpers.ISOLatinCharsetEncoder.ISOLatinCharsetEncoder,,false,299,299,ISOLatinCharsetEncoder,,,3,ANY LOG4CXX_NS.helpers.ISOLatinCharsetEncoder.ISOLatinCharsetEncoder (ISOLatinCharsetEncoder)
9190,METHOD,LOG4CXX_NS.helpers.ISOLatinCharsetEncoder,TYPE_DECL,ISOLatinCharsetEncoder& operator=(const ISOLatinCharsetEncoder&);,25,66,main\cpp\charsetencoder.cpp,LOG4CXX_NS.helpers.ISOLatinCharsetEncoder.operator =,,false,300,300,operator =,,,4,ISOLatinCharsetEncoder LOG4CXX_NS.helpers.ISOLatinCharsetEncoder.operator = (ISOLatinCharsetEncoder)
9196,METHOD,LOG4CXX_NS.helpers.TrivialCharsetEncoder,TYPE_DECL,"TrivialCharsetEncoder()
		{
		}",3,3,main\cpp\charsetencoder.cpp,LOG4CXX_NS.helpers.TrivialCharsetEncoder.TrivialCharsetEncoder,,false,309,311,TrivialCharsetEncoder,,,1,ANY LOG4CXX_NS.helpers.TrivialCharsetEncoder.TrivialCharsetEncoder ()
9200,METHOD,LOG4CXX_NS.helpers.TrivialCharsetEncoder,TYPE_DECL,"virtual log4cxx_status_t encode(const LogString& in,
			LogString::const_iterator& iter,
			ByteBuffer& out)
		{
			if (iter != in.end())
			{
				size_t requested = in.length() - (iter - in.begin());

				if (requested > out.remaining() / sizeof(logchar))
				{
					requested = out.remaining() / sizeof(logchar);
				}

				memcpy(out.current(),
					(const char*) in.data() + (iter - in.begin()),
					requested * sizeof(logchar));
				iter += requested;
				out.position(out.position() + requested * sizeof(logchar));
			}

			return APR_SUCCESS;
		}",3,3,main\cpp\charsetencoder.cpp,LOG4CXX_NS.helpers.TrivialCharsetEncoder.encode,,false,314,335,encode,,,2,"log4cxx_status_t LOG4CXX_NS.helpers.TrivialCharsetEncoder.encode (LogString,ANY,ByteBuffer)"
9289,METHOD,LOG4CXX_NS.helpers.TrivialCharsetEncoder,TYPE_DECL,TrivialCharsetEncoder(const TrivialCharsetEncoder&);,3,53,main\cpp\charsetencoder.cpp,LOG4CXX_NS.helpers.TrivialCharsetEncoder.TrivialCharsetEncoder,,false,338,338,TrivialCharsetEncoder,,,3,ANY LOG4CXX_NS.helpers.TrivialCharsetEncoder.TrivialCharsetEncoder (TrivialCharsetEncoder)
9294,METHOD,LOG4CXX_NS.helpers.TrivialCharsetEncoder,TYPE_DECL,TrivialCharsetEncoder& operator=(const TrivialCharsetEncoder&);,24,64,main\cpp\charsetencoder.cpp,LOG4CXX_NS.helpers.TrivialCharsetEncoder.operator =,,false,339,339,operator =,,,4,TrivialCharsetEncoder LOG4CXX_NS.helpers.TrivialCharsetEncoder.operator = (TrivialCharsetEncoder)
9300,METHOD,LOG4CXX_NS.helpers.UTF8CharsetEncoder,TYPE_DECL,"UTF8CharsetEncoder()
		{
		}",3,3,main\cpp\charsetencoder.cpp,LOG4CXX_NS.helpers.UTF8CharsetEncoder.UTF8CharsetEncoder,,false,351,353,UTF8CharsetEncoder,,,1,ANY LOG4CXX_NS.helpers.UTF8CharsetEncoder.UTF8CharsetEncoder ()
9304,METHOD,LOG4CXX_NS.helpers.UTF8CharsetEncoder,TYPE_DECL,"virtual log4cxx_status_t encode(const LogString& in,
			LogString::const_iterator& iter,
			ByteBuffer& out)
		{
			while (iter != in.end() && out.remaining() >= 8)
			{
				unsigned int sv = Transcoder::decode(in, iter);

				if (sv == 0xFFFF)
				{
					return APR_BADARG;
				}

				Transcoder::encodeUTF8(sv, out);
			}

			return APR_SUCCESS;
		}",3,3,main\cpp\charsetencoder.cpp,LOG4CXX_NS.helpers.UTF8CharsetEncoder.encode,,false,355,372,encode,,,2,"log4cxx_status_t LOG4CXX_NS.helpers.UTF8CharsetEncoder.encode (LogString,ANY,ByteBuffer)"
9350,METHOD,LOG4CXX_NS.helpers.UTF8CharsetEncoder,TYPE_DECL,UTF8CharsetEncoder(const UTF8CharsetEncoder&);,3,47,main\cpp\charsetencoder.cpp,LOG4CXX_NS.helpers.UTF8CharsetEncoder.UTF8CharsetEncoder,,false,375,375,UTF8CharsetEncoder,,,3,ANY LOG4CXX_NS.helpers.UTF8CharsetEncoder.UTF8CharsetEncoder (UTF8CharsetEncoder)
9355,METHOD,LOG4CXX_NS.helpers.UTF8CharsetEncoder,TYPE_DECL,UTF8CharsetEncoder& operator=(const UTF8CharsetEncoder&);,21,58,main\cpp\charsetencoder.cpp,LOG4CXX_NS.helpers.UTF8CharsetEncoder.operator =,,false,376,376,operator =,,,4,UTF8CharsetEncoder LOG4CXX_NS.helpers.UTF8CharsetEncoder.operator = (UTF8CharsetEncoder)
9361,METHOD,LOG4CXX_NS.helpers.UTF16BECharsetEncoder,TYPE_DECL,"UTF16BECharsetEncoder()
		{
		}",3,3,main\cpp\charsetencoder.cpp,LOG4CXX_NS.helpers.UTF16BECharsetEncoder.UTF16BECharsetEncoder,,false,386,388,UTF16BECharsetEncoder,,,1,ANY LOG4CXX_NS.helpers.UTF16BECharsetEncoder.UTF16BECharsetEncoder ()
9365,METHOD,LOG4CXX_NS.helpers.UTF16BECharsetEncoder,TYPE_DECL,"virtual log4cxx_status_t encode(const LogString& in,
			LogString::const_iterator& iter,
			ByteBuffer& out)
		{
			while (iter != in.end() && out.remaining() >= 4)
			{
				unsigned int sv = Transcoder::decode(in, iter);

				if (sv == 0xFFFF)
				{
					return APR_BADARG;
				}

				Transcoder::encodeUTF16BE(sv, out);
			}

			return APR_SUCCESS;
		}",3,3,main\cpp\charsetencoder.cpp,LOG4CXX_NS.helpers.UTF16BECharsetEncoder.encode,,false,390,407,encode,,,2,"log4cxx_status_t LOG4CXX_NS.helpers.UTF16BECharsetEncoder.encode (LogString,ANY,ByteBuffer)"
9411,METHOD,LOG4CXX_NS.helpers.UTF16BECharsetEncoder,TYPE_DECL,UTF16BECharsetEncoder(const UTF16BECharsetEncoder&);,3,53,main\cpp\charsetencoder.cpp,LOG4CXX_NS.helpers.UTF16BECharsetEncoder.UTF16BECharsetEncoder,,false,410,410,UTF16BECharsetEncoder,,,3,ANY LOG4CXX_NS.helpers.UTF16BECharsetEncoder.UTF16BECharsetEncoder (UTF16BECharsetEncoder)
9416,METHOD,LOG4CXX_NS.helpers.UTF16BECharsetEncoder,TYPE_DECL,UTF16BECharsetEncoder& operator=(const UTF16BECharsetEncoder&);,24,64,main\cpp\charsetencoder.cpp,LOG4CXX_NS.helpers.UTF16BECharsetEncoder.operator =,,false,411,411,operator =,,,4,UTF16BECharsetEncoder LOG4CXX_NS.helpers.UTF16BECharsetEncoder.operator = (UTF16BECharsetEncoder)
9422,METHOD,LOG4CXX_NS.helpers.UTF16LECharsetEncoder,TYPE_DECL,"UTF16LECharsetEncoder()
		{
		}",3,3,main\cpp\charsetencoder.cpp,LOG4CXX_NS.helpers.UTF16LECharsetEncoder.UTF16LECharsetEncoder,,false,420,422,UTF16LECharsetEncoder,,,1,ANY LOG4CXX_NS.helpers.UTF16LECharsetEncoder.UTF16LECharsetEncoder ()
9426,METHOD,LOG4CXX_NS.helpers.UTF16LECharsetEncoder,TYPE_DECL,"virtual log4cxx_status_t encode(const LogString& in,
			LogString::const_iterator& iter,
			ByteBuffer& out)
		{
			while (iter != in.end() && out.remaining() >= 4)
			{
				unsigned int sv = Transcoder::decode(in, iter);

				if (sv == 0xFFFF)
				{
					return APR_BADARG;
				}

				Transcoder::encodeUTF16LE(sv, out);
			}

			return APR_SUCCESS;
		}",3,3,main\cpp\charsetencoder.cpp,LOG4CXX_NS.helpers.UTF16LECharsetEncoder.encode,,false,425,442,encode,,,2,"log4cxx_status_t LOG4CXX_NS.helpers.UTF16LECharsetEncoder.encode (LogString,ANY,ByteBuffer)"
9472,METHOD,LOG4CXX_NS.helpers.UTF16LECharsetEncoder,TYPE_DECL,UTF16LECharsetEncoder(const UTF16LECharsetEncoder&);,3,53,main\cpp\charsetencoder.cpp,LOG4CXX_NS.helpers.UTF16LECharsetEncoder.UTF16LECharsetEncoder,,false,444,444,UTF16LECharsetEncoder,,,3,ANY LOG4CXX_NS.helpers.UTF16LECharsetEncoder.UTF16LECharsetEncoder (UTF16LECharsetEncoder)
9477,METHOD,LOG4CXX_NS.helpers.UTF16LECharsetEncoder,TYPE_DECL,UTF16LECharsetEncoder& operator=(const UTF16LECharsetEncoder&);,24,64,main\cpp\charsetencoder.cpp,LOG4CXX_NS.helpers.UTF16LECharsetEncoder.operator =,,false,445,445,operator =,,,4,UTF16LECharsetEncoder LOG4CXX_NS.helpers.UTF16LECharsetEncoder.operator = (UTF16LECharsetEncoder)
9483,METHOD,LOG4CXX_NS.helpers.LocaleCharsetEncoder,TYPE_DECL,"LocaleCharsetEncoder() : state()
		{
		}",3,3,main\cpp\charsetencoder.cpp,LOG4CXX_NS.helpers.LocaleCharsetEncoder.LocaleCharsetEncoder,,false,454,456,LocaleCharsetEncoder,,,1,ANY LOG4CXX_NS.helpers.LocaleCharsetEncoder.LocaleCharsetEncoder ()
9487,METHOD,LOG4CXX_NS.helpers.LocaleCharsetEncoder,TYPE_DECL,"log4cxx_status_t encode
			( const LogString&           in
			, LogString::const_iterator& iter
			, ByteBuffer&                out
			) override
		{
			log4cxx_status_t result = APR_SUCCESS;
#if !LOG4CXX_CHARSET_EBCDIC
			char* current = out.current();
			size_t remain = out.remaining();
			if (std::mbsinit(&this->state)) // ByteBuffer not partially encoded?
			{
				// Copy single byte characters
				for (;
					iter != in.end() && ((unsigned int) *iter) < 0x80 && 0 < remain;
					iter++, remain--, current++)
				{
					*current = *iter;
				}
			}
#endif
			// Encode characters that may require multiple bytes
			while (iter != in.end() && MB_CUR_MAX <= remain)
			{
				auto ch = Transcoder::decode(in, iter);
				auto n = std::wcrtomb(current, ch, &this->state);
				if (static_cast<std::size_t>(-1) == n) // not a valid wide character?
				{
					result = APR_BADARG;
					break;
				}
				remain -= n;
				current += n;
			}
			out.position(current - out.data());
			return result;
		}",3,3,main\cpp\charsetencoder.cpp,LOG4CXX_NS.helpers.LocaleCharsetEncoder.encode,,false,457,493,encode,,,2,"log4cxx_status_t LOG4CXX_NS.helpers.LocaleCharsetEncoder.encode (LogString,ANY,ByteBuffer)"
9619,METHOD,main\cpp\charsetencoder.cpp:<global>,TYPE_DECL,"CharsetEncoder::CharsetEncoder()
{
}",1,1,main\cpp\charsetencoder.cpp,CharsetEncoder.CharsetEncoder,,false,506,508,CharsetEncoder,,,4,ANY CharsetEncoder.CharsetEncoder ()
9623,METHOD,main\cpp\charsetencoder.cpp:<global>,TYPE_DECL,"CharsetEncoder::~CharsetEncoder()
{
}",1,1,main\cpp\charsetencoder.cpp,CharsetEncoder.~CharsetEncoder,,false,510,512,~CharsetEncoder,,,5,ANY CharsetEncoder.~CharsetEncoder ()
9627,METHOD,main\cpp\charsetencoder.cpp:<global>,TYPE_DECL,"CharsetEncoderPtr CharsetEncoder::getDefaultEncoder()
{
	static WideLife<CharsetEncoderPtr> encoder(createDefaultEncoder());

	//
	//  if invoked after static variable destruction
	//     (if logging is called in the destructor of a static object)
	//     then create a new decoder.
	//
	if (encoder.value() == 0)
	{
		return CharsetEncoderPtr( createDefaultEncoder() );
	}

	return encoder;
}",1,1,main\cpp\charsetencoder.cpp,CharsetEncoder.getDefaultEncoder,,false,514,529,getDefaultEncoder,,,6,CharsetEncoderPtr CharsetEncoder.getDefaultEncoder ()
9647,METHOD,main\cpp\charsetencoder.cpp:<global>,TYPE_DECL,"CharsetEncoder* CharsetEncoder::createDefaultEncoder()
{
#if LOG4CXX_CHARSET_UTF8
	return new UTF8CharsetEncoder();
#elif LOG4CXX_CHARSET_ISO88591
	return new ISOLatinCharsetEncoder();
#elif LOG4CXX_CHARSET_USASCII
	return new USASCIICharsetEncoder();
#elif LOG4CXX_LOGCHAR_IS_WCHAR && LOG4CXX_HAS_WCSTOMBS
	return new WcstombsCharsetEncoder();
#else
	return new LocaleCharsetEncoder();
#endif
}",1,1,main\cpp\charsetencoder.cpp,CharsetEncoder.createDefaultEncoder,,false,531,544,createDefaultEncoder,,,7,CharsetEncoder CharsetEncoder.createDefaultEncoder ()
9654,METHOD,main\cpp\charsetencoder.cpp:<global>,TYPE_DECL,"CharsetEncoderPtr CharsetEncoder::getUTF8Encoder()
{
	return std::make_shared<UTF8CharsetEncoder>();
}",1,1,main\cpp\charsetencoder.cpp,CharsetEncoder.getUTF8Encoder,,false,547,550,getUTF8Encoder,,,8,CharsetEncoderPtr CharsetEncoder.getUTF8Encoder ()
9663,METHOD,main\cpp\charsetencoder.cpp:<global>,TYPE_DECL,"CharsetEncoderPtr CharsetEncoder::getEncoder(const LogString& charset)
{
	if (StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR(""UTF-8""), LOG4CXX_STR(""utf-8""))
		|| StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR(""CP65001""), LOG4CXX_STR(""cp65001"")))
	{
		return std::make_shared<UTF8CharsetEncoder>();
	}
	else if (StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR(""C""), LOG4CXX_STR(""c"")) ||
		charset == LOG4CXX_STR(""646"") ||
		StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR(""US-ASCII""), LOG4CXX_STR(""us-ascii"")) ||
		StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR(""ISO646-US""), LOG4CXX_STR(""iso646-US"")) ||
		StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR(""ANSI_X3.4-1968""), LOG4CXX_STR(""ansi_x3.4-1968"")) ||
		StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR(""CP20127""), LOG4CXX_STR(""cp20127"")))
	{
		return std::make_shared<USASCIICharsetEncoder>();
	}
	else if (StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR(""ISO-8859-1""), LOG4CXX_STR(""iso-8859-1"")) ||
		Strin...",1,1,main\cpp\charsetencoder.cpp,CharsetEncoder.getEncoder,,false,554,596,getEncoder,,,9,CharsetEncoderPtr CharsetEncoder.getEncoder (LogString)
9872,METHOD,main\cpp\charsetencoder.cpp:<global>,TYPE_DECL,"void CharsetEncoder::reset()
{
}",1,1,main\cpp\charsetencoder.cpp,CharsetEncoder.reset,,false,599,601,reset,,,10,void CharsetEncoder.reset ()
9876,METHOD,main\cpp\charsetencoder.cpp:<global>,TYPE_DECL,"void CharsetEncoder::flush(ByteBuffer& /* out */ )
{
}",1,1,main\cpp\charsetencoder.cpp,CharsetEncoder.flush,,false,603,605,flush,,,11,void CharsetEncoder.flush (ByteBuffer)
9881,METHOD,main\cpp\charsetencoder.cpp:<global>,TYPE_DECL,"void CharsetEncoder::encode(CharsetEncoderPtr& enc,
	const LogString& src,
	LogString::const_iterator& iter,
	ByteBuffer& dst)
{
	log4cxx_status_t stat = enc->encode(src, iter, dst);

	if (stat != APR_SUCCESS && iter != src.end())
	{
#if LOG4CXX_LOGCHAR_IS_WCHAR || LOG4CXX_LOGCHAR_IS_UNICHAR
		iter++;
#elif LOG4CXX_LOGCHAR_IS_UTF8

		//  advance past this character and all continuation characters
		while ((*(++iter) & 0xC0) == 0x80);

#else
#error logchar is unrecognized
#endif
		dst.put(Transcoder::LOSSCHAR);
	}
}",1,1,main\cpp\charsetencoder.cpp,CharsetEncoder.encode,,false,608,629,encode,,,12,"void CharsetEncoder.encode (CharsetEncoderPtr,LogString,ANY,ByteBuffer)"
9918,METHOD,main\cpp\charsetencoder.cpp:<global>,TYPE_DECL,"bool CharsetEncoder::isTriviallyCopyable(const LogString& src, const CharsetEncoderPtr& enc)
{
	bool result;
#if !LOG4CXX_CHARSET_EBCDIC
	if (dynamic_cast<LocaleCharsetEncoder*>(enc.get()))
	{
		result = src.end() == std::find_if(src.begin(), src.end()
			, [](const logchar& ch) -> bool { return 0x80 <= (unsigned int)ch; });
	}
	else
#endif
		result = !!dynamic_cast<TrivialCharsetEncoder*>(enc.get());
	return result;
}",1,1,main\cpp\charsetencoder.cpp,CharsetEncoder.isTriviallyCopyable,,false,631,644,isTriviallyCopyable,,,13,"bool CharsetEncoder.isTriviallyCopyable (LogString,CharsetEncoderPtr)"
10048,METHOD,main\cpp\class.cpp:<global>,TYPE_DECL,<global>,1,2,main\cpp\class.cpp,main\cpp\class.cpp:<global>,,false,1,209,<global>,,,1,
10051,METHOD,main\cpp\class.cpp:<global>,TYPE_DECL,"uint32_t libraryVersion()
{
	// This function defined in log4cxx.h
	return LOG4CXX_VERSION;
}",1,1,main\cpp\class.cpp,LOG4CXX_NS.libraryVersion,,false,79,83,libraryVersion,,,1,uint32_t LOG4CXX_NS.libraryVersion ()
10058,METHOD,main\cpp\class.cpp:<global>,TYPE_DECL,"uint32_t libraryVersion()
{
	return  LOG4CXX_NS::libraryVersion();
}",16,1,main\cpp\class.cpp,libraryVersion,,false,87,90,libraryVersion,,,3,uint32_t libraryVersion ()
10067,METHOD,main\cpp\class.cpp:<global>,TYPE_DECL,"Class::Class()
{
}",1,1,main\cpp\class.cpp,Class.Class,,false,93,95,Class,,,4,ANY Class.Class ()
10071,METHOD,main\cpp\class.cpp:<global>,TYPE_DECL,"Class::~Class()
{
}",1,1,main\cpp\class.cpp,Class.~Class,,false,97,99,~Class,,,5,ANY Class.~Class ()
10075,METHOD,main\cpp\class.cpp:<global>,TYPE_DECL,"LogString Class::toString() const
{
	return getName();
}",1,1,main\cpp\class.cpp,Class.toString,,false,101,104,toString,,,6,LogString Class.toString ()
10081,METHOD,main\cpp\class.cpp:<global>,TYPE_DECL,"Object* Class::newInstance() const
{
	throw InstantiationException(LOG4CXX_STR(""Cannot create new instances of Class.""));
#if LOG4CXX_RETURN_AFTER_THROW
	return 0;
#endif
}",1,1,main\cpp\class.cpp,Class.newInstance,,false,106,112,newInstance,,,7,Object Class.newInstance ()
10089,METHOD,main\cpp\class.cpp:<global>,TYPE_DECL,"Class::ClassMap& Class::getRegistry()
{
	static WideLife<ClassMap> registry;
	return registry;
}",1,1,main\cpp\class.cpp,Class.getRegistry,,false,116,120,getRegistry,,,8,ClassMap Class.getRegistry ()
10096,METHOD,main\cpp\class.cpp:<global>,TYPE_DECL,"const Class& Class::forName(const LogString& className)
{
	LogString lowerName(StringHelper::toLowerCase(className));
	//
	//  check registry using full class name
	//
	const Class* clazz = getRegistry()[lowerName];

	if (clazz == 0)
	{
		LogString::size_type pos = className.find_last_of(LOG4CXX_STR("".$""));

		if (pos != LogString::npos)
		{
			LogString terminalName(lowerName, pos + 1, LogString::npos);
			clazz = getRegistry()[terminalName];

			if (clazz == 0)
			{
				registerClasses();
				clazz = getRegistry()[lowerName];

				if (clazz == 0)
				{
					clazz = getRegistry()[terminalName];
				}
			}
		}
		else
		{
			registerClasses();
			clazz = getRegistry()[lowerName];
		}
	}

	if (clazz == 0)
	{
		throw ClassNotFoundException(className);
	}

	return *clazz;
}",1,1,main\cpp\class.cpp,Class.forName,,false,122,163,forName,,,9,Class Class.forName (LogString)
10189,METHOD,main\cpp\class.cpp:<global>,TYPE_DECL,"bool Class::registerClass(const Class& newClass)
{
	getRegistry()[StringHelper::toLowerCase(newClass.getName())] = &newClass;
	return true;
}",1,1,main\cpp\class.cpp,Class.registerClass,,false,165,169,registerClass,,,10,bool Class.registerClass (Class)
10209,METHOD,main\cpp\class.cpp:<global>,TYPE_DECL,"void Class::registerClasses()
{
	AsyncAppender::registerClass();
	ConsoleAppender::registerClass();
	FileAppender::registerClass();
	LOG4CXX_NS::db::ODBCAppender::registerClass();
#if (defined(WIN32) || defined(_WIN32))
#if !defined(_WIN32_WCE)
	LOG4CXX_NS::nt::NTEventLogAppender::registerClass();
#endif
	LOG4CXX_NS::nt::OutputDebugStringAppender::registerClass();
#endif
	SMTPAppender::registerClass();
	JSONLayout::registerClass();
	HTMLLayout::registerClass();
	PatternLayout::registerClass();
	SimpleLayout::registerClass();
	XMLLayout::registerClass();
	LevelMatchFilter::registerClass();
	LevelRangeFilter::registerClass();
	StringMatchFilter::registerClass();
	LocationInfoFilter::registerClass();
	LOG4CXX_NS::rolling::RollingFileAppender::registerClass();
	LOG4CXX_NS::rolling::SizeBasedTriggeringPolicy::registerClass();
	LOG4CXX_NS::rolling::TimeBasedRollingPolicy::registerClass();
	LOG4CXX_NS::rolling::ManualTriggeringPolicy::registerClass();
	LOG4CXX_NS::rolling::FixedWindowRolli...",1,1,main\cpp\class.cpp,Class.registerClasses,,false,171,209,registerClasses,,,11,void Class.registerClasses ()
10346,METHOD,main\cpp\classnamepatternconverter.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\classnamepatternconverter.cpp,main\cpp\classnamepatternconverter.cpp:<global>,,false,1,57,<global>,,,1,
10350,METHOD,main\cpp\classnamepatternconverter.cpp:<global>,TYPE_DECL,"ClassNamePatternConverter::ClassNamePatternConverter(
	const std::vector<LogString>& options) :
	NamePatternConverter(LOG4CXX_STR(""Class Name""),
		LOG4CXX_STR(""class name""), options)
{
}",1,1,main\cpp\classnamepatternconverter.cpp,ClassNamePatternConverter.ClassNamePatternConverter,,false,30,35,ClassNamePatternConverter,,,3,ANY ClassNamePatternConverter.ClassNamePatternConverter (ANY)
10355,METHOD,main\cpp\classnamepatternconverter.cpp:<global>,TYPE_DECL,"PatternConverterPtr ClassNamePatternConverter::newInstance(
	const std::vector<LogString>& options)
{
	if (options.size() == 0)
	{
		static WideLife<PatternConverterPtr> def = std::make_shared<ClassNamePatternConverter>(options);
		return def;
	}

	return std::make_shared<ClassNamePatternConverter>(options);
}",1,1,main\cpp\classnamepatternconverter.cpp,ClassNamePatternConverter.newInstance,,false,37,47,newInstance,,,4,PatternConverterPtr ClassNamePatternConverter.newInstance (ANY)
10388,METHOD,main\cpp\classnamepatternconverter.cpp:<global>,TYPE_DECL,"void ClassNamePatternConverter::format(
	const LoggingEventPtr& event,
	LogString& toAppendTo,
	Pool& /* p */) const
{
	int initialLength = (int)toAppendTo.length();
	append(toAppendTo, event->getLocationInformation().getClassName());
	abbreviate(initialLength, toAppendTo);
}",1,1,main\cpp\classnamepatternconverter.cpp,ClassNamePatternConverter.format,,false,49,57,format,,,5,"void ClassNamePatternConverter.format (LoggingEventPtr,LogString,Pool)"
10425,METHOD,main\cpp\classregistration.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\classregistration.cpp,main\cpp\classregistration.cpp:<global>,,false,1,28,<global>,,,1,
10427,METHOD,main\cpp\classregistration.cpp:<global>,TYPE_DECL,"ClassRegistration::ClassRegistration(ClassAccessor accessor)
{
	Class::registerClass((*accessor)());
}",1,1,main\cpp\classregistration.cpp,ClassRegistration.ClassRegistration,,false,24,27,ClassRegistration,,,1,ANY ClassRegistration.ClassRegistration (ClassAccessor)
10452,METHOD,main\cpp\colorendpatternconverter.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\colorendpatternconverter.cpp,main\cpp\colorendpatternconverter.cpp:<global>,,false,1,53,<global>,,,1,
10456,METHOD,main\cpp\colorendpatternconverter.cpp:<global>,TYPE_DECL,"ColorEndPatternConverter::ColorEndPatternConverter() :
	LoggingEventPatternConverter(LOG4CXX_STR(""Color End""),
		LOG4CXX_STR(""colorEnd""))
{
}",1,1,main\cpp\colorendpatternconverter.cpp,ColorEndPatternConverter.ColorEndPatternConverter,,false,31,35,ColorEndPatternConverter,,,3,ANY ColorEndPatternConverter.ColorEndPatternConverter ()
10460,METHOD,main\cpp\colorendpatternconverter.cpp:<global>,TYPE_DECL,"PatternConverterPtr ColorEndPatternConverter::newInstance(
	const std::vector<LogString>& /* options */)
{
	static WideLife<PatternConverterPtr> instance = std::make_shared<ColorEndPatternConverter>();
	return instance;
}",1,1,main\cpp\colorendpatternconverter.cpp,ColorEndPatternConverter.newInstance,,false,37,42,newInstance,,,4,PatternConverterPtr ColorEndPatternConverter.newInstance (ANY)
10474,METHOD,main\cpp\colorendpatternconverter.cpp:<global>,TYPE_DECL,"void ColorEndPatternConverter::format(
	const LoggingEventPtr& event,
	LogString& toAppendTo,
	Pool& p) const
{

	// Reset all colors on the output(code 0)
	// Code 39 would be to reset colors only
	toAppendTo.append(LOG4CXX_STR(""\x1B[0m""));
}",1,1,main\cpp\colorendpatternconverter.cpp,ColorEndPatternConverter.format,,false,44,53,format,,,5,"void ColorEndPatternConverter.format (LoggingEventPtr,LogString,Pool)"
10502,METHOD,main\cpp\colorstartpatternconverter.cpp:<global>,TYPE_DECL,<global>,1,21,main\cpp\colorstartpatternconverter.cpp,main\cpp\colorstartpatternconverter.cpp:<global>,,false,1,277,<global>,,,1,
10506,METHOD,main\cpp\colorstartpatternconverter.cpp:<global>,TYPE_DECL,"static LogString colorToANSISequence(const LogString& color, bool isForeground, Pool& pool){
	int numberToConvert = 0;

	if(StringHelper::equalsIgnoreCase(color, LOG4CXX_STR(""BLACK""), LOG4CXX_STR(""black""))){
		numberToConvert = 30;
	}else if(StringHelper::equalsIgnoreCase(color, LOG4CXX_STR(""RED""), LOG4CXX_STR(""red""))){
		numberToConvert = 31;
	}else if(StringHelper::equalsIgnoreCase(color, LOG4CXX_STR(""GREEN""), LOG4CXX_STR(""green""))){
		numberToConvert = 32;
	}else if(StringHelper::equalsIgnoreCase(color, LOG4CXX_STR(""YELLOW""), LOG4CXX_STR(""yellow""))){
		numberToConvert = 33;
	}else if(StringHelper::equalsIgnoreCase(color, LOG4CXX_STR(""BLUE""), LOG4CXX_STR(""blue""))){
		numberToConvert = 34;
	}else if(StringHelper::equalsIgnoreCase(color, LOG4CXX_STR(""MAGENTA""), LOG4CXX_STR(""magenta""))){
		numberToConvert = 35;
	}else if(StringHelper::equalsIgnoreCase(color, LOG4CXX_STR(""CYAN""), LOG4CXX_STR(""cyan""))){
		numberToConvert = 36;
	}else if(StringHelper::equalsIgnoreCase(color, LOG4CXX_STR...",1,1,main\cpp\colorstartpatternconverter.cpp,colorToANSISequence,,false,34,64,colorToANSISequence,,,3,"LogString colorToANSISequence (LogString,bool,Pool)"
10669,METHOD,main\cpp\colorstartpatternconverter.cpp:<global>,TYPE_DECL,"static LogString graphicsModeToANSISequence(const LogString& graphicsMode, Pool& pool){
	int numberToConvert = 0;

	if(StringHelper::equalsIgnoreCase(graphicsMode, LOG4CXX_STR(""BOLD""), LOG4CXX_STR(""bold""))){
		numberToConvert = 1;
	}else if(StringHelper::equalsIgnoreCase(graphicsMode, LOG4CXX_STR(""DIM""), LOG4CXX_STR(""dim""))){
		numberToConvert = 2;
	}else if(StringHelper::equalsIgnoreCase(graphicsMode, LOG4CXX_STR(""ITALIC""), LOG4CXX_STR(""italic""))){
		numberToConvert = 3;
	}else if(StringHelper::equalsIgnoreCase(graphicsMode, LOG4CXX_STR(""UNDERLINE""), LOG4CXX_STR(""underline""))){
		numberToConvert = 4;
	}else if(StringHelper::equalsIgnoreCase(graphicsMode, LOG4CXX_STR(""BLINKING""), LOG4CXX_STR(""blinking""))){
		numberToConvert = 5;
	}else if(StringHelper::equalsIgnoreCase(graphicsMode, LOG4CXX_STR(""INVERSE""), LOG4CXX_STR(""inverse""))){
		numberToConvert = 7;
	}else if(StringHelper::equalsIgnoreCase(graphicsMode, LOG4CXX_STR(""STRIKETHROUGH""), LOG4CXX_STR(""strikethrough""))){
		numberToCon...",1,1,main\cpp\colorstartpatternconverter.cpp,graphicsModeToANSISequence,,false,66,91,graphicsModeToANSISequence,,,4,"LogString graphicsModeToANSISequence (LogString,Pool)"
10807,METHOD,main\cpp\colorstartpatternconverter.cpp:<global>,TYPE_DECL,"static LogString convertSingleSequence(const LogString& sequence, Pool& pool){
	LogString strInParens;
	bool inParens = false;
	bool hasParens = false;
	size_t x = 0;

	for(x = 0; x < sequence.length(); x++){
		if( sequence[x] == '(' && !inParens ){
			inParens = true;
			hasParens = true;
			continue;
		}else if( sequence[x] == '(' && inParens ){
			// Unbalanced parens - parse invalid
			return LOG4CXX_STR("""");
		}

		if( sequence[x] == ')' && inParens ){
			hasParens = true;
			inParens = false;
			break;
		}

		if( inParens ){
			strInParens.push_back(sequence[x]);
		}
	}

	if( (x != (sequence.length() - 1) || inParens) && hasParens ){
		// Unbalanced parens, or more data in the string than we expected - parse invalid
		return LOG4CXX_STR("""");
	}

	if(StringHelper::startsWith(sequence, LOG4CXX_STR(""fg(""))){
		// Parse foreground
		return colorToANSISequence(strInParens, true, pool);
	}else if(StringHelper::startsWith(sequence, LOG4CXX_STR(""bg(""))){
		return colorToANSISequence(s...",1,1,main\cpp\colorstartpatternconverter.cpp,convertSingleSequence,,false,93,133,convertSingleSequence,,,5,"LogString convertSingleSequence (LogString,Pool)"
10951,METHOD,ColorPatternConverterPrivate,TYPE_DECL,"ColorPatternConverterPrivate( const LogString& name, const LogString& style ) :
		PatternConverterPrivate( name, style ){}",2,42,main\cpp\colorstartpatternconverter.cpp,ColorPatternConverterPrivate.ColorPatternConverterPrivate,,false,137,138,ColorPatternConverterPrivate,,,1,"ANY ColorPatternConverterPrivate.ColorPatternConverterPrivate (LogString,LogString)"
10963,METHOD,main\cpp\colorstartpatternconverter.cpp:<global>,TYPE_DECL,"ColorStartPatternConverter::ColorStartPatternConverter() :
	LoggingEventPatternConverter(std::make_unique<ColorPatternConverterPrivate>(LOG4CXX_STR(""Color Start""),
		LOG4CXX_STR(""colorStart"")))
{
}",1,1,main\cpp\colorstartpatternconverter.cpp,ColorStartPatternConverter.ColorStartPatternConverter,,false,148,152,ColorStartPatternConverter,,,7,ANY ColorStartPatternConverter.ColorStartPatternConverter ()
10967,METHOD,main\cpp\colorstartpatternconverter.cpp:<global>,TYPE_DECL,"PatternConverterPtr ColorStartPatternConverter::newInstance(
	const std::vector<LogString>& /* options */)
{
	static WideLife<PatternConverterPtr> instance = std::make_shared<ColorStartPatternConverter>();
	return instance;
}",1,1,main\cpp\colorstartpatternconverter.cpp,ColorStartPatternConverter.newInstance,,false,154,159,newInstance,,,8,PatternConverterPtr ColorStartPatternConverter.newInstance (ANY)
10981,METHOD,main\cpp\colorstartpatternconverter.cpp:<global>,TYPE_DECL,"void ColorStartPatternConverter::format(
	const LoggingEventPtr& event,
	LogString& toAppendTo,
	Pool& p) const
{

	LOG4CXX_NS::LevelPtr lvl = event->getLevel();

	switch (lvl->toInt())
	{
		case LOG4CXX_NS::Level::FATAL_INT:
			toAppendTo.append(priv->m_fatalColor);
			break;

		case LOG4CXX_NS::Level::ERROR_INT:
			toAppendTo.append(priv->m_errorColor);
			break;

		case LOG4CXX_NS::Level::WARN_INT:
			toAppendTo.append(priv->m_warnColor);
			break;

		case LOG4CXX_NS::Level::INFO_INT:
			toAppendTo.append(priv->m_infoColor);
			break;

		case LOG4CXX_NS::Level::DEBUG_INT:
			toAppendTo.append(priv->m_debugColor);
			break;

		case LOG4CXX_NS::Level::TRACE_INT:
			toAppendTo.append(priv->m_traceColor);
			break;

		default:
			break;
	}
}",1,21,main\cpp\colorstartpatternconverter.cpp,ColorStartPatternConverter.format,,false,161,198,format,,,9,"void ColorStartPatternConverter.format (LoggingEventPtr,LogString,Pool)"
11129,METHOD,main\cpp\colorstartpatternconverter.cpp:<global>,TYPE_DECL,"void ColorStartPatternConverter::setFatalColor(const LogString& color){
	parseColor(color, &(priv->m_fatalColor));
}",1,21,main\cpp\colorstartpatternconverter.cpp,ColorStartPatternConverter.setFatalColor,,false,200,202,setFatalColor,,,10,void ColorStartPatternConverter.setFatalColor (LogString)
11147,METHOD,main\cpp\colorstartpatternconverter.cpp:<global>,TYPE_DECL,"void ColorStartPatternConverter::setErrorColor(const LogString& color){
	parseColor(color, &(priv->m_errorColor));
}",1,21,main\cpp\colorstartpatternconverter.cpp,ColorStartPatternConverter.setErrorColor,,false,204,206,setErrorColor,,,11,void ColorStartPatternConverter.setErrorColor (LogString)
11165,METHOD,main\cpp\colorstartpatternconverter.cpp:<global>,TYPE_DECL,"void ColorStartPatternConverter::setWarnColor(const LogString& color){
	parseColor(color, &(priv->m_warnColor));
}",1,21,main\cpp\colorstartpatternconverter.cpp,ColorStartPatternConverter.setWarnColor,,false,208,210,setWarnColor,,,12,void ColorStartPatternConverter.setWarnColor (LogString)
11183,METHOD,main\cpp\colorstartpatternconverter.cpp:<global>,TYPE_DECL,"void ColorStartPatternConverter::setInfoColor(const LogString& color){
	parseColor(color, &(priv->m_infoColor));
}",1,21,main\cpp\colorstartpatternconverter.cpp,ColorStartPatternConverter.setInfoColor,,false,212,214,setInfoColor,,,13,void ColorStartPatternConverter.setInfoColor (LogString)
11201,METHOD,main\cpp\colorstartpatternconverter.cpp:<global>,TYPE_DECL,"void ColorStartPatternConverter::setDebugColor(const LogString& color){
	parseColor(color, &(priv->m_debugColor));
}",1,21,main\cpp\colorstartpatternconverter.cpp,ColorStartPatternConverter.setDebugColor,,false,216,218,setDebugColor,,,14,void ColorStartPatternConverter.setDebugColor (LogString)
11219,METHOD,main\cpp\colorstartpatternconverter.cpp:<global>,TYPE_DECL,"void ColorStartPatternConverter::setTraceColor(const LogString& color){
	parseColor(color, &(priv->m_traceColor));
}",1,21,main\cpp\colorstartpatternconverter.cpp,ColorStartPatternConverter.setTraceColor,,false,220,222,setTraceColor,,,15,void ColorStartPatternConverter.setTraceColor (LogString)
11237,METHOD,main\cpp\colorstartpatternconverter.cpp:<global>,TYPE_DECL,"void ColorStartPatternConverter::parseColor(const LogString& color, LogString* result){
	LogString lower = StringHelper::toLowerCase(color);
	Pool pool;

	// If the color we are trying to parse is blank, clear our result
	if(StringHelper::trim(color).empty() ||
			StringHelper::equalsIgnoreCase(color,
										   LOG4CXX_STR(""NONE""),
										   LOG4CXX_STR(""none""))){
		result->clear();
		return;
	}

	if( StringHelper::startsWith(lower, LOG4CXX_STR(""\\x1b"")) ){
		if( color[color.size() - 1] != 'm' ){
			// In order for this to be a valid ANSI escape sequence,
			// it must end with an 'm'.  If it does not, reject.
			return;
		}
		// We start with an escape sequence, copy the data over after the escape byte
		result->clear();
		result->append(LOG4CXX_STR(""\x1b""));
		for( size_t x = 4; x < color.size(); x++ ){
			result->push_back(color[x]);
		}
	}else{
		// We do not start with an escape sequence: try to parse color
		// Escape sequence information:
		// https://gist.github.com/fn...",1,1,main\cpp\colorstartpatternconverter.cpp,ColorStartPatternConverter.parseColor,,false,224,277,parseColor,,,16,"void ColorStartPatternConverter.parseColor (LogString,LogString*)"
11446,METHOD,main\cpp\configurator.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\configurator.cpp,main\cpp\configurator.cpp:<global>,,false,1,33,<global>,,,1,
11450,METHOD,main\cpp\configurator.cpp:<global>,TYPE_DECL,"Configurator::Configurator()
{
}",1,1,main\cpp\configurator.cpp,Configurator.Configurator,,false,31,33,Configurator,,,3,ANY Configurator.Configurator ()
11475,METHOD,main\cpp\consoleappender.cpp:<global>,TYPE_DECL,<global>,1,2,main\cpp\consoleappender.cpp,main\cpp\consoleappender.cpp:<global>,,false,1,149,<global>,,,1,
11478,METHOD,ConsoleAppenderPriv,TYPE_DECL,"ConsoleAppenderPriv(LogString target) :
		WriterAppenderPriv(),
		target(target) {}",2,19,main\cpp\consoleappender.cpp,ConsoleAppenderPriv.ConsoleAppenderPriv,,false,32,34,ConsoleAppenderPriv,,,1,ANY ConsoleAppenderPriv.ConsoleAppenderPriv (LogString)
11486,METHOD,main\cpp\consoleappender.cpp:<global>,TYPE_DECL,"ConsoleAppender::ConsoleAppender()
	: WriterAppender (std::make_unique<ConsoleAppenderPriv>(getSystemOut()))
{
}",1,1,main\cpp\consoleappender.cpp,ConsoleAppender.ConsoleAppender,,false,43,46,ConsoleAppender,,,4,ANY ConsoleAppender.ConsoleAppender ()
11490,METHOD,main\cpp\consoleappender.cpp:<global>,TYPE_DECL,"ConsoleAppender::ConsoleAppender(const LayoutPtr& layout)
	: WriterAppender (std::make_unique<ConsoleAppenderPriv>(getSystemOut()))
{
	setLayout(layout);
	Pool p;
	setWriter(std::make_shared<SystemOutWriter>());
	WriterAppender::activateOptions(p);
}",1,1,main\cpp\consoleappender.cpp,ConsoleAppender.ConsoleAppender,,false,48,55,ConsoleAppender,,,5,ANY ConsoleAppender.ConsoleAppender (LayoutPtr)
11508,METHOD,main\cpp\consoleappender.cpp:<global>,TYPE_DECL,"ConsoleAppender::ConsoleAppender(const LayoutPtr& layout, const LogString& target)
	: WriterAppender (std::make_unique<ConsoleAppenderPriv>(target))
{
	setLayout(layout);
	setTarget(target);
	Pool p;
	ConsoleAppender::activateOptions(p);
}",1,1,main\cpp\consoleappender.cpp,ConsoleAppender.ConsoleAppender,,false,57,64,ConsoleAppender,,,6,"ANY ConsoleAppender.ConsoleAppender (LayoutPtr,LogString)"
11524,METHOD,main\cpp\consoleappender.cpp:<global>,TYPE_DECL,"ConsoleAppender::~ConsoleAppender()
{
	finalize();
}",1,1,main\cpp\consoleappender.cpp,ConsoleAppender.~ConsoleAppender,,false,66,69,~ConsoleAppender,,,7,ANY ConsoleAppender.~ConsoleAppender ()
11529,METHOD,main\cpp\consoleappender.cpp:<global>,TYPE_DECL,"const LogString& ConsoleAppender::getSystemOut()
{
	static const WideLife<LogString> name(LOG4CXX_STR(""System.out""));
	return name;
}",1,1,main\cpp\consoleappender.cpp,ConsoleAppender.getSystemOut,,false,71,75,getSystemOut,,,8,LogString ConsoleAppender.getSystemOut ()
11539,METHOD,main\cpp\consoleappender.cpp:<global>,TYPE_DECL,"const LogString& ConsoleAppender::getSystemErr()
{
	static const WideLife<LogString> name(LOG4CXX_STR(""System.err""));
	return name;
}",1,1,main\cpp\consoleappender.cpp,ConsoleAppender.getSystemErr,,false,77,81,getSystemErr,,,9,LogString ConsoleAppender.getSystemErr ()
11549,METHOD,main\cpp\consoleappender.cpp:<global>,TYPE_DECL,"void ConsoleAppender::setTarget(const LogString& value)
{
	LogString v = StringHelper::trim(value);

	if (StringHelper::equalsIgnoreCase(v,
			LOG4CXX_STR(""SYSTEM.OUT""), LOG4CXX_STR(""system.out"")))
	{
		_priv->target = getSystemOut();
	}
	else if (StringHelper::equalsIgnoreCase(v,
			LOG4CXX_STR(""SYSTEM.ERR""), LOG4CXX_STR(""system.err"")))
	{
		_priv->target = getSystemErr();
	}
	else
	{
		targetWarn(value);
	}
}",1,2,main\cpp\consoleappender.cpp,ConsoleAppender.setTarget,,false,83,101,setTarget,,,10,void ConsoleAppender.setTarget (LogString)
11614,METHOD,main\cpp\consoleappender.cpp:<global>,TYPE_DECL,"LogString ConsoleAppender::getTarget() const
{
	return _priv->target;
}",1,8,main\cpp\consoleappender.cpp,ConsoleAppender.getTarget,,false,103,106,getTarget,,,11,LogString ConsoleAppender.getTarget ()
11629,METHOD,main\cpp\consoleappender.cpp:<global>,TYPE_DECL,"void ConsoleAppender::targetWarn(const LogString& val)
{
	LogLog::warn(((LogString) LOG4CXX_STR(""[""))
		+ val +  LOG4CXX_STR(""] should be system.out or system.err.""));
	LogLog::warn(LOG4CXX_STR(""Using previously set target, System.out by default.""));
}",1,1,main\cpp\consoleappender.cpp,ConsoleAppender.targetWarn,,false,108,113,targetWarn,,,12,void ConsoleAppender.targetWarn (LogString)
11653,METHOD,main\cpp\consoleappender.cpp:<global>,TYPE_DECL,"void ConsoleAppender::activateOptions(Pool& p)
{
	if (StringHelper::equalsIgnoreCase(_priv->target,
			LOG4CXX_STR(""SYSTEM.OUT""), LOG4CXX_STR(""system.out"")))
	{
		WriterPtr writer1 = std::make_shared<SystemOutWriter>();
		setWriter(writer1);
	}
	else if (StringHelper::equalsIgnoreCase(_priv->target,
			LOG4CXX_STR(""SYSTEM.ERR""), LOG4CXX_STR(""system.err"")))
	{
		WriterPtr writer1 = std::make_shared<SystemErrWriter>();
		setWriter(writer1);
	}

	WriterAppender::activateOptions(p);
}",1,36,main\cpp\consoleappender.cpp,ConsoleAppender.activateOptions,,false,115,131,activateOptions,,,13,void ConsoleAppender.activateOptions (Pool)
11723,METHOD,main\cpp\consoleappender.cpp:<global>,TYPE_DECL,"void ConsoleAppender::setOption(const LogString& option, const LogString& value)
{
	if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""TARGET""), LOG4CXX_STR(""target"")))
	{
		setTarget(value);
	}
	else
	{
		WriterAppender::setOption(option, value);
	}
}",1,1,main\cpp\consoleappender.cpp,ConsoleAppender.setOption,,false,133,144,setOption,,,14,"void ConsoleAppender.setOption (LogString,LogString)"
11765,METHOD,main\cpp\cyclicbuffer.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\cyclicbuffer.cpp,main\cpp\cyclicbuffer.cpp:<global>,,false,1,182,<global>,,,1,
11768,METHOD,CyclicBufferPriv,TYPE_DECL,"CyclicBufferPriv(int maxSize1) :
		ea(maxSize1), first(0), last(0), numElems(0), maxSize(maxSize1) {}",2,68,main\cpp\cyclicbuffer.cpp,CyclicBufferPriv.CyclicBufferPriv,,false,30,31,CyclicBufferPriv,,,1,ANY CyclicBufferPriv.CyclicBufferPriv (int)
11778,METHOD,main\cpp\cyclicbuffer.cpp:<global>,TYPE_DECL,"CyclicBuffer::CyclicBuffer(int maxSize1)
	: m_priv(std::make_unique<CyclicBufferPriv>(maxSize1))
{
	if (maxSize1 < 1)
	{
		LogString msg(LOG4CXX_STR(""The maxSize argument (""));
		Pool p;
		StringHelper::toString(maxSize1, p, msg);
		msg.append(LOG4CXX_STR("") is not a positive integer.""));
		throw IllegalArgumentException(msg);
	}
}",1,1,main\cpp\cyclicbuffer.cpp,CyclicBuffer.CyclicBuffer,,false,45,56,CyclicBuffer,,,2,ANY CyclicBuffer.CyclicBuffer (int)
11809,METHOD,main\cpp\cyclicbuffer.cpp:<global>,TYPE_DECL,"CyclicBuffer::~CyclicBuffer()
{
}",1,1,main\cpp\cyclicbuffer.cpp,CyclicBuffer.~CyclicBuffer,,false,58,60,~CyclicBuffer,,,3,ANY CyclicBuffer.~CyclicBuffer ()
11813,METHOD,main\cpp\cyclicbuffer.cpp:<global>,TYPE_DECL,"void CyclicBuffer::add(const spi::LoggingEventPtr& event)
{
	m_priv->ea[m_priv->last] = event;

	if (++m_priv->last == m_priv->maxSize)
	{
		m_priv->last = 0;
	}

	if (m_priv->numElems < m_priv->maxSize)
	{
		m_priv->numElems++;
	}
	else if (++m_priv->first == m_priv->maxSize)
	{
		m_priv->first = 0;
	}
}",1,1,main\cpp\cyclicbuffer.cpp,CyclicBuffer.add,,false,65,82,add,,,4,void CyclicBuffer.add (ANY)
11872,METHOD,main\cpp\cyclicbuffer.cpp:<global>,TYPE_DECL,"spi::LoggingEventPtr CyclicBuffer::get(int i)
{
	if (i < 0 || i >= m_priv->numElems)
	{
		return 0;
	}

	return m_priv->ea[(m_priv->first + i) % m_priv->maxSize];
}",1,1,main\cpp\cyclicbuffer.cpp,CyclicBuffer.get,,false,90,98,get,,,5,LoggingEventPtr CyclicBuffer.get (int)
11904,METHOD,main\cpp\cyclicbuffer.cpp:<global>,TYPE_DECL,"spi::LoggingEventPtr CyclicBuffer::get()
{
	LoggingEventPtr r;

	if (m_priv->numElems > 0)
	{
		m_priv->numElems--;
		r = m_priv->ea[m_priv->first];
		m_priv->ea[m_priv->first] = 0;

		if (++m_priv->first == m_priv->maxSize)
		{
			m_priv->first = 0;
		}
	}

	return r;
}",1,1,main\cpp\cyclicbuffer.cpp,CyclicBuffer.get,,false,104,121,get,,,6,LoggingEventPtr CyclicBuffer.get ()
11955,METHOD,main\cpp\cyclicbuffer.cpp:<global>,TYPE_DECL,"void CyclicBuffer::resize(int newSize)
{
	if (newSize < 0)
	{
		LogString msg(LOG4CXX_STR(""Negative array size [""));
		Pool p;
		StringHelper::toString(newSize, p, msg);
		msg.append(LOG4CXX_STR(""] not allowed.""));
		throw IllegalArgumentException(msg);
	}

	if (newSize == m_priv->numElems)
	{
		return;    // nothing to do
	}

	LoggingEventList temp(newSize);

	int loopLen = newSize < m_priv->numElems ? newSize : m_priv->numElems;
	int i;

	for (i = 0; i < loopLen; i++)
	{
		temp[i] = m_priv->ea[m_priv->first];
		m_priv->ea[m_priv->first] = 0;

		if (++m_priv->first == m_priv->numElems)
		{
			m_priv->first = 0;
		}
	}

	m_priv->ea = temp;
	m_priv->first = 0;
	m_priv->numElems = loopLen;
	m_priv->maxSize = newSize;

	if (loopLen == newSize)
	{
		m_priv->last = 0;
	}
	else
	{
		m_priv->last = loopLen;
	}
}",1,1,main\cpp\cyclicbuffer.cpp,CyclicBuffer.resize,,false,127,172,resize,,,7,void CyclicBuffer.resize (int)
12094,METHOD,main\cpp\cyclicbuffer.cpp:<global>,TYPE_DECL,"int CyclicBuffer::getMaxSize() const
{
	return m_priv->maxSize;
}",1,1,main\cpp\cyclicbuffer.cpp,CyclicBuffer.getMaxSize,,false,174,177,getMaxSize,,,8,int CyclicBuffer.getMaxSize ()
12102,METHOD,main\cpp\cyclicbuffer.cpp:<global>,TYPE_DECL,"int CyclicBuffer::length() const
{
	return m_priv->numElems;
}",1,1,main\cpp\cyclicbuffer.cpp,CyclicBuffer.length,,false,179,182,length,,,9,int CyclicBuffer.length ()
12117,METHOD,main\cpp\datagrampacket.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\datagrampacket.cpp,main\cpp\datagrampacket.cpp:<global>,,false,1,150,<global>,,,1,
12120,METHOD,DatagramPacketPriv,TYPE_DECL,"DatagramPacketPriv(void* buf1, int length1)
		: buf(buf1), offset(0), length(length1), address(), port(0)
	{
	}",2,2,main\cpp\datagrampacket.cpp,DatagramPacketPriv.DatagramPacketPriv,,false,25,28,DatagramPacketPriv,,,1,"ANY DatagramPacketPriv.DatagramPacketPriv (void*,int)"
12126,METHOD,DatagramPacketPriv,TYPE_DECL,"DatagramPacketPriv(void* buf1, int length1, InetAddressPtr address1,
		int port1)
		: buf(buf1), offset(0), length(length1), address(address1), port(port1)
	{
	}",2,2,main\cpp\datagrampacket.cpp,DatagramPacketPriv.DatagramPacketPriv,,false,30,34,DatagramPacketPriv,,,2,"ANY DatagramPacketPriv.DatagramPacketPriv (void*,int,InetAddressPtr,int)"
12134,METHOD,DatagramPacketPriv,TYPE_DECL,"DatagramPacketPriv(void* buf1, int offset1, int length1)
		: buf(buf1), offset(offset1), length(length1), address(), port(0)
	{
	}",2,2,main\cpp\datagrampacket.cpp,DatagramPacketPriv.DatagramPacketPriv,,false,36,39,DatagramPacketPriv,,,3,"ANY DatagramPacketPriv.DatagramPacketPriv (void*,int,int)"
12141,METHOD,DatagramPacketPriv,TYPE_DECL,"DatagramPacketPriv(void* buf1, int offset1, int length1,
		InetAddressPtr address1, int port1)
		: buf(buf1), offset(offset1), length(length1), address(address1), port(port1)
	{
	}",2,2,main\cpp\datagrampacket.cpp,DatagramPacketPriv.DatagramPacketPriv,,false,41,45,DatagramPacketPriv,,,4,"ANY DatagramPacketPriv.DatagramPacketPriv (void*,int,int,InetAddressPtr,int)"
12157,METHOD,main\cpp\datagrampacket.cpp:<global>,TYPE_DECL,"DatagramPacket::DatagramPacket(void* buf1, int length1)
	: m_priv(std::make_unique<DatagramPacketPriv>(buf1, length1))
{
}",1,1,main\cpp\datagrampacket.cpp,DatagramPacket.DatagramPacket,,false,67,70,DatagramPacket,,,4,"ANY DatagramPacket.DatagramPacket (void*,int)"
12163,METHOD,main\cpp\datagrampacket.cpp:<global>,TYPE_DECL,"DatagramPacket::DatagramPacket(void* buf1, int length1, InetAddressPtr address1,
	int port1)
	: m_priv(std::make_unique<DatagramPacketPriv>(buf1, length1, address1, port1))
{
}",1,1,main\cpp\datagrampacket.cpp,DatagramPacket.DatagramPacket,,false,75,79,DatagramPacket,,,5,"ANY DatagramPacket.DatagramPacket (void*,int,InetAddressPtr,int)"
12171,METHOD,main\cpp\datagrampacket.cpp:<global>,TYPE_DECL,"DatagramPacket::DatagramPacket(void* buf1, int offset1, int length1)
	: m_priv(std::make_unique<DatagramPacketPriv>(buf1, offset1, length1))
{
}",1,1,main\cpp\datagrampacket.cpp,DatagramPacket.DatagramPacket,,false,83,86,DatagramPacket,,,6,"ANY DatagramPacket.DatagramPacket (void*,int,int)"
12178,METHOD,main\cpp\datagrampacket.cpp:<global>,TYPE_DECL,"DatagramPacket::DatagramPacket(void* buf1, int offset1, int length1,
	InetAddressPtr address1, int port1)
	: m_priv(std::make_unique<DatagramPacketPriv>(buf1, offset1, length1, address1, port1))
{
}",1,1,main\cpp\datagrampacket.cpp,DatagramPacket.DatagramPacket,,false,90,94,DatagramPacket,,,7,"ANY DatagramPacket.DatagramPacket (void*,int,int,InetAddressPtr,int)"
12187,METHOD,main\cpp\datagrampacket.cpp:<global>,TYPE_DECL,"DatagramPacket::~DatagramPacket()
{
}",1,1,main\cpp\datagrampacket.cpp,DatagramPacket.~DatagramPacket,,false,96,98,~DatagramPacket,,,8,ANY DatagramPacket.~DatagramPacket ()
12191,METHOD,main\cpp\datagrampacket.cpp:<global>,TYPE_DECL,"InetAddressPtr DatagramPacket::getAddress() const
{
	return m_priv->address;
}",1,1,main\cpp\datagrampacket.cpp,DatagramPacket.getAddress,,false,100,103,getAddress,,,9,InetAddressPtr DatagramPacket.getAddress ()
12199,METHOD,main\cpp\datagrampacket.cpp:<global>,TYPE_DECL,"void* DatagramPacket::getData() const
{
	return m_priv->buf;
}",1,1,main\cpp\datagrampacket.cpp,DatagramPacket.getData,,false,105,108,getData,,,10,void* DatagramPacket.getData ()
12207,METHOD,main\cpp\datagrampacket.cpp:<global>,TYPE_DECL,"int DatagramPacket::getLength() const
{
	return m_priv->length;
}",1,1,main\cpp\datagrampacket.cpp,DatagramPacket.getLength,,false,110,113,getLength,,,11,int DatagramPacket.getLength ()
12215,METHOD,main\cpp\datagrampacket.cpp:<global>,TYPE_DECL,"int DatagramPacket::getOffset() const
{
	return m_priv->offset;
}",1,1,main\cpp\datagrampacket.cpp,DatagramPacket.getOffset,,false,115,118,getOffset,,,12,int DatagramPacket.getOffset ()
12223,METHOD,main\cpp\datagrampacket.cpp:<global>,TYPE_DECL,"int DatagramPacket::getPort() const
{
	return m_priv->port;
}",1,1,main\cpp\datagrampacket.cpp,DatagramPacket.getPort,,false,120,123,getPort,,,13,int DatagramPacket.getPort ()
12231,METHOD,main\cpp\datagrampacket.cpp:<global>,TYPE_DECL,"void DatagramPacket::setAddress(InetAddressPtr address1)
{
	m_priv->address = address1;
}",1,1,main\cpp\datagrampacket.cpp,DatagramPacket.setAddress,,false,125,128,setAddress,,,14,void DatagramPacket.setAddress (InetAddressPtr)
12241,METHOD,main\cpp\datagrampacket.cpp:<global>,TYPE_DECL,"void DatagramPacket::setData(void* buf1)
{
	m_priv->buf = buf1;
}",1,1,main\cpp\datagrampacket.cpp,DatagramPacket.setData,,false,130,133,setData,,,15,void DatagramPacket.setData (void*)
12251,METHOD,main\cpp\datagrampacket.cpp:<global>,TYPE_DECL,"void DatagramPacket::setData(void* buf1, int offset1, int length1)
{
	m_priv->buf = buf1;
	m_priv->offset = offset1;
	m_priv->length = length1;
}",1,1,main\cpp\datagrampacket.cpp,DatagramPacket.setData,,false,135,140,setData,,,16,"void DatagramPacket.setData (void*,int,int)"
12273,METHOD,main\cpp\datagrampacket.cpp:<global>,TYPE_DECL,"void DatagramPacket::setLength(int length1)
{
	m_priv->length = length1;
}",1,1,main\cpp\datagrampacket.cpp,DatagramPacket.setLength,,false,142,145,setLength,,,17,void DatagramPacket.setLength (int)
12283,METHOD,main\cpp\datagrampacket.cpp:<global>,TYPE_DECL,"void DatagramPacket::setPort(int port1)
{
	m_priv->port = port1;
}",1,1,main\cpp\datagrampacket.cpp,DatagramPacket.setPort,,false,147,150,setPort,,,18,void DatagramPacket.setPort (int)
12310,METHOD,main\cpp\datagramsocket.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\datagramsocket.cpp,main\cpp\datagramsocket.cpp:<global>,,false,1,96,<global>,,,1,
12314,METHOD,main\cpp\datagramsocket.cpp:<global>,TYPE_DECL,"DatagramSocket::DatagramSocket(std::unique_ptr<DatagramSocketPriv> priv) :
	m_priv(std::move(priv))
{}",1,2,main\cpp\datagramsocket.cpp,DatagramSocket.DatagramSocket,,false,29,31,DatagramSocket,,,3,ANY DatagramSocket.DatagramSocket (ANY)
12319,METHOD,main\cpp\datagramsocket.cpp:<global>,TYPE_DECL,"DatagramSocket::~DatagramSocket()
{
	try
	{
		close();
	}
	catch (SocketException&)
	{
	}
}",1,1,main\cpp\datagramsocket.cpp,DatagramSocket.~DatagramSocket,,false,33,42,~DatagramSocket,,,4,ANY DatagramSocket.~DatagramSocket ()
12327,METHOD,main\cpp\datagramsocket.cpp:<global>,TYPE_DECL,"void DatagramSocket::close()
{
}",1,1,main\cpp\datagramsocket.cpp,DatagramSocket.close,,false,45,47,close,,,5,void DatagramSocket.close ()
12331,METHOD,main\cpp\datagramsocket.cpp:<global>,TYPE_DECL,"InetAddressPtr DatagramSocket::getInetAddress() const
{
	return m_priv->address;
}",1,1,main\cpp\datagramsocket.cpp,DatagramSocket.getInetAddress,,false,49,52,getInetAddress,,,6,InetAddressPtr DatagramSocket.getInetAddress ()
12339,METHOD,main\cpp\datagramsocket.cpp:<global>,TYPE_DECL,"InetAddressPtr DatagramSocket::getLocalAddress() const
{
	return m_priv->localAddress;
}",1,1,main\cpp\datagramsocket.cpp,DatagramSocket.getLocalAddress,,false,54,57,getLocalAddress,,,7,InetAddressPtr DatagramSocket.getLocalAddress ()
12347,METHOD,main\cpp\datagramsocket.cpp:<global>,TYPE_DECL,"int DatagramSocket::getLocalPort() const
{
	return m_priv->localPort;
}",1,1,main\cpp\datagramsocket.cpp,DatagramSocket.getLocalPort,,false,59,62,getLocalPort,,,8,int DatagramSocket.getLocalPort ()
12355,METHOD,main\cpp\datagramsocket.cpp:<global>,TYPE_DECL,"int DatagramSocket::getPort() const
{
	return m_priv->port;
}",1,1,main\cpp\datagramsocket.cpp,DatagramSocket.getPort,,false,64,67,getPort,,,9,int DatagramSocket.getPort ()
12363,METHOD,main\cpp\datagramsocket.cpp:<global>,TYPE_DECL,"bool DatagramSocket::isBound() const
{
	return m_priv->localPort != 0;
}",1,1,main\cpp\datagramsocket.cpp,DatagramSocket.isBound,,false,69,72,isBound,,,10,bool DatagramSocket.isBound ()
12373,METHOD,main\cpp\datagramsocket.cpp:<global>,TYPE_DECL,"bool DatagramSocket::isConnected() const
{
	return m_priv->port != 0;
}",1,1,main\cpp\datagramsocket.cpp,DatagramSocket.isConnected,,false,74,77,isConnected,,,11,bool DatagramSocket.isConnected ()
12383,METHOD,main\cpp\datagramsocket.cpp:<global>,TYPE_DECL,"DatagramSocketUniquePtr DatagramSocket::create(){
	return std::make_unique<APRDatagramSocket>();
}",1,1,main\cpp\datagramsocket.cpp,DatagramSocket.create,,false,79,81,create,,,12,DatagramSocketUniquePtr DatagramSocket.create ()
12392,METHOD,main\cpp\datagramsocket.cpp:<global>,TYPE_DECL,"DatagramSocketUniquePtr DatagramSocket::create(int localPort1){
	auto sock = std::make_unique<APRDatagramSocket>(localPort1);
	InetAddressPtr bindAddr = InetAddress::anyAddress();

	sock->bind(localPort1, bindAddr);
	return sock;
}",1,1,main\cpp\datagramsocket.cpp,DatagramSocket.create,,false,83,89,create,,,13,DatagramSocketUniquePtr DatagramSocket.create (int)
12422,METHOD,main\cpp\datagramsocket.cpp:<global>,TYPE_DECL,"DatagramSocketUniquePtr DatagramSocket::create(int localPort1, InetAddressPtr localAddress1){
	auto sock = std::make_unique<APRDatagramSocket>(localPort1, localAddress1);

	sock->bind(localPort1, localAddress1);
	return sock;
}",1,1,main\cpp\datagramsocket.cpp,DatagramSocket.create,,false,91,96,create,,,14,"DatagramSocketUniquePtr DatagramSocket.create (int,InetAddressPtr)"
12458,METHOD,main\cpp\date.cpp:<global>,TYPE_DECL,<global>,1,8,main\cpp\date.cpp,main\cpp\date.cpp:<global>,,false,1,73,<global>,,,1,
12467,METHOD,main\cpp\date.cpp:<global>,TYPE_DECL,"Date::Date() : time(currentTime())
{
}",1,1,main\cpp\date.cpp,Date.Date,,false,35,37,Date,,,4,ANY Date.Date ()
12471,METHOD,main\cpp\date.cpp:<global>,TYPE_DECL,"Date::Date(log4cxx_time_t t) : time(t)
{
}",1,1,main\cpp\date.cpp,Date.Date,,false,39,41,Date,,,5,ANY Date.Date (log4cxx_time_t)
12476,METHOD,main\cpp\date.cpp:<global>,TYPE_DECL,"Date::~Date()
{
}",1,1,main\cpp\date.cpp,Date.~Date,,false,43,45,~Date,,,6,ANY Date.~Date ()
12480,METHOD,main\cpp\date.cpp:<global>,TYPE_DECL,"log4cxx_time_t Date::getMicrosecondsPerDay()
{
	return 86400000000ull;
}",1,1,main\cpp\date.cpp,Date.getMicrosecondsPerDay,,false,47,50,getMicrosecondsPerDay,,,7,log4cxx_time_t Date.getMicrosecondsPerDay ()
12486,METHOD,main\cpp\date.cpp:<global>,TYPE_DECL,"log4cxx_time_t Date::getMicrosecondsPerSecond()
{
	return LOG4CXX_USEC_PER_SEC;
}",1,8,main\cpp\date.cpp,Date.getMicrosecondsPerSecond,,false,52,55,getMicrosecondsPerSecond,,,8,log4cxx_time_t Date.getMicrosecondsPerSecond ()
12494,METHOD,main\cpp\date.cpp:<global>,TYPE_DECL,"log4cxx_time_t Date::getNextSecond() const
{
	return ((time / LOG4CXX_USEC_PER_SEC) + 1) * LOG4CXX_USEC_PER_SEC;
}",1,17,main\cpp\date.cpp,Date.getNextSecond,,false,58,61,getNextSecond,,,9,log4cxx_time_t Date.getNextSecond ()
12510,METHOD,main\cpp\date.cpp:<global>,TYPE_DECL,"void Date::setGetCurrentTimeFunction(GetCurrentTimeFn fn){
	getCurrentTimeFn = fn;
}",1,1,main\cpp\date.cpp,Date.setGetCurrentTimeFunction,,false,63,65,setGetCurrentTimeFunction,,,10,void Date.setGetCurrentTimeFunction (GetCurrentTimeFn)
12518,METHOD,main\cpp\date.cpp:<global>,TYPE_DECL,"log4cxx_time_t Date::currentTime(){
	return getCurrentTimeFn ? getCurrentTimeFn() : getCurrentTimeStd();
}",1,1,main\cpp\date.cpp,Date.currentTime,,false,67,69,currentTime,,,11,log4cxx_time_t Date.currentTime ()
12527,METHOD,main\cpp\date.cpp:<global>,TYPE_DECL,"log4cxx_time_t Date::getCurrentTimeStd(){
	return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}",1,1,main\cpp\date.cpp,Date.getCurrentTimeStd,,false,71,73,getCurrentTimeStd,,,12,log4cxx_time_t Date.getCurrentTimeStd ()
12567,METHOD,main\cpp\dateformat.cpp:<global>,TYPE_DECL,<global>,1,28,main\cpp\dateformat.cpp,main\cpp\dateformat.cpp:<global>,,false,1,37,<global>,,,1,
12571,METHOD,main\cpp\dateformat.cpp:<global>,TYPE_DECL,DateFormat::~DateFormat() {},1,28,main\cpp\dateformat.cpp,DateFormat.~DateFormat,,false,28,28,~DateFormat,,,3,ANY DateFormat.~DateFormat ()
12575,METHOD,main\cpp\dateformat.cpp:<global>,TYPE_DECL,void DateFormat::setTimeZone(const TimeZonePtr&) {},1,51,main\cpp\dateformat.cpp,DateFormat.setTimeZone,,false,30,30,setTimeZone,,,4,void DateFormat.setTimeZone (TimeZonePtr)
12580,METHOD,main\cpp\dateformat.cpp:<global>,TYPE_DECL,"void DateFormat::numberFormat(LogString& s, int n, Pool& p) const
{
	StringHelper::toString(n, p, s);
}",1,1,main\cpp\dateformat.cpp,DateFormat.numberFormat,,false,32,35,numberFormat,,,5,"void DateFormat.numberFormat (LogString,int,Pool)"
12594,METHOD,main\cpp\dateformat.cpp:<global>,TYPE_DECL,DateFormat::DateFormat() {},1,27,main\cpp\dateformat.cpp,DateFormat.DateFormat,,false,37,37,DateFormat,,,6,ANY DateFormat.DateFormat ()
12627,METHOD,main\cpp\datepatternconverter.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\datepatternconverter.cpp,main\cpp\datepatternconverter.cpp:<global>,,false,1,183,<global>,,,1,
12630,METHOD,DatePatternConverterPrivate,TYPE_DECL,"DatePatternConverterPrivate( const LogString& name, const LogString& style, DateFormatPtr _df ):
		PatternConverterPrivate(name, style),
		df(_df) {}",2,12,main\cpp\datepatternconverter.cpp,DatePatternConverterPrivate.DatePatternConverterPrivate,,false,39,41,DatePatternConverterPrivate,,,1,"ANY DatePatternConverterPrivate.DatePatternConverterPrivate (LogString,LogString,DateFormatPtr)"
12640,METHOD,main\cpp\datepatternconverter.cpp:<global>,TYPE_DECL,"DatePatternConverter::DatePatternConverter(
	const std::vector<LogString>& options) :
	LoggingEventPatternConverter (std::make_unique<DatePatternConverterPrivate>(LOG4CXX_STR(""Class Name""),
			LOG4CXX_STR(""class name""), getDateFormat(options)))
{
}",1,1,main\cpp\datepatternconverter.cpp,DatePatternConverter.DatePatternConverter,,false,52,57,DatePatternConverter,,,4,ANY DatePatternConverter.DatePatternConverter (ANY)
12645,METHOD,main\cpp\datepatternconverter.cpp:<global>,TYPE_DECL,DatePatternConverter::~DatePatternConverter() {},1,48,main\cpp\datepatternconverter.cpp,DatePatternConverter.~DatePatternConverter,,false,59,59,~DatePatternConverter,,,5,ANY DatePatternConverter.~DatePatternConverter ()
12649,METHOD,main\cpp\datepatternconverter.cpp:<global>,TYPE_DECL,"DateFormatPtr DatePatternConverter::getDateFormat(const OptionsList& options)
{
	DateFormatPtr df;
	int maximumCacheValidity = 1000000;

	if (options.size() == 0)
	{
		df = std::make_shared<ISO8601DateFormat>();
	}
	else
	{
		LogString dateFormatStr(options[0]);

		if (dateFormatStr.empty() ||
			StringHelper::equalsIgnoreCase(dateFormatStr,
				LOG4CXX_STR(""ISO8601""), LOG4CXX_STR(""iso8601"")))
		{
			df = std::make_shared<ISO8601DateFormat>();
		}
		else if (StringHelper::equalsIgnoreCase(dateFormatStr,
				LOG4CXX_STR(""ABSOLUTE""), LOG4CXX_STR(""absolute"")))
		{
			df = std::make_shared<AbsoluteTimeDateFormat>();
		}
		else if (StringHelper::equalsIgnoreCase(dateFormatStr,
				LOG4CXX_STR(""DATE""), LOG4CXX_STR(""date"")))
		{
			df = std::make_shared<DateTimeDateFormat>();
		}
		else
		{
			if (dateFormatStr.find(0x25 /*'%'*/) == std::string::npos)
			{
				try
				{
					df = std::make_shared<SimpleDateFormat>(dateFormatStr);
					maximumCacheValidity =
						CachedDateFormat::getMaxim...",1,1,main\cpp\datepatternconverter.cpp,DatePatternConverter.getDateFormat,,false,61,131,getDateFormat,,,6,DateFormatPtr DatePatternConverter.getDateFormat (OptionsList)
12848,METHOD,main\cpp\datepatternconverter.cpp:<global>,TYPE_DECL,"PatternConverterPtr DatePatternConverter::newInstance(
	const std::vector<LogString>& options)
{
	return std::make_shared<DatePatternConverter>(options);
}",1,1,main\cpp\datepatternconverter.cpp,DatePatternConverter.newInstance,,false,133,137,newInstance,,,7,PatternConverterPtr DatePatternConverter.newInstance (ANY)
12861,METHOD,main\cpp\datepatternconverter.cpp:<global>,TYPE_DECL,"void DatePatternConverter::format(
	const LoggingEventPtr& event,
	LogString& toAppendTo,
	Pool& p) const
{
	priv->df->format(toAppendTo, event->getTimeStamp(), p);
}",1,1,main\cpp\datepatternconverter.cpp,DatePatternConverter.format,,false,139,145,format,,,8,"void DatePatternConverter.format (LoggingEventPtr,LogString,Pool)"
12887,METHOD,main\cpp\datepatternconverter.cpp:<global>,TYPE_DECL,"void DatePatternConverter::format(
	const ObjectPtr& obj,
	LogString& toAppendTo,
	Pool& p) const
{
	DatePtr date = LOG4CXX_NS::cast<Date>(obj);

	if (date != NULL)
	{
		format(date, toAppendTo, p);
	}
	else
	{
		LoggingEventPtr event = LOG4CXX_NS::cast<LoggingEvent>(obj);

		if (event != NULL)
		{
			format(event, toAppendTo, p);
		}
	}
}",1,1,main\cpp\datepatternconverter.cpp,DatePatternConverter.format,,false,150,170,format,,,9,"void DatePatternConverter.format (ObjectPtr,LogString,Pool)"
12934,METHOD,main\cpp\datepatternconverter.cpp:<global>,TYPE_DECL,"void DatePatternConverter::format(
	const DatePtr& date,
	LogString& toAppendTo,
	Pool& p) const
{
	priv->df->format(toAppendTo, date->getTime(), p);
}",1,1,main\cpp\datepatternconverter.cpp,DatePatternConverter.format,,false,177,183,format,,,10,"void DatePatternConverter.format (DatePtr,LogString,Pool)"
13009,METHOD,main\cpp\dbappender.cpp:<global>,TYPE_DECL,<global>,1,8,main\cpp\dbappender.cpp,main\cpp\dbappender.cpp:<global>,,false,1,250,<global>,,,1,
13014,METHOD,DBAppenderPriv,TYPE_DECL,"DBAppenderPriv() :
        AppenderSkeletonPrivate()
	{
		static bool initialized = false;
		if (!initialized)
		{
			initialized = true;
			apr_status_t stat = apr_dbd_init(m_pool.getAPRPool());
			assert(stat == APR_SUCCESS);
		}
	}",5,2,main\cpp\dbappender.cpp,DBAppenderPriv.DBAppenderPriv,,false,53,63,DBAppenderPriv,,,1,ANY DBAppenderPriv.DBAppenderPriv ()
13051,METHOD,<empty>,<empty>,<empty>,1,,main\cpp\dbappender.cpp,DBAppenderPriv:<clinit>,,false,51,,<clinit>,,,12,
13064,METHOD,main\cpp\dbappender.cpp:<global>,TYPE_DECL,"static PatternMap getFormatSpecifiers()
{
    PatternMap specs;
    if (specs.empty())
    {
        RULES_PUT(""logger"", LoggerPatternConverter);
        RULES_PUT(""class"", ClassNamePatternConverter);
        RULES_PUT(""time"", DatePatternConverter);
        RULES_PUT(""shortfilename"", ShortFileLocationPatternConverter);
        RULES_PUT(""fullfilename"", FileLocationPatternConverter);
        RULES_PUT(""location"", FullLocationPatternConverter);
        RULES_PUT(""line"", LineLocationPatternConverter);
        RULES_PUT(""message"", MessagePatternConverter);
        RULES_PUT(""method"", MethodLocationPatternConverter);
        RULES_PUT(""level"", LevelPatternConverter);
        RULES_PUT(""thread"", ThreadPatternConverter);
        RULES_PUT(""threadname"", ThreadUsernamePatternConverter);
        RULES_PUT(""ndc"", NDCPatternConverter);
    }
    return specs;
}",1,8,main\cpp\dbappender.cpp,getFormatSpecifiers,,false,80,100,getFormatSpecifiers,,,4,PatternMap getFormatSpecifiers ()
13298,METHOD,main\cpp\dbappender.cpp:<global>,TYPE_DECL,"DBAppender::DBAppender()
    : AppenderSkeleton (std::make_unique<DBAppenderPriv>())
{
}",1,1,main\cpp\dbappender.cpp,DBAppender.DBAppender,,false,102,105,DBAppender,,,5,ANY DBAppender.DBAppender ()
13302,METHOD,main\cpp\dbappender.cpp:<global>,TYPE_DECL,"DBAppender::~DBAppender()
{
    close();
}",1,1,main\cpp\dbappender.cpp,DBAppender.~DBAppender,,false,107,110,~DBAppender,,,6,ANY DBAppender.~DBAppender ()
13307,METHOD,main\cpp\dbappender.cpp:<global>,TYPE_DECL,"void DBAppender::close(){
    if(_priv->m_driver && _priv->m_databaseHandle){
        apr_dbd_close(_priv->m_driver, _priv->m_databaseHandle);
    }
    _priv->m_driver = nullptr;
    _priv->m_databaseHandle = nullptr;
}",1,7,main\cpp\dbappender.cpp,DBAppender.close,,false,112,118,close,,,7,void DBAppender.close ()
13379,METHOD,main\cpp\dbappender.cpp:<global>,TYPE_DECL,"void DBAppender::setOption(const LogString& option, const LogString& value){
    if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""COLUMNMAPPING""), LOG4CXX_STR(""columnmapping"")))
    {
        _priv->mappedName.push_back(value);
    }
    else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""DRIVERNAME""), LOG4CXX_STR(""drivername"")))
    {
        Transcoder::encodeUTF8(value, _priv->driverName);
    }
    else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""DRIVERPARAMS""), LOG4CXX_STR(""driverparams"")))
    {
        Transcoder::encodeUTF8(value, _priv->driverParams);
    }
    else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""DATABASENAME""), LOG4CXX_STR(""databasename"")))
    {
        Transcoder::encodeUTF8(value, _priv->databaseName);
    }
    else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""SQL""), LOG4CXX_STR(""sql"")))
    {
        Transcoder::encodeUTF8(value, _priv->sqlStatement);
    }
    else
    {
        AppenderSkeleton::setOpti...",1,8,main\cpp\dbappender.cpp,DBAppender.setOption,,false,120,145,setOption,,,8,"void DBAppender.setOption (LogString,LogString)"
13530,METHOD,main\cpp\dbappender.cpp:<global>,TYPE_DECL,"void DBAppender::activateOptions(helpers::Pool& p){
    apr_status_t stat = apr_dbd_get_driver(_priv->m_pool.getAPRPool(),
                                           _priv->driverName.c_str(),
                                           const_cast<const apr_dbd_driver_t**>(&_priv->m_driver));

    if(stat != APR_SUCCESS){
        LogString errMsg = LOG4CXX_STR(""Unable to get driver named "");
        LOG4CXX_DECODE_CHAR(driverName, _priv->driverName);
        errMsg.append(driverName);
        LogLog::error(errMsg);
        _priv->errorHandler->error(errMsg);
        return;
    }

    stat = apr_dbd_open(_priv->m_driver,
                        _priv->m_pool.getAPRPool(),
                        _priv->driverParams.c_str(),
                        &_priv->m_databaseHandle);
    if(stat != APR_SUCCESS){
        LogLog::error(LOG4CXX_STR(""Unable to open database""));
        _priv->errorHandler->error(LOG4CXX_STR(""Unable to open database""));
        return;
    }

    if(!_priv->databas...",1,43,main\cpp\dbappender.cpp,DBAppender.activateOptions,,false,147,209,activateOptions,,,9,void DBAppender.activateOptions (ANY)
13984,METHOD,main\cpp\dbappender.cpp:<global>,TYPE_DECL,"void DBAppender::append(const spi::LoggingEventPtr& event, helpers::Pool& p){
	std::vector<std::string> ls_args;
    std::vector<const char*> args;
    int stat;
    int num_rows;

    if(_priv->m_driver == nullptr ||
            _priv->m_databaseHandle == nullptr ||
            _priv->preparedStmt == nullptr){
        _priv->errorHandler->error(LOG4CXX_STR(""DBAppender not initialized properly: logging not available""));
        return;
    }

    for(auto& converter : _priv->converters){
        LogString str_data;
        converter->format(event, str_data, p);
		LOG4CXX_ENCODE_CHAR(new_str_data, str_data);
		ls_args.push_back(new_str_data);
    }

	for(std::string& str : ls_args){
        args.push_back(str.data());
    }
    args.push_back(nullptr);

    stat = apr_dbd_pquery(_priv->m_driver,
                          _priv->m_pool.getAPRPool(),
                          _priv->m_databaseHandle,
                          &num_rows,
                          _priv->preparedStmt,
  ...",1,7,main\cpp\dbappender.cpp,DBAppender.append,,false,211,250,append,,,10,"void DBAppender.append (ANY,ANY)"
14243,METHOD,main\cpp\defaultconfigurator.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\defaultconfigurator.cpp,main\cpp\defaultconfigurator.cpp:<global>,,false,1,200,<global>,,,1,
14251,METHOD,main\cpp\defaultconfigurator.cpp:<global>,TYPE_DECL,"void DefaultConfigurator::setConfigurationFileName(const LogString& path)
{
	DefaultConfiguratorPath = path;
}",1,1,main\cpp\defaultconfigurator.cpp,DefaultConfigurator.setConfigurationFileName,,false,38,41,setConfigurationFileName,,,2,void DefaultConfigurator.setConfigurationFileName (LogString)
14259,METHOD,main\cpp\defaultconfigurator.cpp:<global>,TYPE_DECL,"void DefaultConfigurator::setConfigurationWatchSeconds(int seconds)
{
	DefaultConfiguratorWatchSeconds = seconds;
}",1,1,main\cpp\defaultconfigurator.cpp,DefaultConfigurator.setConfigurationWatchSeconds,,false,44,47,setConfigurationWatchSeconds,,,3,void DefaultConfigurator.setConfigurationWatchSeconds (int)
14271,METHOD,main\cpp\defaultconfigurator.cpp:<global>,TYPE_DECL,"void DefaultConfigurator::configure(LoggerRepositoryPtr repository)
{
	repository->setConfigured(true);
	const LogString configuratorClassName(getConfiguratorClass());

	LogString configurationFileName = DefaultConfiguratorPath;
	if (configurationFileName.empty())
		configurationFileName = getConfigurationFileName();
	Pool pool;
	File configuration;

	if (configurationFileName.empty())
	{
		LogString names[4] =
			{ LOG4CXX_STR(""log4cxx.xml"")
			, LOG4CXX_STR(""log4cxx.properties"")
			, LOG4CXX_STR(""log4j.xml"")
			, LOG4CXX_STR(""log4j.properties"")
			};

		for (int i = 0; i < 4; i++)
		{
			File candidate(names[i]);

			LogString debugMsg = LOG4CXX_STR(""Checking file "");
			debugMsg.append(names[i]);
			LogLog::debug(debugMsg);
			if (candidate.exists(pool))
			{
				configuration = candidate;
				break;
			}
		}
	}
	else
	{
		configuration.setPath(configurationFileName);
	}

	if (configuration.exists(pool))
	{
		LogString msg(LOG4CXX_STR(""Using configuration file [""));
		msg += conf...",1,1,main\cpp\defaultconfigurator.cpp,DefaultConfigurator.configure,,false,51,122,configure,,,6,void DefaultConfigurator.configure (LoggerRepositoryPtr)
14445,METHOD,main\cpp\defaultconfigurator.cpp:<global>,TYPE_DECL,"const LogString DefaultConfigurator::getConfiguratorClass()
{

	// Use automatic configration to configure the default hierarchy
	const LogString log4jConfiguratorClassName(
		OptionConverter::getSystemProperty(LOG4CXX_STR(""log4j.configuratorClass""), LOG4CXX_STR("""")));
	const LogString configuratorClassName(
		OptionConverter::getSystemProperty(LOG4CXX_STR(""LOG4CXX_CONFIGURATOR_CLASS""),
			log4jConfiguratorClassName));
	return configuratorClassName;
}",1,1,main\cpp\defaultconfigurator.cpp,DefaultConfigurator.getConfiguratorClass,,false,124,134,getConfiguratorClass,,,7,LogString DefaultConfigurator.getConfiguratorClass ()
14470,METHOD,main\cpp\defaultconfigurator.cpp:<global>,TYPE_DECL,"const LogString DefaultConfigurator::getConfigurationFileName()
{
	static const WideLife<LogString> LOG4CXX_DEFAULT_CONFIGURATION_KEY(LOG4CXX_STR(""LOG4CXX_CONFIGURATION""));
	static const WideLife<LogString> LOG4J_DEFAULT_CONFIGURATION_KEY(LOG4CXX_STR(""log4j.configuration""));
	const LogString log4jConfigurationFileName(
		OptionConverter::getSystemProperty(LOG4J_DEFAULT_CONFIGURATION_KEY, LOG4CXX_STR("""")));
	const LogString configurationFileName(
		OptionConverter::getSystemProperty(LOG4CXX_DEFAULT_CONFIGURATION_KEY,
			log4jConfigurationFileName));
	return configurationFileName;
}",1,1,main\cpp\defaultconfigurator.cpp,DefaultConfigurator.getConfigurationFileName,,false,137,147,getConfigurationFileName,,,8,LogString DefaultConfigurator.getConfigurationFileName ()
14501,METHOD,main\cpp\defaultconfigurator.cpp:<global>,TYPE_DECL,"int DefaultConfigurator::getConfigurationWatchDelay()
{
	static const WideLife<LogString> LOG4CXX_DEFAULT_CONFIGURATION_WATCH_KEY(LOG4CXX_STR(""LOG4CXX_CONFIGURATION_WATCH_SECONDS""));
	LogString optionStr = OptionConverter::getSystemProperty(LOG4CXX_DEFAULT_CONFIGURATION_WATCH_KEY, LogString());
	int milliseconds = 0;
	if (!optionStr.empty())
		milliseconds = StringHelper::toInt(optionStr) * MillisecondsPerSecond;
	return milliseconds;
}",1,1,main\cpp\defaultconfigurator.cpp,DefaultConfigurator.getConfigurationWatchDelay,,false,150,158,getConfigurationWatchDelay,,,9,int DefaultConfigurator.getConfigurationWatchDelay ()
14540,METHOD,main\cpp\defaultconfigurator.cpp:<global>,TYPE_DECL,"LOG4CXX_NS::spi::ConfigurationStatus DefaultConfigurator::tryLoadFile(const LogString& filename){
#if LOG4CXX_HAS_DOMCONFIGURATOR
	if(helpers::StringHelper::endsWith(filename, LOG4CXX_STR("".xml""))){
		return LOG4CXX_NS::xml::DOMConfigurator::configure(filename);
	}
#endif
	if(helpers::StringHelper::endsWith(filename, LOG4CXX_STR("".properties""))){
		return LOG4CXX_NS::PropertyConfigurator::configure(filename);
	}

	return LOG4CXX_NS::spi::ConfigurationStatus::NotConfigured;
}",1,1,main\cpp\defaultconfigurator.cpp,DefaultConfigurator.tryLoadFile,,false,160,171,tryLoadFile,,,10,ConfigurationStatus DefaultConfigurator.tryLoadFile (LogString)
14572,METHOD,main\cpp\defaultconfigurator.cpp:<global>,TYPE_DECL,"std::tuple<LOG4CXX_NS::spi::ConfigurationStatus,LogString>
DefaultConfigurator::configureFromFile(const std::vector<LogString>& directories, const std::vector<LogString>& filenames){
	using ResultType = std::tuple<LOG4CXX_NS::spi::ConfigurationStatus, LogString>;
	LOG4CXX_NS::helpers::Pool pool;

	for( LogString dir : directories ){
		for( LogString fname : filenames ){
			LogString canidate_str = dir + LOG4CXX_STR(""/"") + fname;
			File candidate(canidate_str);

			LogString debugMsg = LOG4CXX_STR(""Checking file "");
			debugMsg.append(canidate_str);
			LogLog::debug(debugMsg);
			if (candidate.exists(pool))
			{
				LOG4CXX_NS::spi::ConfigurationStatus configStatus = tryLoadFile(canidate_str);
				if( configStatus == LOG4CXX_NS::spi::ConfigurationStatus::Configured ){
					return ResultType{configStatus, canidate_str};
				}
				LogLog::debug(LOG4CXX_STR(""Unable to load file: trying next""));
			}
		}
	}

	return ResultType{LOG4CXX_NS::spi::ConfigurationStatus::NotConfigured, LogStri...",1,1,main\cpp\defaultconfigurator.cpp,DefaultConfigurator.configureFromFile,,false,173,198,configureFromFile,,,11,"tuple<LOG4CXX_NS::spi::ConfigurationStatus,LogString> DefaultConfigurator.configureFromFile (ANY,ANY)"
14669,METHOD,main\cpp\defaultloggerfactory.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\defaultloggerfactory.cpp,main\cpp\defaultloggerfactory.cpp:<global>,,false,1,30,<global>,,,1,
14673,METHOD,main\cpp\defaultloggerfactory.cpp:<global>,TYPE_DECL,"LoggerPtr DefaultLoggerFactory::makeNewLoggerInstance(
	LOG4CXX_NS::helpers::Pool& pool,
	const LogString& name) const
{
	return std::make_shared<Logger>(pool, name);
}",1,1,main\cpp\defaultloggerfactory.cpp,DefaultLoggerFactory.makeNewLoggerInstance,,false,25,30,makeNewLoggerInstance,,,3,"LoggerPtr DefaultLoggerFactory.makeNewLoggerInstance (ANY,LogString)"
14695,METHOD,main\cpp\defaultrepositoryselector.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\defaultrepositoryselector.cpp,main\cpp\defaultrepositoryselector.cpp:<global>,,false,1,40,<global>,,,1,
14699,METHOD,main\cpp\defaultrepositoryselector.cpp:<global>,TYPE_DECL,"DefaultRepositorySelector::DefaultRepositorySelector(const LoggerRepositoryPtr repository1)
	: m_priv(std::make_unique<DefaultRepositorySelectorPrivate>())
{
	m_priv->repository = repository1;
}",1,1,main\cpp\defaultrepositoryselector.cpp,DefaultRepositorySelector.DefaultRepositorySelector,,false,29,33,DefaultRepositorySelector,,,2,ANY DefaultRepositorySelector.DefaultRepositorySelector (LoggerRepositoryPtr)
14709,METHOD,main\cpp\defaultrepositoryselector.cpp:<global>,TYPE_DECL,DefaultRepositorySelector::~DefaultRepositorySelector() {},1,58,main\cpp\defaultrepositoryselector.cpp,DefaultRepositorySelector.~DefaultRepositorySelector,,false,35,35,~DefaultRepositorySelector,,,3,ANY DefaultRepositorySelector.~DefaultRepositorySelector ()
14713,METHOD,main\cpp\defaultrepositoryselector.cpp:<global>,TYPE_DECL,"LoggerRepositoryPtr DefaultRepositorySelector::getLoggerRepository()
{
	return m_priv->repository;
}",1,1,main\cpp\defaultrepositoryselector.cpp,DefaultRepositorySelector.getLoggerRepository,,false,37,40,getLoggerRepository,,,4,LoggerRepositoryPtr DefaultRepositorySelector.getLoggerRepository ()
14788,METHOD,main\cpp\domconfigurator.cpp:<global>,TYPE_DECL,<global>,1,16,main\cpp\domconfigurator.cpp,main\cpp\domconfigurator.cpp:<global>,,false,1,1136,<global>,,,1,
14797,METHOD,LOG4CXX_NS.xml.XMLWatchdog,TYPE_DECL,"XMLWatchdog(const File& filename) : FileWatchdog(filename)
		{
		}",3,3,main\cpp\domconfigurator.cpp,LOG4CXX_NS.xml.XMLWatchdog.XMLWatchdog,,false,75,77,XMLWatchdog,,,1,ANY LOG4CXX_NS.xml.XMLWatchdog.XMLWatchdog (File)
14802,METHOD,LOG4CXX_NS.xml.XMLWatchdog,TYPE_DECL,"void doOnChange()
		{
			DOMConfigurator().doConfigure(file(),
				LogManager::getLoggerRepository());
		}",3,3,main\cpp\domconfigurator.cpp,LOG4CXX_NS.xml.XMLWatchdog.doOnChange,,false,83,87,doOnChange,,,2,void LOG4CXX_NS.xml.XMLWatchdog.doOnChange ()
14821,METHOD,main\cpp\domconfigurator.cpp:<global>,TYPE_DECL,"DOMConfigurator::DOMConfigurator()
	: m_priv(std::make_unique<DOMConfiguratorPrivate>())
{
}",1,1,main\cpp\domconfigurator.cpp,DOMConfigurator.DOMConfigurator,,false,125,128,DOMConfigurator,,,7,ANY DOMConfigurator.DOMConfigurator ()
14825,METHOD,main\cpp\domconfigurator.cpp:<global>,TYPE_DECL,DOMConfigurator::~DOMConfigurator() {},1,38,main\cpp\domconfigurator.cpp,DOMConfigurator.~DOMConfigurator,,false,130,130,~DOMConfigurator,,,8,ANY DOMConfigurator.~DOMConfigurator ()
14829,METHOD,main\cpp\domconfigurator.cpp:<global>,TYPE_DECL,"AppenderPtr DOMConfigurator::findAppenderByName(LOG4CXX_NS::helpers::Pool& p,
	LOG4CXX_NS::helpers::CharsetDecoderPtr& utf8Decoder,
	apr_xml_elem* element,
	apr_xml_doc* doc,
	const LogString& appenderName,
	AppenderMap& appenders)
{
	AppenderPtr appender;
	std::string tagName(element->name);

	if (tagName == APPENDER_TAG)
	{
		if (appenderName == getAttribute(utf8Decoder, element, NAME_ATTR))
		{
			appender = parseAppender(p, utf8Decoder, element, doc, appenders);
		}
	}

	if (element->first_child && !appender)
	{
		appender = findAppenderByName(p, utf8Decoder, element->first_child, doc, appenderName, appenders);
	}

	if (element->next && !appender)
	{
		appender = findAppenderByName(p, utf8Decoder, element->next, doc, appenderName, appenders);
	}

	return appender;
}",1,16,main\cpp\domconfigurator.cpp,DOMConfigurator.findAppenderByName,,false,135,164,findAppenderByName,,,9,"AppenderPtr DOMConfigurator.findAppenderByName (ANY,ANY,apr_xml_elem*,apr_xml_doc*,LogString,AppenderMap)"
14910,METHOD,main\cpp\domconfigurator.cpp:<global>,TYPE_DECL,"AppenderPtr DOMConfigurator::findAppenderByReference(
	LOG4CXX_NS::helpers::Pool& p,
	LOG4CXX_NS::helpers::CharsetDecoderPtr& utf8Decoder,
	apr_xml_elem* appenderRef,
	apr_xml_doc* doc,
	AppenderMap& appenders)
{
	LogString appenderName(subst(getAttribute(utf8Decoder, appenderRef, REF_ATTR)));
	AppenderMap::const_iterator match = appenders.find(appenderName);
	AppenderPtr appender;

	if (match != appenders.end())
	{
		appender = match->second;
	}
	else if (doc)
	{
		appender = findAppenderByName(p, utf8Decoder, doc->root, doc, appenderName, appenders);

		if (appender)
		{
			appenders.insert(AppenderMap::value_type(appenderName, appender));
		}
	}

	if (!appender)
	{
		LogLog::error(LOG4CXX_STR(""No appender named ["") +
			appenderName + LOG4CXX_STR(""] could be found.""));
	}

	return appender;
}",1,69,main\cpp\domconfigurator.cpp,DOMConfigurator.findAppenderByReference,,false,169,201,findAppenderByReference,,,10,"AppenderPtr DOMConfigurator.findAppenderByReference (ANY,ANY,apr_xml_elem*,apr_xml_doc*,AppenderMap)"
14996,METHOD,main\cpp\domconfigurator.cpp:<global>,TYPE_DECL,"AppenderPtr DOMConfigurator::parseAppender(Pool& p,
	LOG4CXX_NS::helpers::CharsetDecoderPtr& utf8Decoder,
	apr_xml_elem* appenderElement,
	apr_xml_doc* doc,
	AppenderMap& appenders)
{

	LogString className(subst(getAttribute(utf8Decoder, appenderElement, CLASS_ATTR)));
	LogLog::debug(LOG4CXX_STR(""Class name: ["") + className + LOG4CXX_STR(""]""));

	try
	{
		ObjectPtr instance = ObjectPtr(Loader::loadClass(className).newInstance());
		AppenderPtr appender = LOG4CXX_NS::cast<Appender>(instance);
		PropertySetter propSetter(appender);

		appender->setName(subst(getAttribute(utf8Decoder, appenderElement, NAME_ATTR)));

		for (apr_xml_elem* currentElement = appenderElement->first_child;
			currentElement;
			currentElement = currentElement->next)
		{

			std::string tagName(currentElement->name);

			// Parse appender parameters
			if (tagName == PARAM_TAG)
			{
				setParameter(p, utf8Decoder, currentElement, propSetter);
			}
			// Set appender layout
			else if (tagName == LAYOUT_TAG)
	...",1,70,main\cpp\domconfigurator.cpp,DOMConfigurator.parseAppender,,false,206,321,parseAppender,,,11,"AppenderPtr DOMConfigurator.parseAppender (Pool,ANY,apr_xml_elem*,apr_xml_doc*,AppenderMap)"
15399,METHOD,main\cpp\domconfigurator.cpp:<global>,TYPE_DECL,"void DOMConfigurator::parseErrorHandler(Pool& p,
	LOG4CXX_NS::helpers::CharsetDecoderPtr& utf8Decoder,
	apr_xml_elem* element,
	AppenderPtr& appender,
	apr_xml_doc* doc,
	AppenderMap& appenders)
{

	ErrorHandlerPtr eh;
	std::shared_ptr<Object> obj = OptionConverter::instantiateByClassName(
			subst(getAttribute(utf8Decoder, element, CLASS_ATTR)),
			ErrorHandler::getStaticClass(),
			0);
	eh = LOG4CXX_NS::cast<ErrorHandler>(obj);

	if (eh != 0)
	{
		eh->setAppender(appender);

		PropertySetter propSetter(eh);

		for (apr_xml_elem* currentElement = element->first_child;
			currentElement;
			currentElement = currentElement->next)
		{
			std::string tagName(currentElement->name);

			if (tagName == PARAM_TAG)
			{
				setParameter(p, utf8Decoder, currentElement, propSetter);
			}
			else if (tagName == APPENDER_REF_TAG)
			{
				eh->setBackupAppender(findAppenderByReference(p, utf8Decoder, currentElement, doc, appenders));
			}
			else if (tagName == LOGGER_REF)
			{
				LogString log...",1,44,main\cpp\domconfigurator.cpp,DOMConfigurator.parseErrorHandler,,false,326,382,parseErrorHandler,,,12,"void DOMConfigurator.parseErrorHandler (Pool,ANY,apr_xml_elem*,AppenderPtr,apr_xml_doc*,AppenderMap)"
15595,METHOD,main\cpp\domconfigurator.cpp:<global>,TYPE_DECL,"void DOMConfigurator::parseFilters(Pool& p,
	LOG4CXX_NS::helpers::CharsetDecoderPtr& utf8Decoder,
	apr_xml_elem* element,
	std::vector<LOG4CXX_NS::spi::FilterPtr>& filters)
{
	LogString clazz = subst(getAttribute(utf8Decoder, element, CLASS_ATTR));
	FilterPtr filter;
	std::shared_ptr<Object> obj = OptionConverter::instantiateByClassName(clazz,
			Filter::getStaticClass(), 0);
	filter = LOG4CXX_NS::cast<Filter>(obj);

	if (filter != 0)
	{
		PropertySetter propSetter(filter);

		for (apr_xml_elem* currentElement = element->first_child;
			currentElement;
			currentElement = currentElement->next)
		{
			std::string tagName(currentElement->name);

			if (tagName == PARAM_TAG)
			{
				setParameter(p, utf8Decoder, currentElement, propSetter);
			}
		}

		propSetter.activate(p);
		filters.push_back(filter);
	}
}",1,60,main\cpp\domconfigurator.cpp,DOMConfigurator.parseFilters,,false,387,417,parseFilters,,,13,"void DOMConfigurator.parseFilters (Pool,ANY,apr_xml_elem*,ANY)"
15691,METHOD,main\cpp\domconfigurator.cpp:<global>,TYPE_DECL,"void DOMConfigurator::parseLogger(
	LOG4CXX_NS::helpers::Pool& p,
	LOG4CXX_NS::helpers::CharsetDecoderPtr& utf8Decoder,
	apr_xml_elem* loggerElement,
	apr_xml_doc* doc,
	AppenderMap& appenders)
{
	// Create a new Logger object from the <category> element.
	LogString loggerName = subst(getAttribute(utf8Decoder, loggerElement, NAME_ATTR));

	LogLog::debug(LOG4CXX_STR(""Retreiving an instance of Logger.""));
	LoggerPtr logger = m_priv->repository->getLogger(loggerName, m_priv->loggerFactory);

	// Setting up a logger needs to be an atomic operation, in order
	// to protect potential log operations while logger
	// configuration is in progress.
	bool additivity = OptionConverter::toBoolean(
			subst(getAttribute(utf8Decoder, loggerElement, ADDITIVITY_ATTR)),
			true);

	LogLog::debug(LOG4CXX_STR(""Setting ["") + logger->getName() + LOG4CXX_STR(""] additivity to ["") +
		(additivity ? LogString(LOG4CXX_STR(""true"")) : LogString(LOG4CXX_STR(""false""))) + LOG4CXX_STR(""].""));
	logger->setAdditivity...",1,71,main\cpp\domconfigurator.cpp,DOMConfigurator.parseLogger,,false,422,446,parseLogger,,,14,"void DOMConfigurator.parseLogger (ANY,ANY,apr_xml_elem*,apr_xml_doc*,AppenderMap)"
15783,METHOD,main\cpp\domconfigurator.cpp:<global>,TYPE_DECL,"void DOMConfigurator::parseLoggerFactory(
	LOG4CXX_NS::helpers::Pool& p,
	LOG4CXX_NS::helpers::CharsetDecoderPtr& utf8Decoder,
	apr_xml_elem* factoryElement)
{
	LogString className(subst(getAttribute(utf8Decoder, factoryElement, CLASS_ATTR)));

	if (className.empty())
	{
		LogLog::error(LOG4CXX_STR(""Logger Factory tag class attribute not found.""));
		LogLog::debug(LOG4CXX_STR(""No Logger Factory configured.""));
	}
	else
	{
		LogLog::debug(LOG4CXX_STR(""Desired logger factory: ["") + className + LOG4CXX_STR(""]""));
		std::shared_ptr<Object> obj = OptionConverter::instantiateByClassName(
				className,
				LoggerFactory::getStaticClass(),
				0);
		m_priv->loggerFactory = LOG4CXX_NS::cast<LoggerFactory>(obj);
		PropertySetter propSetter(m_priv->loggerFactory);

		for (apr_xml_elem* currentElement = factoryElement->first_child;
			currentElement;
			currentElement = currentElement->next)
		{
			std::string tagName(currentElement->name);

			if (tagName == PARAM_TAG)
			{
				setParameter(p...",1,69,main\cpp\domconfigurator.cpp,DOMConfigurator.parseLoggerFactory,,false,451,485,parseLoggerFactory,,,15,"void DOMConfigurator.parseLoggerFactory (ANY,ANY,apr_xml_elem*)"
15896,METHOD,main\cpp\domconfigurator.cpp:<global>,TYPE_DECL,"void DOMConfigurator::parseRoot(
	LOG4CXX_NS::helpers::Pool& p,
	LOG4CXX_NS::helpers::CharsetDecoderPtr& utf8Decoder,
	apr_xml_elem* rootElement,
	apr_xml_doc* doc,
	AppenderMap& appenders)
{
	LoggerPtr root = m_priv->repository->getRootLogger();
	parseChildrenOfLoggerElement(p, utf8Decoder, rootElement, root, true, doc, appenders);
}",1,1,main\cpp\domconfigurator.cpp,DOMConfigurator.parseRoot,,false,490,499,parseRoot,,,16,"void DOMConfigurator.parseRoot (ANY,ANY,apr_xml_elem*,apr_xml_doc*,AppenderMap)"
15922,METHOD,main\cpp\domconfigurator.cpp:<global>,TYPE_DECL,"void DOMConfigurator::parseChildrenOfLoggerElement(
	LOG4CXX_NS::helpers::Pool& p,
	LOG4CXX_NS::helpers::CharsetDecoderPtr& utf8Decoder,
	apr_xml_elem* loggerElement, LoggerPtr logger, bool isRoot,
	apr_xml_doc* doc,
	AppenderMap& appenders)
{
	PropertySetter propSetter(logger);
	std::vector<AppenderPtr> newappenders;

	// Remove all existing appenders from logger. They will be
	// reconstructed if need be.
	logger->removeAllAppenders();

	for (apr_xml_elem* currentElement = loggerElement->first_child;
		currentElement;
		currentElement = currentElement->next)
	{
		std::string tagName(currentElement->name);

		if (tagName == APPENDER_REF_TAG)
		{
			AppenderPtr appender = findAppenderByReference(p, utf8Decoder, currentElement, doc, appenders);
			LogString refName =  subst(getAttribute(utf8Decoder, currentElement, REF_ATTR));

			if (appender != 0)
			{
				LogLog::debug(LOG4CXX_STR(""Adding appender named ["") + refName +
					LOG4CXX_STR(""] to logger ["") + logger->getName() + LOG4CX...",1,17,main\cpp\domconfigurator.cpp,DOMConfigurator.parseChildrenOfLoggerElement,,false,504,558,parseChildrenOfLoggerElement,,,17,"void DOMConfigurator.parseChildrenOfLoggerElement (ANY,ANY,apr_xml_elem*,LoggerPtr,bool,apr_xml_doc*,AppenderMap)"
16084,METHOD,main\cpp\domconfigurator.cpp:<global>,TYPE_DECL,"LayoutPtr DOMConfigurator::parseLayout (
	LOG4CXX_NS::helpers::Pool& p,
	LOG4CXX_NS::helpers::CharsetDecoderPtr& utf8Decoder,
	apr_xml_elem* layout_element)
{
	LogString className(subst(getAttribute(utf8Decoder, layout_element, CLASS_ATTR)));
	LogLog::debug(LOG4CXX_STR(""Parsing layout of class: \"""") + className + LOG4CXX_STR(""\""""));

	try
	{
		ObjectPtr instance = ObjectPtr(Loader::loadClass(className).newInstance());
		LayoutPtr layout = LOG4CXX_NS::cast<Layout>(instance);
		PropertySetter propSetter(layout);

		for (apr_xml_elem* currentElement = layout_element->first_child;
			currentElement;
			currentElement = currentElement->next)
		{
			std::string tagName(currentElement->name);

			if (tagName == PARAM_TAG)
			{
				setParameter(p, utf8Decoder, currentElement, propSetter);
			}
		}

		propSetter.activate(p);
		return layout;
	}
	catch (Exception& oops)
	{
		LogLog::error(LOG4CXX_STR(""Could not create the Layout. Reported error follows.""),
			oops);
		return 0;
	}
}",1,69,main\cpp\domconfigurator.cpp,DOMConfigurator.parseLayout,,false,563,598,parseLayout,,,18,"LayoutPtr DOMConfigurator.parseLayout (ANY,ANY,apr_xml_elem*)"
16187,METHOD,main\cpp\domconfigurator.cpp:<global>,TYPE_DECL,"ObjectPtr DOMConfigurator::parseTriggeringPolicy (
	LOG4CXX_NS::helpers::Pool& p,
	LOG4CXX_NS::helpers::CharsetDecoderPtr& utf8Decoder,
	apr_xml_elem* layout_element)
{
	LogString className = subst(getAttribute(utf8Decoder, layout_element, CLASS_ATTR));
	LogLog::debug(LOG4CXX_STR(""Parsing triggering policy of class: \"""") + className + LOG4CXX_STR(""\""""));

	try
	{
		ObjectPtr instance = ObjectPtr(Loader::loadClass(className).newInstance());
		PropertySetter propSetter(instance);

		for (apr_xml_elem* currentElement = layout_element->first_child;
			currentElement;
			currentElement = currentElement->next)
		{
			std::string tagName(currentElement->name);

			if (tagName == PARAM_TAG)
			{
				setParameter(p, utf8Decoder, currentElement, propSetter);
			}
			else if (tagName == FILTER_TAG)
			{
				std::vector<LOG4CXX_NS::spi::FilterPtr> filters;
				parseFilters(p, utf8Decoder, currentElement, filters);
				FilterBasedTriggeringPolicyPtr fbtp = LOG4CXX_NS::cast<FilterBasedTriggeringP...",1,71,main\cpp\domconfigurator.cpp,DOMConfigurator.parseTriggeringPolicy,,false,603,653,parseTriggeringPolicy,,,19,"ObjectPtr DOMConfigurator.parseTriggeringPolicy (ANY,ANY,apr_xml_elem*)"
16345,METHOD,main\cpp\domconfigurator.cpp:<global>,TYPE_DECL,"RollingPolicyPtr DOMConfigurator::parseRollingPolicy (
	LOG4CXX_NS::helpers::Pool& p,
	LOG4CXX_NS::helpers::CharsetDecoderPtr& utf8Decoder,
	apr_xml_elem* layout_element)
{
	LogString className = subst(getAttribute(utf8Decoder, layout_element, CLASS_ATTR));
	LogLog::debug(LOG4CXX_STR(""Parsing rolling policy of class: \"""") + className + LOG4CXX_STR(""\""""));

	try
	{
		ObjectPtr instance = ObjectPtr(Loader::loadClass(className).newInstance());
		RollingPolicyPtr layout = LOG4CXX_NS::cast<RollingPolicy>(instance);
		PropertySetter propSetter(layout);

		for (apr_xml_elem* currentElement = layout_element->first_child;
			currentElement;
			currentElement = currentElement->next)
		{
			std::string tagName(currentElement->name);

			if (tagName == PARAM_TAG)
			{
				setParameter(p, utf8Decoder, currentElement, propSetter);
			}
		}

		propSetter.activate(p);
		return layout;
	}
	catch (Exception& oops)
	{
		LogLog::error(LOG4CXX_STR(""Could not create the RollingPolicy. Reported error foll...",1,71,main\cpp\domconfigurator.cpp,DOMConfigurator.parseRollingPolicy,,false,658,693,parseRollingPolicy,,,20,"RollingPolicyPtr DOMConfigurator.parseRollingPolicy (ANY,ANY,apr_xml_elem*)"
16449,METHOD,main\cpp\domconfigurator.cpp:<global>,TYPE_DECL,"void DOMConfigurator::parseLevel(
	LOG4CXX_NS::helpers::Pool& p,
	LOG4CXX_NS::helpers::CharsetDecoderPtr& utf8Decoder,
	apr_xml_elem* element, LoggerPtr logger, bool isRoot)
{
	LogString loggerName = logger->getName();

	if (isRoot)
	{
		loggerName = LOG4CXX_STR(""root"");
	}

	LogString levelStr(subst(getAttribute(utf8Decoder, element, VALUE_ATTR)));
	LogLog::debug(LOG4CXX_STR(""Level value for "") + loggerName + LOG4CXX_STR("" is ["") + levelStr + LOG4CXX_STR(""].""));

	if (StringHelper::equalsIgnoreCase(levelStr, LOG4CXX_STR(""INHERITED""), LOG4CXX_STR(""inherited""))
		|| StringHelper::equalsIgnoreCase(levelStr, LOG4CXX_STR(""NULL""), LOG4CXX_STR(""null"")))
	{
		if (isRoot)
		{
			LogLog::error(LOG4CXX_STR(""Root level cannot be inherited. Ignoring directive.""));
		}
		else
		{
			logger->setLevel(0);
		}
	}
	else
	{
		LogString className(subst(getAttribute(utf8Decoder, element, CLASS_ATTR)));

		if (className.empty())
		{
			logger->setLevel(OptionConverter::toLevel(levelStr, Level::getDebug(...",1,61,main\cpp\domconfigurator.cpp,DOMConfigurator.parseLevel,,false,700,767,parseLevel,,,21,"void DOMConfigurator.parseLevel (ANY,ANY,apr_xml_elem*,LoggerPtr,bool)"
16642,METHOD,main\cpp\domconfigurator.cpp:<global>,TYPE_DECL,"void DOMConfigurator::setParameter(LOG4CXX_NS::helpers::Pool& p,
	LOG4CXX_NS::helpers::CharsetDecoderPtr& utf8Decoder,
	apr_xml_elem* elem,
	PropertySetter& propSetter)
{
	LogString name(subst(getAttribute(utf8Decoder, elem, NAME_ATTR)));
	LogString value(subst(getAttribute(utf8Decoder, elem, VALUE_ATTR)));
	value = subst(value);
	propSetter.setProperty(name, value, p);
}",1,54,main\cpp\domconfigurator.cpp,DOMConfigurator.setParameter,,false,769,778,setParameter,,,22,"void DOMConfigurator.setParameter (ANY,ANY,apr_xml_elem*,PropertySetter)"
16679,METHOD,main\cpp\domconfigurator.cpp:<global>,TYPE_DECL,"spi::ConfigurationStatus DOMConfigurator::doConfigure(const File& filename, spi::LoggerRepositoryPtr repository1)
{
	repository1->setConfigured(true);
	m_priv->repository = repository1;
	LogString msg(LOG4CXX_STR(""DOMConfigurator configuring file ""));
	msg.append(filename.getPath());
	msg.append(LOG4CXX_STR(""...""));
	LogLog::debug(msg);

	m_priv->loggerFactory = std::make_shared<DefaultLoggerFactory>();

	Pool p;
	apr_file_t* fd;

	log4cxx_status_t rv = filename.open(&fd, APR_READ, APR_OS_DEFAULT, p);

	if (rv != APR_SUCCESS)
	{
		// There is not technically an exception thrown here, but this behavior matches
		// what the PropertyConfigurator does
		IOException io(rv);
		LogString msg2(LOG4CXX_STR(""Could not read configuration file [""));
		msg2.append(filename.getPath());
		msg2.append(LOG4CXX_STR(""]. ""));
		LOG4CXX_DECODE_CHAR(msg, io.what());
		msg2.append(msg);
		LogLog::error(msg2);
		return spi::ConfigurationStatus::NotConfigured;
	}
	else
	{
		apr_xml_parser* parser = NULL;
	...",1,1,main\cpp\domconfigurator.cpp,DOMConfigurator.doConfigure,,false,780,850,doConfigure,,,23,"ConfigurationStatus DOMConfigurator.doConfigure (File,ANY)"
16925,METHOD,main\cpp\domconfigurator.cpp:<global>,TYPE_DECL,"spi::ConfigurationStatus DOMConfigurator::configure(const std::string& filename)
{
	File file(filename);
	return DOMConfigurator().doConfigure(file, LogManager::getLoggerRepository());
}",1,1,main\cpp\domconfigurator.cpp,DOMConfigurator.configure,,false,852,856,configure,,,24,ConfigurationStatus DOMConfigurator.configure (ANY)
16943,METHOD,main\cpp\domconfigurator.cpp:<global>,TYPE_DECL,"spi::ConfigurationStatus DOMConfigurator::configureAndWatch(const std::string& filename)
{
	return configureAndWatch(filename, FileWatchdog::DEFAULT_DELAY);
}",1,1,main\cpp\domconfigurator.cpp,DOMConfigurator.configureAndWatch,,false,883,886,configureAndWatch,,,25,ConfigurationStatus DOMConfigurator.configureAndWatch (ANY)
16954,METHOD,main\cpp\domconfigurator.cpp:<global>,TYPE_DECL,"spi::ConfigurationStatus DOMConfigurator::configureAndWatch(const std::string& filename, long delay)
{
	File file(filename);
	if ( xdog )
	{
		APRInitializer::unregisterCleanup(xdog);
		delete xdog;
	}

	spi::ConfigurationStatus status = DOMConfigurator().doConfigure(file, LogManager::getLoggerRepository());

	xdog = new XMLWatchdog(file);
	APRInitializer::registerCleanup(xdog);
	xdog->setDelay(delay);
	xdog->start();

	return status;
}",1,1,main\cpp\domconfigurator.cpp,DOMConfigurator.configureAndWatch,,false,909,926,configureAndWatch,,,26,"ConfigurationStatus DOMConfigurator.configureAndWatch (ANY,long)"
16998,METHOD,main\cpp\domconfigurator.cpp:<global>,TYPE_DECL,"void DOMConfigurator::parse(
	Pool& p,
	LOG4CXX_NS::helpers::CharsetDecoderPtr& utf8Decoder,
	apr_xml_elem* element,
	apr_xml_doc* doc,
	AppenderMap& appenders)
{
	std::string rootElementName(element->name);

	if (rootElementName != CONFIGURATION_TAG)
	{
		if (rootElementName == OLD_CONFIGURATION_TAG)
		{
			//LogLog::warn(LOG4CXX_STR(""The <"")+String(OLD_CONFIGURATION_TAG)+
			// LOG4CXX_STR(""> element has been deprecated.""));
			//LogLog::warn(LOG4CXX_STR(""Use the <"")+String(CONFIGURATION_TAG)+
			// LOG4CXX_STR(""> element instead.""));
		}
		else
		{
			LogLog::error(LOG4CXX_STR(""DOM element is - not a <configuration> element.""));
			return;
		}
	}

	LogString debugAttrib = subst(getAttribute(utf8Decoder, element, INTERNAL_DEBUG_ATTR));

	static const WideLife<LogString> NULL_STRING(LOG4CXX_STR(""NULL""));
	LogLog::debug(LOG4CXX_STR(""debug attribute= \"""") + debugAttrib + LOG4CXX_STR(""\"".""));

	// if the log4j.dtd is not specified in the XML file, then the
	// ""debug"" attribute is ret...",1,24,main\cpp\domconfigurator.cpp,DOMConfigurator.parse,,false,991,1101,parse,,,27,"void DOMConfigurator.parse (Pool,ANY,apr_xml_elem*,apr_xml_doc*,AppenderMap)"
17354,METHOD,main\cpp\domconfigurator.cpp:<global>,TYPE_DECL,"LogString DOMConfigurator::subst(const LogString& value)
{
	try
	{
		return OptionConverter::substVars(value, m_priv->props);
	}
	catch (IllegalArgumentException& e)
	{
		LogLog::warn(LOG4CXX_STR(""Could not perform variable substitution.""), e);
		return value;
	}
}",1,1,main\cpp\domconfigurator.cpp,DOMConfigurator.subst,,false,1103,1114,subst,,,28,LogString DOMConfigurator.subst (LogString)
17380,METHOD,main\cpp\domconfigurator.cpp:<global>,TYPE_DECL,"LogString DOMConfigurator::getAttribute(
	LOG4CXX_NS::helpers::CharsetDecoderPtr& utf8Decoder,
	apr_xml_elem* element,
	const std::string& attrName)
{
	LogString attrValue;

	for (apr_xml_attr* attr = element->attr;
		attr;
		attr = attr->next)
	{
		if (attrName == attr->name)
		{
			ByteBuffer buf((char*) attr->value, strnlen_s(attr->value, MAX_ATTRIBUTE_NAME_LEN));
			utf8Decoder->decode(buf, attrValue);
		}
	}

	return attrValue;
}",1,62,main\cpp\domconfigurator.cpp,DOMConfigurator.getAttribute,,false,1117,1136,getAttribute,,,29,"LogString DOMConfigurator.getAttribute (ANY,apr_xml_elem*,ANY)"
17451,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\exception.cpp,main\cpp\exception.cpp:<global>,,false,1,498,<global>,,,1,
17453,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"Exception::Exception(const LogString& msg1)
{
	LOG4CXX_ENCODE_CHAR(m, msg1);
	size_t len = m.size();

	if (len > MSG_SIZE)
	{
		len = MSG_SIZE;
	}

#if defined(__STDC_LIB_EXT1__) || defined(__STDC_SECURE_LIB__)
	memcpy_s(msg, sizeof msg, m.data(), len);
#else
	memcpy(msg, m.data(), len);
#endif
	msg[len] = 0;
}",1,1,main\cpp\exception.cpp,Exception.Exception,,false,30,46,Exception,,,1,ANY Exception.Exception (LogString)
17488,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"Exception::Exception(const char* m)
{
#if defined(__STDC_LIB_EXT1__) || defined(__STDC_SECURE_LIB__)
	strncpy_s(msg, sizeof msg, m, MSG_SIZE);
#else
	strncpy(msg, m, MSG_SIZE);
#endif
	msg[MSG_SIZE] = 0;
}",1,1,main\cpp\exception.cpp,Exception.Exception,,false,48,56,Exception,,,2,ANY Exception.Exception (char*)
17502,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"Exception::Exception(const Exception& src) : std::exception()
{
#if defined(__STDC_LIB_EXT1__) || defined(__STDC_SECURE_LIB__)
	strcpy_s(msg, sizeof msg, src.msg);
#else
	strncpy(msg, src.msg, MSG_SIZE);
	msg[MSG_SIZE] = 0;
#endif
}",1,1,main\cpp\exception.cpp,Exception.Exception,,false,59,67,Exception,,,3,ANY Exception.Exception (Exception)
17518,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"Exception& Exception::operator=(const Exception& src)
{
#if defined(__STDC_LIB_EXT1__) || defined(__STDC_SECURE_LIB__)
	strcpy_s(msg, sizeof msg, src.msg);
#else
	strncpy(msg, src.msg, MSG_SIZE);
	msg[MSG_SIZE] = 0;
#endif
	return *this;
}",1,1,main\cpp\exception.cpp,Exception.operator =,,false,69,78,operator =,,,4,Exception Exception.operator = (Exception)
17537,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"const char* Exception::what() const throw()
{
	return msg;
}",1,1,main\cpp\exception.cpp,Exception.what,,false,80,83,what,,,5,const char* Exception.what ()
17543,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"RuntimeException::RuntimeException(log4cxx_status_t stat)
	: Exception(formatMessage(stat))
{
}",1,1,main\cpp\exception.cpp,RuntimeException.RuntimeException,,false,85,88,RuntimeException,,,6,ANY RuntimeException.RuntimeException (log4cxx_status_t)
17548,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"RuntimeException::RuntimeException(const LogString& msg1)
	: Exception(msg1)
{
}",1,1,main\cpp\exception.cpp,RuntimeException.RuntimeException,,false,90,93,RuntimeException,,,7,ANY RuntimeException.RuntimeException (LogString)
17553,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"RuntimeException::RuntimeException(const RuntimeException& src)
	: Exception(src)
{
}",1,1,main\cpp\exception.cpp,RuntimeException.RuntimeException,,false,95,98,RuntimeException,,,8,ANY RuntimeException.RuntimeException (RuntimeException)
17558,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"RuntimeException& RuntimeException::operator=(const RuntimeException& src)
{
	Exception::operator=(src);
	return *this;
}",1,1,main\cpp\exception.cpp,RuntimeException.operator =,,false,100,104,operator =,,,9,RuntimeException RuntimeException.operator = (RuntimeException)
17571,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"LogString RuntimeException::formatMessage(log4cxx_status_t stat)
{
	LogString s(LOG4CXX_STR(""RuntimeException: return code = ""));
	Pool p;
	StringHelper::toString(stat, p, s);
	return s;
}",1,1,main\cpp\exception.cpp,RuntimeException.formatMessage,,false,106,112,formatMessage,,,10,LogString RuntimeException.formatMessage (log4cxx_status_t)
17590,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"NullPointerException::NullPointerException(const LogString& msg1)
	: RuntimeException(msg1)
{
}",1,1,main\cpp\exception.cpp,NullPointerException.NullPointerException,,false,114,117,NullPointerException,,,11,ANY NullPointerException.NullPointerException (LogString)
17595,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"NullPointerException::NullPointerException(const NullPointerException& src)
	: RuntimeException(src)
{
}",1,1,main\cpp\exception.cpp,NullPointerException.NullPointerException,,false,119,122,NullPointerException,,,12,ANY NullPointerException.NullPointerException (NullPointerException)
17600,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"NullPointerException& NullPointerException::operator=(const NullPointerException& src)
{
	RuntimeException::operator=(src);
	return *this;
}",1,1,main\cpp\exception.cpp,NullPointerException.operator =,,false,124,128,operator =,,,13,NullPointerException NullPointerException.operator = (NullPointerException)
17613,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"IllegalArgumentException::IllegalArgumentException(const LogString& msg1)
	: RuntimeException(msg1)
{
}",1,1,main\cpp\exception.cpp,IllegalArgumentException.IllegalArgumentException,,false,130,133,IllegalArgumentException,,,14,ANY IllegalArgumentException.IllegalArgumentException (LogString)
17618,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"IllegalArgumentException::IllegalArgumentException(const IllegalArgumentException& src)
	: RuntimeException(src)
{
}",1,1,main\cpp\exception.cpp,IllegalArgumentException.IllegalArgumentException,,false,135,138,IllegalArgumentException,,,15,ANY IllegalArgumentException.IllegalArgumentException (IllegalArgumentException)
17623,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"IllegalArgumentException& IllegalArgumentException::operator=(const IllegalArgumentException& src)
{
	RuntimeException::operator=(src);
	return *this;
}",1,1,main\cpp\exception.cpp,IllegalArgumentException.operator =,,false,140,144,operator =,,,16,IllegalArgumentException IllegalArgumentException.operator = (IllegalArgumentException)
17636,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"IOException::IOException()
	: Exception(LOG4CXX_STR(""IO exception""))
{
}",1,1,main\cpp\exception.cpp,IOException.IOException,,false,146,149,IOException,,,17,ANY IOException.IOException ()
17640,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"IOException::IOException(log4cxx_status_t stat)
	: Exception(formatMessage(stat))
{
}",1,1,main\cpp\exception.cpp,IOException.IOException,,false,151,154,IOException,,,18,ANY IOException.IOException (log4cxx_status_t)
17645,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"IOException::IOException(const LogString& msg1)
	: Exception(msg1)
{
}",1,1,main\cpp\exception.cpp,IOException.IOException,,false,157,160,IOException,,,19,ANY IOException.IOException (LogString)
17650,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"IOException::IOException(const IOException& src)
	: Exception(src)
{
}",1,1,main\cpp\exception.cpp,IOException.IOException,,false,162,165,IOException,,,20,ANY IOException.IOException (IOException)
17655,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"IOException& IOException::operator=(const IOException& src)
{
	Exception::operator=(src);
	return *this;
}",1,1,main\cpp\exception.cpp,IOException.operator =,,false,167,171,operator =,,,21,IOException IOException.operator = (IOException)
17668,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"LogString IOException::formatMessage(log4cxx_status_t stat)
{
	char err_buff[1024];
	LogString s(LOG4CXX_STR(""IO Exception : status code = ""));
	Pool p;
	StringHelper::toString(stat, p, s);
	s.append(LOG4CXX_STR(""(""));
	apr_strerror(stat, err_buff, sizeof(err_buff));
	std::string sMsg = err_buff;
	LOG4CXX_DECODE_CHAR(lsMsg, sMsg);
	s.append(lsMsg);
	s.append(LOG4CXX_STR("")""));
	return s;
}",1,1,main\cpp\exception.cpp,IOException.formatMessage,,false,173,186,formatMessage,,,22,LogString IOException.formatMessage (log4cxx_status_t)
17717,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"MissingResourceException::MissingResourceException(const LogString& key)
	: Exception(formatMessage(key))
{
}",1,1,main\cpp\exception.cpp,MissingResourceException.MissingResourceException,,false,189,192,MissingResourceException,,,23,ANY MissingResourceException.MissingResourceException (LogString)
17722,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"MissingResourceException::MissingResourceException(const MissingResourceException& src)
	: Exception(src)
{
}",1,1,main\cpp\exception.cpp,MissingResourceException.MissingResourceException,,false,195,198,MissingResourceException,,,24,ANY MissingResourceException.MissingResourceException (MissingResourceException)
17727,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"MissingResourceException& MissingResourceException::operator=(const MissingResourceException& src)
{
	Exception::operator=(src);
	return *this;
}",1,1,main\cpp\exception.cpp,MissingResourceException.operator =,,false,200,204,operator =,,,25,MissingResourceException MissingResourceException.operator = (MissingResourceException)
17740,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"LogString MissingResourceException::formatMessage(const LogString& key)
{
	LogString s(LOG4CXX_STR(""MissingResourceException: resource key = \""""));
	s.append(key);
	s.append(LOG4CXX_STR(""\"".""));
	return s;
}",1,1,main\cpp\exception.cpp,MissingResourceException.formatMessage,,false,206,212,formatMessage,,,26,LogString MissingResourceException.formatMessage (LogString)
17762,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"PoolException::PoolException(log4cxx_status_t stat)
	: Exception(formatMessage(stat))
{
}",1,1,main\cpp\exception.cpp,PoolException.PoolException,,false,214,217,PoolException,,,27,ANY PoolException.PoolException (log4cxx_status_t)
17767,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"PoolException::PoolException(const PoolException& src)
	: Exception(src)
{
}",1,1,main\cpp\exception.cpp,PoolException.PoolException,,false,219,222,PoolException,,,28,ANY PoolException.PoolException (PoolException)
17772,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"PoolException& PoolException::operator=(const PoolException& src)
{
	Exception::operator=(src);
	return *this;
}",1,1,main\cpp\exception.cpp,PoolException.operator =,,false,224,228,operator =,,,29,PoolException PoolException.operator = (PoolException)
17785,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"LogString PoolException::formatMessage(log4cxx_status_t)
{
	return LOG4CXX_STR(""Pool exception"");
}",1,1,main\cpp\exception.cpp,PoolException.formatMessage,,false,230,233,formatMessage,,,30,LogString PoolException.formatMessage (log4cxx_status_t)
17793,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"TranscoderException::TranscoderException(log4cxx_status_t stat)
	: Exception(formatMessage(stat))
{
}",1,1,main\cpp\exception.cpp,TranscoderException.TranscoderException,,false,236,239,TranscoderException,,,31,ANY TranscoderException.TranscoderException (log4cxx_status_t)
17798,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"TranscoderException::TranscoderException(const TranscoderException& src)
	: Exception(src)
{
}",1,1,main\cpp\exception.cpp,TranscoderException.TranscoderException,,false,241,244,TranscoderException,,,32,ANY TranscoderException.TranscoderException (TranscoderException)
17803,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"TranscoderException& TranscoderException::operator=(const TranscoderException& src)
{
	Exception::operator=(src);
	return *this;
}",1,1,main\cpp\exception.cpp,TranscoderException.operator =,,false,246,250,operator =,,,33,TranscoderException TranscoderException.operator = (TranscoderException)
17816,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"LogString TranscoderException::formatMessage(log4cxx_status_t)
{
	return LOG4CXX_STR(""Transcoder exception"");
}",1,1,main\cpp\exception.cpp,TranscoderException.formatMessage,,false,252,255,formatMessage,,,34,LogString TranscoderException.formatMessage (log4cxx_status_t)
17824,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"InterruptedException::InterruptedException() : Exception(LOG4CXX_STR(""Thread was interrupted""))
{
}",1,1,main\cpp\exception.cpp,InterruptedException.InterruptedException,,false,258,260,InterruptedException,,,35,ANY InterruptedException.InterruptedException ()
17828,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"InterruptedException::InterruptedException(log4cxx_status_t stat)
	: Exception(formatMessage(stat))
{
}",1,1,main\cpp\exception.cpp,InterruptedException.InterruptedException,,false,262,265,InterruptedException,,,36,ANY InterruptedException.InterruptedException (log4cxx_status_t)
17833,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"InterruptedException::InterruptedException(const InterruptedException& src)
	: Exception(src)
{
}",1,1,main\cpp\exception.cpp,InterruptedException.InterruptedException,,false,267,270,InterruptedException,,,37,ANY InterruptedException.InterruptedException (InterruptedException)
17838,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"InterruptedException& InterruptedException::operator=(const InterruptedException& src)
{
	Exception::operator=(src);
	return *this;
}",1,1,main\cpp\exception.cpp,InterruptedException.operator =,,false,272,276,operator =,,,38,InterruptedException InterruptedException.operator = (InterruptedException)
17851,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"LogString InterruptedException::formatMessage(log4cxx_status_t stat)
{
	LogString s(LOG4CXX_STR(""InterruptedException: stat = ""));
	Pool p;
	StringHelper::toString(stat, p, s);
	return s;
}",1,1,main\cpp\exception.cpp,InterruptedException.formatMessage,,false,278,284,formatMessage,,,39,LogString InterruptedException.formatMessage (log4cxx_status_t)
17870,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"ThreadException::ThreadException(log4cxx_status_t stat)
	: Exception(formatMessage(stat))
{
}",1,1,main\cpp\exception.cpp,ThreadException.ThreadException,,false,286,289,ThreadException,,,40,ANY ThreadException.ThreadException (log4cxx_status_t)
17875,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"ThreadException::ThreadException(const LogString& msg)
	: Exception(msg)
{
}",1,1,main\cpp\exception.cpp,ThreadException.ThreadException,,false,291,294,ThreadException,,,41,ANY ThreadException.ThreadException (LogString)
17880,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"ThreadException::ThreadException(const ThreadException& src)
	: Exception(src)
{
}",1,1,main\cpp\exception.cpp,ThreadException.ThreadException,,false,296,299,ThreadException,,,42,ANY ThreadException.ThreadException (ThreadException)
17885,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"ThreadException& ThreadException::operator=(const ThreadException& src)
{
	Exception::operator=(src);
	return *this;
}",1,1,main\cpp\exception.cpp,ThreadException.operator =,,false,301,305,operator =,,,43,ThreadException ThreadException.operator = (ThreadException)
17898,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"LogString ThreadException::formatMessage(log4cxx_status_t stat)
{
	LogString s(LOG4CXX_STR(""Thread exception: stat = ""));
	Pool p;
	StringHelper::toString(stat, p, s);
	return s;
}",1,1,main\cpp\exception.cpp,ThreadException.formatMessage,,false,307,313,formatMessage,,,44,LogString ThreadException.formatMessage (log4cxx_status_t)
17917,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"IllegalMonitorStateException::IllegalMonitorStateException(const LogString& msg1)
	: Exception(msg1)
{
}",1,1,main\cpp\exception.cpp,IllegalMonitorStateException.IllegalMonitorStateException,,false,315,318,IllegalMonitorStateException,,,45,ANY IllegalMonitorStateException.IllegalMonitorStateException (LogString)
17922,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"IllegalMonitorStateException::IllegalMonitorStateException(const IllegalMonitorStateException& src)
	: Exception(src)
{
}",1,1,main\cpp\exception.cpp,IllegalMonitorStateException.IllegalMonitorStateException,,false,320,323,IllegalMonitorStateException,,,46,ANY IllegalMonitorStateException.IllegalMonitorStateException (IllegalMonitorStateException)
17927,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"IllegalMonitorStateException& IllegalMonitorStateException::operator=(const IllegalMonitorStateException& src)
{
	Exception::operator=(src);
	return *this;
}",1,1,main\cpp\exception.cpp,IllegalMonitorStateException.operator =,,false,325,329,operator =,,,47,IllegalMonitorStateException IllegalMonitorStateException.operator = (IllegalMonitorStateException)
17940,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"InstantiationException::InstantiationException(const LogString& msg1)
	: Exception(msg1)
{
}",1,1,main\cpp\exception.cpp,InstantiationException.InstantiationException,,false,331,334,InstantiationException,,,48,ANY InstantiationException.InstantiationException (LogString)
17945,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"InstantiationException::InstantiationException(const InstantiationException& src)
	: Exception(src)
{
}",1,1,main\cpp\exception.cpp,InstantiationException.InstantiationException,,false,336,339,InstantiationException,,,49,ANY InstantiationException.InstantiationException (InstantiationException)
17950,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"InstantiationException& InstantiationException::operator=(const InstantiationException& src)
{
	Exception::operator=(src);
	return *this;
}",1,1,main\cpp\exception.cpp,InstantiationException.operator =,,false,341,345,operator =,,,50,InstantiationException InstantiationException.operator = (InstantiationException)
17963,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"ClassNotFoundException::ClassNotFoundException(const LogString& className)
	: Exception(formatMessage(className))
{
}",1,1,main\cpp\exception.cpp,ClassNotFoundException.ClassNotFoundException,,false,347,350,ClassNotFoundException,,,51,ANY ClassNotFoundException.ClassNotFoundException (LogString)
17968,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"ClassNotFoundException::ClassNotFoundException(const ClassNotFoundException& src)
	: Exception(src)
{
}",1,1,main\cpp\exception.cpp,ClassNotFoundException.ClassNotFoundException,,false,352,355,ClassNotFoundException,,,52,ANY ClassNotFoundException.ClassNotFoundException (ClassNotFoundException)
17973,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"ClassNotFoundException& ClassNotFoundException::operator=(const ClassNotFoundException& src)
{
	Exception::operator=(src);
	return *this;
}",1,1,main\cpp\exception.cpp,ClassNotFoundException.operator =,,false,358,362,operator =,,,53,ClassNotFoundException ClassNotFoundException.operator = (ClassNotFoundException)
17986,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"LogString ClassNotFoundException::formatMessage(const LogString& className)
{
	LogString s(LOG4CXX_STR(""Class not found: ""));
	s.append(className);
	return s;
}",1,1,main\cpp\exception.cpp,ClassNotFoundException.formatMessage,,false,364,369,formatMessage,,,54,LogString ClassNotFoundException.formatMessage (LogString)
18002,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"NoSuchElementException::NoSuchElementException()
	: Exception(LOG4CXX_STR(""No such element""))
{
}",1,1,main\cpp\exception.cpp,NoSuchElementException.NoSuchElementException,,false,372,375,NoSuchElementException,,,55,ANY NoSuchElementException.NoSuchElementException ()
18006,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"NoSuchElementException::NoSuchElementException(const NoSuchElementException& src)
	: Exception(src)
{
}",1,1,main\cpp\exception.cpp,NoSuchElementException.NoSuchElementException,,false,377,380,NoSuchElementException,,,56,ANY NoSuchElementException.NoSuchElementException (NoSuchElementException)
18011,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"NoSuchElementException& NoSuchElementException::operator=(const NoSuchElementException& src)
{
	Exception::operator=(src);
	return *this;
}",1,1,main\cpp\exception.cpp,NoSuchElementException.operator =,,false,382,386,operator =,,,57,NoSuchElementException NoSuchElementException.operator = (NoSuchElementException)
18024,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"IllegalStateException::IllegalStateException()
	: Exception(LOG4CXX_STR(""Illegal state""))
{
}",1,1,main\cpp\exception.cpp,IllegalStateException.IllegalStateException,,false,389,392,IllegalStateException,,,58,ANY IllegalStateException.IllegalStateException ()
18028,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"IllegalStateException::IllegalStateException(const IllegalStateException& src)
	: Exception(src)
{
}",1,1,main\cpp\exception.cpp,IllegalStateException.IllegalStateException,,false,394,397,IllegalStateException,,,59,ANY IllegalStateException.IllegalStateException (IllegalStateException)
18033,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"IllegalStateException& IllegalStateException::operator=(const IllegalStateException& src)
{
	Exception::operator=(src);
	return *this;
}",1,1,main\cpp\exception.cpp,IllegalStateException.operator =,,false,399,403,operator =,,,60,IllegalStateException IllegalStateException.operator = (IllegalStateException)
18046,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"SocketException::SocketException(const LogString& msg) : IOException(msg)
{
}",1,1,main\cpp\exception.cpp,SocketException.SocketException,,false,405,407,SocketException,,,61,ANY SocketException.SocketException (LogString)
18051,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"SocketException::SocketException(log4cxx_status_t status) : IOException(status)
{
}",1,1,main\cpp\exception.cpp,SocketException.SocketException,,false,409,411,SocketException,,,62,ANY SocketException.SocketException (log4cxx_status_t)
18056,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"SocketException::SocketException(const SocketException& src)
	: IOException(src)
{
}",1,1,main\cpp\exception.cpp,SocketException.SocketException,,false,413,416,SocketException,,,63,ANY SocketException.SocketException (SocketException)
18061,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"SocketException& SocketException::operator=(const SocketException& src)
{
	IOException::operator=(src);
	return *this;
}",1,1,main\cpp\exception.cpp,SocketException.operator =,,false,418,422,operator =,,,64,SocketException SocketException.operator = (SocketException)
18074,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"ConnectException::ConnectException(log4cxx_status_t status) : SocketException(status)
{
}",1,1,main\cpp\exception.cpp,ConnectException.ConnectException,,false,424,426,ConnectException,,,65,ANY ConnectException.ConnectException (log4cxx_status_t)
18079,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"ConnectException::ConnectException(const ConnectException& src)
	: SocketException(src)
{
}",1,1,main\cpp\exception.cpp,ConnectException.ConnectException,,false,428,431,ConnectException,,,66,ANY ConnectException.ConnectException (ConnectException)
18084,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"ConnectException& ConnectException::operator=(const ConnectException& src)
{
	SocketException::operator=(src);
	return *this;
}",1,1,main\cpp\exception.cpp,ConnectException.operator =,,false,433,437,operator =,,,67,ConnectException ConnectException.operator = (ConnectException)
18097,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"ClosedChannelException::ClosedChannelException() : SocketException(LOG4CXX_STR(""Attempt to write to closed socket""))
{
}",1,1,main\cpp\exception.cpp,ClosedChannelException.ClosedChannelException,,false,439,441,ClosedChannelException,,,68,ANY ClosedChannelException.ClosedChannelException ()
18101,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"ClosedChannelException::ClosedChannelException(const ClosedChannelException& src)
	: SocketException(src)
{
}",1,1,main\cpp\exception.cpp,ClosedChannelException.ClosedChannelException,,false,443,446,ClosedChannelException,,,69,ANY ClosedChannelException.ClosedChannelException (ClosedChannelException)
18106,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"ClosedChannelException& ClosedChannelException::operator=(const ClosedChannelException& src)
{
	SocketException::operator=(src);
	return *this;
}",1,1,main\cpp\exception.cpp,ClosedChannelException.operator =,,false,448,452,operator =,,,70,ClosedChannelException ClosedChannelException.operator = (ClosedChannelException)
18119,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"BindException::BindException(log4cxx_status_t status) : SocketException(status)
{
}",1,1,main\cpp\exception.cpp,BindException.BindException,,false,454,456,BindException,,,71,ANY BindException.BindException (log4cxx_status_t)
18124,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"BindException::BindException(const BindException& src)
	: SocketException(src)
{
}",1,1,main\cpp\exception.cpp,BindException.BindException,,false,458,461,BindException,,,72,ANY BindException.BindException (BindException)
18129,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"BindException& BindException::operator=(const BindException& src)
{
	SocketException::operator=(src);
	return *this;
}",1,1,main\cpp\exception.cpp,BindException.operator =,,false,463,467,operator =,,,73,BindException BindException.operator = (BindException)
18142,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"InterruptedIOException::InterruptedIOException(const LogString& msg) : IOException(msg)
{
}",1,1,main\cpp\exception.cpp,InterruptedIOException.InterruptedIOException,,false,469,471,InterruptedIOException,,,74,ANY InterruptedIOException.InterruptedIOException (LogString)
18147,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"InterruptedIOException::InterruptedIOException(const InterruptedIOException& src)
	: IOException(src)
{
}",1,1,main\cpp\exception.cpp,InterruptedIOException.InterruptedIOException,,false,473,476,InterruptedIOException,,,75,ANY InterruptedIOException.InterruptedIOException (InterruptedIOException)
18152,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"InterruptedIOException& InterruptedIOException::operator=(const InterruptedIOException& src)
{
	IOException::operator=(src);
	return *this;
}",1,1,main\cpp\exception.cpp,InterruptedIOException.operator =,,false,478,482,operator =,,,76,InterruptedIOException InterruptedIOException.operator = (InterruptedIOException)
18165,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"SocketTimeoutException::SocketTimeoutException()
	: InterruptedIOException(LOG4CXX_STR(""SocketTimeoutException""))
{
}",1,1,main\cpp\exception.cpp,SocketTimeoutException.SocketTimeoutException,,false,484,487,SocketTimeoutException,,,77,ANY SocketTimeoutException.SocketTimeoutException ()
18169,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"SocketTimeoutException::SocketTimeoutException(const SocketTimeoutException& src)
	: InterruptedIOException(src)
{
}",1,1,main\cpp\exception.cpp,SocketTimeoutException.SocketTimeoutException,,false,489,492,SocketTimeoutException,,,78,ANY SocketTimeoutException.SocketTimeoutException (SocketTimeoutException)
18174,METHOD,main\cpp\exception.cpp:<global>,TYPE_DECL,"SocketTimeoutException& SocketTimeoutException::operator=(const SocketTimeoutException& src)
{
	InterruptedIOException::operator=(src);
	return *this;
}",1,1,main\cpp\exception.cpp,SocketTimeoutException.operator =,,false,494,498,operator =,,,79,SocketTimeoutException SocketTimeoutException.operator = (SocketTimeoutException)
18208,METHOD,main\cpp\fallbackerrorhandler.cpp:<global>,TYPE_DECL,<global>,1,2,main\cpp\fallbackerrorhandler.cpp,main\cpp\fallbackerrorhandler.cpp:<global>,,false,1,125,<global>,,,1,
18216,METHOD,main\cpp\fallbackerrorhandler.cpp:<global>,TYPE_DECL,"FallbackErrorHandler::FallbackErrorHandler()
	: m_priv(std::make_unique<FallbackErrorHandlerPrivate>())
{
}",1,1,main\cpp\fallbackerrorhandler.cpp,FallbackErrorHandler.FallbackErrorHandler,,false,42,45,FallbackErrorHandler,,,4,ANY FallbackErrorHandler.FallbackErrorHandler ()
18220,METHOD,main\cpp\fallbackerrorhandler.cpp:<global>,TYPE_DECL,FallbackErrorHandler::~FallbackErrorHandler() {},1,48,main\cpp\fallbackerrorhandler.cpp,FallbackErrorHandler.~FallbackErrorHandler,,false,47,47,~FallbackErrorHandler,,,5,ANY FallbackErrorHandler.~FallbackErrorHandler ()
18224,METHOD,main\cpp\fallbackerrorhandler.cpp:<global>,TYPE_DECL,"void FallbackErrorHandler::setLogger(const LoggerPtr& logger)
{
	LogLog::debug(((LogString) LOG4CXX_STR(""FB: Adding logger [""))
		+ logger->getName() + LOG4CXX_STR(""].""));
	m_priv->loggers.push_back(logger);
}",1,1,main\cpp\fallbackerrorhandler.cpp,FallbackErrorHandler.setLogger,,false,49,54,setLogger,,,6,void FallbackErrorHandler.setLogger (LoggerPtr)
18252,METHOD,main\cpp\fallbackerrorhandler.cpp:<global>,TYPE_DECL,"void FallbackErrorHandler::error(const LogString& message,
	const std::exception& e,
	int errorCode) const
{
	error(message, e, errorCode, 0);
}",1,1,main\cpp\fallbackerrorhandler.cpp,FallbackErrorHandler.error,,false,56,61,error,,,7,"void FallbackErrorHandler.error (LogString,ANY,int)"
18264,METHOD,main\cpp\fallbackerrorhandler.cpp:<global>,TYPE_DECL,"void FallbackErrorHandler::error(const LogString& message,
	const std::exception& e,
	int, const spi::LoggingEventPtr&) const
{
	LogLog::debug(((LogString) LOG4CXX_STR(""FB: The following error reported: ""))
		+  message, e);
	LogLog::debug(LOG4CXX_STR(""FB: INITIATING FALLBACK PROCEDURE.""));

	AppenderPtr primaryLocked = m_priv->primary.lock();
	AppenderPtr backupLocked = m_priv->backup.lock();

	if ( !primaryLocked || !backupLocked )
	{
		return;
	}

	for (LoggerPtr l : m_priv->loggers)
	{
		LogLog::debug(((LogString) LOG4CXX_STR(""FB: Searching for [""))
			+ primaryLocked->getName() + LOG4CXX_STR(""] in logger ["")
			+ l->getName() + LOG4CXX_STR(""].""));
		LogLog::debug(((LogString) LOG4CXX_STR(""FB: Replacing [""))
			+ primaryLocked->getName() + LOG4CXX_STR(""] by ["")
			+ backupLocked->getName() + LOG4CXX_STR(""] in logger ["")
			+ l->getName() + LOG4CXX_STR(""].""));
		l->removeAppender(primaryLocked);
		LogLog::debug(((LogString) LOG4CXX_STR(""FB: Adding appender [""))
			+ backupLocked-...",1,1,main\cpp\fallbackerrorhandler.cpp,FallbackErrorHandler.error,,false,63,94,error,,,8,"void FallbackErrorHandler.error (LogString,ANY,int,ANY)"
18408,METHOD,main\cpp\fallbackerrorhandler.cpp:<global>,TYPE_DECL,"void FallbackErrorHandler::setAppender(const AppenderPtr& primary1)
{
	LogLog::debug(((LogString) LOG4CXX_STR(""FB: Setting primary appender to [""))
		+ primary1->getName() + LOG4CXX_STR(""].""));
	m_priv->primary = primary1;
}",1,1,main\cpp\fallbackerrorhandler.cpp,FallbackErrorHandler.setAppender,,false,96,101,setAppender,,,9,void FallbackErrorHandler.setAppender (AppenderPtr)
18434,METHOD,main\cpp\fallbackerrorhandler.cpp:<global>,TYPE_DECL,"void FallbackErrorHandler::setBackupAppender(const AppenderPtr& backup1)
{
	LogLog::debug(((LogString) LOG4CXX_STR(""FB: Setting backup appender to [""))
		+ backup1->getName() + LOG4CXX_STR(""].""));
	m_priv->backup = backup1;

	// Make sure that we keep a reference to the appender around, since otherwise
	// the appender would be lost if it has no loggers that use it.
	LoggerRepository* repository = LogManager::getRootLogger()->getLoggerRepository();
	Hierarchy* hierarchy = dynamic_cast<Hierarchy*>(repository);
	if(hierarchy){
		hierarchy->addAppender(backup1);
	}

}",1,1,main\cpp\fallbackerrorhandler.cpp,FallbackErrorHandler.setBackupAppender,,false,103,117,setBackupAppender,,,10,void FallbackErrorHandler.setBackupAppender (AppenderPtr)
18484,METHOD,main\cpp\fallbackerrorhandler.cpp:<global>,TYPE_DECL,"void FallbackErrorHandler::activateOptions(Pool&)
{
}",1,1,main\cpp\fallbackerrorhandler.cpp,FallbackErrorHandler.activateOptions,,false,119,121,activateOptions,,,11,void FallbackErrorHandler.activateOptions (Pool)
18489,METHOD,main\cpp\fallbackerrorhandler.cpp:<global>,TYPE_DECL,"void FallbackErrorHandler::setOption(const LogString&, const LogString&)
{
}",1,1,main\cpp\fallbackerrorhandler.cpp,FallbackErrorHandler.setOption,,false,123,125,setOption,,,12,"void FallbackErrorHandler.setOption (LogString,LogString)"
18514,METHOD,main\cpp\file.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\file.cpp,main\cpp\file.cpp:<global>,,false,1,345,<global>,,,1,
18517,METHOD,FilePrivate,TYPE_DECL,"FilePrivate() :
		autoDelete(false)
	{}",2,3,main\cpp\file.cpp,FilePrivate.FilePrivate,,false,31,33,FilePrivate,,,1,ANY FilePrivate.FilePrivate ()
18521,METHOD,FilePrivate,TYPE_DECL,"FilePrivate(LogString path) :
		path(path),
		autoDelete(false)
	{}",2,3,main\cpp\file.cpp,FilePrivate.FilePrivate,,false,35,38,FilePrivate,,,2,ANY FilePrivate.FilePrivate (LogString)
18526,METHOD,FilePrivate,TYPE_DECL,"FilePrivate(LogString path, bool autoDelete) :
		path(path),
		autoDelete(autoDelete)
	{}",2,3,main\cpp\file.cpp,FilePrivate.FilePrivate,,false,40,43,FilePrivate,,,3,"ANY FilePrivate.FilePrivate (LogString,bool)"
18534,METHOD,main\cpp\file.cpp:<global>,TYPE_DECL,"File::File() :
	m_priv(std::make_unique<FilePrivate>())
{
}",1,1,main\cpp\file.cpp,File.File,,false,49,52,File,,,2,ANY File.File ()
18538,METHOD,main\cpp\file.cpp:<global>,TYPE_DECL,"static LogString decodeLS(const S* src)
{
	LogString dst;

	if (src != 0)
	{
		Transcoder::decode(src, dst);
	}

	return dst;
}",1,1,main\cpp\file.cpp,decodeLS,,false,55,65,decodeLS,,,3,LogString decodeLS<S> (S*)
18557,METHOD,main\cpp\file.cpp:<global>,TYPE_DECL,"static LogString decodeLS(const std::basic_string<S>& src)
{
	LogString dst;
	Transcoder::decode(src, dst);
	return dst;
}",1,1,main\cpp\file.cpp,decodeLS,,false,68,73,decodeLS,,,4,LogString decodeLS<S> (ANY)
18571,METHOD,main\cpp\file.cpp:<global>,TYPE_DECL,"File::File(const std::string& name1)
	: m_priv(std::make_unique<FilePrivate>(decodeLS(name1)))
{
}",1,1,main\cpp\file.cpp,File.File,,false,76,79,File,,,5,ANY File.File (ANY)
18576,METHOD,main\cpp\file.cpp:<global>,TYPE_DECL,"File::File(const char* name1)
	: m_priv(std::make_unique<FilePrivate>(decodeLS(name1)))
{
}",1,1,main\cpp\file.cpp,File.File,,false,81,84,File,,,6,ANY File.File (char*)
18581,METHOD,main\cpp\file.cpp:<global>,TYPE_DECL,"File::File(const File& src)
	: m_priv(std::make_unique<FilePrivate>(src.m_priv->path, src.m_priv->autoDelete))
{
}",1,1,main\cpp\file.cpp,File.File,,false,117,120,File,,,7,ANY File.File (File)
18586,METHOD,main\cpp\file.cpp:<global>,TYPE_DECL,"File& File::operator=(const File& src)
{
	if (this == &src)
	{
		return *this;
	}

	m_priv->path.assign(src.m_priv->path);
	m_priv->autoDelete = src.m_priv->autoDelete;

	return *this;
}",1,1,main\cpp\file.cpp,File.operator =,,false,122,133,operator =,,,8,File File.operator = (File)
18623,METHOD,main\cpp\file.cpp:<global>,TYPE_DECL,"File::~File()
{
	if(m_priv->autoDelete){
		Pool p;
		deleteFile(p);
	}
}",1,1,main\cpp\file.cpp,File.~File,,false,136,142,~File,,,9,ANY File.~File ()
18635,METHOD,main\cpp\file.cpp:<global>,TYPE_DECL,"LogString File::getPath() const
{
	return m_priv->path;
}",1,1,main\cpp\file.cpp,File.getPath,,false,145,148,getPath,,,10,LogString File.getPath ()
18643,METHOD,main\cpp\file.cpp:<global>,TYPE_DECL,"File& File::setPath(const LogString& newName)
{
	m_priv->path.assign(newName);
	return *this;
}",1,1,main\cpp\file.cpp,File.setPath,,false,150,154,setPath,,,11,File File.setPath (LogString)
18658,METHOD,main\cpp\file.cpp:<global>,TYPE_DECL,"LogString File::getName() const
{
	const logchar slashes[] = { 0x2F, 0x5C, 0 };
	size_t lastSlash = m_priv->path.find_last_of(slashes);

	if (lastSlash != LogString::npos)
	{
		return m_priv->path.substr(lastSlash + 1);
	}

	return m_priv->path;
}",1,1,main\cpp\file.cpp,File.getName,,false,156,167,getName,,,12,LogString File.getName ()
18700,METHOD,main\cpp\file.cpp:<global>,TYPE_DECL,"char* File::getPath(Pool& p) const
{
	int style = APR_FILEPATH_ENCODING_UNKNOWN;
	apr_filepath_encoding(&style, p.getAPRPool());
	char* retval = NULL;

	if (style == APR_FILEPATH_ENCODING_UTF8)
	{
		retval = Transcoder::encodeUTF8(m_priv->path, p);
	}
	else
	{
		retval = Transcoder::encode(m_priv->path, p);
	}

	return retval;
}",1,1,main\cpp\file.cpp,File.getPath,,false,169,185,getPath,,,13,char* File.getPath (Pool)
18749,METHOD,main\cpp\file.cpp:<global>,TYPE_DECL,"log4cxx_status_t File::open(apr_file_t** file, int flags,
	int perm, Pool& p) const
{
	return apr_file_open(file, getPath(p), flags, perm, p.getAPRPool());
}",1,1,main\cpp\file.cpp,File.open,,false,187,191,open,,,14,"log4cxx_status_t File.open (apr_file_t**,int,int,Pool)"
18768,METHOD,main\cpp\file.cpp:<global>,TYPE_DECL,"bool File::exists(Pool& p) const
{
	apr_finfo_t finfo;
	apr_status_t rv = apr_stat(&finfo, getPath(p),
			0, p.getAPRPool());
	return rv == APR_SUCCESS;
}",1,1,main\cpp\file.cpp,File.exists,,false,195,201,exists,,,15,bool File.exists (Pool)
18791,METHOD,main\cpp\file.cpp:<global>,TYPE_DECL,"char* File::convertBackSlashes(char* src)
{
	for (char* c = src; *c != 0; c++)
	{
		if (*c == '\\')
		{
			*c = '/';
		}
	}

	return src;
}",1,1,main\cpp\file.cpp,File.convertBackSlashes,,false,203,214,convertBackSlashes,,,16,char* File.convertBackSlashes (char*)
18821,METHOD,main\cpp\file.cpp:<global>,TYPE_DECL,"bool File::deleteFile(Pool& p) const
{
	apr_status_t rv = apr_file_remove(convertBackSlashes(getPath(p)),
			p.getAPRPool());
	return rv == APR_SUCCESS;
}",1,1,main\cpp\file.cpp,File.deleteFile,,false,216,221,deleteFile,,,17,bool File.deleteFile (Pool)
18841,METHOD,main\cpp\file.cpp:<global>,TYPE_DECL,"bool File::renameTo(const File& dest, Pool& p) const
{
	apr_status_t rv = apr_file_rename(convertBackSlashes(getPath(p)),
			convertBackSlashes(dest.getPath(p)),
			p.getAPRPool());
	return rv == APR_SUCCESS;
}",1,1,main\cpp\file.cpp,File.renameTo,,false,223,229,renameTo,,,18,"bool File.renameTo (File,Pool)"
18868,METHOD,main\cpp\file.cpp:<global>,TYPE_DECL,"size_t File::length(Pool& pool) const
{
	apr_finfo_t finfo;
	apr_status_t rv = apr_stat(&finfo, getPath(pool),
			APR_FINFO_SIZE, pool.getAPRPool());

	if (rv == APR_SUCCESS)
	{
		return (size_t) finfo.size;
	}

	return 0;
}",1,1,main\cpp\file.cpp,File.length,,false,232,244,length,,,19,size_t File.length (Pool)
18900,METHOD,main\cpp\file.cpp:<global>,TYPE_DECL,"log4cxx_time_t File::lastModified(Pool& pool) const
{
	apr_finfo_t finfo;
	apr_status_t rv = apr_stat(&finfo, getPath(pool),
			APR_FINFO_MTIME, pool.getAPRPool());

	if (rv == APR_SUCCESS)
	{
		return finfo.mtime;
	}

	return 0;
}",1,1,main\cpp\file.cpp,File.lastModified,,false,247,259,lastModified,,,20,log4cxx_time_t File.lastModified (Pool)
18930,METHOD,main\cpp\file.cpp:<global>,TYPE_DECL,"std::vector<LogString> File::list(Pool& p) const
{
	apr_dir_t* dir;
	apr_finfo_t entry;
	std::vector<LogString> filenames;

	apr_status_t stat = apr_dir_open(&dir,
			convertBackSlashes(getPath(p)),
			p.getAPRPool());

	if (stat == APR_SUCCESS)
	{
		int style = APR_FILEPATH_ENCODING_UNKNOWN;
		apr_filepath_encoding(&style, p.getAPRPool());
		stat = apr_dir_read(&entry, APR_FINFO_DIRENT, dir);

		while (stat == APR_SUCCESS)
		{
			if (entry.name != NULL)
			{
				LogString filename;

				if (style == APR_FILEPATH_ENCODING_UTF8)
				{
					Transcoder::decodeUTF8(entry.name, filename);
				}
				else
				{
					Transcoder::decode(entry.name, filename);
				}

				filenames.push_back(filename);
			}

			stat = apr_dir_read(&entry, APR_FINFO_DIRENT, dir);
		}

		stat = apr_dir_close(dir);
	}

	return filenames;
}",1,1,main\cpp\file.cpp,File.list,,false,262,303,list,,,21,vector<LogString> File.list (Pool)
19034,METHOD,main\cpp\file.cpp:<global>,TYPE_DECL,"LogString File::getParent(Pool&) const
{
	LogString::size_type slashPos = m_priv->path.rfind(LOG4CXX_STR('/'));
	LogString::size_type backPos = m_priv->path.rfind(LOG4CXX_STR('\\'));

	if (slashPos == LogString::npos)
	{
		slashPos = backPos;
	}
	else
	{
		if (backPos != LogString::npos && backPos > slashPos)
		{
			slashPos = backPos;
		}
	}

	LogString parent;

	if (slashPos != LogString::npos && slashPos > 0)
	{
		parent.assign(m_priv->path, 0, slashPos);
	}

	return parent;
}",1,1,main\cpp\file.cpp,File.getParent,,false,305,330,getParent,,,22,LogString File.getParent (Pool)
19110,METHOD,main\cpp\file.cpp:<global>,TYPE_DECL,"bool File::mkdirs(Pool& p) const
{
	apr_status_t stat = apr_dir_make_recursive(convertBackSlashes(getPath(p)),
			APR_OS_DEFAULT, p.getAPRPool());
	return stat == APR_SUCCESS;
}",1,1,main\cpp\file.cpp,File.mkdirs,,false,332,337,mkdirs,,,23,bool File.mkdirs (Pool)
19131,METHOD,main\cpp\file.cpp:<global>,TYPE_DECL,"void File::setAutoDelete(bool autoDelete){
	m_priv->autoDelete = autoDelete;
}",1,1,main\cpp\file.cpp,File.setAutoDelete,,false,339,341,setAutoDelete,,,24,void File.setAutoDelete (bool)
19141,METHOD,main\cpp\file.cpp:<global>,TYPE_DECL,"bool File::getAutoDelete() const{
	return m_priv->autoDelete;
}",1,1,main\cpp\file.cpp,File.getAutoDelete,,false,343,345,getAutoDelete,,,25,bool File.getAutoDelete ()
19178,METHOD,main\cpp\fileappender.cpp:<global>,TYPE_DECL,<global>,1,44,main\cpp\fileappender.cpp,main\cpp\fileappender.cpp:<global>,,false,1,381,<global>,,,1,
19182,METHOD,main\cpp\fileappender.cpp:<global>,TYPE_DECL,"FileAppender::FileAppender() :
	WriterAppender (std::make_unique<FileAppenderPriv>())
{
}",1,1,main\cpp\fileappender.cpp,FileAppender.FileAppender,,false,40,43,FileAppender,,,3,ANY FileAppender.FileAppender ()
19186,METHOD,main\cpp\fileappender.cpp:<global>,TYPE_DECL,"FileAppender::FileAppender
	( const LayoutPtr& layout1
	, const LogString& fileName1
	, bool append1
	, bool bufferedIO1
	, int bufferSize1
	)
	: WriterAppender(std::make_unique<FileAppenderPriv>(layout1, fileName1, append1, bufferedIO1, bufferSize1))
{
	Pool p;
	activateOptions(p);
}",1,1,main\cpp\fileappender.cpp,FileAppender.FileAppender,,false,45,56,FileAppender,,,4,"ANY FileAppender.FileAppender (LayoutPtr,LogString,bool,bool,int)"
19198,METHOD,main\cpp\fileappender.cpp:<global>,TYPE_DECL,"FileAppender::FileAppender
	( const LayoutPtr& layout1
	, const LogString& fileName1
	, bool append1
	)
	: WriterAppender(std::make_unique<FileAppenderPriv>(layout1, fileName1, append1, false))
{
	Pool p;
	activateOptions(p);
}",1,1,main\cpp\fileappender.cpp,FileAppender.FileAppender,,false,58,67,FileAppender,,,5,"ANY FileAppender.FileAppender (LayoutPtr,LogString,bool)"
19208,METHOD,main\cpp\fileappender.cpp:<global>,TYPE_DECL,"FileAppender::FileAppender(const LayoutPtr& layout1, const LogString& fileName1)
	: WriterAppender(std::make_unique<FileAppenderPriv>(layout1, fileName1))
{
	Pool p;
	activateOptions(p);
}",1,1,main\cpp\fileappender.cpp,FileAppender.FileAppender,,false,69,74,FileAppender,,,6,"ANY FileAppender.FileAppender (LayoutPtr,LogString)"
19217,METHOD,main\cpp\fileappender.cpp:<global>,TYPE_DECL,"FileAppender::FileAppender(std::unique_ptr<FileAppenderPriv> priv)
	: WriterAppender (std::move(priv))
{
}",1,1,main\cpp\fileappender.cpp,FileAppender.FileAppender,,false,76,79,FileAppender,,,7,ANY FileAppender.FileAppender (ANY)
19222,METHOD,main\cpp\fileappender.cpp:<global>,TYPE_DECL,"FileAppender::~FileAppender()
{
	finalize();
}",1,1,main\cpp\fileappender.cpp,FileAppender.~FileAppender,,false,81,84,~FileAppender,,,8,ANY FileAppender.~FileAppender ()
19227,METHOD,main\cpp\fileappender.cpp:<global>,TYPE_DECL,"void FileAppender::setAppend(bool fileAppend1)
{
	std::lock_guard<std::recursive_mutex> lock(_priv->mutex);
	_priv->fileAppend = fileAppend1;
}",1,44,main\cpp\fileappender.cpp,FileAppender.setAppend,,false,86,90,setAppend,,,9,void FileAppender.setAppend (bool)
19263,METHOD,main\cpp\fileappender.cpp:<global>,TYPE_DECL,"void FileAppender::setFile(const LogString& file)
{
	std::lock_guard<std::recursive_mutex> lock(_priv->mutex);
	setFileInternal(file);
}",1,44,main\cpp\fileappender.cpp,FileAppender.setFile,,false,92,96,setFile,,,10,void FileAppender.setFile (LogString)
19289,METHOD,main\cpp\fileappender.cpp:<global>,TYPE_DECL,"void FileAppender::setFileInternal(const LogString& file)
{
	_priv->fileName = file;
}",1,1,main\cpp\fileappender.cpp,FileAppender.setFileInternal,,false,98,101,setFileInternal,,,11,void FileAppender.setFileInternal (LogString)
19306,METHOD,main\cpp\fileappender.cpp:<global>,TYPE_DECL,"void FileAppender::setBufferedIO(bool bufferedIO1)
{
	std::lock_guard<std::recursive_mutex> lock(_priv->mutex);
	_priv->bufferedIO = bufferedIO1;

	if (bufferedIO1)
	{
		setImmediateFlush(false);
	}
}",1,44,main\cpp\fileappender.cpp,FileAppender.setBufferedIO,,false,103,112,setBufferedIO,,,12,void FileAppender.setBufferedIO (bool)
19347,METHOD,main\cpp\fileappender.cpp:<global>,TYPE_DECL,"void FileAppender::setOption(const LogString& option,
	const LogString& value)
{
	if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""FILE""), LOG4CXX_STR(""file""))
		|| StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""FILENAME""), LOG4CXX_STR(""filename"")))
	{
		std::lock_guard<std::recursive_mutex> lock(_priv->mutex);
		_priv->fileName = stripDuplicateBackslashes(value);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""APPEND""), LOG4CXX_STR(""append"")))
	{
		std::lock_guard<std::recursive_mutex> lock(_priv->mutex);
		_priv->fileAppend = OptionConverter::toBoolean(value, true);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""BUFFEREDIO""), LOG4CXX_STR(""bufferedio"")))
	{
		std::lock_guard<std::recursive_mutex> lock(_priv->mutex);
		_priv->bufferedIO = OptionConverter::toBoolean(value, false);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""IMMEDIATEFLUSH""), LOG4CXX_STR(""immediateflush"")))
	{
		std::lock_guard<std::recursive_mutex> l...",1,45,main\cpp\fileappender.cpp,FileAppender.setOption,,false,114,147,setOption,,,13,"void FileAppender.setOption (LogString,LogString)"
19613,METHOD,main\cpp\fileappender.cpp:<global>,TYPE_DECL,"void FileAppender::activateOptions(Pool& p)
{
	std::lock_guard<std::recursive_mutex> lock(_priv->mutex);
	activateOptionsInternal(p);
}",1,44,main\cpp\fileappender.cpp,FileAppender.activateOptions,,false,149,153,activateOptions,,,14,void FileAppender.activateOptions (Pool)
19639,METHOD,main\cpp\fileappender.cpp:<global>,TYPE_DECL,"void FileAppender::activateOptionsInternal(Pool& p)
{
	int errors = 0;

	if (!_priv->fileName.empty())
	{
		try
		{
			setFileInternal(_priv->fileName, _priv->fileAppend, _priv->bufferedIO, _priv->bufferSize, p);
		}
		catch (IOException& e)
		{
			errors++;
			LogString msg(LOG4CXX_STR(""setFile(""));
			msg.append(_priv->fileName);
			msg.append(1, (logchar) 0x2C /* ',' */);
			StringHelper::toString(_priv->fileAppend, msg);
			msg.append(LOG4CXX_STR("") call failed.""));
			_priv->errorHandler->error(msg, e, ErrorCode::FILE_OPEN_FAILURE);
		}
	}
	else
	{
		errors++;
		LogLog::error(LogString(LOG4CXX_STR(""File option not set for appender [""))
			+  _priv->name + LOG4CXX_STR(""].""));
		LogLog::warn(LOG4CXX_STR(""Are you using FileAppender instead of ConsoleAppender?""));
	}

	if (errors == 0)
	{
		WriterAppender::activateOptions(p);
	}
}",1,6,main\cpp\fileappender.cpp,FileAppender.activateOptionsInternal,,false,155,188,activateOptionsInternal,,,15,void FileAppender.activateOptionsInternal (Pool)
19817,METHOD,main\cpp\fileappender.cpp:<global>,TYPE_DECL,"LogString FileAppender::stripDuplicateBackslashes(const LogString& src)
{
	logchar backslash = 0x5C; // '\\'
	LogString::size_type i = src.find_last_of(backslash);

	if (i != LogString::npos)
	{
		LogString tmp(src);

		for (;
			i != LogString::npos && i > 0;
			i = tmp.find_last_of(backslash, i - 1))
		{
			//
			//   if the preceding character is a slash then
			//      remove the preceding character
			//      and continue processing
			if (tmp[i - 1] == backslash)
			{
				tmp.erase(i, 1);
				i--;

				if (i == 0)
				{
					break;
				}
			}
			else
			{
				//
				//  if there an odd number of slashes
				//     the string wasn't trying to work around
				//     OptionConverter::convertSpecialChars
				return src;
			}
		}

		return tmp;
	}

	return src;
}",1,1,main\cpp\fileappender.cpp,FileAppender.stripDuplicateBackslashes,,false,202,243,stripDuplicateBackslashes,,,16,LogString FileAppender.stripDuplicateBackslashes (LogString)
19897,METHOD,main\cpp\fileappender.cpp:<global>,TYPE_DECL,"void FileAppender::setFileInternal(
	const LogString& filename,
	bool append1,
	bool bufferedIO1,
	size_t bufferSize1,
	Pool& p)
{
	// It does not make sense to have immediate flush and bufferedIO.
	if (bufferedIO1)
	{
		setImmediateFlush(false);
	}

	closeWriter();

	bool writeBOM = false;

	if (StringHelper::equalsIgnoreCase(getEncoding(),
			LOG4CXX_STR(""utf-16""), LOG4CXX_STR(""UTF-16"")))
	{
		//
		//    don't want to write a byte order mark if the file exists
		//
		if (append1)
		{
			File outFile;
			outFile.setPath(filename);
			writeBOM = !outFile.exists(p);
		}
		else
		{
			writeBOM = true;
		}
	}

	OutputStreamPtr outStream;

	try
	{
		outStream = FileOutputStreamPtr(new FileOutputStream(filename, append1));
	}
	catch (IOException&)
	{
		LogString parentName = File().setPath(filename).getParent(p);

		if (!parentName.empty())
		{
			File parentDir;
			parentDir.setPath(parentName);

			if (!parentDir.exists(p) && parentDir.mkdirs(p))
			{
				outStream = OutputStreamPtr(ne...",1,1,main\cpp\fileappender.cpp,FileAppender.setFileInternal,,false,265,356,setFileInternal,,,17,"void FileAppender.setFileInternal (LogString,bool,bool,size_t,Pool)"
20108,METHOD,main\cpp\fileappender.cpp:<global>,TYPE_DECL,"LogString FileAppender::getFile() const
{
	return _priv->fileName;
}",1,8,main\cpp\fileappender.cpp,FileAppender.getFile,,false,358,361,getFile,,,18,LogString FileAppender.getFile ()
20123,METHOD,main\cpp\fileappender.cpp:<global>,TYPE_DECL,"bool FileAppender::getBufferedIO() const
{
	return _priv->bufferedIO;
}",1,8,main\cpp\fileappender.cpp,FileAppender.getBufferedIO,,false,363,366,getBufferedIO,,,19,bool FileAppender.getBufferedIO ()
20138,METHOD,main\cpp\fileappender.cpp:<global>,TYPE_DECL,"int FileAppender::getBufferSize() const
{
	return _priv->bufferSize;
}",1,8,main\cpp\fileappender.cpp,FileAppender.getBufferSize,,false,368,371,getBufferSize,,,20,int FileAppender.getBufferSize ()
20153,METHOD,main\cpp\fileappender.cpp:<global>,TYPE_DECL,"void FileAppender::setBufferSize(int bufferSize1)
{
	_priv->bufferSize = bufferSize1;
}",1,1,main\cpp\fileappender.cpp,FileAppender.setBufferSize,,false,373,376,setBufferSize,,,21,void FileAppender.setBufferSize (int)
20170,METHOD,main\cpp\fileappender.cpp:<global>,TYPE_DECL,"bool FileAppender::getAppend() const
{
	return _priv->fileAppend;
}",1,8,main\cpp\fileappender.cpp,FileAppender.getAppend,,false,378,381,getAppend,,,22,bool FileAppender.getAppend ()
20194,METHOD,main\cpp\filedatepatternconverter.cpp:<global>,TYPE_DECL,<global>,1,2,main\cpp\filedatepatternconverter.cpp,main\cpp\filedatepatternconverter.cpp:<global>,,false,1,38,<global>,,,1,
20196,METHOD,main\cpp\filedatepatternconverter.cpp:<global>,TYPE_DECL,"PatternConverterPtr FileDatePatternConverter::newInstance(
	const std::vector<LogString>& options)
{
	if (options.size() == 0)
	{
		std::vector<LogString> altOptions;
		altOptions.push_back(LOG4CXX_STR(""yyyy-MM-dd""));
		return DatePatternConverter::newInstance(altOptions);
	}

	return DatePatternConverter::newInstance(options);
}",1,1,main\cpp\filedatepatternconverter.cpp,FileDatePatternConverter.newInstance,,false,27,38,newInstance,,,1,PatternConverterPtr FileDatePatternConverter.newInstance (ANY)
20251,METHOD,main\cpp\fileinputstream.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\fileinputstream.cpp,main\cpp\fileinputstream.cpp:<global>,,false,1,125,<global>,,,1,
20254,METHOD,FileInputStreamPrivate,TYPE_DECL,FileInputStreamPrivate() : fileptr(nullptr) {},2,47,main\cpp\fileinputstream.cpp,FileInputStreamPrivate.FileInputStreamPrivate,,false,34,34,FileInputStreamPrivate,,,1,ANY FileInputStreamPrivate.FileInputStreamPrivate ()
20262,METHOD,main\cpp\fileinputstream.cpp:<global>,TYPE_DECL,"FileInputStream::FileInputStream(const LogString& filename) :
	m_priv(std::make_unique<FileInputStreamPrivate>())
{
	open(filename);
}",1,1,main\cpp\fileinputstream.cpp,FileInputStream.FileInputStream,,false,42,46,FileInputStream,,,4,ANY FileInputStream.FileInputStream (LogString)
20269,METHOD,main\cpp\fileinputstream.cpp:<global>,TYPE_DECL,"FileInputStream::FileInputStream(const logchar* filename) :
	m_priv(std::make_unique<FileInputStreamPrivate>())
{
	LogString fn(filename);
	open(fn);
}",1,1,main\cpp\fileinputstream.cpp,FileInputStream.FileInputStream,,false,48,53,FileInputStream,,,5,ANY FileInputStream.FileInputStream (logchar*)
20279,METHOD,main\cpp\fileinputstream.cpp:<global>,TYPE_DECL,"void FileInputStream::open(const LogString& filename)
{
	apr_fileperms_t perm = APR_OS_DEFAULT;
	apr_int32_t flags = APR_READ;
	apr_status_t stat = File().setPath(filename).open(&m_priv->fileptr, flags, perm, m_priv->pool);

	if (stat != APR_SUCCESS)
	{
		throw IOException(stat);
	}
}",1,1,main\cpp\fileinputstream.cpp,FileInputStream.open,,false,56,66,open,,,6,void FileInputStream.open (LogString)
20320,METHOD,main\cpp\fileinputstream.cpp:<global>,TYPE_DECL,"FileInputStream::FileInputStream(const File& aFile) :
	m_priv(std::make_unique<FileInputStreamPrivate>())
{
	apr_fileperms_t perm = APR_OS_DEFAULT;
	apr_int32_t flags = APR_READ;
	apr_status_t stat = aFile.open(&m_priv->fileptr, flags, perm, m_priv->pool);

	if (stat != APR_SUCCESS)
	{
		throw IOException(stat);
	}
}",1,1,main\cpp\fileinputstream.cpp,FileInputStream.FileInputStream,,false,69,80,FileInputStream,,,7,ANY FileInputStream.FileInputStream (File)
20357,METHOD,main\cpp\fileinputstream.cpp:<global>,TYPE_DECL,"FileInputStream::~FileInputStream()
{
	if (m_priv->fileptr != NULL && !APRInitializer::isDestructed)
	{
		apr_file_close(m_priv->fileptr);
	}
}",1,1,main\cpp\fileinputstream.cpp,FileInputStream.~FileInputStream,,false,83,89,~FileInputStream,,,8,ANY FileInputStream.~FileInputStream ()
20377,METHOD,main\cpp\fileinputstream.cpp:<global>,TYPE_DECL,"void FileInputStream::close()
{
	apr_status_t stat = apr_file_close(m_priv->fileptr);

	if (stat == APR_SUCCESS)
	{
		m_priv->fileptr = NULL;
	}
	else
	{
		throw IOException(stat);
	}
}",1,1,main\cpp\fileinputstream.cpp,FileInputStream.close,,false,92,104,close,,,9,void FileInputStream.close ()
20403,METHOD,main\cpp\fileinputstream.cpp:<global>,TYPE_DECL,"int FileInputStream::read(ByteBuffer& buf)
{
	apr_size_t bytesRead = buf.remaining();
	apr_status_t stat = apr_file_read(m_priv->fileptr, buf.current(), &bytesRead);
	int retval = -1;

	if (!APR_STATUS_IS_EOF(stat))
	{
		if (stat != APR_SUCCESS)
		{
			throw IOException(stat);
		}

		buf.position(buf.position() + bytesRead);
		retval = (int)bytesRead;
	}

	return retval;
}",1,1,main\cpp\fileinputstream.cpp,FileInputStream.read,,false,107,125,read,,,10,int FileInputStream.read (ByteBuffer)
20474,METHOD,main\cpp\filelocationpatternconverter.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\filelocationpatternconverter.cpp,main\cpp\filelocationpatternconverter.cpp:<global>,,false,1,48,<global>,,,1,
20478,METHOD,main\cpp\filelocationpatternconverter.cpp:<global>,TYPE_DECL,"FileLocationPatternConverter::FileLocationPatternConverter() :
	LoggingEventPatternConverter(LOG4CXX_STR(""File Location""),
		LOG4CXX_STR(""file""))
{
}",1,1,main\cpp\filelocationpatternconverter.cpp,FileLocationPatternConverter.FileLocationPatternConverter,,false,29,33,FileLocationPatternConverter,,,3,ANY FileLocationPatternConverter.FileLocationPatternConverter ()
20482,METHOD,main\cpp\filelocationpatternconverter.cpp:<global>,TYPE_DECL,"PatternConverterPtr FileLocationPatternConverter::newInstance(
	const std::vector<LogString>& /* options */ )
{
	static WideLife<PatternConverterPtr> instance = std::make_shared<FileLocationPatternConverter>();
	return instance;
}",1,1,main\cpp\filelocationpatternconverter.cpp,FileLocationPatternConverter.newInstance,,false,35,40,newInstance,,,4,PatternConverterPtr FileLocationPatternConverter.newInstance (ANY)
20496,METHOD,main\cpp\filelocationpatternconverter.cpp:<global>,TYPE_DECL,"void FileLocationPatternConverter::format(
	const LoggingEventPtr& event,
	LogString& toAppendTo,
	Pool& /* p */ ) const
{
	append(toAppendTo, event->getLocationInformation().getFileName());
}",1,1,main\cpp\filelocationpatternconverter.cpp,FileLocationPatternConverter.format,,false,42,48,format,,,5,"void FileLocationPatternConverter.format (LoggingEventPtr,LogString,Pool)"
20529,METHOD,main\cpp\fileoutputstream.cpp:<global>,TYPE_DECL,<global>,1,2,main\cpp\fileoutputstream.cpp,main\cpp\fileoutputstream.cpp:<global>,,false,1,138,<global>,,,1,
20532,METHOD,FileOutputStreamPrivate,TYPE_DECL,FileOutputStreamPrivate() : fileptr(nullptr) {},2,48,main\cpp\fileoutputstream.cpp,FileOutputStreamPrivate.FileOutputStreamPrivate,,false,34,34,FileOutputStreamPrivate,,,1,ANY FileOutputStreamPrivate.FileOutputStreamPrivate ()
20540,METHOD,main\cpp\fileoutputstream.cpp:<global>,TYPE_DECL,"FileOutputStream::FileOutputStream(const LogString& filename,
	bool append) : m_priv(std::make_unique<FileOutputStreamPrivate>())
{
	m_priv->fileptr = open(filename, append, m_priv->pool);
}",1,1,main\cpp\fileoutputstream.cpp,FileOutputStream.FileOutputStream,,false,42,46,FileOutputStream,,,4,"ANY FileOutputStream.FileOutputStream (LogString,bool)"
20556,METHOD,main\cpp\fileoutputstream.cpp:<global>,TYPE_DECL,"FileOutputStream::FileOutputStream(const logchar* filename,
	bool append) : m_priv(std::make_unique<FileOutputStreamPrivate>())
{
	m_priv->fileptr = open(filename, append, m_priv->pool);
}",1,1,main\cpp\fileoutputstream.cpp,FileOutputStream.FileOutputStream,,false,48,52,FileOutputStream,,,5,"ANY FileOutputStream.FileOutputStream (logchar*,bool)"
20572,METHOD,main\cpp\fileoutputstream.cpp:<global>,TYPE_DECL,"apr_file_t* FileOutputStream::open(const LogString& filename,
	bool append, Pool& pool)
{
	apr_fileperms_t perm = APR_OS_DEFAULT;
	apr_int32_t flags = APR_WRITE | APR_CREATE;

	if (append)
	{
		flags |= APR_APPEND;
	}
	else
	{
		flags |= APR_TRUNCATE;
	}

	File fn;
	fn.setPath(filename);
	apr_file_t* fileptr = 0;
	apr_status_t stat = fn.open(&fileptr, flags, perm, pool);

	if (stat != APR_SUCCESS)
	{
		throw IOException(stat);
	}

	return fileptr;
}",1,1,main\cpp\fileoutputstream.cpp,FileOutputStream.open,,false,54,80,open,,,6,"apr_file_t FileOutputStream.open (LogString,bool,Pool)"
20632,METHOD,main\cpp\fileoutputstream.cpp:<global>,TYPE_DECL,"FileOutputStream::~FileOutputStream()
{
	if (m_priv->fileptr != NULL && !APRInitializer::isDestructed)
	{
		apr_file_close(m_priv->fileptr);
	}
}",1,1,main\cpp\fileoutputstream.cpp,FileOutputStream.~FileOutputStream,,false,82,88,~FileOutputStream,,,7,ANY FileOutputStream.~FileOutputStream ()
20652,METHOD,main\cpp\fileoutputstream.cpp:<global>,TYPE_DECL,"void FileOutputStream::close(Pool& /* p */)
{
	if (m_priv->fileptr != NULL)
	{
		apr_status_t stat = apr_file_close(m_priv->fileptr);

		if (stat != APR_SUCCESS)
		{
			throw IOException(stat);
		}

		m_priv->fileptr = NULL;
	}
}",1,1,main\cpp\fileoutputstream.cpp,FileOutputStream.close,,false,90,103,close,,,8,void FileOutputStream.close (Pool)
20684,METHOD,main\cpp\fileoutputstream.cpp:<global>,TYPE_DECL,"void FileOutputStream::flush(Pool& /* p */)
{
}",1,1,main\cpp\fileoutputstream.cpp,FileOutputStream.flush,,false,105,107,flush,,,9,void FileOutputStream.flush (Pool)
20689,METHOD,main\cpp\fileoutputstream.cpp:<global>,TYPE_DECL,"void FileOutputStream::write(ByteBuffer& buf, Pool& /* p */ )
{
	if (m_priv->fileptr == NULL)
	{
		throw IOException(-1);
	}

	size_t nbytes = buf.remaining();
	size_t pos = buf.position();
	const char* data = buf.data();

	while (nbytes > 0)
	{
		apr_status_t stat = apr_file_write(
				m_priv->fileptr, data + pos, &nbytes);

		if (stat != APR_SUCCESS)
		{
			throw IOException(stat);
		}

		pos += nbytes;
		buf.position(pos);
		nbytes = buf.remaining();
	}
}",1,1,main\cpp\fileoutputstream.cpp,FileOutputStream.write,,false,109,134,write,,,10,"void FileOutputStream.write (ByteBuffer,Pool)"
20766,METHOD,main\cpp\fileoutputstream.cpp:<global>,TYPE_DECL,"apr_file_t* FileOutputStream::getFilePtr() const{
	return m_priv->fileptr;
}",1,1,main\cpp\fileoutputstream.cpp,FileOutputStream.getFilePtr,,false,136,138,getFilePtr,,,11,apr_file_t FileOutputStream.getFilePtr ()
20783,METHOD,main\cpp\filerenameaction.cpp:<global>,TYPE_DECL,<global>,1,8,main\cpp\filerenameaction.cpp,main\cpp\filerenameaction.cpp:<global>,,false,1,52,<global>,,,1,
20786,METHOD,FileRenameActionPrivate,TYPE_DECL,"FileRenameActionPrivate( const File& toRename,
		const File& renameTo,
		bool renameEmptyFile1):
		source(toRename), destination(renameTo), renameEmptyFile(renameEmptyFile1) {}",2,79,main\cpp\filerenameaction.cpp,FileRenameActionPrivate.FileRenameActionPrivate,,false,30,33,FileRenameActionPrivate,,,1,"ANY FileRenameActionPrivate.FileRenameActionPrivate (File,File,bool)"
20798,METHOD,main\cpp\filerenameaction.cpp:<global>,TYPE_DECL,"FileRenameAction::FileRenameAction(const File& toRename,
	const File& renameTo,
	bool renameEmptyFile1)
	: Action( std::make_unique<FileRenameActionPrivate>(toRename, renameTo, renameEmptyFile1) )
{
}",1,1,main\cpp\filerenameaction.cpp,FileRenameAction.FileRenameAction,,false,42,47,FileRenameAction,,,4,"ANY FileRenameAction.FileRenameAction (File,File,bool)"
20805,METHOD,main\cpp\filerenameaction.cpp:<global>,TYPE_DECL,"bool FileRenameAction::execute(LOG4CXX_NS::helpers::Pool& pool1) const
{
	return priv->source.renameTo(priv->destination, pool1);
}",1,8,main\cpp\filerenameaction.cpp,FileRenameAction.execute,,false,49,52,execute,,,5,bool FileRenameAction.execute (ANY)
20854,METHOD,main\cpp\filewatchdog.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\filewatchdog.cpp,main\cpp\filewatchdog.cpp:<global>,,false,1,161,<global>,,,1,
20861,METHOD,FileWatchdogPrivate,TYPE_DECL,"FileWatchdogPrivate(const File& file1) :
		file(file1), delay(DEFAULT_DELAY), lastModif(0),
		warnedAlready(false), interrupted(0), thread(){}",2,50,main\cpp\filewatchdog.cpp,FileWatchdogPrivate.FileWatchdogPrivate,,false,34,36,FileWatchdogPrivate,,,1,ANY FileWatchdogPrivate.FileWatchdogPrivate (File)
20875,METHOD,main\cpp\filewatchdog.cpp:<global>,TYPE_DECL,"FileWatchdog::FileWatchdog(const File& file1)
	: m_priv(std::make_unique<FileWatchdogPrivate>(file1))
{
}",1,1,main\cpp\filewatchdog.cpp,FileWatchdog.FileWatchdog,,false,56,59,FileWatchdog,,,4,ANY FileWatchdog.FileWatchdog (File)
20880,METHOD,main\cpp\filewatchdog.cpp:<global>,TYPE_DECL,"FileWatchdog::~FileWatchdog()
{
	if (m_priv->thread.joinable())
		stop();
}",1,1,main\cpp\filewatchdog.cpp,FileWatchdog.~FileWatchdog,,false,61,65,~FileWatchdog,,,5,ANY FileWatchdog.~FileWatchdog ()
20893,METHOD,main\cpp\filewatchdog.cpp:<global>,TYPE_DECL,"bool FileWatchdog::is_active()
{
	return m_priv->thread.joinable();
}",1,1,main\cpp\filewatchdog.cpp,FileWatchdog.is_active,,false,68,71,is_active,,,6,bool FileWatchdog.is_active ()
20904,METHOD,main\cpp\filewatchdog.cpp:<global>,TYPE_DECL,"void FileWatchdog::stop()
{
	LogLog::debug(LOG4CXX_STR(""Stopping file watchdog""));
	m_priv->interrupted = 0xFFFF;

	{
		std::unique_lock<std::mutex> lock(m_priv->interrupt_mutex);
		m_priv->interrupt.notify_all();
	}
	m_priv->thread.join();
}",1,1,main\cpp\filewatchdog.cpp,FileWatchdog.stop,,false,73,83,stop,,,7,void FileWatchdog.stop ()
20944,METHOD,main\cpp\filewatchdog.cpp:<global>,TYPE_DECL,"const File& FileWatchdog::file()
{
	return m_priv->file;
}",1,1,main\cpp\filewatchdog.cpp,FileWatchdog.file,,false,85,88,file,,,8,File FileWatchdog.file ()
20952,METHOD,main\cpp\filewatchdog.cpp:<global>,TYPE_DECL,"void FileWatchdog::checkAndConfigure()
{
	LogString msg(LOG4CXX_STR(""Checking [""));
	msg += m_priv->file.getPath();
	msg += LOG4CXX_STR(""]"");
	LogLog::debug(msg);
	Pool pool1;

	if (!m_priv->file.exists(pool1))
	{
		if (!m_priv->warnedAlready)
		{
			LogLog::debug(((LogString) LOG4CXX_STR(""[""))
				+ m_priv->file.getPath()
				+ LOG4CXX_STR(""] does not exist.""));
			m_priv->warnedAlready = true;
		}
	}
	else
	{
		auto thisMod = m_priv->file.lastModified(pool1);

		if (thisMod > m_priv->lastModif)
		{
			m_priv->lastModif = thisMod;
			doOnChange();
			m_priv->warnedAlready = false;
		}
	}
}",1,1,main\cpp\filewatchdog.cpp,FileWatchdog.checkAndConfigure,,false,90,119,checkAndConfigure,,,9,void FileWatchdog.checkAndConfigure ()
21047,METHOD,main\cpp\filewatchdog.cpp:<global>,TYPE_DECL,"void FileWatchdog::run()
{
	LogString msg(LOG4CXX_STR(""Checking [""));
	msg += m_priv->file.getPath();
	msg += LOG4CXX_STR(""] at "");
	StringHelper::toString((int)m_priv->delay, m_priv->pool, msg);
	msg += LOG4CXX_STR("" ms interval"");
	LogLog::debug(msg);

	while (!is_interrupted())
	{
		std::unique_lock<std::mutex> lock( m_priv->interrupt_mutex );
		if (!m_priv->interrupt.wait_for( lock, std::chrono::milliseconds( m_priv->delay ),
			std::bind(&FileWatchdog::is_interrupted, this) ))
			checkAndConfigure();
	}

	LogString msg2(LOG4CXX_STR(""Stop checking [""));
	msg2 += m_priv->file.getPath();
	msg2 += LOG4CXX_STR(""]"");
	LogLog::debug(msg2);
}",1,1,main\cpp\filewatchdog.cpp,FileWatchdog.run,,false,121,142,run,,,10,void FileWatchdog.run ()
21155,METHOD,main\cpp\filewatchdog.cpp:<global>,TYPE_DECL,"void FileWatchdog::start()
{
	checkAndConfigure();
	if (!m_priv->thread.joinable())
	{
		m_priv->interrupted = 0;
		m_priv->thread = ThreadUtility::instance()->createThread(LOG4CXX_STR(""FileWatchdog""), &FileWatchdog::run, this);
	}
}",1,1,main\cpp\filewatchdog.cpp,FileWatchdog.start,,false,144,152,start,,,11,void FileWatchdog.start ()
21192,METHOD,main\cpp\filewatchdog.cpp:<global>,TYPE_DECL,"bool FileWatchdog::is_interrupted()
{
	return m_priv->interrupted == 0xFFFF;
}",1,1,main\cpp\filewatchdog.cpp,FileWatchdog.is_interrupted,,false,154,157,is_interrupted,,,12,bool FileWatchdog.is_interrupted ()
21202,METHOD,main\cpp\filewatchdog.cpp:<global>,TYPE_DECL,"void FileWatchdog::setDelay(long delay1){
	m_priv->delay = delay1;
}",1,1,main\cpp\filewatchdog.cpp,FileWatchdog.setDelay,,false,159,161,setDelay,,,13,void FileWatchdog.setDelay (long)
21221,METHOD,main\cpp\filter.cpp:<global>,TYPE_DECL,<global>,1,2,main\cpp\filter.cpp,main\cpp\filter.cpp:<global>,,false,1,54,<global>,,,1,
21223,METHOD,main\cpp\filter.cpp:<global>,TYPE_DECL,"Filter::Filter() : m_priv(std::make_unique<FilterPrivate>())
{
}",1,1,main\cpp\filter.cpp,Filter.Filter,,false,26,28,Filter,,,1,ANY Filter.Filter ()
21227,METHOD,main\cpp\filter.cpp:<global>,TYPE_DECL,"Filter::Filter(std::unique_ptr<FilterPrivate> priv) :
	m_priv(std::move(priv))
{

}",1,1,main\cpp\filter.cpp,Filter.Filter,,false,30,34,Filter,,,2,ANY Filter.Filter (ANY)
21232,METHOD,main\cpp\filter.cpp:<global>,TYPE_DECL,Filter::~Filter() {},1,20,main\cpp\filter.cpp,Filter.~Filter,,false,36,36,~Filter,,,3,ANY Filter.~Filter ()
21236,METHOD,main\cpp\filter.cpp:<global>,TYPE_DECL,"FilterPtr Filter::getNext() const
{
	return m_priv->next;
}",1,1,main\cpp\filter.cpp,Filter.getNext,,false,38,41,getNext,,,4,FilterPtr Filter.getNext ()
21244,METHOD,main\cpp\filter.cpp:<global>,TYPE_DECL,"void Filter::setNext(const FilterPtr& newNext)
{
	m_priv->next = newNext;
}",1,1,main\cpp\filter.cpp,Filter.setNext,,false,43,46,setNext,,,5,void Filter.setNext (FilterPtr)
21254,METHOD,main\cpp\filter.cpp:<global>,TYPE_DECL,"void Filter::activateOptions(Pool&)
{
}",1,1,main\cpp\filter.cpp,Filter.activateOptions,,false,48,50,activateOptions,,,6,void Filter.activateOptions (Pool)
21259,METHOD,main\cpp\filter.cpp:<global>,TYPE_DECL,"void Filter::setOption(const LogString&, const LogString&)
{
}",1,1,main\cpp\filter.cpp,Filter.setOption,,false,52,54,setOption,,,7,"void Filter.setOption (LogString,LogString)"
21274,METHOD,main\cpp\filterbasedtriggeringpolicy.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\filterbasedtriggeringpolicy.cpp,main\cpp\filterbasedtriggeringpolicy.cpp:<global>,,false,1,125,<global>,,,1,
21281,METHOD,main\cpp\filterbasedtriggeringpolicy.cpp:<global>,TYPE_DECL,"FilterBasedTriggeringPolicy::FilterBasedTriggeringPolicy() :
	m_priv(std::make_unique<FilterBasedTriggeringPolicyPrivate>())
{
}",1,1,main\cpp\filterbasedtriggeringpolicy.cpp,FilterBasedTriggeringPolicy.FilterBasedTriggeringPolicy,,false,41,44,FilterBasedTriggeringPolicy,,,4,ANY FilterBasedTriggeringPolicy.FilterBasedTriggeringPolicy ()
21285,METHOD,main\cpp\filterbasedtriggeringpolicy.cpp:<global>,TYPE_DECL,"FilterBasedTriggeringPolicy::~FilterBasedTriggeringPolicy()
{
}",1,1,main\cpp\filterbasedtriggeringpolicy.cpp,FilterBasedTriggeringPolicy.~FilterBasedTriggeringPolicy,,false,47,49,~FilterBasedTriggeringPolicy,,,5,ANY FilterBasedTriggeringPolicy.~FilterBasedTriggeringPolicy ()
21289,METHOD,main\cpp\filterbasedtriggeringpolicy.cpp:<global>,TYPE_DECL,"bool FilterBasedTriggeringPolicy::isTriggeringEvent(
	Appender* /* appender */,
	const LOG4CXX_NS::spi::LoggingEventPtr& event,
	const LogString& /* filename */,
	size_t /* fileLength */ )
{
	if (m_priv->headFilter == NULL)
	{
		return false;
	}

	for (LOG4CXX_NS::spi::FilterPtr f = m_priv->headFilter; f != NULL; f = f->getNext())
	{
		switch (f->decide(event))
		{
			case Filter::DENY:
				return false;

			case Filter::ACCEPT:
				return true;

			case Filter::NEUTRAL:
				break;
		}
	}

	return true;
}",1,1,main\cpp\filterbasedtriggeringpolicy.cpp,FilterBasedTriggeringPolicy.isTriggeringEvent,,false,52,79,isTriggeringEvent,,,6,"bool FilterBasedTriggeringPolicy.isTriggeringEvent (Appender*,ANY,LogString,size_t)"
21350,METHOD,main\cpp\filterbasedtriggeringpolicy.cpp:<global>,TYPE_DECL,"void FilterBasedTriggeringPolicy::addFilter(const LOG4CXX_NS::spi::FilterPtr& newFilter)
{
	if (m_priv->headFilter == NULL)
	{
		m_priv->headFilter = newFilter;
		m_priv->tailFilter = newFilter;
	}
	else
	{
		m_priv->tailFilter->setNext(newFilter);
		m_priv->tailFilter = newFilter;
	}
}",1,1,main\cpp\filterbasedtriggeringpolicy.cpp,FilterBasedTriggeringPolicy.addFilter,,false,85,97,addFilter,,,7,void FilterBasedTriggeringPolicy.addFilter (ANY)
21386,METHOD,main\cpp\filterbasedtriggeringpolicy.cpp:<global>,TYPE_DECL,"void FilterBasedTriggeringPolicy::clearFilters()
{
	LOG4CXX_NS::spi::FilterPtr empty;
	m_priv->headFilter = empty;
	m_priv->tailFilter = empty;
}",1,1,main\cpp\filterbasedtriggeringpolicy.cpp,FilterBasedTriggeringPolicy.clearFilters,,false,99,104,clearFilters,,,8,void FilterBasedTriggeringPolicy.clearFilters ()
21401,METHOD,main\cpp\filterbasedtriggeringpolicy.cpp:<global>,TYPE_DECL,"LOG4CXX_NS::spi::FilterPtr& FilterBasedTriggeringPolicy::getFilter()
{
	return m_priv->headFilter;
}",1,1,main\cpp\filterbasedtriggeringpolicy.cpp,FilterBasedTriggeringPolicy.getFilter,,false,106,109,getFilter,,,9,FilterPtr FilterBasedTriggeringPolicy.getFilter ()
21409,METHOD,main\cpp\filterbasedtriggeringpolicy.cpp:<global>,TYPE_DECL,"void FilterBasedTriggeringPolicy::activateOptions(LOG4CXX_NS::helpers::Pool& p)
{
	for (LOG4CXX_NS::spi::FilterPtr f = m_priv->headFilter; f != NULL; f = f->getNext())
	{
		f->activateOptions(p);
	}
}",1,1,main\cpp\filterbasedtriggeringpolicy.cpp,FilterBasedTriggeringPolicy.activateOptions,,false,114,120,activateOptions,,,10,void FilterBasedTriggeringPolicy.activateOptions (ANY)
21437,METHOD,main\cpp\filterbasedtriggeringpolicy.cpp:<global>,TYPE_DECL,"void FilterBasedTriggeringPolicy::setOption(const LogString& /* option */, const LogString& /* value */ )
{
}",1,1,main\cpp\filterbasedtriggeringpolicy.cpp,FilterBasedTriggeringPolicy.setOption,,false,122,124,setOption,,,11,"void FilterBasedTriggeringPolicy.setOption (LogString,LogString)"
21474,METHOD,main\cpp\fixedwindowrollingpolicy.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\fixedwindowrollingpolicy.cpp,main\cpp\fixedwindowrollingpolicy.cpp:<global>,,false,1,381,<global>,,,1,
21477,METHOD,FixedWindowRollingPolicyPrivate,TYPE_DECL,"FixedWindowRollingPolicyPrivate() :
		RollingPolicyBasePrivate(),
		minIndex(1),
		maxIndex(7),
		explicitActiveFile(false)
	{}",2,3,main\cpp\fixedwindowrollingpolicy.cpp,FixedWindowRollingPolicyPrivate.FixedWindowRollingPolicyPrivate,,false,40,45,FixedWindowRollingPolicyPrivate,,,1,ANY FixedWindowRollingPolicyPrivate.FixedWindowRollingPolicyPrivate ()
21485,METHOD,<empty>,<empty>,<empty>,1,,main\cpp\fixedwindowrollingpolicy.cpp,FixedWindowRollingPolicyPrivate:<clinit>,,false,39,,<clinit>,,,6,
21494,METHOD,main\cpp\fixedwindowrollingpolicy.cpp:<global>,TYPE_DECL,"FixedWindowRollingPolicy::FixedWindowRollingPolicy() :
	RollingPolicyBase (std::make_unique<FixedWindowRollingPolicyPrivate>())
{
}",1,1,main\cpp\fixedwindowrollingpolicy.cpp,FixedWindowRollingPolicy.FixedWindowRollingPolicy,,false,55,58,FixedWindowRollingPolicy,,,4,ANY FixedWindowRollingPolicy.FixedWindowRollingPolicy ()
21498,METHOD,main\cpp\fixedwindowrollingpolicy.cpp:<global>,TYPE_DECL,FixedWindowRollingPolicy::~FixedWindowRollingPolicy(){},1,55,main\cpp\fixedwindowrollingpolicy.cpp,FixedWindowRollingPolicy.~FixedWindowRollingPolicy,,false,60,60,~FixedWindowRollingPolicy,,,5,ANY FixedWindowRollingPolicy.~FixedWindowRollingPolicy ()
21502,METHOD,main\cpp\fixedwindowrollingpolicy.cpp:<global>,TYPE_DECL,"void FixedWindowRollingPolicy::setMaxIndex(int maxIndex1)
{
	priv->maxIndex = maxIndex1;
}",1,1,main\cpp\fixedwindowrollingpolicy.cpp,FixedWindowRollingPolicy.setMaxIndex,,false,62,65,setMaxIndex,,,6,void FixedWindowRollingPolicy.setMaxIndex (int)
21519,METHOD,main\cpp\fixedwindowrollingpolicy.cpp:<global>,TYPE_DECL,"void FixedWindowRollingPolicy::setMinIndex(int minIndex1)
{
	priv->minIndex = minIndex1;
}",1,1,main\cpp\fixedwindowrollingpolicy.cpp,FixedWindowRollingPolicy.setMinIndex,,false,67,70,setMinIndex,,,7,void FixedWindowRollingPolicy.setMinIndex (int)
21536,METHOD,main\cpp\fixedwindowrollingpolicy.cpp:<global>,TYPE_DECL,"void FixedWindowRollingPolicy::setOption(const LogString& option,
	const LogString& value)
{
	if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""MININDEX""),
			LOG4CXX_STR(""minindex"")))
	{
		priv->minIndex = OptionConverter::toInt(value, 1);
	}
	else if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""MAXINDEX""),
			LOG4CXX_STR(""maxindex"")))
	{
		priv->maxIndex = OptionConverter::toInt(value, 7);
	}
	else if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""THROWIOEXCEPTIONONFORKFAILURE""),
			LOG4CXX_STR(""throwioexceptiononforkfailure"")))
	{
		priv->throwIOExceptionOnForkFailure = OptionConverter::toBoolean(value, true);
	}
	else
	{
		RollingPolicyBase::setOption(option, value);
	}
}",1,2,main\cpp\fixedwindowrollingpolicy.cpp,FixedWindowRollingPolicy.setOption,,false,72,97,setOption,,,8,"void FixedWindowRollingPolicy.setOption (LogString,LogString)"
21638,METHOD,main\cpp\fixedwindowrollingpolicy.cpp:<global>,TYPE_DECL,"void FixedWindowRollingPolicy::activateOptions(Pool& p)
{
	RollingPolicyBase::activateOptions(p);

	if (priv->maxIndex < priv->minIndex)
	{
		LogLog::warn(
			LOG4CXX_STR(""MaxIndex  cannot be smaller than MinIndex.""));
		priv->maxIndex = priv->minIndex;
	}

	if ((priv->maxIndex - priv->minIndex) > MAX_WINDOW_SIZE)
	{
		LogLog::warn(LOG4CXX_STR(""Large window sizes are not allowed.""));
		priv->maxIndex = priv->minIndex + MAX_WINDOW_SIZE;
	}

	PatternConverterPtr itc = getIntegerPatternConverter();

	if (itc == NULL)
	{
		throw IllegalStateException();
	}
}",1,5,main\cpp\fixedwindowrollingpolicy.cpp,FixedWindowRollingPolicy.activateOptions,,false,102,125,activateOptions,,,9,void FixedWindowRollingPolicy.activateOptions (Pool)
21763,METHOD,main\cpp\fixedwindowrollingpolicy.cpp:<global>,TYPE_DECL,"RolloverDescriptionPtr FixedWindowRollingPolicy::initialize(
	const   LogString&  currentActiveFile,
	const   bool        append,
	Pool&       pool)
{
	LogString newActiveFile(currentActiveFile);
	priv->explicitActiveFile = false;

	if (currentActiveFile.length() > 0)
	{
		priv->explicitActiveFile = true;
		newActiveFile = currentActiveFile;
	}

	if (!priv->explicitActiveFile)
	{
		LogString buf;
		ObjectPtr obj = std::make_shared<Integer>(priv->minIndex);
		formatFileName(obj, buf, pool);
		newActiveFile = buf;
	}

	ActionPtr noAction;

	return std::make_shared<RolloverDescription>(newActiveFile, append, noAction, noAction);
}",1,1,main\cpp\fixedwindowrollingpolicy.cpp,FixedWindowRollingPolicy.initialize,,false,130,155,initialize,,,10,"RolloverDescriptionPtr FixedWindowRollingPolicy.initialize (LogString,bool,Pool)"
21862,METHOD,main\cpp\fixedwindowrollingpolicy.cpp:<global>,TYPE_DECL,"RolloverDescriptionPtr FixedWindowRollingPolicy::rollover(
	const   LogString&  currentActiveFile,
	const   bool        append,
	Pool&       pool)
{
	RolloverDescriptionPtr desc;

	if (priv->maxIndex < 0)
	{
		return desc;
	}

	int purgeStart = priv->minIndex;

	if (!priv->explicitActiveFile)
	{
		purgeStart++;
	}

	if (!purge(purgeStart, priv->maxIndex, pool))
	{
		return desc;
	}

	LogString buf;
	ObjectPtr obj = std::make_shared<Integer>(purgeStart);
	formatFileName(obj, buf, pool);

	LogString renameTo(buf);
	LogString compressedName(renameTo);
	ActionPtr compressAction ;

	if(getCreateIntermediateDirectories()){
		File compressedFile(compressedName);
		File compressedParent (compressedFile.getParent(pool));
		compressedParent.mkdirs(pool);
	}

	if (StringHelper::endsWith(renameTo, LOG4CXX_STR("".gz"")))
	{
		renameTo.resize(renameTo.size() - 3);
		GZCompressActionPtr comp = std::make_shared<GZCompressAction>(
					File().setPath(renameTo),
					File().setPath(compressedName),
			...",1,5,main\cpp\fixedwindowrollingpolicy.cpp,FixedWindowRollingPolicy.rollover,,false,160,229,rollover,,,11,"RolloverDescriptionPtr FixedWindowRollingPolicy.rollover (LogString,bool,Pool)"
22128,METHOD,main\cpp\fixedwindowrollingpolicy.cpp:<global>,TYPE_DECL,"int FixedWindowRollingPolicy::getMaxIndex() const
{
	return priv->maxIndex;
}",1,8,main\cpp\fixedwindowrollingpolicy.cpp,FixedWindowRollingPolicy.getMaxIndex,,false,235,238,getMaxIndex,,,12,int FixedWindowRollingPolicy.getMaxIndex ()
22143,METHOD,main\cpp\fixedwindowrollingpolicy.cpp:<global>,TYPE_DECL,"int FixedWindowRollingPolicy::getMinIndex() const
{
	return priv->minIndex;
}",1,8,main\cpp\fixedwindowrollingpolicy.cpp,FixedWindowRollingPolicy.getMinIndex,,false,244,247,getMinIndex,,,13,int FixedWindowRollingPolicy.getMinIndex ()
22158,METHOD,main\cpp\fixedwindowrollingpolicy.cpp:<global>,TYPE_DECL,"bool FixedWindowRollingPolicy::purge(int lowIndex, int highIndex, Pool& p) const
{
	int suffixLength = 0;

	std::vector<FileRenameActionPtr> renames;
	LogString buf;
	ObjectPtr obj = std::make_shared<Integer>(lowIndex);
	formatFileName(obj, buf, p);

	LogString lowFilename(buf);

	if (lowFilename.compare(lowFilename.length() - 3, 3, LOG4CXX_STR("".gz"")) == 0)
	{
		suffixLength = 3;
	}
	else if (lowFilename.compare(lowFilename.length() - 4, 4, LOG4CXX_STR("".zip"")) == 0)
	{
		suffixLength = 4;
	}

	for (int i = lowIndex; i <= highIndex; i++)
	{
		File toRenameCompressed;
		toRenameCompressed.setPath(lowFilename);
		File toRenameBase;
		toRenameBase.setPath(lowFilename.substr(0, lowFilename.length() - suffixLength));
		File* toRename = &toRenameCompressed;
		bool isBase = false;
		bool exists = toRenameCompressed.exists(p);

		if (suffixLength > 0)
		{
			if (exists)
			{
				if (toRenameBase.exists(p))
				{
					toRenameBase.deleteFile(p);
				}
			}
			else
			{
				toRename = &toRen...",1,1,main\cpp\fixedwindowrollingpolicy.cpp,FixedWindowRollingPolicy.purge,,false,257,369,purge,,,14,"bool FixedWindowRollingPolicy.purge (int,int,Pool)"
22459,METHOD,main\cpp\fixedwindowrollingpolicy.cpp:<global>,TYPE_DECL,"LOG4CXX_NS::pattern::PatternMap FixedWindowRollingPolicy::getFormatSpecifiers() const
{
	PatternMap specs;
	RULES_PUT(""i"", IntegerPatternConverter);
	RULES_PUT(""index"", IntegerPatternConverter);
	return specs;
}",1,1,main\cpp\fixedwindowrollingpolicy.cpp,FixedWindowRollingPolicy.getFormatSpecifiers,,false,375,381,getFormatSpecifiers,,,15,PatternMap FixedWindowRollingPolicy.getFormatSpecifiers ()
22529,METHOD,main\cpp\fmtlayout.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\fmtlayout.cpp,main\cpp\fmtlayout.cpp:<global>,,false,1,144,<global>,,,1,
22532,METHOD,FMTLayoutPrivate,TYPE_DECL,"FMTLayoutPrivate()
		: expectedPatternLength(100)
		{}",2,4,main\cpp\fmtlayout.cpp,FMTLayoutPrivate.FMTLayoutPrivate,,false,34,36,FMTLayoutPrivate,,,1,ANY FMTLayoutPrivate.FMTLayoutPrivate ()
22536,METHOD,FMTLayoutPrivate,TYPE_DECL,"FMTLayoutPrivate(const LogString& pattern)
		: conversionPattern(pattern)
		, expectedPatternLength(100)
	{}",2,3,main\cpp\fmtlayout.cpp,FMTLayoutPrivate.FMTLayoutPrivate,,false,38,41,FMTLayoutPrivate,,,2,ANY FMTLayoutPrivate.FMTLayoutPrivate (LogString)
22545,METHOD,main\cpp\fmtlayout.cpp:<global>,TYPE_DECL,"FMTLayout::FMTLayout() :
	m_priv(std::make_unique<FMTLayoutPrivate>())
{}",1,2,main\cpp\fmtlayout.cpp,FMTLayout.FMTLayout,,false,51,53,FMTLayout,,,4,ANY FMTLayout.FMTLayout ()
22549,METHOD,main\cpp\fmtlayout.cpp:<global>,TYPE_DECL,"FMTLayout::FMTLayout(const LogString& pattern) :
	m_priv(std::make_unique<FMTLayoutPrivate>(pattern))
{}",1,2,main\cpp\fmtlayout.cpp,FMTLayout.FMTLayout,,false,55,57,FMTLayout,,,5,ANY FMTLayout.FMTLayout (LogString)
22554,METHOD,main\cpp\fmtlayout.cpp:<global>,TYPE_DECL,FMTLayout::~FMTLayout(){},1,25,main\cpp\fmtlayout.cpp,FMTLayout.~FMTLayout,,false,59,59,~FMTLayout,,,6,ANY FMTLayout.~FMTLayout ()
22558,METHOD,main\cpp\fmtlayout.cpp:<global>,TYPE_DECL,"void FMTLayout::setConversionPattern(const LogString& pattern)
{
	m_priv->conversionPattern = pattern;
	helpers::Pool pool;
	activateOptions(pool);
}",1,1,main\cpp\fmtlayout.cpp,FMTLayout.setConversionPattern,,false,61,66,setConversionPattern,,,7,void FMTLayout.setConversionPattern (LogString)
22571,METHOD,main\cpp\fmtlayout.cpp:<global>,TYPE_DECL,"LogString FMTLayout::getConversionPattern() const
{
	return m_priv->conversionPattern;
}",1,1,main\cpp\fmtlayout.cpp,FMTLayout.getConversionPattern,,false,68,71,getConversionPattern,,,8,LogString FMTLayout.getConversionPattern ()
22579,METHOD,main\cpp\fmtlayout.cpp:<global>,TYPE_DECL,"void FMTLayout::setOption(const LogString& option, const LogString& value)
{
	if (helpers::StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""CONVERSIONPATTERN""),
			LOG4CXX_STR(""conversionpattern"")))
	{
		m_priv->conversionPattern = helpers::OptionConverter::convertSpecialChars(value);
	}
}",1,1,main\cpp\fmtlayout.cpp,FMTLayout.setOption,,false,73,81,setOption,,,9,"void FMTLayout.setOption (LogString,LogString)"
22609,METHOD,main\cpp\fmtlayout.cpp:<global>,TYPE_DECL,"void FMTLayout::activateOptions(helpers::Pool&)
{
	m_priv->expectedPatternLength = getFormattedEventCharacterCount() * 2;
}",1,1,main\cpp\fmtlayout.cpp,FMTLayout.activateOptions,,false,83,86,activateOptions,,,10,void FMTLayout.activateOptions (ANY)
22621,METHOD,main\cpp\fmtlayout.cpp:<global>,TYPE_DECL,"void FMTLayout::format(LogString& output,
	const spi::LoggingEventPtr& event,
	LOG4CXX_NS::helpers::Pool&) const
{
	output.reserve(m_priv->expectedPatternLength + event->getMessage().size());
	auto locationFull = fmt::format(""{}({})"",
										 event->getLocationInformation().getFileName(),
										 event->getLocationInformation().getLineNumber());
	LogString ndc;
	event->getNDC(ndc);
#if LOG4CXX_LOGCHAR_IS_WCHAR || LOG4CXX_LOGCHAR_IS_UNICHAR
	LOG4CXX_ENCODE_CHAR(sNDC, ndc);
	LOG4CXX_ENCODE_CHAR(sPattern, m_priv->conversionPattern);
	LOG4CXX_ENCODE_CHAR(sLogger, event->getLoggerName());
	LOG4CXX_ENCODE_CHAR(sLevel, event->getLevel()->toString());
	LOG4CXX_ENCODE_CHAR(sMsg, event->getMessage());
	LOG4CXX_ENCODE_CHAR(sThread, event->getThreadName());
	LOG4CXX_ENCODE_CHAR(endOfLine, LOG4CXX_EOL);
#else
	auto& sNDC = ndc;
	auto& sPattern = m_priv->conversionPattern;
	auto& sLogger = event->getLoggerName();
	auto sLevel = event->getLevel()->toString();
	auto& sMsg = event->getMessage(...",1,1,main\cpp\fmtlayout.cpp,FMTLayout.format,,false,88,144,format,,,11,"void FMTLayout.format (LogString,ANY,ANY)"
22949,METHOD,main\cpp\formattinginfo.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\formattinginfo.cpp,main\cpp\formattinginfo.cpp:<global>,,false,1,115,<global>,,,1,
22952,METHOD,FormattingInfoPrivate,TYPE_DECL,"FormattingInfoPrivate(const bool leftAlign1, const int minLength1, const int maxLength1):
		minLength(minLength1),
		maxLength(maxLength1),
		leftAlign(leftAlign1) {}",2,26,main\cpp\formattinginfo.cpp,FormattingInfoPrivate.FormattingInfoPrivate,,false,27,30,FormattingInfoPrivate,,,1,"ANY FormattingInfoPrivate.FormattingInfoPrivate (bool,int,int)"
22964,METHOD,main\cpp\formattinginfo.cpp:<global>,TYPE_DECL,"FormattingInfo::FormattingInfo(
	const bool leftAlign1, const int minLength1, const int maxLength1) :
	m_priv(std::make_unique<FormattingInfoPrivate>(leftAlign1, minLength1, maxLength1))
{
}",1,1,main\cpp\formattinginfo.cpp,FormattingInfo.FormattingInfo,,false,56,60,FormattingInfo,,,4,"ANY FormattingInfo.FormattingInfo (bool,int,int)"
22971,METHOD,main\cpp\formattinginfo.cpp:<global>,TYPE_DECL,FormattingInfo::~FormattingInfo() {},1,36,main\cpp\formattinginfo.cpp,FormattingInfo.~FormattingInfo,,false,62,62,~FormattingInfo,,,5,ANY FormattingInfo.~FormattingInfo ()
22975,METHOD,main\cpp\formattinginfo.cpp:<global>,TYPE_DECL,"FormattingInfoPtr FormattingInfo::getDefault()
{
	static helpers::WideLife<FormattingInfoPtr> def= std::make_shared<FormattingInfo>(false, 0, INT_MAX);
	return def;
}",1,1,main\cpp\formattinginfo.cpp,FormattingInfo.getDefault,,false,68,72,getDefault,,,6,FormattingInfoPtr FormattingInfo.getDefault ()
22995,METHOD,main\cpp\formattinginfo.cpp:<global>,TYPE_DECL,"void FormattingInfo::format(const int fieldStart, LogString& buffer) const
{
	int rawLength = int(buffer.length() - fieldStart);

	if (rawLength > m_priv->maxLength)
	{
		buffer.erase(buffer.begin() + fieldStart,
			buffer.begin() + fieldStart + (rawLength - m_priv->maxLength));
	}
	else if (rawLength < m_priv->minLength)
	{
		if (m_priv->leftAlign)
		{
			buffer.append(m_priv->minLength - rawLength, (logchar) 0x20 /* ' ' */);
		}
		else
		{
			buffer.insert(fieldStart, m_priv->minLength - rawLength, 0x20 /* ' ' */);
		}
	}
}",1,1,main\cpp\formattinginfo.cpp,FormattingInfo.format,,false,80,100,format,,,7,"void FormattingInfo.format (int,LogString)"
23080,METHOD,main\cpp\formattinginfo.cpp:<global>,TYPE_DECL,"bool FormattingInfo::isLeftAligned() const
{
	return m_priv->leftAlign;
}",1,1,main\cpp\formattinginfo.cpp,FormattingInfo.isLeftAligned,,false,102,105,isLeftAligned,,,8,bool FormattingInfo.isLeftAligned ()
23088,METHOD,main\cpp\formattinginfo.cpp:<global>,TYPE_DECL,"int FormattingInfo::getMinLength() const
{
	return m_priv->minLength;
}",1,1,main\cpp\formattinginfo.cpp,FormattingInfo.getMinLength,,false,107,110,getMinLength,,,9,int FormattingInfo.getMinLength ()
23096,METHOD,main\cpp\formattinginfo.cpp:<global>,TYPE_DECL,"int FormattingInfo::getMaxLength() const
{
	return m_priv->maxLength;
}",1,1,main\cpp\formattinginfo.cpp,FormattingInfo.getMaxLength,,false,112,115,getMaxLength,,,10,int FormattingInfo.getMaxLength ()
23117,METHOD,main\cpp\fulllocationpatternconverter.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\fulllocationpatternconverter.cpp,main\cpp\fulllocationpatternconverter.cpp:<global>,,false,1,55,<global>,,,1,
23121,METHOD,main\cpp\fulllocationpatternconverter.cpp:<global>,TYPE_DECL,"FullLocationPatternConverter::FullLocationPatternConverter() :
	LoggingEventPatternConverter(LOG4CXX_STR(""Full Location""),
		LOG4CXX_STR(""fullLocation""))
{
}",1,1,main\cpp\fulllocationpatternconverter.cpp,FullLocationPatternConverter.FullLocationPatternConverter,,false,31,35,FullLocationPatternConverter,,,3,ANY FullLocationPatternConverter.FullLocationPatternConverter ()
23125,METHOD,main\cpp\fulllocationpatternconverter.cpp:<global>,TYPE_DECL,"PatternConverterPtr FullLocationPatternConverter::newInstance(
	const std::vector<LogString>& /* options */)
{
	static WideLife<PatternConverterPtr> instance = std::make_shared<FullLocationPatternConverter>();
	return instance;
}",1,1,main\cpp\fulllocationpatternconverter.cpp,FullLocationPatternConverter.newInstance,,false,37,42,newInstance,,,4,PatternConverterPtr FullLocationPatternConverter.newInstance (ANY)
23139,METHOD,main\cpp\fulllocationpatternconverter.cpp:<global>,TYPE_DECL,"void FullLocationPatternConverter::format(
	const LoggingEventPtr& event,
	LogString& toAppendTo,
	Pool& p) const
{
	append(toAppendTo, event->getLocationInformation().getFileName());
	toAppendTo.append(1, (logchar) 0x28 /* '(' */);
	StringHelper::toString(
		event->getLocationInformation().getLineNumber(),
		p, toAppendTo);
	toAppendTo.append(1, (logchar) 0x29 /* ')' */);
}",1,1,main\cpp\fulllocationpatternconverter.cpp,FullLocationPatternConverter.format,,false,44,55,format,,,5,"void FullLocationPatternConverter.format (LoggingEventPtr,LogString,Pool)"
23201,METHOD,main\cpp\gzcompressaction.cpp:<global>,TYPE_DECL,<global>,1,5,main\cpp\gzcompressaction.cpp,main\cpp\gzcompressaction.cpp:<global>,,false,1,178,<global>,,,1,
23204,METHOD,GZCompressActionPrivate,TYPE_DECL,"GZCompressActionPrivate( const File& toRename,
		const File& renameTo,
		bool deleteSource):
		source(toRename), destination(renameTo), deleteSource(deleteSource) {}",2,72,main\cpp\gzcompressaction.cpp,GZCompressActionPrivate.GZCompressActionPrivate,,false,34,37,GZCompressActionPrivate,,,1,"ANY GZCompressActionPrivate.GZCompressActionPrivate (File,File,bool)"
23215,METHOD,<empty>,<empty>,<empty>,1,,main\cpp\gzcompressaction.cpp,GZCompressActionPrivate:<clinit>,,false,32,,<clinit>,,,6,
23224,METHOD,main\cpp\gzcompressaction.cpp:<global>,TYPE_DECL,"GZCompressAction::GZCompressAction(const File& src,
	const File& dest,
	bool del)
	: Action(std::make_unique<GZCompressActionPrivate>(
			  src, dest, del))
{
}",1,1,main\cpp\gzcompressaction.cpp,GZCompressAction.GZCompressAction,,false,47,53,GZCompressAction,,,4,"ANY GZCompressAction.GZCompressAction (File,File,bool)"
23231,METHOD,main\cpp\gzcompressaction.cpp:<global>,TYPE_DECL,GZCompressAction::~GZCompressAction() {},1,40,main\cpp\gzcompressaction.cpp,GZCompressAction.~GZCompressAction,,false,55,55,~GZCompressAction,,,5,ANY GZCompressAction.~GZCompressAction ()
23235,METHOD,main\cpp\gzcompressaction.cpp:<global>,TYPE_DECL,"bool GZCompressAction::execute(LOG4CXX_NS::helpers::Pool& p) const
{
	if (priv->source.exists(p))
	{
		apr_pool_t* aprpool = p.getAPRPool();
		apr_procattr_t* attr;
		apr_status_t stat = apr_procattr_create(&attr, aprpool);

		if (stat != APR_SUCCESS)
		{
			throw IOException(stat);
		}

		stat = apr_procattr_io_set(attr, APR_NO_PIPE, APR_FULL_BLOCK, APR_FULL_BLOCK);

		if (stat != APR_SUCCESS)
		{
			throw IOException(stat);
		}

		stat = apr_procattr_cmdtype_set(attr, APR_PROGRAM_PATH);

		if (stat != APR_SUCCESS)
		{
			throw IOException(stat);
		}

		//
		//   set child process output to destination file
		//
		apr_file_t* child_out;
		apr_int32_t flags = APR_FOPEN_READ | APR_FOPEN_WRITE |
			APR_FOPEN_CREATE | APR_FOPEN_TRUNCATE;
		stat = priv->destination.open(&child_out, flags, APR_OS_DEFAULT, p);

		if (stat != APR_SUCCESS)
		{
			throw IOException(stat);
		}

		stat =  apr_procattr_child_out_set(attr, child_out, NULL);

		if (stat != APR_SUCCESS)
		{
			throw IOException(st...",1,5,main\cpp\gzcompressaction.cpp,GZCompressAction.execute,,false,57,174,execute,,,6,bool GZCompressAction.execute (ANY)
23591,METHOD,main\cpp\gzcompressaction.cpp:<global>,TYPE_DECL,"void GZCompressAction::setThrowIOExceptionOnForkFailure(bool throwIO){
	priv->throwIOExceptionOnForkFailure = throwIO;
}",1,1,main\cpp\gzcompressaction.cpp,GZCompressAction.setThrowIOExceptionOnForkFailure,,false,176,178,setThrowIOExceptionOnForkFailure,,,7,void GZCompressAction.setThrowIOExceptionOnForkFailure (bool)
23625,METHOD,main\cpp\hexdump.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\hexdump.cpp,main\cpp\hexdump.cpp:<global>,,false,1,116,<global>,,,1,
23628,METHOD,main\cpp\hexdump.cpp:<global>,TYPE_DECL,"LogString LOG4CXX_NS::hexdump(const void* bytes, uint32_t len, HexdumpFlags flags){
	LogString ret;
	const uint8_t* bytes_u8 = static_cast<const uint8_t*>(bytes);
	LogStream sstream;
#if LOG4CXX_LOGCHAR_IS_WCHAR
	const wchar_t fill_char = L'0';
	const wchar_t space_fill_char = L' ';
#else
	const logchar fill_char = '0';
	const logchar space_fill_char = ' ';
#endif

	if(flags & HexdumpFlags::AddStartingNewline){
		sstream << LOG4CXX_EOL;
	}

	for(uint32_t offset = 0; offset < len; offset += 16){
		if(offset != 0){
			sstream << LOG4CXX_EOL;
		}

		// Print out the offset
		sstream << std::hex << std::setw(8) << std::setfill(fill_char) << offset << std::resetiosflags(std::ios_base::fmtflags(0));

		sstream << std::setw(0) << LOG4CXX_STR(""  "");

		// Print out the first 8 bytes
		for(int byte = 0; byte < 8; byte++){
			if(offset + byte >= len){
				sstream << LOG4CXX_STR(""  "");
				if(byte != 8){
					sstream << LOG4CXX_STR("" "");
				}
				continue;
			}

			sstream << std::hex << std:...",1,1,main\cpp\hexdump.cpp,LOG4CXX_NS.hexdump,,false,34,116,hexdump,,,2,"LogString LOG4CXX_NS.hexdump (void*,uint32_t,HexdumpFlags)"
23964,METHOD,main\cpp\hierarchy.cpp:<global>,TYPE_DECL,"[this](const LoggerPtr& child) -> int
	{
		int result = 0;
		for (auto& node : m_priv->provisionNodes)
		{
			if (node.second.end() != std::find(node.second.begin(), node.second.end(), child))
				++result;
		}
		return result;
	}",24,2,main\cpp\hierarchy.cpp,Hierarchy.removeLogger.<lambda>0,,false,493,502,<lambda>0,,,1,int Hierarchy.removeLogger.<lambda>0 (LoggerPtr)
24042,METHOD,main\cpp\hierarchy.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\hierarchy.cpp,main\cpp\hierarchy.cpp:<global>,,false,1,524,<global>,,,1,
24047,METHOD,HierarchyPrivate,TYPE_DECL,"HierarchyPrivate()
		: configured(false)
		, emittedNoAppenderWarning(false)
		, emittedNoResourceBundleWarning(false)
		, thresholdInt(Level::ALL_INT)
	{
	}",2,2,main\cpp\hierarchy.cpp,HierarchyPrivate.HierarchyPrivate,,false,48,54,HierarchyPrivate,,,1,ANY HierarchyPrivate.HierarchyPrivate ()
24066,METHOD,main\cpp\hierarchy.cpp:<global>,TYPE_DECL,"Hierarchy::Hierarchy() :
	m_priv(std::make_unique<HierarchyPrivate>())
{
}",1,1,main\cpp\hierarchy.cpp,Hierarchy.Hierarchy,,false,75,78,Hierarchy,,,6,ANY Hierarchy.Hierarchy ()
24070,METHOD,main\cpp\hierarchy.cpp:<global>,TYPE_DECL,"Hierarchy::~Hierarchy()
{
	std::lock_guard<std::recursive_mutex> lock(m_priv->mutex);
	for (auto& item : m_priv->loggers)
	{
		if (auto& pLogger = item.second)
		{
			pLogger->removeHierarchy();
			pLogger->removeAllAppenders();
		}
	}
	if (m_priv->root)
	{
		m_priv->root->removeHierarchy();
		m_priv->root->removeAllAppenders();
	}
}",1,1,main\cpp\hierarchy.cpp,Hierarchy.~Hierarchy,,false,80,96,~Hierarchy,,,7,ANY Hierarchy.~Hierarchy ()
24126,METHOD,main\cpp\hierarchy.cpp:<global>,TYPE_DECL,"void Hierarchy::addHierarchyEventListener(const spi::HierarchyEventListenerPtr& listener)
{
	std::lock_guard<std::recursive_mutex> lock(m_priv->mutex);

	if (std::find(m_priv->listeners.begin(), m_priv->listeners.end(), listener) != m_priv->listeners.end())
	{
		LogLog::warn(LOG4CXX_STR(""Ignoring attempt to add an existent listener.""));
	}
	else
	{
		m_priv->listeners.push_back(listener);
	}
}",1,1,main\cpp\hierarchy.cpp,Hierarchy.addHierarchyEventListener,,false,98,110,addHierarchyEventListener,,,8,void Hierarchy.addHierarchyEventListener (ANY)
24184,METHOD,main\cpp\hierarchy.cpp:<global>,TYPE_DECL,"void Hierarchy::removeHierarchyEventListener(const spi::HierarchyEventListenerPtr& listener)
{
	std::lock_guard<std::recursive_mutex> lock(m_priv->mutex);

    auto found = std::find(m_priv->listeners.begin(), m_priv->listeners.end(), listener);
    if(found != m_priv->listeners.end()){
        m_priv->listeners.erase(found);
    }
}",1,1,main\cpp\hierarchy.cpp,Hierarchy.removeHierarchyEventListener,,false,112,120,removeHierarchyEventListener,,,9,void Hierarchy.removeHierarchyEventListener (ANY)
24238,METHOD,main\cpp\hierarchy.cpp:<global>,TYPE_DECL,"void Hierarchy::clear()
{
	std::lock_guard<std::recursive_mutex> lock(m_priv->mutex);
	m_priv->loggers.clear();
}",1,1,main\cpp\hierarchy.cpp,Hierarchy.clear,,false,122,126,clear,,,10,void Hierarchy.clear ()
24260,METHOD,main\cpp\hierarchy.cpp:<global>,TYPE_DECL,"void Hierarchy::emitNoAppenderWarning(const Logger* logger)
{
	bool emitWarning = false;
	{
		std::lock_guard<std::recursive_mutex> lock(m_priv->mutex);
		emitWarning = !m_priv->emittedNoAppenderWarning;
		m_priv->emittedNoAppenderWarning = true;
	}

	// No appender in hierarchy, warn user only once.
	if (emitWarning)
	{
		LogLog::warn(((LogString) LOG4CXX_STR(""No appender could be found for logger (""))
			+ logger->getName() + LOG4CXX_STR("").""));
		LogLog::warn(LOG4CXX_STR(""Please initialize the log4cxx system properly.""));
	}
}",1,1,main\cpp\hierarchy.cpp,Hierarchy.emitNoAppenderWarning,,false,128,144,emitNoAppenderWarning,,,11,void Hierarchy.emitNoAppenderWarning (Logger*)
24318,METHOD,main\cpp\hierarchy.cpp:<global>,TYPE_DECL,"LoggerPtr Hierarchy::exists(const LogString& name)
{
	std::lock_guard<std::recursive_mutex> lock(m_priv->mutex);

	LoggerPtr logger;
	LoggerMap::iterator it = m_priv->loggers.find(name);

	if (it != m_priv->loggers.end())
	{
		logger = it->second;
	}


	return logger;
}",1,1,main\cpp\hierarchy.cpp,Hierarchy.exists,,false,147,161,exists,,,12,LoggerPtr Hierarchy.exists (LogString)
24363,METHOD,main\cpp\hierarchy.cpp:<global>,TYPE_DECL,"void Hierarchy::setThreshold(const LevelPtr& l)
{
	if (l != 0)
	{
		std::lock_guard<std::recursive_mutex> lock(m_priv->mutex);
		setThresholdInternal(l);
	}
}",1,1,main\cpp\hierarchy.cpp,Hierarchy.setThreshold,,false,163,170,setThreshold,,,13,void Hierarchy.setThreshold (LevelPtr)
24387,METHOD,main\cpp\hierarchy.cpp:<global>,TYPE_DECL,"void Hierarchy::setThreshold(const LogString& levelStr)
{
	LevelPtr l(Level::toLevelLS(levelStr, 0));

	if (l != 0)
	{
		setThreshold(l);
	}
	else
	{
		LogLog::warn(((LogString) LOG4CXX_STR(""No level could be found named \""""))
			+ levelStr + LOG4CXX_STR(""\"".""));
	}
}",1,1,main\cpp\hierarchy.cpp,Hierarchy.setThreshold,,false,172,185,setThreshold,,,14,void Hierarchy.setThreshold (LogString)
24422,METHOD,main\cpp\hierarchy.cpp:<global>,TYPE_DECL,"void Hierarchy::setThresholdInternal(const LevelPtr& l)
{
	m_priv->thresholdInt = l->toInt();
	m_priv->threshold = l;

	if (m_priv->thresholdInt != Level::ALL_INT)
	{
		m_priv->configured = true;
	}
}",1,1,main\cpp\hierarchy.cpp,Hierarchy.setThresholdInternal,,false,187,196,setThresholdInternal,,,15,void Hierarchy.setThresholdInternal (LevelPtr)
24454,METHOD,main\cpp\hierarchy.cpp:<global>,TYPE_DECL,"void Hierarchy::fireAddAppenderEvent(const Logger* logger, const Appender* appender)
{
	setConfigured(true);
	HierarchyEventListenerList clonedList;
	{
		std::lock_guard<std::recursive_mutex> lock(m_priv->mutex);
		clonedList = m_priv->listeners;
	}

	HierarchyEventListenerList::iterator it, itEnd = clonedList.end();
	HierarchyEventListenerPtr listener;

	for (it = clonedList.begin(); it != itEnd; it++)
	{
		listener = *it;
		listener->addAppenderEvent(logger, appender);
	}
}",1,1,main\cpp\hierarchy.cpp,Hierarchy.fireAddAppenderEvent,,false,198,215,fireAddAppenderEvent,,,16,"void Hierarchy.fireAddAppenderEvent (Logger*,Appender*)"
24514,METHOD,main\cpp\hierarchy.cpp:<global>,TYPE_DECL,"void Hierarchy::fireRemoveAppenderEvent(const Logger* logger, const Appender* appender)

{
	HierarchyEventListenerList clonedList;
	{
		std::lock_guard<std::recursive_mutex> lock(m_priv->mutex);
		clonedList = m_priv->listeners;
	}
	HierarchyEventListenerList::iterator it, itEnd = clonedList.end();
	HierarchyEventListenerPtr listener;

	for (it = clonedList.begin(); it != itEnd; it++)
	{
		listener = *it;
		listener->removeAppenderEvent(logger, appender);
	}
}",1,1,main\cpp\hierarchy.cpp,Hierarchy.fireRemoveAppenderEvent,,false,217,233,fireRemoveAppenderEvent,,,17,"void Hierarchy.fireRemoveAppenderEvent (Logger*,Appender*)"
24572,METHOD,main\cpp\hierarchy.cpp:<global>,TYPE_DECL,"LevelPtr Hierarchy::getThreshold() const
{
	return m_priv->threshold ? m_priv->threshold : Level::getAll();
}",1,1,main\cpp\hierarchy.cpp,Hierarchy.getThreshold,,false,235,238,getThreshold,,,18,LevelPtr Hierarchy.getThreshold ()
24588,METHOD,main\cpp\hierarchy.cpp:<global>,TYPE_DECL,"LoggerPtr Hierarchy::getLogger(const LogString& name)
{
	static WideLife<spi::LoggerFactoryPtr> defaultFactory = std::make_shared<DefaultLoggerFactory>();
	return getLogger(name, defaultFactory);
}",1,1,main\cpp\hierarchy.cpp,Hierarchy.getLogger,,false,240,244,getLogger,,,19,LoggerPtr Hierarchy.getLogger (LogString)
24604,METHOD,main\cpp\hierarchy.cpp:<global>,TYPE_DECL,"LoggerPtr Hierarchy::getLogger(const LogString& name,
	const spi::LoggerFactoryPtr& factory)
{
	auto root = getRootLogger();
	std::lock_guard<std::recursive_mutex> lock(m_priv->mutex);

	LoggerMap::iterator it = m_priv->loggers.find(name);
	LoggerPtr result;

	if (it != m_priv->loggers.end())
	{
		result = it->second;
	}
	if (!result && factory)
	{
		LoggerPtr logger(factory->makeNewLoggerInstance(m_priv->pool, name));
		logger->setHierarchy(this);
		m_priv->loggers.insert(LoggerMap::value_type(name, logger));

		ProvisionNodeMap::iterator it2 = m_priv->provisionNodes.find(name);

		if (it2 != m_priv->provisionNodes.end())
		{
			updateChildren(it2->second, logger);
			m_priv->provisionNodes.erase(it2);
		}

		updateParents(logger, root);
		result = logger;
	}
	return result;

}",1,1,main\cpp\hierarchy.cpp,Hierarchy.getLogger,,false,246,278,getLogger,,,20,"LoggerPtr Hierarchy.getLogger (LogString,ANY)"
24725,METHOD,main\cpp\hierarchy.cpp:<global>,TYPE_DECL,"LoggerList Hierarchy::getCurrentLoggers() const
{
	std::lock_guard<std::recursive_mutex> lock(m_priv->mutex);

	LoggerList v;
	for (auto& item : m_priv->loggers)
	{
		if (auto pLogger = item.second)
			v.push_back(pLogger);
	}
	return v;
}",1,1,main\cpp\hierarchy.cpp,Hierarchy.getCurrentLoggers,,false,280,291,getCurrentLoggers,,,21,LoggerList Hierarchy.getCurrentLoggers ()
24764,METHOD,main\cpp\hierarchy.cpp:<global>,TYPE_DECL,"LoggerPtr Hierarchy::getRootLogger() const
{
	std::lock_guard<std::recursive_mutex> lock(m_priv->mutex);
	if (!m_priv->root)
	{
		m_priv->root = std::make_shared<RootLogger>(m_priv->pool, Level::getDebug());
		m_priv->root->setHierarchy(const_cast<Hierarchy*>(this));
	}

	return m_priv->root;
}",1,1,main\cpp\hierarchy.cpp,Hierarchy.getRootLogger,,false,293,303,getRootLogger,,,22,LoggerPtr Hierarchy.getRootLogger ()
24818,METHOD,main\cpp\hierarchy.cpp:<global>,TYPE_DECL,"bool Hierarchy::isDisabled(int level) const
{
	return m_priv->thresholdInt > level;
}",1,1,main\cpp\hierarchy.cpp,Hierarchy.isDisabled,,false,305,308,isDisabled,,,23,bool Hierarchy.isDisabled (int)
24829,METHOD,main\cpp\hierarchy.cpp:<global>,TYPE_DECL,"void Hierarchy::ensureIsConfigured(std::function<void()> configurator)
{
	std::unique_lock<std::mutex> lock(m_priv->configuredMutex);
	if (!m_priv->configured)
	{
		configurator();
		m_priv->configured = true;
	}
}",1,1,main\cpp\hierarchy.cpp,Hierarchy.ensureIsConfigured,,false,310,318,ensureIsConfigured,,,24,void Hierarchy.ensureIsConfigured (ANY)
24858,METHOD,main\cpp\hierarchy.cpp:<global>,TYPE_DECL,"void Hierarchy::resetConfiguration()
{
	std::lock_guard<std::recursive_mutex> lock(m_priv->mutex);

	if (m_priv->root)
	{
		m_priv->root->setLevel(Level::getDebug());
		m_priv->root->setResourceBundle(0);
	}
	setThresholdInternal(Level::getAll());

	shutdownInternal();

	LoggerMap::const_iterator it, itEnd = m_priv->loggers.end();

	for (it = m_priv->loggers.begin(); it != itEnd; it++)
	{
		if (auto pLogger = it->second)
		{
			pLogger->setLevel(0);
			pLogger->setAdditivity(true);
			pLogger->setResourceBundle(0);
		}
	}

	//rendererMap.clear();
}",1,1,main\cpp\hierarchy.cpp,Hierarchy.resetConfiguration,,false,320,346,resetConfiguration,,,25,void Hierarchy.resetConfiguration ()
24952,METHOD,main\cpp\hierarchy.cpp:<global>,TYPE_DECL,"void Hierarchy::shutdown()
{
	std::lock_guard<std::recursive_mutex> lock(m_priv->mutex);

	shutdownInternal();
}",1,1,main\cpp\hierarchy.cpp,Hierarchy.shutdown,,false,348,353,shutdown,,,26,void Hierarchy.shutdown ()
24969,METHOD,main\cpp\hierarchy.cpp:<global>,TYPE_DECL,"void Hierarchy::shutdownInternal()
{
	m_priv->configured = false;

	// begin by closing nested appenders
	if (m_priv->root)
		m_priv->root->closeNestedAppenders();

	LoggerMap::iterator it, itEnd = m_priv->loggers.end();

	for (it = m_priv->loggers.begin(); it != itEnd; it++)
	{
		if (auto pLogger = it->second)
			pLogger->closeNestedAppenders();
	}

	// then, remove all appenders
	if (m_priv->root)
		m_priv->root->removeAllAppenders();

	for (it = m_priv->loggers.begin(); it != itEnd; it++)
	{
		if (auto pLogger = it->second)
			pLogger->removeAllAppenders();
	}
}",1,1,main\cpp\hierarchy.cpp,Hierarchy.shutdownInternal,,false,355,380,shutdownInternal,,,27,void Hierarchy.shutdownInternal ()
25068,METHOD,main\cpp\hierarchy.cpp:<global>,TYPE_DECL,"void Hierarchy::updateParents(const LoggerPtr& logger, const LoggerPtr& root)
{
	const LogString name(logger->getName());
	size_t length = name.size();
	bool parentFound = false;


	// if name = ""w.x.y.z"", loop through ""w.x.y"", ""w.x"" and ""w"", but not ""w.x.y.z""
	for (size_t i = name.find_last_of(0x2E /* '.' */, length - 1);
		(i != LogString::npos) && (i != 0);
		i = name.find_last_of(0x2E /* '.' */, i - 1))
	{
		LogString substr = name.substr(0, i);

		LoggerMap::iterator it = m_priv->loggers.find(substr);

		if (it != m_priv->loggers.end())
		{
			parentFound = true;
			logger->setParent( it->second );
			break; // no need to update the ancestors of the closest ancestor
		}
		else
		{
			ProvisionNodeMap::iterator it2 = m_priv->provisionNodes.find(substr);

			if (it2 != m_priv->provisionNodes.end())
			{
				it2->second.push_back(logger);
			}
			else
			{
				ProvisionNode node(1, logger);
				m_priv->provisionNodes.insert(
					ProvisionNodeMap::value_type(substr, node));
			}
	...",1,1,main\cpp\hierarchy.cpp,Hierarchy.updateParents,,false,382,426,updateParents,,,28,"void Hierarchy.updateParents (LoggerPtr,LoggerPtr)"
25220,METHOD,main\cpp\hierarchy.cpp:<global>,TYPE_DECL,"void Hierarchy::updateChildren(ProvisionNode& pn, const LoggerPtr& logger)
{
	ProvisionNode::iterator it, itEnd = pn.end();

	for (it = pn.begin(); it != itEnd; it++)
	{
		LoggerPtr& l = *it;

		// Unless this child already points to a correct (lower) parent,
		// make logger.parent point to l.parent and l.parent to logger.
		if (!StringHelper::startsWith(l->getParent()->getName(), logger->getName()))
		{
			logger->setParent( l->getParent() );
			l->setParent( logger );
		}
	}
    
}",1,1,main\cpp\hierarchy.cpp,Hierarchy.updateChildren,,false,428,445,updateChildren,,,29,"void Hierarchy.updateChildren (ProvisionNode,LoggerPtr)"
25284,METHOD,main\cpp\hierarchy.cpp:<global>,TYPE_DECL,"void Hierarchy::updateChildren(const Logger* parent)
{
	for (auto& item : m_priv->loggers)
	{
		for (auto l = item.second; l; l = l->getParent())
		{
			if (l->getParent().get() == parent)
			{
				item.second->updateThreshold();
				break;
			}
		}
	}
}",1,1,main\cpp\hierarchy.cpp,Hierarchy.updateChildren,,false,447,460,updateChildren,,,30,void Hierarchy.updateChildren (Logger*)
25329,METHOD,main\cpp\hierarchy.cpp:<global>,TYPE_DECL,"void Hierarchy::setConfigured(bool newValue)
{
	std::unique_lock<std::mutex> lock(m_priv->configuredMutex, std::try_to_lock);
	if (lock.owns_lock()) // Not being auto-configured?
		m_priv->configured = newValue;
}",1,1,main\cpp\hierarchy.cpp,Hierarchy.setConfigured,,false,462,467,setConfigured,,,31,void Hierarchy.setConfigured (bool)
25360,METHOD,main\cpp\hierarchy.cpp:<global>,TYPE_DECL,"bool Hierarchy::isConfigured()
{
	std::unique_lock<std::mutex> lock(m_priv->configuredMutex); // Blocks while auto-configuration is active
	return m_priv->configured;
}",1,1,main\cpp\hierarchy.cpp,Hierarchy.isConfigured,,false,469,473,isConfigured,,,32,bool Hierarchy.isConfigured ()
25380,METHOD,main\cpp\hierarchy.cpp:<global>,TYPE_DECL,"HierarchyPtr Hierarchy::create()
{
	HierarchyPtr ret(new Hierarchy);
	return ret;
}",1,1,main\cpp\hierarchy.cpp,Hierarchy.create,,false,475,479,create,,,33,HierarchyPtr Hierarchy.create ()
25390,METHOD,main\cpp\hierarchy.cpp:<global>,TYPE_DECL,"void Hierarchy::clearAppenders()
{
	m_priv->allAppenders.clear();
}",1,1,main\cpp\hierarchy.cpp,Hierarchy.clearAppenders,,false,481,484,clearAppenders,,,34,void Hierarchy.clearAppenders ()
25400,METHOD,main\cpp\hierarchy.cpp:<global>,TYPE_DECL,"void Hierarchy::addAppender(AppenderPtr appender)
{
	m_priv->allAppenders.push_back(appender);
}",1,1,main\cpp\hierarchy.cpp,Hierarchy.addAppender,,false,486,489,addAppender,,,35,void Hierarchy.addAppender (AppenderPtr)
25412,METHOD,main\cpp\hierarchy.cpp:<global>,TYPE_DECL,"bool Hierarchy::removeLogger(const LogString& name, bool ifNotUsed)
{
	auto parentRefCount = [this](const LoggerPtr& child) -> int
	{
		int result = 0;
		for (auto& node : m_priv->provisionNodes)
		{
			if (node.second.end() != std::find(node.second.begin(), node.second.end(), child))
				++result;
		}
		return result;
	};
	bool result = false;
	std::lock_guard<std::recursive_mutex> lock(m_priv->mutex);
	auto it = m_priv->loggers.find(name);
	if (it == m_priv->loggers.end())
		;
	else if (ifNotUsed && 1 + parentRefCount(it->second) < it->second.use_count())
		;
	else
	{
		for (auto& node : m_priv->provisionNodes)
		{
			for (size_t i = node.second.size(); 0 < i; )
			{
				if (node.second[--i] == it->second)
					node.second.erase(node.second.begin() + i);
			}
		}
		m_priv->loggers.erase(it);
		result = true;
	}
	return result;
}",1,1,main\cpp\hierarchy.cpp,Hierarchy.removeLogger,,false,491,524,removeLogger,,,36,"bool Hierarchy.removeLogger (LogString,bool)"
25561,METHOD,main\cpp\htmllayout.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\htmllayout.cpp,main\cpp\htmllayout.cpp:<global>,,false,1,277,<global>,,,1,
25564,METHOD,HTMLLayoutPrivate,TYPE_DECL,"HTMLLayoutPrivate()
		: locationInfo(false)
		, title(LOG4CXX_STR(""Log4cxx Log Messages""))
		, dateFormat()
		, expectedPatternLength(100)
		{}",2,4,main\cpp\htmllayout.cpp,HTMLLayoutPrivate.HTMLLayoutPrivate,,false,35,40,HTMLLayoutPrivate,,,1,ANY HTMLLayoutPrivate.HTMLLayoutPrivate ()
25574,METHOD,main\cpp\htmllayout.cpp:<global>,TYPE_DECL,"HTMLLayout::HTMLLayout()
	: m_priv(std::make_unique<HTMLLayoutPrivate>())
{
	m_priv->dateFormat.setTimeZone(TimeZone::getGMT());
	m_priv->expectedPatternLength = getFormattedEventCharacterCount() * 2;
}",1,1,main\cpp\htmllayout.cpp,HTMLLayout.HTMLLayout,,false,56,61,HTMLLayout,,,4,ANY HTMLLayout.HTMLLayout ()
25595,METHOD,main\cpp\htmllayout.cpp:<global>,TYPE_DECL,HTMLLayout::~HTMLLayout() {},1,28,main\cpp\htmllayout.cpp,HTMLLayout.~HTMLLayout,,false,63,63,~HTMLLayout,,,5,ANY HTMLLayout.~HTMLLayout ()
25599,METHOD,main\cpp\htmllayout.cpp:<global>,TYPE_DECL,"void HTMLLayout::setOption(const LogString& option,
	const LogString& value)
{

	if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""TITLE""), LOG4CXX_STR(""title"")))
	{
		setTitle(value);
	}
	else if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""LOCATIONINFO""), LOG4CXX_STR(""locationinfo"")))
	{
		setLocationInfo(OptionConverter::toBoolean(value, false));
		m_priv->expectedPatternLength = getFormattedEventCharacterCount() * 2;
	}
}",1,1,main\cpp\htmllayout.cpp,HTMLLayout.setOption,,false,66,81,setOption,,,6,"void HTMLLayout.setOption (LogString,LogString)"
25645,METHOD,main\cpp\htmllayout.cpp:<global>,TYPE_DECL,"void HTMLLayout::format(LogString& output,
	const spi::LoggingEventPtr& event,
	Pool& p) const
{
	output.reserve(m_priv->expectedPatternLength + event->getMessage().size());
	output.append(LOG4CXX_EOL);
	output.append(LOG4CXX_STR(""<tr>""));
	output.append(LOG4CXX_EOL);
	output.append(LOG4CXX_STR(""<td>""));

	m_priv->dateFormat.format(output, event->getTimeStamp(), p);


	output.append(LOG4CXX_STR(""</td>""));
	output.append(LOG4CXX_EOL);

	output.append(LOG4CXX_STR(""<td title=\""""));
	LogString threadName(event->getThreadName());
	output.append(threadName);
	output.append(LOG4CXX_STR("" thread\"">""));
	output.append(threadName);
	output.append(LOG4CXX_STR(""</td>""));
	output.append(LOG4CXX_EOL);

	output.append(LOG4CXX_STR(""<td title=\""Level\"">""));

	if (event->getLevel()->equals(Level::getDebug()))
	{
		output.append(LOG4CXX_STR(""<font color=\""#339933\"">""));
		output.append(event->getLevel()->toString());
		output.append(LOG4CXX_STR(""</font>""));
	}
	else if (event->getLevel()->isGreaterOrE...",1,1,main\cpp\htmllayout.cpp,HTMLLayout.format,,false,83,173,format,,,7,"void HTMLLayout.format (LogString,ANY,Pool)"
26052,METHOD,main\cpp\htmllayout.cpp:<global>,TYPE_DECL,"void HTMLLayout::appendHeader(LogString& output, Pool& p)
{
	output.append(LOG4CXX_STR(""<!DOCTYPE HTML PUBLIC ""));
	output.append(LOG4CXX_STR(""\""-//W3C//DTD HTML 4.01 Transitional//EN\"" ""));
	output.append(LOG4CXX_STR(""\""http://www.w3.org/TR/html4/loose.dtd\"">""));
	output.append(LOG4CXX_EOL);
	output.append(LOG4CXX_STR(""<html>""));
	output.append(LOG4CXX_EOL);
	output.append(LOG4CXX_STR(""<head>""));
	output.append(LOG4CXX_EOL);
	output.append(LOG4CXX_STR(""<title>""));
	output.append(m_priv->title);
	output.append(LOG4CXX_STR(""</title>""));
	output.append(LOG4CXX_EOL);
	output.append(LOG4CXX_STR(""<style type=\""text/css\"">""));
	output.append(LOG4CXX_EOL);
	output.append(LOG4CXX_STR(""<!--""));
	output.append(LOG4CXX_EOL);
	output.append(LOG4CXX_STR(""body, table {font-family: arial,sans-serif; font-size: x-small;}""));
	output.append(LOG4CXX_EOL);
	output.append(LOG4CXX_STR(""th {background: #336699; color: #FFFFFF; text-align: left;}""));
	output.append(LOG4CXX_EOL);
	output.append(LOG4CXX_STR...",1,1,main\cpp\htmllayout.cpp,HTMLLayout.appendHeader,,false,175,238,appendHeader,,,8,"void HTMLLayout.appendHeader (LogString,Pool)"
26370,METHOD,main\cpp\htmllayout.cpp:<global>,TYPE_DECL,"void HTMLLayout::appendFooter(LogString& output, Pool& /* pool */ )
{
	output.append(LOG4CXX_STR(""</table>""));
	output.append(LOG4CXX_EOL);
	output.append(LOG4CXX_STR(""<br>""));
	output.append(LOG4CXX_EOL);
	output.append(LOG4CXX_STR(""</body></html>""));
}",1,1,main\cpp\htmllayout.cpp,HTMLLayout.appendFooter,,false,240,247,appendFooter,,,9,"void HTMLLayout.appendFooter (LogString,Pool)"
26404,METHOD,main\cpp\htmllayout.cpp:<global>,TYPE_DECL,"void HTMLLayout::setLocationInfo(bool locationInfoFlag)
{
	m_priv->locationInfo = locationInfoFlag;
}",1,1,main\cpp\htmllayout.cpp,HTMLLayout.setLocationInfo,,false,249,252,setLocationInfo,,,10,void HTMLLayout.setLocationInfo (bool)
26414,METHOD,main\cpp\htmllayout.cpp:<global>,TYPE_DECL,"bool HTMLLayout::getLocationInfo() const
{
	return m_priv->locationInfo;
}",1,1,main\cpp\htmllayout.cpp,HTMLLayout.getLocationInfo,,false,254,257,getLocationInfo,,,11,bool HTMLLayout.getLocationInfo ()
26422,METHOD,main\cpp\htmllayout.cpp:<global>,TYPE_DECL,"void HTMLLayout::setTitle(const LogString& title1)
{
	m_priv->title.assign(title1);
}",1,1,main\cpp\htmllayout.cpp,HTMLLayout.setTitle,,false,259,262,setTitle,,,12,void HTMLLayout.setTitle (LogString)
26434,METHOD,main\cpp\htmllayout.cpp:<global>,TYPE_DECL,"const LogString& HTMLLayout::getTitle() const
{
	return m_priv->title;
}",1,1,main\cpp\htmllayout.cpp,HTMLLayout.getTitle,,false,264,267,getTitle,,,13,LogString HTMLLayout.getTitle ()
26442,METHOD,main\cpp\htmllayout.cpp:<global>,TYPE_DECL,"LogString HTMLLayout::getContentType() const
{
	return LOG4CXX_STR(""text/html"");
}",1,1,main\cpp\htmllayout.cpp,HTMLLayout.getContentType,,false,269,272,getContentType,,,14,LogString HTMLLayout.getContentType ()
26449,METHOD,main\cpp\htmllayout.cpp:<global>,TYPE_DECL,"bool HTMLLayout::ignoresThrowable() const
{
	return false;
}",1,1,main\cpp\htmllayout.cpp,HTMLLayout.ignoresThrowable,,false,274,277,ignoresThrowable,,,15,bool HTMLLayout.ignoresThrowable ()
26470,METHOD,main\cpp\inetaddress.cpp:<global>,TYPE_DECL,<global>,1,2,main\cpp\inetaddress.cpp,main\cpp\inetaddress.cpp:<global>,,false,1,169,<global>,,,1,
26477,METHOD,main\cpp\inetaddress.cpp:<global>,TYPE_DECL,"UnknownHostException::UnknownHostException(const LogString& msg1)
	: Exception(msg1)
{
}",1,1,main\cpp\inetaddress.cpp,UnknownHostException.UnknownHostException,,false,37,40,UnknownHostException,,,4,ANY UnknownHostException.UnknownHostException (LogString)
26482,METHOD,main\cpp\inetaddress.cpp:<global>,TYPE_DECL,"UnknownHostException::UnknownHostException(const UnknownHostException& src)
	: Exception(src)
{
}",1,1,main\cpp\inetaddress.cpp,UnknownHostException.UnknownHostException,,false,42,45,UnknownHostException,,,5,ANY UnknownHostException.UnknownHostException (UnknownHostException)
26487,METHOD,main\cpp\inetaddress.cpp:<global>,TYPE_DECL,"UnknownHostException& UnknownHostException::operator=(const UnknownHostException& src)
{
	Exception::operator=(src);
	return *this;
}",1,1,main\cpp\inetaddress.cpp,UnknownHostException.operator =,,false,47,51,operator =,,,6,UnknownHostException UnknownHostException.operator = (UnknownHostException)
26500,METHOD,main\cpp\inetaddress.cpp:<global>,TYPE_DECL,"InetAddress::InetAddress(const LogString& hostName, const LogString& hostAddr)
	: m_priv(std::make_unique<InetAddressPrivate>())
{
	m_priv->ipAddrString = hostAddr;
	m_priv->hostNameString = hostName;
}",1,1,main\cpp\inetaddress.cpp,InetAddress.InetAddress,,false,54,59,InetAddress,,,7,"ANY InetAddress.InetAddress (LogString,LogString)"
26516,METHOD,main\cpp\inetaddress.cpp:<global>,TYPE_DECL,InetAddress::~InetAddress(){},1,29,main\cpp\inetaddress.cpp,InetAddress.~InetAddress,,false,61,61,~InetAddress,,,8,ANY InetAddress.~InetAddress ()
26520,METHOD,main\cpp\inetaddress.cpp:<global>,TYPE_DECL,"std::vector<InetAddressPtr> InetAddress::getAllByName(const LogString& host)
{
	LOG4CXX_ENCODE_CHAR(encodedHost, host);

	// retrieve information about the given host
	Pool addrPool;

	apr_sockaddr_t* address = 0;
	apr_status_t status =
		apr_sockaddr_info_get(&address, encodedHost.c_str(),
			APR_INET, 0, 0, addrPool.getAPRPool());

	if (status != APR_SUCCESS)
	{
		LogString msg(LOG4CXX_STR(""Cannot get information about host: ""));
		msg.append(host);
		LogLog::error(msg);
		throw UnknownHostException(msg);
	}

	std::vector<InetAddressPtr> result;
	apr_sockaddr_t* currentAddr = address;

	while (currentAddr != NULL)
	{
		// retrieve the IP address of this InetAddress.
		LogString ipAddrString;
		char* ipAddr;
		status = apr_sockaddr_ip_get(&ipAddr, currentAddr);

		if (status == APR_SUCCESS)
		{
			std::string ip(ipAddr);
			Transcoder::decode(ip, ipAddrString);
		}

		// retrieve the host name of this InetAddress.
		LogString hostNameString;
		char* hostName;
		status = apr_getname...",1,1,main\cpp\inetaddress.cpp,InetAddress.getAllByName,,false,65,117,getAllByName,,,9,vector<InetAddressPtr> InetAddress.getAllByName (LogString)
26654,METHOD,main\cpp\inetaddress.cpp:<global>,TYPE_DECL,"InetAddressPtr InetAddress::getByName(const LogString& host)
{
	InetAddressPtr result;
	auto address = getAllByName(host);
	if (!address.empty())
		result = address.front();
	return result;
}",1,1,main\cpp\inetaddress.cpp,InetAddress.getByName,,false,122,129,getByName,,,10,InetAddressPtr InetAddress.getByName (LogString)
26680,METHOD,main\cpp\inetaddress.cpp:<global>,TYPE_DECL,"LogString InetAddress::getHostAddress() const
{
	return m_priv->ipAddrString;
}",1,1,main\cpp\inetaddress.cpp,InetAddress.getHostAddress,,false,133,136,getHostAddress,,,11,LogString InetAddress.getHostAddress ()
26688,METHOD,main\cpp\inetaddress.cpp:<global>,TYPE_DECL,"LogString InetAddress::getHostName() const
{
	return m_priv->hostNameString;
}",1,1,main\cpp\inetaddress.cpp,InetAddress.getHostName,,false,140,143,getHostName,,,12,LogString InetAddress.getHostName ()
26696,METHOD,main\cpp\inetaddress.cpp:<global>,TYPE_DECL,"InetAddressPtr InetAddress::getLocalHost()
{
	return getByName(LOG4CXX_STR(""127.0.0.1""));
}",1,1,main\cpp\inetaddress.cpp,InetAddress.getLocalHost,,false,147,150,getLocalHost,,,13,InetAddressPtr InetAddress.getLocalHost ()
26704,METHOD,main\cpp\inetaddress.cpp:<global>,TYPE_DECL,"InetAddressPtr InetAddress::anyAddress()
{
	// APR_ANYADDR does not work with the LOG4CXX_STR macro
	return getByName(LOG4CXX_STR(""0.0.0.0""));
}",1,1,main\cpp\inetaddress.cpp,InetAddress.anyAddress,,false,153,157,anyAddress,,,14,InetAddressPtr InetAddress.anyAddress ()
26712,METHOD,main\cpp\inetaddress.cpp:<global>,TYPE_DECL,"LogString InetAddress::toString() const
{
	LogString rv(getHostName());
	if (!rv.empty())
		rv.append(LOG4CXX_STR(""/""));
	rv.append(getHostAddress());
	return rv;
}",1,1,main\cpp\inetaddress.cpp,InetAddress.toString,,false,162,169,toString,,,15,LogString InetAddress.toString ()
26746,METHOD,main\cpp\inputstream.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\inputstream.cpp,main\cpp\inputstream.cpp:<global>,,false,1,32,<global>,,,1,
26750,METHOD,main\cpp\inputstream.cpp:<global>,TYPE_DECL,"InputStream::InputStream()
{
}",1,1,main\cpp\inputstream.cpp,InputStream.InputStream,,false,26,28,InputStream,,,3,ANY InputStream.InputStream ()
26754,METHOD,main\cpp\inputstream.cpp:<global>,TYPE_DECL,"InputStream::~InputStream()
{
}",1,1,main\cpp\inputstream.cpp,InputStream.~InputStream,,false,30,32,~InputStream,,,4,ANY InputStream.~InputStream ()
26775,METHOD,main\cpp\inputstreamreader.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\inputstreamreader.cpp,main\cpp\inputstreamreader.cpp:<global>,,false,1,104,<global>,,,1,
26780,METHOD,InputStreamReaderPrivate,TYPE_DECL,"InputStreamReaderPrivate(const InputStreamPtr& in1) :
		in(in1), dec(CharsetDecoder::getDefaultDecoder()){}",2,53,main\cpp\inputstreamreader.cpp,InputStreamReaderPrivate.InputStreamReaderPrivate,,false,33,34,InputStreamReaderPrivate,,,1,ANY InputStreamReaderPrivate.InputStreamReaderPrivate (InputStreamPtr)
26785,METHOD,InputStreamReaderPrivate,TYPE_DECL,"InputStreamReaderPrivate(const InputStreamPtr& in1, const CharsetDecoderPtr& dec1) :
		in(in1), dec(dec1) {}",2,23,main\cpp\inputstreamreader.cpp,InputStreamReaderPrivate.InputStreamReaderPrivate,,false,36,37,InputStreamReaderPrivate,,,2,"ANY InputStreamReaderPrivate.InputStreamReaderPrivate (InputStreamPtr,CharsetDecoderPtr)"
26793,METHOD,main\cpp\inputstreamreader.cpp:<global>,TYPE_DECL,"InputStreamReader::InputStreamReader(const InputStreamPtr& in1)
	: m_priv(std::make_unique<InputStreamReaderPrivate>(in1))
{
	if (in1 == 0)
	{
		throw NullPointerException(LOG4CXX_STR(""in parameter may not be null.""));
	}
}",1,1,main\cpp\inputstreamreader.cpp,InputStreamReader.InputStreamReader,,false,43,50,InputStreamReader,,,4,ANY InputStreamReader.InputStreamReader (InputStreamPtr)
26807,METHOD,main\cpp\inputstreamreader.cpp:<global>,TYPE_DECL,"InputStreamReader::InputStreamReader(const InputStreamPtr& in1, const CharsetDecoderPtr& dec1)
	: m_priv(std::make_unique<InputStreamReaderPrivate>(in1, dec1))
{
	if (in1 == 0)
	{
		throw NullPointerException(LOG4CXX_STR(""in parameter may not be null.""));
	}

	if (dec1 == 0)
	{
		throw NullPointerException(LOG4CXX_STR(""dec parameter may not be null.""));
	}
}",1,1,main\cpp\inputstreamreader.cpp,InputStreamReader.InputStreamReader,,false,52,64,InputStreamReader,,,5,"ANY InputStreamReader.InputStreamReader (InputStreamPtr,CharsetDecoderPtr)"
26831,METHOD,main\cpp\inputstreamreader.cpp:<global>,TYPE_DECL,"InputStreamReader::~InputStreamReader()
{
}",1,1,main\cpp\inputstreamreader.cpp,InputStreamReader.~InputStreamReader,,false,66,68,~InputStreamReader,,,6,ANY InputStreamReader.~InputStreamReader ()
26835,METHOD,main\cpp\inputstreamreader.cpp:<global>,TYPE_DECL,"void InputStreamReader::close(Pool& )
{
	m_priv->in->close();
}",1,1,main\cpp\inputstreamreader.cpp,InputStreamReader.close,,false,70,73,close,,,7,void InputStreamReader.close (Pool)
26846,METHOD,main\cpp\inputstreamreader.cpp:<global>,TYPE_DECL,"LogString InputStreamReader::read(Pool& p)
{
	const size_t BUFSIZE = 4096;
	ByteBuffer buf(p.pstralloc(BUFSIZE), BUFSIZE);
	LogString output;

	// read whole file
	while (m_priv->in->read(buf) >= 0)
	{
		buf.flip();
		log4cxx_status_t stat = m_priv->dec->decode(buf, output);

		if (stat != 0)
		{
			throw IOException(stat);
		}

		if (buf.remaining() > 0)
		{
			memmove(buf.data(), buf.current(), buf.remaining());
			buf.limit(buf.remaining());
		}
		else
		{
			buf.clear();
		}
	}

	return output;
}",1,1,main\cpp\inputstreamreader.cpp,InputStreamReader.read,,false,75,104,read,,,8,LogString InputStreamReader.read (Pool)
26942,METHOD,main\cpp\integer.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\integer.cpp,main\cpp\integer.cpp:<global>,,false,1,37,<global>,,,1,
26946,METHOD,main\cpp\integer.cpp:<global>,TYPE_DECL,"Integer::Integer() : val(0)
{
}",1,1,main\cpp\integer.cpp,Integer.Integer,,false,27,29,Integer,,,3,ANY Integer.Integer ()
26950,METHOD,main\cpp\integer.cpp:<global>,TYPE_DECL,"Integer::Integer(int val1) : val(val1)
{
}",1,1,main\cpp\integer.cpp,Integer.Integer,,false,31,33,Integer,,,4,ANY Integer.Integer (int)
26955,METHOD,main\cpp\integer.cpp:<global>,TYPE_DECL,"Integer::~Integer()
{
}",1,1,main\cpp\integer.cpp,Integer.~Integer,,false,35,37,~Integer,,,5,ANY Integer.~Integer ()
26970,METHOD,main\cpp\integerpatternconverter.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\integerpatternconverter.cpp,main\cpp\integerpatternconverter.cpp:<global>,,false,1,53,<global>,,,1,
26974,METHOD,main\cpp\integerpatternconverter.cpp:<global>,TYPE_DECL,"IntegerPatternConverter::IntegerPatternConverter() :
	PatternConverter(LOG4CXX_STR(""Integer""),
		LOG4CXX_STR(""integer""))
{
}",1,1,main\cpp\integerpatternconverter.cpp,IntegerPatternConverter.IntegerPatternConverter,,false,29,33,IntegerPatternConverter,,,3,ANY IntegerPatternConverter.IntegerPatternConverter ()
26978,METHOD,main\cpp\integerpatternconverter.cpp:<global>,TYPE_DECL,"PatternConverterPtr IntegerPatternConverter::newInstance(
	const std::vector<LogString>& /* options */)
{
	static WideLife<PatternConverterPtr> instance = std::make_shared<IntegerPatternConverter>();
	return instance;
}",1,1,main\cpp\integerpatternconverter.cpp,IntegerPatternConverter.newInstance,,false,35,40,newInstance,,,4,PatternConverterPtr IntegerPatternConverter.newInstance (ANY)
26992,METHOD,main\cpp\integerpatternconverter.cpp:<global>,TYPE_DECL,"void IntegerPatternConverter::format(
	const ObjectPtr& obj,
	LogString& toAppendTo,
	Pool& p) const
{
	IntegerPtr i = LOG4CXX_NS::cast<Integer>(obj);

	if (i != NULL)
	{
		StringHelper::toString(i->intValue(), p, toAppendTo);
	}
}",1,1,main\cpp\integerpatternconverter.cpp,IntegerPatternConverter.format,,false,42,53,format,,,5,"void IntegerPatternConverter.format (ObjectPtr,LogString,Pool)"
27045,METHOD,main\cpp\jsonlayout.cpp:<global>,TYPE_DECL,<global>,1,2,main\cpp\jsonlayout.cpp,main\cpp\jsonlayout.cpp:<global>,,false,1,474,<global>,,,1,
27050,METHOD,JSONLayoutPrivate,TYPE_DECL,"JSONLayoutPrivate() :
		locationInfo(false),
		prettyPrint(false),
		dateFormat(),
		ppIndentL1(LOG4CXX_STR(""  "")),
		ppIndentL2(LOG4CXX_STR(""    "")),
		expectedPatternLength(100),
		threadInfo(false) {}",2,22,main\cpp\jsonlayout.cpp,JSONLayoutPrivate.JSONLayoutPrivate,,false,37,44,JSONLayoutPrivate,,,1,ANY JSONLayoutPrivate.JSONLayoutPrivate ()
27061,METHOD,main\cpp\jsonlayout.cpp:<global>,TYPE_DECL,"JSONLayout::JSONLayout() :
	m_priv(std::make_unique<JSONLayoutPrivate>())
{
}",1,1,main\cpp\jsonlayout.cpp,JSONLayout.JSONLayout,,false,62,65,JSONLayout,,,4,ANY JSONLayout.JSONLayout ()
27065,METHOD,main\cpp\jsonlayout.cpp:<global>,TYPE_DECL,JSONLayout::~JSONLayout(){},1,27,main\cpp\jsonlayout.cpp,JSONLayout.~JSONLayout,,false,67,67,~JSONLayout,,,5,ANY JSONLayout.~JSONLayout ()
27069,METHOD,main\cpp\jsonlayout.cpp:<global>,TYPE_DECL,"void JSONLayout::setLocationInfo(bool locationInfoFlag)
{
	m_priv->locationInfo = locationInfoFlag;
}",1,1,main\cpp\jsonlayout.cpp,JSONLayout.setLocationInfo,,false,69,72,setLocationInfo,,,6,void JSONLayout.setLocationInfo (bool)
27079,METHOD,main\cpp\jsonlayout.cpp:<global>,TYPE_DECL,"bool JSONLayout::getLocationInfo() const
{
	return m_priv->locationInfo;
}",1,1,main\cpp\jsonlayout.cpp,JSONLayout.getLocationInfo,,false,74,77,getLocationInfo,,,7,bool JSONLayout.getLocationInfo ()
27087,METHOD,main\cpp\jsonlayout.cpp:<global>,TYPE_DECL,"void JSONLayout::setPrettyPrint(bool prettyPrintFlag)
{
	m_priv->prettyPrint = prettyPrintFlag;
}",1,1,main\cpp\jsonlayout.cpp,JSONLayout.setPrettyPrint,,false,79,82,setPrettyPrint,,,8,void JSONLayout.setPrettyPrint (bool)
27097,METHOD,main\cpp\jsonlayout.cpp:<global>,TYPE_DECL,"bool JSONLayout::getPrettyPrint() const
{
	return m_priv->prettyPrint;
}",1,1,main\cpp\jsonlayout.cpp,JSONLayout.getPrettyPrint,,false,84,87,getPrettyPrint,,,9,bool JSONLayout.getPrettyPrint ()
27105,METHOD,main\cpp\jsonlayout.cpp:<global>,TYPE_DECL,"void JSONLayout::setThreadInfo(bool newValue)
{
	m_priv->threadInfo = newValue;
}",1,1,main\cpp\jsonlayout.cpp,JSONLayout.setThreadInfo,,false,89,92,setThreadInfo,,,10,void JSONLayout.setThreadInfo (bool)
27115,METHOD,main\cpp\jsonlayout.cpp:<global>,TYPE_DECL,"bool JSONLayout::getThreadInfo() const
{
	return m_priv->threadInfo;
}",1,1,main\cpp\jsonlayout.cpp,JSONLayout.getThreadInfo,,false,94,97,getThreadInfo,,,11,bool JSONLayout.getThreadInfo ()
27123,METHOD,main\cpp\jsonlayout.cpp:<global>,TYPE_DECL,"LogString JSONLayout::getContentType() const
{
	return LOG4CXX_STR(""application/json"");
}",1,1,main\cpp\jsonlayout.cpp,JSONLayout.getContentType,,false,99,102,getContentType,,,12,LogString JSONLayout.getContentType ()
27130,METHOD,main\cpp\jsonlayout.cpp:<global>,TYPE_DECL,"void JSONLayout::activateOptions(helpers::Pool& /* p */)
{
	m_priv->expectedPatternLength = getFormattedEventCharacterCount() * 2;
}",1,1,main\cpp\jsonlayout.cpp,JSONLayout.activateOptions,,false,104,107,activateOptions,,,13,void JSONLayout.activateOptions (ANY)
27142,METHOD,main\cpp\jsonlayout.cpp:<global>,TYPE_DECL,"void JSONLayout::setOption(const LogString& option, const LogString& value)
{
	if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""LOCATIONINFO""), LOG4CXX_STR(""locationinfo"")))
	{
		setLocationInfo(OptionConverter::toBoolean(value, false));
	}
	else if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""THREADINFO""), LOG4CXX_STR(""threadinfo"")))
	{
		setThreadInfo(OptionConverter::toBoolean(value, false));
	}
	else if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""PRETTYPRINT""), LOG4CXX_STR(""prettyprint"")))
	{
		setPrettyPrint(OptionConverter::toBoolean(value, false));
	}
}",1,1,main\cpp\jsonlayout.cpp,JSONLayout.setOption,,false,109,126,setOption,,,14,"void JSONLayout.setOption (LogString,LogString)"
27206,METHOD,main\cpp\jsonlayout.cpp:<global>,TYPE_DECL,"void JSONLayout::format(LogString& output,
	const spi::LoggingEventPtr& event,
	Pool& p) const
{
	output.reserve(m_priv->expectedPatternLength + event->getMessage().size());
	output.append(LOG4CXX_STR(""{""));
	output.append(m_priv->prettyPrint ? LOG4CXX_EOL : LOG4CXX_STR("" ""));

	if (m_priv->prettyPrint)
	{
		output.append(m_priv->ppIndentL1);
	}

	appendQuotedEscapedString(output, LOG4CXX_STR(""timestamp""));
	output.append(LOG4CXX_STR("": ""));
	LogString timestamp;
	m_priv->dateFormat.format(timestamp, event->getTimeStamp(), p);
	appendQuotedEscapedString(output, timestamp);
	output.append(LOG4CXX_STR("",""));
	output.append(m_priv->prettyPrint ? LOG4CXX_EOL : LOG4CXX_STR("" ""));

	if (m_priv->threadInfo)
	{
		if (m_priv->prettyPrint)
		{
			output.append(m_priv->ppIndentL1);
		}
		appendQuotedEscapedString(output, LOG4CXX_STR(""thread""));
		output.append(LOG4CXX_STR("": ""));
		appendQuotedEscapedString(output, event->getThreadName());
		output.append(LOG4CXX_STR("",""));
		output.append(m_p...",1,1,main\cpp\jsonlayout.cpp,JSONLayout.format,,false,128,208,format,,,15,"void JSONLayout.format (LogString,ANY,Pool)"
27528,METHOD,main\cpp\jsonlayout.cpp:<global>,TYPE_DECL,"void JSONLayout::appendQuotedEscapedString(LogString& buf,
	const LogString& input) const
{
	appendItem(input, buf);
}",1,1,main\cpp\jsonlayout.cpp,JSONLayout.appendQuotedEscapedString,,false,210,214,appendQuotedEscapedString,,,16,"void JSONLayout.appendQuotedEscapedString (LogString,LogString)"
27537,METHOD,main\cpp\jsonlayout.cpp:<global>,TYPE_DECL,"void JSONLayout::appendItem(const LogString& input, LogString& buf)
{
	/* add leading quote */
	buf.push_back(0x22);

	logchar specialChars[] =
	{
		0x08,   /* \b backspace         */
		0x09,   /* \t tab               */
		0x0a,   /* \n newline           */
		0x0c,   /* \f form feed         */
		0x0d,   /* \r carriage return   */
		0x22,   /* \"" double quote      */
		0x5c,   /* \\ backslash         */
		0x00    /* terminating NULL for C-strings */
	};

	size_t start = 0;
	size_t found = input.find_first_of(specialChars, start);

	while (found != LogString::npos)
	{
		if (found > start)
		{
			buf.append(input, start, found - start);
		}

		switch (input[found])
		{
			case 0x08:
				/* \b backspace */
				buf.push_back(0x5c);
				buf.push_back('b');
				break;

			case 0x09:
				/* \t tab */
				buf.push_back(0x5c);
				buf.push_back('t');
				break;

			case 0x0a:
				/* \n newline */
				buf.push_back(0x5c);
				buf.push_back('n');
				break;

			case 0x0c:
				/* \f form feed */...",1,1,main\cpp\jsonlayout.cpp,JSONLayout.appendItem,,false,216,311,appendItem,,,17,"void JSONLayout.appendItem (LogString,LogString)"
27752,METHOD,main\cpp\jsonlayout.cpp:<global>,TYPE_DECL,"void JSONLayout::appendSerializedMDC(LogString& buf,
	const LoggingEventPtr& event) const
{
	LoggingEvent::KeySet keys = event->getMDCKeySet();

	if (keys.empty())
	{
		return;
	}

	buf.append(LOG4CXX_STR("",""));
	buf.append(m_priv->prettyPrint ? LOG4CXX_EOL : LOG4CXX_STR("" ""));

	if (m_priv->prettyPrint)
	{
		buf.append(m_priv->ppIndentL1);
	}

	appendQuotedEscapedString(buf, LOG4CXX_STR(""context_map""));
	buf.append(LOG4CXX_STR("": {""));
	buf.append(m_priv->prettyPrint ? LOG4CXX_EOL : LOG4CXX_STR("" ""));

	for (LoggingEvent::KeySet::iterator it = keys.begin();
		it != keys.end(); ++it)
	{
		if (m_priv->prettyPrint)
		{
			buf.append(m_priv->ppIndentL2);
		}

		appendQuotedEscapedString(buf, *it);
		buf.append(LOG4CXX_STR("": ""));
		LogString value;
		event->getMDC(*it, value);
		appendQuotedEscapedString(buf, value);

		/* if this isn't the last k:v pair, we need a comma */
		if (it + 1 != keys.end())
		{
			buf.append(LOG4CXX_STR("",""));
			buf.append(m_priv->prettyPrint ? LOG4CXX_EOL ...",1,1,main\cpp\jsonlayout.cpp,JSONLayout.appendSerializedMDC,,false,313,367,appendSerializedMDC,,,18,"void JSONLayout.appendSerializedMDC (LogString,LoggingEventPtr)"
27931,METHOD,main\cpp\jsonlayout.cpp:<global>,TYPE_DECL,"void JSONLayout::appendSerializedNDC(LogString& buf,
	const LoggingEventPtr& event) const
{
	LogString ndcVal;

	if (!event->getNDC(ndcVal))
	{
		return;
	}

	buf.append(LOG4CXX_STR("",""));
	buf.append(m_priv->prettyPrint ? LOG4CXX_EOL : LOG4CXX_STR("" ""));

	if (m_priv->prettyPrint)
	{
		buf.append(m_priv->ppIndentL1);
	}

	appendQuotedEscapedString(buf, LOG4CXX_STR(""context_stack""));
	buf.append(LOG4CXX_STR("": [""));
	buf.append(m_priv->prettyPrint ? LOG4CXX_EOL : LOG4CXX_STR("" ""));

	if (m_priv->prettyPrint)
	{
		buf.append(m_priv->ppIndentL2);
	}

	appendQuotedEscapedString(buf, ndcVal);
	buf.append(m_priv->prettyPrint ? LOG4CXX_EOL : LOG4CXX_STR("" ""));

	if (m_priv->prettyPrint)
	{
		buf.append(m_priv->ppIndentL1);
	}

	buf.append(LOG4CXX_STR(""]""));
}",1,1,main\cpp\jsonlayout.cpp,JSONLayout.appendSerializedNDC,,false,369,405,appendSerializedNDC,,,19,"void JSONLayout.appendSerializedNDC (LogString,LoggingEventPtr)"
28041,METHOD,main\cpp\jsonlayout.cpp:<global>,TYPE_DECL,"void JSONLayout::appendSerializedLocationInfo(LogString& buf,
	const LoggingEventPtr& event, Pool& p) const
{
	if (m_priv->prettyPrint)
	{
		buf.append(m_priv->ppIndentL1);
	}

	appendQuotedEscapedString(buf, LOG4CXX_STR(""location_info""));
	buf.append(LOG4CXX_STR("": {""));
	buf.append(m_priv->prettyPrint ? LOG4CXX_EOL : LOG4CXX_STR("" ""));
	const LocationInfo& locInfo = event->getLocationInformation();

	if (m_priv->prettyPrint)
	{
		buf.append(m_priv->ppIndentL2);
	}

	appendQuotedEscapedString(buf, LOG4CXX_STR(""file""));
	buf.append(LOG4CXX_STR("": ""));
	LOG4CXX_DECODE_CHAR(fileName, locInfo.getFileName());
	appendQuotedEscapedString(buf, fileName);
	buf.append(LOG4CXX_STR("",""));
	buf.append(m_priv->prettyPrint ? LOG4CXX_EOL : LOG4CXX_STR("" ""));

	if (m_priv->prettyPrint)
	{
		buf.append(m_priv->ppIndentL2);
	}

	appendQuotedEscapedString(buf, LOG4CXX_STR(""line""));
	buf.append(LOG4CXX_STR("": ""));
	LogString lineNumber;
	StringHelper::toString(locInfo.getLineNumber(), p, lineNumber);
	...",1,1,main\cpp\jsonlayout.cpp,JSONLayout.appendSerializedLocationInfo,,false,407,474,appendSerializedLocationInfo,,,20,"void JSONLayout.appendSerializedLocationInfo (LogString,LoggingEventPtr,Pool)"
28304,METHOD,main\cpp\layout.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\layout.cpp,main\cpp\layout.cpp:<global>,,false,1,52,<global>,,,1,
28308,METHOD,main\cpp\layout.cpp:<global>,TYPE_DECL,Layout::~Layout() {},1,20,main\cpp\layout.cpp,Layout.~Layout,,false,26,26,~Layout,,,3,ANY Layout.~Layout ()
28312,METHOD,main\cpp\layout.cpp:<global>,TYPE_DECL,"LogString Layout::getContentType() const
{
	return LOG4CXX_STR(""text/plain"");
}",1,1,main\cpp\layout.cpp,Layout.getContentType,,false,28,31,getContentType,,,4,LogString Layout.getContentType ()
28319,METHOD,main\cpp\layout.cpp:<global>,TYPE_DECL,"void Layout::appendHeader(LogString&, LOG4CXX_NS::helpers::Pool&) {}",1,68,main\cpp\layout.cpp,Layout.appendHeader,,false,33,33,appendHeader,,,5,"void Layout.appendHeader (LogString,ANY)"
28325,METHOD,main\cpp\layout.cpp:<global>,TYPE_DECL,"void Layout::appendFooter(LogString&, LOG4CXX_NS::helpers::Pool&) {}",1,68,main\cpp\layout.cpp,Layout.appendFooter,,false,35,35,appendFooter,,,6,"void Layout.appendFooter (LogString,ANY)"
28331,METHOD,main\cpp\layout.cpp:<global>,TYPE_DECL,"size_t Layout::getFormattedEventCharacterCount() const
{
	auto exampleEvent = std::make_shared<spi::LoggingEvent>
		( LOG4CXX_STR(""example.logger"")
		, Level::getDebug()
		, LOG4CXX_LOCATION
		, LogString()
		);
	LogString text;
	Pool pool;
	format(text, exampleEvent, pool);
	return text.size();
}",1,1,main\cpp\layout.cpp,Layout.getFormattedEventCharacterCount,,false,40,52,getFormattedEventCharacterCount,,,7,size_t Layout.getFormattedEventCharacterCount ()
28382,METHOD,main\cpp\level.cpp:<global>,TYPE_DECL,<global>,1,2,main\cpp\level.cpp,main\cpp\level.cpp:<global>,,false,1,285,<global>,,,1,
28385,METHOD,main\cpp\level.cpp:<global>,TYPE_DECL,"LevelPtr Level::getFatal()
{
	static WideLife<LevelPtr> fatalLevel = std::make_shared<Level>(Level::FATAL_INT, LOG4CXX_STR(""FATAL""), 0);
	return fatalLevel;
}",1,1,main\cpp\level.cpp,Level.getFatal,,false,39,43,getFatal,,,2,LevelPtr Level.getFatal ()
28408,METHOD,main\cpp\level.cpp:<global>,TYPE_DECL,"LevelPtr Level::getError()
{
	static WideLife<LevelPtr> errorLevel = std::make_shared<Level>(Level::ERROR_INT, LOG4CXX_STR(""ERROR""), 3);
	return errorLevel;
}",1,1,main\cpp\level.cpp,Level.getError,,false,45,49,getError,,,3,LevelPtr Level.getError ()
28431,METHOD,main\cpp\level.cpp:<global>,TYPE_DECL,"LevelPtr Level::getWarn()
{
	static WideLife<LevelPtr> warnLevel = std::make_shared<Level>(Level::WARN_INT, LOG4CXX_STR(""WARN""), 4);
	return warnLevel;
}",1,1,main\cpp\level.cpp,Level.getWarn,,false,51,55,getWarn,,,4,LevelPtr Level.getWarn ()
28454,METHOD,main\cpp\level.cpp:<global>,TYPE_DECL,"LevelPtr Level::getInfo()
{
	static WideLife<LevelPtr> infoLevel = std::make_shared<Level>(Level::INFO_INT, LOG4CXX_STR(""INFO""), 6);
	return infoLevel;
}",1,1,main\cpp\level.cpp,Level.getInfo,,false,57,61,getInfo,,,5,LevelPtr Level.getInfo ()
28477,METHOD,main\cpp\level.cpp:<global>,TYPE_DECL,"LevelPtr Level::getDebug()
{
	static WideLife<LevelPtr> debugLevel = std::make_shared<Level>(Level::DEBUG_INT, LOG4CXX_STR(""DEBUG""), 7);
	return debugLevel;
}",1,1,main\cpp\level.cpp,Level.getDebug,,false,63,67,getDebug,,,6,LevelPtr Level.getDebug ()
28500,METHOD,main\cpp\level.cpp:<global>,TYPE_DECL,"LevelPtr Level::getTrace()
{
	static WideLife<LevelPtr> traceLevel = std::make_shared<Level>(Level::TRACE_INT, LOG4CXX_STR(""TRACE""), 7);
	return traceLevel;
}",1,1,main\cpp\level.cpp,Level.getTrace,,false,69,73,getTrace,,,7,LevelPtr Level.getTrace ()
28523,METHOD,main\cpp\level.cpp:<global>,TYPE_DECL,"LevelPtr Level::getAll()
{
	static WideLife<LevelPtr> allLevel = std::make_shared<Level>(Level::ALL_INT, LOG4CXX_STR(""ALL""), 7);
	return allLevel;
}",1,1,main\cpp\level.cpp,Level.getAll,,false,76,80,getAll,,,8,LevelPtr Level.getAll ()
28546,METHOD,main\cpp\level.cpp:<global>,TYPE_DECL,"Level::Level(int level1,
	const LogString& name1, int syslogEquivalent1)
	: level(level1), name(name1), syslogEquivalent(syslogEquivalent1)
{
	APRInitializer::initialize();
}",1,1,main\cpp\level.cpp,Level.Level,,false,84,89,Level,,,9,"ANY Level.Level (int,LogString,int)"
28557,METHOD,main\cpp\level.cpp:<global>,TYPE_DECL,"LevelPtr Level::toLevelLS(const LogString& sArg)
{
	return toLevelLS(sArg, Level::getDebug());
}",1,1,main\cpp\level.cpp,Level.toLevelLS,,false,92,95,toLevelLS,,,10,LevelPtr Level.toLevelLS (LogString)
28569,METHOD,main\cpp\level.cpp:<global>,TYPE_DECL,"LogString Level::toString() const
{
	return name;
}",1,1,main\cpp\level.cpp,Level.toString,,false,97,100,toString,,,11,LogString Level.toString ()
28575,METHOD,main\cpp\level.cpp:<global>,TYPE_DECL,"LevelPtr Level::toLevel(int val)
{
	return toLevel(val, Level::getDebug());
}",1,1,main\cpp\level.cpp,Level.toLevel,,false,103,106,toLevel,,,12,LevelPtr Level.toLevel (int)
28587,METHOD,main\cpp\level.cpp:<global>,TYPE_DECL,"LevelPtr Level::toLevel(int val, const LevelPtr& defaultLevel)
{
	switch (val)
	{
		case ALL_INT:
			return getAll();

		case DEBUG_INT:
			return getDebug();

		case TRACE_INT:
			return getTrace();

		case INFO_INT:
			return getInfo();

		case WARN_INT:
			return getWarn();

		case ERROR_INT:
			return getError();

		case FATAL_INT:
			return getFatal();

		case OFF_INT:
			return getOff();

		default:
			return defaultLevel;
	}
}",1,1,main\cpp\level.cpp,Level.toLevel,,false,108,139,toLevel,,,13,"LevelPtr Level.toLevel (int,LevelPtr)"
28631,METHOD,main\cpp\level.cpp:<global>,TYPE_DECL,"LevelPtr Level::toLevel(const std::string& sArg)
{
	return toLevel(sArg, Level::getDebug());
}",1,1,main\cpp\level.cpp,Level.toLevel,,false,141,144,toLevel,,,14,LevelPtr Level.toLevel (ANY)
28643,METHOD,main\cpp\level.cpp:<global>,TYPE_DECL,"LevelPtr Level::toLevel(const std::string& sArg, const LevelPtr& defaultLevel)
{
	LOG4CXX_DECODE_CHAR(s, sArg);
	return toLevelLS(s, defaultLevel);
}",1,1,main\cpp\level.cpp,Level.toLevel,,false,146,150,toLevel,,,15,"LevelPtr Level.toLevel (ANY,LevelPtr)"
28656,METHOD,main\cpp\level.cpp:<global>,TYPE_DECL,"void Level::toString(std::string& dst) const
{
	Transcoder::encode(name, dst);
}",1,1,main\cpp\level.cpp,Level.toString,,false,152,155,toString,,,16,void Level.toString (ANY)
28667,METHOD,main\cpp\level.cpp:<global>,TYPE_DECL,"LevelPtr Level::toLevelLS(const LogString& sArg, const LevelPtr& defaultLevel)
{
	const LogString trimmed(StringHelper::trim(sArg));
	const size_t len = trimmed.length();

	if (len == 4)
	{
		if (StringHelper::equalsIgnoreCase(trimmed, LOG4CXX_STR(""INFO""), LOG4CXX_STR(""info"")))
		{
			return getInfo();
		}

		if (StringHelper::equalsIgnoreCase(trimmed, LOG4CXX_STR(""WARN""), LOG4CXX_STR(""warn"")))
		{
			return getWarn();
		}
	}
	else
	{
		if (len == 5)
		{
			if (StringHelper::equalsIgnoreCase(trimmed, LOG4CXX_STR(""DEBUG""), LOG4CXX_STR(""debug"")))
			{
				return getDebug();
			}

			if (StringHelper::equalsIgnoreCase(trimmed, LOG4CXX_STR(""TRACE""), LOG4CXX_STR(""trace"")))
			{
				return getTrace();
			}

			if (StringHelper::equalsIgnoreCase(trimmed, LOG4CXX_STR(""ERROR""), LOG4CXX_STR(""error"")))
			{
				return getError();
			}

			if (StringHelper::equalsIgnoreCase(trimmed, LOG4CXX_STR(""FATAL""), LOG4CXX_STR(""fatal"")))
			{
				return getFatal();
			}
		}
		else
		{
			if (len == 3)
			...",1,1,main\cpp\level.cpp,Level.toLevelLS,,false,215,274,toLevelLS,,,17,"LevelPtr Level.toLevelLS (LogString,LevelPtr)"
28812,METHOD,main\cpp\level.cpp:<global>,TYPE_DECL,"bool Level::equals(const LevelPtr& level1) const
{
	return level1 && this->level == level1->level;
}",1,1,main\cpp\level.cpp,Level.equals,,false,277,280,equals,,,18,bool Level.equals (LevelPtr)
28827,METHOD,main\cpp\level.cpp:<global>,TYPE_DECL,"bool Level::isGreaterOrEqual(const LevelPtr& level1) const
{
	return level1 && this->level >= level1->level;
}",1,1,main\cpp\level.cpp,Level.isGreaterOrEqual,,false,282,285,isGreaterOrEqual,,,19,bool Level.isGreaterOrEqual (LevelPtr)
28859,METHOD,main\cpp\levelmatchfilter.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\levelmatchfilter.cpp,main\cpp\levelmatchfilter.cpp:<global>,,false,1,104,<global>,,,1,
28866,METHOD,main\cpp\levelmatchfilter.cpp:<global>,TYPE_DECL,"LevelMatchFilter::LevelMatchFilter()
	: Filter(std::make_unique<LevelMatchFilterPrivate>())
{
	priv->acceptOnMatch = true;
}",1,1,main\cpp\levelmatchfilter.cpp,LevelMatchFilter.LevelMatchFilter,,false,41,45,LevelMatchFilter,,,4,ANY LevelMatchFilter.LevelMatchFilter ()
28882,METHOD,main\cpp\levelmatchfilter.cpp:<global>,TYPE_DECL,LevelMatchFilter::~LevelMatchFilter() {},1,40,main\cpp\levelmatchfilter.cpp,LevelMatchFilter.~LevelMatchFilter,,false,47,47,~LevelMatchFilter,,,5,ANY LevelMatchFilter.~LevelMatchFilter ()
28886,METHOD,main\cpp\levelmatchfilter.cpp:<global>,TYPE_DECL,"void LevelMatchFilter::setOption(const LogString& option,
	const LogString& value)
{


	if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""LEVELTOMATCH""), LOG4CXX_STR(""leveltomatch"")))
	{
		setLevelToMatch(value);
	}
	else if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""ACCEPTONMATCH""), LOG4CXX_STR(""acceptonmatch"")))
	{
		priv->acceptOnMatch = OptionConverter::toBoolean(value, priv->acceptOnMatch);
	}
}",1,2,main\cpp\levelmatchfilter.cpp,LevelMatchFilter.setOption,,false,49,64,setOption,,,6,"void LevelMatchFilter.setOption (LogString,LogString)"
28944,METHOD,main\cpp\levelmatchfilter.cpp:<global>,TYPE_DECL,"void LevelMatchFilter::setLevelToMatch(const LogString& levelToMatch1)
{
	priv->levelToMatch = OptionConverter::toLevel(levelToMatch1, priv->levelToMatch);
}",1,1,main\cpp\levelmatchfilter.cpp,LevelMatchFilter.setLevelToMatch,,false,66,69,setLevelToMatch,,,7,void LevelMatchFilter.setLevelToMatch (LogString)
28975,METHOD,main\cpp\levelmatchfilter.cpp:<global>,TYPE_DECL,"LogString LevelMatchFilter::getLevelToMatch() const
{
	return priv->levelToMatch->toString();
}",1,8,main\cpp\levelmatchfilter.cpp,LevelMatchFilter.getLevelToMatch,,false,71,74,getLevelToMatch,,,8,LogString LevelMatchFilter.getLevelToMatch ()
28993,METHOD,main\cpp\levelmatchfilter.cpp:<global>,TYPE_DECL,"Filter::FilterDecision LevelMatchFilter::decide(
	const LOG4CXX_NS::spi::LoggingEventPtr& event) const
{
	if (priv->levelToMatch != 0 && priv->levelToMatch->equals(event->getLevel()))
	{
		if (priv->acceptOnMatch)
		{
			return Filter::ACCEPT;
		}
		else
		{
			return Filter::DENY;
		}
	}
	else
	{
		return Filter::NEUTRAL;
	}
}",1,5,main\cpp\levelmatchfilter.cpp,LevelMatchFilter.decide,,false,76,94,decide,,,9,FilterDecision LevelMatchFilter.decide (ANY)
29058,METHOD,main\cpp\levelmatchfilter.cpp:<global>,TYPE_DECL,"void LevelMatchFilter::setAcceptOnMatch(bool acceptOnMatch1)
{
	priv->acceptOnMatch = acceptOnMatch1;
}",1,1,main\cpp\levelmatchfilter.cpp,LevelMatchFilter.setAcceptOnMatch,,false,96,99,setAcceptOnMatch,,,10,void LevelMatchFilter.setAcceptOnMatch (bool)
29075,METHOD,main\cpp\levelmatchfilter.cpp:<global>,TYPE_DECL,"bool LevelMatchFilter::getAcceptOnMatch() const
{
	return priv->acceptOnMatch;
}",1,8,main\cpp\levelmatchfilter.cpp,LevelMatchFilter.getAcceptOnMatch,,false,101,104,getAcceptOnMatch,,,11,bool LevelMatchFilter.getAcceptOnMatch ()
29103,METHOD,main\cpp\levelpatternconverter.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\levelpatternconverter.cpp,main\cpp\levelpatternconverter.cpp:<global>,,false,1,91,<global>,,,1,
29107,METHOD,main\cpp\levelpatternconverter.cpp:<global>,TYPE_DECL,"LevelPatternConverter::LevelPatternConverter() :
	LoggingEventPatternConverter(LOG4CXX_STR(""Level""),
		LOG4CXX_STR(""level""))
{
}",1,1,main\cpp\levelpatternconverter.cpp,LevelPatternConverter.LevelPatternConverter,,false,32,36,LevelPatternConverter,,,3,ANY LevelPatternConverter.LevelPatternConverter ()
29111,METHOD,main\cpp\levelpatternconverter.cpp:<global>,TYPE_DECL,"PatternConverterPtr LevelPatternConverter::newInstance(
	const std::vector<LogString>& /* options */)
{
	static WideLife<PatternConverterPtr> def = std::make_shared<LevelPatternConverter>();
	return def;
}",1,1,main\cpp\levelpatternconverter.cpp,LevelPatternConverter.newInstance,,false,38,43,newInstance,,,4,PatternConverterPtr LevelPatternConverter.newInstance (ANY)
29125,METHOD,main\cpp\levelpatternconverter.cpp:<global>,TYPE_DECL,"void LevelPatternConverter::format(
	const LoggingEventPtr& event,
	LogString& toAppendTo,
	LOG4CXX_NS::helpers::Pool& /* p */) const
{
	toAppendTo.append(event->getLevel()->toString());
}",1,1,main\cpp\levelpatternconverter.cpp,LevelPatternConverter.format,,false,45,51,format,,,5,"void LevelPatternConverter.format (LoggingEventPtr,LogString,ANY)"
29143,METHOD,main\cpp\levelpatternconverter.cpp:<global>,TYPE_DECL,"LogString LevelPatternConverter::getStyleClass(const ObjectPtr& obj) const
{
	LoggingEventPtr e = LOG4CXX_NS::cast<LoggingEvent>(obj);

	if (e != NULL)
	{
		int lint = e->getLevel()->toInt();

		switch (lint)
		{
			case Level::TRACE_INT:
				return LOG4CXX_STR(""level trace"");

			case Level::DEBUG_INT:
				return LOG4CXX_STR(""level debug"");

			case Level::INFO_INT:
				return LOG4CXX_STR(""level info"");

			case Level::WARN_INT:
				return LOG4CXX_STR(""level warn"");

			case Level::ERROR_INT:
				return LOG4CXX_STR(""level error"");

			case Level::FATAL_INT:
				return LOG4CXX_STR(""level fatal"");

			default:
				return LogString(LOG4CXX_STR(""level "")) + e->getLevel()->toString();
		}
	}

	return LOG4CXX_STR(""level"");
}",1,1,main\cpp\levelpatternconverter.cpp,LevelPatternConverter.getStyleClass,,false,57,91,getStyleClass,,,6,LogString LevelPatternConverter.getStyleClass (ObjectPtr)
29251,METHOD,main\cpp\levelrangefilter.cpp:<global>,TYPE_DECL,<global>,1,2,main\cpp\levelrangefilter.cpp,main\cpp\levelrangefilter.cpp:<global>,,false,1,136,<global>,,,1,
29254,METHOD,LevelRangeFilterPrivate,TYPE_DECL,"LevelRangeFilterPrivate() : acceptOnMatch(false), levelMin(Level::getAll()), levelMax(Level::getOff()) {}",2,106,main\cpp\levelrangefilter.cpp,LevelRangeFilterPrivate.LevelRangeFilterPrivate,,false,35,35,LevelRangeFilterPrivate,,,1,ANY LevelRangeFilterPrivate.LevelRangeFilterPrivate ()
29263,METHOD,main\cpp\levelrangefilter.cpp:<global>,TYPE_DECL,"LevelRangeFilter::LevelRangeFilter()
	: Filter(std::make_unique<LevelRangeFilterPrivate>())
{
}",1,1,main\cpp\levelrangefilter.cpp,LevelRangeFilter.LevelRangeFilter,,false,49,52,LevelRangeFilter,,,4,ANY LevelRangeFilter.LevelRangeFilter ()
29267,METHOD,main\cpp\levelrangefilter.cpp:<global>,TYPE_DECL,LevelRangeFilter::~LevelRangeFilter() {},1,40,main\cpp\levelrangefilter.cpp,LevelRangeFilter.~LevelRangeFilter,,false,54,54,~LevelRangeFilter,,,5,ANY LevelRangeFilter.~LevelRangeFilter ()
29271,METHOD,main\cpp\levelrangefilter.cpp:<global>,TYPE_DECL,"void LevelRangeFilter::setOption(const LogString& option,
	const LogString& value)
{

	if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""LEVELMIN""), LOG4CXX_STR(""levelmin"")))
	{
		priv->levelMin = OptionConverter::toLevel(value, priv->levelMin);
	}
	else if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""LEVELMAX""), LOG4CXX_STR(""levelmax"")))
	{
		priv->levelMax = OptionConverter::toLevel(value, priv->levelMax);
	}
	else if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""ACCEPTONMATCH""), LOG4CXX_STR(""acceptonmatch"")))
	{
		priv->acceptOnMatch = OptionConverter::toBoolean(value, priv->acceptOnMatch);
	}
}",1,2,main\cpp\levelrangefilter.cpp,LevelRangeFilter.setOption,,false,56,75,setOption,,,6,"void LevelRangeFilter.setOption (LogString,LogString)"
29392,METHOD,main\cpp\levelrangefilter.cpp:<global>,TYPE_DECL,"Filter::FilterDecision LevelRangeFilter::decide(
	const spi::LoggingEventPtr& event) const
{
	if (priv->levelMin != 0 && !event->getLevel()->isGreaterOrEqual(priv->levelMin))
	{
		// level of event is less than minimum
		return Filter::DENY;
	}

	if (priv->levelMax != 0 && event->getLevel()->toInt() > priv->levelMax->toInt())
	{
		// level of event is greater than maximum
		// Alas, there is no Level.isGreater method. and using
		// a combo of isGreaterOrEqual && !Equal seems worse than
		// checking the int values of the level objects..
		return Filter::DENY;
	}

	if (priv->acceptOnMatch)
	{
		// this filter set up to bypass later filters and always return
		// accept if level in range
		return Filter::ACCEPT;
	}
	else
	{
		// event is ok for this filter; allow later filters to have a look..
		return Filter::NEUTRAL;
	}
}",1,5,main\cpp\levelrangefilter.cpp,LevelRangeFilter.decide,,false,77,106,decide,,,7,FilterDecision LevelRangeFilter.decide (ANY)
29496,METHOD,main\cpp\levelrangefilter.cpp:<global>,TYPE_DECL,"void LevelRangeFilter::setLevelMin(const LevelPtr& levelMin1)
{
	priv->levelMin = levelMin1;
}",1,1,main\cpp\levelrangefilter.cpp,LevelRangeFilter.setLevelMin,,false,108,111,setLevelMin,,,8,void LevelRangeFilter.setLevelMin (LevelPtr)
29513,METHOD,main\cpp\levelrangefilter.cpp:<global>,TYPE_DECL,"const LevelPtr& LevelRangeFilter::getLevelMin() const
{
	return priv->levelMin;
}",1,8,main\cpp\levelrangefilter.cpp,LevelRangeFilter.getLevelMin,,false,113,116,getLevelMin,,,9,LevelPtr LevelRangeFilter.getLevelMin ()
29528,METHOD,main\cpp\levelrangefilter.cpp:<global>,TYPE_DECL,"void LevelRangeFilter::setLevelMax(const LevelPtr& levelMax1)
{
	priv->levelMax = levelMax1;
}",1,1,main\cpp\levelrangefilter.cpp,LevelRangeFilter.setLevelMax,,false,118,121,setLevelMax,,,10,void LevelRangeFilter.setLevelMax (LevelPtr)
29545,METHOD,main\cpp\levelrangefilter.cpp:<global>,TYPE_DECL,"const LevelPtr& LevelRangeFilter::getLevelMax() const
{
	return priv->levelMax;
}",1,8,main\cpp\levelrangefilter.cpp,LevelRangeFilter.getLevelMax,,false,123,126,getLevelMax,,,11,LevelPtr LevelRangeFilter.getLevelMax ()
29560,METHOD,main\cpp\levelrangefilter.cpp:<global>,TYPE_DECL,"void LevelRangeFilter::setAcceptOnMatch(bool acceptOnMatch1)
{
	priv->acceptOnMatch = acceptOnMatch1;
}",1,1,main\cpp\levelrangefilter.cpp,LevelRangeFilter.setAcceptOnMatch,,false,128,131,setAcceptOnMatch,,,12,void LevelRangeFilter.setAcceptOnMatch (bool)
29577,METHOD,main\cpp\levelrangefilter.cpp:<global>,TYPE_DECL,"bool LevelRangeFilter::getAcceptOnMatch() const
{
	return priv->acceptOnMatch;
}",1,8,main\cpp\levelrangefilter.cpp,LevelRangeFilter.getAcceptOnMatch,,false,133,136,getAcceptOnMatch,,,13,bool LevelRangeFilter.getAcceptOnMatch ()
29605,METHOD,main\cpp\linelocationpatternconverter.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\linelocationpatternconverter.cpp,main\cpp\linelocationpatternconverter.cpp:<global>,,false,1,52,<global>,,,1,
29609,METHOD,main\cpp\linelocationpatternconverter.cpp:<global>,TYPE_DECL,"LineLocationPatternConverter::LineLocationPatternConverter() :
	LoggingEventPatternConverter(LOG4CXX_STR(""Line""),
		LOG4CXX_STR(""line""))
{
}",1,1,main\cpp\linelocationpatternconverter.cpp,LineLocationPatternConverter.LineLocationPatternConverter,,false,31,35,LineLocationPatternConverter,,,3,ANY LineLocationPatternConverter.LineLocationPatternConverter ()
29613,METHOD,main\cpp\linelocationpatternconverter.cpp:<global>,TYPE_DECL,"PatternConverterPtr LineLocationPatternConverter::newInstance(
	const std::vector<LogString>& /* options */)
{
	static WideLife<PatternConverterPtr> instance = std::make_shared<LineLocationPatternConverter>();
	return instance;
}",1,1,main\cpp\linelocationpatternconverter.cpp,LineLocationPatternConverter.newInstance,,false,37,42,newInstance,,,4,PatternConverterPtr LineLocationPatternConverter.newInstance (ANY)
29627,METHOD,main\cpp\linelocationpatternconverter.cpp:<global>,TYPE_DECL,"void LineLocationPatternConverter::format(
	const LoggingEventPtr& event,
	LogString& toAppendTo,
	Pool& p) const
{
	StringHelper::toString(
		event->getLocationInformation().getLineNumber(),
		p, toAppendTo);
}",1,1,main\cpp\linelocationpatternconverter.cpp,LineLocationPatternConverter.format,,false,44,52,format,,,5,"void LineLocationPatternConverter.format (LoggingEventPtr,LogString,Pool)"
29658,METHOD,main\cpp\lineseparatorpatternconverter.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\lineseparatorpatternconverter.cpp,main\cpp\lineseparatorpatternconverter.cpp:<global>,,false,1,57,<global>,,,1,
29662,METHOD,main\cpp\lineseparatorpatternconverter.cpp:<global>,TYPE_DECL,"LineSeparatorPatternConverter::LineSeparatorPatternConverter() :
	LoggingEventPatternConverter(LOG4CXX_STR(""Line Sep""),
		LOG4CXX_STR(""lineSep""))
{
}",1,1,main\cpp\lineseparatorpatternconverter.cpp,LineSeparatorPatternConverter.LineSeparatorPatternConverter,,false,30,34,LineSeparatorPatternConverter,,,3,ANY LineSeparatorPatternConverter.LineSeparatorPatternConverter ()
29666,METHOD,main\cpp\lineseparatorpatternconverter.cpp:<global>,TYPE_DECL,"PatternConverterPtr LineSeparatorPatternConverter::newInstance(
	const std::vector<LogString>& /* options */)
{
	static WideLife<PatternConverterPtr> instance = std::make_shared<LineSeparatorPatternConverter>();
	return instance;
}",1,1,main\cpp\lineseparatorpatternconverter.cpp,LineSeparatorPatternConverter.newInstance,,false,36,41,newInstance,,,4,PatternConverterPtr LineSeparatorPatternConverter.newInstance (ANY)
29680,METHOD,main\cpp\lineseparatorpatternconverter.cpp:<global>,TYPE_DECL,"void LineSeparatorPatternConverter::format(
	const LoggingEventPtr& /* event */,
	LogString& toAppendTo,
	Pool& /* p */) const
{
	toAppendTo.append(LOG4CXX_EOL);
}",1,1,main\cpp\lineseparatorpatternconverter.cpp,LineSeparatorPatternConverter.format,,false,43,49,format,,,5,"void LineSeparatorPatternConverter.format (LoggingEventPtr,LogString,Pool)"
29692,METHOD,main\cpp\lineseparatorpatternconverter.cpp:<global>,TYPE_DECL,"void LineSeparatorPatternConverter::format(
	const ObjectPtr& /* event */,
	LogString& toAppendTo,
	Pool& /* p */) const
{
	toAppendTo.append(LOG4CXX_EOL);
}",1,1,main\cpp\lineseparatorpatternconverter.cpp,LineSeparatorPatternConverter.format,,false,51,57,format,,,6,"void LineSeparatorPatternConverter.format (ObjectPtr,LogString,Pool)"
29717,METHOD,main\cpp\literalpatternconverter.cpp:<global>,TYPE_DECL,<global>,1,19,main\cpp\literalpatternconverter.cpp,main\cpp\literalpatternconverter.cpp:<global>,,false,1,77,<global>,,,1,
29720,METHOD,LiteralPatternConverterPrivate,TYPE_DECL,"LiteralPatternConverterPrivate( const LogString& name, const LogString& style, const LogString& literal1 ) :
		PatternConverterPrivate( name, style ),
		literal(literal1) {}",2,22,main\cpp\literalpatternconverter.cpp,LiteralPatternConverterPrivate.LiteralPatternConverterPrivate,,false,33,35,LiteralPatternConverterPrivate,,,1,"ANY LiteralPatternConverterPrivate.LiteralPatternConverterPrivate (LogString,LogString,LogString)"
29730,METHOD,main\cpp\literalpatternconverter.cpp:<global>,TYPE_DECL,"LiteralPatternConverter::LiteralPatternConverter(const LogString& literal1) :
	LoggingEventPatternConverter(std::make_unique<LiteralPatternConverterPrivate>
		(LOG4CXX_STR(""Literal""), LOG4CXX_STR(""literal""), literal1))
{
}",1,1,main\cpp\literalpatternconverter.cpp,LiteralPatternConverter.LiteralPatternConverter,,false,45,49,LiteralPatternConverter,,,4,ANY LiteralPatternConverter.LiteralPatternConverter (LogString)
29735,METHOD,main\cpp\literalpatternconverter.cpp:<global>,TYPE_DECL,"PatternConverterPtr LiteralPatternConverter::newInstance(
	const LogString& literal)
{
	if (literal.length() == 1 && literal[0] == 0x20 /* ' ' */)
	{
		static WideLife<PatternConverterPtr> blank = std::make_shared<LiteralPatternConverter>(literal);
		return blank;
	}

	return std::make_shared<LiteralPatternConverter>(literal);
}",1,1,main\cpp\literalpatternconverter.cpp,LiteralPatternConverter.newInstance,,false,51,61,newInstance,,,5,PatternConverterPtr LiteralPatternConverter.newInstance (LogString)
29774,METHOD,main\cpp\literalpatternconverter.cpp:<global>,TYPE_DECL,"void LiteralPatternConverter::format(
	const LoggingEventPtr& /* event */,
	LogString& toAppendTo,
	Pool& /* p */) const
{
	toAppendTo.append(priv->literal);
}",1,19,main\cpp\literalpatternconverter.cpp,LiteralPatternConverter.format,,false,63,69,format,,,6,"void LiteralPatternConverter.format (LoggingEventPtr,LogString,Pool)"
29795,METHOD,main\cpp\literalpatternconverter.cpp:<global>,TYPE_DECL,"void LiteralPatternConverter::format(
	const ObjectPtr& /* event */,
	LogString& toAppendTo,
	Pool& /* p */)  const
{
	toAppendTo.append(priv->literal);
}",1,19,main\cpp\literalpatternconverter.cpp,LiteralPatternConverter.format,,false,71,77,format,,,7,"void LiteralPatternConverter.format (ObjectPtr,LogString,Pool)"
29853,METHOD,main\cpp\loader.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\loader.cpp,main\cpp\loader.cpp:<global>,,false,1,75,<global>,,,1,
29885,METHOD,main\cpp\loader.cpp:<global>,TYPE_DECL,"const Class& Loader::loadClass(const LogString& clazz)
{
	return Class::forName(clazz);
}",1,1,main\cpp\loader.cpp,Loader.loadClass,,false,57,60,loadClass,,,31,Class Loader.loadClass (LogString)
29896,METHOD,main\cpp\loader.cpp:<global>,TYPE_DECL,"InputStreamPtr Loader::getResourceAsStream(const LogString& name)
{

	try
	{
		return std::make_shared<FileInputStream>(name);
	}
	catch (const IOException&)
	{
	}

	return 0;
}",1,1,main\cpp\loader.cpp,Loader.getResourceAsStream,,false,63,75,getResourceAsStream,,,32,InputStreamPtr Loader.getResourceAsStream (LogString)
29919,METHOD,main\cpp\locale.cpp:<global>,TYPE_DECL,<global>,1,2,main\cpp\locale.cpp,main\cpp\locale.cpp:<global>,,false,1,77,<global>,,,1,
29922,METHOD,LocalePrivate,TYPE_DECL,"LocalePrivate(const LogString& language1)
		: language(language1)
	{
	}",2,2,main\cpp\locale.cpp,LocalePrivate.LocalePrivate,,false,25,28,LocalePrivate,,,1,ANY LocalePrivate.LocalePrivate (LogString)
29927,METHOD,LocalePrivate,TYPE_DECL,"LocalePrivate(const LogString& language1, const LogString& country1)
		: language(language1), country(country1)
	{
	}",2,2,main\cpp\locale.cpp,LocalePrivate.LocalePrivate,,false,30,33,LocalePrivate,,,2,"ANY LocalePrivate.LocalePrivate (LogString,LogString)"
29933,METHOD,LocalePrivate,TYPE_DECL,"LocalePrivate(const LogString& language1, const LogString& country1,
		const LogString& variant1)
		: language(language1), country(country1), variant(variant1)
	{
	}",2,2,main\cpp\locale.cpp,LocalePrivate.LocalePrivate,,false,35,39,LocalePrivate,,,3,"ANY LocalePrivate.LocalePrivate (LogString,LogString,LogString)"
29943,METHOD,main\cpp\locale.cpp:<global>,TYPE_DECL,"Locale::Locale(const LogString& language1)
	: m_priv(std::make_unique<LocalePrivate>(language1))
{
}",1,1,main\cpp\locale.cpp,Locale.Locale,,false,46,49,Locale,,,2,ANY Locale.Locale (LogString)
29948,METHOD,main\cpp\locale.cpp:<global>,TYPE_DECL,"Locale::Locale(const LogString& language1, const LogString& country1)
	: m_priv(std::make_unique<LocalePrivate>(language1, country1))
{
}",1,1,main\cpp\locale.cpp,Locale.Locale,,false,51,54,Locale,,,3,"ANY Locale.Locale (LogString,LogString)"
29954,METHOD,main\cpp\locale.cpp:<global>,TYPE_DECL,"Locale::Locale(const LogString& language1, const LogString& country1,
	const LogString& variant1)
	: m_priv(std::make_unique<LocalePrivate>(language1, country1, variant1))
{
}",1,1,main\cpp\locale.cpp,Locale.Locale,,false,56,60,Locale,,,4,"ANY Locale.Locale (LogString,LogString,LogString)"
29961,METHOD,main\cpp\locale.cpp:<global>,TYPE_DECL,Locale::~Locale() {},1,20,main\cpp\locale.cpp,Locale.~Locale,,false,62,62,~Locale,,,5,ANY Locale.~Locale ()
29965,METHOD,main\cpp\locale.cpp:<global>,TYPE_DECL,"const LogString& Locale::getLanguage() const
{
	return m_priv->language;
}",1,1,main\cpp\locale.cpp,Locale.getLanguage,,false,64,67,getLanguage,,,6,LogString Locale.getLanguage ()
29973,METHOD,main\cpp\locale.cpp:<global>,TYPE_DECL,"const LogString& Locale::getCountry() const
{
	return m_priv->country;
}",1,1,main\cpp\locale.cpp,Locale.getCountry,,false,69,72,getCountry,,,7,LogString Locale.getCountry ()
29981,METHOD,main\cpp\locale.cpp:<global>,TYPE_DECL,"const LogString& Locale::getVariant() const
{
	return m_priv->variant;
}",1,1,main\cpp\locale.cpp,Locale.getVariant,,false,74,77,getVariant,,,8,LogString Locale.getVariant ()
29998,METHOD,main\cpp\locationinfo.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\locationinfo.cpp,main\cpp\locationinfo.cpp:<global>,,false,1,181,<global>,,,1,
30008,METHOD,main\cpp\locationinfo.cpp:<global>,TYPE_DECL,"const LocationInfo& LocationInfo::getLocationUnavailable()
{
	static const WideLife<LocationInfo> unavailable;
	return unavailable;
}",1,1,main\cpp\locationinfo.cpp,LocationInfo.getLocationUnavailable,,false,32,36,getLocationUnavailable,,,5,LocationInfo LocationInfo.getLocationUnavailable ()
30015,METHOD,main\cpp\locationinfo.cpp:<global>,TYPE_DECL,"LocationInfo::LocationInfo( const char* const fileName1,
	const char* const shortFileName1,
	const char* const methodName1,
	int lineNumber1 )
	:  lineNumber( lineNumber1 ),
	   fileName( fileName1 ),
	   shortFileName(shortFileName1),
	   methodName( methodName1 )
{
}",1,1,main\cpp\locationinfo.cpp,LocationInfo.LocationInfo,,false,43,52,LocationInfo,,,6,"ANY LocationInfo.LocationInfo (char*,char*,char*,int)"
30023,METHOD,main\cpp\locationinfo.cpp:<global>,TYPE_DECL,"LocationInfo::LocationInfo()
	: lineNumber( -1 ),
	  fileName(LocationInfo::NA),
	  shortFileName(LocationInfo::NA),
	  methodName(LocationInfo::NA_METHOD)
{
}",1,1,main\cpp\locationinfo.cpp,LocationInfo.LocationInfo,,false,57,63,LocationInfo,,,7,ANY LocationInfo.LocationInfo ()
30027,METHOD,main\cpp\locationinfo.cpp:<global>,TYPE_DECL,"LocationInfo::LocationInfo( const LocationInfo& src )
	:  lineNumber( src.lineNumber ),
	   fileName( src.fileName ),
	   shortFileName( src.shortFileName ),
	   methodName( src.methodName )
{
}",1,1,main\cpp\locationinfo.cpp,LocationInfo.LocationInfo,,false,69,75,LocationInfo,,,8,ANY LocationInfo.LocationInfo (LocationInfo)
30032,METHOD,main\cpp\locationinfo.cpp:<global>,TYPE_DECL,"LocationInfo& LocationInfo::operator = ( const LocationInfo& src )
{
	fileName = src.fileName;
	methodName = src.methodName;
	lineNumber = src.lineNumber;
	return * this;
}",1,1,main\cpp\locationinfo.cpp,LocationInfo.operator =,,false,81,87,operator =,,,9,LocationInfo LocationInfo.operator = (LocationInfo)
30055,METHOD,main\cpp\locationinfo.cpp:<global>,TYPE_DECL,"void LocationInfo::clear()
{
	fileName = NA;
	methodName = NA_METHOD;
	lineNumber = -1;
}",1,1,main\cpp\locationinfo.cpp,LocationInfo.clear,,false,92,97,clear,,,10,void LocationInfo.clear ()
30069,METHOD,main\cpp\locationinfo.cpp:<global>,TYPE_DECL,"const char* LocationInfo::getFileName() const
{
	return fileName;
}",1,1,main\cpp\locationinfo.cpp,LocationInfo.getFileName,,false,104,107,getFileName,,,11,const char* LocationInfo.getFileName ()
30075,METHOD,main\cpp\locationinfo.cpp:<global>,TYPE_DECL,"const char* LocationInfo::getShortFileName() const{
	return shortFileName;
}",1,1,main\cpp\locationinfo.cpp,LocationInfo.getShortFileName,,false,109,111,getShortFileName,,,12,const char* LocationInfo.getShortFileName ()
30081,METHOD,main\cpp\locationinfo.cpp:<global>,TYPE_DECL,"int LocationInfo::getLineNumber() const
{
	return lineNumber;
}",1,1,main\cpp\locationinfo.cpp,LocationInfo.getLineNumber,,false,117,120,getLineNumber,,,13,int LocationInfo.getLineNumber ()
30087,METHOD,main\cpp\locationinfo.cpp:<global>,TYPE_DECL,"const std::string LocationInfo::getMethodName() const
{
	std::string tmp(methodName);
	size_t parenPos = tmp.find('(');

	if (parenPos != std::string::npos)
	{
		tmp.erase(parenPos);
	}

	size_t colonPos = tmp.rfind(""::"");

	if (colonPos != std::string::npos)
	{
		tmp.erase(0, colonPos + 2);
	}
	else
	{
		size_t spacePos = tmp.find(' ');

		if (spacePos != std::string::npos)
		{
			tmp.erase(0, spacePos + 1);
		}
	}

	return tmp;
}",1,1,main\cpp\locationinfo.cpp,LocationInfo.getMethodName,,false,123,150,getMethodName,,,14,string LocationInfo.getMethodName ()
30170,METHOD,main\cpp\locationinfo.cpp:<global>,TYPE_DECL,"const std::string LocationInfo::getClassName() const
{
	std::string tmp(methodName);
	size_t parenPos = tmp.find('(');

	if (parenPos != std::string::npos)
	{
		tmp.erase(parenPos);
	}

	size_t colonPos = tmp.rfind(""::"");

	if (colonPos != std::string::npos)
	{
		tmp.erase(colonPos);
		size_t spacePos = tmp.find_last_of(' ');

		if (spacePos != std::string::npos)
		{
			tmp.erase(0, spacePos + 1);
		}

		return tmp;
	}

	tmp.erase(0, tmp.length() );
	return tmp;
}",1,1,main\cpp\locationinfo.cpp,LocationInfo.getClassName,,false,153,180,getClassName,,,15,string LocationInfo.getClassName ()
30278,METHOD,main\cpp\locationinfofilter.cpp:<global>,TYPE_DECL,<global>,1,2,main\cpp\locationinfofilter.cpp,main\cpp\locationinfofilter.cpp:<global>,,false,1,141,<global>,,,1,
30281,METHOD,LocationInfoFilterPrivate,TYPE_DECL,"LocationInfoFilterPrivate() : FilterPrivate(),
		acceptOnMatch(true),
		mustMatchAll(false),
		lineNumber(-1)
	{}",2,3,main\cpp\locationinfofilter.cpp,LocationInfoFilterPrivate.LocationInfoFilterPrivate,,false,36,40,LocationInfoFilterPrivate,,,1,ANY LocationInfoFilterPrivate.LocationInfoFilterPrivate ()
30291,METHOD,main\cpp\locationinfofilter.cpp:<global>,TYPE_DECL,"LocationInfoFilter::LocationInfoFilter() :
	Filter(std::make_unique<LocationInfoFilterPrivate>())
{
}",1,1,main\cpp\locationinfofilter.cpp,LocationInfoFilter.LocationInfoFilter,,false,50,53,LocationInfoFilter,,,4,ANY LocationInfoFilter.LocationInfoFilter ()
30295,METHOD,main\cpp\locationinfofilter.cpp:<global>,TYPE_DECL,LocationInfoFilter::~LocationInfoFilter() {},1,44,main\cpp\locationinfofilter.cpp,LocationInfoFilter.~LocationInfoFilter,,false,55,55,~LocationInfoFilter,,,5,ANY LocationInfoFilter.~LocationInfoFilter ()
30299,METHOD,main\cpp\locationinfofilter.cpp:<global>,TYPE_DECL,"void LocationInfoFilter::setOption(  const LogString& option,
	const LogString& value)
{
	LogLog::warn(option + LOG4CXX_STR("":"") + value);
	if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""ACCEPTONMATCH""), LOG4CXX_STR(""acceptonmatch"")))
	{
		priv->acceptOnMatch = OptionConverter::toBoolean(value, priv->acceptOnMatch);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""OPERATOR""), LOG4CXX_STR(""operator"")))
	{
		priv->mustMatchAll = StringHelper::equalsIgnoreCase(value, LOG4CXX_STR(""AND""), LOG4CXX_STR(""and"")) ? true : false;
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""LINENUMBER""), LOG4CXX_STR(""linenumber"")))
	{
		priv->lineNumber = OptionConverter::toInt(value, -1);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""METHOD""), LOG4CXX_STR(""method"")))
	{
		LOG4CXX_ENCODE_CHAR(sName, value);
		priv->methodName = sName;
	}
}",1,2,main\cpp\locationinfofilter.cpp,LocationInfoFilter.setOption,,false,57,78,setOption,,,6,"void LocationInfoFilter.setOption (LogString,LogString)"
30447,METHOD,main\cpp\locationinfofilter.cpp:<global>,TYPE_DECL,"Filter::FilterDecision LocationInfoFilter::decide(
	const LOG4CXX_NS::spi::LoggingEventPtr& event) const
{
	if (priv->lineNumber == -1 &&
			priv->methodName.empty())
	{
		return Filter::NEUTRAL;
	}

	if (event->getLocationInformation().getLineNumber() == -1 ||
			event->getLocationInformation().getMethodName().compare(LocationInfo::NA_METHOD) == 0){
		return Filter::NEUTRAL;
	}

	bool matched = false;
	bool matchLineNumber = priv->lineNumber == event->getLocationInformation().getLineNumber();
	bool matchMethodName = priv->methodName.compare(event->getLocationInformation().getMethodName()) == 0;

	if(priv->mustMatchAll){
		matched = matchLineNumber && matchMethodName;
	}else{
		matched = matchLineNumber || matchMethodName;
	}

	if (priv->acceptOnMatch)
	{
		return matched ? Filter::ACCEPT : Filter::NEUTRAL;
	}
	else
	{
		return matched ? Filter::DENY : Filter::NEUTRAL;
	}
}",1,5,main\cpp\locationinfofilter.cpp,LocationInfoFilter.decide,,false,80,112,decide,,,7,FilterDecision LocationInfoFilter.decide (ANY)
30623,METHOD,main\cpp\locationinfofilter.cpp:<global>,TYPE_DECL,"void LocationInfoFilter::setAcceptOnMatch(bool acceptOnMatch1)
{
	priv->acceptOnMatch = acceptOnMatch1;
}",1,1,main\cpp\locationinfofilter.cpp,LocationInfoFilter.setAcceptOnMatch,,false,114,117,setAcceptOnMatch,,,8,void LocationInfoFilter.setAcceptOnMatch (bool)
30640,METHOD,main\cpp\locationinfofilter.cpp:<global>,TYPE_DECL,"bool LocationInfoFilter::getAcceptOnMatch() const
{
	return priv->acceptOnMatch;
}",1,8,main\cpp\locationinfofilter.cpp,LocationInfoFilter.getAcceptOnMatch,,false,119,122,getAcceptOnMatch,,,9,bool LocationInfoFilter.getAcceptOnMatch ()
30655,METHOD,main\cpp\locationinfofilter.cpp:<global>,TYPE_DECL,"bool LocationInfoFilter::getMustMatchAll() const
{
	return priv->mustMatchAll;
}",1,8,main\cpp\locationinfofilter.cpp,LocationInfoFilter.getMustMatchAll,,false,124,127,getMustMatchAll,,,10,bool LocationInfoFilter.getMustMatchAll ()
30670,METHOD,main\cpp\locationinfofilter.cpp:<global>,TYPE_DECL,"void LocationInfoFilter::setMustMatchAll(bool mustMatchAll1)
{
	priv->mustMatchAll = mustMatchAll1;
}",1,1,main\cpp\locationinfofilter.cpp,LocationInfoFilter.setMustMatchAll,,false,129,132,setMustMatchAll,,,11,void LocationInfoFilter.setMustMatchAll (bool)
30687,METHOD,main\cpp\locationinfofilter.cpp:<global>,TYPE_DECL,"void LocationInfoFilter::setLineNumber(int lineNum){
	priv->lineNumber = lineNum;
}",1,1,main\cpp\locationinfofilter.cpp,LocationInfoFilter.setLineNumber,,false,134,136,setLineNumber,,,12,void LocationInfoFilter.setLineNumber (int)
30704,METHOD,main\cpp\locationinfofilter.cpp:<global>,TYPE_DECL,"void LocationInfoFilter::setMethodName(const LogString& methodName){
	LOG4CXX_ENCODE_CHAR(sName, methodName);
	priv->methodName = sName;
}",1,1,main\cpp\locationinfofilter.cpp,LocationInfoFilter.setMethodName,,false,138,141,setMethodName,,,13,void LocationInfoFilter.setMethodName (LogString)
30757,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\logger.cpp,main\cpp\logger.cpp:<global>,,false,1,1216,<global>,,,1,
30760,METHOD,LoggerPrivate,TYPE_DECL,"LoggerPrivate(Pool& p, const LogString& name1):
		name(name1),
		repositoryRaw(0),
		aai(p),
		additive(true) {}",2,19,main\cpp\logger.cpp,LoggerPrivate.LoggerPrivate,,false,43,47,LoggerPrivate,,,1,"ANY LoggerPrivate.LoggerPrivate (Pool,LogString)"
30775,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"Logger::Logger(Pool& p, const LogString& name1)
	: m_priv(std::make_unique<LoggerPrivate>(p, name1))
	, m_threshold(0)
{
}",1,1,main\cpp\logger.cpp,Logger.Logger,,false,89,93,Logger,,,4,"ANY Logger.Logger (Pool,LogString)"
30781,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"Logger::~Logger()
{
}",1,1,main\cpp\logger.cpp,Logger.~Logger,,false,95,97,~Logger,,,5,ANY Logger.~Logger ()
30785,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"void Logger::addAppender(const AppenderPtr newAppender)
{
	m_priv->aai.addAppender(newAppender);
	if (auto rep = getHierarchy())
	{
		rep->fireAddAppenderEvent(this, newAppender.get());
	}
}",1,1,main\cpp\logger.cpp,Logger.addAppender,,false,99,106,addAppender,,,6,void Logger.addAppender (AppenderPtr)
30813,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"void Logger::reconfigure( const std::vector<AppenderPtr>& appenders, bool additive1 )
{
	m_priv->additive = additive1;

	m_priv->aai.removeAllAppenders();

	for ( std::vector<AppenderPtr>::const_iterator it = appenders.cbegin();
		it != appenders.cend();
		it++ )
	{
		m_priv->aai.addAppender( *it );

		if (auto rep = getHierarchy())
		{
			rep->fireAddAppenderEvent(this, it->get());
		}
	}
}",1,1,main\cpp\logger.cpp,Logger.reconfigure,,false,108,125,reconfigure,,,7,"void Logger.reconfigure (ANY,bool)"
30872,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"void Logger::callAppenders(const spi::LoggingEventPtr& event, Pool& p) const
{
	int writes = 0;

	for (const Logger* logger = this;
		logger != 0;
		logger = logger->m_priv->parent.get())
	{
		writes += logger->m_priv->aai.appendLoopOnAppenders(event, p);

		if (!logger->m_priv->additive)
		{
			break;
		}
	}

	auto rep = getHierarchy();

	if (writes == 0 && rep)
	{
		rep->emitNoAppenderWarning(const_cast<Logger*>(this));
	}
}",1,1,main\cpp\logger.cpp,Logger.callAppenders,,false,127,149,callAppenders,,,8,"void Logger.callAppenders (ANY,Pool)"
30941,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"void Logger::closeNestedAppenders()
{
	AppenderList appenders = getAllAppenders();

	for (AppenderList::iterator it = appenders.begin(); it != appenders.end(); ++it)
	{
		(*it)->close();
	}
}",1,1,main\cpp\logger.cpp,Logger.closeNestedAppenders,,false,151,159,closeNestedAppenders,,,9,void Logger.closeNestedAppenders ()
30972,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"void Logger::addEvent(const LevelPtr& level, std::string&& message, const LocationInfo& location) const
{
	if (!getHierarchy()) // Has removeHierarchy() been called?
		return;
#if LOG4CXX_LOGCHAR_IS_UTF8
	auto event = std::make_shared<LoggingEvent>(m_priv->name, level, location, std::move(message));
#else
	LOG4CXX_DECODE_CHAR(msg, message);
	auto event = std::make_shared<LoggingEvent>(m_priv->name, level, location, std::move(msg));
#endif
	Pool p;
	callAppenders(event, p);
}",1,1,main\cpp\logger.cpp,Logger.addEvent,,false,161,173,addEvent,,,10,"void Logger.addEvent (LevelPtr,ANY,LocationInfo)"
31012,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"void Logger::forcedLog(const LevelPtr& level, const std::string& message,
	const LocationInfo& location) const
{
	if (!getHierarchy()) // Has removeHierarchy() been called?
		return;
#if LOG4CXX_LOGCHAR_IS_UTF8
	auto event = std::make_shared<LoggingEvent>(m_priv->name, level, message, location);
#else
	LOG4CXX_DECODE_CHAR(msg, message);
	auto event = std::make_shared<LoggingEvent>(m_priv->name, level, location, std::move(msg));
#endif
	Pool p;
	callAppenders(event, p);
}",1,1,main\cpp\logger.cpp,Logger.forcedLog,,false,175,188,forcedLog,,,11,"void Logger.forcedLog (LevelPtr,ANY,LocationInfo)"
31052,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"void Logger::forcedLog(const LevelPtr& level1, const std::string& message) const
{
	forcedLog(level1, message, LocationInfo::getLocationUnavailable());
}",1,1,main\cpp\logger.cpp,Logger.forcedLog,,false,190,193,forcedLog,,,12,"void Logger.forcedLog (LevelPtr,ANY)"
31065,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"void Logger::addEventLS(const LevelPtr& level, LogString&& message, const LocationInfo& location) const
{
	if (!getHierarchy()) // Has removeHierarchy() been called?
		return;
	Pool p;
	auto event = std::make_shared<LoggingEvent>(m_priv->name, level, location, std::move(message));
	callAppenders(event, p);
}",1,1,main\cpp\logger.cpp,Logger.addEventLS,,false,195,202,addEventLS,,,13,"void Logger.addEventLS (LevelPtr,LogString,LocationInfo)"
31102,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"void Logger::forcedLogLS(const LevelPtr& level1, const LogString& message,
	const LocationInfo& location) const
{
	if (!getHierarchy()) // Has removeHierarchy() been called?
		return;
	Pool p;
	auto event = std::make_shared<LoggingEvent>(m_priv->name, level1, message, location);
	callAppenders(event, p);
}",1,1,main\cpp\logger.cpp,Logger.forcedLogLS,,false,204,212,forcedLogLS,,,14,"void Logger.forcedLogLS (LevelPtr,LogString,LocationInfo)"
31135,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"bool Logger::getAdditivity() const
{
	return m_priv->additive;
}",1,1,main\cpp\logger.cpp,Logger.getAdditivity,,false,215,218,getAdditivity,,,15,bool Logger.getAdditivity ()
31143,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"AppenderList Logger::getAllAppenders() const
{
	return m_priv->aai.getAllAppenders();
}",1,1,main\cpp\logger.cpp,Logger.getAllAppenders,,false,220,223,getAllAppenders,,,16,AppenderList Logger.getAllAppenders ()
31154,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"AppenderPtr Logger::getAppender(const LogString& name1) const
{
	return m_priv->aai.getAppender(name1);
}",1,1,main\cpp\logger.cpp,Logger.getAppender,,false,225,228,getAppender,,,17,AppenderPtr Logger.getAppender (LogString)
31167,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"const LevelPtr& Logger::getEffectiveLevel() const
{
	for (const Logger* l = this; l != 0; l = l->m_priv->parent.get())
	{
		if (l->m_priv->level != 0)
		{
			return l->m_priv->level;
		}
	}

	throw NullPointerException(LOG4CXX_STR(""No level specified for logger or ancestors.""));
#if LOG4CXX_RETURN_AFTER_THROW
	return m_priv->level;
#endif
}",1,1,main\cpp\logger.cpp,Logger.getEffectiveLevel,,false,230,244,getEffectiveLevel,,,18,LevelPtr Logger.getEffectiveLevel ()
31210,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"LoggerRepository* Logger::getLoggerRepository() const
{
	return m_priv->repositoryRaw;
}",1,1,main\cpp\logger.cpp,Logger.getLoggerRepository,,false,246,249,getLoggerRepository,,,19,LoggerRepository Logger.getLoggerRepository ()
31218,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"LoggerRepository* Logger::getHierarchy() const
{
	return m_priv->repositoryRaw;
}",1,1,main\cpp\logger.cpp,Logger.getHierarchy,,false,251,254,getHierarchy,,,20,LoggerRepository Logger.getHierarchy ()
31226,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"ResourceBundlePtr Logger::getResourceBundle() const
{
	for (const Logger* l = this; l != 0; l = l->m_priv->parent.get())
	{
		if (l->m_priv->resourceBundle != 0)
		{
			return l->m_priv->resourceBundle;
		}
	}

	// It might be the case that there is no resource bundle
	return 0;
}",1,1,main\cpp\logger.cpp,Logger.getResourceBundle,,false,256,268,getResourceBundle,,,21,ResourceBundlePtr Logger.getResourceBundle ()
31267,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"LogString Logger::getResourceBundleString(const LogString& key) const
{
	ResourceBundlePtr rb = getResourceBundle();

	// This is one of the rare cases where we can use logging in order
	// to report errors from within log4j.
	if (rb == 0)
	{
		return LogString();
	}
	else
	{
		try
		{
			return rb->getString(key);
		}
		catch (MissingResourceException&)
		{
			logLS(Level::getError(), LOG4CXX_STR(""No resource is associated with key \"""") +
				key + LOG4CXX_STR(""\"".""), LocationInfo::getLocationUnavailable());

			return LogString();
		}
	}
}",1,1,main\cpp\logger.cpp,Logger.getResourceBundleString,,false,271,295,getResourceBundleString,,,22,LogString Logger.getResourceBundleString (LogString)
31312,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"LoggerPtr Logger::getParent() const
{
	return m_priv->parent;
}",1,1,main\cpp\logger.cpp,Logger.getParent,,false,298,301,getParent,,,23,LoggerPtr Logger.getParent ()
31320,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"const LevelPtr& Logger::getLevel() const
{
	return m_priv->level;
}",1,1,main\cpp\logger.cpp,Logger.getLevel,,false,303,306,getLevel,,,24,LevelPtr Logger.getLevel ()
31328,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"bool Logger::isAttached(const AppenderPtr appender) const
{
	return m_priv->aai.isAttached(appender);
}",1,1,main\cpp\logger.cpp,Logger.isAttached,,false,308,311,isAttached,,,25,bool Logger.isAttached (AppenderPtr)
31341,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"bool Logger::isTraceEnabled() const
{
	auto rep = getHierarchy();

	if (!rep || rep->isDisabled(Level::TRACE_INT))
	{
		return false;
	}

	return getEffectiveLevel()->toInt() <= Level::TRACE_INT;
}",1,1,main\cpp\logger.cpp,Logger.isTraceEnabled,,false,313,323,isTraceEnabled,,,26,bool Logger.isTraceEnabled ()
31372,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"bool Logger::isDebugEnabled() const
{
	auto rep = getHierarchy();

	if (!rep || rep->isDisabled(Level::DEBUG_INT))
	{
		return false;
	}

	return getEffectiveLevel()->toInt() <= Level::DEBUG_INT;
}",1,1,main\cpp\logger.cpp,Logger.isDebugEnabled,,false,325,335,isDebugEnabled,,,27,bool Logger.isDebugEnabled ()
31403,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"bool Logger::isEnabledFor(const LevelPtr& level1) const
{
	auto rep = getHierarchy();

	if (!rep || rep->isDisabled(level1->toInt()))
	{
		return false;
	}

	return level1->isGreaterOrEqual(getEffectiveLevel());
}",1,1,main\cpp\logger.cpp,Logger.isEnabledFor,,false,337,347,isEnabledFor,,,28,bool Logger.isEnabledFor (LevelPtr)
31433,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"bool Logger::isInfoEnabled() const
{
	auto rep = getHierarchy();

	if (!rep || rep->isDisabled(Level::INFO_INT))
	{
		return false;
	}

	return getEffectiveLevel()->toInt() <= Level::INFO_INT;
}",1,1,main\cpp\logger.cpp,Logger.isInfoEnabled,,false,350,360,isInfoEnabled,,,29,bool Logger.isInfoEnabled ()
31464,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"bool Logger::isErrorEnabled() const
{
	auto rep = getHierarchy();

	if (!rep || rep->isDisabled(Level::ERROR_INT))
	{
		return false;
	}

	return getEffectiveLevel()->toInt() <= Level::ERROR_INT;
}",1,1,main\cpp\logger.cpp,Logger.isErrorEnabled,,false,362,372,isErrorEnabled,,,30,bool Logger.isErrorEnabled ()
31495,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"bool Logger::isWarnEnabled() const
{
	auto rep = getHierarchy();

	if (!rep || rep->isDisabled(Level::WARN_INT))
	{
		return false;
	}

	return getEffectiveLevel()->toInt() <= Level::WARN_INT;
}",1,1,main\cpp\logger.cpp,Logger.isWarnEnabled,,false,374,384,isWarnEnabled,,,31,bool Logger.isWarnEnabled ()
31526,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"bool Logger::isFatalEnabled() const
{
	auto rep = getHierarchy();

	if (!rep || rep->isDisabled(Level::FATAL_INT))
	{
		return false;
	}

	return getEffectiveLevel()->toInt() <= Level::FATAL_INT;
}",1,1,main\cpp\logger.cpp,Logger.isFatalEnabled,,false,386,396,isFatalEnabled,,,32,bool Logger.isFatalEnabled ()
31557,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"void Logger::l7dlog(const LevelPtr& level1, const LogString& key,
	const LocationInfo& location, const std::vector<LogString>& params) const
{
	auto rep = getHierarchy();

	if (!rep || rep->isDisabled(level1->toInt()))
	{
		return;
	}

	if (level1->isGreaterOrEqual(getEffectiveLevel()))
	{
		LogString pattern = getResourceBundleString(key);
		LogString msg;

		if (pattern.empty())
		{
			msg = key;
		}
		else
		{
			msg = StringHelper::format(pattern, params);
		}

		addEventLS(level1, std::move(msg), location);
	}
}",1,1,main\cpp\logger.cpp,Logger.l7dlog,,false,425,451,l7dlog,,,33,"void Logger.l7dlog (LevelPtr,LogString,LocationInfo,ANY)"
31623,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"void Logger::l7dlog(const LevelPtr& level1, const std::string& key,
	const LocationInfo& location) const
{
	LOG4CXX_DECODE_CHAR(lkey, key);

	std::vector<LogString> values(0);
	l7dlog(level1, lkey, location, values);
}",1,1,main\cpp\logger.cpp,Logger.l7dlog,,false,453,460,l7dlog,,,34,"void Logger.l7dlog (LevelPtr,ANY,LocationInfo)"
31646,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"void Logger::l7dlog(const LevelPtr& level1, const std::string& key,
	const LocationInfo& location, const std::string& val1) const
{
	LOG4CXX_DECODE_CHAR(lkey, key);
	LOG4CXX_DECODE_CHAR(lval1, val1);

	std::vector<LogString> values(1);
	values[0] = lval1;
	l7dlog(level1, lkey, location, values);
}",1,1,main\cpp\logger.cpp,Logger.l7dlog,,false,462,471,l7dlog,,,35,"void Logger.l7dlog (LevelPtr,ANY,LocationInfo,ANY)"
31678,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"void Logger::l7dlog(const LevelPtr& level1, const std::string& key,
	const LocationInfo& location,
	const std::string& val1, const std::string& val2) const
{
	LOG4CXX_DECODE_CHAR(lkey, key);
	LOG4CXX_DECODE_CHAR(lval1, val1);
	LOG4CXX_DECODE_CHAR(lval2, val2);

	std::vector<LogString> values(2);
	values[0] = lval1;
	values[1] = lval2;
	l7dlog(level1, lkey, location, values);
}",1,1,main\cpp\logger.cpp,Logger.l7dlog,,false,473,485,l7dlog,,,36,"void Logger.l7dlog (LevelPtr,ANY,LocationInfo,ANY,ANY)"
31719,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"void Logger::l7dlog(const LevelPtr& level1, const std::string& key,
	const LocationInfo& location,
	const std::string& val1, const std::string& val2, const std::string& val3) const
{
	LOG4CXX_DECODE_CHAR(lkey, key);
	LOG4CXX_DECODE_CHAR(lval1, val1);
	LOG4CXX_DECODE_CHAR(lval2, val2);
	LOG4CXX_DECODE_CHAR(lval3, val3);

	std::vector<LogString> values(3);
	values[0] = lval1;
	values[1] = lval2;
	values[2] = lval3;
	l7dlog(level1, lkey, location, values);
}",1,1,main\cpp\logger.cpp,Logger.l7dlog,,false,487,501,l7dlog,,,37,"void Logger.l7dlog (LevelPtr,ANY,LocationInfo,ANY,ANY,ANY)"
31769,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"void Logger::removeAllAppenders()
{
	AppenderList currentAppenders = m_priv->aai.getAllAppenders();
	m_priv->aai.removeAllAppenders();

	auto rep = getHierarchy();
	if(rep){
		for(AppenderPtr appender : currentAppenders){
			rep->fireRemoveAppenderEvent(this, appender.get());
		}
	}
}",1,1,main\cpp\logger.cpp,Logger.removeAllAppenders,,false,503,514,removeAllAppenders,,,38,void Logger.removeAllAppenders ()
31808,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"void Logger::removeAppender(const AppenderPtr appender)
{
	m_priv->aai.removeAppender(appender);
	if (auto rep = getHierarchy())
	{
		rep->fireRemoveAppenderEvent(this, appender.get());
	}
}",1,1,main\cpp\logger.cpp,Logger.removeAppender,,false,516,523,removeAppender,,,39,void Logger.removeAppender (AppenderPtr)
31836,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"void Logger::removeAppender(const LogString& name1)
{
	AppenderPtr appender = m_priv->aai.getAppender(name1);
	if(appender){
		removeAppender(appender);
	}
}",1,1,main\cpp\logger.cpp,Logger.removeAppender,,false,525,531,removeAppender,,,40,void Logger.removeAppender (LogString)
31856,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"void Logger::removeHierarchy()
{
	m_priv->repositoryRaw = 0;
}",1,1,main\cpp\logger.cpp,Logger.removeHierarchy,,false,533,536,removeHierarchy,,,41,void Logger.removeHierarchy ()
31865,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"void Logger::setAdditivity(bool additive1)
{
	m_priv->additive = additive1;
}",1,1,main\cpp\logger.cpp,Logger.setAdditivity,,false,538,541,setAdditivity,,,42,void Logger.setAdditivity (bool)
31875,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"void Logger::setHierarchy(spi::LoggerRepository* repository1)
{
	m_priv->repositoryRaw = repository1;
}",1,1,main\cpp\logger.cpp,Logger.setHierarchy,,false,543,546,setHierarchy,,,43,void Logger.setHierarchy (ANY*)
31885,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"void Logger::setParent(LoggerPtr parentLogger)
{
	m_priv->parent = parentLogger;
	updateThreshold();
}",1,1,main\cpp\logger.cpp,Logger.setParent,,false,548,552,setParent,,,44,void Logger.setParent (LoggerPtr)
31896,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"void Logger::setLevel(const LevelPtr level1)
{
	if (m_priv->level != level1)
	{
		m_priv->level = level1;
		updateThreshold();
		if (auto rep = dynamic_cast<Hierarchy*>(getHierarchy()))
			rep->updateChildren(this);
	}
}",1,1,main\cpp\logger.cpp,Logger.setLevel,,false,554,563,setLevel,,,45,void Logger.setLevel (LevelPtr)
31928,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"void Logger::updateThreshold()
{
	m_threshold = getEffectiveLevel()->toInt();
}",1,1,main\cpp\logger.cpp,Logger.updateThreshold,,false,565,568,updateThreshold,,,46,void Logger.updateThreshold ()
31938,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"const LogString& Logger::getName() const
{
	return m_priv->name;
}",1,1,main\cpp\logger.cpp,Logger.getName,,false,570,573,getName,,,47,LogString Logger.getName ()
31946,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"LoggerPtr Logger::getLogger(const std::string& name)
{
	return LogManager::getLogger(name);
}",1,1,main\cpp\logger.cpp,Logger.getLogger,,false,575,578,getLogger,,,48,LoggerPtr Logger.getLogger (ANY)
31957,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"LoggerPtr Logger::getLogger(const char* const name)
{
	return LogManager::getLogger(name);
}",1,1,main\cpp\logger.cpp,Logger.getLogger,,false,581,584,getLogger,,,49,LoggerPtr Logger.getLogger (char*)
31968,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"void Logger::setResourceBundle(const helpers::ResourceBundlePtr& bundle)
{
	m_priv->resourceBundle = bundle;
}",1,1,main\cpp\logger.cpp,Logger.setResourceBundle,,false,586,589,setResourceBundle,,,50,void Logger.setResourceBundle (ANY)
31978,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"LoggerPtr Logger::getRootLogger()
{
	return LogManager::getRootLogger();
}",1,1,main\cpp\logger.cpp,Logger.getRootLogger,,false,591,594,getRootLogger,,,51,LoggerPtr Logger.getRootLogger ()
31987,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"LoggerPtr Logger::getLoggerLS(const LogString& name,
	const spi::LoggerFactoryPtr& factory)
{
	return LogManager::getLoggerLS(name, factory);
}",1,1,main\cpp\logger.cpp,Logger.getLoggerLS,,false,596,600,getLoggerLS,,,52,"LoggerPtr Logger.getLoggerLS (LogString,ANY)"
32000,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"void Logger::getName(std::string& rv) const
{
	Transcoder::encode(m_priv->name, rv);
}",1,1,main\cpp\logger.cpp,Logger.getName,,false,602,605,getName,,,53,void Logger.getName (ANY)
32013,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"void Logger::trace(const std::string& msg, const LOG4CXX_NS::spi::LocationInfo& location) const
{
	if (isTraceEnabled())
	{
		forcedLog(LOG4CXX_NS::Level::getTrace(), msg, location);
	}
}",1,1,main\cpp\logger.cpp,Logger.trace,,false,608,614,trace,,,54,"void Logger.trace (ANY,ANY)"
32031,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"void Logger::trace(const std::string& msg) const
{
	if (isTraceEnabled())
	{
		forcedLog(LOG4CXX_NS::Level::getTrace(), msg);
	}
}",1,1,main\cpp\logger.cpp,Logger.trace,,false,617,623,trace,,,55,void Logger.trace (ANY)
32047,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"void Logger::debug(const std::string& msg, const LOG4CXX_NS::spi::LocationInfo& location) const
{
	if (isDebugEnabled())
	{
		forcedLog(LOG4CXX_NS::Level::getDebug(), msg, location);
	}
}",1,1,main\cpp\logger.cpp,Logger.debug,,false,625,631,debug,,,56,"void Logger.debug (ANY,ANY)"
32065,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"void Logger::debug(const std::string& msg) const
{
	if (isDebugEnabled())
	{
		forcedLog(LOG4CXX_NS::Level::getDebug(), msg);
	}
}",1,1,main\cpp\logger.cpp,Logger.debug,,false,633,639,debug,,,57,void Logger.debug (ANY)
32081,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"void Logger::error(const std::string& msg, const LOG4CXX_NS::spi::LocationInfo& location) const
{
	if (isErrorEnabled())
	{
		forcedLog(LOG4CXX_NS::Level::getError(), msg, location);
	}
}",1,1,main\cpp\logger.cpp,Logger.error,,false,642,648,error,,,58,"void Logger.error (ANY,ANY)"
32099,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"void Logger::error(const std::string& msg) const
{
	if (isErrorEnabled())
	{
		forcedLog(LOG4CXX_NS::Level::getError(), msg);
	}
}",1,1,main\cpp\logger.cpp,Logger.error,,false,651,657,error,,,59,void Logger.error (ANY)
32115,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"void Logger::fatal(const std::string& msg, const LOG4CXX_NS::spi::LocationInfo& location) const
{
	if (isFatalEnabled())
	{
		forcedLog(LOG4CXX_NS::Level::getFatal(), msg, location);
	}
}",1,1,main\cpp\logger.cpp,Logger.fatal,,false,659,665,fatal,,,60,"void Logger.fatal (ANY,ANY)"
32133,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"void Logger::fatal(const std::string& msg) const
{
	if (isFatalEnabled())
	{
		forcedLog(LOG4CXX_NS::Level::getFatal(), msg);
	}
}",1,1,main\cpp\logger.cpp,Logger.fatal,,false,667,673,fatal,,,61,void Logger.fatal (ANY)
32149,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"void Logger::info(const std::string& msg, const LOG4CXX_NS::spi::LocationInfo& location) const
{
	if (isInfoEnabled())
	{
		forcedLog(LOG4CXX_NS::Level::getInfo(), msg, location);
	}
}",1,1,main\cpp\logger.cpp,Logger.info,,false,675,681,info,,,62,"void Logger.info (ANY,ANY)"
32167,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"void Logger::info(const std::string& msg) const
{
	if (isInfoEnabled())
	{
		forcedLog(LOG4CXX_NS::Level::getInfo(), msg);
	}
}",1,1,main\cpp\logger.cpp,Logger.info,,false,683,689,info,,,63,void Logger.info (ANY)
32183,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"void Logger::log(const LevelPtr& level1, const std::string& message,
	const LOG4CXX_NS::spi::LocationInfo& location) const
{
	if (isEnabledFor(level1))
	{
		forcedLog(level1, message, location);
	}
}",1,1,main\cpp\logger.cpp,Logger.log,,false,691,698,log,,,64,"void Logger.log (LevelPtr,ANY,ANY)"
32198,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"void Logger::log(const LevelPtr& level1, const std::string& message) const
{
	if (isEnabledFor(level1))
	{
		forcedLog(level1, message);
	}
}",1,1,main\cpp\logger.cpp,Logger.log,,false,700,706,log,,,65,"void Logger.log (LevelPtr,ANY)"
32211,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"void Logger::logLS(const LevelPtr& level1, const LogString& message,
	const LOG4CXX_NS::spi::LocationInfo& location) const
{
	if (isEnabledFor(level1))
	{
		forcedLogLS(level1, message, location);
	}
}",1,1,main\cpp\logger.cpp,Logger.logLS,,false,708,715,logLS,,,66,"void Logger.logLS (LevelPtr,LogString,ANY)"
32226,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"void Logger::warn(const std::string& msg, const LOG4CXX_NS::spi::LocationInfo& location) const
{
	if (isWarnEnabled())
	{
		forcedLog(LOG4CXX_NS::Level::getWarn(), msg, location);
	}
}",1,1,main\cpp\logger.cpp,Logger.warn,,false,717,723,warn,,,67,"void Logger.warn (ANY,ANY)"
32244,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"void Logger::warn(const std::string& msg) const
{
	if (isWarnEnabled())
	{
		forcedLog(LOG4CXX_NS::Level::getWarn(), msg);
	}
}",1,1,main\cpp\logger.cpp,Logger.warn,,false,725,731,warn,,,68,void Logger.warn (ANY)
32260,METHOD,main\cpp\logger.cpp:<global>,TYPE_DECL,"LoggerPtr Logger::getLoggerLS(const LogString& name)
{
	return LogManager::getLoggerLS(name);
}",1,1,main\cpp\logger.cpp,Logger.getLoggerLS,,false,733,736,getLoggerLS,,,69,LoggerPtr Logger.getLoggerLS (LogString)
32286,METHOD,main\cpp\loggermatchfilter.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\loggermatchfilter.cpp,main\cpp\loggermatchfilter.cpp:<global>,,false,1,108,<global>,,,1,
32289,METHOD,LoggerMatchFilterPrivate,TYPE_DECL,"LoggerMatchFilterPrivate() : FilterPrivate(),
		acceptOnMatch(true),
		loggerToMatch(LOG4CXX_STR(""root"")) {}",2,39,main\cpp\loggermatchfilter.cpp,LoggerMatchFilterPrivate.LoggerMatchFilterPrivate,,false,34,36,LoggerMatchFilterPrivate,,,1,ANY LoggerMatchFilterPrivate.LoggerMatchFilterPrivate ()
32297,METHOD,main\cpp\loggermatchfilter.cpp:<global>,TYPE_DECL,"LoggerMatchFilter::LoggerMatchFilter()
	: Filter(std::make_unique<LoggerMatchFilterPrivate>())
{
}",1,1,main\cpp\loggermatchfilter.cpp,LoggerMatchFilter.LoggerMatchFilter,,false,45,48,LoggerMatchFilter,,,4,ANY LoggerMatchFilter.LoggerMatchFilter ()
32301,METHOD,main\cpp\loggermatchfilter.cpp:<global>,TYPE_DECL,LoggerMatchFilter::~LoggerMatchFilter() {},1,42,main\cpp\loggermatchfilter.cpp,LoggerMatchFilter.~LoggerMatchFilter,,false,50,50,~LoggerMatchFilter,,,5,ANY LoggerMatchFilter.~LoggerMatchFilter ()
32305,METHOD,main\cpp\loggermatchfilter.cpp:<global>,TYPE_DECL,"void LoggerMatchFilter::setLoggerToMatch(const LogString& value)
{
	priv->loggerToMatch = value;
}",1,1,main\cpp\loggermatchfilter.cpp,LoggerMatchFilter.setLoggerToMatch,,false,52,55,setLoggerToMatch,,,6,void LoggerMatchFilter.setLoggerToMatch (LogString)
32322,METHOD,main\cpp\loggermatchfilter.cpp:<global>,TYPE_DECL,"LogString LoggerMatchFilter::getLoggerToMatch() const
{
	return priv->loggerToMatch;
}",1,8,main\cpp\loggermatchfilter.cpp,LoggerMatchFilter.getLoggerToMatch,,false,57,60,getLoggerToMatch,,,7,LogString LoggerMatchFilter.getLoggerToMatch ()
32337,METHOD,main\cpp\loggermatchfilter.cpp:<global>,TYPE_DECL,"void LoggerMatchFilter::setOption(const LogString& option,
	const LogString& value)
{

	if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""LOGGERTOMATCH""), LOG4CXX_STR(""loggertomatch"")))
	{
		setLoggerToMatch(value);
	}
	else if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""ACCEPTONMATCH""), LOG4CXX_STR(""acceptonmatch"")))
	{
		priv->acceptOnMatch = OptionConverter::toBoolean(value, priv->acceptOnMatch);
	}
}",1,2,main\cpp\loggermatchfilter.cpp,LoggerMatchFilter.setOption,,false,62,76,setOption,,,8,"void LoggerMatchFilter.setOption (LogString,LogString)"
32395,METHOD,main\cpp\loggermatchfilter.cpp:<global>,TYPE_DECL,"Filter::FilterDecision LoggerMatchFilter::decide(
	const spi::LoggingEventPtr& event) const
{
	bool matchOccured = priv->loggerToMatch == event->getLoggerName();

	if (matchOccured)
	{
		if (priv->acceptOnMatch)
		{
			return Filter::ACCEPT;
		}
		else
		{
			return Filter::DENY;
		}
	}
	else
	{
		return Filter::NEUTRAL;
	}
}",1,21,main\cpp\loggermatchfilter.cpp,LoggerMatchFilter.decide,,false,78,98,decide,,,9,FilterDecision LoggerMatchFilter.decide (ANY)
32449,METHOD,main\cpp\loggermatchfilter.cpp:<global>,TYPE_DECL,"void LoggerMatchFilter::setAcceptOnMatch(bool acceptOnMatch1)
{
	priv->acceptOnMatch = acceptOnMatch1;
}",1,1,main\cpp\loggermatchfilter.cpp,LoggerMatchFilter.setAcceptOnMatch,,false,100,103,setAcceptOnMatch,,,10,void LoggerMatchFilter.setAcceptOnMatch (bool)
32466,METHOD,main\cpp\loggermatchfilter.cpp:<global>,TYPE_DECL,"bool LoggerMatchFilter::getAcceptOnMatch() const
{
	return priv->acceptOnMatch;
}",1,8,main\cpp\loggermatchfilter.cpp,LoggerMatchFilter.getAcceptOnMatch,,false,105,108,getAcceptOnMatch,,,11,bool LoggerMatchFilter.getAcceptOnMatch ()
32492,METHOD,main\cpp\loggerpatternconverter.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\loggerpatternconverter.cpp,main\cpp\loggerpatternconverter.cpp:<global>,,false,1,57,<global>,,,1,
32496,METHOD,main\cpp\loggerpatternconverter.cpp:<global>,TYPE_DECL,"LoggerPatternConverter::LoggerPatternConverter(
	const std::vector<LogString>& options) :
	NamePatternConverter(LOG4CXX_STR(""Logger""),
		LOG4CXX_STR(""logger""), options)
{
}",1,1,main\cpp\loggerpatternconverter.cpp,LoggerPatternConverter.LoggerPatternConverter,,false,30,35,LoggerPatternConverter,,,3,ANY LoggerPatternConverter.LoggerPatternConverter (ANY)
32501,METHOD,main\cpp\loggerpatternconverter.cpp:<global>,TYPE_DECL,"PatternConverterPtr LoggerPatternConverter::newInstance(
	const std::vector<LogString>& options)
{
	if (options.size() == 0)
	{
		static WideLife<PatternConverterPtr> def = std::make_shared<LoggerPatternConverter>(options);
		return def;
	}

	return std::make_shared<LoggerPatternConverter>(options);
}",1,1,main\cpp\loggerpatternconverter.cpp,LoggerPatternConverter.newInstance,,false,37,47,newInstance,,,4,PatternConverterPtr LoggerPatternConverter.newInstance (ANY)
32534,METHOD,main\cpp\loggerpatternconverter.cpp:<global>,TYPE_DECL,"void LoggerPatternConverter::format(
	const LoggingEventPtr& event,
	LogString& toAppendTo,
	Pool& /* p */ ) const
{
	int initialLength = (int)toAppendTo.length();
	toAppendTo.append(event->getLoggerName());
	abbreviate(initialLength, toAppendTo);
}",1,1,main\cpp\loggerpatternconverter.cpp,LoggerPatternConverter.format,,false,49,57,format,,,5,"void LoggerPatternConverter.format (LoggingEventPtr,LogString,Pool)"
32562,METHOD,main\cpp\loggingevent.cpp:<global>,TYPE_DECL,[threadId](const ListItem& item) { return threadId == item.first; },5,71,main\cpp\loggingevent.cpp,LoggingEvent.getCurrentThreadName.<lambda>0,,false,361,361,<lambda>0,,,1,ANY LoggingEvent.getCurrentThreadName.<lambda>0 (ListItem)
32611,METHOD,main\cpp\loggingevent.cpp:<global>,TYPE_DECL,<global>,1,2,main\cpp\loggingevent.cpp,main\cpp\loggingevent.cpp:<global>,,false,1,486,<global>,,,1,
32614,METHOD,LoggingEventPrivate,TYPE_DECL,"LoggingEventPrivate() :
		ndc(0),
		mdcCopy(0),
		properties(0),
		ndcLookupRequired(true),
		mdcCopyLookupRequired(true),
		timeStamp(0),
		locationInfo(),
		threadName(getCurrentThreadName()),
		threadUserName(getCurrentThreadUserName())
	{
	}",2,2,main\cpp\loggingevent.cpp,LoggingEventPrivate.LoggingEventPrivate,,false,47,58,LoggingEventPrivate,,,1,ANY LoggingEventPrivate.LoggingEventPrivate ()
32618,METHOD,LoggingEventPrivate,TYPE_DECL,"LoggingEventPrivate
		( const LogString& logger1
		, const LevelPtr& level1
		, const LocationInfo& locationInfo1
		, LogString&& message1
		) :
		logger(logger1),
		level(level1),
		ndc(0),
		mdcCopy(0),
		properties(0),
		ndcLookupRequired(true),
		mdcCopyLookupRequired(true),
		message(std::move(message1)),
		timeStamp(Date::currentTime()),
		locationInfo(locationInfo1),
		threadName(getCurrentThreadName()),
		threadUserName(getCurrentThreadUserName()),
		chronoTimeStamp(std::chrono::microseconds(timeStamp))
	{
	}",2,2,main\cpp\loggingevent.cpp,LoggingEventPrivate.LoggingEventPrivate,,false,60,80,LoggingEventPrivate,,,2,"ANY LoggingEventPrivate.LoggingEventPrivate (LogString,LevelPtr,LocationInfo,LogString)"
32626,METHOD,LoggingEventPrivate,TYPE_DECL,"LoggingEventPrivate(
		const LogString& logger1, const LevelPtr& level1,
		const LogString& message1, const LocationInfo& locationInfo1) :
		logger(logger1),
		level(level1),
		ndc(0),
		mdcCopy(0),
		properties(0),
		ndcLookupRequired(true),
		mdcCopyLookupRequired(true),
		message(message1),
		timeStamp(Date::currentTime()),
		locationInfo(locationInfo1),
		threadName(getCurrentThreadName()),
		threadUserName(getCurrentThreadUserName()),
		chronoTimeStamp(std::chrono::microseconds(timeStamp))
	{
	}",2,2,main\cpp\loggingevent.cpp,LoggingEventPrivate.LoggingEventPrivate,,false,82,99,LoggingEventPrivate,,,3,"ANY LoggingEventPrivate.LoggingEventPrivate (LogString,LevelPtr,LogString,LocationInfo)"
32634,METHOD,LoggingEventPrivate,TYPE_DECL,"~LoggingEventPrivate()
	{
		delete ndc;
		delete mdcCopy;
		delete properties;
	}",2,2,main\cpp\loggingevent.cpp,LoggingEventPrivate.~LoggingEventPrivate,,false,101,106,~LoggingEventPrivate,,,4,ANY LoggingEventPrivate.~LoggingEventPrivate ()
32659,METHOD,main\cpp\loggingevent.cpp:<global>,TYPE_DECL,"log4cxx_time_t LoggingEvent::getStartTime()
{
	return LOG4CXX_NS::helpers::APRInitializer::initialize();
}",1,1,main\cpp\loggingevent.cpp,LoggingEvent.getStartTime,,false,174,177,getStartTime,,,4,log4cxx_time_t LoggingEvent.getStartTime ()
32672,METHOD,main\cpp\loggingevent.cpp:<global>,TYPE_DECL,"LoggingEvent::LoggingEvent() :
	m_priv(std::make_unique<LoggingEventPrivate>())
{
}",1,1,main\cpp\loggingevent.cpp,LoggingEvent.LoggingEvent,,false,179,182,LoggingEvent,,,5,ANY LoggingEvent.LoggingEvent ()
32676,METHOD,main\cpp\loggingevent.cpp:<global>,TYPE_DECL,"LoggingEvent::LoggingEvent
	( const LogString&    logger
	, const LevelPtr&     level
	, const LocationInfo& location
	, LogString&&         message
	)
	: m_priv(std::make_unique<LoggingEventPrivate>(logger, level, location, std::move(message)))
{
}",1,1,main\cpp\loggingevent.cpp,LoggingEvent.LoggingEvent,,false,184,192,LoggingEvent,,,6,"ANY LoggingEvent.LoggingEvent (LogString,LevelPtr,LocationInfo,LogString)"
32684,METHOD,main\cpp\loggingevent.cpp:<global>,TYPE_DECL,"LoggingEvent::LoggingEvent(
	const LogString& logger1, const LevelPtr& level1,
	const LogString& message1, const LocationInfo& locationInfo1) :
	m_priv(std::make_unique<LoggingEventPrivate>(logger1, level1, message1, locationInfo1))
{
}",1,1,main\cpp\loggingevent.cpp,LoggingEvent.LoggingEvent,,false,194,199,LoggingEvent,,,7,"ANY LoggingEvent.LoggingEvent (LogString,LevelPtr,LogString,LocationInfo)"
32692,METHOD,main\cpp\loggingevent.cpp:<global>,TYPE_DECL,"LoggingEvent::~LoggingEvent()
{
}",1,1,main\cpp\loggingevent.cpp,LoggingEvent.~LoggingEvent,,false,201,203,~LoggingEvent,,,8,ANY LoggingEvent.~LoggingEvent ()
32696,METHOD,main\cpp\loggingevent.cpp:<global>,TYPE_DECL,"const LogString& LoggingEvent::getThreadUserName() const{
	return m_priv->threadUserName;
}",1,1,main\cpp\loggingevent.cpp,LoggingEvent.getThreadUserName,,false,205,207,getThreadUserName,,,9,LogString LoggingEvent.getThreadUserName ()
32704,METHOD,main\cpp\loggingevent.cpp:<global>,TYPE_DECL,"bool LoggingEvent::getNDC(LogString& dest) const
{
	if (m_priv->ndcLookupRequired)
	{
		m_priv->ndcLookupRequired = false;
		LogString val;

		if (NDC::get(val))
		{
			m_priv->ndc = new LogString(val);
		}
	}

	if (m_priv->ndc)
	{
		dest.append(*m_priv->ndc);
		return true;
	}

	return false;
}",1,1,main\cpp\loggingevent.cpp,LoggingEvent.getNDC,,false,209,229,getNDC,,,10,bool LoggingEvent.getNDC (LogString)
32751,METHOD,main\cpp\loggingevent.cpp:<global>,TYPE_DECL,"bool LoggingEvent::getMDC(const LogString& key, LogString& dest) const
{
	// Note the mdcCopy is used if it exists. Otherwise we use the MDC
	// that is associated with the thread.
	if (m_priv->mdcCopy != 0 && !m_priv->mdcCopy->empty())
	{
		MDC::Map::const_iterator it = m_priv->mdcCopy->find(key);

		if (it != m_priv->mdcCopy->end())
		{
			if (!it->second.empty())
			{
				dest.append(it->second);
				return true;
			}
		}
	}

	return MDC::get(key, dest);

}",1,1,main\cpp\loggingevent.cpp,LoggingEvent.getMDC,,false,231,251,getMDC,,,11,"bool LoggingEvent.getMDC (LogString,LogString)"
32817,METHOD,main\cpp\loggingevent.cpp:<global>,TYPE_DECL,"LoggingEvent::KeySet LoggingEvent::getMDCKeySet() const
{
	LoggingEvent::KeySet set;

	if (m_priv->mdcCopy != 0 && !m_priv->mdcCopy->empty())
	{
		MDC::Map::const_iterator it;

		for (it = m_priv->mdcCopy->begin(); it != m_priv->mdcCopy->end(); it++)
		{
			set.push_back(it->first);

		}
	}
	else
	{
		ThreadSpecificData* data = ThreadSpecificData::getCurrentData();

		if (data != 0)
		{
			MDC::Map& m = data->getMap();

			for (MDC::Map::const_iterator it = m.begin(); it != m.end(); it++)
			{
				set.push_back(it->first);
			}
		}
	}

	return set;
}",1,1,main\cpp\loggingevent.cpp,LoggingEvent.getMDCKeySet,,false,253,283,getMDCKeySet,,,12,KeySet LoggingEvent.getMDCKeySet ()
32914,METHOD,main\cpp\loggingevent.cpp:<global>,TYPE_DECL,"void LoggingEvent::getMDCCopy() const
{
	if (m_priv->mdcCopyLookupRequired)
	{
		m_priv->mdcCopyLookupRequired = false;
		// the clone call is required for asynchronous logging.
		ThreadSpecificData* data = ThreadSpecificData::getCurrentData();

		if (data != 0)
		{
			m_priv->mdcCopy = new MDC::Map(data->getMap());
		}
		else
		{
			m_priv->mdcCopy = new MDC::Map();
		}
	}
}",1,1,main\cpp\loggingevent.cpp,LoggingEvent.getMDCCopy,,false,285,302,getMDCCopy,,,13,void LoggingEvent.getMDCCopy ()
32958,METHOD,main\cpp\loggingevent.cpp:<global>,TYPE_DECL,"bool LoggingEvent::getProperty(const LogString& key, LogString& dest) const
{
	if (m_priv->properties == 0)
	{
		return false;
	}

	std::map<LogString, LogString>::const_iterator  it = m_priv->properties->find(key);

	if (it != m_priv->properties->end())
	{
		dest.append(it->second);
		return true;
	}

	return false;
}",1,1,main\cpp\loggingevent.cpp,LoggingEvent.getProperty,,false,304,320,getProperty,,,14,"bool LoggingEvent.getProperty (LogString,LogString)"
33004,METHOD,main\cpp\loggingevent.cpp:<global>,TYPE_DECL,"LoggingEvent::KeySet LoggingEvent::getPropertyKeySet() const
{
	LoggingEvent::KeySet set;

	if (m_priv->properties != 0)
	{
		std::map<LogString, LogString>::const_iterator it;

		for (it = m_priv->properties->begin(); it != m_priv->properties->end(); it++)
		{
			set.push_back(it->first);
		}
	}

	return set;
}",1,1,main\cpp\loggingevent.cpp,LoggingEvent.getPropertyKeySet,,false,322,337,getPropertyKeySet,,,15,KeySet LoggingEvent.getPropertyKeySet ()
33047,METHOD,main\cpp\loggingevent.cpp:<global>,TYPE_DECL,"const LogString& LoggingEvent::getCurrentThreadName()
{
#if defined(_WIN32)
	using ThreadIdType = DWORD;
	ThreadIdType threadId = GetCurrentThreadId();
#elif LOG4CXX_HAS_PTHREAD_SELF
	using ThreadIdType = pthread_t;
	ThreadIdType threadId = pthread_self();
#else
	using ThreadIdType = int;
	ThreadIdType threadId = 0;
#endif

#if LOG4CXX_HAS_THREAD_LOCAL
	thread_local LogString thread_id_string;
#else
	using ListItem = std::pair<ThreadIdType, LogString>;
	static std::list<ListItem> thread_id_map;
	static std::mutex mutex;
	std::lock_guard<std::mutex> lock(mutex);
	auto pThreadId = std::find_if(thread_id_map.begin(), thread_id_map.end()
		, [threadId](const ListItem& item) { return threadId == item.first; });
	if (thread_id_map.end() == pThreadId)
		pThreadId = thread_id_map.insert(thread_id_map.begin(), ListItem(threadId, LogString()));
	LogString& thread_id_string = pThreadId->second;
#endif
	if ( !thread_id_string.empty() )
	{
		return thread_id_string;
	}

#if defined(_WIN32)
	char...",1,1,main\cpp\loggingevent.cpp,LoggingEvent.getCurrentThreadName,,false,340,385,getCurrentThreadName,,,16,LogString LoggingEvent.getCurrentThreadName ()
33126,METHOD,main\cpp\loggingevent.cpp:<global>,TYPE_DECL,"const LogString& LoggingEvent::getCurrentThreadUserName()
{
#if LOG4CXX_HAS_THREAD_LOCAL
	thread_local LogString thread_name;
#else
	static WideLife<LogString> thread_name = LOG4CXX_STR(""(noname)"");
#endif
	if( !thread_name.empty() ){
		return thread_name;
	}

#if LOG4CXX_HAS_PTHREAD_GETNAME
	char result[16];
	pthread_t current_thread = pthread_self();
	if (pthread_getname_np(current_thread, result, sizeof(result)) < 0 || 0 == result[0])
		thread_name = getCurrentThreadName();
	else
		thread_name = Transcoder::decode(result);
#elif WIN32
	typedef HRESULT (WINAPI *TGetThreadDescription)(HANDLE, PWSTR*);
	static struct initialiser
	{
		HMODULE hKernelBase;
		TGetThreadDescription GetThreadDescription;
		initialiser()
			: hKernelBase(GetModuleHandleA(""KernelBase.dll""))
			, GetThreadDescription(nullptr)
		{
			if (hKernelBase)
				GetThreadDescription = reinterpret_cast<TGetThreadDescription>(GetProcAddress(hKernelBase, ""GetThreadDescription""));
		}
	} win32func;
	if (win32func.GetThr...",1,1,main\cpp\loggingevent.cpp,LoggingEvent.getCurrentThreadUserName,,false,387,437,getCurrentThreadUserName,,,17,LogString LoggingEvent.getCurrentThreadUserName ()
33149,METHOD,main\cpp\loggingevent.cpp:<global>,TYPE_DECL,"void LoggingEvent::setProperty(const LogString& key, const LogString& value)
{
	if (m_priv->properties == 0)
	{
		m_priv->properties = new std::map<LogString, LogString>;
	}

	(*m_priv->properties)[key] = value;
}",1,1,main\cpp\loggingevent.cpp,LoggingEvent.setProperty,,false,439,447,setProperty,,,18,"void LoggingEvent.setProperty (LogString,LogString)"
33176,METHOD,main\cpp\loggingevent.cpp:<global>,TYPE_DECL,"const LevelPtr& LoggingEvent::getLevel() const
{
	return m_priv->level;
}",1,1,main\cpp\loggingevent.cpp,LoggingEvent.getLevel,,false,449,452,getLevel,,,19,LevelPtr LoggingEvent.getLevel ()
33184,METHOD,main\cpp\loggingevent.cpp:<global>,TYPE_DECL,"const LogString& LoggingEvent::getLoggerName() const
{
	return m_priv->logger;
}",1,1,main\cpp\loggingevent.cpp,LoggingEvent.getLoggerName,,false,454,457,getLoggerName,,,20,LogString LoggingEvent.getLoggerName ()
33192,METHOD,main\cpp\loggingevent.cpp:<global>,TYPE_DECL,"const LogString& LoggingEvent::getMessage() const
{
	return m_priv->message;
}",1,1,main\cpp\loggingevent.cpp,LoggingEvent.getMessage,,false,459,462,getMessage,,,21,LogString LoggingEvent.getMessage ()
33200,METHOD,main\cpp\loggingevent.cpp:<global>,TYPE_DECL,"const LogString& LoggingEvent::getRenderedMessage() const
{
	return m_priv->message;
}",1,1,main\cpp\loggingevent.cpp,LoggingEvent.getRenderedMessage,,false,464,467,getRenderedMessage,,,22,LogString LoggingEvent.getRenderedMessage ()
33208,METHOD,main\cpp\loggingevent.cpp:<global>,TYPE_DECL,"const LogString& LoggingEvent::getThreadName() const
{
	return m_priv->threadName;
}",1,1,main\cpp\loggingevent.cpp,LoggingEvent.getThreadName,,false,469,472,getThreadName,,,23,LogString LoggingEvent.getThreadName ()
33216,METHOD,main\cpp\loggingevent.cpp:<global>,TYPE_DECL,"log4cxx_time_t LoggingEvent::getTimeStamp() const
{
	return m_priv->timeStamp;
}",1,1,main\cpp\loggingevent.cpp,LoggingEvent.getTimeStamp,,false,474,477,getTimeStamp,,,24,log4cxx_time_t LoggingEvent.getTimeStamp ()
33224,METHOD,main\cpp\loggingevent.cpp:<global>,TYPE_DECL,"const LOG4CXX_NS::spi::LocationInfo& LoggingEvent::getLocationInformation() const
{
	return m_priv->locationInfo;
}",1,1,main\cpp\loggingevent.cpp,LoggingEvent.getLocationInformation,,false,479,482,getLocationInformation,,,25,LocationInfo LoggingEvent.getLocationInformation ()
33232,METHOD,main\cpp\loggingevent.cpp:<global>,TYPE_DECL,"std::chrono::time_point<std::chrono::system_clock> LoggingEvent::getChronoTimeStamp() const{
	return m_priv->chronoTimeStamp;
}",1,1,main\cpp\loggingevent.cpp,LoggingEvent.getChronoTimeStamp,,false,484,486,getChronoTimeStamp,,,26,time_point<std::chrono::system_clock> LoggingEvent.getChronoTimeStamp ()
33251,METHOD,main\cpp\loggingeventpatternconverter.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\loggingeventpatternconverter.cpp,main\cpp\loggingeventpatternconverter.cpp:<global>,,false,1,58,<global>,,,1,
33255,METHOD,main\cpp\loggingeventpatternconverter.cpp:<global>,TYPE_DECL,"LoggingEventPatternConverter::LoggingEventPatternConverter(
	const LogString& name1, const LogString& style1) : PatternConverter(name1, style1)
{
}",1,1,main\cpp\loggingeventpatternconverter.cpp,LoggingEventPatternConverter.LoggingEventPatternConverter,,false,32,35,LoggingEventPatternConverter,,,3,"ANY LoggingEventPatternConverter.LoggingEventPatternConverter (LogString,LogString)"
33261,METHOD,main\cpp\loggingeventpatternconverter.cpp:<global>,TYPE_DECL,"LoggingEventPatternConverter::LoggingEventPatternConverter(std::unique_ptr<PatternConverterPrivate> priv) :
	PatternConverter (std::move(priv))
{

}",1,1,main\cpp\loggingeventpatternconverter.cpp,LoggingEventPatternConverter.LoggingEventPatternConverter,,false,37,41,LoggingEventPatternConverter,,,4,ANY LoggingEventPatternConverter.LoggingEventPatternConverter (ANY)
33266,METHOD,main\cpp\loggingeventpatternconverter.cpp:<global>,TYPE_DECL,"void LoggingEventPatternConverter::format(const ObjectPtr& obj,
	LogString& output,
	LOG4CXX_NS::helpers::Pool& p) const
{
	LoggingEventPtr le = LOG4CXX_NS::cast<LoggingEvent>(obj);

	if (le != NULL)
	{
		format(le, output, p);
	}
}",1,1,main\cpp\loggingeventpatternconverter.cpp,LoggingEventPatternConverter.format,,false,43,53,format,,,5,"void LoggingEventPatternConverter.format (ObjectPtr,LogString,ANY)"
33292,METHOD,main\cpp\loggingeventpatternconverter.cpp:<global>,TYPE_DECL,"bool LoggingEventPatternConverter::handlesThrowable() const
{
	return false;
}",1,1,main\cpp\loggingeventpatternconverter.cpp,LoggingEventPatternConverter.handlesThrowable,,false,55,58,handlesThrowable,,,6,bool LoggingEventPatternConverter.handlesThrowable ()
33319,METHOD,main\cpp\loglog.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\loglog.cpp,main\cpp\loglog.cpp:<global>,,false,1,186,<global>,,,1,
33322,METHOD,LogLogPrivate,TYPE_DECL,"LogLogPrivate() :
		debugEnabled(false),
		quietMode(false){}",2,20,main\cpp\loglog.cpp,LogLogPrivate.LogLogPrivate,,false,35,37,LogLogPrivate,,,1,ANY LogLogPrivate.LogLogPrivate ()
33326,METHOD,LogLogPrivate,TYPE_DECL,"~LogLogPrivate()
	{
		quietMode = true; // Prevent output after deletion by onexit processing chain.
	}",2,2,main\cpp\loglog.cpp,LogLogPrivate.~LogLogPrivate,,false,39,42,~LogLogPrivate,,,2,ANY LogLogPrivate.~LogLogPrivate ()
33336,METHOD,main\cpp\loglog.cpp:<global>,TYPE_DECL,"LogLog::LogLog() :
	m_priv(std::make_unique<LogLogPrivate>())
{
	LogString log4cxxDebug = OptionConverter::getSystemProperty(LOG4CXX_STR(""LOG4CXX_DEBUG""), LOG4CXX_STR(""false""));
	m_priv->debugEnabled = OptionConverter::toBoolean(log4cxxDebug, false);
}",1,1,main\cpp\loglog.cpp,LogLog.LogLog,,false,53,58,LogLog,,,2,ANY LogLog.LogLog ()
33361,METHOD,main\cpp\loglog.cpp:<global>,TYPE_DECL,LogLog::~LogLog(){},1,19,main\cpp\loglog.cpp,LogLog.~LogLog,,false,60,60,~LogLog,,,3,ANY LogLog.~LogLog ()
33365,METHOD,main\cpp\loglog.cpp:<global>,TYPE_DECL,"LogLog& LogLog::getInstance()
{
	static WideLife<LogLog> internalLogger;

	return internalLogger;
}",1,1,main\cpp\loglog.cpp,LogLog.getInstance,,false,62,67,getInstance,,,4,LogLog LogLog.getInstance ()
33372,METHOD,main\cpp\loglog.cpp:<global>,TYPE_DECL,"void LogLog::setInternalDebugging(bool debugEnabled1)
{
	auto p = getInstance().m_priv.get();
	std::unique_lock<std::mutex> lock(p->mutex);

	p->debugEnabled = debugEnabled1;
}",1,1,main\cpp\loglog.cpp,LogLog.setInternalDebugging,,false,69,75,setInternalDebugging,,,5,void LogLog.setInternalDebugging (bool)
33403,METHOD,main\cpp\loglog.cpp:<global>,TYPE_DECL,"void LogLog::debug(const LogString& msg)
{
	auto p = getInstance().m_priv.get();
	if (p && !p->quietMode) // Not deleted by onexit processing?
	{
		if (!p->debugEnabled)
		{
			return;
		}

		std::unique_lock<std::mutex> lock(p->mutex);

		emit(msg);
	}
}",1,1,main\cpp\loglog.cpp,LogLog.debug,,false,77,91,debug,,,6,void LogLog.debug (LogString)
33446,METHOD,main\cpp\loglog.cpp:<global>,TYPE_DECL,"void LogLog::debug(const LogString& msg, const std::exception& e)
{
	auto p = getInstance().m_priv.get();
	if (p && !p->quietMode) // Not deleted by onexit processing?
	{
		if (!p->debugEnabled)
			return;

		std::unique_lock<std::mutex> lock(p->mutex);
		emit(msg);
		emit(e);
	}
}",1,1,main\cpp\loglog.cpp,LogLog.debug,,false,93,105,debug,,,7,"void LogLog.debug (LogString,ANY)"
33492,METHOD,main\cpp\loglog.cpp:<global>,TYPE_DECL,"void LogLog::error(const LogString& msg)
{
	auto p = getInstance().m_priv.get();
	if (p && !p->quietMode) // Not deleted by onexit processing?
	{
		std::unique_lock<std::mutex> lock(p->mutex);

		emit(msg);
	}
}",1,1,main\cpp\loglog.cpp,LogLog.error,,false,108,117,error,,,8,void LogLog.error (LogString)
33528,METHOD,main\cpp\loglog.cpp:<global>,TYPE_DECL,"void LogLog::error(const LogString& msg, const std::exception& e)
{
	auto p = getInstance().m_priv.get();
	if (p && !p->quietMode) // Not deleted by onexit processing?
	{
		std::unique_lock<std::mutex> lock(p->mutex);
		emit(msg);
		emit(e);
	}
}",1,1,main\cpp\loglog.cpp,LogLog.error,,false,119,128,error,,,9,"void LogLog.error (LogString,ANY)"
33567,METHOD,main\cpp\loglog.cpp:<global>,TYPE_DECL,"void LogLog::setQuietMode(bool quietMode1)
{
	auto p = getInstance().m_priv.get();
	std::unique_lock<std::mutex> lock(p->mutex);

	p->quietMode = quietMode1;
}",1,1,main\cpp\loglog.cpp,LogLog.setQuietMode,,false,130,136,setQuietMode,,,10,void LogLog.setQuietMode (bool)
33598,METHOD,main\cpp\loglog.cpp:<global>,TYPE_DECL,"void LogLog::warn(const LogString& msg)
{
	auto p = getInstance().m_priv.get();
	if (p && !p->quietMode) // Not deleted by onexit processing?
	{
		std::unique_lock<std::mutex> lock(p->mutex);
		emit(msg);
	}
}",1,1,main\cpp\loglog.cpp,LogLog.warn,,false,138,146,warn,,,11,void LogLog.warn (LogString)
33634,METHOD,main\cpp\loglog.cpp:<global>,TYPE_DECL,"void LogLog::warn(const LogString& msg, const std::exception& e)
{
	auto p = getInstance().m_priv.get();
	if (p && !p->quietMode) // Not deleted by onexit processing?
	{
		std::unique_lock<std::mutex> lock(p->mutex);
		emit(msg);
		emit(e);
	}
}",1,1,main\cpp\loglog.cpp,LogLog.warn,,false,148,157,warn,,,12,"void LogLog.warn (LogString,ANY)"
33673,METHOD,main\cpp\loglog.cpp:<global>,TYPE_DECL,"void LogLog::emit(const LogString& msg)
{
	LogString out(LOG4CXX_STR(""log4cxx: ""));

	out.append(msg);
	out.append(1, (logchar) 0x0A);

	SystemErrWriter::write(out);
}",1,1,main\cpp\loglog.cpp,LogLog.emit,,false,159,167,emit,,,13,void LogLog.emit (LogString)
33700,METHOD,main\cpp\loglog.cpp:<global>,TYPE_DECL,"void LogLog::emit(const std::exception& ex)
{
	LogString out(LOG4CXX_STR(""log4cxx: ""));
	const char* raw = ex.what();

	if (raw != 0)
	{
		Transcoder::decode(raw, out);
	}
	else
	{
		out.append(LOG4CXX_STR(""std::exception::what() == null""));
	}

	out.append(1, (logchar) 0x0A);

	SystemErrWriter::write(out);
}",1,1,main\cpp\loglog.cpp,LogLog.emit,,false,169,186,emit,,,14,void LogLog.emit (ANY)
33749,METHOD,main\cpp\logmanager.cpp:<global>,TYPE_DECL,"[]() -> ObjectPtr
		{
			LoggerRepositoryPtr hierarchy = Hierarchy::create();
			return std::make_shared<DefaultRepositorySelector>(hierarchy);
		}",73,3,main\cpp\logmanager.cpp,[]() -> ObjectPtr { LoggerRepositoryPtr hierarchy = Hierarchy.create(); return std.make_shared<DefaultRepositorySelector>(hierarchy); }.<lambda>0,,false,49,53,<lambda>0,,,1,ObjectPtr []() -> ObjectPtr { LoggerRepositoryPtr hierarchy = Hierarchy.create(); return std.make_shared<DefaultRepositorySelector>(hierarchy); }.<lambda>0 ()
33803,METHOD,main\cpp\logmanager.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\logmanager.cpp,main\cpp\logmanager.cpp:<global>,,false,1,224,<global>,,,1,
33811,METHOD,main\cpp\logmanager.cpp:<global>,TYPE_DECL,"RepositorySelectorPtr LogManager::getRepositorySelector()
{
	auto result = APRInitializer::getOrAddUnique<spi::RepositorySelector>( []() -> ObjectPtr
		{
			LoggerRepositoryPtr hierarchy = Hierarchy::create();
			return std::make_shared<DefaultRepositorySelector>(hierarchy);
		}
	);
	return result;
}",1,1,main\cpp\logmanager.cpp,LogManager.getRepositorySelector,,false,47,56,getRepositorySelector,,,5,RepositorySelectorPtr LogManager.getRepositorySelector ()
33829,METHOD,main\cpp\logmanager.cpp:<global>,TYPE_DECL,"void LogManager::setRepositorySelector(spi::RepositorySelectorPtr selector, void* guard1)
{
	if ((LogManager::guard != 0) && (LogManager::guard != guard1))
	{
		throw IllegalArgumentException(LOG4CXX_STR(""Attempted to reset the LoggerFactory without possessing the guard.""));
	}

	if (selector == 0)
	{
		throw IllegalArgumentException(LOG4CXX_STR(""RepositorySelector must be non-null.""));
	}

	LogManager::guard = guard1;
	APRInitializer::setUnique<spi::RepositorySelector>(selector);
}",1,1,main\cpp\logmanager.cpp,LogManager.setRepositorySelector,,false,58,72,setRepositorySelector,,,6,"void LogManager.setRepositorySelector (ANY,void*)"
33875,METHOD,main\cpp\logmanager.cpp:<global>,TYPE_DECL,"LoggerRepositoryPtr LogManager::getLoggerRepository()
{
	return getRepositorySelector()->getLoggerRepository();
}",1,1,main\cpp\logmanager.cpp,LogManager.getLoggerRepository,,false,76,79,getLoggerRepository,,,7,LoggerRepositoryPtr LogManager.getLoggerRepository ()
33884,METHOD,main\cpp\logmanager.cpp:<global>,TYPE_DECL,"LoggerPtr LogManager::getRootLogger()
{
	// Delegate the actual manufacturing of the logger to the logger repository.
	auto r = getLoggerRepository();
	r->ensureIsConfigured(std::bind(DefaultConfigurator::configure, r));
	return r->getRootLogger();
}",1,1,main\cpp\logmanager.cpp,LogManager.getRootLogger,,false,81,87,getRootLogger,,,8,LoggerPtr LogManager.getRootLogger ()
33909,METHOD,main\cpp\logmanager.cpp:<global>,TYPE_DECL,"LoggerPtr LogManager::getLoggerLS(const LogString& name)
{
	auto r = getLoggerRepository();
	r->ensureIsConfigured(std::bind(DefaultConfigurator::configure, r));
	return r->getLogger(name);
}",1,1,main\cpp\logmanager.cpp,LogManager.getLoggerLS,,false,92,97,getLoggerLS,,,9,LoggerPtr LogManager.getLoggerLS (LogString)
33936,METHOD,main\cpp\logmanager.cpp:<global>,TYPE_DECL,"LoggerPtr LogManager::getLoggerLS(const LogString& name,
	const spi::LoggerFactoryPtr& factory)
{
	// Delegate the actual manufacturing of the logger to the logger repository.
	auto r = getLoggerRepository();
	r->ensureIsConfigured(std::bind(DefaultConfigurator::configure, r));
	return r->getLogger(name, factory);
}",1,1,main\cpp\logmanager.cpp,LogManager.getLoggerLS,,false,102,109,getLoggerLS,,,10,"LoggerPtr LogManager.getLoggerLS (LogString,ANY)"
33965,METHOD,main\cpp\logmanager.cpp:<global>,TYPE_DECL,"LoggerPtr LogManager::getLogger(const std::string& name)
{
	LOG4CXX_DECODE_CHAR(n, name);
	return getLoggerLS(n);
}",1,1,main\cpp\logmanager.cpp,LogManager.getLogger,,false,111,115,getLogger,,,11,LoggerPtr LogManager.getLogger (ANY)
33976,METHOD,main\cpp\logmanager.cpp:<global>,TYPE_DECL,"LoggerPtr LogManager::getLogger(const std::string& name,
	const spi::LoggerFactoryPtr& factory)
{
	LOG4CXX_DECODE_CHAR(n, name);
	return getLoggerLS(n, factory);
}",1,1,main\cpp\logmanager.cpp,LogManager.getLogger,,false,117,122,getLogger,,,12,"LoggerPtr LogManager.getLogger (ANY,ANY)"
33989,METHOD,main\cpp\logmanager.cpp:<global>,TYPE_DECL,"LoggerPtr LogManager::exists(const std::string& name)
{
	LOG4CXX_DECODE_CHAR(n, name);
	return existsLS(n);
}",1,1,main\cpp\logmanager.cpp,LogManager.exists,,false,124,128,exists,,,13,LoggerPtr LogManager.exists (ANY)
34000,METHOD,main\cpp\logmanager.cpp:<global>,TYPE_DECL,"LoggerPtr LogManager::existsLS(const LogString& name)
{
	return getLoggerRepository()->exists(name);
}",1,1,main\cpp\logmanager.cpp,LogManager.existsLS,,false,193,196,existsLS,,,14,LoggerPtr LogManager.existsLS (LogString)
34011,METHOD,main\cpp\logmanager.cpp:<global>,TYPE_DECL,"LoggerList LogManager::getCurrentLoggers()
{
	return getLoggerRepository()->getCurrentLoggers();
}",1,1,main\cpp\logmanager.cpp,LogManager.getCurrentLoggers,,false,198,201,getCurrentLoggers,,,15,LoggerList LogManager.getCurrentLoggers ()
34020,METHOD,main\cpp\logmanager.cpp:<global>,TYPE_DECL,"void LogManager::shutdown()
{
	APRInitializer::unregisterAll();
	getLoggerRepository()->shutdown();
}",1,1,main\cpp\logmanager.cpp,LogManager.shutdown,,false,203,207,shutdown,,,16,void LogManager.shutdown ()
34032,METHOD,main\cpp\logmanager.cpp:<global>,TYPE_DECL,"void LogManager::resetConfiguration()
{
	getLoggerRepository()->resetConfiguration();
}",1,1,main\cpp\logmanager.cpp,LogManager.resetConfiguration,,false,209,212,resetConfiguration,,,17,void LogManager.resetConfiguration ()
34040,METHOD,main\cpp\logmanager.cpp:<global>,TYPE_DECL,"bool LogManager::removeLogger(const LogString& name, bool ifNotUsed)
{
#if LOG4CXX_ABI_VERSION <= 15
	bool result = false;
	if (auto r = dynamic_cast<Hierarchy*>(getLoggerRepository().get()))
		result = r->removeLogger(name, ifNotUsed);
	return result;
#else
	return getLoggerRepository()->removeLogger(name, ifNotUsed);
#endif
}",1,1,main\cpp\logmanager.cpp,LogManager.removeLogger,,false,214,224,removeLogger,,,18,"bool LogManager.removeLogger (LogString,bool)"
34085,METHOD,main\cpp\logstream.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\logstream.cpp,main\cpp\logstream.cpp:<global>,,false,1,614,<global>,,,1,
34087,METHOD,main\cpp\logstream.cpp:<global>,TYPE_DECL,"logstream_base::logstream_ios_base::logstream_ios_base(std::ios_base::fmtflags initval,
	int initsize)
{
#if LOG4CXX_MEMSET_IOS_BASE
	//
	//    the destructor for std::ios_base in the MSVC STL
	//        releases a pointer that was not initialized in the constructor.
	//
	memset(this, 0, sizeof(*this));
#endif
#if LOG4CXX_INIT_IOS_BASE
	init(NULL);
#endif
	flags(initval);
	precision(initsize);
	width(initsize);

}",1,1,main\cpp\logstream.cpp,logstream_base.logstream_ios_base.logstream_ios_base,,false,33,50,logstream_ios_base,,,1,"ANY logstream_base.logstream_ios_base.logstream_ios_base (ANY,int)"
34099,METHOD,main\cpp\logstream.cpp:<global>,TYPE_DECL,"logstream_base::logstream_base(const LoggerPtr& log,
	const LevelPtr& lvl) : initset((std::ios_base::fmtflags) - 1, 1),
	initclear((std::ios_base::fmtflags) 0, 0), fillchar(0), fillset(false), logger(log), level(lvl), location()
{
	enabled = logger->isEnabledFor(level);
}",1,1,main\cpp\logstream.cpp,logstream_base.logstream_base,,false,53,58,logstream_base,,,2,"ANY logstream_base.logstream_base (LoggerPtr,LevelPtr)"
34112,METHOD,main\cpp\logstream.cpp:<global>,TYPE_DECL,"logstream_base::~logstream_base()
{
}",1,1,main\cpp\logstream.cpp,logstream_base.~logstream_base,,false,60,62,~logstream_base,,,3,ANY logstream_base.~logstream_base ()
34116,METHOD,main\cpp\logstream.cpp:<global>,TYPE_DECL,"void logstream_base::insert(std::ios_base & (*manip)(std::ios_base&))
{
	get_stream_state(initclear, initset, fillchar, fillset);
	(*manip)(initset);
	(*manip)(initclear);
	refresh_stream_state();
}",1,1,main\cpp\logstream.cpp,logstream_base.insert,,false,64,70,insert,,,4,void logstream_base.insert (ANY)
34135,METHOD,main\cpp\logstream.cpp:<global>,TYPE_DECL,"bool logstream_base::set_stream_state(std::ios_base& dest, int& dstchar)
{
	std::ios_base::fmtflags setval = initset.flags();
	std::ios_base::fmtflags clrval = initclear.flags();
	std::ios_base::fmtflags mask = setval ^ (~clrval);
	dest.setf(clrval, mask);

	if (initset.precision() == initclear.precision())
	{
		dest.precision(initset.precision());
	}

	if (initset.width() == initclear.width())
	{
		dest.width(initset.width());
	}

	dstchar = fillchar;
	return fillset;
}",1,1,main\cpp\logstream.cpp,logstream_base.set_stream_state,,false,72,91,set_stream_state,,,5,"bool logstream_base.set_stream_state (ANY,int)"
34211,METHOD,main\cpp\logstream.cpp:<global>,TYPE_DECL,"logstream_base& logstream_base::endmsg(logstream_base& stream)
{
	stream.end_message();
	return stream;
}",1,1,main\cpp\logstream.cpp,logstream_base.endmsg,,false,93,97,endmsg,,,6,logstream_base logstream_base.endmsg (logstream_base)
34222,METHOD,main\cpp\logstream.cpp:<global>,TYPE_DECL,"logstream_base& logstream_base::nop(logstream_base& stream)
{
	return stream;
}",1,1,main\cpp\logstream.cpp,logstream_base.nop,,false,99,102,nop,,,7,logstream_base logstream_base.nop (logstream_base)
34229,METHOD,main\cpp\logstream.cpp:<global>,TYPE_DECL,"void logstream_base::end_message()
{
	if (isEnabled())
	{
		log(logger, level, location);
	}

	erase();
}",1,1,main\cpp\logstream.cpp,logstream_base.end_message,,false,104,112,end_message,,,8,void logstream_base.end_message ()
34241,METHOD,main\cpp\logstream.cpp:<global>,TYPE_DECL,"int LOG4CXX_NS::logstream_base::precision(int p)
{
	get_stream_state(initclear, initset, fillchar, fillset);
	initset.precision(p);
	int oldVal = (int)initclear.precision(p);
	refresh_stream_state();
	return oldVal;
}",1,1,main\cpp\logstream.cpp,LOG4CXX_NS.logstream_base.precision,,false,116,123,precision,,,9,int LOG4CXX_NS.logstream_base.precision (int)
34269,METHOD,main\cpp\logstream.cpp:<global>,TYPE_DECL,"int LOG4CXX_NS::logstream_base::precision()
{
	get_stream_state(initclear, initset, fillchar, fillset);
	return (int)initclear.precision();
}",1,1,main\cpp\logstream.cpp,LOG4CXX_NS.logstream_base.precision,,false,125,129,precision,,,10,int LOG4CXX_NS.logstream_base.precision ()
34285,METHOD,main\cpp\logstream.cpp:<global>,TYPE_DECL,"int LOG4CXX_NS::logstream_base::width(int w)
{
	get_stream_state(initclear, initset, fillchar, fillset);
	initset.width(w);
	int oldVal = (int)initclear.width(w);
	refresh_stream_state();
	return oldVal;
}",1,1,main\cpp\logstream.cpp,LOG4CXX_NS.logstream_base.width,,false,131,138,width,,,11,int LOG4CXX_NS.logstream_base.width (int)
34313,METHOD,main\cpp\logstream.cpp:<global>,TYPE_DECL,"int LOG4CXX_NS::logstream_base::width()
{
	get_stream_state(initclear, initset, fillchar, fillset);
	return (int)initclear.width();
}",1,1,main\cpp\logstream.cpp,LOG4CXX_NS.logstream_base.width,,false,140,144,width,,,12,int LOG4CXX_NS.logstream_base.width ()
34329,METHOD,main\cpp\logstream.cpp:<global>,TYPE_DECL,"int LOG4CXX_NS::logstream_base::fill(int newfill)
{
	get_stream_state(initclear, initset, fillchar, fillset);
	int oldfill = fillchar;
	fillchar = newfill;
	fillset = true;
	refresh_stream_state();
	return oldfill;
}",1,1,main\cpp\logstream.cpp,LOG4CXX_NS.logstream_base.fill,,false,146,154,fill,,,13,int LOG4CXX_NS.logstream_base.fill (int)
34352,METHOD,main\cpp\logstream.cpp:<global>,TYPE_DECL,"int logstream_base::fill()
{
	get_stream_state(initclear, initset, fillchar, fillset);
	return fillchar;
}",1,1,main\cpp\logstream.cpp,logstream_base.fill,,false,156,160,fill,,,14,int logstream_base.fill ()
34363,METHOD,main\cpp\logstream.cpp:<global>,TYPE_DECL,"std::ios_base::fmtflags logstream_base::flags(std::ios_base::fmtflags newflags)
{
	get_stream_state(initclear, initset, fillchar, fillset);
	initset.flags(newflags);
	std::ios_base::fmtflags oldVal = initclear.flags(newflags);
	refresh_stream_state();
	return oldVal;
}",1,1,main\cpp\logstream.cpp,logstream_base.flags,,false,162,169,flags,,,15,fmtflags logstream_base.flags (ANY)
34389,METHOD,main\cpp\logstream.cpp:<global>,TYPE_DECL,"std::ios_base::fmtflags logstream_base::setf(std::ios_base::fmtflags newflags, std::ios_base::fmtflags mask)
{
	get_stream_state(initclear, initset, fillchar, fillset);
	initset.setf(newflags, mask);
	std::ios_base::fmtflags oldVal = initclear.setf(newflags, mask);
	refresh_stream_state();
	return oldVal;
}",1,1,main\cpp\logstream.cpp,logstream_base.setf,,false,171,178,setf,,,16,"fmtflags logstream_base.setf (ANY,ANY)"
34418,METHOD,main\cpp\logstream.cpp:<global>,TYPE_DECL,"std::ios_base::fmtflags logstream_base::setf(std::ios_base::fmtflags newflags)
{
	get_stream_state(initclear, initset, fillchar, fillset);
	initset.setf(newflags);
	std::ios_base::fmtflags oldVal = initclear.setf(newflags);
	refresh_stream_state();
	return oldVal;
}",1,1,main\cpp\logstream.cpp,logstream_base.setf,,false,180,187,setf,,,17,fmtflags logstream_base.setf (ANY)
34444,METHOD,main\cpp\logstream.cpp:<global>,TYPE_DECL,"void logstream_base::setLevel(const ::LOG4CXX_NS::LevelPtr& newlevel)
{
	level = newlevel;
	bool oldLevel = enabled;
	enabled = logger->isEnabledFor(level);

	if (oldLevel != enabled)
	{
		erase();
	}
}",1,1,main\cpp\logstream.cpp,logstream_base.setLevel,,false,191,201,setLevel,,,18,void logstream_base.setLevel (ANY)
34469,METHOD,main\cpp\logstream.cpp:<global>,TYPE_DECL,"bool logstream_base::isEnabledFor(const ::LOG4CXX_NS::LevelPtr& l) const
{
	return logger->isEnabledFor(l);
}",1,1,main\cpp\logstream.cpp,logstream_base.isEnabledFor,,false,203,206,isEnabledFor,,,19,bool logstream_base.isEnabledFor (ANY)
34480,METHOD,main\cpp\logstream.cpp:<global>,TYPE_DECL,"void logstream_base::setLocation(const LOG4CXX_NS::spi::LocationInfo& newlocation)
{
	if (LOG4CXX_UNLIKELY(enabled))
	{
		location = newlocation;
	}
}",1,1,main\cpp\logstream.cpp,logstream_base.setLocation,,false,209,215,setLocation,,,20,void logstream_base.setLocation (ANY)
34492,METHOD,main\cpp\logstream.cpp:<global>,TYPE_DECL,"logstream::logstream(const LOG4CXX_NS::LoggerPtr& logger,
	const LOG4CXX_NS::LevelPtr& level) : logstream_base(logger, level), stream(0)
{
}",1,1,main\cpp\logstream.cpp,logstream.logstream,,false,218,221,logstream,,,21,"ANY logstream.logstream (ANY,ANY)"
34498,METHOD,main\cpp\logstream.cpp:<global>,TYPE_DECL,"logstream::logstream(const Ch* loggerName,
	const LOG4CXX_NS::LevelPtr& level)
	: logstream_base(LOG4CXX_NS::Logger::getLogger(loggerName), level), stream(0)
{
}",1,1,main\cpp\logstream.cpp,logstream.logstream,,false,223,227,logstream,,,22,"ANY logstream.logstream (Ch*,ANY)"
34504,METHOD,main\cpp\logstream.cpp:<global>,TYPE_DECL,"logstream::logstream(const std::basic_string<Ch>& loggerName,
	const LOG4CXX_NS::LevelPtr& level) : logstream_base(LOG4CXX_NS::Logger::getLogger(loggerName), level), stream(0)
{
}",1,1,main\cpp\logstream.cpp,logstream.logstream,,false,230,233,logstream,,,23,"ANY logstream.logstream (ANY,ANY)"
34510,METHOD,main\cpp\logstream.cpp:<global>,TYPE_DECL,"logstream::~logstream()
{
	delete stream;
}",1,1,main\cpp\logstream.cpp,logstream.~logstream,,false,235,238,~logstream,,,24,ANY logstream.~logstream ()
34516,METHOD,main\cpp\logstream.cpp:<global>,TYPE_DECL,"logstream& logstream::operator<<(logstream_base & (*manip)(logstream_base&))
{
	(*manip)(*this);
	return *this;
}",1,1,main\cpp\logstream.cpp,logstream.operator <<,,false,240,244,operator <<,,,25,logstream logstream.operator << (logstream_base)
34529,METHOD,main\cpp\logstream.cpp:<global>,TYPE_DECL,"logstream& logstream::operator<<(const LevelPtr& l)
{
	setLevel(l);
	return *this;
}",1,1,main\cpp\logstream.cpp,logstream.operator <<,,false,246,250,operator <<,,,26,logstream logstream.operator << (LevelPtr)
34539,METHOD,main\cpp\logstream.cpp:<global>,TYPE_DECL,"logstream& logstream::operator<<(const LOG4CXX_NS::spi::LocationInfo& newlocation)
{
	setLocation(newlocation);
	return *this;
}",1,1,main\cpp\logstream.cpp,logstream.operator <<,,false,252,256,operator <<,,,27,logstream logstream.operator << (ANY)
34549,METHOD,main\cpp\logstream.cpp:<global>,TYPE_DECL,"logstream& logstream::operator>>(const LOG4CXX_NS::spi::LocationInfo& newlocation)
{
	setLocation(newlocation);
	return *this;
}",1,1,main\cpp\logstream.cpp,logstream.operator >>,,false,258,262,operator >>,,,28,logstream logstream.operator >> (ANY)
34559,METHOD,main\cpp\logstream.cpp:<global>,TYPE_DECL,"logstream& logstream::operator<<(std::ios_base & (*manip)(std::ios_base&))
{
	logstream_base::insert(manip);
	return *this;
}",1,1,main\cpp\logstream.cpp,logstream.operator <<,,false,264,268,operator <<,,,29,logstream logstream.operator << (ANY)
34572,METHOD,main\cpp\logstream.cpp:<global>,TYPE_DECL,"logstream::operator std::basic_ostream<char>& ()
{
	if (stream == 0)
	{
		stream = new std::basic_stringstream<Ch>();
		refresh_stream_state();
	}

	return *stream;
}",1,1,main\cpp\logstream.cpp,logstream.operator ? &,,false,270,279,operator ? &,,,30,ANY logstream.operator ? & ()
34589,METHOD,main\cpp\logstream.cpp:<global>,TYPE_DECL,"void logstream::log(LoggerPtr& log,
	const LevelPtr& lev,
	const LOG4CXX_NS::spi::LocationInfo& loc)
{
	if (stream != 0)
	{
		std::basic_string<Ch> msg = stream->str();

		if (!msg.empty())
		{
			log->log(lev, msg, loc);
		}
	}
}",1,1,main\cpp\logstream.cpp,logstream.log,,false,281,294,log,,,31,"void logstream.log (LoggerPtr,LevelPtr,ANY)"
34627,METHOD,main\cpp\logstream.cpp:<global>,TYPE_DECL,"void logstream::erase()
{
	if (stream != 0)
	{
		std::basic_string<Ch> emptyStr;
		stream->str(emptyStr);
	}
}",1,1,main\cpp\logstream.cpp,logstream.erase,,false,297,304,erase,,,32,void logstream.erase ()
34648,METHOD,main\cpp\logstream.cpp:<global>,TYPE_DECL,"void logstream::get_stream_state(std::ios_base& base,
	std::ios_base& mask,
	int& fill,
	bool& fillSet) const
{
	if (stream != 0)
	{
		std::ios_base::fmtflags flags = stream->flags();
		base.flags(flags);
		mask.flags(flags);
		int width = (int)stream->width();
		base.width(width);
		mask.width(width);
		int precision = (int)stream->precision();
		base.precision(precision);
		mask.precision(precision);
		fill = stream->fill();
		fillSet = true;
	}
}",1,1,main\cpp\logstream.cpp,logstream.get_stream_state,,false,307,326,get_stream_state,,,33,"void logstream.get_stream_state (ANY,ANY,int,bool)"
34725,METHOD,main\cpp\logstream.cpp:<global>,TYPE_DECL,"void logstream::refresh_stream_state()
{
	if (stream != 0)
	{
		int ch;

		if (logstream_base::set_stream_state(*stream, ch))
		{
			stream->fill(ch);
		}
	}
}",1,1,main\cpp\logstream.cpp,logstream.refresh_stream_state,,false,328,339,refresh_stream_state,,,34,void logstream.refresh_stream_state ()
34758,METHOD,main\cpp\manualtriggeringpolicy.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\manualtriggeringpolicy.cpp,main\cpp\manualtriggeringpolicy.cpp:<global>,,false,1,46,<global>,,,1,
34762,METHOD,main\cpp\manualtriggeringpolicy.cpp:<global>,TYPE_DECL,"ManualTriggeringPolicy::ManualTriggeringPolicy()
{
}",1,1,main\cpp\manualtriggeringpolicy.cpp,ManualTriggeringPolicy.ManualTriggeringPolicy,,false,28,30,ManualTriggeringPolicy,,,3,ANY ManualTriggeringPolicy.ManualTriggeringPolicy ()
34766,METHOD,main\cpp\manualtriggeringpolicy.cpp:<global>,TYPE_DECL,"bool ManualTriggeringPolicy::isTriggeringEvent(Appender* /* appender */,
	const LOG4CXX_NS::spi::LoggingEventPtr& /* event */,
	const LogString& /* file */,
	size_t /* fileLength */ )
{
	return false;
}",1,1,main\cpp\manualtriggeringpolicy.cpp,ManualTriggeringPolicy.isTriggeringEvent,,false,32,38,isTriggeringEvent,,,4,"bool ManualTriggeringPolicy.isTriggeringEvent (Appender*,ANY,LogString,size_t)"
34776,METHOD,main\cpp\manualtriggeringpolicy.cpp:<global>,TYPE_DECL,"void ManualTriggeringPolicy::activateOptions(Pool& /* p */ )
{
}",1,1,main\cpp\manualtriggeringpolicy.cpp,ManualTriggeringPolicy.activateOptions,,false,40,42,activateOptions,,,5,void ManualTriggeringPolicy.activateOptions (Pool)
34781,METHOD,main\cpp\manualtriggeringpolicy.cpp:<global>,TYPE_DECL,"void ManualTriggeringPolicy::setOption(const LogString& /* option */, const LogString& /* value */ )
{
}",1,1,main\cpp\manualtriggeringpolicy.cpp,ManualTriggeringPolicy.setOption,,false,44,46,setOption,,,6,"void ManualTriggeringPolicy.setOption (LogString,LogString)"
34802,METHOD,main\cpp\mapfilter.cpp:<global>,TYPE_DECL,<global>,1,2,main\cpp\mapfilter.cpp,main\cpp\mapfilter.cpp:<global>,,false,1,139,<global>,,,1,
34805,METHOD,MapFilterPrivate,TYPE_DECL,"MapFilterPrivate() : FilterPrivate(),
		acceptOnMatch(true), mustMatchAll(false) {}",2,45,main\cpp\mapfilter.cpp,MapFilterPrivate.MapFilterPrivate,,false,34,35,MapFilterPrivate,,,1,ANY MapFilterPrivate.MapFilterPrivate ()
34814,METHOD,main\cpp\mapfilter.cpp:<global>,TYPE_DECL,"MapFilter::MapFilter() : Filter(std::make_unique<MapFilterPrivate>())
{

}",1,1,main\cpp\mapfilter.cpp,MapFilter.MapFilter,,false,44,47,MapFilter,,,4,ANY MapFilter.MapFilter ()
34818,METHOD,main\cpp\mapfilter.cpp:<global>,TYPE_DECL,MapFilter::~MapFilter() {},1,26,main\cpp\mapfilter.cpp,MapFilter.~MapFilter,,false,49,49,~MapFilter,,,5,ANY MapFilter.~MapFilter ()
34822,METHOD,main\cpp\mapfilter.cpp:<global>,TYPE_DECL,"void MapFilter::setOption(  const LogString& option,
	const LogString& value)
{
	if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""ACCEPTONMATCH""), LOG4CXX_STR(""acceptonmatch"")))
	{
		priv->acceptOnMatch = OptionConverter::toBoolean(value, priv->acceptOnMatch);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""OPERATOR""), LOG4CXX_STR(""operator"")))
	{
		priv->mustMatchAll = StringHelper::equalsIgnoreCase(value, LOG4CXX_STR(""AND""), LOG4CXX_STR(""and"")) ? true : false;
	}
	else if (!option.empty() && !value.empty())
	{
		priv->keyVals[option] = value;
	}
}",1,2,main\cpp\mapfilter.cpp,MapFilter.setOption,,false,51,66,setOption,,,6,"void MapFilter.setOption (LogString,LogString)"
34930,METHOD,main\cpp\mapfilter.cpp:<global>,TYPE_DECL,"Filter::FilterDecision MapFilter::decide(
	const LOG4CXX_NS::spi::LoggingEventPtr& event) const
{
	if (priv->keyVals.empty())
	{
		return Filter::NEUTRAL;
	}

	bool matched = true;

	for (KeyVals::const_iterator it = priv->keyVals.begin(); it != priv->keyVals.end(); ++it)
	{
		LogString curval;
		event->getMDC(it->first, curval);

		if (curval.empty() || curval != it->second)
		{
			matched = false;
		}
		else
		{
			matched = true;
		}

		if (priv->mustMatchAll != matched)
		{
			break;
		}
	}

	if (priv->acceptOnMatch)
	{
		return matched ? Filter::ACCEPT : Filter::NEUTRAL;
	}
	else
	{
		return matched ? Filter::DENY : Filter::NEUTRAL;
	}
}",1,5,main\cpp\mapfilter.cpp,MapFilter.decide,,false,68,106,decide,,,7,FilterDecision MapFilter.decide (ANY)
35070,METHOD,main\cpp\mapfilter.cpp:<global>,TYPE_DECL,"void MapFilter::setKeyValue(const LogString& strKey, const LogString& strValue)
{
	priv->keyVals[strKey] = strValue;
}",1,1,main\cpp\mapfilter.cpp,MapFilter.setKeyValue,,false,108,111,setKeyValue,,,8,"void MapFilter.setKeyValue (LogString,LogString)"
35090,METHOD,main\cpp\mapfilter.cpp:<global>,TYPE_DECL,"const LogString& MapFilter::getValue(const LogString& strKey) const
{
	static const WideLife<LogString> empty;
	const KeyVals::const_iterator   it(priv->keyVals.find(strKey));

	return (it != priv->keyVals.end() ? it->second : empty.value());
}",1,36,main\cpp\mapfilter.cpp,MapFilter.getValue,,false,113,119,getValue,,,9,LogString MapFilter.getValue (LogString)
35136,METHOD,main\cpp\mapfilter.cpp:<global>,TYPE_DECL,"void MapFilter::setAcceptOnMatch(bool acceptOnMatch1)
{
	priv->acceptOnMatch = acceptOnMatch1;
}",1,1,main\cpp\mapfilter.cpp,MapFilter.setAcceptOnMatch,,false,121,124,setAcceptOnMatch,,,10,void MapFilter.setAcceptOnMatch (bool)
35153,METHOD,main\cpp\mapfilter.cpp:<global>,TYPE_DECL,"bool MapFilter::getAcceptOnMatch() const
{
	return priv->acceptOnMatch;
}",1,8,main\cpp\mapfilter.cpp,MapFilter.getAcceptOnMatch,,false,126,129,getAcceptOnMatch,,,11,bool MapFilter.getAcceptOnMatch ()
35168,METHOD,main\cpp\mapfilter.cpp:<global>,TYPE_DECL,"bool MapFilter::getMustMatchAll() const
{
	return priv->mustMatchAll;
}",1,8,main\cpp\mapfilter.cpp,MapFilter.getMustMatchAll,,false,131,134,getMustMatchAll,,,12,bool MapFilter.getMustMatchAll ()
35183,METHOD,main\cpp\mapfilter.cpp:<global>,TYPE_DECL,"void MapFilter::setMustMatchAll(bool mustMatchAll1)
{
	priv->mustMatchAll = mustMatchAll1;
}",1,1,main\cpp\mapfilter.cpp,MapFilter.setMustMatchAll,,false,136,139,setMustMatchAll,,,13,void MapFilter.setMustMatchAll (bool)
35211,METHOD,main\cpp\mdc.cpp:<global>,TYPE_DECL,<global>,1,7,main\cpp\mdc.cpp,main\cpp\mdc.cpp:<global>,,false,1,274,<global>,,,1,
35213,METHOD,main\cpp\mdc.cpp:<global>,TYPE_DECL,"MDC::MDC(const std::string& key1, const std::string& value) : key()
{
	Transcoder::decode(key1, key);
	LOG4CXX_DECODE_CHAR(v, value);
	putLS(key, v);
}",1,1,main\cpp\mdc.cpp,MDC.MDC,,false,30,35,MDC,,,1,"ANY MDC.MDC (ANY,ANY)"
35231,METHOD,main\cpp\mdc.cpp:<global>,TYPE_DECL,"MDC::~MDC()
{
	LogString prevVal;
	remove(key, prevVal);
}",1,1,main\cpp\mdc.cpp,MDC.~MDC,,false,37,41,~MDC,,,2,ANY MDC.~MDC ()
35239,METHOD,main\cpp\mdc.cpp:<global>,TYPE_DECL,"void MDC::putLS(const LogString& key, const LogString& value)
{
	ThreadSpecificData::put(key, value);
}",1,1,main\cpp\mdc.cpp,MDC.putLS,,false,43,46,putLS,,,3,"void MDC.putLS (LogString,LogString)"
35251,METHOD,main\cpp\mdc.cpp:<global>,TYPE_DECL,"void MDC::put(const std::string& key, const std::string& value)
{
	LOG4CXX_DECODE_CHAR(lkey, key);
	LOG4CXX_DECODE_CHAR(lvalue, value);
	putLS(lkey, lvalue);
}",1,1,main\cpp\mdc.cpp,MDC.put,,false,48,53,put,,,4,"void MDC.put (ANY,ANY)"
35266,METHOD,main\cpp\mdc.cpp:<global>,TYPE_DECL,"bool MDC::get(const LogString& key, LogString& value)
{
	ThreadSpecificData* data = ThreadSpecificData::getCurrentData();

	if (data != 0)
	{
		Map& map = data->getMap();

		Map::iterator it = map.find(key);

		if (it != map.end())
		{
			value.append(it->second);
			return true;
		}

		data->recycle();
	}

	return false;
}",1,1,main\cpp\mdc.cpp,MDC.get,,false,55,75,get,,,5,"bool MDC.get (LogString,LogString)"
35322,METHOD,main\cpp\mdc.cpp:<global>,TYPE_DECL,"std::string MDC::get(const std::string& key)
{
	LOG4CXX_DECODE_CHAR(lkey, key);
	LogString lvalue;

	if (get(lkey, lvalue))
	{
		LOG4CXX_ENCODE_CHAR(value, lvalue);
		return value;
	}

	return std::string();
}",1,1,main\cpp\mdc.cpp,MDC.get,,false,77,89,get,,,6,string MDC.get (ANY)
35346,METHOD,main\cpp\mdc.cpp:<global>,TYPE_DECL,"bool MDC::remove(const LogString& key, LogString& value)
{
	ThreadSpecificData* data = ThreadSpecificData::getCurrentData();

	if (data != 0)
	{
		Map& map = data->getMap();
		Map::iterator it;

		if ((it = map.find(key)) != map.end())
		{
			value = it->second;
			map.erase(it);
			data->recycle();
			return true;
		}
	}

	return false;
}",1,1,main\cpp\mdc.cpp,MDC.remove,,false,91,110,remove,,,7,"bool MDC.remove (LogString,LogString)"
35404,METHOD,main\cpp\mdc.cpp:<global>,TYPE_DECL,"std::string MDC::remove(const std::string& key)
{
	LOG4CXX_DECODE_CHAR(lkey, key);
	LogString lvalue;

	if (remove(lkey, lvalue))
	{
		LOG4CXX_ENCODE_CHAR(value, lvalue);
		return value;
	}

	return std::string();
}",1,1,main\cpp\mdc.cpp,MDC.remove,,false,112,124,remove,,,8,string MDC.remove (ANY)
35428,METHOD,main\cpp\mdc.cpp:<global>,TYPE_DECL,"void MDC::clear()
{
	ThreadSpecificData* data = ThreadSpecificData::getCurrentData();

	if (data != 0)
	{
		Map& map = data->getMap();
		map.erase(map.begin(), map.end());
		data->recycle();
	}
}",1,1,main\cpp\mdc.cpp,MDC.clear,,false,127,137,clear,,,9,void MDC.clear ()
35478,METHOD,main\cpp\mdcpatternconverter.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\mdcpatternconverter.cpp,main\cpp\mdcpatternconverter.cpp:<global>,,false,1,83,<global>,,,1,
35482,METHOD,main\cpp\mdcpatternconverter.cpp:<global>,TYPE_DECL,"MDCPatternConverter::MDCPatternConverter
	( const LogString&              name
	, const LogString&              style
	, const std::vector<LogString>& options
	)
	: LoggingEventPatternConverter(std::make_unique<PatternConverter::PatternConverterPrivate>(name, style))
{
}",1,1,main\cpp\mdcpatternconverter.cpp,MDCPatternConverter.MDCPatternConverter,,false,28,35,MDCPatternConverter,,,3,"ANY MDCPatternConverter.MDCPatternConverter (LogString,LogString,ANY)"
35489,METHOD,main\cpp\mdcpatternconverter.cpp:<global>,TYPE_DECL,"PatternConverterPtr MDCPatternConverter::newInstance(
	const std::vector<LogString>& options)
{
	if (options.empty())
	{
		static helpers::WideLife<PatternConverterPtr> def = std::make_shared<MDCPatternConverter>();
		return def;
	}
	return std::make_shared<MDCPatternConverter>(LogString(), options.front());
}",1,1,main\cpp\mdcpatternconverter.cpp,MDCPatternConverter.newInstance,,false,37,46,newInstance,,,4,PatternConverterPtr MDCPatternConverter.newInstance (ANY)
35523,METHOD,main\cpp\mdcpatternconverter.cpp:<global>,TYPE_DECL,"void MDCPatternConverter::format
	( const spi::LoggingEventPtr& event
	, LogString&                  toAppendTo
	, helpers::Pool&           /* p */
	) const
{
	size_t startIndex = toAppendTo.size();
	if (m_priv->name.empty()) // Full MDC required?
	{
		bool first = true;
		for (auto key : event->getMDCKeySet())
		{
			toAppendTo.append(first ? LOG4CXX_STR(""{"") : LOG4CXX_STR("",""));
			JSONLayout::appendItem(key, toAppendTo);
			toAppendTo.append(LOG4CXX_STR("":""));
			LogString value;
			event->getMDC(key, value);
			JSONLayout::appendItem(value, toAppendTo);
			first = false;
		}
		if (!first)
			toAppendTo.append(LOG4CXX_STR(""}""));
	}
	else
		event->getMDC(m_priv->name, toAppendTo);
	if (!m_priv->style.empty()) // In a quoted context?
	{
		auto quote = m_priv->style.front();
		size_t endIndex;
		while ((endIndex = toAppendTo.find(quote, startIndex)) != toAppendTo.npos)
		{
			toAppendTo.insert(endIndex + 1, 1, quote);
			startIndex = endIndex + 2;
		}
	}
}",1,1,main\cpp\mdcpatternconverter.cpp,MDCPatternConverter.format,,false,48,83,format,,,5,"void MDCPatternConverter.format (ANY,LogString,ANY)"
35680,METHOD,main\cpp\messagebuffer.cpp:<global>,TYPE_DECL,<global>,1,31,main\cpp\messagebuffer.cpp,main\cpp\messagebuffer.cpp:<global>,,false,1,812,<global>,,,1,
35686,METHOD,anonymous_namespace_1.StringOrStream,TYPE_DECL,"StringOrStream()
		: stream(nullptr)
		{}",2,4,main\cpp\messagebuffer.cpp,anonymous_namespace_2.StringOrStream.StringOrStream,,false,40,42,StringOrStream,,,3,ANY anonymous_namespace_2.StringOrStream.StringOrStream ()
35690,METHOD,anonymous_namespace_1.StringOrStream,TYPE_DECL,"~StringOrStream()
	{
#if !LOG4CXX_HAS_THREAD_LOCAL
		delete stream;
#endif
	}",2,2,main\cpp\messagebuffer.cpp,anonymous_namespace_3.StringOrStream.~StringOrStream,,false,43,48,~StringOrStream,,,4,ANY anonymous_namespace_3.StringOrStream.~StringOrStream ()
35696,METHOD,anonymous_namespace_1.StringOrStream,TYPE_DECL,"std::basic_ostringstream<T>& StreamFromBuf()
	{
		if (!this->stream)
		{
#if LOG4CXX_HAS_THREAD_LOCAL
			const static std::basic_ostringstream<T> initialState;
			thread_local static std::basic_ostringstream<T> sStream;
			this->stream = &sStream;
			this->stream->clear();
			this->stream->precision(initialState.precision());
			this->stream->width(initialState.width());
			this->stream->setf(initialState.flags(), ~initialState.flags());
			this->stream->fill(initialState.fill());
#else
			this->stream = new std::basic_ostringstream<T>();
#endif
			auto index = this->buf.size();
			this->stream->str(std::move(this->buf));
			this->stream->seekp(index);
		}
		return *this->stream;
	}",2,2,main\cpp\messagebuffer.cpp,anonymous_namespace_4.StringOrStream.StreamFromBuf,,false,52,73,StreamFromBuf,,,5,basic_ostringstream<T> anonymous_namespace_4.StringOrStream.StreamFromBuf ()
35746,METHOD,anonymous_namespace_1.StringOrStream,TYPE_DECL,"std::basic_string<T>& BufFromStream()
	{
		if (this->stream)
		{
			this->buf = std::move(*this->stream).str();
			this->stream->seekp(0);
			this->stream->str(std::basic_string<T>());
			this->stream->clear();
		}
		return this->buf;
	}",2,2,main\cpp\messagebuffer.cpp,anonymous_namespace_5.StringOrStream.BufFromStream,,false,77,87,BufFromStream,,,6,basic_string<T> anonymous_namespace_5.StringOrStream.BufFromStream ()
35798,METHOD,main\cpp\messagebuffer.cpp:<global>,TYPE_DECL,"CharMessageBuffer::CharMessageBuffer() : m_priv(std::make_unique<CharMessageBufferPrivate>())
{
}",1,1,main\cpp\messagebuffer.cpp,CharMessageBuffer.CharMessageBuffer,,false,93,95,CharMessageBuffer,,,3,ANY CharMessageBuffer.CharMessageBuffer ()
35802,METHOD,main\cpp\messagebuffer.cpp:<global>,TYPE_DECL,"CharMessageBuffer::~CharMessageBuffer()
{
}",1,1,main\cpp\messagebuffer.cpp,CharMessageBuffer.~CharMessageBuffer,,false,97,99,~CharMessageBuffer,,,4,ANY CharMessageBuffer.~CharMessageBuffer ()
35806,METHOD,main\cpp\messagebuffer.cpp:<global>,TYPE_DECL,"CharMessageBuffer& CharMessageBuffer::operator<<(const std::basic_string<char>& msg)
{
	if (m_priv->stream == 0)
	{
		m_priv->buf.append(msg);
	}
	else
	{
		*m_priv->stream << msg;
	}

	return *this;
}",1,1,main\cpp\messagebuffer.cpp,CharMessageBuffer.operator <<,,false,101,113,operator <<,,,5,CharMessageBuffer CharMessageBuffer.operator << (ANY)
35836,METHOD,main\cpp\messagebuffer.cpp:<global>,TYPE_DECL,"CharMessageBuffer& CharMessageBuffer::operator<<(const char* msg)
{
	const char* actualMsg = msg;

	if (actualMsg == 0)
	{
		actualMsg = ""null"";
	}

	if (m_priv->stream == 0)
	{
		m_priv->buf.append(actualMsg);
	}
	else
	{
		*m_priv->stream << actualMsg;
	}

	return *this;
}",1,1,main\cpp\messagebuffer.cpp,CharMessageBuffer.operator <<,,false,115,134,operator <<,,,6,CharMessageBuffer CharMessageBuffer.operator << (char*)
35878,METHOD,main\cpp\messagebuffer.cpp:<global>,TYPE_DECL,"CharMessageBuffer& CharMessageBuffer::operator<<(char* msg)
{
	return operator<<((const char*) msg);
}",1,1,main\cpp\messagebuffer.cpp,CharMessageBuffer.operator <<,,false,135,138,operator <<,,,7,CharMessageBuffer CharMessageBuffer.operator << (char*)
35888,METHOD,main\cpp\messagebuffer.cpp:<global>,TYPE_DECL,"CharMessageBuffer& CharMessageBuffer::operator<<(const char msg)
{
	if (m_priv->stream == 0)
	{
		m_priv->buf.append(1, msg);
	}
	else
	{
		m_priv->buf.assign(1, msg);
		*m_priv->stream << m_priv->buf;
	}

	return *this;
}",1,1,main\cpp\messagebuffer.cpp,CharMessageBuffer.operator <<,,false,140,153,operator <<,,,8,CharMessageBuffer CharMessageBuffer.operator << (char)
35929,METHOD,main\cpp\messagebuffer.cpp:<global>,TYPE_DECL,"CharMessageBuffer::operator std::basic_ostream<char>& ()
{
	return m_priv->StreamFromBuf();
}",1,1,main\cpp\messagebuffer.cpp,CharMessageBuffer.operator ? &,,false,155,158,operator ? &,,,9,ANY CharMessageBuffer.operator ? & ()
35938,METHOD,main\cpp\messagebuffer.cpp:<global>,TYPE_DECL,"std::basic_string<char> CharMessageBuffer::extract_str(std::basic_ostream<char>&)
{
	return std::move(m_priv->BufFromStream());
}",1,1,main\cpp\messagebuffer.cpp,CharMessageBuffer.extract_str,,false,160,163,extract_str,,,10,basic_string<char> CharMessageBuffer.extract_str (ANY)
35952,METHOD,main\cpp\messagebuffer.cpp:<global>,TYPE_DECL,"std::basic_string<char> CharMessageBuffer::extract_str(CharMessageBuffer&)
{
	return std::move(m_priv->buf);
}",1,1,main\cpp\messagebuffer.cpp,CharMessageBuffer.extract_str,,false,165,168,extract_str,,,11,basic_string<char> CharMessageBuffer.extract_str (CharMessageBuffer)
35965,METHOD,main\cpp\messagebuffer.cpp:<global>,TYPE_DECL,"const std::basic_string<char>& CharMessageBuffer::str(std::basic_ostream<char>&)
{
	return m_priv->BufFromStream();
}",1,1,main\cpp\messagebuffer.cpp,CharMessageBuffer.str,,false,170,173,str,,,12,basic_string<char> CharMessageBuffer.str (ANY)
35975,METHOD,main\cpp\messagebuffer.cpp:<global>,TYPE_DECL,"const std::basic_string<char>& CharMessageBuffer::str(CharMessageBuffer&)
{
	return m_priv->buf;
}",1,1,main\cpp\messagebuffer.cpp,CharMessageBuffer.str,,false,175,178,str,,,13,basic_string<char> CharMessageBuffer.str (CharMessageBuffer)
35984,METHOD,main\cpp\messagebuffer.cpp:<global>,TYPE_DECL,"bool CharMessageBuffer::hasStream() const
{
	return (m_priv->stream != 0);
}",1,1,main\cpp\messagebuffer.cpp,CharMessageBuffer.hasStream,,false,180,183,hasStream,,,14,bool CharMessageBuffer.hasStream ()
35994,METHOD,main\cpp\messagebuffer.cpp:<global>,TYPE_DECL,"std::ostream& CharMessageBuffer::operator<<(ios_base_manip manip)
{
	std::ostream& s = *this;
	(*manip)(s);
	return s;
}",1,1,main\cpp\messagebuffer.cpp,CharMessageBuffer.operator <<,,false,185,190,operator <<,,,15,ostream CharMessageBuffer.operator << (ios_base_manip)
36010,METHOD,main\cpp\messagebuffer.cpp:<global>,TYPE_DECL,"std::ostream& CharMessageBuffer::operator<<(bool val)
{
	return ((std::ostream&) * this).operator << (val);
}",1,1,main\cpp\messagebuffer.cpp,CharMessageBuffer.operator <<,,false,192,195,operator <<,,,16,ostream CharMessageBuffer.operator << (bool)
36024,METHOD,main\cpp\messagebuffer.cpp:<global>,TYPE_DECL,"std::ostream& CharMessageBuffer::operator<<(short val)
{
	return ((std::ostream&) * this).operator << (val);
}",1,1,main\cpp\messagebuffer.cpp,CharMessageBuffer.operator <<,,false,196,199,operator <<,,,17,ostream CharMessageBuffer.operator << (short)
36038,METHOD,main\cpp\messagebuffer.cpp:<global>,TYPE_DECL,"std::ostream& CharMessageBuffer::operator<<(int val)
{
	return ((std::ostream&) * this).operator << (val);
}",1,1,main\cpp\messagebuffer.cpp,CharMessageBuffer.operator <<,,false,200,203,operator <<,,,18,ostream CharMessageBuffer.operator << (int)
36052,METHOD,main\cpp\messagebuffer.cpp:<global>,TYPE_DECL,"std::ostream& CharMessageBuffer::operator<<(unsigned int val)
{
	return ((std::ostream&) * this).operator << (val);
}",1,1,main\cpp\messagebuffer.cpp,CharMessageBuffer.operator <<,,false,204,207,operator <<,,,19,ostream CharMessageBuffer.operator << (unsigned int)
36066,METHOD,main\cpp\messagebuffer.cpp:<global>,TYPE_DECL,"std::ostream& CharMessageBuffer::operator<<(long val)
{
	return ((std::ostream&) * this).operator << (val);
}",1,1,main\cpp\messagebuffer.cpp,CharMessageBuffer.operator <<,,false,208,211,operator <<,,,20,ostream CharMessageBuffer.operator << (long)
36080,METHOD,main\cpp\messagebuffer.cpp:<global>,TYPE_DECL,"std::ostream& CharMessageBuffer::operator<<(unsigned long val)
{
	return ((std::ostream&) * this).operator << (val);
}",1,1,main\cpp\messagebuffer.cpp,CharMessageBuffer.operator <<,,false,212,215,operator <<,,,21,ostream CharMessageBuffer.operator << (long unsigned)
36094,METHOD,main\cpp\messagebuffer.cpp:<global>,TYPE_DECL,"std::ostream& CharMessageBuffer::operator<<(float val)
{
	return ((std::ostream&) * this).operator << (val);
}",1,1,main\cpp\messagebuffer.cpp,CharMessageBuffer.operator <<,,false,216,219,operator <<,,,22,ostream CharMessageBuffer.operator << (float)
36108,METHOD,main\cpp\messagebuffer.cpp:<global>,TYPE_DECL,"std::ostream& CharMessageBuffer::operator<<(double val)
{
	return ((std::ostream&) * this).operator << (val);
}",1,1,main\cpp\messagebuffer.cpp,CharMessageBuffer.operator <<,,false,220,223,operator <<,,,23,ostream CharMessageBuffer.operator << (double)
36122,METHOD,main\cpp\messagebuffer.cpp:<global>,TYPE_DECL,"std::ostream& CharMessageBuffer::operator<<(long double val)
{
	return ((std::ostream&) * this).operator << (val);
}",1,1,main\cpp\messagebuffer.cpp,CharMessageBuffer.operator <<,,false,224,227,operator <<,,,24,ostream CharMessageBuffer.operator << (long double)
36136,METHOD,main\cpp\messagebuffer.cpp:<global>,TYPE_DECL,"std::ostream& CharMessageBuffer::operator<<(void* val)
{
	return ((std::ostream&) * this).operator << (val);
}",1,1,main\cpp\messagebuffer.cpp,CharMessageBuffer.operator <<,,false,228,231,operator <<,,,25,ostream CharMessageBuffer.operator << (void*)
36161,METHOD,main\cpp\messagepatternconverter.cpp:<global>,TYPE_DECL,<global>,1,2,main\cpp\messagepatternconverter.cpp,main\cpp\messagepatternconverter.cpp:<global>,,false,1,88,<global>,,,1,
36168,METHOD,anonymous_namespace_1.QuotedMessagePatternConverter,TYPE_DECL,"QuotedMessagePatternConverter(logchar quote)
			: LoggingEventPatternConverter(LOG4CXX_STR(""Message""), LOG4CXX_STR(""quoted""))
			, m_quote(quote)
			{}",3,5,main\cpp\messagepatternconverter.cpp,anonymous_namespace_2.QuotedMessagePatternConverter.QuotedMessagePatternConverter,,false,37,40,QuotedMessagePatternConverter,,,2,ANY anonymous_namespace_2.QuotedMessagePatternConverter.QuotedMessagePatternConverter (logchar)
36173,METHOD,anonymous_namespace_1.QuotedMessagePatternConverter,TYPE_DECL,"void format
			( const spi::LoggingEventPtr& event
			, LogString&                  toAppendTo
			, helpers::Pool&              p
			) const override
		{
			auto& input = event->getRenderedMessage();
			size_t endIndex, startIndex = 0;
			while ((endIndex = input.find(m_quote, startIndex)) != input.npos)
			{
				toAppendTo.append(input.substr(startIndex, endIndex - startIndex + 1));
				toAppendTo += m_quote;
				startIndex = endIndex + 1;
			}
			toAppendTo.append(input.substr(startIndex));
		}",3,3,main\cpp\messagepatternconverter.cpp,anonymous_namespace_3.QuotedMessagePatternConverter.format,,false,45,60,format,,,3,"void anonymous_namespace_3.QuotedMessagePatternConverter.format (ANY,LogString,ANY)"
36237,METHOD,main\cpp\messagepatternconverter.cpp:<global>,TYPE_DECL,"MessagePatternConverter::MessagePatternConverter()
	: LoggingEventPatternConverter(LOG4CXX_STR(""Message"")
	, LOG4CXX_STR(""message""))
{
}",1,1,main\cpp\messagepatternconverter.cpp,MessagePatternConverter.MessagePatternConverter,,false,64,68,MessagePatternConverter,,,4,ANY MessagePatternConverter.MessagePatternConverter ()
36241,METHOD,main\cpp\messagepatternconverter.cpp:<global>,TYPE_DECL,"PatternConverterPtr MessagePatternConverter::newInstance(
	const std::vector<LogString>& options)
{
	if (options.empty() || options.front().empty())
	{
		static helpers::WideLife<PatternConverterPtr> def = std::make_shared<MessagePatternConverter>();
		return def;
	}
	return std::make_shared<QuotedMessagePatternConverter>(options.front().front());
}",1,1,main\cpp\messagepatternconverter.cpp,MessagePatternConverter.newInstance,,false,70,79,newInstance,,,5,PatternConverterPtr MessagePatternConverter.newInstance (ANY)
36283,METHOD,main\cpp\messagepatternconverter.cpp:<global>,TYPE_DECL,"void MessagePatternConverter::format
	( const spi::LoggingEventPtr& event
	, LogString&                  toAppendTo
	, helpers::Pool&           /* p */
	) const
{
	toAppendTo.append(event->getRenderedMessage());
}",1,1,main\cpp\messagepatternconverter.cpp,MessagePatternConverter.format,,false,81,88,format,,,6,"void MessagePatternConverter.format (ANY,LogString,ANY)"
36309,METHOD,main\cpp\methodlocationpatternconverter.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\methodlocationpatternconverter.cpp,main\cpp\methodlocationpatternconverter.cpp:<global>,,false,1,49,<global>,,,1,
36313,METHOD,main\cpp\methodlocationpatternconverter.cpp:<global>,TYPE_DECL,"MethodLocationPatternConverter::MethodLocationPatternConverter() :
	LoggingEventPatternConverter(LOG4CXX_STR(""Method""),
		LOG4CXX_STR(""method""))
{
}",1,1,main\cpp\methodlocationpatternconverter.cpp,MethodLocationPatternConverter.MethodLocationPatternConverter,,false,30,34,MethodLocationPatternConverter,,,3,ANY MethodLocationPatternConverter.MethodLocationPatternConverter ()
36317,METHOD,main\cpp\methodlocationpatternconverter.cpp:<global>,TYPE_DECL,"PatternConverterPtr MethodLocationPatternConverter::newInstance(
	const std::vector<LogString>& /* options */ )
{
	static WideLife<PatternConverterPtr> def = std::make_shared<MethodLocationPatternConverter>();
	return def;
}",1,1,main\cpp\methodlocationpatternconverter.cpp,MethodLocationPatternConverter.newInstance,,false,36,41,newInstance,,,4,PatternConverterPtr MethodLocationPatternConverter.newInstance (ANY)
36331,METHOD,main\cpp\methodlocationpatternconverter.cpp:<global>,TYPE_DECL,"void MethodLocationPatternConverter::format(
	const LoggingEventPtr& event,
	LogString& toAppendTo,
	Pool& /* p */ ) const
{
	append(toAppendTo, event->getLocationInformation().getMethodName());
}",1,1,main\cpp\methodlocationpatternconverter.cpp,MethodLocationPatternConverter.format,,false,43,49,format,,,5,"void MethodLocationPatternConverter.format (LoggingEventPtr,LogString,Pool)"
36384,METHOD,main\cpp\multiprocessrollingfileappender.cpp:<global>,TYPE_DECL,<global>,1,5,main\cpp\multiprocessrollingfileappender.cpp,main\cpp\multiprocessrollingfileappender.cpp:<global>,,false,1,695,<global>,,,1,
36387,METHOD,MultiprocessRollingFileAppenderPriv,TYPE_DECL,"MultiprocessRollingFileAppenderPriv() :
		FileAppenderPriv(),
		fileLength(0) {}",2,18,main\cpp\multiprocessrollingfileappender.cpp,MultiprocessRollingFileAppenderPriv.MultiprocessRollingFileAppenderPriv,,false,47,49,MultiprocessRollingFileAppenderPriv,,,1,ANY MultiprocessRollingFileAppenderPriv.MultiprocessRollingFileAppenderPriv ()
36397,METHOD,main\cpp\multiprocessrollingfileappender.cpp:<global>,TYPE_DECL,"MultiprocessRollingFileAppender::MultiprocessRollingFileAppender() :
	FileAppender (std::make_unique<MultiprocessRollingFileAppenderPriv>())
{
}",1,1,main\cpp\multiprocessrollingfileappender.cpp,MultiprocessRollingFileAppender.MultiprocessRollingFileAppender,,false,80,83,MultiprocessRollingFileAppender,,,4,ANY MultiprocessRollingFileAppender.MultiprocessRollingFileAppender ()
36401,METHOD,main\cpp\multiprocessrollingfileappender.cpp:<global>,TYPE_DECL,"void MultiprocessRollingFileAppender::activateOptions(Pool& p)
{
	if (_priv->rollingPolicy == NULL)
	{
		auto fwrp = std::make_shared<FixedWindowRollingPolicy>();
		fwrp->setFileNamePattern(getFile() + LOG4CXX_STR("".%i""));
		_priv->rollingPolicy = fwrp;
	}

	//
	//  if no explicit triggering policy and rolling policy is both.
	//
	if (_priv->triggeringPolicy == NULL)
	{
		TriggeringPolicyPtr trig = LOG4CXX_NS::cast<TriggeringPolicy>(_priv->rollingPolicy);

		if (trig != NULL)
		{
			_priv->triggeringPolicy = trig;
		}
	}

	if (_priv->triggeringPolicy == NULL)
	{
		_priv->triggeringPolicy = std::make_shared<ManualTriggeringPolicy>();
	}

	{
		std::lock_guard<std::recursive_mutex> lock(_priv->mutex);
		_priv->triggeringPolicy->activateOptions(p);
		_priv->rollingPolicy->activateOptions(p);

		try
		{
			RolloverDescriptionPtr rollover1 =
				_priv->rollingPolicy->initialize(getFile(), getAppend(), p);

			if (rollover1 != NULL)
			{
				ActionPtr syncAction(rollover1->getSynchronous()...",1,5,main\cpp\multiprocessrollingfileappender.cpp,MultiprocessRollingFileAppender.activateOptions,,false,88,169,activateOptions,,,5,void MultiprocessRollingFileAppender.activateOptions (Pool)
36716,METHOD,main\cpp\multiprocessrollingfileappender.cpp:<global>,TYPE_DECL,"void MultiprocessRollingFileAppender::releaseFileLock(apr_file_t* lock_file)
{
	if (lock_file)
	{
		apr_status_t stat = apr_file_unlock(lock_file);

		if (stat != APR_SUCCESS)
		{
			LogLog::warn(LOG4CXX_STR(""flock: unlock failed""));
		}

		apr_file_close(lock_file);
		lock_file = NULL;
	}
}",1,1,main\cpp\multiprocessrollingfileappender.cpp,MultiprocessRollingFileAppender.releaseFileLock,,false,171,185,releaseFileLock,,,6,void MultiprocessRollingFileAppender.releaseFileLock (apr_file_t*)
36745,METHOD,main\cpp\multiprocessrollingfileappender.cpp:<global>,TYPE_DECL,"bool MultiprocessRollingFileAppender::rollover(Pool& p)
{
	std::lock_guard<std::recursive_mutex> lock(_priv->mutex);
	return rolloverInternal(p);
}",1,44,main\cpp\multiprocessrollingfileappender.cpp,MultiprocessRollingFileAppender.rollover,,false,202,206,rollover,,,7,bool MultiprocessRollingFileAppender.rollover (Pool)
36772,METHOD,main\cpp\multiprocessrollingfileappender.cpp:<global>,TYPE_DECL,"bool MultiprocessRollingFileAppender::rolloverInternal(Pool& p)
{
	//
	//   can't roll without a policy
	//
	if (_priv->rollingPolicy != NULL)
	{

		{
			LogString fileName(getFile());
			RollingPolicyBasePtr basePolicy = LOG4CXX_NS::cast<RollingPolicyBase>(_priv->rollingPolicy);
			apr_time_t n = apr_time_now();
			ObjectPtr obj = std::make_shared<Date>(n);
			LogString fileNamePattern;

			if (basePolicy)
			{
				if (basePolicy->getPatternConverterList().size())
				{
					(*(basePolicy->getPatternConverterList().begin()))->format(obj, fileNamePattern, p);
					fileName = std::string(fileNamePattern);
				}
			}

			bool bAlreadyRolled = true;
			char szDirName[MAX_FILE_LEN] = {'\0'};
			char szBaseName[MAX_FILE_LEN] = {'\0'};
			char szUid[MAX_FILE_LEN] = {'\0'};
			memcpy(szDirName, fileName.c_str(), fileName.size() > MAX_FILE_LEN ? MAX_FILE_LEN : fileName.size());
			memcpy(szBaseName, fileName.c_str(), fileName.size() > MAX_FILE_LEN ? MAX_FILE_LEN : fileName.size());
			apr_u...",1,5,main\cpp\multiprocessrollingfileappender.cpp,MultiprocessRollingFileAppender.rolloverInternal,,false,208,455,rolloverInternal,,,8,bool MultiprocessRollingFileAppender.rolloverInternal (Pool)
37642,METHOD,main\cpp\multiprocessrollingfileappender.cpp:<global>,TYPE_DECL,"void MultiprocessRollingFileAppender::reopenLatestFile(Pool& p)
{
	closeWriter();
	OutputStreamPtr os = std::make_shared<FileOutputStream>(getFile(), true);
	WriterPtr newWriter(createWriter(os));
	setFile(getFile());
	setWriter(newWriter);
	_priv->fileLength = File().setPath(getFile()).length(p);
	writeHeader(p);
}",1,1,main\cpp\multiprocessrollingfileappender.cpp,MultiprocessRollingFileAppender.reopenLatestFile,,false,460,469,reopenLatestFile,,,9,void MultiprocessRollingFileAppender.reopenLatestFile (Pool)
37690,METHOD,main\cpp\multiprocessrollingfileappender.cpp:<global>,TYPE_DECL,"void MultiprocessRollingFileAppender::subAppend(const LoggingEventPtr& event, Pool& p)
{
	// The rollover check must precede actual writing. This is the
	// only correct behavior for time driven triggers.
	if (
		_priv->triggeringPolicy->isTriggeringEvent(
			this, event, getFile(), getFileLength()))
	{
		//
		//   wrap rollover request in try block since
		//    rollover may fail in case read access to directory
		//    is not provided.  However appender should still be in good
		//     condition and the append should still happen.
		try
		{
			_priv->_event = event;
			rolloverInternal(p);
		}
		catch (std::exception& ex)
		{
			LogLog::warn(LOG4CXX_STR(""Exception during rollover attempt.""));
			LogString exmsg;
			LOG4CXX_NS::helpers::Transcoder::decode(ex.what(), exmsg);
			_priv->errorHandler->error(exmsg);
		}
	}

	//do re-check before every write
	//
	apr_finfo_t finfo1, finfo2;
	apr_status_t st1, st2;
	const WriterPtr writer = getWriter();
	const FileOutputStreamPtr fos = LO...",1,2,main\cpp\multiprocessrollingfileappender.cpp,MultiprocessRollingFileAppender.subAppend,,false,475,537,subAppend,,,10,"void MultiprocessRollingFileAppender.subAppend (LoggingEventPtr,Pool)"
37891,METHOD,main\cpp\multiprocessrollingfileappender.cpp:<global>,TYPE_DECL,"RollingPolicyPtr MultiprocessRollingFileAppender::getRollingPolicy() const
{
	return _priv->rollingPolicy;
}",1,8,main\cpp\multiprocessrollingfileappender.cpp,MultiprocessRollingFileAppender.getRollingPolicy,,false,543,546,getRollingPolicy,,,11,RollingPolicyPtr MultiprocessRollingFileAppender.getRollingPolicy ()
37906,METHOD,main\cpp\multiprocessrollingfileappender.cpp:<global>,TYPE_DECL,"TriggeringPolicyPtr MultiprocessRollingFileAppender::getTriggeringPolicy() const
{
	return _priv->triggeringPolicy;
}",1,8,main\cpp\multiprocessrollingfileappender.cpp,MultiprocessRollingFileAppender.getTriggeringPolicy,,false,552,555,getTriggeringPolicy,,,12,TriggeringPolicyPtr MultiprocessRollingFileAppender.getTriggeringPolicy ()
37921,METHOD,main\cpp\multiprocessrollingfileappender.cpp:<global>,TYPE_DECL,"void MultiprocessRollingFileAppender::setRollingPolicy(const RollingPolicyPtr& policy)
{
	_priv->rollingPolicy = policy;

	TimeBasedRollingPolicyPtr timeBased = LOG4CXX_NS::cast<TimeBasedRollingPolicy>(policy);
	if( timeBased ){
		timeBased->setMultiprocess(true);
	}
}",1,1,main\cpp\multiprocessrollingfileappender.cpp,MultiprocessRollingFileAppender.setRollingPolicy,,false,561,569,setRollingPolicy,,,13,void MultiprocessRollingFileAppender.setRollingPolicy (RollingPolicyPtr)
37956,METHOD,main\cpp\multiprocessrollingfileappender.cpp:<global>,TYPE_DECL,"void MultiprocessRollingFileAppender::setTriggeringPolicy(const TriggeringPolicyPtr& policy)
{
	_priv->triggeringPolicy = policy;
}",1,1,main\cpp\multiprocessrollingfileappender.cpp,MultiprocessRollingFileAppender.setTriggeringPolicy,,false,575,578,setTriggeringPolicy,,,14,void MultiprocessRollingFileAppender.setTriggeringPolicy (TriggeringPolicyPtr)
37973,METHOD,main\cpp\multiprocessrollingfileappender.cpp:<global>,TYPE_DECL,"void MultiprocessRollingFileAppender::close()
{
	FileAppender::close();
}",1,1,main\cpp\multiprocessrollingfileappender.cpp,MultiprocessRollingFileAppender.close,,false,583,586,close,,,15,void MultiprocessRollingFileAppender.close ()
37986,METHOD,LOG4CXX_NS.rolling.CountingOutputStream,TYPE_DECL,"CountingOutputStream(
			OutputStreamPtr& os1, MultiprocessRollingFileAppender* rfa1) :
			os(os1), rfa(rfa1)
		{
		}",3,3,main\cpp\multiprocessrollingfileappender.cpp,LOG4CXX_NS.rolling.CountingOutputStream.CountingOutputStream,,false,615,619,CountingOutputStream,,,3,"ANY LOG4CXX_NS.rolling.CountingOutputStream.CountingOutputStream (OutputStreamPtr,MultiprocessRollingFileAppender*)"
37992,METHOD,LOG4CXX_NS.rolling.CountingOutputStream,TYPE_DECL,"void close(Pool& p)
		{
			os->close(p);
			rfa = 0;
		}",3,3,main\cpp\multiprocessrollingfileappender.cpp,LOG4CXX_NS.rolling.CountingOutputStream.close,,false,624,628,close,,,4,void LOG4CXX_NS.rolling.CountingOutputStream.close (Pool)
38005,METHOD,LOG4CXX_NS.rolling.CountingOutputStream,TYPE_DECL,"void flush(Pool& p)
		{
			os->flush(p);
		}",3,3,main\cpp\multiprocessrollingfileappender.cpp,LOG4CXX_NS.rolling.CountingOutputStream.flush,,false,633,636,flush,,,5,void LOG4CXX_NS.rolling.CountingOutputStream.flush (Pool)
38015,METHOD,LOG4CXX_NS.rolling.CountingOutputStream,TYPE_DECL,"void write(ByteBuffer& buf, Pool& p)
		{
			os->write(buf, p);

			if (rfa != 0)
			{
				rfa->setFileLength(File().setPath(rfa->getFile()).length(p));
			}
		}",3,3,main\cpp\multiprocessrollingfileappender.cpp,LOG4CXX_NS.rolling.CountingOutputStream.write,,false,641,649,write,,,6,"void LOG4CXX_NS.rolling.CountingOutputStream.write (ByteBuffer,Pool)"
38048,METHOD,LOG4CXX_NS.rolling.CountingOutputStream,TYPE_DECL,"OutputStream& getFileOutPutStreamPtr()
		{
			return *os;
		}",3,3,main\cpp\multiprocessrollingfileappender.cpp,LOG4CXX_NS.rolling.CountingOutputStream.getFileOutPutStreamPtr,,false,651,654,getFileOutPutStreamPtr,,,7,OutputStream LOG4CXX_NS.rolling.CountingOutputStream.getFileOutPutStreamPtr ()
38055,METHOD,main\cpp\multiprocessrollingfileappender.cpp:<global>,TYPE_DECL,"WriterPtr MultiprocessRollingFileAppender::createWriter(OutputStreamPtr& os)
{
	OutputStreamPtr cos = std::make_shared<CountingOutputStream>(os, this);
	return FileAppender::createWriter(cos);
}",1,1,main\cpp\multiprocessrollingfileappender.cpp,MultiprocessRollingFileAppender.createWriter,,false,668,672,createWriter,,,17,WriterPtr MultiprocessRollingFileAppender.createWriter (OutputStreamPtr)
38079,METHOD,main\cpp\multiprocessrollingfileappender.cpp:<global>,TYPE_DECL,"size_t MultiprocessRollingFileAppender::getFileLength() const
{
	return _priv->fileLength;
}",1,8,main\cpp\multiprocessrollingfileappender.cpp,MultiprocessRollingFileAppender.getFileLength,,false,678,681,getFileLength,,,18,size_t MultiprocessRollingFileAppender.getFileLength ()
38094,METHOD,main\cpp\multiprocessrollingfileappender.cpp:<global>,TYPE_DECL,"void MultiprocessRollingFileAppender::setFileLength(size_t length)
{
	_priv->fileLength = length;
}",1,1,main\cpp\multiprocessrollingfileappender.cpp,MultiprocessRollingFileAppender.setFileLength,,false,683,686,setFileLength,,,19,void MultiprocessRollingFileAppender.setFileLength (size_t)
38111,METHOD,main\cpp\multiprocessrollingfileappender.cpp:<global>,TYPE_DECL,"void MultiprocessRollingFileAppender::incrementFileLength(size_t increment)
{
	_priv->fileLength += increment;
}",1,1,main\cpp\multiprocessrollingfileappender.cpp,MultiprocessRollingFileAppender.incrementFileLength,,false,692,695,incrementFileLength,,,20,void MultiprocessRollingFileAppender.incrementFileLength (size_t)
38141,METHOD,main\cpp\nameabbreviator.cpp:<global>,TYPE_DECL,<global>,1,2,main\cpp\nameabbreviator.cpp,main\cpp\nameabbreviator.cpp:<global>,,false,1,366,<global>,,,1,
38145,METHOD,main\cpp\nameabbreviator.cpp:<global>,TYPE_DECL,"NameAbbreviator::NameAbbreviator()
{
}",1,1,main\cpp\nameabbreviator.cpp,NameAbbreviator.NameAbbreviator,,false,30,32,NameAbbreviator,,,3,ANY NameAbbreviator.NameAbbreviator ()
38149,METHOD,main\cpp\nameabbreviator.cpp:<global>,TYPE_DECL,"NameAbbreviator::~NameAbbreviator()
{
}",1,1,main\cpp\nameabbreviator.cpp,NameAbbreviator.~NameAbbreviator,,false,34,36,~NameAbbreviator,,,4,ANY NameAbbreviator.~NameAbbreviator ()
38159,METHOD,LOG4CXX_NS.pattern.NOPAbbreviator,TYPE_DECL,"void abbreviate(LogString::size_type /* nameStart */, LogString& /* buf */) const override
		{
		}",3,3,main\cpp\nameabbreviator.cpp,LOG4CXX_NS.pattern.NOPAbbreviator.abbreviate,,false,64,66,abbreviate,,,4,"void LOG4CXX_NS.pattern.NOPAbbreviator.abbreviate (ANY,LogString)"
38170,METHOD,LOG4CXX_NS.pattern.MaxElementAbbreviator,TYPE_DECL,"void abbreviate(LogString::size_type nameStart, LogString& buf) const override
		{
			// We substract 1 from 'len' when assigning to 'end' to avoid out of
			// bounds exception in return r.substring(end+1, len). This can happen if
			// precision is 1 and the logger name ends with a dot.
			LogString::size_type end = buf.length() - 1;

			for (LogString::size_type i = count; i > 0; i--)
			{
				end = buf.rfind(0x2E /* '.' */, end - 1);

				if ((end == LogString::npos) || (end < nameStart))
				{
					return;
				}
			}

			buf.erase(buf.begin() + nameStart, buf.begin() + (end + 1));
		}",3,3,main\cpp\nameabbreviator.cpp,LOG4CXX_NS.pattern.MaxElementAbbreviator.abbreviate,,false,99,117,abbreviate,,,5,"void LOG4CXX_NS.pattern.MaxElementAbbreviator.abbreviate (ANY,LogString)"
38240,METHOD,LOG4CXX_NS.pattern.PatternAbbreviatorFragment,TYPE_DECL,"PatternAbbreviatorFragment(
			const int charCount1, const logchar ellipsis1)
			: charCount(charCount1), ellipsis(ellipsis1)
		{
		}",3,3,main\cpp\nameabbreviator.cpp,LOG4CXX_NS.pattern.PatternAbbreviatorFragment.PatternAbbreviatorFragment,,false,144,148,PatternAbbreviatorFragment,,,3,"ANY LOG4CXX_NS.pattern.PatternAbbreviatorFragment.PatternAbbreviatorFragment (int,logchar)"
38246,METHOD,LOG4CXX_NS.pattern.PatternAbbreviatorFragment,TYPE_DECL,"PatternAbbreviatorFragment() : charCount(0), ellipsis(0)
		{
		}",3,3,main\cpp\nameabbreviator.cpp,LOG4CXX_NS.pattern.PatternAbbreviatorFragment.PatternAbbreviatorFragment,,false,149,151,PatternAbbreviatorFragment,,,4,ANY LOG4CXX_NS.pattern.PatternAbbreviatorFragment.PatternAbbreviatorFragment ()
38250,METHOD,LOG4CXX_NS.pattern.PatternAbbreviatorFragment,TYPE_DECL,"PatternAbbreviatorFragment(const PatternAbbreviatorFragment& src)
			: charCount(src.charCount), ellipsis(src.ellipsis)
		{
		}",3,3,main\cpp\nameabbreviator.cpp,LOG4CXX_NS.pattern.PatternAbbreviatorFragment.PatternAbbreviatorFragment,,false,153,156,PatternAbbreviatorFragment,,,5,ANY LOG4CXX_NS.pattern.PatternAbbreviatorFragment.PatternAbbreviatorFragment (PatternAbbreviatorFragment)
38255,METHOD,LOG4CXX_NS.pattern.PatternAbbreviatorFragment,TYPE_DECL,"PatternAbbreviatorFragment& operator=(const PatternAbbreviatorFragment& src)
		{
			charCount = src.charCount;
			ellipsis = src.ellipsis;
			return *this;
		}",3,3,main\cpp\nameabbreviator.cpp,LOG4CXX_NS.pattern.PatternAbbreviatorFragment.operator =,,false,158,163,operator =,,,6,PatternAbbreviatorFragment LOG4CXX_NS.pattern.PatternAbbreviatorFragment.operator = (PatternAbbreviatorFragment)
38273,METHOD,LOG4CXX_NS.pattern.PatternAbbreviatorFragment,TYPE_DECL,"LogString::size_type abbreviate(LogString& buf, LogString::size_type startPos) const
		{
			LogString::size_type nextDot = buf.find(0x2E /* '.' */, startPos);

			if (nextDot != LogString::npos)
			{
				if ((nextDot - startPos) > charCount)
				{
					buf.erase(buf.begin() + (startPos + charCount), buf.begin() + nextDot);
					nextDot = startPos + charCount;

					if (ellipsis != 0x00)
					{
						buf.insert(nextDot, 1, ellipsis);
						nextDot++;
					}
				}

				nextDot++;
			}

			return nextDot;
		}",3,3,main\cpp\nameabbreviator.cpp,LOG4CXX_NS.pattern.PatternAbbreviatorFragment.abbreviate,,false,171,193,abbreviate,,,7,"size_type LOG4CXX_NS.pattern.PatternAbbreviatorFragment.abbreviate (LogString,ANY)"
38348,METHOD,LOG4CXX_NS.pattern.PatternAbbreviator,TYPE_DECL,"void abbreviate(LogString::size_type nameStart, LogString& buf) const override
		{
			//
			//  all non-terminal patterns are executed once
			//
			LogString::size_type pos = nameStart;

			for (LogString::size_type i = 0; (i < (fragments.size() - 1)) && (pos < buf.length());
				i++)
			{
				pos = fragments[i].abbreviate(buf, pos);
			}

			//
			//   last pattern in executed repeatedly
			//
			PatternAbbreviatorFragment terminalFragment =
				fragments[fragments.size() - 1];

			while (pos < buf.length())
			{
				pos = terminalFragment.abbreviate(buf, pos);
			}
		}",3,3,main\cpp\nameabbreviator.cpp,LOG4CXX_NS.pattern.PatternAbbreviator.abbreviate,,false,233,256,abbreviate,,,5,"void LOG4CXX_NS.pattern.PatternAbbreviator.abbreviate (ANY,LogString)"
38425,METHOD,main\cpp\nameabbreviator.cpp:<global>,TYPE_DECL,"NameAbbreviatorPtr NameAbbreviator::getAbbreviator(const LogString& pattern)
{
	if (pattern.length() > 0)
	{
		//  if pattern is just spaces and numbers then
		//     use MaxElementAbbreviator
		LogString trimmed(StringHelper::trim(pattern));

		if (trimmed.length() == 0)
		{
			return getDefaultAbbreviator();
		}

		LogString::size_type i = 0;

		while (
			(i < trimmed.length()) && (trimmed[i] >= 0x30 /* '0' */)
			&& (trimmed[i] <= 0x39 /* '9' */))
		{
			i++;
		}

		//
		//  if all blanks and digits
		//
		if (i == trimmed.length())
		{
			return std::make_shared<MaxElementAbbreviator>(StringHelper::toInt(trimmed));
		}

		std::vector<PatternAbbreviatorFragment> fragments;
		logchar ellipsis;
		int charCount;
		LogString::size_type pos = 0;

		while (pos < trimmed.length())
		{
			LogString::size_type ellipsisPos = pos;

			if (trimmed[pos] == 0x2A /* '*' */)
			{
				charCount = INT_MAX;
				ellipsisPos++;
			}
			else
			{
				if ((trimmed[pos] >= 0x30 /* '0' */)
					&& (trim...",1,1,main\cpp\nameabbreviator.cpp,NameAbbreviator.getAbbreviator,,false,267,355,getAbbreviator,,,12,NameAbbreviatorPtr NameAbbreviator.getAbbreviator (LogString)
38626,METHOD,main\cpp\nameabbreviator.cpp:<global>,TYPE_DECL,"NameAbbreviatorPtr NameAbbreviator::getDefaultAbbreviator()
{
	static WideLife<NameAbbreviatorPtr> def = std::make_shared<NOPAbbreviator>();
	return def;
}",1,1,main\cpp\nameabbreviator.cpp,NameAbbreviator.getDefaultAbbreviator,,false,362,366,getDefaultAbbreviator,,,13,NameAbbreviatorPtr NameAbbreviator.getDefaultAbbreviator ()
38652,METHOD,main\cpp\namepatternconverter.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\namepatternconverter.cpp,main\cpp\namepatternconverter.cpp:<global>,,false,1,72,<global>,,,1,
38655,METHOD,NamePatternConverterPrivate,TYPE_DECL,"NamePatternConverterPrivate( const LogString& name, const LogString& style, const NameAbbreviatorPtr abbrev ) :
		PatternConverterPrivate( name, style ),
		abbreviator(abbrev) {}",2,24,main\cpp\namepatternconverter.cpp,NamePatternConverterPrivate.NamePatternConverterPrivate,,false,32,34,NamePatternConverterPrivate,,,1,"ANY NamePatternConverterPrivate.NamePatternConverterPrivate (LogString,LogString,NameAbbreviatorPtr)"
38665,METHOD,main\cpp\namepatternconverter.cpp:<global>,TYPE_DECL,"NamePatternConverter::NamePatternConverter(
	const LogString& name1,
	const LogString& style1,
	const std::vector<LogString>& options) :
	LoggingEventPatternConverter(std::make_unique<NamePatternConverterPrivate>(name1, style1,
			getAbbreviator(options)))
{
}",1,1,main\cpp\namepatternconverter.cpp,NamePatternConverter.NamePatternConverter,,false,44,51,NamePatternConverter,,,4,"ANY NamePatternConverter.NamePatternConverter (LogString,LogString,ANY)"
38672,METHOD,main\cpp\namepatternconverter.cpp:<global>,TYPE_DECL,"NameAbbreviatorPtr NamePatternConverter::getAbbreviator(
	const std::vector<LogString>& options)
{
	if (options.size() > 0)
	{
		return NameAbbreviator::getAbbreviator(options[0]);
	}

	return NameAbbreviator::getDefaultAbbreviator();
}",1,1,main\cpp\namepatternconverter.cpp,NamePatternConverter.getAbbreviator,,false,53,62,getAbbreviator,,,5,NameAbbreviatorPtr NamePatternConverter.getAbbreviator (ANY)
38698,METHOD,main\cpp\namepatternconverter.cpp:<global>,TYPE_DECL,"void NamePatternConverter::abbreviate(LogString::size_type nameStart, LogString& buf) const
{
	priv->abbreviator->abbreviate(nameStart, buf);
}",1,1,main\cpp\namepatternconverter.cpp,NamePatternConverter.abbreviate,,false,69,72,abbreviate,,,6,"void NamePatternConverter.abbreviate (ANY,LogString)"
38728,METHOD,main\cpp\ndc.cpp:<global>,TYPE_DECL,<global>,1,7,main\cpp\ndc.cpp,main\cpp\ndc.cpp:<global>,,false,1,414,<global>,,,1,
38730,METHOD,main\cpp\ndc.cpp:<global>,TYPE_DECL,"NDC::NDC(const std::string& message)
{
	push(message);
}",1,1,main\cpp\ndc.cpp,NDC.NDC,,false,25,28,NDC,,,1,ANY NDC.NDC (ANY)
38737,METHOD,main\cpp\ndc.cpp:<global>,TYPE_DECL,"NDC::~NDC()
{
	pop();
}",1,1,main\cpp\ndc.cpp,NDC.~NDC,,false,30,33,~NDC,,,2,ANY NDC.~NDC ()
38742,METHOD,main\cpp\ndc.cpp:<global>,TYPE_DECL,"LogString& NDC::getMessage(NDC::DiagnosticContext& ctx)
{
	return ctx.first;
}",1,1,main\cpp\ndc.cpp,NDC.getMessage,,false,36,39,getMessage,,,3,LogString NDC.getMessage (ANY)
38751,METHOD,main\cpp\ndc.cpp:<global>,TYPE_DECL,"LogString& NDC::getFullMessage(NDC::DiagnosticContext& ctx)
{
	return ctx.second;
}",1,1,main\cpp\ndc.cpp,NDC.getFullMessage,,false,41,44,getFullMessage,,,4,LogString NDC.getFullMessage (ANY)
38760,METHOD,main\cpp\ndc.cpp:<global>,TYPE_DECL,"void NDC::clear()
{
	ThreadSpecificData* data = ThreadSpecificData::getCurrentData();

	if (data != 0)
	{
		Stack& stack = data->getStack();

		while (!stack.empty())
		{
			stack.pop();
		}

		data->recycle();
	}
}",1,1,main\cpp\ndc.cpp,NDC.clear,,false,46,61,clear,,,5,void NDC.clear ()
38798,METHOD,main\cpp\ndc.cpp:<global>,TYPE_DECL,"NDC::Stack* NDC::cloneStack()
{
	ThreadSpecificData* data = ThreadSpecificData::getCurrentData();

	if (data != 0)
	{
		Stack& stack = data->getStack();

		if (!stack.empty())
		{
			return new Stack(stack);
		}
	}

	return new Stack();
}",1,1,main\cpp\ndc.cpp,NDC.cloneStack,,false,63,78,cloneStack,,,6,Stack NDC.cloneStack ()
38835,METHOD,main\cpp\ndc.cpp:<global>,TYPE_DECL,"void NDC::inherit(NDC::Stack* stack)
{
	if (stack != NULL)
	{
		ThreadSpecificData::inherit(*stack);
		delete stack;
	}
}",1,1,main\cpp\ndc.cpp,NDC.inherit,,false,80,87,inherit,,,7,void NDC.inherit (ANY*)
38853,METHOD,main\cpp\ndc.cpp:<global>,TYPE_DECL,"bool NDC::get(LogString& dest)
{
	ThreadSpecificData* data = ThreadSpecificData::getCurrentData();

	if (data != 0)
	{
		Stack& stack = data->getStack();

		if (!stack.empty())
		{
			dest.append(getFullMessage(stack.top()));
			return true;
		}

		data->recycle();
	}

	return false;
}",1,1,main\cpp\ndc.cpp,NDC.get,,false,90,108,get,,,8,bool NDC.get (LogString)
38901,METHOD,main\cpp\ndc.cpp:<global>,TYPE_DECL,"int NDC::getDepth()
{
	int size = 0;
	ThreadSpecificData* data = ThreadSpecificData::getCurrentData();

	if (data != 0)
	{
		size = (int)data->getStack().size();

		if (size == 0)
		{
			data->recycle();
		}
	}

	return size;
}",1,1,main\cpp\ndc.cpp,NDC.getDepth,,false,110,126,getDepth,,,9,int NDC.getDepth ()
38943,METHOD,main\cpp\ndc.cpp:<global>,TYPE_DECL,"LogString NDC::pop()
{
	ThreadSpecificData* data = ThreadSpecificData::getCurrentData();

	if (data != 0)
	{
		Stack& stack = data->getStack();

		if (!stack.empty())
		{
			LogString value(getMessage(stack.top()));
			stack.pop();
			data->recycle();
			return value;
		}

		data->recycle();
	}

	return LogString();
}",1,1,main\cpp\ndc.cpp,NDC.pop,,false,128,148,pop,,,10,LogString NDC.pop ()
38996,METHOD,main\cpp\ndc.cpp:<global>,TYPE_DECL,"bool NDC::pop(std::string& dst)
{
	bool retval = false;
	ThreadSpecificData* data = ThreadSpecificData::getCurrentData();

	if (data != 0)
	{
		Stack& stack = data->getStack();

		if (!stack.empty())
		{
			Transcoder::encode(getMessage(stack.top()), dst);
			stack.pop();
			retval = true;
		}

		data->recycle();
	}

	return retval;
}",1,1,main\cpp\ndc.cpp,NDC.pop,,false,150,170,pop,,,11,bool NDC.pop (ANY)
39054,METHOD,main\cpp\ndc.cpp:<global>,TYPE_DECL,"LogString NDC::peek()
{
	ThreadSpecificData* data = ThreadSpecificData::getCurrentData();

	if (data != 0)
	{
		Stack& stack = data->getStack();

		if (!stack.empty())
		{
			return getMessage(stack.top());
		}

		data->recycle();
	}

	return LogString();
}",1,1,main\cpp\ndc.cpp,NDC.peek,,false,172,189,peek,,,12,LogString NDC.peek ()
39096,METHOD,main\cpp\ndc.cpp:<global>,TYPE_DECL,"bool NDC::peek(std::string& dst)
{
	ThreadSpecificData* data = ThreadSpecificData::getCurrentData();

	if (data != 0)
	{
		Stack& stack = data->getStack();

		if (!stack.empty())
		{
			Transcoder::encode(getMessage(stack.top()), dst);
			return true;
		}

		data->recycle();
	}

	return false;
}",1,1,main\cpp\ndc.cpp,NDC.peek,,false,191,209,peek,,,13,bool NDC.peek (ANY)
39145,METHOD,main\cpp\ndc.cpp:<global>,TYPE_DECL,"void NDC::pushLS(const LogString& message)
{
	ThreadSpecificData::push(message);
}",1,1,main\cpp\ndc.cpp,NDC.pushLS,,false,211,214,pushLS,,,14,void NDC.pushLS (LogString)
39155,METHOD,main\cpp\ndc.cpp:<global>,TYPE_DECL,"void NDC::push(const std::string& message)
{
	LOG4CXX_DECODE_CHAR(msg, message);
	pushLS(msg);
}",1,1,main\cpp\ndc.cpp,NDC.push,,false,216,220,push,,,15,void NDC.push (ANY)
39164,METHOD,main\cpp\ndc.cpp:<global>,TYPE_DECL,"void NDC::remove()
{
	clear();
}",1,1,main\cpp\ndc.cpp,NDC.remove,,false,222,225,remove,,,16,void NDC.remove ()
39169,METHOD,main\cpp\ndc.cpp:<global>,TYPE_DECL,"bool NDC::empty()
{
	bool empty = true;
	ThreadSpecificData* data = ThreadSpecificData::getCurrentData();

	if (data != 0)
	{
		Stack& stack = data->getStack();
		empty = stack.empty();

		if (empty)
		{
			data->recycle();
		}
	}

	return empty;
}",1,1,main\cpp\ndc.cpp,NDC.empty,,false,227,244,empty,,,17,bool NDC.empty ()
39222,METHOD,main\cpp\ndcpatternconverter.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\ndcpatternconverter.cpp,main\cpp\ndcpatternconverter.cpp:<global>,,false,1,52,<global>,,,1,
39226,METHOD,main\cpp\ndcpatternconverter.cpp:<global>,TYPE_DECL,"NDCPatternConverter::NDCPatternConverter() :
	LoggingEventPatternConverter(LOG4CXX_STR(""NDC""),
		LOG4CXX_STR(""ndc""))
{
}",1,1,main\cpp\ndcpatternconverter.cpp,NDCPatternConverter.NDCPatternConverter,,false,30,34,NDCPatternConverter,,,3,ANY NDCPatternConverter.NDCPatternConverter ()
39230,METHOD,main\cpp\ndcpatternconverter.cpp:<global>,TYPE_DECL,"PatternConverterPtr NDCPatternConverter::newInstance(
	const std::vector<LogString>& /* options */)
{
	static WideLife<PatternConverterPtr> def = std::make_shared<NDCPatternConverter>();
	return def;
}",1,1,main\cpp\ndcpatternconverter.cpp,NDCPatternConverter.newInstance,,false,36,41,newInstance,,,4,PatternConverterPtr NDCPatternConverter.newInstance (ANY)
39244,METHOD,main\cpp\ndcpatternconverter.cpp:<global>,TYPE_DECL,"void NDCPatternConverter::format(
	const LoggingEventPtr& event,
	LogString& toAppendTo,
	Pool& /* p */) const
{
	if (!event->getNDC(toAppendTo))
	{
		toAppendTo.append(LOG4CXX_STR(""null""));
	}
}",1,1,main\cpp\ndcpatternconverter.cpp,NDCPatternConverter.format,,false,43,52,format,,,5,"void NDCPatternConverter.format (LoggingEventPtr,LogString,Pool)"
39288,METHOD,main\cpp\nteventlogappender.cpp:<global>,TYPE_DECL,<global>,1,15,main\cpp\nteventlogappender.cpp,main\cpp\nteventlogappender.cpp:<global>,,false,1,396,<global>,,,1,
39351,METHOD,main\cpp\odbcappender.cpp:<global>,TYPE_DECL,<global>,1,2,main\cpp\odbcappender.cpp,main\cpp\odbcappender.cpp:<global>,,false,1,700,<global>,,,1,
39354,METHOD,main\cpp\odbcappender.cpp:<global>,TYPE_DECL,"SQLException::SQLException(short fHandleType,
	void* hInput, const char* prolog,
	LOG4CXX_NS::helpers::Pool& p)
	: Exception(formatMessage(fHandleType, hInput, prolog, p))
{
}",1,1,main\cpp\odbcappender.cpp,SQLException.SQLException,,false,68,73,SQLException,,,2,"ANY SQLException.SQLException (short,void*,char*,ANY)"
39362,METHOD,main\cpp\odbcappender.cpp:<global>,TYPE_DECL,"SQLException::SQLException(const char* msg)
	: Exception(msg)
{
}",1,1,main\cpp\odbcappender.cpp,SQLException.SQLException,,false,76,79,SQLException,,,3,ANY SQLException.SQLException (char*)
39367,METHOD,main\cpp\odbcappender.cpp:<global>,TYPE_DECL,"SQLException::SQLException(const SQLException& src)
	: Exception(src)
{
}",1,1,main\cpp\odbcappender.cpp,SQLException.SQLException,,false,81,84,SQLException,,,4,ANY SQLException.SQLException (SQLException)
39372,METHOD,main\cpp\odbcappender.cpp:<global>,TYPE_DECL,"const char* SQLException::formatMessage(short fHandleType,
	void* hInput, const char* prolog, LOG4CXX_NS::helpers::Pool& p)
{
	std::string strReturn(prolog);
	strReturn.append("" - "");
#if LOG4CXX_HAVE_ODBC
	SQLCHAR       SqlState[6];
	SQLCHAR       Msg[SQL_MAX_MESSAGE_LENGTH];
	SQLINTEGER    NativeError;
	SQLSMALLINT   i;
	SQLSMALLINT   MsgLen;
	SQLRETURN     rc2;

	// Get the status records.
	i = 1;

	while ((rc2 = SQLGetDiagRecA(fHandleType, hInput, i, SqlState, &NativeError,
					Msg, sizeof(Msg), &MsgLen)) != SQL_NO_DATA)
	{
		strReturn.append((char*) Msg);
		i++;
	}

#else
	strReturn.append(""log4cxx built without ODBC support"");
#endif

	return apr_pstrdup((apr_pool_t*) p.getAPRPool(), strReturn.c_str());
}",1,1,main\cpp\odbcappender.cpp,SQLException.formatMessage,,false,86,114,formatMessage,,,5,"const char* SQLException.formatMessage (short,void*,char*,ANY)"
39407,METHOD,main\cpp\odbcappender.cpp:<global>,TYPE_DECL,"ODBCAppender::ODBCAppender()
	: AppenderSkeleton (std::make_unique<ODBCAppenderPriv>(
#if LOG4CXX_EVENTS_AT_EXIT
		[this] {
			std::lock_guard<std::recursive_mutex> lock(_priv->mutex);
			if(_priv->closed)
				return;
			try
			{
				flushBuffer(_priv->pool);
			}
			catch (SQLException& e)
			{
				_priv->errorHandler->error(LOG4CXX_STR(""Error flushing connection""),
					e, ErrorCode::GENERIC_FAILURE);
			}
		}
#endif
								))
{
}",1,1,main\cpp\odbcappender.cpp,ODBCAppender.ODBCAppender,,false,121,141,ODBCAppender,,,8,ANY ODBCAppender.ODBCAppender ()
39411,METHOD,main\cpp\odbcappender.cpp:<global>,TYPE_DECL,"ODBCAppender::~ODBCAppender()
{
	finalize();
}",1,1,main\cpp\odbcappender.cpp,ODBCAppender.~ODBCAppender,,false,143,146,~ODBCAppender,,,9,ANY ODBCAppender.~ODBCAppender ()
39416,METHOD,main\cpp\odbcappender.cpp:<global>,TYPE_DECL,"static PatternMap getFormatSpecifiers()
{
	PatternMap specs;
	if (specs.empty())
	{
		RULES_PUT(""logger"", LoggerPatternConverter);
		RULES_PUT(""class"", ClassNamePatternConverter);
		RULES_PUT(""time"", DatePatternConverter);
		RULES_PUT(""shortfilename"", ShortFileLocationPatternConverter);
		RULES_PUT(""fullfilename"", FileLocationPatternConverter);
		RULES_PUT(""location"", FullLocationPatternConverter);
		RULES_PUT(""line"", LineLocationPatternConverter);
		RULES_PUT(""message"", MessagePatternConverter);
		RULES_PUT(""method"", MethodLocationPatternConverter);
		RULES_PUT(""level"", LevelPatternConverter);
		RULES_PUT(""thread"", ThreadPatternConverter);
		RULES_PUT(""threadname"", ThreadUsernamePatternConverter);
		RULES_PUT(""mdc"", MDCPatternConverter);
		RULES_PUT(""ndc"", NDCPatternConverter);
	}
	return specs;
}",1,2,main\cpp\odbcappender.cpp,getFormatSpecifiers,,false,151,172,getFormatSpecifiers,,,10,PatternMap getFormatSpecifiers ()
39667,METHOD,main\cpp\odbcappender.cpp:<global>,TYPE_DECL,"void ODBCAppender::setOption(const LogString& option, const LogString& value)
{
	if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""BUFFERSIZE""), LOG4CXX_STR(""buffersize"")))
	{
		setBufferSize((size_t)OptionConverter::toInt(value, 1));
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""PASSWORD""), LOG4CXX_STR(""password"")))
	{
		setPassword(value);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""SQL""), LOG4CXX_STR(""sql"")))
	{
		setSql(value);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""URL""), LOG4CXX_STR(""url""))
		|| StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""DSN""), LOG4CXX_STR(""dsn""))
		|| StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""CONNECTIONSTRING""), LOG4CXX_STR(""connectionstring""))  )
	{
		setURL(value);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""USER""), LOG4CXX_STR(""user"")))
	{
		setUser(value);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""COLUMNMAPPING""), LOG4CXX_...",1,2,main\cpp\odbcappender.cpp,ODBCAppender.setOption,,false,174,206,setOption,,,11,"void ODBCAppender.setOption (LogString,LogString)"
39808,METHOD,main\cpp\odbcappender.cpp:<global>,TYPE_DECL,"bool ODBCAppender::requiresLayout() const
{
	return false;
}",1,1,main\cpp\odbcappender.cpp,ODBCAppender.requiresLayout,,false,210,213,requiresLayout,,,12,bool ODBCAppender.requiresLayout ()
39814,METHOD,main\cpp\odbcappender.cpp:<global>,TYPE_DECL,"void ODBCAppender::activateOptions(LOG4CXX_NS::helpers::Pool&)
{
#if !LOG4CXX_HAVE_ODBC
	LogLog::error(LOG4CXX_STR(""Can not activate ODBCAppender unless compiled with ODBC support.""));
#else
	if (_priv->mappedName.empty())
	{
		LogLog::error(LOG4CXX_STR(""ODBCAppender column mappings not defined, logging events will not be inserted""));
	}
	auto specs = getFormatSpecifiers();
	for (auto& name : _priv->mappedName)
	{
		auto lowerName = StringHelper::toLowerCase(name);
		auto pItem = specs.find(lowerName);
		if (specs.end() == pItem)
		{
			if (lowerName.size() < 5
			 || lowerName.substr(0, 4) != LOG4CXX_STR(""mdc{""))
				LogLog::error(name + LOG4CXX_STR("" is not a supported ColumnMapping value""));
			else // A single MDC entry
			{
				auto index = lowerName.find(0x7D /* '}' */, 4);
				auto len = (lowerName.npos == index ? lowerName.size() : index) - 4;
				ODBCAppenderPriv::DataBinding paramData{ 0, 0, 0, 0, 0 };
				paramData.converter = std::make_shared<MDCPatternConverter>(lowerNa...",1,1,main\cpp\odbcappender.cpp,ODBCAppender.activateOptions,,false,215,254,activateOptions,,,13,void ODBCAppender.activateOptions (ANY)
39825,METHOD,main\cpp\odbcappender.cpp:<global>,TYPE_DECL,"void ODBCAppender::append(const spi::LoggingEventPtr& event, LOG4CXX_NS::helpers::Pool& p)
{
#if LOG4CXX_HAVE_ODBC
	_priv->buffer.push_back(event);

	if (_priv->buffer.size() >= _priv->bufferSize)
	{
		flushBuffer(p);
	}

#endif
}",1,1,main\cpp\odbcappender.cpp,ODBCAppender.append,,false,257,268,append,,,14,"void ODBCAppender.append (ANY,ANY)"
39831,METHOD,main\cpp\odbcappender.cpp:<global>,TYPE_DECL,"LogString ODBCAppender::getLogStatement(const spi::LoggingEventPtr& event, LOG4CXX_NS::helpers::Pool& p) const
{
    return LogString();
}",1,1,main\cpp\odbcappender.cpp,ODBCAppender.getLogStatement,,false,270,273,getLogStatement,,,15,"LogString ODBCAppender.getLogStatement (ANY,ANY)"
39839,METHOD,main\cpp\odbcappender.cpp:<global>,TYPE_DECL,"void ODBCAppender::execute(const LogString& sql, LOG4CXX_NS::helpers::Pool& p)
{
}",1,1,main\cpp\odbcappender.cpp,ODBCAppender.execute,,false,275,277,execute,,,16,"void ODBCAppender.execute (LogString,ANY)"
39845,METHOD,main\cpp\odbcappender.cpp:<global>,TYPE_DECL,"void ODBCAppender::closeConnection(ODBCAppender::SQLHDBC /* con */)
{
}",1,1,main\cpp\odbcappender.cpp,ODBCAppender.closeConnection,,false,281,283,closeConnection,,,17,void ODBCAppender.closeConnection (ANY)
39850,METHOD,main\cpp\odbcappender.cpp:<global>,TYPE_DECL,"ODBCAppender::SQLHDBC ODBCAppender::getConnection(LOG4CXX_NS::helpers::Pool& p)
{
#if LOG4CXX_HAVE_ODBC
	SQLRETURN ret;

	if (_priv->env == SQL_NULL_HENV)
	{
		ret = SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &_priv->env);

		if (ret < 0)
		{
			SQLException ex(SQL_HANDLE_ENV, _priv->env, ""Failed to allocate SQL handle"", p);
			_priv->env = SQL_NULL_HENV;
			throw ex;
		}

		ret = SQLSetEnvAttr(_priv->env, SQL_ATTR_ODBC_VERSION, (SQLPOINTER) SQL_OV_ODBC3, SQL_IS_INTEGER);

		if (ret < 0)
		{
			SQLException ex(SQL_HANDLE_ENV, _priv->env, ""Failed to set odbc version"", p);
			SQLFreeHandle(SQL_HANDLE_ENV, _priv->env);
			_priv->env = SQL_NULL_HENV;
			throw ex;
		}
	}

	if (_priv->connection == SQL_NULL_HDBC)
	{
		ret = SQLAllocHandle(SQL_HANDLE_DBC, _priv->env, &_priv->connection);

		if (ret < 0)
		{
			SQLException ex(SQL_HANDLE_DBC, _priv->connection, ""Failed to allocate sql handle"", p);
			_priv->connection = SQL_NULL_HDBC;
			throw ex;
		}

#if LOG4CXX_LOGCHAR_IS_WCHAR
		SQ...",1,1,main\cpp\odbcappender.cpp,ODBCAppender.getConnection,,false,285,373,getConnection,,,18,SQLHDBC ODBCAppender.getConnection (ANY)
39857,METHOD,main\cpp\odbcappender.cpp:<global>,TYPE_DECL,"void ODBCAppender::close()
{
	if (_priv->closed)
	{
		return;
	}

	Pool p;

	try
	{
		flushBuffer(p);
	}
	catch (SQLException& e)
	{
		_priv->errorHandler->error(LOG4CXX_STR(""Error closing connection""),
			e, ErrorCode::GENERIC_FAILURE);
	}

#if LOG4CXX_HAVE_ODBC

	if (_priv->connection != SQL_NULL_HDBC)
	{
		SQLDisconnect(_priv->connection);
		SQLFreeHandle(SQL_HANDLE_DBC, _priv->connection);
	}

	if (_priv->env != SQL_NULL_HENV)
	{
		SQLFreeHandle(SQL_HANDLE_ENV, _priv->env);
	}

#endif
	_priv->closed = true;
}",1,5,main\cpp\odbcappender.cpp,ODBCAppender.close,,false,375,409,close,,,19,void ODBCAppender.close ()
39911,METHOD,main\cpp\odbcappender.cpp:<global>,TYPE_DECL,"void ODBCAppender::flushBuffer(Pool& p)
{
	for (auto& logEvent : _priv->buffer)
	{
		if (_priv->parameterValue.empty())
			_priv->errorHandler->error(LOG4CXX_STR(""ODBCAppender column mappings not defined""));
#if LOG4CXX_HAVE_ODBC
		else try
		{
			if (0 == _priv->preparedStatement)
				_priv->setPreparedStatement(getConnection(p), p);
			_priv->setParameterValues(logEvent, p);
			auto ret = SQLExecute(_priv->preparedStatement);
			if (ret < 0)
			{
				throw SQLException(SQL_HANDLE_STMT, _priv->preparedStatement, ""Failed to execute prepared statement"", p);
			}
		}
		catch (SQLException& e)
		{
			_priv->errorHandler->error(LOG4CXX_STR(""Failed to execute sql""), e,
				ErrorCode::FLUSH_FAILURE);
		}
#endif
	}

	// clear the buffer of reported events
	_priv->buffer.clear();
}",1,23,main\cpp\odbcappender.cpp,ODBCAppender.flushBuffer,,false,584,612,flushBuffer,,,20,void ODBCAppender.flushBuffer (Pool)
39972,METHOD,main\cpp\odbcappender.cpp:<global>,TYPE_DECL,"void ODBCAppender::setSql(const LogString& s)
{
    _priv->sqlStatement = s;
}",1,4,main\cpp\odbcappender.cpp,ODBCAppender.setSql,,false,614,617,setSql,,,21,void ODBCAppender.setSql (LogString)
39989,METHOD,main\cpp\odbcappender.cpp:<global>,TYPE_DECL,"void ODBCAppender::encode(unsigned short** dest,
	const LogString& src, Pool& p)
{
	//  worst case double number of characters from UTF-8 or wchar_t
	*dest = (unsigned short*)
		p.palloc((src.size() + 1) * 2 * sizeof(unsigned short));
	unsigned short* current = *dest;

	for (LogString::const_iterator i = src.begin();
		i != src.end();)
	{
		unsigned int sv = Transcoder::decode(src, i);

		if (sv < 0x10000)
		{
			*current++ = (unsigned short) sv;
		}
		else
		{
			unsigned char u = (unsigned char) (sv >> 16);
			unsigned char w = (unsigned char) (u - 1);
			unsigned short hs = (0xD800 + ((w & 0xF) << 6) + ((sv & 0xFFFF) >> 10));
			unsigned short ls = (0xDC00 + (sv & 0x3FF));
			*current++ = (unsigned short) hs;
			*current++ = (unsigned short) ls;
		}
	}

	*current = 0;
}",1,1,main\cpp\odbcappender.cpp,ODBCAppender.encode,,false,626,655,encode,,,22,"void ODBCAppender.encode (short unsigned**,LogString,Pool)"
40118,METHOD,main\cpp\odbcappender.cpp:<global>,TYPE_DECL,"const LogString& ODBCAppender::getSql() const
{
	return _priv->sqlStatement;
}",1,8,main\cpp\odbcappender.cpp,ODBCAppender.getSql,,false,657,660,getSql,,,23,LogString ODBCAppender.getSql ()
40133,METHOD,main\cpp\odbcappender.cpp:<global>,TYPE_DECL,"void ODBCAppender::setUser(const LogString& user)
{
	_priv->databaseUser = user;
}",1,1,main\cpp\odbcappender.cpp,ODBCAppender.setUser,,false,662,665,setUser,,,24,void ODBCAppender.setUser (LogString)
40150,METHOD,main\cpp\odbcappender.cpp:<global>,TYPE_DECL,"void ODBCAppender::setURL(const LogString& url)
{
	_priv->databaseURL = url;
}",1,1,main\cpp\odbcappender.cpp,ODBCAppender.setURL,,false,667,670,setURL,,,25,void ODBCAppender.setURL (LogString)
40167,METHOD,main\cpp\odbcappender.cpp:<global>,TYPE_DECL,"void ODBCAppender::setPassword(const LogString& password)
{
	_priv->databasePassword = password;
}",1,1,main\cpp\odbcappender.cpp,ODBCAppender.setPassword,,false,672,675,setPassword,,,26,void ODBCAppender.setPassword (LogString)
40184,METHOD,main\cpp\odbcappender.cpp:<global>,TYPE_DECL,"void ODBCAppender::setBufferSize(size_t newBufferSize)
{
	_priv->bufferSize = newBufferSize;
}",1,1,main\cpp\odbcappender.cpp,ODBCAppender.setBufferSize,,false,677,680,setBufferSize,,,27,void ODBCAppender.setBufferSize (size_t)
40201,METHOD,main\cpp\odbcappender.cpp:<global>,TYPE_DECL,"const LogString& ODBCAppender::getUser() const
{
	return _priv->databaseUser;
}",1,8,main\cpp\odbcappender.cpp,ODBCAppender.getUser,,false,682,685,getUser,,,28,LogString ODBCAppender.getUser ()
40216,METHOD,main\cpp\odbcappender.cpp:<global>,TYPE_DECL,"const LogString& ODBCAppender::getURL() const
{
	return _priv->databaseURL;
}",1,8,main\cpp\odbcappender.cpp,ODBCAppender.getURL,,false,687,690,getURL,,,29,LogString ODBCAppender.getURL ()
40231,METHOD,main\cpp\odbcappender.cpp:<global>,TYPE_DECL,"const LogString& ODBCAppender::getPassword() const
{
	return _priv->databasePassword;
}",1,8,main\cpp\odbcappender.cpp,ODBCAppender.getPassword,,false,692,695,getPassword,,,30,LogString ODBCAppender.getPassword ()
40246,METHOD,main\cpp\odbcappender.cpp:<global>,TYPE_DECL,"size_t ODBCAppender::getBufferSize() const
{
	return _priv->bufferSize;
}",1,8,main\cpp\odbcappender.cpp,ODBCAppender.getBufferSize,,false,697,700,getBufferSize,,,31,size_t ODBCAppender.getBufferSize ()
40272,METHOD,main\cpp\onlyonceerrorhandler.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\onlyonceerrorhandler.cpp,main\cpp\onlyonceerrorhandler.cpp:<global>,,false,1,93,<global>,,,1,
40277,METHOD,OnlyOnceErrorHandlerPrivate,TYPE_DECL,"OnlyOnceErrorHandlerPrivate() :
		WARN_PREFIX(LOG4CXX_STR(""log4cxx warning: "")),
		ERROR_PREFIX(LOG4CXX_STR(""log4cxx error: "")),
		firstTime(true){}",2,19,main\cpp\onlyonceerrorhandler.cpp,OnlyOnceErrorHandlerPrivate.OnlyOnceErrorHandlerPrivate,,false,30,33,OnlyOnceErrorHandlerPrivate,,,1,ANY OnlyOnceErrorHandlerPrivate.OnlyOnceErrorHandlerPrivate ()
40284,METHOD,main\cpp\onlyonceerrorhandler.cpp:<global>,TYPE_DECL,"OnlyOnceErrorHandler::OnlyOnceErrorHandler() :
	m_priv(std::make_unique<OnlyOnceErrorHandlerPrivate>())
{
}",1,1,main\cpp\onlyonceerrorhandler.cpp,OnlyOnceErrorHandler.OnlyOnceErrorHandler,,false,40,43,OnlyOnceErrorHandler,,,4,ANY OnlyOnceErrorHandler.OnlyOnceErrorHandler ()
40288,METHOD,main\cpp\onlyonceerrorhandler.cpp:<global>,TYPE_DECL,OnlyOnceErrorHandler::~OnlyOnceErrorHandler(){},1,47,main\cpp\onlyonceerrorhandler.cpp,OnlyOnceErrorHandler.~OnlyOnceErrorHandler,,false,45,45,~OnlyOnceErrorHandler,,,5,ANY OnlyOnceErrorHandler.~OnlyOnceErrorHandler ()
40292,METHOD,main\cpp\onlyonceerrorhandler.cpp:<global>,TYPE_DECL,"void OnlyOnceErrorHandler::setLogger(const LoggerPtr&)
{
}",1,1,main\cpp\onlyonceerrorhandler.cpp,OnlyOnceErrorHandler.setLogger,,false,47,49,setLogger,,,6,void OnlyOnceErrorHandler.setLogger (LoggerPtr)
40297,METHOD,main\cpp\onlyonceerrorhandler.cpp:<global>,TYPE_DECL,"void OnlyOnceErrorHandler::activateOptions(Pool&)
{
}",1,1,main\cpp\onlyonceerrorhandler.cpp,OnlyOnceErrorHandler.activateOptions,,false,51,53,activateOptions,,,7,void OnlyOnceErrorHandler.activateOptions (Pool)
40302,METHOD,main\cpp\onlyonceerrorhandler.cpp:<global>,TYPE_DECL,"void OnlyOnceErrorHandler::setOption(const LogString&, const LogString&)
{
}",1,1,main\cpp\onlyonceerrorhandler.cpp,OnlyOnceErrorHandler.setOption,,false,55,57,setOption,,,8,"void OnlyOnceErrorHandler.setOption (LogString,LogString)"
40308,METHOD,main\cpp\onlyonceerrorhandler.cpp:<global>,TYPE_DECL,"void OnlyOnceErrorHandler::error(const LogString& message, const std::exception& e,
	int) const
{
	if (m_priv->firstTime)
	{
		LogLog::error(message, e);
		m_priv->firstTime = false;
	}
}",1,1,main\cpp\onlyonceerrorhandler.cpp,OnlyOnceErrorHandler.error,,false,59,67,error,,,9,"void OnlyOnceErrorHandler.error (LogString,ANY,int)"
40331,METHOD,main\cpp\onlyonceerrorhandler.cpp:<global>,TYPE_DECL,"void OnlyOnceErrorHandler::error(const LogString& message, const std::exception& e,
	int errorCode, const LOG4CXX_NS::spi::LoggingEventPtr&) const
{
	error(message, e, errorCode);
}",1,1,main\cpp\onlyonceerrorhandler.cpp,OnlyOnceErrorHandler.error,,false,69,73,error,,,10,"void OnlyOnceErrorHandler.error (LogString,ANY,int,ANY)"
40343,METHOD,main\cpp\onlyonceerrorhandler.cpp:<global>,TYPE_DECL,"void OnlyOnceErrorHandler::error(const LogString& message) const
{
	if (m_priv->firstTime)
	{
		LogLog::error(message);
		m_priv->firstTime = false;
	}
}",1,1,main\cpp\onlyonceerrorhandler.cpp,OnlyOnceErrorHandler.error,,false,76,83,error,,,11,void OnlyOnceErrorHandler.error (LogString)
40363,METHOD,main\cpp\onlyonceerrorhandler.cpp:<global>,TYPE_DECL,"void OnlyOnceErrorHandler::setAppender(const AppenderPtr&)
{
}",1,1,main\cpp\onlyonceerrorhandler.cpp,OnlyOnceErrorHandler.setAppender,,false,86,88,setAppender,,,12,void OnlyOnceErrorHandler.setAppender (AppenderPtr)
40368,METHOD,main\cpp\onlyonceerrorhandler.cpp:<global>,TYPE_DECL,"void OnlyOnceErrorHandler::setBackupAppender(const AppenderPtr&)
{
}",1,1,main\cpp\onlyonceerrorhandler.cpp,OnlyOnceErrorHandler.setBackupAppender,,false,91,93,setBackupAppender,,,13,void OnlyOnceErrorHandler.setBackupAppender (AppenderPtr)
40424,METHOD,main\cpp\optionconverter.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\optionconverter.cpp,main\cpp\optionconverter.cpp:<global>,,false,1,456,<global>,,,1,
40429,METHOD,LOG4CXX_NS.ConfiguratorWatchdog,TYPE_DECL,"ConfiguratorWatchdog(const spi::ConfiguratorPtr& config, const File& filename)
        : helpers::FileWatchdog(filename)
        , m_config(config)
    {
    }",5,5,main\cpp\optionconverter.cpp,LOG4CXX_NS.ConfiguratorWatchdog.ConfiguratorWatchdog,,false,53,57,ConfiguratorWatchdog,,,2,"ANY LOG4CXX_NS.ConfiguratorWatchdog.ConfiguratorWatchdog (ANY,File)"
40435,METHOD,LOG4CXX_NS.ConfiguratorWatchdog,TYPE_DECL,"void doOnChange() override
    {
        m_config->doConfigure(file(), LogManager::getLoggerRepository());
    }",5,5,main\cpp\optionconverter.cpp,LOG4CXX_NS.ConfiguratorWatchdog.doOnChange,,false,64,67,doOnChange,,,3,void LOG4CXX_NS.ConfiguratorWatchdog.doOnChange ()
40448,METHOD,main\cpp\optionconverter.cpp:<global>,TYPE_DECL,"LogString OptionConverter::convertSpecialChars(const LogString& s)
{
	logchar c;
	LogString sbuf;

	LogString::const_iterator i = s.begin();

	while (i != s.end())
	{
		c = *i++;

		if (c == 0x5C /* '\\' */)
		{
			c =  *i++;

			switch (c)
			{
				case 0x6E: //'n'
					c = 0x0A;
					break;

				case 0x72: //'r'
					c = 0x0D;
					break;

				case 0x74: //'t'
					c = 0x09;
					break;

				case 0x66: //'f'
					c = 0x0C;
					break;

				default:
					break;
			}
		}

		sbuf.append(1, c);
	}

	return sbuf;
}",1,1,main\cpp\optionconverter.cpp,OptionConverter.convertSpecialChars,,false,77,119,convertSpecialChars,,,2,LogString OptionConverter.convertSpecialChars (LogString)
40522,METHOD,main\cpp\optionconverter.cpp:<global>,TYPE_DECL,"bool OptionConverter::toBoolean(const LogString& value, bool dEfault)
{
	if (value.length() >= 4)
	{
		if (StringHelper::equalsIgnoreCase(value.substr(0, 4),
				LOG4CXX_STR(""TRUE""), LOG4CXX_STR(""true"")))
		{
			return true;
		}
	}

	if (dEfault && value.length() >= 5)
	{
		if (StringHelper::equalsIgnoreCase(value.substr(0, 5),
				LOG4CXX_STR(""FALSE""), LOG4CXX_STR(""false"")))
		{
			return false;
		}
	}

	return dEfault;
}",1,1,main\cpp\optionconverter.cpp,OptionConverter.toBoolean,,false,122,143,toBoolean,,,3,"bool OptionConverter.toBoolean (LogString,bool)"
40584,METHOD,main\cpp\optionconverter.cpp:<global>,TYPE_DECL,"int OptionConverter::toInt(const LogString& value, int dEfault)
{
	LogString trimmed(StringHelper::trim(value));

	if (trimmed.empty())
	{
		return dEfault;
	}

	LOG4CXX_ENCODE_CHAR(cvalue, trimmed);

	return (int) atol(cvalue.c_str());
}",1,1,main\cpp\optionconverter.cpp,OptionConverter.toInt,,false,145,157,toInt,,,4,"int OptionConverter.toInt (LogString,int)"
40616,METHOD,main\cpp\optionconverter.cpp:<global>,TYPE_DECL,"long OptionConverter::toFileSize(const LogString& s, long dEfault)
{
	if (s.empty())
	{
		return dEfault;
	}

	size_t index = s.find_first_of(LOG4CXX_STR(""bB""));

	if (index != LogString::npos && index > 0)
	{
		long multiplier = 1;
		index--;

		if (s[index] == 0x6B /* 'k' */ || s[index] == 0x4B /* 'K' */)
		{
			multiplier = 1024;
		}
		else if (s[index] == 0x6D /* 'm' */ || s[index] == 0x4D /* 'M' */)
		{
			multiplier = 1024 * 1024;
		}
		else if (s[index] == 0x67 /* 'g'*/ || s[index] == 0x47 /* 'G' */)
		{
			multiplier = 1024 * 1024 * 1024;
		}

		return toInt(s.substr(0, index), 1) * multiplier;
	}

	return toInt(s, 1);
}",1,1,main\cpp\optionconverter.cpp,OptionConverter.toFileSize,,false,159,190,toFileSize,,,5,"long OptionConverter.toFileSize (LogString,long)"
40729,METHOD,main\cpp\optionconverter.cpp:<global>,TYPE_DECL,"LogString OptionConverter::findAndSubst(const LogString& key, Properties& props)
{
	LogString value(props.getProperty(key));

	if (value.empty())
	{
		return value;
	}

	try
	{
		return substVars(value, props);
	}
	catch (IllegalArgumentException& e)
	{
		LogLog::error(((LogString) LOG4CXX_STR(""Bad option value [""))
			+ value + LOG4CXX_STR(""].""), e);
		return value;
	}
}",1,1,main\cpp\optionconverter.cpp,OptionConverter.findAndSubst,,false,192,211,findAndSubst,,,6,"LogString OptionConverter.findAndSubst (LogString,Properties)"
40773,METHOD,main\cpp\optionconverter.cpp:<global>,TYPE_DECL,"LogString OptionConverter::substVars(const LogString& val, Properties& props)
{
	LogString sbuf;
	const logchar delimStartArray[] = { 0x24, 0x7B, 0 };
	const LogString delimStart(delimStartArray);
	const logchar delimStop = 0x7D; // '}';
	const size_t DELIM_START_LEN = 2;
	const size_t DELIM_STOP_LEN = 1;

	size_t i = 0;

	while (true)
	{
		size_t j = val.find(delimStart, i);

		if (j == val.npos)
		{
			// no more variables
			if (i == 0)
			{
				// this is a simple string
				return val;
			}
			else
			{
				// add the tail string which contails no variables and return the result.
				sbuf.append(val.substr(i, val.length() - i));
				return sbuf;
			}
		}
		else
		{
			sbuf.append(val.substr(i, j - i));
			size_t k = val.find(delimStop, j);

			if (k == val.npos)
			{
				LogString msg(1, (logchar) 0x22 /* '\""' */);
				msg.append(val);
				msg.append(LOG4CXX_STR(""\"" has no closing brace. Opening brace at position ""));
				Pool p;
				StringHelper::toString(j, p, msg);
				msg.a...",1,1,main\cpp\optionconverter.cpp,OptionConverter.substVars,,false,213,286,substVars,,,7,"LogString OptionConverter.substVars (LogString,Properties)"
40974,METHOD,main\cpp\optionconverter.cpp:<global>,TYPE_DECL,"LogString OptionConverter::getSystemProperty(const LogString& key, const LogString& def)
{
	if (!key.empty())
	{
		LogString value(System::getProperty(key));

		if (!value.empty())
		{
			return value;
		}
	}

	return def;
}",1,1,main\cpp\optionconverter.cpp,OptionConverter.getSystemProperty,,false,288,301,getSystemProperty,,,8,"LogString OptionConverter.getSystemProperty (LogString,LogString)"
41005,METHOD,main\cpp\optionconverter.cpp:<global>,TYPE_DECL,"LevelPtr OptionConverter::toLevel(const LogString& value,
	const LevelPtr& defaultValue)
{
	size_t hashIndex = value.find(LOG4CXX_STR(""#""));

	if (hashIndex == LogString::npos)
	{
		if (value.empty())
		{
			return defaultValue;
		}
		else
		{
			LogLog::debug(
				((LogString) LOG4CXX_STR(""OptionConverter::toLevel: no class name specified, level=[""))
				+ value
				+ LOG4CXX_STR(""]""));
			// no class name specified : use standard Level class
			return Level::toLevelLS(value, defaultValue);
		}
	}

	LogString clazz = value.substr(hashIndex + 1);
	LogString levelName = value.substr(0, hashIndex);
	LogLog::debug(((LogString) LOG4CXX_STR(""OptionConverter::toLevel: class=[""))
		+ clazz + LOG4CXX_STR(""], level=["") + levelName + LOG4CXX_STR(""]""));

	// This is degenerate case but you never know.
	if (levelName.empty())
	{
		return Level::toLevelLS(value, defaultValue);
	}

	try
	{
		Level::LevelClass& levelClass =
			(Level::LevelClass&)Loader::loadClass(clazz);
		return levelClass.toLev...",1,1,main\cpp\optionconverter.cpp,OptionConverter.toLevel,,false,303,361,toLevel,,,9,"LevelPtr OptionConverter.toLevel (LogString,LevelPtr)"
41176,METHOD,main\cpp\optionconverter.cpp:<global>,TYPE_DECL,"ObjectPtr OptionConverter::instantiateByKey(Properties& props, const LogString& key,
	const Class& superClass, const ObjectPtr& defaultValue)
{
	// Get the value of the property in string form
	LogString className(findAndSubst(key, props));

	if (className.empty())
	{
		LogLog::error(
			((LogString) LOG4CXX_STR(""Could not find value for key "")) + key);
		return defaultValue;
	}

	// Trim className to avoid trailing spaces that cause problems.
	return OptionConverter::instantiateByClassName(
			StringHelper::trim(className), superClass, defaultValue);
}",1,1,main\cpp\optionconverter.cpp,OptionConverter.instantiateByKey,,false,364,380,instantiateByKey,,,10,"ObjectPtr OptionConverter.instantiateByKey (Properties,LogString,Class,ObjectPtr)"
41219,METHOD,main\cpp\optionconverter.cpp:<global>,TYPE_DECL,"ObjectPtr OptionConverter::instantiateByClassName(const LogString& className,
	const Class& superClass, const ObjectPtr& defaultValue)
{
	if (!className.empty())
	{
		try
		{
			const Class& classObj = Loader::loadClass(className);
			ObjectPtr newObject =  ObjectPtr(classObj.newInstance());

			if (!newObject->instanceof(superClass))
			{
				return defaultValue;
			}

			return newObject;
		}
		catch (Exception& e)
		{
			LogLog::error(LOG4CXX_STR(""Could not instantiate class ["") +
				className + LOG4CXX_STR(""].""), e);
		}
	}

	return defaultValue;
}",1,1,main\cpp\optionconverter.cpp,OptionConverter.instantiateByClassName,,false,382,407,instantiateByClassName,,,11,"ObjectPtr OptionConverter.instantiateByClassName (LogString,Class,ObjectPtr)"
41278,METHOD,main\cpp\optionconverter.cpp:<global>,TYPE_DECL,"void OptionConverter::selectAndConfigure(const File& configFileName,
	const LogString& _clazz, spi::LoggerRepositoryPtr hierarchy, int delay)
{
	ConfiguratorPtr configurator;
	LogString clazz = _clazz;

	LogString filename(configFileName.getPath());

#if LOG4CXX_HAS_DOMCONFIGURATOR
	if (clazz.empty()
		&& filename.length() > 4
		&& StringHelper::equalsIgnoreCase(
			filename.substr(filename.length() - 4),
			LOG4CXX_STR("".XML""), LOG4CXX_STR("".xml"")))
	{
		clazz = LOG4CXX_NS::xml::DOMConfigurator::getStaticClass().toString();
	}
#endif

	if (!clazz.empty())
	{
		LogLog::debug(LOG4CXX_STR(""Preferred configurator class: "") + clazz);
		const Class& clazzObj = Loader::loadClass(clazz);
		ObjectPtr obj = ObjectPtr(clazzObj.newInstance());
		configurator = LOG4CXX_NS::cast<Configurator>(obj);

		if (configurator == 0)
		{
			LogLog::error(LOG4CXX_STR(""Could not instantiate configurator ["")
				+ clazz + LOG4CXX_STR(""].""));
			return;
		}
	}
	else
	{
		configurator = std::make_shared<Proper...",1,1,main\cpp\optionconverter.cpp,OptionConverter.selectAndConfigure,,false,409,456,selectAndConfigure,,,12,"void OptionConverter.selectAndConfigure (File,LogString,ANY,int)"
41407,METHOD,main\cpp\outputdebugstringappender.cpp:<global>,TYPE_DECL,<global>,1,7,main\cpp\outputdebugstringappender.cpp,main\cpp\outputdebugstringappender.cpp:<global>,,false,1,48,<global>,,,1,
41418,METHOD,main\cpp\outputstream.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\outputstream.cpp,main\cpp\outputstream.cpp:<global>,,false,1,33,<global>,,,1,
41422,METHOD,main\cpp\outputstream.cpp:<global>,TYPE_DECL,"OutputStream::OutputStream()
{
}",1,1,main\cpp\outputstream.cpp,OutputStream.OutputStream,,false,27,29,OutputStream,,,3,ANY OutputStream.OutputStream ()
41426,METHOD,main\cpp\outputstream.cpp:<global>,TYPE_DECL,"OutputStream::~OutputStream()
{
}",1,1,main\cpp\outputstream.cpp,OutputStream.~OutputStream,,false,31,33,~OutputStream,,,4,ANY OutputStream.~OutputStream ()
41445,METHOD,main\cpp\outputstreamwriter.cpp:<global>,TYPE_DECL,<global>,1,2,main\cpp\outputstreamwriter.cpp,main\cpp\outputstreamwriter.cpp:<global>,,false,1,125,<global>,,,1,
41450,METHOD,OutputStreamWriterPrivate,TYPE_DECL,"OutputStreamWriterPrivate(OutputStreamPtr& out1) : out(out1), enc(CharsetEncoder::getDefaultEncoder()){}",2,105,main\cpp\outputstreamwriter.cpp,OutputStreamWriterPrivate.OutputStreamWriterPrivate,,false,31,31,OutputStreamWriterPrivate,,,1,ANY OutputStreamWriterPrivate.OutputStreamWriterPrivate (OutputStreamPtr)
41455,METHOD,OutputStreamWriterPrivate,TYPE_DECL,"OutputStreamWriterPrivate(OutputStreamPtr& out1,
							  CharsetEncoderPtr& enc1)
		: out(out1), enc(enc1){}",2,26,main\cpp\outputstreamwriter.cpp,OutputStreamWriterPrivate.OutputStreamWriterPrivate,,false,33,35,OutputStreamWriterPrivate,,,2,"ANY OutputStreamWriterPrivate.OutputStreamWriterPrivate (OutputStreamPtr,CharsetEncoderPtr)"
41463,METHOD,main\cpp\outputstreamwriter.cpp:<global>,TYPE_DECL,"OutputStreamWriter::OutputStreamWriter(OutputStreamPtr& out1)
	: m_priv(std::make_unique<OutputStreamWriterPrivate>(out1))
{
	if (out1 == 0)
	{
		throw NullPointerException(LOG4CXX_STR(""out parameter may not be null.""));
	}
}",1,1,main\cpp\outputstreamwriter.cpp,OutputStreamWriter.OutputStreamWriter,,false,41,48,OutputStreamWriter,,,4,ANY OutputStreamWriter.OutputStreamWriter (OutputStreamPtr)
41477,METHOD,main\cpp\outputstreamwriter.cpp:<global>,TYPE_DECL,"OutputStreamWriter::OutputStreamWriter(OutputStreamPtr& out1,
	CharsetEncoderPtr& enc1)
	: m_priv(std::make_unique<OutputStreamWriterPrivate>(out1, enc1))
{
	if (out1 == 0)
	{
		throw NullPointerException(LOG4CXX_STR(""out parameter may not be null.""));
	}

	if (enc1 == 0)
	{
		throw NullPointerException(LOG4CXX_STR(""enc parameter may not be null.""));
	}
}",1,1,main\cpp\outputstreamwriter.cpp,OutputStreamWriter.OutputStreamWriter,,false,50,63,OutputStreamWriter,,,5,"ANY OutputStreamWriter.OutputStreamWriter (OutputStreamPtr,CharsetEncoderPtr)"
41501,METHOD,main\cpp\outputstreamwriter.cpp:<global>,TYPE_DECL,"OutputStreamWriter::~OutputStreamWriter()
{
}",1,1,main\cpp\outputstreamwriter.cpp,OutputStreamWriter.~OutputStreamWriter,,false,65,67,~OutputStreamWriter,,,6,ANY OutputStreamWriter.~OutputStreamWriter ()
41505,METHOD,main\cpp\outputstreamwriter.cpp:<global>,TYPE_DECL,"void OutputStreamWriter::close(Pool& p)
{
	m_priv->out->close(p);
}",1,1,main\cpp\outputstreamwriter.cpp,OutputStreamWriter.close,,false,69,72,close,,,7,void OutputStreamWriter.close (Pool)
41517,METHOD,main\cpp\outputstreamwriter.cpp:<global>,TYPE_DECL,"void OutputStreamWriter::flush(Pool& p)
{
	m_priv->out->flush(p);
}",1,1,main\cpp\outputstreamwriter.cpp,OutputStreamWriter.flush,,false,74,77,flush,,,8,void OutputStreamWriter.flush (Pool)
41529,METHOD,main\cpp\outputstreamwriter.cpp:<global>,TYPE_DECL,"void OutputStreamWriter::write(const LogString& str, Pool& p)
{
	if (str.empty())
		return;
	if (CharsetEncoder::isTriviallyCopyable(str, m_priv->enc))
	{
		ByteBuffer buf((char*)str.data(), str.size() * sizeof (logchar));
		m_priv->out->write(buf, p);
	}
	else
	{
		enum { BUFSIZE = 1024 };
		char stackData[BUFSIZE];
		char* rawbuf = stackData;
		size_t bufSize = BUFSIZE;
#ifdef LOG4CXX_MULTI_PROCESS
		std::vector<char> heapData;
		// Ensure the logging event is a single write system call to keep events from each process separate
		if (bufSize < str.length() * 2)
		{
			heapData.resize(bufSize = str.length() * 2);
			rawbuf = heapData.data();
		}
#endif
		ByteBuffer buf(rawbuf, bufSize);
		m_priv->enc->reset();
		LogString::const_iterator iter = str.begin();

		while (iter != str.end())
		{
			CharsetEncoder::encode(m_priv->enc, str, iter, buf);
			buf.flip();
			m_priv->out->write(buf, p);
			buf.clear();
		}

		CharsetEncoder::encode(m_priv->enc, str, iter, buf);
		m_priv->enc->fl...",1,1,main\cpp\outputstreamwriter.cpp,OutputStreamWriter.write,,false,79,120,write,,,9,"void OutputStreamWriter.write (LogString,Pool)"
41666,METHOD,main\cpp\outputstreamwriter.cpp:<global>,TYPE_DECL,"OutputStreamPtr OutputStreamWriter::getOutputStreamPtr() const
{
	return m_priv->out;
}",1,1,main\cpp\outputstreamwriter.cpp,OutputStreamWriter.getOutputStreamPtr,,false,122,125,getOutputStreamPtr,,,10,OutputStreamPtr OutputStreamWriter.getOutputStreamPtr ()
41685,METHOD,main\cpp\patternconverter.cpp:<global>,TYPE_DECL,<global>,1,2,main\cpp\patternconverter.cpp,main\cpp\patternconverter.cpp:<global>,,false,1,59,<global>,,,1,
41689,METHOD,main\cpp\patternconverter.cpp:<global>,TYPE_DECL,"PatternConverter::PatternConverter(
	std::unique_ptr<PatternConverterPrivate> priv) :
	m_priv(std::move(priv))
{
}",1,1,main\cpp\patternconverter.cpp,PatternConverter.PatternConverter,,false,28,32,PatternConverter,,,3,ANY PatternConverter.PatternConverter (ANY)
41694,METHOD,main\cpp\patternconverter.cpp:<global>,TYPE_DECL,"PatternConverter::PatternConverter(const LogString& name,
	const LogString& style) :
	m_priv(std::make_unique<PatternConverterPrivate>(name, style))
{

}",1,1,main\cpp\patternconverter.cpp,PatternConverter.PatternConverter,,false,34,39,PatternConverter,,,4,"ANY PatternConverter.PatternConverter (LogString,LogString)"
41700,METHOD,main\cpp\patternconverter.cpp:<global>,TYPE_DECL,"PatternConverter::~PatternConverter()
{
}",1,1,main\cpp\patternconverter.cpp,PatternConverter.~PatternConverter,,false,41,43,~PatternConverter,,,5,ANY PatternConverter.~PatternConverter ()
41704,METHOD,main\cpp\patternconverter.cpp:<global>,TYPE_DECL,"LogString PatternConverter::getName() const
{
	return m_priv->name;
}",1,1,main\cpp\patternconverter.cpp,PatternConverter.getName,,false,45,48,getName,,,6,LogString PatternConverter.getName ()
41712,METHOD,main\cpp\patternconverter.cpp:<global>,TYPE_DECL,"LogString PatternConverter::getStyleClass(const LOG4CXX_NS::helpers::ObjectPtr& /* e */) const
{
	return m_priv->style;
}",1,1,main\cpp\patternconverter.cpp,PatternConverter.getStyleClass,,false,50,53,getStyleClass,,,7,LogString PatternConverter.getStyleClass (ANY)
41721,METHOD,main\cpp\patternconverter.cpp:<global>,TYPE_DECL,"void PatternConverter::append(LogString& toAppendTo, const std::string& src)
{
	LOG4CXX_DECODE_CHAR(decoded, src);
	toAppendTo.append(decoded);
}",1,1,main\cpp\patternconverter.cpp,PatternConverter.append,,false,55,59,append,,,8,"void PatternConverter.append (LogString,ANY)"
41802,METHOD,main\cpp\patternlayout.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\patternlayout.cpp,main\cpp\patternlayout.cpp:<global>,,false,1,291,<global>,,,1,
41805,METHOD,PatternLayoutPrivate,TYPE_DECL,"PatternLayoutPrivate()
		: expectedPatternLength(100)
		{}",2,4,main\cpp\patternlayout.cpp,PatternLayoutPrivate.PatternLayoutPrivate,,false,60,62,PatternLayoutPrivate,,,1,ANY PatternLayoutPrivate.PatternLayoutPrivate ()
41809,METHOD,PatternLayoutPrivate,TYPE_DECL,"PatternLayoutPrivate(const LogString& pattern)
		: conversionPattern(pattern)
		, expectedPatternLength(100)
		{}",2,4,main\cpp\patternlayout.cpp,PatternLayoutPrivate.PatternLayoutPrivate,,false,63,66,PatternLayoutPrivate,,,2,ANY PatternLayoutPrivate.PatternLayoutPrivate (LogString)
41824,METHOD,<empty>,<empty>,<empty>,1,,main\cpp\patternlayout.cpp,PatternLayoutPrivate:<clinit>,,false,58,,<clinit>,,,13,
41854,METHOD,main\cpp\patternlayout.cpp:<global>,TYPE_DECL,"PatternLayout::PatternLayout() :
	m_priv(std::make_unique<PatternLayoutPrivate>())
{
}",1,1,main\cpp\patternlayout.cpp,PatternLayout.PatternLayout,,false,97,100,PatternLayout,,,4,ANY PatternLayout.PatternLayout ()
41858,METHOD,main\cpp\patternlayout.cpp:<global>,TYPE_DECL,"PatternLayout::PatternLayout(const LogString& pattern) :
	m_priv(std::make_unique<PatternLayoutPrivate>(pattern))
{
	Pool pool;
	activateOptions(pool);
}",1,1,main\cpp\patternlayout.cpp,PatternLayout.PatternLayout,,false,105,110,PatternLayout,,,5,ANY PatternLayout.PatternLayout (LogString)
41866,METHOD,main\cpp\patternlayout.cpp:<global>,TYPE_DECL,PatternLayout::~PatternLayout() {},1,34,main\cpp\patternlayout.cpp,PatternLayout.~PatternLayout,,false,112,112,~PatternLayout,,,6,ANY PatternLayout.~PatternLayout ()
41870,METHOD,main\cpp\patternlayout.cpp:<global>,TYPE_DECL,"void PatternLayout::setConversionPattern(const LogString& pattern)
{
	m_priv->conversionPattern = pattern;
	Pool pool;
	activateOptions(pool);
}",1,1,main\cpp\patternlayout.cpp,PatternLayout.setConversionPattern,,false,114,119,setConversionPattern,,,7,void PatternLayout.setConversionPattern (LogString)
41883,METHOD,main\cpp\patternlayout.cpp:<global>,TYPE_DECL,"void PatternLayout::format(LogString& output,
	const spi::LoggingEventPtr& event,
	Pool& pool) const
{
	output.reserve(m_priv->expectedPatternLength + event->getMessage().size());
	std::vector<FormattingInfoPtr>::const_iterator formatterIter =
		m_priv->patternFields.begin();

	for (std::vector<LoggingEventPatternConverterPtr>::const_iterator
		converterIter = m_priv->patternConverters.begin();
		converterIter != m_priv->patternConverters.end();
		converterIter++, formatterIter++)
	{
		int startField = (int)output.length();
		(*converterIter)->format(event, output, pool);
		(*formatterIter)->format(startField, output);
	}

}",1,1,main\cpp\patternlayout.cpp,PatternLayout.format,,false,121,139,format,,,8,"void PatternLayout.format (LogString,ANY,Pool)"
41963,METHOD,main\cpp\patternlayout.cpp:<global>,TYPE_DECL,"void PatternLayout::setOption(const LogString& option, const LogString& value)
{
	if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""CONVERSIONPATTERN""),
			LOG4CXX_STR(""conversionpattern"")))
	{
		m_priv->conversionPattern = OptionConverter::convertSpecialChars(value);
	}else if(StringHelper::equalsIgnoreCase(option,
											LOG4CXX_STR(""ERRORCOLOR""),
											LOG4CXX_STR(""errorcolor""))){
		m_priv->m_errorColor = value;
		LogLog::debug(LOG4CXX_STR(""Setting error color to ""));
		LogLog::debug(value);
	}else if(StringHelper::equalsIgnoreCase(option,
											LOG4CXX_STR(""FATALCOLOR""),
											LOG4CXX_STR(""fatalcolor""))){
		m_priv->m_fatalColor = value;
	}else if(StringHelper::equalsIgnoreCase(option,
											LOG4CXX_STR(""WARNCOLOR""),
											LOG4CXX_STR(""warncolor""))){
		m_priv->m_warnColor = value;
	}else if(StringHelper::equalsIgnoreCase(option,
											LOG4CXX_STR(""INFOCOLOR""),
											LOG4CXX_STR(""infocolor""))){
		m_priv->m_infoColor = value;
	}else i...",1,1,main\cpp\patternlayout.cpp,PatternLayout.setOption,,false,141,175,setOption,,,9,"void PatternLayout.setOption (LogString,LogString)"
42108,METHOD,main\cpp\patternlayout.cpp:<global>,TYPE_DECL,"void PatternLayout::activateOptions(Pool&)
{
	LogString pat(m_priv->conversionPattern);

	if (pat.empty())
	{
		pat = LOG4CXX_STR(""%m%n"");
	}

	m_priv->patternConverters.erase(m_priv->patternConverters.begin(), m_priv->patternConverters.end());
	m_priv->patternFields.erase(m_priv->patternFields.begin(), m_priv->patternFields.end());
	std::vector<PatternConverterPtr> converters;
	PatternParser::parse(pat,
		converters,
		m_priv->patternFields,
		getFormatSpecifiers());

	//
	//   strip out any pattern converters that don't handle LoggingEvents
	//
	//
	for (std::vector<PatternConverterPtr>::const_iterator converterIter = converters.begin();
		converterIter != converters.end();
		converterIter++)
	{
		LoggingEventPatternConverterPtr eventConverter =
			LOG4CXX_NS::cast<LoggingEventPatternConverter>(*converterIter);

		if (eventConverter != NULL)
		{
			m_priv->patternConverters.push_back(eventConverter);
		}
	}
	m_priv->expectedPatternLength = getFormattedEventCharacterCount() * 2;
}",1,1,main\cpp\patternlayout.cpp,PatternLayout.activateOptions,,false,177,211,activateOptions,,,10,void PatternLayout.activateOptions (Pool)
42229,METHOD,main\cpp\patternlayout.cpp:<global>,TYPE_DECL,"LOG4CXX_NS::pattern::PatternMap PatternLayout::getFormatSpecifiers()
{
	PatternMap specs;
	RULES_PUT(""c"", LoggerPatternConverter);
	RULES_PUT(""logger"", LoggerPatternConverter);

	RULES_PUT(""C"", ClassNamePatternConverter);
	RULES_PUT(""class"", ClassNamePatternConverter);

	specs.insert(PatternMap::value_type(LogString(LOG4CXX_STR(""Y"")), std::bind(&PatternLayout::createColorStartPatternConverter, this, std::placeholders::_1)));
	RULES_PUT(""y"", ColorEndPatternConverter);

	RULES_PUT(""d"", DatePatternConverter);
	RULES_PUT(""date"", DatePatternConverter);

	RULES_PUT(""f"", ShortFileLocationPatternConverter);

	RULES_PUT(""F"", FileLocationPatternConverter);
	RULES_PUT(""file"", FileLocationPatternConverter);

	RULES_PUT(""l"", FullLocationPatternConverter);

	RULES_PUT(""L"", LineLocationPatternConverter);
	RULES_PUT(""line"", LineLocationPatternConverter);

	RULES_PUT(""m"", MessagePatternConverter);
	RULES_PUT(""message"", MessagePatternConverter);

	RULES_PUT(""n"", LineSeparatorPatternConverter);

	RULE...",1,1,main\cpp\patternlayout.cpp,PatternLayout.getFormatSpecifiers,,false,217,271,getFormatSpecifiers,,,11,PatternMap PatternLayout.getFormatSpecifiers ()
42805,METHOD,main\cpp\patternlayout.cpp:<global>,TYPE_DECL,"LogString PatternLayout::getConversionPattern() const
{
	return m_priv->conversionPattern;
}",1,1,main\cpp\patternlayout.cpp,PatternLayout.getConversionPattern,,false,273,276,getConversionPattern,,,12,LogString PatternLayout.getConversionPattern ()
42813,METHOD,main\cpp\patternlayout.cpp:<global>,TYPE_DECL,"pattern::PatternConverterPtr PatternLayout::createColorStartPatternConverter(const std::vector<LogString>& options){
	std::shared_ptr<ColorStartPatternConverter> colorPatternConverter = std::make_shared<ColorStartPatternConverter>();

	colorPatternConverter->setErrorColor(m_priv->m_errorColor);
	colorPatternConverter->setFatalColor(m_priv->m_fatalColor);
	colorPatternConverter->setWarnColor(m_priv->m_warnColor);
	colorPatternConverter->setInfoColor(m_priv->m_infoColor);
	colorPatternConverter->setDebugColor(m_priv->m_debugColor);
	colorPatternConverter->setTraceColor(m_priv->m_traceColor);

	return colorPatternConverter;
}",1,1,main\cpp\patternlayout.cpp,PatternLayout.createColorStartPatternConverter,,false,278,289,createColorStartPatternConverter,,,13,PatternConverterPtr PatternLayout.createColorStartPatternConverter (ANY)
42885,METHOD,main\cpp\patternparser.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\patternparser.cpp,main\cpp\patternparser.cpp:<global>,,false,1,392,<global>,,,1,
42891,METHOD,main\cpp\patternparser.cpp:<global>,TYPE_DECL,"PatternParser::PatternParser()
{
}",1,1,main\cpp\patternparser.cpp,PatternParser.PatternParser,,false,33,35,PatternParser,,,3,ANY PatternParser.PatternParser ()
42895,METHOD,main\cpp\patternparser.cpp:<global>,TYPE_DECL,"bool PatternParser::isUnicodeIdentifierStart(logchar ch)
{
	//
	//   greatly simplified version checks if
	//     character is USACII alpha or number
	//
	return (ch >= 0x41 /* 'A' */ && ch <= 0x5A /* 'Z' */) ||
		(ch >= 0x61 /* 'a' */ && ch <= 0x7A /* 'z' */) ||
		(ch >= 0x30 /* '0' */ && ch <= 0x39 /* '9' */);
}",1,1,main\cpp\patternparser.cpp,PatternParser.isUnicodeIdentifierStart,,false,37,46,isUnicodeIdentifierStart,,,4,bool PatternParser.isUnicodeIdentifierStart (logchar)
42924,METHOD,main\cpp\patternparser.cpp:<global>,TYPE_DECL,"bool PatternParser::isUnicodeIdentifierPart(logchar ch)
{
	//
	//   greatly simplified version checks if
	//     character is USACII alpha or number
	//
	return isUnicodeIdentifierStart(ch)
		|| (ch == 0x5F /* '_' */);
}",1,1,main\cpp\patternparser.cpp,PatternParser.isUnicodeIdentifierPart,,false,48,56,isUnicodeIdentifierPart,,,5,bool PatternParser.isUnicodeIdentifierPart (logchar)
42936,METHOD,main\cpp\patternparser.cpp:<global>,TYPE_DECL,"size_t PatternParser::extractConverter(
	logchar lastChar, const LogString& pattern,
	LogString::size_type i, LogString& convBuf,
	LogString& currentLiteral)
{
	if (!convBuf.empty())
	{
		convBuf.erase(convBuf.begin(), convBuf.end());
	}

	// When this method is called, lastChar points to the first character of the
	// conversion word. For example:
	// For ""%hello""     lastChar = 'h'
	// For ""%-5hello""   lastChar = 'h'
	//System.out.println(""lastchar is ""+lastChar);
	if (!isUnicodeIdentifierStart(lastChar))
	{
		return i;
	}

	convBuf.append(1, lastChar);

	while (
		(i < pattern.length())
		&& isUnicodeIdentifierPart(pattern[i]))
	{
		convBuf.append(1, pattern[i]);
		currentLiteral.append(1, pattern[i]);

		//System.out.println(""conv buffer is now [""+convBuf+""]."");
		i++;
	}

	return i;
}",1,1,main\cpp\patternparser.cpp,PatternParser.extractConverter,,false,58,92,extractConverter,,,6,"size_t PatternParser.extractConverter (logchar,LogString,ANY,LogString,LogString)"
43010,METHOD,main\cpp\patternparser.cpp:<global>,TYPE_DECL,"size_t PatternParser::extractOptions(const LogString& pattern, LogString::size_type i,
	std::vector<LogString>& options)
{
	while ((i < pattern.length()) && (pattern[i] == 0x7B /* '{' */))
	{
		size_t end = pattern.find(0x7D /* '}' */, i);

		if (end == pattern.npos)
		{
			break;
		}

		LogString r(pattern.substr(i + 1, end - i - 1));
		options.push_back(r);
		i = end + 1;
	}

	return i;
}",1,1,main\cpp\patternparser.cpp,PatternParser.extractOptions,,false,95,113,extractOptions,,,7,"size_t PatternParser.extractOptions (LogString,ANY,ANY)"
43074,METHOD,main\cpp\patternparser.cpp:<global>,TYPE_DECL,"void PatternParser::parse(
	const LogString& pattern,
	std::vector<PatternConverterPtr>& patternConverters,
	std::vector<FormattingInfoPtr>& formattingInfos,
	const PatternMap& rules)
{

	LogString currentLiteral;

	size_t patternLength = pattern.length();
	int state = LITERAL_STATE;
	logchar c;
	size_t i = 0;
	FormattingInfoPtr formattingInfo(FormattingInfo::getDefault());

	while (i < patternLength)
	{
		c = pattern[i++];

		switch (state)
		{
			case LITERAL_STATE:

				// In literal state, the last char is always a literal.
				if (i == patternLength)
				{
					currentLiteral.append(1, c);

					continue;
				}

				if (c == ESCAPE_CHAR)
				{
					// peek at the next char.
					if (pattern[i] == ESCAPE_CHAR)
					{
						currentLiteral.append(1, c);
						i++; // move pointer
					}
					else
					{
						if (!currentLiteral.empty())
						{
							patternConverters.push_back(
								LiteralPatternConverter::newInstance(currentLiteral));
							formattingInfos.push_back(Forma...",1,1,main\cpp\patternparser.cpp,PatternParser.parse,,false,115,304,parse,,,8,"void PatternParser.parse (LogString,ANY,ANY,PatternMap)"
43592,METHOD,main\cpp\patternparser.cpp:<global>,TYPE_DECL,"PatternConverterPtr PatternParser::createConverter(
	const LogString& converterId,
	LogString& currentLiteral,
	const PatternMap& rules,
	std::vector<LogString>& options)
{

	LogString converterName(converterId);

	for (size_t i = converterId.length(); i > 0; i--)
	{
		converterName = converterName.substr(0, i);
		PatternMap::const_iterator iter = rules.find(converterName);

		if (iter != rules.end())
		{
			currentLiteral.erase(currentLiteral.begin(),
				currentLiteral.end() - (converterId.length() - i));
			return (iter->second)(options);
		}
	}

	LogLog::error(LogString(LOG4CXX_STR(""Unrecognized format specifier "")) + converterId);

	return PatternConverterPtr();
}",1,1,main\cpp\patternparser.cpp,PatternParser.createConverter,,false,307,332,createConverter,,,9,"PatternConverterPtr PatternParser.createConverter (LogString,LogString,PatternMap,ANY)"
43678,METHOD,main\cpp\patternparser.cpp:<global>,TYPE_DECL,"size_t PatternParser::finalizeConverter(
	logchar c, const LogString& pattern, size_t i,
	LogString& currentLiteral, const FormattingInfoPtr& formattingInfo,
	const PatternMap&  rules,
	std::vector<PatternConverterPtr>& patternConverters,
	std::vector<FormattingInfoPtr>&  formattingInfos)
{
	LogString convBuf;
	i = extractConverter(c, pattern, i, convBuf, currentLiteral);

	if (convBuf.empty())
	{
		LogLog::error(LOG4CXX_STR(""Empty conversion specifier""));
		patternConverters.push_back(
			LiteralPatternConverter::newInstance(currentLiteral));
		formattingInfos.push_back(FormattingInfo::getDefault());
	}
	else
	{
		LogString converterId(convBuf);

		std::vector<LogString> options;
		i = extractOptions(pattern, i, options);

		PatternConverterPtr pc(
			createConverter(
				converterId, currentLiteral, rules, options));

		if (pc == NULL)
		{
			LogString msg(LOG4CXX_STR(""Unrecognized conversion specifier [""));
			msg.append(converterId);
			msg.append(LOG4CXX_STR(""] in conversion pa...",1,1,main\cpp\patternparser.cpp,PatternParser.finalizeConverter,,false,334,392,finalizeConverter,,,10,"size_t PatternParser.finalizeConverter (logchar,LogString,size_t,LogString,FormattingInfoPtr,PatternMap,ANY,ANY)"
43870,METHOD,main\cpp\pool.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\pool.cpp,main\cpp\pool.cpp:<global>,,false,1,103,<global>,,,1,
43872,METHOD,main\cpp\pool.cpp:<global>,TYPE_DECL,"Pool::Pool() : pool(0), release(true)
{
	apr_status_t stat = apr_pool_create(&pool, APRInitializer::getRootPool());

	if (stat != APR_SUCCESS)
	{
		throw PoolException(stat);
	}
}",1,1,main\cpp\pool.cpp,Pool.Pool,,false,33,41,Pool,,,1,ANY Pool.Pool ()
43894,METHOD,main\cpp\pool.cpp:<global>,TYPE_DECL,"Pool::Pool(apr_pool_t* p, bool release1) : pool(p), release(release1)
{
	assert(p != NULL);
}",1,1,main\cpp\pool.cpp,Pool.Pool,,false,43,46,Pool,,,2,"ANY Pool.Pool (apr_pool_t*,bool)"
43904,METHOD,main\cpp\pool.cpp:<global>,TYPE_DECL,"Pool::~Pool()
{
	if (release)
	{
		apr_pool_destroy(pool);
	}
}",1,1,main\cpp\pool.cpp,Pool.~Pool,,false,48,54,~Pool,,,3,ANY Pool.~Pool ()
43912,METHOD,main\cpp\pool.cpp:<global>,TYPE_DECL,"apr_pool_t* Pool::getAPRPool()
{
	return pool;
}",1,1,main\cpp\pool.cpp,Pool.getAPRPool,,false,57,60,getAPRPool,,,4,apr_pool_t Pool.getAPRPool ()
43918,METHOD,main\cpp\pool.cpp:<global>,TYPE_DECL,"apr_pool_t* Pool::create()
{
	apr_pool_t* child;
	apr_status_t stat = apr_pool_create(&child, pool);

	if (stat != APR_SUCCESS)
	{
		throw PoolException(stat);
	}

	return child;
}",1,1,main\cpp\pool.cpp,Pool.create,,false,62,73,create,,,5,apr_pool_t Pool.create ()
43940,METHOD,main\cpp\pool.cpp:<global>,TYPE_DECL,"void* Pool::palloc(size_t size)
{
	return apr_palloc(pool, size);
}",1,1,main\cpp\pool.cpp,Pool.palloc,,false,75,78,palloc,,,6,void* Pool.palloc (size_t)
43949,METHOD,main\cpp\pool.cpp:<global>,TYPE_DECL,"char* Pool::pstralloc(size_t size)
{
	return (char*) palloc(size);
}",1,1,main\cpp\pool.cpp,Pool.pstralloc,,false,80,83,pstralloc,,,7,char* Pool.pstralloc (size_t)
43959,METHOD,main\cpp\pool.cpp:<global>,TYPE_DECL,"char* Pool::itoa(int n)
{
	return apr_itoa(pool, n);
}",1,1,main\cpp\pool.cpp,Pool.itoa,,false,85,88,itoa,,,8,char* Pool.itoa (int)
43968,METHOD,main\cpp\pool.cpp:<global>,TYPE_DECL,"char* Pool::pstrndup(const char* s, size_t len)
{
	return apr_pstrndup(pool, s, len);
}",1,1,main\cpp\pool.cpp,Pool.pstrndup,,false,90,93,pstrndup,,,9,"char* Pool.pstrndup (char*,size_t)"
43979,METHOD,main\cpp\pool.cpp:<global>,TYPE_DECL,"char* Pool::pstrdup(const char* s)
{
	return apr_pstrdup(pool, s);
}",1,1,main\cpp\pool.cpp,Pool.pstrdup,,false,95,98,pstrdup,,,10,char* Pool.pstrdup (char*)
43988,METHOD,main\cpp\pool.cpp:<global>,TYPE_DECL,"char* Pool::pstrdup(const std::string& s)
{
	return apr_pstrndup(pool, s.data(), s.length());
}",1,1,main\cpp\pool.cpp,Pool.pstrdup,,false,100,103,pstrdup,,,11,char* Pool.pstrdup (ANY)
44017,METHOD,main\cpp\properties.cpp:<global>,TYPE_DECL,<global>,1,2,main\cpp\properties.cpp,main\cpp\properties.cpp:<global>,,false,1,454,<global>,,,1,
44020,METHOD,PropertyParser,TYPE_DECL,"void parse(LogString& in, Properties& properties)
		{
			LogString key, element;
			LexemType lexemType = BEGIN;
			logchar c;
			bool finished = false;

			if (!get(in, c))
			{
				return;
			}

			while (!finished)
			{
				switch (lexemType)
				{
					case BEGIN:
						switch (c)
						{
							case 0x20: // ' '
							case 0x09: // '\t'
							case 0x0A: // '\n'
							case 0x0D: // '\r'
								if (!get(in, c))
								{
									finished = true;
								}

								break;

							case 0x23: // '#'
							case 0x21: // '!'
								lexemType = COMMENT;

								if (!get(in, c))
								{
									finished = true;
								}

								break;

							default:
								lexemType = KEY;
								break;
						}

						break;

					case KEY:
						switch (c)
						{
							case 0x5C: // '\\'
								lexemType = KEY_ESCAPE;

								if (!get(in, c))
								{
									finished = true;
								}

								break;

							case 0x09: // '\t'
							case 0x20: // ' '
							case 0x3A: // ':'
		...",3,3,main\cpp\properties.cpp,PropertyParser.parse,,false,30,365,parse,,,1,"void PropertyParser.parse (LogString,Properties)"
44591,METHOD,PropertyParser,TYPE_DECL,"static bool get(LogString& in, logchar& c)
		{
			if (in.empty())
			{
				c = 0;
				return false;
			}

			c = in[0];
			in.erase(in.begin());
			return true;
		}",3,3,main\cpp\properties.cpp,PropertyParser.get,,false,368,379,get,,,2,"bool PropertyParser.get (LogString,logchar)"
44636,METHOD,main\cpp\properties.cpp:<global>,TYPE_DECL,"Properties::Properties() : properties(new PropertyMap())
{
}",1,1,main\cpp\properties.cpp,Properties.Properties,,false,398,400,Properties,,,2,ANY Properties.Properties ()
44640,METHOD,main\cpp\properties.cpp:<global>,TYPE_DECL,"Properties::~Properties()
{
	delete properties;
}",1,1,main\cpp\properties.cpp,Properties.~Properties,,false,402,405,~Properties,,,3,ANY Properties.~Properties ()
44646,METHOD,main\cpp\properties.cpp:<global>,TYPE_DECL,"LogString Properties::setProperty(const LogString& key, const LogString& value)
{
	return put(key, value);
}",1,1,main\cpp\properties.cpp,Properties.setProperty,,false,407,410,setProperty,,,4,"LogString Properties.setProperty (LogString,LogString)"
44656,METHOD,main\cpp\properties.cpp:<global>,TYPE_DECL,"LogString Properties::put(const LogString& key, const LogString& value)
{
	LogString oldValue((*properties)[key]);
	(*properties)[key] = value;
	return oldValue;
}",1,1,main\cpp\properties.cpp,Properties.put,,false,412,417,put,,,5,"LogString Properties.put (LogString,LogString)"
44676,METHOD,main\cpp\properties.cpp:<global>,TYPE_DECL,"LogString Properties::getProperty(const LogString& key) const
{
	return get(key);
}",1,1,main\cpp\properties.cpp,Properties.getProperty,,false,419,422,getProperty,,,6,LogString Properties.getProperty (LogString)
44684,METHOD,main\cpp\properties.cpp:<global>,TYPE_DECL,"LogString Properties::get(const LogString& key) const
{
	PropertyMap::const_iterator it = properties->find(key);
	return (it != properties->end()) ? it->second : LogString();
}",1,1,main\cpp\properties.cpp,Properties.get,,false,424,428,get,,,7,LogString Properties.get (LogString)
44709,METHOD,main\cpp\properties.cpp:<global>,TYPE_DECL,"void Properties::load(InputStreamPtr inStream)
{
	Pool pool;
	auto lineReader = std::make_shared<InputStreamReader>(inStream, CharsetDecoder::getISOLatinDecoder());
	LogString contents = lineReader->read(pool);
	properties->clear();
	PropertyParser parser;
	parser.parse(contents, *this);
}",1,1,main\cpp\properties.cpp,Properties.load,,false,430,438,load,,,8,void Properties.load (InputStreamPtr)
44751,METHOD,main\cpp\properties.cpp:<global>,TYPE_DECL,"std::vector<LogString> Properties::propertyNames() const
{
	std::vector<LogString> names;
	names.reserve(properties->size());

	PropertyMap::const_iterator it;

	for (it = properties->begin(); it != properties->end(); it++)
	{
		const LogString& key = it->first;
		names.push_back(key);
	}

	return names;
}",1,1,main\cpp\properties.cpp,Properties.propertyNames,,false,440,454,propertyNames,,,9,vector<LogString> Properties.propertyNames ()
44816,METHOD,main\cpp\propertiespatternconverter.cpp:<global>,TYPE_DECL,<global>,1,5,main\cpp\propertiespatternconverter.cpp,main\cpp\propertiespatternconverter.cpp:<global>,,false,1,99,<global>,,,1,
44819,METHOD,PropertiesPatternConverterPrivate,TYPE_DECL,"PropertiesPatternConverterPrivate( const LogString& name, const LogString& style, const LogString& propertyName ) :
		PatternConverterPrivate( name, style ),
		option(propertyName) {}",2,25,main\cpp\propertiespatternconverter.cpp,PropertiesPatternConverterPrivate.PropertiesPatternConverterPrivate,,false,35,37,PropertiesPatternConverterPrivate,,,1,"ANY PropertiesPatternConverterPrivate.PropertiesPatternConverterPrivate (LogString,LogString,LogString)"
44829,METHOD,main\cpp\propertiespatternconverter.cpp:<global>,TYPE_DECL,"PropertiesPatternConverter::PropertiesPatternConverter(const LogString& name1,
	const LogString& propertyName) :
	LoggingEventPatternConverter(
		std::make_unique<PropertiesPatternConverterPrivate>(name1, LOG4CXX_STR(""property""), propertyName))
{
}",1,1,main\cpp\propertiespatternconverter.cpp,PropertiesPatternConverter.PropertiesPatternConverter,,false,47,52,PropertiesPatternConverter,,,4,"ANY PropertiesPatternConverter.PropertiesPatternConverter (LogString,LogString)"
44835,METHOD,main\cpp\propertiespatternconverter.cpp:<global>,TYPE_DECL,"PatternConverterPtr PropertiesPatternConverter::newInstance(
	const std::vector<LogString>& options)
{
	if (options.size() == 0)
	{
		static WideLife<PatternConverterPtr> def = std::make_shared<PropertiesPatternConverter>(
				LOG4CXX_STR(""Properties""), LOG4CXX_STR(""""));
		return def;
	}

	LogString converterName(LOG4CXX_STR(""Property{""));
	converterName.append(options[0]);
	converterName.append(LOG4CXX_STR(""}""));
	return std::make_shared<PropertiesPatternConverter>(converterName, options[0]);
}",1,1,main\cpp\propertiespatternconverter.cpp,PropertiesPatternConverter.newInstance,,false,54,68,newInstance,,,5,PatternConverterPtr PropertiesPatternConverter.newInstance (ANY)
44895,METHOD,main\cpp\propertiespatternconverter.cpp:<global>,TYPE_DECL,"void PropertiesPatternConverter::format(
	const LoggingEventPtr& event,
	LogString& toAppendTo,
	Pool& /* p */) const
{
	if (priv->option.length() == 0)
	{
		toAppendTo.append(1, (logchar) 0x7B /* '{' */);

		LoggingEvent::KeySet keySet(event->getMDCKeySet());

		for (LoggingEvent::KeySet::const_iterator iter = keySet.begin();
			iter != keySet.end();
			iter++)
		{
			toAppendTo.append(1, (logchar) 0x7B /* '{' */);
			toAppendTo.append(*iter);
			toAppendTo.append(1, (logchar) 0x2C /* ',' */);
			event->getMDC(*iter, toAppendTo);
			toAppendTo.append(1, (logchar) 0x7D /* '}' */);
		}

		toAppendTo.append(1, (logchar) 0x7D /* '}' */);

	}
	else
	{
		event->getMDC(priv->option, toAppendTo);
	}
}",1,5,main\cpp\propertiespatternconverter.cpp,PropertiesPatternConverter.format,,false,70,99,format,,,6,"void PropertiesPatternConverter.format (LoggingEventPtr,LogString,Pool)"
45064,METHOD,main\cpp\propertyconfigurator.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\propertyconfigurator.cpp,main\cpp\propertyconfigurator.cpp:<global>,,false,1,545,<global>,,,1,
45068,METHOD,LOG4CXX_NS.PropertyWatchdog,TYPE_DECL,"PropertyWatchdog(const File& filename) : FileWatchdog(filename)
		{
		}",3,3,main\cpp\propertyconfigurator.cpp,LOG4CXX_NS.PropertyWatchdog.PropertyWatchdog,,false,56,58,PropertyWatchdog,,,1,ANY LOG4CXX_NS.PropertyWatchdog.PropertyWatchdog (File)
45073,METHOD,LOG4CXX_NS.PropertyWatchdog,TYPE_DECL,"void doOnChange()
		{
			PropertyConfigurator().doConfigure(file(),
				LogManager::getLoggerRepository());
		}",3,3,main\cpp\propertyconfigurator.cpp,LOG4CXX_NS.PropertyWatchdog.doOnChange,,false,65,69,doOnChange,,,2,void LOG4CXX_NS.PropertyWatchdog.doOnChange ()
45092,METHOD,main\cpp\propertyconfigurator.cpp:<global>,TYPE_DECL,"PropertyConfigurator::PropertyConfigurator()
	: registry(new std::map<LogString, AppenderPtr>()), loggerFactory(new DefaultLoggerFactory())
{
}",1,1,main\cpp\propertyconfigurator.cpp,PropertyConfigurator.PropertyConfigurator,,false,77,80,PropertyConfigurator,,,6,ANY PropertyConfigurator.PropertyConfigurator ()
45096,METHOD,main\cpp\propertyconfigurator.cpp:<global>,TYPE_DECL,"PropertyConfigurator::~PropertyConfigurator()
{
	delete registry;
}",1,1,main\cpp\propertyconfigurator.cpp,PropertyConfigurator.~PropertyConfigurator,,false,82,85,~PropertyConfigurator,,,7,ANY PropertyConfigurator.~PropertyConfigurator ()
45102,METHOD,main\cpp\propertyconfigurator.cpp:<global>,TYPE_DECL,"spi::ConfigurationStatus PropertyConfigurator::doConfigure(const File& configFileName,
	spi::LoggerRepositoryPtr hierarchy)
{
	hierarchy->setConfigured(true);

	Properties props;

	try
	{
		InputStreamPtr inputStream = InputStreamPtr( new FileInputStream(configFileName) );
		props.load(inputStream);
	}
	catch (const IOException& ex)
	{
		LOG4CXX_DECODE_CHAR(lsMsg, ex.what());
		LogLog::error(((LogString) LOG4CXX_STR(""Could not read configuration file [""))
			+ configFileName.getPath() + LOG4CXX_STR(""]: "") + lsMsg);
		return spi::ConfigurationStatus::NotConfigured;
	}

	try
	{
		LogString debugMsg = LOG4CXX_STR(""Loading configuration file ["")
				+ configFileName.getPath() + LOG4CXX_STR(""]."");
		LogLog::debug(debugMsg);
		return doConfigure(props, hierarchy);
	}
	catch (const std::exception& ex)
	{
		LogLog::error(((LogString) LOG4CXX_STR(""Could not parse configuration file [""))
			+ configFileName.getPath() + LOG4CXX_STR(""]: ""), ex);
	}

	return spi::ConfigurationStatus::NotConfigur...",1,1,main\cpp\propertyconfigurator.cpp,PropertyConfigurator.doConfigure,,false,87,121,doConfigure,,,8,"ConfigurationStatus PropertyConfigurator.doConfigure (File,ANY)"
45207,METHOD,main\cpp\propertyconfigurator.cpp:<global>,TYPE_DECL,"spi::ConfigurationStatus PropertyConfigurator::configure(const File& configFilename)
{
	return PropertyConfigurator().doConfigure(configFilename, LogManager::getLoggerRepository());
}",1,1,main\cpp\propertyconfigurator.cpp,PropertyConfigurator.configure,,false,123,126,configure,,,9,ConfigurationStatus PropertyConfigurator.configure (File)
45222,METHOD,main\cpp\propertyconfigurator.cpp:<global>,TYPE_DECL,"spi::ConfigurationStatus PropertyConfigurator::configure(helpers::Properties& properties)
{
	return PropertyConfigurator().doConfigure(properties, LogManager::getLoggerRepository());
}",1,1,main\cpp\propertyconfigurator.cpp,PropertyConfigurator.configure,,false,128,131,configure,,,10,ConfigurationStatus PropertyConfigurator.configure (ANY)
45237,METHOD,main\cpp\propertyconfigurator.cpp:<global>,TYPE_DECL,"spi::ConfigurationStatus PropertyConfigurator::configureAndWatch(const File& configFilename)
{
	return configureAndWatch(configFilename, FileWatchdog::DEFAULT_DELAY);
}",1,1,main\cpp\propertyconfigurator.cpp,PropertyConfigurator.configureAndWatch,,false,133,136,configureAndWatch,,,11,ConfigurationStatus PropertyConfigurator.configureAndWatch (File)
45248,METHOD,main\cpp\propertyconfigurator.cpp:<global>,TYPE_DECL,"spi::ConfigurationStatus PropertyConfigurator::configureAndWatch(
	const File& configFilename, long delay)
{
	if (pdog)
	{
		APRInitializer::unregisterCleanup(pdog);
		delete pdog;
	}

	spi::ConfigurationStatus stat = PropertyConfigurator().doConfigure(configFilename, LogManager::getLoggerRepository());

	pdog = new PropertyWatchdog(configFilename);
	APRInitializer::registerCleanup(pdog);
	pdog->setDelay(delay);
	pdog->start();

	return stat;
}",1,1,main\cpp\propertyconfigurator.cpp,PropertyConfigurator.configureAndWatch,,false,140,157,configureAndWatch,,,12,"ConfigurationStatus PropertyConfigurator.configureAndWatch (File,long)"
45289,METHOD,main\cpp\propertyconfigurator.cpp:<global>,TYPE_DECL,"spi::ConfigurationStatus PropertyConfigurator::doConfigure(helpers::Properties& properties,
	spi::LoggerRepositoryPtr hierarchy)
{
	hierarchy->setConfigured(true);

	static const WideLife<LogString> DEBUG_KEY(LOG4CXX_STR(""log4j.debug""));
	LogString value(properties.getProperty(DEBUG_KEY));

	if (!value.empty())
	{
		LogLog::setInternalDebugging(OptionConverter::toBoolean(value, true));
	}

	static const WideLife<LogString> THRESHOLD_PREFIX(LOG4CXX_STR(""log4j.threshold""));
	LogString thresholdStr =
		OptionConverter::findAndSubst(THRESHOLD_PREFIX, properties);

	if (!thresholdStr.empty())
	{
		hierarchy->setThreshold(OptionConverter::toLevel(thresholdStr, Level::getAll()));
		LogLog::debug(((LogString) LOG4CXX_STR(""Hierarchy threshold set to [""))
			+ hierarchy->getThreshold()->toString()
			+ LOG4CXX_STR(""].""));
	}

	LogString threadConfigurationValue(properties.getProperty(LOG4CXX_STR(""log4j.threadConfiguration"")));

	if ( threadConfigurationValue == LOG4CXX_STR(""NoConfiguration"") ...",1,1,main\cpp\propertyconfigurator.cpp,PropertyConfigurator.doConfigure,,false,159,214,doConfigure,,,13,"ConfigurationStatus PropertyConfigurator.doConfigure (ANY,ANY)"
45478,METHOD,main\cpp\propertyconfigurator.cpp:<global>,TYPE_DECL,"void PropertyConfigurator::configureLoggerFactory(helpers::Properties& props)
{
	static const WideLife<LogString> LOGGER_FACTORY_KEY(LOG4CXX_STR(""log4j.loggerFactory""));

	LogString factoryClassName =
		OptionConverter::findAndSubst(LOGGER_FACTORY_KEY, props);

	if (!factoryClassName.empty())
	{
		LogString msg(LOG4CXX_STR(""Setting logger factory to [""));
		msg += factoryClassName;
		msg += LOG4CXX_STR(""]."");
		LogLog::debug(msg);
		std::shared_ptr<Object> instance = std::shared_ptr<Object>(
				Loader::loadClass(factoryClassName).newInstance() );

		loggerFactory = LOG4CXX_NS::cast<LoggerFactory>( instance );
		static const WideLife<LogString> FACTORY_PREFIX(LOG4CXX_STR(""log4j.factory.""));
		Pool p;
		PropertySetter::setProperties(loggerFactory, props, FACTORY_PREFIX, p);
	}
}",1,1,main\cpp\propertyconfigurator.cpp,PropertyConfigurator.configureLoggerFactory,,false,216,237,configureLoggerFactory,,,14,void PropertyConfigurator.configureLoggerFactory (ANY)
45563,METHOD,main\cpp\propertyconfigurator.cpp:<global>,TYPE_DECL,"void PropertyConfigurator::configureRootLogger(helpers::Properties& props,
	spi::LoggerRepositoryPtr& hierarchy)
{
	static const WideLife<LogString> ROOT_CATEGORY_PREFIX(LOG4CXX_STR(""log4j.rootCategory""));
	static const WideLife<LogString> ROOT_LOGGER_PREFIX(LOG4CXX_STR(""log4j.rootLogger""));



	LogString effectiveFrefix(ROOT_LOGGER_PREFIX);
	LogString value = OptionConverter::findAndSubst(ROOT_LOGGER_PREFIX, props);

	if (value.empty())
	{
		value = OptionConverter::findAndSubst(ROOT_CATEGORY_PREFIX, props);
		effectiveFrefix = ROOT_CATEGORY_PREFIX;
	}

	if (value.empty())
	{
		LogLog::debug(LOG4CXX_STR(""Could not find root logger information. Is this OK?""));
	}
	else
	{
		LoggerPtr root = hierarchy->getRootLogger();

		static const WideLife<LogString> INTERNAL_ROOT_NAME(LOG4CXX_STR(""root""));
		parseLogger(props, root, effectiveFrefix, INTERNAL_ROOT_NAME, value, true);
	}
}",1,1,main\cpp\propertyconfigurator.cpp,PropertyConfigurator.configureRootLogger,,false,239,267,configureRootLogger,,,15,"void PropertyConfigurator.configureRootLogger (ANY,ANY)"
45638,METHOD,main\cpp\propertyconfigurator.cpp:<global>,TYPE_DECL,"void PropertyConfigurator::parseCatsAndRenderers(helpers::Properties& props,
	spi::LoggerRepositoryPtr& hierarchy)
{
	static const WideLife<LogString> CATEGORY_PREFIX(LOG4CXX_STR(""log4j.category.""));
	static const WideLife<LogString> LOGGER_PREFIX(LOG4CXX_STR(""log4j.logger.""));

	std::vector<LogString> names = props.propertyNames();

	std::vector<LogString>::iterator it = names.begin();
	std::vector<LogString>::iterator itEnd = names.end();

	while (it != itEnd)
	{
		LogString key = *it++;

		if (key.find(CATEGORY_PREFIX) == 0 || key.find(LOGGER_PREFIX) == 0)
		{
			LogString loggerName;

			if (key.find(CATEGORY_PREFIX) == 0)
			{
				loggerName = key.substr(CATEGORY_PREFIX.value().length());
			}
			else if (key.find(LOGGER_PREFIX.value()) == 0)
			{
				loggerName = key.substr(LOGGER_PREFIX.value().length());
			}

			LogString value = OptionConverter::findAndSubst(key, props);
			LoggerPtr logger = hierarchy->getLogger(loggerName, loggerFactory);

			bool additivity = parseAddit...",1,1,main\cpp\propertyconfigurator.cpp,PropertyConfigurator.parseCatsAndRenderers,,false,269,305,parseCatsAndRenderers,,,16,"void PropertyConfigurator.parseCatsAndRenderers (ANY,ANY)"
45788,METHOD,main\cpp\propertyconfigurator.cpp:<global>,TYPE_DECL,"bool PropertyConfigurator::parseAdditivityForLogger(helpers::Properties& props,
	LoggerPtr& cat, const LogString& loggerName)
{

	static const WideLife<LogString> ADDITIVITY_PREFIX(LOG4CXX_STR(""log4j.additivity.""));



	LogString value(OptionConverter::findAndSubst(ADDITIVITY_PREFIX.value() + loggerName, props));
	LogLog::debug((LogString) LOG4CXX_STR(""Handling "") + ADDITIVITY_PREFIX.value()
		+ loggerName + LOG4CXX_STR(""=["") +  value + LOG4CXX_STR(""]""));

	// touch additivity only if necessary
	if (!value.empty())
	{
		bool additivity = OptionConverter::toBoolean(value, true);
		LogLog::debug(((LogString) LOG4CXX_STR(""Setting additivity for \""""))
			+ loggerName
			+ ((additivity) ?  LOG4CXX_STR(""\"" to true"") :
				LOG4CXX_STR(""\"" to false"")));

		return additivity;
	}

	return true;
}",1,1,main\cpp\propertyconfigurator.cpp,PropertyConfigurator.parseAdditivityForLogger,,false,307,332,parseAdditivityForLogger,,,17,"bool PropertyConfigurator.parseAdditivityForLogger (ANY,LoggerPtr,LogString)"
45872,METHOD,main\cpp\propertyconfigurator.cpp:<global>,TYPE_DECL,"void PropertyConfigurator::parseLogger(
	helpers::Properties& props, LoggerPtr& logger, const LogString& /* optionKey */,
	const LogString& loggerName, const LogString& value, bool additivity)
{
	LogLog::debug(((LogString) LOG4CXX_STR(""Parsing for [""))
		+ loggerName
		+ LOG4CXX_STR(""] with value=["")
		+ value + LOG4CXX_STR(""].""));

	// We must skip over ',' but not white space
	StringTokenizer st(value, LOG4CXX_STR("",""));

	// If value is not in the form "", appender.."" or """", then we should set
	// the level of the logger.
	if (!(value.find(LOG4CXX_STR("","")) == 0 || value.empty()))
	{
		// just to be on the safe side...
		if (!st.hasMoreTokens())
		{
			return;
		}

		LogString levelStr = st.nextToken();
		LogLog::debug((LogString) LOG4CXX_STR(""Level token is ["")
			+ levelStr +  LOG4CXX_STR(""].""));


		// If the level value is inherited, set logger level value to
		// null. We also check that the user has not specified inherited for the
		// root logger.
		if (StringHelper::equals...",1,1,main\cpp\propertyconfigurator.cpp,PropertyConfigurator.parseLogger,,false,337,418,parseLogger,,,18,"void PropertyConfigurator.parseLogger (ANY,LoggerPtr,LogString,LogString,LogString,bool)"
46113,METHOD,main\cpp\propertyconfigurator.cpp:<global>,TYPE_DECL,"AppenderPtr PropertyConfigurator::parseAppender(
	helpers::Properties& props, const LogString& appenderName)
{
	AppenderPtr appender = registryGet(appenderName);

	if (appender != 0)
	{
		LogLog::debug((LogString) LOG4CXX_STR(""Appender \"""")
			+ appenderName + LOG4CXX_STR(""\"" was already parsed.""));

		return appender;
	}

	static const WideLife<LogString> APPENDER_PREFIX(LOG4CXX_STR(""log4j.appender.""));

	// Appender was not previously initialized.
	LogString prefix = APPENDER_PREFIX.value() + appenderName;
	LogString layoutPrefix = prefix + LOG4CXX_STR("".layout"");

	std::shared_ptr<Object> obj =
		OptionConverter::instantiateByKey(
			props, prefix, Appender::getStaticClass(), 0);
	appender = LOG4CXX_NS::cast<Appender>( obj );

	// Map obsolete DailyRollingFileAppender property configuration
	if (!appender &&
		StringHelper::endsWith(OptionConverter::findAndSubst(prefix, props), LOG4CXX_STR(""DailyRollingFileAppender"")))
	{
		appender = std::make_shared<RollingFileAppender>();
		au...",1,1,main\cpp\propertyconfigurator.cpp,PropertyConfigurator.parseAppender,,false,420,535,parseAppender,,,19,"AppenderPtr PropertyConfigurator.parseAppender (ANY,LogString)"
46563,METHOD,main\cpp\propertyconfigurator.cpp:<global>,TYPE_DECL,"void PropertyConfigurator::registryPut(const AppenderPtr& appender)
{
	(*registry)[appender->getName()] = appender;
}",1,1,main\cpp\propertyconfigurator.cpp,PropertyConfigurator.registryPut,,false,537,540,registryPut,,,20,void PropertyConfigurator.registryPut (AppenderPtr)
46577,METHOD,main\cpp\propertyconfigurator.cpp:<global>,TYPE_DECL,"AppenderPtr PropertyConfigurator::registryGet(const LogString& name)
{
	return (*registry)[name];
}",1,1,main\cpp\propertyconfigurator.cpp,PropertyConfigurator.registryGet,,false,542,545,registryGet,,,21,AppenderPtr PropertyConfigurator.registryGet (LogString)
46598,METHOD,main\cpp\propertyresourcebundle.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\propertyresourcebundle.cpp,main\cpp\propertyresourcebundle.cpp:<global>,,false,1,58,<global>,,,1,
46602,METHOD,main\cpp\propertyresourcebundle.cpp:<global>,TYPE_DECL,"PropertyResourceBundle::PropertyResourceBundle(InputStreamPtr inStream)
{
	properties.load(inStream);
}",1,1,main\cpp\propertyresourcebundle.cpp,PropertyResourceBundle.PropertyResourceBundle,,false,31,34,PropertyResourceBundle,,,3,ANY PropertyResourceBundle.PropertyResourceBundle (InputStreamPtr)
46612,METHOD,main\cpp\propertyresourcebundle.cpp:<global>,TYPE_DECL,"LogString PropertyResourceBundle::getString(const LogString& key) const
{
	LogString resource;
	PropertyResourceBundle* resourceBundle(const_cast<PropertyResourceBundle*>(this));

	do
	{
		resource = resourceBundle->properties.getProperty(key);

		if (!resource.empty())
		{
			return resource;
		}

		resourceBundle = dynamic_cast<PropertyResourceBundle*>(resourceBundle->parent.get());
	}
	while (resourceBundle != 0);

	throw MissingResourceException(key);
#if LOG4CXX_RETURN_AFTER_THROW
	return resource;
#endif
}",1,1,main\cpp\propertyresourcebundle.cpp,PropertyResourceBundle.getString,,false,36,58,getString,,,4,LogString PropertyResourceBundle.getString (LogString)
46682,METHOD,main\cpp\propertysetter.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\propertysetter.cpp,main\cpp\propertysetter.cpp:<global>,,false,1,111,<global>,,,1,
46684,METHOD,main\cpp\propertysetter.cpp:<global>,TYPE_DECL,"PropertySetter::PropertySetter(const helpers::ObjectPtr& obj1) : obj(obj1)
{
}",1,1,main\cpp\propertysetter.cpp,PropertySetter.PropertySetter,,false,34,36,PropertySetter,,,1,ANY PropertySetter.PropertySetter (ANY)
46689,METHOD,main\cpp\propertysetter.cpp:<global>,TYPE_DECL,"void PropertySetter::setProperties(const helpers::ObjectPtr& obj,
	helpers::Properties& properties,
	const LogString& prefix,
	Pool& p)
{
	PropertySetter(obj).setProperties(properties, prefix, p);
}",1,1,main\cpp\propertysetter.cpp,PropertySetter.setProperties,,false,38,44,setProperties,,,2,"void PropertySetter.setProperties (ANY,ANY,LogString,Pool)"
46705,METHOD,main\cpp\propertysetter.cpp:<global>,TYPE_DECL,"void PropertySetter::setProperties(helpers::Properties& properties,
	const LogString& prefix,
	Pool& p)
{
	size_t len = prefix.length();

	std::vector<LogString> names = properties.propertyNames();
	std::vector<LogString>::iterator it;

	for (it = names.begin(); it != names.end(); it++)
	{
		LogString key = *it;

		// handle only properties that start with the desired frefix.
		if (key.find(prefix) == 0)
		{
			// ignore key if it contains dots after the prefix
			if (key.find(0x2E /* '.' */, len + 1) != LogString::npos)
			{
				continue;
			}

			LogString value = OptionConverter::findAndSubst(key, properties);
			key = key.substr(len);

			if (key == LOG4CXX_STR(""layout"")
				&& obj != 0
				&& obj->instanceof(Appender::getStaticClass()))
			{
				continue;
			}

			setProperty(key, value, p);
		}
	}

	activate(p);
}",1,1,main\cpp\propertysetter.cpp,PropertySetter.setProperties,,false,47,84,setProperties,,,3,"void PropertySetter.setProperties (ANY,LogString,Pool)"
46820,METHOD,main\cpp\propertysetter.cpp:<global>,TYPE_DECL,"void PropertySetter::setProperty(const LogString& option,
	const LogString& value,
	Pool&)
{
	if (value.empty())
	{
		return;
	}

	if (obj != 0 && obj->instanceof(OptionHandler::getStaticClass()))
	{
		LogLog::debug(LOG4CXX_STR(""Setting option name=["") +
			option + LOG4CXX_STR(""], value=["") + value + LOG4CXX_STR(""]""));
		OptionHandlerPtr handler = LOG4CXX_NS::cast<OptionHandler>(obj);
		handler->setOption(option, value);
	}
}",1,1,main\cpp\propertysetter.cpp,PropertySetter.setProperty,,false,86,102,setProperty,,,4,"void PropertySetter.setProperty (LogString,LogString,Pool)"
46880,METHOD,main\cpp\propertysetter.cpp:<global>,TYPE_DECL,"void PropertySetter::activate(Pool& p)
{
	if (obj != 0 && obj->instanceof(OptionHandler::getStaticClass()))
	{
		OptionHandlerPtr handler = LOG4CXX_NS::cast<OptionHandler>(obj);
		handler->activateOptions(p);
	}
}",1,1,main\cpp\propertysetter.cpp,PropertySetter.activate,,false,104,111,activate,,,5,void PropertySetter.activate (Pool)
46921,METHOD,main\cpp\reader.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\reader.cpp,main\cpp\reader.cpp:<global>,,false,1,31,<global>,,,1,
46925,METHOD,main\cpp\reader.cpp:<global>,TYPE_DECL,"Reader::Reader()
{
}",1,1,main\cpp\reader.cpp,Reader.Reader,,false,25,27,Reader,,,3,ANY Reader.Reader ()
46929,METHOD,main\cpp\reader.cpp:<global>,TYPE_DECL,"Reader::~Reader()
{
}",1,1,main\cpp\reader.cpp,Reader.~Reader,,false,29,31,~Reader,,,4,ANY Reader.~Reader ()
46944,METHOD,main\cpp\relativetimedateformat.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\relativetimedateformat.cpp,main\cpp\relativetimedateformat.cpp:<global>,,false,1,36,<global>,,,1,
46946,METHOD,main\cpp\relativetimedateformat.cpp:<global>,TYPE_DECL,"LOG4CXX_NS::helpers::RelativeTimeDateFormat::RelativeTimeDateFormat()
	: DateFormat(), startTime(LOG4CXX_NS::spi::LoggingEvent::getStartTime())
{
}",1,1,main\cpp\relativetimedateformat.cpp,LOG4CXX_NS.helpers.RelativeTimeDateFormat.RelativeTimeDateFormat,,false,24,27,RelativeTimeDateFormat,,,1,ANY LOG4CXX_NS.helpers.RelativeTimeDateFormat.RelativeTimeDateFormat ()
46950,METHOD,main\cpp\relativetimedateformat.cpp:<global>,TYPE_DECL,"void LOG4CXX_NS::helpers::RelativeTimeDateFormat::format(
	LogString& s,
	log4cxx_time_t date,
	Pool& p) const
{
	int64_t interval = (date - startTime) / int64_t(1000);
	StringHelper::toString(interval, p, s);
}",1,1,main\cpp\relativetimedateformat.cpp,LOG4CXX_NS.helpers.RelativeTimeDateFormat.format,,false,29,36,format,,,2,"void LOG4CXX_NS.helpers.RelativeTimeDateFormat.format (LogString,log4cxx_time_t,Pool)"
46986,METHOD,main\cpp\relativetimepatternconverter.cpp:<global>,TYPE_DECL,<global>,1,2,main\cpp\relativetimepatternconverter.cpp,main\cpp\relativetimepatternconverter.cpp:<global>,,false,1,51,<global>,,,1,
46990,METHOD,main\cpp\relativetimepatternconverter.cpp:<global>,TYPE_DECL,"RelativeTimePatternConverter::RelativeTimePatternConverter() :
	LoggingEventPatternConverter(LOG4CXX_STR(""Time""),
		LOG4CXX_STR(""time""))
{
}",1,1,main\cpp\relativetimepatternconverter.cpp,RelativeTimePatternConverter.RelativeTimePatternConverter,,false,31,35,RelativeTimePatternConverter,,,3,ANY RelativeTimePatternConverter.RelativeTimePatternConverter ()
46994,METHOD,main\cpp\relativetimepatternconverter.cpp:<global>,TYPE_DECL,"PatternConverterPtr RelativeTimePatternConverter::newInstance(
	const std::vector<LogString>& /* options */)
{
	static WideLife<PatternConverterPtr> def = std::make_shared<RelativeTimePatternConverter>();
	return def;
}",1,1,main\cpp\relativetimepatternconverter.cpp,RelativeTimePatternConverter.newInstance,,false,37,42,newInstance,,,4,PatternConverterPtr RelativeTimePatternConverter.newInstance (ANY)
47008,METHOD,main\cpp\relativetimepatternconverter.cpp:<global>,TYPE_DECL,"void RelativeTimePatternConverter::format(
	const LoggingEventPtr& event,
	LogString& toAppendTo,
	Pool& p) const
{
	log4cxx_time_t delta = (event->getTimeStamp() - LoggingEvent::getStartTime()) / 1000;
	StringHelper::toString(delta, p, toAppendTo);
}",1,1,main\cpp\relativetimepatternconverter.cpp,RelativeTimePatternConverter.format,,false,44,51,format,,,5,"void RelativeTimePatternConverter.format (LoggingEventPtr,LogString,Pool)"
47053,METHOD,main\cpp\resourcebundle.cpp:<global>,TYPE_DECL,<global>,1,2,main\cpp\resourcebundle.cpp,main\cpp\resourcebundle.cpp:<global>,,false,1,124,<global>,,,1,
47057,METHOD,main\cpp\resourcebundle.cpp:<global>,TYPE_DECL,"ResourceBundlePtr ResourceBundle::getBundle(const LogString& baseName,
	const Locale& locale)
{
	LogString bundleName;
	PropertyResourceBundlePtr resourceBundle, previous;

	std::vector<LogString> bundlesNames;

	if (!locale.getVariant().empty())
	{
		bundlesNames.push_back(baseName + LOG4CXX_STR(""_"") +
			locale.getLanguage() + LOG4CXX_STR(""_"") +
			locale.getCountry() + LOG4CXX_STR(""_"") +
			locale.getVariant());
	}

	if (!locale.getCountry().empty())
	{
		bundlesNames.push_back(baseName + LOG4CXX_STR(""_"") +
			locale.getLanguage() + LOG4CXX_STR(""_"") +
			locale.getCountry());
	}

	if (!locale.getLanguage().empty())
	{
		bundlesNames.push_back(baseName + LOG4CXX_STR(""_"") +
			locale.getLanguage());
	}

	bundlesNames.push_back(baseName);

	for (std::vector<LogString>::iterator it = bundlesNames.begin();
		it != bundlesNames.end(); it++)
	{

		bundleName = *it;

		PropertyResourceBundlePtr current;

		// Try loading a class which implements ResourceBundle
		try
		{
			const Class& c...",1,1,main\cpp\resourcebundle.cpp,ResourceBundle.getBundle,,false,30,124,getBundle,,,3,"ResourceBundlePtr ResourceBundle.getBundle (LogString,Locale)"
47325,METHOD,main\cpp\rollingfileappender.cpp:<global>,TYPE_DECL,<global>,1,60,main\cpp\rollingfileappender.cpp,main\cpp\rollingfileappender.cpp:<global>,,false,1,621,<global>,,,1,
47328,METHOD,RollingFileAppenderPriv,TYPE_DECL,"RollingFileAppenderPriv() :
		FileAppenderPriv(),
		fileLength(0) {}",2,18,main\cpp\rollingfileappender.cpp,RollingFileAppenderPriv.RollingFileAppenderPriv,,false,39,41,RollingFileAppenderPriv,,,1,ANY RollingFileAppenderPriv.RollingFileAppenderPriv ()
47338,METHOD,main\cpp\rollingfileappender.cpp:<global>,TYPE_DECL,"RollingFileAppender::RollingFileAppender() :
	FileAppender (std::make_unique<RollingFileAppenderPriv>())
{
}",1,1,main\cpp\rollingfileappender.cpp,RollingFileAppender.RollingFileAppender,,false,72,75,RollingFileAppender,,,4,ANY RollingFileAppender.RollingFileAppender ()
47342,METHOD,main\cpp\rollingfileappender.cpp:<global>,TYPE_DECL,"void RollingFileAppender::setOption(const LogString& option, const LogString& value)
{
	if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""MAXFILESIZE""), LOG4CXX_STR(""maxfilesize""))
		|| StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""MAXIMUMFILESIZE""), LOG4CXX_STR(""maximumfilesize"")))
	{
		setMaxFileSize(value);
	}
	else if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""MAXBACKUPINDEX""), LOG4CXX_STR(""maxbackupindex""))
		|| StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""MAXIMUMBACKUPINDEX""), LOG4CXX_STR(""maximumbackupindex"")))
	{
		setMaxBackupIndex(StringHelper::toInt(value));
	}
	else if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""FILEDATEPATTERN""), LOG4CXX_STR(""filedatepattern"")))
	{
		setDatePattern(value);
	}
	else
	{
		FileAppender::setOption(option, value);
	}
}",1,1,main\cpp\rollingfileappender.cpp,RollingFileAppender.setOption,,false,77,102,setOption,,,5,"void RollingFileAppender.setOption (LogString,LogString)"
47423,METHOD,main\cpp\rollingfileappender.cpp:<global>,TYPE_DECL,"int RollingFileAppender::getMaxBackupIndex() const
{
	int result = 1;
	if (auto fwrp = LOG4CXX_NS::cast<FixedWindowRollingPolicy>(_priv->rollingPolicy))
		result = fwrp->getMaxIndex();
	return result;
}",1,60,main\cpp\rollingfileappender.cpp,RollingFileAppender.getMaxBackupIndex,,false,104,110,getMaxBackupIndex,,,6,int RollingFileAppender.getMaxBackupIndex ()
47461,METHOD,main\cpp\rollingfileappender.cpp:<global>,TYPE_DECL,"void RollingFileAppender::setMaxBackupIndex(int maxBackups)
{
	auto fwrp = LOG4CXX_NS::cast<FixedWindowRollingPolicy>(_priv->rollingPolicy);
	if (!fwrp)
	{
		fwrp = std::make_shared<FixedWindowRollingPolicy>();
		fwrp->setFileNamePattern(getFile() + LOG4CXX_STR("".%i""));
		_priv->rollingPolicy = fwrp;
	}
	fwrp->setMaxIndex(maxBackups);
}",1,56,main\cpp\rollingfileappender.cpp,RollingFileAppender.setMaxBackupIndex,,false,112,122,setMaxBackupIndex,,,7,void RollingFileAppender.setMaxBackupIndex (int)
47520,METHOD,main\cpp\rollingfileappender.cpp:<global>,TYPE_DECL,"size_t RollingFileAppender::getMaximumFileSize() const
{
	size_t result = 10 * 1024 * 1024;
	if (auto sbtp = LOG4CXX_NS::cast<SizeBasedTriggeringPolicy>(_priv->triggeringPolicy))
		result = sbtp->getMaxFileSize();
	return result;
}",1,61,main\cpp\rollingfileappender.cpp,RollingFileAppender.getMaximumFileSize,,false,124,130,getMaximumFileSize,,,8,size_t RollingFileAppender.getMaximumFileSize ()
47562,METHOD,main\cpp\rollingfileappender.cpp:<global>,TYPE_DECL,"void RollingFileAppender::setMaximumFileSize(size_t maxFileSize)
{
	auto sbtp = LOG4CXX_NS::cast<SizeBasedTriggeringPolicy>(_priv->triggeringPolicy);
	if (!sbtp)
	{
		sbtp = std::make_shared<SizeBasedTriggeringPolicy>();
		_priv->triggeringPolicy = sbtp;
	}
	sbtp->setMaxFileSize(maxFileSize);
}",1,57,main\cpp\rollingfileappender.cpp,RollingFileAppender.setMaximumFileSize,,false,132,141,setMaximumFileSize,,,9,void RollingFileAppender.setMaximumFileSize (size_t)
47613,METHOD,main\cpp\rollingfileappender.cpp:<global>,TYPE_DECL,"void RollingFileAppender::setMaxFileSize(const LogString& value)
{
	setMaximumFileSize(OptionConverter::toFileSize(value, long(getMaximumFileSize() + 1)));
}",1,1,main\cpp\rollingfileappender.cpp,RollingFileAppender.setMaxFileSize,,false,143,146,setMaxFileSize,,,10,void RollingFileAppender.setMaxFileSize (LogString)
47629,METHOD,main\cpp\rollingfileappender.cpp:<global>,TYPE_DECL,"LogString RollingFileAppender::makeFileNamePattern(const LogString& datePattern)
{
	LogString result(getFile());
	bool inLiteral = false;
	bool inPattern = false;

	for (size_t i = 0; i < datePattern.length(); i++)
	{
		if (datePattern[i] == 0x27 /* '\'' */)
		{
			inLiteral = !inLiteral;

			if (inLiteral && inPattern)
			{
				result.append(1, (logchar) 0x7D /* '}' */);
				inPattern = false;
			}
		}
		else
		{
			if (!inLiteral && !inPattern)
			{
				const logchar dbrace[] = { 0x25, 0x64, 0x7B, 0 }; // ""%d{""
				result.append(dbrace);
				inPattern = true;
			}

			result.append(1, datePattern[i]);
		}
	}

	if (inPattern)
	{
		result.append(1, (logchar) 0x7D /* '}' */);
	}
	return result;
}",1,1,main\cpp\rollingfileappender.cpp,RollingFileAppender.makeFileNamePattern,,false,148,184,makeFileNamePattern,,,11,LogString RollingFileAppender.makeFileNamePattern (LogString)
47733,METHOD,main\cpp\rollingfileappender.cpp:<global>,TYPE_DECL,"void RollingFileAppender::setDatePattern(const LogString& newPattern)
{
	auto tbrp = LOG4CXX_NS::cast<TimeBasedRollingPolicy>(_priv->rollingPolicy);
	if (!tbrp)
	{
		tbrp = std::make_shared<TimeBasedRollingPolicy>();
		_priv->rollingPolicy = tbrp;
	}
	tbrp->setFileNamePattern(makeFileNamePattern(newPattern));
}",1,54,main\cpp\rollingfileappender.cpp,RollingFileAppender.setDatePattern,,false,186,195,setDatePattern,,,12,void RollingFileAppender.setDatePattern (LogString)
47785,METHOD,main\cpp\rollingfileappender.cpp:<global>,TYPE_DECL,"void RollingFileAppender::activateOptions(Pool& p)
{
	if (!_priv->rollingPolicy)
	{
		LogLog::warn(LOG4CXX_STR(""No rolling policy configured for the appender named ["")
			+ _priv->name + LOG4CXX_STR(""].""));
		auto fwrp = std::make_shared<FixedWindowRollingPolicy>();
		fwrp->setFileNamePattern(getFile() + LOG4CXX_STR("".%i""));
		_priv->rollingPolicy = fwrp;
	}

	//
	//  if no explicit triggering policy and rolling policy is both.
	//
	if (!_priv->triggeringPolicy)
	{
		TriggeringPolicyPtr trig = LOG4CXX_NS::cast<TriggeringPolicy>(_priv->rollingPolicy);

		if (trig != NULL)
		{
			_priv->triggeringPolicy = trig;
		}
	}

	if (!_priv->triggeringPolicy)
	{
		LogLog::warn(LOG4CXX_STR(""No triggering policy configured for the appender named ["")
			+ _priv->name + LOG4CXX_STR(""].""));
		_priv->triggeringPolicy = std::make_shared<SizeBasedTriggeringPolicy>();
	}

	{
		std::lock_guard<std::recursive_mutex> lock(_priv->mutex);
		_priv->triggeringPolicy->activateOptions(p);
		_priv->rollingPolicy-...",1,6,main\cpp\rollingfileappender.cpp,RollingFileAppender.activateOptions,,false,200,285,activateOptions,,,13,void RollingFileAppender.activateOptions (Pool)
48137,METHOD,main\cpp\rollingfileappender.cpp:<global>,TYPE_DECL,"bool RollingFileAppender::rollover(Pool& p)
{
	std::lock_guard<std::recursive_mutex> lock(_priv->mutex);
	return rolloverInternal(p);
}",1,44,main\cpp\rollingfileappender.cpp,RollingFileAppender.rollover,,false,302,306,rollover,,,14,bool RollingFileAppender.rollover (Pool)
48164,METHOD,main\cpp\rollingfileappender.cpp:<global>,TYPE_DECL,"bool RollingFileAppender::rolloverInternal(Pool& p)
{
	//
	//   can't roll without a policy
	//
	if (_priv->rollingPolicy != NULL)
	{

		{
				try
				{
					RolloverDescriptionPtr rollover1(_priv->rollingPolicy->rollover(this->getFile(), this->getAppend(), p));

					if (rollover1 != NULL)
					{
						if (rollover1->getActiveFileName() == getFile())
						{
							closeWriter();

							bool success = true;

							if (rollover1->getSynchronous() != NULL)
							{
								success = false;

								try
								{
									success = rollover1->getSynchronous()->execute(p);
								}
								catch (std::exception& ex)
								{
									LOG4CXX_DECODE_CHAR(lsMsg, ex.what());
									LogString errorMsg = LOG4CXX_STR(""Exception on rollover: "");
									errorMsg.append(lsMsg);
									LogLog::error(errorMsg);
									_priv->errorHandler->error(lsMsg, ex, 0);
								}
							}

							if (success)
							{
								if (rollover1->getAppend())
								{
									_priv->fileLength = Fil...",1,5,main\cpp\rollingfileappender.cpp,RollingFileAppender.rolloverInternal,,false,308,448,rolloverInternal,,,15,bool RollingFileAppender.rolloverInternal (Pool)
48612,METHOD,main\cpp\rollingfileappender.cpp:<global>,TYPE_DECL,"void RollingFileAppender::subAppend(const LoggingEventPtr& event, Pool& p)
{
	// The rollover check must precede actual writing. This is the
	// only correct behavior for time driven triggers.
	if (
		_priv->triggeringPolicy->isTriggeringEvent(
			this, event, getFile(), getFileLength()))
	{
		//
		//   wrap rollover request in try block since
		//    rollover may fail in case read access to directory
		//    is not provided.  However appender should still be in good
		//     condition and the append should still happen.
		try
		{
			_priv->_event = event;
			rolloverInternal(p);
		}
		catch (std::exception& ex)
		{
			LOG4CXX_DECODE_CHAR(lsMsg, ex.what());
			LogString errorMsg = LOG4CXX_STR(""Exception during rollover attempt: "");
			errorMsg.append(lsMsg);
			LogLog::warn(errorMsg);
			_priv->errorHandler->error(lsMsg);
		}
	}

	FileAppender::subAppend(event, p);
}",1,2,main\cpp\rollingfileappender.cpp,RollingFileAppender.subAppend,,false,453,482,subAppend,,,16,"void RollingFileAppender.subAppend (LoggingEventPtr,Pool)"
48695,METHOD,main\cpp\rollingfileappender.cpp:<global>,TYPE_DECL,"RollingPolicyPtr RollingFileAppender::getRollingPolicy() const
{
	return _priv->rollingPolicy;
}",1,8,main\cpp\rollingfileappender.cpp,RollingFileAppender.getRollingPolicy,,false,487,490,getRollingPolicy,,,17,RollingPolicyPtr RollingFileAppender.getRollingPolicy ()
48710,METHOD,main\cpp\rollingfileappender.cpp:<global>,TYPE_DECL,"TriggeringPolicyPtr RollingFileAppender::getTriggeringPolicy() const
{
	return _priv->triggeringPolicy;
}",1,8,main\cpp\rollingfileappender.cpp,RollingFileAppender.getTriggeringPolicy,,false,495,498,getTriggeringPolicy,,,18,TriggeringPolicyPtr RollingFileAppender.getTriggeringPolicy ()
48725,METHOD,main\cpp\rollingfileappender.cpp:<global>,TYPE_DECL,"void RollingFileAppender::setRollingPolicy(const RollingPolicyPtr& policy)
{
	_priv->rollingPolicy = policy;
}",1,1,main\cpp\rollingfileappender.cpp,RollingFileAppender.setRollingPolicy,,false,503,506,setRollingPolicy,,,19,void RollingFileAppender.setRollingPolicy (RollingPolicyPtr)
48742,METHOD,main\cpp\rollingfileappender.cpp:<global>,TYPE_DECL,"void RollingFileAppender::setTriggeringPolicy(const TriggeringPolicyPtr& policy)
{
	_priv->triggeringPolicy = policy;
}",1,1,main\cpp\rollingfileappender.cpp,RollingFileAppender.setTriggeringPolicy,,false,511,514,setTriggeringPolicy,,,20,void RollingFileAppender.setTriggeringPolicy (TriggeringPolicyPtr)
48759,METHOD,main\cpp\rollingfileappender.cpp:<global>,TYPE_DECL,"void RollingFileAppender::close()
{
	FileAppender::close();
}",1,1,main\cpp\rollingfileappender.cpp,RollingFileAppender.close,,false,519,522,close,,,21,void RollingFileAppender.close ()
48772,METHOD,LOG4CXX_NS.rolling.CountingOutputStream,TYPE_DECL,"CountingOutputStream(
			OutputStreamPtr& os1, RollingFileAppender* rfa1) :
			os(os1), rfa(rfa1)
		{
		}",3,3,main\cpp\rollingfileappender.cpp,LOG4CXX_NS.rolling.CountingOutputStream.CountingOutputStream,,false,551,555,CountingOutputStream,,,3,"ANY LOG4CXX_NS.rolling.CountingOutputStream.CountingOutputStream (OutputStreamPtr,RollingFileAppender*)"
48778,METHOD,LOG4CXX_NS.rolling.CountingOutputStream,TYPE_DECL,"void close(Pool& p)
		{
			os->close(p);
			rfa = 0;
		}",3,3,main\cpp\rollingfileappender.cpp,LOG4CXX_NS.rolling.CountingOutputStream.close,,false,560,564,close,,,4,void LOG4CXX_NS.rolling.CountingOutputStream.close (Pool)
48791,METHOD,LOG4CXX_NS.rolling.CountingOutputStream,TYPE_DECL,"void flush(Pool& p)
		{
			os->flush(p);
		}",3,3,main\cpp\rollingfileappender.cpp,LOG4CXX_NS.rolling.CountingOutputStream.flush,,false,569,572,flush,,,5,void LOG4CXX_NS.rolling.CountingOutputStream.flush (Pool)
48801,METHOD,LOG4CXX_NS.rolling.CountingOutputStream,TYPE_DECL,"void write(ByteBuffer& buf, Pool& p)
		{
			os->write(buf, p);

			if (rfa != 0)
			{
				rfa->incrementFileLength(buf.limit());
			}
		}",3,3,main\cpp\rollingfileappender.cpp,LOG4CXX_NS.rolling.CountingOutputStream.write,,false,577,585,write,,,6,"void LOG4CXX_NS.rolling.CountingOutputStream.write (ByteBuffer,Pool)"
48826,METHOD,main\cpp\rollingfileappender.cpp:<global>,TYPE_DECL,"WriterPtr RollingFileAppender::createWriter(OutputStreamPtr& os)
{
	OutputStreamPtr cos = std::make_shared<CountingOutputStream>(os, this);
	return FileAppender::createWriter(cos);
}",1,1,main\cpp\rollingfileappender.cpp,RollingFileAppender.createWriter,,false,599,603,createWriter,,,23,WriterPtr RollingFileAppender.createWriter (OutputStreamPtr)
48850,METHOD,main\cpp\rollingfileappender.cpp:<global>,TYPE_DECL,"size_t RollingFileAppender::getFileLength() const
{
	return _priv->fileLength;
}",1,8,main\cpp\rollingfileappender.cpp,RollingFileAppender.getFileLength,,false,609,612,getFileLength,,,24,size_t RollingFileAppender.getFileLength ()
48865,METHOD,main\cpp\rollingfileappender.cpp:<global>,TYPE_DECL,"void RollingFileAppender::incrementFileLength(size_t increment)
{
	_priv->fileLength += increment;
}",1,1,main\cpp\rollingfileappender.cpp,RollingFileAppender.incrementFileLength,,false,618,621,incrementFileLength,,,25,void RollingFileAppender.incrementFileLength (size_t)
48887,METHOD,main\cpp\rollingpolicy.cpp:<global>,TYPE_DECL,<global>,1,40,main\cpp\rollingpolicy.cpp,main\cpp\rollingpolicy.cpp:<global>,,false,1,23,<global>,,,1,
48915,METHOD,main\cpp\rollingpolicybase.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\rollingpolicybase.cpp,main\cpp\rollingpolicybase.cpp:<global>,,false,1,185,<global>,,,1,
48919,METHOD,main\cpp\rollingpolicybase.cpp:<global>,TYPE_DECL,"RollingPolicyBase::RollingPolicyBase() :
	m_priv(std::make_unique<RollingPolicyBasePrivate>())
{
}",1,1,main\cpp\rollingpolicybase.cpp,RollingPolicyBase.RollingPolicyBase,,false,37,40,RollingPolicyBase,,,3,ANY RollingPolicyBase.RollingPolicyBase ()
48923,METHOD,main\cpp\rollingpolicybase.cpp:<global>,TYPE_DECL,"RollingPolicyBase::RollingPolicyBase( std::unique_ptr<RollingPolicyBasePrivate> priv ) :
	m_priv(std::move(priv)){
}",1,1,main\cpp\rollingpolicybase.cpp,RollingPolicyBase.RollingPolicyBase,,false,42,44,RollingPolicyBase,,,4,ANY RollingPolicyBase.RollingPolicyBase (ANY)
48928,METHOD,main\cpp\rollingpolicybase.cpp:<global>,TYPE_DECL,"RollingPolicyBase::~RollingPolicyBase()
{
}",1,1,main\cpp\rollingpolicybase.cpp,RollingPolicyBase.~RollingPolicyBase,,false,46,48,~RollingPolicyBase,,,5,ANY RollingPolicyBase.~RollingPolicyBase ()
48932,METHOD,main\cpp\rollingpolicybase.cpp:<global>,TYPE_DECL,"void RollingPolicyBase::activateOptions(LOG4CXX_NS::helpers::Pool& /* pool */)
{
	if (m_priv->fileNamePatternStr.length() > 0)
	{
		parseFileNamePattern();
	}
	else
	{
		LogString msg(LOG4CXX_STR(""The FileNamePattern option must be set before using FixedWindowRollingPolicy.""));
		LogString ref1(LOG4CXX_STR(""See also http://logging.apache.org/log4j/codes.html#tbr_fnp_not_set""));
		LogLog::warn(msg);
		LogLog::warn(ref1);
		throw IllegalStateException();
	}
}",1,1,main\cpp\rollingpolicybase.cpp,RollingPolicyBase.activateOptions,,false,50,64,activateOptions,,,6,void RollingPolicyBase.activateOptions (ANY)
48970,METHOD,main\cpp\rollingpolicybase.cpp:<global>,TYPE_DECL,"void RollingPolicyBase::setOption(const LogString& option, const LogString& value)
{
	if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""FILENAMEPATTERN""),
			LOG4CXX_STR(""filenamepattern"")))
	{
		m_priv->fileNamePatternStr = value;
	}else if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""CREATEINTERMEDIATEDIRECTORIES""),
			LOG4CXX_STR(""createintermediatedirectories"")))
	{
		m_priv->createIntermediateDirectories = OptionConverter::toBoolean(value, false);
	}
}",1,1,main\cpp\rollingpolicybase.cpp,RollingPolicyBase.setOption,,false,67,80,setOption,,,7,"void RollingPolicyBase.setOption (LogString,LogString)"
49015,METHOD,main\cpp\rollingpolicybase.cpp:<global>,TYPE_DECL,"void RollingPolicyBase::setFileNamePattern(const LogString& fnp)
{
	m_priv->fileNamePatternStr = fnp;
}",1,1,main\cpp\rollingpolicybase.cpp,RollingPolicyBase.setFileNamePattern,,false,82,85,setFileNamePattern,,,8,void RollingPolicyBase.setFileNamePattern (LogString)
49025,METHOD,main\cpp\rollingpolicybase.cpp:<global>,TYPE_DECL,"LogString RollingPolicyBase::getFileNamePattern() const
{
	return m_priv->fileNamePatternStr;
}",1,1,main\cpp\rollingpolicybase.cpp,RollingPolicyBase.getFileNamePattern,,false,88,91,getFileNamePattern,,,9,LogString RollingPolicyBase.getFileNamePattern ()
49033,METHOD,main\cpp\rollingpolicybase.cpp:<global>,TYPE_DECL,"void RollingPolicyBase::parseFileNamePattern()
{
	m_priv->patternConverters.erase(m_priv->patternConverters.begin(), m_priv->patternConverters.end());
	m_priv->patternFields.erase(m_priv->patternFields.begin(), m_priv->patternFields.end());
	PatternParser::parse(m_priv->fileNamePatternStr,
		m_priv->patternConverters,
		m_priv->patternFields,
		getFormatSpecifiers());
}",1,1,main\cpp\rollingpolicybase.cpp,RollingPolicyBase.parseFileNamePattern,,false,96,104,parseFileNamePattern,,,10,void RollingPolicyBase.parseFileNamePattern ()
49087,METHOD,main\cpp\rollingpolicybase.cpp:<global>,TYPE_DECL,"void RollingPolicyBase::formatFileName(
	const ObjectPtr& obj,
	LogString& toAppendTo,
	Pool& pool) const
{
	std::vector<FormattingInfoPtr>::const_iterator formatterIter =
		m_priv->patternFields.begin();

	for (std::vector<PatternConverterPtr>::const_iterator
		converterIter = m_priv->patternConverters.begin();
		converterIter != m_priv->patternConverters.end();
		converterIter++, formatterIter++)
	{
		auto startField = toAppendTo.length();
		(*converterIter)->format(obj, toAppendTo, pool);
		(*formatterIter)->format((int)startField, toAppendTo);
	}
}",1,1,main\cpp\rollingpolicybase.cpp,RollingPolicyBase.formatFileName,,false,112,129,formatFileName,,,11,"void RollingPolicyBase.formatFileName (ObjectPtr,LogString,Pool)"
49152,METHOD,main\cpp\rollingpolicybase.cpp:<global>,TYPE_DECL,"PatternConverterPtr RollingPolicyBase::getIntegerPatternConverter() const
{
	for (std::vector<PatternConverterPtr>::const_iterator
		converterIter = m_priv->patternConverters.begin();
		converterIter != m_priv->patternConverters.end();
		converterIter++)
	{
		IntegerPatternConverterPtr intPattern;
		PatternConverterPtr patternptr = (*converterIter);
		intPattern = LOG4CXX_NS::cast<IntegerPatternConverter>(patternptr);

		if (intPattern != NULL)
		{
			return *converterIter;
		}
	}

	PatternConverterPtr noMatch;
	return noMatch;
}",1,1,main\cpp\rollingpolicybase.cpp,RollingPolicyBase.getIntegerPatternConverter,,false,132,151,getIntegerPatternConverter,,,12,PatternConverterPtr RollingPolicyBase.getIntegerPatternConverter ()
49204,METHOD,main\cpp\rollingpolicybase.cpp:<global>,TYPE_DECL,"PatternConverterPtr RollingPolicyBase::getDatePatternConverter() const
{
	for (std::vector<PatternConverterPtr>::const_iterator
		converterIter = m_priv->patternConverters.begin();
		converterIter != m_priv->patternConverters.end();
		converterIter++)
	{
		DatePatternConverterPtr datePattern;
		PatternConverterPtr patternptr = (*converterIter);
		datePattern = LOG4CXX_NS::cast<DatePatternConverter>(patternptr);

		if (datePattern != NULL)
		{
			return *converterIter;
		}
	}

	PatternConverterPtr noMatch;
	return noMatch;
}",1,1,main\cpp\rollingpolicybase.cpp,RollingPolicyBase.getDatePatternConverter,,false,153,172,getDatePatternConverter,,,13,PatternConverterPtr RollingPolicyBase.getDatePatternConverter ()
49256,METHOD,main\cpp\rollingpolicybase.cpp:<global>,TYPE_DECL,"bool RollingPolicyBase::getCreateIntermediateDirectories() const{
	return m_priv->createIntermediateDirectories;
}",1,1,main\cpp\rollingpolicybase.cpp,RollingPolicyBase.getCreateIntermediateDirectories,,false,174,176,getCreateIntermediateDirectories,,,14,bool RollingPolicyBase.getCreateIntermediateDirectories ()
49264,METHOD,main\cpp\rollingpolicybase.cpp:<global>,TYPE_DECL,"void RollingPolicyBase::setCreateIntermediateDirectories(bool createIntermediate){
	m_priv->createIntermediateDirectories = createIntermediate;
}",1,1,main\cpp\rollingpolicybase.cpp,RollingPolicyBase.setCreateIntermediateDirectories,,false,178,180,setCreateIntermediateDirectories,,,15,void RollingPolicyBase.setCreateIntermediateDirectories (bool)
49274,METHOD,main\cpp\rollingpolicybase.cpp:<global>,TYPE_DECL,"PatternConverterList RollingPolicyBase::getPatternConverterList() const
{
	return m_priv->patternConverters;
}",1,1,main\cpp\rollingpolicybase.cpp,RollingPolicyBase.getPatternConverterList,,false,182,185,getPatternConverterList,,,16,PatternConverterList RollingPolicyBase.getPatternConverterList ()
49289,METHOD,main\cpp\rolloverdescription.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\rolloverdescription.cpp,main\cpp\rolloverdescription.cpp:<global>,,false,1,105,<global>,,,1,
49294,METHOD,RolloverDescriptionPrivate,TYPE_DECL,RolloverDescriptionPrivate(){},2,31,main\cpp\rolloverdescription.cpp,RolloverDescriptionPrivate.RolloverDescriptionPrivate,,false,28,28,RolloverDescriptionPrivate,,,1,ANY RolloverDescriptionPrivate.RolloverDescriptionPrivate ()
49298,METHOD,RolloverDescriptionPrivate,TYPE_DECL,"RolloverDescriptionPrivate(
		const LogString& activeFileName1,
		const bool append1,
		const ActionPtr& synchronous1,
		const ActionPtr& asynchronous1)
		: activeFileName(activeFileName1),
		  append(append1),
		  synchronous(synchronous1),
		  asynchronous(asynchronous1)
	{}",2,3,main\cpp\rolloverdescription.cpp,RolloverDescriptionPrivate.RolloverDescriptionPrivate,,false,30,39,RolloverDescriptionPrivate,,,2,"ANY RolloverDescriptionPrivate.RolloverDescriptionPrivate (LogString,bool,ActionPtr,ActionPtr)"
49310,METHOD,main\cpp\rolloverdescription.cpp:<global>,TYPE_DECL,"RolloverDescription::RolloverDescription() :
	m_priv(std::make_unique<RolloverDescriptionPrivate>())
{
}",1,1,main\cpp\rolloverdescription.cpp,RolloverDescription.RolloverDescription,,false,65,68,RolloverDescription,,,4,ANY RolloverDescription.RolloverDescription ()
49314,METHOD,main\cpp\rolloverdescription.cpp:<global>,TYPE_DECL,"RolloverDescription::RolloverDescription(
	const LogString& activeFileName1,
	const bool append1,
	const ActionPtr& synchronous1,
	const ActionPtr& asynchronous1)
	: m_priv(std::make_unique<RolloverDescriptionPrivate>(activeFileName1, append1, synchronous1, asynchronous1))
{
}",1,1,main\cpp\rolloverdescription.cpp,RolloverDescription.RolloverDescription,,false,70,77,RolloverDescription,,,5,"ANY RolloverDescription.RolloverDescription (LogString,bool,ActionPtr,ActionPtr)"
49322,METHOD,main\cpp\rolloverdescription.cpp:<global>,TYPE_DECL,RolloverDescription::~RolloverDescription(){},1,45,main\cpp\rolloverdescription.cpp,RolloverDescription.~RolloverDescription,,false,79,79,~RolloverDescription,,,6,ANY RolloverDescription.~RolloverDescription ()
49326,METHOD,main\cpp\rolloverdescription.cpp:<global>,TYPE_DECL,"LogString RolloverDescription::getActiveFileName() const
{
	return m_priv->activeFileName;
}",1,1,main\cpp\rolloverdescription.cpp,RolloverDescription.getActiveFileName,,false,81,84,getActiveFileName,,,7,LogString RolloverDescription.getActiveFileName ()
49334,METHOD,main\cpp\rolloverdescription.cpp:<global>,TYPE_DECL,"bool RolloverDescription::getAppend() const
{
	return m_priv->append;
}",1,1,main\cpp\rolloverdescription.cpp,RolloverDescription.getAppend,,false,86,89,getAppend,,,8,bool RolloverDescription.getAppend ()
49342,METHOD,main\cpp\rolloverdescription.cpp:<global>,TYPE_DECL,"ActionPtr RolloverDescription::getSynchronous() const
{
	return m_priv->synchronous;
}",1,1,main\cpp\rolloverdescription.cpp,RolloverDescription.getSynchronous,,false,91,94,getSynchronous,,,9,ActionPtr RolloverDescription.getSynchronous ()
49350,METHOD,main\cpp\rolloverdescription.cpp:<global>,TYPE_DECL,"ActionPtr RolloverDescription::getAsynchronous() const
{
	return m_priv->asynchronous;
}",1,1,main\cpp\rolloverdescription.cpp,RolloverDescription.getAsynchronous,,false,102,105,getAsynchronous,,,10,ActionPtr RolloverDescription.getAsynchronous ()
49371,METHOD,main\cpp\rootlogger.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\rootlogger.cpp,main\cpp\rootlogger.cpp:<global>,,false,1,50,<global>,,,1,
49373,METHOD,main\cpp\rootlogger.cpp:<global>,TYPE_DECL,"RootLogger::RootLogger(Pool& pool, const LevelPtr level1) :
	Logger(pool, LOG4CXX_STR(""root""))
{
	setLevel(level1);
}",1,1,main\cpp\rootlogger.cpp,RootLogger.RootLogger,,false,27,31,RootLogger,,,1,"ANY RootLogger.RootLogger (Pool,LevelPtr)"
49381,METHOD,main\cpp\rootlogger.cpp:<global>,TYPE_DECL,"const LevelPtr& RootLogger::getEffectiveLevel() const
{
	return getLevel();
}",1,1,main\cpp\rootlogger.cpp,RootLogger.getEffectiveLevel,,false,33,36,getEffectiveLevel,,,2,LevelPtr RootLogger.getEffectiveLevel ()
49387,METHOD,main\cpp\rootlogger.cpp:<global>,TYPE_DECL,"void RootLogger::setLevel(const LevelPtr level1)
{
	if (level1 == 0)
	{
		LogLog::error(LOG4CXX_STR(""You have tried to set a null level to root.""));
	}
	else
	{
		Logger::setLevel(level1);
	}
}",1,1,main\cpp\rootlogger.cpp,RootLogger.setLevel,,false,38,48,setLevel,,,3,void RootLogger.setLevel (LevelPtr)
49419,METHOD,main\cpp\serversocket.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\serversocket.cpp,main\cpp\serversocket.cpp:<global>,,false,1,56,<global>,,,1,
49421,METHOD,main\cpp\serversocket.cpp:<global>,TYPE_DECL,"ServerSocket::ServerSocket(std::unique_ptr<ServerSocketPrivate> priv) :
	m_priv(std::move(priv))
{
}",1,1,main\cpp\serversocket.cpp,ServerSocket.ServerSocket,,false,26,29,ServerSocket,,,1,ANY ServerSocket.ServerSocket (ANY)
49426,METHOD,main\cpp\serversocket.cpp:<global>,TYPE_DECL,"ServerSocket::~ServerSocket()
{
	close();
}",1,1,main\cpp\serversocket.cpp,ServerSocket.~ServerSocket,,false,31,34,~ServerSocket,,,2,ANY ServerSocket.~ServerSocket ()
49431,METHOD,main\cpp\serversocket.cpp:<global>,TYPE_DECL,"void ServerSocket::close()
{
}",1,1,main\cpp\serversocket.cpp,ServerSocket.close,,false,36,38,close,,,3,void ServerSocket.close ()
49435,METHOD,main\cpp\serversocket.cpp:<global>,TYPE_DECL,"int ServerSocket::getSoTimeout() const
{
	return m_priv->timeout;
}",1,1,main\cpp\serversocket.cpp,ServerSocket.getSoTimeout,,false,42,45,getSoTimeout,,,4,int ServerSocket.getSoTimeout ()
49443,METHOD,main\cpp\serversocket.cpp:<global>,TYPE_DECL,"void ServerSocket::setSoTimeout(int newVal)
{
	m_priv->timeout = newVal;
}",1,1,main\cpp\serversocket.cpp,ServerSocket.setSoTimeout,,false,49,52,setSoTimeout,,,5,void ServerSocket.setSoTimeout (int)
49453,METHOD,main\cpp\serversocket.cpp:<global>,TYPE_DECL,"ServerSocketUniquePtr ServerSocket::create(int port){
	return std::make_unique<APRServerSocket>(port);
}",1,1,main\cpp\serversocket.cpp,ServerSocket.create,,false,54,56,create,,,6,ServerSocketUniquePtr ServerSocket.create (int)
49477,METHOD,main\cpp\shortfilelocationpatternconverter.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\shortfilelocationpatternconverter.cpp,main\cpp\shortfilelocationpatternconverter.cpp:<global>,,false,1,46,<global>,,,1,
49481,METHOD,main\cpp\shortfilelocationpatternconverter.cpp:<global>,TYPE_DECL,"ShortFileLocationPatternConverter::ShortFileLocationPatternConverter() :
    LoggingEventPatternConverter(LOG4CXX_STR(""Short File Location""),
                                 LOG4CXX_STR(""shortFile"")) {
}",1,1,main\cpp\shortfilelocationpatternconverter.cpp,ShortFileLocationPatternConverter.ShortFileLocationPatternConverter,,false,30,33,ShortFileLocationPatternConverter,,,3,ANY ShortFileLocationPatternConverter.ShortFileLocationPatternConverter ()
49485,METHOD,main\cpp\shortfilelocationpatternconverter.cpp:<global>,TYPE_DECL,"PatternConverterPtr ShortFileLocationPatternConverter::newInstance(
    const std::vector<LogString> & /* options */ ) {
  static WideLife<PatternConverterPtr> instance(new ShortFileLocationPatternConverter());
  return instance;
}",1,1,main\cpp\shortfilelocationpatternconverter.cpp,ShortFileLocationPatternConverter.newInstance,,false,35,39,newInstance,,,4,PatternConverterPtr ShortFileLocationPatternConverter.newInstance (ANY)
49496,METHOD,main\cpp\shortfilelocationpatternconverter.cpp:<global>,TYPE_DECL,"void ShortFileLocationPatternConverter::format(
    const LoggingEventPtr &event,
    LogString &toAppendTo,
    Pool & /* p */ ) const {
  append(toAppendTo, event->getLocationInformation().getShortFileName());
}",1,1,main\cpp\shortfilelocationpatternconverter.cpp,ShortFileLocationPatternConverter.format,,false,41,46,format,,,5,"void ShortFileLocationPatternConverter.format (LoggingEventPtr,LogString,Pool)"
49537,METHOD,main\cpp\simpledateformat.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\simpledateformat.cpp,main\cpp\simpledateformat.cpp:<global>,,false,1,867,<global>,,,1,
49542,METHOD,main\cpp\simpledateformat.cpp:<global>,TYPE_DECL,"typedef void (*incrementFunction)(tm& time, apr_time_exp_t& apr_time);",14,69,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.incrementFunction,,false,62,62,incrementFunction,,,1,"void LOG4CXX_NS.helpers.SimpleDateFormatImpl.incrementFunction (tm,apr_time_exp_t)"
49549,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken,TYPE_DECL,"PatternToken()
		{
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken.PatternToken,,false,71,73,PatternToken,,,1,ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken.PatternToken ()
49553,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken,TYPE_DECL,"virtual ~PatternToken()
		{
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken.~PatternToken,,false,75,77,~PatternToken,,,2,ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken.~PatternToken ()
49557,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken,TYPE_DECL,"virtual void setTimeZone(const TimeZonePtr& zone)
		{
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken.setTimeZone,,false,83,85,setTimeZone,,,3,void LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken.setTimeZone (TimeZonePtr)
49562,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken,TYPE_DECL,"virtual void format(LogString& s,
			const apr_time_exp_t& date,
			LOG4CXX_NS::helpers::Pool& p) const = 0;",16,42,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken.format,,false,93,95,format,,,4,"void LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken.format (LogString,apr_time_exp_t,ANY)"
49569,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken,TYPE_DECL,"static void incrementMonth(tm& time, apr_time_exp_t& aprtime)
		{
			time.tm_mon++;
			aprtime.tm_mon++;
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken.incrementMonth,,false,99,103,incrementMonth,,,5,"void LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken.incrementMonth (tm,apr_time_exp_t)"
49583,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken,TYPE_DECL,"static void incrementDay(tm& time, apr_time_exp_t& aprtime)
		{
			time.tm_wday++;
			aprtime.tm_wday++;
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken.incrementDay,,false,105,109,incrementDay,,,6,"void LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken.incrementDay (tm,apr_time_exp_t)"
49597,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken,TYPE_DECL,"static void incrementHalfDay(tm& time, apr_time_exp_t& aprtime)
		{
			time.tm_hour += 12;
			aprtime.tm_hour += 12;
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken.incrementHalfDay,,false,111,115,incrementHalfDay,,,7,"void LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken.incrementHalfDay (tm,apr_time_exp_t)"
49613,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken,TYPE_DECL,"static void renderFacet(const std::locale* locale,
			incrementFunction inc,
			char spec,
			unsigned int wspec,
			const char* aprspec,
			std::vector<LogString>& values)
		{
			std::vector<LogString>::iterator valueIter = values.begin();
			tm time;
			memset(&time, 0, sizeof(time));
			apr_time_exp_t aprtime;
			memset(&aprtime, 0, sizeof(aprtime));
#if LOG4CXX_HAS_STD_LOCALE

			if (locale != NULL)
			{
#if LOG4CXX_WCHAR_T_API

				if (HAS_FACET(*locale, std::time_put<wchar_t>))
				{
					const std::time_put<wchar_t>& facet = USE_FACET(*locale, std::time_put<wchar_t>);
					size_t start = 0;
					std::basic_ostringstream<wchar_t> os;

					for (; valueIter != values.end(); valueIter++)
					{
						PUT_FACET(facet, os, &time, (char)wspec);
						Transcoder::decode(os.str().substr(start), *valueIter);
						start = os.str().length();
						(*inc)(time, aprtime);
					}
				}
				else
#endif
					if (HAS_FACET(*locale,  std::time_put<char>))
					{
						const std::time_put<char...",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken.renderFacet,,false,117,187,renderFacet,,,8,"void LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken.renderFacet (ANY*,incrementFunction,char,unsigned int,char*,ANY)"
49711,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken,TYPE_DECL,PatternToken(const PatternToken&);,3,35,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken.PatternToken,,false,193,193,PatternToken,,,9,ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken.PatternToken (PatternToken)
49716,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken,TYPE_DECL,PatternToken& operator=(const PatternToken&);,15,46,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken.operator =,,false,198,198,operator =,,,10,PatternToken LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken.operator = (PatternToken)
49722,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.LiteralToken,TYPE_DECL,"LiteralToken( logchar ch1, int count1 ) : ch( ch1 ), count( count1 )
		{
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.LiteralToken.LiteralToken,,false,205,207,LiteralToken,,,1,"ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.LiteralToken.LiteralToken (logchar,int)"
49728,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.LiteralToken,TYPE_DECL,"void format( LogString& s, const apr_time_exp_t&, Pool& /* p */ ) const
		{
			s.append( count, ch );
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.LiteralToken.format,,false,209,212,format,,,2,"void LOG4CXX_NS.helpers.SimpleDateFormatImpl.LiteralToken.format (LogString,apr_time_exp_t,Pool)"
49744,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.EraToken,TYPE_DECL,"EraToken( int /* count */, const std::locale* /* locale */  )
		{
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.EraToken.EraToken,,false,224,226,EraToken,,,1,"ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.EraToken.EraToken (int,ANY*)"
49750,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.EraToken,TYPE_DECL,"void format(LogString& s, const apr_time_exp_t& /* tm */, Pool& /* p */ ) const
		{
			s.append(1, (logchar) 0x41 /* 'A' */);
			s.append(1, (logchar) 0x44 /* 'D' */);
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.EraToken.format,,false,228,232,format,,,2,"void LOG4CXX_NS.helpers.SimpleDateFormatImpl.EraToken.format (LogString,apr_time_exp_t,Pool)"
49774,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.NumericToken,TYPE_DECL,"NumericToken( size_t width1 ) : width( width1 )
		{
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.NumericToken.NumericToken,,false,240,242,NumericToken,,,1,ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.NumericToken.NumericToken (size_t)
49779,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.NumericToken,TYPE_DECL,virtual int getField( const apr_time_exp_t& tm ) const = 0;,15,60,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.NumericToken.getField,,false,244,244,getField,,,2,int LOG4CXX_NS.helpers.SimpleDateFormatImpl.NumericToken.getField (apr_time_exp_t)
49784,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.NumericToken,TYPE_DECL,"void format( LogString& s, const apr_time_exp_t& tm, Pool& p ) const
		{
			size_t initialLength = s.length();

			StringHelper::toString( getField( tm ), p, s );
			size_t finalLength = s.length();

			if ( initialLength + width > finalLength )
			{
				s.insert( initialLength, ( initialLength + width ) - finalLength, (logchar) 0x30 /* '0' */);
			}
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.NumericToken.format,,false,246,257,format,,,3,"void LOG4CXX_NS.helpers.SimpleDateFormatImpl.NumericToken.format (LogString,apr_time_exp_t,Pool)"
49835,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.YearToken,TYPE_DECL,"YearToken( int width1 ) : NumericToken( width1 )
		{
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.YearToken.YearToken,,false,268,270,YearToken,,,1,ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.YearToken.YearToken (int)
49840,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.YearToken,TYPE_DECL,"int getField( const apr_time_exp_t& tm ) const
		{
			return 1900 + tm.tm_year;
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.YearToken.getField,,false,272,275,getField,,,2,int LOG4CXX_NS.helpers.SimpleDateFormatImpl.YearToken.getField (apr_time_exp_t)
49852,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.MonthToken,TYPE_DECL,"MonthToken( int width1 ) : NumericToken( width1 )
		{
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.MonthToken.MonthToken,,false,283,285,MonthToken,,,1,ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.MonthToken.MonthToken (int)
49857,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.MonthToken,TYPE_DECL,"int getField( const apr_time_exp_t& tm ) const
		{
			return tm.tm_mon + 1;
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.MonthToken.getField,,false,287,290,getField,,,2,int LOG4CXX_NS.helpers.SimpleDateFormatImpl.MonthToken.getField (apr_time_exp_t)
49869,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.AbbreviatedMonthNameToken,TYPE_DECL,"AbbreviatedMonthNameToken(int, const std::locale* locale) : names( 12 )
		{
			renderFacet(locale, PatternToken::incrementMonth, 'b', 0x62, ""%b"", names);
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.AbbreviatedMonthNameToken.AbbreviatedMonthNameToken,,false,298,301,AbbreviatedMonthNameToken,,,1,"ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.AbbreviatedMonthNameToken.AbbreviatedMonthNameToken (int,ANY*)"
49884,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.AbbreviatedMonthNameToken,TYPE_DECL,"void format(LogString& s, const apr_time_exp_t& tm, Pool& /* p */ ) const
		{
			s.append( names[tm.tm_mon] );
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.AbbreviatedMonthNameToken.format,,false,303,306,format,,,2,"void LOG4CXX_NS.helpers.SimpleDateFormatImpl.AbbreviatedMonthNameToken.format (LogString,apr_time_exp_t,Pool)"
49902,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.FullMonthNameToken,TYPE_DECL,"FullMonthNameToken( int width, const std::locale* locale) : names( 12 )
		{
			renderFacet(locale, PatternToken::incrementMonth, 'B', 0x42, ""%B"", names);
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.FullMonthNameToken.FullMonthNameToken,,false,317,320,FullMonthNameToken,,,1,"ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.FullMonthNameToken.FullMonthNameToken (int,ANY*)"
49917,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.FullMonthNameToken,TYPE_DECL,"void format( LogString& s, const apr_time_exp_t& tm, Pool& /* p */ ) const
		{
			s.append( names[tm.tm_mon] );
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.FullMonthNameToken.format,,false,322,325,format,,,2,"void LOG4CXX_NS.helpers.SimpleDateFormatImpl.FullMonthNameToken.format (LogString,apr_time_exp_t,Pool)"
49935,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.WeekInYearToken,TYPE_DECL,"WeekInYearToken( int width1 ) : NumericToken( width1 )
		{
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.WeekInYearToken.WeekInYearToken,,false,336,338,WeekInYearToken,,,1,ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.WeekInYearToken.WeekInYearToken (int)
49940,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.WeekInYearToken,TYPE_DECL,"int getField( const apr_time_exp_t& tm ) const
		{
			return tm.tm_yday / 7;
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.WeekInYearToken.getField,,false,340,343,getField,,,2,int LOG4CXX_NS.helpers.SimpleDateFormatImpl.WeekInYearToken.getField (apr_time_exp_t)
49952,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.WeekInMonthToken,TYPE_DECL,"WeekInMonthToken( int width1 ) : NumericToken( width1 )
		{
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.WeekInMonthToken.WeekInMonthToken,,false,351,353,WeekInMonthToken,,,1,ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.WeekInMonthToken.WeekInMonthToken (int)
49957,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.WeekInMonthToken,TYPE_DECL,"int getField( const apr_time_exp_t& tm ) const
		{
			return tm.tm_mday / 7;
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.WeekInMonthToken.getField,,false,355,358,getField,,,2,int LOG4CXX_NS.helpers.SimpleDateFormatImpl.WeekInMonthToken.getField (apr_time_exp_t)
49969,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.DayInMonthToken,TYPE_DECL,"DayInMonthToken( int width1 ) : NumericToken( width1 )
		{
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.DayInMonthToken.DayInMonthToken,,false,366,368,DayInMonthToken,,,1,ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.DayInMonthToken.DayInMonthToken (int)
49974,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.DayInMonthToken,TYPE_DECL,"int getField( const apr_time_exp_t& tm ) const
		{
			return tm.tm_mday;
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.DayInMonthToken.getField,,false,370,373,getField,,,2,int LOG4CXX_NS.helpers.SimpleDateFormatImpl.DayInMonthToken.getField (apr_time_exp_t)
49984,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.DayInYearToken,TYPE_DECL,"DayInYearToken( int width1 ) : NumericToken( width1 )
		{
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.DayInYearToken.DayInYearToken,,false,381,383,DayInYearToken,,,1,ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.DayInYearToken.DayInYearToken (int)
49989,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.DayInYearToken,TYPE_DECL,"int getField( const apr_time_exp_t& tm ) const
		{
			return tm.tm_yday;
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.DayInYearToken.getField,,false,385,388,getField,,,2,int LOG4CXX_NS.helpers.SimpleDateFormatImpl.DayInYearToken.getField (apr_time_exp_t)
49999,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.DayOfWeekInMonthToken,TYPE_DECL,"DayOfWeekInMonthToken( int width1 ) : NumericToken( width1 )
		{
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.DayOfWeekInMonthToken.DayOfWeekInMonthToken,,false,396,398,DayOfWeekInMonthToken,,,1,ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.DayOfWeekInMonthToken.DayOfWeekInMonthToken (int)
50004,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.DayOfWeekInMonthToken,TYPE_DECL,"int getField( const apr_time_exp_t& /* tm */ ) const
		{
			return -1;
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.DayOfWeekInMonthToken.getField,,false,400,403,getField,,,2,int LOG4CXX_NS.helpers.SimpleDateFormatImpl.DayOfWeekInMonthToken.getField (apr_time_exp_t)
50013,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.AbbreviatedDayNameToken,TYPE_DECL,"AbbreviatedDayNameToken( int width, const std::locale* locale) : names( 7 )
		{
			renderFacet(locale, PatternToken::incrementDay, 'a', 0x61, ""%a"", names);
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.AbbreviatedDayNameToken.AbbreviatedDayNameToken,,false,411,414,AbbreviatedDayNameToken,,,1,"ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.AbbreviatedDayNameToken.AbbreviatedDayNameToken (int,ANY*)"
50028,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.AbbreviatedDayNameToken,TYPE_DECL,"void format( LogString& s, const apr_time_exp_t& tm, Pool& /* p */ ) const
		{
			s.append( names[tm.tm_wday] );
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.AbbreviatedDayNameToken.format,,false,416,419,format,,,2,"void LOG4CXX_NS.helpers.SimpleDateFormatImpl.AbbreviatedDayNameToken.format (LogString,apr_time_exp_t,Pool)"
50046,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.FullDayNameToken,TYPE_DECL,"FullDayNameToken( int width, const std::locale* locale) : names( 7 )
		{
			renderFacet(locale, PatternToken::incrementDay, 'A', 0x41, ""%A"", names);
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.FullDayNameToken.FullDayNameToken,,false,431,434,FullDayNameToken,,,1,"ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.FullDayNameToken.FullDayNameToken (int,ANY*)"
50061,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.FullDayNameToken,TYPE_DECL,"void format( LogString& s, const apr_time_exp_t& tm, Pool& /* p */ ) const
		{
			s.append( names[tm.tm_wday] );
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.FullDayNameToken.format,,false,436,439,format,,,2,"void LOG4CXX_NS.helpers.SimpleDateFormatImpl.FullDayNameToken.format (LogString,apr_time_exp_t,Pool)"
50079,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.MilitaryHourToken,TYPE_DECL,"MilitaryHourToken( int width1, int offset1 ) : NumericToken( width1 ), offset( offset1 )
		{
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.MilitaryHourToken.MilitaryHourToken,,false,451,453,MilitaryHourToken,,,1,"ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.MilitaryHourToken.MilitaryHourToken (int,int)"
50085,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.MilitaryHourToken,TYPE_DECL,"int getField( const apr_time_exp_t& tm ) const
		{
			return tm.tm_hour + offset;
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.MilitaryHourToken.getField,,false,455,458,getField,,,2,int LOG4CXX_NS.helpers.SimpleDateFormatImpl.MilitaryHourToken.getField (apr_time_exp_t)
50098,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.HourToken,TYPE_DECL,"HourToken( int width1, int /* offset1 */ ) : NumericToken( width1 ), offset( 0 )
		{
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.HourToken.HourToken,,false,469,471,HourToken,,,1,"ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.HourToken.HourToken (int,int)"
50104,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.HourToken,TYPE_DECL,"int getField( const apr_time_exp_t& tm ) const
		{
			return ( ( tm.tm_hour + 12 - offset ) % 12 ) + offset;
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.HourToken.getField,,false,473,476,getField,,,2,int LOG4CXX_NS.helpers.SimpleDateFormatImpl.HourToken.getField (apr_time_exp_t)
50123,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.MinuteToken,TYPE_DECL,"MinuteToken( int width1 ) : NumericToken( width1 )
		{
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.MinuteToken.MinuteToken,,false,487,489,MinuteToken,,,1,ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.MinuteToken.MinuteToken (int)
50128,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.MinuteToken,TYPE_DECL,"int getField( const apr_time_exp_t& tm ) const
		{
			return tm.tm_min;
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.MinuteToken.getField,,false,491,494,getField,,,2,int LOG4CXX_NS.helpers.SimpleDateFormatImpl.MinuteToken.getField (apr_time_exp_t)
50138,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.SecondToken,TYPE_DECL,"SecondToken( int width1 ) : NumericToken( width1 )
		{
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.SecondToken.SecondToken,,false,502,504,SecondToken,,,1,ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.SecondToken.SecondToken (int)
50143,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.SecondToken,TYPE_DECL,"int getField( const apr_time_exp_t& tm ) const
		{
			return tm.tm_sec;
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.SecondToken.getField,,false,506,509,getField,,,2,int LOG4CXX_NS.helpers.SimpleDateFormatImpl.SecondToken.getField (apr_time_exp_t)
50153,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.MillisecondToken,TYPE_DECL,"MillisecondToken( int width1 ) : NumericToken( width1 )
		{
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.MillisecondToken.MillisecondToken,,false,517,519,MillisecondToken,,,1,ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.MillisecondToken.MillisecondToken (int)
50158,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.MillisecondToken,TYPE_DECL,"int getField( const apr_time_exp_t& tm ) const
		{
			return tm.tm_usec / 1000;
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.MillisecondToken.getField,,false,521,524,getField,,,2,int LOG4CXX_NS.helpers.SimpleDateFormatImpl.MillisecondToken.getField (apr_time_exp_t)
50170,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.MicrosecondToken,TYPE_DECL,"MicrosecondToken( int width1 ) : NumericToken( width1 )
		{
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.MicrosecondToken.MicrosecondToken,,false,532,534,MicrosecondToken,,,1,ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.MicrosecondToken.MicrosecondToken (int)
50175,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.MicrosecondToken,TYPE_DECL,"int getField( const apr_time_exp_t& tm ) const
		{
			return tm.tm_usec;
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.MicrosecondToken.getField,,false,536,539,getField,,,2,int LOG4CXX_NS.helpers.SimpleDateFormatImpl.MicrosecondToken.getField (apr_time_exp_t)
50185,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.AMPMToken,TYPE_DECL,"AMPMToken( int width, const std::locale* locale) : names( 2 )
		{
			renderFacet(locale, PatternToken::incrementHalfDay, 'p', 0x70, ""%p"", names);
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.AMPMToken.AMPMToken,,false,547,550,AMPMToken,,,1,"ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.AMPMToken.AMPMToken (int,ANY*)"
50200,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.AMPMToken,TYPE_DECL,"void format( LogString& s, const apr_time_exp_t& tm, Pool& /* p */ ) const
		{
			s.append( names[tm.tm_hour / 12] );
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.AMPMToken.format,,false,552,555,format,,,2,"void LOG4CXX_NS.helpers.SimpleDateFormatImpl.AMPMToken.format (LogString,apr_time_exp_t,Pool)"
50220,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.GeneralTimeZoneToken,TYPE_DECL,"GeneralTimeZoneToken( int /* width */ )
		{
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.GeneralTimeZoneToken.GeneralTimeZoneToken,,false,566,568,GeneralTimeZoneToken,,,1,ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.GeneralTimeZoneToken.GeneralTimeZoneToken (int)
50225,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.GeneralTimeZoneToken,TYPE_DECL,"void format( LogString& s, const apr_time_exp_t&, Pool& /* p */ ) const
		{
			s.append(timeZone->getID());
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.GeneralTimeZoneToken.format,,false,570,573,format,,,2,"void LOG4CXX_NS.helpers.SimpleDateFormatImpl.GeneralTimeZoneToken.format (LogString,apr_time_exp_t,Pool)"
50240,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.GeneralTimeZoneToken,TYPE_DECL,"void setTimeZone( const TimeZonePtr& zone )
		{
			timeZone = zone;
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.GeneralTimeZoneToken.setTimeZone,,false,575,578,setTimeZone,,,3,void LOG4CXX_NS.helpers.SimpleDateFormatImpl.GeneralTimeZoneToken.setTimeZone (TimeZonePtr)
50250,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.RFC822TimeZoneToken,TYPE_DECL,"RFC822TimeZoneToken( int /* width */ )
		{
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.RFC822TimeZoneToken.RFC822TimeZoneToken,,false,589,591,RFC822TimeZoneToken,,,1,ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.RFC822TimeZoneToken.RFC822TimeZoneToken (int)
50255,METHOD,LOG4CXX_NS.helpers.SimpleDateFormatImpl.RFC822TimeZoneToken,TYPE_DECL,"void format( LogString& s, const apr_time_exp_t& tm, Pool& p ) const
		{
			if ( tm.tm_gmtoff == 0 )
			{
				s.append( 1, (logchar) 0x5A /* 'Z'  */ );
			}
			else
			{
				apr_int32_t off = tm.tm_gmtoff;
				size_t basePos = s.length();
				s.append( LOG4CXX_STR( ""+0000"" ) );

				if ( off < 0 )
				{
					s[basePos] = 0x2D; // '-'
					off = -off;
				}

				LogString hours;
				StringHelper::toString( off / 3600, p, hours );
				size_t hourPos = basePos + 2;

				//
				//   assumes that point values for 0-9 are same between char and wchar_t
				//
				for ( size_t i = hours.length(); i-- > 0; )
				{
					s[hourPos--] = hours[i];
				}

				LogString min;
				StringHelper::toString( ( off % 3600 ) / 60, p, min );
				size_t minPos = basePos + 4;

				//
				//   assumes that point values for 0-9 are same between char and wchar_t
				//
				for ( size_t j = min.length(); j-- > 0; )
				{
					s[minPos--] = min[j];
				}
			}
		}",3,3,main\cpp\simpledateformat.cpp,LOG4CXX_NS.helpers.SimpleDateFormatImpl.RFC822TimeZoneToken.format,,false,593,635,format,,,2,"void LOG4CXX_NS.helpers.SimpleDateFormatImpl.RFC822TimeZoneToken.format (LogString,apr_time_exp_t,Pool)"
50390,METHOD,main\cpp\simpledateformat.cpp:<global>,TYPE_DECL,"void SimpleDateFormat::addToken(const logchar spec, const int repeat, const std::locale* locale,
	std::vector < PatternToken* >& pattern )
{
	PatternToken* token = NULL;

	switch ( spec )
	{
		case 0x47: // 'G'
			token = ( new EraToken( repeat, locale ) );
			break;

		case 0x79: // 'y'
			token = ( new YearToken( repeat ) );
			break;

		case 0x4D: // 'M'
			if ( repeat <= 2 )
			{
				token = ( new MonthToken( repeat ) );
			}
			else if ( repeat <= 3 )
			{
				token = ( new AbbreviatedMonthNameToken( repeat, locale ) );
			}
			else
			{
				token = ( new FullMonthNameToken( repeat, locale ) );
			}

			break;

		case 0x77: // 'w'
			token = ( new WeekInYearToken( repeat ) );
			break;

		case 0x57: // 'W'
			token = ( new WeekInMonthToken( repeat ) );
			break;

		case 0x44: // 'D'
			token = ( new DayInYearToken( repeat ) );
			break;

		case 0x64: // 'd'
			token = ( new DayInMonthToken( repeat ) );
			break;

		case 0x46: // 'F'
			token = ( new DayOfWeekInMonthToken( repea...",1,1,main\cpp\simpledateformat.cpp,SimpleDateFormat.addToken,,false,648,768,addToken,,,2,"void SimpleDateFormat.addToken (logchar,int,ANY*,ANY)"
50631,METHOD,main\cpp\simpledateformat.cpp:<global>,TYPE_DECL,"void SimpleDateFormat::parsePattern( const LogString& fmt, const std::locale* locale,
	std::vector < PatternToken* >& pattern )
{
	if ( !fmt.empty() )
	{
		LogString::const_iterator iter = fmt.begin();
		int repeat = 1;
		logchar prevChar = * iter;

		for ( iter++; iter != fmt.end(); iter++ )
		{
			if ( * iter == prevChar )
			{
				repeat++;
			}
			else
			{
				addToken( prevChar, repeat, locale, pattern );
				prevChar = * iter;
				repeat = 1;
			}
		}

		addToken( prevChar, repeat, locale, pattern );
	}
}",1,1,main\cpp\simpledateformat.cpp,SimpleDateFormat.parsePattern,,false,771,796,parsePattern,,,3,"void SimpleDateFormat.parsePattern (LogString,ANY*,ANY)"
50702,METHOD,SimpleDateFormatPrivate,TYPE_DECL,"SimpleDateFormatPrivate() :
		timeZone(TimeZone::getDefault())
	{}",2,3,main\cpp\simpledateformat.cpp,SimpleDateFormatPrivate.SimpleDateFormatPrivate,,false,800,802,SimpleDateFormatPrivate,,,1,ANY SimpleDateFormatPrivate.SimpleDateFormatPrivate ()
50708,METHOD,main\cpp\simpledateformat.cpp:<global>,TYPE_DECL,"SimpleDateFormat::SimpleDateFormat( const LogString& fmt ) : m_priv(std::make_unique<SimpleDateFormatPrivate>())
{
#if LOG4CXX_HAS_STD_LOCALE
	std::locale defaultLocale;
	parsePattern( fmt, & defaultLocale, m_priv->pattern );
#else
	parsePattern( fmt, NULL, m_priv->pattern );
#endif

	for ( PatternTokenList::iterator iter = m_priv->pattern.begin(); iter != m_priv->pattern.end(); iter++ )
	{
		( * iter )->setTimeZone( m_priv->timeZone );
	}
}",1,1,main\cpp\simpledateformat.cpp,SimpleDateFormat.SimpleDateFormat,,false,815,828,SimpleDateFormat,,,5,ANY SimpleDateFormat.SimpleDateFormat (LogString)
50749,METHOD,main\cpp\simpledateformat.cpp:<global>,TYPE_DECL,"SimpleDateFormat::SimpleDateFormat( const LogString& fmt, const std::locale* locale ) : m_priv(std::make_unique<SimpleDateFormatPrivate>())
{
	parsePattern( fmt, locale, m_priv->pattern );

	for ( PatternTokenList::iterator iter = m_priv->pattern.begin(); iter != m_priv->pattern.end(); iter++ )
	{
		( * iter )->setTimeZone( m_priv->timeZone );
	}
}",1,1,main\cpp\simpledateformat.cpp,SimpleDateFormat.SimpleDateFormat,,false,830,838,SimpleDateFormat,,,6,"ANY SimpleDateFormat.SimpleDateFormat (LogString,ANY*)"
50791,METHOD,main\cpp\simpledateformat.cpp:<global>,TYPE_DECL,"SimpleDateFormat::~SimpleDateFormat()
{
	for ( PatternTokenList::iterator iter = m_priv->pattern.begin(); iter != m_priv->pattern.end(); iter++ )
	{
		delete * iter;
	}
}",1,1,main\cpp\simpledateformat.cpp,SimpleDateFormat.~SimpleDateFormat,,false,841,847,~SimpleDateFormat,,,7,ANY SimpleDateFormat.~SimpleDateFormat ()
50820,METHOD,main\cpp\simpledateformat.cpp:<global>,TYPE_DECL,"void SimpleDateFormat::format( LogString& s, log4cxx_time_t time, Pool& p ) const
{
	apr_time_exp_t exploded;
	apr_status_t stat = m_priv->timeZone->explode( & exploded, time );

	if ( stat == APR_SUCCESS )
	{
		for ( PatternTokenList::const_iterator iter = m_priv->pattern.begin(); iter != m_priv->pattern.end(); iter++ )
		{
			( * iter )->format( s, exploded, p );
		}
	}
}",1,1,main\cpp\simpledateformat.cpp,SimpleDateFormat.format,,false,850,862,format,,,8,"void SimpleDateFormat.format (LogString,log4cxx_time_t,Pool)"
50875,METHOD,main\cpp\simpledateformat.cpp:<global>,TYPE_DECL,"void SimpleDateFormat::setTimeZone( const TimeZonePtr& zone )
{
	m_priv->timeZone = zone;
}",1,1,main\cpp\simpledateformat.cpp,SimpleDateFormat.setTimeZone,,false,864,867,setTimeZone,,,9,void SimpleDateFormat.setTimeZone (TimeZonePtr)
50896,METHOD,main\cpp\simplelayout.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\simplelayout.cpp,main\cpp\simplelayout.cpp:<global>,,false,1,37,<global>,,,1,
50900,METHOD,main\cpp\simplelayout.cpp:<global>,TYPE_DECL,"void SimpleLayout::format(LogString& output,
	const spi::LoggingEventPtr& event,
	LOG4CXX_NS::helpers::Pool&) const
{
	output.append(event->getLevel()->toString());
	output.append(LOG4CXX_STR("" - ""));
	output.append(event->getRenderedMessage());
	output.append(LOG4CXX_EOL);
}",1,1,main\cpp\simplelayout.cpp,SimpleLayout.format,,false,29,37,format,,,3,"void SimpleLayout.format (LogString,ANY,ANY)"
50946,METHOD,main\cpp\sizebasedtriggeringpolicy.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\sizebasedtriggeringpolicy.cpp,main\cpp\sizebasedtriggeringpolicy.cpp:<global>,,false,1,63,<global>,,,1,
50950,METHOD,main\cpp\sizebasedtriggeringpolicy.cpp:<global>,TYPE_DECL,"SizeBasedTriggeringPolicy::SizeBasedTriggeringPolicy()
	: maxFileSize(10 * 1024 * 1024)
{
}",1,1,main\cpp\sizebasedtriggeringpolicy.cpp,SizeBasedTriggeringPolicy.SizeBasedTriggeringPolicy,,false,28,31,SizeBasedTriggeringPolicy,,,3,ANY SizeBasedTriggeringPolicy.SizeBasedTriggeringPolicy ()
50954,METHOD,main\cpp\sizebasedtriggeringpolicy.cpp:<global>,TYPE_DECL,"bool SizeBasedTriggeringPolicy::isTriggeringEvent(Appender* /* appender */,
	const LOG4CXX_NS::spi::LoggingEventPtr& /* event */,
	const LogString& /* file */,
	size_t fileLength)
{
	return (fileLength >= maxFileSize);
}",1,1,main\cpp\sizebasedtriggeringpolicy.cpp,SizeBasedTriggeringPolicy.isTriggeringEvent,,false,33,39,isTriggeringEvent,,,4,"bool SizeBasedTriggeringPolicy.isTriggeringEvent (Appender*,ANY,LogString,size_t)"
50966,METHOD,main\cpp\sizebasedtriggeringpolicy.cpp:<global>,TYPE_DECL,"size_t SizeBasedTriggeringPolicy::getMaxFileSize()
{
	return maxFileSize;
}",1,1,main\cpp\sizebasedtriggeringpolicy.cpp,SizeBasedTriggeringPolicy.getMaxFileSize,,false,41,44,getMaxFileSize,,,5,size_t SizeBasedTriggeringPolicy.getMaxFileSize ()
50972,METHOD,main\cpp\sizebasedtriggeringpolicy.cpp:<global>,TYPE_DECL,"void SizeBasedTriggeringPolicy::setMaxFileSize(size_t l)
{
	maxFileSize = l;
}",1,1,main\cpp\sizebasedtriggeringpolicy.cpp,SizeBasedTriggeringPolicy.setMaxFileSize,,false,46,49,setMaxFileSize,,,6,void SizeBasedTriggeringPolicy.setMaxFileSize (size_t)
50980,METHOD,main\cpp\sizebasedtriggeringpolicy.cpp:<global>,TYPE_DECL,"void SizeBasedTriggeringPolicy::activateOptions(Pool& /* p */)
{
}",1,1,main\cpp\sizebasedtriggeringpolicy.cpp,SizeBasedTriggeringPolicy.activateOptions,,false,51,53,activateOptions,,,7,void SizeBasedTriggeringPolicy.activateOptions (Pool)
50985,METHOD,main\cpp\sizebasedtriggeringpolicy.cpp:<global>,TYPE_DECL,"void SizeBasedTriggeringPolicy::setOption(const LogString& option, const LogString& value)
{
	if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""MAXFILESIZE""),
			LOG4CXX_STR(""maxfilesize"")))
	{
		maxFileSize = OptionConverter::toFileSize(value, 10 * 1024 * 1024);
	}
}",1,1,main\cpp\sizebasedtriggeringpolicy.cpp,SizeBasedTriggeringPolicy.setOption,,false,55,63,setOption,,,8,"void SizeBasedTriggeringPolicy.setOption (LogString,LogString)"
51049,METHOD,main\cpp\smtpappender.cpp:<global>,TYPE_DECL,<global>,1,8,main\cpp\smtpappender.cpp,main\cpp\smtpappender.cpp:<global>,,false,1,829,<global>,,,1,
51059,METHOD,SMTPPriv,TYPE_DECL,"SMTPPriv() :
		AppenderSkeletonPrivate(),
		smtpPort(25),
		bufferSize(512),
		locationInfo(false),
		cb(bufferSize),
		evaluator(new DefaultEvaluator()) {}",2,38,main\cpp\smtpappender.cpp,SMTPPriv.SMTPPriv,,false,385,391,SMTPPriv,,,1,ANY SMTPPriv.SMTPPriv ()
51063,METHOD,SMTPPriv,TYPE_DECL,"SMTPPriv(spi::TriggeringEventEvaluatorPtr evaluator) :
		AppenderSkeletonPrivate(),
		smtpPort(25),
		bufferSize(512),
		locationInfo(false),
		cb(bufferSize),
		evaluator(evaluator) {}",2,25,main\cpp\smtpappender.cpp,SMTPPriv.SMTPPriv,,false,393,399,SMTPPriv,,,2,ANY SMTPPriv.SMTPPriv (ANY)
51081,METHOD,main\cpp\smtpappender.cpp:<global>,TYPE_DECL,"DefaultEvaluator::DefaultEvaluator()
{
}",1,1,main\cpp\smtpappender.cpp,DefaultEvaluator.DefaultEvaluator,,false,418,420,DefaultEvaluator,,,7,ANY DefaultEvaluator.DefaultEvaluator ()
51085,METHOD,main\cpp\smtpappender.cpp:<global>,TYPE_DECL,"bool DefaultEvaluator::isTriggeringEvent(const spi::LoggingEventPtr& event)
{
	return event->getLevel()->isGreaterOrEqual(Level::getError());
}",1,1,main\cpp\smtpappender.cpp,DefaultEvaluator.isTriggeringEvent,,false,422,425,isTriggeringEvent,,,8,bool DefaultEvaluator.isTriggeringEvent (ANY)
51102,METHOD,main\cpp\smtpappender.cpp:<global>,TYPE_DECL,"SMTPAppender::SMTPAppender()
	: AppenderSkeleton (std::make_unique<SMTPPriv>())
{
}",1,1,main\cpp\smtpappender.cpp,SMTPAppender.SMTPAppender,,false,427,430,SMTPAppender,,,9,ANY SMTPAppender.SMTPAppender ()
51106,METHOD,main\cpp\smtpappender.cpp:<global>,TYPE_DECL,"SMTPAppender::SMTPAppender(spi::TriggeringEventEvaluatorPtr evaluator)
	: AppenderSkeleton (std::make_unique<SMTPPriv>(evaluator))
{
}",1,1,main\cpp\smtpappender.cpp,SMTPAppender.SMTPAppender,,false,435,438,SMTPAppender,,,10,ANY SMTPAppender.SMTPAppender (ANY)
51111,METHOD,main\cpp\smtpappender.cpp:<global>,TYPE_DECL,"SMTPAppender::~SMTPAppender()
{
	finalize();
}",1,1,main\cpp\smtpappender.cpp,SMTPAppender.~SMTPAppender,,false,440,443,~SMTPAppender,,,11,ANY SMTPAppender.~SMTPAppender ()
51116,METHOD,main\cpp\smtpappender.cpp:<global>,TYPE_DECL,"bool SMTPAppender::requiresLayout() const
{
	return true;
}",1,1,main\cpp\smtpappender.cpp,SMTPAppender.requiresLayout,,false,445,448,requiresLayout,,,12,bool SMTPAppender.requiresLayout ()
51122,METHOD,main\cpp\smtpappender.cpp:<global>,TYPE_DECL,"LogString SMTPAppender::getFrom() const
{
	return _priv->from;
}",1,8,main\cpp\smtpappender.cpp,SMTPAppender.getFrom,,false,450,453,getFrom,,,13,LogString SMTPAppender.getFrom ()
51137,METHOD,main\cpp\smtpappender.cpp:<global>,TYPE_DECL,"void SMTPAppender::setFrom(const LogString& newVal)
{
	_priv->from = newVal;
}",1,1,main\cpp\smtpappender.cpp,SMTPAppender.setFrom,,false,455,458,setFrom,,,14,void SMTPAppender.setFrom (LogString)
51154,METHOD,main\cpp\smtpappender.cpp:<global>,TYPE_DECL,"LogString SMTPAppender::getSubject() const
{
	return _priv->subject;
}",1,8,main\cpp\smtpappender.cpp,SMTPAppender.getSubject,,false,461,464,getSubject,,,15,LogString SMTPAppender.getSubject ()
51169,METHOD,main\cpp\smtpappender.cpp:<global>,TYPE_DECL,"void SMTPAppender::setSubject(const LogString& newVal)
{
	_priv->subject = newVal;
}",1,1,main\cpp\smtpappender.cpp,SMTPAppender.setSubject,,false,466,469,setSubject,,,16,void SMTPAppender.setSubject (LogString)
51186,METHOD,main\cpp\smtpappender.cpp:<global>,TYPE_DECL,"LogString SMTPAppender::getSMTPHost() const
{
	return _priv->smtpHost;
}",1,8,main\cpp\smtpappender.cpp,SMTPAppender.getSMTPHost,,false,471,474,getSMTPHost,,,17,LogString SMTPAppender.getSMTPHost ()
51201,METHOD,main\cpp\smtpappender.cpp:<global>,TYPE_DECL,"void SMTPAppender::setSMTPHost(const LogString& newVal)
{
	_priv->smtpHost = newVal;
}",1,1,main\cpp\smtpappender.cpp,SMTPAppender.setSMTPHost,,false,476,479,setSMTPHost,,,18,void SMTPAppender.setSMTPHost (LogString)
51218,METHOD,main\cpp\smtpappender.cpp:<global>,TYPE_DECL,"int SMTPAppender::getSMTPPort() const
{
	return _priv->smtpPort;
}",1,8,main\cpp\smtpappender.cpp,SMTPAppender.getSMTPPort,,false,481,484,getSMTPPort,,,19,int SMTPAppender.getSMTPPort ()
51233,METHOD,main\cpp\smtpappender.cpp:<global>,TYPE_DECL,"void SMTPAppender::setSMTPPort(int newVal)
{
	_priv->smtpPort = newVal;
}",1,1,main\cpp\smtpappender.cpp,SMTPAppender.setSMTPPort,,false,486,489,setSMTPPort,,,20,void SMTPAppender.setSMTPPort (int)
51250,METHOD,main\cpp\smtpappender.cpp:<global>,TYPE_DECL,"bool SMTPAppender::getLocationInfo() const
{
	return _priv->locationInfo;
}",1,8,main\cpp\smtpappender.cpp,SMTPAppender.getLocationInfo,,false,491,494,getLocationInfo,,,21,bool SMTPAppender.getLocationInfo ()
51265,METHOD,main\cpp\smtpappender.cpp:<global>,TYPE_DECL,"void SMTPAppender::setLocationInfo(bool newVal)
{
	_priv->locationInfo = newVal;
}",1,1,main\cpp\smtpappender.cpp,SMTPAppender.setLocationInfo,,false,496,499,setLocationInfo,,,22,void SMTPAppender.setLocationInfo (bool)
51282,METHOD,main\cpp\smtpappender.cpp:<global>,TYPE_DECL,"LogString SMTPAppender::getSMTPUsername() const
{
	return _priv->smtpUsername;
}",1,8,main\cpp\smtpappender.cpp,SMTPAppender.getSMTPUsername,,false,501,504,getSMTPUsername,,,23,LogString SMTPAppender.getSMTPUsername ()
51297,METHOD,main\cpp\smtpappender.cpp:<global>,TYPE_DECL,"void SMTPAppender::setSMTPUsername(const LogString& newVal)
{
	_priv->smtpUsername = newVal;
}",1,1,main\cpp\smtpappender.cpp,SMTPAppender.setSMTPUsername,,false,506,509,setSMTPUsername,,,24,void SMTPAppender.setSMTPUsername (LogString)
51314,METHOD,main\cpp\smtpappender.cpp:<global>,TYPE_DECL,"LogString SMTPAppender::getSMTPPassword() const
{
	return _priv->smtpPassword;
}",1,8,main\cpp\smtpappender.cpp,SMTPAppender.getSMTPPassword,,false,511,514,getSMTPPassword,,,25,LogString SMTPAppender.getSMTPPassword ()
51329,METHOD,main\cpp\smtpappender.cpp:<global>,TYPE_DECL,"void SMTPAppender::setSMTPPassword(const LogString& newVal)
{
	_priv->smtpPassword = newVal;
}",1,1,main\cpp\smtpappender.cpp,SMTPAppender.setSMTPPassword,,false,516,519,setSMTPPassword,,,26,void SMTPAppender.setSMTPPassword (LogString)
51346,METHOD,main\cpp\smtpappender.cpp:<global>,TYPE_DECL,"void SMTPAppender::setOption(const LogString& option,
	const LogString& value)
{
	if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""BUFFERSIZE""), LOG4CXX_STR(""buffersize"")))
	{
		setBufferSize(OptionConverter::toInt(value, 512));
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""EVALUATORCLASS""), LOG4CXX_STR(""evaluatorclass"")))
	{
		setEvaluatorClass(value);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""FROM""), LOG4CXX_STR(""from"")))
	{
		setFrom(value);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""SMTPHOST""), LOG4CXX_STR(""smtphost"")))
	{
		setSMTPHost(value);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""SMTPUSERNAME""), LOG4CXX_STR(""smtpusername"")))
	{
		setSMTPUsername(value);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""SMTPPASSWORD""), LOG4CXX_STR(""smtppassword"")))
	{
		setSMTPPassword(value);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""SUBJECT""), LOG4CXX_STR(""su...",1,1,main\cpp\smtpappender.cpp,SMTPAppender.setOption,,false,525,576,setOption,,,27,"void SMTPAppender.setOption (LogString,LogString)"
51533,METHOD,main\cpp\smtpappender.cpp:<global>,TYPE_DECL,"bool SMTPAppender::asciiCheck(const LogString& value, const LogString& field)
{
	for (LogString::const_iterator iter = value.begin();
		iter != value.end();
		iter++)
	{
		if (0x7F < (unsigned int) *iter)
		{
			LogLog::warn(field + LOG4CXX_STR("" contains non-ASCII character""));
			return false;
		}
	}

	return true;
}",1,1,main\cpp\smtpappender.cpp,SMTPAppender.asciiCheck,,false,579,593,asciiCheck,,,28,"bool SMTPAppender.asciiCheck (LogString,LogString)"
51577,METHOD,main\cpp\smtpappender.cpp:<global>,TYPE_DECL,"void SMTPAppender::activateOptions(Pool& p)
{
	bool activate = true;

	if (_priv->layout == 0)
	{
		_priv->errorHandler->error(LOG4CXX_STR(""No layout set for appender named ["") + _priv->name + LOG4CXX_STR(""].""));
		activate = false;
	}

	if (_priv->evaluator == 0)
	{
		_priv->errorHandler->error(LOG4CXX_STR(""No TriggeringEventEvaluator is set for appender ["") +
			_priv->name + LOG4CXX_STR(""].""));
		activate = false;
	}

	if (_priv->smtpHost.empty())
	{
		_priv->errorHandler->error(LOG4CXX_STR(""No smtpHost is set for appender ["") +
			_priv->name + LOG4CXX_STR(""].""));
		activate = false;
	}

	if (_priv->to.empty() && _priv->cc.empty() && _priv->bcc.empty())
	{
		_priv->errorHandler->error(LOG4CXX_STR(""No recipient address is set for appender ["") +
			_priv->name + LOG4CXX_STR(""].""));
		activate = false;
	}

	activate &= asciiCheck(_priv->to, LOG4CXX_STR(""to""));
	activate &= asciiCheck(_priv->cc, LOG4CXX_STR(""cc""));
	activate &= asciiCheck(_priv->bcc, LOG4CXX_STR(""bcc""));
	activate &...",1,5,main\cpp\smtpappender.cpp,SMTPAppender.activateOptions,,false,598,643,activateOptions,,,29,void SMTPAppender.activateOptions (Pool)
51884,METHOD,main\cpp\smtpappender.cpp:<global>,TYPE_DECL,"void SMTPAppender::append(const spi::LoggingEventPtr& event, Pool& p)
{
	if (!checkEntryConditions())
	{
		return;
	}

	LogString ndc;
	event->getNDC(ndc);
	event->getThreadName();
	// Get a copy of this thread's MDC.
	event->getMDCCopy();

	_priv->cb.add(event);

	if (_priv->evaluator->isTriggeringEvent(event))
	{
		sendBuffer(p);
	}
}",1,1,main\cpp\smtpappender.cpp,SMTPAppender.append,,false,649,668,append,,,30,"void SMTPAppender.append (ANY,Pool)"
51941,METHOD,main\cpp\smtpappender.cpp:<global>,TYPE_DECL,"bool SMTPAppender::checkEntryConditions()
{
#if LOG4CXX_HAVE_LIBESMTP

	if ((_priv->to.empty() && _priv->cc.empty() && _priv->bcc.empty()) || _priv->from.empty() || _priv->smtpHost.empty())
	{
		_priv->errorHandler->error(LOG4CXX_STR(""Message not configured.""));
		return false;
	}

	if (_priv->evaluator == 0)
	{
		_priv->errorHandler->error(LOG4CXX_STR(""No TriggeringEventEvaluator is set for appender ["") +
			_priv->name + LOG4CXX_STR(""].""));
		return false;
	}


	if (_priv->layout == 0)
	{
		_priv->errorHandler->error(LOG4CXX_STR(""No layout set for appender named ["") + _priv->name + LOG4CXX_STR(""].""));
		return false;
	}

	return true;
#else
	return false;
#endif
}",1,1,main\cpp\smtpappender.cpp,SMTPAppender.checkEntryConditions,,false,675,703,checkEntryConditions,,,31,bool SMTPAppender.checkEntryConditions ()
51947,METHOD,main\cpp\smtpappender.cpp:<global>,TYPE_DECL,"void SMTPAppender::close()
{
	_priv->closed = true;
}",1,1,main\cpp\smtpappender.cpp,SMTPAppender.close,,false,707,710,close,,,32,void SMTPAppender.close ()
51965,METHOD,main\cpp\smtpappender.cpp:<global>,TYPE_DECL,"LogString SMTPAppender::getTo() const
{
	return _priv->to;
}",1,8,main\cpp\smtpappender.cpp,SMTPAppender.getTo,,false,712,715,getTo,,,33,LogString SMTPAppender.getTo ()
51980,METHOD,main\cpp\smtpappender.cpp:<global>,TYPE_DECL,"void SMTPAppender::setTo(const LogString& addressStr)
{
	_priv->to = addressStr;
}",1,1,main\cpp\smtpappender.cpp,SMTPAppender.setTo,,false,717,720,setTo,,,34,void SMTPAppender.setTo (LogString)
51997,METHOD,main\cpp\smtpappender.cpp:<global>,TYPE_DECL,"LogString SMTPAppender::getCc() const
{
	return _priv->cc;
}",1,8,main\cpp\smtpappender.cpp,SMTPAppender.getCc,,false,722,725,getCc,,,35,LogString SMTPAppender.getCc ()
52012,METHOD,main\cpp\smtpappender.cpp:<global>,TYPE_DECL,"void SMTPAppender::setCc(const LogString& addressStr)
{
	_priv->cc = addressStr;
}",1,1,main\cpp\smtpappender.cpp,SMTPAppender.setCc,,false,727,730,setCc,,,36,void SMTPAppender.setCc (LogString)
52029,METHOD,main\cpp\smtpappender.cpp:<global>,TYPE_DECL,"LogString SMTPAppender::getBcc() const
{
	return _priv->bcc;
}",1,8,main\cpp\smtpappender.cpp,SMTPAppender.getBcc,,false,732,735,getBcc,,,37,LogString SMTPAppender.getBcc ()
52044,METHOD,main\cpp\smtpappender.cpp:<global>,TYPE_DECL,"void SMTPAppender::setBcc(const LogString& addressStr)
{
	_priv->bcc = addressStr;
}",1,1,main\cpp\smtpappender.cpp,SMTPAppender.setBcc,,false,737,740,setBcc,,,38,void SMTPAppender.setBcc (LogString)
52061,METHOD,main\cpp\smtpappender.cpp:<global>,TYPE_DECL,"void SMTPAppender::sendBuffer(Pool& p)
{
#if LOG4CXX_HAVE_LIBESMTP

	// Note: this code already owns the monitor for this
	// appender. This frees us from needing to synchronize on 'cb'.
	try
	{
		LogString sbuf;
		_priv->layout->appendHeader(sbuf, p);

		int len = _priv->cb.length();

		for (int i = 0; i < len; i++)
		{
			LoggingEventPtr event = _priv->cb.get();
			_priv->layout->format(sbuf, event, p);
		}

		_priv->layout->appendFooter(sbuf, p);

		SMTPSession session(_priv->smtpHost, _priv->smtpPort, _priv->smtpUsername, _priv->smtpPassword, p);

		SMTPMessage message(session, _priv->from, _priv->to, _priv->cc,
			_priv->bcc, _priv->subject, sbuf, p);

		session.send(p);

	}
	catch (std::exception& e)
	{
		LogLog::error(LOG4CXX_STR(""Error occured while sending e-mail notification.""), e);
	}

#endif
}",1,1,main\cpp\smtpappender.cpp,SMTPAppender.sendBuffer,,false,745,780,sendBuffer,,,39,void SMTPAppender.sendBuffer (Pool)
52066,METHOD,main\cpp\smtpappender.cpp:<global>,TYPE_DECL,"LogString SMTPAppender::getEvaluatorClass()
{
	return _priv->evaluator == 0 ? LogString() : _priv->evaluator->getClass().getName();
}",1,8,main\cpp\smtpappender.cpp,SMTPAppender.getEvaluatorClass,,false,785,788,getEvaluatorClass,,,40,LogString SMTPAppender.getEvaluatorClass ()
52099,METHOD,main\cpp\smtpappender.cpp:<global>,TYPE_DECL,"LOG4CXX_NS::spi::TriggeringEventEvaluatorPtr SMTPAppender::getEvaluator() const
{
	return _priv->evaluator;
}",1,8,main\cpp\smtpappender.cpp,SMTPAppender.getEvaluator,,false,790,793,getEvaluator,,,41,TriggeringEventEvaluatorPtr SMTPAppender.getEvaluator ()
52114,METHOD,main\cpp\smtpappender.cpp:<global>,TYPE_DECL,"void SMTPAppender::setEvaluator(LOG4CXX_NS::spi::TriggeringEventEvaluatorPtr& trigger)
{
	_priv->evaluator = trigger;
}",1,1,main\cpp\smtpappender.cpp,SMTPAppender.setEvaluator,,false,795,798,setEvaluator,,,42,void SMTPAppender.setEvaluator (ANY)
52133,METHOD,main\cpp\smtpappender.cpp:<global>,TYPE_DECL,"void SMTPAppender::setBufferSize(int sz)
{
	_priv->bufferSize = sz;
	_priv->cb.resize(sz);
}",1,1,main\cpp\smtpappender.cpp,SMTPAppender.setBufferSize,,false,807,811,setBufferSize,,,43,void SMTPAppender.setBufferSize (int)
52164,METHOD,main\cpp\smtpappender.cpp:<global>,TYPE_DECL,"void SMTPAppender::setEvaluatorClass(const LogString& value)
{
	ObjectPtr obj = ObjectPtr(Loader::loadClass(value).newInstance());
	_priv->evaluator = LOG4CXX_NS::cast<TriggeringEventEvaluator>(obj);
}",1,1,main\cpp\smtpappender.cpp,SMTPAppender.setEvaluatorClass,,false,820,824,setEvaluatorClass,,,44,void SMTPAppender.setEvaluatorClass (LogString)
52199,METHOD,main\cpp\smtpappender.cpp:<global>,TYPE_DECL,"int SMTPAppender::getBufferSize() const
{
	return _priv->bufferSize;
}",1,8,main\cpp\smtpappender.cpp,SMTPAppender.getBufferSize,,false,826,829,getBufferSize,,,45,int SMTPAppender.getBufferSize ()
52227,METHOD,main\cpp\socket.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\socket.cpp,main\cpp\socket.cpp:<global>,,false,1,51,<global>,,,1,
52231,METHOD,main\cpp\socket.cpp:<global>,TYPE_DECL,"Socket::Socket(std::unique_ptr<Socket::SocketPrivate> priv) :
	m_priv(std::move(priv)){

}",1,1,main\cpp\socket.cpp,Socket.Socket,,false,29,32,Socket,,,3,ANY Socket.Socket (ANY)
52236,METHOD,main\cpp\socket.cpp:<global>,TYPE_DECL,"Socket::~Socket()
{
}",1,1,main\cpp\socket.cpp,Socket.~Socket,,false,34,36,~Socket,,,4,ANY Socket.~Socket ()
52240,METHOD,main\cpp\socket.cpp:<global>,TYPE_DECL,"InetAddressPtr Socket::getInetAddress() const
{
	return m_priv->address;
}",1,1,main\cpp\socket.cpp,Socket.getInetAddress,,false,38,41,getInetAddress,,,5,InetAddressPtr Socket.getInetAddress ()
52248,METHOD,main\cpp\socket.cpp:<global>,TYPE_DECL,"int Socket::getPort() const
{
	return m_priv->port;
}",1,1,main\cpp\socket.cpp,Socket.getPort,,false,43,46,getPort,,,6,int Socket.getPort ()
52256,METHOD,main\cpp\socket.cpp:<global>,TYPE_DECL,"SocketUniquePtr Socket::create(InetAddressPtr& address, int port){
	return std::make_unique<APRSocket>(address, port);
}",1,1,main\cpp\socket.cpp,Socket.create,,false,48,50,create,,,7,"SocketUniquePtr Socket.create (InetAddressPtr,int)"
52300,METHOD,main\cpp\socketappenderskeleton.cpp:<global>,TYPE_DECL,<global>,1,44,main\cpp\socketappenderskeleton.cpp,main\cpp\socketappenderskeleton.cpp:<global>,,false,1,258,<global>,,,1,
52302,METHOD,main\cpp\socketappenderskeleton.cpp:<global>,TYPE_DECL,"SocketAppenderSkeleton::SocketAppenderSkeleton(int defaultPort, int reconnectionDelay)
    : AppenderSkeleton(std::make_unique<SocketAppenderSkeletonPriv>(defaultPort, reconnectionDelay))
{
}",1,1,main\cpp\socketappenderskeleton.cpp,SocketAppenderSkeleton.SocketAppenderSkeleton,,false,38,41,SocketAppenderSkeleton,,,1,"ANY SocketAppenderSkeleton.SocketAppenderSkeleton (int,int)"
52308,METHOD,main\cpp\socketappenderskeleton.cpp:<global>,TYPE_DECL,"SocketAppenderSkeleton::SocketAppenderSkeleton(helpers::InetAddressPtr address, int port, int reconnectionDelay)
    : AppenderSkeleton(std::make_unique<SocketAppenderSkeletonPriv>(address, port, reconnectionDelay))
{
}",1,1,main\cpp\socketappenderskeleton.cpp,SocketAppenderSkeleton.SocketAppenderSkeleton,,false,43,46,SocketAppenderSkeleton,,,2,"ANY SocketAppenderSkeleton.SocketAppenderSkeleton (ANY,int,int)"
52315,METHOD,main\cpp\socketappenderskeleton.cpp:<global>,TYPE_DECL,"SocketAppenderSkeleton::SocketAppenderSkeleton(const LogString& host, int port, int reconnectionDelay)
    : AppenderSkeleton(std::make_unique<SocketAppenderSkeletonPriv>(host, port, reconnectionDelay))
{
}",1,1,main\cpp\socketappenderskeleton.cpp,SocketAppenderSkeleton.SocketAppenderSkeleton,,false,48,51,SocketAppenderSkeleton,,,3,"ANY SocketAppenderSkeleton.SocketAppenderSkeleton (LogString,int,int)"
52322,METHOD,main\cpp\socketappenderskeleton.cpp:<global>,TYPE_DECL,"SocketAppenderSkeleton::SocketAppenderSkeleton(std::unique_ptr<SocketAppenderSkeletonPriv> priv)
	:  AppenderSkeleton (std::move(priv))
{
}",1,1,main\cpp\socketappenderskeleton.cpp,SocketAppenderSkeleton.SocketAppenderSkeleton,,false,53,56,SocketAppenderSkeleton,,,4,ANY SocketAppenderSkeleton.SocketAppenderSkeleton (ANY)
52327,METHOD,main\cpp\socketappenderskeleton.cpp:<global>,TYPE_DECL,"SocketAppenderSkeleton::~SocketAppenderSkeleton()
{
	finalize();
}",1,1,main\cpp\socketappenderskeleton.cpp,SocketAppenderSkeleton.~SocketAppenderSkeleton,,false,58,61,~SocketAppenderSkeleton,,,5,ANY SocketAppenderSkeleton.~SocketAppenderSkeleton ()
52332,METHOD,main\cpp\socketappenderskeleton.cpp:<global>,TYPE_DECL,"void SocketAppenderSkeleton::activateOptions(Pool& p)
{
	AppenderSkeleton::activateOptions(p);
	connect(p);
}",1,1,main\cpp\socketappenderskeleton.cpp,SocketAppenderSkeleton.activateOptions,,false,63,67,activateOptions,,,6,void SocketAppenderSkeleton.activateOptions (Pool)
52344,METHOD,main\cpp\socketappenderskeleton.cpp:<global>,TYPE_DECL,"void SocketAppenderSkeleton::close()
{
	std::lock_guard<std::recursive_mutex> lock(_priv->mutex);

	if (_priv->closed)
	{
		return;
	}

	_priv->closed = true;
	cleanUp(_priv->pool);

	{
		std::unique_lock<std::mutex> lock2(_priv->interrupt_mutex);
		_priv->interrupt.notify_all();
	}

	if ( _priv->thread.joinable() )
	{
		_priv->thread.join();
	}
}",1,44,main\cpp\socketappenderskeleton.cpp,SocketAppenderSkeleton.close,,false,69,90,close,,,7,void SocketAppenderSkeleton.close ()
52464,METHOD,main\cpp\socketappenderskeleton.cpp:<global>,TYPE_DECL,"void SocketAppenderSkeleton::connect(Pool& p)
{
	if (_priv->address == 0)
	{
		LogLog::error(LogString(LOG4CXX_STR(""No remote host is set for Appender named \"""")) +
			_priv->name + LOG4CXX_STR(""\"".""));
	}
	else
	{
		cleanUp(p);

		try
		{
			LogString msg(LOG4CXX_STR(""Connecting to ["")
				+ _priv->address->toString() + LOG4CXX_STR("":""));
			StringHelper::toString(_priv->port, p, msg);
			msg += LOG4CXX_STR(""]."");
			LogLog::debug(msg);
			SocketPtr socket = Socket::create(_priv->address, _priv->port);
			setSocket(socket, p);
		}
		catch (SocketException& e)
		{
			LogString msg = LOG4CXX_STR(""Could not connect to ["")
				+ _priv->address->toString() + LOG4CXX_STR("":"");
			StringHelper::toString(_priv->port, p, msg);
			msg += LOG4CXX_STR(""]."");

			fireConnector(); // fire the connector thread
			LogLog::error(msg, e);
		}
	}
}",1,5,main\cpp\socketappenderskeleton.cpp,SocketAppenderSkeleton.connect,,false,92,124,connect,,,8,void SocketAppenderSkeleton.connect (Pool)
52636,METHOD,main\cpp\socketappenderskeleton.cpp:<global>,TYPE_DECL,"void SocketAppenderSkeleton::setOption(const LogString& option, const LogString& value)
{
	if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""REMOTEHOST""), LOG4CXX_STR(""remotehost"")))
	{
		setRemoteHost(value);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""PORT""), LOG4CXX_STR(""port"")))
	{
		setPort(OptionConverter::toInt(value, getDefaultPort()));
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""LOCATIONINFO""), LOG4CXX_STR(""locationinfo"")))
	{
		setLocationInfo(OptionConverter::toBoolean(value, false));
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""RECONNECTIONDELAY""), LOG4CXX_STR(""reconnectiondelay"")))
	{
		setReconnectionDelay(OptionConverter::toInt(value, getDefaultDelay()));
	}
	else
	{
		AppenderSkeleton::setOption(option, value);
	}
}",1,1,main\cpp\socketappenderskeleton.cpp,SocketAppenderSkeleton.setOption,,false,126,148,setOption,,,9,"void SocketAppenderSkeleton.setOption (LogString,LogString)"
52723,METHOD,main\cpp\socketappenderskeleton.cpp:<global>,TYPE_DECL,"void SocketAppenderSkeleton::fireConnector()
{
	std::lock_guard<std::recursive_mutex> lock(_priv->mutex);

	if ( !_priv->thread.joinable() )
	{
		LogLog::debug(LOG4CXX_STR(""Connector thread not alive: starting monitor.""));

		_priv->thread = ThreadUtility::instance()->createThread( LOG4CXX_STR(""SocketAppend""), &SocketAppenderSkeleton::monitor, this );
	}
}",1,44,main\cpp\socketappenderskeleton.cpp,SocketAppenderSkeleton.fireConnector,,false,150,160,fireConnector,,,10,void SocketAppenderSkeleton.fireConnector ()
52793,METHOD,main\cpp\socketappenderskeleton.cpp:<global>,TYPE_DECL,"void SocketAppenderSkeleton::monitor()
{
	Pool p;
	SocketPtr socket;

	while (!is_closed())
	{
		try
		{
			LogString msg(LOG4CXX_STR(""Attempting connection to ["")
				+ _priv->address->toString() + LOG4CXX_STR("":""));
			StringHelper::toString(_priv->port, p, msg);
			msg += LOG4CXX_STR(""]."");
			LogLog::debug(msg);
			socket = Socket::create(_priv->address, _priv->port);
			setSocket(socket, p);
			LogLog::debug(LOG4CXX_STR(""Connection established. Exiting connector thread.""));
			return;
		}
		catch (ConnectException& e)
		{
			LogLog::error(LOG4CXX_STR(""Remote host "")
				+ _priv->address->toString()
				+ LOG4CXX_STR("" refused connection.""), e);
		}
		catch (IOException& e)
		{
			LogString msg(LOG4CXX_STR(""Could not connect to ["")
				+ _priv->address->toString() + LOG4CXX_STR("":""));
			StringHelper::toString(_priv->port, p, msg);
			msg += LOG4CXX_STR(""]."");
			LogLog::error(msg, e);
		}

		if (_priv->reconnectionDelay > 0)
		{
			LogString msg(LOG4CXX_STR(""Waiting ""));
			Str...",1,6,main\cpp\socketappenderskeleton.cpp,SocketAppenderSkeleton.monitor,,false,162,212,monitor,,,11,void SocketAppenderSkeleton.monitor ()
53099,METHOD,main\cpp\socketappenderskeleton.cpp:<global>,TYPE_DECL,"bool SocketAppenderSkeleton::is_closed()
{
	return _priv->closed;
}",1,8,main\cpp\socketappenderskeleton.cpp,SocketAppenderSkeleton.is_closed,,false,214,217,is_closed,,,12,bool SocketAppenderSkeleton.is_closed ()
53114,METHOD,main\cpp\socketappenderskeleton.cpp:<global>,TYPE_DECL,"void SocketAppenderSkeleton::setRemoteHost(const LogString& host)
{
	_priv->address = helpers::InetAddress::getByName(host);
	_priv->remoteHost.assign(host);
}",1,1,main\cpp\socketappenderskeleton.cpp,SocketAppenderSkeleton.setRemoteHost,,false,219,223,setRemoteHost,,,13,void SocketAppenderSkeleton.setRemoteHost (LogString)
53153,METHOD,main\cpp\socketappenderskeleton.cpp:<global>,TYPE_DECL,"const LogString& SocketAppenderSkeleton::getRemoteHost() const
{
	return _priv->remoteHost;
}",1,8,main\cpp\socketappenderskeleton.cpp,SocketAppenderSkeleton.getRemoteHost,,false,225,228,getRemoteHost,,,14,LogString SocketAppenderSkeleton.getRemoteHost ()
53168,METHOD,main\cpp\socketappenderskeleton.cpp:<global>,TYPE_DECL,"void SocketAppenderSkeleton::setPort(int port1)
{
	_priv->port = port1;
}",1,1,main\cpp\socketappenderskeleton.cpp,SocketAppenderSkeleton.setPort,,false,230,233,setPort,,,15,void SocketAppenderSkeleton.setPort (int)
53185,METHOD,main\cpp\socketappenderskeleton.cpp:<global>,TYPE_DECL,"int SocketAppenderSkeleton::getPort() const
{
	return _priv->port;
}",1,8,main\cpp\socketappenderskeleton.cpp,SocketAppenderSkeleton.getPort,,false,235,238,getPort,,,16,int SocketAppenderSkeleton.getPort ()
53200,METHOD,main\cpp\socketappenderskeleton.cpp:<global>,TYPE_DECL,"void SocketAppenderSkeleton::setLocationInfo(bool locationInfo1)
{
	_priv->locationInfo = locationInfo1;
}",1,1,main\cpp\socketappenderskeleton.cpp,SocketAppenderSkeleton.setLocationInfo,,false,240,243,setLocationInfo,,,17,void SocketAppenderSkeleton.setLocationInfo (bool)
53217,METHOD,main\cpp\socketappenderskeleton.cpp:<global>,TYPE_DECL,"bool SocketAppenderSkeleton::getLocationInfo() const
{
	return _priv->locationInfo;
}",1,8,main\cpp\socketappenderskeleton.cpp,SocketAppenderSkeleton.getLocationInfo,,false,245,248,getLocationInfo,,,18,bool SocketAppenderSkeleton.getLocationInfo ()
53232,METHOD,main\cpp\socketappenderskeleton.cpp:<global>,TYPE_DECL,"void SocketAppenderSkeleton::setReconnectionDelay(int reconnectionDelay1)
{
	_priv->reconnectionDelay = reconnectionDelay1;
}",1,1,main\cpp\socketappenderskeleton.cpp,SocketAppenderSkeleton.setReconnectionDelay,,false,250,253,setReconnectionDelay,,,19,void SocketAppenderSkeleton.setReconnectionDelay (int)
53249,METHOD,main\cpp\socketappenderskeleton.cpp:<global>,TYPE_DECL,"int SocketAppenderSkeleton::getReconnectionDelay() const
{
	return _priv->reconnectionDelay;
}",1,8,main\cpp\socketappenderskeleton.cpp,SocketAppenderSkeleton.getReconnectionDelay,,false,255,258,getReconnectionDelay,,,20,int SocketAppenderSkeleton.getReconnectionDelay ()
53279,METHOD,main\cpp\socketoutputstream.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\socketoutputstream.cpp,main\cpp\socketoutputstream.cpp:<global>,,false,1,73,<global>,,,1,
53286,METHOD,main\cpp\socketoutputstream.cpp:<global>,TYPE_DECL,"SocketOutputStream::SocketOutputStream(const SocketPtr& socket1)
	: m_priv(std::make_unique<SocketOutputStreamPrivate>())
{
	m_priv->socket = socket1;
}",1,1,main\cpp\socketoutputstream.cpp,SocketOutputStream.SocketOutputStream,,false,37,41,SocketOutputStream,,,4,ANY SocketOutputStream.SocketOutputStream (SocketPtr)
53296,METHOD,main\cpp\socketoutputstream.cpp:<global>,TYPE_DECL,"SocketOutputStream::~SocketOutputStream()
{
}",1,1,main\cpp\socketoutputstream.cpp,SocketOutputStream.~SocketOutputStream,,false,43,45,~SocketOutputStream,,,5,ANY SocketOutputStream.~SocketOutputStream ()
53300,METHOD,main\cpp\socketoutputstream.cpp:<global>,TYPE_DECL,"void SocketOutputStream::close(Pool& p)
{
	flush(p);
	m_priv->socket->close();
}",1,1,main\cpp\socketoutputstream.cpp,SocketOutputStream.close,,false,47,51,close,,,6,void SocketOutputStream.close (Pool)
53313,METHOD,main\cpp\socketoutputstream.cpp:<global>,TYPE_DECL,"void SocketOutputStream::flush(Pool& /* p */)
{
	if (m_priv->array.size() > 0)
	{
		ByteBuffer buf((char*) &m_priv->array[0], m_priv->array.size());
		m_priv->socket->write(buf);
		m_priv->array.resize(0);
	}
}",1,1,main\cpp\socketoutputstream.cpp,SocketOutputStream.flush,,false,53,61,flush,,,7,void SocketOutputStream.flush (Pool)
53358,METHOD,main\cpp\socketoutputstream.cpp:<global>,TYPE_DECL,"void SocketOutputStream::write(ByteBuffer& buf, Pool& /* p */ )
{
	if (buf.remaining() > 0)
	{
		size_t sz = m_priv->array.size();
		m_priv->array.resize(sz + buf.remaining());
		memcpy(&m_priv->array[sz], buf.current(), buf.remaining());
		buf.position(buf.limit());
	}
}",1,1,main\cpp\socketoutputstream.cpp,SocketOutputStream.write,,false,63,72,write,,,8,"void SocketOutputStream.write (ByteBuffer,Pool)"
53427,METHOD,main\cpp\strftimedateformat.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\strftimedateformat.cpp,main\cpp\strftimedateformat.cpp:<global>,,false,1,74,<global>,,,1,
53430,METHOD,StrftimeDateFormatPrivate,TYPE_DECL,"StrftimeDateFormatPrivate() :
		timeZone(TimeZone::getDefault())
	{}",2,3,main\cpp\strftimedateformat.cpp,StrftimeDateFormatPrivate.StrftimeDateFormatPrivate,,false,28,30,StrftimeDateFormatPrivate,,,1,ANY StrftimeDateFormatPrivate.StrftimeDateFormatPrivate ()
53436,METHOD,main\cpp\strftimedateformat.cpp:<global>,TYPE_DECL,"StrftimeDateFormat::StrftimeDateFormat(const LogString& fmt)
	: m_priv(std::make_unique<StrftimeDateFormatPrivate>())
{
	LOG4CXX_NS::helpers::Transcoder::encode(fmt, m_priv->pattern);
}",1,1,main\cpp\strftimedateformat.cpp,StrftimeDateFormat.StrftimeDateFormat,,false,40,44,StrftimeDateFormat,,,2,ANY StrftimeDateFormat.StrftimeDateFormat (LogString)
53453,METHOD,main\cpp\strftimedateformat.cpp:<global>,TYPE_DECL,"StrftimeDateFormat::~StrftimeDateFormat()
{
}",1,1,main\cpp\strftimedateformat.cpp,StrftimeDateFormat.~StrftimeDateFormat,,false,46,48,~StrftimeDateFormat,,,3,ANY StrftimeDateFormat.~StrftimeDateFormat ()
53457,METHOD,main\cpp\strftimedateformat.cpp:<global>,TYPE_DECL,"void StrftimeDateFormat::format(LogString& s, log4cxx_time_t time, Pool& /* p */ ) const
{
	apr_time_exp_t exploded;
	apr_status_t stat = m_priv->timeZone->explode(&exploded, time);

	if (stat == APR_SUCCESS)
	{
		const apr_size_t bufSize = 255;
		char buf[bufSize];
		apr_size_t bufLen;
		stat = apr_strftime(buf, &bufLen, bufSize, m_priv->pattern.c_str(), &exploded);

		if (stat == APR_SUCCESS)
		{
			LOG4CXX_NS::helpers::Transcoder::decode(std::string(buf, bufLen), s);
		}
	}
}",1,1,main\cpp\strftimedateformat.cpp,StrftimeDateFormat.format,,false,51,68,format,,,4,"void StrftimeDateFormat.format (LogString,log4cxx_time_t,Pool)"
53523,METHOD,main\cpp\strftimedateformat.cpp:<global>,TYPE_DECL,"void StrftimeDateFormat::setTimeZone(const TimeZonePtr& zone)
{
	m_priv->timeZone = zone;
}",1,1,main\cpp\strftimedateformat.cpp,StrftimeDateFormat.setTimeZone,,false,70,73,setTimeZone,,,5,void StrftimeDateFormat.setTimeZone (TimeZonePtr)
53552,METHOD,main\cpp\stringhelper.cpp:<global>,TYPE_DECL,<global>,1,2,main\cpp\stringhelper.cpp,main\cpp\stringhelper.cpp:<global>,,false,1,195,<global>,,,1,
53554,METHOD,main\cpp\stringhelper.cpp:<global>,TYPE_DECL,"bool StringHelper::equalsIgnoreCase(const LogString& s1, const logchar* upper, const logchar* lower)
{
	for (LogString::const_iterator iter = s1.begin();
		iter != s1.end();
		iter++, upper++, lower++)
	{
		if (*iter != *upper && *iter != * lower)
		{
			return false;
		}
	}

	return (*upper == 0);
}",1,1,main\cpp\stringhelper.cpp,StringHelper.equalsIgnoreCase,,false,31,44,equalsIgnoreCase,,,1,"bool StringHelper.equalsIgnoreCase (LogString,logchar*,logchar*)"
53604,METHOD,main\cpp\stringhelper.cpp:<global>,TYPE_DECL,"bool StringHelper::equalsIgnoreCase(const LogString& s1, const LogString& upper, const LogString& lower)
{
	LogString::const_iterator u = upper.begin();
	LogString::const_iterator l = lower.begin();
	LogString::const_iterator iter = s1.begin();

	for (;
		iter != s1.end() && u != upper.end() && l != lower.end();
		iter++, u++, l++)
	{
		if (*iter != *u && *iter != *l)
		{
			return false;
		}
	}

	return u == upper.end() && iter == s1.end();
}",1,1,main\cpp\stringhelper.cpp,StringHelper.equalsIgnoreCase,,false,46,63,equalsIgnoreCase,,,2,"bool StringHelper.equalsIgnoreCase (LogString,LogString,LogString)"
53691,METHOD,main\cpp\stringhelper.cpp:<global>,TYPE_DECL,"LogString StringHelper::toLowerCase(const LogString& s)
{
	LogString d;
	std::transform(s.begin(), s.end(),
		std::insert_iterator<LogString>(d, d.begin()), tolower);
	return d;
}",1,1,main\cpp\stringhelper.cpp,StringHelper.toLowerCase,,false,67,73,toLowerCase,,,3,LogString StringHelper.toLowerCase (LogString)
53725,METHOD,main\cpp\stringhelper.cpp:<global>,TYPE_DECL,"LogString StringHelper::trim(const LogString& s)
{
	LogString::size_type pos = s.find_first_not_of(' ');

	if (pos == std::string::npos)
	{
		return LogString();
	}

	LogString::size_type n = s.find_last_not_of(' ') - pos + 1;
	return s.substr(pos, n);
}",1,1,main\cpp\stringhelper.cpp,StringHelper.trim,,false,75,86,trim,,,4,LogString StringHelper.trim (LogString)
53768,METHOD,main\cpp\stringhelper.cpp:<global>,TYPE_DECL,"bool StringHelper::startsWith(const LogString& s, const LogString& prefix)
{
	if (s.length() < prefix.length())
	{
		return false;
	}

	return s.compare(0, prefix.length(), prefix) == 0;
}",1,1,main\cpp\stringhelper.cpp,StringHelper.startsWith,,false,88,96,startsWith,,,5,"bool StringHelper.startsWith (LogString,LogString)"
53800,METHOD,main\cpp\stringhelper.cpp:<global>,TYPE_DECL,"bool StringHelper::endsWith(const LogString& s, const LogString& suffix)
{
	if (suffix.length() <= s.length())
	{
		return s.compare(s.length() - suffix.length(), suffix.length(), suffix) == 0;
	}

	return false;
}",1,1,main\cpp\stringhelper.cpp,StringHelper.endsWith,,false,98,106,endsWith,,,6,"bool StringHelper.endsWith (LogString,LogString)"
53840,METHOD,main\cpp\stringhelper.cpp:<global>,TYPE_DECL,"int StringHelper::toInt(const LogString& s)
{
#if LOG4CXX_LOGCHAR_IS_UNICHAR
	std::string as;
	Transcoder::encode(s, as);
	return std::stoi(as);
#else
	return std::stoi(s);
#endif
}",1,1,main\cpp\stringhelper.cpp,StringHelper.toInt,,false,109,118,toInt,,,7,int StringHelper.toInt (LogString)
53851,METHOD,main\cpp\stringhelper.cpp:<global>,TYPE_DECL,"int64_t StringHelper::toInt64(const LogString& s)
{
#if LOG4CXX_LOGCHAR_IS_UNICHAR
	std::string as;
	Transcoder::encode(s, as);
	return std::stoll(as);
#else
	return std::stoll(s);
#endif
}",1,1,main\cpp\stringhelper.cpp,StringHelper.toInt64,,false,120,129,toInt64,,,8,int64_t StringHelper.toInt64 (LogString)
53862,METHOD,main\cpp\stringhelper.cpp:<global>,TYPE_DECL,"void StringHelper::toString(int n, Pool& pool, LogString& dst)
{
#if LOG4CXX_LOGCHAR_IS_WCHAR
	dst.append(std::to_wstring(n));
#else
	Transcoder::decode(std::to_string(n), dst);
#endif
}",1,1,main\cpp\stringhelper.cpp,StringHelper.toString,,false,131,138,toString,,,9,"void StringHelper.toString (int,Pool,LogString)"
53879,METHOD,main\cpp\stringhelper.cpp:<global>,TYPE_DECL,"void StringHelper::toString(bool val, LogString& dst)
{
	if (val)
	{
		dst.append(LOG4CXX_STR(""true""));
	}
	else
	{
		dst.append(LOG4CXX_STR(""false""));
	}
}",1,1,main\cpp\stringhelper.cpp,StringHelper.toString,,false,140,150,toString,,,10,"void StringHelper.toString (bool,LogString)"
53902,METHOD,main\cpp\stringhelper.cpp:<global>,TYPE_DECL,"void StringHelper::toString(int64_t n, Pool& pool, LogString& dst)
{
#if LOG4CXX_LOGCHAR_IS_WCHAR
	dst.append(std::to_wstring(n));
#else
	Transcoder::decode(std::to_string(n), dst);
#endif
}",1,1,main\cpp\stringhelper.cpp,StringHelper.toString,,false,153,160,toString,,,11,"void StringHelper.toString (int64_t,Pool,LogString)"
53919,METHOD,main\cpp\stringhelper.cpp:<global>,TYPE_DECL,"void StringHelper::toString(size_t n, Pool& pool, LogString& dst)
{
#if LOG4CXX_LOGCHAR_IS_WCHAR
	dst.append(std::to_wstring(n));
#else
	Transcoder::decode(std::to_string(n), dst);
#endif
}",1,1,main\cpp\stringhelper.cpp,StringHelper.toString,,false,163,170,toString,,,12,"void StringHelper.toString (size_t,Pool,LogString)"
53936,METHOD,main\cpp\stringhelper.cpp:<global>,TYPE_DECL,"LogString StringHelper::format(const LogString& pattern, const std::vector<LogString>& params)
{

	LogString result;
	int i = 0;

	while (pattern[i] != 0)
	{
		if (pattern[i] == 0x7B /* '{' */ && pattern[i + 1] >= 0x30 /* '0' */ &&
			pattern[i + 1] <= 0x39 /* '9' */ && pattern[i + 2] == 0x7D /* '}' */)
		{
			int arg = pattern[i + 1] - 0x30 /* '0' */;
			result = result + params[arg];
			i += 3;
		}
		else
		{
			result = result + pattern[i];
			i++;
		}
	}

	return result;
}",1,1,main\cpp\stringhelper.cpp,StringHelper.format,,false,172,195,format,,,13,"LogString StringHelper.format (LogString,ANY)"
54033,METHOD,main\cpp\stringmatchfilter.cpp:<global>,TYPE_DECL,<global>,1,2,main\cpp\stringmatchfilter.cpp,main\cpp\stringmatchfilter.cpp:<global>,,false,1,114,<global>,,,1,
54036,METHOD,StringMatchFilterPrivate,TYPE_DECL,"StringMatchFilterPrivate() : FilterPrivate(),
		acceptOnMatch(true),
		stringToMatch() {}",2,20,main\cpp\stringmatchfilter.cpp,StringMatchFilterPrivate.StringMatchFilterPrivate,,false,34,36,StringMatchFilterPrivate,,,1,ANY StringMatchFilterPrivate.StringMatchFilterPrivate ()
54044,METHOD,main\cpp\stringmatchfilter.cpp:<global>,TYPE_DECL,"StringMatchFilter::StringMatchFilter() :
	Filter(std::make_unique<StringMatchFilterPrivate>())
{
}",1,1,main\cpp\stringmatchfilter.cpp,StringMatchFilter.StringMatchFilter,,false,44,47,StringMatchFilter,,,4,ANY StringMatchFilter.StringMatchFilter ()
54048,METHOD,main\cpp\stringmatchfilter.cpp:<global>,TYPE_DECL,StringMatchFilter::~StringMatchFilter() {},1,42,main\cpp\stringmatchfilter.cpp,StringMatchFilter.~StringMatchFilter,,false,49,49,~StringMatchFilter,,,5,ANY StringMatchFilter.~StringMatchFilter ()
54052,METHOD,main\cpp\stringmatchfilter.cpp:<global>,TYPE_DECL,"void StringMatchFilter::setOption(const LogString& option,
	const LogString& value)
{

	if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""STRINGTOMATCH""), LOG4CXX_STR(""stringtomatch"")))
	{
		priv->stringToMatch = value;
	}
	else if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""ACCEPTONMATCH""), LOG4CXX_STR(""acceptonmatch"")))
	{
		priv->acceptOnMatch = OptionConverter::toBoolean(value, priv->acceptOnMatch);
	}
}",1,2,main\cpp\stringmatchfilter.cpp,StringMatchFilter.setOption,,false,51,65,setOption,,,6,"void StringMatchFilter.setOption (LogString,LogString)"
54120,METHOD,main\cpp\stringmatchfilter.cpp:<global>,TYPE_DECL,"Filter::FilterDecision StringMatchFilter::decide(
	const LOG4CXX_NS::spi::LoggingEventPtr& event) const
{
	const LogString& msg = event->getRenderedMessage();

	if (msg.empty() || priv->stringToMatch.empty())
	{
		return Filter::NEUTRAL;
	}


	if ( msg.find(priv->stringToMatch) == LogString::npos )
	{
		return Filter::NEUTRAL;
	}
	else
	{
		// we've got a match
		if (priv->acceptOnMatch)
		{
			return Filter::ACCEPT;
		}
		else
		{
			return Filter::DENY;
		}
	}
}",1,20,main\cpp\stringmatchfilter.cpp,StringMatchFilter.decide,,false,67,94,decide,,,7,FilterDecision StringMatchFilter.decide (ANY)
54204,METHOD,main\cpp\stringmatchfilter.cpp:<global>,TYPE_DECL,"void StringMatchFilter::setStringToMatch(const LogString& stringToMatch1)
{
	priv->stringToMatch.assign(stringToMatch1);
}",1,1,main\cpp\stringmatchfilter.cpp,StringMatchFilter.setStringToMatch,,false,96,99,setStringToMatch,,,8,void StringMatchFilter.setStringToMatch (LogString)
54223,METHOD,main\cpp\stringmatchfilter.cpp:<global>,TYPE_DECL,"const LogString& StringMatchFilter::getStringToMatch() const
{
	return priv->stringToMatch;
}",1,8,main\cpp\stringmatchfilter.cpp,StringMatchFilter.getStringToMatch,,false,101,104,getStringToMatch,,,9,LogString StringMatchFilter.getStringToMatch ()
54238,METHOD,main\cpp\stringmatchfilter.cpp:<global>,TYPE_DECL,"void StringMatchFilter::setAcceptOnMatch(bool acceptOnMatch1)
{
	priv->acceptOnMatch = acceptOnMatch1;
}",1,1,main\cpp\stringmatchfilter.cpp,StringMatchFilter.setAcceptOnMatch,,false,106,109,setAcceptOnMatch,,,10,void StringMatchFilter.setAcceptOnMatch (bool)
54255,METHOD,main\cpp\stringmatchfilter.cpp:<global>,TYPE_DECL,"bool StringMatchFilter::getAcceptOnMatch() const
{
	return priv->acceptOnMatch;
}",1,8,main\cpp\stringmatchfilter.cpp,StringMatchFilter.getAcceptOnMatch,,false,111,114,getAcceptOnMatch,,,11,bool StringMatchFilter.getAcceptOnMatch ()
54281,METHOD,main\cpp\stringtokenizer.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\stringtokenizer.cpp,main\cpp\stringtokenizer.cpp:<global>,,false,1,75,<global>,,,1,
54284,METHOD,StringTokenizerPrivate,TYPE_DECL,"StringTokenizerPrivate(const LogString& str, const LogString& delim1) : src(str), delim(delim1), pos(0){}",2,106,main\cpp\stringtokenizer.cpp,StringTokenizerPrivate.StringTokenizerPrivate,,false,30,30,StringTokenizerPrivate,,,1,"ANY StringTokenizerPrivate.StringTokenizerPrivate (LogString,LogString)"
54293,METHOD,main\cpp\stringtokenizer.cpp:<global>,TYPE_DECL,"StringTokenizer::StringTokenizer(const LogString& str, const LogString& delim1)
	: m_priv(std::make_unique<StringTokenizerPrivate>(str, delim1))
{
}",1,1,main\cpp\stringtokenizer.cpp,StringTokenizer.StringTokenizer,,false,37,40,StringTokenizer,,,2,"ANY StringTokenizer.StringTokenizer (LogString,LogString)"
54299,METHOD,main\cpp\stringtokenizer.cpp:<global>,TYPE_DECL,"StringTokenizer::~StringTokenizer()
{
}",1,1,main\cpp\stringtokenizer.cpp,StringTokenizer.~StringTokenizer,,false,42,44,~StringTokenizer,,,3,ANY StringTokenizer.~StringTokenizer ()
54303,METHOD,main\cpp\stringtokenizer.cpp:<global>,TYPE_DECL,"bool StringTokenizer::hasMoreTokens() const
{
	return (m_priv->pos != LogString::npos
			&& m_priv->src.find_first_not_of(m_priv->delim, m_priv->pos) != LogString::npos);
}",1,1,main\cpp\stringtokenizer.cpp,StringTokenizer.hasMoreTokens,,false,46,50,hasMoreTokens,,,4,bool StringTokenizer.hasMoreTokens ()
54332,METHOD,main\cpp\stringtokenizer.cpp:<global>,TYPE_DECL,"LogString StringTokenizer::nextToken()
{
	if (m_priv->pos != LogString::npos)
	{
		size_t nextPos = m_priv->src.find_first_not_of(m_priv->delim, m_priv->pos);

		if (nextPos != LogString::npos)
		{
			m_priv->pos = m_priv->src.find_first_of(m_priv->delim, nextPos);

			if (m_priv->pos == LogString::npos)
			{
				return m_priv->src.substr(nextPos);
			}

			return m_priv->src.substr(nextPos, m_priv->pos - nextPos);
		}
	}

	throw NoSuchElementException();
#if LOG4CXX_RETURN_AFTER_THROW
	return LogString();
#endif
}",1,1,main\cpp\stringtokenizer.cpp,StringTokenizer.nextToken,,false,52,75,nextToken,,,5,LogString StringTokenizer.nextToken ()
54436,METHOD,main\cpp\syslogappender.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\syslogappender.cpp,main\cpp\syslogappender.cpp:<global>,,false,1,489,<global>,,,1,
54440,METHOD,main\cpp\syslogappender.cpp:<global>,TYPE_DECL,"SyslogAppender::SyslogAppender()
	: AppenderSkeleton (std::make_unique<SyslogAppenderPriv>())
{
	this->initSyslogFacilityStr();

}",1,1,main\cpp\syslogappender.cpp,SyslogAppender.SyslogAppender,,false,42,47,SyslogAppender,,,3,ANY SyslogAppender.SyslogAppender ()
54448,METHOD,main\cpp\syslogappender.cpp:<global>,TYPE_DECL,"SyslogAppender::SyslogAppender(const LayoutPtr& layout1,
	int syslogFacility1)
	: AppenderSkeleton (std::make_unique<SyslogAppenderPriv>(layout1, syslogFacility1))
{
	this->initSyslogFacilityStr();
}",1,1,main\cpp\syslogappender.cpp,SyslogAppender.SyslogAppender,,false,49,54,SyslogAppender,,,4,"ANY SyslogAppender.SyslogAppender (LayoutPtr,int)"
54458,METHOD,main\cpp\syslogappender.cpp:<global>,TYPE_DECL,"SyslogAppender::SyslogAppender(const LayoutPtr& layout1,
	const LogString& syslogHost1, int syslogFacility1)
	: AppenderSkeleton (std::make_unique<SyslogAppenderPriv>(layout1, syslogHost1, syslogFacility1))
{
	this->initSyslogFacilityStr();
	setSyslogHost(syslogHost1);
}",1,1,main\cpp\syslogappender.cpp,SyslogAppender.SyslogAppender,,false,56,62,SyslogAppender,,,5,"ANY SyslogAppender.SyslogAppender (LayoutPtr,LogString,int)"
54471,METHOD,main\cpp\syslogappender.cpp:<global>,TYPE_DECL,"SyslogAppender::~SyslogAppender()
{
	finalize();
}",1,1,main\cpp\syslogappender.cpp,SyslogAppender.~SyslogAppender,,false,64,67,~SyslogAppender,,,6,ANY SyslogAppender.~SyslogAppender ()
54476,METHOD,main\cpp\syslogappender.cpp:<global>,TYPE_DECL,"void SyslogAppender::close()
{
	_priv->closed = true;

	if (_priv->sw)
	{
		_priv->sw = nullptr;
	}
}",1,1,main\cpp\syslogappender.cpp,SyslogAppender.close,,false,70,78,close,,,7,void SyslogAppender.close ()
54516,METHOD,main\cpp\syslogappender.cpp:<global>,TYPE_DECL,"void SyslogAppender::initSyslogFacilityStr()
{
	_priv->facilityStr = getFacilityString(_priv->syslogFacility);

	if (_priv->facilityStr.empty())
	{
		Pool p;
		LogString msg(LOG4CXX_STR(""\""""));
		StringHelper::toString(_priv->syslogFacility, p, msg);
		msg.append(LOG4CXX_STR(""\"" is an unknown syslog facility. Defaulting to \""USER\"".""));
		LogLog::error(msg);
		_priv->syslogFacility = LOG_USER;
		_priv->facilityStr = LOG4CXX_STR(""user:"");
	}
	else
	{
		_priv->facilityStr += LOG4CXX_STR("":"");
	}
}",1,1,main\cpp\syslogappender.cpp,SyslogAppender.initSyslogFacilityStr,,false,80,98,initSyslogFacilityStr,,,8,void SyslogAppender.initSyslogFacilityStr ()
54629,METHOD,main\cpp\syslogappender.cpp:<global>,TYPE_DECL,"LogString SyslogAppender::getFacilityString(
	int syslogFacility)
{
	switch (syslogFacility)
	{
		case LOG_KERN:
			return LOG4CXX_STR(""kern"");

		case LOG_USER:
			return LOG4CXX_STR(""user"");

		case LOG_MAIL:
			return LOG4CXX_STR(""mail"");

		case LOG_DAEMON:
			return LOG4CXX_STR(""daemon"");

		case LOG_AUTH:
			return LOG4CXX_STR(""auth"");

		case LOG_SYSLOG:
			return LOG4CXX_STR(""syslog"");

		case LOG_LPR:
			return LOG4CXX_STR(""lpr"");

		case LOG_NEWS:
			return LOG4CXX_STR(""news"");

		case LOG_UUCP:
			return LOG4CXX_STR(""uucp"");

		case LOG_CRON:
			return LOG4CXX_STR(""cron"");
#ifdef LOG_AUTHPRIV

		case LOG_AUTHPRIV:
			return LOG4CXX_STR(""authpriv"");
#endif
#ifdef LOG_FTP

		case LOG_FTP:
			return LOG4CXX_STR(""ftp"");
#endif

		case LOG_LOCAL0:
			return LOG4CXX_STR(""local0"");

		case LOG_LOCAL1:
			return LOG4CXX_STR(""local1"");

		case LOG_LOCAL2:
			return LOG4CXX_STR(""local2"");

		case LOG_LOCAL3:
			return LOG4CXX_STR(""local3"");

		case LOG_LOCAL4:
			return LOG4CXX_STR...",1,1,main\cpp\syslogappender.cpp,SyslogAppender.getFacilityString,,false,104,176,getFacilityString,,,9,LogString SyslogAppender.getFacilityString (int)
54730,METHOD,main\cpp\syslogappender.cpp:<global>,TYPE_DECL,"int SyslogAppender::getFacility(
	const LogString& s)
{
	if (StringHelper::equalsIgnoreCase(s, LOG4CXX_STR(""KERN""), LOG4CXX_STR(""kern"")))
	{
		return LOG_KERN;
	}
	else if (StringHelper::equalsIgnoreCase(s, LOG4CXX_STR(""USER""), LOG4CXX_STR(""user"")))
	{
		return LOG_USER;
	}
	else if (StringHelper::equalsIgnoreCase(s, LOG4CXX_STR(""MAIL""), LOG4CXX_STR(""mail"")))
	{
		return LOG_MAIL;
	}
	else if (StringHelper::equalsIgnoreCase(s, LOG4CXX_STR(""DAEMON""), LOG4CXX_STR(""daemon"")))
	{
		return LOG_DAEMON;
	}
	else if (StringHelper::equalsIgnoreCase(s, LOG4CXX_STR(""AUTH""), LOG4CXX_STR(""auth"")))
	{
		return LOG_AUTH;
	}
	else if (StringHelper::equalsIgnoreCase(s, LOG4CXX_STR(""SYSLOG""), LOG4CXX_STR(""syslog"")))
	{
		return LOG_SYSLOG;
	}
	else if (StringHelper::equalsIgnoreCase(s, LOG4CXX_STR(""LPR""), LOG4CXX_STR(""lpr"")))
	{
		return LOG_LPR;
	}
	else if (StringHelper::equalsIgnoreCase(s, LOG4CXX_STR(""NEWS""), LOG4CXX_STR(""news"")))
	{
		return LOG_NEWS;
	}
	else if (StringHelper::equalsIgnoreCase(...",1,9,main\cpp\syslogappender.cpp,SyslogAppender.getFacility,,false,178,272,getFacility,,,10,int SyslogAppender.getFacility (LogString)
55010,METHOD,main\cpp\syslogappender.cpp:<global>,TYPE_DECL,"void SyslogAppender::append(const spi::LoggingEventPtr& event, Pool& p)
{
	if  (!isAsSevereAsThreshold(event->getLevel()))
	{
		return;
	}

	LogString msg;
	std::string encoded;
	_priv->layout->format(msg, event, p);

	Transcoder::encode(msg, encoded);

	// Split up the message if it is over maxMessageLength in size.
	// According to RFC 3164, the max message length is 1024, however
	// newer systems(such as syslog-ng) can go up to 8k in size for their
	// messages.  We will append (x/y) at the end of each message
	// to indicate how far through the message we are
	std::vector<LogString> packets;

	if ( msg.size() > _priv->maxMessageLength )
	{
		LogString::iterator start = msg.begin();

		while ( start != msg.end() )
		{
			LogString::iterator end = start + _priv->maxMessageLength - 12;

			if ( end > msg.end() )
			{
				end = msg.end();
			}

			LogString newMsg = LogString( start, end );
			packets.push_back( newMsg );
			start = end;
		}

		int current = 1;

		for ( std::vector...",1,1,main\cpp\syslogappender.cpp,SyslogAppender.append,,false,274,373,append,,,11,"void SyslogAppender.append (ANY,Pool)"
55328,METHOD,main\cpp\syslogappender.cpp:<global>,TYPE_DECL,"void SyslogAppender::activateOptions(Pool&)
{
}",1,1,main\cpp\syslogappender.cpp,SyslogAppender.activateOptions,,false,375,377,activateOptions,,,12,void SyslogAppender.activateOptions (Pool)
55333,METHOD,main\cpp\syslogappender.cpp:<global>,TYPE_DECL,"void SyslogAppender::setOption(const LogString& option, const LogString& value)
{
	if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""SYSLOGHOST""), LOG4CXX_STR(""sysloghost"")))
	{
		setSyslogHost(value);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""FACILITY""), LOG4CXX_STR(""facility"")))
	{
		setFacility(value);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""MAXMESSAGELENGTH""), LOG4CXX_STR(""maxmessagelength"")))
	{
		setMaxMessageLength(OptionConverter::toInt(value, 1024));
	}
	else
	{
		AppenderSkeleton::setOption(option, value);
	}
}",1,1,main\cpp\syslogappender.cpp,SyslogAppender.setOption,,false,379,397,setOption,,,13,"void SyslogAppender.setOption (LogString,LogString)"
55395,METHOD,main\cpp\syslogappender.cpp:<global>,TYPE_DECL,"void SyslogAppender::setSyslogHost(const LogString& syslogHost1)
{
	if (_priv->sw != 0)
	{
		_priv->sw = nullptr;
	}

	LogString slHost = syslogHost1;
	int slHostPort = -1;

	LogString::size_type colonPos = 0;
	colonPos = slHost.rfind(':');

	if (colonPos != LogString::npos)
	{
		slHostPort = StringHelper::toInt(slHost.substr(colonPos + 1));
		// Erase the :port part of the host name
		slHost.erase( colonPos );
	}

	// On the local host, we can directly use the system function 'syslog'
	// if it is available (cf. append)
#if LOG4CXX_HAVE_SYSLOG

	if (syslogHost1 != LOG4CXX_STR(""localhost"") && syslogHost1 != LOG4CXX_STR(""127.0.0.1"")
		&& !syslogHost1.empty())
#endif
	{
		if (slHostPort >= 0)
		{
			_priv->sw = std::make_unique<SyslogWriter>(slHost, slHostPort);
		}
		else
		{
			_priv->sw = std::make_unique<SyslogWriter>(slHost);
		}
	}

	_priv->syslogHost = slHost;
	_priv->syslogHostPort = slHostPort;
}",1,5,main\cpp\syslogappender.cpp,SyslogAppender.setSyslogHost,,false,399,439,setSyslogHost,,,14,void SyslogAppender.setSyslogHost (LogString)
55544,METHOD,main\cpp\syslogappender.cpp:<global>,TYPE_DECL,"void SyslogAppender::setFacility(const LogString& facilityName)
{
	if (facilityName.empty())
	{
		return;
	}

	_priv->syslogFacility = getFacility(facilityName);

	if (_priv->syslogFacility == LOG_UNDEF)
	{
		LogLog::error(LOG4CXX_STR(""["") + facilityName +
			LOG4CXX_STR(""] is an unknown syslog facility. Defaulting to [USER].""));
		_priv->syslogFacility = LOG_USER;
	}

	this->initSyslogFacilityStr();
}",1,1,main\cpp\syslogappender.cpp,SyslogAppender.setFacility,,false,442,459,setFacility,,,15,void SyslogAppender.setFacility (LogString)
55613,METHOD,main\cpp\syslogappender.cpp:<global>,TYPE_DECL,"const LogString& SyslogAppender::getSyslogHost() const
{
	return _priv->syslogHost;
}",1,8,main\cpp\syslogappender.cpp,SyslogAppender.getSyslogHost,,false,461,464,getSyslogHost,,,16,LogString SyslogAppender.getSyslogHost ()
55628,METHOD,main\cpp\syslogappender.cpp:<global>,TYPE_DECL,"LogString SyslogAppender::getFacility() const
{
	return getFacilityString(_priv->syslogFacility);
}",1,26,main\cpp\syslogappender.cpp,SyslogAppender.getFacility,,false,466,469,getFacility,,,17,LogString SyslogAppender.getFacility ()
55644,METHOD,main\cpp\syslogappender.cpp:<global>,TYPE_DECL,"void SyslogAppender::setFacilityPrinting(bool facilityPrinting1)
{
	_priv->facilityPrinting = facilityPrinting1;
}",1,1,main\cpp\syslogappender.cpp,SyslogAppender.setFacilityPrinting,,false,471,474,setFacilityPrinting,,,18,void SyslogAppender.setFacilityPrinting (bool)
55661,METHOD,main\cpp\syslogappender.cpp:<global>,TYPE_DECL,"bool SyslogAppender::getFacilityPrinting() const
{
	return _priv->facilityPrinting;
}",1,8,main\cpp\syslogappender.cpp,SyslogAppender.getFacilityPrinting,,false,476,479,getFacilityPrinting,,,19,bool SyslogAppender.getFacilityPrinting ()
55676,METHOD,main\cpp\syslogappender.cpp:<global>,TYPE_DECL,"void SyslogAppender::setMaxMessageLength(int maxMessageLength1)
{
	_priv->maxMessageLength = maxMessageLength1;
}",1,1,main\cpp\syslogappender.cpp,SyslogAppender.setMaxMessageLength,,false,481,484,setMaxMessageLength,,,20,void SyslogAppender.setMaxMessageLength (int)
55693,METHOD,main\cpp\syslogappender.cpp:<global>,TYPE_DECL,"int SyslogAppender::getMaxMessageLength() const
{
	return _priv->maxMessageLength;
}",1,8,main\cpp\syslogappender.cpp,SyslogAppender.getMaxMessageLength,,false,486,489,getMaxMessageLength,,,21,int SyslogAppender.getMaxMessageLength ()
55725,METHOD,main\cpp\syslogwriter.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\syslogwriter.cpp,main\cpp\syslogwriter.cpp:<global>,,false,1,77,<global>,,,1,
55728,METHOD,SyslogWriterPrivate,TYPE_DECL,"SyslogWriterPrivate(const LogString& syslogHost1, int syslogHostPort1)
		: syslogHost(syslogHost1), syslogHostPort(syslogHostPort1){}",2,62,main\cpp\syslogwriter.cpp,SyslogWriterPrivate.SyslogWriterPrivate,,false,30,31,SyslogWriterPrivate,,,1,"ANY SyslogWriterPrivate.SyslogWriterPrivate (LogString,int)"
55738,METHOD,main\cpp\syslogwriter.cpp:<global>,TYPE_DECL,"SyslogWriter::SyslogWriter(const LogString& syslogHost1, int syslogHostPort1)
	: m_priv(std::make_unique<SyslogWriterPrivate>(syslogHost1, syslogHostPort1))
{
	try
	{
		m_priv->address = InetAddress::getByName(syslogHost1);
	}
	catch (UnknownHostException& e)
	{
		LogLog::error(((LogString) LOG4CXX_STR(""Could not find "")) + syslogHost1 +
			LOG4CXX_STR("". All logging will FAIL.""), e);
	}

	try
	{
		m_priv->ds = DatagramSocket::create();
	}
	catch (SocketException& e)
	{
		LogLog::error(((LogString) LOG4CXX_STR(""Could not instantiate DatagramSocket to "")) + syslogHost1 +
			LOG4CXX_STR("". All logging will FAIL.""), e);
	}
}",1,1,main\cpp\syslogwriter.cpp,SyslogWriter.SyslogWriter,,false,39,61,SyslogWriter,,,2,"ANY SyslogWriter.SyslogWriter (LogString,int)"
55795,METHOD,main\cpp\syslogwriter.cpp:<global>,TYPE_DECL,SyslogWriter::~SyslogWriter(){},1,31,main\cpp\syslogwriter.cpp,SyslogWriter.~SyslogWriter,,false,63,63,~SyslogWriter,,,3,ANY SyslogWriter.~SyslogWriter ()
55799,METHOD,main\cpp\syslogwriter.cpp:<global>,TYPE_DECL,"void SyslogWriter::write(const LogString& source)
{
	if (m_priv->ds != 0 && m_priv->address != 0)
	{
		LOG4CXX_ENCODE_CHAR(data, source);

		auto packet = std::make_shared<DatagramPacket>(
				(void*) data.data(), (int)data.length(),
				m_priv->address, m_priv->syslogHostPort);

		m_priv->ds->send(packet);
	}
}",1,1,main\cpp\syslogwriter.cpp,SyslogWriter.write,,false,65,77,write,,,4,void SyslogWriter.write (LogString)
55873,METHOD,main\cpp\system.cpp:<global>,TYPE_DECL,<global>,1,2,main\cpp\system.cpp,main\cpp\system.cpp:<global>,,false,1,121,<global>,,,1,
55875,METHOD,main\cpp\system.cpp:<global>,TYPE_DECL,"LogString System::getProperty(const LogString& lkey)
{
	if (lkey.empty())
	{
		throw IllegalArgumentException(LOG4CXX_STR(""key is empty""));
	}

	LogString rv;

	if (lkey == LOG4CXX_STR(""java.io.tmpdir""))
	{
		Pool p;
		const char* dir = NULL;
		apr_status_t stat = apr_temp_dir_get(&dir, p.getAPRPool());

		if (stat == APR_SUCCESS)
		{
			Transcoder::decode(dir, rv);
		}

		return rv;
	}

	if (lkey == LOG4CXX_STR(""user.dir""))
	{
		Pool p;
		char* dir = NULL;
		apr_status_t stat = apr_filepath_get(&dir, APR_FILEPATH_NATIVE,
				p.getAPRPool());

		if (stat == APR_SUCCESS)
		{
			Transcoder::decode(dir, rv);
		}

		return rv;
	}

#if APR_HAS_USER

	if (lkey == LOG4CXX_STR(""user.home"") || lkey == LOG4CXX_STR(""user.name""))
	{
		Pool pool;
		apr_uid_t userid;
		apr_gid_t groupid;
		apr_pool_t* p = pool.getAPRPool();
		apr_status_t stat = apr_uid_current(&userid, &groupid, p);

		if (stat == APR_SUCCESS)
		{
			char* username = NULL;
			stat = apr_uid_name_get(&username, userid, p);

			if...",1,1,main\cpp\system.cpp,System.getProperty,,false,32,121,getProperty,,,1,LogString System.getProperty (LogString)
56010,METHOD,main\cpp\systemerrwriter.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\systemerrwriter.cpp,main\cpp\systemerrwriter.cpp:<global>,,false,1,84,<global>,,,1,
56014,METHOD,main\cpp\systemerrwriter.cpp:<global>,TYPE_DECL,"SystemErrWriter::SystemErrWriter()
{
}",1,1,main\cpp\systemerrwriter.cpp,SystemErrWriter.SystemErrWriter,,false,32,34,SystemErrWriter,,,3,ANY SystemErrWriter.SystemErrWriter ()
56018,METHOD,main\cpp\systemerrwriter.cpp:<global>,TYPE_DECL,"SystemErrWriter::~SystemErrWriter()
{
}",1,1,main\cpp\systemerrwriter.cpp,SystemErrWriter.~SystemErrWriter,,false,36,38,~SystemErrWriter,,,4,ANY SystemErrWriter.~SystemErrWriter ()
56022,METHOD,main\cpp\systemerrwriter.cpp:<global>,TYPE_DECL,"void SystemErrWriter::close(Pool& /* p */)
{
}",1,1,main\cpp\systemerrwriter.cpp,SystemErrWriter.close,,false,40,42,close,,,5,void SystemErrWriter.close (Pool)
56027,METHOD,main\cpp\systemerrwriter.cpp:<global>,TYPE_DECL,"void SystemErrWriter::flush(Pool& /* p */)
{
	flush();
}",1,1,main\cpp\systemerrwriter.cpp,SystemErrWriter.flush,,false,44,47,flush,,,6,void SystemErrWriter.flush (Pool)
56033,METHOD,main\cpp\systemerrwriter.cpp:<global>,TYPE_DECL,"void SystemErrWriter::write(const LogString& str, Pool& /* p */)
{
	write(str);
}",1,1,main\cpp\systemerrwriter.cpp,SystemErrWriter.write,,false,49,52,write,,,7,"void SystemErrWriter.write (LogString,Pool)"
56041,METHOD,main\cpp\systemerrwriter.cpp:<global>,TYPE_DECL,"bool SystemErrWriter::isWide()
{
#if LOG4CXX_FORCE_WIDE_CONSOLE
	return true;
#elif LOG4CXX_FORCE_BYTE_CONSOLE || !LOG4CXX_HAS_FWIDE
	return false;
#else
	return fwide(stderr, 0) > 0;
#endif
}",1,1,main\cpp\systemerrwriter.cpp,SystemErrWriter.isWide,,false,54,63,isWide,,,8,bool SystemErrWriter.isWide ()
56047,METHOD,main\cpp\systemerrwriter.cpp:<global>,TYPE_DECL,"void SystemErrWriter::write(const LogString& str)
{
#if LOG4CXX_WCHAR_T_API

	if (isWide())
	{
		LOG4CXX_ENCODE_WCHAR(msg, str);
		fputws(msg.c_str(), stderr);
		return;
	}

#endif
	LOG4CXX_ENCODE_CHAR(msg, str);
	fputs(msg.c_str(), stderr);
}",1,1,main\cpp\systemerrwriter.cpp,SystemErrWriter.write,,false,65,79,write,,,9,void SystemErrWriter.write (LogString)
56061,METHOD,main\cpp\systemerrwriter.cpp:<global>,TYPE_DECL,"void SystemErrWriter::flush()
{
	fflush(stderr);
}",1,1,main\cpp\systemerrwriter.cpp,SystemErrWriter.flush,,false,81,84,flush,,,10,void SystemErrWriter.flush ()
56079,METHOD,main\cpp\systemoutwriter.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\systemoutwriter.cpp,main\cpp\systemoutwriter.cpp:<global>,,false,1,84,<global>,,,1,
56083,METHOD,main\cpp\systemoutwriter.cpp:<global>,TYPE_DECL,"SystemOutWriter::SystemOutWriter()
{
}",1,1,main\cpp\systemoutwriter.cpp,SystemOutWriter.SystemOutWriter,,false,32,34,SystemOutWriter,,,3,ANY SystemOutWriter.SystemOutWriter ()
56087,METHOD,main\cpp\systemoutwriter.cpp:<global>,TYPE_DECL,"SystemOutWriter::~SystemOutWriter()
{
}",1,1,main\cpp\systemoutwriter.cpp,SystemOutWriter.~SystemOutWriter,,false,36,38,~SystemOutWriter,,,4,ANY SystemOutWriter.~SystemOutWriter ()
56091,METHOD,main\cpp\systemoutwriter.cpp:<global>,TYPE_DECL,"void SystemOutWriter::close(Pool& /* p */ )
{
}",1,1,main\cpp\systemoutwriter.cpp,SystemOutWriter.close,,false,40,42,close,,,5,void SystemOutWriter.close (Pool)
56096,METHOD,main\cpp\systemoutwriter.cpp:<global>,TYPE_DECL,"void SystemOutWriter::flush(Pool& /* p */ )
{
	flush();
}",1,1,main\cpp\systemoutwriter.cpp,SystemOutWriter.flush,,false,44,47,flush,,,6,void SystemOutWriter.flush (Pool)
56102,METHOD,main\cpp\systemoutwriter.cpp:<global>,TYPE_DECL,"void SystemOutWriter::write(const LogString& str, Pool& /* p */ )
{
	write(str);
}",1,1,main\cpp\systemoutwriter.cpp,SystemOutWriter.write,,false,49,52,write,,,7,"void SystemOutWriter.write (LogString,Pool)"
56110,METHOD,main\cpp\systemoutwriter.cpp:<global>,TYPE_DECL,"bool SystemOutWriter::isWide()
{
#if LOG4CXX_FORCE_WIDE_CONSOLE
	return true;
#elif LOG4CXX_FORCE_BYTE_CONSOLE || !LOG4CXX_HAS_FWIDE
	return false;
#else
	return fwide(stdout, 0) > 0;
#endif
}",1,1,main\cpp\systemoutwriter.cpp,SystemOutWriter.isWide,,false,54,63,isWide,,,8,bool SystemOutWriter.isWide ()
56116,METHOD,main\cpp\systemoutwriter.cpp:<global>,TYPE_DECL,"void SystemOutWriter::write(const LogString& str)
{
#if LOG4CXX_WCHAR_T_API

	if (isWide())
	{
		LOG4CXX_ENCODE_WCHAR(msg, str);
		fputws(msg.c_str(), stdout);
		return;
	}

#endif
	LOG4CXX_ENCODE_CHAR(msg, str);
	fputs(msg.c_str(), stdout);
}",1,1,main\cpp\systemoutwriter.cpp,SystemOutWriter.write,,false,65,79,write,,,9,void SystemOutWriter.write (LogString)
56130,METHOD,main\cpp\systemoutwriter.cpp:<global>,TYPE_DECL,"void SystemOutWriter::flush()
{
	fflush(stdout);
}",1,1,main\cpp\systemoutwriter.cpp,SystemOutWriter.flush,,false,81,84,flush,,,10,void SystemOutWriter.flush ()
56156,METHOD,main\cpp\telnetappender.cpp:<global>,TYPE_DECL,<global>,1,5,main\cpp\telnetappender.cpp,main\cpp\telnetappender.cpp:<global>,,false,1,320,<global>,,,1,
56161,METHOD,TelnetAppenderPriv,TYPE_DECL,"TelnetAppenderPriv( int port, int maxConnections ) : AppenderSkeletonPrivate(),
		port(port),
		connections(maxConnections),
		encoding(LOG4CXX_STR(""UTF-8"")),
		encoder(CharsetEncoder::getUTF8Encoder()),
		sh(),
		activeConnections(0) {}",2,25,main\cpp\telnetappender.cpp,TelnetAppenderPriv.TelnetAppenderPriv,,false,36,42,TelnetAppenderPriv,,,1,"ANY TelnetAppenderPriv.TelnetAppenderPriv (int,int)"
56182,METHOD,main\cpp\telnetappender.cpp:<global>,TYPE_DECL,"TelnetAppender::TelnetAppender()
	: AppenderSkeleton (std::make_unique<TelnetAppenderPriv>(DEFAULT_PORT, MAX_CONNECTIONS))
{
}",1,1,main\cpp\telnetappender.cpp,TelnetAppender.TelnetAppender,,false,61,64,TelnetAppender,,,8,ANY TelnetAppender.TelnetAppender ()
56186,METHOD,main\cpp\telnetappender.cpp:<global>,TYPE_DECL,"TelnetAppender::~TelnetAppender()
{
	finalize();
}",1,1,main\cpp\telnetappender.cpp,TelnetAppender.~TelnetAppender,,false,66,69,~TelnetAppender,,,9,ANY TelnetAppender.~TelnetAppender ()
56191,METHOD,main\cpp\telnetappender.cpp:<global>,TYPE_DECL,"void TelnetAppender::activateOptions(Pool& /* p */)
{
	if (_priv->serverSocket == NULL)
	{
		_priv->serverSocket = ServerSocket::create(_priv->port);
		_priv->serverSocket->setSoTimeout(1000);
	}

	_priv->sh = ThreadUtility::instance()->createThread( LOG4CXX_STR(""TelnetAppender""), &TelnetAppender::acceptConnections, this );
}",1,5,main\cpp\telnetappender.cpp,TelnetAppender.activateOptions,,false,71,80,activateOptions,,,10,void TelnetAppender.activateOptions (Pool)
56274,METHOD,main\cpp\telnetappender.cpp:<global>,TYPE_DECL,"void TelnetAppender::setOption(const LogString& option,
	const LogString& value)
{
	if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""PORT""), LOG4CXX_STR(""port"")))
	{
		setPort(OptionConverter::toInt(value, DEFAULT_PORT));
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""ENCODING""), LOG4CXX_STR(""encoding"")))
	{
		setEncoding(value);
	}
	else
	{
		AppenderSkeleton::setOption(option, value);
	}
}",1,1,main\cpp\telnetappender.cpp,TelnetAppender.setOption,,false,82,97,setOption,,,11,"void TelnetAppender.setOption (LogString,LogString)"
56321,METHOD,main\cpp\telnetappender.cpp:<global>,TYPE_DECL,"LogString TelnetAppender::getEncoding() const
{
	std::lock_guard<std::recursive_mutex> lock(_priv->mutex);
	return _priv->encoding;
}",1,44,main\cpp\telnetappender.cpp,TelnetAppender.getEncoding,,false,99,103,getEncoding,,,12,LogString TelnetAppender.getEncoding ()
56355,METHOD,main\cpp\telnetappender.cpp:<global>,TYPE_DECL,"void TelnetAppender::setEncoding(const LogString& value)
{
	std::lock_guard<std::recursive_mutex> lock(_priv->mutex);
	_priv->encoder = CharsetEncoder::getEncoder(value);
	_priv->encoding = value;
}",1,44,main\cpp\telnetappender.cpp,TelnetAppender.setEncoding,,false,105,110,setEncoding,,,13,void TelnetAppender.setEncoding (LogString)
56407,METHOD,main\cpp\telnetappender.cpp:<global>,TYPE_DECL,"void TelnetAppender::close()
{
	std::lock_guard<std::recursive_mutex> lock(_priv->mutex);

	if (_priv->closed)
	{
		return;
	}

	_priv->closed = true;

	SocketPtr nullSocket;

	for (ConnectionList::iterator iter = _priv->connections.begin();
		iter != _priv->connections.end();
		iter++)
	{
		if (*iter != 0)
		{
			(*iter)->close();
			*iter = nullSocket;
		}
	}

	if (_priv->serverSocket != NULL)
	{
		try
		{
			_priv->serverSocket->close();
		}
		catch (Exception&)
		{
		}
	}

	if ( _priv->sh.joinable() )
	{
		_priv->sh.join();
	}

	_priv->activeConnections = 0;
}",1,44,main\cpp\telnetappender.cpp,TelnetAppender.close,,false,113,154,close,,,14,void TelnetAppender.close ()
56577,METHOD,main\cpp\telnetappender.cpp:<global>,TYPE_DECL,"void TelnetAppender::write(ByteBuffer& buf)
{
	for (ConnectionList::iterator iter = _priv->connections.begin();
		iter != _priv->connections.end();
		iter++)
	{
		if (*iter != 0)
		{
			try
			{
				ByteBuffer b(buf.current(), buf.remaining());
				(*iter)->write(b);
			}
			catch (Exception&)
			{
				// The client has closed the connection, remove it from our list:
				*iter = 0;
				_priv->activeConnections--;
			}
		}
	}
}",1,38,main\cpp\telnetappender.cpp,TelnetAppender.write,,false,157,178,write,,,15,void TelnetAppender.write (ByteBuffer)
56658,METHOD,main\cpp\telnetappender.cpp:<global>,TYPE_DECL,"void TelnetAppender::writeStatus(const SocketPtr& socket, const LogString& msg, Pool& p)
{
	size_t bytesSize = msg.size() * 2;
	char* bytes = p.pstralloc(bytesSize);

	LogString::const_iterator msgIter(msg.begin());
	ByteBuffer buf(bytes, bytesSize);

	while (msgIter != msg.end())
	{
		_priv->encoder->encode(msg, msgIter, buf);
		buf.flip();
		socket->write(buf);
		buf.clear();
	}
}",1,2,main\cpp\telnetappender.cpp,TelnetAppender.writeStatus,,false,180,195,writeStatus,,,16,"void TelnetAppender.writeStatus (SocketPtr,LogString,Pool)"
56729,METHOD,main\cpp\telnetappender.cpp:<global>,TYPE_DECL,"void TelnetAppender::append(const spi::LoggingEventPtr& event, Pool& p)
{
	size_t count = _priv->activeConnections;

	if (count > 0)
	{
		LogString msg;
		_priv->layout->format(msg, event, _priv->pool);
		msg.append(LOG4CXX_STR(""\r\n""));
		size_t bytesSize = msg.size() * 2;
		char* bytes = p.pstralloc(bytesSize);

		LogString::const_iterator msgIter(msg.begin());
		ByteBuffer buf(bytes, bytesSize);

		std::lock_guard<std::recursive_mutex> lock(_priv->mutex);

		while (msgIter != msg.end())
		{
			log4cxx_status_t stat = _priv->encoder->encode(msg, msgIter, buf);
			buf.flip();
			write(buf);
			buf.clear();

			if (CharsetEncoder::isError(stat))
			{
				LogString unrepresented(1, 0x3F /* '?' */);
				LogString::const_iterator unrepresentedIter(unrepresented.begin());
				stat = _priv->encoder->encode(unrepresented, unrepresentedIter, buf);
				buf.flip();
				write(buf);
				buf.clear();
				msgIter++;
			}
		}
	}
}",1,16,main\cpp\telnetappender.cpp,TelnetAppender.append,,false,197,233,append,,,17,"void TelnetAppender.append (ANY,Pool)"
56913,METHOD,main\cpp\telnetappender.cpp:<global>,TYPE_DECL,"void TelnetAppender::acceptConnections()
{

	// main loop; is left when This->closed is != 0 after an accept()
	while (true)
	{
		try
		{
			SocketPtr newClient = _priv->serverSocket->accept();
			bool done = _priv->closed;

			if (done)
			{
				Pool p;
				writeStatus(newClient, LOG4CXX_STR(""Log closed.\r\n""), p);
				newClient->close();

				break;
			}

			size_t count = _priv->activeConnections;

			if (count >= _priv->connections.size())
			{
				Pool p;
				writeStatus(newClient, LOG4CXX_STR(""Too many connections.\r\n""), p);
				newClient->close();
			}
			else
			{
				//
				//   find unoccupied connection
				//
				std::lock_guard<std::recursive_mutex> lock(_priv->mutex);

				for (ConnectionList::iterator iter = _priv->connections.begin();
					iter != _priv->connections.end();
					iter++)
				{
					if (*iter == NULL)
					{
						*iter = newClient;
						_priv->activeConnections++;

						break;
					}
				}

				Pool p;
				LogString oss(LOG4CXX_STR(""TelnetAppender v...",1,25,main\cpp\telnetappender.cpp,TelnetAppender.acceptConnections,,false,235,310,acceptConnections,,,18,void TelnetAppender.acceptConnections ()
57146,METHOD,main\cpp\telnetappender.cpp:<global>,TYPE_DECL,"int TelnetAppender::getPort() const
{
	return _priv->port;
}",1,8,main\cpp\telnetappender.cpp,TelnetAppender.getPort,,false,312,315,getPort,,,19,int TelnetAppender.getPort ()
57161,METHOD,main\cpp\telnetappender.cpp:<global>,TYPE_DECL,"void TelnetAppender::setPort(int port1)
{
	_priv->port = port1;
}",1,1,main\cpp\telnetappender.cpp,TelnetAppender.setPort,,false,317,320,setPort,,,20,void TelnetAppender.setPort (int)
57189,METHOD,main\cpp\threadlocal.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\threadlocal.cpp,main\cpp\threadlocal.cpp:<global>,,false,1,74,<global>,,,1,
57191,METHOD,main\cpp\threadlocal.cpp:<global>,TYPE_DECL,"apr_threadkey_t* ThreadLocal::create(Pool& p)
{
	apr_threadkey_t* key = 0;
#if APR_HAS_THREADS
	apr_status_t stat = apr_threadkey_private_create(&key, 0, p.getAPRPool());

	if (stat != APR_SUCCESS)
	{
		throw RuntimeException(stat);
	}

#endif
	return key;
}",1,1,main\cpp\threadlocal.cpp,ThreadLocal.create,,false,25,38,create,,,1,apr_threadkey_t ThreadLocal.create (Pool)
57202,METHOD,main\cpp\threadlocal.cpp:<global>,TYPE_DECL,"ThreadLocal::ThreadLocal() : p(), key(create(p))
{
}",1,1,main\cpp\threadlocal.cpp,ThreadLocal.ThreadLocal,,false,40,42,ThreadLocal,,,2,ANY ThreadLocal.ThreadLocal ()
57206,METHOD,main\cpp\threadlocal.cpp:<global>,TYPE_DECL,"ThreadLocal::~ThreadLocal()
{
}",1,1,main\cpp\threadlocal.cpp,ThreadLocal.~ThreadLocal,,false,44,46,~ThreadLocal,,,3,ANY ThreadLocal.~ThreadLocal ()
57210,METHOD,main\cpp\threadlocal.cpp:<global>,TYPE_DECL,"void ThreadLocal::set(void* priv)
{
#if APR_HAS_THREADS
	apr_status_t stat = apr_threadkey_private_set(priv, key);

	if (stat != APR_SUCCESS)
	{
		throw RuntimeException(stat);
	}

#endif
}",1,1,main\cpp\threadlocal.cpp,ThreadLocal.set,,false,48,59,set,,,4,void ThreadLocal.set (void*)
57215,METHOD,main\cpp\threadlocal.cpp:<global>,TYPE_DECL,"void* ThreadLocal::get()
{
	void* retval = 0;
#if APR_HAS_THREADS
	apr_status_t stat = apr_threadkey_private_get(&retval, key);

	if (stat != APR_SUCCESS)
	{
		throw RuntimeException(stat);
	}

#endif
	return retval;
}",1,1,main\cpp\threadlocal.cpp,ThreadLocal.get,,false,61,74,get,,,5,void* ThreadLocal.get ()
57236,METHOD,main\cpp\threadpatternconverter.cpp:<global>,TYPE_DECL,<global>,1,2,main\cpp\threadpatternconverter.cpp,main\cpp\threadpatternconverter.cpp:<global>,,false,1,49,<global>,,,1,
57240,METHOD,main\cpp\threadpatternconverter.cpp:<global>,TYPE_DECL,"ThreadPatternConverter::ThreadPatternConverter() :
	LoggingEventPatternConverter(LOG4CXX_STR(""Thread""),
		LOG4CXX_STR(""Thread""))
{
}",1,1,main\cpp\threadpatternconverter.cpp,ThreadPatternConverter.ThreadPatternConverter,,false,30,34,ThreadPatternConverter,,,3,ANY ThreadPatternConverter.ThreadPatternConverter ()
57244,METHOD,main\cpp\threadpatternconverter.cpp:<global>,TYPE_DECL,"PatternConverterPtr ThreadPatternConverter::newInstance(
	const std::vector<LogString>& /* options */)
{
	static WideLife<PatternConverterPtr> def = std::make_shared<ThreadPatternConverter>();
	return def;
}",1,1,main\cpp\threadpatternconverter.cpp,ThreadPatternConverter.newInstance,,false,36,41,newInstance,,,4,PatternConverterPtr ThreadPatternConverter.newInstance (ANY)
57258,METHOD,main\cpp\threadpatternconverter.cpp:<global>,TYPE_DECL,"void ThreadPatternConverter::format(
	const LoggingEventPtr& event,
	LogString& toAppendTo,
	Pool& /* p */) const
{
	toAppendTo.append(event->getThreadName());
}",1,1,main\cpp\threadpatternconverter.cpp,ThreadPatternConverter.format,,false,43,49,format,,,5,"void ThreadPatternConverter.format (LoggingEventPtr,LogString,Pool)"
57286,METHOD,main\cpp\threadspecificdata.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\threadspecificdata.cpp,main\cpp\threadspecificdata.cpp:<global>,,false,1,178,<global>,,,1,
57291,METHOD,main\cpp\threadspecificdata.cpp:<global>,TYPE_DECL,"ThreadSpecificData::ThreadSpecificData()
	: m_priv(std::make_unique<ThreadSpecificDataPrivate>())
{
}",1,1,main\cpp\threadspecificdata.cpp,ThreadSpecificData.ThreadSpecificData,,false,35,38,ThreadSpecificData,,,2,ANY ThreadSpecificData.ThreadSpecificData ()
57295,METHOD,main\cpp\threadspecificdata.cpp:<global>,TYPE_DECL,"ThreadSpecificData::~ThreadSpecificData()
{
}",1,1,main\cpp\threadspecificdata.cpp,ThreadSpecificData.~ThreadSpecificData,,false,40,42,~ThreadSpecificData,,,3,ANY ThreadSpecificData.~ThreadSpecificData ()
57299,METHOD,main\cpp\threadspecificdata.cpp:<global>,TYPE_DECL,"LOG4CXX_NS::NDC::Stack& ThreadSpecificData::getStack()
{
	return m_priv->ndcStack;
}",1,1,main\cpp\threadspecificdata.cpp,ThreadSpecificData.getStack,,false,45,48,getStack,,,4,Stack ThreadSpecificData.getStack ()
57307,METHOD,main\cpp\threadspecificdata.cpp:<global>,TYPE_DECL,"LOG4CXX_NS::MDC::Map& ThreadSpecificData::getMap()
{
	return m_priv->mdcMap;
}",1,1,main\cpp\threadspecificdata.cpp,ThreadSpecificData.getMap,,false,50,53,getMap,,,5,Map ThreadSpecificData.getMap ()
57315,METHOD,main\cpp\threadspecificdata.cpp:<global>,TYPE_DECL,"ThreadSpecificData& ThreadSpecificData::getDataNoThreads()
{
	static WideLife<ThreadSpecificData> noThreadData;
	return noThreadData;
}",1,1,main\cpp\threadspecificdata.cpp,ThreadSpecificData.getDataNoThreads,,false,55,59,getDataNoThreads,,,6,ThreadSpecificData ThreadSpecificData.getDataNoThreads ()
57322,METHOD,main\cpp\threadspecificdata.cpp:<global>,TYPE_DECL,"ThreadSpecificData* ThreadSpecificData::getCurrentData()
{
#if APR_HAS_THREADS
	void* pData = NULL;
	apr_threadkey_private_get(&pData, APRInitializer::getTlsKey());
	return (ThreadSpecificData*) pData;
#elif LOG4CXX_HAS_THREAD_LOCAL
	thread_local ThreadSpecificData data;
	return &data;
#else
	return &getDataNoThreads();
#endif
}",1,1,main\cpp\threadspecificdata.cpp,ThreadSpecificData.getCurrentData,,false,61,73,getCurrentData,,,7,ThreadSpecificData ThreadSpecificData.getCurrentData ()
57329,METHOD,main\cpp\threadspecificdata.cpp:<global>,TYPE_DECL,"void ThreadSpecificData::recycle()
{
#if APR_HAS_THREADS

	if (m_priv->ndcStack.empty() && m_priv->mdcMap.empty())
	{
		void* pData = NULL;
		apr_status_t stat = apr_threadkey_private_get(&pData, APRInitializer::getTlsKey());

		if (stat == APR_SUCCESS && pData == this)
		{
			stat = apr_threadkey_private_set(0, APRInitializer::getTlsKey());

			if (stat == APR_SUCCESS)
			{
				delete this;
			}
		}
	}

#endif
}",1,1,main\cpp\threadspecificdata.cpp,ThreadSpecificData.recycle,,false,75,96,recycle,,,8,void ThreadSpecificData.recycle ()
57333,METHOD,main\cpp\threadspecificdata.cpp:<global>,TYPE_DECL,"void ThreadSpecificData::put(const LogString& key, const LogString& val)
{
	ThreadSpecificData* data = getCurrentData();

	if (data == 0)
	{
		data = createCurrentData();
	}

	if (data != 0)
	{
		data->getMap()[key] = val;
	}
}",1,1,main\cpp\threadspecificdata.cpp,ThreadSpecificData.put,,false,98,111,put,,,9,"void ThreadSpecificData.put (LogString,LogString)"
57364,METHOD,main\cpp\threadspecificdata.cpp:<global>,TYPE_DECL,"void ThreadSpecificData::push(const LogString& val)
{
	ThreadSpecificData* data = getCurrentData();

	if (data == 0)
	{
		data = createCurrentData();
	}

	if (data != 0)
	{
		NDC::Stack& stack = data->getStack();

		if (stack.empty())
		{
			stack.push(NDC::DiagnosticContext(val, val));
		}
		else
		{
			LogString fullMessage(stack.top().second);
			fullMessage.append(1, (logchar) 0x20);
			fullMessage.append(val);
			stack.push(NDC::DiagnosticContext(val, fullMessage));
		}
	}
}",1,1,main\cpp\threadspecificdata.cpp,ThreadSpecificData.push,,false,116,141,push,,,10,void ThreadSpecificData.push (LogString)
57442,METHOD,main\cpp\threadspecificdata.cpp:<global>,TYPE_DECL,"void ThreadSpecificData::inherit(const NDC::Stack& src)
{
	ThreadSpecificData* data = getCurrentData();

	if (data == 0)
	{
		data = createCurrentData();
	}

	if (data != 0)
	{
		data->getStack() = src;
	}
}",1,1,main\cpp\threadspecificdata.cpp,ThreadSpecificData.inherit,,false,143,156,inherit,,,11,void ThreadSpecificData.inherit (ANY)
57470,METHOD,main\cpp\threadspecificdata.cpp:<global>,TYPE_DECL,"ThreadSpecificData* ThreadSpecificData::createCurrentData()
{
#if APR_HAS_THREADS
	ThreadSpecificData* newData = new ThreadSpecificData();
	apr_status_t stat = apr_threadkey_private_set(newData, APRInitializer::getTlsKey());

	if (stat != APR_SUCCESS)
	{
		delete newData;
		newData = NULL;
	}

	return newData;
#elif LOG4CXX_HAS_THREAD_LOCAL
	return getCurrentData();
#else
	return 0;
#endif
}",1,1,main\cpp\threadspecificdata.cpp,ThreadSpecificData.createCurrentData,,false,160,178,createCurrentData,,,12,ThreadSpecificData ThreadSpecificData.createCurrentData ()
57487,METHOD,main\cpp\threadusernamepatternconverter.cpp:<global>,TYPE_DECL,<global>,1,2,main\cpp\threadusernamepatternconverter.cpp,main\cpp\threadusernamepatternconverter.cpp:<global>,,false,1,49,<global>,,,1,
57491,METHOD,main\cpp\threadusernamepatternconverter.cpp:<global>,TYPE_DECL,"ThreadUsernamePatternConverter::ThreadUsernamePatternConverter() :
	LoggingEventPatternConverter(LOG4CXX_STR(""Thread Name""),
		LOG4CXX_STR(""Thread Name""))
{
}",1,1,main\cpp\threadusernamepatternconverter.cpp,ThreadUsernamePatternConverter.ThreadUsernamePatternConverter,,false,30,34,ThreadUsernamePatternConverter,,,3,ANY ThreadUsernamePatternConverter.ThreadUsernamePatternConverter ()
57495,METHOD,main\cpp\threadusernamepatternconverter.cpp:<global>,TYPE_DECL,"PatternConverterPtr ThreadUsernamePatternConverter::newInstance(
	const std::vector<LogString>& /* options */)
{
	static WideLife<PatternConverterPtr> def = std::make_shared<ThreadUsernamePatternConverter>();
	return def;
}",1,1,main\cpp\threadusernamepatternconverter.cpp,ThreadUsernamePatternConverter.newInstance,,false,36,41,newInstance,,,4,PatternConverterPtr ThreadUsernamePatternConverter.newInstance (ANY)
57509,METHOD,main\cpp\threadusernamepatternconverter.cpp:<global>,TYPE_DECL,"void ThreadUsernamePatternConverter::format(
	const LoggingEventPtr& event,
	LogString& toAppendTo,
	Pool& /* p */) const
{
	toAppendTo.append(event->getThreadUserName());
}",1,1,main\cpp\threadusernamepatternconverter.cpp,ThreadUsernamePatternConverter.format,,false,43,49,format,,,5,"void ThreadUsernamePatternConverter.format (LoggingEventPtr,LogString,Pool)"
57543,METHOD,main\cpp\threadutility.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\threadutility.cpp,main\cpp\threadutility.cpp:<global>,,false,1,202,<global>,,,1,
57548,METHOD,LOG4CXX_NS.helpers.priv_data,TYPE_DECL,"priv_data()
	{
		start_pre = nullptr;
		started = nullptr;
		start_post = nullptr;
	}",2,2,main\cpp\threadutility.cpp,LOG4CXX_NS.helpers.priv_data.priv_data,,false,41,46,priv_data,,,1,ANY LOG4CXX_NS.helpers.priv_data.priv_data ()
57564,METHOD,main\cpp\threadutility.cpp:<global>,TYPE_DECL,"ThreadUtility::ThreadUtility() :
	m_priv( new priv_data() )
{
	// Block signals by default.
	configureFuncs( std::bind( &ThreadUtility::preThreadBlockSignals, this ),
		nullptr,
		std::bind( &ThreadUtility::postThreadUnblockSignals, this ) );
}",1,1,main\cpp\threadutility.cpp,LOG4CXX_NS.helpers.ThreadUtility.ThreadUtility,,false,58,65,ThreadUtility,,,2,ANY LOG4CXX_NS.helpers.ThreadUtility.ThreadUtility ()
57588,METHOD,main\cpp\threadutility.cpp:<global>,TYPE_DECL,ThreadUtility::~ThreadUtility() {},1,34,main\cpp\threadutility.cpp,LOG4CXX_NS.helpers.ThreadUtility.~ThreadUtility,,false,67,67,~ThreadUtility,,,3,ANY LOG4CXX_NS.helpers.ThreadUtility.~ThreadUtility ()
57592,METHOD,main\cpp\threadutility.cpp:<global>,TYPE_DECL,"ThreadUtility* ThreadUtility::instance()
{
	static WideLife<ThreadUtility> instance;
	return &instance.value();
}",1,1,main\cpp\threadutility.cpp,LOG4CXX_NS.helpers.ThreadUtility.instance,,false,69,73,instance,,,4,ThreadUtility LOG4CXX_NS.helpers.ThreadUtility.instance ()
57603,METHOD,main\cpp\threadutility.cpp:<global>,TYPE_DECL,"void ThreadUtility::configure( ThreadConfigurationType type )
{
	auto utility = instance();

	if ( type == ThreadConfigurationType::NoConfiguration )
	{
		utility->configureFuncs( nullptr, nullptr, nullptr );
	}
	else if ( type == ThreadConfigurationType::NameThreadOnly )
	{
		utility->configureFuncs( nullptr,
			std::bind( &ThreadUtility::threadStartedNameThread, utility,
				std::placeholders::_1,
				std::placeholders::_2,
				std::placeholders::_3 ),
			nullptr );
	}
	else if ( type == ThreadConfigurationType::BlockSignalsOnly )
	{
		utility->configureFuncs( std::bind( &ThreadUtility::preThreadBlockSignals, utility ),
			nullptr,
			std::bind( &ThreadUtility::postThreadUnblockSignals, utility ) );
	}
	else if ( type == ThreadConfigurationType::BlockSignalsAndNameThread )
	{
		utility->configureFuncs( std::bind( &ThreadUtility::preThreadBlockSignals, utility ),
			std::bind( &ThreadUtility::threadStartedNameThread, utility,
				std::placeholders::_1,
				std::placeholders::_2,
		...",1,1,main\cpp\threadutility.cpp,LOG4CXX_NS.helpers.ThreadUtility.configure,,false,75,107,configure,,,5,void LOG4CXX_NS.helpers.ThreadUtility.configure (ThreadConfigurationType)
57752,METHOD,main\cpp\threadutility.cpp:<global>,TYPE_DECL,"void ThreadUtility::configureFuncs( ThreadStartPre pre_start,
	ThreadStarted started,
	ThreadStartPost post_start )
{
	m_priv->start_pre = pre_start;
	m_priv->started = started;
	m_priv->start_post = post_start;
}",1,1,main\cpp\threadutility.cpp,LOG4CXX_NS.helpers.ThreadUtility.configureFuncs,,false,109,116,configureFuncs,,,6,"void LOG4CXX_NS.helpers.ThreadUtility.configureFuncs (ThreadStartPre,ThreadStarted,ThreadStartPost)"
57774,METHOD,main\cpp\threadutility.cpp:<global>,TYPE_DECL,"void ThreadUtility::preThreadBlockSignals()
{
#if LOG4CXX_HAS_PTHREAD_SIGMASK
	sigset_t set;
	sigfillset(&set);

	if ( pthread_sigmask(SIG_SETMASK, &set, &old_mask) < 0 )
	{
		LOGLOG_ERROR( LOG4CXX_STR(""Unable to set thread sigmask"") );
		sigmask_valid = false;
	}
	else
	{
		sigmask_valid = true;
	}

#endif /* LOG4CXX_HAS_PTHREAD_SIGMASK */
}",1,1,main\cpp\threadutility.cpp,LOG4CXX_NS.helpers.ThreadUtility.preThreadBlockSignals,,false,118,135,preThreadBlockSignals,,,7,void LOG4CXX_NS.helpers.ThreadUtility.preThreadBlockSignals ()
57778,METHOD,main\cpp\threadutility.cpp:<global>,TYPE_DECL,"void ThreadUtility::threadStartedNameThread(LogString threadName,
	std::thread::id /*threadId*/,
	std::thread::native_handle_type nativeHandle)
{
#if LOG4CXX_HAS_PTHREAD_SETNAME
	LOG4CXX_ENCODE_CHAR(sthreadName, threadName);
	if (pthread_setname_np(static_cast<pthread_t>(nativeHandle), sthreadName.c_str()) < 0) {
		LOGLOG_ERROR(LOG4CXX_STR(""unable to set thread name""));
	}
#elif WIN32
	typedef HRESULT (WINAPI *TSetThreadDescription)(HANDLE, PCWSTR);
	static struct initialiser
	{
		HMODULE hKernelBase;
		TSetThreadDescription SetThreadDescription;
		initialiser()
			: hKernelBase(GetModuleHandleA(""KernelBase.dll""))
			, SetThreadDescription(nullptr)
		{
			if (hKernelBase)
				SetThreadDescription = reinterpret_cast<TSetThreadDescription>(GetProcAddress(hKernelBase, ""SetThreadDescription""));
		}
	} win32Func;
	if (win32Func.SetThreadDescription)
	{
		LOG4CXX_ENCODE_WCHAR(wthreadName, threadName);
		if(FAILED(win32Func.SetThreadDescription(static_cast<HANDLE>(nativeHandle), wthreadNam...",1,1,main\cpp\threadutility.cpp,LOG4CXX_NS.helpers.ThreadUtility.threadStartedNameThread,,false,137,167,threadStartedNameThread,,,8,"void LOG4CXX_NS.helpers.ThreadUtility.threadStartedNameThread (LogString,ANY,ANY)"
57785,METHOD,main\cpp\threadutility.cpp:<global>,TYPE_DECL,"void ThreadUtility::postThreadUnblockSignals()
{
#if LOG4CXX_HAS_PTHREAD_SIGMASK

	// Only restore the signal mask if we were able to set it in the first place.
	if ( sigmask_valid )
	{
		if ( pthread_sigmask(SIG_SETMASK, &old_mask, nullptr) < 0 )
		{
			LOGLOG_ERROR( LOG4CXX_STR(""Unable to set thread sigmask"") );
		}
	}

#endif /* LOG4CXX_HAS_PTHREAD_SIGMASK */
}",1,1,main\cpp\threadutility.cpp,LOG4CXX_NS.helpers.ThreadUtility.postThreadUnblockSignals,,false,169,183,postThreadUnblockSignals,,,9,void LOG4CXX_NS.helpers.ThreadUtility.postThreadUnblockSignals ()
57789,METHOD,main\cpp\threadutility.cpp:<global>,TYPE_DECL,"ThreadStartPre ThreadUtility::preStartFunction()
{
	return m_priv->start_pre;
}",1,1,main\cpp\threadutility.cpp,LOG4CXX_NS.helpers.ThreadUtility.preStartFunction,,false,186,189,preStartFunction,,,10,ThreadStartPre LOG4CXX_NS.helpers.ThreadUtility.preStartFunction ()
57797,METHOD,main\cpp\threadutility.cpp:<global>,TYPE_DECL,"ThreadStarted ThreadUtility::threadStartedFunction()
{
	return m_priv->started;
}",1,1,main\cpp\threadutility.cpp,LOG4CXX_NS.helpers.ThreadUtility.threadStartedFunction,,false,191,194,threadStartedFunction,,,11,ThreadStarted LOG4CXX_NS.helpers.ThreadUtility.threadStartedFunction ()
57805,METHOD,main\cpp\threadutility.cpp:<global>,TYPE_DECL,"ThreadStartPost ThreadUtility::postStartFunction()
{
	return m_priv->start_post;
}",1,1,main\cpp\threadutility.cpp,LOG4CXX_NS.helpers.ThreadUtility.postStartFunction,,false,196,199,postStartFunction,,,12,ThreadStartPost LOG4CXX_NS.helpers.ThreadUtility.postStartFunction ()
57828,METHOD,main\cpp\throwableinformationpatternconverter.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\throwableinformationpatternconverter.cpp,main\cpp\throwableinformationpatternconverter.cpp:<global>,,false,1,81,<global>,,,1,
57831,METHOD,ThrowableInformationPatternConverterPrivate,TYPE_DECL,"ThrowableInformationPatternConverterPrivate( const LogString& name, const LogString& style, bool shortReport ) :
		PatternConverterPrivate( name, style ),
		shortReport(shortReport) {}",2,29,main\cpp\throwableinformationpatternconverter.cpp,ThrowableInformationPatternConverterPrivate.ThrowableInformationPatternConverterPrivate,,false,33,35,ThrowableInformationPatternConverterPrivate,,,1,"ANY ThrowableInformationPatternConverterPrivate.ThrowableInformationPatternConverterPrivate (LogString,LogString,bool)"
57841,METHOD,main\cpp\throwableinformationpatternconverter.cpp:<global>,TYPE_DECL,"ThrowableInformationPatternConverter::ThrowableInformationPatternConverter(bool shortReport1) :
	LoggingEventPatternConverter(
		std::make_unique<ThrowableInformationPatternConverterPrivate>(
			LOG4CXX_STR(""Throwable""),
			LOG4CXX_STR(""throwable""),
			shortReport1))
{
}",1,1,main\cpp\throwableinformationpatternconverter.cpp,ThrowableInformationPatternConverter.ThrowableInformationPatternConverter,,false,45,52,ThrowableInformationPatternConverter,,,4,ANY ThrowableInformationPatternConverter.ThrowableInformationPatternConverter (bool)
57846,METHOD,main\cpp\throwableinformationpatternconverter.cpp:<global>,TYPE_DECL,"PatternConverterPtr ThrowableInformationPatternConverter::newInstance(
	const std::vector<LogString>& options)
{
	if (options.size() > 0 && options[0].compare(LOG4CXX_STR(""short"")) == 0)
	{
		static WideLife<PatternConverterPtr> shortConverter = std::make_shared<ThrowableInformationPatternConverter>(true);
		return shortConverter;
	}

	static WideLife<PatternConverterPtr> converter = std::make_shared<ThrowableInformationPatternConverter>(false);
	return converter;
}",1,1,main\cpp\throwableinformationpatternconverter.cpp,ThrowableInformationPatternConverter.newInstance,,false,54,65,newInstance,,,5,PatternConverterPtr ThrowableInformationPatternConverter.newInstance (ANY)
57894,METHOD,main\cpp\throwableinformationpatternconverter.cpp:<global>,TYPE_DECL,"void ThrowableInformationPatternConverter::format(
	const LoggingEventPtr& /* event */,
	LogString& /* toAppendTo */,
	Pool& /* p */) const
{
}",1,1,main\cpp\throwableinformationpatternconverter.cpp,ThrowableInformationPatternConverter.format,,false,67,72,format,,,6,"void ThrowableInformationPatternConverter.format (LoggingEventPtr,LogString,Pool)"
57901,METHOD,main\cpp\throwableinformationpatternconverter.cpp:<global>,TYPE_DECL,"bool ThrowableInformationPatternConverter::handlesThrowable() const
{
	return true;
}",1,1,main\cpp\throwableinformationpatternconverter.cpp,ThrowableInformationPatternConverter.handlesThrowable,,false,78,81,handlesThrowable,,,7,bool ThrowableInformationPatternConverter.handlesThrowable ()
57942,METHOD,main\cpp\timebasedrollingpolicy.cpp:<global>,TYPE_DECL,<global>,1,31,main\cpp\timebasedrollingpolicy.cpp,main\cpp\timebasedrollingpolicy.cpp:<global>,,false,1,548,<global>,,,1,
57947,METHOD,TimeBasedRollingPolicyPrivate,TYPE_DECL,"TimeBasedRollingPolicyPrivate() :
		_mmap(nullptr),
		_file_map(nullptr),
		_lock_file(nullptr),
		bAlreadyInitialized(false),
		bRefreshCurFile(false){}",2,26,main\cpp\timebasedrollingpolicy.cpp,TimeBasedRollingPolicyPrivate.TimeBasedRollingPolicyPrivate,,false,44,49,TimeBasedRollingPolicyPrivate,,,1,ANY TimeBasedRollingPolicyPrivate.TimeBasedRollingPolicyPrivate ()
57951,METHOD,TimeBasedRollingPolicyPrivate,TYPE_DECL,TimeBasedRollingPolicyPrivate(){},2,34,main\cpp\timebasedrollingpolicy.cpp,TimeBasedRollingPolicyPrivate.TimeBasedRollingPolicyPrivate,,false,51,51,TimeBasedRollingPolicyPrivate,,,2,ANY TimeBasedRollingPolicyPrivate.TimeBasedRollingPolicyPrivate ()
57968,METHOD,<empty>,<empty>,<empty>,1,,main\cpp\timebasedrollingpolicy.cpp,TimeBasedRollingPolicyPrivate:<clinit>,,false,42,,<clinit>,,,16,
57978,METHOD,main\cpp\timebasedrollingpolicy.cpp:<global>,TYPE_DECL,"int TimeBasedRollingPolicy::createMMapFile(const std::string&, LOG4CXX_NS::helpers::Pool&) {
	return 0;
}",1,1,main\cpp\timebasedrollingpolicy.cpp,TimeBasedRollingPolicy.createMMapFile,,false,248,250,createMMapFile,,,4,"int TimeBasedRollingPolicy.createMMapFile (ANY,ANY)"
57986,METHOD,main\cpp\timebasedrollingpolicy.cpp:<global>,TYPE_DECL,"bool TimeBasedRollingPolicy::isMapFileEmpty(LOG4CXX_NS::helpers::Pool&){
	return true;
}",1,1,main\cpp\timebasedrollingpolicy.cpp,TimeBasedRollingPolicy.isMapFileEmpty,,false,252,254,isMapFileEmpty,,,5,bool TimeBasedRollingPolicy.isMapFileEmpty (ANY)
57993,METHOD,main\cpp\timebasedrollingpolicy.cpp:<global>,TYPE_DECL,"void TimeBasedRollingPolicy::initMMapFile(const LogString&, LOG4CXX_NS::helpers::Pool&){}",1,89,main\cpp\timebasedrollingpolicy.cpp,TimeBasedRollingPolicy.initMMapFile,,false,256,256,initMMapFile,,,6,"void TimeBasedRollingPolicy.initMMapFile (LogString,ANY)"
57999,METHOD,main\cpp\timebasedrollingpolicy.cpp:<global>,TYPE_DECL,"int TimeBasedRollingPolicy::lockMMapFile(int){
	return 0;
}",1,1,main\cpp\timebasedrollingpolicy.cpp,TimeBasedRollingPolicy.lockMMapFile,,false,258,260,lockMMapFile,,,7,int TimeBasedRollingPolicy.lockMMapFile (int)
58006,METHOD,main\cpp\timebasedrollingpolicy.cpp:<global>,TYPE_DECL,"int TimeBasedRollingPolicy::unLockMMapFile(){
	return 0;
}",1,1,main\cpp\timebasedrollingpolicy.cpp,TimeBasedRollingPolicy.unLockMMapFile,,false,262,264,unLockMMapFile,,,8,int TimeBasedRollingPolicy.unLockMMapFile ()
58012,METHOD,main\cpp\timebasedrollingpolicy.cpp:<global>,TYPE_DECL,"const std::string TimeBasedRollingPolicy::createFile(const std::string&, const std::string&, LOG4CXX_NS::helpers::Pool&){
	return """";
}",1,1,main\cpp\timebasedrollingpolicy.cpp,TimeBasedRollingPolicy.createFile,,false,266,268,createFile,,,9,"string TimeBasedRollingPolicy.createFile (ANY,ANY,ANY)"
58021,METHOD,main\cpp\timebasedrollingpolicy.cpp:<global>,TYPE_DECL,"TimeBasedRollingPolicy::TimeBasedRollingPolicy() :
	m_priv(std::make_unique<TimeBasedRollingPolicyPrivate>())
{
}",1,1,main\cpp\timebasedrollingpolicy.cpp,TimeBasedRollingPolicy.TimeBasedRollingPolicy,,false,271,274,TimeBasedRollingPolicy,,,10,ANY TimeBasedRollingPolicy.TimeBasedRollingPolicy ()
58025,METHOD,main\cpp\timebasedrollingpolicy.cpp:<global>,TYPE_DECL,TimeBasedRollingPolicy::~TimeBasedRollingPolicy(){},1,51,main\cpp\timebasedrollingpolicy.cpp,TimeBasedRollingPolicy.~TimeBasedRollingPolicy,,false,276,276,~TimeBasedRollingPolicy,,,11,ANY TimeBasedRollingPolicy.~TimeBasedRollingPolicy ()
58029,METHOD,main\cpp\timebasedrollingpolicy.cpp:<global>,TYPE_DECL,"void TimeBasedRollingPolicy::activateOptions(LOG4CXX_NS::helpers::Pool& pool)
{
	// find out period from the filename pattern
	if (getFileNamePattern().length() > 0)
	{
		parseFileNamePattern();
	}
	else
	{
		LogLog::warn(
			LOG4CXX_STR(""The FileNamePattern option must be set before using TimeBasedRollingPolicy. ""));
		throw IllegalStateException();
	}

	PatternConverterPtr dtc(getDatePatternConverter());

	if (dtc == NULL)
	{
		throw IllegalStateException();
	}

	LogString buf;
	ObjectPtr obj = std::make_shared<Date>();
	formatFileName(obj, buf, pool);
	m_priv->lastFileName = buf;

	if( m_priv->multiprocess ){
#if LOG4CXX_HAS_MULTIPROCESS_ROLLING_FILE_APPENDER
		if (getPatternConverterList().size())
		{
			(*(getPatternConverterList().begin()))->format(obj, m_priv->_fileNamePattern, pool);
		}
		else
		{
			m_priv->_fileNamePattern = m_priv->lastFileName;
		}

		if (!m_priv->_lock_file)
		{
			const std::string lockname = createFile(std::string(m_priv->_fileNamePattern), LOCK_FILE...",1,1,main\cpp\timebasedrollingpolicy.cpp,TimeBasedRollingPolicy.activateOptions,,false,278,343,activateOptions,,,12,void TimeBasedRollingPolicy.activateOptions (ANY)
58163,METHOD,main\cpp\timebasedrollingpolicy.cpp:<global>,TYPE_DECL,"LOG4CXX_NS::pattern::PatternMap TimeBasedRollingPolicy::getFormatSpecifiers() const
{
	PatternMap specs;
	RULES_PUT(""d"", FileDatePatternConverter);
	RULES_PUT(""date"", FileDatePatternConverter);
	return specs;
}",1,1,main\cpp\timebasedrollingpolicy.cpp,TimeBasedRollingPolicy.getFormatSpecifiers,,false,349,355,getFormatSpecifiers,,,13,PatternMap TimeBasedRollingPolicy.getFormatSpecifiers ()
58208,METHOD,main\cpp\timebasedrollingpolicy.cpp:<global>,TYPE_DECL,"RolloverDescriptionPtr TimeBasedRollingPolicy::initialize(
	const   LogString&  currentActiveFile,
	const   bool        append,
	Pool&       pool)
{
	Date now;
	log4cxx_time_t n = now.getTime();
	m_priv->nextCheck = now.getNextSecond();

	File currentFile(currentActiveFile);

	LogString buf;
	ObjectPtr obj = std::make_shared<Date>(currentFile.exists(pool) ? currentFile.lastModified(pool) : n);
	formatFileName(obj, buf, pool);
	m_priv->lastFileName = buf;

	ActionPtr noAction;

	if (currentActiveFile.length() > 0)
	{
		return std::make_shared<RolloverDescription>(
					currentActiveFile, append, noAction, noAction);
	}
	else
	{
		m_priv->bRefreshCurFile = true;
		return std::make_shared<RolloverDescription>(
					m_priv->lastFileName.substr(0, m_priv->lastFileName.length() - m_priv->suffixLength), append,
					noAction, noAction);
	}
}",1,1,main\cpp\timebasedrollingpolicy.cpp,TimeBasedRollingPolicy.initialize,,false,360,390,initialize,,,14,"RolloverDescriptionPtr TimeBasedRollingPolicy.initialize (LogString,bool,Pool)"
58323,METHOD,main\cpp\timebasedrollingpolicy.cpp:<global>,TYPE_DECL,"RolloverDescriptionPtr TimeBasedRollingPolicy::rollover(
	const   LogString&  currentActiveFile,
	const   bool        append,
	Pool&       pool)
{
	Date now;
	log4cxx_time_t n = now.getTime();
	m_priv->nextCheck = now.getNextSecond();

	LogString buf;
	ObjectPtr obj = std::make_shared<Date>(n);
	formatFileName(obj, buf, pool);

	LogString newFileName(buf);

	if( m_priv->multiprocess ){
#if LOG4CXX_HAS_MULTIPROCESS_ROLLING_FILE_APPENDER
		m_priv->bAlreadyInitialized = true;

		if (m_priv->_mmap && !isMapFileEmpty(m_priv->_mmapPool))
		{
			lockMMapFile(APR_FLOCK_SHARED);
			LogString mapLastFile((char*)m_priv->_mmap->mm);
			m_priv->lastFileName = mapLastFile;
			unLockMMapFile();
		}
		else
		{
			m_priv->_mmap = NULL;
			initMMapFile(m_priv->lastFileName, m_priv->_mmapPool);
		}
#endif
	}

	//
	//  if file names haven't changed, no rollover
	//
	if (newFileName == m_priv->lastFileName)
	{
		RolloverDescriptionPtr desc;
		return desc;
	}

	ActionPtr renameAction;
	ActionPtr compress...",1,1,main\cpp\timebasedrollingpolicy.cpp,TimeBasedRollingPolicy.rollover,,false,392,495,rollover,,,15,"RolloverDescriptionPtr TimeBasedRollingPolicy.rollover (LogString,bool,Pool)"
58571,METHOD,main\cpp\timebasedrollingpolicy.cpp:<global>,TYPE_DECL,"bool TimeBasedRollingPolicy::isTriggeringEvent(
	Appender* appender,
	const LOG4CXX_NS::spi::LoggingEventPtr& /* event */,
	const LogString&  filename,
	size_t /* fileLength */)
{
	if( m_priv->multiprocess ){
#if LOG4CXX_HAS_MULTIPROCESS_ROLLING_FILE_APPENDER
		if (m_priv->bRefreshCurFile && m_priv->_mmap && !isMapFileEmpty(m_priv->_mmapPool))
		{
			lockMMapFile(APR_FLOCK_SHARED);
			LogString mapCurrent((char*)m_priv->_mmap->mm);
			unLockMMapFile();
			LogString mapCurrentBase(mapCurrent.substr(0, mapCurrent.length() - m_priv->suffixLength));

			if (!mapCurrentBase.empty() && mapCurrentBase != filename)
			{
				const FileAppender* fappend = reinterpret_cast<const FileAppender*>(appender->cast(FileAppender::getStaticClass()));
				if( fappend ){
					const_cast<FileAppender*>(fappend)->setFile(mapCurrentBase);
				}
			}
		}

		return ( Date::currentTime() > m_priv->nextCheck) || (!m_priv->bAlreadyInitialized);
#endif
	}

	return Date::currentTime() > m_priv->nextCheck;
}",1,1,main\cpp\timebasedrollingpolicy.cpp,TimeBasedRollingPolicy.isTriggeringEvent,,false,497,526,isTriggeringEvent,,,16,"bool TimeBasedRollingPolicy.isTriggeringEvent (Appender*,ANY,LogString,size_t)"
58593,METHOD,main\cpp\timebasedrollingpolicy.cpp:<global>,TYPE_DECL,"void TimeBasedRollingPolicy::setMultiprocess(bool multiprocess){
#if LOG4CXX_HAS_MULTIPROCESS_ROLLING_FILE_APPENDER
	// If we don't have the multiprocess stuff, disregard any attempt to set this value
	m_priv->multiprocess = multiprocess;
#endif
}",1,1,main\cpp\timebasedrollingpolicy.cpp,TimeBasedRollingPolicy.setMultiprocess,,false,528,533,setMultiprocess,,,17,void TimeBasedRollingPolicy.setMultiprocess (bool)
58598,METHOD,main\cpp\timebasedrollingpolicy.cpp:<global>,TYPE_DECL,"void TimeBasedRollingPolicy::setOption(const LogString& option,
	const LogString& value)
{
	if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""THROWIOEXCEPTIONONFORKFAILURE""),
			LOG4CXX_STR(""throwioexceptiononforkfailure"")))
	{
		m_priv->throwIOExceptionOnForkFailure = OptionConverter::toBoolean(value, true);
	}
	else
	{
		RollingPolicyBase::setOption(option, value);
	}
}",1,1,main\cpp\timebasedrollingpolicy.cpp,TimeBasedRollingPolicy.setOption,,false,535,548,setOption,,,18,"void TimeBasedRollingPolicy.setOption (LogString,LogString)"
58656,METHOD,main\cpp\timezone.cpp:<global>,TYPE_DECL,<global>,1,2,main\cpp\timezone.cpp,main\cpp\timezone.cpp:<global>,,false,1,285,<global>,,,1,
58664,METHOD,LOG4CXX_NS.helpers.TimeZoneImpl.GMTTimeZone,TYPE_DECL,"static const TimeZonePtr& getInstance()
		{
			static WideLife<TimeZonePtr> tz = std::make_shared<GMTTimeZone>();
			return tz;
		}",3,3,main\cpp\timezone.cpp,LOG4CXX_NS.helpers.TimeZoneImpl.GMTTimeZone.getInstance,,false,47,51,getInstance,,,1,TimeZonePtr LOG4CXX_NS.helpers.TimeZoneImpl.GMTTimeZone.getInstance ()
58677,METHOD,LOG4CXX_NS.helpers.TimeZoneImpl.GMTTimeZone,TYPE_DECL,"log4cxx_status_t explode( apr_time_exp_t* result, log4cxx_time_t input ) const
		{
			apr_status_t stat;

			//  APR 1.1 and early mishandles microseconds on dates
			//   before 1970, APR bug 32520
			if (LOG4CXX_UNLIKELY(input < 0 && apr_time_usec(input) < 0))
			{
				apr_time_t floorTime = (apr_time_sec(input) - 1) * APR_USEC_PER_SEC;
				stat = apr_time_exp_gmt(result, floorTime);
				result->tm_usec = (int) (input - floorTime);
			}
			else
			{
				stat = apr_time_exp_gmt( result, input );
			}

			return stat;
		}",3,3,main\cpp\timezone.cpp,LOG4CXX_NS.helpers.TimeZoneImpl.GMTTimeZone.explode,,false,54,72,explode,,,2,"log4cxx_status_t LOG4CXX_NS.helpers.TimeZoneImpl.GMTTimeZone.explode (apr_time_exp_t*,log4cxx_time_t)"
58727,METHOD,LOG4CXX_NS.helpers.TimeZoneImpl.GMTTimeZone,TYPE_DECL,"GMTTimeZone() : TimeZone( LOG4CXX_STR(""GMT"") )
		{
		}",3,3,main\cpp\timezone.cpp,LOG4CXX_NS.helpers.TimeZoneImpl.GMTTimeZone.GMTTimeZone,,false,74,76,GMTTimeZone,,,3,ANY LOG4CXX_NS.helpers.TimeZoneImpl.GMTTimeZone.GMTTimeZone ()
58732,METHOD,LOG4CXX_NS.helpers.TimeZoneImpl.LocalTimeZone,TYPE_DECL,"static const TimeZonePtr& getInstance()
		{
			static WideLife<TimeZonePtr> tz = std::make_shared<LocalTimeZone>();
			return tz;
		}",3,3,main\cpp\timezone.cpp,LOG4CXX_NS.helpers.TimeZoneImpl.LocalTimeZone.getInstance,,false,86,90,getInstance,,,1,TimeZonePtr LOG4CXX_NS.helpers.TimeZoneImpl.LocalTimeZone.getInstance ()
58745,METHOD,LOG4CXX_NS.helpers.TimeZoneImpl.LocalTimeZone,TYPE_DECL,"log4cxx_status_t explode( apr_time_exp_t* result, log4cxx_time_t input ) const
		{
			apr_status_t stat;

			//  APR 1.1 and early mishandles microseconds on dates
			//   before 1970, APR bug 32520
			if (LOG4CXX_UNLIKELY(input < 0 && apr_time_usec(input) < 0))
			{
				apr_time_t floorTime = (apr_time_sec(input) - 1) * APR_USEC_PER_SEC;
				stat = apr_time_exp_lt(result, floorTime);
				result->tm_usec = (int) (input - floorTime);
			}
			else
			{
				stat = apr_time_exp_lt( result, input );
			}

			return stat;
		}",3,3,main\cpp\timezone.cpp,LOG4CXX_NS.helpers.TimeZoneImpl.LocalTimeZone.explode,,false,93,111,explode,,,2,"log4cxx_status_t LOG4CXX_NS.helpers.TimeZoneImpl.LocalTimeZone.explode (apr_time_exp_t*,log4cxx_time_t)"
58795,METHOD,LOG4CXX_NS.helpers.TimeZoneImpl.LocalTimeZone,TYPE_DECL,"LocalTimeZone() : TimeZone( getTimeZoneName() )
		{
		}",3,3,main\cpp\timezone.cpp,LOG4CXX_NS.helpers.TimeZoneImpl.LocalTimeZone.LocalTimeZone,,false,114,116,LocalTimeZone,,,3,ANY LOG4CXX_NS.helpers.TimeZoneImpl.LocalTimeZone.LocalTimeZone ()
58799,METHOD,LOG4CXX_NS.helpers.TimeZoneImpl.LocalTimeZone,TYPE_DECL,"static const LogString getTimeZoneName()
		{
			const int MAX_TZ_LENGTH = 255;
			char tzName[MAX_TZ_LENGTH];
			apr_size_t tzLength;
			apr_time_exp_t tm;
			apr_time_exp_lt(&tm, 0);
			apr_strftime(tzName, &tzLength, MAX_TZ_LENGTH, ""%Z"", &tm);

			if (tzLength == 0)
			{
				apr_strftime(tzName, &tzLength, MAX_TZ_LENGTH, ""%z"", &tm);
			}

			tzName[tzLength] = 0;
			LogString retval;
			LOG4CXX_NS::helpers::Transcoder::decode(tzName, retval);
			return retval;
		}",3,3,main\cpp\timezone.cpp,LOG4CXX_NS.helpers.TimeZoneImpl.LocalTimeZone.getTimeZoneName,,false,119,137,getTimeZoneName,,,4,LogString LOG4CXX_NS.helpers.TimeZoneImpl.LocalTimeZone.getTimeZoneName ()
58854,METHOD,LOG4CXX_NS.helpers.TimeZoneImpl.FixedTimeZone,TYPE_DECL,"FixedTimeZone( const LogString& name, apr_int32_t offset1 ) : TimeZone( name ), offset( offset1 )
		{
		}",3,3,main\cpp\timezone.cpp,LOG4CXX_NS.helpers.TimeZoneImpl.FixedTimeZone.FixedTimeZone,,false,147,149,FixedTimeZone,,,1,"ANY LOG4CXX_NS.helpers.TimeZoneImpl.FixedTimeZone.FixedTimeZone (LogString,apr_int32_t)"
58860,METHOD,LOG4CXX_NS.helpers.TimeZoneImpl.FixedTimeZone,TYPE_DECL,"log4cxx_status_t explode( apr_time_exp_t* result, log4cxx_time_t input ) const
		{
			apr_status_t stat;

			//  APR 1.1 and early mishandles microseconds on dates
			//   before 1970, APR bug 32520
			if (LOG4CXX_UNLIKELY(input < 0 && apr_time_usec(input) < 0))
			{
				apr_time_t floorTime = (apr_time_sec(input) - 1) * APR_USEC_PER_SEC;
				stat = apr_time_exp_tz(result, floorTime, offset);
				result->tm_usec = (int) (input - floorTime);
			}
			else
			{
				stat = apr_time_exp_tz( result, input, offset );
			}

			return stat;
		}",3,3,main\cpp\timezone.cpp,LOG4CXX_NS.helpers.TimeZoneImpl.FixedTimeZone.explode,,false,152,170,explode,,,2,"log4cxx_status_t LOG4CXX_NS.helpers.TimeZoneImpl.FixedTimeZone.explode (apr_time_exp_t*,log4cxx_time_t)"
58913,METHOD,main\cpp\timezone.cpp:<global>,TYPE_DECL,"TimeZone::TimeZone( const LogString& id1 ) : id( id1 )
{
}",1,1,main\cpp\timezone.cpp,TimeZone.TimeZone,,false,183,185,TimeZone,,,4,ANY TimeZone.TimeZone (LogString)
58918,METHOD,main\cpp\timezone.cpp:<global>,TYPE_DECL,"TimeZone::~TimeZone()
{
}",1,1,main\cpp\timezone.cpp,TimeZone.~TimeZone,,false,187,189,~TimeZone,,,5,ANY TimeZone.~TimeZone ()
58922,METHOD,main\cpp\timezone.cpp:<global>,TYPE_DECL,"const TimeZonePtr& TimeZone::getDefault()
{
	return LOG4CXX_NS::helpers::TimeZoneImpl::LocalTimeZone::getInstance();
}",1,1,main\cpp\timezone.cpp,TimeZone.getDefault,,false,191,194,getDefault,,,6,TimeZonePtr TimeZone.getDefault ()
58937,METHOD,main\cpp\timezone.cpp:<global>,TYPE_DECL,"const TimeZonePtr& TimeZone::getGMT()
{
	return LOG4CXX_NS::helpers::TimeZoneImpl::GMTTimeZone::getInstance();
}",1,1,main\cpp\timezone.cpp,TimeZone.getGMT,,false,196,199,getGMT,,,7,TimeZonePtr TimeZone.getGMT ()
58952,METHOD,main\cpp\timezone.cpp:<global>,TYPE_DECL,"const TimeZonePtr TimeZone::getTimeZone( const LogString& id )
{
	const logchar gmt[] = { 0x47, 0x4D, 0x54, 0 };

	if ( id == gmt )
	{
		return LOG4CXX_NS::helpers::TimeZoneImpl::GMTTimeZone::getInstance();
	}

	if ( id.length() >= 5 && id.substr( 0, 3 ) == gmt )
	{
		int hours = 0;
		int minutes = 0;
		int sign = 1;

		if (id[3] == 0x2D /* '-' */)
		{
			sign = -1;
		}

		LogString off( id.substr( 4 ) );

		if ( id.length() >= 7 )
		{
			size_t colonPos = off.find( 0x3A /* ':' */);

			if ( colonPos == LogString::npos )
			{
				minutes = StringHelper::toInt(off.substr(off.length() - 2));
				hours = StringHelper::toInt(off.substr(0, off.length() - 2));
			}
			else
			{
				minutes = StringHelper::toInt(off.substr(colonPos + 1));
				hours = StringHelper::toInt(off.substr(0, colonPos));
			}
		}
		else
		{
			hours = StringHelper::toInt(off);
		}

		LogString s(gmt);
		Pool p;
		LogString hh;
		StringHelper::toString(hours, p, hh);

		if (sign > 0)
		{
			s.append(1, (logchar) 0x2...",1,1,main\cpp\timezone.cpp,TimeZone.getTimeZone,,false,201,285,getTimeZone,,,8,TimeZonePtr TimeZone.getTimeZone (LogString)
59287,METHOD,main\cpp\transcoder.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\transcoder.cpp,main\cpp\transcoder.cpp:<global>,,false,1,708,<global>,,,1,
59289,METHOD,main\cpp\transcoder.cpp:<global>,TYPE_DECL,"void Transcoder::decodeUTF8(const std::string& src, LogString& dst)
{
	std::string::const_iterator iter = src.begin();

	while (iter != src.end())
	{
		unsigned int sv = decode(src, iter);

		if (sv != 0xFFFF)
		{
			encode(sv, dst);
		}
		else
		{
			dst.append(1, LOSSCHAR);
			iter++;
		}
	}
}",1,1,main\cpp\transcoder.cpp,Transcoder.decodeUTF8,,false,43,61,decodeUTF8,,,1,"void Transcoder.decodeUTF8 (ANY,LogString)"
59334,METHOD,main\cpp\transcoder.cpp:<global>,TYPE_DECL,"void Transcoder::encodeUTF8(const LogString& src, std::string& dst)
{
#if LOG4CXX_LOGCHAR_IS_UTF8
	dst.append(src);
#else
	LogString::const_iterator iter = src.begin();

	while (iter != src.end())
	{
		unsigned int sv = decode(src, iter);

		if (sv != 0xFFFF)
		{
			encode(sv, dst);
		}
		else
		{
			dst.append(1, LOSSCHAR);
			iter++;
		}
	}

#endif
}",1,1,main\cpp\transcoder.cpp,Transcoder.encodeUTF8,,false,63,86,encodeUTF8,,,2,"void Transcoder.encodeUTF8 (LogString,ANY)"
59379,METHOD,main\cpp\transcoder.cpp:<global>,TYPE_DECL,"char* Transcoder::encodeUTF8(const LogString& src, Pool& p)
{
#if LOG4CXX_LOGCHAR_IS_UTF8
	return p.pstrdup(src);
#else
	std::string tmp;
	encodeUTF8(src, tmp);
	return p.pstrdup(tmp);
#endif
}",1,1,main\cpp\transcoder.cpp,Transcoder.encodeUTF8,,false,88,97,encodeUTF8,,,3,"char* Transcoder.encodeUTF8 (LogString,Pool)"
59395,METHOD,main\cpp\transcoder.cpp:<global>,TYPE_DECL,"void Transcoder::encodeUTF8(unsigned int sv, ByteBuffer& dst)
{
	size_t bytes = encodeUTF8(sv, dst.current());
	dst.position(dst.position() + bytes);
}",1,1,main\cpp\transcoder.cpp,Transcoder.encodeUTF8,,false,100,104,encodeUTF8,,,4,"void Transcoder.encodeUTF8 (unsigned int,ByteBuffer)"
59420,METHOD,main\cpp\transcoder.cpp:<global>,TYPE_DECL,"size_t Transcoder::encodeUTF8(unsigned int ch, char* dst)
{
	if (ch < 0x80)
	{
		dst[0] = (char) ch;
		return 1;
	}
	else if (ch < 0x800)
	{
		dst[0] = (char) (0xC0 + (ch >> 6));
		dst[1] = (char) (0x80 + (ch & 0x3F));
		return 2;
	}
	else if (ch < 0x10000)
	{
		dst[0] = (char) (0xE0 + (ch >> 12));
		dst[1] = (char) (0x80 + ((ch >> 6) & 0x3F));
		dst[2] = (char) (0x80 + (ch & 0x3F));
		return 3;
	}
	else if (ch <= 0x10FFFF)
	{
		dst[0] = (char) (0xF0 + (ch >> 18));
		dst[1] = (char) (0x80 + ((ch >> 12) & 0x3F));
		dst[2] = (char) (0x80 + ((ch >> 6) & 0x3F));
		dst[3] = (char) (0x80 + (ch & 0x3F));
		return 4;
	}
	else
	{
		//
		//  output UTF-8 encoding of 0xFFFF
		//
		dst[0] = (char) 0xEF;
		dst[1] = (char) 0xBF;
		dst[2] = (char) 0xBF;
		return 3;
	}
}",1,1,main\cpp\transcoder.cpp,Transcoder.encodeUTF8,,false,107,145,encodeUTF8,,,5,"size_t Transcoder.encodeUTF8 (unsigned int,char*)"
59597,METHOD,main\cpp\transcoder.cpp:<global>,TYPE_DECL,"void Transcoder::encodeUTF16BE(unsigned int sv, ByteBuffer& dst)
{
	size_t bytes = encodeUTF16BE(sv, dst.current());
	dst.position(dst.position() + bytes);
}",1,1,main\cpp\transcoder.cpp,Transcoder.encodeUTF16BE,,false,147,151,encodeUTF16BE,,,6,"void Transcoder.encodeUTF16BE (unsigned int,ByteBuffer)"
59622,METHOD,main\cpp\transcoder.cpp:<global>,TYPE_DECL,"size_t Transcoder::encodeUTF16BE(unsigned int ch, char* dst)
{
	if (ch <= 0xFFFF)
	{
		dst[0] = (char) (ch >> 8);
		dst[1] = (char) (ch & 0xFF);
		return 2;
	}

	if (ch <= 0x10FFFF)
	{
		unsigned char w = (unsigned char) ((ch >> 16) - 1);
		dst[0] = (char) (0xD8 + (w >> 2));
		dst[1] = (char) (((w & 0x03) << 6) + ((ch >> 10) & 0x3F));
		dst[2] = (char) (0xDC + ((ch & 0x30) >> 4));
		dst[3] = (char) (ch & 0xFF);
		return 4;
	}

	dst[0] = dst[1] = (char) 0xFF;
	return 2;
}",1,1,main\cpp\transcoder.cpp,Transcoder.encodeUTF16BE,,false,154,175,encodeUTF16BE,,,7,"size_t Transcoder.encodeUTF16BE (unsigned int,char*)"
59733,METHOD,main\cpp\transcoder.cpp:<global>,TYPE_DECL,"void Transcoder::encodeUTF16LE(unsigned int sv, ByteBuffer& dst)
{
	size_t bytes = encodeUTF16LE(sv, dst.current());
	dst.position(dst.position() + bytes);
}",1,1,main\cpp\transcoder.cpp,Transcoder.encodeUTF16LE,,false,177,181,encodeUTF16LE,,,8,"void Transcoder.encodeUTF16LE (unsigned int,ByteBuffer)"
59758,METHOD,main\cpp\transcoder.cpp:<global>,TYPE_DECL,"size_t Transcoder::encodeUTF16LE(unsigned int ch, char* dst)
{
	if (ch <= 0xFFFF)
	{
		dst[1] = (char) (ch >> 8);
		dst[0] = (char) (ch & 0xFF);
		return 2;
	}

	if (ch <= 0x10FFFF)
	{
		unsigned char w = (unsigned char) ((ch >> 16) - 1);
		dst[1] = (char) (0xD8 + (w >> 2));
		dst[0] = (char) (((w & 0x03) << 6) + ((ch >> 10) & 0x3F));
		dst[3] = (char) (0xDC + ((ch & 0x30) >> 4));
		dst[2] = (char) (ch & 0xFF);
		return 4;
	}

	dst[0] = dst[1] = (char) 0xFF;
	return 2;
}",1,1,main\cpp\transcoder.cpp,Transcoder.encodeUTF16LE,,false,183,204,encodeUTF16LE,,,9,"size_t Transcoder.encodeUTF16LE (unsigned int,char*)"
59869,METHOD,main\cpp\transcoder.cpp:<global>,TYPE_DECL,"unsigned int Transcoder::decode(const std::string& src,
	std::string::const_iterator& iter)
{
	std::string::const_iterator start(iter);
	unsigned char ch1 = *(iter++);

	if (ch1 <= 0x7F)
	{
		return ch1;
	}

	//
	//   should not have continuation character here
	//
	if ((ch1 & 0xC0) != 0x80 && iter != src.end())
	{
		unsigned char ch2 = *(iter++);

		//
		//   should be continuation
		if ((ch2 & 0xC0) != 0x80)
		{
			iter = start;
			return 0xFFFF;
		}

		if ((ch1 & 0xE0) == 0xC0)
		{
			if ((ch2 & 0xC0) == 0x80)
			{
				unsigned int rv = ((ch1 & 0x1F) << 6) + (ch2 & 0x3F);

				if (rv >= 0x80)
				{
					return rv;
				}
			}

			iter = start;
			return 0xFFFF;
		}

		if (iter != src.end())
		{
			unsigned char ch3 = *(iter++);

			//
			//   should be continuation
			//
			if ((ch3 & 0xC0) != 0x80)
			{
				iter = start;
				return 0xFFFF;
			}

			if ((ch1 & 0xF0) == 0xE0)
			{
				unsigned rv = ((ch1 & 0x0F) << 12)
					+ ((ch2 & 0x3F) << 6)
					+ (ch3 & 0x3F);

				if (rv <= ...",1,1,main\cpp\transcoder.cpp,Transcoder.decode,,false,207,303,decode,,,10,"unsigned int Transcoder.decode (ANY,ANY)"
60086,METHOD,main\cpp\transcoder.cpp:<global>,TYPE_DECL,"void Transcoder::encode(unsigned int sv, std::string& dst)
{
	char tmp[8];
	size_t bytes = encodeUTF8(sv, tmp);
	dst.append(tmp, bytes);
}",1,1,main\cpp\transcoder.cpp,Transcoder.encode,,false,306,311,encode,,,11,"void Transcoder.encode (unsigned int,ANY)"
60105,METHOD,main\cpp\transcoder.cpp:<global>,TYPE_DECL,"void Transcoder::decode(const std::string& src, LogString& dst)
{
#if LOG4CXX_CHARSET_UTF8 && LOG4CXX_LOGCHAR_IS_UTF8
	dst.append(src);
#else
	static CharsetDecoderPtr decoder(CharsetDecoder::getDefaultDecoder());
	dst.reserve(dst.size() + src.size());
	std::string::const_iterator iter = src.begin();
#if !LOG4CXX_CHARSET_EBCDIC

	for (;
		iter != src.end() && ((unsigned char) *iter) < 0x80;
		iter++)
	{
		dst.append(1, *iter);
	}

#endif

	if (iter != src.end())
	{
		size_t offset = iter - src.begin();
		ByteBuffer buf(const_cast<char*>(src.data() + offset), src.size() - offset);

		while (buf.remaining() > 0)
		{
			log4cxx_status_t stat = decoder->decode(buf, dst);

			if (CharsetDecoder::isError(stat))
			{
				dst.append(1, LOSSCHAR);
				buf.position(buf.position() + 1);
			}
		}

		decoder->decode(buf, dst);
	}

#endif
}",1,1,main\cpp\transcoder.cpp,Transcoder.decode,,false,314,353,decode,,,12,"void Transcoder.decode (ANY,LogString)"
60241,METHOD,main\cpp\transcoder.cpp:<global>,TYPE_DECL,"char* Transcoder::encode(const LogString& src, Pool& p)
{
#if LOG4CXX_CHARSET_UTF8 && LOG4CXX_LOGCHAR_IS_UTF8
	return p.pstrdup(src);
#else
	std::string tmp;
	encode(src, tmp);
	return p.pstrdup(tmp);
#endif
}",1,1,main\cpp\transcoder.cpp,Transcoder.encode,,false,355,364,encode,,,13,"char* Transcoder.encode (LogString,Pool)"
60257,METHOD,main\cpp\transcoder.cpp:<global>,TYPE_DECL,"void Transcoder::encode(const LogString& src, std::string& dst)
{
#if LOG4CXX_CHARSET_UTF8 && LOG4CXX_LOGCHAR_IS_UTF8
	dst.append(src);
#else
	static CharsetEncoderPtr encoder(CharsetEncoder::getDefaultEncoder());
	dst.reserve(dst.size() + src.size());
	LogString::const_iterator iter = src.begin();
#if !LOG4CXX_CHARSET_EBCDIC

	for (;
		iter != src.end() && ((unsigned int) *iter) < 0x80;
		iter++)
	{
		dst.append(1, *iter);
	}

#endif

	if (iter != src.end())
	{
		char buf[BUFSIZE];
		ByteBuffer out(buf, BUFSIZE);

		while (iter != src.end())
		{
			log4cxx_status_t stat = encoder->encode(src, iter, out);
			out.flip();
			dst.append(out.data(), out.limit());
			out.clear();

			if (CharsetEncoder::isError(stat))
			{
				dst.append(1, LOSSCHAR);
				iter++;
			}
		}

		encoder->encode(src, iter, out);
	}

#endif
}",1,1,main\cpp\transcoder.cpp,Transcoder.encode,,false,368,410,encode,,,14,"void Transcoder.encode (LogString,ANY)"
60387,METHOD,main\cpp\transcoder.cpp:<global>,TYPE_DECL,"static unsigned int decodeUTF16(const String& in, Iterator& iter)
{
	unsigned int ch1 = *iter;

	//
	//   if not surrogate pair
	//
	if (ch1 < 0xD800 || ch1 > 0xDFFF)
	{
		//
		//  then advance iterator and return wchar_t value
		//
		if (ch1 != 0xFFFF)
		{
			iter++;
		}

		return ch1;
	}
	else if (ch1 < 0xDC00)
	{
		//
		//  started with high-surrogate value
		//     if there is an additional wchar_t
		Iterator iter2 = iter + 1;

		if (iter2 != in.end())
		{
			unsigned int ch2 = *iter2;

			//
			//    if it is a matching low surrogate then
			//       advance the iterator and return the scalar value
			if (ch2 >= 0xDC00 && ch2 <= 0xDFFF)
			{
				iter += 2;
				return (ch1 - 0xD800) * 0x400 + (ch2 - 0xDC00) + 0x10000;
			}
		}
	}

	//
	//    unrecognized value, do not advance iterator
	//
	return 0xFFFF;
}",1,1,main\cpp\transcoder.cpp,decodeUTF16,,false,414,459,decodeUTF16,,,15,"unsigned int decodeUTF16<String,Iterator> (String,Iterator)"
60468,METHOD,main\cpp\transcoder.cpp:<global>,TYPE_DECL,"static void encodeUTF16(unsigned int sv, String& dst)
{
	if (sv < 0x10000)
	{
		dst.append(1, sv);
	}
	else
	{
		unsigned char u = (unsigned char) (sv >> 16);
		unsigned char w = (unsigned char) (u - 1);
		unsigned short hs = (0xD800 + ((w & 0xF) << 6) + ((sv & 0xFFFF) >> 10));
		unsigned short ls = (0xDC00 + (sv & 0x3FF));
		dst.append(1, hs);
		dst.append(1, ls);
	}
}",1,1,main\cpp\transcoder.cpp,encodeUTF16,,false,462,477,encodeUTF16,,,16,"void encodeUTF16<String> (unsigned int,String)"
60539,METHOD,main\cpp\transcoder.cpp:<global>,TYPE_DECL,"logchar Transcoder::decode(char val)
{
#if LOG4CXX_CHARSET_EBCDIC
	LogString dst;
	Transcoder::decode(std::string(1, val), dst);
	return dst[0];
#else
	return val;
#endif
}",1,1,main\cpp\transcoder.cpp,Transcoder.decode,,false,659,668,decode,,,17,logchar Transcoder.decode (char)
60546,METHOD,main\cpp\transcoder.cpp:<global>,TYPE_DECL,"LogString Transcoder::decode(const char* val)
{
#if LOG4CXX_LOGCHAR_IS_UTF8 && !LOG4CXX_CHARSET_EBCDIC
	return val;
#else
	LogString dst;
	Transcoder::decode(val, dst);
	return dst;
#endif
}",1,1,main\cpp\transcoder.cpp,Transcoder.decode,,false,670,679,decode,,,18,LogString Transcoder.decode (char*)
60560,METHOD,main\cpp\transcoder.cpp:<global>,TYPE_DECL,"std::string Transcoder::encodeCharsetName(const LogString& val)
{
	char asciiTable[] = { ' ', '!', '""', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
			'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=', '>', '?',
			'@', 'A', 'B', 'C', 'D', 'E', 'F',  'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',
			'P', 'Q', 'R', 'S', 'T', 'U', 'V',  'W', 'X', 'Y', 'Z', '[', '\\', ']', '^', '_',
			'`', 'a', 'b', 'c', 'd', 'e', 'f',  'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',
			'p', 'q', 'r', 's', 't', 'u', 'v',  'w', 'x', 'y', 'z', '{', '|', '}', '~'
		};
	std::string out;

	for (LogString::const_iterator iter = val.begin();
		iter != val.end();
		iter++)
	{
		if (*iter >= 0x20 && *iter < 0x7F)
		{
			out.append(1, asciiTable[*iter - 0x20]);
		}
		else
		{
			out.append(1, LOSSCHAR);
		}
	}

	return out;
}",1,1,main\cpp\transcoder.cpp,Transcoder.encodeCharsetName,,false,682,708,encodeCharsetName,,,19,string Transcoder.encodeCharsetName (LogString)
60724,METHOD,main\cpp\transform.cpp:<global>,TYPE_DECL,<global>,1,2,main\cpp\transform.cpp,main\cpp\transform.cpp:<global>,,false,1,131,<global>,,,1,
60726,METHOD,main\cpp\transform.cpp:<global>,TYPE_DECL,"void Transform::appendEscapingTags(
	LogString& buf, const LogString& input)
{
	//Check if the string is zero length -- if so, return
	//what was sent in.

	if (input.length() == 0 )
	{
		return;
	}

	logchar specials[] = { 0x22 /* "" */, 0x26 /* & */, 0x3C /* < */, 0x3E /* > */, 0x00 };
	size_t start = 0;
	size_t special = input.find_first_of(specials, start);

	while (special != LogString::npos)
	{
		if (special > start)
		{
			buf.append(input, start, special - start);
		}

		switch (input[special])
		{
			case 0x22:
				buf.append(LOG4CXX_STR(""&quot;""));
				break;

			case 0x26:
				buf.append(LOG4CXX_STR(""&amp;""));
				break;

			case 0x3C:
				buf.append(LOG4CXX_STR(""&lt;""));
				break;

			case 0x3E:
				buf.append(LOG4CXX_STR(""&gt;""));
				break;

			default:
				buf.append(1, input[special]);
				break;
		}

		start = special + 1;

		if (special < input.size())
		{
			special = input.find_first_of(specials, start);
		}
		else
		{
			special = LogString::npos;
		}
	}

	if (s...",1,1,main\cpp\transform.cpp,Transform.appendEscapingTags,,false,27,88,appendEscapingTags,,,1,"void Transform.appendEscapingTags (LogString,LogString)"
60883,METHOD,main\cpp\transform.cpp:<global>,TYPE_DECL,"void Transform::appendEscapingCDATA(
	LogString& buf, const LogString& input)
{
	static const WideLife<LogString> CDATA_END(LOG4CXX_STR(""]]>""));
	static const WideLife<LogString> CDATA_EMBEDED_END(LOG4CXX_STR(""]]>]]&gt;<![CDATA[""));

	const LogString::size_type CDATA_END_LEN = 3;


	if (input.length() == 0 )
	{
		return;
	}

	LogString::size_type end = input.find(CDATA_END);

	if (end == LogString::npos)
	{
		buf.append(input);
		return;
	}

	LogString::size_type start = 0;

	while (end != LogString::npos)
	{
		buf.append(input, start, end - start);
		buf.append(CDATA_EMBEDED_END);
		start = end + CDATA_END_LEN;

		if (start < input.length())
		{
			end = input.find(CDATA_END, start);
		}
		else
		{
			return;
		}
	}

	buf.append(input, start, input.length() - start);
}",1,1,main\cpp\transform.cpp,Transform.appendEscapingCDATA,,false,90,131,appendEscapingCDATA,,,2,"void Transform.appendEscapingCDATA (LogString,LogString)"
60997,METHOD,main\cpp\triggeringpolicy.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\triggeringpolicy.cpp,main\cpp\triggeringpolicy.cpp:<global>,,false,1,28,<global>,,,1,
61001,METHOD,main\cpp\triggeringpolicy.cpp:<global>,TYPE_DECL,"TriggeringPolicy::~TriggeringPolicy()
{
}",1,1,main\cpp\triggeringpolicy.cpp,TriggeringPolicy.~TriggeringPolicy,,false,26,28,~TriggeringPolicy,,,3,ANY TriggeringPolicy.~TriggeringPolicy ()
61016,METHOD,main\cpp\writer.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\writer.cpp,main\cpp\writer.cpp:<global>,,false,1,33,<global>,,,1,
61020,METHOD,main\cpp\writer.cpp:<global>,TYPE_DECL,"Writer::Writer()
{
}",1,1,main\cpp\writer.cpp,Writer.Writer,,false,27,29,Writer,,,3,ANY Writer.Writer ()
61024,METHOD,main\cpp\writer.cpp:<global>,TYPE_DECL,"Writer::~Writer()
{
}",1,1,main\cpp\writer.cpp,Writer.~Writer,,false,31,33,~Writer,,,4,ANY Writer.~Writer ()
61045,METHOD,main\cpp\writerappender.cpp:<global>,TYPE_DECL,<global>,1,5,main\cpp\writerappender.cpp,main\cpp\writerappender.cpp:<global>,,false,1,332,<global>,,,1,
61049,METHOD,main\cpp\writerappender.cpp:<global>,TYPE_DECL,"WriterAppender::WriterAppender() :
	AppenderSkeleton (std::make_unique<WriterAppenderPriv>())
{
}",1,1,main\cpp\writerappender.cpp,WriterAppender.WriterAppender,,false,34,37,WriterAppender,,,3,ANY WriterAppender.WriterAppender ()
61053,METHOD,main\cpp\writerappender.cpp:<global>,TYPE_DECL,"WriterAppender::WriterAppender(const LayoutPtr& layout1,
	LOG4CXX_NS::helpers::WriterPtr& writer1)
	: AppenderSkeleton (std::make_unique<WriterAppenderPriv>(layout1, writer1))
{
	Pool p;
	activateOptions(p);
}",1,1,main\cpp\writerappender.cpp,WriterAppender.WriterAppender,,false,39,45,WriterAppender,,,4,"ANY WriterAppender.WriterAppender (LayoutPtr,ANY)"
61062,METHOD,main\cpp\writerappender.cpp:<global>,TYPE_DECL,"WriterAppender::WriterAppender(const LayoutPtr& layout1)
	: AppenderSkeleton (std::make_unique<WriterAppenderPriv>(layout1))
{
}",1,1,main\cpp\writerappender.cpp,WriterAppender.WriterAppender,,false,47,50,WriterAppender,,,5,ANY WriterAppender.WriterAppender (LayoutPtr)
61067,METHOD,main\cpp\writerappender.cpp:<global>,TYPE_DECL,"WriterAppender::WriterAppender(std::unique_ptr<WriterAppenderPriv> priv)
	: AppenderSkeleton (std::move(priv))
{

}",1,1,main\cpp\writerappender.cpp,WriterAppender.WriterAppender,,false,52,56,WriterAppender,,,6,ANY WriterAppender.WriterAppender (ANY)
61072,METHOD,main\cpp\writerappender.cpp:<global>,TYPE_DECL,"WriterAppender::~WriterAppender()
{
	finalize();
}",1,1,main\cpp\writerappender.cpp,WriterAppender.~WriterAppender,,false,58,61,~WriterAppender,,,7,ANY WriterAppender.~WriterAppender ()
61077,METHOD,main\cpp\writerappender.cpp:<global>,TYPE_DECL,"void WriterAppender::activateOptions(Pool& p)
{
	int errors = 0;

	if (_priv->layout == 0)
	{
		_priv->errorHandler->error(
			((LogString) LOG4CXX_STR(""No layout set for the appender named [""))
			+ _priv->name + LOG4CXX_STR(""].""));
		errors++;
	}

	if (_priv->writer == 0)
	{
		_priv->errorHandler->error(
			((LogString) LOG4CXX_STR(""No writer set for the appender named [""))
			+ _priv->name + LOG4CXX_STR(""].""));
		errors++;
	}

	if (errors == 0)
	{
		AppenderSkeleton::activateOptions(p);
	}
}",1,5,main\cpp\writerappender.cpp,WriterAppender.activateOptions,,false,63,87,activateOptions,,,8,void WriterAppender.activateOptions (Pool)
61188,METHOD,main\cpp\writerappender.cpp:<global>,TYPE_DECL,"void WriterAppender::append(const spi::LoggingEventPtr& event, Pool& pool1)
{

	if (!checkEntryConditions())
	{
		return;
	}

	subAppend(event, pool1);
}",1,1,main\cpp\writerappender.cpp,WriterAppender.append,,false,91,100,append,,,9,"void WriterAppender.append (ANY,Pool)"
61202,METHOD,main\cpp\writerappender.cpp:<global>,TYPE_DECL,"bool WriterAppender::checkEntryConditions() const
{
	static bool warnedClosed = false;
	static bool warnedNoWriter = false;
	static bool warnedNoLayout = false;

	if (_priv->closed)
	{
		if (!warnedClosed)
		{
			LogLog::warn(LOG4CXX_STR(""Not allowed to write to a closed appender.""));
			warnedClosed = true;
		}

		return false;
	}

	if (_priv->writer == 0)
	{
		if (!warnedNoWriter)
		{
			_priv->errorHandler->error(
				LogString(LOG4CXX_STR(""No output stream or file set for the appender named ["")) +
				_priv->name + LOG4CXX_STR(""].""));
			warnedNoWriter = true;
		}

		return false;
	}

	if (_priv->layout == 0)
	{
		if (!warnedNoLayout)
		{
			_priv->errorHandler->error(
				LogString(LOG4CXX_STR(""No layout set for the appender named ["")) +
				_priv->name + LOG4CXX_STR(""].""));
			warnedNoLayout = true;
		}
		return false;
	}

	return true;
}",1,5,main\cpp\writerappender.cpp,WriterAppender.checkEntryConditions,,false,108,151,checkEntryConditions,,,10,bool WriterAppender.checkEntryConditions ()
61353,METHOD,main\cpp\writerappender.cpp:<global>,TYPE_DECL,"void WriterAppender::close()
{
	std::lock_guard<std::recursive_mutex> lock(_priv->mutex);

	if (_priv->closed)
	{
		return;
	}

	_priv->closed = true;
	closeWriter();
}",1,44,main\cpp\writerappender.cpp,WriterAppender.close,,false,164,175,close,,,11,void WriterAppender.close ()
61404,METHOD,main\cpp\writerappender.cpp:<global>,TYPE_DECL,"void WriterAppender::closeWriter()
{
	if (_priv->writer != NULL)
	{
		try
		{
			// before closing we have to output out layout's footer
			//
			//   Using the object's pool since this is a one-shot operation
			//    and pool is likely to be reclaimed soon when appender is destructed.
			//
			writeFooter(_priv->pool);
			_priv->writer->close(_priv->pool);
			_priv->writer = 0;
		}
		catch (IOException& e)
		{
			LogLog::error(LogString(LOG4CXX_STR(""Could not close writer for WriterAppender named "")) + _priv->name, e);
		}
	}

}",1,5,main\cpp\writerappender.cpp,WriterAppender.closeWriter,,false,180,201,closeWriter,,,12,void WriterAppender.closeWriter ()
61490,METHOD,main\cpp\writerappender.cpp:<global>,TYPE_DECL,"WriterPtr WriterAppender::createWriter(OutputStreamPtr& os)
{

	LogString enc(getEncoding());

	CharsetEncoderPtr encoder;

	if (enc.empty())
	{
		encoder = CharsetEncoder::getDefaultEncoder();
	}
	else
	{
		if (StringHelper::equalsIgnoreCase(enc,
				LOG4CXX_STR(""utf-16""), LOG4CXX_STR(""UTF-16"")))
		{
			encoder = CharsetEncoder::getEncoder(LOG4CXX_STR(""UTF-16BE""));
		}
		else
		{
			encoder = CharsetEncoder::getEncoder(enc);
		}

		if (encoder == NULL)
		{
			encoder = CharsetEncoder::getDefaultEncoder();
			LogLog::warn(LOG4CXX_STR(""Error initializing output writer.""));
			LogLog::warn(LOG4CXX_STR(""Unsupported encoding?""));
		}
	}

	return WriterPtr(new OutputStreamWriter(os, encoder));
}",1,1,main\cpp\writerappender.cpp,WriterAppender.createWriter,,false,209,241,createWriter,,,13,WriterPtr WriterAppender.createWriter (OutputStreamPtr)
61570,METHOD,main\cpp\writerappender.cpp:<global>,TYPE_DECL,"LogString WriterAppender::getEncoding() const
{
	return _priv->encoding;
}",1,8,main\cpp\writerappender.cpp,WriterAppender.getEncoding,,false,243,246,getEncoding,,,14,LogString WriterAppender.getEncoding ()
61585,METHOD,main\cpp\writerappender.cpp:<global>,TYPE_DECL,"void WriterAppender::setEncoding(const LogString& enc)
{
	_priv->encoding = enc;
}",1,1,main\cpp\writerappender.cpp,WriterAppender.setEncoding,,false,248,251,setEncoding,,,15,void WriterAppender.setEncoding (LogString)
61602,METHOD,main\cpp\writerappender.cpp:<global>,TYPE_DECL,"void WriterAppender::subAppend(const spi::LoggingEventPtr& event, Pool& p)
{
	LogString msg;
	_priv->layout->format(msg, event, p);

	if (_priv->writer != NULL)
	{
		_priv->writer->write(msg, p);

		if (_priv->immediateFlush)
		{
			_priv->writer->flush(p);
		}
	}
}",1,1,main\cpp\writerappender.cpp,WriterAppender.subAppend,,false,253,267,subAppend,,,16,"void WriterAppender.subAppend (ANY,Pool)"
61680,METHOD,main\cpp\writerappender.cpp:<global>,TYPE_DECL,"void WriterAppender::writeFooter(Pool& p)
{
	if (_priv->layout != NULL)
	{
		LogString foot;
		_priv->layout->appendFooter(foot, p);
		_priv->writer->write(foot, p);
	}
}",1,5,main\cpp\writerappender.cpp,WriterAppender.writeFooter,,false,270,278,writeFooter,,,17,void WriterAppender.writeFooter (Pool)
61730,METHOD,main\cpp\writerappender.cpp:<global>,TYPE_DECL,"void WriterAppender::writeHeader(Pool& p)
{
	if (_priv->layout != NULL)
	{
		LogString header;
		_priv->layout->appendHeader(header, p);
		_priv->writer->write(header, p);
	}
}",1,5,main\cpp\writerappender.cpp,WriterAppender.writeHeader,,false,280,288,writeHeader,,,18,void WriterAppender.writeHeader (Pool)
61780,METHOD,main\cpp\writerappender.cpp:<global>,TYPE_DECL,"void WriterAppender::setWriter(const WriterPtr& newWriter)
{
	std::unique_lock<std::recursive_mutex> lock(_priv->mutex);
	setWriterInternal(newWriter);
}",1,45,main\cpp\writerappender.cpp,WriterAppender.setWriter,,false,291,295,setWriter,,,19,void WriterAppender.setWriter (WriterPtr)
61806,METHOD,main\cpp\writerappender.cpp:<global>,TYPE_DECL,"void WriterAppender::setWriterInternal(const WriterPtr& newWriter)
{
	_priv->writer = newWriter;
}",1,1,main\cpp\writerappender.cpp,WriterAppender.setWriterInternal,,false,297,300,setWriterInternal,,,20,void WriterAppender.setWriterInternal (WriterPtr)
61823,METHOD,main\cpp\writerappender.cpp:<global>,TYPE_DECL,"bool WriterAppender::requiresLayout() const
{
	return true;
}",1,1,main\cpp\writerappender.cpp,WriterAppender.requiresLayout,,false,302,305,requiresLayout,,,21,bool WriterAppender.requiresLayout ()
61829,METHOD,main\cpp\writerappender.cpp:<global>,TYPE_DECL,"void WriterAppender::setOption(const LogString& option, const LogString& value)
{
	if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""ENCODING""), LOG4CXX_STR(""encoding"")))
	{
		setEncoding(value);
	}
	else
	{
		AppenderSkeleton::setOption(option, value);
	}
}",1,1,main\cpp\writerappender.cpp,WriterAppender.setOption,,false,307,317,setOption,,,22,"void WriterAppender.setOption (LogString,LogString)"
61856,METHOD,main\cpp\writerappender.cpp:<global>,TYPE_DECL,"void WriterAppender::setImmediateFlush(bool value)
{
	_priv->immediateFlush = value;
}",1,1,main\cpp\writerappender.cpp,WriterAppender.setImmediateFlush,,false,320,323,setImmediateFlush,,,23,void WriterAppender.setImmediateFlush (bool)
61873,METHOD,main\cpp\writerappender.cpp:<global>,TYPE_DECL,"bool WriterAppender::getImmediateFlush() const
{
	return _priv->immediateFlush;
}",1,8,main\cpp\writerappender.cpp,WriterAppender.getImmediateFlush,,false,325,328,getImmediateFlush,,,24,bool WriterAppender.getImmediateFlush ()
61888,METHOD,main\cpp\writerappender.cpp:<global>,TYPE_DECL,"const LOG4CXX_NS::helpers::WriterPtr WriterAppender::getWriter() const{
	return _priv->writer;
}",1,8,main\cpp\writerappender.cpp,WriterAppender.getWriter,,false,330,332,getWriter,,,25,WriterPtr WriterAppender.getWriter ()
61926,METHOD,main\cpp\xmllayout.cpp:<global>,TYPE_DECL,<global>,1,2,main\cpp\xmllayout.cpp,main\cpp\xmllayout.cpp:<global>,,false,1,202,<global>,,,1,
61929,METHOD,XMLLayoutPrivate,TYPE_DECL,"XMLLayoutPrivate()
		: locationInfo(false)
		, properties(false)
		, expectedPatternLength(100)
		{}",2,4,main\cpp\xmllayout.cpp,XMLLayoutPrivate.XMLLayoutPrivate,,false,37,41,XMLLayoutPrivate,,,1,ANY XMLLayoutPrivate.XMLLayoutPrivate ()
61938,METHOD,main\cpp\xmllayout.cpp:<global>,TYPE_DECL,"XMLLayout::XMLLayout()
	: m_priv(std::make_unique<XMLLayoutPrivate>())
{
	m_priv->expectedPatternLength = getFormattedEventCharacterCount() * 2;
}",1,1,main\cpp\xmllayout.cpp,XMLLayout.XMLLayout,,false,53,57,XMLLayout,,,4,ANY XMLLayout.XMLLayout ()
61949,METHOD,main\cpp\xmllayout.cpp:<global>,TYPE_DECL,XMLLayout::~XMLLayout() {},1,26,main\cpp\xmllayout.cpp,XMLLayout.~XMLLayout,,false,59,59,~XMLLayout,,,5,ANY XMLLayout.~XMLLayout ()
61953,METHOD,main\cpp\xmllayout.cpp:<global>,TYPE_DECL,"void XMLLayout::setOption(const LogString& option,
	const LogString& value)
{
	if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""LOCATIONINFO""), LOG4CXX_STR(""locationinfo"")))
	{
		setLocationInfo(OptionConverter::toBoolean(value, false));
		m_priv->expectedPatternLength = getFormattedEventCharacterCount() * 2;
	}

	if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""PROPERTIES""), LOG4CXX_STR(""properties"")))
	{
		setProperties(OptionConverter::toBoolean(value, false));
		m_priv->expectedPatternLength = getFormattedEventCharacterCount() * 2;
	}
}",1,1,main\cpp\xmllayout.cpp,XMLLayout.setOption,,false,61,75,setOption,,,6,"void XMLLayout.setOption (LogString,LogString)"
62009,METHOD,main\cpp\xmllayout.cpp:<global>,TYPE_DECL,"void XMLLayout::format(LogString& output,
	const spi::LoggingEventPtr& event,
	Pool& p) const
{
	output.reserve(m_priv->expectedPatternLength + event->getMessage().size());
	output.append(LOG4CXX_STR(""<log4j:event logger=\""""));
	Transform::appendEscapingTags(output, event->getLoggerName());
	output.append(LOG4CXX_STR(""\"" timestamp=\""""));
	StringHelper::toString(event->getTimeStamp() / 1000L, p, output);
	output.append(LOG4CXX_STR(""\"" level=\""""));
	Transform::appendEscapingTags(output, event->getLevel()->toString());
	output.append(LOG4CXX_STR(""\"" thread=\""""));
	Transform::appendEscapingTags(output, event->getThreadName());
	output.append(LOG4CXX_STR(""\"">""));
	output.append(LOG4CXX_EOL);

	output.append(LOG4CXX_STR(""<log4j:message><![CDATA[""));
	// Append the rendered message. Also make sure to escape any
	// existing CDATA sections.
	Transform::appendEscapingCDATA(output, event->getRenderedMessage());
	output.append(LOG4CXX_STR(""]]></log4j:message>""));
	output.append(LOG4CXX_EOL);

...",1,1,main\cpp\xmllayout.cpp,XMLLayout.format,,false,77,182,format,,,7,"void XMLLayout.format (LogString,ANY,Pool)"
62457,METHOD,main\cpp\xmllayout.cpp:<global>,TYPE_DECL,"void XMLLayout::setLocationInfo(bool locationInfo1)
{
	m_priv->locationInfo = locationInfo1;
}",1,1,main\cpp\xmllayout.cpp,XMLLayout.setLocationInfo,,false,184,187,setLocationInfo,,,8,void XMLLayout.setLocationInfo (bool)
62467,METHOD,main\cpp\xmllayout.cpp:<global>,TYPE_DECL,"bool XMLLayout::getLocationInfo() const
{
	return m_priv->locationInfo;
}",1,1,main\cpp\xmllayout.cpp,XMLLayout.getLocationInfo,,false,189,192,getLocationInfo,,,9,bool XMLLayout.getLocationInfo ()
62475,METHOD,main\cpp\xmllayout.cpp:<global>,TYPE_DECL,"void XMLLayout::setProperties(bool flag)
{
	m_priv->properties = flag;
}",1,1,main\cpp\xmllayout.cpp,XMLLayout.setProperties,,false,194,197,setProperties,,,10,void XMLLayout.setProperties (bool)
62485,METHOD,main\cpp\xmllayout.cpp:<global>,TYPE_DECL,"bool XMLLayout::getProperties()
{
	return m_priv->properties;
}",1,1,main\cpp\xmllayout.cpp,XMLLayout.getProperties,,false,199,202,getProperties,,,11,bool XMLLayout.getProperties ()
62522,METHOD,main\cpp\xmlsocketappender.cpp:<global>,TYPE_DECL,<global>,1,1,main\cpp\xmlsocketappender.cpp,main\cpp\xmlsocketappender.cpp:<global>,,false,1,150,<global>,,,1,
62525,METHOD,XMLSocketAppenderPriv,TYPE_DECL,"XMLSocketAppenderPriv(int defaultPort, int reconnectionDelay) :
		SocketAppenderSkeletonPriv(defaultPort, reconnectionDelay) {}",2,63,main\cpp\xmlsocketappender.cpp,XMLSocketAppenderPriv.XMLSocketAppenderPriv,,false,39,40,XMLSocketAppenderPriv,,,1,"ANY XMLSocketAppenderPriv.XMLSocketAppenderPriv (int,int)"
62531,METHOD,XMLSocketAppenderPriv,TYPE_DECL,"XMLSocketAppenderPriv(InetAddressPtr address, int defaultPort, int reconnectionDelay) :
		SocketAppenderSkeletonPriv( address, defaultPort, reconnectionDelay ) {}",2,74,main\cpp\xmlsocketappender.cpp,XMLSocketAppenderPriv.XMLSocketAppenderPriv,,false,42,43,XMLSocketAppenderPriv,,,2,"ANY XMLSocketAppenderPriv.XMLSocketAppenderPriv (InetAddressPtr,int,int)"
62538,METHOD,XMLSocketAppenderPriv,TYPE_DECL,"XMLSocketAppenderPriv(const LogString& host, int port, int delay) :
		SocketAppenderSkeletonPriv( host, port, delay ) {}",2,52,main\cpp\xmlsocketappender.cpp,XMLSocketAppenderPriv.XMLSocketAppenderPriv,,false,45,46,XMLSocketAppenderPriv,,,3,"ANY XMLSocketAppenderPriv.XMLSocketAppenderPriv (LogString,int,int)"
62560,METHOD,main\cpp\xmlsocketappender.cpp:<global>,TYPE_DECL,"XMLSocketAppender::XMLSocketAppender()
	: SocketAppenderSkeleton(std::make_unique<XMLSocketAppenderPriv>(DEFAULT_PORT, DEFAULT_RECONNECTION_DELAY))
{
	_priv->layout = std::make_shared<XMLLayout>();
}",1,1,main\cpp\xmlsocketappender.cpp,XMLSocketAppender.XMLSocketAppender,,false,63,67,XMLSocketAppender,,,10,ANY XMLSocketAppender.XMLSocketAppender ()
62579,METHOD,main\cpp\xmlsocketappender.cpp:<global>,TYPE_DECL,"XMLSocketAppender::XMLSocketAppender(InetAddressPtr address1, int port1)
	: SocketAppenderSkeleton(std::make_unique<XMLSocketAppenderPriv>(address1, port1, DEFAULT_RECONNECTION_DELAY))
{
	_priv->layout = std::make_shared<XMLLayout>();
	Pool p;
	activateOptions(p);
}",1,1,main\cpp\xmlsocketappender.cpp,XMLSocketAppender.XMLSocketAppender,,false,69,75,XMLSocketAppender,,,11,"ANY XMLSocketAppender.XMLSocketAppender (InetAddressPtr,int)"
62603,METHOD,main\cpp\xmlsocketappender.cpp:<global>,TYPE_DECL,"XMLSocketAppender::XMLSocketAppender(const LogString& host, int port1)
	: SocketAppenderSkeleton(std::make_unique<XMLSocketAppenderPriv>(host, port1, DEFAULT_RECONNECTION_DELAY))
{
	_priv->layout = std::make_shared<XMLLayout>();
	Pool p;
	activateOptions(p);
}",1,1,main\cpp\xmlsocketappender.cpp,XMLSocketAppender.XMLSocketAppender,,false,77,83,XMLSocketAppender,,,12,"ANY XMLSocketAppender.XMLSocketAppender (LogString,int)"
62627,METHOD,main\cpp\xmlsocketappender.cpp:<global>,TYPE_DECL,"XMLSocketAppender::~XMLSocketAppender()
{
	finalize();
}",1,1,main\cpp\xmlsocketappender.cpp,XMLSocketAppender.~XMLSocketAppender,,false,85,88,~XMLSocketAppender,,,13,ANY XMLSocketAppender.~XMLSocketAppender ()
62632,METHOD,main\cpp\xmlsocketappender.cpp:<global>,TYPE_DECL,"int XMLSocketAppender::getDefaultDelay() const
{
	return DEFAULT_RECONNECTION_DELAY;
}",1,1,main\cpp\xmlsocketappender.cpp,XMLSocketAppender.getDefaultDelay,,false,91,94,getDefaultDelay,,,14,int XMLSocketAppender.getDefaultDelay ()
62638,METHOD,main\cpp\xmlsocketappender.cpp:<global>,TYPE_DECL,"int XMLSocketAppender::getDefaultPort() const
{
	return DEFAULT_PORT;
}",1,1,main\cpp\xmlsocketappender.cpp,XMLSocketAppender.getDefaultPort,,false,96,99,getDefaultPort,,,15,int XMLSocketAppender.getDefaultPort ()
62644,METHOD,main\cpp\xmlsocketappender.cpp:<global>,TYPE_DECL,"void XMLSocketAppender::setSocket(LOG4CXX_NS::helpers::SocketPtr& socket, Pool& p)
{
	OutputStreamPtr os = std::make_shared<SocketOutputStream>(socket);
	CharsetEncoderPtr charset(CharsetEncoder::getUTF8Encoder());
	std::lock_guard<std::recursive_mutex> lock(_priv->mutex);
	_priv->writer = std::make_shared<OutputStreamWriter>(os, charset);
}",1,44,main\cpp\xmlsocketappender.cpp,XMLSocketAppender.setSocket,,false,101,107,setSocket,,,16,"void XMLSocketAppender.setSocket (ANY,Pool)"
62706,METHOD,main\cpp\xmlsocketappender.cpp:<global>,TYPE_DECL,"void XMLSocketAppender::cleanUp(Pool& p)
{
	if (_priv->writer)
	{
		try
		{
			_priv->writer->close(p);
			_priv->writer = nullptr;
		}
		catch (std::exception&)
		{
		}
	}
}",1,5,main\cpp\xmlsocketappender.cpp,XMLSocketAppender.cleanUp,,false,109,122,cleanUp,,,17,void XMLSocketAppender.cleanUp (Pool)
62752,METHOD,main\cpp\xmlsocketappender.cpp:<global>,TYPE_DECL,"void XMLSocketAppender::append(const spi::LoggingEventPtr& event, LOG4CXX_NS::helpers::Pool& p)
{
	if (_priv->writer)
	{
		LogString output;
		_priv->layout->format(output, event, p);

		try
		{
			_priv->writer->write(output, p);
			_priv->writer->flush(p);
		}
		catch (std::exception& e)
		{
			_priv->writer = nullptr;
			LogLog::warn(LOG4CXX_STR(""Detected problem with connection: ""), e);

			if (getReconnectionDelay() > 0)
			{
				fireConnector();
			}
		}
	}
}",1,5,main\cpp\xmlsocketappender.cpp,XMLSocketAppender.append,,false,124,147,append,,,18,"void XMLSocketAppender.append (ANY,ANY)"
62861,METHOD,main\cpp\zipcompressaction.cpp:<global>,TYPE_DECL,<global>,1,6,main\cpp\zipcompressaction.cpp,main\cpp\zipcompressaction.cpp:<global>,,false,1,154,<global>,,,1,
62864,METHOD,ZipCompressActionPrivate,TYPE_DECL,"ZipCompressActionPrivate( const File& toRename,
		const File& renameTo,
		bool deleteSource):
		source(toRename), destination(renameTo), deleteSource(deleteSource) {}",2,72,main\cpp\zipcompressaction.cpp,ZipCompressActionPrivate.ZipCompressActionPrivate,,false,34,37,ZipCompressActionPrivate,,,1,"ANY ZipCompressActionPrivate.ZipCompressActionPrivate (File,File,bool)"
62875,METHOD,<empty>,<empty>,<empty>,1,,main\cpp\zipcompressaction.cpp,ZipCompressActionPrivate:<clinit>,,false,32,,<clinit>,,,6,
62884,METHOD,main\cpp\zipcompressaction.cpp:<global>,TYPE_DECL,"ZipCompressAction::ZipCompressAction(const File& src,
	const File& dest,
	bool del)
	: Action(std::make_unique<ZipCompressActionPrivate>(
			  src, dest, del))
{
}",1,1,main\cpp\zipcompressaction.cpp,ZipCompressAction.ZipCompressAction,,false,47,53,ZipCompressAction,,,4,"ANY ZipCompressAction.ZipCompressAction (File,File,bool)"
62891,METHOD,main\cpp\zipcompressaction.cpp:<global>,TYPE_DECL,"bool ZipCompressAction::execute(LOG4CXX_NS::helpers::Pool& p) const
{
	if (!priv->source.exists(p))
	{
		return false;
	}

	apr_pool_t* aprpool = p.getAPRPool();
	apr_procattr_t* attr;
	apr_status_t stat = apr_procattr_create(&attr, aprpool);

	if (stat != APR_SUCCESS)
	{
		throw IOException(stat);
	}

	stat = apr_procattr_io_set(attr, APR_NO_PIPE, APR_NO_PIPE, APR_FULL_BLOCK);

	if (stat != APR_SUCCESS)
	{
		throw IOException(stat);
	}

	stat = apr_procattr_cmdtype_set(attr, APR_PROGRAM_PATH);

	if (stat != APR_SUCCESS)
	{
		throw IOException(stat);
	}

	//
	// redirect the child's error stream to this processes' error stream
	//
	apr_file_t* child_err;
	stat = apr_file_open_stderr(&child_err, aprpool);

	if (stat == APR_SUCCESS)
	{
		stat =  apr_procattr_child_err_set(attr, child_err, NULL);

		if (stat != APR_SUCCESS)
		{
			throw IOException(stat);
		}
	}

	const char** args = (const char**)
		apr_palloc(aprpool, 5 * sizeof(*args));
	int i = 0;

	args[i++] = ""zip"";
	args[i++] = ...",1,6,main\cpp\zipcompressaction.cpp,ZipCompressAction.execute,,false,55,150,execute,,,5,bool ZipCompressAction.execute (ANY)
63203,METHOD,main\cpp\zipcompressaction.cpp:<global>,TYPE_DECL,"void ZipCompressAction::setThrowIOExceptionOnForkFailure(bool throwIO){
	priv->throwIOExceptionOnForkFailure = throwIO;
}",1,1,main\cpp\zipcompressaction.cpp,ZipCompressAction.setThrowIOExceptionOnForkFailure,,false,152,154,setThrowIOExceptionOnForkFailure,,,6,void ZipCompressAction.setThrowIOExceptionOnForkFailure (bool)
63231,METHOD,main\include\log4cxx-qt\configuration.hpp:<global>,TYPE_DECL,<global>,1,39,main\include\log4cxx-qt\configuration.hpp,main\include\log4cxx-qt\configuration.hpp:<global>,,false,1,49,<global>,,,1,
63243,METHOD,main\include\log4cxx-qt\logger.hpp:<global>,TYPE_DECL,<global>,1,30,main\include\log4cxx-qt\logger.hpp,main\include\log4cxx-qt\logger.hpp:<global>,,false,1,22,<global>,,,1,
63250,METHOD,main\include\log4cxx-qt\messagebuffer.hpp:<global>,TYPE_DECL,<global>,1,38,main\include\log4cxx-qt\messagebuffer.hpp,main\include\log4cxx-qt\messagebuffer.hpp:<global>,,false,1,74,<global>,,,1,
63252,METHOD,main\include\log4cxx-qt\messagebuffer.hpp:<global>,TYPE_DECL,"inline LOG4CXX_NS::helpers::CharMessageBuffer&
operator<<(LOG4CXX_NS::helpers::CharMessageBuffer& mb, const QString& msg)
{
	LOG4CXX_DECODE_QSTRING(tmp, msg);
	return mb << tmp;
}",2,1,main\include\log4cxx-qt\messagebuffer.hpp,operator <<,,false,64,69,operator <<,,,1,"CharMessageBuffer operator << (ANY,QString)"
63272,METHOD,main\include\log4cxx-qt\messagehandler.hpp:<global>,TYPE_DECL,<global>,1,40,main\include\log4cxx-qt\messagehandler.hpp,main\include\log4cxx-qt\messagehandler.hpp:<global>,,false,1,45,<global>,,,1,
63277,METHOD,main\include\log4cxx-qt\messagehandler.hpp:<global>,TYPE_DECL,"void messageHandler(QtMsgType type, const QMessageLogContext& context, const QString& message);",6,94,main\include\log4cxx-qt\messagehandler.hpp,LOG4CXX_NS.qt.messageHandler,,false,40,40,messageHandler,,,2,"void LOG4CXX_NS.qt.messageHandler (QtMsgType,QMessageLogContext,QString)"
63291,METHOD,main\include\log4cxx-qt\transcoder.hpp:<global>,TYPE_DECL,<global>,1,34,main\include\log4cxx-qt\transcoder.hpp,main\include\log4cxx-qt\transcoder.hpp:<global>,,false,1,101,<global>,,,1,
63302,METHOD,main\include\log4cxx\appender.hpp:<global>,TYPE_DECL,<global>,1,28,main\include\log4cxx\appender.hpp,main\include\log4cxx\appender.hpp:<global>,,false,1,137,<global>,,,1,
63334,METHOD,main\include\log4cxx\appenderskeleton.hpp:<global>,TYPE_DECL,<global>,1,37,main\include\log4cxx\appenderskeleton.hpp,main\include\log4cxx\appenderskeleton.hpp:<global>,,false,1,180,<global>,,,1,
63347,METHOD,main\include\log4cxx\asyncappender.hpp:<global>,TYPE_DECL,<global>,1,36,main\include\log4cxx\asyncappender.hpp,main\include\log4cxx\asyncappender.hpp:<global>,,false,1,198,<global>,,,1,
63364,METHOD,main\include\log4cxx\basicconfigurator.hpp:<global>,TYPE_DECL,<global>,1,38,main\include\log4cxx\basicconfigurator.hpp,main\include\log4cxx\basicconfigurator.hpp:<global>,,false,1,68,<global>,,,1,
63377,METHOD,main\include\log4cxx\config\propertysetter.hpp:<global>,TYPE_DECL,<global>,1,41,main\include\log4cxx\config\propertysetter.hpp,main\include\log4cxx\config\propertysetter.hpp:<global>,,false,1,117,<global>,,,1,
63395,METHOD,main\include\log4cxx\consoleappender.hpp:<global>,TYPE_DECL,<global>,1,37,main\include\log4cxx\consoleappender.hpp,main\include\log4cxx\consoleappender.hpp:<global>,,false,1,120,<global>,,,1,
63415,METHOD,main\include\log4cxx\db\dbappender.hpp:<global>,TYPE_DECL,<global>,1,34,main\include\log4cxx\db\dbappender.hpp,main\include\log4cxx\db\dbappender.hpp:<global>,,false,1,184,<global>,,,1,
63438,METHOD,main\include\log4cxx\db\odbcappender.hpp:<global>,TYPE_DECL,<global>,1,37,main\include\log4cxx\db\odbcappender.hpp,main\include\log4cxx\db\odbcappender.hpp:<global>,,false,1,285,<global>,,,1,
63454,METHOD,main\include\log4cxx\defaultconfigurator.hpp:<global>,TYPE_DECL,<global>,1,40,main\include\log4cxx\defaultconfigurator.hpp,main\include\log4cxx\defaultconfigurator.hpp:<global>,,false,1,111,<global>,,,1,
63465,METHOD,main\include\log4cxx\defaultloggerfactory.hpp:<global>,TYPE_DECL,<global>,1,42,main\include\log4cxx\defaultloggerfactory.hpp,main\include\log4cxx\defaultloggerfactory.hpp:<global>,,false,1,43,<global>,,,1,
63478,METHOD,main\include\log4cxx\file.hpp:<global>,TYPE_DECL,<global>,1,25,main\include\log4cxx\file.hpp,main\include\log4cxx\file.hpp:<global>,,false,1,202,<global>,,,1,
63500,METHOD,main\include\log4cxx\fileappender.hpp:<global>,TYPE_DECL,<global>,1,6,main\include\log4cxx\fileappender.hpp,main\include\log4cxx\fileappender.hpp:<global>,,false,1,235,<global>,,,1,
63514,METHOD,main\include\log4cxx\filter\andfilter.hpp:<global>,TYPE_DECL,<global>,1,6,main\include\log4cxx\filter\andfilter.hpp,main\include\log4cxx\filter\andfilter.hpp:<global>,,false,1,101,<global>,,,1,
63525,METHOD,main\include\log4cxx\filter\denyallfilter.hpp:<global>,TYPE_DECL,<global>,1,43,main\include\log4cxx\filter\denyallfilter.hpp,main\include\log4cxx\filter\denyallfilter.hpp:<global>,,false,1,65,<global>,,,1,
63536,METHOD,main\include\log4cxx\filter\expressionfilter.hpp:<global>,TYPE_DECL,<global>,1,6,main\include\log4cxx\filter\expressionfilter.hpp,main\include\log4cxx\filter\expressionfilter.hpp:<global>,,false,1,120,<global>,,,1,
63551,METHOD,main\include\log4cxx\filter\levelmatchfilter.hpp:<global>,TYPE_DECL,<global>,1,46,main\include\log4cxx\filter\levelmatchfilter.hpp,main\include\log4cxx\filter\levelmatchfilter.hpp:<global>,,false,1,96,<global>,,,1,
63565,METHOD,main\include\log4cxx\filter\levelrangefilter.hpp:<global>,TYPE_DECL,<global>,1,46,main\include\log4cxx\filter\levelrangefilter.hpp,main\include\log4cxx\filter\levelrangefilter.hpp:<global>,,false,1,133,<global>,,,1,
63576,METHOD,main\include\log4cxx\filter\locationinfofilter.hpp:<global>,TYPE_DECL,<global>,1,6,main\include\log4cxx\filter\locationinfofilter.hpp,main\include\log4cxx\filter\locationinfofilter.hpp:<global>,,false,1,99,<global>,,,1,
63589,METHOD,main\include\log4cxx\filter\loggermatchfilter.hpp:<global>,TYPE_DECL,<global>,1,47,main\include\log4cxx\filter\loggermatchfilter.hpp,main\include\log4cxx\filter\loggermatchfilter.hpp:<global>,,false,1,96,<global>,,,1,
63601,METHOD,main\include\log4cxx\filter\mapfilter.hpp:<global>,TYPE_DECL,<global>,1,37,main\include\log4cxx\filter\mapfilter.hpp,main\include\log4cxx\filter\mapfilter.hpp:<global>,,false,1,97,<global>,,,1,
63614,METHOD,main\include\log4cxx\filter\propertyfilter.hpp:<global>,TYPE_DECL,<global>,1,6,main\include\log4cxx\filter\propertyfilter.hpp,main\include\log4cxx\filter\propertyfilter.hpp:<global>,,false,1,71,<global>,,,1,
63624,METHOD,main\include\log4cxx\filter\stringmatchfilter.hpp:<global>,TYPE_DECL,<global>,1,47,main\include\log4cxx\filter\stringmatchfilter.hpp,main\include\log4cxx\filter\stringmatchfilter.hpp:<global>,,false,1,93,<global>,,,1,
63635,METHOD,main\include\log4cxx\fmtlayout.hpp:<global>,TYPE_DECL,<global>,1,29,main\include\log4cxx\fmtlayout.hpp,main\include\log4cxx\fmtlayout.hpp:<global>,,false,1,284,<global>,,,1,
63645,METHOD,main\include\log4cxx\helpers\absolutetimedateformat.hpp:<global>,TYPE_DECL,<global>,1,54,main\include\log4cxx\helpers\absolutetimedateformat.hpp,main\include\log4cxx\helpers\absolutetimedateformat.hpp:<global>,,false,1,40,<global>,,,1,
63663,METHOD,main\include\log4cxx\helpers\appenderattachableimpl.hpp:<global>,TYPE_DECL,<global>,1,52,main\include\log4cxx\helpers\appenderattachableimpl.hpp,main\include\log4cxx\helpers\appenderattachableimpl.hpp:<global>,,false,1,117,<global>,,,1,
63687,METHOD,main\include\log4cxx\helpers\aprinitializer.hpp:<global>,TYPE_DECL,<global>,1,42,main\include\log4cxx\helpers\aprinitializer.hpp,main\include\log4cxx\helpers\aprinitializer.hpp:<global>,,false,1,96,<global>,,,1,
63695,METHOD,LOG4CXX_NS.helpers.APRInitializer,TYPE_DECL,static log4cxx_time_t initialize();,25,36,main\include\log4cxx\helpers\aprinitializer.hpp,LOG4CXX_NS.helpers.APRInitializer.initialize,,false,47,47,initialize,,,1,log4cxx_time_t LOG4CXX_NS.helpers.APRInitializer.initialize ()
63699,METHOD,LOG4CXX_NS.helpers.APRInitializer,TYPE_DECL,static apr_pool_t* getRootPool();,20,34,main\include\log4cxx\helpers\aprinitializer.hpp,LOG4CXX_NS.helpers.APRInitializer.getRootPool,,false,48,48,getRootPool,,,2,apr_pool_t* LOG4CXX_NS.helpers.APRInitializer.getRootPool ()
63703,METHOD,LOG4CXX_NS.helpers.APRInitializer,TYPE_DECL,static apr_threadkey_t* getTlsKey();,25,37,main\include\log4cxx\helpers\aprinitializer.hpp,LOG4CXX_NS.helpers.APRInitializer.getTlsKey,,false,49,49,getTlsKey,,,3,apr_threadkey_t* LOG4CXX_NS.helpers.APRInitializer.getTlsKey ()
63708,METHOD,LOG4CXX_NS.helpers.APRInitializer,TYPE_DECL,static void registerCleanup(FileWatchdog* watchdog);,15,53,main\include\log4cxx\helpers\aprinitializer.hpp,LOG4CXX_NS.helpers.APRInitializer.registerCleanup,,false,57,57,registerCleanup,,,5,void LOG4CXX_NS.helpers.APRInitializer.registerCleanup (FileWatchdog*)
63713,METHOD,LOG4CXX_NS.helpers.APRInitializer,TYPE_DECL,static void unregisterCleanup(FileWatchdog* watchdog);,15,55,main\include\log4cxx\helpers\aprinitializer.hpp,LOG4CXX_NS.helpers.APRInitializer.unregisterCleanup,,false,58,58,unregisterCleanup,,,6,void LOG4CXX_NS.helpers.APRInitializer.unregisterCleanup (FileWatchdog*)
63718,METHOD,LOG4CXX_NS.helpers.APRInitializer,TYPE_DECL,static void unregisterAll();,15,29,main\include\log4cxx\helpers\aprinitializer.hpp,LOG4CXX_NS.helpers.APRInitializer.unregisterAll,,false,59,59,unregisterAll,,,7,void LOG4CXX_NS.helpers.APRInitializer.unregisterAll ()
63722,METHOD,LOG4CXX_NS.helpers.APRInitializer,TYPE_DECL,"static void setUnique(const std::shared_ptr<T>& pObject)
		{
			getInstance().addObject(typeid(T).hash_code(), pObject);
		}",22,3,main\include\log4cxx\helpers\aprinitializer.hpp,LOG4CXX_NS.helpers.APRInitializer.setUnique,,false,63,66,setUnique,,,8,void LOG4CXX_NS.helpers.APRInitializer.setUnique<T> (ANY)
63737,METHOD,LOG4CXX_NS.helpers.APRInitializer,TYPE_DECL,"static std::shared_ptr<T> getOrAddUnique(std::function<ObjectPtr()> creator)
		{
			return cast<T>(getInstance().findOrAddObject(typeid(T).hash_code(), creator));
		}",22,3,main\include\log4cxx\helpers\aprinitializer.hpp,LOG4CXX_NS.helpers.APRInitializer.getOrAddUnique,,false,70,73,getOrAddUnique,,,9,shared_ptr<T> LOG4CXX_NS.helpers.APRInitializer.getOrAddUnique<T> (ANY)
63758,METHOD,LOG4CXX_NS.helpers.APRInitializer,TYPE_DECL,APRInitializer();,3,18,main\include\log4cxx\helpers\aprinitializer.hpp,LOG4CXX_NS.helpers.APRInitializer.APRInitializer,,false,78,78,APRInitializer,,,11,ANY LOG4CXX_NS.helpers.APRInitializer.APRInitializer ()
63762,METHOD,LOG4CXX_NS.helpers.APRInitializer,TYPE_DECL,APRInitializer(const APRInitializer&) = delete;,3,49,main\include\log4cxx\helpers\aprinitializer.hpp,LOG4CXX_NS.helpers.APRInitializer.APRInitializer,,false,79,79,APRInitializer,,,12,ANY LOG4CXX_NS.helpers.APRInitializer.APRInitializer (APRInitializer)
63767,METHOD,LOG4CXX_NS.helpers.APRInitializer,TYPE_DECL,APRInitializer& operator=(const APRInitializer&) = delete;,3,60,main\include\log4cxx\helpers\aprinitializer.hpp,LOG4CXX_NS.helpers.APRInitializer.operator =,,false,80,80,operator =,,,13,APRInitializer LOG4CXX_NS.helpers.APRInitializer.operator = (APRInitializer)
63772,METHOD,LOG4CXX_NS.helpers.APRInitializer,TYPE_DECL,"void addObject(size_t key, const ObjectPtr& pObject);",8,54,main\include\log4cxx\helpers\aprinitializer.hpp,LOG4CXX_NS.helpers.APRInitializer.addObject,,false,82,82,addObject,,,14,"void LOG4CXX_NS.helpers.APRInitializer.addObject (size_t,ObjectPtr)"
63778,METHOD,LOG4CXX_NS.helpers.APRInitializer,TYPE_DECL,"const ObjectPtr& findOrAddObject(size_t key, std::function<ObjectPtr()> creator);",18,82,main\include\log4cxx\helpers\aprinitializer.hpp,LOG4CXX_NS.helpers.APRInitializer.findOrAddObject,,false,83,83,findOrAddObject,,,15,"ObjectPtr LOG4CXX_NS.helpers.APRInitializer.findOrAddObject (size_t,ANY)"
63784,METHOD,LOG4CXX_NS.helpers.APRInitializer,TYPE_DECL,void stopWatchDogs();,8,22,main\include\log4cxx\helpers\aprinitializer.hpp,LOG4CXX_NS.helpers.APRInitializer.stopWatchDogs,,false,84,84,stopWatchDogs,,,16,void LOG4CXX_NS.helpers.APRInitializer.stopWatchDogs ()
63789,METHOD,LOG4CXX_NS.helpers.APRInitializer,TYPE_DECL,~APRInitializer();,3,19,main\include\log4cxx\helpers\aprinitializer.hpp,LOG4CXX_NS.helpers.APRInitializer.~APRInitializer,,false,91,91,~APRInitializer,,,18,ANY LOG4CXX_NS.helpers.APRInitializer.~APRInitializer ()
63798,METHOD,main\include\log4cxx\helpers\bufferedwriter.hpp:<global>,TYPE_DECL,<global>,1,42,main\include\log4cxx\helpers\bufferedwriter.hpp,main\include\log4cxx\helpers\bufferedwriter.hpp:<global>,,false,1,62,<global>,,,1,
63810,METHOD,main\include\log4cxx\helpers\bytearrayinputstream.hpp:<global>,TYPE_DECL,<global>,1,48,main\include\log4cxx\helpers\bytearrayinputstream.hpp,main\include\log4cxx\helpers\bytearrayinputstream.hpp:<global>,,false,1,85,<global>,,,1,
63824,METHOD,main\include\log4cxx\helpers\bytearrayoutputstream.hpp:<global>,TYPE_DECL,<global>,1,49,main\include\log4cxx\helpers\bytearrayoutputstream.hpp,main\include\log4cxx\helpers\bytearrayoutputstream.hpp:<global>,,false,1,66,<global>,,,1,
63839,METHOD,main\include\log4cxx\helpers\bytebuffer.hpp:<global>,TYPE_DECL,<global>,1,38,main\include\log4cxx\helpers\bytebuffer.hpp,main\include\log4cxx\helpers\bytebuffer.hpp:<global>,,false,1,66,<global>,,,1,
63849,METHOD,main\include\log4cxx\helpers\cacheddateformat.hpp:<global>,TYPE_DECL,<global>,1,47,main\include\log4cxx\helpers\cacheddateformat.hpp,main\include\log4cxx\helpers\cacheddateformat.hpp:<global>,,false,1,194,<global>,,,1,
63859,METHOD,main\include\log4cxx\helpers\charsetdecoder.hpp:<global>,TYPE_DECL,<global>,1,42,main\include\log4cxx\helpers\charsetdecoder.hpp,main\include\log4cxx\helpers\charsetdecoder.hpp:<global>,,false,1,115,<global>,,,1,
63874,METHOD,main\include\log4cxx\helpers\charsetencoder.hpp:<global>,TYPE_DECL,<global>,1,42,main\include\log4cxx\helpers\charsetencoder.hpp,main\include\log4cxx\helpers\charsetencoder.hpp:<global>,,false,1,143,<global>,,,1,
63889,METHOD,main\include\log4cxx\helpers\class.hpp:<global>,TYPE_DECL,<global>,1,33,main\include\log4cxx\helpers\class.hpp,main\include\log4cxx\helpers\class.hpp:<global>,,false,1,54,<global>,,,1,
63900,METHOD,main\include\log4cxx\helpers\classregistration.hpp:<global>,TYPE_DECL,<global>,1,45,main\include\log4cxx\helpers\classregistration.hpp,main\include\log4cxx\helpers\classregistration.hpp:<global>,,false,1,41,<global>,,,1,
63913,METHOD,main\include\log4cxx\helpers\cyclicbuffer.hpp:<global>,TYPE_DECL,<global>,1,40,main\include\log4cxx\helpers\cyclicbuffer.hpp,main\include\log4cxx\helpers\cyclicbuffer.hpp:<global>,,false,1,88,<global>,,,1,
63925,METHOD,main\include\log4cxx\helpers\datagrampacket.hpp:<global>,TYPE_DECL,<global>,1,42,main\include\log4cxx\helpers\datagrampacket.hpp,main\include\log4cxx\helpers\datagrampacket.hpp:<global>,,false,1,111,<global>,,,1,
63942,METHOD,main\include\log4cxx\helpers\datagramsocket.hpp:<global>,TYPE_DECL,<global>,1,43,main\include\log4cxx\helpers\datagramsocket.hpp,main\include\log4cxx\helpers\datagramsocket.hpp:<global>,,false,1,109,<global>,,,1,
63959,METHOD,main\include\log4cxx\helpers\date.hpp:<global>,TYPE_DECL,<global>,1,6,main\include\log4cxx\helpers\date.hpp,main\include\log4cxx\helpers\date.hpp:<global>,,false,1,87,<global>,,,1,
63970,METHOD,main\include\log4cxx\helpers\dateformat.hpp:<global>,TYPE_DECL,<global>,1,39,main\include\log4cxx\helpers\dateformat.hpp,main\include\log4cxx\helpers\dateformat.hpp:<global>,,false,1,93,<global>,,,1,
63981,METHOD,main\include\log4cxx\helpers\datetimedateformat.hpp:<global>,TYPE_DECL,<global>,1,50,main\include\log4cxx\helpers\datetimedateformat.hpp,main\include\log4cxx\helpers\datetimedateformat.hpp:<global>,,false,1,42,<global>,,,1,
63995,METHOD,main\include\log4cxx\helpers\exception.hpp:<global>,TYPE_DECL,<global>,1,38,main\include\log4cxx\helpers\exception.hpp,main\include\log4cxx\helpers\exception.hpp:<global>,,false,1,290,<global>,,,1,
64013,METHOD,LOG4CXX_NS.helpers.NoSuchElementException,TYPE_DECL,NoSuchElementException();,3,26,main\include\log4cxx\helpers\exception.hpp,LOG4CXX_NS.helpers.NoSuchElementException.NoSuchElementException,,false,196,196,NoSuchElementException,,,1,ANY LOG4CXX_NS.helpers.NoSuchElementException.NoSuchElementException ()
64017,METHOD,LOG4CXX_NS.helpers.NoSuchElementException,TYPE_DECL,NoSuchElementException(const NoSuchElementException&);,3,55,main\include\log4cxx\helpers\exception.hpp,LOG4CXX_NS.helpers.NoSuchElementException.NoSuchElementException,,false,197,197,NoSuchElementException,,,2,ANY LOG4CXX_NS.helpers.NoSuchElementException.NoSuchElementException (NoSuchElementException)
64022,METHOD,LOG4CXX_NS.helpers.NoSuchElementException,TYPE_DECL,NoSuchElementException& operator=(const NoSuchElementException&);,25,66,main\include\log4cxx\helpers\exception.hpp,LOG4CXX_NS.helpers.NoSuchElementException.operator =,,false,198,198,operator =,,,3,NoSuchElementException LOG4CXX_NS.helpers.NoSuchElementException.operator = (NoSuchElementException)
64028,METHOD,LOG4CXX_NS.helpers.IllegalStateException,TYPE_DECL,IllegalStateException();,3,25,main\include\log4cxx\helpers\exception.hpp,LOG4CXX_NS.helpers.IllegalStateException.IllegalStateException,,false,204,204,IllegalStateException,,,1,ANY LOG4CXX_NS.helpers.IllegalStateException.IllegalStateException ()
64032,METHOD,LOG4CXX_NS.helpers.IllegalStateException,TYPE_DECL,IllegalStateException(const IllegalStateException&);,3,53,main\include\log4cxx\helpers\exception.hpp,LOG4CXX_NS.helpers.IllegalStateException.IllegalStateException,,false,205,205,IllegalStateException,,,2,ANY LOG4CXX_NS.helpers.IllegalStateException.IllegalStateException (IllegalStateException)
64037,METHOD,LOG4CXX_NS.helpers.IllegalStateException,TYPE_DECL,IllegalStateException& operator=(const IllegalStateException&);,24,64,main\include\log4cxx\helpers\exception.hpp,LOG4CXX_NS.helpers.IllegalStateException.operator =,,false,206,206,operator =,,,3,IllegalStateException LOG4CXX_NS.helpers.IllegalStateException.operator = (IllegalStateException)
64059,METHOD,main\include\log4cxx\helpers\fileinputstream.hpp:<global>,TYPE_DECL,<global>,1,43,main\include\log4cxx\helpers\fileinputstream.hpp,main\include\log4cxx\helpers\fileinputstream.hpp:<global>,,false,1,96,<global>,,,1,
64074,METHOD,main\include\log4cxx\helpers\fileoutputstream.hpp:<global>,TYPE_DECL,<global>,1,44,main\include\log4cxx\helpers\fileoutputstream.hpp,main\include\log4cxx\helpers\fileoutputstream.hpp:<global>,,false,1,69,<global>,,,1,
64097,METHOD,main\include\log4cxx\helpers\filewatchdog.hpp:<global>,TYPE_DECL,<global>,1,41,main\include\log4cxx\helpers\filewatchdog.hpp,main\include\log4cxx\helpers\filewatchdog.hpp:<global>,,false,1,88,<global>,,,1,
64113,METHOD,main\include\log4cxx\helpers\inetaddress.hpp:<global>,TYPE_DECL,<global>,1,40,main\include\log4cxx\helpers\inetaddress.hpp,main\include\log4cxx\helpers\inetaddress.hpp:<global>,,false,1,92,<global>,,,1,
64118,METHOD,LOG4CXX_NS.helpers.UnknownHostException,TYPE_DECL,UnknownHostException(const LogString& msg);,3,44,main\include\log4cxx\helpers\inetaddress.hpp,LOG4CXX_NS.helpers.UnknownHostException.UnknownHostException,,false,33,33,UnknownHostException,,,1,ANY LOG4CXX_NS.helpers.UnknownHostException.UnknownHostException (LogString)
64123,METHOD,LOG4CXX_NS.helpers.UnknownHostException,TYPE_DECL,UnknownHostException(const UnknownHostException& src);,3,55,main\include\log4cxx\helpers\inetaddress.hpp,LOG4CXX_NS.helpers.UnknownHostException.UnknownHostException,,false,34,34,UnknownHostException,,,2,ANY LOG4CXX_NS.helpers.UnknownHostException.UnknownHostException (UnknownHostException)
64128,METHOD,LOG4CXX_NS.helpers.UnknownHostException,TYPE_DECL,UnknownHostException& operator=(const UnknownHostException& src);,23,66,main\include\log4cxx\helpers\inetaddress.hpp,LOG4CXX_NS.helpers.UnknownHostException.operator =,,false,35,35,operator =,,,3,UnknownHostException LOG4CXX_NS.helpers.UnknownHostException.operator = (UnknownHostException)
64142,METHOD,main\include\log4cxx\helpers\inputstream.hpp:<global>,TYPE_DECL,<global>,1,39,main\include\log4cxx\helpers\inputstream.hpp,main\include\log4cxx\helpers\inputstream.hpp:<global>,,false,1,73,<global>,,,1,
64158,METHOD,main\include\log4cxx\helpers\inputstreamreader.hpp:<global>,TYPE_DECL,<global>,1,45,main\include\log4cxx\helpers\inputstreamreader.hpp,main\include\log4cxx\helpers\inputstreamreader.hpp:<global>,,false,1,98,<global>,,,1,
64171,METHOD,main\include\log4cxx\helpers\integer.hpp:<global>,TYPE_DECL,<global>,1,6,main\include\log4cxx\helpers\integer.hpp,main\include\log4cxx\helpers\integer.hpp:<global>,,false,1,54,<global>,,,1,
64182,METHOD,main\include\log4cxx\helpers\iso8601dateformat.hpp:<global>,TYPE_DECL,<global>,1,50,main\include\log4cxx\helpers\iso8601dateformat.hpp,main\include\log4cxx\helpers\iso8601dateformat.hpp:<global>,,false,1,45,<global>,,,1,
64198,METHOD,main\include\log4cxx\helpers\loader.hpp:<global>,TYPE_DECL,<global>,1,34,main\include\log4cxx\helpers\loader.hpp,main\include\log4cxx\helpers\loader.hpp:<global>,,false,1,43,<global>,,,1,
64211,METHOD,main\include\log4cxx\helpers\locale.hpp:<global>,TYPE_DECL,<global>,1,35,main\include\log4cxx\helpers\locale.hpp,main\include\log4cxx\helpers\locale.hpp:<global>,,false,1,50,<global>,,,1,
64227,METHOD,main\include\log4cxx\helpers\loglog.hpp:<global>,TYPE_DECL,<global>,1,35,main\include\log4cxx\helpers\loglog.hpp,main\include\log4cxx\helpers\loglog.hpp:<global>,,false,1,115,<global>,,,1,
64241,METHOD,main\include\log4cxx\helpers\messagebuffer.hpp:<global>,TYPE_DECL,<global>,1,7,main\include\log4cxx\helpers\messagebuffer.hpp,main\include\log4cxx\helpers\messagebuffer.hpp:<global>,,false,1,910,<global>,,,1,
64245,METHOD,main\include\log4cxx\helpers\messagebuffer.hpp:<global>,TYPE_DECL,typedef std::ios_base& (*ios_base_manip)(std::ios_base&);,22,56,main\include\log4cxx\helpers\messagebuffer.hpp,LOG4CXX_NS.helpers.ios_base_manip,,false,32,32,ios_base_manip,,,1,ANY LOG4CXX_NS.helpers.ios_base_manip (ANY)
64251,METHOD,main\include\log4cxx\helpers\messagebuffer.hpp:<global>,TYPE_DECL,"std::basic_ostream<char>& operator<<(CharMessageBuffer& os, const V& val)
{
	return ((std::basic_ostream<char>&) os) << val;
}",1,1,main\include\log4cxx\helpers\messagebuffer.hpp,LOG4CXX_NS.helpers.operator <<,,false,208,211,operator <<,,,3,"basic_ostream<char> LOG4CXX_NS.helpers.operator <<<V> (CharMessageBuffer,V)"
64276,METHOD,main\include\log4cxx\helpers\object.hpp:<global>,TYPE_DECL,<global>,1,2,main\include\log4cxx\helpers\object.hpp,main\include\log4cxx\helpers\object.hpp:<global>,,false,1,168,<global>,,,1,
64285,METHOD,main\include\log4cxx\helpers\object.hpp:<global>,TYPE_DECL,"std::shared_ptr<Ret> cast(const std::shared_ptr<Type>& incoming)
{
	if(!incoming)
	{
		return std::shared_ptr<Ret>();
	}

	Ret* casted = reinterpret_cast<Ret*>(const_cast<void*>(incoming->cast(Ret::getStaticClass())));

	if ( casted )
	{
		return std::shared_ptr<Ret>( incoming, casted );
	}

	return std::shared_ptr<Ret>();
}",1,1,main\include\log4cxx\helpers\object.hpp,LOG4CXX_NS.cast,,false,127,142,cast,,,4,"shared_ptr<Ret> LOG4CXX_NS.cast<Ret,Type,bool=std::is_base_of<Ret,helpers::Object>::value,bool=std::is_base_of<Type,helpers::Object>::value> (ANY)"
64340,METHOD,main\include\log4cxx\helpers\onlyonceerrorhandler.hpp:<global>,TYPE_DECL,<global>,1,52,main\include\log4cxx\helpers\onlyonceerrorhandler.hpp,main\include\log4cxx\helpers\onlyonceerrorhandler.hpp:<global>,,false,1,110,<global>,,,1,
64352,METHOD,main\include\log4cxx\helpers\optionconverter.hpp:<global>,TYPE_DECL,<global>,1,44,main\include\log4cxx\helpers\optionconverter.hpp,main\include\log4cxx\helpers\optionconverter.hpp:<global>,,false,1,187,<global>,,,1,
64372,METHOD,main\include\log4cxx\helpers\outputstream.hpp:<global>,TYPE_DECL,<global>,1,40,main\include\log4cxx\helpers\outputstream.hpp,main\include\log4cxx\helpers\outputstream.hpp:<global>,,false,1,60,<global>,,,1,
64388,METHOD,main\include\log4cxx\helpers\outputstreamwriter.hpp:<global>,TYPE_DECL,<global>,1,46,main\include\log4cxx\helpers\outputstreamwriter.hpp,main\include\log4cxx\helpers\outputstreamwriter.hpp:<global>,,false,1,67,<global>,,,1,
64401,METHOD,main\include\log4cxx\helpers\pool.hpp:<global>,TYPE_DECL,<global>,1,32,main\include\log4cxx\helpers\pool.hpp,main\include\log4cxx\helpers\pool.hpp:<global>,,false,1,59,<global>,,,1,
64422,METHOD,main\include\log4cxx\helpers\properties.hpp:<global>,TYPE_DECL,<global>,1,37,main\include\log4cxx\helpers\properties.hpp,main\include\log4cxx\helpers\properties.hpp:<global>,,false,1,175,<global>,,,1,
64436,METHOD,main\include\log4cxx\helpers\propertyresourcebundle.hpp:<global>,TYPE_DECL,<global>,1,54,main\include\log4cxx\helpers\propertyresourcebundle.hpp,main\include\log4cxx\helpers\propertyresourcebundle.hpp:<global>,,false,1,61,<global>,,,1,
64447,METHOD,main\include\log4cxx\helpers\reader.hpp:<global>,TYPE_DECL,<global>,1,34,main\include\log4cxx\helpers\reader.hpp,main\include\log4cxx\helpers\reader.hpp:<global>,,false,1,73,<global>,,,1,
64458,METHOD,main\include\log4cxx\helpers\relativetimedateformat.hpp:<global>,TYPE_DECL,<global>,1,54,main\include\log4cxx\helpers\relativetimedateformat.hpp,main\include\log4cxx\helpers\relativetimedateformat.hpp:<global>,,false,1,47,<global>,,,1,
64468,METHOD,main\include\log4cxx\helpers\resourcebundle.hpp:<global>,TYPE_DECL,<global>,1,7,main\include\log4cxx\helpers\resourcebundle.hpp,main\include\log4cxx\helpers\resourcebundle.hpp:<global>,,false,1,90,<global>,,,1,
64483,METHOD,main\include\log4cxx\helpers\serversocket.hpp:<global>,TYPE_DECL,<global>,1,41,main\include\log4cxx\helpers\serversocket.hpp,main\include\log4cxx\helpers\serversocket.hpp:<global>,,false,1,66,<global>,,,1,
64502,METHOD,main\include\log4cxx\helpers\simpledateformat.hpp:<global>,TYPE_DECL,<global>,1,47,main\include\log4cxx\helpers\simpledateformat.hpp,main\include\log4cxx\helpers\simpledateformat.hpp:<global>,,false,1,108,<global>,,,1,
64517,METHOD,main\include\log4cxx\helpers\socket.hpp:<global>,TYPE_DECL,<global>,1,35,main\include\log4cxx\helpers\socket.hpp,main\include\log4cxx\helpers\socket.hpp:<global>,,false,1,79,<global>,,,1,
64535,METHOD,main\include\log4cxx\helpers\socketoutputstream.hpp:<global>,TYPE_DECL,<global>,1,49,main\include\log4cxx\helpers\socketoutputstream.hpp,main\include\log4cxx\helpers\socketoutputstream.hpp:<global>,,false,1,62,<global>,,,1,
64547,METHOD,main\include\log4cxx\helpers\strftimedateformat.hpp:<global>,TYPE_DECL,<global>,1,49,main\include\log4cxx\helpers\strftimedateformat.hpp,main\include\log4cxx\helpers\strftimedateformat.hpp:<global>,,false,1,64,<global>,,,1,
64557,METHOD,main\include\log4cxx\helpers\strictmath.hpp:<global>,TYPE_DECL,<global>,1,38,main\include\log4cxx\helpers\strictmath.hpp,main\include\log4cxx\helpers\strictmath.hpp:<global>,,false,1,49,<global>,,,1,
64562,METHOD,LOG4CXX_NS.helpers.StrictMath,TYPE_DECL,"static inline const _type&
		minimum(const _type& a, const _type& b)
		{
			return (a < b) ? a : b;
		}",28,3,main\include\log4cxx\helpers\strictmath.hpp,LOG4CXX_NS.helpers.StrictMath.minimum,,false,34,38,minimum,,,1,"_type LOG4CXX_NS.helpers.StrictMath.minimum<_type> (_type,_type)"
64575,METHOD,LOG4CXX_NS.helpers.StrictMath,TYPE_DECL,"static inline const _type&
		maximum(const _type& a, const _type& b)
		{
			return (a > b) ? a : b;
		}",28,3,main\include\log4cxx\helpers\strictmath.hpp,LOG4CXX_NS.helpers.StrictMath.maximum,,false,40,44,maximum,,,2,"_type LOG4CXX_NS.helpers.StrictMath.maximum<_type> (_type,_type)"
64595,METHOD,main\include\log4cxx\helpers\stringhelper.hpp:<global>,TYPE_DECL,<global>,1,41,main\include\log4cxx\helpers\stringhelper.hpp,main\include\log4cxx\helpers\stringhelper.hpp:<global>,,false,1,61,<global>,,,1,
64608,METHOD,main\include\log4cxx\helpers\stringtokenizer.hpp:<global>,TYPE_DECL,<global>,1,44,main\include\log4cxx\helpers\stringtokenizer.hpp,main\include\log4cxx\helpers\stringtokenizer.hpp:<global>,,false,1,46,<global>,,,1,
64622,METHOD,main\include\log4cxx\helpers\syslogwriter.hpp:<global>,TYPE_DECL,<global>,1,65,main\include\log4cxx\helpers\syslogwriter.hpp,main\include\log4cxx\helpers\syslogwriter.hpp:<global>,,false,1,47,<global>,,,1,
64634,METHOD,main\include\log4cxx\helpers\system.hpp:<global>,TYPE_DECL,<global>,1,34,main\include\log4cxx\helpers\system.hpp,main\include\log4cxx\helpers\system.hpp:<global>,,false,1,53,<global>,,,1,
64645,METHOD,main\include\log4cxx\helpers\systemerrwriter.hpp:<global>,TYPE_DECL,<global>,1,43,main\include\log4cxx\helpers\systemerrwriter.hpp,main\include\log4cxx\helpers\systemerrwriter.hpp:<global>,,false,1,60,<global>,,,1,
64655,METHOD,main\include\log4cxx\helpers\systemoutwriter.hpp:<global>,TYPE_DECL,<global>,1,43,main\include\log4cxx\helpers\systemoutwriter.hpp,main\include\log4cxx\helpers\systemoutwriter.hpp:<global>,,false,1,59,<global>,,,1,
64663,METHOD,main\include\log4cxx\helpers\tchar.hpp:<global>,TYPE_DECL,<global>,1,33,main\include\log4cxx\helpers\tchar.hpp,main\include\log4cxx\helpers\tchar.hpp:<global>,,false,1,171,<global>,,,1,
64672,METHOD,main\include\log4cxx\helpers\threadlocal.hpp:<global>,TYPE_DECL,<global>,1,40,main\include\log4cxx\helpers\threadlocal.hpp,main\include\log4cxx\helpers\threadlocal.hpp:<global>,,false,1,86,<global>,,,1,
64685,METHOD,main\include\log4cxx\helpers\threadspecificdata.hpp:<global>,TYPE_DECL,<global>,1,6,main\include\log4cxx\helpers\threadspecificdata.hpp,main\include\log4cxx\helpers\threadspecificdata.hpp:<global>,,false,1,66,<global>,,,1,
64703,METHOD,main\include\log4cxx\helpers\threadutility.hpp:<global>,TYPE_DECL,<global>,1,1,main\include\log4cxx\helpers\threadutility.hpp,main\include\log4cxx\helpers\threadutility.hpp:<global>,,false,1,161,<global>,,,1,
64725,METHOD,main\include\log4cxx\helpers\timezone.hpp:<global>,TYPE_DECL,<global>,1,36,main\include\log4cxx\helpers\timezone.hpp,main\include\log4cxx\helpers\timezone.hpp:<global>,,false,1,70,<global>,,,1,
64738,METHOD,main\include\log4cxx\helpers\transcoder.hpp:<global>,TYPE_DECL,<global>,1,38,main\include\log4cxx\helpers\transcoder.hpp,main\include\log4cxx\helpers\transcoder.hpp:<global>,,false,1,383,<global>,,,1,
64750,METHOD,main\include\log4cxx\helpers\transform.hpp:<global>,TYPE_DECL,<global>,1,38,main\include\log4cxx\helpers\transform.hpp,main\include\log4cxx\helpers\transform.hpp:<global>,,false,1,61,<global>,,,1,
64762,METHOD,main\include\log4cxx\helpers\widelife.hpp:<global>,TYPE_DECL,<global>,1,36,main\include\log4cxx\helpers\widelife.hpp,main\include\log4cxx\helpers\widelife.hpp:<global>,,false,1,93,<global>,,,1,
64767,METHOD,LOG4CXX_NS.helpers.WideLife,TYPE_DECL,"WideLife()
	{		
		new(&storage) T();
	}",2,2,main\include\log4cxx\helpers\widelife.hpp,LOG4CXX_NS.helpers.WideLife.WideLife,,false,39,42,WideLife,,,1,ANY LOG4CXX_NS.helpers.WideLife.WideLife ()
64775,METHOD,LOG4CXX_NS.helpers.WideLife,TYPE_DECL,"WideLife(Arg0&& arg0, Args&&... args)
	{		
		new(&storage) T(std::forward<Arg0>(arg0), std::forward<Args>(args)...);
	}",2,2,main\include\log4cxx\helpers\widelife.hpp,LOG4CXX_NS.helpers.WideLife.WideLife,,false,47,50,WideLife,,,2,"ANY LOG4CXX_NS.helpers.WideLife.WideLife<Arg0,Args> (Arg0,Args)"
64799,METHOD,LOG4CXX_NS.helpers.WideLife,TYPE_DECL,"~WideLife()
	{
#if LOG4CXX_EVENTS_AT_EXIT
		// keep the holded value alive
#else
		value().~T();
#endif
	}",2,2,main\include\log4cxx\helpers\widelife.hpp,LOG4CXX_NS.helpers.WideLife.~WideLife,,false,52,59,~WideLife,,,3,ANY LOG4CXX_NS.helpers.WideLife.~WideLife ()
64807,METHOD,LOG4CXX_NS.helpers.WideLife,TYPE_DECL,"T& value()
	{
		return *reinterpret_cast<T*>(&storage);
	}",2,2,main\include\log4cxx\helpers\widelife.hpp,LOG4CXX_NS.helpers.WideLife.value,,false,61,64,value,,,4,T LOG4CXX_NS.helpers.WideLife.value ()
64817,METHOD,LOG4CXX_NS.helpers.WideLife,TYPE_DECL,"const T& value() const
	{
		return *reinterpret_cast<const T*>(&storage);
	}",2,2,main\include\log4cxx\helpers\widelife.hpp,LOG4CXX_NS.helpers.WideLife.value,,false,66,69,value,,,5,T LOG4CXX_NS.helpers.WideLife.value ()
64827,METHOD,LOG4CXX_NS.helpers.WideLife,TYPE_DECL,"operator T&()
	{
		return value();
	}",2,2,main\include\log4cxx\helpers\widelife.hpp,LOG4CXX_NS.helpers.WideLife.operator #0 &,,false,71,74,operator #0 &,,,6,ANY LOG4CXX_NS.helpers.WideLife.operator #0 & ()
64833,METHOD,LOG4CXX_NS.helpers.WideLife,TYPE_DECL,"operator const T&() const
	{
		return value();
	}",2,2,main\include\log4cxx\helpers\widelife.hpp,LOG4CXX_NS.helpers.WideLife.operator const #0 &,,false,76,79,operator const #0 &,,,7,ANY LOG4CXX_NS.helpers.WideLife.operator const #0 & ()
64840,METHOD,LOG4CXX_NS.helpers.WideLife,TYPE_DECL,WideLife(const WideLife& other) = delete;,2,42,main\include\log4cxx\helpers\widelife.hpp,LOG4CXX_NS.helpers.WideLife.WideLife,,false,84,84,WideLife,,,9,ANY LOG4CXX_NS.helpers.WideLife.WideLife (WideLife)
64845,METHOD,LOG4CXX_NS.helpers.WideLife,TYPE_DECL,WideLife(const WideLife&& other) = delete;,2,43,main\include\log4cxx\helpers\widelife.hpp,LOG4CXX_NS.helpers.WideLife.WideLife,,false,85,85,WideLife,,,10,ANY LOG4CXX_NS.helpers.WideLife.WideLife (WideLife)
64850,METHOD,LOG4CXX_NS.helpers.WideLife,TYPE_DECL,WideLife& operator=(const WideLife& other) = delete;,2,53,main\include\log4cxx\helpers\widelife.hpp,LOG4CXX_NS.helpers.WideLife.operator =,,false,87,87,operator =,,,11,WideLife LOG4CXX_NS.helpers.WideLife.operator = (WideLife)
64855,METHOD,LOG4CXX_NS.helpers.WideLife,TYPE_DECL,WideLife& operator=(const WideLife&& other) = delete;,2,54,main\include\log4cxx\helpers\widelife.hpp,LOG4CXX_NS.helpers.WideLife.operator =,,false,88,88,operator =,,,12,WideLife LOG4CXX_NS.helpers.WideLife.operator = (WideLife)
64860,METHOD,<empty>,<empty>,<empty>,1,,main\include\log4cxx\helpers\widelife.hpp,LOG4CXX_NS.helpers.WideLife:<clinit>,,false,36,,<clinit>,,,13,
64874,METHOD,main\include\log4cxx\helpers\writer.hpp:<global>,TYPE_DECL,<global>,1,34,main\include\log4cxx\helpers\writer.hpp,main\include\log4cxx\helpers\writer.hpp:<global>,,false,1,60,<global>,,,1,
64889,METHOD,main\include\log4cxx\helpers\xml.hpp:<global>,TYPE_DECL,<global>,1,33,main\include\log4cxx\helpers\xml.hpp,main\include\log4cxx\helpers\xml.hpp:<global>,,false,1,118,<global>,,,1,
64916,METHOD,main\include\log4cxx\hexdump.hpp:<global>,TYPE_DECL,<global>,1,27,main\include\log4cxx\hexdump.hpp,main\include\log4cxx\hexdump.hpp:<global>,,false,1,57,<global>,,,1,
64924,METHOD,<empty>,<empty>,<empty>,1,,main\include\log4cxx\hexdump.hpp,LOG4CXX_NS.HexdumpFlags:<clinit>,,false,27,,<clinit>,,,5,
64943,METHOD,main\include\log4cxx\hexdump.hpp:<global>,TYPE_DECL,"inline bool operator&(HexdumpFlags a, HexdumpFlags b){
	return !!(static_cast<uint32_t>(a) & static_cast<uint32_t>(b));
}",1,1,main\include\log4cxx\hexdump.hpp,LOG4CXX_NS.operator &,,false,34,36,operator &,,,2,"bool LOG4CXX_NS.operator & (HexdumpFlags,HexdumpFlags)"
64959,METHOD,main\include\log4cxx\hexdump.hpp:<global>,TYPE_DECL,"inline HexdumpFlags operator|(HexdumpFlags a, HexdumpFlags b){
	return static_cast<HexdumpFlags>(static_cast<uint32_t>(a) | static_cast<uint32_t>(b));
}",1,1,main\include\log4cxx\hexdump.hpp,LOG4CXX_NS.operator |,,false,38,40,operator |,,,3,"HexdumpFlags LOG4CXX_NS.operator | (HexdumpFlags,HexdumpFlags)"
64976,METHOD,main\include\log4cxx\hexdump.hpp:<global>,TYPE_DECL,"LogString hexdump(const void* bytes, uint32_t len, HexdumpFlags flags = HexdumpFlags::None);",11,91,main\include\log4cxx\hexdump.hpp,LOG4CXX_NS.hexdump,,false,54,54,hexdump,,,5,"LogString LOG4CXX_NS.hexdump (void*,uint32_t,HexdumpFlags)"
65002,METHOD,main\include\log4cxx\hierarchy.hpp:<global>,TYPE_DECL,<global>,1,29,main\include\log4cxx\hierarchy.hpp,main\include\log4cxx\hierarchy.hpp:<global>,,false,1,310,<global>,,,1,
65015,METHOD,main\include\log4cxx\htmllayout.hpp:<global>,TYPE_DECL,<global>,1,32,main\include\log4cxx\htmllayout.hpp,main\include\log4cxx\htmllayout.hpp:<global>,,false,1,120,<global>,,,1,
65029,METHOD,main\include\log4cxx\jsonlayout.hpp:<global>,TYPE_DECL,<global>,1,32,main\include\log4cxx\jsonlayout.hpp,main\include\log4cxx\jsonlayout.hpp:<global>,,false,1,136,<global>,,,1,
65043,METHOD,main\include\log4cxx\layout.hpp:<global>,TYPE_DECL,<global>,1,27,main\include\log4cxx\layout.hpp,main\include\log4cxx\layout.hpp:<global>,,false,1,88,<global>,,,1,
65059,METHOD,main\include\log4cxx\level.hpp:<global>,TYPE_DECL,<global>,1,25,main\include\log4cxx\level.hpp,main\include\log4cxx\level.hpp:<global>,,false,1,303,<global>,,,1,
65072,METHOD,main\include\log4cxx\levelchange.hpp:<global>,TYPE_DECL,<global>,1,35,main\include\log4cxx\levelchange.hpp,main\include\log4cxx\levelchange.hpp:<global>,,false,1,84,<global>,,,1,
65078,METHOD,LOG4CXX_NS.LevelChange,TYPE_DECL,"LevelChange(const LoggerPtr& otherCategory, const LevelPtr& level)
		: m_otherCategory(otherCategory)
		, m_savedLevel(otherCategory->getLevel())
	{
		m_otherCategory->setLevel(level);
	}",2,2,main\include\log4cxx\levelchange.hpp,LOG4CXX_NS.LevelChange.LevelChange,,false,47,52,LevelChange,,,3,"ANY LOG4CXX_NS.LevelChange.LevelChange (LoggerPtr,LevelPtr)"
65089,METHOD,LOG4CXX_NS.LevelChange,TYPE_DECL,"LevelChange(const LoggerPtr& otherCategory, const LoggerPtr& thisCategory)
		: LevelChange(otherCategory, m_otherCategory->getLevel())
	{
	}",2,2,main\include\log4cxx\levelchange.hpp,LOG4CXX_NS.LevelChange.LevelChange,,false,54,57,LevelChange,,,4,"ANY LOG4CXX_NS.LevelChange.LevelChange (LoggerPtr,LoggerPtr)"
65095,METHOD,LOG4CXX_NS.LevelChange,TYPE_DECL,"LevelChange(const StringType& otherCategory, const LevelPtr& level)
		: LevelChange(LogManager::getLogger(otherCategory), level)
	{
	}",2,2,main\include\log4cxx\levelchange.hpp,LOG4CXX_NS.LevelChange.LevelChange,,false,60,63,LevelChange,,,5,"ANY LOG4CXX_NS.LevelChange.LevelChange<StringType> (StringType,LevelPtr)"
65101,METHOD,LOG4CXX_NS.LevelChange,TYPE_DECL,"LevelChange(const StringType& otherCategory, const LoggerPtr& thisCategory)
		: LevelChange(LogManager::getLogger(otherCategory), thisCategory->getLevel())
	{
	}",2,2,main\include\log4cxx\levelchange.hpp,LOG4CXX_NS.LevelChange.LevelChange,,false,66,69,LevelChange,,,6,"ANY LOG4CXX_NS.LevelChange.LevelChange<StringType> (StringType,LoggerPtr)"
65107,METHOD,LOG4CXX_NS.LevelChange,TYPE_DECL,"~LevelChange()
	{
		m_otherCategory->setLevel(m_savedLevel);
	}",2,2,main\include\log4cxx\levelchange.hpp,LOG4CXX_NS.LevelChange.~LevelChange,,false,71,74,~LevelChange,,,7,ANY LOG4CXX_NS.LevelChange.~LevelChange ()
65116,METHOD,LOG4CXX_NS.LevelChange,TYPE_DECL,LevelChange(const LevelChange&) = delete;,2,42,main\include\log4cxx\levelchange.hpp,LOG4CXX_NS.LevelChange.LevelChange,,false,76,76,LevelChange,,,8,ANY LOG4CXX_NS.LevelChange.LevelChange (LevelChange)
65121,METHOD,LOG4CXX_NS.LevelChange,TYPE_DECL,LevelChange(LevelChange&&) = delete;,2,37,main\include\log4cxx\levelchange.hpp,LOG4CXX_NS.LevelChange.LevelChange,,false,77,77,LevelChange,,,9,ANY LOG4CXX_NS.LevelChange.LevelChange (LevelChange)
65126,METHOD,LOG4CXX_NS.LevelChange,TYPE_DECL,LevelChange& operator=(const LevelChange&) = delete;,2,53,main\include\log4cxx\levelchange.hpp,LOG4CXX_NS.LevelChange.operator =,,false,78,78,operator =,,,10,LevelChange LOG4CXX_NS.LevelChange.operator = (LevelChange)
65131,METHOD,LOG4CXX_NS.LevelChange,TYPE_DECL,LevelChange& operator=(LevelChange&&) = delete;,2,48,main\include\log4cxx\levelchange.hpp,LOG4CXX_NS.LevelChange.operator =,,false,79,79,operator =,,,11,LevelChange LOG4CXX_NS.LevelChange.operator = (LevelChange)
65159,METHOD,main\include\log4cxx\logger.hpp:<global>,TYPE_DECL,<global>,1,26,main\include\log4cxx\logger.hpp,main\include\log4cxx\logger.hpp:<global>,,false,1,2398,<global>,,,1,
65179,METHOD,main\include\log4cxx\loggerinstance.hpp:<global>,TYPE_DECL,<global>,1,38,main\include\log4cxx\loggerinstance.hpp,main\include\log4cxx\loggerinstance.hpp:<global>,,false,1,125,<global>,,,1,
65185,METHOD,LOG4CXX_NS.LoggerInstancePtr,TYPE_DECL,"LoggerInstancePtr() : m_hadConfiguration(false)
	{}",2,3,main\include\log4cxx\loggerinstance.hpp,LOG4CXX_NS.LoggerInstancePtr.LoggerInstancePtr,,false,52,53,LoggerInstancePtr,,,3,ANY LOG4CXX_NS.LoggerInstancePtr.LoggerInstancePtr ()
65189,METHOD,LOG4CXX_NS.LoggerInstancePtr,TYPE_DECL,"LoggerInstancePtr(const StringType& instanceName)
		: m_hadConfiguration(LogManager::exists(instanceName))
		, m_logger(LogManager::getLogger(instanceName))
	{
	}",2,2,main\include\log4cxx\loggerinstance.hpp,LOG4CXX_NS.LoggerInstancePtr.LoggerInstancePtr,,false,56,60,LoggerInstancePtr,,,4,ANY LOG4CXX_NS.LoggerInstancePtr.LoggerInstancePtr<StringType> (StringType)
65194,METHOD,LOG4CXX_NS.LoggerInstancePtr,TYPE_DECL,"~LoggerInstancePtr()
	{
		reset();
	}",2,2,main\include\log4cxx\loggerinstance.hpp,LOG4CXX_NS.LoggerInstancePtr.~LoggerInstancePtr,,false,62,65,~LoggerInstancePtr,,,5,ANY LOG4CXX_NS.LoggerInstancePtr.~LoggerInstancePtr ()
65199,METHOD,LOG4CXX_NS.LoggerInstancePtr,TYPE_DECL,"const LoggerPtr& operator->() const noexcept
	{
		return m_logger;
	}",2,2,main\include\log4cxx\loggerinstance.hpp,LOG4CXX_NS.LoggerInstancePtr.operator ->,,false,67,70,operator ->,,,6,LoggerPtr LOG4CXX_NS.LoggerInstancePtr.operator -> ()
65205,METHOD,LOG4CXX_NS.LoggerInstancePtr,TYPE_DECL,"explicit operator bool() const noexcept
	{
		return !!m_logger;
	}",2,2,main\include\log4cxx\loggerinstance.hpp,LOG4CXX_NS.LoggerInstancePtr.operator bool,,false,72,75,operator bool,,,7,ANY LOG4CXX_NS.LoggerInstancePtr.operator bool ()
65213,METHOD,LOG4CXX_NS.LoggerInstancePtr,TYPE_DECL,"operator LoggerPtr&() noexcept
	{
		return m_logger;
	}",2,2,main\include\log4cxx\loggerinstance.hpp,LOG4CXX_NS.LoggerInstancePtr.operator ? &,,false,77,80,operator ? &,,,8,ANY LOG4CXX_NS.LoggerInstancePtr.operator ? & ()
65219,METHOD,LOG4CXX_NS.LoggerInstancePtr,TYPE_DECL,"operator const LoggerPtr&() const noexcept
	{
		return m_logger;
	}",2,2,main\include\log4cxx\loggerinstance.hpp,LOG4CXX_NS.LoggerInstancePtr.operator const ? &,,false,82,85,operator const ? &,,,9,ANY LOG4CXX_NS.LoggerInstancePtr.operator const ? & ()
65225,METHOD,LOG4CXX_NS.LoggerInstancePtr,TYPE_DECL,"Logger* get() noexcept
	{
		return m_logger.get();
	}",2,2,main\include\log4cxx\loggerinstance.hpp,LOG4CXX_NS.LoggerInstancePtr.get,,false,87,90,get,,,10,Logger LOG4CXX_NS.LoggerInstancePtr.get ()
65234,METHOD,LOG4CXX_NS.LoggerInstancePtr,TYPE_DECL,"const Logger* get() const noexcept
	{
		return m_logger.get();
	}",2,2,main\include\log4cxx\loggerinstance.hpp,LOG4CXX_NS.LoggerInstancePtr.get,,false,92,95,get,,,11,Logger LOG4CXX_NS.LoggerInstancePtr.get ()
65243,METHOD,LOG4CXX_NS.LoggerInstancePtr,TYPE_DECL,"void reset()
	{
		if (m_logger && !m_hadConfiguration)
		{
			auto name = m_logger->getName();
			m_logger.reset(); // Decrease reference count
			LogManager::removeLogger(name);
		}
		else
		{
			m_hadConfiguration = false;
			m_logger.reset();
		}
	}",2,2,main\include\log4cxx\loggerinstance.hpp,LOG4CXX_NS.LoggerInstancePtr.reset,,false,98,111,reset,,,12,void LOG4CXX_NS.LoggerInstancePtr.reset ()
65278,METHOD,LOG4CXX_NS.LoggerInstancePtr,TYPE_DECL,"void reset(const StringType& instanceName)
	{
		reset();
		m_hadConfiguration = !!LogManager::exists(instanceName);
		m_logger = LogManager::getLogger(instanceName);
	}",2,2,main\include\log4cxx\loggerinstance.hpp,LOG4CXX_NS.LoggerInstancePtr.reset,,false,115,120,reset,,,13,void LOG4CXX_NS.LoggerInstancePtr.reset<StringType> (StringType)
65309,METHOD,main\include\log4cxx\logmanager.hpp:<global>,TYPE_DECL,<global>,1,31,main\include\log4cxx\logmanager.hpp,main\include\log4cxx\logmanager.hpp:<global>,,false,1,243,<global>,,,1,
65328,METHOD,main\include\log4cxx\logstring.hpp:<global>,TYPE_DECL,<global>,1,26,main\include\log4cxx\logstring.hpp,main\include\log4cxx\logstring.hpp:<global>,,false,1,77,<global>,,,1,
65341,METHOD,main\include\log4cxx\mdc.hpp:<global>,TYPE_DECL,<global>,1,24,main\include\log4cxx\mdc.hpp,main\include\log4cxx\mdc.hpp:<global>,,false,1,229,<global>,,,1,
65354,METHOD,main\include\log4cxx\ndc.hpp:<global>,TYPE_DECL,<global>,1,24,main\include\log4cxx\ndc.hpp,main\include\log4cxx\ndc.hpp:<global>,,false,1,297,<global>,,,1,
65367,METHOD,main\include\log4cxx\net\smtpappender.hpp:<global>,TYPE_DECL,<global>,1,29,main\include\log4cxx\net\smtpappender.hpp,main\include\log4cxx\net\smtpappender.hpp:<global>,,false,1,326,<global>,,,1,
65384,METHOD,main\include\log4cxx\net\socketappenderskeleton.hpp:<global>,TYPE_DECL,<global>,1,50,main\include\log4cxx\net\socketappenderskeleton.hpp,main\include\log4cxx\net\socketappenderskeleton.hpp:<global>,,false,1,176,<global>,,,1,
65396,METHOD,main\include\log4cxx\net\syslogappender.hpp:<global>,TYPE_DECL,<global>,1,41,main\include\log4cxx\net\syslogappender.hpp,main\include\log4cxx\net\syslogappender.hpp:<global>,,false,1,167,<global>,,,1,
65417,METHOD,main\include\log4cxx\net\telnetappender.hpp:<global>,TYPE_DECL,<global>,1,41,main\include\log4cxx\net\telnetappender.hpp,main\include\log4cxx\net\telnetappender.hpp:<global>,,false,1,162,<global>,,,1,
65434,METHOD,main\include\log4cxx\net\xmlsocketappender.hpp:<global>,TYPE_DECL,<global>,1,45,main\include\log4cxx\net\xmlsocketappender.hpp,main\include\log4cxx\net\xmlsocketappender.hpp:<global>,,false,1,161,<global>,,,1,
65445,METHOD,main\include\log4cxx\nt\nteventlogappender.hpp:<global>,TYPE_DECL,<global>,1,47,main\include\log4cxx\nt\nteventlogappender.hpp,main\include\log4cxx\nt\nteventlogappender.hpp:<global>,,false,1,122,<global>,,,1,
65456,METHOD,main\include\log4cxx\nt\outputdebugstringappender.hpp:<global>,TYPE_DECL,<global>,1,55,main\include\log4cxx\nt\outputdebugstringappender.hpp,main\include\log4cxx\nt\outputdebugstringappender.hpp:<global>,,false,1,50,<global>,,,1,
65466,METHOD,main\include\log4cxx\pattern\classnamepatternconverter.hpp:<global>,TYPE_DECL,<global>,1,6,main\include\log4cxx\pattern\classnamepatternconverter.hpp,main\include\log4cxx\pattern\classnamepatternconverter.hpp:<global>,,false,1,67,<global>,,,1,
65476,METHOD,main\include\log4cxx\pattern\colorendpatternconverter.hpp:<global>,TYPE_DECL,<global>,1,6,main\include\log4cxx\pattern\colorendpatternconverter.hpp,main\include\log4cxx\pattern\colorendpatternconverter.hpp:<global>,,false,1,64,<global>,,,1,
65486,METHOD,main\include\log4cxx\pattern\colorstartpatternconverter.hpp:<global>,TYPE_DECL,<global>,1,6,main\include\log4cxx\pattern\colorstartpatternconverter.hpp,main\include\log4cxx\pattern\colorstartpatternconverter.hpp:<global>,,false,1,76,<global>,,,1,
65502,METHOD,main\include\log4cxx\pattern\datepatternconverter.hpp:<global>,TYPE_DECL,<global>,1,7,main\include\log4cxx\pattern\datepatternconverter.hpp,main\include\log4cxx\pattern\datepatternconverter.hpp:<global>,,false,1,106,<global>,,,1,
65513,METHOD,main\include\log4cxx\pattern\filedatepatternconverter.hpp:<global>,TYPE_DECL,<global>,1,7,main\include\log4cxx\pattern\filedatepatternconverter.hpp,main\include\log4cxx\pattern\filedatepatternconverter.hpp:<global>,,false,1,58,<global>,,,1,
65523,METHOD,main\include\log4cxx\pattern\filelocationpatternconverter.hpp:<global>,TYPE_DECL,<global>,1,6,main\include\log4cxx\pattern\filelocationpatternconverter.hpp,main\include\log4cxx\pattern\filelocationpatternconverter.hpp:<global>,,false,1,64,<global>,,,1,
65535,METHOD,main\include\log4cxx\pattern\formattinginfo.hpp:<global>,TYPE_DECL,<global>,1,6,main\include\log4cxx\pattern\formattinginfo.hpp,main\include\log4cxx\pattern\formattinginfo.hpp:<global>,,false,1,101,<global>,,,1,
65548,METHOD,main\include\log4cxx\pattern\fulllocationpatternconverter.hpp:<global>,TYPE_DECL,<global>,1,7,main\include\log4cxx\pattern\fulllocationpatternconverter.hpp,main\include\log4cxx\pattern\fulllocationpatternconverter.hpp:<global>,,false,1,64,<global>,,,1,
65558,METHOD,main\include\log4cxx\pattern\integerpatternconverter.hpp:<global>,TYPE_DECL,<global>,1,7,main\include\log4cxx\pattern\integerpatternconverter.hpp,main\include\log4cxx\pattern\integerpatternconverter.hpp:<global>,,false,1,63,<global>,,,1,
65569,METHOD,main\include\log4cxx\pattern\levelpatternconverter.hpp:<global>,TYPE_DECL,<global>,1,7,main\include\log4cxx\pattern\levelpatternconverter.hpp,main\include\log4cxx\pattern\levelpatternconverter.hpp:<global>,,false,1,64,<global>,,,1,
65579,METHOD,main\include\log4cxx\pattern\linelocationpatternconverter.hpp:<global>,TYPE_DECL,<global>,1,6,main\include\log4cxx\pattern\linelocationpatternconverter.hpp,main\include\log4cxx\pattern\linelocationpatternconverter.hpp:<global>,,false,1,64,<global>,,,1,
65589,METHOD,main\include\log4cxx\pattern\lineseparatorpatternconverter.hpp:<global>,TYPE_DECL,<global>,1,7,main\include\log4cxx\pattern\lineseparatorpatternconverter.hpp,main\include\log4cxx\pattern\lineseparatorpatternconverter.hpp:<global>,,false,1,68,<global>,,,1,
65599,METHOD,main\include\log4cxx\pattern\literalpatternconverter.hpp:<global>,TYPE_DECL,<global>,1,7,main\include\log4cxx\pattern\literalpatternconverter.hpp,main\include\log4cxx\pattern\literalpatternconverter.hpp:<global>,,false,1,64,<global>,,,1,
65609,METHOD,main\include\log4cxx\pattern\loggerpatternconverter.hpp:<global>,TYPE_DECL,<global>,1,7,main\include\log4cxx\pattern\loggerpatternconverter.hpp,main\include\log4cxx\pattern\loggerpatternconverter.hpp:<global>,,false,1,65,<global>,,,1,
65621,METHOD,main\include\log4cxx\pattern\loggingeventpatternconverter.hpp:<global>,TYPE_DECL,<global>,1,6,main\include\log4cxx\pattern\loggingeventpatternconverter.hpp,main\include\log4cxx\pattern\loggingeventpatternconverter.hpp:<global>,,false,1,89,<global>,,,1,
65632,METHOD,main\include\log4cxx\pattern\mdcpatternconverter.hpp:<global>,TYPE_DECL,<global>,1,6,main\include\log4cxx\pattern\mdcpatternconverter.hpp,main\include\log4cxx\pattern\mdcpatternconverter.hpp:<global>,,false,1,63,<global>,,,1,
65642,METHOD,main\include\log4cxx\pattern\messagepatternconverter.hpp:<global>,TYPE_DECL,<global>,1,6,main\include\log4cxx\pattern\messagepatternconverter.hpp,main\include\log4cxx\pattern\messagepatternconverter.hpp:<global>,,false,1,62,<global>,,,1,
65652,METHOD,main\include\log4cxx\pattern\methodlocationpatternconverter.hpp:<global>,TYPE_DECL,<global>,1,6,main\include\log4cxx\pattern\methodlocationpatternconverter.hpp,main\include\log4cxx\pattern\methodlocationpatternconverter.hpp:<global>,,false,1,63,<global>,,,1,
65664,METHOD,main\include\log4cxx\pattern\nameabbreviator.hpp:<global>,TYPE_DECL,<global>,1,6,main\include\log4cxx\pattern\nameabbreviator.hpp,main\include\log4cxx\pattern\nameabbreviator.hpp:<global>,,false,1,83,<global>,,,1,
65680,METHOD,main\include\log4cxx\pattern\namepatternconverter.hpp:<global>,TYPE_DECL,<global>,1,6,main\include\log4cxx\pattern\namepatternconverter.hpp,main\include\log4cxx\pattern\namepatternconverter.hpp:<global>,,false,1,74,<global>,,,1,
65690,METHOD,main\include\log4cxx\pattern\ndcpatternconverter.hpp:<global>,TYPE_DECL,<global>,1,6,main\include\log4cxx\pattern\ndcpatternconverter.hpp,main\include\log4cxx\pattern\ndcpatternconverter.hpp:<global>,,false,1,62,<global>,,,1,
65704,METHOD,main\include\log4cxx\pattern\patternconverter.hpp:<global>,TYPE_DECL,<global>,1,8,main\include\log4cxx\pattern\patternconverter.hpp,main\include\log4cxx\pattern\patternconverter.hpp:<global>,,false,1,114,<global>,,,1,
65726,METHOD,main\include\log4cxx\pattern\patternparser.hpp:<global>,TYPE_DECL,<global>,1,6,main\include\log4cxx\pattern\patternparser.hpp,main\include\log4cxx\pattern\patternparser.hpp:<global>,,false,1,164,<global>,,,1,
65738,METHOD,main\include\log4cxx\pattern\propertiespatternconverter.hpp:<global>,TYPE_DECL,<global>,1,7,main\include\log4cxx\pattern\propertiespatternconverter.hpp,main\include\log4cxx\pattern\propertiespatternconverter.hpp:<global>,,false,1,75,<global>,,,1,
65748,METHOD,main\include\log4cxx\pattern\relativetimepatternconverter.hpp:<global>,TYPE_DECL,<global>,1,6,main\include\log4cxx\pattern\relativetimepatternconverter.hpp,main\include\log4cxx\pattern\relativetimepatternconverter.hpp:<global>,,false,1,66,<global>,,,1,
65758,METHOD,main\include\log4cxx\pattern\shortfilelocationpatternconverter.hpp:<global>,TYPE_DECL,<global>,1,6,main\include\log4cxx\pattern\shortfilelocationpatternconverter.hpp,main\include\log4cxx\pattern\shortfilelocationpatternconverter.hpp:<global>,,false,1,67,<global>,,,1,
65768,METHOD,main\include\log4cxx\pattern\threadpatternconverter.hpp:<global>,TYPE_DECL,<global>,1,7,main\include\log4cxx\pattern\threadpatternconverter.hpp,main\include\log4cxx\pattern\threadpatternconverter.hpp:<global>,,false,1,62,<global>,,,1,
65780,METHOD,main\include\log4cxx\pattern\threadusernamepatternconverter.hpp:<global>,TYPE_DECL,<global>,1,7,main\include\log4cxx\pattern\threadusernamepatternconverter.hpp,main\include\log4cxx\pattern\threadusernamepatternconverter.hpp:<global>,,false,1,53,<global>,,,1,
65790,METHOD,main\include\log4cxx\pattern\throwableinformationpatternconverter.hpp:<global>,TYPE_DECL,<global>,1,6,main\include\log4cxx\pattern\throwableinformationpatternconverter.hpp,main\include\log4cxx\pattern\throwableinformationpatternconverter.hpp:<global>,,false,1,74,<global>,,,1,
65806,METHOD,main\include\log4cxx\patternlayout.hpp:<global>,TYPE_DECL,<global>,1,34,main\include\log4cxx\patternlayout.hpp,main\include\log4cxx\patternlayout.hpp:<global>,,false,1,542,<global>,,,1,
65818,METHOD,main\include\log4cxx\private\action_priv.hpp:<global>,TYPE_DECL,<global>,1,37,main\include\log4cxx\private\action_priv.hpp,main\include\log4cxx\private\action_priv.hpp:<global>,,false,1,53,<global>,,,1,
65823,METHOD,LOG4CXX_NS.rolling.ActionPrivate,TYPE_DECL,"ActionPrivate() :
		complete(false),
		interrupted(false),
		pool() {}",2,11,main\include\log4cxx\private\action_priv.hpp,LOG4CXX_NS.rolling.ActionPrivate.ActionPrivate,,false,29,32,ActionPrivate,,,1,ANY LOG4CXX_NS.rolling.ActionPrivate.ActionPrivate ()
65827,METHOD,LOG4CXX_NS.rolling.ActionPrivate,TYPE_DECL,virtual ~ActionPrivate(){},2,27,main\include\log4cxx\private\action_priv.hpp,LOG4CXX_NS.rolling.ActionPrivate.~ActionPrivate,,false,34,34,~ActionPrivate,,,2,ANY LOG4CXX_NS.rolling.ActionPrivate.~ActionPrivate ()
65844,METHOD,main\include\log4cxx\private\appenderskeleton_priv.hpp:<global>,TYPE_DECL,<global>,1,43,main\include\log4cxx\private\appenderskeleton_priv.hpp,main\include\log4cxx\private\appenderskeleton_priv.hpp:<global>,,false,1,77,<global>,,,1,
65848,METHOD,LOG4CXX_NS.AppenderSkeletonPrivate,TYPE_DECL,"AppenderSkeletonPrivate() :
		threshold(Level::getAll()),
		errorHandler(std::make_shared<LOG4CXX_NS::helpers::OnlyOnceErrorHandler>()),
		closed(false) {}",2,18,main\include\log4cxx\private\appenderskeleton_priv.hpp,LOG4CXX_NS.AppenderSkeletonPrivate.AppenderSkeletonPrivate,,false,30,33,AppenderSkeletonPrivate,,,1,ANY LOG4CXX_NS.AppenderSkeletonPrivate.AppenderSkeletonPrivate ()
65852,METHOD,LOG4CXX_NS.AppenderSkeletonPrivate,TYPE_DECL,"AppenderSkeletonPrivate( LayoutPtr lay ) :
		layout( lay ),
		threshold(Level::getAll()),
		errorHandler(std::make_shared<LOG4CXX_NS::helpers::OnlyOnceErrorHandler>()),
		closed(false) {}",2,18,main\include\log4cxx\private\appenderskeleton_priv.hpp,LOG4CXX_NS.AppenderSkeletonPrivate.AppenderSkeletonPrivate,,false,35,39,AppenderSkeletonPrivate,,,2,ANY LOG4CXX_NS.AppenderSkeletonPrivate.AppenderSkeletonPrivate (LayoutPtr)
65857,METHOD,LOG4CXX_NS.AppenderSkeletonPrivate,TYPE_DECL,virtual ~AppenderSkeletonPrivate(){},2,37,main\include\log4cxx\private\appenderskeleton_priv.hpp,LOG4CXX_NS.AppenderSkeletonPrivate.~AppenderSkeletonPrivate,,false,41,41,~AppenderSkeletonPrivate,,,3,ANY LOG4CXX_NS.AppenderSkeletonPrivate.~AppenderSkeletonPrivate ()
65875,METHOD,main\include\log4cxx\private\aprdatagramsocket.hpp:<global>,TYPE_DECL,<global>,1,49,main\include\log4cxx\private\aprdatagramsocket.hpp,main\include\log4cxx\private\aprdatagramsocket.hpp:<global>,,false,1,59,<global>,,,1,
65881,METHOD,LOG4CXX_NS.helpers.APRDatagramSocket,TYPE_DECL,APRDatagramSocket();,2,20,main\include\log4cxx\private\aprdatagramsocket.hpp,LOG4CXX_NS.helpers.APRDatagramSocket.APRDatagramSocket,,false,32,32,APRDatagramSocket,,,2,ANY LOG4CXX_NS.helpers.APRDatagramSocket.APRDatagramSocket ()
65885,METHOD,LOG4CXX_NS.helpers.APRDatagramSocket,TYPE_DECL,APRDatagramSocket(int port);,2,28,main\include\log4cxx\private\aprdatagramsocket.hpp,LOG4CXX_NS.helpers.APRDatagramSocket.APRDatagramSocket,,false,34,34,APRDatagramSocket,,,3,ANY LOG4CXX_NS.helpers.APRDatagramSocket.APRDatagramSocket (int)
65890,METHOD,LOG4CXX_NS.helpers.APRDatagramSocket,TYPE_DECL,"APRDatagramSocket(int port, InetAddressPtr laddr);",2,50,main\include\log4cxx\private\aprdatagramsocket.hpp,LOG4CXX_NS.helpers.APRDatagramSocket.APRDatagramSocket,,false,36,36,APRDatagramSocket,,,4,"ANY LOG4CXX_NS.helpers.APRDatagramSocket.APRDatagramSocket (int,InetAddressPtr)"
65896,METHOD,LOG4CXX_NS.helpers.APRDatagramSocket,TYPE_DECL,"void bind(int lport, InetAddressPtr laddress) override;",7,55,main\include\log4cxx\private\aprdatagramsocket.hpp,LOG4CXX_NS.helpers.APRDatagramSocket.bind,,false,38,38,bind,,,5,"void LOG4CXX_NS.helpers.APRDatagramSocket.bind (int,InetAddressPtr)"
65902,METHOD,LOG4CXX_NS.helpers.APRDatagramSocket,TYPE_DECL,void close() override;,7,22,main\include\log4cxx\private\aprdatagramsocket.hpp,LOG4CXX_NS.helpers.APRDatagramSocket.close,,false,40,40,close,,,6,void LOG4CXX_NS.helpers.APRDatagramSocket.close ()
65906,METHOD,LOG4CXX_NS.helpers.APRDatagramSocket,TYPE_DECL,bool isClosed() const override;,7,31,main\include\log4cxx\private\aprdatagramsocket.hpp,LOG4CXX_NS.helpers.APRDatagramSocket.isClosed,,false,42,42,isClosed,,,7,bool LOG4CXX_NS.helpers.APRDatagramSocket.isClosed ()
65910,METHOD,LOG4CXX_NS.helpers.APRDatagramSocket,TYPE_DECL,virtual void receive(DatagramPacketPtr& p) override;,15,52,main\include\log4cxx\private\aprdatagramsocket.hpp,LOG4CXX_NS.helpers.APRDatagramSocket.receive,,false,45,45,receive,,,8,void LOG4CXX_NS.helpers.APRDatagramSocket.receive (DatagramPacketPtr)
65915,METHOD,LOG4CXX_NS.helpers.APRDatagramSocket,TYPE_DECL,virtual void  send(DatagramPacketPtr& p) override;,16,50,main\include\log4cxx\private\aprdatagramsocket.hpp,LOG4CXX_NS.helpers.APRDatagramSocket.send,,false,48,48,send,,,9,void LOG4CXX_NS.helpers.APRDatagramSocket.send (DatagramPacketPtr)
65920,METHOD,LOG4CXX_NS.helpers.APRDatagramSocket,TYPE_DECL,"virtual void connect(InetAddressPtr address, int port) override;",15,64,main\include\log4cxx\private\aprdatagramsocket.hpp,LOG4CXX_NS.helpers.APRDatagramSocket.connect,,false,50,50,connect,,,10,"void LOG4CXX_NS.helpers.APRDatagramSocket.connect (InetAddressPtr,int)"
65926,METHOD,LOG4CXX_NS.helpers.APRDatagramSocket,TYPE_DECL,void init();,7,12,main\include\log4cxx\private\aprdatagramsocket.hpp,LOG4CXX_NS.helpers.APRDatagramSocket.init,,false,53,53,init,,,11,void LOG4CXX_NS.helpers.APRDatagramSocket.init ()
65935,METHOD,main\include\log4cxx\private\aprserversocket.hpp:<global>,TYPE_DECL,<global>,1,46,main\include\log4cxx\private\aprserversocket.hpp,main\include\log4cxx\private\aprserversocket.hpp:<global>,,false,1,47,<global>,,,1,
65945,METHOD,main\include\log4cxx\private\aprsocket.hpp:<global>,TYPE_DECL,<global>,1,40,main\include\log4cxx\private\aprsocket.hpp,main\include\log4cxx\private\aprsocket.hpp:<global>,,false,1,51,<global>,,,1,
65958,METHOD,main\include\log4cxx\private\atexitregistry.hpp:<global>,TYPE_DECL,<global>,1,6,main\include\log4cxx\private\atexitregistry.hpp,main\include\log4cxx\private\atexitregistry.hpp:<global>,,false,1,64,<global>,,,1,
65968,METHOD,main\include\log4cxx\private\datagramsocket_priv.hpp:<global>,TYPE_DECL,<global>,1,42,main\include\log4cxx\private\datagramsocket_priv.hpp,main\include\log4cxx\private\datagramsocket_priv.hpp:<global>,,false,1,60,<global>,,,1,
65973,METHOD,LOG4CXX_NS.helpers.DatagramSocketPriv,TYPE_DECL,"DatagramSocketPriv()
		: port(0), localPort(0)
	{
	}",2,2,main\include\log4cxx\private\datagramsocket_priv.hpp,LOG4CXX_NS.helpers.DatagramSocketPriv.DatagramSocketPriv,,false,30,33,DatagramSocketPriv,,,1,ANY LOG4CXX_NS.helpers.DatagramSocketPriv.DatagramSocketPriv ()
65977,METHOD,LOG4CXX_NS.helpers.DatagramSocketPriv,TYPE_DECL,"DatagramSocketPriv(int localPort1)
		: port(0), localPort(localPort1)
	{
	}",2,2,main\include\log4cxx\private\datagramsocket_priv.hpp,LOG4CXX_NS.helpers.DatagramSocketPriv.DatagramSocketPriv,,false,35,38,DatagramSocketPriv,,,2,ANY LOG4CXX_NS.helpers.DatagramSocketPriv.DatagramSocketPriv (int)
65982,METHOD,LOG4CXX_NS.helpers.DatagramSocketPriv,TYPE_DECL,"DatagramSocketPriv(int localPort1, InetAddressPtr localAddress1)
		: localAddress(localAddress1), port(0), localPort(localPort1)
	{
	}",2,2,main\include\log4cxx\private\datagramsocket_priv.hpp,LOG4CXX_NS.helpers.DatagramSocketPriv.DatagramSocketPriv,,false,40,43,DatagramSocketPriv,,,3,"ANY LOG4CXX_NS.helpers.DatagramSocketPriv.DatagramSocketPriv (int,InetAddressPtr)"
65988,METHOD,LOG4CXX_NS.helpers.DatagramSocketPriv,TYPE_DECL,~DatagramSocketPriv() = default;,2,33,main\include\log4cxx\private\datagramsocket_priv.hpp,LOG4CXX_NS.helpers.DatagramSocketPriv.~DatagramSocketPriv,,false,45,45,~DatagramSocketPriv,,,4,ANY LOG4CXX_NS.helpers.DatagramSocketPriv.~DatagramSocketPriv ()
66003,METHOD,main\include\log4cxx\private\fileappender_priv.hpp:<global>,TYPE_DECL,<global>,1,6,main\include\log4cxx\private\fileappender_priv.hpp,main\include\log4cxx\private\fileappender_priv.hpp:<global>,,false,1,67,<global>,,,1,
66007,METHOD,LOG4CXX_NS.FileAppenderPriv,TYPE_DECL,"FileAppenderPriv
		( LayoutPtr _layout = LayoutPtr()
		, const LogString& _fileName = LogString()
		, bool _fileAppend = true
		, bool _bufferedIO = false
		, int _bufferSize = 8 * 1024
		)
		: WriterAppenderPriv(_layout)
		, fileAppend(_fileAppend)
		, fileName(_fileName)
		, bufferedIO(_bufferedIO)
		, bufferSize(_bufferSize)
		{}",2,4,main\include\log4cxx\private\fileappender_priv.hpp,LOG4CXX_NS.FileAppenderPriv.FileAppenderPriv,,false,29,41,FileAppenderPriv,,,1,"ANY LOG4CXX_NS.FileAppenderPriv.FileAppenderPriv (LayoutPtr,LogString,bool,bool,int)"
66025,METHOD,main\include\log4cxx\private\filter_priv.hpp:<global>,TYPE_DECL,<global>,1,6,main\include\log4cxx\private\filter_priv.hpp,main\include\log4cxx\private\filter_priv.hpp:<global>,,false,1,40,<global>,,,1,
66030,METHOD,LOG4CXX_NS.spi.FilterPrivate,TYPE_DECL,virtual ~FilterPrivate(){},2,27,main\include\log4cxx\private\filter_priv.hpp,LOG4CXX_NS.spi.FilterPrivate.~FilterPrivate,,false,29,29,~FilterPrivate,,,1,ANY LOG4CXX_NS.spi.FilterPrivate.~FilterPrivate ()
66038,METHOD,main\include\log4cxx\private\nteventlogappender_priv.hpp:<global>,TYPE_DECL,<global>,,,main\include\log4cxx\private\nteventlogappender_priv.hpp,main\include\log4cxx\private\nteventlogappender_priv.hpp:<global>,,false,,,<global>,,,1,
66057,METHOD,main\include\log4cxx\private\odbcappender_priv.hpp:<global>,TYPE_DECL,<global>,1,60,main\include\log4cxx\private\odbcappender_priv.hpp,main\include\log4cxx\private\odbcappender_priv.hpp:<global>,,false,1,143,<global>,,,1,
66068,METHOD,LOG4CXX_NS.db.ODBCAppenderPriv,TYPE_DECL,"ODBCAppenderPriv(
#if LOG4CXX_EVENTS_AT_EXIT
		std::function<void()> atExitActivated
#endif
			)
		: AppenderSkeletonPrivate()
		, connection(0)
		, env(0)
		, preparedStatement(0)
		, bufferSize(1)
		, timeZone(helpers::TimeZone::getDefault())
#if LOG4CXX_EVENTS_AT_EXIT
		, atExitRegistryRaii(std::move(atExitActivated))
#endif
		{}",2,4,main\include\log4cxx\private\odbcappender_priv.hpp,LOG4CXX_NS.db.ODBCAppenderPriv.ODBCAppenderPriv,,false,54,68,ODBCAppenderPriv,,,1,ANY LOG4CXX_NS.db.ODBCAppenderPriv.ODBCAppenderPriv ()
66092,METHOD,LOG4CXX_NS.db.ODBCAppenderPriv,TYPE_DECL,"void setPreparedStatement(SQLHDBC con, helpers::Pool& p);",7,57,main\include\log4cxx\private\odbcappender_priv.hpp,LOG4CXX_NS.db.ODBCAppenderPriv.setPreparedStatement,,false,131,131,setPreparedStatement,,,15,"void LOG4CXX_NS.db.ODBCAppenderPriv.setPreparedStatement (SQLHDBC,ANY)"
66098,METHOD,LOG4CXX_NS.db.ODBCAppenderPriv,TYPE_DECL,"void setParameterValues(const spi::LoggingEventPtr& event, helpers::Pool& p);",7,77,main\include\log4cxx\private\odbcappender_priv.hpp,LOG4CXX_NS.db.ODBCAppenderPriv.setParameterValues,,false,132,132,setParameterValues,,,16,"void LOG4CXX_NS.db.ODBCAppenderPriv.setParameterValues (ANY,ANY)"
66110,METHOD,main\include\log4cxx\private\patternconverter_priv.hpp:<global>,TYPE_DECL,<global>,1,47,main\include\log4cxx\private\patternconverter_priv.hpp,main\include\log4cxx\private\patternconverter_priv.hpp:<global>,,false,1,52,<global>,,,1,
66115,METHOD,LOG4CXX_NS.pattern.PatternConverterPrivate,TYPE_DECL,"PatternConverterPrivate( const LogString& _name, const LogString& _style ) :
		name(_name),
		style(_style) {}",2,18,main\include\log4cxx\private\patternconverter_priv.hpp,LOG4CXX_NS.pattern.PatternConverterPrivate.PatternConverterPrivate,,false,33,35,PatternConverterPrivate,,,1,"ANY LOG4CXX_NS.pattern.PatternConverterPrivate.PatternConverterPrivate (LogString,LogString)"
66121,METHOD,LOG4CXX_NS.pattern.PatternConverterPrivate,TYPE_DECL,virtual ~PatternConverterPrivate(){},2,37,main\include\log4cxx\private\patternconverter_priv.hpp,LOG4CXX_NS.pattern.PatternConverterPrivate.~PatternConverterPrivate,,false,37,37,~PatternConverterPrivate,,,2,ANY LOG4CXX_NS.pattern.PatternConverterPrivate.~PatternConverterPrivate ()
66138,METHOD,main\include\log4cxx\private\rollingpolicybase_priv.hpp:<global>,TYPE_DECL,<global>,1,46,main\include\log4cxx\private\rollingpolicybase_priv.hpp,main\include\log4cxx\private\rollingpolicybase_priv.hpp:<global>,,false,1,55,<global>,,,1,
66143,METHOD,LOG4CXX_NS.rolling.RollingPolicyBasePrivate,TYPE_DECL,virtual ~RollingPolicyBasePrivate() = default;,5,50,main\include\log4cxx\private\rollingpolicybase_priv.hpp,LOG4CXX_NS.rolling.RollingPolicyBasePrivate.~RollingPolicyBasePrivate,,false,31,31,~RollingPolicyBasePrivate,,,1,ANY LOG4CXX_NS.rolling.RollingPolicyBasePrivate.~RollingPolicyBasePrivate ()
66151,METHOD,<empty>,<empty>,<empty>,1,,main\include\log4cxx\private\rollingpolicybase_priv.hpp,LOG4CXX_NS.rolling.RollingPolicyBasePrivate:<clinit>,,false,30,,<clinit>,,,6,
66163,METHOD,main\include\log4cxx\private\serversocket_priv.hpp:<global>,TYPE_DECL,<global>,1,48,main\include\log4cxx\private\serversocket_priv.hpp,main\include\log4cxx\private\serversocket_priv.hpp:<global>,,false,1,38,<global>,,,1,
66168,METHOD,LOG4CXX_NS.helpers.ServerSocketPrivate,TYPE_DECL,"ServerSocketPrivate() :
		timeout(0){}",2,14,main\include\log4cxx\private\serversocket_priv.hpp,LOG4CXX_NS.helpers.ServerSocketPrivate.ServerSocketPrivate,,false,29,30,ServerSocketPrivate,,,1,ANY LOG4CXX_NS.helpers.ServerSocketPrivate.ServerSocketPrivate ()
66172,METHOD,LOG4CXX_NS.helpers.ServerSocketPrivate,TYPE_DECL,virtual ~ServerSocketPrivate() = default;,2,42,main\include\log4cxx\private\serversocket_priv.hpp,LOG4CXX_NS.helpers.ServerSocketPrivate.~ServerSocketPrivate,,false,31,31,~ServerSocketPrivate,,,2,ANY LOG4CXX_NS.helpers.ServerSocketPrivate.~ServerSocketPrivate ()
66182,METHOD,main\include\log4cxx\private\socket_priv.hpp:<global>,TYPE_DECL,<global>,1,42,main\include\log4cxx\private\socket_priv.hpp,main\include\log4cxx\private\socket_priv.hpp:<global>,,false,1,44,<global>,,,1,
66187,METHOD,LOG4CXX_NS.helpers.SocketPrivate,TYPE_DECL,"SocketPrivate(const InetAddressPtr& addr = InetAddressPtr(), int _port = 0)
		: address(addr), port(_port) {}",2,33,main\include\log4cxx\private\socket_priv.hpp,LOG4CXX_NS.helpers.SocketPrivate.SocketPrivate,,false,30,31,SocketPrivate,,,1,"ANY LOG4CXX_NS.helpers.SocketPrivate.SocketPrivate (InetAddressPtr,int)"
66193,METHOD,LOG4CXX_NS.helpers.SocketPrivate,TYPE_DECL,virtual ~SocketPrivate() = default;,2,36,main\include\log4cxx\private\socket_priv.hpp,LOG4CXX_NS.helpers.SocketPrivate.~SocketPrivate,,false,32,32,~SocketPrivate,,,2,ANY LOG4CXX_NS.helpers.SocketPrivate.~SocketPrivate ()
66208,METHOD,main\include\log4cxx\private\socketappenderskeleton_priv.hpp:<global>,TYPE_DECL,<global>,1,53,main\include\log4cxx\private\socketappenderskeleton_priv.hpp,main\include\log4cxx\private\socketappenderskeleton_priv.hpp:<global>,,false,1,79,<global>,,,1,
66213,METHOD,LOG4CXX_NS.net.SocketAppenderSkeletonPriv,TYPE_DECL,"SocketAppenderSkeletonPriv(int defaultPort, int reconnectionDelay) :
		AppenderSkeletonPrivate(),
		remoteHost(),
		address(),
		port(defaultPort),
		reconnectionDelay(reconnectionDelay),
		locationInfo(false),
		thread() {}",2,13,main\include\log4cxx\private\socketappenderskeleton_priv.hpp,LOG4CXX_NS.net.SocketAppenderSkeletonPriv.SocketAppenderSkeletonPriv,,false,31,38,SocketAppenderSkeletonPriv,,,1,"ANY LOG4CXX_NS.net.SocketAppenderSkeletonPriv.SocketAppenderSkeletonPriv (int,int)"
66219,METHOD,LOG4CXX_NS.net.SocketAppenderSkeletonPriv,TYPE_DECL,"SocketAppenderSkeletonPriv(helpers::InetAddressPtr address, int defaultPort, int reconnectionDelay) :
		AppenderSkeletonPrivate(),
		remoteHost(),
		address(address),
		port(defaultPort),
		reconnectionDelay(reconnectionDelay),
		locationInfo(false),
		thread() {}",2,13,main\include\log4cxx\private\socketappenderskeleton_priv.hpp,LOG4CXX_NS.net.SocketAppenderSkeletonPriv.SocketAppenderSkeletonPriv,,false,40,47,SocketAppenderSkeletonPriv,,,2,"ANY LOG4CXX_NS.net.SocketAppenderSkeletonPriv.SocketAppenderSkeletonPriv (ANY,int,int)"
66226,METHOD,LOG4CXX_NS.net.SocketAppenderSkeletonPriv,TYPE_DECL,"SocketAppenderSkeletonPriv(const LogString& host, int port, int delay) :
		AppenderSkeletonPrivate(),
		remoteHost(host),
		address(helpers::InetAddress::getByName(host)),
		port(port),
		reconnectionDelay(delay),
		locationInfo(false),
		thread() {}",2,13,main\include\log4cxx\private\socketappenderskeleton_priv.hpp,LOG4CXX_NS.net.SocketAppenderSkeletonPriv.SocketAppenderSkeletonPriv,,false,49,56,SocketAppenderSkeletonPriv,,,3,"ANY LOG4CXX_NS.net.SocketAppenderSkeletonPriv.SocketAppenderSkeletonPriv (LogString,int,int)"
66248,METHOD,main\include\log4cxx\private\string_c11.hpp:<global>,TYPE_DECL,<global>,1,25,main\include\log4cxx\private\string_c11.hpp,main\include\log4cxx\private\string_c11.hpp:<global>,,false,1,66,<global>,,,1,
66250,METHOD,main\include\log4cxx\private\string_c11.hpp:<global>,TYPE_DECL,"static size_t strnlen_s( const char *str, size_t strsz )
{
	size_t result = 0;
	if (!str)
		;
	else while (*str++ != 0 && result < strsz)
		++result;
	return result;
}",1,1,main\include\log4cxx\private\string_c11.hpp,strnlen_s,,false,31,39,strnlen_s,,,1,"size_t strnlen_s (char*,size_t)"
66280,METHOD,main\include\log4cxx\private\string_c11.hpp:<global>,TYPE_DECL,"static int strcat_s(char* destArg, size_t destsz, const char* src)
{
	if (!src || !destArg || RSIZE_MAX < destsz)
		return -1;
	if (0 == destsz)
		return -2;
	--destsz;
	char* dest = destArg;
	size_t index = 0;
	while (*dest && index < destsz)
		++index, ++dest;
	while (*src && index < destsz)
	{
		*dest++ = *src++;
		++index;
	}
	*dest = 0;
	if (*src) // longer than destsz?
	{
		*destArg = 0; // Do not return a partial result
		return -3;
	}
	return 0;
}",1,25,main\include\log4cxx\private\string_c11.hpp,strcat_s,,false,40,63,strcat_s,,,2,"int strcat_s (char*,size_t,char*)"
66380,METHOD,main\include\log4cxx\private\syslogappender_priv.hpp:<global>,TYPE_DECL,<global>,1,1,main\include\log4cxx\private\syslogappender_priv.hpp,main\include\log4cxx\private\syslogappender_priv.hpp:<global>,,false,1,97,<global>,,,1,
66385,METHOD,LOG4CXX_NS.net.SyslogAppenderPriv,TYPE_DECL,"SyslogAppenderPriv() :
		AppenderSkeletonPrivate(),
		syslogFacility(LOG_USER),
		facilityPrinting(false),
		maxMessageLength(1024)
	{

	}",2,17,main\include\log4cxx\private\syslogappender_priv.hpp,LOG4CXX_NS.net.SyslogAppenderPriv.SyslogAppenderPriv,,false,59,66,SyslogAppenderPriv,,,1,ANY LOG4CXX_NS.net.SyslogAppenderPriv.SyslogAppenderPriv ()
66389,METHOD,LOG4CXX_NS.net.SyslogAppenderPriv,TYPE_DECL,"SyslogAppenderPriv(const LayoutPtr& layout, int syslogFacility) :
		AppenderSkeletonPrivate (layout),
		syslogFacility(syslogFacility),
		facilityPrinting(false),
		maxMessageLength(1024)
	{

	}",2,2,main\include\log4cxx\private\syslogappender_priv.hpp,LOG4CXX_NS.net.SyslogAppenderPriv.SyslogAppenderPriv,,false,68,75,SyslogAppenderPriv,,,2,"ANY LOG4CXX_NS.net.SyslogAppenderPriv.SyslogAppenderPriv (LayoutPtr,int)"
66395,METHOD,LOG4CXX_NS.net.SyslogAppenderPriv,TYPE_DECL,"SyslogAppenderPriv(const LayoutPtr& layout,
		const LogString& syslogHost, int syslogFacility) :
		AppenderSkeletonPrivate(layout),
		syslogFacility(syslogFacility),
		facilityPrinting(false),
		maxMessageLength(1024)
	{

	}",2,2,main\include\log4cxx\private\syslogappender_priv.hpp,LOG4CXX_NS.net.SyslogAppenderPriv.SyslogAppenderPriv,,false,77,85,SyslogAppenderPriv,,,3,"ANY LOG4CXX_NS.net.SyslogAppenderPriv.SyslogAppenderPriv (LayoutPtr,LogString,int)"
66422,METHOD,main\include\log4cxx\private\writerappender_priv.hpp:<global>,TYPE_DECL,<global>,1,1,main\include\log4cxx\private\writerappender_priv.hpp,main\include\log4cxx\private\writerappender_priv.hpp:<global>,,false,1,108,<global>,,,1,
66426,METHOD,LOG4CXX_NS.WriterAppenderPriv,TYPE_DECL,"WriterAppenderPriv() :
		AppenderSkeletonPrivate(),
		immediateFlush(true)
#if LOG4CXX_EVENTS_AT_EXIT
		, atExitRegistryRaii([this]{atExitActivated();})
#endif
	{
	}",2,2,main\include\log4cxx\private\writerappender_priv.hpp,LOG4CXX_NS.WriterAppenderPriv.WriterAppenderPriv,,false,36,43,WriterAppenderPriv,,,1,ANY LOG4CXX_NS.WriterAppenderPriv.WriterAppenderPriv ()
66430,METHOD,LOG4CXX_NS.WriterAppenderPriv,TYPE_DECL,"WriterAppenderPriv(const LayoutPtr& layout1,
		LOG4CXX_NS::helpers::WriterPtr& writer1) :
		AppenderSkeletonPrivate(layout1),
		immediateFlush(true),
		writer(writer1)
#if LOG4CXX_EVENTS_AT_EXIT
		, atExitRegistryRaii([this]{atExitActivated();})
#endif
	{
	}",2,2,main\include\log4cxx\private\writerappender_priv.hpp,LOG4CXX_NS.WriterAppenderPriv.WriterAppenderPriv,,false,45,54,WriterAppenderPriv,,,2,"ANY LOG4CXX_NS.WriterAppenderPriv.WriterAppenderPriv (LayoutPtr,ANY)"
66436,METHOD,LOG4CXX_NS.WriterAppenderPriv,TYPE_DECL,"WriterAppenderPriv(const LayoutPtr& layout1) :
		AppenderSkeletonPrivate(layout1),
		immediateFlush(true)
#if LOG4CXX_EVENTS_AT_EXIT
		, atExitRegistryRaii([this]{atExitActivated();})
#endif
	{
	}",2,2,main\include\log4cxx\private\writerappender_priv.hpp,LOG4CXX_NS.WriterAppenderPriv.WriterAppenderPriv,,false,56,63,WriterAppenderPriv,,,3,ANY LOG4CXX_NS.WriterAppenderPriv.WriterAppenderPriv (LayoutPtr)
66441,METHOD,LOG4CXX_NS.WriterAppenderPriv,TYPE_DECL,"void atExitActivated()
	{
		std::lock_guard<std::recursive_mutex> lock(mutex);
		if (writer)
			writer->flush(pool);
	}",2,2,main\include\log4cxx\private\writerappender_priv.hpp,LOG4CXX_NS.WriterAppenderPriv.atExitActivated,,false,66,71,atExitActivated,,,4,void LOG4CXX_NS.WriterAppenderPriv.atExitActivated ()
66462,METHOD,main\include\log4cxx\propertyconfigurator.hpp:<global>,TYPE_DECL,<global>,1,41,main\include\log4cxx\propertyconfigurator.hpp,main\include\log4cxx\propertyconfigurator.hpp:<global>,,false,1,387,<global>,,,1,
66485,METHOD,main\include\log4cxx\provisionnode.hpp:<global>,TYPE_DECL,<global>,1,34,main\include\log4cxx\provisionnode.hpp,main\include\log4cxx\provisionnode.hpp:<global>,,false,1,35,<global>,,,1,
66502,METHOD,main\include\log4cxx\rolling\action.hpp:<global>,TYPE_DECL,<global>,1,7,main\include\log4cxx\rolling\action.hpp,main\include\log4cxx\rolling\action.hpp:<global>,,false,1,79,<global>,,,1,
66511,METHOD,LOG4CXX_NS.rolling.Action,TYPE_DECL,virtual ~Action();,11,19,main\include\log4cxx\rolling\action.hpp,LOG4CXX_NS.rolling.Action.~Action,,false,50,50,~Action,,,5,virtual LOG4CXX_NS.rolling.Action.~Action ()
66515,METHOD,LOG4CXX_NS.rolling.Action,TYPE_DECL,virtual bool execute(LOG4CXX_NS::helpers::Pool& pool) const = 0;,16,65,main\include\log4cxx\rolling\action.hpp,LOG4CXX_NS.rolling.Action.execute,,false,58,58,execute,,,6,bool LOG4CXX_NS.rolling.Action.execute (ANY)
66520,METHOD,LOG4CXX_NS.rolling.Action,TYPE_DECL,void run(LOG4CXX_NS::helpers::Pool& pool);,8,43,main\include\log4cxx\rolling\action.hpp,LOG4CXX_NS.rolling.Action.run,,false,60,60,run,,,7,void LOG4CXX_NS.rolling.Action.run (ANY)
66525,METHOD,LOG4CXX_NS.rolling.Action,TYPE_DECL,void close();,8,14,main\include\log4cxx\rolling\action.hpp,LOG4CXX_NS.rolling.Action.close,,false,62,62,close,,,8,void LOG4CXX_NS.rolling.Action.close ()
66529,METHOD,LOG4CXX_NS.rolling.Action,TYPE_DECL,bool isComplete() const;,8,25,main\include\log4cxx\rolling\action.hpp,LOG4CXX_NS.rolling.Action.isComplete,,false,68,68,isComplete,,,9,bool LOG4CXX_NS.rolling.Action.isComplete ()
66533,METHOD,LOG4CXX_NS.rolling.Action,TYPE_DECL,void reportException(const std::exception&);,8,45,main\include\log4cxx\rolling\action.hpp,LOG4CXX_NS.rolling.Action.reportException,,false,70,70,reportException,,,10,void LOG4CXX_NS.rolling.Action.reportException (ANY)
66546,METHOD,main\include\log4cxx\rolling\filerenameaction.hpp:<global>,TYPE_DECL,<global>,1,7,main\include\log4cxx\rolling\filerenameaction.hpp,main\include\log4cxx\rolling\filerenameaction.hpp:<global>,,false,1,59,<global>,,,1,
66555,METHOD,LOG4CXX_NS.rolling.FileRenameAction,TYPE_DECL,bool execute(LOG4CXX_NS::helpers::Pool& pool) const override;,8,62,main\include\log4cxx\rolling\filerenameaction.hpp,LOG4CXX_NS.rolling.FileRenameAction.execute,,false,52,52,execute,,,5,bool LOG4CXX_NS.rolling.FileRenameAction.execute (ANY)
66568,METHOD,main\include\log4cxx\rolling\filterbasedtriggeringpolicy.hpp:<global>,TYPE_DECL,<global>,1,6,main\include\log4cxx\rolling\filterbasedtriggeringpolicy.hpp,main\include\log4cxx\rolling\filterbasedtriggeringpolicy.hpp:<global>,,false,1,125,<global>,,,1,
66583,METHOD,main\include\log4cxx\rolling\fixedwindowrollingpolicy.hpp:<global>,TYPE_DECL,<global>,1,6,main\include\log4cxx\rolling\fixedwindowrollingpolicy.hpp,main\include\log4cxx\rolling\fixedwindowrollingpolicy.hpp:<global>,,false,1,155,<global>,,,1,
66598,METHOD,main\include\log4cxx\rolling\gzcompressaction.hpp:<global>,TYPE_DECL,<global>,1,7,main\include\log4cxx\rolling\gzcompressaction.hpp,main\include\log4cxx\rolling\gzcompressaction.hpp:<global>,,false,1,76,<global>,,,1,
66607,METHOD,LOG4CXX_NS.rolling.GZCompressAction,TYPE_DECL,~GZCompressAction();,3,21,main\include\log4cxx\rolling\gzcompressaction.hpp,LOG4CXX_NS.rolling.GZCompressAction.~GZCompressAction,,false,46,46,~GZCompressAction,,,5,ANY LOG4CXX_NS.rolling.GZCompressAction.~GZCompressAction ()
66611,METHOD,LOG4CXX_NS.rolling.GZCompressAction,TYPE_DECL,bool execute(LOG4CXX_NS::helpers::Pool& pool) const override;,8,62,main\include\log4cxx\rolling\gzcompressaction.hpp,LOG4CXX_NS.rolling.GZCompressAction.execute,,false,53,53,execute,,,6,bool LOG4CXX_NS.rolling.GZCompressAction.execute (ANY)
66616,METHOD,LOG4CXX_NS.rolling.GZCompressAction,TYPE_DECL,void setThrowIOExceptionOnForkFailure(bool throwIO);,8,53,main\include\log4cxx\rolling\gzcompressaction.hpp,LOG4CXX_NS.rolling.GZCompressAction.setThrowIOExceptionOnForkFailure,,false,64,64,setThrowIOExceptionOnForkFailure,,,7,void LOG4CXX_NS.rolling.GZCompressAction.setThrowIOExceptionOnForkFailure (bool)
66621,METHOD,LOG4CXX_NS.rolling.GZCompressAction,TYPE_DECL,GZCompressAction(const GZCompressAction&);,3,43,main\include\log4cxx\rolling\gzcompressaction.hpp,LOG4CXX_NS.rolling.GZCompressAction.GZCompressAction,,false,67,67,GZCompressAction,,,8,ANY LOG4CXX_NS.rolling.GZCompressAction.GZCompressAction (GZCompressAction)
66626,METHOD,LOG4CXX_NS.rolling.GZCompressAction,TYPE_DECL,GZCompressAction& operator=(const GZCompressAction&);,19,54,main\include\log4cxx\rolling\gzcompressaction.hpp,LOG4CXX_NS.rolling.GZCompressAction.operator =,,false,68,68,operator =,,,9,GZCompressAction LOG4CXX_NS.rolling.GZCompressAction.operator = (GZCompressAction)
66637,METHOD,main\include\log4cxx\rolling\manualtriggeringpolicy.hpp:<global>,TYPE_DECL,<global>,1,7,main\include\log4cxx\rolling\manualtriggeringpolicy.hpp,main\include\log4cxx\rolling\manualtriggeringpolicy.hpp:<global>,,false,1,88,<global>,,,1,
66660,METHOD,main\include\log4cxx\rolling\multiprocessrollingfileappender.hpp:<global>,TYPE_DECL,<global>,1,7,main\include\log4cxx\rolling\multiprocessrollingfileappender.hpp,main\include\log4cxx\rolling\multiprocessrollingfileappender.hpp:<global>,,false,1,159,<global>,,,1,
66681,METHOD,main\include\log4cxx\rolling\rollingfileappender.hpp:<global>,TYPE_DECL,<global>,1,7,main\include\log4cxx\rolling\rollingfileappender.hpp,main\include\log4cxx\rolling\rollingfileappender.hpp:<global>,,false,1,247,<global>,,,1,
66696,METHOD,main\include\log4cxx\rolling\rollingpolicy.hpp:<global>,TYPE_DECL,<global>,1,7,main\include\log4cxx\rolling\rollingpolicy.hpp,main\include\log4cxx\rolling\rollingpolicy.hpp:<global>,,false,1,87,<global>,,,1,
66719,METHOD,main\include\log4cxx\rolling\rollingpolicybase.hpp:<global>,TYPE_DECL,<global>,1,6,main\include\log4cxx\rolling\rollingpolicybase.hpp,main\include\log4cxx\rolling\rollingpolicybase.hpp:<global>,,false,1,132,<global>,,,1,
66732,METHOD,main\include\log4cxx\rolling\rolloverdescription.hpp:<global>,TYPE_DECL,<global>,1,7,main\include\log4cxx\rolling\rolloverdescription.hpp,main\include\log4cxx\rolling\rolloverdescription.hpp:<global>,,false,1,85,<global>,,,1,
66740,METHOD,LOG4CXX_NS.rolling.RolloverDescription,TYPE_DECL,"RolloverDescription(
			const LogString& activeFileName,
			const bool append,
			const ActionPtr& synchronous,
			const ActionPtr& asynchronous);",3,33,main\include\log4cxx\rolling\rolloverdescription.hpp,LOG4CXX_NS.rolling.RolloverDescription.RolloverDescription,,false,48,52,RolloverDescription,,,4,"ANY LOG4CXX_NS.rolling.RolloverDescription.RolloverDescription (LogString,bool,ActionPtr,ActionPtr)"
66748,METHOD,LOG4CXX_NS.rolling.RolloverDescription,TYPE_DECL,~RolloverDescription();,3,24,main\include\log4cxx\rolling\rolloverdescription.hpp,LOG4CXX_NS.rolling.RolloverDescription.~RolloverDescription,,false,54,54,~RolloverDescription,,,5,ANY LOG4CXX_NS.rolling.RolloverDescription.~RolloverDescription ()
66752,METHOD,LOG4CXX_NS.rolling.RolloverDescription,TYPE_DECL,LogString getActiveFileName() const;,13,37,main\include\log4cxx\rolling\rolloverdescription.hpp,LOG4CXX_NS.rolling.RolloverDescription.getActiveFileName,,false,60,60,getActiveFileName,,,6,LogString LOG4CXX_NS.rolling.RolloverDescription.getActiveFileName ()
66756,METHOD,LOG4CXX_NS.rolling.RolloverDescription,TYPE_DECL,bool getAppend() const;,8,24,main\include\log4cxx\rolling\rolloverdescription.hpp,LOG4CXX_NS.rolling.RolloverDescription.getAppend,,false,62,62,getAppend,,,7,bool LOG4CXX_NS.rolling.RolloverDescription.getAppend ()
66760,METHOD,LOG4CXX_NS.rolling.RolloverDescription,TYPE_DECL,ActionPtr getSynchronous() const;,13,34,main\include\log4cxx\rolling\rolloverdescription.hpp,LOG4CXX_NS.rolling.RolloverDescription.getSynchronous,,false,70,70,getSynchronous,,,8,ActionPtr LOG4CXX_NS.rolling.RolloverDescription.getSynchronous ()
66764,METHOD,LOG4CXX_NS.rolling.RolloverDescription,TYPE_DECL,ActionPtr getAsynchronous() const;,13,35,main\include\log4cxx\rolling\rolloverdescription.hpp,LOG4CXX_NS.rolling.RolloverDescription.getAsynchronous,,false,78,78,getAsynchronous,,,9,ActionPtr LOG4CXX_NS.rolling.RolloverDescription.getAsynchronous ()
66774,METHOD,main\include\log4cxx\rolling\sizebasedtriggeringpolicy.hpp:<global>,TYPE_DECL,<global>,1,7,main\include\log4cxx\rolling\sizebasedtriggeringpolicy.hpp,main\include\log4cxx\rolling\sizebasedtriggeringpolicy.hpp:<global>,,false,1,103,<global>,,,1,
66796,METHOD,main\include\log4cxx\rolling\timebasedrollingpolicy.hpp:<global>,TYPE_DECL,<global>,1,7,main\include\log4cxx\rolling\timebasedrollingpolicy.hpp,main\include\log4cxx\rolling\timebasedrollingpolicy.hpp:<global>,,false,1,259,<global>,,,1,
66813,METHOD,main\include\log4cxx\rolling\triggeringpolicy.hpp:<global>,TYPE_DECL,<global>,1,6,main\include\log4cxx\rolling\triggeringpolicy.hpp,main\include\log4cxx\rolling\triggeringpolicy.hpp:<global>,,false,1,81,<global>,,,1,
66827,METHOD,main\include\log4cxx\rolling\zipcompressaction.hpp:<global>,TYPE_DECL,<global>,1,7,main\include\log4cxx\rolling\zipcompressaction.hpp,main\include\log4cxx\rolling\zipcompressaction.hpp:<global>,,false,1,75,<global>,,,1,
66836,METHOD,LOG4CXX_NS.rolling.ZipCompressAction,TYPE_DECL,bool execute(LOG4CXX_NS::helpers::Pool& pool) const override;,8,62,main\include\log4cxx\rolling\zipcompressaction.hpp,LOG4CXX_NS.rolling.ZipCompressAction.execute,,false,52,52,execute,,,5,bool LOG4CXX_NS.rolling.ZipCompressAction.execute (ANY)
66841,METHOD,LOG4CXX_NS.rolling.ZipCompressAction,TYPE_DECL,void setThrowIOExceptionOnForkFailure(bool throwIO);,8,53,main\include\log4cxx\rolling\zipcompressaction.hpp,LOG4CXX_NS.rolling.ZipCompressAction.setThrowIOExceptionOnForkFailure,,false,63,63,setThrowIOExceptionOnForkFailure,,,6,void LOG4CXX_NS.rolling.ZipCompressAction.setThrowIOExceptionOnForkFailure (bool)
66846,METHOD,LOG4CXX_NS.rolling.ZipCompressAction,TYPE_DECL,ZipCompressAction(const ZipCompressAction&);,3,45,main\include\log4cxx\rolling\zipcompressaction.hpp,LOG4CXX_NS.rolling.ZipCompressAction.ZipCompressAction,,false,66,66,ZipCompressAction,,,7,ANY LOG4CXX_NS.rolling.ZipCompressAction.ZipCompressAction (ZipCompressAction)
66851,METHOD,LOG4CXX_NS.rolling.ZipCompressAction,TYPE_DECL,ZipCompressAction& operator=(const ZipCompressAction&);,20,56,main\include\log4cxx\rolling\zipcompressaction.hpp,LOG4CXX_NS.rolling.ZipCompressAction.operator =,,false,67,67,operator =,,,8,ZipCompressAction LOG4CXX_NS.rolling.ZipCompressAction.operator = (ZipCompressAction)
66862,METHOD,main\include\log4cxx\simplelayout.hpp:<global>,TYPE_DECL,<global>,1,33,main\include\log4cxx\simplelayout.hpp,main\include\log4cxx\simplelayout.hpp:<global>,,false,1,86,<global>,,,1,
66878,METHOD,main\include\log4cxx\spi\appenderattachable.hpp:<global>,TYPE_DECL,<global>,1,44,main\include\log4cxx\spi\appenderattachable.hpp,main\include\log4cxx\spi\appenderattachable.hpp:<global>,,false,1,85,<global>,,,1,
66889,METHOD,main\include\log4cxx\spi\configurator.hpp:<global>,TYPE_DECL,<global>,1,37,main\include\log4cxx\spi\configurator.hpp,main\include\log4cxx\spi\configurator.hpp:<global>,,false,1,67,<global>,,,1,
66910,METHOD,main\include\log4cxx\spi\defaultrepositoryselector.hpp:<global>,TYPE_DECL,<global>,1,51,main\include\log4cxx\spi\defaultrepositoryselector.hpp,main\include\log4cxx\spi\defaultrepositoryselector.hpp:<global>,,false,1,50,<global>,,,1,
66926,METHOD,main\include\log4cxx\spi\errorhandler.hpp:<global>,TYPE_DECL,<global>,1,37,main\include\log4cxx\spi\errorhandler.hpp,main\include\log4cxx\spi\errorhandler.hpp:<global>,,false,1,122,<global>,,,1,
66939,METHOD,<empty>,<empty>,<empty>,3,,main\include\log4cxx\spi\errorhandler.hpp,LOG4CXX_NS.spi.ErrorCode.anonymous_enum_0:<clinit>,,false,33,,<clinit>,,,8,
66975,METHOD,main\include\log4cxx\spi\filter.hpp:<global>,TYPE_DECL,<global>,1,30,main\include\log4cxx\spi\filter.hpp,main\include\log4cxx\spi\filter.hpp:<global>,,false,1,135,<global>,,,1,
66989,METHOD,main\include\log4cxx\spi\hierarchyeventlistener.hpp:<global>,TYPE_DECL,<global>,1,48,main\include\log4cxx\spi\hierarchyeventlistener.hpp,main\include\log4cxx\spi\hierarchyeventlistener.hpp:<global>,,false,1,54,<global>,,,1,
67009,METHOD,main\include\log4cxx\spi\location\locationinfo.hpp:<global>,TYPE_DECL,<global>,1,44,main\include\log4cxx\spi\location\locationinfo.hpp,main\include\log4cxx\spi\location\locationinfo.hpp:<global>,,false,1,179,<global>,,,1,
67019,METHOD,main\include\log4cxx\spi\loggerfactory.hpp:<global>,TYPE_DECL,<global>,1,37,main\include\log4cxx\spi\loggerfactory.hpp,main\include\log4cxx\spi\loggerfactory.hpp:<global>,,false,1,44,<global>,,,1,
67037,METHOD,main\include\log4cxx\spi\loggerrepository.hpp:<global>,TYPE_DECL,<global>,1,38,main\include\log4cxx\spi\loggerrepository.hpp,main\include\log4cxx\spi\loggerrepository.hpp:<global>,,false,1,149,<global>,,,1,
67059,METHOD,main\include\log4cxx\spi\loggingevent.hpp:<global>,TYPE_DECL,<global>,1,37,main\include\log4cxx\spi\loggingevent.hpp,main\include\log4cxx\spi\loggingevent.hpp:<global>,,false,1,216,<global>,,,1,
67076,METHOD,main\include\log4cxx\spi\optionhandler.hpp:<global>,TYPE_DECL,<global>,1,38,main\include\log4cxx\spi\optionhandler.hpp,main\include\log4cxx\spi\optionhandler.hpp:<global>,,false,1,71,<global>,,,1,
67088,METHOD,main\include\log4cxx\spi\repositoryselector.hpp:<global>,TYPE_DECL,<global>,1,43,main\include\log4cxx\spi\repositoryselector.hpp,main\include\log4cxx\spi\repositoryselector.hpp:<global>,,false,1,53,<global>,,,1,
67101,METHOD,main\include\log4cxx\spi\rootlogger.hpp:<global>,TYPE_DECL,<global>,1,35,main\include\log4cxx\spi\rootlogger.hpp,main\include\log4cxx\spi\rootlogger.hpp:<global>,,false,1,62,<global>,,,1,
67111,METHOD,main\include\log4cxx\spi\triggeringeventevaluator.hpp:<global>,TYPE_DECL,<global>,1,51,main\include\log4cxx\spi\triggeringeventevaluator.hpp,main\include\log4cxx\spi\triggeringeventevaluator.hpp:<global>,,false,1,50,<global>,,,1,
67126,METHOD,main\include\log4cxx\stream.hpp:<global>,TYPE_DECL,<global>,1,26,main\include\log4cxx\stream.hpp,main\include\log4cxx\stream.hpp:<global>,,false,1,587,<global>,,,1,
67130,METHOD,main\include\log4cxx\stream.hpp:<global>,TYPE_DECL,typedef logstream_base& (*logstream_manipulator)(logstream_base&);,23,65,main\include\log4cxx\stream.hpp,LOG4CXX_NS.logstream_manipulator,,false,215,215,logstream_manipulator,,,2,logstream_base LOG4CXX_NS.logstream_manipulator (logstream_base)
67149,METHOD,main\include\log4cxx\varia\fallbackerrorhandler.hpp:<global>,TYPE_DECL,<global>,1,49,main\include\log4cxx\varia\fallbackerrorhandler.hpp,main\include\log4cxx\varia\fallbackerrorhandler.hpp:<global>,,false,1,111,<global>,,,1,
67164,METHOD,main\include\log4cxx\writerappender.hpp:<global>,TYPE_DECL,<global>,1,35,main\include\log4cxx\writerappender.hpp,main\include\log4cxx\writerappender.hpp:<global>,,false,1,207,<global>,,,1,
67200,METHOD,main\include\log4cxx\xml\domconfigurator.hpp:<global>,TYPE_DECL,<global>,1,41,main\include\log4cxx\xml\domconfigurator.hpp,main\include\log4cxx\xml\domconfigurator.hpp:<global>,,false,1,346,<global>,,,1,
67207,METHOD,main\include\log4cxx\xml\xmllayout.hpp:<global>,TYPE_DECL,<global>,1,31,main\include\log4cxx\xml\xmllayout.hpp,main\include\log4cxx\xml\xmllayout.hpp:<global>,,false,1,140,<global>,,,1,
67224,METHOD,main\mock-apple\CFString.cpp:<global>,TYPE_DECL,<global>,1,3,main\mock-apple\CFString.cpp,main\mock-apple\CFString.cpp:<global>,,false,1,72,<global>,,,1,
67227,METHOD,main\mock-apple\CFString.cpp:<global>,TYPE_DECL,"int throw_out_of_mem(int status)
{
	throw std::bad_alloc();
	return status;
}",1,1,main\mock-apple\CFString.cpp,anonymous_namespace_1.throw_out_of_mem,,false,9,13,throw_out_of_mem,,,1,int anonymous_namespace_1.throw_out_of_mem (int)
67239,METHOD,main\mock-apple\CFString.cpp:<global>,TYPE_DECL,"apr_pool_t* getStringPool()
{
	struct cfstring_pool
	{
		apr_pool_t* ptr = 0;
		cfstring_pool()
		{
			apr_pool_create_core_ex(&ptr, throw_out_of_mem, NULL);
		}
		~cfstring_pool()
		{
			apr_pool_destroy(ptr);
		}
	};
	static LOG4CXX_NS::helpers::WideLife<cfstring_pool> pool;
	return pool.ptr;
}",1,1,main\mock-apple\CFString.cpp,anonymous_namespace_2.getStringPool,,false,14,30,getStringPool,,,2,apr_pool_t anonymous_namespace_2.getStringPool ()
67248,METHOD,main\mock-apple\CFString.cpp:<global>,TYPE_DECL,"CFRange CFRangeMake(CFIndex loc, CFIndex len) {
	CFRange result;
	result.location = loc;
	result.length = len;
	return result;
}",1,1,main\mock-apple\CFString.cpp,CFRangeMake,,false,35,40,CFRangeMake,,,2,"CFRange CFRangeMake (CFIndex,CFIndex)"
67267,METHOD,main\mock-apple\CFString.cpp:<global>,TYPE_DECL,"CFIndex CFStringGetLength(CFStringRef theString) {
	UniChar* data = (UniChar*)theString;
	CFIndex result = 0;
	while (data[result])
		++result;
	return result;
}",1,1,main\mock-apple\CFString.cpp,CFStringGetLength,,false,42,48,CFStringGetLength,,,3,CFIndex CFStringGetLength (CFStringRef)
67290,METHOD,main\mock-apple\CFString.cpp:<global>,TYPE_DECL,"void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer) {
	UniChar* data = (UniChar*)theString;
	CFIndex index = 0;
	while (index < range.length) {
		*buffer = data[range.location + index];
		++index;
		++buffer;
	}
}",1,1,main\mock-apple\CFString.cpp,CFStringGetCharacters,,false,49,57,CFStringGetCharacters,,,4,"void CFStringGetCharacters (CFStringRef,CFRange,UniChar*)"
67328,METHOD,main\mock-apple\CFString.cpp:<global>,TYPE_DECL,"CFStringRef CFStringCreateWithCharacters(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars) {
	UniChar* result = (UniChar*)apr_palloc(getStringPool(), (numChars + 1) * sizeof(UniChar));
	result[numChars] = 0;
	for (UniChar* p = result; 0 < numChars; --numChars)
		*p++ = *chars++;
	return (CFStringRef)result;
}",1,1,main\mock-apple\CFString.cpp,CFStringCreateWithCharacters,,false,58,64,CFStringCreateWithCharacters,,,5,"CFStringRef CFStringCreateWithCharacters (CFAllocatorRef,UniChar*,CFIndex)"
67375,METHOD,main\mock-apple\CFString.cpp:<global>,TYPE_DECL,"CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding) {
	UniChar* result = (UniChar*)apr_palloc(getStringPool(), (strlen(cStr) + 1) * sizeof(UniChar));
	for (UniChar *p = result; *p++ = *cStr++;)
		;
	return (CFStringRef)result;
}",1,1,main\mock-apple\CFString.cpp,CFStringCreateWithCString,,false,65,70,CFStringCreateWithCString,,,6,"CFStringRef CFStringCreateWithCString (CFAllocatorRef,char*,CFStringEncoding)"
67418,METHOD,main\mock-apple\CoreFoundation\CFString.hpp:<global>,TYPE_DECL,<global>,1,42,main\mock-apple\CoreFoundation\CFString.hpp,main\mock-apple\CoreFoundation\CFString.hpp:<global>,,false,1,24,<global>,,,1,
67431,METHOD,main\mock-apple\CoreFoundation\CFString.hpp:<global>,TYPE_DECL,"CFRange CFRangeMake(CFIndex loc, CFIndex len);",9,45,main\mock-apple\CoreFoundation\CFString.hpp,CFRangeMake,,false,16,16,CFRangeMake,,,10,"CFRange CFRangeMake (CFIndex,CFIndex)"
67437,METHOD,main\mock-apple\CoreFoundation\CFString.hpp:<global>,TYPE_DECL,CFIndex CFStringGetLength(CFStringRef theString);,9,48,main\mock-apple\CoreFoundation\CFString.hpp,CFStringGetLength,,false,17,17,CFStringGetLength,,,11,CFIndex CFStringGetLength (CFStringRef)
67442,METHOD,main\mock-apple\CoreFoundation\CFString.hpp:<global>,TYPE_DECL,"void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer);",6,81,main\mock-apple\CoreFoundation\CFString.hpp,CFStringGetCharacters,,false,18,18,CFStringGetCharacters,,,12,"void CFStringGetCharacters (CFStringRef,CFRange,UniChar*)"
67449,METHOD,main\mock-apple\CoreFoundation\CFString.hpp:<global>,TYPE_DECL,"CFStringRef CFStringCreateWithCharacters(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars);",13,102,main\mock-apple\CoreFoundation\CFString.hpp,CFStringCreateWithCharacters,,false,19,19,CFStringCreateWithCharacters,,,13,"CFStringRef CFStringCreateWithCharacters (CFAllocatorRef,UniChar*,CFIndex)"
67456,METHOD,main\mock-apple\CoreFoundation\CFString.hpp:<global>,TYPE_DECL,"CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding);",13,104,main\mock-apple\CoreFoundation\CFString.hpp,CFStringCreateWithCString,,false,20,20,CFStringCreateWithCString,,,14,"CFStringRef CFStringCreateWithCString (CFAllocatorRef,char*,CFStringEncoding)"
68711,METHOD,<includes>:<global>,NAMESPACE_BLOCK,<global>,,,<includes>,<includes>:<global>,,false,1,,<global>,,,1,
69130,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,<operator>.assignment,,true,,,<operator>.assignment,,,0,
69135,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,SQLAllocHandle,,true,,,SQLAllocHandle,,,0,
69141,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,<operator>.addressOf,,true,,,<operator>.addressOf,,,0,
69145,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,<operator>.logicalOr,,true,,,<operator>.logicalOr,,,0,
69150,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,<operator>.equals,,true,,,<operator>.equals,,,0,
69155,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,SQLFreeHandle,,true,,,SQLFreeHandle,,,0,
69160,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.make_unique<int>,,true,,,std.make_unique<int>,,,0,
69165,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,<operator>.fieldAccess,,true,,,<operator>.fieldAccess,,,0,
69170,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,<operator>.shiftLeft,,true,,,<operator>.shiftLeft,,,0,
69175,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,pthread_getname_np,,true,,,pthread_getname_np,,,0,
69181,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,<operator>.sizeOf,,true,,,<operator>.sizeOf,,,0,
69185,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,pthread_setname_np,,true,,,pthread_setname_np,,,0,
69190,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,app,,true,,,app,,,0,
69195,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,LOG4CXX_INFO,,true,,,LOG4CXX_INFO,,,0,
69200,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,arg,,true,,,arg,,,0,
69205,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,QString,,true,,,QString,,,0,
69208,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,log4cxx.Logger.getLogger,,true,,,log4cxx.Logger.getLogger,,,0,
69213,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,LOG4CXX_TRACE,,true,,,LOG4CXX_TRACE,,,0,
69218,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,LOG4CXX_DEBUG,,true,,,LOG4CXX_DEBUG,,,0,
69223,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,LOG4CXX_WARN,,true,,,LOG4CXX_WARN,,,0,
69228,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,LOG4CXX_ERROR,,true,,,LOG4CXX_ERROR,,,0,
69233,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,LOG4CXX_FATAL,,true,,,LOG4CXX_FATAL,,,0,
69238,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,log4cxx.BasicConfigurator.configure,,true,,,log4cxx.BasicConfigurator.configure,,,0,
69242,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,m_logger,,true,,,m_logger,,,0,
69246,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getLogger,,true,,,getLogger,,,0,
69252,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,<operator>.arrayInitializer,,true,,,<operator>.arrayInitializer,,,0,
69256,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,QCoreApplication.applicationFilePath,,true,,,QCoreApplication.applicationFilePath,,,0,
69260,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,baseName,,true,,,baseName,,,0,
69264,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,<operator>.greaterThan,,true,,,<operator>.greaterThan,,,0,
69269,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,<operator>.lessThan,,true,,,<operator>.lessThan,,,0,
69274,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.tie,,true,,,std.tie,,,0,
69280,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,qt.Configuration.configureFromFileAndWatch,,true,,,qt.Configuration.configureFromFileAndWatch,,,0,
69286,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,<operator>.conditional,,true,,,<operator>.conditional,,,0,
69292,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,isEmpty,,true,,,isEmpty,,,0,
69296,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,toStdString,,true,,,toStdString,,,0,
69300,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,empty,,true,,,empty,,,0,
69304,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,strncpy,,true,,,strncpy,,,0,
69310,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,programFileName,,true,,,programFileName,,,0,
69314,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,rfind,,true,,,rfind,,,0,
69319,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,<operator>.notEquals,,true,,,<operator>.notEquals,,,0,
69324,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,substr,,true,,,substr,,,0,
69330,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,<operator>.addition,,true,,,<operator>.addition,,,0,
69335,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,push_back,,true,,,push_back,,,0,
69340,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,back,,true,,,back,,,0,
69344,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,erase,,true,,,erase,,,0,
69349,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,<operator>.logicalNot,,true,,,<operator>.logicalNot,,,0,
69353,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,DefaultConfigurationFileNames,,true,,,DefaultConfigurationFileNames,,,0,
69357,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,<operator>.indirectIndexAccess,,true,,,<operator>.indirectIndexAccess,,,0,
69362,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,<operator>.preIncrement,,true,,,<operator>.preIncrement,,,0,
69366,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,current_working_dir_candidate,,true,,,current_working_dir_candidate,,,0,
69370,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,exists,,true,,,exists,,,0,
69375,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getPath,,true,,,getPath,,,0,
69379,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,alt_dir_candidate,,true,,,alt_dir_candidate,,,0,
69383,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,<operator>.bracketedPrimary,,true,,,<operator>.bracketedPrimary,,,0,
69387,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,<operator>.expressionList,,true,,,<operator>.expressionList,,,0,
69392,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.make_shared<SimpleLayout>,,true,,,std.make_shared<SimpleLayout>,,,0,
69396,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,addAppender,,true,,,addAppender,,,0,
69401,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,<operator>.indirectFieldAccess,,true,,,<operator>.indirectFieldAccess,,,0,
69406,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getRootLogger,,true,,,getRootLogger,,,0,
69410,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,ensureIsConfigured,,true,,,ensureIsConfigured,,,0,
69415,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setlocale,,true,,,setlocale,,,0,
69420,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,<operator>.lessEqualsThan,,true,,,<operator>.lessEqualsThan,,,0,
69425,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,puts,,true,,,puts,,,0,
69429,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,<operator>.postIncrement,,true,,,<operator>.postIncrement,,,0,
69433,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,strcmp,,true,,,strcmp,,,0,
69438,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,fputs,,true,,,fputs,,,0,
69443,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,info,,true,,,info,,,0,
69449,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,log4cxx.Logger.getRootLogger,,true,,,log4cxx.Logger.getRootLogger,,,0,
69453,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,helpers.StringHelper.equalsIgnoreCase,,true,,,helpers.StringHelper.equalsIgnoreCase,,,0,
69460,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,LOG4CXX_STR,,true,,,LOG4CXX_STR,,,0,
69464,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,xml.DOMConfigurator.configure,,true,,,xml.DOMConfigurator.configure,,,0,
69469,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,init,,true,,,init,,,0,
69472,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,exit,,true,,,exit,,,0,
69476,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,<operator>.logicalAnd,,true,,,<operator>.logicalAnd,,,0,
69481,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,length,,true,,,length,,,0,
69485,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,<operator>.subtraction,,true,,,<operator>.subtraction,,,0,
69490,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,xml.DOMConfigurator.configureAndWatch,,true,,,xml.DOMConfigurator.configureAndWatch,,,0,
69496,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_sleep,,true,,,apr_sleep,,,0,
69500,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_app_initialize,,true,,,apr_app_initialize,,,0,
69506,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_terminate,,true,,,apr_terminate,,,0,
69509,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,LOG4CXX_INFO_FMT,,true,,,LOG4CXX_INFO_FMT,,,0,
69516,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,fmt.fg,,true,,,fmt.fg,,,0,
69521,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.setprecision,,true,,,std.setprecision,,,0,
69526,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.setbase,,true,,,std.setbase,,,0,
69531,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,context1,,true,,,context1,,,0,
69535,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,context2,,true,,,context2,,,0,
69539,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,logstream,,true,,,logstream,,,0,
69544,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setLevel,,true,,,setLevel,,,0,
69549,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,fi,,true,,,fi,,,0,
69553,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,LOG4CXX_NS.xml.DOMConfigurator.configure,,true,,,LOG4CXX_NS.xml.DOMConfigurator.configure,,,0,
69558,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,LOG4CXX_NS.PropertyConfigurator.configure,,true,,,LOG4CXX_NS.PropertyConfigurator.configure,,,0,
69563,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,addPath,,true,,,addPath,,,0,
69568,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,endsWith,,true,,,endsWith,,,0,
69573,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.make_unique<QFileSystemWatcher>,,true,,,std.make_unique<QFileSystemWatcher>,,,0,
69577,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,absolutePath,,true,,,absolutePath,,,0,
69581,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,dir,,true,,,dir,,,0,
69585,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,QObject.connect,,true,,,QObject.connect,,,0,
69592,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,get,,true,,,get,,,0,
69596,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,candidate,,true,,,candidate,,,0,
69600,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,LOG4CXX_DECODE_QSTRING,,true,,,LOG4CXX_DECODE_QSTRING,,,0,
69605,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,tryLoadFile,,true,,,tryLoadFile,,,0,
69609,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,LOG4CXX_NS.Logger.getLogger,,true,,,LOG4CXX_NS.Logger.getLogger,,,0,
69614,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,location,,true,,,location,,,0,
69621,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,LOG4CXX_NS.spi.LocationInfo.calcShortFileName,,true,,,LOG4CXX_NS.spi.LocationInfo.calcShortFileName,,,0,
69626,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,debug,,true,,,debug,,,0,
69632,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,warn,,true,,,warn,,,0,
69638,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,error,,true,,,error,,,0,
69643,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,fatal,,true,,,fatal,,,0,
69649,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.abort,,true,,,std.abort,,,0,
69653,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,lock,,true,,,lock,,,0,
69657,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,execute,,true,,,execute,,,0,
69662,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,reportException,,true,,,reportException,,,0,
69666,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\andfilter.cpp,main\cpp\andfilter.cpp:29:29:priv:0,,true,29,29,priv,,,0,
69669,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,<operator>.cast,,true,,,<operator>.cast,,,0,
69674,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,priv,,true,,,priv,,,0,
69678,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setNext,,true,,,setNext,,,0,
69683,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,f,,true,,,f,,,0,
69687,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,decide,,true,,,decide,,,0,
69692,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getNext,,true,,,getNext,,,0,
69696,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.find,,true,,,std.find,,,0,
69703,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,begin,,true,,,begin,,,0,
69707,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,end,,true,,,end,,,0,
69711,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getAllAppenders,,true,,,getAllAppenders,,,0,
69715,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,doAppend,,true,,,doAppend,,,0,
69721,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,<operator>.indirection,,true,,,<operator>.indirection,,,0,
69725,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getName,,true,,,getName,,,0,
69729,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,close,,true,,,close,,,0,
69734,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,clear,,true,,,clear,,,0,
69738,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,isGreaterOrEqual,,true,,,isGreaterOrEqual,,,0,
69743,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,doAppendImpl,,true,,,doAppendImpl,,,0,
69748,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,isAsSevereAsThreshold,,true,,,isAsSevereAsThreshold,,,0,
69752,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getLevel,,true,,,getLevel,,,0,
69756,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,append,,true,,,append,,,0,
69761,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setThreshold,,true,,,setThreshold,,,0,
69766,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,assign,,true,,,assign,,,0,
69771,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_socket_create,,true,,,apr_socket_create,,,0,
69779,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\aprdatagramsocket.cpp,main\cpp\aprdatagramsocket.cpp:28:28:_priv:0,,true,28,28,_priv,,,0,
69782,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getAPRPool,,true,,,getAPRPool,,,0,
69786,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,_priv,,true,,,_priv,,,0,
69790,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,<operator>.throw,,true,,,<operator>.throw,,,0,
69794,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,SocketException,,true,,,SocketException,,,0,
69798,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,LOG4CXX_ENCODE_CHAR,,true,,,LOG4CXX_ENCODE_CHAR,,,0,
69803,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getHostAddress,,true,,,getHostAddress,,,0,
69806,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getAddress,,true,,,getAddress,,,0,
69810,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_sockaddr_info_get,,true,,,apr_sockaddr_info_get,,,0,
69819,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,c_str,,true,,,c_str,,,0,
69823,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getPort,,true,,,getPort,,,0,
69827,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getLength,,true,,,getLength,,,0,
69831,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_socket_recvfrom,,true,,,apr_socket_recvfrom,,,0,
69839,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getData,,true,,,getData,,,0,
69843,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,IOException,,true,,,IOException,,,0,
69847,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_socket_sendto,,true,,,apr_socket_sendto,,,0,
69855,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_socket_close,,true,,,apr_socket_close,,,0,
69859,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,BindException,,true,,,BindException,,,0,
69863,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_socket_bind,,true,,,apr_socket_bind,,,0,
69868,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,ConnectException,,true,,,ConnectException,,,0,
69872,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_socket_connect,,true,,,apr_socket_connect,,,0,
69877,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,<operator>.delete,,true,,,<operator>.delete,,,0,
69881,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,tlsDestructImpl,,true,,,tlsDestructImpl,,,0,
69885,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_initialize,,true,,,apr_initialize,,,0,
69888,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_pool_create,,true,,,apr_pool_create,,,0,
69893,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,stopWatchDogs,,true,,,stopWatchDogs,,,0,
69897,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,stop,,true,,,stop,,,0,
69900,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,pop_back,,true,,,pop_back,,,0,
69904,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getInstance,,true,,,getInstance,,,0,
69907,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,instance,,true,,,instance,,,0,
69910,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,find,,true,,,find,,,0,
69916,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,emplace,,true,,,emplace,,,0,
69922,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,creator,,true,,,creator,,,0,
69925,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\aprserversocket.cpp,main\cpp\aprserversocket.cpp:30:30:_priv:0,,true,30,30,_priv,,,0,
69928,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_socket_opt_set,,true,,,apr_socket_opt_set,,,0,
69934,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_socket_listen,,true,,,apr_socket_listen,,,0,
69939,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,<operator>.multiplication,,true,,,<operator>.multiplication,,,0,
69944,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_poll,,true,,,apr_poll,,,0,
69951,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,APR_STATUS_IS_TIMEUP,,true,,,APR_STATUS_IS_TIMEUP,,,0,
69955,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,SocketTimeoutException,,true,,,SocketTimeoutException,,,0,
69958,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,PoolException,,true,,,PoolException,,,0,
69962,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_socket_accept,,true,,,apr_socket_accept,,,0,
69968,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_pool_destroy,,true,,,apr_pool_destroy,,,0,
69972,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\aprsocket.cpp,main\cpp\aprsocket.cpp:46:46:_priv:0,,true,46,46,_priv,,,0,
69975,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_socket_addr_get,,true,,,apr_socket_addr_get,,,0,
69981,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_sockaddr_ip_get,,true,,,apr_sockaddr_ip_get,,,0,
69986,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,ClosedChannelException,,true,,,ClosedChannelException,,,0,
69989,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,remaining,,true,,,remaining,,,0,
69993,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_socket_send,,true,,,apr_socket_send,,,0,
69999,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,current,,true,,,current,,,0,
70003,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,position,,true,,,position,,,0,
70007,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,<operator>.assignmentPlus,,true,,,<operator>.assignmentPlus,,,0,
70012,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\asyncappender.cpp,main\cpp\asyncappender.cpp:176:176:priv:0,,true,176,176,priv,,,0,
70015,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,size,,true,,,size,,,0,
70019,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,finalize,,true,,,finalize,,,0,
70022,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setLocationInfo,,true,,,setLocationInfo,,,0,
70026,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setBufferSize,,true,,,setBufferSize,,,0,
70030,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setBlocking,,true,,,setBlocking,,,0,
70034,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,appendLoopOnAppenders,,true,,,appendLoopOnAppenders,,,0,
70040,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getNDC,,true,,,getNDC,,,0,
70045,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getMDCCopy,,true,,,getMDCCopy,,,0,
70049,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,joinable,,true,,,joinable,,,0,
70053,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,createThread,,true,,,createThread,,,0,
70060,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,ThreadUtility.instance,,true,,,ThreadUtility.instance,,,0,
70064,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,notify_all,,true,,,notify_all,,,0,
70068,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,get_id,,true,,,get_id,,,0,
70072,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.this_thread.get_id,,true,,,std.this_thread.get_id,,,0,
70076,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,wait,,true,,,wait,,,0,
70082,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getLoggerName,,true,,,getLoggerName,,,0,
70086,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,summary,,true,,,summary,,,0,
70090,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,insert,,true,,,insert,,,0,
70097,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,DiscardMap.value_type,,true,,,DiscardMap.value_type,,,0,
70103,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,add,,true,,,add,,,0,
70108,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,join,,true,,,join,,,0,
70112,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getAppender,,true,,,getAppender,,,0,
70117,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,isAttached,,true,,,isAttached,,,0,
70122,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,removeAllAppenders,,true,,,removeAllAppenders,,,0,
70126,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,removeAppender,,true,,,removeAppender,,,0,
70130,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,IllegalArgumentException,,true,,,IllegalArgumentException,,,0,
70134,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,toInt,,true,,,toInt,,,0,
70139,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,msg,,true,,,msg,,,0,
70143,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getMessage,,true,,,getMessage,,,0,
70147,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,LOG4CXX_NS.Level.getError,,true,,,LOG4CXX_NS.Level.getError,,,0,
70151,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,createEvent,,true,,,createEvent,,,0,
70156,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,void,,true,,,void,,,0,
70160,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,<operator>.constructorInitializer,,true,,,<operator>.constructorInitializer,,,0,
70164,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.move,,true,,,std.move,,,0,
70169,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,action,,true,,,action,,,0,
70172,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,del,,true,,,del,,,0,
70177,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setConfigured,,true,,,setConfigured,,,0,
70182,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,TTCC_CONVERSION_PATTERN,,true,,,TTCC_CONVERSION_PATTERN,,,0,
70186,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,flush,,true,,,flush,,,0,
70191,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,write,,true,,,write,,,0,
70197,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,<operator>.greaterEqualsThan,,true,,,<operator>.greaterEqualsThan,,,0,
70202,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,<operator>.minus,,true,,,<operator>.minus,,,0,
70206,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,min,,true,,,min,,,0,
70210,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.memcpy,,true,,,std.memcpy,,,0,
70217,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,resize,,true,,,resize,,,0,
70222,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,memcpy,,true,,,memcpy,,,0,
70228,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,limit,,true,,,limit,,,0,
70232,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,<operator>.division,,true,,,<operator>.division,,,0,
70237,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,<operator>.assignmentMinus,,true,,,<operator>.assignmentMinus,,,0,
70242,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,magicString,,true,,,magicString,,,0,
70246,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,format,,true,,,format,,,0,
70253,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,formattedMillis,,true,,,formattedMillis,,,0,
70257,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,millisecondFormat,,true,,,millisecondFormat,,,0,
70263,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,int,,true,,,int,,,0,
70267,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,regionMatches,,true,,,regionMatches,,,0,
70275,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,compare,,true,,,compare,,,0,
70282,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,findMillisecondStart,,true,,,findMillisecondStart,,,0,
70289,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,<operator>.modulo,,true,,,<operator>.modulo,,,0,
70294,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setTimeZone,,true,,,setTimeZone,,,0,
70299,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,numberFormat,,true,,,numberFormat,,,0,
70306,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,data,,true,,,data,,,0,
70310,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,tmp,,true,,,tmp,,,0,
70314,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.mbsinit,,true,,,std.mbsinit,,,0,
70319,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,<operator>.preDecrement,,true,,,<operator>.preDecrement,,,0,
70323,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.mbrtowc,,true,,,std.mbrtowc,,,0,
70331,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,<operator>.new,,true,,,<operator>.new,,,0,
70338,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,decoder,,true,,,decoder,,,0,
70342,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,createDefaultDecoder,,true,,,createDefaultDecoder,,,0,
70345,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,value,,true,,,value,,,0,
70348,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,CharsetDecoderPtr,,true,,,CharsetDecoderPtr,,,0,
70352,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.make_shared<UTF8CharsetDecoder>,,true,,,std.make_shared<UTF8CharsetDecoder>,,,0,
70356,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.make_shared<ISOLatinCharsetDecoder>,,true,,,std.make_shared<ISOLatinCharsetDecoder>,,,0,
70360,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.make_shared<USASCIICharsetDecoder>,,true,,,std.make_shared<USASCIICharsetDecoder>,,,0,
70364,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.make_shared<LocaleCharsetDecoder>,,true,,,std.make_shared<LocaleCharsetDecoder>,,,0,
70368,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,prev,,true,,,prev,,,0,
70372,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,put,,true,,,put,,,0,
70378,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,<operator>.postDecrement,,true,,,<operator>.postDecrement,,,0,
70382,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.wcrtomb,,true,,,std.wcrtomb,,,0,
70389,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,encoder,,true,,,encoder,,,0,
70393,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,createDefaultEncoder,,true,,,createDefaultEncoder,,,0,
70396,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,CharsetEncoderPtr,,true,,,CharsetEncoderPtr,,,0,
70400,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.make_shared<UTF8CharsetEncoder>,,true,,,std.make_shared<UTF8CharsetEncoder>,,,0,
70404,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.make_shared<USASCIICharsetEncoder>,,true,,,std.make_shared<USASCIICharsetEncoder>,,,0,
70408,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.make_shared<ISOLatinCharsetEncoder>,,true,,,std.make_shared<ISOLatinCharsetEncoder>,,,0,
70412,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.make_shared<UTF16BECharsetEncoder>,,true,,,std.make_shared<UTF16BECharsetEncoder>,,,0,
70416,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.make_shared<UTF16LECharsetEncoder>,,true,,,std.make_shared<UTF16LECharsetEncoder>,,,0,
70420,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.make_shared<LocaleCharsetEncoder>,,true,,,std.make_shared<LocaleCharsetEncoder>,,,0,
70424,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,encode,,true,,,encode,,,0,
70431,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.find_if,,true,,,std.find_if,,,0,
70438,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,InstantiationException,,true,,,InstantiationException,,,0,
70442,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,lowerName,,true,,,lowerName,,,0,
70446,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getRegistry,,true,,,getRegistry,,,0,
70449,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,find_last_of,,true,,,find_last_of,,,0,
70454,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,terminalName,,true,,,terminalName,,,0,
70460,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,registerClasses,,true,,,registerClasses,,,0,
70463,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,ClassNotFoundException,,true,,,ClassNotFoundException,,,0,
70467,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,AsyncAppender.registerClass,,true,,,AsyncAppender.registerClass,,,0,
70471,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,ConsoleAppender.registerClass,,true,,,ConsoleAppender.registerClass,,,0,
70475,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,FileAppender.registerClass,,true,,,FileAppender.registerClass,,,0,
70479,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,LOG4CXX_NS.db.ODBCAppender.registerClass,,true,,,LOG4CXX_NS.db.ODBCAppender.registerClass,,,0,
70483,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,SMTPAppender.registerClass,,true,,,SMTPAppender.registerClass,,,0,
70487,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,JSONLayout.registerClass,,true,,,JSONLayout.registerClass,,,0,
70491,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,HTMLLayout.registerClass,,true,,,HTMLLayout.registerClass,,,0,
70495,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,PatternLayout.registerClass,,true,,,PatternLayout.registerClass,,,0,
70499,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,SimpleLayout.registerClass,,true,,,SimpleLayout.registerClass,,,0,
70503,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,XMLLayout.registerClass,,true,,,XMLLayout.registerClass,,,0,
70507,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,LevelMatchFilter.registerClass,,true,,,LevelMatchFilter.registerClass,,,0,
70511,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,LevelRangeFilter.registerClass,,true,,,LevelRangeFilter.registerClass,,,0,
70515,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,StringMatchFilter.registerClass,,true,,,StringMatchFilter.registerClass,,,0,
70519,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,LocationInfoFilter.registerClass,,true,,,LocationInfoFilter.registerClass,,,0,
70523,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,LOG4CXX_NS.rolling.RollingFileAppender.registerClass,,true,,,LOG4CXX_NS.rolling.RollingFileAppender.registerClass,,,0,
70527,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,LOG4CXX_NS.rolling.SizeBasedTriggeringPolicy.registerClass,,true,,,LOG4CXX_NS.rolling.SizeBasedTriggeringPolicy.registerClass,,,0,
70531,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,LOG4CXX_NS.rolling.TimeBasedRollingPolicy.registerClass,,true,,,LOG4CXX_NS.rolling.TimeBasedRollingPolicy.registerClass,,,0,
70535,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,LOG4CXX_NS.rolling.ManualTriggeringPolicy.registerClass,,true,,,LOG4CXX_NS.rolling.ManualTriggeringPolicy.registerClass,,,0,
70539,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,LOG4CXX_NS.rolling.FixedWindowRollingPolicy.registerClass,,true,,,LOG4CXX_NS.rolling.FixedWindowRollingPolicy.registerClass,,,0,
70543,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,LOG4CXX_NS.rolling.FilterBasedTriggeringPolicy.registerClass,,true,,,LOG4CXX_NS.rolling.FilterBasedTriggeringPolicy.registerClass,,,0,
70547,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,LOG4CXX_NS.PropertyConfigurator.registerClass,,true,,,LOG4CXX_NS.PropertyConfigurator.registerClass,,,0,
70551,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,LOG4CXX_NS.varia.FallbackErrorHandler.registerClass,,true,,,LOG4CXX_NS.varia.FallbackErrorHandler.registerClass,,,0,
70555,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getClassName,,true,,,getClassName,,,0,
70559,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getLocationInformation,,true,,,getLocationInformation,,,0,
70563,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,abbreviate,,true,,,abbreviate,,,0,
70569,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,*accessor,,true,,,*accessor,,,0,
70573,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.make_shared<ColorEndPatternConverter>,,true,,,std.make_shared<ColorEndPatternConverter>,,,0,
70577,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.make_shared<ColorStartPatternConverter>,,true,,,std.make_shared<ColorStartPatternConverter>,,,0,
70581,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\colorstartpatternconverter.cpp,main\cpp\colorstartpatternconverter.cpp:32:32:priv:0,,true,32,32,priv,,,0,
70584,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,parseColor,,true,,,parseColor,,,0,
70589,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setLayout,,true,,,setLayout,,,0,
70594,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setWriter,,true,,,setWriter,,,0,
70598,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.make_shared<SystemOutWriter>,,true,,,std.make_shared<SystemOutWriter>,,,0,
70602,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setTarget,,true,,,setTarget,,,0,
70606,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,name,,true,,,name,,,0,
70610,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\consoleappender.cpp,main\cpp\consoleappender.cpp:39:39:_priv:0,,true,39,39,_priv,,,0,
70613,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getSystemOut,,true,,,getSystemOut,,,0,
70616,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getSystemErr,,true,,,getSystemErr,,,0,
70619,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,targetWarn,,true,,,targetWarn,,,0,
70623,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.make_shared<SystemErrWriter>,,true,,,std.make_shared<SystemErrWriter>,,,0,
70627,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,temp,,true,,,temp,,,0,
70631,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.make_unique<APRDatagramSocket>,,true,,,std.make_unique<APRDatagramSocket>,,,0,
70635,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,bind,,true,,,bind,,,0,
70641,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\date.cpp,main\cpp\date.cpp:21:21:LOG4CXX_USEC_PER_SEC:0,,true,21,21,LOG4CXX_USEC_PER_SEC,,,0,
70644,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getCurrentTimeFn,,true,,,getCurrentTimeFn,,,0,
70647,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getCurrentTimeStd,,true,,,getCurrentTimeStd,,,0,
70650,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,count,,true,,,count,,,0,
70654,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,time_since_epoch,,true,,,time_since_epoch,,,0,
70658,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.chrono.system_clock.now,,true,,,std.chrono.system_clock.now,,,0,
70662,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.make_shared<ISO8601DateFormat>,,true,,,std.make_shared<ISO8601DateFormat>,,,0,
70666,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,dateFormatStr,,true,,,dateFormatStr,,,0,
70670,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.make_shared<AbsoluteTimeDateFormat>,,true,,,std.make_shared<AbsoluteTimeDateFormat>,,,0,
70674,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.make_shared<DateTimeDateFormat>,,true,,,std.make_shared<DateTimeDateFormat>,,,0,
70678,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,tz,,true,,,tz,,,0,
70682,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\datepatternconverter.cpp,main\cpp\datepatternconverter.cpp:48:48:priv:0,,true,48,48,priv,,,0,
70685,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getTimeStamp,,true,,,getTimeStamp,,,0,
70689,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getTime,,true,,,getTime,,,0,
70693,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_dbd_init,,true,,,apr_dbd_init,,,0,
70697,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,assert,,true,,,assert,,,0,
70701,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\dbappender.cpp,main\cpp\dbappender.cpp:77:78:RULES_PUT:2,,true,77,78,RULES_PUT,,,0,
70705,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,"RULES_PUT(""logger"", LoggerPatternConverter)",,true,,,"RULES_PUT(""logger"", LoggerPatternConverter)",,,0,
70711,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,LogString,,true,,,LogString,,,0,
70715,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,"RULES_PUT(""class"", ClassNamePatternConverter)",,true,,,"RULES_PUT(""class"", ClassNamePatternConverter)",,,0,
70721,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,"RULES_PUT(""time"", DatePatternConverter)",,true,,,"RULES_PUT(""time"", DatePatternConverter)",,,0,
70727,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,"RULES_PUT(""shortfilename"", ShortFileLocationPatternConverter)",,true,,,"RULES_PUT(""shortfilename"", ShortFileLocationPatternConverter)",,,0,
70733,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,"RULES_PUT(""fullfilename"", FileLocationPatternConverter)",,true,,,"RULES_PUT(""fullfilename"", FileLocationPatternConverter)",,,0,
70739,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,"RULES_PUT(""location"", FullLocationPatternConverter)",,true,,,"RULES_PUT(""location"", FullLocationPatternConverter)",,,0,
70745,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,"RULES_PUT(""line"", LineLocationPatternConverter)",,true,,,"RULES_PUT(""line"", LineLocationPatternConverter)",,,0,
70751,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,"RULES_PUT(""message"", MessagePatternConverter)",,true,,,"RULES_PUT(""message"", MessagePatternConverter)",,,0,
70757,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,"RULES_PUT(""method"", MethodLocationPatternConverter)",,true,,,"RULES_PUT(""method"", MethodLocationPatternConverter)",,,0,
70763,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,"RULES_PUT(""level"", LevelPatternConverter)",,true,,,"RULES_PUT(""level"", LevelPatternConverter)",,,0,
70769,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,"RULES_PUT(""thread"", ThreadPatternConverter)",,true,,,"RULES_PUT(""thread"", ThreadPatternConverter)",,,0,
70775,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,"RULES_PUT(""threadname"", ThreadUsernamePatternConverter)",,true,,,"RULES_PUT(""threadname"", ThreadUsernamePatternConverter)",,,0,
70781,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,"RULES_PUT(""ndc"", NDCPatternConverter)",,true,,,"RULES_PUT(""ndc"", NDCPatternConverter)",,,0,
70787,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\dbappender.cpp,main\cpp\dbappender.cpp:49:49:_priv:0,,true,49,49,_priv,,,0,
70790,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_dbd_close,,true,,,apr_dbd_close,,,0,
70795,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_dbd_get_driver,,true,,,apr_dbd_get_driver,,,0,
70801,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,LOG4CXX_DECODE_CHAR,,true,,,LOG4CXX_DECODE_CHAR,,,0,
70806,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_dbd_open,,true,,,apr_dbd_open,,,0,
70813,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_dbd_set_dbname,,true,,,apr_dbd_set_dbname,,,0,
70820,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_dbd_prepare,,true,,,apr_dbd_prepare,,,0,
70829,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,dbdErr,,true,,,dbdErr,,,0,
70833,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_dbd_error,,true,,,apr_dbd_error,,,0,
70839,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,pItem->second,,true,,,pItem->second,,,0,
70844,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_dbd_pquery,,true,,,apr_dbd_pquery,,,0,
70854,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,configuratorClassName,,true,,,configuratorClassName,,,0,
70858,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getConfiguratorClass,,true,,,getConfiguratorClass,,,0,
70861,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getConfigurationFileName,,true,,,getConfigurationFileName,,,0,
70864,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setPath,,true,,,setPath,,,0,
70869,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,repo,,true,,,repo,,,0,
70873,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getConfigurationWatchDelay,,true,,,getConfigurationWatchDelay,,,0,
70876,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,log4jConfiguratorClassName,,true,,,log4jConfiguratorClassName,,,0,
70880,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,LOG4CXX_DEFAULT_CONFIGURATION_KEY,,true,,,LOG4CXX_DEFAULT_CONFIGURATION_KEY,,,0,
70884,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,LOG4J_DEFAULT_CONFIGURATION_KEY,,true,,,LOG4J_DEFAULT_CONFIGURATION_KEY,,,0,
70888,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,log4jConfigurationFileName,,true,,,log4jConfigurationFileName,,,0,
70892,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,configurationFileName,,true,,,configurationFileName,,,0,
70896,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,LOG4CXX_DEFAULT_CONFIGURATION_WATCH_KEY,,true,,,LOG4CXX_DEFAULT_CONFIGURATION_WATCH_KEY,,,0,
70900,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,helpers.StringHelper.endsWith,,true,,,helpers.StringHelper.endsWith,,,0,
70906,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,ResultType,,true,,,ResultType,,,0,
70910,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,doConfigure,,true,,,doConfigure,,,0,
70916,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,DOMConfigurator,,true,,,DOMConfigurator,,,0,
70919,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,file,,true,,,file,,,0,
70922,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,tagName,,true,,,tagName,,,0,
70926,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\domconfigurator.cpp,main\cpp\domconfigurator.cpp:98:98:APPENDER_TAG:0,,true,98,98,APPENDER_TAG,,,0,
70929,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getAttribute,,true,,,getAttribute,,,0,
70935,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\domconfigurator.cpp,main\cpp\domconfigurator.cpp:108:108:NAME_ATTR:0,,true,108,108,NAME_ATTR,,,0,
70938,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,parseAppender,,true,,,parseAppender,,,0,
70943,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,findAppenderByName,,true,,,findAppenderByName,,,0,
70952,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,appenderName,,true,,,appenderName,,,0,
70956,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,subst,,true,,,subst,,,0,
70960,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\domconfigurator.cpp,main\cpp\domconfigurator.cpp:117:117:REF_ATTR:0,,true,117,117,REF_ATTR,,,0,
70963,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,AppenderMap.value_type,,true,,,AppenderMap.value_type,,,0,
70969,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,className,,true,,,className,,,0,
70973,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\domconfigurator.cpp,main\cpp\domconfigurator.cpp:109:109:CLASS_ATTR:0,,true,109,109,CLASS_ATTR,,,0,
70976,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,ObjectPtr,,true,,,ObjectPtr,,,0,
70980,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,newInstance,,true,,,newInstance,,,0,
70984,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,propSetter,,true,,,propSetter,,,0,
70988,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setName,,true,,,setName,,,0,
70993,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\domconfigurator.cpp,main\cpp\domconfigurator.cpp:100:100:PARAM_TAG:0,,true,100,100,PARAM_TAG,,,0,
70996,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setParameter,,true,,,setParameter,,,0,
71003,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\domconfigurator.cpp,main\cpp\domconfigurator.cpp:101:101:LAYOUT_TAG:0,,true,101,101,LAYOUT_TAG,,,0,
71006,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,parseLayout,,true,,,parseLayout,,,0,
71012,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\domconfigurator.cpp,main\cpp\domconfigurator.cpp:115:115:FILTER_TAG:0,,true,115,115,FILTER_TAG,,,0,
71015,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,parseFilters,,true,,,parseFilters,,,0,
71022,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,addFilter,,true,,,addFilter,,,0,
71027,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\domconfigurator.cpp,main\cpp\domconfigurator.cpp:116:116:ERROR_HANDLER_TAG:0,,true,116,116,ERROR_HANDLER_TAG,,,0,
71030,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,parseErrorHandler,,true,,,parseErrorHandler,,,0,
71039,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\domconfigurator.cpp,main\cpp\domconfigurator.cpp:102:102:ROLLING_POLICY_TAG:0,,true,102,102,ROLLING_POLICY_TAG,,,0,
71042,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,rollPolicy,,true,,,rollPolicy,,,0,
71046,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,parseRollingPolicy,,true,,,parseRollingPolicy,,,0,
71052,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setRollingPolicy,,true,,,setRollingPolicy,,,0,
71057,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\domconfigurator.cpp,main\cpp\domconfigurator.cpp:103:103:TRIGGERING_POLICY_TAG:0,,true,103,103,TRIGGERING_POLICY_TAG,,,0,
71060,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,policy,,true,,,policy,,,0,
71064,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,parseTriggeringPolicy,,true,,,parseTriggeringPolicy,,,0,
71070,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setTriggeringPolicy,,true,,,setTriggeringPolicy,,,0,
71075,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setEvaluator,,true,,,setEvaluator,,,0,
71080,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\domconfigurator.cpp,main\cpp\domconfigurator.cpp:99:99:APPENDER_REF_TAG:0,,true,99,99,APPENDER_REF_TAG,,,0,
71083,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,instanceof,,true,,,instanceof,,,0,
71088,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,AppenderAttachable.getStaticClass,,true,,,AppenderAttachable.getStaticClass,,,0,
71092,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,findAppenderByReference,,true,,,findAppenderByReference,,,0,
71100,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,activate,,true,,,activate,,,0,
71104,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,ErrorHandler.getStaticClass,,true,,,ErrorHandler.getStaticClass,,,0,
71108,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setAppender,,true,,,setAppender,,,0,
71113,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setBackupAppender,,true,,,setBackupAppender,,,0,
71118,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\domconfigurator.cpp,main\cpp\domconfigurator.cpp:106:106:LOGGER_REF:0,,true,106,106,LOGGER_REF,,,0,
71121,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,loggerName,,true,,,loggerName,,,0,
71125,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setLogger,,true,,,setLogger,,,0,
71130,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\domconfigurator.cpp,main\cpp\domconfigurator.cpp:112:112:ROOT_REF:0,,true,112,112,ROOT_REF,,,0,
71133,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setErrorHandler,,true,,,setErrorHandler,,,0,
71138,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,Filter.getStaticClass,,true,,,Filter.getStaticClass,,,0,
71142,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\domconfigurator.cpp,main\cpp\domconfigurator.cpp:118:118:ADDITIVITY_ATTR:0,,true,118,118,ADDITIVITY_ATTR,,,0,
71145,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setAdditivity,,true,,,setAdditivity,,,0,
71150,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,parseChildrenOfLoggerElement,,true,,,parseChildrenOfLoggerElement,,,0,
71160,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,LoggerFactory.getStaticClass,,true,,,LoggerFactory.getStaticClass,,,0,
71164,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\domconfigurator.cpp,main\cpp\domconfigurator.cpp:113:113:LEVEL_TAG:0,,true,113,113,LEVEL_TAG,,,0,
71167,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,parseLevel,,true,,,parseLevel,,,0,
71175,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\domconfigurator.cpp,main\cpp\domconfigurator.cpp:114:114:PRIORITY_TAG:0,,true,114,114,PRIORITY_TAG,,,0,
71178,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,levelStr,,true,,,levelStr,,,0,
71182,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\domconfigurator.cpp,main\cpp\domconfigurator.cpp:110:110:VALUE_ATTR:0,,true,110,110,VALUE_ATTR,,,0,
71185,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,toLevel,,true,,,toLevel,,,0,
71190,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,toString,,true,,,toString,,,0,
71194,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getEffectiveLevel,,true,,,getEffectiveLevel,,,0,
71197,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setProperty,,true,,,setProperty,,,0,
71203,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.make_shared<DefaultLoggerFactory>,,true,,,std.make_shared<DefaultLoggerFactory>,,,0,
71207,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,open,,true,,,open,,,0,
71215,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,io,,true,,,io,,,0,
71219,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,msg2,,true,,,msg2,,,0,
71223,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,what,,true,,,what,,,0,
71227,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_xml_parse_file,,true,,,apr_xml_parse_file,,,0,
71235,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_strerror,,true,,,apr_strerror,,,0,
71241,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.string,,true,,,std.string,,,0,
71247,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_xml_parser_geterror,,true,,,apr_xml_parser_geterror,,,0,
71253,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,utf8Decoder,,true,,,utf8Decoder,,,0,
71257,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,parse,,true,,,parse,,,0,
71263,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,configureAndWatch,,true,,,configureAndWatch,,,0,
71268,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setDelay,,true,,,setDelay,,,0,
71273,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,start,,true,,,start,,,0,
71277,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,rootElementName,,true,,,rootElementName,,,0,
71281,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\domconfigurator.cpp,main\cpp\domconfigurator.cpp:96:96:CONFIGURATION_TAG:0,,true,96,96,CONFIGURATION_TAG,,,0,
71284,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\domconfigurator.cpp,main\cpp\domconfigurator.cpp:97:97:OLD_CONFIGURATION_TAG:0,,true,97,97,OLD_CONFIGURATION_TAG,,,0,
71287,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\domconfigurator.cpp,main\cpp\domconfigurator.cpp:122:122:INTERNAL_DEBUG_ATTR:0,,true,122,122,INTERNAL_DEBUG_ATTR,,,0,
71290,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,NULL_STRING,,true,,,NULL_STRING,,,0,
71294,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\domconfigurator.cpp,main\cpp\domconfigurator.cpp:121:121:CONFIG_DEBUG_ATTR:0,,true,121,121,CONFIG_DEBUG_ATTR,,,0,
71297,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\domconfigurator.cpp,main\cpp\domconfigurator.cpp:119:119:THRESHOLD_ATTR:0,,true,119,119,THRESHOLD_ATTR,,,0,
71300,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\domconfigurator.cpp,main\cpp\domconfigurator.cpp:123:123:THREAD_CONFIG_ATTR:0,,true,123,123,THREAD_CONFIG_ATTR,,,0,
71303,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,helpers.ThreadUtility.configure,,true,,,helpers.ThreadUtility.configure,,,0,
71308,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\domconfigurator.cpp,main\cpp\domconfigurator.cpp:107:107:CATEGORY_FACTORY_TAG:0,,true,107,107,CATEGORY_FACTORY_TAG,,,0,
71311,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,parseLoggerFactory,,true,,,parseLoggerFactory,,,0,
71317,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\domconfigurator.cpp,main\cpp\domconfigurator.cpp:104:104:CATEGORY:0,,true,104,104,CATEGORY,,,0,
71320,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\domconfigurator.cpp,main\cpp\domconfigurator.cpp:105:105:LOGGER:0,,true,105,105,LOGGER,,,0,
71323,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,parseLogger,,true,,,parseLogger,,,0,
71332,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\domconfigurator.cpp,main\cpp\domconfigurator.cpp:111:111:ROOT_TAG:0,,true,111,111,ROOT_TAG,,,0,
71335,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,parseRoot,,true,,,parseRoot,,,0,
71343,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,buf,,true,,,buf,,,0,
71348,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\domconfigurator.cpp,main\cpp\domconfigurator.cpp:59:59:MAX_ATTRIBUTE_NAME_LEN:0,,true,59,59,MAX_ATTRIBUTE_NAME_LEN,,,0,
71351,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,decode,,true,,,decode,,,0,
71357,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,Exception.operator=,,true,,,Exception.operator=,,,0,
71362,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,s,,true,,,s,,,0,
71366,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,RuntimeException.operator=,,true,,,RuntimeException.operator=,,,0,
71371,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,IOException.operator=,,true,,,IOException.operator=,,,0,
71376,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,SocketException.operator=,,true,,,SocketException.operator=,,,0,
71381,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,InterruptedIOException.operator=,,true,,,InterruptedIOException.operator=,,,0,
71386,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getLoggerRepository,,true,,,getLoggerRepository,,,0,
71389,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,deleteFile,,true,,,deleteFile,,,0,
71394,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_filepath_encoding,,true,,,apr_filepath_encoding,,,0,
71399,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_file_open,,true,,,apr_file_open,,,0,
71407,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_stat,,true,,,apr_stat,,,0,
71414,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_file_remove,,true,,,apr_file_remove,,,0,
71419,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,convertBackSlashes,,true,,,convertBackSlashes,,,0,
71423,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_file_rename,,true,,,apr_file_rename,,,0,
71429,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_dir_open,,true,,,apr_dir_open,,,0,
71435,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_dir_read,,true,,,apr_dir_read,,,0,
71441,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_dir_close,,true,,,apr_dir_close,,,0,
71445,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_dir_make_recursive,,true,,,apr_dir_make_recursive,,,0,
71451,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,activateOptions,,true,,,activateOptions,,,0,
71455,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\fileappender.cpp,main\cpp\fileappender.cpp:38:38:_priv:0,,true,38,38,_priv,,,0,
71458,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setFileInternal,,true,,,setFileInternal,,,0,
71462,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setImmediateFlush,,true,,,setImmediateFlush,,,0,
71466,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,stripDuplicateBackslashes,,true,,,stripDuplicateBackslashes,,,0,
71470,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,activateOptionsInternal,,true,,,activateOptionsInternal,,,0,
71474,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,closeWriter,,true,,,closeWriter,,,0,
71477,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getEncoding,,true,,,getEncoding,,,0,
71480,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,FileOutputStreamPtr,,true,,,FileOutputStreamPtr,,,0,
71484,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getParent,,true,,,getParent,,,0,
71489,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,File,,true,,,File,,,0,
71492,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,mkdirs,,true,,,mkdirs,,,0,
71497,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,OutputStreamPtr,,true,,,OutputStreamPtr,,,0,
71501,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,newWriter,,true,,,newWriter,,,0,
71505,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,createWriter,,true,,,createWriter,,,0,
71509,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setWriterInternal,,true,,,setWriterInternal,,,0,
71513,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,writeHeader,,true,,,writeHeader,,,0,
71517,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,fn,,true,,,fn,,,0,
71521,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_file_close,,true,,,apr_file_close,,,0,
71525,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_file_read,,true,,,apr_file_read,,,0,
71531,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,APR_STATUS_IS_EOF,,true,,,APR_STATUS_IS_EOF,,,0,
71535,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.make_shared<FileLocationPatternConverter>,,true,,,std.make_shared<FileLocationPatternConverter>,,,0,
71539,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getFileName,,true,,,getFileName,,,0,
71543,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,<operator>.or,,true,,,<operator>.or,,,0,
71548,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,<operators>.assignmentOr,,true,,,<operators>.assignmentOr,,,0,
71553,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_file_write,,true,,,apr_file_write,,,0,
71559,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\filerenameaction.cpp,main\cpp\filerenameaction.cpp:26:26:priv:0,,true,26,26,priv,,,0,
71562,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,renameTo,,true,,,renameTo,,,0,
71566,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,lastModified,,true,,,lastModified,,,0,
71571,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,doOnChange,,true,,,doOnChange,,,0,
71574,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,is_interrupted,,true,,,is_interrupted,,,0,
71577,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,wait_for,,true,,,wait_for,,,0,
71584,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.chrono.milliseconds,,true,,,std.chrono.milliseconds,,,0,
71589,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.bind,,true,,,std.bind,,,0,
71595,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,checkAndConfigure,,true,,,checkAndConfigure,,,0,
71598,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\fixedwindowrollingpolicy.cpp,main\cpp\fixedwindowrollingpolicy.cpp:37:37:priv:0,,true,37,37,priv,,,0,
71601,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getIntegerPatternConverter,,true,,,getIntegerPatternConverter,,,0,
71604,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,IllegalStateException,,true,,,IllegalStateException,,,0,
71607,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,newActiveFile,,true,,,newActiveFile,,,0,
71611,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,formatFileName,,true,,,formatFileName,,,0,
71617,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,purge,,true,,,purge,,,0,
71623,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,compressedName,,true,,,compressedName,,,0,
71627,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getCreateIntermediateDirectories,,true,,,getCreateIntermediateDirectories,,,0,
71630,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,compressedFile,,true,,,compressedFile,,,0,
71634,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,compressedParent,,true,,,compressedParent,,,0,
71638,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setThrowIOExceptionOnForkFailure,,true,,,setThrowIOExceptionOnForkFailure,,,0,
71643,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,lowFilename,,true,,,lowFilename,,,0,
71647,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,highFilename,,true,,,highFilename,,,0,
71651,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,rbegin,,true,,,rbegin,,,0,
71655,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,rend,,true,,,rend,,,0,
71659,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\fixedwindowrollingpolicy.cpp,main\cpp\fixedwindowrollingpolicy.cpp:371:372:RULES_PUT:2,,true,371,372,RULES_PUT,,,0,
71663,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,"RULES_PUT(""i"", IntegerPatternConverter)",,true,,,"RULES_PUT(""i"", IntegerPatternConverter)",,,0,
71669,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,"RULES_PUT(""index"", IntegerPatternConverter)",,true,,,"RULES_PUT(""index"", IntegerPatternConverter)",,,0,
71675,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,helpers.OptionConverter.convertSpecialChars,,true,,,helpers.OptionConverter.convertSpecialChars,,,0,
71680,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getFormattedEventCharacterCount,,true,,,getFormattedEventCharacterCount,,,0,
71683,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,reserve,,true,,,reserve,,,0,
71688,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,fmt.format,,true,,,fmt.format,,,0,
71695,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getLineNumber,,true,,,getLineNumber,,,0,
71699,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getThreadName,,true,,,getThreadName,,,0,
71703,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,fmt.format_to,,true,,,fmt.format_to,,,0,
71735,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.back_inserter,,true,,,std.back_inserter,,,0,
71740,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,fmt.runtime,,true,,,fmt.runtime,,,0,
71745,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,fmt.arg,,true,,,fmt.arg,,,0,
71751,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getChronoTimeStamp,,true,,,getChronoTimeStamp,,,0,
71755,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getShortFileName,,true,,,getShortFileName,,,0,
71759,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getMethodName,,true,,,getMethodName,,,0,
71763,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.make_shared<FullLocationPatternConverter>,,true,,,std.make_shared<FullLocationPatternConverter>,,,0,
71767,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\gzcompressaction.cpp,main\cpp\gzcompressaction.cpp:30:30:priv:0,,true,30,30,priv,,,0,
71770,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_procattr_create,,true,,,apr_procattr_create,,,0,
71775,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_procattr_io_set,,true,,,apr_procattr_io_set,,,0,
71782,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_procattr_cmdtype_set,,true,,,apr_procattr_cmdtype_set,,,0,
71787,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_procattr_child_out_set,,true,,,apr_procattr_child_out_set,,,0,
71793,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_file_open_stderr,,true,,,apr_file_open_stderr,,,0,
71798,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_procattr_child_err_set,,true,,,apr_procattr_child_err_set,,,0,
71804,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setAutoDelete,,true,,,setAutoDelete,,,0,
71809,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_palloc,,true,,,apr_palloc,,,0,
71814,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_proc_create,,true,,,apr_proc_create,,,0,
71823,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_proc_wait,,true,,,apr_proc_wait,,,0,
71830,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,<operator>.and,,true,,,<operator>.and,,,0,
71835,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.setw,,true,,,std.setw,,,0,
71840,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.setfill,,true,,,std.setfill,,,0,
71845,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.resetiosflags,,true,,,std.resetiosflags,,,0,
71850,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.ios_base.fmtflags,,true,,,std.ios_base.fmtflags,,,0,
71855,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.isprint,,true,,,std.isprint,,,0,
71860,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,str,,true,,,str,,,0,
71865,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,removeHierarchy,,true,,,removeHierarchy,,,0,
71869,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setThresholdInternal,,true,,,setThresholdInternal,,,0,
71873,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,l,,true,,,l,,,0,
71877,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,addAppenderEvent,,true,,,addAppenderEvent,,,0,
71883,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,removeAppenderEvent,,true,,,removeAppenderEvent,,,0,
71889,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,logger,,true,,,logger,,,0,
71893,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,makeNewLoggerInstance,,true,,,makeNewLoggerInstance,,,0,
71899,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setHierarchy,,true,,,setHierarchy,,,0,
71904,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,LoggerMap.value_type,,true,,,LoggerMap.value_type,,,0,
71910,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,updateChildren,,true,,,updateChildren,,,0,
71915,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,updateParents,,true,,,updateParents,,,0,
71920,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,configurator,,true,,,configurator,,,0,
71923,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setResourceBundle,,true,,,setResourceBundle,,,0,
71928,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,shutdownInternal,,true,,,shutdownInternal,,,0,
71931,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,closeNestedAppenders,,true,,,closeNestedAppenders,,,0,
71935,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setParent,,true,,,setParent,,,0,
71940,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,node,,true,,,node,,,0,
71945,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,ProvisionNodeMap.value_type,,true,,,ProvisionNodeMap.value_type,,,0,
71951,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,updateThreshold,,true,,,updateThreshold,,,0,
71954,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,owns_lock,,true,,,owns_lock,,,0,
71958,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,ret,,true,,,ret,,,0,
71962,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,parentRefCount,,true,,,parentRefCount,,,0,
71966,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,use_count,,true,,,use_count,,,0,
71970,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setTitle,,true,,,setTitle,,,0,
71974,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,threadName,,true,,,threadName,,,0,
71978,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,equals,,true,,,equals,,,0,
71983,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getRenderedMessage,,true,,,getRenderedMessage,,,0,
71987,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,UnknownHostException,,true,,,UnknownHostException,,,0,
71991,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,ip,,true,,,ip,,,0,
71995,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_getnameinfo,,true,,,apr_getnameinfo,,,0,
72001,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,host,,true,,,host,,,0,
72005,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getAllByName,,true,,,getAllByName,,,0,
72009,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,front,,true,,,front,,,0,
72013,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getByName,,true,,,getByName,,,0,
72017,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,rv,,true,,,rv,,,0,
72021,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getHostName,,true,,,getHostName,,,0,
72024,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,NullPointerException,,true,,,NullPointerException,,,0,
72028,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,pstralloc,,true,,,pstralloc,,,0,
72033,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,read,,true,,,read,,,0,
72038,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,flip,,true,,,flip,,,0,
72042,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,memmove,,true,,,memmove,,,0,
72048,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.make_shared<IntegerPatternConverter>,,true,,,std.make_shared<IntegerPatternConverter>,,,0,
72052,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,intValue,,true,,,intValue,,,0,
72056,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setThreadInfo,,true,,,setThreadInfo,,,0,
72060,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setPrettyPrint,,true,,,setPrettyPrint,,,0,
72064,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,appendQuotedEscapedString,,true,,,appendQuotedEscapedString,,,0,
72069,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,appendSerializedMDC,,true,,,appendSerializedMDC,,,0,
72074,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,appendSerializedNDC,,true,,,appendSerializedNDC,,,0,
72079,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,appendSerializedLocationInfo,,true,,,appendSerializedLocationInfo,,,0,
72085,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,appendItem,,true,,,appendItem,,,0,
72090,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,find_first_of,,true,,,find_first_of,,,0,
72096,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getMDCKeySet,,true,,,getMDCKeySet,,,0,
72100,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getMDC,,true,,,getMDC,,,0,
72106,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,toLevelLS,,true,,,toLevelLS,,,0,
72111,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getAll,,true,,,getAll,,,0,
72114,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getDebug,,true,,,getDebug,,,0,
72117,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getTrace,,true,,,getTrace,,,0,
72120,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getInfo,,true,,,getInfo,,,0,
72123,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getWarn,,true,,,getWarn,,,0,
72126,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getError,,true,,,getError,,,0,
72129,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getFatal,,true,,,getFatal,,,0,
72132,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getOff,,true,,,getOff,,,0,
72135,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,trimmed,,true,,,trimmed,,,0,
72139,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\levelmatchfilter.cpp,main\cpp\levelmatchfilter.cpp:31:31:priv:0,,true,31,31,priv,,,0,
72142,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setLevelToMatch,,true,,,setLevelToMatch,,,0,
72146,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.make_shared<LevelPatternConverter>,,true,,,std.make_shared<LevelPatternConverter>,,,0,
72150,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\levelrangefilter.cpp,main\cpp\levelrangefilter.cpp:31:31:priv:0,,true,31,31,priv,,,0,
72153,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.make_shared<LineLocationPatternConverter>,,true,,,std.make_shared<LineLocationPatternConverter>,,,0,
72157,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.make_shared<LineSeparatorPatternConverter>,,true,,,std.make_shared<LineSeparatorPatternConverter>,,,0,
72161,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\literalpatternconverter.cpp,main\cpp\literalpatternconverter.cpp:29:29:priv:0,,true,29,29,priv,,,0,
72164,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\locationinfofilter.cpp,main\cpp\locationinfofilter.cpp:32:32:priv:0,,true,32,32,priv,,,0,
72167,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getHierarchy,,true,,,getHierarchy,,,0,
72170,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,fireAddAppenderEvent,,true,,,fireAddAppenderEvent,,,0,
72176,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,cbegin,,true,,,cbegin,,,0,
72180,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,cend,,true,,,cend,,,0,
72184,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,emitNoAppenderWarning,,true,,,emitNoAppenderWarning,,,0,
72189,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,callAppenders,,true,,,callAppenders,,,0,
72194,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,forcedLog,,true,,,forcedLog,,,0,
72199,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getResourceBundle,,true,,,getResourceBundle,,,0,
72202,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getString,,true,,,getString,,,0,
72207,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,logLS,,true,,,logLS,,,0,
72213,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,isDisabled,,true,,,isDisabled,,,0,
72218,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getResourceBundleString,,true,,,getResourceBundleString,,,0,
72222,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,addEventLS,,true,,,addEventLS,,,0,
72228,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,values,,true,,,values,,,0,
72232,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,l7dlog,,true,,,l7dlog,,,0,
72239,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,fireRemoveAppenderEvent,,true,,,fireRemoveAppenderEvent,,,0,
72245,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,isTraceEnabled,,true,,,isTraceEnabled,,,0,
72248,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,LOG4CXX_NS.Level.getTrace,,true,,,LOG4CXX_NS.Level.getTrace,,,0,
72252,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,isDebugEnabled,,true,,,isDebugEnabled,,,0,
72255,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,LOG4CXX_NS.Level.getDebug,,true,,,LOG4CXX_NS.Level.getDebug,,,0,
72259,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,isErrorEnabled,,true,,,isErrorEnabled,,,0,
72262,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,isFatalEnabled,,true,,,isFatalEnabled,,,0,
72265,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,LOG4CXX_NS.Level.getFatal,,true,,,LOG4CXX_NS.Level.getFatal,,,0,
72269,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,isInfoEnabled,,true,,,isInfoEnabled,,,0,
72272,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,LOG4CXX_NS.Level.getInfo,,true,,,LOG4CXX_NS.Level.getInfo,,,0,
72276,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,isEnabledFor,,true,,,isEnabledFor,,,0,
72281,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,forcedLogLS,,true,,,forcedLogLS,,,0,
72287,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,isWarnEnabled,,true,,,isWarnEnabled,,,0,
72290,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,LOG4CXX_NS.Level.getWarn,,true,,,LOG4CXX_NS.Level.getWarn,,,0,
72294,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\loggermatchfilter.cpp,main\cpp\loggermatchfilter.cpp:30:30:priv:0,,true,30,30,priv,,,0,
72297,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setLoggerToMatch,,true,,,setLoggerToMatch,,,0,
72301,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getMap,,true,,,getMap,,,0,
72305,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,ListItem,,true,,,ListItem,,,0,
72310,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getCurrentThreadName,,true,,,getCurrentThreadName,,,0,
72313,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,emit,,true,,,emit,,,0,
72317,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,out,,true,,,out,,,0,
72322,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getRepositorySelector,,true,,,getRepositorySelector,,,0,
72325,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getLoggerLS,,true,,,getLoggerLS,,,0,
72330,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,existsLS,,true,,,existsLS,,,0,
72334,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getCurrentLoggers,,true,,,getCurrentLoggers,,,0,
72338,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,shutdown,,true,,,shutdown,,,0,
72342,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,resetConfiguration,,true,,,resetConfiguration,,,0,
72346,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,removeLogger,,true,,,removeLogger,,,0,
72352,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,flags,,true,,,flags,,,0,
72357,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,precision,,true,,,precision,,,0,
72362,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,width,,true,,,width,,,0,
72367,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,get_stream_state,,true,,,get_stream_state,,,0,
72374,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,*manip,,true,,,*manip,,,0,
72379,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,refresh_stream_state,,true,,,refresh_stream_state,,,0,
72382,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,<operator>.xor,,true,,,<operator>.xor,,,0,
72387,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,<operator>.not,,true,,,<operator>.not,,,0,
72391,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setf,,true,,,setf,,,0,
72396,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,end_message,,true,,,end_message,,,0,
72400,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,isEnabled,,true,,,isEnabled,,,0,
72403,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,log,,true,,,log,,,0,
72410,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setLocation,,true,,,setLocation,,,0,
72414,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,fill,,true,,,fill,,,0,
72419,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\mapfilter.cpp,main\cpp\mapfilter.cpp:30:30:priv:0,,true,30,30,priv,,,0,
72422,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,it,,true,,,it,,,0,
72426,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,putLS,,true,,,putLS,,,0,
72431,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,remove,,true,,,remove,,,0,
72436,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,recycle,,true,,,recycle,,,0,
72440,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.make_shared<MDCPatternConverter>,,true,,,std.make_shared<MDCPatternConverter>,,,0,
72444,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,seekp,,true,,,seekp,,,0,
72449,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.basic_string<T>,,true,,,std.basic_string<T>,,,0,
72453,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,StreamFromBuf,,true,,,StreamFromBuf,,,0,
72457,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,BufFromStream,,true,,,BufFromStream,,,0,
72461,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.make_shared<MessagePatternConverter>,,true,,,std.make_shared<MessagePatternConverter>,,,0,
72465,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.make_shared<MethodLocationPatternConverter>,,true,,,std.make_shared<MethodLocationPatternConverter>,,,0,
72469,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\multiprocessrollingfileappender.cpp,main\cpp\multiprocessrollingfileappender.cpp:72:72:_priv:0,,true,72,72,_priv,,,0,
72472,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.make_shared<FixedWindowRollingPolicy>,,true,,,std.make_shared<FixedWindowRollingPolicy>,,,0,
72476,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setFileNamePattern,,true,,,setFileNamePattern,,,0,
72481,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getFile,,true,,,getFile,,,0,
72484,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.make_shared<ManualTriggeringPolicy>,,true,,,std.make_shared<ManualTriggeringPolicy>,,,0,
72488,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,initialize,,true,,,initialize,,,0,
72495,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getAppend,,true,,,getAppend,,,0,
72499,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,syncAction,,true,,,syncAction,,,0,
72503,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getSynchronous,,true,,,getSynchronous,,,0,
72507,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getActiveFileName,,true,,,getActiveFileName,,,0,
72511,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,asyncAction,,true,,,asyncAction,,,0,
72515,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getAsynchronous,,true,,,getAsynchronous,,,0,
72519,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_file_unlock,,true,,,apr_file_unlock,,,0,
72523,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,rolloverInternal,,true,,,rolloverInternal,,,0,
72527,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,fileName,,true,,,fileName,,,0,
72531,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_time_now,,true,,,apr_time_now,,,0,
72534,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getPatternConverterList,,true,,,getPatternConverterList,,,0,
72538,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\multiprocessrollingfileappender.cpp,main\cpp\multiprocessrollingfileappender.cpp:22:22:MAX_FILE_LEN:0,,true,22,22,MAX_FILE_LEN,,,0,
72541,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_uid_current,,true,,,apr_uid_current,,,0,
72547,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,snprintf,,true,,,snprintf,,,0,
72554,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,parent_path,,true,,,parent_path,,,0,
72558,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,string,,true,,,string,,,0,
72562,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,filename,,true,,,filename,,,0,
72566,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,strerror,,true,,,strerror,,,0,
72570,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_file_lock,,true,,,apr_file_lock,,,0,
72575,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,isTriggeringEvent,,true,,,isTriggeringEvent,,,0,
72580,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getFileLength,,true,,,getFileLength,,,0,
72583,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getWriter,,true,,,getWriter,,,0,
72586,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getFilePtr,,true,,,getFilePtr,,,0,
72590,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_file_info_get,,true,,,apr_file_info_get,,,0,
72596,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,rollover1,,true,,,rollover1,,,0,
72600,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,rollover,,true,,,rollover,,,0,
72607,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,LOG4CXX_NS.helpers.Transcoder.decode,,true,,,LOG4CXX_NS.helpers.Transcoder.decode,,,0,
72613,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,os,,true,,,os,,,0,
72617,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,releaseFileLock,,true,,,releaseFileLock,,,0,
72621,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,reopenLatestFile,,true,,,reopenLatestFile,,,0,
72625,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,FileAppender.subAppend,,true,,,FileAppender.subAppend,,,0,
72631,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setMultiprocess,,true,,,setMultiprocess,,,0,
72636,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,FileAppender.close,,true,,,FileAppender.close,,,0,
72640,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setFileLength,,true,,,setFileLength,,,0,
72645,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,FileAppender.createWriter,,true,,,FileAppender.createWriter,,,0,
72650,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,PatternAbbreviatorFragment.abbreviate,,true,,,abbreviate,,,0,
72656,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getDefaultAbbreviator,,true,,,getDefaultAbbreviator,,,0,
72659,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,PatternAbbreviatorFragment,,true,,,PatternAbbreviatorFragment,,,0,
72664,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.make_shared<NOPAbbreviator>,,true,,,std.make_shared<NOPAbbreviator>,,,0,
72668,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\namepatternconverter.cpp,main\cpp\namepatternconverter.cpp:28:28:priv:0,,true,28,28,priv,,,0,
72671,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,push,,true,,,push,,,0,
72676,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,pop,,true,,,pop,,,0,
72680,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getStack,,true,,,getStack,,,0,
72684,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getFullMessage,,true,,,getFullMessage,,,0,
72688,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,top,,true,,,top,,,0,
72692,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.make_shared<NDCPatternConverter>,,true,,,std.make_shared<NDCPatternConverter>,,,0,
72696,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,strReturn,,true,,,strReturn,,,0,
72700,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_pstrdup,,true,,,apr_pstrdup,,,0,
72705,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\odbcappender.cpp,main\cpp\odbcappender.cpp:148:149:RULES_PUT:2,,true,148,149,RULES_PUT,,,0,
72709,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,"RULES_PUT(""mdc"", MDCPatternConverter)",,true,,,"RULES_PUT(""mdc"", MDCPatternConverter)",,,0,
72715,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setPassword,,true,,,setPassword,,,0,
72719,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setSql,,true,,,setSql,,,0,
72723,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setURL,,true,,,setURL,,,0,
72727,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setUser,,true,,,setUser,,,0,
72731,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\odbcappender.cpp,main\cpp\odbcappender.cpp:119:119:_priv:0,,true,119,119,_priv,,,0,
72734,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,flushBuffer,,true,,,flushBuffer,,,0,
72738,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,palloc,,true,,,palloc,,,0,
72742,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,<operator>.arithmeticShiftRight,,true,,,<operator>.arithmeticShiftRight,,,0,
72747,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,atol,,true,,,atol,,,0,
72751,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getProperty,,true,,,getProperty,,,0,
72757,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,substVars,,true,,,substVars,,,0,
72762,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,delimStart,,true,,,delimStart,,,0,
72766,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,replacement,,true,,,replacement,,,0,
72770,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getSystemProperty,,true,,,getSystemProperty,,,0,
72775,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,findAndSubst,,true,,,findAndSubst,,,0,
72780,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.make_shared<PropertyConfigurator>,,true,,,std.make_shared<PropertyConfigurator>,,,0,
72784,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,reset,,true,,,reset,,,0,
72788,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,pat,,true,,,pat,,,0,
72792,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\patternlayout.cpp,main\cpp\patternlayout.cpp:213:214:RULES_PUT:2,,true,213,214,RULES_PUT,,,0,
72796,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,"RULES_PUT(""c"", LoggerPatternConverter)",,true,,,"RULES_PUT(""c"", LoggerPatternConverter)",,,0,
72802,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,"RULES_PUT(""C"", ClassNamePatternConverter)",,true,,,"RULES_PUT(""C"", ClassNamePatternConverter)",,,0,
72808,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,PatternMap.value_type,,true,,,PatternMap.value_type,,,0,
72814,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,"RULES_PUT(""y"", ColorEndPatternConverter)",,true,,,"RULES_PUT(""y"", ColorEndPatternConverter)",,,0,
72820,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,"RULES_PUT(""d"", DatePatternConverter)",,true,,,"RULES_PUT(""d"", DatePatternConverter)",,,0,
72826,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,"RULES_PUT(""date"", DatePatternConverter)",,true,,,"RULES_PUT(""date"", DatePatternConverter)",,,0,
72832,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,"RULES_PUT(""f"", ShortFileLocationPatternConverter)",,true,,,"RULES_PUT(""f"", ShortFileLocationPatternConverter)",,,0,
72838,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,"RULES_PUT(""F"", FileLocationPatternConverter)",,true,,,"RULES_PUT(""F"", FileLocationPatternConverter)",,,0,
72844,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,"RULES_PUT(""file"", FileLocationPatternConverter)",,true,,,"RULES_PUT(""file"", FileLocationPatternConverter)",,,0,
72850,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,"RULES_PUT(""l"", FullLocationPatternConverter)",,true,,,"RULES_PUT(""l"", FullLocationPatternConverter)",,,0,
72856,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,"RULES_PUT(""L"", LineLocationPatternConverter)",,true,,,"RULES_PUT(""L"", LineLocationPatternConverter)",,,0,
72862,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,"RULES_PUT(""m"", MessagePatternConverter)",,true,,,"RULES_PUT(""m"", MessagePatternConverter)",,,0,
72868,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,"RULES_PUT(""n"", LineSeparatorPatternConverter)",,true,,,"RULES_PUT(""n"", LineSeparatorPatternConverter)",,,0,
72874,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,"RULES_PUT(""M"", MethodLocationPatternConverter)",,true,,,"RULES_PUT(""M"", MethodLocationPatternConverter)",,,0,
72880,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,"RULES_PUT(""p"", LevelPatternConverter)",,true,,,"RULES_PUT(""p"", LevelPatternConverter)",,,0,
72886,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,"RULES_PUT(""r"", RelativeTimePatternConverter)",,true,,,"RULES_PUT(""r"", RelativeTimePatternConverter)",,,0,
72892,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,"RULES_PUT(""relative"", RelativeTimePatternConverter)",,true,,,"RULES_PUT(""relative"", RelativeTimePatternConverter)",,,0,
72898,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,"RULES_PUT(""t"", ThreadPatternConverter)",,true,,,"RULES_PUT(""t"", ThreadPatternConverter)",,,0,
72904,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,"RULES_PUT(""T"", ThreadUsernamePatternConverter)",,true,,,"RULES_PUT(""T"", ThreadUsernamePatternConverter)",,,0,
72910,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,"RULES_PUT(""x"", NDCPatternConverter)",,true,,,"RULES_PUT(""x"", NDCPatternConverter)",,,0,
72916,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,"RULES_PUT(""X"", PropertiesPatternConverter)",,true,,,"RULES_PUT(""X"", PropertiesPatternConverter)",,,0,
72922,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,"RULES_PUT(""J"", MDCPatternConverter)",,true,,,"RULES_PUT(""J"", MDCPatternConverter)",,,0,
72928,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,"RULES_PUT(""properties"", PropertiesPatternConverter)",,true,,,"RULES_PUT(""properties"", PropertiesPatternConverter)",,,0,
72934,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,"RULES_PUT(""throwable"", ThrowableInformationPatternConverter)",,true,,,"RULES_PUT(""throwable"", ThrowableInformationPatternConverter)",,,0,
72940,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setErrorColor,,true,,,setErrorColor,,,0,
72945,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setFatalColor,,true,,,setFatalColor,,,0,
72950,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setWarnColor,,true,,,setWarnColor,,,0,
72955,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setInfoColor,,true,,,setInfoColor,,,0,
72960,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setDebugColor,,true,,,setDebugColor,,,0,
72965,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setTraceColor,,true,,,setTraceColor,,,0,
72970,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,isUnicodeIdentifierStart,,true,,,isUnicodeIdentifierStart,,,0,
72974,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,isUnicodeIdentifierPart,,true,,,isUnicodeIdentifierPart,,,0,
72978,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,r,,true,,,r,,,0,
72982,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,formattingInfo,,true,,,formattingInfo,,,0,
72986,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getMinLength,,true,,,getMinLength,,,0,
72990,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getMaxLength,,true,,,getMaxLength,,,0,
72994,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,isLeftAligned,,true,,,isLeftAligned,,,0,
72998,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,finalizeConverter,,true,,,finalizeConverter,,,0,
73009,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,converterName,,true,,,converterName,,,0,
73013,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,iter->second,,true,,,iter->second,,,0,
73018,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,PatternConverterPtr,,true,,,PatternConverterPtr,,,0,
73021,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,extractConverter,,true,,,extractConverter,,,0,
73029,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,converterId,,true,,,converterId,,,0,
73033,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,extractOptions,,true,,,extractOptions,,,0,
73039,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,pc,,true,,,pc,,,0,
73043,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,createConverter,,true,,,createConverter,,,0,
73050,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_itoa,,true,,,apr_itoa,,,0,
73055,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_pstrndup,,true,,,apr_pstrndup,,,0,
73061,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,oldValue,,true,,,oldValue,,,0,
73065,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\propertiespatternconverter.cpp,main\cpp\propertiespatternconverter.cpp:31:31:priv:0,,true,31,31,priv,,,0,
73068,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,keySet,,true,,,keySet,,,0,
73072,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,PropertyConfigurator,,true,,,PropertyConfigurator,,,0,
73075,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,InputStreamPtr,,true,,,InputStreamPtr,,,0,
73079,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,load,,true,,,load,,,0,
73084,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,DEBUG_KEY,,true,,,DEBUG_KEY,,,0,
73088,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,THRESHOLD_PREFIX,,true,,,THRESHOLD_PREFIX,,,0,
73092,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getThreshold,,true,,,getThreshold,,,0,
73096,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,threadConfigurationValue,,true,,,threadConfigurationValue,,,0,
73100,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,configureRootLogger,,true,,,configureRootLogger,,,0,
73105,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,configureLoggerFactory,,true,,,configureLoggerFactory,,,0,
73109,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,parseCatsAndRenderers,,true,,,parseCatsAndRenderers,,,0,
73114,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,LOGGER_FACTORY_KEY,,true,,,LOGGER_FACTORY_KEY,,,0,
73118,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,FACTORY_PREFIX,,true,,,FACTORY_PREFIX,,,0,
73122,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,ROOT_CATEGORY_PREFIX,,true,,,ROOT_CATEGORY_PREFIX,,,0,
73126,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,ROOT_LOGGER_PREFIX,,true,,,ROOT_LOGGER_PREFIX,,,0,
73130,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,effectiveFrefix,,true,,,effectiveFrefix,,,0,
73134,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,INTERNAL_ROOT_NAME,,true,,,INTERNAL_ROOT_NAME,,,0,
73138,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,CATEGORY_PREFIX,,true,,,CATEGORY_PREFIX,,,0,
73142,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,LOGGER_PREFIX,,true,,,LOGGER_PREFIX,,,0,
73146,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,propertyNames,,true,,,propertyNames,,,0,
73150,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,parseAdditivityForLogger,,true,,,parseAdditivityForLogger,,,0,
73156,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,ADDITIVITY_PREFIX,,true,,,ADDITIVITY_PREFIX,,,0,
73160,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,st,,true,,,st,,,0,
73165,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,hasMoreTokens,,true,,,hasMoreTokens,,,0,
73169,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,nextToken,,true,,,nextToken,,,0,
73173,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,reconfigure,,true,,,reconfigure,,,0,
73179,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,registryGet,,true,,,registryGet,,,0,
73183,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,APPENDER_PREFIX,,true,,,APPENDER_PREFIX,,,0,
73187,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,Appender.getStaticClass,,true,,,Appender.getStaticClass,,,0,
73191,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.make_shared<RollingFileAppender>,,true,,,std.make_shared<RollingFileAppender>,,,0,
73195,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,OptionHandler.getStaticClass,,true,,,OptionHandler.getStaticClass,,,0,
73199,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,requiresLayout,,true,,,requiresLayout,,,0,
73203,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,Layout.getStaticClass,,true,,,Layout.getStaticClass,,,0,
73207,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,RollingPolicy.getStaticClass,,true,,,RollingPolicy.getStaticClass,,,0,
73211,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,TriggeringPolicy.getStaticClass,,true,,,TriggeringPolicy.getStaticClass,,,0,
73215,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,registryPut,,true,,,registryPut,,,0,
73219,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,resourceBundle,,true,,,resourceBundle,,,0,
73223,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,MissingResourceException,,true,,,MissingResourceException,,,0,
73227,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setProperties,,true,,,setProperties,,,0,
73231,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,PropertySetter,,true,,,PropertySetter,,,0,
73235,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setOption,,true,,,setOption,,,0,
73241,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,int64_t,,true,,,int64_t,,,0,
73245,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.make_shared<RelativeTimePatternConverter>,,true,,,std.make_shared<RelativeTimePatternConverter>,,,0,
73249,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getVariant,,true,,,getVariant,,,0,
73253,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getLanguage,,true,,,getLanguage,,,0,
73257,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getCountry,,true,,,getCountry,,,0,
73261,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setMaxFileSize,,true,,,setMaxFileSize,,,0,
73266,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setMaxBackupIndex,,true,,,setMaxBackupIndex,,,0,
73270,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setDatePattern,,true,,,setDatePattern,,,0,
73274,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\rollingfileappender.cpp,main\cpp\rollingfileappender.cpp:64:64:_priv:0,,true,64,64,_priv,,,0,
73277,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getMaxIndex,,true,,,getMaxIndex,,,0,
73281,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setMaxIndex,,true,,,setMaxIndex,,,0,
73286,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getMaxFileSize,,true,,,getMaxFileSize,,,0,
73290,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.make_shared<SizeBasedTriggeringPolicy>,,true,,,std.make_shared<SizeBasedTriggeringPolicy>,,,0,
73294,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setMaximumFileSize,,true,,,setMaximumFileSize,,,0,
73298,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,long,,true,,,long,,,0,
73302,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getMaximumFileSize,,true,,,getMaximumFileSize,,,0,
73305,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,result,,true,,,result,,,0,
73309,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.make_shared<TimeBasedRollingPolicy>,,true,,,std.make_shared<TimeBasedRollingPolicy>,,,0,
73313,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,makeFileNamePattern,,true,,,makeFileNamePattern,,,0,
73317,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,incrementFileLength,,true,,,incrementFileLength,,,0,
73322,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,parseFileNamePattern,,true,,,parseFileNamePattern,,,0,
73325,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,ref1,,true,,,ref1,,,0,
73329,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,memset,,true,,,memset,,,0,
73335,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_strftime,,true,,,apr_strftime,,,0,
73343,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,*inc,,true,,,*inc,,,0,
73349,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getField,,true,,,getField,,,0,
73353,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getID,,true,,,getID,,,0,
73357,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,addToken,,true,,,addToken,,,0,
73364,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,parsePattern,,true,,,parsePattern,,,0,
73370,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,explode,,true,,,explode,,,0,
73376,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\smtpappender.cpp,main\cpp\smtpappender.cpp:416:416:_priv:0,,true,416,416,_priv,,,0,
73379,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setEvaluatorClass,,true,,,setEvaluatorClass,,,0,
73383,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setFrom,,true,,,setFrom,,,0,
73387,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setSMTPHost,,true,,,setSMTPHost,,,0,
73391,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setSMTPUsername,,true,,,setSMTPUsername,,,0,
73395,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setSMTPPassword,,true,,,setSMTPPassword,,,0,
73399,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setSubject,,true,,,setSubject,,,0,
73403,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setTo,,true,,,setTo,,,0,
73407,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setCc,,true,,,setCc,,,0,
73411,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setBcc,,true,,,setBcc,,,0,
73415,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setSMTPPort,,true,,,setSMTPPort,,,0,
73419,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,<operators>.assignmentAnd,,true,,,<operators>.assignmentAnd,,,0,
73424,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,asciiCheck,,true,,,asciiCheck,,,0,
73429,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,AppenderSkeleton.activateOptions,,true,,,AppenderSkeleton.activateOptions,,,0,
73434,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,checkEntryConditions,,true,,,checkEntryConditions,,,0,
73437,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,sendBuffer,,true,,,sendBuffer,,,0,
73441,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getClass,,true,,,getClass,,,0,
73445,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,connect,,true,,,connect,,,0,
73449,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\socketappenderskeleton.cpp,main\cpp\socketappenderskeleton.cpp:36:36:_priv:0,,true,36,36,_priv,,,0,
73452,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,cleanUp,,true,,,cleanUp,,,0,
73456,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,lock2,,true,,,lock2,,,0,
73460,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setSocket,,true,,,setSocket,,,0,
73465,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,fireConnector,,true,,,fireConnector,,,0,
73468,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setRemoteHost,,true,,,setRemoteHost,,,0,
73472,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setPort,,true,,,setPort,,,0,
73476,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getDefaultPort,,true,,,getDefaultPort,,,0,
73479,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setReconnectionDelay,,true,,,setReconnectionDelay,,,0,
73483,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getDefaultDelay,,true,,,getDefaultDelay,,,0,
73486,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,is_closed,,true,,,is_closed,,,0,
73489,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,helpers.InetAddress.getByName,,true,,,helpers.InetAddress.getByName,,,0,
73494,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,LOG4CXX_NS.helpers.Transcoder.encode,,true,,,LOG4CXX_NS.helpers.Transcoder.encode,,,0,
73500,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.transform,,true,,,std.transform,,,0,
73508,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,find_first_not_of,,true,,,find_first_not_of,,,0,
73514,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,find_last_not_of,,true,,,find_last_not_of,,,0,
73519,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.stoi,,true,,,std.stoi,,,0,
73524,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.stoll,,true,,,std.stoll,,,0,
73529,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.to_string,,true,,,std.to_string,,,0,
73534,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\stringmatchfilter.cpp,main\cpp\stringmatchfilter.cpp:30:30:priv:0,,true,30,30,priv,,,0,
73537,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,NoSuchElementException,,true,,,NoSuchElementException,,,0,
73540,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,initSyslogFacilityStr,,true,,,initSyslogFacilityStr,,,0,
73544,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setSyslogHost,,true,,,setSyslogHost,,,0,
73548,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\syslogappender.cpp,main\cpp\syslogappender.cpp:40:40:_priv:0,,true,40,40,_priv,,,0,
73551,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getFacilityString,,true,,,getFacilityString,,,0,
73555,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\syslogappender.cpp,main\cpp\syslogappender.cpp:32:32:LOG_UNDEF:0,,true,32,32,LOG_UNDEF,,,0,
73558,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_snprintf,,true,,,apr_snprintf,,,0,
73566,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,sbuf,,true,,,sbuf,,,0,
73571,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getSyslogEquivalent,,true,,,getSyslogEquivalent,,,0,
73575,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setFacility,,true,,,setFacility,,,0,
73579,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setMaxMessageLength,,true,,,setMaxMessageLength,,,0,
73583,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getFacility,,true,,,getFacility,,,0,
73587,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,send,,true,,,send,,,0,
73592,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_temp_dir_get,,true,,,apr_temp_dir_get,,,0,
73597,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_filepath_get,,true,,,apr_filepath_get,,,0,
73603,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_env_get,,true,,,apr_env_get,,,0,
73609,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\telnetappender.cpp,main\cpp\telnetappender.cpp:53:53:_priv:0,,true,53,53,_priv,,,0,
73612,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setSoTimeout,,true,,,setSoTimeout,,,0,
73617,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,setEncoding,,true,,,setEncoding,,,0,
73621,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,b,,true,,,b,,,0,
73626,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,msgIter,,true,,,msgIter,,,0,
73630,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,CharsetEncoder.isError,,true,,,CharsetEncoder.isError,,,0,
73635,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,unrepresented,,true,,,unrepresented,,,0,
73640,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,unrepresentedIter,,true,,,unrepresentedIter,,,0,
73644,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,accept,,true,,,accept,,,0,
73648,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,writeStatus,,true,,,writeStatus,,,0,
73654,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,oss,,true,,,oss,,,0,
73658,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.make_shared<ThreadPatternConverter>,,true,,,std.make_shared<ThreadPatternConverter>,,,0,
73662,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getDataNoThreads,,true,,,getDataNoThreads,,,0,
73665,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getCurrentData,,true,,,getCurrentData,,,0,
73668,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,createCurrentData,,true,,,createCurrentData,,,0,
73671,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,NDC.DiagnosticContext,,true,,,NDC.DiagnosticContext,,,0,
73677,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,fullMessage,,true,,,fullMessage,,,0,
73681,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.make_shared<ThreadUsernamePatternConverter>,,true,,,std.make_shared<ThreadUsernamePatternConverter>,,,0,
73685,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getThreadUserName,,true,,,getThreadUserName,,,0,
73689,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,configureFuncs,,true,,,configureFuncs,,,0,
73696,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getFileNamePattern,,true,,,getFileNamePattern,,,0,
73699,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,dtc,,true,,,dtc,,,0,
73703,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getDatePatternConverter,,true,,,getDatePatternConverter,,,0,
73706,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.make_shared<Date>,,true,,,std.make_shared<Date>,,,0,
73710,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\timebasedrollingpolicy.cpp,main\cpp\timebasedrollingpolicy.cpp:346:347:RULES_PUT:2,,true,346,347,RULES_PUT,,,0,
73714,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,"RULES_PUT(""d"", FileDatePatternConverter)",,true,,,"RULES_PUT(""d"", FileDatePatternConverter)",,,0,
73720,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,"RULES_PUT(""date"", FileDatePatternConverter)",,true,,,"RULES_PUT(""date"", FileDatePatternConverter)",,,0,
73726,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getNextSecond,,true,,,getNextSecond,,,0,
73730,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,currentFile,,true,,,currentFile,,,0,
73734,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,newFileName,,true,,,newFileName,,,0,
73738,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,lastBaseName,,true,,,lastBaseName,,,0,
73742,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,nextActiveFile,,true,,,nextActiveFile,,,0,
73746,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.make_shared<GMTTimeZone>,,true,,,std.make_shared<GMTTimeZone>,,,0,
73750,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,LOG4CXX_UNLIKELY,,true,,,LOG4CXX_UNLIKELY,,,0,
73754,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_time_usec,,true,,,apr_time_usec,,,0,
73758,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_time_sec,,true,,,apr_time_sec,,,0,
73762,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_time_exp_gmt,,true,,,apr_time_exp_gmt,,,0,
73767,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.make_shared<LocalTimeZone>,,true,,,std.make_shared<LocalTimeZone>,,,0,
73771,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_time_exp_lt,,true,,,apr_time_exp_lt,,,0,
73776,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,apr_time_exp_tz,,true,,,apr_time_exp_tz,,,0,
73782,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,off,,true,,,off,,,0,
73786,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getDefault,,true,,,getDefault,,,0,
73789,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getGMT,,true,,,getGMT,,,0,
73792,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,encodeUTF8,,true,,,encodeUTF8,,,0,
73797,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,pstrdup,,true,,,pstrdup,,,0,
73802,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,encodeUTF16BE,,true,,,encodeUTF16BE,,,0,
73807,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,encodeUTF16LE,,true,,,encodeUTF16LE,,,0,
73812,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,CharsetDecoder.isError,,true,,,CharsetDecoder.isError,,,0,
73817,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,String.append,,true,,,append,,,0,
73823,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,CDATA_END,,true,,,CDATA_END,,,0,
73827,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,CDATA_EMBEDED_END,,true,,,CDATA_EMBEDED_END,,,0,
73831,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\writerappender.cpp,main\cpp\writerappender.cpp:30:30:_priv:0,,true,30,30,_priv,,,0,
73834,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,subAppend,,true,,,subAppend,,,0,
73839,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,writeFooter,,true,,,writeFooter,,,0,
73843,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,enc,,true,,,enc,,,0,
73847,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,WriterPtr,,true,,,WriterPtr,,,0,
73851,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,appendFooter,,true,,,appendFooter,,,0,
73857,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,appendHeader,,true,,,appendHeader,,,0,
73863,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,propertySet,,true,,,propertySet,,,0,
73867,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getPropertyKeySet,,true,,,getPropertyKeySet,,,0,
73871,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,key,,true,,,key,,,0,
73875,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\xmlsocketappender.cpp,main\cpp\xmlsocketappender.cpp:53:53:_priv:0,,true,53,53,_priv,,,0,
73878,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.make_shared<XMLLayout>,,true,,,std.make_shared<XMLLayout>,,,0,
73882,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,charset,,true,,,charset,,,0,
73886,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getReconnectionDelay,,true,,,getReconnectionDelay,,,0,
73889,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\cpp\zipcompressaction.cpp,main\cpp\zipcompressaction.cpp:30:30:priv:0,,true,30,30,priv,,,0,
73892,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,addObject,,true,,,addObject,,,0,
73898,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,int.hash_code,,true,,,hash_code,,,0,
73902,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,findOrAddObject,,true,,,findOrAddObject,,,0,
73908,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.shared_ptr<Ret>,,true,,,std.shared_ptr<Ret>,,,0,
73912,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,cast,,true,,,cast,,,0,
73917,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,Ret.getStaticClass,,true,,,Ret.getStaticClass,,,0,
73921,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,~T,,true,,,~T,,,0,
73925,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,LoggerInstancePtr.reset,,true,,,reset,,,0,
73928,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,main\include\log4cxx\private\string_c11.hpp,main\include\log4cxx\private\string_c11.hpp:28:28:RSIZE_MAX:0,,true,28,28,RSIZE_MAX,,,0,
73931,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,std.bad_alloc,,true,,,std.bad_alloc,,,0,
73935,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,getStringPool,,true,,,getStringPool,,,0,
73938,METHOD,<global>,NAMESPACE_BLOCK,<empty>,,,<empty>,strlen,,true,,,strlen,,,0,
