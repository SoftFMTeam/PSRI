,Id,Name,NodeType,Fullname,Signature,Filename,Code,LineNumber,LineNumberEnd,ColumnNumber,ColumnNumberEnd,LineOfCode,NumberOfOperators,SetOfOperators,NumberOfOperands,SetOfOperands,FanIn,FanOut,McCabe,AccCyc,ConCf,ConDf,ConZc,ConRf,ConVal,Parma,ParmaIn,ParmaOut,RetType
0,68716,cmake\SQLAllocHandleTest.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1,68717,cmake\boost-fallback\test-boostatomic.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2,68718,cmake\boost-fallback\test-boostfilesystem.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3,68719,cmake\boost-fallback\test-boostmutex.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4,68720,cmake\boost-fallback\test-boostsharedmutex.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
5,68721,cmake\boost-fallback\test-boostsharedptr.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6,68722,cmake\boost-fallback\test-boostthread.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7,68723,cmake\boost-fallback\test-stdatomic.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8,68724,cmake\boost-fallback\test-stdexpfilesystem.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
9,68725,cmake\boost-fallback\test-stdfilesystem.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
10,68726,cmake\boost-fallback\test-stdmutex.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
11,68727,cmake\boost-fallback\test-stdsharedmutex.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
12,68728,cmake\boost-fallback\test-stdsharedptr.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
13,68729,cmake\boost-fallback\test-stdthread.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
14,68730,cmake\compiler-features\test-make-unique.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
15,68731,cmake\compiler-features\test-thread-local.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
16,68732,cmake\compiler-features\test-unicode.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
17,68733,cmake\pthread\test-pthread-getname.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
18,68734,cmake\pthread\test-pthread-setname.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
19,68735,examples\cpp\MyApp-qt.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
20,68736,examples\cpp\MyApp1.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
21,68737,examples\cpp\MyApp2.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
22,68738,examples\cpp\auto-configured.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
23,68739,examples\cpp\com\foo\bar-qt.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
24,68740,examples\cpp\com\foo\bar.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
25,68741,examples\cpp\com\foo\bar.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
26,68742,examples\cpp\com\foo\config-qt.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
27,68743,examples\cpp\com\foo\config-qt.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
28,68744,examples\cpp\com\foo\config.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
29,68745,examples\cpp\com\foo\config1.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
30,68746,examples\cpp\com\foo\config2.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
31,68747,examples\cpp\com\foo\config3.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
32,68748,examples\cpp\console.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
33,68749,examples\cpp\custom-appender.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
34,68750,examples\cpp\delayedloop.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
35,68751,examples\cpp\format-string.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
36,68752,examples\cpp\ndc-example.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
37,68753,examples\cpp\stream.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
38,68754,main\cpp-qt\configuration.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
39,68755,main\cpp-qt\messagehandler.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
40,68756,main\cpp\action.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
41,68757,main\cpp\andfilter.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
42,68758,main\cpp\appenderattachableimpl.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
43,68759,main\cpp\appenderskeleton.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
44,68760,main\cpp\aprdatagramsocket.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
45,68761,main\cpp\aprinitializer.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
46,68762,main\cpp\aprserversocket.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
47,68763,main\cpp\aprsocket.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
48,68764,main\cpp\asyncappender.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
49,68765,main\cpp\atexitregistry.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
50,68766,main\cpp\basicconfigurator.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
51,68767,main\cpp\bufferedwriter.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
52,68768,main\cpp\bytearrayinputstream.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
53,68769,main\cpp\bytearrayoutputstream.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
54,68770,main\cpp\bytebuffer.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
55,68771,main\cpp\cacheddateformat.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
56,68772,main\cpp\charsetdecoder.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
57,68773,main\cpp\charsetencoder.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
58,68774,main\cpp\class.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
59,68775,main\cpp\classnamepatternconverter.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
60,68776,main\cpp\classregistration.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
61,68777,main\cpp\colorendpatternconverter.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
62,68778,main\cpp\colorstartpatternconverter.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
63,68779,main\cpp\configurator.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
64,68780,main\cpp\consoleappender.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
65,68781,main\cpp\cyclicbuffer.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
66,68782,main\cpp\datagrampacket.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
67,68783,main\cpp\datagramsocket.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
68,68784,main\cpp\date.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
69,68785,main\cpp\dateformat.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
70,68786,main\cpp\datepatternconverter.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
71,68787,main\cpp\dbappender.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
72,68788,main\cpp\defaultconfigurator.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
73,68789,main\cpp\defaultloggerfactory.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
74,68790,main\cpp\defaultrepositoryselector.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
75,68791,main\cpp\domconfigurator.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
76,68792,main\cpp\exception.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
77,68793,main\cpp\fallbackerrorhandler.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
78,68794,main\cpp\file.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
79,68795,main\cpp\fileappender.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
80,68796,main\cpp\filedatepatternconverter.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
81,68797,main\cpp\fileinputstream.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
82,68798,main\cpp\filelocationpatternconverter.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
83,68799,main\cpp\fileoutputstream.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
84,68800,main\cpp\filerenameaction.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
85,68801,main\cpp\filewatchdog.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
86,68802,main\cpp\filter.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
87,68803,main\cpp\filterbasedtriggeringpolicy.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
88,68804,main\cpp\fixedwindowrollingpolicy.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
89,68805,main\cpp\fmtlayout.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
90,68806,main\cpp\formattinginfo.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
91,68807,main\cpp\fulllocationpatternconverter.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
92,68808,main\cpp\gzcompressaction.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
93,68809,main\cpp\hexdump.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
94,68810,main\cpp\hierarchy.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
95,68811,main\cpp\htmllayout.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
96,68812,main\cpp\inetaddress.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
97,68813,main\cpp\inputstream.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
98,68814,main\cpp\inputstreamreader.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
99,68815,main\cpp\integer.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
100,68816,main\cpp\integerpatternconverter.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
101,68817,main\cpp\jsonlayout.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
102,68818,main\cpp\layout.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
103,68819,main\cpp\level.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
104,68820,main\cpp\levelmatchfilter.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
105,68821,main\cpp\levelpatternconverter.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
106,68822,main\cpp\levelrangefilter.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
107,68823,main\cpp\linelocationpatternconverter.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
108,68824,main\cpp\lineseparatorpatternconverter.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
109,68825,main\cpp\literalpatternconverter.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
110,68826,main\cpp\loader.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
111,68827,main\cpp\locale.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
112,68828,main\cpp\locationinfo.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
113,68829,main\cpp\locationinfofilter.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
114,68830,main\cpp\logger.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
115,68831,main\cpp\loggermatchfilter.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
116,68832,main\cpp\loggerpatternconverter.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
117,68833,main\cpp\loggingevent.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
118,68834,main\cpp\loggingeventpatternconverter.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
119,68835,main\cpp\loglog.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
120,68836,main\cpp\logmanager.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
121,68837,main\cpp\logstream.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
122,68838,main\cpp\manualtriggeringpolicy.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
123,68839,main\cpp\mapfilter.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
124,68840,main\cpp\mdc.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
125,68841,main\cpp\mdcpatternconverter.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
126,68842,main\cpp\messagebuffer.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
127,68843,main\cpp\messagepatternconverter.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
128,68844,main\cpp\methodlocationpatternconverter.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
129,68845,main\cpp\multiprocessrollingfileappender.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
130,68846,main\cpp\nameabbreviator.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
131,68847,main\cpp\namepatternconverter.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
132,68848,main\cpp\ndc.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
133,68849,main\cpp\ndcpatternconverter.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
134,68850,main\cpp\nteventlogappender.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
135,68851,main\cpp\odbcappender.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
136,68852,main\cpp\onlyonceerrorhandler.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
137,68853,main\cpp\optionconverter.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
138,68854,main\cpp\outputdebugstringappender.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
139,68855,main\cpp\outputstream.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
140,68856,main\cpp\outputstreamwriter.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
141,68857,main\cpp\patternconverter.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
142,68858,main\cpp\patternlayout.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
143,68859,main\cpp\patternparser.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
144,68860,main\cpp\pool.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
145,68861,main\cpp\properties.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
146,68862,main\cpp\propertiespatternconverter.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
147,68863,main\cpp\propertyconfigurator.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
148,68864,main\cpp\propertyresourcebundle.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
149,68865,main\cpp\propertysetter.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
150,68866,main\cpp\reader.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
151,68867,main\cpp\relativetimedateformat.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
152,68868,main\cpp\relativetimepatternconverter.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
153,68869,main\cpp\resourcebundle.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
154,68870,main\cpp\rollingfileappender.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
155,68871,main\cpp\rollingpolicy.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
156,68872,main\cpp\rollingpolicybase.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
157,68873,main\cpp\rolloverdescription.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
158,68874,main\cpp\rootlogger.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
159,68875,main\cpp\serversocket.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
160,68876,main\cpp\shortfilelocationpatternconverter.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
161,68877,main\cpp\simpledateformat.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
162,68878,main\cpp\simplelayout.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
163,68879,main\cpp\sizebasedtriggeringpolicy.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
164,68880,main\cpp\smtpappender.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
165,68881,main\cpp\socket.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
166,68882,main\cpp\socketappenderskeleton.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
167,68883,main\cpp\socketoutputstream.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
168,68884,main\cpp\strftimedateformat.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
169,68885,main\cpp\stringhelper.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
170,68886,main\cpp\stringmatchfilter.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
171,68887,main\cpp\stringtokenizer.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
172,68888,main\cpp\syslogappender.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
173,68889,main\cpp\syslogwriter.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
174,68890,main\cpp\system.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
175,68891,main\cpp\systemerrwriter.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
176,68892,main\cpp\systemoutwriter.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
177,68893,main\cpp\telnetappender.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
178,68894,main\cpp\threadlocal.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
179,68895,main\cpp\threadpatternconverter.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
180,68896,main\cpp\threadspecificdata.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
181,68897,main\cpp\threadusernamepatternconverter.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
182,68898,main\cpp\threadutility.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
183,68899,main\cpp\throwableinformationpatternconverter.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
184,68900,main\cpp\timebasedrollingpolicy.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
185,68901,main\cpp\timezone.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
186,68902,main\cpp\transcoder.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
187,68903,main\cpp\transform.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
188,68904,main\cpp\triggeringpolicy.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
189,68905,main\cpp\writer.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
190,68906,main\cpp\writerappender.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
191,68907,main\cpp\xmllayout.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
192,68908,main\cpp\xmlsocketappender.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
193,68909,main\cpp\zipcompressaction.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
194,68910,main\include\log4cxx-qt\configuration.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
195,68911,main\include\log4cxx-qt\logger.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
196,68912,main\include\log4cxx-qt\messagebuffer.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
197,68913,main\include\log4cxx-qt\messagehandler.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
198,68914,main\include\log4cxx-qt\transcoder.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
199,68915,main\include\log4cxx\appender.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
200,68916,main\include\log4cxx\appenderskeleton.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
201,68917,main\include\log4cxx\asyncappender.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
202,68918,main\include\log4cxx\basicconfigurator.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
203,68919,main\include\log4cxx\config\propertysetter.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
204,68920,main\include\log4cxx\consoleappender.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
205,68921,main\include\log4cxx\db\dbappender.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
206,68922,main\include\log4cxx\db\odbcappender.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
207,68923,main\include\log4cxx\defaultconfigurator.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
208,68924,main\include\log4cxx\defaultloggerfactory.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
209,68925,main\include\log4cxx\file.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
210,68926,main\include\log4cxx\fileappender.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
211,68927,main\include\log4cxx\filter\andfilter.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
212,68928,main\include\log4cxx\filter\denyallfilter.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
213,68929,main\include\log4cxx\filter\expressionfilter.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
214,68930,main\include\log4cxx\filter\levelmatchfilter.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
215,68931,main\include\log4cxx\filter\levelrangefilter.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
216,68932,main\include\log4cxx\filter\locationinfofilter.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
217,68933,main\include\log4cxx\filter\loggermatchfilter.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
218,68934,main\include\log4cxx\filter\mapfilter.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
219,68935,main\include\log4cxx\filter\propertyfilter.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
220,68936,main\include\log4cxx\filter\stringmatchfilter.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
221,68937,main\include\log4cxx\fmtlayout.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
222,68938,main\include\log4cxx\helpers\absolutetimedateformat.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
223,68939,main\include\log4cxx\helpers\appenderattachableimpl.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
224,68940,main\include\log4cxx\helpers\aprinitializer.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
225,68941,main\include\log4cxx\helpers\bufferedwriter.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
226,68942,main\include\log4cxx\helpers\bytearrayinputstream.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
227,68943,main\include\log4cxx\helpers\bytearrayoutputstream.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
228,68944,main\include\log4cxx\helpers\bytebuffer.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
229,68945,main\include\log4cxx\helpers\cacheddateformat.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
230,68946,main\include\log4cxx\helpers\charsetdecoder.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
231,68947,main\include\log4cxx\helpers\charsetencoder.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
232,68948,main\include\log4cxx\helpers\class.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
233,68949,main\include\log4cxx\helpers\classregistration.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
234,68950,main\include\log4cxx\helpers\cyclicbuffer.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
235,68951,main\include\log4cxx\helpers\datagrampacket.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
236,68952,main\include\log4cxx\helpers\datagramsocket.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
237,68953,main\include\log4cxx\helpers\date.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
238,68954,main\include\log4cxx\helpers\dateformat.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
239,68955,main\include\log4cxx\helpers\datetimedateformat.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
240,68956,main\include\log4cxx\helpers\exception.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
241,68957,main\include\log4cxx\helpers\fileinputstream.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
242,68958,main\include\log4cxx\helpers\fileoutputstream.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
243,68959,main\include\log4cxx\helpers\filewatchdog.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
244,68960,main\include\log4cxx\helpers\inetaddress.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
245,68961,main\include\log4cxx\helpers\inputstream.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
246,68962,main\include\log4cxx\helpers\inputstreamreader.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
247,68963,main\include\log4cxx\helpers\integer.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
248,68964,main\include\log4cxx\helpers\iso8601dateformat.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
249,68965,main\include\log4cxx\helpers\loader.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
250,68966,main\include\log4cxx\helpers\locale.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
251,68967,main\include\log4cxx\helpers\loglog.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
252,68968,main\include\log4cxx\helpers\messagebuffer.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
253,68969,main\include\log4cxx\helpers\object.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
254,68970,main\include\log4cxx\helpers\onlyonceerrorhandler.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
255,68971,main\include\log4cxx\helpers\optionconverter.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
256,68972,main\include\log4cxx\helpers\outputstream.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
257,68973,main\include\log4cxx\helpers\outputstreamwriter.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
258,68974,main\include\log4cxx\helpers\pool.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
259,68975,main\include\log4cxx\helpers\properties.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
260,68976,main\include\log4cxx\helpers\propertyresourcebundle.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
261,68977,main\include\log4cxx\helpers\reader.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
262,68978,main\include\log4cxx\helpers\relativetimedateformat.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
263,68979,main\include\log4cxx\helpers\resourcebundle.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
264,68980,main\include\log4cxx\helpers\serversocket.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
265,68981,main\include\log4cxx\helpers\simpledateformat.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
266,68982,main\include\log4cxx\helpers\socket.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
267,68983,main\include\log4cxx\helpers\socketoutputstream.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
268,68984,main\include\log4cxx\helpers\strftimedateformat.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
269,68985,main\include\log4cxx\helpers\strictmath.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
270,68986,main\include\log4cxx\helpers\stringhelper.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
271,68987,main\include\log4cxx\helpers\stringtokenizer.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
272,68988,main\include\log4cxx\helpers\syslogwriter.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
273,68989,main\include\log4cxx\helpers\system.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
274,68990,main\include\log4cxx\helpers\systemerrwriter.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
275,68991,main\include\log4cxx\helpers\systemoutwriter.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
276,68992,main\include\log4cxx\helpers\tchar.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
277,68993,main\include\log4cxx\helpers\threadlocal.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
278,68994,main\include\log4cxx\helpers\threadspecificdata.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
279,68995,main\include\log4cxx\helpers\threadutility.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
280,68996,main\include\log4cxx\helpers\timezone.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
281,68997,main\include\log4cxx\helpers\transcoder.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
282,68998,main\include\log4cxx\helpers\transform.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
283,68999,main\include\log4cxx\helpers\widelife.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
284,69000,main\include\log4cxx\helpers\writer.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
285,69001,main\include\log4cxx\helpers\xml.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
286,69002,main\include\log4cxx\hexdump.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
287,69003,main\include\log4cxx\hierarchy.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
288,69004,main\include\log4cxx\htmllayout.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
289,69005,main\include\log4cxx\jsonlayout.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
290,69006,main\include\log4cxx\layout.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
291,69007,main\include\log4cxx\level.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
292,69008,main\include\log4cxx\levelchange.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
293,69009,main\include\log4cxx\logger.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
294,69010,main\include\log4cxx\loggerinstance.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
295,69011,main\include\log4cxx\logmanager.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
296,69012,main\include\log4cxx\logstring.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
297,69013,main\include\log4cxx\mdc.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
298,69014,main\include\log4cxx\ndc.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
299,69015,main\include\log4cxx\net\smtpappender.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
300,69016,main\include\log4cxx\net\socketappenderskeleton.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
301,69017,main\include\log4cxx\net\syslogappender.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
302,69018,main\include\log4cxx\net\telnetappender.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
303,69019,main\include\log4cxx\net\xmlsocketappender.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
304,69020,main\include\log4cxx\nt\nteventlogappender.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
305,69021,main\include\log4cxx\nt\outputdebugstringappender.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
306,69022,main\include\log4cxx\pattern\classnamepatternconverter.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
307,69023,main\include\log4cxx\pattern\colorendpatternconverter.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
308,69024,main\include\log4cxx\pattern\colorstartpatternconverter.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
309,69025,main\include\log4cxx\pattern\datepatternconverter.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
310,69026,main\include\log4cxx\pattern\filedatepatternconverter.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
311,69027,main\include\log4cxx\pattern\filelocationpatternconverter.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
312,69028,main\include\log4cxx\pattern\formattinginfo.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
313,69029,main\include\log4cxx\pattern\fulllocationpatternconverter.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
314,69030,main\include\log4cxx\pattern\integerpatternconverter.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
315,69031,main\include\log4cxx\pattern\levelpatternconverter.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
316,69032,main\include\log4cxx\pattern\linelocationpatternconverter.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
317,69033,main\include\log4cxx\pattern\lineseparatorpatternconverter.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
318,69034,main\include\log4cxx\pattern\literalpatternconverter.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
319,69035,main\include\log4cxx\pattern\loggerpatternconverter.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
320,69036,main\include\log4cxx\pattern\loggingeventpatternconverter.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
321,69037,main\include\log4cxx\pattern\mdcpatternconverter.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
322,69038,main\include\log4cxx\pattern\messagepatternconverter.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
323,69039,main\include\log4cxx\pattern\methodlocationpatternconverter.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
324,69040,main\include\log4cxx\pattern\nameabbreviator.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
325,69041,main\include\log4cxx\pattern\namepatternconverter.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
326,69042,main\include\log4cxx\pattern\ndcpatternconverter.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
327,69043,main\include\log4cxx\pattern\patternconverter.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
328,69044,main\include\log4cxx\pattern\patternparser.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
329,69045,main\include\log4cxx\pattern\propertiespatternconverter.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
330,69046,main\include\log4cxx\pattern\relativetimepatternconverter.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
331,69047,main\include\log4cxx\pattern\shortfilelocationpatternconverter.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
332,69048,main\include\log4cxx\pattern\threadpatternconverter.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
333,69049,main\include\log4cxx\pattern\threadusernamepatternconverter.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
334,69050,main\include\log4cxx\pattern\throwableinformationpatternconverter.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
335,69051,main\include\log4cxx\patternlayout.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
336,69052,main\include\log4cxx\private\action_priv.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
337,69053,main\include\log4cxx\private\appenderskeleton_priv.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
338,69054,main\include\log4cxx\private\aprdatagramsocket.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
339,69055,main\include\log4cxx\private\aprserversocket.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
340,69056,main\include\log4cxx\private\aprsocket.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
341,69057,main\include\log4cxx\private\atexitregistry.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
342,69058,main\include\log4cxx\private\datagramsocket_priv.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
343,69059,main\include\log4cxx\private\fileappender_priv.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
344,69060,main\include\log4cxx\private\filter_priv.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
345,69061,main\include\log4cxx\private\nteventlogappender_priv.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
346,69062,main\include\log4cxx\private\odbcappender_priv.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
347,69063,main\include\log4cxx\private\patternconverter_priv.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
348,69064,main\include\log4cxx\private\rollingpolicybase_priv.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
349,69065,main\include\log4cxx\private\serversocket_priv.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
350,69066,main\include\log4cxx\private\socket_priv.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
351,69067,main\include\log4cxx\private\socketappenderskeleton_priv.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
352,69068,main\include\log4cxx\private\string_c11.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
353,69069,main\include\log4cxx\private\syslogappender_priv.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
354,69070,main\include\log4cxx\private\writerappender_priv.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
355,69071,main\include\log4cxx\propertyconfigurator.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
356,69072,main\include\log4cxx\provisionnode.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
357,69073,main\include\log4cxx\rolling\action.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
358,69074,main\include\log4cxx\rolling\filerenameaction.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
359,69075,main\include\log4cxx\rolling\filterbasedtriggeringpolicy.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
360,69076,main\include\log4cxx\rolling\fixedwindowrollingpolicy.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
361,69077,main\include\log4cxx\rolling\gzcompressaction.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
362,69078,main\include\log4cxx\rolling\manualtriggeringpolicy.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
363,69079,main\include\log4cxx\rolling\multiprocessrollingfileappender.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
364,69080,main\include\log4cxx\rolling\rollingfileappender.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
365,69081,main\include\log4cxx\rolling\rollingpolicy.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
366,69082,main\include\log4cxx\rolling\rollingpolicybase.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
367,69083,main\include\log4cxx\rolling\rolloverdescription.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
368,69084,main\include\log4cxx\rolling\sizebasedtriggeringpolicy.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
369,69085,main\include\log4cxx\rolling\timebasedrollingpolicy.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
370,69086,main\include\log4cxx\rolling\triggeringpolicy.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
371,69087,main\include\log4cxx\rolling\zipcompressaction.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
372,69088,main\include\log4cxx\simplelayout.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
373,69089,main\include\log4cxx\spi\appenderattachable.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
374,69090,main\include\log4cxx\spi\configurator.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
375,69091,main\include\log4cxx\spi\defaultrepositoryselector.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
376,69092,main\include\log4cxx\spi\errorhandler.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
377,69093,main\include\log4cxx\spi\filter.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
378,69094,main\include\log4cxx\spi\hierarchyeventlistener.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
379,69095,main\include\log4cxx\spi\location\locationinfo.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
380,69096,main\include\log4cxx\spi\loggerfactory.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
381,69097,main\include\log4cxx\spi\loggerrepository.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
382,69098,main\include\log4cxx\spi\loggingevent.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
383,69099,main\include\log4cxx\spi\optionhandler.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
384,69100,main\include\log4cxx\spi\repositoryselector.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
385,69101,main\include\log4cxx\spi\rootlogger.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
386,69102,main\include\log4cxx\spi\triggeringeventevaluator.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
387,69103,main\include\log4cxx\stream.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
388,69104,main\include\log4cxx\varia\fallbackerrorhandler.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
389,69105,main\include\log4cxx\writerappender.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
390,69106,main\include\log4cxx\xml\domconfigurator.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
391,69107,main\include\log4cxx\xml\xmllayout.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
392,69108,main\mock-apple\CFString.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
393,69109,main\mock-apple\CoreFoundation\CFString.hpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
394,106,x,3,foo.x,,cmake\boost-fallback\test-boostsharedptr.cpp,x,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
395,214,x,3,foo.x,,cmake\boost-fallback\test-stdsharedptr.cpp,x,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
396,613,m_logger,3,com.foo.Bar.m_logger,,examples\cpp\com\foo\bar.hpp,m_logger,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
397,1474,,3,LOG4CXX_NS.NullWriterAppender.nan,,examples\cpp\custom-appender.cpp,(NullWriterAppender),-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
398,1579,logger,3,DelayedLoop.logger,,examples\cpp\delayedloop.cpp,logger,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
399,1760,x,3,MyStruct.x,,examples\cpp\format-string.cpp,x,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
400,2603,headFilter,3,AndFilterPrivate.headFilter,,main\cpp\andfilter.cpp,headFilter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
401,2604,tailFilter,3,AndFilterPrivate.tailFilter,,main\cpp\andfilter.cpp,tailFilter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
402,2605,acceptOnMatch,3,AndFilterPrivate.acceptOnMatch,,main\cpp\andfilter.cpp,acceptOnMatch,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
403,2786,appenderList,3,priv_data.appenderList,,main\cpp\appenderattachableimpl.cpp,appenderList,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
404,2787,m_mutex,3,priv_data.m_mutex,,main\cpp\appenderattachableimpl.cpp,m_mutex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
405,3637,socket,3,LOG4CXX_NS.helpers.APRDatagramSocketPriv.socket,,main\cpp\aprdatagramsocket.cpp,* socket,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
406,3638,socketPool,3,LOG4CXX_NS.helpers.APRDatagramSocketPriv.socketPool,,main\cpp\aprdatagramsocket.cpp,socketPool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
407,4123,p,3,APRInitializerPrivate.p,,main\cpp\aprinitializer.cpp,* p,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
408,4124,mutex,3,APRInitializerPrivate.mutex,,main\cpp\aprinitializer.cpp,mutex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
409,4125,watchdogs,3,APRInitializerPrivate.watchdogs,,main\cpp\aprinitializer.cpp,watchdogs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
410,4126,startTime,3,APRInitializerPrivate.startTime,,main\cpp\aprinitializer.cpp,startTime,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
411,4127,tlsKey,3,APRInitializerPrivate.tlsKey,,main\cpp\aprinitializer.cpp,* tlsKey,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
412,4128,objects,3,APRInitializerPrivate.objects,,main\cpp\aprinitializer.cpp,objects,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
413,4472,pool,3,LOG4CXX_NS.helpers.APRServerSocketPriv.pool,,main\cpp\aprserversocket.cpp,pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
414,4473,mutex,3,LOG4CXX_NS.helpers.APRServerSocketPriv.mutex,,main\cpp\aprserversocket.cpp,mutex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
415,4474,socket,3,LOG4CXX_NS.helpers.APRServerSocketPriv.socket,,main\cpp\aprserversocket.cpp,* socket,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
416,4924,pool,3,LOG4CXX_NS.helpers.APRSocketPriv.pool,,main\cpp\aprsocket.cpp,pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
417,4925,socket,3,LOG4CXX_NS.helpers.APRSocketPriv.socket,,main\cpp\aprsocket.cpp,* socket,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
418,5338,DEFAULT_BUFFER_SIZE,3,anonymous_enum_0.DEFAULT_BUFFER_SIZE,,main\cpp\asyncappender.cpp,DEFAULT_BUFFER_SIZE = 128,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
419,5347,maxEvent,3,DiscardSummary.maxEvent,,main\cpp\asyncappender.cpp,maxEvent,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
420,5348,count,3,DiscardSummary.count,,main\cpp\asyncappender.cpp,count,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
421,5390,buffer,3,AsyncAppenderPriv.buffer,,main\cpp\asyncappender.cpp,buffer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
422,5391,bufferMutex,3,AsyncAppenderPriv.bufferMutex,,main\cpp\asyncappender.cpp,bufferMutex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
423,5392,bufferNotFull,3,AsyncAppenderPriv.bufferNotFull,,main\cpp\asyncappender.cpp,bufferNotFull,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
424,5393,bufferNotEmpty,3,AsyncAppenderPriv.bufferNotEmpty,,main\cpp\asyncappender.cpp,bufferNotEmpty,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
425,5394,discardMap,3,AsyncAppenderPriv.discardMap,,main\cpp\asyncappender.cpp,discardMap,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
426,5395,bufferSize,3,AsyncAppenderPriv.bufferSize,,main\cpp\asyncappender.cpp,bufferSize,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
427,5396,appenders,3,AsyncAppenderPriv.appenders,,main\cpp\asyncappender.cpp,appenders,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
428,5397,dispatcher,3,AsyncAppenderPriv.dispatcher,,main\cpp\asyncappender.cpp,dispatcher,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
429,5398,locationInfo,3,AsyncAppenderPriv.locationInfo,,main\cpp\asyncappender.cpp,locationInfo,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
430,5399,blocking,3,AsyncAppenderPriv.blocking,,main\cpp\asyncappender.cpp,blocking,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
431,5400,atExitRegistryRaii,3,AsyncAppenderPriv.atExitRegistryRaii,,main\cpp\asyncappender.cpp,atExitRegistryRaii,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
432,6779,mutex,3,anonymous_namespace_1.AtExitRegistryImpl.mutex,,main\cpp\atexitregistry.cpp,mutex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
433,6780,actions,3,anonymous_namespace_1.AtExitRegistryImpl.actions,,main\cpp\atexitregistry.cpp,actions,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
434,6930,out,3,BufferedWriterPriv.out,,main\cpp\bufferedwriter.cpp,out,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
435,6931,sz,3,BufferedWriterPriv.sz,,main\cpp\bufferedwriter.cpp,sz,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
436,6932,buf,3,BufferedWriterPriv.buf,,main\cpp\bufferedwriter.cpp,buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
437,7110,buf,3,ByteArrayInputStreamPriv.buf,,main\cpp\bytearrayinputstream.cpp,buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
438,7111,pos,3,ByteArrayInputStreamPriv.pos,,main\cpp\bytearrayinputstream.cpp,pos,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
439,7219,array,3,ByteArrayOutputStreamPriv.array,,main\cpp\bytearrayoutputstream.cpp,array,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
440,7318,base,3,ByteBufferPriv.base,,main\cpp\bytebuffer.cpp,* base,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
441,7319,pos,3,ByteBufferPriv.pos,,main\cpp\bytebuffer.cpp,pos,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
442,7320,lim,3,ByteBufferPriv.lim,,main\cpp\bytebuffer.cpp,lim,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
443,7321,cap,3,ByteBufferPriv.cap,,main\cpp\bytebuffer.cpp,cap,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
444,7529,formatter,3,CachedDateFormatPriv.formatter,,main\cpp\cacheddateformat.cpp,formatter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
445,7530,millisecondStart,3,CachedDateFormatPriv.millisecondStart,,main\cpp\cacheddateformat.cpp,millisecondStart,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
446,7531,slotBegin,3,CachedDateFormatPriv.slotBegin,,main\cpp\cacheddateformat.cpp,slotBegin,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
447,7532,cache,3,CachedDateFormatPriv.cache,,main\cpp\cacheddateformat.cpp,cache,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
448,7533,expiration,3,CachedDateFormatPriv.expiration,,main\cpp\cacheddateformat.cpp,expiration,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
449,7534,previousTime,3,CachedDateFormatPriv.previousTime,,main\cpp\cacheddateformat.cpp,previousTime,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
450,8751,state,3,LOG4CXX_NS.helpers.LocaleCharsetDecoder.state,,main\cpp\charsetdecoder.cpp,state,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
451,9618,state,3,LOG4CXX_NS.helpers.LocaleCharsetEncoder.state,,main\cpp\charsetencoder.cpp,state,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
452,10957,m_fatalColor,3,ColorPatternConverterPrivate.m_fatalColor,,main\cpp\colorstartpatternconverter.cpp,m_fatalColor,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
453,10958,m_errorColor,3,ColorPatternConverterPrivate.m_errorColor,,main\cpp\colorstartpatternconverter.cpp,m_errorColor,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
454,10959,m_warnColor,3,ColorPatternConverterPrivate.m_warnColor,,main\cpp\colorstartpatternconverter.cpp,m_warnColor,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
455,10960,m_infoColor,3,ColorPatternConverterPrivate.m_infoColor,,main\cpp\colorstartpatternconverter.cpp,m_infoColor,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
456,10961,m_debugColor,3,ColorPatternConverterPrivate.m_debugColor,,main\cpp\colorstartpatternconverter.cpp,m_debugColor,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
457,10962,m_traceColor,3,ColorPatternConverterPrivate.m_traceColor,,main\cpp\colorstartpatternconverter.cpp,m_traceColor,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
458,11483,target,3,ConsoleAppenderPriv.target,,main\cpp\consoleappender.cpp,target,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
459,11773,ea,3,CyclicBufferPriv.ea,,main\cpp\cyclicbuffer.cpp,ea,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
460,11774,first,3,CyclicBufferPriv.first,,main\cpp\cyclicbuffer.cpp,first,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
461,11775,last,3,CyclicBufferPriv.last,,main\cpp\cyclicbuffer.cpp,last,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
462,11776,numElems,3,CyclicBufferPriv.numElems,,main\cpp\cyclicbuffer.cpp,numElems,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
463,11777,maxSize,3,CyclicBufferPriv.maxSize,,main\cpp\cyclicbuffer.cpp,maxSize,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
464,12150,buf,3,DatagramPacketPriv.buf,,main\cpp\datagrampacket.cpp,* buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
465,12151,offset,3,DatagramPacketPriv.offset,,main\cpp\datagrampacket.cpp,offset,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
466,12152,length,3,DatagramPacketPriv.length,,main\cpp\datagrampacket.cpp,length,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
467,12153,address,3,DatagramPacketPriv.address,,main\cpp\datagrampacket.cpp,address,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
468,12154,port,3,DatagramPacketPriv.port,,main\cpp\datagrampacket.cpp,port,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
469,12637,df,3,DatePatternConverterPrivate.df,,main\cpp\datepatternconverter.cpp,df,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
470,13041,m_driver,3,DBAppenderPriv.m_driver,,main\cpp\dbappender.cpp,* m_driver = nullptr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
471,13042,m_databaseHandle,3,DBAppenderPriv.m_databaseHandle,,main\cpp\dbappender.cpp,* m_databaseHandle = nullptr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
472,13043,preparedStmt,3,DBAppenderPriv.preparedStmt,,main\cpp\dbappender.cpp,* preparedStmt = nullptr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
473,13044,mappedName,3,DBAppenderPriv.mappedName,,main\cpp\dbappender.cpp,mappedName,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
474,13045,driverName,3,DBAppenderPriv.driverName,,main\cpp\dbappender.cpp,driverName,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
475,13046,driverParams,3,DBAppenderPriv.driverParams,,main\cpp\dbappender.cpp,driverParams,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
476,13047,databaseName,3,DBAppenderPriv.databaseName,,main\cpp\dbappender.cpp,databaseName,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
477,13048,sqlStatement,3,DBAppenderPriv.sqlStatement,,main\cpp\dbappender.cpp,sqlStatement,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
478,13049,m_pool,3,DBAppenderPriv.m_pool,,main\cpp\dbappender.cpp,m_pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
479,13050,converters,3,DBAppenderPriv.converters,,main\cpp\dbappender.cpp,converters,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
480,14698,repository,3,DefaultRepositorySelectorPrivate.repository,,main\cpp\defaultrepositoryselector.cpp,repository,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
481,14791,props,3,DOMConfiguratorPrivate.props,,main\cpp\domconfigurator.cpp,props,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
482,14792,repository,3,DOMConfiguratorPrivate.repository,,main\cpp\domconfigurator.cpp,repository,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
483,14793,loggerFactory,3,DOMConfiguratorPrivate.loggerFactory,,main\cpp\domconfigurator.cpp,loggerFactory,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
484,18213,backup,3,FallbackErrorHandlerPrivate.backup,,main\cpp\fallbackerrorhandler.cpp,backup,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
485,18214,primary,3,FallbackErrorHandlerPrivate.primary,,main\cpp\fallbackerrorhandler.cpp,primary,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
486,18215,loggers,3,FallbackErrorHandlerPrivate.loggers,,main\cpp\fallbackerrorhandler.cpp,loggers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
487,18532,path,3,FilePrivate.path,,main\cpp\file.cpp,path,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
488,18533,autoDelete,3,FilePrivate.autoDelete,,main\cpp\file.cpp,autoDelete,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
489,20258,pool,3,FileInputStreamPrivate.pool,,main\cpp\fileinputstream.cpp,pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
490,20259,fileptr,3,FileInputStreamPrivate.fileptr,,main\cpp\fileinputstream.cpp,* fileptr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
491,20536,pool,3,FileOutputStreamPrivate.pool,,main\cpp\fileoutputstream.cpp,pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
492,20537,fileptr,3,FileOutputStreamPrivate.fileptr,,main\cpp\fileoutputstream.cpp,* fileptr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
493,20793,source,3,FileRenameActionPrivate.source,,main\cpp\filerenameaction.cpp,source,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
494,20794,destination,3,FileRenameActionPrivate.destination,,main\cpp\filerenameaction.cpp,destination,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
495,20795,renameEmptyFile,3,FileRenameActionPrivate.renameEmptyFile,,main\cpp\filerenameaction.cpp,renameEmptyFile,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
496,20866,file,3,FileWatchdogPrivate.file,,main\cpp\filewatchdog.cpp,file,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
497,20867,delay,3,FileWatchdogPrivate.delay,,main\cpp\filewatchdog.cpp,delay,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
498,20868,lastModif,3,FileWatchdogPrivate.lastModif,,main\cpp\filewatchdog.cpp,lastModif,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
499,20869,warnedAlready,3,FileWatchdogPrivate.warnedAlready,,main\cpp\filewatchdog.cpp,warnedAlready,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
500,20870,interrupted,3,FileWatchdogPrivate.interrupted,,main\cpp\filewatchdog.cpp,interrupted,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
501,20871,pool,3,FileWatchdogPrivate.pool,,main\cpp\filewatchdog.cpp,pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
502,20872,thread,3,FileWatchdogPrivate.thread,,main\cpp\filewatchdog.cpp,thread,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
503,20873,interrupt,3,FileWatchdogPrivate.interrupt,,main\cpp\filewatchdog.cpp,interrupt,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
504,20874,interrupt_mutex,3,FileWatchdogPrivate.interrupt_mutex,,main\cpp\filewatchdog.cpp,interrupt_mutex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
505,21279,headFilter,3,FilterBasedTriggeringPolicyPrivate.headFilter,,main\cpp\filterbasedtriggeringpolicy.cpp,headFilter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
506,21280,tailFilter,3,FilterBasedTriggeringPolicyPrivate.tailFilter,,main\cpp\filterbasedtriggeringpolicy.cpp,tailFilter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
507,21481,minIndex,3,FixedWindowRollingPolicyPrivate.minIndex,,main\cpp\fixedwindowrollingpolicy.cpp,minIndex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
508,21482,maxIndex,3,FixedWindowRollingPolicyPrivate.maxIndex,,main\cpp\fixedwindowrollingpolicy.cpp,maxIndex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
509,21483,explicitActiveFile,3,FixedWindowRollingPolicyPrivate.explicitActiveFile,,main\cpp\fixedwindowrollingpolicy.cpp,explicitActiveFile,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
510,21484,throwIOExceptionOnForkFailure,3,FixedWindowRollingPolicyPrivate.throwIOExceptionOnForkFailure,,main\cpp\fixedwindowrollingpolicy.cpp,throwIOExceptionOnForkFailure = true,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
511,22541,conversionPattern,3,FMTLayoutPrivate.conversionPattern,,main\cpp\fmtlayout.cpp,conversionPattern,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
512,22542,expectedPatternLength,3,FMTLayoutPrivate.expectedPatternLength,,main\cpp\fmtlayout.cpp,expectedPatternLength,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
513,22959,minLength,3,FormattingInfoPrivate.minLength,,main\cpp\formattinginfo.cpp,minLength,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
514,22960,maxLength,3,FormattingInfoPrivate.maxLength,,main\cpp\formattinginfo.cpp,maxLength,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
515,22961,leftAlign,3,FormattingInfoPrivate.leftAlign,,main\cpp\formattinginfo.cpp,leftAlign,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
516,23211,source,3,GZCompressActionPrivate.source,,main\cpp\gzcompressaction.cpp,source,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
517,23212,destination,3,GZCompressActionPrivate.destination,,main\cpp\gzcompressaction.cpp,destination,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
518,23213,deleteSource,3,GZCompressActionPrivate.deleteSource,,main\cpp\gzcompressaction.cpp,deleteSource,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
519,23214,throwIOExceptionOnForkFailure,3,GZCompressActionPrivate.throwIOExceptionOnForkFailure,,main\cpp\gzcompressaction.cpp,throwIOExceptionOnForkFailure = true,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
520,24051,pool,3,HierarchyPrivate.pool,,main\cpp\hierarchy.cpp,pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
521,24052,mutex,3,HierarchyPrivate.mutex,,main\cpp\hierarchy.cpp,mutex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
522,24053,configuredMutex,3,HierarchyPrivate.configuredMutex,,main\cpp\hierarchy.cpp,configuredMutex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
523,24054,configured,3,HierarchyPrivate.configured,,main\cpp\hierarchy.cpp,configured,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
524,24055,emittedNoAppenderWarning,3,HierarchyPrivate.emittedNoAppenderWarning,,main\cpp\hierarchy.cpp,emittedNoAppenderWarning,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
525,24056,emittedNoResourceBundleWarning,3,HierarchyPrivate.emittedNoResourceBundleWarning,,main\cpp\hierarchy.cpp,emittedNoResourceBundleWarning,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
526,24057,thresholdInt,3,HierarchyPrivate.thresholdInt,,main\cpp\hierarchy.cpp,thresholdInt,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
527,24058,listeners,3,HierarchyPrivate.listeners,,main\cpp\hierarchy.cpp,listeners,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
528,24059,root,3,HierarchyPrivate.root,,main\cpp\hierarchy.cpp,root,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
529,24060,threshold,3,HierarchyPrivate.threshold,,main\cpp\hierarchy.cpp,threshold,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
530,24061,loggers,3,HierarchyPrivate.loggers,,main\cpp\hierarchy.cpp,loggers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
531,24062,provisionNodes,3,HierarchyPrivate.provisionNodes,,main\cpp\hierarchy.cpp,provisionNodes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
532,24063,allAppenders,3,HierarchyPrivate.allAppenders,,main\cpp\hierarchy.cpp,allAppenders,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
533,25568,locationInfo,3,HTMLLayoutPrivate.locationInfo,,main\cpp\htmllayout.cpp,locationInfo,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
534,25569,title,3,HTMLLayoutPrivate.title,,main\cpp\htmllayout.cpp,title,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
535,25570,dateFormat,3,HTMLLayoutPrivate.dateFormat,,main\cpp\htmllayout.cpp,dateFormat,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
536,25571,expectedPatternLength,3,HTMLLayoutPrivate.expectedPatternLength,,main\cpp\htmllayout.cpp,expectedPatternLength,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
537,26475,ipAddrString,3,InetAddressPrivate.ipAddrString,,main\cpp\inetaddress.cpp,ipAddrString,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
538,26476,hostNameString,3,InetAddressPrivate.hostNameString,,main\cpp\inetaddress.cpp,hostNameString,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
539,26791,in,3,InputStreamReaderPrivate.in,,main\cpp\inputstreamreader.cpp,in,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
540,26792,dec,3,InputStreamReaderPrivate.dec,,main\cpp\inputstreamreader.cpp,dec,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
541,27054,locationInfo,3,JSONLayoutPrivate.locationInfo,,main\cpp\jsonlayout.cpp,locationInfo,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
542,27055,prettyPrint,3,JSONLayoutPrivate.prettyPrint,,main\cpp\jsonlayout.cpp,prettyPrint,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
543,27056,dateFormat,3,JSONLayoutPrivate.dateFormat,,main\cpp\jsonlayout.cpp,dateFormat,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
544,27057,ppIndentL1,3,JSONLayoutPrivate.ppIndentL1,,main\cpp\jsonlayout.cpp,ppIndentL1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
545,27058,ppIndentL2,3,JSONLayoutPrivate.ppIndentL2,,main\cpp\jsonlayout.cpp,ppIndentL2,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
546,27059,expectedPatternLength,3,JSONLayoutPrivate.expectedPatternLength,,main\cpp\jsonlayout.cpp,expectedPatternLength,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
547,27060,threadInfo,3,JSONLayoutPrivate.threadInfo,,main\cpp\jsonlayout.cpp,threadInfo,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
548,28862,acceptOnMatch,3,LevelMatchFilterPrivate.acceptOnMatch,,main\cpp\levelmatchfilter.cpp,acceptOnMatch,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
549,28863,levelToMatch,3,LevelMatchFilterPrivate.levelToMatch,,main\cpp\levelmatchfilter.cpp,levelToMatch,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
550,29258,acceptOnMatch,3,LevelRangeFilterPrivate.acceptOnMatch,,main\cpp\levelrangefilter.cpp,acceptOnMatch,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
551,29259,levelMin,3,LevelRangeFilterPrivate.levelMin,,main\cpp\levelrangefilter.cpp,levelMin,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
552,29260,levelMax,3,LevelRangeFilterPrivate.levelMax,,main\cpp\levelrangefilter.cpp,levelMax,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
553,29727,literal,3,LiteralPatternConverterPrivate.literal,,main\cpp\literalpatternconverter.cpp,literal,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
554,29940,language,3,LocalePrivate.language,,main\cpp\locale.cpp,language,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
555,29941,country,3,LocalePrivate.country,,main\cpp\locale.cpp,country,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
556,29942,variant,3,LocalePrivate.variant,,main\cpp\locale.cpp,variant,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
557,30285,acceptOnMatch,3,LocationInfoFilterPrivate.acceptOnMatch,,main\cpp\locationinfofilter.cpp,acceptOnMatch,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
558,30286,mustMatchAll,3,LocationInfoFilterPrivate.mustMatchAll,,main\cpp\locationinfofilter.cpp,mustMatchAll,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
559,30287,lineNumber,3,LocationInfoFilterPrivate.lineNumber,,main\cpp\locationinfofilter.cpp,lineNumber,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
560,30288,methodName,3,LocationInfoFilterPrivate.methodName,,main\cpp\locationinfofilter.cpp,methodName,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
561,30766,name,3,LoggerPrivate.name,,main\cpp\logger.cpp,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
562,30767,level,3,LoggerPrivate.level,,main\cpp\logger.cpp,level,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
563,30768,parent,3,LoggerPrivate.parent,,main\cpp\logger.cpp,parent,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
564,30769,resourceBundle,3,LoggerPrivate.resourceBundle,,main\cpp\logger.cpp,resourceBundle,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
565,30770,repositoryRaw,3,LoggerPrivate.repositoryRaw,,main\cpp\logger.cpp,* repositoryRaw,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
566,30771,aai,3,LoggerPrivate.aai,,main\cpp\logger.cpp,aai,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
567,30772,additive,3,LoggerPrivate.additive,,main\cpp\logger.cpp,additive,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
568,32293,acceptOnMatch,3,LoggerMatchFilterPrivate.acceptOnMatch,,main\cpp\loggermatchfilter.cpp,acceptOnMatch,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
569,32294,loggerToMatch,3,LoggerMatchFilterPrivate.loggerToMatch,,main\cpp\loggermatchfilter.cpp,loggerToMatch,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
570,32644,logger,3,LoggingEventPrivate.logger,,main\cpp\loggingevent.cpp,logger,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
571,32645,level,3,LoggingEventPrivate.level,,main\cpp\loggingevent.cpp,level,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
572,32646,ndc,3,LoggingEventPrivate.ndc,,main\cpp\loggingevent.cpp,* ndc,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
573,32647,mdcCopy,3,LoggingEventPrivate.mdcCopy,,main\cpp\loggingevent.cpp,* mdcCopy,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
574,32648,properties,3,LoggingEventPrivate.properties,,main\cpp\loggingevent.cpp,* properties,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
575,32649,ndcLookupRequired,3,LoggingEventPrivate.ndcLookupRequired,,main\cpp\loggingevent.cpp,ndcLookupRequired,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
576,32650,mdcCopyLookupRequired,3,LoggingEventPrivate.mdcCopyLookupRequired,,main\cpp\loggingevent.cpp,mdcCopyLookupRequired,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
577,32651,message,3,LoggingEventPrivate.message,,main\cpp\loggingevent.cpp,message,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
578,32652,timeStamp,3,LoggingEventPrivate.timeStamp,,main\cpp\loggingevent.cpp,timeStamp,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
579,32653,locationInfo,3,LoggingEventPrivate.locationInfo,,main\cpp\loggingevent.cpp,locationInfo,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
580,32654,threadName,3,LoggingEventPrivate.threadName,,main\cpp\loggingevent.cpp,& threadName,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
581,32655,threadUserName,3,LoggingEventPrivate.threadUserName,,main\cpp\loggingevent.cpp,& threadUserName,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
582,32656,chronoTimeStamp,3,LoggingEventPrivate.chronoTimeStamp,,main\cpp\loggingevent.cpp,chronoTimeStamp,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
583,33333,debugEnabled,3,LogLogPrivate.debugEnabled,,main\cpp\loglog.cpp,debugEnabled,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
584,33334,quietMode,3,LogLogPrivate.quietMode,,main\cpp\loglog.cpp,quietMode,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
585,33335,mutex,3,LogLogPrivate.mutex,,main\cpp\loglog.cpp,mutex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
586,34809,acceptOnMatch,3,MapFilterPrivate.acceptOnMatch,,main\cpp\mapfilter.cpp,acceptOnMatch,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
587,34810,mustMatchAll,3,MapFilterPrivate.mustMatchAll,,main\cpp\mapfilter.cpp,mustMatchAll,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
588,34811,keyVals,3,MapFilterPrivate.keyVals,,main\cpp\mapfilter.cpp,keyVals,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
589,35684,buf,3,anonymous_namespace_1.StringOrStream.buf,,main\cpp\messagebuffer.cpp,buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
590,35685,stream,3,anonymous_namespace_1.StringOrStream.stream,,main\cpp\messagebuffer.cpp,* stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,11,0,1,1,0,0,,0,0,0,0,0,
591,36167,m_quote,3,anonymous_namespace_1.QuotedMessagePatternConverter.m_quote,,main\cpp\messagepatternconverter.cpp,m_quote,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
592,36391,triggeringPolicy,3,MultiprocessRollingFileAppenderPriv.triggeringPolicy,,main\cpp\multiprocessrollingfileappender.cpp,triggeringPolicy,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
593,36392,rollingPolicy,3,MultiprocessRollingFileAppenderPriv.rollingPolicy,,main\cpp\multiprocessrollingfileappender.cpp,rollingPolicy,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
594,36393,fileLength,3,MultiprocessRollingFileAppenderPriv.fileLength,,main\cpp\multiprocessrollingfileappender.cpp,fileLength,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
595,36394,_event,3,MultiprocessRollingFileAppenderPriv._event,,main\cpp\multiprocessrollingfileappender.cpp,_event,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
596,37984,os,3,LOG4CXX_NS.rolling.CountingOutputStream.os,,main\cpp\multiprocessrollingfileappender.cpp,os,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
597,37985,rfa,3,LOG4CXX_NS.rolling.CountingOutputStream.rfa,,main\cpp\multiprocessrollingfileappender.cpp,* rfa,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
598,38156,,3,LOG4CXX_NS.pattern.NOPAbbreviator.nan,,main\cpp\nameabbreviator.cpp,(NOPAbbreviator),-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
599,38166,count,3,LOG4CXX_NS.pattern.MaxElementAbbreviator.count,,main\cpp\nameabbreviator.cpp,count,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
600,38167,,3,LOG4CXX_NS.pattern.MaxElementAbbreviator.nan,,main\cpp\nameabbreviator.cpp,(MaxElementAbbreviator),-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
601,38238,charCount,3,LOG4CXX_NS.pattern.PatternAbbreviatorFragment.charCount,,main\cpp\nameabbreviator.cpp,charCount,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
602,38239,ellipsis,3,LOG4CXX_NS.pattern.PatternAbbreviatorFragment.ellipsis,,main\cpp\nameabbreviator.cpp,ellipsis,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
603,38344,fragments,3,LOG4CXX_NS.pattern.PatternAbbreviator.fragments,,main\cpp\nameabbreviator.cpp,fragments,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
604,38345,,3,LOG4CXX_NS.pattern.PatternAbbreviator.nan,,main\cpp\nameabbreviator.cpp,(PatternAbbreviator),-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
605,38662,abbreviator,3,NamePatternConverterPrivate.abbreviator,,main\cpp\namepatternconverter.cpp,abbreviator,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
606,40281,WARN_PREFIX,3,OnlyOnceErrorHandlerPrivate.WARN_PREFIX,,main\cpp\onlyonceerrorhandler.cpp,WARN_PREFIX,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
607,40282,ERROR_PREFIX,3,OnlyOnceErrorHandlerPrivate.ERROR_PREFIX,,main\cpp\onlyonceerrorhandler.cpp,ERROR_PREFIX,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
608,40283,firstTime,3,OnlyOnceErrorHandlerPrivate.firstTime,,main\cpp\onlyonceerrorhandler.cpp,firstTime,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
609,40428,m_config,3,LOG4CXX_NS.ConfiguratorWatchdog.m_config,,main\cpp\optionconverter.cpp,m_config,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
610,41461,out,3,OutputStreamWriterPrivate.out,,main\cpp\outputstreamwriter.cpp,out,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
611,41462,enc,3,OutputStreamWriterPrivate.enc,,main\cpp\outputstreamwriter.cpp,enc,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
612,41814,conversionPattern,3,PatternLayoutPrivate.conversionPattern,,main\cpp\patternlayout.cpp,conversionPattern,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
613,41815,patternConverters,3,PatternLayoutPrivate.patternConverters,,main\cpp\patternlayout.cpp,patternConverters,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
614,41816,patternFields,3,PatternLayoutPrivate.patternFields,,main\cpp\patternlayout.cpp,patternFields,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
615,41817,m_fatalColor,3,PatternLayoutPrivate.m_fatalColor,,main\cpp\patternlayout.cpp,"m_fatalColor = LOG4CXX_STR(""\\x1B[35m"")",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
616,41818,m_errorColor,3,PatternLayoutPrivate.m_errorColor,,main\cpp\patternlayout.cpp,"m_errorColor = LOG4CXX_STR(""\\x1B[31m"")",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
617,41819,m_warnColor,3,PatternLayoutPrivate.m_warnColor,,main\cpp\patternlayout.cpp,"m_warnColor = LOG4CXX_STR(""\\x1B[33m"")",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
618,41820,m_infoColor,3,PatternLayoutPrivate.m_infoColor,,main\cpp\patternlayout.cpp,"m_infoColor = LOG4CXX_STR(""\\x1B[32m"")",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
619,41821,m_debugColor,3,PatternLayoutPrivate.m_debugColor,,main\cpp\patternlayout.cpp,"m_debugColor = LOG4CXX_STR(""\\x1B[36m"")",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
620,41822,m_traceColor,3,PatternLayoutPrivate.m_traceColor,,main\cpp\patternlayout.cpp,"m_traceColor = LOG4CXX_STR(""\\x1B[34m"")",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
621,41823,expectedPatternLength,3,PatternLayoutPrivate.expectedPatternLength,,main\cpp\patternlayout.cpp,expectedPatternLength,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
622,44624,BEGIN,3,PropertyParser.LexemType.BEGIN,,main\cpp\properties.cpp,BEGIN,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
623,44625,KEY,3,PropertyParser.LexemType.KEY,,main\cpp\properties.cpp,KEY,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
624,44626,KEY_ESCAPE,3,PropertyParser.LexemType.KEY_ESCAPE,,main\cpp\properties.cpp,KEY_ESCAPE,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
625,44627,KEY_CONTINUE,3,PropertyParser.LexemType.KEY_CONTINUE,,main\cpp\properties.cpp,KEY_CONTINUE,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
626,44628,KEY_CONTINUE2,3,PropertyParser.LexemType.KEY_CONTINUE2,,main\cpp\properties.cpp,KEY_CONTINUE2,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
627,44629,DELIMITER,3,PropertyParser.LexemType.DELIMITER,,main\cpp\properties.cpp,DELIMITER,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
628,44630,ELEMENT,3,PropertyParser.LexemType.ELEMENT,,main\cpp\properties.cpp,ELEMENT,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
629,44631,ELEMENT_ESCAPE,3,PropertyParser.LexemType.ELEMENT_ESCAPE,,main\cpp\properties.cpp,ELEMENT_ESCAPE,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
630,44632,ELEMENT_CONTINUE,3,PropertyParser.LexemType.ELEMENT_CONTINUE,,main\cpp\properties.cpp,ELEMENT_CONTINUE,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
631,44633,ELEMENT_CONTINUE2,3,PropertyParser.LexemType.ELEMENT_CONTINUE2,,main\cpp\properties.cpp,ELEMENT_CONTINUE2,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
632,44634,COMMENT,3,PropertyParser.LexemType.COMMENT,,main\cpp\properties.cpp,COMMENT,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
633,44635,LexemType,3,PropertyParser.LexemType,,main\cpp\properties.cpp,LexemType,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
634,44826,option,3,PropertiesPatternConverterPrivate.option,,main\cpp\propertiespatternconverter.cpp,option,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
635,47332,triggeringPolicy,3,RollingFileAppenderPriv.triggeringPolicy,,main\cpp\rollingfileappender.cpp,triggeringPolicy,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
636,47333,rollingPolicy,3,RollingFileAppenderPriv.rollingPolicy,,main\cpp\rollingfileappender.cpp,rollingPolicy,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
637,47334,fileLength,3,RollingFileAppenderPriv.fileLength,,main\cpp\rollingfileappender.cpp,fileLength,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
638,47335,_event,3,RollingFileAppenderPriv._event,,main\cpp\rollingfileappender.cpp,_event,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
639,48770,os,3,LOG4CXX_NS.rolling.CountingOutputStream.os,,main\cpp\rollingfileappender.cpp,os,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
640,48771,rfa,3,LOG4CXX_NS.rolling.CountingOutputStream.rfa,,main\cpp\rollingfileappender.cpp,* rfa,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
641,49306,activeFileName,3,RolloverDescriptionPrivate.activeFileName,,main\cpp\rolloverdescription.cpp,activeFileName,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
642,49307,append,3,RolloverDescriptionPrivate.append,,main\cpp\rolloverdescription.cpp,append,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
643,49308,synchronous,3,RolloverDescriptionPrivate.synchronous,,main\cpp\rolloverdescription.cpp,synchronous,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
644,49309,asynchronous,3,RolloverDescriptionPrivate.asynchronous,,main\cpp\rolloverdescription.cpp,asynchronous,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
645,49741,ch,3,LOG4CXX_NS.helpers.SimpleDateFormatImpl.LiteralToken.ch,,main\cpp\simpledateformat.cpp,ch,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
646,49742,count,3,LOG4CXX_NS.helpers.SimpleDateFormatImpl.LiteralToken.count,,main\cpp\simpledateformat.cpp,count,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
647,49833,width,3,LOG4CXX_NS.helpers.SimpleDateFormatImpl.NumericToken.width,,main\cpp\simpledateformat.cpp,width,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
648,49900,names,3,LOG4CXX_NS.helpers.SimpleDateFormatImpl.AbbreviatedMonthNameToken.names,,main\cpp\simpledateformat.cpp,names,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
649,49933,names,3,LOG4CXX_NS.helpers.SimpleDateFormatImpl.FullMonthNameToken.names,,main\cpp\simpledateformat.cpp,names,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
650,50044,names,3,LOG4CXX_NS.helpers.SimpleDateFormatImpl.AbbreviatedDayNameToken.names,,main\cpp\simpledateformat.cpp,names,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
651,50077,names,3,LOG4CXX_NS.helpers.SimpleDateFormatImpl.FullDayNameToken.names,,main\cpp\simpledateformat.cpp,names,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
652,50096,offset,3,LOG4CXX_NS.helpers.SimpleDateFormatImpl.MilitaryHourToken.offset,,main\cpp\simpledateformat.cpp,offset,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
653,50121,offset,3,LOG4CXX_NS.helpers.SimpleDateFormatImpl.HourToken.offset,,main\cpp\simpledateformat.cpp,offset,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
654,50218,names,3,LOG4CXX_NS.helpers.SimpleDateFormatImpl.AMPMToken.names,,main\cpp\simpledateformat.cpp,names,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
655,50248,timeZone,3,LOG4CXX_NS.helpers.SimpleDateFormatImpl.GeneralTimeZoneToken.timeZone,,main\cpp\simpledateformat.cpp,timeZone,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
656,50706,timeZone,3,SimpleDateFormatPrivate.timeZone,,main\cpp\simpledateformat.cpp,timeZone,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
657,50707,pattern,3,SimpleDateFormatPrivate.pattern,,main\cpp\simpledateformat.cpp,pattern,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
658,51068,to,3,SMTPPriv.to,,main\cpp\smtpappender.cpp,to,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
659,51069,cc,3,SMTPPriv.cc,,main\cpp\smtpappender.cpp,cc,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
660,51070,bcc,3,SMTPPriv.bcc,,main\cpp\smtpappender.cpp,bcc,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
661,51071,from,3,SMTPPriv.from,,main\cpp\smtpappender.cpp,from,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
662,51072,subject,3,SMTPPriv.subject,,main\cpp\smtpappender.cpp,subject,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
663,51073,smtpHost,3,SMTPPriv.smtpHost,,main\cpp\smtpappender.cpp,smtpHost,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
664,51074,smtpUsername,3,SMTPPriv.smtpUsername,,main\cpp\smtpappender.cpp,smtpUsername,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
665,51075,smtpPassword,3,SMTPPriv.smtpPassword,,main\cpp\smtpappender.cpp,smtpPassword,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
666,51076,smtpPort,3,SMTPPriv.smtpPort,,main\cpp\smtpappender.cpp,smtpPort,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
667,51077,bufferSize,3,SMTPPriv.bufferSize,,main\cpp\smtpappender.cpp,bufferSize,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
668,51078,locationInfo,3,SMTPPriv.locationInfo,,main\cpp\smtpappender.cpp,locationInfo,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
669,51079,cb,3,SMTPPriv.cb,,main\cpp\smtpappender.cpp,cb,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
670,51080,evaluator,3,SMTPPriv.evaluator,,main\cpp\smtpappender.cpp,evaluator,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
671,53282,array,3,SocketOutputStreamPrivate.array,,main\cpp\socketoutputstream.cpp,array,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
672,53283,socket,3,SocketOutputStreamPrivate.socket,,main\cpp\socketoutputstream.cpp,socket,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
673,53434,timeZone,3,StrftimeDateFormatPrivate.timeZone,,main\cpp\strftimedateformat.cpp,timeZone,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
674,53435,pattern,3,StrftimeDateFormatPrivate.pattern,,main\cpp\strftimedateformat.cpp,pattern,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
675,54040,acceptOnMatch,3,StringMatchFilterPrivate.acceptOnMatch,,main\cpp\stringmatchfilter.cpp,acceptOnMatch,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
676,54041,stringToMatch,3,StringMatchFilterPrivate.stringToMatch,,main\cpp\stringmatchfilter.cpp,stringToMatch,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
677,54290,src,3,StringTokenizerPrivate.src,,main\cpp\stringtokenizer.cpp,src,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
678,54291,delim,3,StringTokenizerPrivate.delim,,main\cpp\stringtokenizer.cpp,delim,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
679,54292,pos,3,StringTokenizerPrivate.pos,,main\cpp\stringtokenizer.cpp,pos,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
680,55734,syslogHost,3,SyslogWriterPrivate.syslogHost,,main\cpp\syslogwriter.cpp,syslogHost,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
681,55735,syslogHostPort,3,SyslogWriterPrivate.syslogHostPort,,main\cpp\syslogwriter.cpp,syslogHostPort,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
682,55736,address,3,SyslogWriterPrivate.address,,main\cpp\syslogwriter.cpp,address,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
683,55737,ds,3,SyslogWriterPrivate.ds,,main\cpp\syslogwriter.cpp,ds,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
684,56167,port,3,TelnetAppenderPriv.port,,main\cpp\telnetappender.cpp,port,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
685,56168,connections,3,TelnetAppenderPriv.connections,,main\cpp\telnetappender.cpp,connections,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
686,56169,encoding,3,TelnetAppenderPriv.encoding,,main\cpp\telnetappender.cpp,encoding,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
687,56170,encoder,3,TelnetAppenderPriv.encoder,,main\cpp\telnetappender.cpp,encoder,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
688,56171,serverSocket,3,TelnetAppenderPriv.serverSocket,,main\cpp\telnetappender.cpp,serverSocket,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
689,56172,sh,3,TelnetAppenderPriv.sh,,main\cpp\telnetappender.cpp,sh,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
690,56173,activeConnections,3,TelnetAppenderPriv.activeConnections,,main\cpp\telnetappender.cpp,activeConnections,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
691,57289,ndcStack,3,ThreadSpecificDataPrivate.ndcStack,,main\cpp\threadspecificdata.cpp,ndcStack,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
692,57290,mdcMap,3,ThreadSpecificDataPrivate.mdcMap,,main\cpp\threadspecificdata.cpp,mdcMap,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
693,57561,start_pre,3,LOG4CXX_NS.helpers.priv_data.start_pre,,main\cpp\threadutility.cpp,start_pre,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
694,57562,started,3,LOG4CXX_NS.helpers.priv_data.started,,main\cpp\threadutility.cpp,started,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
695,57563,start_post,3,LOG4CXX_NS.helpers.priv_data.start_post,,main\cpp\threadutility.cpp,start_post,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
696,57838,shortReport,3,ThrowableInformationPatternConverterPrivate.shortReport,,main\cpp\throwableinformationpatternconverter.cpp,shortReport,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
697,57955,nextCheck,3,TimeBasedRollingPolicyPrivate.nextCheck,,main\cpp\timebasedrollingpolicy.cpp,nextCheck,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
698,57956,lastFileName,3,TimeBasedRollingPolicyPrivate.lastFileName,,main\cpp\timebasedrollingpolicy.cpp,lastFileName,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
699,57957,suffixLength,3,TimeBasedRollingPolicyPrivate.suffixLength,,main\cpp\timebasedrollingpolicy.cpp,suffixLength,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
700,57958,_mmap,3,TimeBasedRollingPolicyPrivate._mmap,,main\cpp\timebasedrollingpolicy.cpp,* _mmap,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
701,57959,_mmapPool,3,TimeBasedRollingPolicyPrivate._mmapPool,,main\cpp\timebasedrollingpolicy.cpp,_mmapPool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
702,57960,_file_map,3,TimeBasedRollingPolicyPrivate._file_map,,main\cpp\timebasedrollingpolicy.cpp,* _file_map,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
703,57961,_mapFileName,3,TimeBasedRollingPolicyPrivate._mapFileName,,main\cpp\timebasedrollingpolicy.cpp,_mapFileName,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
704,57962,_lock_file,3,TimeBasedRollingPolicyPrivate._lock_file,,main\cpp\timebasedrollingpolicy.cpp,* _lock_file,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
705,57963,bAlreadyInitialized,3,TimeBasedRollingPolicyPrivate.bAlreadyInitialized,,main\cpp\timebasedrollingpolicy.cpp,bAlreadyInitialized,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
706,57964,bRefreshCurFile,3,TimeBasedRollingPolicyPrivate.bRefreshCurFile,,main\cpp\timebasedrollingpolicy.cpp,bRefreshCurFile,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
707,57965,_fileNamePattern,3,TimeBasedRollingPolicyPrivate._fileNamePattern,,main\cpp\timebasedrollingpolicy.cpp,_fileNamePattern,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
708,57966,multiprocess,3,TimeBasedRollingPolicyPrivate.multiprocess,,main\cpp\timebasedrollingpolicy.cpp,multiprocess = false,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
709,57967,throwIOExceptionOnForkFailure,3,TimeBasedRollingPolicyPrivate.throwIOExceptionOnForkFailure,,main\cpp\timebasedrollingpolicy.cpp,throwIOExceptionOnForkFailure = true,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
710,58912,offset,3,LOG4CXX_NS.helpers.TimeZoneImpl.FixedTimeZone.offset,,main\cpp\timezone.cpp,offset,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
711,61933,locationInfo,3,XMLLayoutPrivate.locationInfo,,main\cpp\xmllayout.cpp,locationInfo,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
712,61934,properties,3,XMLLayoutPrivate.properties,,main\cpp\xmllayout.cpp,properties,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
713,61935,expectedPatternLength,3,XMLLayoutPrivate.expectedPatternLength,,main\cpp\xmllayout.cpp,expectedPatternLength,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
714,62545,writer,3,XMLSocketAppenderPriv.writer,,main\cpp\xmlsocketappender.cpp,writer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
715,62871,source,3,ZipCompressActionPrivate.source,,main\cpp\zipcompressaction.cpp,source,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
716,62872,destination,3,ZipCompressActionPrivate.destination,,main\cpp\zipcompressaction.cpp,destination,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
717,62873,deleteSource,3,ZipCompressActionPrivate.deleteSource,,main\cpp\zipcompressaction.cpp,deleteSource,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
718,62874,throwIOExceptionOnForkFailure,3,ZipCompressActionPrivate.throwIOExceptionOnForkFailure,,main\cpp\zipcompressaction.cpp,throwIOExceptionOnForkFailure = true,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
719,63707,isDestructed,3,LOG4CXX_NS.helpers.APRInitializer.isDestructed,,main\include\log4cxx\helpers\aprinitializer.hpp,isDestructed,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
720,64711,NoConfiguration,3,LOG4CXX_NS.helpers.ThreadConfigurationType.NoConfiguration,,main\include\log4cxx\helpers\threadutility.hpp,NoConfiguration,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
721,64712,BlockSignalsOnly,3,LOG4CXX_NS.helpers.ThreadConfigurationType.BlockSignalsOnly,,main\include\log4cxx\helpers\threadutility.hpp,BlockSignalsOnly,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
722,64713,NameThreadOnly,3,LOG4CXX_NS.helpers.ThreadConfigurationType.NameThreadOnly,,main\include\log4cxx\helpers\threadutility.hpp,NameThreadOnly,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
723,64714,BlockSignalsAndNameThread,3,LOG4CXX_NS.helpers.ThreadConfigurationType.BlockSignalsAndNameThread,,main\include\log4cxx\helpers\threadutility.hpp,BlockSignalsAndNameThread,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
724,64839,storage,3,LOG4CXX_NS.helpers.WideLife.storage,,main\include\log4cxx\helpers\widelife.hpp,storage[sizeof(T)],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
725,64920,,3,LOG4CXX_NS.HexdumpFlags.nan,,main\include\log4cxx\hexdump.hpp,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
726,64921,AddStartingNewline,3,LOG4CXX_NS.HexdumpFlags.AddStartingNewline,,main\include\log4cxx\hexdump.hpp,AddStartingNewline = (0x01 << 0),-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
727,64922,AddEndingNewline,3,LOG4CXX_NS.HexdumpFlags.AddEndingNewline,,main\include\log4cxx\hexdump.hpp,AddEndingNewline = (0x01 << 1),-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
728,64923,AddNewline,3,LOG4CXX_NS.HexdumpFlags.AddNewline,,main\include\log4cxx\hexdump.hpp,AddNewline = AddStartingNewline | AddEndingNewline,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
729,65076,m_otherCategory,3,LOG4CXX_NS.LevelChange.m_otherCategory,,main\include\log4cxx\levelchange.hpp,m_otherCategory,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
730,65077,m_savedLevel,3,LOG4CXX_NS.LevelChange.m_savedLevel,,main\include\log4cxx\levelchange.hpp,m_savedLevel,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
731,65183,m_hadConfiguration,3,LOG4CXX_NS.LoggerInstancePtr.m_hadConfiguration,,main\include\log4cxx\loggerinstance.hpp,m_hadConfiguration,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
732,65184,m_logger,3,LOG4CXX_NS.LoggerInstancePtr.m_logger,,main\include\log4cxx\loggerinstance.hpp,m_logger,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
733,65831,complete,3,LOG4CXX_NS.rolling.ActionPrivate.complete,,main\include\log4cxx\private\action_priv.hpp,complete,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
734,65832,interrupted,3,LOG4CXX_NS.rolling.ActionPrivate.interrupted,,main\include\log4cxx\private\action_priv.hpp,interrupted,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
735,65833,pool,3,LOG4CXX_NS.rolling.ActionPrivate.pool,,main\include\log4cxx\private\action_priv.hpp,pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
736,65834,mutex,3,LOG4CXX_NS.rolling.ActionPrivate.mutex,,main\include\log4cxx\private\action_priv.hpp,mutex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
737,65861,layout,3,LOG4CXX_NS.AppenderSkeletonPrivate.layout,,main\include\log4cxx\private\appenderskeleton_priv.hpp,layout,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
738,65862,name,3,LOG4CXX_NS.AppenderSkeletonPrivate.name,,main\include\log4cxx\private\appenderskeleton_priv.hpp,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
739,65863,threshold,3,LOG4CXX_NS.AppenderSkeletonPrivate.threshold,,main\include\log4cxx\private\appenderskeleton_priv.hpp,threshold,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
740,65864,errorHandler,3,LOG4CXX_NS.AppenderSkeletonPrivate.errorHandler,,main\include\log4cxx\private\appenderskeleton_priv.hpp,errorHandler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
741,65865,headFilter,3,LOG4CXX_NS.AppenderSkeletonPrivate.headFilter,,main\include\log4cxx\private\appenderskeleton_priv.hpp,headFilter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
742,65866,tailFilter,3,LOG4CXX_NS.AppenderSkeletonPrivate.tailFilter,,main\include\log4cxx\private\appenderskeleton_priv.hpp,tailFilter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
743,65867,closed,3,LOG4CXX_NS.AppenderSkeletonPrivate.closed,,main\include\log4cxx\private\appenderskeleton_priv.hpp,closed,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
744,65868,pool,3,LOG4CXX_NS.AppenderSkeletonPrivate.pool,,main\include\log4cxx\private\appenderskeleton_priv.hpp,pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
745,65869,mutex,3,LOG4CXX_NS.AppenderSkeletonPrivate.mutex,,main\include\log4cxx\private\appenderskeleton_priv.hpp,mutex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
746,65992,address,3,LOG4CXX_NS.helpers.DatagramSocketPriv.address,,main\include\log4cxx\private\datagramsocket_priv.hpp,address,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
747,65993,localAddress,3,LOG4CXX_NS.helpers.DatagramSocketPriv.localAddress,,main\include\log4cxx\private\datagramsocket_priv.hpp,localAddress,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
748,65994,port,3,LOG4CXX_NS.helpers.DatagramSocketPriv.port,,main\include\log4cxx\private\datagramsocket_priv.hpp,port,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
749,65995,localPort,3,LOG4CXX_NS.helpers.DatagramSocketPriv.localPort,,main\include\log4cxx\private\datagramsocket_priv.hpp,localPort,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
750,66016,fileAppend,3,LOG4CXX_NS.FileAppenderPriv.fileAppend,,main\include\log4cxx\private\fileappender_priv.hpp,fileAppend,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
751,66017,fileName,3,LOG4CXX_NS.FileAppenderPriv.fileName,,main\include\log4cxx\private\fileappender_priv.hpp,fileName,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
752,66018,bufferedIO,3,LOG4CXX_NS.FileAppenderPriv.bufferedIO,,main\include\log4cxx\private\fileappender_priv.hpp,bufferedIO,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
753,66019,bufferSize,3,LOG4CXX_NS.FileAppenderPriv.bufferSize,,main\include\log4cxx\private\fileappender_priv.hpp,bufferSize,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
754,66034,next,3,LOG4CXX_NS.spi.FilterPrivate.next,,main\include\log4cxx\private\filter_priv.hpp,next,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
755,66072,databaseURL,3,LOG4CXX_NS.db.ODBCAppenderPriv.databaseURL,,main\include\log4cxx\private\odbcappender_priv.hpp,databaseURL,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
756,66073,databaseUser,3,LOG4CXX_NS.db.ODBCAppenderPriv.databaseUser,,main\include\log4cxx\private\odbcappender_priv.hpp,databaseUser,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
757,66074,databasePassword,3,LOG4CXX_NS.db.ODBCAppenderPriv.databasePassword,,main\include\log4cxx\private\odbcappender_priv.hpp,databasePassword,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
758,66075,connection,3,LOG4CXX_NS.db.ODBCAppenderPriv.connection,,main\include\log4cxx\private\odbcappender_priv.hpp,connection,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
759,66076,env,3,LOG4CXX_NS.db.ODBCAppenderPriv.env,,main\include\log4cxx\private\odbcappender_priv.hpp,env,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
760,66077,sqlStatement,3,LOG4CXX_NS.db.ODBCAppenderPriv.sqlStatement,,main\include\log4cxx\private\odbcappender_priv.hpp,sqlStatement,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
761,66078,bufferSize,3,LOG4CXX_NS.db.ODBCAppenderPriv.bufferSize,,main\include\log4cxx\private\odbcappender_priv.hpp,bufferSize,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
762,66079,buffer,3,LOG4CXX_NS.db.ODBCAppenderPriv.buffer,,main\include\log4cxx\private\odbcappender_priv.hpp,buffer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
763,66080,timeZone,3,LOG4CXX_NS.db.ODBCAppenderPriv.timeZone,,main\include\log4cxx\private\odbcappender_priv.hpp,timeZone,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
764,66081,preparedStatement,3,LOG4CXX_NS.db.ODBCAppenderPriv.preparedStatement,,main\include\log4cxx\private\odbcappender_priv.hpp,preparedStatement,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
765,66084,converter,3,LOG4CXX_NS.db.ODBCAppenderPriv.DataBinding.converter,,main\include\log4cxx\private\odbcappender_priv.hpp,converter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
766,66085,paramType,3,LOG4CXX_NS.db.ODBCAppenderPriv.DataBinding.paramType,,main\include\log4cxx\private\odbcappender_priv.hpp,paramType,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
767,66086,paramMaxCharCount,3,LOG4CXX_NS.db.ODBCAppenderPriv.DataBinding.paramMaxCharCount,,main\include\log4cxx\private\odbcappender_priv.hpp,paramMaxCharCount,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
768,66087,paramValue,3,LOG4CXX_NS.db.ODBCAppenderPriv.DataBinding.paramValue,,main\include\log4cxx\private\odbcappender_priv.hpp,paramValue,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
769,66088,paramValueSize,3,LOG4CXX_NS.db.ODBCAppenderPriv.DataBinding.paramValueSize,,main\include\log4cxx\private\odbcappender_priv.hpp,paramValueSize,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
770,66089,strLen_or_Ind,3,LOG4CXX_NS.db.ODBCAppenderPriv.DataBinding.strLen_or_Ind,,main\include\log4cxx\private\odbcappender_priv.hpp,strLen_or_Ind,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
771,66090,mappedName,3,LOG4CXX_NS.db.ODBCAppenderPriv.mappedName,,main\include\log4cxx\private\odbcappender_priv.hpp,mappedName,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
772,66091,parameterValue,3,LOG4CXX_NS.db.ODBCAppenderPriv.parameterValue,,main\include\log4cxx\private\odbcappender_priv.hpp,parameterValue,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
773,66104,atExitRegistryRaii,3,LOG4CXX_NS.db.ODBCAppenderPriv.atExitRegistryRaii,,main\include\log4cxx\private\odbcappender_priv.hpp,atExitRegistryRaii,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
774,66125,name,3,LOG4CXX_NS.pattern.PatternConverterPrivate.name,,main\include\log4cxx\private\patternconverter_priv.hpp,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
775,66126,style,3,LOG4CXX_NS.pattern.PatternConverterPrivate.style,,main\include\log4cxx\private\patternconverter_priv.hpp,style,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
776,66147,patternConverters,3,LOG4CXX_NS.rolling.RollingPolicyBasePrivate.patternConverters,,main\include\log4cxx\private\rollingpolicybase_priv.hpp,patternConverters,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
777,66148,patternFields,3,LOG4CXX_NS.rolling.RollingPolicyBasePrivate.patternFields,,main\include\log4cxx\private\rollingpolicybase_priv.hpp,patternFields,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
778,66149,fileNamePatternStr,3,LOG4CXX_NS.rolling.RollingPolicyBasePrivate.fileNamePatternStr,,main\include\log4cxx\private\rollingpolicybase_priv.hpp,fileNamePatternStr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
779,66150,createIntermediateDirectories,3,LOG4CXX_NS.rolling.RollingPolicyBasePrivate.createIntermediateDirectories,,main\include\log4cxx\private\rollingpolicybase_priv.hpp,createIntermediateDirectories = true,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
780,66176,timeout,3,LOG4CXX_NS.helpers.ServerSocketPrivate.timeout,,main\include\log4cxx\private\serversocket_priv.hpp,timeout,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
781,66197,address,3,LOG4CXX_NS.helpers.SocketPrivate.address,,main\include\log4cxx\private\socket_priv.hpp,address,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
782,66198,port,3,LOG4CXX_NS.helpers.SocketPrivate.port,,main\include\log4cxx\private\socket_priv.hpp,port,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
783,66233,remoteHost,3,LOG4CXX_NS.net.SocketAppenderSkeletonPriv.remoteHost,,main\include\log4cxx\private\socketappenderskeleton_priv.hpp,remoteHost,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
784,66234,address,3,LOG4CXX_NS.net.SocketAppenderSkeletonPriv.address,,main\include\log4cxx\private\socketappenderskeleton_priv.hpp,address,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
785,66235,port,3,LOG4CXX_NS.net.SocketAppenderSkeletonPriv.port,,main\include\log4cxx\private\socketappenderskeleton_priv.hpp,port,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
786,66236,reconnectionDelay,3,LOG4CXX_NS.net.SocketAppenderSkeletonPriv.reconnectionDelay,,main\include\log4cxx\private\socketappenderskeleton_priv.hpp,reconnectionDelay,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
787,66237,locationInfo,3,LOG4CXX_NS.net.SocketAppenderSkeletonPriv.locationInfo,,main\include\log4cxx\private\socketappenderskeleton_priv.hpp,locationInfo,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
788,66238,thread,3,LOG4CXX_NS.net.SocketAppenderSkeletonPriv.thread,,main\include\log4cxx\private\socketappenderskeleton_priv.hpp,thread,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
789,66239,interrupt,3,LOG4CXX_NS.net.SocketAppenderSkeletonPriv.interrupt,,main\include\log4cxx\private\socketappenderskeleton_priv.hpp,interrupt,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
790,66240,interrupt_mutex,3,LOG4CXX_NS.net.SocketAppenderSkeletonPriv.interrupt_mutex,,main\include\log4cxx\private\socketappenderskeleton_priv.hpp,interrupt_mutex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
791,66402,syslogFacility,3,LOG4CXX_NS.net.SyslogAppenderPriv.syslogFacility,,main\include\log4cxx\private\syslogappender_priv.hpp,syslogFacility,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
792,66403,facilityStr,3,LOG4CXX_NS.net.SyslogAppenderPriv.facilityStr,,main\include\log4cxx\private\syslogappender_priv.hpp,facilityStr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
793,66404,facilityPrinting,3,LOG4CXX_NS.net.SyslogAppenderPriv.facilityPrinting,,main\include\log4cxx\private\syslogappender_priv.hpp,facilityPrinting,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
794,66405,sw,3,LOG4CXX_NS.net.SyslogAppenderPriv.sw,,main\include\log4cxx\private\syslogappender_priv.hpp,sw,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
795,66406,syslogHost,3,LOG4CXX_NS.net.SyslogAppenderPriv.syslogHost,,main\include\log4cxx\private\syslogappender_priv.hpp,syslogHost,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
796,66407,syslogHostPort,3,LOG4CXX_NS.net.SyslogAppenderPriv.syslogHostPort,,main\include\log4cxx\private\syslogappender_priv.hpp,syslogHostPort,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
797,66408,maxMessageLength,3,LOG4CXX_NS.net.SyslogAppenderPriv.maxMessageLength,,main\include\log4cxx\private\syslogappender_priv.hpp,maxMessageLength,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
798,66445,immediateFlush,3,LOG4CXX_NS.WriterAppenderPriv.immediateFlush,,main\include\log4cxx\private\writerappender_priv.hpp,immediateFlush,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
799,66446,encoding,3,LOG4CXX_NS.WriterAppenderPriv.encoding,,main\include\log4cxx\private\writerappender_priv.hpp,encoding,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
800,66447,writer,3,LOG4CXX_NS.WriterAppenderPriv.writer,,main\include\log4cxx\private\writerappender_priv.hpp,writer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
801,66448,atExitRegistryRaii,3,LOG4CXX_NS.WriterAppenderPriv.atExitRegistryRaii,,main\include\log4cxx\private\writerappender_priv.hpp,atExitRegistryRaii,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
802,66507,,3,LOG4CXX_NS.rolling.Action.nan,,main\include\log4cxx\rolling\action.hpp,(Action),-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
803,66552,,3,LOG4CXX_NS.rolling.FileRenameAction.nan,,main\include\log4cxx\rolling\filerenameaction.hpp,(FileRenameAction),-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
804,66604,,3,LOG4CXX_NS.rolling.GZCompressAction.nan,,main\include\log4cxx\rolling\gzcompressaction.hpp,(GZCompressAction),-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
805,66737,,3,LOG4CXX_NS.rolling.RolloverDescription.nan,,main\include\log4cxx\rolling\rolloverdescription.hpp,(RolloverDescription),-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
806,66833,,3,LOG4CXX_NS.rolling.ZipCompressAction.nan,,main\include\log4cxx\rolling\zipcompressaction.hpp,(ZipCompressAction),-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
807,66895,Configured,3,LOG4CXX_NS.spi.ConfigurationStatus.Configured,,main\include\log4cxx\spi\configurator.hpp,Configured,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
808,66896,NotConfigured,3,LOG4CXX_NS.spi.ConfigurationStatus.NotConfigured,,main\include\log4cxx\spi\configurator.hpp,NotConfigured,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
809,66932,GENERIC_FAILURE,3,LOG4CXX_NS.spi.ErrorCode.anonymous_enum_0.GENERIC_FAILURE,,main\include\log4cxx\spi\errorhandler.hpp,GENERIC_FAILURE = 0,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
810,66933,WRITE_FAILURE,3,LOG4CXX_NS.spi.ErrorCode.anonymous_enum_0.WRITE_FAILURE,,main\include\log4cxx\spi\errorhandler.hpp,WRITE_FAILURE = 1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
811,66934,FLUSH_FAILURE,3,LOG4CXX_NS.spi.ErrorCode.anonymous_enum_0.FLUSH_FAILURE,,main\include\log4cxx\spi\errorhandler.hpp,FLUSH_FAILURE = 2,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
812,66935,CLOSE_FAILURE,3,LOG4CXX_NS.spi.ErrorCode.anonymous_enum_0.CLOSE_FAILURE,,main\include\log4cxx\spi\errorhandler.hpp,CLOSE_FAILURE = 3,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
813,66936,FILE_OPEN_FAILURE,3,LOG4CXX_NS.spi.ErrorCode.anonymous_enum_0.FILE_OPEN_FAILURE,,main\include\log4cxx\spi\errorhandler.hpp,FILE_OPEN_FAILURE = 4,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
814,66937,MISSING_LAYOUT,3,LOG4CXX_NS.spi.ErrorCode.anonymous_enum_0.MISSING_LAYOUT,,main\include\log4cxx\spi\errorhandler.hpp,MISSING_LAYOUT = 5,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
815,66938,ADDRESS_PARSE_FAILURE,3,LOG4CXX_NS.spi.ErrorCode.anonymous_enum_0.ADDRESS_PARSE_FAILURE,,main\include\log4cxx\spi\errorhandler.hpp,ADDRESS_PARSE_FAILURE = 6,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
816,67423,location,3,__CFRange.location,,main\mock-apple\CoreFoundation\CFString.hpp,location,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
817,67424,length,3,__CFRange.length,,main\mock-apple\CoreFoundation\CFString.hpp,length,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
818,11,main,1,main,int main (),examples\cpp\stream.cpp,"int main()
{
    setlocale(LC_ALL, """");
    int result = EXIT_SUCCESS;
    try
    {
                BasicConfigurator::configure();
                LoggerPtr rootLogger = Logger::getRootLogger();

                NDC::push(""trivial context"");

                log4cxx::logstream logstream(rootLogger, Level::getDebug());
                logstream << ""debug message "" << 1 << LOG4CXX_ENDMSG;
                logstream.setLevel(Level::getInfo());
                logstream << ""info message"" << LOG4CXX_ENDMSG;
                logstream << Level::getWarn() << ""warn message"" << LOG4CXX_ENDMSG;
                logstream << Level::getError() << ""error message"" << LOG4CXX_ENDMSG;
                logstream << Level::getFatal() << ""fatal message"" << LOG4CXX_ENDMSG;


                NDC::pop();
        }
        catch(std::exception&)
        {
                result = EXIT_FAILURE;
        }

    return result;
}",28.0,56.0,1.0,1.0,29.0,5,4,10,6,0,0,2,2,0,0,,0,0,0,0,0,int
819,267,getCurrentThreadVar,1,getCurrentThreadVar,string getCurrentThreadVar (),cmake\compiler-features\test-thread-local.cpp,"std::string& getCurrentThreadVar()
{
	thread_local std::string thread_id_string;
    return thread_id_string;
}",3.0,7.0,1.0,1.0,5.0,0,0,1,1,0,0,1,1,0,0,,0,0,0,0,0,string
820,426,foo,1,foo,void foo (),examples\cpp\MyApp1.cpp,"void foo() {
	// Get a logger that is a child of the statically declared logger
	auto fooLogger = log4cxx::Logger::getLogger(""MyApp.foo"");
	LOG4CXX_TRACE(fooLogger, ""Doing foo at trace level"");
	LOG4CXX_DEBUG(fooLogger, ""Doing foo at debug level"");
	LOG4CXX_INFO(fooLogger, ""Doing foo at info level"");
	LOG4CXX_WARN(fooLogger, ""Doing foo at warn level"");
	LOG4CXX_ERROR(fooLogger, ""Doing foo at error level"");
	LOG4CXX_FATAL(fooLogger, ""Doing foo at fatal level"");
}",6.0,15.0,1.0,1.0,10.0,3,2,9,3,0,0,1,1,0,0,,0,0,0,0,0,void
821,544,ExampleStaticData,1,ExampleStaticData.ExampleStaticData,ANY ExampleStaticData.ExampleStaticData (),examples\cpp\auto-configured.cpp,"ExampleStaticData()	{
		LOG4CXX_DEBUG(rootLogger, ""static initializer message"");
	}",22.0,24.0,2.0,2.0,3.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,ANY
822,574,doIt,1,Bar.doIt,void Bar.doIt (),examples\cpp\com\foo\bar.cpp,"void Bar::doIt() {
	LOG4CXX_DEBUG(m_logger, ""Did it again!"");
}",7.0,9.0,1.0,1.0,3.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,void
823,614,doIt,1,com.foo.Bar.doIt,void com.foo.Bar.doIt (),examples\cpp\com\foo\bar.hpp,void doIt();,9.0,9.0,14.0,19.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,void
824,643,ConfigureLogging,1,com.foo.ConfigureLogging,void com.foo.ConfigureLogging (),examples\cpp\com\foo\config-qt.cpp,"void ConfigureLogging() {
	using namespace log4cxx;
	static struct log4cxx_finalizer {
		~log4cxx_finalizer() {
			LogManager::shutdown();
		}
	} finaliser;
	QFileInfo app{QCoreApplication::applicationFilePath()};
	QString basename{app.baseName()};
	QVector<QString> paths =
		{ QString(""."")
		, app.absoluteDir().absolutePath()
		};
	QVector<QString> names =
		{ QString(basename + "".xml"")
		, QString(basename + "".properties"")
		, QString(""MyApp.properties"")
		, QString(""log4cxx.xml"")
		, QString(""log4cxx.properties"")
		, QString(""log4j.xml"")
		, QString(""log4j.properties"")
	};
#if defined(_DEBUG)
	helpers::LogLog::setInternalDebugging(true);
#endif
	auto status       = spi::ConfigurationStatus::NotConfigured;
	auto selectedPath = QString();
	std::tie(status, selectedPath) = qt::Configuration::configureFromFileAndWatch(paths, names);
	if (status == spi::ConfigurationStatus::NotConfigured)
		BasicConfigurator::configure(); // Send events to the console
}",31.0,61.0,1.0,1.0,31.0,24,6,25,15,0,1,2,2,0,1,,0,0,0,0,0,void
825,716,getLogger,1,com.foo.getLogger,ANY com.foo.getLogger (QString),examples\cpp\com\foo\config3.cpp,"auto getLogger(const std::string& name) -> LoggerPtr {
	using namespace log4cxx;
	static struct log4cxx_initializer {
		log4cxx_initializer() {
			SelectConfigurationFile();
		}
		~log4cxx_initializer() {
			LogManager::shutdown();
		}
	} initialiser;
	return name.empty()
		? LogManager::getRootLogger()
		: LogManager::getLogger(name);
}",156.0,169.0,1.0,1.0,14.0,5,2,4,2,0,2,1,1,0,1,,0,0,2,1,1,ANY
826,897,DefaultConfigurationFileNames,1,anonymous_namespace_1.DefaultConfigurationFileNames,ANY anonymous_namespace_1.DefaultConfigurationFileNames (ANY),examples\cpp\com\foo\config3.cpp,"auto DefaultConfigurationFileNames(std::string& altPrefix) -> std::vector<std::string> {
	std::vector<std::string> result;

	// Find the executable file name
	static const int bufSize = 4096;
	char buf[bufSize+1] = {0}, pathSepar = '/';
	uint32_t bufCount = 0;
#if defined(WIN32)
	GetModuleFileName(NULL, buf, bufSize);
	pathSepar = '\\';
#elif defined(__APPLE__)
	_NSGetExecutablePath(buf, &bufCount);
#elif (defined(_XOPEN_SOURCE) && _XOPEN_SOURCE >= 500) || (defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE >= 200112L)
	std::ostringstream exeLink;
	exeLink << ""/proc/"" << getpid() << ""/exe"";
	bufCount = readlink(exeLink.str().c_str(), buf, bufSize);
	if (0 < bufCount)
		buf[bufCount] = 0;
#else
	strncpy(buf, ""auto-configured"", bufSize);
#endif
	std::string programFileName(buf);
	auto slashIndex = programFileName.rfind(pathSepar);
	if (std::string::npos != slashIndex) {
		// Extract the path
		altPrefix = programFileName.substr(0, slashIndex + 1);
#if defined(_DEBUG)
		LogString msg1 = LOG4C...",44.0,113.0,1.0,1.0,70.0,32,7,34,11,0,0,3,4,0,0,,0,0,2,1,1,ANY
827,1060,SelectConfigurationFile,1,anonymous_namespace_2.SelectConfigurationFile,void anonymous_namespace_2.SelectConfigurationFile (),examples\cpp\com\foo\config3.cpp,"void SelectConfigurationFile() {
#if defined(_DEBUG)
	helpers::LogLog::setInternalDebugging(true);
#endif
	const char* extension[] = { "".xml"", "".properties"", 0 };
	std::string altPrefix;
	helpers::Pool pool;

	for (auto baseName : DefaultConfigurationFileNames(altPrefix)) {
		int i = 0;
		for (; extension[i]; ++i) {
			File current_working_dir_candidate(baseName + extension[i]);
			if (current_working_dir_candidate.exists(pool)) {
				DefaultConfigurator::setConfigurationFileName(current_working_dir_candidate.getPath());
				DefaultConfigurator::setConfigurationWatchSeconds(5);
				break;
			}
			if (!altPrefix.empty()) {
				File alt_dir_candidate(altPrefix + baseName + extension[i]);
				if (alt_dir_candidate.exists(pool)) {
					DefaultConfigurator::setConfigurationFileName(alt_dir_candidate.getPath());
					DefaultConfigurator::setConfigurationWatchSeconds(5);
					break;
				}
			}
		}
		if (extension[i]) // Found a configuration file?
			return;
	}
	// Configuration file not f...",117.0,148.0,1.0,1.0,32.0,21,6,26,9,0,5,9,16,0,5,,0,0,0,0,0,void
828,1189,<lambda>0,1,configure.<lambda>0,ANY configure.<lambda>0 (),examples\cpp\console.cpp,"[r,err]() {
        auto appender = std::make_shared<ConsoleAppender>
            ( std::make_shared<SimpleLayout>()
            , err ? ConsoleAppender::getSystemErr() : ConsoleAppender::getSystemOut()
            );
        r->getRootLogger()->addAppender(appender);
    }",35.0,41.0,27.0,5.0,7.0,12,8,9,5,0,2,1,1,0,0,,0,2,0,0,0,ANY
829,1249,configure,1,configure,void configure (bool),examples\cpp\console.cpp,"static void configure(bool err)
{
    using namespace log4cxx;
    auto r = LogManager::getLoggerRepository();
    r->ensureIsConfigured([r,err]() {
        auto appender = std::make_shared<ConsoleAppender>
            ( std::make_shared<SimpleLayout>()
            , err ? ConsoleAppender::getSystemErr() : ConsoleAppender::getSystemOut()
            );
        r->getRootLogger()->addAppender(appender);
    });
}",31.0,42.0,1.0,1.0,12.0,3,3,3,2,0,1,1,1,0,0,,0,1,2,1,1,void
830,1477,close,1,LOG4CXX_NS.NullWriterAppender.close,void LOG4CXX_NS.NullWriterAppender.close (),examples\cpp\custom-appender.cpp,void close() override{},35.0,35.0,2.0,24.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,void
831,1481,requiresLayout,1,LOG4CXX_NS.NullWriterAppender.requiresLayout,bool LOG4CXX_NS.NullWriterAppender.requiresLayout (),examples\cpp\custom-appender.cpp,"bool requiresLayout() const override {
		return false;
	}",37.0,39.0,2.0,2.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,bool
832,1487,append,1,LOG4CXX_NS.NullWriterAppender.append,"void LOG4CXX_NS.NullWriterAppender.append (ANY,ANY)",examples\cpp\custom-appender.cpp,"void append(const spi::LoggingEventPtr& event, helpers::Pool& p) override {
		// This gets called whenever there is a valid event for our appender.
	}",41.0,43.0,2.0,2.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
833,1493,activateOptions,1,LOG4CXX_NS.NullWriterAppender.activateOptions,void LOG4CXX_NS.NullWriterAppender.activateOptions (ANY),examples\cpp\custom-appender.cpp,"void activateOptions(helpers::Pool& /* pool */) override {
		// Given all of our options, do something useful(e.g. open a file)
	}",45.0,47.0,2.0,2.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
834,1498,setOption,1,LOG4CXX_NS.NullWriterAppender.setOption,"void LOG4CXX_NS.NullWriterAppender.setOption (LogString,LogString)",examples\cpp\custom-appender.cpp,"void setOption(const LogString& option, const LogString& value) override {
		if (helpers::StringHelper::equalsIgnoreCase(option,
										   LOG4CXX_STR(""SOMEVALUE""), LOG4CXX_STR(""somevalue""))){
			// Do something with the 'value' here.
		}
	}",49.0,54.0,2.0,2.0,6.0,2,1,3,3,0,0,2,2,0,0,,0,0,4,2,2,void
835,1580,main,1,DelayedLoop.main,"void DelayedLoop.main (int,char[]*)",examples\cpp\delayedloop.cpp,"static void main(int argc, const char * const argv[])
        {
                if(argc == 2)
                {
                        init(argv[1]);
                }
                else
                {
                        usage(argv[0], ""Wrong number of arguments."");
                }

                test();
        }",43.0,55.0,9.0,9.0,13.0,2,2,2,2,0,1,2,2,0,0,,0,0,4,2,2,void
836,1603,usage,1,DelayedLoop.usage,"void DelayedLoop.usage (char*,char*)",examples\cpp\delayedloop.cpp,"static void usage(const char * programName, const char * msg)
        {
                std::cout << msg << std::endl;
                std::cout << ""Usage: "" << programName <<
                                "" configFile"" << std::endl;
                exit(1);
        }",57.0,63.0,9.0,9.0,7.0,10,2,6,3,0,0,1,1,0,0,,0,0,4,2,2,void
837,1633,init,1,DelayedLoop.init,void DelayedLoop.init (ANY),examples\cpp\delayedloop.cpp,"static void init(const std::string& configFile)
        {
                if(configFile.length() > 4 &&
                     configFile.substr(configFile.length() - 4) == "".xml"")
                {
                        xml::DOMConfigurator::configureAndWatch(configFile, 3000);
                }
                else
                {
                        PropertyConfigurator::configureAndWatch(configFile, 3000);
                }
        }",66.0,77.0,9.0,9.0,12.0,9,5,6,3,0,0,2,2,0,0,,0,0,2,1,1,void
838,1675,test,1,DelayedLoop.test,void DelayedLoop.test (),examples\cpp\delayedloop.cpp,"static void test()
        {
                int i = 0;
                while(true)
                {
                   LOG4CXX_DEBUG(logger, ""MSG "" << i++);
                        try
                        {
                                apr_sleep(1000000);
                        }
                        catch(std::exception&)
                        {
                        }
                }
        }",79.0,93.0,9.0,9.0,15.0,3,3,3,2,1,1,3,4,0,0,,0,1,0,0,0,void
839,1761,operator <<,1,operator <<,"ostream operator << (ANY,MyStruct)",main\include\log4cxx-qt\messagebuffer.hpp,"inline LOG4CXX_NS::helpers::CharMessageBuffer&
operator<<(LOG4CXX_NS::helpers::CharMessageBuffer& mb, const QString& msg)
{
	LOG4CXX_DECODE_QSTRING(tmp, msg);
	return mb << tmp;
}",64.0,69.0,2.0,1.0,6.0,4,2,3,2,0,1,1,1,0,0,,0,1,4,2,2,CharMessageBuffer
840,2057,loadXMLFile,1,LOG4CXX_NS.qt.loadXMLFile,void LOG4CXX_NS.qt.loadXMLFile (QString),main\cpp-qt\configuration.cpp,"static void loadXMLFile(const QString& path){
	QFileInfo fi(configFilename);
	if(!fi.exists()){
		return;
	}
	LOG4CXX_NS::xml::DOMConfigurator::configure(path.toStdString());
}",38.0,44.0,1.0,1.0,7.0,6,2,6,6,0,0,2,2,0,0,,0,0,2,1,1,void
841,2085,loadPropertiesFile,1,LOG4CXX_NS.qt.loadPropertiesFile,void LOG4CXX_NS.qt.loadPropertiesFile (QString),main\cpp-qt\configuration.cpp,"static void loadPropertiesFile(const QString& path){
	QFileInfo fi(configFilename);
	if(!fi.exists()){
		return;
	}
	LOG4CXX_NS::PropertyConfigurator::configure(path.toStdString());
}",46.0,52.0,1.0,1.0,7.0,5,2,5,5,0,0,2,2,0,0,,0,0,2,1,1,void
842,2111,dirChanged,1,LOG4CXX_NS.qt.dirChanged,void LOG4CXX_NS.qt.dirChanged (QString),main\cpp-qt\configuration.cpp,"static void dirChanged(const QString&){
	QFileInfo fi(configFilename);
	if(fi.exists()){
		// From the Qt docs:
		// Note that QFileSystemWatcher stops monitoring files once they have been renamed
		// or removed from disk, and directories once they have been removed from disk.
		//
		// Some text editing programs will replace the file with a new one, which deletes
		// the old file(thus causing Qt to remove the watch), so we need to add in the
		// file whenever the directory changes.
		// See also: https://stackoverflow.com/questions/18300376/qt-qfilesystemwatcher-signal-filechanged-gets-emited-only-once
		watcher->addPath(configFilename);
	}
}",54.0,67.0,1.0,1.0,14.0,2,2,4,3,0,0,2,2,0,0,,0,0,2,1,1,void
843,2130,Configuration,1,LOG4CXX_NS.qt.Configuration.Configuration,ANY LOG4CXX_NS.qt.Configuration.Configuration (),main\cpp-qt\configuration.cpp,Configuration::Configuration(){},69.0,69.0,1.0,32.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
844,2134,tryLoadFile,1,LOG4CXX_NS.qt.Configuration.tryLoadFile,ConfigurationStatus LOG4CXX_NS.qt.Configuration.tryLoadFile (QString),main\cpp-qt\configuration.cpp,"LOG4CXX_NS::spi::ConfigurationStatus Configuration::tryLoadFile(const QString& filename){
	LOG4CXX_NS::spi::ConfigurationStatus stat =LOG4CXX_NS::spi::ConfigurationStatus::NotConfigured;
	bool isXML = false;

	if(filename.endsWith("".xml"")){
		stat = LOG4CXX_NS::xml::DOMConfigurator::configure(filename.toStdString());
		isXML = true;
	}else if(filename.endsWith("".properties"")){
		stat = LOG4CXX_NS::PropertyConfigurator::configure(filename.toStdString());
	}

	if( stat == LOG4CXX_NS::spi::ConfigurationStatus::Configured ){
		watcher = std::make_unique<QFileSystemWatcher>();
		configFilename = filename;
		QFileInfo fi(filename);
		watcher->addPath(fi.dir().absolutePath());
		watcher->addPath(filename);

		QObject::connect(watcher.get(), &QFileSystemWatcher::directoryChanged,
						 &dirChanged);
		if(isXML){
			QObject::connect(watcher.get(), &QFileSystemWatcher::fileChanged,
							 &loadXMLFile);
		}else{
			QObject::connect(watcher.get(), &QFileSystemWatcher::fileChanged,
							 &l...",71.0,101.0,1.0,1.0,31.0,33,5,35,16,0,0,4,5,0,0,,0,0,2,1,1,ConfigurationStatus
845,2286,configureFromFileAndWatch,1,LOG4CXX_NS.qt.Configuration.configureFromFileAndWatch,"tuple<LOG4CXX_NS::spi::ConfigurationStatus,QString> LOG4CXX_NS.qt.Configuration.configureFromFileAndWatch (QVector<QString>,QVector<QString>)",main\cpp-qt\configuration.cpp,"std::tuple<LOG4CXX_NS::spi::ConfigurationStatus,QString>
Configuration::configureFromFileAndWatch(const QVector<QString>& directories,
										 const QVector<QString>& filenames){
	for( QString dir : directories ){
		for( QString fname : filenames ){
			QString canidate_str = dir + ""/"" + fname;
			QFile candidate(canidate_str);

			LOG4CXX_DECODE_QSTRING(msg, ""Checking file "" + canidate_str);
			LogLog::debug(msg);
			if (candidate.exists())
			{
				LOG4CXX_NS::spi::ConfigurationStatus configStatus = tryLoadFile(canidate_str);
				if( configStatus == LOG4CXX_NS::spi::ConfigurationStatus::Configured ){
					return {configStatus, canidate_str};
				}
				LOG4CXX_DECODE_QSTRING(failmsg, ""Unable to load  "" + canidate_str + "": trying next"");
				LogLog::debug(failmsg);
			}
		}
	}

	return {LOG4CXX_NS::spi::ConfigurationStatus::NotConfigured, QString()};
}",103.0,126.0,1.0,1.0,24.0,12,4,17,12,0,0,5,11,0,0,,0,0,4,2,2,"tuple<LOG4CXX_NS.spi.ConfigurationStatus,QString>"
846,2362,messageHandler,1,LOG4CXX_NS.qt.messageHandler,"void LOG4CXX_NS.qt.messageHandler (QtMsgType,QMessageLogContext,QString)",main\cpp-qt\messagehandler.cpp,"void messageHandler(QtMsgType type, const QMessageLogContext& context, const QString& message )
{
	LOG4CXX_NS::LoggerPtr qtLogger = LOG4CXX_NS::Logger::getLogger( context.category );
	LOG4CXX_NS::spi::LocationInfo location( context.file,
										 LOG4CXX_NS::spi::LocationInfo::calcShortFileName(context.file),
										 context.function,
										 context.line );

	switch ( type )
	{
		case QtMsgType::QtDebugMsg:
			qtLogger->debug( message.toStdString(), location );
			break;

		case QtMsgType::QtWarningMsg:
			qtLogger->warn( message.toStdString(), location );
			break;
#if QT_VERSION >= QT_VERSION_CHECK(5, 5, 0)

		case QtMsgType::QtInfoMsg:
			qtLogger->info( message.toStdString(), location );
			break;
#endif

		case QtMsgType::QtCriticalMsg:
			qtLogger->error( message.toStdString(), location );
			break;

		case QtMsgType::QtFatalMsg:
			qtLogger->fatal( message.toStdString(), location );
			std::abort();
	}
}",24.0,56.0,1.0,1.0,33.0,27,3,33,11,0,0,6,2,0,0,,0,0,6,3,3,void
847,2496,Action,1,Action.Action,ANY Action.Action (),main\cpp\action.cpp,"Action::Action( std::unique_ptr<ActionPrivate> priv ) :
	m_priv( std::move(priv) ) {}",34.0,35.0,1.0,29.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
848,2505,~Action,1,Action.~Action,ANY Action.~Action (),main\cpp\action.cpp,"Action::~Action()
{
}",37.0,39.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
849,2509,run,1,Action.run,void Action.run (ANY),main\cpp\action.cpp,"void Action::run(LOG4CXX_NS::helpers::Pool& pool1)
{
	std::unique_lock<std::mutex> lock(m_priv->mutex);

	if (!m_priv->interrupted)
	{
		try
		{
			execute(pool1);
		}
		catch (std::exception& ex)
		{
			reportException(ex);
		}

		m_priv->complete = true;
		m_priv->interrupted = true;
	}
}",44.0,62.0,1.0,1.0,19.0,11,6,8,4,0,0,3,4,0,0,,0,0,2,1,1,void
850,2549,close,1,Action.close,void Action.close (),main\cpp\action.cpp,"void Action::close()
{
	std::unique_lock<std::mutex> lock(m_priv->mutex);
	m_priv->interrupted = true;
}",67.0,71.0,1.0,1.0,5.0,7,5,4,2,0,0,1,1,0,0,,0,0,0,0,0,void
851,2570,isComplete,1,Action.isComplete,bool Action.isComplete (),main\cpp\action.cpp,"bool Action::isComplete() const
{
	return m_priv->complete;
}",77.0,80.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,bool
852,2578,reportException,1,Action.reportException,void Action.reportException (ANY),main\cpp\action.cpp,"void Action::reportException(const std::exception& /* ex */)
{
}",87.0,89.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
853,2599,AndFilterPrivate,1,AndFilterPrivate.AndFilterPrivate,ANY AndFilterPrivate.AndFilterPrivate (),main\cpp\andfilter.cpp,"AndFilterPrivate() : FilterPrivate(),
		headFilter(),
		tailFilter(),
		acceptOnMatch(true) {}",33.0,36.0,2.0,24.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
854,2608,AndFilter,1,AndFilter.AndFilter,ANY AndFilter.AndFilter (),main\cpp\andfilter.cpp,"AndFilter::AndFilter()
	: Filter( std::make_unique<AndFilterPrivate>() )
{
}",45.0,48.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
855,2612,~AndFilter,1,AndFilter.~AndFilter,ANY AndFilter.~AndFilter (),main\cpp\andfilter.cpp,AndFilter::~AndFilter() {},50.0,50.0,1.0,26.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
856,2616,addFilter,1,AndFilter.addFilter,void AndFilter.addFilter (FilterPtr),main\cpp\andfilter.cpp,"void AndFilter::addFilter(const FilterPtr& filter)
{
	if (priv->headFilter == NULL)
	{
		priv->headFilter = filter;
		priv->tailFilter = filter;
	}
	else
	{
		priv->tailFilter->setNext(filter);
	}
}",52.0,63.0,1.0,5.0,12.0,12,5,6,3,0,0,2,2,0,0,,0,0,2,1,1,void
857,2675,setAcceptOnMatch,1,AndFilter.setAcceptOnMatch,void AndFilter.setAcceptOnMatch (bool),main\cpp\andfilter.cpp,"void AndFilter::setAcceptOnMatch(bool newValue)
{
	priv->acceptOnMatch = newValue;
}",66.0,69.0,1.0,1.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
858,2692,decide,1,AndFilter.decide,FilterDecision AndFilter.decide (ANY),main\cpp\andfilter.cpp,"Filter::FilterDecision AndFilter::decide(
	const spi::LoggingEventPtr& event) const
{
	bool accepted = true;
	FilterPtr f(priv->headFilter);

	while (f != NULL)
	{
		accepted = accepted && (Filter::ACCEPT == f->decide(event));
		f = f->getNext();
	}

	if (accepted)
	{
		if (priv->acceptOnMatch)
		{
			return Filter::ACCEPT;
		}

		return Filter::DENY;
	}

	return Filter::NEUTRAL;
}",71.0,94.0,1.0,13.0,24.0,18,7,16,6,0,0,4,5,0,0,,0,0,2,1,1,FilterDecision
859,2788,AppenderAttachableImpl,1,AppenderAttachableImpl.AppenderAttachableImpl,ANY AppenderAttachableImpl.AppenderAttachableImpl (Pool),main\cpp\appenderattachableimpl.cpp,"AppenderAttachableImpl::AppenderAttachableImpl(Pool& pool) :
	m_priv(std::make_unique<AppenderAttachableImpl::priv_data>())
{
}",39.0,42.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
860,2793,~AppenderAttachableImpl,1,AppenderAttachableImpl.~AppenderAttachableImpl,ANY AppenderAttachableImpl.~AppenderAttachableImpl (),main\cpp\appenderattachableimpl.cpp,"AppenderAttachableImpl::~AppenderAttachableImpl()
{

}",44.0,47.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
861,2797,addAppender,1,AppenderAttachableImpl.addAppender,void AppenderAttachableImpl.addAppender (AppenderPtr),main\cpp\appenderattachableimpl.cpp,"void AppenderAttachableImpl::addAppender(const AppenderPtr newAppender)
{
	// Null values for newAppender parameter are strictly forbidden.
	if (newAppender == 0)
	{
		return;
	}

	std::lock_guard<std::mutex> lock( m_priv->m_mutex );
	AppenderList::iterator it = std::find(
			m_priv->appenderList.begin(), m_priv->appenderList.end(), newAppender);

	if (it == m_priv->appenderList.end())
	{
		m_priv->appenderList.push_back(newAppender);
	}
}",49.0,65.0,1.0,1.0,17.0,17,6,13,4,0,0,3,3,0,0,,0,0,2,1,1,void
862,2857,appendLoopOnAppenders,1,AppenderAttachableImpl.appendLoopOnAppenders,"int AppenderAttachableImpl.appendLoopOnAppenders (ANY,Pool)",main\cpp\appenderattachableimpl.cpp,"int AppenderAttachableImpl::appendLoopOnAppenders(
	const spi::LoggingEventPtr& event,
	Pool& p)
{
	int numberAppended = 0;
	// FallbackErrorHandler::error() may modify our list of appenders
	// while we are iterating over them (if it holds the same logger).
	// So, make a local copy of the appenders that we want to iterate over
	// before actually iterating over them.
	AppenderList allAppenders = getAllAppenders();
	for (auto appender : allAppenders)
	{
		appender->doAppend(event, p);
		numberAppended++;
	}

	return numberAppended;
}",67.0,84.0,1.0,1.0,18.0,4,3,8,5,0,0,2,2,0,0,,0,0,4,2,2,int
863,2885,getAllAppenders,1,AppenderAttachableImpl.getAllAppenders,AppenderList AppenderAttachableImpl.getAllAppenders (),main\cpp\appenderattachableimpl.cpp,"AppenderList AppenderAttachableImpl::getAllAppenders() const
{
	std::lock_guard<std::mutex> lock( m_priv->m_mutex );
	return m_priv->appenderList;
}",86.0,90.0,1.0,1.0,5.0,6,4,4,2,0,0,1,1,0,0,,0,0,0,0,0,AppenderList
864,2905,getAppender,1,AppenderAttachableImpl.getAppender,AppenderPtr AppenderAttachableImpl.getAppender (LogString),main\cpp\appenderattachableimpl.cpp,"AppenderPtr AppenderAttachableImpl::getAppender(const LogString& name) const
{
	if (name.empty())
	{
		return 0;
	}

	std::lock_guard<std::mutex> lock( m_priv->m_mutex );
	AppenderList::const_iterator it, itEnd = m_priv->appenderList.end();
	AppenderPtr appender;

	for (it = m_priv->appenderList.begin(); it != itEnd; it++)
	{
		appender = *it;

		if (name == appender->getName())
		{
			return appender;
		}
	}

	return 0;
}",92.0,114.0,1.0,1.0,23.0,17,8,15,6,0,0,4,5,0,0,,0,0,2,1,1,AppenderPtr
865,2973,isAttached,1,AppenderAttachableImpl.isAttached,bool AppenderAttachableImpl.isAttached (AppenderPtr),main\cpp\appenderattachableimpl.cpp,"bool AppenderAttachableImpl::isAttached(const AppenderPtr appender) const
{
	if (appender == 0)
	{
		return false;
	}

	std::lock_guard<std::mutex> lock( m_priv->m_mutex );
	AppenderList::const_iterator it = std::find(
			m_priv->appenderList.begin(), m_priv->appenderList.end(), appender);

	return it != m_priv->appenderList.end();
}",116.0,128.0,1.0,1.0,13.0,15,7,11,4,0,0,2,2,0,0,,0,0,2,1,1,bool
866,3026,removeAllAppenders,1,AppenderAttachableImpl.removeAllAppenders,void AppenderAttachableImpl.removeAllAppenders (),main\cpp\appenderattachableimpl.cpp,"void AppenderAttachableImpl::removeAllAppenders()
{
	std::lock_guard<std::mutex> lock( m_priv->m_mutex );
	AppenderList::iterator it, itEnd = m_priv->appenderList.end();
	AppenderPtr a;

	for (it = m_priv->appenderList.begin(); it != itEnd; it++)
	{
		a = *it;
		a->close();
	}

	m_priv->appenderList.clear();
}",130.0,143.0,1.0,1.0,14.0,17,7,13,5,0,0,2,2,0,0,,0,0,0,0,0,void
867,3083,removeAppender,1,AppenderAttachableImpl.removeAppender,void AppenderAttachableImpl.removeAppender (AppenderPtr),main\cpp\appenderattachableimpl.cpp,"void AppenderAttachableImpl::removeAppender(const LogString& name)
{
	if (name.empty())
	{
		return;
	}

	std::lock_guard<std::mutex> lock( m_priv->m_mutex );
	AppenderList::iterator it, itEnd = m_priv->appenderList.end();
	AppenderPtr appender;

	for (it = m_priv->appenderList.begin(); it != itEnd; it++)
	{
		appender = *it;

		if (name == appender->getName())
		{
			m_priv->appenderList.erase(it);
			return;
		}
	}
}",162.0,183.0,1.0,1.0,22.0,17,7,13,4,0,0,3,3,0,0,,0,0,2,1,1,void
868,3237,AppenderSkeleton,1,AppenderSkeleton.AppenderSkeleton,ANY AppenderSkeleton.AppenderSkeleton (ANY),main\cpp\appenderskeleton.cpp,"AppenderSkeleton::AppenderSkeleton(const LayoutPtr& layout1)
	:   m_priv(std::make_unique<AppenderSkeletonPrivate>())
{

}",45.0,49.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
869,3251,~AppenderSkeleton,1,AppenderSkeleton.~AppenderSkeleton,ANY AppenderSkeleton.~AppenderSkeleton (),main\cpp\appenderskeleton.cpp,AppenderSkeleton::~AppenderSkeleton() {},51.0,51.0,1.0,40.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
870,3255,finalize,1,AppenderSkeleton.finalize,void AppenderSkeleton.finalize (),main\cpp\appenderskeleton.cpp,"void AppenderSkeleton::finalize()
{
	// An appender might be closed then garbage collected. There is no
	// point in closing twice.
	if (m_priv->closed)
	{
		return;
	}

	close();
}",53.0,63.0,1.0,1.0,11.0,1,1,1,1,0,0,2,2,0,0,,0,0,0,0,0,void
871,3266,addFilter,1,AppenderSkeleton.addFilter,void AppenderSkeleton.addFilter (ANY),main\cpp\appenderskeleton.cpp,"void AppenderSkeleton::addFilter(const spi::FilterPtr newFilter)
{
	std::lock_guard<std::recursive_mutex> lock(m_priv->mutex);

	if (m_priv->headFilter == nullptr)
	{
		m_priv->headFilter = m_priv->tailFilter = newFilter;
	}
	else
	{
		m_priv->tailFilter->setNext(newFilter);
		m_priv->tailFilter = newFilter;
	}
}",65.0,78.0,1.0,1.0,14.0,11,6,7,3,0,0,2,2,0,0,,0,0,2,1,1,void
872,3313,clearFilters,1,AppenderSkeleton.clearFilters,void AppenderSkeleton.clearFilters (),main\cpp\appenderskeleton.cpp,"void AppenderSkeleton::clearFilters()
{
	std::lock_guard<std::recursive_mutex> lock(m_priv->mutex);
	m_priv->headFilter = m_priv->tailFilter = nullptr;
}",80.0,84.0,1.0,1.0,5.0,9,5,5,2,0,0,1,1,0,0,,0,0,0,0,0,void
873,3338,isAsSevereAsThreshold,1,AppenderSkeleton.isAsSevereAsThreshold,bool AppenderSkeleton.isAsSevereAsThreshold (LevelPtr),main\cpp\appenderskeleton.cpp,"bool AppenderSkeleton::isAsSevereAsThreshold(const LevelPtr& level) const
{
	return ((level == 0) || level->isGreaterOrEqual(m_priv->threshold));
}",86.0,89.0,1.0,1.0,4.0,4,3,3,2,0,0,1,1,0,0,,0,0,2,1,1,bool
874,3355,doAppend,1,AppenderSkeleton.doAppend,"void AppenderSkeleton.doAppend (ANY,Pool)",main\cpp\appenderskeleton.cpp,"void AppenderSkeleton::doAppend(const spi::LoggingEventPtr& event, Pool& pool1)
{
	std::lock_guard<std::recursive_mutex> lock(m_priv->mutex);

	doAppendImpl(event, pool1);
}",91.0,96.0,1.0,1.0,6.0,5,4,5,4,0,0,1,1,0,0,,0,0,4,2,2,void
875,3376,doAppendImpl,1,AppenderSkeleton.doAppendImpl,"void AppenderSkeleton.doAppendImpl (ANY,Pool)",main\cpp\appenderskeleton.cpp,"void AppenderSkeleton::doAppendImpl(const spi::LoggingEventPtr& event, Pool& pool1)
{
	if (m_priv->closed)
	{
		LogLog::error(((LogString) LOG4CXX_STR(""Attempted to append to closed appender named [""))
			+ m_priv->name + LOG4CXX_STR(""].""));
		return;
	}

	if (!isAsSevereAsThreshold(event->getLevel()))
	{
		return;
	}

	FilterPtr f = m_priv->headFilter;


	while (f != 0)
	{
		switch (f->decide(event))
		{
			case Filter::DENY:
				return;

			case Filter::ACCEPT:
				f = nullptr;
				break;

			case Filter::NEUTRAL:
				f = f->getNext();
		}
	}

	append(event, pool1);
}",98.0,132.0,1.0,1.0,35.0,18,7,17,6,0,1,6,6,0,1,,0,0,4,2,2,void
876,3456,setErrorHandler,1,AppenderSkeleton.setErrorHandler,void AppenderSkeleton.setErrorHandler (ANY),main\cpp\appenderskeleton.cpp,"void AppenderSkeleton::setErrorHandler(const spi::ErrorHandlerPtr errorHandler1)
{
	std::lock_guard<std::recursive_mutex> lock(m_priv->mutex);

	if (errorHandler1 == nullptr)
	{
		// We do not throw exception here since the cause is probably a
		// bad config file.
		LogLog::warn(LOG4CXX_STR(""You have tried to set a null error-handler.""));
	}
	else
	{
		m_priv->errorHandler = errorHandler1;
	}
}",134.0,148.0,1.0,1.0,15.0,7,5,5,4,0,1,2,2,0,1,,0,0,2,1,1,void
877,3491,setThreshold,1,AppenderSkeleton.setThreshold,void AppenderSkeleton.setThreshold (LevelPtr),main\cpp\appenderskeleton.cpp,"void AppenderSkeleton::setThreshold(const LevelPtr& threshold1)
{
	std::lock_guard<std::recursive_mutex> lock(m_priv->mutex);
	m_priv->threshold = threshold1;
}",150.0,154.0,1.0,1.0,5.0,7,5,5,3,0,0,1,1,0,0,,0,0,2,1,1,void
878,3513,setOption,1,AppenderSkeleton.setOption,"void AppenderSkeleton.setOption (LogString,LogString)",main\cpp\appenderskeleton.cpp,"void AppenderSkeleton::setOption(const LogString& option,
	const LogString& value)
{
	if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""THRESHOLD""), LOG4CXX_STR(""threshold"")))
	{
		setThreshold(Level::toLevelLS(value));
	}
}",156.0,164.0,1.0,1.0,9.0,2,1,4,4,0,2,2,2,1,2,,0,1,4,2,2,void
879,3536,getErrorHandler,1,AppenderSkeleton.getErrorHandler,ErrorHandlerPtr AppenderSkeleton.getErrorHandler (),main\cpp\appenderskeleton.cpp,"const spi::ErrorHandlerPtr AppenderSkeleton::getErrorHandler() const
{
	return m_priv->errorHandler;
}",166.0,169.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,ErrorHandlerPtr
880,3544,getFilter,1,AppenderSkeleton.getFilter,FilterPtr AppenderSkeleton.getFilter (),main\cpp\appenderskeleton.cpp,"spi::FilterPtr AppenderSkeleton::getFilter() const
{
	return m_priv->headFilter;
}",171.0,174.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,FilterPtr
881,3552,getFirstFilter,1,AppenderSkeleton.getFirstFilter,FilterPtr AppenderSkeleton.getFirstFilter (),main\cpp\appenderskeleton.cpp,"const spi::FilterPtr AppenderSkeleton::getFirstFilter() const
{
	return m_priv->headFilter;
}",176.0,179.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,FilterPtr
882,3560,getLayout,1,AppenderSkeleton.getLayout,LayoutPtr AppenderSkeleton.getLayout (),main\cpp\appenderskeleton.cpp,"LayoutPtr AppenderSkeleton::getLayout() const
{
	return m_priv->layout;
}",181.0,184.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,LayoutPtr
883,3568,getName,1,AppenderSkeleton.getName,LogString AppenderSkeleton.getName (),main\cpp\appenderskeleton.cpp,"LogString AppenderSkeleton::getName() const
{
	return m_priv->name;
}",186.0,189.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,LogString
884,3576,getThreshold,1,AppenderSkeleton.getThreshold,LevelPtr AppenderSkeleton.getThreshold (),main\cpp\appenderskeleton.cpp,"const LevelPtr AppenderSkeleton::getThreshold() const
{
	return m_priv->threshold;
}",191.0,194.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,LevelPtr
885,3584,setLayout,1,AppenderSkeleton.setLayout,void AppenderSkeleton.setLayout (LayoutPtr),main\cpp\appenderskeleton.cpp,"void AppenderSkeleton::setLayout(const LayoutPtr layout1)
{
	m_priv->layout = layout1;
}",196.0,199.0,1.0,1.0,4.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
886,3594,setName,1,AppenderSkeleton.setName,void AppenderSkeleton.setName (LogString),main\cpp\appenderskeleton.cpp,"void AppenderSkeleton::setName(const LogString& name1)
{
	m_priv->name.assign(name1);
}",201.0,204.0,1.0,1.0,4.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
887,3622,APRDatagramSocketPriv,1,LOG4CXX_NS.helpers.APRDatagramSocketPriv.APRDatagramSocketPriv,ANY LOG4CXX_NS.helpers.APRDatagramSocketPriv.APRDatagramSocketPriv (),main\cpp\aprdatagramsocket.cpp,"APRDatagramSocketPriv(int port, InetAddressPtr localAddress) :
		DatagramSocketPriv(port, localAddress),
		socket(nullptr)
	{}",41.0,44.0,2.0,3.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ANY
888,3639,APRDatagramSocket,1,LOG4CXX_NS.helpers.APRDatagramSocket.APRDatagramSocket,ANY LOG4CXX_NS.helpers.APRDatagramSocket.APRDatagramSocket (),main\cpp\aprdatagramsocket.cpp,"APRDatagramSocket::APRDatagramSocket(int port, InetAddressPtr laddr) :
	DatagramSocket(std::make_unique<APRDatagramSocketPriv>(port, laddr)){
	init();
}",63.0,66.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ANY
889,3657,init,1,LOG4CXX_NS.helpers.APRDatagramSocket.init,void LOG4CXX_NS.helpers.APRDatagramSocket.init (),main\cpp\aprdatagramsocket.cpp,"void APRDatagramSocket::init()
{
	apr_socket_t* newSocket;
	apr_status_t status =
		apr_socket_create(&newSocket, APR_INET, SOCK_DGRAM,
			APR_PROTO_UDP, _priv->socketPool.getAPRPool());
	_priv->socket = newSocket;

	if (status != APR_SUCCESS)
	{
		throw SocketException(status);
	}
}",68.0,80.0,1.0,18.0,13.0,12,7,11,7,0,0,2,2,0,0,,0,0,0,0,0,void
890,3704,receive,1,LOG4CXX_NS.helpers.APRDatagramSocket.receive,void LOG4CXX_NS.helpers.APRDatagramSocket.receive (DatagramPacketPtr),main\cpp\aprdatagramsocket.cpp,"void APRDatagramSocket::receive(DatagramPacketPtr& p)
{
	Pool addrPool;

	// Create the address from which to receive the datagram packet
	LOG4CXX_ENCODE_CHAR(hostAddr, p->getAddress()->getHostAddress());
	apr_sockaddr_t* addr;
	apr_status_t status =
		apr_sockaddr_info_get(&addr, hostAddr.c_str(), APR_INET,
			p->getPort(), 0, addrPool.getAPRPool());

	if (status != APR_SUCCESS)
	{
		throw SocketException(status);
	}

	// receive the datagram packet
	apr_size_t len = p->getLength();
	status = apr_socket_recvfrom(addr, _priv->socket, 0,
			(char*)p->getData(), &len);

	if (status != APR_SUCCESS)
	{
		throw IOException(status);
	}
}",82.0,107.0,1.0,36.0,26.0,20,7,21,9,0,0,3,3,0,0,,0,0,2,1,1,void
891,3786,send,1,LOG4CXX_NS.helpers.APRDatagramSocket.send,void LOG4CXX_NS.helpers.APRDatagramSocket.send (DatagramPacketPtr),main\cpp\aprdatagramsocket.cpp,"void APRDatagramSocket::send(DatagramPacketPtr& p)
{
	Pool addrPool;

	// create the adress to which to send the datagram packet
	LOG4CXX_ENCODE_CHAR(hostAddr, p->getAddress()->getHostAddress());
	apr_sockaddr_t* addr;
	apr_status_t status =
		apr_sockaddr_info_get(&addr, hostAddr.c_str(), APR_INET, p->getPort(),
			0, addrPool.getAPRPool());

	if (status != APR_SUCCESS)
	{
		throw SocketException(status);
	}

	// send the datagram packet
	apr_size_t len = p->getLength();
	status = apr_socket_sendto(_priv->socket, addr, 0,
			(char*)p->getData(), &len);

	if (status != APR_SUCCESS)
	{
		throw IOException(status);
	}
}",109.0,134.0,1.0,28.0,26.0,20,7,21,9,0,0,3,3,0,0,,0,0,2,1,1,void
892,3868,close,1,LOG4CXX_NS.helpers.APRDatagramSocket.close,void LOG4CXX_NS.helpers.APRDatagramSocket.close (),main\cpp\aprdatagramsocket.cpp,"void APRDatagramSocket::close(){
	if (_priv->socket != 0)
	{
		apr_status_t status = apr_socket_close(_priv->socket);

		if (status != APR_SUCCESS)
		{
			throw SocketException(status);
		}

		_priv->socket = 0;
		_priv->localPort = 0;
	}
}",136.0,149.0,1.0,5.0,14.0,18,6,8,3,0,0,3,4,0,0,,0,0,0,0,0,void
893,3932,bind,1,LOG4CXX_NS.helpers.APRDatagramSocket.bind,"void LOG4CXX_NS.helpers.APRDatagramSocket.bind (int,InetAddressPtr)",main\cpp\aprdatagramsocket.cpp,"void APRDatagramSocket::bind(int localPort1, InetAddressPtr localAddress1)
{
	Pool addrPool;

	// Create server socket address (including port number)
	LOG4CXX_ENCODE_CHAR(hostAddr, localAddress1->getHostAddress());
	apr_sockaddr_t* server_addr;
	apr_status_t status =
		apr_sockaddr_info_get(&server_addr, hostAddr.c_str(), APR_INET,
			localPort1, 0, addrPool.getAPRPool());

	if (status != APR_SUCCESS)
	{
		throw BindException(status);
	}

	// bind the socket to the address
	status = apr_socket_bind(_priv->socket, server_addr);

	if (status != APR_SUCCESS)
	{
		throw BindException(status);
	}

	m_priv->localPort = localPort1;
	m_priv->localAddress = localAddress1;
}",151.0,177.0,1.0,26.0,27.0,17,7,21,9,0,0,3,3,0,0,,0,0,4,2,2,void
894,4003,connect,1,LOG4CXX_NS.helpers.APRDatagramSocket.connect,"void LOG4CXX_NS.helpers.APRDatagramSocket.connect (InetAddressPtr,int)",main\cpp\aprdatagramsocket.cpp,"void APRDatagramSocket::connect(InetAddressPtr address1, int port1)
{
	m_priv->address = address1;
	m_priv->port = port1;

	Pool addrPool;

	// create socket address
	LOG4CXX_ENCODE_CHAR(hostAddr, address1->getHostAddress());
	apr_sockaddr_t* client_addr;
	apr_status_t status =
		apr_sockaddr_info_get(&client_addr, hostAddr.c_str(), APR_INET,
			m_priv->port, 0, addrPool.getAPRPool());

	if (status != APR_SUCCESS)
	{
		throw ConnectException(status);
	}

	// connect the socket
	status = apr_socket_connect(_priv->socket, client_addr);

	if (status != APR_SUCCESS)
	{
		throw ConnectException(status);
	}
}",180.0,206.0,1.0,29.0,27.0,18,7,21,9,0,0,3,3,0,0,,0,0,4,2,2,void
895,4076,isClosed,1,LOG4CXX_NS.helpers.APRDatagramSocket.isClosed,bool LOG4CXX_NS.helpers.APRDatagramSocket.isClosed (),main\cpp\aprdatagramsocket.cpp,"bool APRDatagramSocket::isClosed() const
{
	return _priv->socket != nullptr;
}",209.0,212.0,1.0,8.0,4.0,4,4,1,1,0,0,1,1,0,0,,0,0,0,0,0,bool
896,4119,APRInitializerPrivate,1,APRInitializerPrivate.APRInitializerPrivate,ANY APRInitializerPrivate.APRInitializerPrivate (),main\cpp\aprinitializer.cpp,"APRInitializerPrivate() :
		p(0),
		startTime(0),
		tlsKey(0){

	}",35.0,40.0,2.0,2.0,6.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
897,4130,tlsDestructImpl,1,anonymous_namespace_1.tlsDestructImpl,void anonymous_namespace_1.tlsDestructImpl (void*),main\cpp\aprinitializer.cpp,"void tlsDestructImpl(void* ptr)
{
	delete ((ThreadSpecificData*) ptr);
}",52.0,55.0,1.0,1.0,4.0,2,2,1,1,0,0,1,1,0,0,,0,0,2,1,1,void
898,4139,tlsDestruct,1,tlsDestruct,void tlsDestruct (void*),main\cpp\aprinitializer.cpp,"void tlsDestruct(void* ptr)
{
	return tlsDestructImpl(ptr);
}",59.0,62.0,12.0,1.0,4.0,0,0,1,1,0,0,1,1,0,0,,0,0,2,1,1,void
899,4149,apr_environment,1,anonymous_namespace_5.apr_environment.apr_environment,ANY anonymous_namespace_5.apr_environment.apr_environment (),main\cpp\aprinitializer.cpp,"apr_environment()
    {
        apr_initialize();
    }",70.0,73.0,5.0,5.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
900,4154,~apr_environment,1,anonymous_namespace_6.apr_environment.~apr_environment,ANY anonymous_namespace_6.apr_environment.~apr_environment (),main\cpp\aprinitializer.cpp,"~apr_environment()
    {
        apr_terminate();
    }",74.0,77.0,5.0,5.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
901,4159,APRInitializer,1,APRInitializer.APRInitializer,ANY APRInitializer.APRInitializer (),main\cpp\aprinitializer.cpp,"APRInitializer::APRInitializer() :
	m_priv(std::make_unique<APRInitializerPrivate>())
{
	apr_pool_create(&m_priv->p, NULL);
	m_priv->startTime = Date::currentTime();
#if APR_HAS_THREADS
	apr_status_t stat = apr_threadkey_private_create(&m_priv->tlsKey, tlsDestructImpl, m_priv->p);
	assert(stat == APR_SUCCESS);
#endif
}",83.0,92.0,1.0,1.0,10.0,5,4,4,3,0,1,1,1,0,0,,0,1,0,0,0,ANY
902,4177,~APRInitializer,1,APRInitializer.~APRInitializer,ANY APRInitializer.~APRInitializer (),main\cpp\aprinitializer.cpp,"APRInitializer::~APRInitializer()
{
	stopWatchDogs();
	isDestructed = true;
#if APR_HAS_THREADS
	std::unique_lock<std::mutex> lock(m_priv->mutex);
	apr_threadkey_private_delete(m_priv->tlsKey);
#endif
}",94.0,102.0,1.0,1.0,9.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,ANY
903,4185,stopWatchDogs,1,APRInitializer.stopWatchDogs,void APRInitializer.stopWatchDogs (),main\cpp\aprinitializer.cpp,"void APRInitializer::stopWatchDogs()
{
	std::unique_lock<std::mutex> lock(m_priv->mutex);

	while (!m_priv->watchdogs.empty())
	{
		m_priv->watchdogs.back()->stop();
		delete m_priv->watchdogs.back();
		m_priv->watchdogs.pop_back();
	}
}",104.0,114.0,1.0,1.0,11.0,16,6,7,2,0,0,2,2,0,0,,0,0,0,0,0,void
904,4232,unregisterAll,1,APRInitializer.unregisterAll,void APRInitializer.unregisterAll (),main\cpp\aprinitializer.cpp,"void APRInitializer::unregisterAll()
{
	getInstance().stopWatchDogs();
}",116.0,119.0,1.0,1.0,4.0,1,1,0,0,1,0,1,1,0,0,,0,0,0,0,0,void
905,4240,getInstance,1,APRInitializer.getInstance,APRInitializer APRInitializer.getInstance (),main\cpp\aprinitializer.cpp,"APRInitializer& APRInitializer::getInstance()
{
	static WideLife<apr_environment> env;
	static WideLife<APRInitializer> init;
	return init;
}",121.0,126.0,1.0,1.0,6.0,0,0,1,1,0,0,1,1,0,0,,0,0,0,0,0,APRInitializer
906,4248,initialize,1,APRInitializer.initialize,log4cxx_time_t APRInitializer.initialize (),main\cpp\aprinitializer.cpp,"log4cxx_time_t APRInitializer::initialize()
{
	return getInstance().m_priv->startTime;
}",129.0,132.0,1.0,1.0,4.0,2,2,0,0,1,0,1,1,0,0,,0,0,0,0,0,log4cxx_time_t
907,4258,getRootPool,1,APRInitializer.getRootPool,apr_pool_t APRInitializer.getRootPool (),main\cpp\aprinitializer.cpp,"apr_pool_t* APRInitializer::getRootPool()
{
	return getInstance().m_priv->p;
}",134.0,137.0,1.0,1.0,4.0,2,2,0,0,1,0,1,1,0,0,,0,0,0,0,0,apr_pool_t
908,4268,getTlsKey,1,APRInitializer.getTlsKey,apr_threadkey_t APRInitializer.getTlsKey (),main\cpp\aprinitializer.cpp,"apr_threadkey_t* APRInitializer::getTlsKey()
{
	return getInstance().m_priv->tlsKey;
}",139.0,142.0,1.0,1.0,4.0,2,2,0,0,0,0,1,1,0,0,,0,0,0,0,0,apr_threadkey_t
909,4278,registerCleanup,1,APRInitializer.registerCleanup,void APRInitializer.registerCleanup (FileWatchdog*),main\cpp\aprinitializer.cpp,"void APRInitializer::registerCleanup(FileWatchdog* watchdog)
{
	APRInitializer& instance(getInstance());
	std::unique_lock<std::mutex> lock(instance.m_priv->mutex);
	instance.m_priv->watchdogs.push_back(watchdog);
}",144.0,149.0,1.0,1.0,6.0,9,4,5,3,1,0,1,1,0,0,,0,0,2,1,1,void
910,4309,unregisterCleanup,1,APRInitializer.unregisterCleanup,void APRInitializer.unregisterCleanup (FileWatchdog*),main\cpp\aprinitializer.cpp,"void APRInitializer::unregisterCleanup(FileWatchdog* watchdog)
{
	APRInitializer& instance(getInstance());
	std::unique_lock<std::mutex> lock(instance.m_priv->mutex);

	for (std::list<FileWatchdog*>::iterator iter = instance.m_priv->watchdogs.begin();
		iter != instance.m_priv->watchdogs.end();
		iter++)
	{
		if (*iter == watchdog)
		{
			instance.m_priv->watchdogs.erase(iter);
			return;
		}
	}
}",151.0,166.0,1.0,1.0,16.0,19,8,11,4,0,0,3,4,0,0,,0,0,2,1,1,void
911,4373,addObject,1,APRInitializer.addObject,"void APRInitializer.addObject (size_t,ObjectPtr)",main\cpp\aprinitializer.cpp,"void APRInitializer::addObject(size_t key, const ObjectPtr& pObject)
{
	std::unique_lock<std::mutex> lock(m_priv->mutex);
	m_priv->objects[key] = pObject;
}",168.0,172.0,1.0,1.0,5.0,8,6,6,4,0,0,1,1,0,0,,0,0,4,2,2,void
912,4398,findOrAddObject,1,APRInitializer.findOrAddObject,"ObjectPtr APRInitializer.findOrAddObject (size_t,ANY)",main\cpp\aprinitializer.cpp,"const ObjectPtr& APRInitializer::findOrAddObject(size_t key, std::function<ObjectPtr()> creator)
{
	std::unique_lock<std::mutex> lock(m_priv->mutex);
	auto pItem = m_priv->objects.find(key);
	if (m_priv->objects.end() == pItem)
		pItem = m_priv->objects.emplace(key, creator()).first;
	return pItem->second;
}",174.0,181.0,1.0,1.0,8.0,16,6,12,4,0,0,2,2,0,0,,0,0,4,2,2,ObjectPtr
913,4475,APRServerSocket,1,LOG4CXX_NS.helpers.APRServerSocket.APRServerSocket,ANY LOG4CXX_NS.helpers.APRServerSocket.APRServerSocket (int),main\cpp\aprserversocket.cpp,"APRServerSocket::APRServerSocket(int port) :
	ServerSocket(std::make_unique<APRServerSocketPriv>()){
	apr_status_t status =
		apr_socket_create(&_priv->socket, APR_INET, SOCK_STREAM,
			APR_PROTO_TCP, _priv->pool.getAPRPool());

	if (status != APR_SUCCESS)
	{
		throw SocketException(status);
	}

	status = apr_socket_opt_set(_priv->socket, APR_SO_NONBLOCK, 1);

	if (status != APR_SUCCESS)
	{
		throw SocketException(status);
	}

	// Create server socket address (including port number)
	apr_sockaddr_t* server_addr;
	status =
		apr_sockaddr_info_get(&server_addr, NULL, APR_INET,
			port, 0, _priv->pool.getAPRPool());

	if (status != APR_SUCCESS)
	{
		throw ConnectException(status);
	}

	// bind the socket to the address
	status = apr_socket_bind(_priv->socket, server_addr);

	if (status != APR_SUCCESS)
	{
		throw BindException(status);
	}


	status = apr_socket_listen(_priv->socket, 50);

	if (status != APR_SUCCESS)
	{
		throw SocketException(status);
	}
}",38.0,82.0,1.0,21.0,45.0,37,7,35,10,0,0,6,6,0,0,,0,0,2,1,1,ANY
914,4617,close,1,LOG4CXX_NS.helpers.APRServerSocket.close,void LOG4CXX_NS.helpers.APRServerSocket.close (),main\cpp\aprserversocket.cpp,"void APRServerSocket::close(){
	std::unique_lock<std::mutex> lock(_priv->mutex);

	if (_priv->socket != 0)
	{
		apr_status_t status = apr_socket_close(_priv->socket);

		if (status != APR_SUCCESS)
		{
			throw SocketException(status);
		}

		_priv->socket = 0;
	}
}",84.0,98.0,1.0,35.0,15.0,21,8,10,4,0,0,3,4,0,0,,0,0,0,0,0,void
915,4688,accept,1,LOG4CXX_NS.helpers.APRServerSocket.accept,SocketPtr LOG4CXX_NS.helpers.APRServerSocket.accept (),main\cpp\aprserversocket.cpp,"SocketPtr APRServerSocket::accept()
{
	std::unique_lock<std::mutex> lock(_priv->mutex);

	if (_priv->socket == 0)
	{
		throw IOException();
	}

	apr_pollfd_t poll;
	poll.p = _priv->pool.getAPRPool();
	poll.desc_type = APR_POLL_SOCKET;
	poll.reqevents = APR_POLLIN;
	poll.rtnevents = 0;
	poll.desc.s = _priv->socket;
	poll.client_data = NULL;

	apr_int32_t signaled;
	apr_interval_time_t to = _priv->timeout * 1000;
	apr_status_t status = apr_poll(&poll, 1, &signaled, to);

	if (APR_STATUS_IS_TIMEUP(status))
	{
		throw SocketTimeoutException();
	}
	else if (status != APR_SUCCESS)
	{
		throw SocketException(status);
	}

	apr_pool_t* newPool;
	status = apr_pool_create(&newPool, 0);

	if (status != APR_SUCCESS)
	{
		throw PoolException(status);
	}

	apr_socket_t* newSocket;
	status = apr_socket_accept(&newSocket, _priv->socket, newPool);

	if (status != APR_SUCCESS)
	{
		apr_pool_destroy(newPool);
		throw SocketException(status);
	}

	status = apr_socket_opt_set(newSocket, APR_SO_NONBLOCK, ...",104.0,160.0,1.0,35.0,57.0,60,13,46,14,0,0,6,6,0,0,,0,0,0,0,0,SocketPtr
916,4912,APRSocketPriv,1,LOG4CXX_NS.helpers.APRSocketPriv.APRSocketPriv,"ANY LOG4CXX_NS.helpers.APRSocketPriv.APRSocketPriv (InetAddressPtr,int)",main\cpp\aprsocket.cpp,"APRSocketPriv(apr_socket_t* sock, apr_pool_t* p) :
		pool(p, true),
		socket(sock)
	{}",37.0,40.0,2.0,3.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ANY
917,4926,APRSocket,1,LOG4CXX_NS.helpers.APRSocket.APRSocket,"ANY LOG4CXX_NS.helpers.APRSocket.APRSocket (InetAddressPtr,int)",main\cpp\aprsocket.cpp,"APRSocket::APRSocket(apr_socket_t* s, apr_pool_t* pool) :
	Socket(std::make_unique<APRSocketPriv>(s, pool)){
	apr_sockaddr_t* sa;
	apr_status_t status = apr_socket_addr_get(&sa, APR_REMOTE, s);

	if (status == APR_SUCCESS)
	{
		_priv->port = sa->port;
		LogString remotename;
		LogString remoteip;

		if (sa->hostname != NULL)
		{
			Transcoder::decode(sa->hostname, remotename);
		}

		char* buf = 0;
		status = apr_sockaddr_ip_get(&buf, sa);

		if (status == APR_SUCCESS)
		{
			Transcoder::decode(buf, remoteip);
		}

		_priv->address = std::make_shared<InetAddress>(remotename, remoteip);
	}
}",81.0,107.0,1.0,2.0,27.0,27,7,26,10,0,0,4,4,0,0,,0,0,4,2,2,ANY
918,5126,write,1,LOG4CXX_NS.helpers.APRSocket.write,size_t LOG4CXX_NS.helpers.APRSocket.write (ByteBuffer),main\cpp\aprsocket.cpp,"size_t APRSocket::write(ByteBuffer& buf)
{
	if (_priv->socket == 0)
	{
		throw ClosedChannelException();
	}

	size_t totalWritten = 0;

	while (buf.remaining() > 0)
	{
		apr_size_t written = buf.remaining();

		// while writing to the socket, we need to ignore the SIGPIPE
		// signal. Otherwise, when the client has closed the connection,
		// the send() function would not return an error but call the
		// SIGPIPE handler.
#if APR_HAVE_SIGACTION
		apr_sigfunc_t* old = apr_signal(SIGPIPE, SIG_IGN);
		apr_status_t status = apr_socket_send(_priv->socket, buf.current(), &written);
		apr_signal(SIGPIPE, old);
#else
		apr_status_t status = apr_socket_send(_priv->socket, buf.current(), &written);
#endif

		buf.position(buf.position() + written);
		totalWritten += written;

		if (status != APR_SUCCESS)
		{
			throw SocketException(status);
		}
	}

	return totalWritten;
}",109.0,144.0,1.0,5.0,36.0,22,11,18,6,0,0,4,5,0,0,,0,0,2,1,1,size_t
919,5209,close,1,LOG4CXX_NS.helpers.APRSocket.close,void LOG4CXX_NS.helpers.APRSocket.close (),main\cpp\aprsocket.cpp,"void APRSocket::close()
{
	if (_priv->socket != 0)
	{
		apr_status_t status = apr_socket_close(_priv->socket);

		if (status != APR_SUCCESS)
		{
			throw SocketException(status);
		}

		_priv->socket = 0;
	}
}",147.0,160.0,1.0,5.0,14.0,14,6,7,3,0,0,3,4,0,0,,0,0,0,0,0,void
920,5262,<lambda>0,1,AsyncAppender.append.<lambda>0,ANY AsyncAppender.append.<lambda>0 (),main\cpp\asyncappender.cpp,"[this]()
			{
				return priv->buffer.empty();
			}",271.0,274.0,35.0,11.0,4.0,4,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,ANY
921,5282,<lambda>1,1,AsyncAppender.dispatch.<lambda>1,bool AsyncAppender.dispatch.<lambda>1 (),main\cpp\asyncappender.cpp,"[this]() -> bool
				{ return 0 < priv->buffer.size() || priv->closed; }",471.0,472.0,36.0,17.0,2.0,9,5,2,1,0,0,1,1,0,0,,0,0,0,0,0,bool
922,5349,DiscardSummary,1,DiscardSummary.DiscardSummary,ANY DiscardSummary.DiscardSummary (ANY),main\cpp\asyncappender.cpp,"DiscardSummary::DiscardSummary(const DiscardSummary& src) :
	maxEvent(src.maxEvent), count(src.count)
{
}",408.0,411.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
923,5359,operator =,1,DiscardSummary.operator =,DiscardSummary DiscardSummary.operator = (DiscardSummary),main\cpp\asyncappender.cpp,"DiscardSummary& DiscardSummary::operator=(const DiscardSummary& src)
{
	maxEvent = src.maxEvent;
	count = src.count;
	return *this;
}",413.0,418.0,1.0,1.0,6.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,DiscardSummary
924,5364,add,1,DiscardSummary.add,void DiscardSummary.add (ANY),main\cpp\asyncappender.cpp,"void DiscardSummary::add(const LoggingEventPtr& event)
{
	if (event->getLevel()->toInt() > maxEvent->getLevel()->toInt())
	{
		maxEvent = event;
	}

	count++;
}",420.0,428.0,1.0,1.0,9.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
925,5369,createEvent,1,DiscardSummary.createEvent,ANY DiscardSummary.createEvent (ANY),main\cpp\asyncappender.cpp,"::LOG4CXX_NS::spi::LoggingEventPtr
DiscardSummary::createEvent(::LOG4CXX_NS::helpers::Pool& p,
	size_t discardedCount)
{
	LogString msg(LOG4CXX_STR(""Discarded ""));
	StringHelper::toString(discardedCount, p, msg);
	msg.append(LOG4CXX_STR("" messages due to a full event buffer""));

	return std::make_shared<LoggingEvent>(
				LOG4CXX_STR(""""),
				LOG4CXX_NS::Level::getError(),
				msg,
				LocationInfo::getLocationUnavailable() );
}",443.0,456.0,1.0,1.0,14.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,LoggingEventPtr
926,5382,AsyncAppenderPriv,1,AsyncAppenderPriv.AsyncAppenderPriv,ANY AsyncAppenderPriv.AsyncAppenderPriv (),main\cpp\asyncappender.cpp,"AsyncAppenderPriv() :
		AppenderSkeletonPrivate(),
		buffer(),
		bufferSize(DEFAULT_BUFFER_SIZE),
		appenders(std::make_shared<AppenderAttachableImpl>(pool)),
		dispatcher(),
		locationInfo(false),
		blocking(true)
#if LOG4CXX_EVENTS_AT_EXIT
		, atExitRegistryRaii([this]{atExitActivated();})
#endif
	{
	}",101.0,113.0,2.0,2.0,13.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
927,5386,atExitActivated,1,AsyncAppenderPriv.atExitActivated,void AsyncAppenderPriv.atExitActivated (),main\cpp\asyncappender.cpp,"void atExitActivated()
	{
		std::unique_lock<std::mutex> lock(bufferMutex);
		bufferNotFull.wait(lock, [this]() -> bool
			{ return buffer.empty() || closed; }
		);
	}",116.0,122.0,2.0,2.0,7.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,void
928,5403,AsyncAppender,1,AsyncAppender.AsyncAppender,ANY AsyncAppender.AsyncAppender (),main\cpp\asyncappender.cpp,"AsyncAppender::AsyncAppender()
	: AppenderSkeleton(std::make_unique<AsyncAppenderPriv>())
{
}",178.0,181.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
929,5407,~AsyncAppender,1,AsyncAppender.~AsyncAppender,ANY AsyncAppender.~AsyncAppender (),main\cpp\asyncappender.cpp,"AsyncAppender::~AsyncAppender()
{
	finalize();
}",183.0,186.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
930,5412,addAppender,1,AsyncAppender.addAppender,void AsyncAppender.addAppender (AppenderPtr),main\cpp\asyncappender.cpp,"void AsyncAppender::addAppender(const AppenderPtr newAppender)
{
	priv->appenders->addAppender(newAppender);
}",188.0,191.0,1.0,1.0,4.0,4,3,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
931,5431,setOption,1,AsyncAppender.setOption,"void AsyncAppender.setOption (LogString,LogString)",main\cpp\asyncappender.cpp,"void AsyncAppender::setOption(const LogString& option,
	const LogString& value)
{
	if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""LOCATIONINFO""), LOG4CXX_STR(""locationinfo"")))
	{
		setLocationInfo(OptionConverter::toBoolean(value, false));
	}

	if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""BUFFERSIZE""), LOG4CXX_STR(""buffersize"")))
	{
		setBufferSize(OptionConverter::toInt(value, DEFAULT_BUFFER_SIZE));
	}

	if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""BLOCKING""), LOG4CXX_STR(""blocking"")))
	{
		setBlocking(OptionConverter::toBoolean(value, true));
	}
	else
	{
		AppenderSkeleton::setOption(option, value);
	}
}",194.0,215.0,1.0,1.0,22.0,6,1,13,5,0,6,4,4,3,6,,0,3,4,2,2,void
932,5499,doAppend,1,AsyncAppender.doAppend,"void AsyncAppender.doAppend (ANY,Pool)",main\cpp\asyncappender.cpp,"void AsyncAppender::doAppend(const spi::LoggingEventPtr& event, Pool& pool1)
{
	doAppendImpl(event, pool1);
}",218.0,221.0,1.0,1.0,4.0,0,0,2,2,0,0,1,1,0,0,,0,0,4,2,2,void
933,5508,append,1,AsyncAppender.append,"void AsyncAppender.append (ANY,Pool)",main\cpp\asyncappender.cpp,"void AsyncAppender::append(const spi::LoggingEventPtr& event, Pool& p)
{
	if (priv->bufferSize <= 0)
	{
		priv->appenders->appendLoopOnAppenders(event, p);
	}

	// Set the NDC and MDC for the calling thread as these
	// LoggingEvent fields were not set at event creation time.
	LogString ndcVal;
	event->getNDC(ndcVal);
	// Get a copy of this thread's MDC.
	event->getMDCCopy();

	std::unique_lock<std::mutex> lock(priv->bufferMutex);
	if (!priv->dispatcher.joinable())
	{
		priv->dispatcher = ThreadUtility::instance()->createThread( LOG4CXX_STR(""AsyncAppender""), &AsyncAppender::dispatch, this );
	}
	while (true)
	{
		size_t previousSize = priv->buffer.size();

		if (previousSize < (size_t)priv->bufferSize)
		{
			priv->buffer.push_back(event);

			if (previousSize == 0)
			{
				priv->bufferNotEmpty.notify_all();
			}

			break;
		}

		//
		//   Following code is only reachable if buffer is full
		//
		//
		//   if blocking and thread is not already interrupted
		//      and not the dis...",223.0,300.0,1.0,5.0,78.0,88,12,44,15,0,0,11,16,0,0,,0,0,4,2,2,void
934,5823,close,1,AsyncAppender.close,void AsyncAppender.close (),main\cpp\asyncappender.cpp,"void AsyncAppender::close()
{
	{
		std::lock_guard<std::mutex> lock(priv->bufferMutex);
		priv->closed = true;
		priv->bufferNotEmpty.notify_all();
		priv->bufferNotFull.notify_all();
	}

	if ( priv->dispatcher.joinable() )
	{
		priv->dispatcher.join();
	}

	{
		AppenderList appenderList = priv->appenders->getAllAppenders();

		for (AppenderList::iterator iter = appenderList.begin();
			iter != appenderList.end();
			iter++)
		{
			(*iter)->close();
		}
	}
}",302.0,326.0,1.0,35.0,25.0,38,8,15,4,0,0,3,3,0,0,,0,0,0,0,0,void
935,5955,getAllAppenders,1,AsyncAppender.getAllAppenders,AppenderList AsyncAppender.getAllAppenders (),main\cpp\asyncappender.cpp,"AppenderList AsyncAppender::getAllAppenders() const
{
	return priv->appenders->getAllAppenders();
}",328.0,331.0,1.0,8.0,4.0,4,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,AppenderList
936,5973,getAppender,1,AsyncAppender.getAppender,AppenderPtr AsyncAppender.getAppender (LogString),main\cpp\asyncappender.cpp,"AppenderPtr AsyncAppender::getAppender(const LogString& n) const
{
	return priv->appenders->getAppender(n);
}",333.0,336.0,1.0,8.0,4.0,4,3,2,2,0,0,1,1,0,0,,0,0,2,1,1,AppenderPtr
937,5993,isAttached,1,AsyncAppender.isAttached,bool AsyncAppender.isAttached (AppenderPtr),main\cpp\asyncappender.cpp,"bool AsyncAppender::isAttached(const AppenderPtr appender) const
{
	return priv->appenders->isAttached(appender);
}",338.0,341.0,1.0,8.0,4.0,4,3,2,2,0,0,1,1,0,0,,0,0,2,1,1,bool
938,6013,requiresLayout,1,AsyncAppender.requiresLayout,bool AsyncAppender.requiresLayout (),main\cpp\asyncappender.cpp,"bool AsyncAppender::requiresLayout() const
{
	return false;
}",343.0,346.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,bool
939,6019,removeAllAppenders,1,AsyncAppender.removeAllAppenders,void AsyncAppender.removeAllAppenders (),main\cpp\asyncappender.cpp,"void AsyncAppender::removeAllAppenders()
{
	priv->appenders->removeAllAppenders();
}",348.0,351.0,1.0,1.0,4.0,4,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,void
940,6036,removeAppender,1,AsyncAppender.removeAppender,void AsyncAppender.removeAppender (AppenderPtr),main\cpp\asyncappender.cpp,"void AsyncAppender::removeAppender(const LogString& n)
{
	priv->appenders->removeAppender(n);
}",358.0,361.0,1.0,1.0,4.0,4,3,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
941,6074,getLocationInfo,1,AsyncAppender.getLocationInfo,bool AsyncAppender.getLocationInfo (),main\cpp\asyncappender.cpp,"bool AsyncAppender::getLocationInfo() const
{
	return priv->locationInfo;
}",363.0,366.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,bool
942,6089,setLocationInfo,1,AsyncAppender.setLocationInfo,void AsyncAppender.setLocationInfo (bool),main\cpp\asyncappender.cpp,"void AsyncAppender::setLocationInfo(bool flag)
{
	priv->locationInfo = flag;
}",368.0,371.0,1.0,1.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
943,6106,setBufferSize,1,AsyncAppender.setBufferSize,void AsyncAppender.setBufferSize (int),main\cpp\asyncappender.cpp,"void AsyncAppender::setBufferSize(int size)
{
	if (size < 0)
	{
		throw IllegalArgumentException(LOG4CXX_STR(""size argument must be non-negative""));
	}

	std::lock_guard<std::mutex> lock(priv->bufferMutex);
	priv->bufferSize = (size < 1) ? 1 : size;
	priv->bufferNotFull.notify_all();
}",374.0,384.0,1.0,34.0,11.0,19,8,8,3,0,0,2,2,0,0,,0,0,2,1,1,void
944,6169,getBufferSize,1,AsyncAppender.getBufferSize,int AsyncAppender.getBufferSize (),main\cpp\asyncappender.cpp,"int AsyncAppender::getBufferSize() const
{
	return priv->bufferSize;
}",386.0,389.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,int
945,6184,setBlocking,1,AsyncAppender.setBlocking,void AsyncAppender.setBlocking (bool),main\cpp\asyncappender.cpp,"void AsyncAppender::setBlocking(bool value)
{
	std::lock_guard<std::mutex> lock(priv->bufferMutex);
	priv->blocking = value;
	priv->bufferNotFull.notify_all();
}",391.0,396.0,1.0,34.0,6.0,15,6,6,3,0,0,1,1,0,0,,0,0,2,1,1,void
946,6233,getBlocking,1,AsyncAppender.getBlocking,bool AsyncAppender.getBlocking (),main\cpp\asyncappender.cpp,"bool AsyncAppender::getBlocking() const
{
	return priv->blocking;
}",398.0,401.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,bool
947,6400,dispatch,1,AsyncAppender.dispatch,void AsyncAppender.dispatch (),main\cpp\asyncappender.cpp,"void AsyncAppender::dispatch()
{
	bool isActive = true;

	while (isActive)
	{
		//
		//   process events after lock on buffer is released.
		//
		Pool p;
		LoggingEventList events;
		{
			std::unique_lock<std::mutex> lock(priv->bufferMutex);
			priv->bufferNotEmpty.wait(lock, [this]() -> bool
				{ return 0 < priv->buffer.size() || priv->closed; }
			);
			isActive = !priv->closed;

			for (LoggingEventList::iterator eventIter = priv->buffer.begin();
				eventIter != priv->buffer.end();
				eventIter++)
			{
				events.push_back(*eventIter);
			}

			for (DiscardMap::iterator discardIter = priv->discardMap.begin();
				discardIter != priv->discardMap.end();
				discardIter++)
			{
				events.push_back(discardIter->second.createEvent(p));
			}

			priv->buffer.clear();
			priv->discardMap.clear();
			priv->bufferNotFull.notify_all();
		}

		for (LoggingEventList::iterator iter = events.begin();
			iter != events.end();
			iter++)
		{
			try
			{
				priv->appenders->appendLoopOnAppen...",458.0,522.0,1.0,37.0,65.0,74,9,40,10,0,0,8,19,0,0,,0,0,0,0,0,void
948,6684,~AtExitRegistryImpl,1,anonymous_namespace_2.AtExitRegistryImpl.~AtExitRegistryImpl,ANY anonymous_namespace_2.AtExitRegistryImpl.~AtExitRegistryImpl (),main\cpp\atexitregistry.cpp,"~AtExitRegistryImpl()
		{
			std::lock_guard<std::recursive_mutex> lock(mutex);
			while(!actions.empty())
			{
				std::function<void()> action = std::move(actions.begin()->second);
				actions.erase(actions.begin());
				action();
			}
		}",28.0,37.0,3.0,3.0,10.0,16,7,10,4,0,5,2,2,1,0,,0,5,0,0,0,ANY
949,6733,add,1,anonymous_namespace_3.AtExitRegistryImpl.add,"void anonymous_namespace_3.AtExitRegistryImpl.add (void*,ANY)",main\cpp\atexitregistry.cpp,"void add(void* key, std::function<void()> action)
		{
			std::lock_guard<std::recursive_mutex> lock(mutex);
			actions.emplace(key, std::move(action));
		}",39.0,43.0,3.0,3.0,5.0,6,3,7,5,0,2,1,1,0,0,,0,2,4,2,2,void
950,6759,del,1,anonymous_namespace_4.AtExitRegistryImpl.del,void anonymous_namespace_4.AtExitRegistryImpl.del (void*),main\cpp\atexitregistry.cpp,"void del(void* key)
		{
			std::lock_guard<std::recursive_mutex> lock(mutex);
			actions.erase(key);
		}",45.0,49.0,3.0,3.0,5.0,5,3,5,4,0,2,1,1,0,0,,0,2,2,1,1,void
951,6782,instance,1,AtExitRegistry.instance,AtExitRegistry AtExitRegistry.instance (),main\cpp\atexitregistry.cpp,"AtExitRegistry& AtExitRegistry::instance()
{
	return s_instance;
}",57.0,60.0,1.0,1.0,4.0,0,0,1,1,0,0,1,1,0,0,,0,0,0,0,0,AtExitRegistry
952,6788,add,1,AtExitRegistry.add,"void AtExitRegistry.add (void*,ANY)",main\cpp\atexitregistry.cpp,"void AtExitRegistry::add(void* key, std::function<void()> action)
{
	return s_instance.add(key, std::move(action));
}",62.0,65.0,1.0,1.0,4.0,2,1,4,4,0,0,1,1,0,0,,0,0,4,2,2,void
953,6805,del,1,AtExitRegistry.del,void AtExitRegistry.del (void*),main\cpp\atexitregistry.cpp,"void AtExitRegistry::del(void* key)
{
	return s_instance.del(key);
}",67.0,70.0,1.0,1.0,4.0,1,1,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
954,6835,configure,1,BasicConfigurator.configure,void BasicConfigurator.configure (LayoutPtr),main\cpp\basicconfigurator.cpp,"void BasicConfigurator::configure(const AppenderPtr& appender)
{
	LoggerPtr root = Logger::getRootLogger();
	root->addAppender(appender);
}",40.0,44.0,1.0,1.0,5.0,14,6,14,9,2,2,2,2,0,0,,0,0,2,1,1,void
955,6904,resetConfiguration,1,BasicConfigurator.resetConfiguration,void BasicConfigurator.resetConfiguration (),main\cpp\basicconfigurator.cpp,"void BasicConfigurator::resetConfiguration()
{
	LogManager::resetConfiguration();
}",46.0,49.0,1.0,1.0,4.0,1,1,1,1,0,1,1,1,0,0,,0,0,0,0,0,void
956,6924,BufferedWriterPriv,1,BufferedWriterPriv.BufferedWriterPriv,"ANY BufferedWriterPriv.BufferedWriterPriv (WriterPtr,size_t)",main\cpp\bufferedwriter.cpp,"BufferedWriterPriv(WriterPtr& out1, size_t sz1) :
		out(out1),
		sz(sz1)
	{}",26.0,29.0,2.0,3.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ANY
957,6935,BufferedWriter,1,BufferedWriter.BufferedWriter,ANY BufferedWriter.BufferedWriter (WriterPtr),main\cpp\bufferedwriter.cpp,"BufferedWriter::BufferedWriter(WriterPtr& out1, size_t sz1)
	: m_priv(std::make_unique<BufferedWriterPriv>(out1, sz1))
{
}",43.0,46.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ANY
958,6946,~BufferedWriter,1,BufferedWriter.~BufferedWriter,ANY BufferedWriter.~BufferedWriter (),main\cpp\bufferedwriter.cpp,"BufferedWriter::~BufferedWriter()
{
}",48.0,50.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
959,6950,close,1,BufferedWriter.close,void BufferedWriter.close (Pool),main\cpp\bufferedwriter.cpp,"void BufferedWriter::close(Pool& p)
{
	flush(p);
	m_priv->out->close(p);
}",52.0,56.0,1.0,1.0,5.0,2,1,3,2,0,0,1,1,0,0,,0,0,2,1,1,void
960,6964,flush,1,BufferedWriter.flush,void BufferedWriter.flush (Pool),main\cpp\bufferedwriter.cpp,"void BufferedWriter::flush(Pool& p)
{
	if (m_priv->buf.length() > 0)
	{
		m_priv->out->write(m_priv->buf, p);
		m_priv->buf.erase(m_priv->buf.begin(), m_priv->buf.end());
	}
}",58.0,65.0,1.0,1.0,8.0,12,3,7,2,0,0,2,2,0,0,,0,0,2,1,1,void
961,7007,write,1,BufferedWriter.write,"void BufferedWriter.write (LogString,Pool)",main\cpp\bufferedwriter.cpp,"void BufferedWriter::write(const LogString& str, Pool& p)
{
	if (m_priv->buf.length() + str.length() > m_priv->sz)
	{
		m_priv->out->write(m_priv->buf, p);
		m_priv->buf.erase(m_priv->buf.begin(), m_priv->buf.end());
	}

	if (str.length() > m_priv->sz)
	{
		m_priv->out->write(str, p);
	}
	else
	{
		m_priv->buf.append(str);
	}
}",67.0,83.0,1.0,1.0,17.0,20,4,14,3,0,0,3,3,0,0,,0,0,4,2,2,void
962,7105,ByteArrayInputStreamPriv,1,ByteArrayInputStreamPriv.ByteArrayInputStreamPriv,ANY ByteArrayInputStreamPriv.ByteArrayInputStreamPriv (ByteList),main\cpp\bytearrayinputstream.cpp,"ByteArrayInputStreamPriv(const ByteList& bytes) :
		buf(bytes),
		pos(0) {}",31.0,33.0,2.0,11.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
963,7114,ByteArrayInputStream,1,ByteArrayInputStream.ByteArrayInputStream,ANY ByteArrayInputStream.ByteArrayInputStream (ANY),main\cpp\bytearrayinputstream.cpp,"ByteArrayInputStream::ByteArrayInputStream(const std::vector<unsigned char>& bytes) :
	m_priv(std::make_unique<ByteArrayInputStreamPriv>(bytes))
{
}",41.0,44.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
964,7119,~ByteArrayInputStream,1,ByteArrayInputStream.~ByteArrayInputStream,ANY ByteArrayInputStream.~ByteArrayInputStream (),main\cpp\bytearrayinputstream.cpp,"ByteArrayInputStream::~ByteArrayInputStream()
{
}",48.0,50.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
965,7123,close,1,ByteArrayInputStream.close,void ByteArrayInputStream.close (),main\cpp\bytearrayinputstream.cpp,"void ByteArrayInputStream::close()
{
}",53.0,55.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,void
966,7127,read,1,ByteArrayInputStream.read,int ByteArrayInputStream.read (ByteBuffer),main\cpp\bytearrayinputstream.cpp,"int ByteArrayInputStream::read(ByteBuffer& dst)
{
	if (m_priv->pos >= m_priv->buf.size())
	{
		return -1;
	}
	else
	{
		size_t bytesCopied = min(dst.remaining(), m_priv->buf.size() - m_priv->pos);
		std::memcpy(dst.current(), &m_priv->buf[m_priv->pos], bytesCopied);
		m_priv->pos += bytesCopied;
		dst.position(dst.position() + bytesCopied);
		return (int)bytesCopied;
	}
}",58.0,72.0,1.0,1.0,15.0,5,4,2,1,0,0,2,2,0,0,,0,0,2,1,1,int
967,7222,ByteArrayOutputStream,1,ByteArrayOutputStream.ByteArrayOutputStream,ANY ByteArrayOutputStream.ByteArrayOutputStream (),main\cpp\bytearrayoutputstream.cpp,"ByteArrayOutputStream::ByteArrayOutputStream()
{
}",34.0,36.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
968,7226,~ByteArrayOutputStream,1,ByteArrayOutputStream.~ByteArrayOutputStream,ANY ByteArrayOutputStream.~ByteArrayOutputStream (),main\cpp\bytearrayoutputstream.cpp,"ByteArrayOutputStream::~ByteArrayOutputStream()
{
}",38.0,40.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
969,7230,close,1,ByteArrayOutputStream.close,void ByteArrayOutputStream.close (Pool),main\cpp\bytearrayoutputstream.cpp,"void ByteArrayOutputStream::close(Pool& /* p */)
{
}",42.0,44.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
970,7235,flush,1,ByteArrayOutputStream.flush,void ByteArrayOutputStream.flush (Pool),main\cpp\bytearrayoutputstream.cpp,"void ByteArrayOutputStream::flush(Pool& /* p */)
{
}",46.0,48.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
971,7240,write,1,ByteArrayOutputStream.write,"void ByteArrayOutputStream.write (ByteBuffer,Pool)",main\cpp\bytearrayoutputstream.cpp,"void ByteArrayOutputStream::write(ByteBuffer& buf, Pool& /* p */ )
{
	size_t sz = m_priv->array.size();
	m_priv->array.resize(sz + buf.remaining());
	memcpy(&m_priv->array[sz], buf.current(), buf.remaining());
	buf.position(buf.limit());
}",50.0,56.0,1.0,1.0,7.0,14,6,11,3,0,0,1,1,0,0,,0,0,4,2,2,void
972,7290,toByteArray,1,ByteArrayOutputStream.toByteArray,vector<unsigned char> ByteArrayOutputStream.toByteArray (),main\cpp\bytearrayoutputstream.cpp,"std::vector<unsigned char> ByteArrayOutputStream::toByteArray() const
{
	return m_priv->array;
}",58.0,61.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,vector<unsigned char>
973,7312,ByteBufferPriv,1,ByteBufferPriv.ByteBufferPriv,"ANY ByteBufferPriv.ByteBufferPriv (char*,size_t)",main\cpp\bytebuffer.cpp,"ByteBufferPriv(char* data1, size_t capacity) :
		base(data1), pos(0), lim(capacity), cap(capacity) {}",27.0,28.0,2.0,54.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ANY
974,7322,ByteBuffer,1,ByteBuffer.ByteBuffer,"ANY ByteBuffer.ByteBuffer (char*,size_t)",main\cpp\bytebuffer.cpp,"ByteBuffer::ByteBuffer(char* data1, size_t capacity)
	: m_priv(std::make_unique<ByteBufferPriv>(data1, capacity))
{
}",36.0,39.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ANY
975,7328,~ByteBuffer,1,ByteBuffer.~ByteBuffer,ANY ByteBuffer.~ByteBuffer (),main\cpp\bytebuffer.cpp,"ByteBuffer::~ByteBuffer()
{
}",41.0,43.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
976,7332,clear,1,ByteBuffer.clear,void ByteBuffer.clear (),main\cpp\bytebuffer.cpp,"void ByteBuffer::clear()
{
	m_priv->lim = m_priv->cap;
	m_priv->pos = 0;
}",45.0,49.0,1.0,1.0,5.0,5,2,3,1,0,0,1,1,0,0,,0,0,0,0,0,void
977,7348,flip,1,ByteBuffer.flip,void ByteBuffer.flip (),main\cpp\bytebuffer.cpp,"void ByteBuffer::flip()
{
	m_priv->lim = m_priv->pos;
	m_priv->pos = 0;
}",51.0,55.0,1.0,1.0,5.0,5,2,3,1,0,0,1,1,0,0,,0,0,0,0,0,void
978,7364,position,1,ByteBuffer.position,void ByteBuffer.position (size_t),main\cpp\bytebuffer.cpp,"size_t ByteBuffer::position() const
{
	return m_priv->pos;
}",116.0,119.0,1.0,1.0,4.0,4,3,4,2,0,0,2,2,0,0,,0,0,0,0,0,size_t
979,7390,limit,1,ByteBuffer.limit,void ByteBuffer.limit (size_t),main\cpp\bytebuffer.cpp,"size_t ByteBuffer::limit() const
{
	return m_priv->lim;
}",111.0,114.0,1.0,1.0,4.0,5,4,4,2,0,0,2,2,0,0,,0,0,0,0,0,size_t
980,7411,put,1,ByteBuffer.put,bool ByteBuffer.put (char),main\cpp\bytebuffer.cpp,"bool ByteBuffer::put(char byte)
{
	if (m_priv->pos < m_priv->lim)
	{
		m_priv->base[m_priv->pos++] = byte;
		return true;
	}

	return false;
}",80.0,89.0,1.0,1.0,10.0,8,5,5,2,0,0,2,2,0,0,,0,0,2,1,1,bool
981,7439,data,1,ByteBuffer.data,char* ByteBuffer.data (),main\cpp\bytebuffer.cpp,"const char* ByteBuffer::data() const
{
	return m_priv->base;
}",96.0,99.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,const char*
982,7455,current,1,ByteBuffer.current,char* ByteBuffer.current (),main\cpp\bytebuffer.cpp,"const char* ByteBuffer::current() const
{
	return m_priv->base + m_priv->pos;
}",106.0,109.0,1.0,1.0,4.0,3,2,2,1,0,0,1,1,0,0,,0,0,0,0,0,const char*
983,7495,remaining,1,ByteBuffer.remaining,size_t ByteBuffer.remaining (),main\cpp\bytebuffer.cpp,"size_t ByteBuffer::remaining() const
{
	return m_priv->lim - m_priv->pos;
}",121.0,124.0,1.0,1.0,4.0,3,2,2,1,0,0,1,1,0,0,,0,0,0,0,0,size_t
984,7523,CachedDateFormatPriv,1,CachedDateFormatPriv.CachedDateFormatPriv,"ANY CachedDateFormatPriv.CachedDateFormatPriv (DateFormatPtr,int)",main\cpp\cacheddateformat.cpp,"CachedDateFormatPriv(DateFormatPtr dateFormat, int expiration1) :
		formatter(dateFormat),
		millisecondStart(0),
		slotBegin(std::numeric_limits<log4cxx_time_t>::min()),
		cache(50, 0x20),
		expiration(expiration1),
		previousTime(std::numeric_limits<log4cxx_time_t>::min())
	{}",31.0,38.0,2.0,3.0,8.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ANY
985,7582,CachedDateFormat,1,CachedDateFormat.CachedDateFormat,"ANY CachedDateFormat.CachedDateFormat (DateFormatPtr,int)",main\cpp\cacheddateformat.cpp,"CachedDateFormat::CachedDateFormat(const DateFormatPtr& dateFormat,
	int expiration1) :
	m_priv(std::make_unique<CachedDateFormatPriv>(dateFormat, expiration1))
{
	if (dateFormat == NULL)
	{
		throw IllegalArgumentException(LOG4CXX_STR(""dateFormat cannot be null""));
	}

	if (expiration1 < 0)
	{
		throw IllegalArgumentException(LOG4CXX_STR(""expiration must be non-negative""));
	}
}",125.0,138.0,1.0,1.0,14.0,4,3,3,3,0,0,3,3,0,0,,0,0,4,2,2,ANY
986,7606,~CachedDateFormat,1,CachedDateFormat.~CachedDateFormat,ANY CachedDateFormat.~CachedDateFormat (),main\cpp\cacheddateformat.cpp,CachedDateFormat::~CachedDateFormat() {},140.0,140.0,1.0,40.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
987,7610,findMillisecondStart,1,CachedDateFormat.findMillisecondStart,"int CachedDateFormat.findMillisecondStart (log4cxx_time_t,LogString,DateFormatPtr,Pool)",main\cpp\cacheddateformat.cpp,"int CachedDateFormat::findMillisecondStart(
	log4cxx_time_t time, const LogString& formatted,
	const DateFormatPtr& formatter,
	Pool& pool)
{

	log4cxx_time_t slotBegin = (time / 1000000) * 1000000;

	if (slotBegin > time)
	{
		slotBegin -= 1000000;
	}

	int millis = (int) (time - slotBegin) / 1000;

	// the magic numbers are in microseconds
	int magic = magic1;
	LogString magicString(magicString1);

	if (millis == magic1 / 1000)
	{
		magic = magic2;
		magicString = magicString2;
	}

	LogString plusMagic;
	formatter->format(plusMagic, slotBegin + magic, pool);

	/**
	 *   If the string lengths differ then
	 *      we can't use the cache except for duplicate requests.
	 */
	if (plusMagic.length() != formatted.length())
	{
		return UNRECOGNIZED_MILLISECONDS;
	}
	else
	{
		// find first difference between values
		for (LogString::size_type i = 0; i < formatted.length(); i++)
		{
			if (formatted[i] != plusMagic[i])
			{
				//
				//   determine the expected digits for the base time
		...",152.0,234.0,1.0,1.0,83.0,19,12,26,15,0,5,4,4,1,0,,0,5,8,4,4,int
988,7830,format,1,CachedDateFormat.format,"void CachedDateFormat.format (LogString,log4cxx_time_t,Pool)",main\cpp\cacheddateformat.cpp,"void CachedDateFormat::format(LogString& buf, log4cxx_time_t now, Pool& p) const
{

	//
	// If the current requested time is identical to the previously
	//     requested time, then append the cache contents.
	//
	if (now == m_priv->previousTime)
	{
		buf.append(m_priv->cache);
		return;
	}

	//
	//   If millisecond pattern was not unrecognized
	//     (that is if it was found or milliseconds did not appear)
	//
	if (m_priv->millisecondStart != UNRECOGNIZED_MILLISECONDS)
	{
		//    Check if the cache is still valid.
		//    If the requested time is within the same integral second
		//       as the last request and a shorter expiration was not requested.
		if (now < m_priv->slotBegin + m_priv->expiration
			&& now >= m_priv->slotBegin
			&& now < m_priv->slotBegin + 1000000L)
		{
			//
			//    if there was a millisecond field then update it
			//
			if (m_priv->millisecondStart >= 0)
			{
				millisecondFormat((int) ((now - m_priv->slotBegin) / 1000), m_priv->cache, m_priv->millisec...",243.0,309.0,1.0,1.0,67.0,58,15,44,5,0,0,7,10,0,0,,0,0,6,3,3,void
989,8006,millisecondFormat,1,CachedDateFormat.millisecondFormat,"void CachedDateFormat.millisecondFormat (int,LogString,int)",main\cpp\cacheddateformat.cpp,"void CachedDateFormat::millisecondFormat(int millis,
	LogString& buf,
	int offset)
{
	buf[offset] = digits[millis / 100];
	buf[offset + 1] = digits[(millis / 10) % 10];
	buf[offset + 2] = digits[millis  % 10];
}",318.0,325.0,1.0,1.0,8.0,15,5,12,4,0,3,1,1,0,0,,0,3,6,3,3,void
990,8046,setTimeZone,1,CachedDateFormat.setTimeZone,void CachedDateFormat.setTimeZone (TimeZonePtr),main\cpp\cacheddateformat.cpp,"void CachedDateFormat::setTimeZone(const TimeZonePtr& timeZone)
{
	m_priv->formatter->setTimeZone(timeZone);
	m_priv->previousTime = std::numeric_limits<log4cxx_time_t>::min();
	m_priv->slotBegin = std::numeric_limits<log4cxx_time_t>::min();
}",334.0,339.0,1.0,1.0,6.0,14,5,8,4,0,0,1,1,0,0,,0,0,2,1,1,void
991,8086,numberFormat,1,CachedDateFormat.numberFormat,"void CachedDateFormat.numberFormat (LogString,int,Pool)",main\cpp\cacheddateformat.cpp,"void CachedDateFormat::numberFormat(LogString& s, int n, Pool& p) const
{
	m_priv->formatter->numberFormat(s, n, p);
}",343.0,346.0,1.0,1.0,4.0,2,1,4,4,0,0,1,1,0,0,,0,0,6,3,3,void
992,8102,getMaximumCacheValidity,1,CachedDateFormat.getMaximumCacheValidity,int CachedDateFormat.getMaximumCacheValidity (LogString),main\cpp\cacheddateformat.cpp,"int CachedDateFormat::getMaximumCacheValidity(const LogString& pattern)
{
	//
	//   If there are more ""S"" in the pattern than just one ""SSS"" then
	//      (for example, ""HH:mm:ss,SSS SSS""), then set the expiration to
	//      one millisecond which should only perform duplicate request caching.
	//
	const logchar S = 0x53;
	const logchar SSS[] = { 0x53, 0x53, 0x53, 0 };
	size_t firstS = pattern.find(S);
	size_t len = pattern.length();

	//
	//   if there are no S's or
	//      three that start with the first S and no fourth S in the string
	//
	if (firstS == LogString::npos ||
		(len >= firstS + 3 && pattern.compare(firstS, 3, SSS) == 0
			&& (len == firstS + 3 ||
				pattern.find(S, firstS + 3) == LogString::npos)))
	{
		return 1000000;
	}

	return 1000;
}",356.0,381.0,1.0,1.0,26.0,23,8,20,6,0,0,2,2,0,0,,0,0,2,1,1,int
993,8180,regionMatches,1,CachedDateFormat.regionMatches,"bool CachedDateFormat.regionMatches (LogString,size_t,LogString,size_t,size_t)",main\cpp\cacheddateformat.cpp,"bool CachedDateFormat::regionMatches(
	const LogString& target,
	size_t toffset,
	const LogString& other,
	size_t ooffset,
	size_t len)
{
	return target.compare(toffset, len, other, ooffset, len) == 0;
}",393.0,401.0,1.0,1.0,9.0,2,2,6,5,0,0,1,1,0,0,,0,0,10,5,5,bool
994,8237,TrivialCharsetDecoder,1,LOG4CXX_NS.helpers.TrivialCharsetDecoder.TrivialCharsetDecoder,ANY LOG4CXX_NS.helpers.TrivialCharsetDecoder.TrivialCharsetDecoder (),main\cpp\charsetdecoder.cpp,"TrivialCharsetDecoder()
		{
		}",236.0,238.0,3.0,3.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
995,8241,~TrivialCharsetDecoder,1,LOG4CXX_NS.helpers.TrivialCharsetDecoder.~TrivialCharsetDecoder,ANY LOG4CXX_NS.helpers.TrivialCharsetDecoder.~TrivialCharsetDecoder (),main\cpp\charsetdecoder.cpp,"virtual ~TrivialCharsetDecoder()
		{
		}",240.0,242.0,3.0,3.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
996,8245,decode,1,LOG4CXX_NS.helpers.TrivialCharsetDecoder.decode,"log4cxx_status_t LOG4CXX_NS.helpers.TrivialCharsetDecoder.decode (ByteBuffer,LogString)",main\cpp\charsetdecoder.cpp,"virtual log4cxx_status_t decode(ByteBuffer& in,
			LogString& out)
		{
			size_t remaining = in.remaining();

			if ( remaining > 0)
			{
				const logchar* src = (const logchar*) (in.data() + in.position());
				size_t count = remaining / sizeof(logchar);
				out.append(src, count);
				in.position(in.position() + remaining);
			}

			return APR_SUCCESS;
		}",244.0,258.0,3.0,3.0,15.0,15,7,16,7,0,0,2,2,0,0,,0,0,4,2,2,log4cxx_status_t
997,8307,operator =,1,LOG4CXX_NS.helpers.TrivialCharsetDecoder.operator =,TrivialCharsetDecoder LOG4CXX_NS.helpers.TrivialCharsetDecoder.operator = (TrivialCharsetDecoder),main\cpp\charsetdecoder.cpp,TrivialCharsetDecoder& operator=(const TrivialCharsetDecoder&);,264.0,264.0,24.0,64.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,TrivialCharsetDecoder
998,8313,UTF8CharsetDecoder,1,LOG4CXX_NS.helpers.UTF8CharsetDecoder.UTF8CharsetDecoder,ANY LOG4CXX_NS.helpers.UTF8CharsetDecoder.UTF8CharsetDecoder (),main\cpp\charsetdecoder.cpp,"UTF8CharsetDecoder()
		{
		}",278.0,280.0,3.0,3.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
999,8317,~UTF8CharsetDecoder,1,LOG4CXX_NS.helpers.UTF8CharsetDecoder.~UTF8CharsetDecoder,ANY LOG4CXX_NS.helpers.UTF8CharsetDecoder.~UTF8CharsetDecoder (),main\cpp\charsetdecoder.cpp,"virtual ~UTF8CharsetDecoder()
		{
		}",282.0,284.0,3.0,3.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1000,8321,decode,1,LOG4CXX_NS.helpers.UTF8CharsetDecoder.decode,"log4cxx_status_t LOG4CXX_NS.helpers.UTF8CharsetDecoder.decode (ByteBuffer,LogString)",main\cpp\charsetdecoder.cpp,"virtual log4cxx_status_t decode(ByteBuffer& in,
			LogString& out)
		{
			if (in.remaining() > 0)
			{
				std::string tmp(in.current(), in.remaining());
				std::string::const_iterator iter = tmp.begin();

				while (iter != tmp.end())
				{
					unsigned int sv = Transcoder::decode(tmp, iter);

					if (sv == 0xFFFF)
					{
						size_t offset = iter - tmp.begin();
						in.position(in.position() + offset);
						return APR_BADARG;
					}
					else
					{
						Transcoder::encode(sv, out);
					}
				}

				in.position(in.limit());
			}

			return APR_SUCCESS;
		}",287.0,315.0,3.0,3.0,29.0,19,7,22,8,0,1,4,7,0,1,,0,1,4,2,2,log4cxx_status_t
1001,8418,operator =,1,LOG4CXX_NS.helpers.UTF8CharsetDecoder.operator =,UTF8CharsetDecoder LOG4CXX_NS.helpers.UTF8CharsetDecoder.operator = (UTF8CharsetDecoder),main\cpp\charsetdecoder.cpp,UTF8CharsetDecoder& operator=(const UTF8CharsetDecoder&);,319.0,319.0,21.0,58.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,UTF8CharsetDecoder
1002,8424,ISOLatinCharsetDecoder,1,LOG4CXX_NS.helpers.ISOLatinCharsetDecoder.ISOLatinCharsetDecoder,ANY LOG4CXX_NS.helpers.ISOLatinCharsetDecoder.ISOLatinCharsetDecoder (),main\cpp\charsetdecoder.cpp,"ISOLatinCharsetDecoder()
		{
		}",330.0,332.0,3.0,3.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1003,8428,~ISOLatinCharsetDecoder,1,LOG4CXX_NS.helpers.ISOLatinCharsetDecoder.~ISOLatinCharsetDecoder,ANY LOG4CXX_NS.helpers.ISOLatinCharsetDecoder.~ISOLatinCharsetDecoder (),main\cpp\charsetdecoder.cpp,"virtual ~ISOLatinCharsetDecoder()
		{
		}",334.0,336.0,3.0,3.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1004,8432,decode,1,LOG4CXX_NS.helpers.ISOLatinCharsetDecoder.decode,"log4cxx_status_t LOG4CXX_NS.helpers.ISOLatinCharsetDecoder.decode (ByteBuffer,LogString)",main\cpp\charsetdecoder.cpp,"virtual log4cxx_status_t decode(ByteBuffer& in,
			LogString& out)
		{
			if (in.remaining() > 0)
			{

				const unsigned char* src = (unsigned char*) in.current();
				const unsigned char* srcEnd = src + in.remaining();

				while (src < srcEnd)
				{
					unsigned int sv = *(src++);
					Transcoder::encode(sv, out);
				}

				in.position(in.limit());
			}

			return APR_SUCCESS;
		}",339.0,358.0,3.0,3.0,20.0,15,8,16,7,0,1,3,4,0,1,,0,0,4,2,2,log4cxx_status_t
1005,8496,operator =,1,LOG4CXX_NS.helpers.ISOLatinCharsetDecoder.operator =,ISOLatinCharsetDecoder LOG4CXX_NS.helpers.ISOLatinCharsetDecoder.operator = (ISOLatinCharsetDecoder),main\cpp\charsetdecoder.cpp,ISOLatinCharsetDecoder& operator=(const ISOLatinCharsetDecoder&);,364.0,364.0,25.0,66.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ISOLatinCharsetDecoder
1006,8502,USASCIICharsetDecoder,1,LOG4CXX_NS.helpers.USASCIICharsetDecoder.USASCIICharsetDecoder,ANY LOG4CXX_NS.helpers.USASCIICharsetDecoder.USASCIICharsetDecoder (),main\cpp\charsetdecoder.cpp,"USASCIICharsetDecoder()
		{
		}",375.0,377.0,3.0,3.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1007,8506,~USASCIICharsetDecoder,1,LOG4CXX_NS.helpers.USASCIICharsetDecoder.~USASCIICharsetDecoder,ANY LOG4CXX_NS.helpers.USASCIICharsetDecoder.~USASCIICharsetDecoder (),main\cpp\charsetdecoder.cpp,"virtual ~USASCIICharsetDecoder()
		{
		}",379.0,381.0,3.0,3.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1008,8510,decode,1,LOG4CXX_NS.helpers.USASCIICharsetDecoder.decode,"log4cxx_status_t LOG4CXX_NS.helpers.USASCIICharsetDecoder.decode (ByteBuffer,LogString)",main\cpp\charsetdecoder.cpp,"virtual log4cxx_status_t decode(ByteBuffer& in,
			LogString& out)
		{
			log4cxx_status_t stat = APR_SUCCESS;

			if (in.remaining() > 0)
			{

				const unsigned char* src = (unsigned char*) in.current();
				const unsigned char* srcEnd = src + in.remaining();

				while (src < srcEnd)
				{
					unsigned char sv = *src;

					if (sv < 0x80)
					{
						src++;
						Transcoder::encode(sv, out);
					}
					else
					{
						stat = APR_BADARG;
						break;
					}
				}

				in.position(src - (const unsigned char*) in.data());
			}

			return stat;
		}",385.0,416.0,3.0,3.0,32.0,19,9,21,8,0,1,4,7,0,1,,0,0,4,2,2,log4cxx_status_t
1009,8594,operator =,1,LOG4CXX_NS.helpers.USASCIICharsetDecoder.operator =,USASCIICharsetDecoder LOG4CXX_NS.helpers.USASCIICharsetDecoder.operator = (USASCIICharsetDecoder),main\cpp\charsetdecoder.cpp,USASCIICharsetDecoder& operator=(const USASCIICharsetDecoder&);,422.0,422.0,24.0,64.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,USASCIICharsetDecoder
1010,8600,LocaleCharsetDecoder,1,LOG4CXX_NS.helpers.LocaleCharsetDecoder.LocaleCharsetDecoder,ANY LOG4CXX_NS.helpers.LocaleCharsetDecoder.LocaleCharsetDecoder (),main\cpp\charsetdecoder.cpp,"LocaleCharsetDecoder() : state()
		{
		}",431.0,433.0,3.0,3.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1011,8604,decode,1,LOG4CXX_NS.helpers.LocaleCharsetDecoder.decode,"log4cxx_status_t LOG4CXX_NS.helpers.LocaleCharsetDecoder.decode (ByteBuffer,LogString)",main\cpp\charsetdecoder.cpp,"log4cxx_status_t decode(ByteBuffer& in, LogString& out) override
		{
			log4cxx_status_t result = APR_SUCCESS;
			const char* p = in.current();
			size_t i = in.position();
			size_t remain = in.limit() - i;
#if !LOG4CXX_CHARSET_EBCDIC
			if (std::mbsinit(&this->state)) // ByteBuffer not partially decoded?
			{
				// Copy single byte characters
				for (; 0 < remain && ((unsigned int) *p) < 0x80; --remain, ++i, p++)
				{
					out.append(1, *p);
				}
			}
#endif
			// Decode characters that may be represented by multiple bytes
			while (0 < remain)
			{
				wchar_t ch = 0;
				size_t n = std::mbrtowc(&ch, p, remain, &this->state);
				if (0 == n) // NULL encountered?
				{
					++i;
					break;
				}
				if (static_cast<std::size_t>(-1) == n) // decoding error?
				{
					result = APR_BADARG;
					break;
				}
				if (static_cast<std::size_t>(-2) == n) // incomplete sequence?
				{
					break;
				}
				Transcoder::encode(static_cast<unsigned int>(ch), out);
				remain -= n;
				i...",434.0,476.0,3.0,3.0,43.0,40,14,39,12,0,3,10,11,1,1,,0,2,4,2,2,log4cxx_status_t
1012,8752,CharsetDecoder,1,CharsetDecoder.CharsetDecoder,ANY CharsetDecoder.CharsetDecoder (),main\cpp\charsetdecoder.cpp,"CharsetDecoder::CharsetDecoder()
{
}",489.0,491.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1013,8756,~CharsetDecoder,1,CharsetDecoder.~CharsetDecoder,ANY CharsetDecoder.~CharsetDecoder (),main\cpp\charsetdecoder.cpp,"CharsetDecoder::~CharsetDecoder()
{
}",494.0,496.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1014,8760,createDefaultDecoder,1,CharsetDecoder.createDefaultDecoder,CharsetDecoder CharsetDecoder.createDefaultDecoder (),main\cpp\charsetdecoder.cpp,"CharsetDecoder* CharsetDecoder::createDefaultDecoder()
{
#if LOG4CXX_CHARSET_UTF8
	return new UTF8CharsetDecoder();
#elif LOG4CXX_CHARSET_ISO88591 || defined(_WIN32_WCE)
	return new ISOLatinCharsetDecoder();
#elif LOG4CXX_CHARSET_USASCII
	return new USASCIICharsetDecoder();
#elif LOG4CXX_LOGCHAR_IS_WCHAR && LOG4CXX_HAS_MBSRTOWCS
	return new MbstowcsCharsetDecoder();
#else
	return new LocaleCharsetDecoder();
#endif
}",498.0,511.0,1.0,1.0,14.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,CharsetDecoder
1015,8767,getDefaultDecoder,1,CharsetDecoder.getDefaultDecoder,CharsetDecoderPtr CharsetDecoder.getDefaultDecoder (),main\cpp\charsetdecoder.cpp,"CharsetDecoderPtr CharsetDecoder::getDefaultDecoder()
{
	static WideLife<CharsetDecoderPtr> decoder(createDefaultDecoder());

	//
	//  if invoked after static variable destruction
	//     (if logging is called in the destructor of a static object)
	//     then create a new decoder.
	//
	if (decoder.value() == 0)
	{
		return CharsetDecoderPtr( createDefaultDecoder() );
	}

	return decoder;
}",513.0,528.0,1.0,1.0,16.0,2,2,2,1,0,0,2,2,0,0,,0,0,0,0,0,CharsetDecoderPtr
1016,8787,getUTF8Decoder,1,CharsetDecoder.getUTF8Decoder,CharsetDecoderPtr CharsetDecoder.getUTF8Decoder (),main\cpp\charsetdecoder.cpp,"CharsetDecoderPtr CharsetDecoder::getUTF8Decoder()
{
	static WideLife<CharsetDecoderPtr> decoder(new UTF8CharsetDecoder());

	//
	//  if invoked after static variable destruction
	//     (if logging is called in the destructor of a static object)
	//     then create a new decoder.
	//
	if (decoder.value() == 0)
	{
		return std::make_shared<UTF8CharsetDecoder>();
	}

	return decoder;
}",530.0,545.0,1.0,1.0,16.0,4,3,4,3,0,0,2,2,0,0,,0,0,0,0,0,CharsetDecoderPtr
1017,8810,getISOLatinDecoder,1,CharsetDecoder.getISOLatinDecoder,CharsetDecoderPtr CharsetDecoder.getISOLatinDecoder (),main\cpp\charsetdecoder.cpp,"CharsetDecoderPtr CharsetDecoder::getISOLatinDecoder()
{
	return std::make_shared<ISOLatinCharsetDecoder>();
}",547.0,550.0,1.0,1.0,4.0,1,1,1,1,1,0,1,1,0,0,,0,0,0,0,0,CharsetDecoderPtr
1018,8819,getDecoder,1,CharsetDecoder.getDecoder,CharsetDecoderPtr CharsetDecoder.getDecoder (LogString),main\cpp\charsetdecoder.cpp,"CharsetDecoderPtr CharsetDecoder::getDecoder(const LogString& charset)
{
	if (StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR(""UTF-8""), LOG4CXX_STR(""utf-8"")) ||
		StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR(""UTF8""), LOG4CXX_STR(""utf8"")) ||
		StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR(""CP65001""), LOG4CXX_STR(""cp65001"")))
	{
		return std::make_shared<UTF8CharsetDecoder>();
	}
	else if (StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR(""C""), LOG4CXX_STR(""c"")) ||
		charset == LOG4CXX_STR(""646"") ||
		StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR(""US-ASCII""), LOG4CXX_STR(""us-ascii"")) ||
		StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR(""ISO646-US""), LOG4CXX_STR(""iso646-US"")) ||
		StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR(""ANSI_X3.4-1968""), LOG4CXX_STR(""ansi_x3.4-1968"")) ||
		StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR(""CP20127""), LOG4CXX_STR(""cp20127"")))
	{
		return std::make_shared<USASCIICharsetDecoder>();
	}
	else if (StringHelper::equ...",553.0,586.0,1.0,1.0,34.0,7,3,8,3,0,3,2,2,3,3,,0,3,2,1,1,CharsetDecoderPtr
1019,8983,<lambda>0,1,CharsetEncoder.isTriviallyCopyable.<lambda>0,bool CharsetEncoder.isTriviallyCopyable.<lambda>0 (logchar),main\cpp\charsetencoder.cpp,[](const logchar& ch) -> bool { return 0x80 <= (unsigned int)ch; },638.0,638.0,6.0,71.0,1.0,2,2,1,1,0,0,1,1,0,0,,0,0,2,1,1,bool
1020,9028,USASCIICharsetEncoder,1,LOG4CXX_NS.helpers.USASCIICharsetEncoder.USASCIICharsetEncoder,ANY LOG4CXX_NS.helpers.USASCIICharsetEncoder.USASCIICharsetEncoder (),main\cpp\charsetencoder.cpp,"USASCIICharsetEncoder()
		{
		}",221.0,223.0,3.0,3.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1021,9032,encode,1,LOG4CXX_NS.helpers.USASCIICharsetEncoder.encode,"log4cxx_status_t LOG4CXX_NS.helpers.USASCIICharsetEncoder.encode (LogString,ANY,ByteBuffer)",main\cpp\charsetencoder.cpp,"virtual log4cxx_status_t encode(const LogString& in,
			LogString::const_iterator& iter,
			ByteBuffer& out)
		{
			log4cxx_status_t stat = APR_SUCCESS;

			if (iter != in.end())
			{
				while (out.remaining() > 0 && iter != in.end())
				{
					LogString::const_iterator prev(iter);
					unsigned int sv = Transcoder::decode(in, iter);

					if (sv <= 0x7F)
					{
						out.put((char) sv);
					}
					else
					{
						iter = prev;
						stat = APR_BADARG;
						break;
					}
				}
			}

			return stat;
		}",225.0,252.0,3.0,3.0,28.0,13,7,16,7,0,1,4,7,0,1,,0,1,6,3,3,log4cxx_status_t
1022,9106,operator =,1,LOG4CXX_NS.helpers.USASCIICharsetEncoder.operator =,USASCIICharsetEncoder LOG4CXX_NS.helpers.USASCIICharsetEncoder.operator = (USASCIICharsetEncoder),main\cpp\charsetencoder.cpp,USASCIICharsetEncoder& operator=(const USASCIICharsetEncoder&);,256.0,256.0,24.0,64.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,USASCIICharsetEncoder
1023,9112,ISOLatinCharsetEncoder,1,LOG4CXX_NS.helpers.ISOLatinCharsetEncoder.ISOLatinCharsetEncoder,ANY LOG4CXX_NS.helpers.ISOLatinCharsetEncoder.ISOLatinCharsetEncoder (),main\cpp\charsetencoder.cpp,"ISOLatinCharsetEncoder()
		{
		}",265.0,267.0,3.0,3.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1024,9116,encode,1,LOG4CXX_NS.helpers.ISOLatinCharsetEncoder.encode,"log4cxx_status_t LOG4CXX_NS.helpers.ISOLatinCharsetEncoder.encode (LogString,ANY,ByteBuffer)",main\cpp\charsetencoder.cpp,"virtual log4cxx_status_t encode(const LogString& in,
			LogString::const_iterator& iter,
			ByteBuffer& out)
		{
			log4cxx_status_t stat = APR_SUCCESS;

			if (iter != in.end())
			{
				while (out.remaining() > 0 && iter != in.end())
				{
					LogString::const_iterator prev(iter);
					unsigned int sv = Transcoder::decode(in, iter);

					if (sv <= 0xFF)
					{
						out.put((char) sv);
					}
					else
					{
						iter = prev;
						stat = APR_BADARG;
						break;
					}
				}
			}

			return stat;
		}",269.0,296.0,3.0,3.0,28.0,13,7,16,7,0,1,4,7,0,1,,0,1,6,3,3,log4cxx_status_t
1025,9190,operator =,1,LOG4CXX_NS.helpers.ISOLatinCharsetEncoder.operator =,ISOLatinCharsetEncoder LOG4CXX_NS.helpers.ISOLatinCharsetEncoder.operator = (ISOLatinCharsetEncoder),main\cpp\charsetencoder.cpp,ISOLatinCharsetEncoder& operator=(const ISOLatinCharsetEncoder&);,300.0,300.0,25.0,66.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ISOLatinCharsetEncoder
1026,9196,TrivialCharsetEncoder,1,LOG4CXX_NS.helpers.TrivialCharsetEncoder.TrivialCharsetEncoder,ANY LOG4CXX_NS.helpers.TrivialCharsetEncoder.TrivialCharsetEncoder (),main\cpp\charsetencoder.cpp,"TrivialCharsetEncoder()
		{
		}",309.0,311.0,3.0,3.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1027,9200,encode,1,LOG4CXX_NS.helpers.TrivialCharsetEncoder.encode,"log4cxx_status_t LOG4CXX_NS.helpers.TrivialCharsetEncoder.encode (LogString,ANY,ByteBuffer)",main\cpp\charsetencoder.cpp,"virtual log4cxx_status_t encode(const LogString& in,
			LogString::const_iterator& iter,
			ByteBuffer& out)
		{
			if (iter != in.end())
			{
				size_t requested = in.length() - (iter - in.begin());

				if (requested > out.remaining() / sizeof(logchar))
				{
					requested = out.remaining() / sizeof(logchar);
				}

				memcpy(out.current(),
					(const char*) in.data() + (iter - in.begin()),
					requested * sizeof(logchar));
				iter += requested;
				out.position(out.position() + requested * sizeof(logchar));
			}

			return APR_SUCCESS;
		}",314.0,335.0,3.0,3.0,22.0,29,11,25,6,0,0,3,4,0,0,,0,0,6,3,3,log4cxx_status_t
1028,9294,operator =,1,LOG4CXX_NS.helpers.TrivialCharsetEncoder.operator =,TrivialCharsetEncoder LOG4CXX_NS.helpers.TrivialCharsetEncoder.operator = (TrivialCharsetEncoder),main\cpp\charsetencoder.cpp,TrivialCharsetEncoder& operator=(const TrivialCharsetEncoder&);,339.0,339.0,24.0,64.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,TrivialCharsetEncoder
1029,9300,UTF8CharsetEncoder,1,LOG4CXX_NS.helpers.UTF8CharsetEncoder.UTF8CharsetEncoder,ANY LOG4CXX_NS.helpers.UTF8CharsetEncoder.UTF8CharsetEncoder (),main\cpp\charsetencoder.cpp,"UTF8CharsetEncoder()
		{
		}",351.0,353.0,3.0,3.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1030,9304,encode,1,LOG4CXX_NS.helpers.UTF8CharsetEncoder.encode,"log4cxx_status_t LOG4CXX_NS.helpers.UTF8CharsetEncoder.encode (LogString,ANY,ByteBuffer)",main\cpp\charsetencoder.cpp,"virtual log4cxx_status_t encode(const LogString& in,
			LogString::const_iterator& iter,
			ByteBuffer& out)
		{
			while (iter != in.end() && out.remaining() >= 8)
			{
				unsigned int sv = Transcoder::decode(in, iter);

				if (sv == 0xFFFF)
				{
					return APR_BADARG;
				}

				Transcoder::encodeUTF8(sv, out);
			}

			return APR_SUCCESS;
		}",355.0,372.0,3.0,3.0,18.0,9,6,13,7,0,2,3,4,0,2,,0,1,6,3,3,log4cxx_status_t
1031,9355,operator =,1,LOG4CXX_NS.helpers.UTF8CharsetEncoder.operator =,UTF8CharsetEncoder LOG4CXX_NS.helpers.UTF8CharsetEncoder.operator = (UTF8CharsetEncoder),main\cpp\charsetencoder.cpp,UTF8CharsetEncoder& operator=(const UTF8CharsetEncoder&);,376.0,376.0,21.0,58.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,UTF8CharsetEncoder
1032,9361,UTF16BECharsetEncoder,1,LOG4CXX_NS.helpers.UTF16BECharsetEncoder.UTF16BECharsetEncoder,ANY LOG4CXX_NS.helpers.UTF16BECharsetEncoder.UTF16BECharsetEncoder (),main\cpp\charsetencoder.cpp,"UTF16BECharsetEncoder()
		{
		}",386.0,388.0,3.0,3.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1033,9365,encode,1,LOG4CXX_NS.helpers.UTF16BECharsetEncoder.encode,"log4cxx_status_t LOG4CXX_NS.helpers.UTF16BECharsetEncoder.encode (LogString,ANY,ByteBuffer)",main\cpp\charsetencoder.cpp,"virtual log4cxx_status_t encode(const LogString& in,
			LogString::const_iterator& iter,
			ByteBuffer& out)
		{
			while (iter != in.end() && out.remaining() >= 4)
			{
				unsigned int sv = Transcoder::decode(in, iter);

				if (sv == 0xFFFF)
				{
					return APR_BADARG;
				}

				Transcoder::encodeUTF16BE(sv, out);
			}

			return APR_SUCCESS;
		}",390.0,407.0,3.0,3.0,18.0,9,6,13,7,0,2,3,4,0,2,,0,1,6,3,3,log4cxx_status_t
1034,9416,operator =,1,LOG4CXX_NS.helpers.UTF16BECharsetEncoder.operator =,UTF16BECharsetEncoder LOG4CXX_NS.helpers.UTF16BECharsetEncoder.operator = (UTF16BECharsetEncoder),main\cpp\charsetencoder.cpp,UTF16BECharsetEncoder& operator=(const UTF16BECharsetEncoder&);,411.0,411.0,24.0,64.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,UTF16BECharsetEncoder
1035,9422,UTF16LECharsetEncoder,1,LOG4CXX_NS.helpers.UTF16LECharsetEncoder.UTF16LECharsetEncoder,ANY LOG4CXX_NS.helpers.UTF16LECharsetEncoder.UTF16LECharsetEncoder (),main\cpp\charsetencoder.cpp,"UTF16LECharsetEncoder()
		{
		}",420.0,422.0,3.0,3.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1036,9426,encode,1,LOG4CXX_NS.helpers.UTF16LECharsetEncoder.encode,"log4cxx_status_t LOG4CXX_NS.helpers.UTF16LECharsetEncoder.encode (LogString,ANY,ByteBuffer)",main\cpp\charsetencoder.cpp,"virtual log4cxx_status_t encode(const LogString& in,
			LogString::const_iterator& iter,
			ByteBuffer& out)
		{
			while (iter != in.end() && out.remaining() >= 4)
			{
				unsigned int sv = Transcoder::decode(in, iter);

				if (sv == 0xFFFF)
				{
					return APR_BADARG;
				}

				Transcoder::encodeUTF16LE(sv, out);
			}

			return APR_SUCCESS;
		}",425.0,442.0,3.0,3.0,18.0,9,6,13,7,0,2,3,4,0,2,,0,1,6,3,3,log4cxx_status_t
1037,9477,operator =,1,LOG4CXX_NS.helpers.UTF16LECharsetEncoder.operator =,UTF16LECharsetEncoder LOG4CXX_NS.helpers.UTF16LECharsetEncoder.operator = (UTF16LECharsetEncoder),main\cpp\charsetencoder.cpp,UTF16LECharsetEncoder& operator=(const UTF16LECharsetEncoder&);,445.0,445.0,24.0,64.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,UTF16LECharsetEncoder
1038,9483,LocaleCharsetEncoder,1,LOG4CXX_NS.helpers.LocaleCharsetEncoder.LocaleCharsetEncoder,ANY LOG4CXX_NS.helpers.LocaleCharsetEncoder.LocaleCharsetEncoder (),main\cpp\charsetencoder.cpp,"LocaleCharsetEncoder() : state()
		{
		}",454.0,456.0,3.0,3.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1039,9487,encode,1,LOG4CXX_NS.helpers.LocaleCharsetEncoder.encode,"log4cxx_status_t LOG4CXX_NS.helpers.LocaleCharsetEncoder.encode (LogString,ANY,ByteBuffer)",main\cpp\charsetencoder.cpp,"log4cxx_status_t encode
			( const LogString&           in
			, LogString::const_iterator& iter
			, ByteBuffer&                out
			) override
		{
			log4cxx_status_t result = APR_SUCCESS;
#if !LOG4CXX_CHARSET_EBCDIC
			char* current = out.current();
			size_t remain = out.remaining();
			if (std::mbsinit(&this->state)) // ByteBuffer not partially encoded?
			{
				// Copy single byte characters
				for (;
					iter != in.end() && ((unsigned int) *iter) < 0x80 && 0 < remain;
					iter++, remain--, current++)
				{
					*current = *iter;
				}
			}
#endif
			// Encode characters that may require multiple bytes
			while (iter != in.end() && MB_CUR_MAX <= remain)
			{
				auto ch = Transcoder::decode(in, iter);
				auto n = std::wcrtomb(current, ch, &this->state);
				if (static_cast<std::size_t>(-1) == n) // not a valid wide character?
				{
					result = APR_BADARG;
					break;
				}
				remain -= n;
				current += n;
			}
			out.position(current - out.data());
			return result;
		}",457.0,493.0,3.0,3.0,37.0,38,15,36,13,0,3,6,7,1,1,,0,3,6,3,3,log4cxx_status_t
1040,9619,CharsetEncoder,1,CharsetEncoder.CharsetEncoder,ANY CharsetEncoder.CharsetEncoder (),main\cpp\charsetencoder.cpp,"CharsetEncoder::CharsetEncoder()
{
}",506.0,508.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1041,9623,~CharsetEncoder,1,CharsetEncoder.~CharsetEncoder,ANY CharsetEncoder.~CharsetEncoder (),main\cpp\charsetencoder.cpp,"CharsetEncoder::~CharsetEncoder()
{
}",510.0,512.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1042,9627,getDefaultEncoder,1,CharsetEncoder.getDefaultEncoder,CharsetEncoderPtr CharsetEncoder.getDefaultEncoder (),main\cpp\charsetencoder.cpp,"CharsetEncoderPtr CharsetEncoder::getDefaultEncoder()
{
	static WideLife<CharsetEncoderPtr> encoder(createDefaultEncoder());

	//
	//  if invoked after static variable destruction
	//     (if logging is called in the destructor of a static object)
	//     then create a new decoder.
	//
	if (encoder.value() == 0)
	{
		return CharsetEncoderPtr( createDefaultEncoder() );
	}

	return encoder;
}",514.0,529.0,1.0,1.0,16.0,2,2,2,1,1,0,2,2,0,0,,0,0,0,0,0,CharsetEncoderPtr
1043,9647,createDefaultEncoder,1,CharsetEncoder.createDefaultEncoder,CharsetEncoder CharsetEncoder.createDefaultEncoder (),main\cpp\charsetencoder.cpp,"CharsetEncoder* CharsetEncoder::createDefaultEncoder()
{
#if LOG4CXX_CHARSET_UTF8
	return new UTF8CharsetEncoder();
#elif LOG4CXX_CHARSET_ISO88591
	return new ISOLatinCharsetEncoder();
#elif LOG4CXX_CHARSET_USASCII
	return new USASCIICharsetEncoder();
#elif LOG4CXX_LOGCHAR_IS_WCHAR && LOG4CXX_HAS_WCSTOMBS
	return new WcstombsCharsetEncoder();
#else
	return new LocaleCharsetEncoder();
#endif
}",531.0,544.0,1.0,1.0,14.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,CharsetEncoder
1044,9654,getUTF8Encoder,1,CharsetEncoder.getUTF8Encoder,CharsetEncoderPtr CharsetEncoder.getUTF8Encoder (),main\cpp\charsetencoder.cpp,"CharsetEncoderPtr CharsetEncoder::getUTF8Encoder()
{
	return std::make_shared<UTF8CharsetEncoder>();
}",547.0,550.0,1.0,1.0,4.0,1,1,1,1,1,0,1,1,0,0,,0,0,0,0,0,CharsetEncoderPtr
1045,9663,getEncoder,1,CharsetEncoder.getEncoder,CharsetEncoderPtr CharsetEncoder.getEncoder (LogString),main\cpp\charsetencoder.cpp,"CharsetEncoderPtr CharsetEncoder::getEncoder(const LogString& charset)
{
	if (StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR(""UTF-8""), LOG4CXX_STR(""utf-8""))
		|| StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR(""CP65001""), LOG4CXX_STR(""cp65001"")))
	{
		return std::make_shared<UTF8CharsetEncoder>();
	}
	else if (StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR(""C""), LOG4CXX_STR(""c"")) ||
		charset == LOG4CXX_STR(""646"") ||
		StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR(""US-ASCII""), LOG4CXX_STR(""us-ascii"")) ||
		StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR(""ISO646-US""), LOG4CXX_STR(""iso646-US"")) ||
		StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR(""ANSI_X3.4-1968""), LOG4CXX_STR(""ansi_x3.4-1968"")) ||
		StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR(""CP20127""), LOG4CXX_STR(""cp20127"")))
	{
		return std::make_shared<USASCIICharsetEncoder>();
	}
	else if (StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR(""ISO-8859-1""), LOG4CXX_STR(""iso-8859-1"")) ||
		Strin...",554.0,596.0,1.0,1.0,43.0,5,3,6,3,1,2,2,2,2,2,,0,2,2,1,1,CharsetEncoderPtr
1046,9872,reset,1,CharsetEncoder.reset,void CharsetEncoder.reset (),main\cpp\charsetencoder.cpp,"void CharsetEncoder::reset()
{
}",599.0,601.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,void
1047,9876,flush,1,CharsetEncoder.flush,void CharsetEncoder.flush (ByteBuffer),main\cpp\charsetencoder.cpp,"void CharsetEncoder::flush(ByteBuffer& /* out */ )
{
}",603.0,605.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
1048,9881,encode,1,CharsetEncoder.encode,"void CharsetEncoder.encode (CharsetEncoderPtr,LogString,ANY,ByteBuffer)",main\cpp\charsetencoder.cpp,"void CharsetEncoder::encode(CharsetEncoderPtr& enc,
	const LogString& src,
	LogString::const_iterator& iter,
	ByteBuffer& dst)
{
	log4cxx_status_t stat = enc->encode(src, iter, dst);

	if (stat != APR_SUCCESS && iter != src.end())
	{
#if LOG4CXX_LOGCHAR_IS_WCHAR || LOG4CXX_LOGCHAR_IS_UNICHAR
		iter++;
#elif LOG4CXX_LOGCHAR_IS_UTF8

		//  advance past this character and all continuation characters
		while ((*(++iter) & 0xC0) == 0x80);

#else
#error logchar is unrecognized
#endif
		dst.put(Transcoder::LOSSCHAR);
	}
}",608.0,629.0,1.0,1.0,22.0,8,5,11,7,0,0,2,2,0,0,,0,0,8,4,4,void
1049,9918,isTriviallyCopyable,1,CharsetEncoder.isTriviallyCopyable,"bool CharsetEncoder.isTriviallyCopyable (LogString,CharsetEncoderPtr)",main\cpp\charsetencoder.cpp,"bool CharsetEncoder::isTriviallyCopyable(const LogString& src, const CharsetEncoderPtr& enc)
{
	bool result;
#if !LOG4CXX_CHARSET_EBCDIC
	if (dynamic_cast<LocaleCharsetEncoder*>(enc.get()))
	{
		result = src.end() == std::find_if(src.begin(), src.end()
			, [](const logchar& ch) -> bool { return 0x80 <= (unsigned int)ch; });
	}
	else
#endif
		result = !!dynamic_cast<TrivialCharsetEncoder*>(enc.get());
	return result;
}",631.0,644.0,1.0,1.0,14.0,8,4,7,4,1,0,2,2,0,0,,0,0,4,2,2,bool
1050,10051,libraryVersion,1,LOG4CXX_NS.libraryVersion,uint32_t LOG4CXX_NS.libraryVersion (),main\cpp\class.cpp,"uint32_t libraryVersion()
{
	return  LOG4CXX_NS::libraryVersion();
}",87.0,90.0,16.0,1.0,4.0,0,0,1,1,0,0,1,1,0,0,,0,0,0,0,0,uint32_t
1051,10067,Class,1,Class.Class,ANY Class.Class (),main\cpp\class.cpp,"Class::Class()
{
}",93.0,95.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1052,10071,~Class,1,Class.~Class,ANY Class.~Class (),main\cpp\class.cpp,"Class::~Class()
{
}",97.0,99.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1053,10075,toString,1,Class.toString,LogString Class.toString (),main\cpp\class.cpp,"LogString Class::toString() const
{
	return getName();
}",101.0,104.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,LogString
1054,10081,newInstance,1,Class.newInstance,Object Class.newInstance (),main\cpp\class.cpp,"Object* Class::newInstance() const
{
	throw InstantiationException(LOG4CXX_STR(""Cannot create new instances of Class.""));
#if LOG4CXX_RETURN_AFTER_THROW
	return 0;
#endif
}",106.0,112.0,1.0,1.0,7.0,1,1,0,0,0,0,1,1,0,0,,0,0,0,0,0,Object
1055,10089,getRegistry,1,Class.getRegistry,ClassMap Class.getRegistry (),main\cpp\class.cpp,"Class::ClassMap& Class::getRegistry()
{
	static WideLife<ClassMap> registry;
	return registry;
}",116.0,120.0,1.0,1.0,5.0,0,0,1,1,0,0,1,1,0,0,,0,0,0,0,0,ClassMap
1056,10096,forName,1,Class.forName,Class Class.forName (LogString),main\cpp\class.cpp,"const Class& Class::forName(const LogString& className)
{
	LogString lowerName(StringHelper::toLowerCase(className));
	//
	//  check registry using full class name
	//
	const Class* clazz = getRegistry()[lowerName];

	if (clazz == 0)
	{
		LogString::size_type pos = className.find_last_of(LOG4CXX_STR("".$""));

		if (pos != LogString::npos)
		{
			LogString terminalName(lowerName, pos + 1, LogString::npos);
			clazz = getRegistry()[terminalName];

			if (clazz == 0)
			{
				registerClasses();
				clazz = getRegistry()[lowerName];

				if (clazz == 0)
				{
					clazz = getRegistry()[terminalName];
				}
			}
		}
		else
		{
			registerClasses();
			clazz = getRegistry()[lowerName];
		}
	}

	if (clazz == 0)
	{
		throw ClassNotFoundException(className);
	}

	return *clazz;
}",122.0,163.0,1.0,1.0,42.0,21,8,23,7,1,1,6,12,0,1,,0,0,2,1,1,Class
1057,10189,registerClass,1,Class.registerClass,bool Class.registerClass (Class),main\cpp\class.cpp,"bool Class::registerClass(const Class& newClass)
{
	getRegistry()[StringHelper::toLowerCase(newClass.getName())] = &newClass;
	return true;
}",165.0,169.0,1.0,1.0,5.0,5,4,3,2,1,1,1,1,0,1,,0,0,2,1,1,bool
1058,10209,registerClasses,1,Class.registerClasses,void Class.registerClasses (),main\cpp\class.cpp,"void Class::registerClasses()
{
	AsyncAppender::registerClass();
	ConsoleAppender::registerClass();
	FileAppender::registerClass();
	LOG4CXX_NS::db::ODBCAppender::registerClass();
#if (defined(WIN32) || defined(_WIN32))
#if !defined(_WIN32_WCE)
	LOG4CXX_NS::nt::NTEventLogAppender::registerClass();
#endif
	LOG4CXX_NS::nt::OutputDebugStringAppender::registerClass();
#endif
	SMTPAppender::registerClass();
	JSONLayout::registerClass();
	HTMLLayout::registerClass();
	PatternLayout::registerClass();
	SimpleLayout::registerClass();
	XMLLayout::registerClass();
	LevelMatchFilter::registerClass();
	LevelRangeFilter::registerClass();
	StringMatchFilter::registerClass();
	LocationInfoFilter::registerClass();
	LOG4CXX_NS::rolling::RollingFileAppender::registerClass();
	LOG4CXX_NS::rolling::SizeBasedTriggeringPolicy::registerClass();
	LOG4CXX_NS::rolling::TimeBasedRollingPolicy::registerClass();
	LOG4CXX_NS::rolling::ManualTriggeringPolicy::registerClass();
	LOG4CXX_NS::rolling::FixedWindowRolli...",171.0,209.0,1.0,1.0,39.0,39,1,39,26,0,0,1,1,0,0,,0,0,0,0,0,void
1059,10350,ClassNamePatternConverter,1,ClassNamePatternConverter.ClassNamePatternConverter,ANY ClassNamePatternConverter.ClassNamePatternConverter (ANY),main\cpp\classnamepatternconverter.cpp,"ClassNamePatternConverter::ClassNamePatternConverter(
	const std::vector<LogString>& options) :
	NamePatternConverter(LOG4CXX_STR(""Class Name""),
		LOG4CXX_STR(""class name""), options)
{
}",30.0,35.0,1.0,1.0,6.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1060,10355,newInstance,1,ClassNamePatternConverter.newInstance,PatternConverterPtr ClassNamePatternConverter.newInstance (ANY),main\cpp\classnamepatternconverter.cpp,"PatternConverterPtr ClassNamePatternConverter::newInstance(
	const std::vector<LogString>& options)
{
	if (options.size() == 0)
	{
		static WideLife<PatternConverterPtr> def = std::make_shared<ClassNamePatternConverter>(options);
		return def;
	}

	return std::make_shared<ClassNamePatternConverter>(options);
}",37.0,47.0,1.0,1.0,11.0,9,5,9,4,0,0,2,2,0,0,,0,0,2,1,1,PatternConverterPtr
1061,10388,format,1,ClassNamePatternConverter.format,"void ClassNamePatternConverter.format (LoggingEventPtr,LogString,Pool)",main\cpp\classnamepatternconverter.cpp,"void ClassNamePatternConverter::format(
	const LoggingEventPtr& event,
	LogString& toAppendTo,
	Pool& /* p */) const
{
	int initialLength = (int)toAppendTo.length();
	append(toAppendTo, event->getLocationInformation().getClassName());
	abbreviate(initialLength, toAppendTo);
}",49.0,57.0,1.0,1.0,9.0,5,4,6,3,0,0,1,1,0,0,,0,0,6,3,3,void
1062,10427,ClassRegistration,1,ClassRegistration.ClassRegistration,ANY ClassRegistration.ClassRegistration (ClassAccessor),main\cpp\classregistration.cpp,"ClassRegistration::ClassRegistration(ClassAccessor accessor)
{
	Class::registerClass((*accessor)());
}",24.0,27.0,1.0,1.0,4.0,2,2,2,2,0,1,1,1,0,1,,0,0,2,1,1,ANY
1063,10456,ColorEndPatternConverter,1,ColorEndPatternConverter.ColorEndPatternConverter,ANY ColorEndPatternConverter.ColorEndPatternConverter (),main\cpp\colorendpatternconverter.cpp,"ColorEndPatternConverter::ColorEndPatternConverter() :
	LoggingEventPatternConverter(LOG4CXX_STR(""Color End""),
		LOG4CXX_STR(""colorEnd""))
{
}",31.0,35.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1064,10460,newInstance,1,ColorEndPatternConverter.newInstance,PatternConverterPtr ColorEndPatternConverter.newInstance (ANY),main\cpp\colorendpatternconverter.cpp,"PatternConverterPtr ColorEndPatternConverter::newInstance(
	const std::vector<LogString>& /* options */)
{
	static WideLife<PatternConverterPtr> instance = std::make_shared<ColorEndPatternConverter>();
	return instance;
}",37.0,42.0,1.0,1.0,6.0,2,2,3,2,0,0,1,1,0,0,,0,0,2,1,1,PatternConverterPtr
1065,10474,format,1,ColorEndPatternConverter.format,"void ColorEndPatternConverter.format (LoggingEventPtr,LogString,Pool)",main\cpp\colorendpatternconverter.cpp,"void ColorEndPatternConverter::format(
	const LoggingEventPtr& event,
	LogString& toAppendTo,
	Pool& p) const
{

	// Reset all colors on the output(code 0)
	// Code 39 would be to reset colors only
	toAppendTo.append(LOG4CXX_STR(""\x1B[0m""));
}",44.0,53.0,1.0,1.0,10.0,1,1,1,1,0,0,1,1,0,0,,0,0,6,3,3,void
1066,10506,colorToANSISequence,1,colorToANSISequence,"LogString colorToANSISequence (LogString,bool,Pool)",main\cpp\colorstartpatternconverter.cpp,"static LogString colorToANSISequence(const LogString& color, bool isForeground, Pool& pool){
	int numberToConvert = 0;

	if(StringHelper::equalsIgnoreCase(color, LOG4CXX_STR(""BLACK""), LOG4CXX_STR(""black""))){
		numberToConvert = 30;
	}else if(StringHelper::equalsIgnoreCase(color, LOG4CXX_STR(""RED""), LOG4CXX_STR(""red""))){
		numberToConvert = 31;
	}else if(StringHelper::equalsIgnoreCase(color, LOG4CXX_STR(""GREEN""), LOG4CXX_STR(""green""))){
		numberToConvert = 32;
	}else if(StringHelper::equalsIgnoreCase(color, LOG4CXX_STR(""YELLOW""), LOG4CXX_STR(""yellow""))){
		numberToConvert = 33;
	}else if(StringHelper::equalsIgnoreCase(color, LOG4CXX_STR(""BLUE""), LOG4CXX_STR(""blue""))){
		numberToConvert = 34;
	}else if(StringHelper::equalsIgnoreCase(color, LOG4CXX_STR(""MAGENTA""), LOG4CXX_STR(""magenta""))){
		numberToConvert = 35;
	}else if(StringHelper::equalsIgnoreCase(color, LOG4CXX_STR(""CYAN""), LOG4CXX_STR(""cyan""))){
		numberToConvert = 36;
	}else if(StringHelper::equalsIgnoreCase(color, LOG4CXX_STR...",34.0,64.0,1.0,1.0,31.0,7,4,12,6,1,2,4,4,1,2,,0,1,6,3,3,LogString
1067,10669,graphicsModeToANSISequence,1,graphicsModeToANSISequence,"LogString graphicsModeToANSISequence (LogString,Pool)",main\cpp\colorstartpatternconverter.cpp,"static LogString graphicsModeToANSISequence(const LogString& graphicsMode, Pool& pool){
	int numberToConvert = 0;

	if(StringHelper::equalsIgnoreCase(graphicsMode, LOG4CXX_STR(""BOLD""), LOG4CXX_STR(""bold""))){
		numberToConvert = 1;
	}else if(StringHelper::equalsIgnoreCase(graphicsMode, LOG4CXX_STR(""DIM""), LOG4CXX_STR(""dim""))){
		numberToConvert = 2;
	}else if(StringHelper::equalsIgnoreCase(graphicsMode, LOG4CXX_STR(""ITALIC""), LOG4CXX_STR(""italic""))){
		numberToConvert = 3;
	}else if(StringHelper::equalsIgnoreCase(graphicsMode, LOG4CXX_STR(""UNDERLINE""), LOG4CXX_STR(""underline""))){
		numberToConvert = 4;
	}else if(StringHelper::equalsIgnoreCase(graphicsMode, LOG4CXX_STR(""BLINKING""), LOG4CXX_STR(""blinking""))){
		numberToConvert = 5;
	}else if(StringHelper::equalsIgnoreCase(graphicsMode, LOG4CXX_STR(""INVERSE""), LOG4CXX_STR(""inverse""))){
		numberToConvert = 7;
	}else if(StringHelper::equalsIgnoreCase(graphicsMode, LOG4CXX_STR(""STRIKETHROUGH""), LOG4CXX_STR(""strikethrough""))){
		numberToCon...",66.0,91.0,1.0,1.0,26.0,5,3,10,5,0,2,3,3,1,2,,0,1,4,2,2,LogString
1068,10807,convertSingleSequence,1,convertSingleSequence,"LogString convertSingleSequence (LogString,Pool)",main\cpp\colorstartpatternconverter.cpp,"static LogString convertSingleSequence(const LogString& sequence, Pool& pool){
	LogString strInParens;
	bool inParens = false;
	bool hasParens = false;
	size_t x = 0;

	for(x = 0; x < sequence.length(); x++){
		if( sequence[x] == '(' && !inParens ){
			inParens = true;
			hasParens = true;
			continue;
		}else if( sequence[x] == '(' && inParens ){
			// Unbalanced parens - parse invalid
			return LOG4CXX_STR("""");
		}

		if( sequence[x] == ')' && inParens ){
			hasParens = true;
			inParens = false;
			break;
		}

		if( inParens ){
			strInParens.push_back(sequence[x]);
		}
	}

	if( (x != (sequence.length() - 1) || inParens) && hasParens ){
		// Unbalanced parens, or more data in the string than we expected - parse invalid
		return LOG4CXX_STR("""");
	}

	if(StringHelper::startsWith(sequence, LOG4CXX_STR(""fg(""))){
		// Parse foreground
		return colorToANSISequence(strInParens, true, pool);
	}else if(StringHelper::startsWith(sequence, LOG4CXX_STR(""bg(""))){
		return colorToANSISequence(s...",93.0,133.0,1.0,1.0,41.0,25,10,28,7,0,2,9,10,1,2,,0,1,4,2,2,LogString
1069,10951,ColorPatternConverterPrivate,1,ColorPatternConverterPrivate.ColorPatternConverterPrivate,"ANY ColorPatternConverterPrivate.ColorPatternConverterPrivate (LogString,LogString)",main\cpp\colorstartpatternconverter.cpp,"ColorPatternConverterPrivate( const LogString& name, const LogString& style ) :
		PatternConverterPrivate( name, style ){}",137.0,138.0,2.0,42.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ANY
1070,10963,ColorStartPatternConverter,1,ColorStartPatternConverter.ColorStartPatternConverter,ANY ColorStartPatternConverter.ColorStartPatternConverter (),main\cpp\colorstartpatternconverter.cpp,"ColorStartPatternConverter::ColorStartPatternConverter() :
	LoggingEventPatternConverter(std::make_unique<ColorPatternConverterPrivate>(LOG4CXX_STR(""Color Start""),
		LOG4CXX_STR(""colorStart"")))
{
}",148.0,152.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1071,10967,newInstance,1,ColorStartPatternConverter.newInstance,PatternConverterPtr ColorStartPatternConverter.newInstance (ANY),main\cpp\colorstartpatternconverter.cpp,"PatternConverterPtr ColorStartPatternConverter::newInstance(
	const std::vector<LogString>& /* options */)
{
	static WideLife<PatternConverterPtr> instance = std::make_shared<ColorStartPatternConverter>();
	return instance;
}",154.0,159.0,1.0,1.0,6.0,2,2,3,2,0,0,1,1,0,0,,0,0,2,1,1,PatternConverterPtr
1072,10981,format,1,ColorStartPatternConverter.format,"void ColorStartPatternConverter.format (LoggingEventPtr,LogString,Pool)",main\cpp\colorstartpatternconverter.cpp,"void ColorStartPatternConverter::format(
	const LoggingEventPtr& event,
	LogString& toAppendTo,
	Pool& p) const
{

	LOG4CXX_NS::LevelPtr lvl = event->getLevel();

	switch (lvl->toInt())
	{
		case LOG4CXX_NS::Level::FATAL_INT:
			toAppendTo.append(priv->m_fatalColor);
			break;

		case LOG4CXX_NS::Level::ERROR_INT:
			toAppendTo.append(priv->m_errorColor);
			break;

		case LOG4CXX_NS::Level::WARN_INT:
			toAppendTo.append(priv->m_warnColor);
			break;

		case LOG4CXX_NS::Level::INFO_INT:
			toAppendTo.append(priv->m_infoColor);
			break;

		case LOG4CXX_NS::Level::DEBUG_INT:
			toAppendTo.append(priv->m_debugColor);
			break;

		case LOG4CXX_NS::Level::TRACE_INT:
			toAppendTo.append(priv->m_traceColor);
			break;

		default:
			break;
	}
}",161.0,198.0,1.0,21.0,38.0,39,4,27,6,0,0,9,2,0,0,,0,0,6,3,3,void
1073,11129,setFatalColor,1,ColorStartPatternConverter.setFatalColor,void ColorStartPatternConverter.setFatalColor (LogString),main\cpp\colorstartpatternconverter.cpp,"void ColorStartPatternConverter::setFatalColor(const LogString& color){
	parseColor(color, &(priv->m_fatalColor));
}",200.0,202.0,1.0,21.0,3.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1074,11147,setErrorColor,1,ColorStartPatternConverter.setErrorColor,void ColorStartPatternConverter.setErrorColor (LogString),main\cpp\colorstartpatternconverter.cpp,"void ColorStartPatternConverter::setErrorColor(const LogString& color){
	parseColor(color, &(priv->m_errorColor));
}",204.0,206.0,1.0,21.0,3.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1075,11165,setWarnColor,1,ColorStartPatternConverter.setWarnColor,void ColorStartPatternConverter.setWarnColor (LogString),main\cpp\colorstartpatternconverter.cpp,"void ColorStartPatternConverter::setWarnColor(const LogString& color){
	parseColor(color, &(priv->m_warnColor));
}",208.0,210.0,1.0,21.0,3.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1076,11183,setInfoColor,1,ColorStartPatternConverter.setInfoColor,void ColorStartPatternConverter.setInfoColor (LogString),main\cpp\colorstartpatternconverter.cpp,"void ColorStartPatternConverter::setInfoColor(const LogString& color){
	parseColor(color, &(priv->m_infoColor));
}",212.0,214.0,1.0,21.0,3.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1077,11201,setDebugColor,1,ColorStartPatternConverter.setDebugColor,void ColorStartPatternConverter.setDebugColor (LogString),main\cpp\colorstartpatternconverter.cpp,"void ColorStartPatternConverter::setDebugColor(const LogString& color){
	parseColor(color, &(priv->m_debugColor));
}",216.0,218.0,1.0,21.0,3.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1078,11219,setTraceColor,1,ColorStartPatternConverter.setTraceColor,void ColorStartPatternConverter.setTraceColor (LogString),main\cpp\colorstartpatternconverter.cpp,"void ColorStartPatternConverter::setTraceColor(const LogString& color){
	parseColor(color, &(priv->m_traceColor));
}",220.0,222.0,1.0,21.0,3.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1079,11237,parseColor,1,ColorStartPatternConverter.parseColor,"void ColorStartPatternConverter.parseColor (LogString,LogString*)",main\cpp\colorstartpatternconverter.cpp,"void ColorStartPatternConverter::parseColor(const LogString& color, LogString* result){
	LogString lower = StringHelper::toLowerCase(color);
	Pool pool;

	// If the color we are trying to parse is blank, clear our result
	if(StringHelper::trim(color).empty() ||
			StringHelper::equalsIgnoreCase(color,
										   LOG4CXX_STR(""NONE""),
										   LOG4CXX_STR(""none""))){
		result->clear();
		return;
	}

	if( StringHelper::startsWith(lower, LOG4CXX_STR(""\\x1b"")) ){
		if( color[color.size() - 1] != 'm' ){
			// In order for this to be a valid ANSI escape sequence,
			// it must end with an 'm'.  If it does not, reject.
			return;
		}
		// We start with an escape sequence, copy the data over after the escape byte
		result->clear();
		result->append(LOG4CXX_STR(""\x1b""));
		for( size_t x = 4; x < color.size(); x++ ){
			result->push_back(color[x]);
		}
	}else{
		// We do not start with an escape sequence: try to parse color
		// Escape sequence information:
		// https://gist.github.com/fn...",224.0,277.0,1.0,1.0,54.0,19,8,20,5,0,4,5,7,3,4,,0,4,4,2,2,void
1080,11450,Configurator,1,Configurator.Configurator,ANY Configurator.Configurator (),main\cpp\configurator.cpp,"Configurator::Configurator()
{
}",31.0,33.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1081,11478,ConsoleAppenderPriv,1,ConsoleAppenderPriv.ConsoleAppenderPriv,ANY ConsoleAppenderPriv.ConsoleAppenderPriv (LogString),main\cpp\consoleappender.cpp,"ConsoleAppenderPriv(LogString target) :
		WriterAppenderPriv(),
		target(target) {}",32.0,34.0,2.0,19.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1082,11486,ConsoleAppender,1,ConsoleAppender.ConsoleAppender,ANY ConsoleAppender.ConsoleAppender (),main\cpp\consoleappender.cpp,"ConsoleAppender::ConsoleAppender(const LayoutPtr& layout, const LogString& target)
	: WriterAppender (std::make_unique<ConsoleAppenderPriv>(target))
{
	setLayout(layout);
	setTarget(target);
	Pool p;
	ConsoleAppender::activateOptions(p);
}",57.0,64.0,1.0,1.0,8.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ANY
1083,11524,~ConsoleAppender,1,ConsoleAppender.~ConsoleAppender,ANY ConsoleAppender.~ConsoleAppender (),main\cpp\consoleappender.cpp,"ConsoleAppender::~ConsoleAppender()
{
	finalize();
}",66.0,69.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1084,11529,getSystemOut,1,ConsoleAppender.getSystemOut,LogString ConsoleAppender.getSystemOut (),main\cpp\consoleappender.cpp,"const LogString& ConsoleAppender::getSystemOut()
{
	static const WideLife<LogString> name(LOG4CXX_STR(""System.out""));
	return name;
}",71.0,75.0,1.0,1.0,5.0,0,0,1,1,1,0,1,1,0,0,,0,0,0,0,0,LogString
1085,11539,getSystemErr,1,ConsoleAppender.getSystemErr,LogString ConsoleAppender.getSystemErr (),main\cpp\consoleappender.cpp,"const LogString& ConsoleAppender::getSystemErr()
{
	static const WideLife<LogString> name(LOG4CXX_STR(""System.err""));
	return name;
}",77.0,81.0,1.0,1.0,5.0,0,0,1,1,1,0,1,1,0,0,,0,0,0,0,0,LogString
1086,11549,setTarget,1,ConsoleAppender.setTarget,void ConsoleAppender.setTarget (LogString),main\cpp\consoleappender.cpp,"void ConsoleAppender::setTarget(const LogString& value)
{
	LogString v = StringHelper::trim(value);

	if (StringHelper::equalsIgnoreCase(v,
			LOG4CXX_STR(""SYSTEM.OUT""), LOG4CXX_STR(""system.out"")))
	{
		_priv->target = getSystemOut();
	}
	else if (StringHelper::equalsIgnoreCase(v,
			LOG4CXX_STR(""SYSTEM.ERR""), LOG4CXX_STR(""system.err"")))
	{
		_priv->target = getSystemErr();
	}
	else
	{
		targetWarn(value);
	}
}",83.0,101.0,1.0,2.0,19.0,7,4,6,4,0,2,2,2,1,2,,0,2,2,1,1,void
1087,11614,getTarget,1,ConsoleAppender.getTarget,LogString ConsoleAppender.getTarget (),main\cpp\consoleappender.cpp,"LogString ConsoleAppender::getTarget() const
{
	return _priv->target;
}",103.0,106.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,LogString
1088,11629,targetWarn,1,ConsoleAppender.targetWarn,void ConsoleAppender.targetWarn (LogString),main\cpp\consoleappender.cpp,"void ConsoleAppender::targetWarn(const LogString& val)
{
	LogLog::warn(((LogString) LOG4CXX_STR(""[""))
		+ val +  LOG4CXX_STR(""] should be system.out or system.err.""));
	LogLog::warn(LOG4CXX_STR(""Using previously set target, System.out by default.""));
}",108.0,113.0,1.0,1.0,6.0,5,3,3,2,0,2,1,1,0,2,,0,0,2,1,1,void
1089,11653,activateOptions,1,ConsoleAppender.activateOptions,void ConsoleAppender.activateOptions (Pool),main\cpp\consoleappender.cpp,"void ConsoleAppender::activateOptions(Pool& p)
{
	if (StringHelper::equalsIgnoreCase(_priv->target,
			LOG4CXX_STR(""SYSTEM.OUT""), LOG4CXX_STR(""system.out"")))
	{
		WriterPtr writer1 = std::make_shared<SystemOutWriter>();
		setWriter(writer1);
	}
	else if (StringHelper::equalsIgnoreCase(_priv->target,
			LOG4CXX_STR(""SYSTEM.ERR""), LOG4CXX_STR(""system.err"")))
	{
		WriterPtr writer1 = std::make_shared<SystemErrWriter>();
		setWriter(writer1);
	}

	WriterAppender::activateOptions(p);
}",115.0,131.0,1.0,36.0,17.0,7,4,7,6,0,2,2,2,1,2,,0,1,2,1,1,void
1090,11723,setOption,1,ConsoleAppender.setOption,"void ConsoleAppender.setOption (LogString,LogString)",main\cpp\consoleappender.cpp,"void ConsoleAppender::setOption(const LogString& option, const LogString& value)
{
	if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""TARGET""), LOG4CXX_STR(""target"")))
	{
		setTarget(value);
	}
	else
	{
		WriterAppender::setOption(option, value);
	}
}",133.0,144.0,1.0,1.0,12.0,1,1,3,3,0,1,2,2,1,1,,0,1,4,2,2,void
1091,11768,CyclicBufferPriv,1,CyclicBufferPriv.CyclicBufferPriv,ANY CyclicBufferPriv.CyclicBufferPriv (int),main\cpp\cyclicbuffer.cpp,"CyclicBufferPriv(int maxSize1) :
		ea(maxSize1), first(0), last(0), numElems(0), maxSize(maxSize1) {}",30.0,31.0,2.0,68.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1092,11778,CyclicBuffer,1,CyclicBuffer.CyclicBuffer,ANY CyclicBuffer.CyclicBuffer (int),main\cpp\cyclicbuffer.cpp,"CyclicBuffer::CyclicBuffer(int maxSize1)
	: m_priv(std::make_unique<CyclicBufferPriv>(maxSize1))
{
	if (maxSize1 < 1)
	{
		LogString msg(LOG4CXX_STR(""The maxSize argument (""));
		Pool p;
		StringHelper::toString(maxSize1, p, msg);
		msg.append(LOG4CXX_STR("") is not a positive integer.""));
		throw IllegalArgumentException(msg);
	}
}",45.0,56.0,1.0,1.0,12.0,4,3,7,4,0,1,2,2,0,1,,0,0,2,1,1,ANY
1093,11809,~CyclicBuffer,1,CyclicBuffer.~CyclicBuffer,ANY CyclicBuffer.~CyclicBuffer (),main\cpp\cyclicbuffer.cpp,"CyclicBuffer::~CyclicBuffer()
{
}",58.0,60.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1094,11813,add,1,CyclicBuffer.add,void CyclicBuffer.add (ANY),main\cpp\cyclicbuffer.cpp,"void CyclicBuffer::add(const spi::LoggingEventPtr& event)
{
	m_priv->ea[m_priv->last] = event;

	if (++m_priv->last == m_priv->maxSize)
	{
		m_priv->last = 0;
	}

	if (m_priv->numElems < m_priv->maxSize)
	{
		m_priv->numElems++;
	}
	else if (++m_priv->first == m_priv->maxSize)
	{
		m_priv->first = 0;
	}
}",65.0,82.0,1.0,1.0,18.0,15,7,9,2,0,0,3,3,0,0,,0,0,2,1,1,void
1095,11872,get,1,CyclicBuffer.get,LoggingEventPtr CyclicBuffer.get (int),main\cpp\cyclicbuffer.cpp,"spi::LoggingEventPtr CyclicBuffer::get()
{
	LoggingEventPtr r;

	if (m_priv->numElems > 0)
	{
		m_priv->numElems--;
		r = m_priv->ea[m_priv->first];
		m_priv->ea[m_priv->first] = 0;

		if (++m_priv->first == m_priv->maxSize)
		{
			m_priv->first = 0;
		}
	}

	return r;
}",104.0,121.0,1.0,1.0,18.0,10,7,7,2,0,0,2,2,0,0,,0,0,0,0,0,LoggingEventPtr
1096,11955,resize,1,CyclicBuffer.resize,void CyclicBuffer.resize (int),main\cpp\cyclicbuffer.cpp,"void CyclicBuffer::resize(int newSize)
{
	if (newSize < 0)
	{
		LogString msg(LOG4CXX_STR(""Negative array size [""));
		Pool p;
		StringHelper::toString(newSize, p, msg);
		msg.append(LOG4CXX_STR(""] not allowed.""));
		throw IllegalArgumentException(msg);
	}

	if (newSize == m_priv->numElems)
	{
		return;    // nothing to do
	}

	LoggingEventList temp(newSize);

	int loopLen = newSize < m_priv->numElems ? newSize : m_priv->numElems;
	int i;

	for (i = 0; i < loopLen; i++)
	{
		temp[i] = m_priv->ea[m_priv->first];
		m_priv->ea[m_priv->first] = 0;

		if (++m_priv->first == m_priv->numElems)
		{
			m_priv->first = 0;
		}
	}

	m_priv->ea = temp;
	m_priv->first = 0;
	m_priv->numElems = loopLen;
	m_priv->maxSize = newSize;

	if (loopLen == newSize)
	{
		m_priv->last = 0;
	}
	else
	{
		m_priv->last = loopLen;
	}
}",127.0,172.0,1.0,1.0,46.0,39,9,37,8,0,1,6,7,0,1,,0,0,2,1,1,void
1097,12094,getMaxSize,1,CyclicBuffer.getMaxSize,int CyclicBuffer.getMaxSize (),main\cpp\cyclicbuffer.cpp,"int CyclicBuffer::getMaxSize() const
{
	return m_priv->maxSize;
}",174.0,177.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,int
1098,12102,length,1,CyclicBuffer.length,int CyclicBuffer.length (),main\cpp\cyclicbuffer.cpp,"int CyclicBuffer::length() const
{
	return m_priv->numElems;
}",179.0,182.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,int
1099,12120,DatagramPacketPriv,1,DatagramPacketPriv.DatagramPacketPriv,"ANY DatagramPacketPriv.DatagramPacketPriv (void*,int)",main\cpp\datagrampacket.cpp,"DatagramPacketPriv(void* buf1, int offset1, int length1,
		InetAddressPtr address1, int port1)
		: buf(buf1), offset(offset1), length(length1), address(address1), port(port1)
	{
	}",41.0,45.0,2.0,2.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,10,5,5,ANY
1100,12157,DatagramPacket,1,DatagramPacket.DatagramPacket,"ANY DatagramPacket.DatagramPacket (void*,int)",main\cpp\datagrampacket.cpp,"DatagramPacket::DatagramPacket(void* buf1, int offset1, int length1,
	InetAddressPtr address1, int port1)
	: m_priv(std::make_unique<DatagramPacketPriv>(buf1, offset1, length1, address1, port1))
{
}",90.0,94.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,10,5,5,ANY
1101,12187,~DatagramPacket,1,DatagramPacket.~DatagramPacket,ANY DatagramPacket.~DatagramPacket (),main\cpp\datagrampacket.cpp,"DatagramPacket::~DatagramPacket()
{
}",96.0,98.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1102,12191,getAddress,1,DatagramPacket.getAddress,InetAddressPtr DatagramPacket.getAddress (),main\cpp\datagrampacket.cpp,"InetAddressPtr DatagramPacket::getAddress() const
{
	return m_priv->address;
}",100.0,103.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,InetAddressPtr
1103,12199,getData,1,DatagramPacket.getData,void* DatagramPacket.getData (),main\cpp\datagrampacket.cpp,"void* DatagramPacket::getData() const
{
	return m_priv->buf;
}",105.0,108.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,void*
1104,12207,getLength,1,DatagramPacket.getLength,int DatagramPacket.getLength (),main\cpp\datagrampacket.cpp,"int DatagramPacket::getLength() const
{
	return m_priv->length;
}",110.0,113.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,int
1105,12215,getOffset,1,DatagramPacket.getOffset,int DatagramPacket.getOffset (),main\cpp\datagrampacket.cpp,"int DatagramPacket::getOffset() const
{
	return m_priv->offset;
}",115.0,118.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,int
1106,12223,getPort,1,DatagramPacket.getPort,int DatagramPacket.getPort (),main\cpp\datagrampacket.cpp,"int DatagramPacket::getPort() const
{
	return m_priv->port;
}",120.0,123.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,int
1107,12231,setAddress,1,DatagramPacket.setAddress,void DatagramPacket.setAddress (InetAddressPtr),main\cpp\datagrampacket.cpp,"void DatagramPacket::setAddress(InetAddressPtr address1)
{
	m_priv->address = address1;
}",125.0,128.0,1.0,1.0,4.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1108,12241,setData,1,DatagramPacket.setData,void DatagramPacket.setData (void*),main\cpp\datagrampacket.cpp,"void DatagramPacket::setData(void* buf1, int offset1, int length1)
{
	m_priv->buf = buf1;
	m_priv->offset = offset1;
	m_priv->length = length1;
}",135.0,140.0,1.0,1.0,6.0,2,2,2,2,0,0,1,1,0,0,,0,0,6,3,3,void
1109,12273,setLength,1,DatagramPacket.setLength,void DatagramPacket.setLength (int),main\cpp\datagrampacket.cpp,"void DatagramPacket::setLength(int length1)
{
	m_priv->length = length1;
}",142.0,145.0,1.0,1.0,4.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1110,12283,setPort,1,DatagramPacket.setPort,void DatagramPacket.setPort (int),main\cpp\datagrampacket.cpp,"void DatagramPacket::setPort(int port1)
{
	m_priv->port = port1;
}",147.0,150.0,1.0,1.0,4.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1111,12314,DatagramSocket,1,DatagramSocket.DatagramSocket,ANY DatagramSocket.DatagramSocket (ANY),main\cpp\datagramsocket.cpp,"DatagramSocket::DatagramSocket(std::unique_ptr<DatagramSocketPriv> priv) :
	m_priv(std::move(priv))
{}",29.0,31.0,1.0,2.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1112,12319,~DatagramSocket,1,DatagramSocket.~DatagramSocket,ANY DatagramSocket.~DatagramSocket (),main\cpp\datagramsocket.cpp,"DatagramSocket::~DatagramSocket()
{
	try
	{
		close();
	}
	catch (SocketException&)
	{
	}
}",33.0,42.0,1.0,1.0,10.0,0,0,0,0,0,0,2,2,0,0,,0,0,0,0,0,ANY
1113,12327,close,1,DatagramSocket.close,void DatagramSocket.close (),main\cpp\datagramsocket.cpp,"void DatagramSocket::close()
{
}",45.0,47.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,void
1114,12331,getInetAddress,1,DatagramSocket.getInetAddress,InetAddressPtr DatagramSocket.getInetAddress (),main\cpp\datagramsocket.cpp,"InetAddressPtr DatagramSocket::getInetAddress() const
{
	return m_priv->address;
}",49.0,52.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,InetAddressPtr
1115,12339,getLocalAddress,1,DatagramSocket.getLocalAddress,InetAddressPtr DatagramSocket.getLocalAddress (),main\cpp\datagramsocket.cpp,"InetAddressPtr DatagramSocket::getLocalAddress() const
{
	return m_priv->localAddress;
}",54.0,57.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,InetAddressPtr
1116,12347,getLocalPort,1,DatagramSocket.getLocalPort,int DatagramSocket.getLocalPort (),main\cpp\datagramsocket.cpp,"int DatagramSocket::getLocalPort() const
{
	return m_priv->localPort;
}",59.0,62.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,int
1117,12355,getPort,1,DatagramSocket.getPort,int DatagramSocket.getPort (),main\cpp\datagramsocket.cpp,"int DatagramSocket::getPort() const
{
	return m_priv->port;
}",64.0,67.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,int
1118,12363,isBound,1,DatagramSocket.isBound,bool DatagramSocket.isBound (),main\cpp\datagramsocket.cpp,"bool DatagramSocket::isBound() const
{
	return m_priv->localPort != 0;
}",69.0,72.0,1.0,1.0,4.0,2,2,1,1,0,0,1,1,0,0,,0,0,0,0,0,bool
1119,12373,isConnected,1,DatagramSocket.isConnected,bool DatagramSocket.isConnected (),main\cpp\datagramsocket.cpp,"bool DatagramSocket::isConnected() const
{
	return m_priv->port != 0;
}",74.0,77.0,1.0,1.0,4.0,2,2,1,1,0,0,1,1,0,0,,0,0,0,0,0,bool
1120,12383,create,1,DatagramSocket.create,DatagramSocketUniquePtr DatagramSocket.create (),main\cpp\datagramsocket.cpp,"DatagramSocketUniquePtr DatagramSocket::create(int localPort1, InetAddressPtr localAddress1){
	auto sock = std::make_unique<APRDatagramSocket>(localPort1, localAddress1);

	sock->bind(localPort1, localAddress1);
	return sock;
}",91.0,96.0,1.0,1.0,6.0,1,1,1,1,1,0,1,1,0,0,,0,0,4,2,2,DatagramSocketUniquePtr
1121,12467,Date,1,Date.Date,ANY Date.Date (),main\cpp\date.cpp,"Date::Date(log4cxx_time_t t) : time(t)
{
}",39.0,41.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1122,12476,~Date,1,Date.~Date,ANY Date.~Date (),main\cpp\date.cpp,"Date::~Date()
{
}",43.0,45.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1123,12480,getMicrosecondsPerDay,1,Date.getMicrosecondsPerDay,log4cxx_time_t Date.getMicrosecondsPerDay (),main\cpp\date.cpp,"log4cxx_time_t Date::getMicrosecondsPerDay()
{
	return 86400000000ull;
}",47.0,50.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,log4cxx_time_t
1124,12486,getMicrosecondsPerSecond,1,Date.getMicrosecondsPerSecond,log4cxx_time_t Date.getMicrosecondsPerSecond (),main\cpp\date.cpp,"log4cxx_time_t Date::getMicrosecondsPerSecond()
{
	return LOG4CXX_USEC_PER_SEC;
}",52.0,55.0,1.0,8.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,log4cxx_time_t
1125,12494,getNextSecond,1,Date.getNextSecond,log4cxx_time_t Date.getNextSecond (),main\cpp\date.cpp,"log4cxx_time_t Date::getNextSecond() const
{
	return ((time / LOG4CXX_USEC_PER_SEC) + 1) * LOG4CXX_USEC_PER_SEC;
}",58.0,61.0,1.0,17.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,log4cxx_time_t
1126,12510,setGetCurrentTimeFunction,1,Date.setGetCurrentTimeFunction,void Date.setGetCurrentTimeFunction (GetCurrentTimeFn),main\cpp\date.cpp,"void Date::setGetCurrentTimeFunction(GetCurrentTimeFn fn){
	getCurrentTimeFn = fn;
}",63.0,65.0,1.0,1.0,3.0,1,1,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1127,12518,currentTime,1,Date.currentTime,log4cxx_time_t Date.currentTime (),main\cpp\date.cpp,"log4cxx_time_t Date::currentTime(){
	return getCurrentTimeFn ? getCurrentTimeFn() : getCurrentTimeStd();
}",67.0,69.0,1.0,1.0,3.0,1,1,1,1,3,0,1,1,0,0,,0,0,0,0,0,log4cxx_time_t
1128,12527,getCurrentTimeStd,1,Date.getCurrentTimeStd,log4cxx_time_t Date.getCurrentTimeStd (),main\cpp\date.cpp,"log4cxx_time_t Date::getCurrentTimeStd(){
	return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}",71.0,73.0,1.0,1.0,3.0,11,3,7,3,0,0,1,1,0,0,,0,0,0,0,0,log4cxx_time_t
1129,12571,~DateFormat,1,DateFormat.~DateFormat,ANY DateFormat.~DateFormat (),main\cpp\dateformat.cpp,DateFormat::~DateFormat() {},28.0,28.0,1.0,28.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1130,12575,setTimeZone,1,DateFormat.setTimeZone,void DateFormat.setTimeZone (TimeZonePtr),main\cpp\dateformat.cpp,void DateFormat::setTimeZone(const TimeZonePtr&) {},30.0,30.0,1.0,51.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
1131,12580,numberFormat,1,DateFormat.numberFormat,"void DateFormat.numberFormat (LogString,int,Pool)",main\cpp\dateformat.cpp,"void DateFormat::numberFormat(LogString& s, int n, Pool& p) const
{
	StringHelper::toString(n, p, s);
}",32.0,35.0,1.0,1.0,4.0,1,1,4,4,0,1,1,1,0,1,,0,0,6,3,3,void
1132,12594,DateFormat,1,DateFormat.DateFormat,ANY DateFormat.DateFormat (),main\cpp\dateformat.cpp,DateFormat::DateFormat() {},37.0,37.0,1.0,27.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1133,12630,DatePatternConverterPrivate,1,DatePatternConverterPrivate.DatePatternConverterPrivate,"ANY DatePatternConverterPrivate.DatePatternConverterPrivate (LogString,LogString,DateFormatPtr)",main\cpp\datepatternconverter.cpp,"DatePatternConverterPrivate( const LogString& name, const LogString& style, DateFormatPtr _df ):
		PatternConverterPrivate(name, style),
		df(_df) {}",39.0,41.0,2.0,12.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ANY
1134,12640,DatePatternConverter,1,DatePatternConverter.DatePatternConverter,ANY DatePatternConverter.DatePatternConverter (ANY),main\cpp\datepatternconverter.cpp,"DatePatternConverter::DatePatternConverter(
	const std::vector<LogString>& options) :
	LoggingEventPatternConverter (std::make_unique<DatePatternConverterPrivate>(LOG4CXX_STR(""Class Name""),
			LOG4CXX_STR(""class name""), getDateFormat(options)))
{
}",52.0,57.0,1.0,1.0,6.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1135,12645,~DatePatternConverter,1,DatePatternConverter.~DatePatternConverter,ANY DatePatternConverter.~DatePatternConverter (),main\cpp\datepatternconverter.cpp,DatePatternConverter::~DatePatternConverter() {},59.0,59.0,1.0,48.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1136,12649,getDateFormat,1,DatePatternConverter.getDateFormat,DateFormatPtr DatePatternConverter.getDateFormat (OptionsList),main\cpp\datepatternconverter.cpp,"DateFormatPtr DatePatternConverter::getDateFormat(const OptionsList& options)
{
	DateFormatPtr df;
	int maximumCacheValidity = 1000000;

	if (options.size() == 0)
	{
		df = std::make_shared<ISO8601DateFormat>();
	}
	else
	{
		LogString dateFormatStr(options[0]);

		if (dateFormatStr.empty() ||
			StringHelper::equalsIgnoreCase(dateFormatStr,
				LOG4CXX_STR(""ISO8601""), LOG4CXX_STR(""iso8601"")))
		{
			df = std::make_shared<ISO8601DateFormat>();
		}
		else if (StringHelper::equalsIgnoreCase(dateFormatStr,
				LOG4CXX_STR(""ABSOLUTE""), LOG4CXX_STR(""absolute"")))
		{
			df = std::make_shared<AbsoluteTimeDateFormat>();
		}
		else if (StringHelper::equalsIgnoreCase(dateFormatStr,
				LOG4CXX_STR(""DATE""), LOG4CXX_STR(""date"")))
		{
			df = std::make_shared<DateTimeDateFormat>();
		}
		else
		{
			if (dateFormatStr.find(0x25 /*'%'*/) == std::string::npos)
			{
				try
				{
					df = std::make_shared<SimpleDateFormat>(dateFormatStr);
					maximumCacheValidity =
						CachedDateFormat::getMaxim...",61.0,131.0,1.0,1.0,71.0,12,7,11,5,0,0,3,3,0,0,,0,0,2,1,1,DateFormatPtr
1137,12848,newInstance,1,DatePatternConverter.newInstance,PatternConverterPtr DatePatternConverter.newInstance (ANY),main\cpp\datepatternconverter.cpp,"PatternConverterPtr DatePatternConverter::newInstance(
	const std::vector<LogString>& options)
{
	return std::make_shared<DatePatternConverter>(options);
}",133.0,137.0,1.0,1.0,5.0,3,3,3,3,2,0,1,1,0,0,,0,0,2,1,1,PatternConverterPtr
1138,12861,format,1,DatePatternConverter.format,"void DatePatternConverter.format (LoggingEventPtr,LogString,Pool)",main\cpp\datepatternconverter.cpp,"void DatePatternConverter::format(
	const DatePtr& date,
	LogString& toAppendTo,
	Pool& p) const
{
	priv->df->format(toAppendTo, date->getTime(), p);
}",177.0,183.0,1.0,1.0,7.0,5,3,4,4,0,0,1,1,0,0,,0,0,6,3,3,void
1139,13014,DBAppenderPriv,1,DBAppenderPriv.DBAppenderPriv,ANY DBAppenderPriv.DBAppenderPriv (),main\cpp\dbappender.cpp,"DBAppenderPriv() :
        AppenderSkeletonPrivate()
	{
		static bool initialized = false;
		if (!initialized)
		{
			initialized = true;
			apr_status_t stat = apr_dbd_init(m_pool.getAPRPool());
			assert(stat == APR_SUCCESS);
		}
	}",53.0,63.0,5.0,2.0,11.0,6,4,7,4,0,1,2,2,0,0,,0,1,0,0,0,ANY
1140,13064,getFormatSpecifiers,1,getFormatSpecifiers,PatternMap getFormatSpecifiers (),main\cpp\odbcappender.cpp,"static PatternMap getFormatSpecifiers()
{
	PatternMap specs;
	if (specs.empty())
	{
		RULES_PUT(""logger"", LoggerPatternConverter);
		RULES_PUT(""class"", ClassNamePatternConverter);
		RULES_PUT(""time"", DatePatternConverter);
		RULES_PUT(""shortfilename"", ShortFileLocationPatternConverter);
		RULES_PUT(""fullfilename"", FileLocationPatternConverter);
		RULES_PUT(""location"", FullLocationPatternConverter);
		RULES_PUT(""line"", LineLocationPatternConverter);
		RULES_PUT(""message"", MessagePatternConverter);
		RULES_PUT(""method"", MethodLocationPatternConverter);
		RULES_PUT(""level"", LevelPatternConverter);
		RULES_PUT(""thread"", ThreadPatternConverter);
		RULES_PUT(""threadname"", ThreadUsernamePatternConverter);
		RULES_PUT(""mdc"", MDCPatternConverter);
		RULES_PUT(""ndc"", NDCPatternConverter);
	}
	return specs;
}",151.0,172.0,1.0,2.0,22.0,40,1,41,14,3,0,2,2,0,0,,0,0,0,0,0,PatternMap
1141,13298,DBAppender,1,DBAppender.DBAppender,ANY DBAppender.DBAppender (),main\cpp\dbappender.cpp,"DBAppender::DBAppender()
    : AppenderSkeleton (std::make_unique<DBAppenderPriv>())
{
}",102.0,105.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1142,13302,~DBAppender,1,DBAppender.~DBAppender,ANY DBAppender.~DBAppender (),main\cpp\dbappender.cpp,"DBAppender::~DBAppender()
{
    close();
}",107.0,110.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1143,13307,close,1,DBAppender.close,void DBAppender.close (),main\cpp\dbappender.cpp,"void DBAppender::close(){
    if(_priv->m_driver && _priv->m_databaseHandle){
        apr_dbd_close(_priv->m_driver, _priv->m_databaseHandle);
    }
    _priv->m_driver = nullptr;
    _priv->m_databaseHandle = nullptr;
}",112.0,118.0,1.0,7.0,7.0,21,5,6,1,0,0,2,2,0,0,,0,0,0,0,0,void
1144,13379,setOption,1,DBAppender.setOption,"void DBAppender.setOption (LogString,LogString)",main\cpp\dbappender.cpp,"void DBAppender::setOption(const LogString& option, const LogString& value){
    if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""COLUMNMAPPING""), LOG4CXX_STR(""columnmapping"")))
    {
        _priv->mappedName.push_back(value);
    }
    else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""DRIVERNAME""), LOG4CXX_STR(""drivername"")))
    {
        Transcoder::encodeUTF8(value, _priv->driverName);
    }
    else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""DRIVERPARAMS""), LOG4CXX_STR(""driverparams"")))
    {
        Transcoder::encodeUTF8(value, _priv->driverParams);
    }
    else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""DATABASENAME""), LOG4CXX_STR(""databasename"")))
    {
        Transcoder::encodeUTF8(value, _priv->databaseName);
    }
    else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""SQL""), LOG4CXX_STR(""sql"")))
    {
        Transcoder::encodeUTF8(value, _priv->sqlStatement);
    }
    else
    {
        AppenderSkeleton::setOpti...",120.0,145.0,1.0,8.0,26.0,5,3,4,4,0,1,2,2,1,1,,0,1,4,2,2,void
1145,13530,activateOptions,1,DBAppender.activateOptions,void DBAppender.activateOptions (ANY),main\cpp\dbappender.cpp,"void DBAppender::activateOptions(helpers::Pool& p){
    apr_status_t stat = apr_dbd_get_driver(_priv->m_pool.getAPRPool(),
                                           _priv->driverName.c_str(),
                                           const_cast<const apr_dbd_driver_t**>(&_priv->m_driver));

    if(stat != APR_SUCCESS){
        LogString errMsg = LOG4CXX_STR(""Unable to get driver named "");
        LOG4CXX_DECODE_CHAR(driverName, _priv->driverName);
        errMsg.append(driverName);
        LogLog::error(errMsg);
        _priv->errorHandler->error(errMsg);
        return;
    }

    stat = apr_dbd_open(_priv->m_driver,
                        _priv->m_pool.getAPRPool(),
                        _priv->driverParams.c_str(),
                        &_priv->m_databaseHandle);
    if(stat != APR_SUCCESS){
        LogLog::error(LOG4CXX_STR(""Unable to open database""));
        _priv->errorHandler->error(LOG4CXX_STR(""Unable to open database""));
        return;
    }

    if(!_priv->databas...",147.0,209.0,1.0,43.0,63.0,110,9,59,13,0,6,7,8,0,5,,0,2,2,1,1,void
1146,13984,append,1,DBAppender.append,"void DBAppender.append (ANY,ANY)",main\cpp\dbappender.cpp,"void DBAppender::append(const spi::LoggingEventPtr& event, helpers::Pool& p){
	std::vector<std::string> ls_args;
    std::vector<const char*> args;
    int stat;
    int num_rows;

    if(_priv->m_driver == nullptr ||
            _priv->m_databaseHandle == nullptr ||
            _priv->preparedStmt == nullptr){
        _priv->errorHandler->error(LOG4CXX_STR(""DBAppender not initialized properly: logging not available""));
        return;
    }

    for(auto& converter : _priv->converters){
        LogString str_data;
        converter->format(event, str_data, p);
		LOG4CXX_ENCODE_CHAR(new_str_data, str_data);
		ls_args.push_back(new_str_data);
    }

	for(std::string& str : ls_args){
        args.push_back(str.data());
    }
    args.push_back(nullptr);

    stat = apr_dbd_pquery(_priv->m_driver,
                          _priv->m_pool.getAPRPool(),
                          _priv->m_databaseHandle,
                          &num_rows,
                          _priv->preparedStmt,
  ...",211.0,250.0,1.0,7.0,40.0,62,11,41,16,0,1,5,5,0,1,,0,0,4,2,2,void
1147,14251,setConfigurationFileName,1,DefaultConfigurator.setConfigurationFileName,void DefaultConfigurator.setConfigurationFileName (LogString),main\cpp\defaultconfigurator.cpp,"void DefaultConfigurator::setConfigurationFileName(const LogString& path)
{
	DefaultConfiguratorPath = path;
}",38.0,41.0,1.0,1.0,4.0,1,1,2,2,2,0,1,1,0,0,,0,0,2,1,1,void
1148,14259,setConfigurationWatchSeconds,1,DefaultConfigurator.setConfigurationWatchSeconds,void DefaultConfigurator.setConfigurationWatchSeconds (int),main\cpp\defaultconfigurator.cpp,"void DefaultConfigurator::setConfigurationWatchSeconds(int seconds)
{
	DefaultConfiguratorWatchSeconds = seconds;
}",44.0,47.0,1.0,1.0,4.0,1,1,2,2,2,0,1,1,0,0,,0,0,2,1,1,void
1149,14271,configure,1,DefaultConfigurator.configure,void DefaultConfigurator.configure (LoggerRepositoryPtr),main\cpp\defaultconfigurator.cpp,"void DefaultConfigurator::configure(LoggerRepositoryPtr repository)
{
	repository->setConfigured(true);
	const LogString configuratorClassName(getConfiguratorClass());

	LogString configurationFileName = DefaultConfiguratorPath;
	if (configurationFileName.empty())
		configurationFileName = getConfigurationFileName();
	Pool pool;
	File configuration;

	if (configurationFileName.empty())
	{
		LogString names[4] =
			{ LOG4CXX_STR(""log4cxx.xml"")
			, LOG4CXX_STR(""log4cxx.properties"")
			, LOG4CXX_STR(""log4j.xml"")
			, LOG4CXX_STR(""log4j.properties"")
			};

		for (int i = 0; i < 4; i++)
		{
			File candidate(names[i]);

			LogString debugMsg = LOG4CXX_STR(""Checking file "");
			debugMsg.append(names[i]);
			LogLog::debug(debugMsg);
			if (candidate.exists(pool))
			{
				configuration = candidate;
				break;
			}
		}
	}
	else
	{
		configuration.setPath(configurationFileName);
	}

	if (configuration.exists(pool))
	{
		LogString msg(LOG4CXX_STR(""Using configuration file [""));
		msg += conf...",51.0,122.0,1.0,1.0,72.0,25,9,36,16,0,4,7,9,0,3,,0,1,2,1,1,void
1150,14445,getConfiguratorClass,1,DefaultConfigurator.getConfiguratorClass,LogString DefaultConfigurator.getConfiguratorClass (),main\cpp\defaultconfigurator.cpp,"const LogString DefaultConfigurator::getConfiguratorClass()
{

	// Use automatic configration to configure the default hierarchy
	const LogString log4jConfiguratorClassName(
		OptionConverter::getSystemProperty(LOG4CXX_STR(""log4j.configuratorClass""), LOG4CXX_STR("""")));
	const LogString configuratorClassName(
		OptionConverter::getSystemProperty(LOG4CXX_STR(""LOG4CXX_CONFIGURATOR_CLASS""),
			log4jConfiguratorClassName));
	return configuratorClassName;
}",124.0,134.0,1.0,1.0,11.0,2,1,4,3,0,2,1,1,0,2,,0,0,0,0,0,LogString
1151,14470,getConfigurationFileName,1,DefaultConfigurator.getConfigurationFileName,LogString DefaultConfigurator.getConfigurationFileName (),main\cpp\defaultconfigurator.cpp,"const LogString DefaultConfigurator::getConfigurationFileName()
{
	static const WideLife<LogString> LOG4CXX_DEFAULT_CONFIGURATION_KEY(LOG4CXX_STR(""LOG4CXX_CONFIGURATION""));
	static const WideLife<LogString> LOG4J_DEFAULT_CONFIGURATION_KEY(LOG4CXX_STR(""log4j.configuration""));
	const LogString log4jConfigurationFileName(
		OptionConverter::getSystemProperty(LOG4J_DEFAULT_CONFIGURATION_KEY, LOG4CXX_STR("""")));
	const LogString configurationFileName(
		OptionConverter::getSystemProperty(LOG4CXX_DEFAULT_CONFIGURATION_KEY,
			log4jConfigurationFileName));
	return configurationFileName;
}",137.0,147.0,1.0,1.0,11.0,2,1,6,5,0,2,1,1,0,2,,0,0,0,0,0,LogString
1152,14501,getConfigurationWatchDelay,1,DefaultConfigurator.getConfigurationWatchDelay,int DefaultConfigurator.getConfigurationWatchDelay (),main\cpp\defaultconfigurator.cpp,"int DefaultConfigurator::getConfigurationWatchDelay()
{
	static const WideLife<LogString> LOG4CXX_DEFAULT_CONFIGURATION_WATCH_KEY(LOG4CXX_STR(""LOG4CXX_CONFIGURATION_WATCH_SECONDS""));
	LogString optionStr = OptionConverter::getSystemProperty(LOG4CXX_DEFAULT_CONFIGURATION_WATCH_KEY, LogString());
	int milliseconds = 0;
	if (!optionStr.empty())
		milliseconds = StringHelper::toInt(optionStr) * MillisecondsPerSecond;
	return milliseconds;
}",150.0,158.0,1.0,1.0,9.0,8,4,10,6,0,3,2,2,0,2,,0,3,0,0,0,int
1153,14540,tryLoadFile,1,DefaultConfigurator.tryLoadFile,ConfigurationStatus DefaultConfigurator.tryLoadFile (LogString),main\cpp\defaultconfigurator.cpp,"LOG4CXX_NS::spi::ConfigurationStatus DefaultConfigurator::tryLoadFile(const LogString& filename){
#if LOG4CXX_HAS_DOMCONFIGURATOR
	if(helpers::StringHelper::endsWith(filename, LOG4CXX_STR("".xml""))){
		return LOG4CXX_NS::xml::DOMConfigurator::configure(filename);
	}
#endif
	if(helpers::StringHelper::endsWith(filename, LOG4CXX_STR("".properties""))){
		return LOG4CXX_NS::PropertyConfigurator::configure(filename);
	}

	return LOG4CXX_NS::spi::ConfigurationStatus::NotConfigured;
}",160.0,171.0,1.0,1.0,12.0,7,1,9,7,0,0,2,2,0,0,,0,0,2,1,1,ConfigurationStatus
1154,14572,configureFromFile,1,DefaultConfigurator.configureFromFile,"tuple<LOG4CXX_NS::spi::ConfigurationStatus,LogString> DefaultConfigurator.configureFromFile (ANY,ANY)",main\cpp\defaultconfigurator.cpp,"std::tuple<LOG4CXX_NS::spi::ConfigurationStatus,LogString>
DefaultConfigurator::configureFromFile(const std::vector<LogString>& directories, const std::vector<LogString>& filenames){
	using ResultType = std::tuple<LOG4CXX_NS::spi::ConfigurationStatus, LogString>;
	LOG4CXX_NS::helpers::Pool pool;

	for( LogString dir : directories ){
		for( LogString fname : filenames ){
			LogString canidate_str = dir + LOG4CXX_STR(""/"") + fname;
			File candidate(canidate_str);

			LogString debugMsg = LOG4CXX_STR(""Checking file "");
			debugMsg.append(canidate_str);
			LogLog::debug(debugMsg);
			if (candidate.exists(pool))
			{
				LOG4CXX_NS::spi::ConfigurationStatus configStatus = tryLoadFile(canidate_str);
				if( configStatus == LOG4CXX_NS::spi::ConfigurationStatus::Configured ){
					return ResultType{configStatus, canidate_str};
				}
				LogLog::debug(LOG4CXX_STR(""Unable to load file: trying next""));
			}
		}
	}

	return ResultType{LOG4CXX_NS::spi::ConfigurationStatus::NotConfigured, LogStri...",173.0,198.0,1.0,1.0,26.0,18,5,25,13,0,2,5,11,0,2,,0,0,4,2,2,"tuple<LOG4CXX_NS.spi.ConfigurationStatus,LogString>"
1155,14673,makeNewLoggerInstance,1,DefaultLoggerFactory.makeNewLoggerInstance,"LoggerPtr DefaultLoggerFactory.makeNewLoggerInstance (ANY,LogString)",main\cpp\defaultloggerfactory.cpp,"LoggerPtr DefaultLoggerFactory::makeNewLoggerInstance(
	LOG4CXX_NS::helpers::Pool& pool,
	const LogString& name) const
{
	return std::make_shared<Logger>(pool, name);
}",25.0,30.0,1.0,1.0,6.0,5,5,4,4,0,0,1,1,0,0,,0,0,4,2,2,LoggerPtr
1156,14699,DefaultRepositorySelector,1,DefaultRepositorySelector.DefaultRepositorySelector,ANY DefaultRepositorySelector.DefaultRepositorySelector (LoggerRepositoryPtr),main\cpp\defaultrepositoryselector.cpp,"DefaultRepositorySelector::DefaultRepositorySelector(const LoggerRepositoryPtr repository1)
	: m_priv(std::make_unique<DefaultRepositorySelectorPrivate>())
{
	m_priv->repository = repository1;
}",29.0,33.0,1.0,1.0,5.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,ANY
1157,14709,~DefaultRepositorySelector,1,DefaultRepositorySelector.~DefaultRepositorySelector,ANY DefaultRepositorySelector.~DefaultRepositorySelector (),main\cpp\defaultrepositoryselector.cpp,DefaultRepositorySelector::~DefaultRepositorySelector() {},35.0,35.0,1.0,58.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1158,14713,getLoggerRepository,1,DefaultRepositorySelector.getLoggerRepository,LoggerRepositoryPtr DefaultRepositorySelector.getLoggerRepository (),main\cpp\defaultrepositoryselector.cpp,"LoggerRepositoryPtr DefaultRepositorySelector::getLoggerRepository()
{
	return m_priv->repository;
}",37.0,40.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,LoggerRepositoryPtr
1159,14797,XMLWatchdog,1,LOG4CXX_NS.xml.XMLWatchdog.XMLWatchdog,ANY LOG4CXX_NS.xml.XMLWatchdog.XMLWatchdog (File),main\cpp\domconfigurator.cpp,"XMLWatchdog(const File& filename) : FileWatchdog(filename)
		{
		}",75.0,77.0,3.0,3.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1160,14802,doOnChange,1,LOG4CXX_NS.xml.XMLWatchdog.doOnChange,void LOG4CXX_NS.xml.XMLWatchdog.doOnChange (),main\cpp\domconfigurator.cpp,"void doOnChange()
		{
			DOMConfigurator().doConfigure(file(),
				LogManager::getLoggerRepository());
		}",83.0,87.0,3.0,3.0,5.0,2,1,1,1,0,1,1,1,0,0,,0,0,0,0,0,void
1161,14821,DOMConfigurator,1,DOMConfigurator.DOMConfigurator,ANY DOMConfigurator.DOMConfigurator (),main\cpp\domconfigurator.cpp,"DOMConfigurator::DOMConfigurator()
	: m_priv(std::make_unique<DOMConfiguratorPrivate>())
{
}",125.0,128.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1162,14825,~DOMConfigurator,1,DOMConfigurator.~DOMConfigurator,ANY DOMConfigurator.~DOMConfigurator (),main\cpp\domconfigurator.cpp,DOMConfigurator::~DOMConfigurator() {},130.0,130.0,1.0,38.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1163,14829,findAppenderByName,1,DOMConfigurator.findAppenderByName,"AppenderPtr DOMConfigurator.findAppenderByName (ANY,ANY,apr_xml_elem*,apr_xml_doc*,LogString,AppenderMap)",main\cpp\domconfigurator.cpp,"AppenderPtr DOMConfigurator::findAppenderByName(LOG4CXX_NS::helpers::Pool& p,
	LOG4CXX_NS::helpers::CharsetDecoderPtr& utf8Decoder,
	apr_xml_elem* element,
	apr_xml_doc* doc,
	const LogString& appenderName,
	AppenderMap& appenders)
{
	AppenderPtr appender;
	std::string tagName(element->name);

	if (tagName == APPENDER_TAG)
	{
		if (appenderName == getAttribute(utf8Decoder, element, NAME_ATTR))
		{
			appender = parseAppender(p, utf8Decoder, element, doc, appenders);
		}
	}

	if (element->first_child && !appender)
	{
		appender = findAppenderByName(p, utf8Decoder, element->first_child, doc, appenderName, appenders);
	}

	if (element->next && !appender)
	{
		appender = findAppenderByName(p, utf8Decoder, element->next, doc, appenderName, appenders);
	}

	return appender;
}",135.0,164.0,1.0,16.0,30.0,14,5,30,8,0,0,5,6,0,0,,0,0,12,6,6,AppenderPtr
1164,14910,findAppenderByReference,1,DOMConfigurator.findAppenderByReference,"AppenderPtr DOMConfigurator.findAppenderByReference (ANY,ANY,apr_xml_elem*,apr_xml_doc*,AppenderMap)",main\cpp\domconfigurator.cpp,"AppenderPtr DOMConfigurator::findAppenderByReference(
	LOG4CXX_NS::helpers::Pool& p,
	LOG4CXX_NS::helpers::CharsetDecoderPtr& utf8Decoder,
	apr_xml_elem* appenderRef,
	apr_xml_doc* doc,
	AppenderMap& appenders)
{
	LogString appenderName(subst(getAttribute(utf8Decoder, appenderRef, REF_ATTR)));
	AppenderMap::const_iterator match = appenders.find(appenderName);
	AppenderPtr appender;

	if (match != appenders.end())
	{
		appender = match->second;
	}
	else if (doc)
	{
		appender = findAppenderByName(p, utf8Decoder, doc->root, doc, appenderName, appenders);

		if (appender)
		{
			appenders.insert(AppenderMap::value_type(appenderName, appender));
		}
	}

	if (!appender)
	{
		LogLog::error(LOG4CXX_STR(""No appender named ["") +
			appenderName + LOG4CXX_STR(""] could be found.""));
	}

	return appender;
}",169.0,201.0,1.0,69.0,33.0,10,6,13,7,0,1,3,3,0,1,,0,0,10,5,5,AppenderPtr
1165,14996,parseAppender,1,DOMConfigurator.parseAppender,"AppenderPtr DOMConfigurator.parseAppender (Pool,ANY,apr_xml_elem*,apr_xml_doc*,AppenderMap)",main\cpp\domconfigurator.cpp,"AppenderPtr DOMConfigurator::parseAppender(Pool& p,
	LOG4CXX_NS::helpers::CharsetDecoderPtr& utf8Decoder,
	apr_xml_elem* appenderElement,
	apr_xml_doc* doc,
	AppenderMap& appenders)
{

	LogString className(subst(getAttribute(utf8Decoder, appenderElement, CLASS_ATTR)));
	LogLog::debug(LOG4CXX_STR(""Class name: ["") + className + LOG4CXX_STR(""]""));

	try
	{
		ObjectPtr instance = ObjectPtr(Loader::loadClass(className).newInstance());
		AppenderPtr appender = LOG4CXX_NS::cast<Appender>(instance);
		PropertySetter propSetter(appender);

		appender->setName(subst(getAttribute(utf8Decoder, appenderElement, NAME_ATTR)));

		for (apr_xml_elem* currentElement = appenderElement->first_child;
			currentElement;
			currentElement = currentElement->next)
		{

			std::string tagName(currentElement->name);

			// Parse appender parameters
			if (tagName == PARAM_TAG)
			{
				setParameter(p, utf8Decoder, currentElement, propSetter);
			}
			// Set appender layout
			else if (tagName == LAYOUT_TAG)
	...",206.0,321.0,1.0,70.0,116.0,17,7,29,14,0,3,4,7,0,3,,0,1,10,5,5,AppenderPtr
1166,15399,parseErrorHandler,1,DOMConfigurator.parseErrorHandler,"void DOMConfigurator.parseErrorHandler (Pool,ANY,apr_xml_elem*,AppenderPtr,apr_xml_doc*,AppenderMap)",main\cpp\domconfigurator.cpp,"void DOMConfigurator::parseErrorHandler(Pool& p,
	LOG4CXX_NS::helpers::CharsetDecoderPtr& utf8Decoder,
	apr_xml_elem* element,
	AppenderPtr& appender,
	apr_xml_doc* doc,
	AppenderMap& appenders)
{

	ErrorHandlerPtr eh;
	std::shared_ptr<Object> obj = OptionConverter::instantiateByClassName(
			subst(getAttribute(utf8Decoder, element, CLASS_ATTR)),
			ErrorHandler::getStaticClass(),
			0);
	eh = LOG4CXX_NS::cast<ErrorHandler>(obj);

	if (eh != 0)
	{
		eh->setAppender(appender);

		PropertySetter propSetter(eh);

		for (apr_xml_elem* currentElement = element->first_child;
			currentElement;
			currentElement = currentElement->next)
		{
			std::string tagName(currentElement->name);

			if (tagName == PARAM_TAG)
			{
				setParameter(p, utf8Decoder, currentElement, propSetter);
			}
			else if (tagName == APPENDER_REF_TAG)
			{
				eh->setBackupAppender(findAppenderByReference(p, utf8Decoder, currentElement, doc, appenders));
			}
			else if (tagName == LOGGER_REF)
			{
				LogString log...",326.0,382.0,1.0,44.0,57.0,26,7,35,16,0,1,5,9,0,1,,0,1,12,6,6,void
1167,15595,parseFilters,1,DOMConfigurator.parseFilters,"void DOMConfigurator.parseFilters (Pool,ANY,apr_xml_elem*,ANY)",main\cpp\domconfigurator.cpp,"void DOMConfigurator::parseFilters(Pool& p,
	LOG4CXX_NS::helpers::CharsetDecoderPtr& utf8Decoder,
	apr_xml_elem* element,
	std::vector<LOG4CXX_NS::spi::FilterPtr>& filters)
{
	LogString clazz = subst(getAttribute(utf8Decoder, element, CLASS_ATTR));
	FilterPtr filter;
	std::shared_ptr<Object> obj = OptionConverter::instantiateByClassName(clazz,
			Filter::getStaticClass(), 0);
	filter = LOG4CXX_NS::cast<Filter>(obj);

	if (filter != 0)
	{
		PropertySetter propSetter(filter);

		for (apr_xml_elem* currentElement = element->first_child;
			currentElement;
			currentElement = currentElement->next)
		{
			std::string tagName(currentElement->name);

			if (tagName == PARAM_TAG)
			{
				setParameter(p, utf8Decoder, currentElement, propSetter);
			}
		}

		propSetter.activate(p);
		filters.push_back(filter);
	}
}",387.0,417.0,1.0,60.0,31.0,18,7,28,15,0,1,4,7,0,1,,0,1,8,4,4,void
1168,15691,parseLogger,1,DOMConfigurator.parseLogger,"void DOMConfigurator.parseLogger (ANY,ANY,apr_xml_elem*,apr_xml_doc*,AppenderMap)",main\cpp\domconfigurator.cpp,"void DOMConfigurator::parseLogger(
	LOG4CXX_NS::helpers::Pool& p,
	LOG4CXX_NS::helpers::CharsetDecoderPtr& utf8Decoder,
	apr_xml_elem* loggerElement,
	apr_xml_doc* doc,
	AppenderMap& appenders)
{
	// Create a new Logger object from the <category> element.
	LogString loggerName = subst(getAttribute(utf8Decoder, loggerElement, NAME_ATTR));

	LogLog::debug(LOG4CXX_STR(""Retreiving an instance of Logger.""));
	LoggerPtr logger = m_priv->repository->getLogger(loggerName, m_priv->loggerFactory);

	// Setting up a logger needs to be an atomic operation, in order
	// to protect potential log operations while logger
	// configuration is in progress.
	bool additivity = OptionConverter::toBoolean(
			subst(getAttribute(utf8Decoder, loggerElement, ADDITIVITY_ATTR)),
			true);

	LogLog::debug(LOG4CXX_STR(""Setting ["") + logger->getName() + LOG4CXX_STR(""] additivity to ["") +
		(additivity ? LogString(LOG4CXX_STR(""true"")) : LogString(LOG4CXX_STR(""false""))) + LOG4CXX_STR(""].""));
	logger->setAdditivity...",422.0,446.0,1.0,71.0,25.0,16,5,23,11,0,3,1,1,0,3,,0,1,10,5,5,void
1169,15783,parseLoggerFactory,1,DOMConfigurator.parseLoggerFactory,"void DOMConfigurator.parseLoggerFactory (ANY,ANY,apr_xml_elem*)",main\cpp\domconfigurator.cpp,"void DOMConfigurator::parseLoggerFactory(
	LOG4CXX_NS::helpers::Pool& p,
	LOG4CXX_NS::helpers::CharsetDecoderPtr& utf8Decoder,
	apr_xml_elem* factoryElement)
{
	LogString className(subst(getAttribute(utf8Decoder, factoryElement, CLASS_ATTR)));

	if (className.empty())
	{
		LogLog::error(LOG4CXX_STR(""Logger Factory tag class attribute not found.""));
		LogLog::debug(LOG4CXX_STR(""No Logger Factory configured.""));
	}
	else
	{
		LogLog::debug(LOG4CXX_STR(""Desired logger factory: ["") + className + LOG4CXX_STR(""]""));
		std::shared_ptr<Object> obj = OptionConverter::instantiateByClassName(
				className,
				LoggerFactory::getStaticClass(),
				0);
		m_priv->loggerFactory = LOG4CXX_NS::cast<LoggerFactory>(obj);
		PropertySetter propSetter(m_priv->loggerFactory);

		for (apr_xml_elem* currentElement = factoryElement->first_child;
			currentElement;
			currentElement = currentElement->next)
		{
			std::string tagName(currentElement->name);

			if (tagName == PARAM_TAG)
			{
				setParameter(p...",451.0,485.0,1.0,69.0,35.0,3,1,5,4,0,2,2,2,0,2,,0,0,6,3,3,void
1170,15896,parseRoot,1,DOMConfigurator.parseRoot,"void DOMConfigurator.parseRoot (ANY,ANY,apr_xml_elem*,apr_xml_doc*,AppenderMap)",main\cpp\domconfigurator.cpp,"void DOMConfigurator::parseRoot(
	LOG4CXX_NS::helpers::Pool& p,
	LOG4CXX_NS::helpers::CharsetDecoderPtr& utf8Decoder,
	apr_xml_elem* rootElement,
	apr_xml_doc* doc,
	AppenderMap& appenders)
{
	LoggerPtr root = m_priv->repository->getRootLogger();
	parseChildrenOfLoggerElement(p, utf8Decoder, rootElement, root, true, doc, appenders);
}",490.0,499.0,1.0,1.0,10.0,3,2,8,7,0,0,1,1,0,0,,0,0,10,5,5,void
1171,15922,parseChildrenOfLoggerElement,1,DOMConfigurator.parseChildrenOfLoggerElement,"void DOMConfigurator.parseChildrenOfLoggerElement (ANY,ANY,apr_xml_elem*,LoggerPtr,bool,apr_xml_doc*,AppenderMap)",main\cpp\domconfigurator.cpp,"void DOMConfigurator::parseChildrenOfLoggerElement(
	LOG4CXX_NS::helpers::Pool& p,
	LOG4CXX_NS::helpers::CharsetDecoderPtr& utf8Decoder,
	apr_xml_elem* loggerElement, LoggerPtr logger, bool isRoot,
	apr_xml_doc* doc,
	AppenderMap& appenders)
{
	PropertySetter propSetter(logger);
	std::vector<AppenderPtr> newappenders;

	// Remove all existing appenders from logger. They will be
	// reconstructed if need be.
	logger->removeAllAppenders();

	for (apr_xml_elem* currentElement = loggerElement->first_child;
		currentElement;
		currentElement = currentElement->next)
	{
		std::string tagName(currentElement->name);

		if (tagName == APPENDER_REF_TAG)
		{
			AppenderPtr appender = findAppenderByReference(p, utf8Decoder, currentElement, doc, appenders);
			LogString refName =  subst(getAttribute(utf8Decoder, currentElement, REF_ATTR));

			if (appender != 0)
			{
				LogLog::debug(LOG4CXX_STR(""Adding appender named ["") + refName +
					LOG4CXX_STR(""] to logger ["") + logger->getName() + LOG4CX...",504.0,558.0,1.0,17.0,55.0,19,8,27,15,0,1,4,7,0,1,,0,0,14,7,7,void
1172,16084,parseLayout,1,DOMConfigurator.parseLayout,"LayoutPtr DOMConfigurator.parseLayout (ANY,ANY,apr_xml_elem*)",main\cpp\domconfigurator.cpp,"LayoutPtr DOMConfigurator::parseLayout (
	LOG4CXX_NS::helpers::Pool& p,
	LOG4CXX_NS::helpers::CharsetDecoderPtr& utf8Decoder,
	apr_xml_elem* layout_element)
{
	LogString className(subst(getAttribute(utf8Decoder, layout_element, CLASS_ATTR)));
	LogLog::debug(LOG4CXX_STR(""Parsing layout of class: \"""") + className + LOG4CXX_STR(""\""""));

	try
	{
		ObjectPtr instance = ObjectPtr(Loader::loadClass(className).newInstance());
		LayoutPtr layout = LOG4CXX_NS::cast<Layout>(instance);
		PropertySetter propSetter(layout);

		for (apr_xml_elem* currentElement = layout_element->first_child;
			currentElement;
			currentElement = currentElement->next)
		{
			std::string tagName(currentElement->name);

			if (tagName == PARAM_TAG)
			{
				setParameter(p, utf8Decoder, currentElement, propSetter);
			}
		}

		propSetter.activate(p);
		return layout;
	}
	catch (Exception& oops)
	{
		LogLog::error(LOG4CXX_STR(""Could not create the Layout. Reported error follows.""),
			oops);
		return 0;
	}
}",563.0,598.0,1.0,69.0,36.0,16,7,26,14,0,3,4,7,0,3,,0,1,6,3,3,LayoutPtr
1173,16187,parseTriggeringPolicy,1,DOMConfigurator.parseTriggeringPolicy,"ObjectPtr DOMConfigurator.parseTriggeringPolicy (ANY,ANY,apr_xml_elem*)",main\cpp\domconfigurator.cpp,"ObjectPtr DOMConfigurator::parseTriggeringPolicy (
	LOG4CXX_NS::helpers::Pool& p,
	LOG4CXX_NS::helpers::CharsetDecoderPtr& utf8Decoder,
	apr_xml_elem* layout_element)
{
	LogString className = subst(getAttribute(utf8Decoder, layout_element, CLASS_ATTR));
	LogLog::debug(LOG4CXX_STR(""Parsing triggering policy of class: \"""") + className + LOG4CXX_STR(""\""""));

	try
	{
		ObjectPtr instance = ObjectPtr(Loader::loadClass(className).newInstance());
		PropertySetter propSetter(instance);

		for (apr_xml_elem* currentElement = layout_element->first_child;
			currentElement;
			currentElement = currentElement->next)
		{
			std::string tagName(currentElement->name);

			if (tagName == PARAM_TAG)
			{
				setParameter(p, utf8Decoder, currentElement, propSetter);
			}
			else if (tagName == FILTER_TAG)
			{
				std::vector<LOG4CXX_NS::spi::FilterPtr> filters;
				parseFilters(p, utf8Decoder, currentElement, filters);
				FilterBasedTriggeringPolicyPtr fbtp = LOG4CXX_NS::cast<FilterBasedTriggeringP...",603.0,653.0,1.0,71.0,51.0,13,5,23,11,0,3,4,7,0,3,,0,1,6,3,3,ObjectPtr
1174,16345,parseRollingPolicy,1,DOMConfigurator.parseRollingPolicy,"RollingPolicyPtr DOMConfigurator.parseRollingPolicy (ANY,ANY,apr_xml_elem*)",main\cpp\domconfigurator.cpp,"RollingPolicyPtr DOMConfigurator::parseRollingPolicy (
	LOG4CXX_NS::helpers::Pool& p,
	LOG4CXX_NS::helpers::CharsetDecoderPtr& utf8Decoder,
	apr_xml_elem* layout_element)
{
	LogString className = subst(getAttribute(utf8Decoder, layout_element, CLASS_ATTR));
	LogLog::debug(LOG4CXX_STR(""Parsing rolling policy of class: \"""") + className + LOG4CXX_STR(""\""""));

	try
	{
		ObjectPtr instance = ObjectPtr(Loader::loadClass(className).newInstance());
		RollingPolicyPtr layout = LOG4CXX_NS::cast<RollingPolicy>(instance);
		PropertySetter propSetter(layout);

		for (apr_xml_elem* currentElement = layout_element->first_child;
			currentElement;
			currentElement = currentElement->next)
		{
			std::string tagName(currentElement->name);

			if (tagName == PARAM_TAG)
			{
				setParameter(p, utf8Decoder, currentElement, propSetter);
			}
		}

		propSetter.activate(p);
		return layout;
	}
	catch (Exception& oops)
	{
		LogLog::error(LOG4CXX_STR(""Could not create the RollingPolicy. Reported error foll...",658.0,693.0,1.0,71.0,36.0,17,7,27,14,0,3,4,7,0,3,,0,1,6,3,3,RollingPolicyPtr
1175,16449,parseLevel,1,DOMConfigurator.parseLevel,"void DOMConfigurator.parseLevel (ANY,ANY,apr_xml_elem*,LoggerPtr,bool)",main\cpp\domconfigurator.cpp,"void DOMConfigurator::parseLevel(
	LOG4CXX_NS::helpers::Pool& p,
	LOG4CXX_NS::helpers::CharsetDecoderPtr& utf8Decoder,
	apr_xml_elem* element, LoggerPtr logger, bool isRoot)
{
	LogString loggerName = logger->getName();

	if (isRoot)
	{
		loggerName = LOG4CXX_STR(""root"");
	}

	LogString levelStr(subst(getAttribute(utf8Decoder, element, VALUE_ATTR)));
	LogLog::debug(LOG4CXX_STR(""Level value for "") + loggerName + LOG4CXX_STR("" is ["") + levelStr + LOG4CXX_STR(""].""));

	if (StringHelper::equalsIgnoreCase(levelStr, LOG4CXX_STR(""INHERITED""), LOG4CXX_STR(""inherited""))
		|| StringHelper::equalsIgnoreCase(levelStr, LOG4CXX_STR(""NULL""), LOG4CXX_STR(""null"")))
	{
		if (isRoot)
		{
			LogLog::error(LOG4CXX_STR(""Root level cannot be inherited. Ignoring directive.""));
		}
		else
		{
			logger->setLevel(0);
		}
	}
	else
	{
		LogString className(subst(getAttribute(utf8Decoder, element, CLASS_ATTR)));

		if (className.empty())
		{
			logger->setLevel(OptionConverter::toLevel(levelStr, Level::getDebug(...",700.0,767.0,1.0,61.0,68.0,17,5,18,8,0,5,4,5,2,5,,0,2,10,5,5,void
1176,16642,setParameter,1,DOMConfigurator.setParameter,"void DOMConfigurator.setParameter (ANY,ANY,apr_xml_elem*,PropertySetter)",main\cpp\domconfigurator.cpp,"void DOMConfigurator::setParameter(LOG4CXX_NS::helpers::Pool& p,
	LOG4CXX_NS::helpers::CharsetDecoderPtr& utf8Decoder,
	apr_xml_elem* elem,
	PropertySetter& propSetter)
{
	LogString name(subst(getAttribute(utf8Decoder, elem, NAME_ATTR)));
	LogString value(subst(getAttribute(utf8Decoder, elem, VALUE_ATTR)));
	value = subst(value);
	propSetter.setProperty(name, value, p);
}",769.0,778.0,1.0,54.0,10.0,2,2,10,6,0,0,1,1,0,0,,0,0,8,4,4,void
1177,16679,doConfigure,1,DOMConfigurator.doConfigure,"ConfigurationStatus DOMConfigurator.doConfigure (File,ANY)",main\cpp\domconfigurator.cpp,"spi::ConfigurationStatus DOMConfigurator::doConfigure(const File& filename, spi::LoggerRepositoryPtr repository1)
{
	repository1->setConfigured(true);
	m_priv->repository = repository1;
	LogString msg(LOG4CXX_STR(""DOMConfigurator configuring file ""));
	msg.append(filename.getPath());
	msg.append(LOG4CXX_STR(""...""));
	LogLog::debug(msg);

	m_priv->loggerFactory = std::make_shared<DefaultLoggerFactory>();

	Pool p;
	apr_file_t* fd;

	log4cxx_status_t rv = filename.open(&fd, APR_READ, APR_OS_DEFAULT, p);

	if (rv != APR_SUCCESS)
	{
		// There is not technically an exception thrown here, but this behavior matches
		// what the PropertyConfigurator does
		IOException io(rv);
		LogString msg2(LOG4CXX_STR(""Could not read configuration file [""));
		msg2.append(filename.getPath());
		msg2.append(LOG4CXX_STR(""]. ""));
		LOG4CXX_DECODE_CHAR(msg, io.what());
		msg2.append(msg);
		LogLog::error(msg2);
		return spi::ConfigurationStatus::NotConfigured;
	}
	else
	{
		apr_xml_parser* parser = NULL;
	...",780.0,850.0,1.0,1.0,71.0,24,5,32,16,0,2,2,2,0,2,,0,0,4,2,2,ConfigurationStatus
1178,16925,configure,1,DOMConfigurator.configure,ConfigurationStatus DOMConfigurator.configure (ANY),main\cpp\domconfigurator.cpp,"spi::ConfigurationStatus DOMConfigurator::configure(const std::string& filename)
{
	File file(filename);
	return DOMConfigurator().doConfigure(file, LogManager::getLoggerRepository());
}",852.0,856.0,1.0,1.0,5.0,2,1,3,3,0,1,1,1,0,0,,0,0,2,1,1,ConfigurationStatus
1179,16943,configureAndWatch,1,DOMConfigurator.configureAndWatch,ConfigurationStatus DOMConfigurator.configureAndWatch (ANY),main\cpp\domconfigurator.cpp,"spi::ConfigurationStatus DOMConfigurator::configureAndWatch(const std::string& filename, long delay)
{
	File file(filename);
	if ( xdog )
	{
		APRInitializer::unregisterCleanup(xdog);
		delete xdog;
	}

	spi::ConfigurationStatus status = DOMConfigurator().doConfigure(file, LogManager::getLoggerRepository());

	xdog = new XMLWatchdog(file);
	APRInitializer::registerCleanup(xdog);
	xdog->setDelay(delay);
	xdog->start();

	return status;
}",909.0,926.0,1.0,1.0,18.0,1,1,2,2,0,0,1,1,0,0,,0,0,4,2,2,ConfigurationStatus
1180,16998,parse,1,DOMConfigurator.parse,"void DOMConfigurator.parse (Pool,ANY,apr_xml_elem*,apr_xml_doc*,AppenderMap)",main\cpp\domconfigurator.cpp,"void DOMConfigurator::parse(
	Pool& p,
	LOG4CXX_NS::helpers::CharsetDecoderPtr& utf8Decoder,
	apr_xml_elem* element,
	apr_xml_doc* doc,
	AppenderMap& appenders)
{
	std::string rootElementName(element->name);

	if (rootElementName != CONFIGURATION_TAG)
	{
		if (rootElementName == OLD_CONFIGURATION_TAG)
		{
			//LogLog::warn(LOG4CXX_STR(""The <"")+String(OLD_CONFIGURATION_TAG)+
			// LOG4CXX_STR(""> element has been deprecated.""));
			//LogLog::warn(LOG4CXX_STR(""Use the <"")+String(CONFIGURATION_TAG)+
			// LOG4CXX_STR(""> element instead.""));
		}
		else
		{
			LogLog::error(LOG4CXX_STR(""DOM element is - not a <configuration> element.""));
			return;
		}
	}

	LogString debugAttrib = subst(getAttribute(utf8Decoder, element, INTERNAL_DEBUG_ATTR));

	static const WideLife<LogString> NULL_STRING(LOG4CXX_STR(""NULL""));
	LogLog::debug(LOG4CXX_STR(""debug attribute= \"""") + debugAttrib + LOG4CXX_STR(""\"".""));

	// if the log4j.dtd is not specified in the XML file, then the
	// ""debug"" attribute is ret...",991.0,1101.0,1.0,24.0,111.0,55,9,64,19,0,9,12,16,0,8,,0,3,10,5,5,void
1181,17354,subst,1,DOMConfigurator.subst,LogString DOMConfigurator.subst (LogString),main\cpp\domconfigurator.cpp,"LogString DOMConfigurator::subst(const LogString& value)
{
	try
	{
		return OptionConverter::substVars(value, m_priv->props);
	}
	catch (IllegalArgumentException& e)
	{
		LogLog::warn(LOG4CXX_STR(""Could not perform variable substitution.""), e);
		return value;
	}
}",1103.0,1114.0,1.0,1.0,12.0,3,2,6,5,0,2,2,2,0,2,,0,0,2,1,1,LogString
1182,17380,getAttribute,1,DOMConfigurator.getAttribute,"LogString DOMConfigurator.getAttribute (ANY,apr_xml_elem*,ANY)",main\cpp\domconfigurator.cpp,"LogString DOMConfigurator::getAttribute(
	LOG4CXX_NS::helpers::CharsetDecoderPtr& utf8Decoder,
	apr_xml_elem* element,
	const std::string& attrName)
{
	LogString attrValue;

	for (apr_xml_attr* attr = element->attr;
		attr;
		attr = attr->next)
	{
		if (attrName == attr->name)
		{
			ByteBuffer buf((char*) attr->value, strnlen_s(attr->value, MAX_ATTRIBUTE_NAME_LEN));
			utf8Decoder->decode(buf, attrValue);
		}
	}

	return attrValue;
}",1117.0,1136.0,1.0,62.0,20.0,8,4,11,6,0,1,3,4,0,1,,0,0,6,3,3,LogString
1183,17453,Exception,1,Exception.Exception,ANY Exception.Exception (LogString),main\cpp\exception.cpp,"Exception::Exception(const Exception& src) : std::exception()
{
#if defined(__STDC_LIB_EXT1__) || defined(__STDC_SECURE_LIB__)
	strcpy_s(msg, sizeof msg, src.msg);
#else
	strncpy(msg, src.msg, MSG_SIZE);
	msg[MSG_SIZE] = 0;
#endif
}",59.0,67.0,1.0,1.0,9.0,7,4,13,5,0,0,2,2,0,0,,0,0,2,1,1,ANY
1184,17518,operator =,1,Exception.operator =,Exception Exception.operator = (Exception),main\cpp\exception.cpp,"Exception& Exception::operator=(const Exception& src)
{
#if defined(__STDC_LIB_EXT1__) || defined(__STDC_SECURE_LIB__)
	strcpy_s(msg, sizeof msg, src.msg);
#else
	strncpy(msg, src.msg, MSG_SIZE);
	msg[MSG_SIZE] = 0;
#endif
	return *this;
}",69.0,78.0,1.0,1.0,10.0,4,4,5,3,0,0,1,1,0,0,,0,0,2,1,1,Exception
1185,17537,what,1,Exception.what,const char* Exception.what (),main\cpp\exception.cpp,"const char* Exception::what() const throw()
{
	return msg;
}",80.0,83.0,1.0,1.0,4.0,0,0,1,1,0,0,1,1,0,0,,0,0,0,0,0,const char*
1186,17543,RuntimeException,1,RuntimeException.RuntimeException,ANY RuntimeException.RuntimeException (log4cxx_status_t),main\cpp\exception.cpp,"RuntimeException::RuntimeException(const RuntimeException& src)
	: Exception(src)
{
}",95.0,98.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1187,17558,operator =,1,RuntimeException.operator =,RuntimeException RuntimeException.operator = (RuntimeException),main\cpp\exception.cpp,"RuntimeException& RuntimeException::operator=(const RuntimeException& src)
{
	Exception::operator=(src);
	return *this;
}",100.0,104.0,1.0,1.0,5.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,RuntimeException
1188,17571,formatMessage,1,RuntimeException.formatMessage,LogString RuntimeException.formatMessage (log4cxx_status_t),main\cpp\exception.cpp,"LogString RuntimeException::formatMessage(log4cxx_status_t stat)
{
	LogString s(LOG4CXX_STR(""RuntimeException: return code = ""));
	Pool p;
	StringHelper::toString(stat, p, s);
	return s;
}",106.0,112.0,1.0,1.0,7.0,1,1,5,4,0,1,1,1,0,1,,0,0,2,1,1,LogString
1189,17590,NullPointerException,1,NullPointerException.NullPointerException,ANY NullPointerException.NullPointerException (LogString),main\cpp\exception.cpp,"NullPointerException::NullPointerException(const NullPointerException& src)
	: RuntimeException(src)
{
}",119.0,122.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1190,17600,operator =,1,NullPointerException.operator =,NullPointerException NullPointerException.operator = (NullPointerException),main\cpp\exception.cpp,"NullPointerException& NullPointerException::operator=(const NullPointerException& src)
{
	RuntimeException::operator=(src);
	return *this;
}",124.0,128.0,1.0,1.0,5.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,NullPointerException
1191,17613,IllegalArgumentException,1,IllegalArgumentException.IllegalArgumentException,ANY IllegalArgumentException.IllegalArgumentException (LogString),main\cpp\exception.cpp,"IllegalArgumentException::IllegalArgumentException(const IllegalArgumentException& src)
	: RuntimeException(src)
{
}",135.0,138.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1192,17623,operator =,1,IllegalArgumentException.operator =,IllegalArgumentException IllegalArgumentException.operator = (IllegalArgumentException),main\cpp\exception.cpp,"IllegalArgumentException& IllegalArgumentException::operator=(const IllegalArgumentException& src)
{
	RuntimeException::operator=(src);
	return *this;
}",140.0,144.0,1.0,1.0,5.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,IllegalArgumentException
1193,17636,IOException,1,IOException.IOException,ANY IOException.IOException (),main\cpp\exception.cpp,"IOException::IOException(const IOException& src)
	: Exception(src)
{
}",162.0,165.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1194,17655,operator =,1,IOException.operator =,IOException IOException.operator = (IOException),main\cpp\exception.cpp,"IOException& IOException::operator=(const IOException& src)
{
	Exception::operator=(src);
	return *this;
}",167.0,171.0,1.0,1.0,5.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,IOException
1195,17668,formatMessage,1,IOException.formatMessage,LogString IOException.formatMessage (log4cxx_status_t),main\cpp\exception.cpp,"LogString IOException::formatMessage(log4cxx_status_t stat)
{
	char err_buff[1024];
	LogString s(LOG4CXX_STR(""IO Exception : status code = ""));
	Pool p;
	StringHelper::toString(stat, p, s);
	s.append(LOG4CXX_STR(""(""));
	apr_strerror(stat, err_buff, sizeof(err_buff));
	std::string sMsg = err_buff;
	LOG4CXX_DECODE_CHAR(lsMsg, sMsg);
	s.append(lsMsg);
	s.append(LOG4CXX_STR("")""));
	return s;
}",173.0,186.0,1.0,1.0,14.0,6,3,16,7,0,1,1,1,0,1,,0,0,2,1,1,LogString
1196,17717,MissingResourceException,1,MissingResourceException.MissingResourceException,ANY MissingResourceException.MissingResourceException (LogString),main\cpp\exception.cpp,"MissingResourceException::MissingResourceException(const MissingResourceException& src)
	: Exception(src)
{
}",195.0,198.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1197,17727,operator =,1,MissingResourceException.operator =,MissingResourceException MissingResourceException.operator = (MissingResourceException),main\cpp\exception.cpp,"MissingResourceException& MissingResourceException::operator=(const MissingResourceException& src)
{
	Exception::operator=(src);
	return *this;
}",200.0,204.0,1.0,1.0,5.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,MissingResourceException
1198,17740,formatMessage,1,MissingResourceException.formatMessage,LogString MissingResourceException.formatMessage (LogString),main\cpp\exception.cpp,"LogString MissingResourceException::formatMessage(const LogString& key)
{
	LogString s(LOG4CXX_STR(""MissingResourceException: resource key = \""""));
	s.append(key);
	s.append(LOG4CXX_STR(""\"".""));
	return s;
}",206.0,212.0,1.0,1.0,7.0,2,1,4,2,0,0,1,1,0,0,,0,0,2,1,1,LogString
1199,17762,PoolException,1,PoolException.PoolException,ANY PoolException.PoolException (log4cxx_status_t),main\cpp\exception.cpp,"PoolException::PoolException(const PoolException& src)
	: Exception(src)
{
}",219.0,222.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1200,17772,operator =,1,PoolException.operator =,PoolException PoolException.operator = (PoolException),main\cpp\exception.cpp,"PoolException& PoolException::operator=(const PoolException& src)
{
	Exception::operator=(src);
	return *this;
}",224.0,228.0,1.0,1.0,5.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,PoolException
1201,17785,formatMessage,1,PoolException.formatMessage,LogString PoolException.formatMessage (log4cxx_status_t),main\cpp\exception.cpp,"LogString PoolException::formatMessage(log4cxx_status_t)
{
	return LOG4CXX_STR(""Pool exception"");
}",230.0,233.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,LogString
1202,17793,TranscoderException,1,TranscoderException.TranscoderException,ANY TranscoderException.TranscoderException (log4cxx_status_t),main\cpp\exception.cpp,"TranscoderException::TranscoderException(const TranscoderException& src)
	: Exception(src)
{
}",241.0,244.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1203,17803,operator =,1,TranscoderException.operator =,TranscoderException TranscoderException.operator = (TranscoderException),main\cpp\exception.cpp,"TranscoderException& TranscoderException::operator=(const TranscoderException& src)
{
	Exception::operator=(src);
	return *this;
}",246.0,250.0,1.0,1.0,5.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,TranscoderException
1204,17816,formatMessage,1,TranscoderException.formatMessage,LogString TranscoderException.formatMessage (log4cxx_status_t),main\cpp\exception.cpp,"LogString TranscoderException::formatMessage(log4cxx_status_t)
{
	return LOG4CXX_STR(""Transcoder exception"");
}",252.0,255.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,LogString
1205,17824,InterruptedException,1,InterruptedException.InterruptedException,ANY InterruptedException.InterruptedException (),main\cpp\exception.cpp,"InterruptedException::InterruptedException(const InterruptedException& src)
	: Exception(src)
{
}",267.0,270.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1206,17838,operator =,1,InterruptedException.operator =,InterruptedException InterruptedException.operator = (InterruptedException),main\cpp\exception.cpp,"InterruptedException& InterruptedException::operator=(const InterruptedException& src)
{
	Exception::operator=(src);
	return *this;
}",272.0,276.0,1.0,1.0,5.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,InterruptedException
1207,17851,formatMessage,1,InterruptedException.formatMessage,LogString InterruptedException.formatMessage (log4cxx_status_t),main\cpp\exception.cpp,"LogString InterruptedException::formatMessage(log4cxx_status_t stat)
{
	LogString s(LOG4CXX_STR(""InterruptedException: stat = ""));
	Pool p;
	StringHelper::toString(stat, p, s);
	return s;
}",278.0,284.0,1.0,1.0,7.0,1,1,5,4,0,1,1,1,0,1,,0,0,2,1,1,LogString
1208,17870,ThreadException,1,ThreadException.ThreadException,ANY ThreadException.ThreadException (log4cxx_status_t),main\cpp\exception.cpp,"ThreadException::ThreadException(const ThreadException& src)
	: Exception(src)
{
}",296.0,299.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1209,17885,operator =,1,ThreadException.operator =,ThreadException ThreadException.operator = (ThreadException),main\cpp\exception.cpp,"ThreadException& ThreadException::operator=(const ThreadException& src)
{
	Exception::operator=(src);
	return *this;
}",301.0,305.0,1.0,1.0,5.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,ThreadException
1210,17898,formatMessage,1,ThreadException.formatMessage,LogString ThreadException.formatMessage (log4cxx_status_t),main\cpp\exception.cpp,"LogString ThreadException::formatMessage(log4cxx_status_t stat)
{
	LogString s(LOG4CXX_STR(""Thread exception: stat = ""));
	Pool p;
	StringHelper::toString(stat, p, s);
	return s;
}",307.0,313.0,1.0,1.0,7.0,1,1,5,4,0,1,1,1,0,1,,0,0,2,1,1,LogString
1211,17917,IllegalMonitorStateException,1,IllegalMonitorStateException.IllegalMonitorStateException,ANY IllegalMonitorStateException.IllegalMonitorStateException (LogString),main\cpp\exception.cpp,"IllegalMonitorStateException::IllegalMonitorStateException(const IllegalMonitorStateException& src)
	: Exception(src)
{
}",320.0,323.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1212,17927,operator =,1,IllegalMonitorStateException.operator =,IllegalMonitorStateException IllegalMonitorStateException.operator = (IllegalMonitorStateException),main\cpp\exception.cpp,"IllegalMonitorStateException& IllegalMonitorStateException::operator=(const IllegalMonitorStateException& src)
{
	Exception::operator=(src);
	return *this;
}",325.0,329.0,1.0,1.0,5.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,IllegalMonitorStateException
1213,17940,InstantiationException,1,InstantiationException.InstantiationException,ANY InstantiationException.InstantiationException (LogString),main\cpp\exception.cpp,"InstantiationException::InstantiationException(const InstantiationException& src)
	: Exception(src)
{
}",336.0,339.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1214,17950,operator =,1,InstantiationException.operator =,InstantiationException InstantiationException.operator = (InstantiationException),main\cpp\exception.cpp,"InstantiationException& InstantiationException::operator=(const InstantiationException& src)
{
	Exception::operator=(src);
	return *this;
}",341.0,345.0,1.0,1.0,5.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,InstantiationException
1215,17963,ClassNotFoundException,1,ClassNotFoundException.ClassNotFoundException,ANY ClassNotFoundException.ClassNotFoundException (LogString),main\cpp\exception.cpp,"ClassNotFoundException::ClassNotFoundException(const ClassNotFoundException& src)
	: Exception(src)
{
}",352.0,355.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1216,17973,operator =,1,ClassNotFoundException.operator =,ClassNotFoundException ClassNotFoundException.operator = (ClassNotFoundException),main\cpp\exception.cpp,"ClassNotFoundException& ClassNotFoundException::operator=(const ClassNotFoundException& src)
{
	Exception::operator=(src);
	return *this;
}",358.0,362.0,1.0,1.0,5.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,ClassNotFoundException
1217,17986,formatMessage,1,ClassNotFoundException.formatMessage,LogString ClassNotFoundException.formatMessage (LogString),main\cpp\exception.cpp,"LogString ClassNotFoundException::formatMessage(const LogString& className)
{
	LogString s(LOG4CXX_STR(""Class not found: ""));
	s.append(className);
	return s;
}",364.0,369.0,1.0,1.0,6.0,1,1,3,2,0,0,1,1,0,0,,0,0,2,1,1,LogString
1218,18002,NoSuchElementException,1,NoSuchElementException.NoSuchElementException,ANY NoSuchElementException.NoSuchElementException (),main\cpp\exception.cpp,"NoSuchElementException::NoSuchElementException(const NoSuchElementException& src)
	: Exception(src)
{
}",377.0,380.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1219,18011,operator =,1,NoSuchElementException.operator =,NoSuchElementException NoSuchElementException.operator = (NoSuchElementException),main\cpp\exception.cpp,"NoSuchElementException& NoSuchElementException::operator=(const NoSuchElementException& src)
{
	Exception::operator=(src);
	return *this;
}",382.0,386.0,1.0,1.0,5.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,NoSuchElementException
1220,18024,IllegalStateException,1,IllegalStateException.IllegalStateException,ANY IllegalStateException.IllegalStateException (),main\cpp\exception.cpp,"IllegalStateException::IllegalStateException(const IllegalStateException& src)
	: Exception(src)
{
}",394.0,397.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1221,18033,operator =,1,IllegalStateException.operator =,IllegalStateException IllegalStateException.operator = (IllegalStateException),main\cpp\exception.cpp,"IllegalStateException& IllegalStateException::operator=(const IllegalStateException& src)
{
	Exception::operator=(src);
	return *this;
}",399.0,403.0,1.0,1.0,5.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,IllegalStateException
1222,18046,SocketException,1,SocketException.SocketException,ANY SocketException.SocketException (LogString),main\cpp\exception.cpp,"SocketException::SocketException(const SocketException& src)
	: IOException(src)
{
}",413.0,416.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1223,18061,operator =,1,SocketException.operator =,SocketException SocketException.operator = (SocketException),main\cpp\exception.cpp,"SocketException& SocketException::operator=(const SocketException& src)
{
	IOException::operator=(src);
	return *this;
}",418.0,422.0,1.0,1.0,5.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,SocketException
1224,18074,ConnectException,1,ConnectException.ConnectException,ANY ConnectException.ConnectException (log4cxx_status_t),main\cpp\exception.cpp,"ConnectException::ConnectException(const ConnectException& src)
	: SocketException(src)
{
}",428.0,431.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1225,18084,operator =,1,ConnectException.operator =,ConnectException ConnectException.operator = (ConnectException),main\cpp\exception.cpp,"ConnectException& ConnectException::operator=(const ConnectException& src)
{
	SocketException::operator=(src);
	return *this;
}",433.0,437.0,1.0,1.0,5.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,ConnectException
1226,18097,ClosedChannelException,1,ClosedChannelException.ClosedChannelException,ANY ClosedChannelException.ClosedChannelException (),main\cpp\exception.cpp,"ClosedChannelException::ClosedChannelException(const ClosedChannelException& src)
	: SocketException(src)
{
}",443.0,446.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1227,18106,operator =,1,ClosedChannelException.operator =,ClosedChannelException ClosedChannelException.operator = (ClosedChannelException),main\cpp\exception.cpp,"ClosedChannelException& ClosedChannelException::operator=(const ClosedChannelException& src)
{
	SocketException::operator=(src);
	return *this;
}",448.0,452.0,1.0,1.0,5.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,ClosedChannelException
1228,18119,BindException,1,BindException.BindException,ANY BindException.BindException (log4cxx_status_t),main\cpp\exception.cpp,"BindException::BindException(const BindException& src)
	: SocketException(src)
{
}",458.0,461.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1229,18129,operator =,1,BindException.operator =,BindException BindException.operator = (BindException),main\cpp\exception.cpp,"BindException& BindException::operator=(const BindException& src)
{
	SocketException::operator=(src);
	return *this;
}",463.0,467.0,1.0,1.0,5.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,BindException
1230,18142,InterruptedIOException,1,InterruptedIOException.InterruptedIOException,ANY InterruptedIOException.InterruptedIOException (LogString),main\cpp\exception.cpp,"InterruptedIOException::InterruptedIOException(const InterruptedIOException& src)
	: IOException(src)
{
}",473.0,476.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1231,18152,operator =,1,InterruptedIOException.operator =,InterruptedIOException InterruptedIOException.operator = (InterruptedIOException),main\cpp\exception.cpp,"InterruptedIOException& InterruptedIOException::operator=(const InterruptedIOException& src)
{
	IOException::operator=(src);
	return *this;
}",478.0,482.0,1.0,1.0,5.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,InterruptedIOException
1232,18165,SocketTimeoutException,1,SocketTimeoutException.SocketTimeoutException,ANY SocketTimeoutException.SocketTimeoutException (),main\cpp\exception.cpp,"SocketTimeoutException::SocketTimeoutException(const SocketTimeoutException& src)
	: InterruptedIOException(src)
{
}",489.0,492.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1233,18174,operator =,1,SocketTimeoutException.operator =,SocketTimeoutException SocketTimeoutException.operator = (SocketTimeoutException),main\cpp\exception.cpp,"SocketTimeoutException& SocketTimeoutException::operator=(const SocketTimeoutException& src)
{
	InterruptedIOException::operator=(src);
	return *this;
}",494.0,498.0,1.0,1.0,5.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,SocketTimeoutException
1234,18216,FallbackErrorHandler,1,FallbackErrorHandler.FallbackErrorHandler,ANY FallbackErrorHandler.FallbackErrorHandler (),main\cpp\fallbackerrorhandler.cpp,"FallbackErrorHandler::FallbackErrorHandler()
	: m_priv(std::make_unique<FallbackErrorHandlerPrivate>())
{
}",42.0,45.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1235,18220,~FallbackErrorHandler,1,FallbackErrorHandler.~FallbackErrorHandler,ANY FallbackErrorHandler.~FallbackErrorHandler (),main\cpp\fallbackerrorhandler.cpp,FallbackErrorHandler::~FallbackErrorHandler() {},47.0,47.0,1.0,48.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1236,18224,setLogger,1,FallbackErrorHandler.setLogger,void FallbackErrorHandler.setLogger (LoggerPtr),main\cpp\fallbackerrorhandler.cpp,"void FallbackErrorHandler::setLogger(const LoggerPtr& logger)
{
	LogLog::debug(((LogString) LOG4CXX_STR(""FB: Adding logger [""))
		+ logger->getName() + LOG4CXX_STR(""].""));
	m_priv->loggers.push_back(logger);
}",49.0,54.0,1.0,1.0,6.0,7,4,4,3,0,1,1,1,0,1,,0,0,2,1,1,void
1237,18252,error,1,FallbackErrorHandler.error,"void FallbackErrorHandler.error (LogString,ANY,int)",main\cpp\fallbackerrorhandler.cpp,"void FallbackErrorHandler::error(const LogString& message,
	const std::exception& e,
	int, const spi::LoggingEventPtr&) const
{
	LogLog::debug(((LogString) LOG4CXX_STR(""FB: The following error reported: ""))
		+  message, e);
	LogLog::debug(LOG4CXX_STR(""FB: INITIATING FALLBACK PROCEDURE.""));

	AppenderPtr primaryLocked = m_priv->primary.lock();
	AppenderPtr backupLocked = m_priv->backup.lock();

	if ( !primaryLocked || !backupLocked )
	{
		return;
	}

	for (LoggerPtr l : m_priv->loggers)
	{
		LogLog::debug(((LogString) LOG4CXX_STR(""FB: Searching for [""))
			+ primaryLocked->getName() + LOG4CXX_STR(""] in logger ["")
			+ l->getName() + LOG4CXX_STR(""].""));
		LogLog::debug(((LogString) LOG4CXX_STR(""FB: Replacing [""))
			+ primaryLocked->getName() + LOG4CXX_STR(""] by ["")
			+ backupLocked->getName() + LOG4CXX_STR(""] in logger ["")
			+ l->getName() + LOG4CXX_STR(""].""));
		l->removeAppender(primaryLocked);
		LogLog::debug(((LogString) LOG4CXX_STR(""FB: Adding appender [""))
			+ backupLocked-...",63.0,94.0,1.0,1.0,32.0,0,0,3,3,0,0,1,1,0,0,,0,0,8,4,4,void
1238,18408,setAppender,1,FallbackErrorHandler.setAppender,void FallbackErrorHandler.setAppender (AppenderPtr),main\cpp\fallbackerrorhandler.cpp,"void FallbackErrorHandler::setAppender(const AppenderPtr& primary1)
{
	LogLog::debug(((LogString) LOG4CXX_STR(""FB: Setting primary appender to [""))
		+ primary1->getName() + LOG4CXX_STR(""].""));
	m_priv->primary = primary1;
}",96.0,101.0,1.0,1.0,6.0,7,5,4,3,0,1,1,1,0,1,,0,0,2,1,1,void
1239,18434,setBackupAppender,1,FallbackErrorHandler.setBackupAppender,void FallbackErrorHandler.setBackupAppender (AppenderPtr),main\cpp\fallbackerrorhandler.cpp,"void FallbackErrorHandler::setBackupAppender(const AppenderPtr& backup1)
{
	LogLog::debug(((LogString) LOG4CXX_STR(""FB: Setting backup appender to [""))
		+ backup1->getName() + LOG4CXX_STR(""].""));
	m_priv->backup = backup1;

	// Make sure that we keep a reference to the appender around, since otherwise
	// the appender would be lost if it has no loggers that use it.
	LoggerRepository* repository = LogManager::getRootLogger()->getLoggerRepository();
	Hierarchy* hierarchy = dynamic_cast<Hierarchy*>(repository);
	if(hierarchy){
		hierarchy->addAppender(backup1);
	}

}",103.0,117.0,1.0,1.0,15.0,13,5,11,6,0,2,2,2,0,1,,0,1,2,1,1,void
1240,18484,activateOptions,1,FallbackErrorHandler.activateOptions,void FallbackErrorHandler.activateOptions (Pool),main\cpp\fallbackerrorhandler.cpp,"void FallbackErrorHandler::activateOptions(Pool&)
{
}",119.0,121.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
1241,18489,setOption,1,FallbackErrorHandler.setOption,"void FallbackErrorHandler.setOption (LogString,LogString)",main\cpp\fallbackerrorhandler.cpp,"void FallbackErrorHandler::setOption(const LogString&, const LogString&)
{
}",123.0,125.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
1242,18517,FilePrivate,1,FilePrivate.FilePrivate,ANY FilePrivate.FilePrivate (),main\cpp\file.cpp,"FilePrivate(LogString path, bool autoDelete) :
		path(path),
		autoDelete(autoDelete)
	{}",40.0,43.0,2.0,3.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ANY
1243,18534,File,1,File.File,ANY File.File (),main\cpp\file.cpp,"File::File(const File& src)
	: m_priv(std::make_unique<FilePrivate>(src.m_priv->path, src.m_priv->autoDelete))
{
}",117.0,120.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1244,18538,decodeLS,1,decodeLS,LogString decodeLS<S> (S*),main\cpp\file.cpp,"static LogString decodeLS(const std::basic_string<S>& src)
{
	LogString dst;
	Transcoder::decode(src, dst);
	return dst;
}",68.0,73.0,1.0,1.0,6.0,2,2,5,3,0,1,2,2,0,1,,0,0,2,1,1,LogString
1245,18586,operator =,1,File.operator =,File File.operator = (File),main\cpp\file.cpp,"File& File::operator=(const File& src)
{
	if (this == &src)
	{
		return *this;
	}

	m_priv->path.assign(src.m_priv->path);
	m_priv->autoDelete = src.m_priv->autoDelete;

	return *this;
}",122.0,133.0,1.0,1.0,12.0,12,6,5,2,0,0,2,2,0,0,,0,0,2,1,1,File
1246,18623,~File,1,File.~File,ANY File.~File (),main\cpp\file.cpp,"File::~File()
{
	if(m_priv->autoDelete){
		Pool p;
		deleteFile(p);
	}
}",136.0,142.0,1.0,1.0,7.0,1,1,2,2,0,0,2,2,0,0,,0,0,0,0,0,ANY
1247,18635,getPath,1,File.getPath,LogString File.getPath (),main\cpp\file.cpp,"char* File::getPath(Pool& p) const
{
	int style = APR_FILEPATH_ENCODING_UNKNOWN;
	apr_filepath_encoding(&style, p.getAPRPool());
	char* retval = NULL;

	if (style == APR_FILEPATH_ENCODING_UTF8)
	{
		retval = Transcoder::encodeUTF8(m_priv->path, p);
	}
	else
	{
		retval = Transcoder::encode(m_priv->path, p);
	}

	return retval;
}",169.0,185.0,1.0,1.0,17.0,1,1,1,1,0,0,1,1,0,0,,0,0,2,1,1,char*
1248,18643,setPath,1,File.setPath,File File.setPath (LogString),main\cpp\file.cpp,"File& File::setPath(const LogString& newName)
{
	m_priv->path.assign(newName);
	return *this;
}",150.0,154.0,1.0,1.0,5.0,3,3,2,2,0,0,1,1,0,0,,0,0,2,1,1,File
1249,18658,getName,1,File.getName,LogString File.getName (),main\cpp\file.cpp,"LogString File::getName() const
{
	const logchar slashes[] = { 0x2F, 0x5C, 0 };
	size_t lastSlash = m_priv->path.find_last_of(slashes);

	if (lastSlash != LogString::npos)
	{
		return m_priv->path.substr(lastSlash + 1);
	}

	return m_priv->path;
}",156.0,167.0,1.0,1.0,12.0,11,6,9,4,0,0,2,2,0,0,,0,0,0,0,0,LogString
1250,18749,open,1,File.open,"log4cxx_status_t File.open (apr_file_t**,int,int,Pool)",main\cpp\file.cpp,"log4cxx_status_t File::open(apr_file_t** file, int flags,
	int perm, Pool& p) const
{
	return apr_file_open(file, getPath(p), flags, perm, p.getAPRPool());
}",187.0,191.0,1.0,1.0,5.0,1,1,5,4,0,0,1,1,0,0,,0,0,8,4,4,log4cxx_status_t
1251,18768,exists,1,File.exists,bool File.exists (Pool),main\cpp\file.cpp,"bool File::exists(Pool& p) const
{
	apr_finfo_t finfo;
	apr_status_t rv = apr_stat(&finfo, getPath(p),
			0, p.getAPRPool());
	return rv == APR_SUCCESS;
}",195.0,201.0,1.0,1.0,7.0,4,4,6,4,0,0,1,1,0,0,,0,0,2,1,1,bool
1252,18791,convertBackSlashes,1,File.convertBackSlashes,char* File.convertBackSlashes (char*),main\cpp\file.cpp,"char* File::convertBackSlashes(char* src)
{
	for (char* c = src; *c != 0; c++)
	{
		if (*c == '\\')
		{
			*c = '/';
		}
	}

	return src;
}",203.0,214.0,1.0,1.0,12.0,7,4,6,2,0,0,3,4,0,0,,0,0,2,1,1,char*
1253,18821,deleteFile,1,File.deleteFile,bool File.deleteFile (Pool),main\cpp\file.cpp,"bool File::deleteFile(Pool& p) const
{
	apr_status_t rv = apr_file_remove(convertBackSlashes(getPath(p)),
			p.getAPRPool());
	return rv == APR_SUCCESS;
}",216.0,221.0,1.0,1.0,6.0,3,3,5,3,0,0,1,1,0,0,,0,0,2,1,1,bool
1254,18841,renameTo,1,File.renameTo,"bool File.renameTo (File,Pool)",main\cpp\file.cpp,"bool File::renameTo(const File& dest, Pool& p) const
{
	apr_status_t rv = apr_file_rename(convertBackSlashes(getPath(p)),
			convertBackSlashes(dest.getPath(p)),
			p.getAPRPool());
	return rv == APR_SUCCESS;
}",223.0,229.0,1.0,1.0,7.0,4,3,7,4,0,0,1,1,0,0,,0,0,4,2,2,bool
1255,18868,length,1,File.length,size_t File.length (Pool),main\cpp\file.cpp,"size_t File::length(Pool& pool) const
{
	apr_finfo_t finfo;
	apr_status_t rv = apr_stat(&finfo, getPath(pool),
			APR_FINFO_SIZE, pool.getAPRPool());

	if (rv == APR_SUCCESS)
	{
		return (size_t) finfo.size;
	}

	return 0;
}",232.0,244.0,1.0,1.0,13.0,6,5,8,5,0,0,2,2,0,0,,0,0,2,1,1,size_t
1256,18900,lastModified,1,File.lastModified,log4cxx_time_t File.lastModified (Pool),main\cpp\file.cpp,"log4cxx_time_t File::lastModified(Pool& pool) const
{
	apr_finfo_t finfo;
	apr_status_t rv = apr_stat(&finfo, getPath(pool),
			APR_FINFO_MTIME, pool.getAPRPool());

	if (rv == APR_SUCCESS)
	{
		return finfo.mtime;
	}

	return 0;
}",247.0,259.0,1.0,1.0,13.0,5,4,8,5,0,0,2,2,0,0,,0,0,2,1,1,log4cxx_time_t
1257,18930,list,1,File.list,vector<LogString> File.list (Pool),main\cpp\file.cpp,"std::vector<LogString> File::list(Pool& p) const
{
	apr_dir_t* dir;
	apr_finfo_t entry;
	std::vector<LogString> filenames;

	apr_status_t stat = apr_dir_open(&dir,
			convertBackSlashes(getPath(p)),
			p.getAPRPool());

	if (stat == APR_SUCCESS)
	{
		int style = APR_FILEPATH_ENCODING_UNKNOWN;
		apr_filepath_encoding(&style, p.getAPRPool());
		stat = apr_dir_read(&entry, APR_FINFO_DIRENT, dir);

		while (stat == APR_SUCCESS)
		{
			if (entry.name != NULL)
			{
				LogString filename;

				if (style == APR_FILEPATH_ENCODING_UTF8)
				{
					Transcoder::decodeUTF8(entry.name, filename);
				}
				else
				{
					Transcoder::decode(entry.name, filename);
				}

				filenames.push_back(filename);
			}

			stat = apr_dir_read(&entry, APR_FINFO_DIRENT, dir);
		}

		stat = apr_dir_close(dir);
	}

	return filenames;
}",262.0,303.0,1.0,1.0,42.0,22,7,35,15,0,1,5,11,0,1,,0,0,2,1,1,vector<LogString>
1258,19034,getParent,1,File.getParent,LogString File.getParent (Pool),main\cpp\file.cpp,"LogString File::getParent(Pool&) const
{
	LogString::size_type slashPos = m_priv->path.rfind(LOG4CXX_STR('/'));
	LogString::size_type backPos = m_priv->path.rfind(LOG4CXX_STR('\\'));

	if (slashPos == LogString::npos)
	{
		slashPos = backPos;
	}
	else
	{
		if (backPos != LogString::npos && backPos > slashPos)
		{
			slashPos = backPos;
		}
	}

	LogString parent;

	if (slashPos != LogString::npos && slashPos > 0)
	{
		parent.assign(m_priv->path, 0, slashPos);
	}

	return parent;
}",305.0,330.0,1.0,1.0,26.0,15,7,15,5,0,0,3,3,0,0,,0,0,2,1,1,LogString
1259,19110,mkdirs,1,File.mkdirs,bool File.mkdirs (Pool),main\cpp\file.cpp,"bool File::mkdirs(Pool& p) const
{
	apr_status_t stat = apr_dir_make_recursive(convertBackSlashes(getPath(p)),
			APR_OS_DEFAULT, p.getAPRPool());
	return stat == APR_SUCCESS;
}",332.0,337.0,1.0,1.0,6.0,3,3,6,4,0,0,1,1,0,0,,0,0,2,1,1,bool
1260,19131,setAutoDelete,1,File.setAutoDelete,void File.setAutoDelete (bool),main\cpp\file.cpp,"void File::setAutoDelete(bool autoDelete){
	m_priv->autoDelete = autoDelete;
}",339.0,341.0,1.0,1.0,3.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1261,19141,getAutoDelete,1,File.getAutoDelete,bool File.getAutoDelete (),main\cpp\file.cpp,"bool File::getAutoDelete() const{
	return m_priv->autoDelete;
}",343.0,345.0,1.0,1.0,3.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,bool
1262,19182,FileAppender,1,FileAppender.FileAppender,ANY FileAppender.FileAppender (),main\cpp\fileappender.cpp,"FileAppender::FileAppender(std::unique_ptr<FileAppenderPriv> priv)
	: WriterAppender (std::move(priv))
{
}",76.0,79.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1263,19222,~FileAppender,1,FileAppender.~FileAppender,ANY FileAppender.~FileAppender (),main\cpp\fileappender.cpp,"FileAppender::~FileAppender()
{
	finalize();
}",81.0,84.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1264,19227,setAppend,1,FileAppender.setAppend,void FileAppender.setAppend (bool),main\cpp\fileappender.cpp,"void FileAppender::setAppend(bool fileAppend1)
{
	std::lock_guard<std::recursive_mutex> lock(_priv->mutex);
	_priv->fileAppend = fileAppend1;
}",86.0,90.0,1.0,44.0,5.0,11,6,5,3,0,0,1,1,0,0,,0,0,2,1,1,void
1265,19263,setFile,1,FileAppender.setFile,void FileAppender.setFile (LogString),main\cpp\fileappender.cpp,"void FileAppender::setFile(const LogString& file)
{
	std::lock_guard<std::recursive_mutex> lock(_priv->mutex);
	setFileInternal(file);
}",92.0,96.0,1.0,44.0,5.0,7,5,4,3,0,0,1,1,0,0,,0,0,2,1,1,void
1266,19289,setFileInternal,1,FileAppender.setFileInternal,void FileAppender.setFileInternal (LogString),main\cpp\fileappender.cpp,"void FileAppender::setFileInternal(
	const LogString& filename,
	bool append1,
	bool bufferedIO1,
	size_t bufferSize1,
	Pool& p)
{
	// It does not make sense to have immediate flush and bufferedIO.
	if (bufferedIO1)
	{
		setImmediateFlush(false);
	}

	closeWriter();

	bool writeBOM = false;

	if (StringHelper::equalsIgnoreCase(getEncoding(),
			LOG4CXX_STR(""utf-16""), LOG4CXX_STR(""UTF-16"")))
	{
		//
		//    don't want to write a byte order mark if the file exists
		//
		if (append1)
		{
			File outFile;
			outFile.setPath(filename);
			writeBOM = !outFile.exists(p);
		}
		else
		{
			writeBOM = true;
		}
	}

	OutputStreamPtr outStream;

	try
	{
		outStream = FileOutputStreamPtr(new FileOutputStream(filename, append1));
	}
	catch (IOException&)
	{
		LogString parentName = File().setPath(filename).getParent(p);

		if (!parentName.empty())
		{
			File parentDir;
			parentDir.setPath(parentName);

			if (!parentDir.exists(p) && parentDir.mkdirs(p))
			{
				outStream = OutputStreamPtr(ne...",265.0,356.0,1.0,1.0,92.0,4,4,2,2,0,0,1,1,0,0,,0,0,10,5,5,void
1267,19306,setBufferedIO,1,FileAppender.setBufferedIO,void FileAppender.setBufferedIO (bool),main\cpp\fileappender.cpp,"void FileAppender::setBufferedIO(bool bufferedIO1)
{
	std::lock_guard<std::recursive_mutex> lock(_priv->mutex);
	_priv->bufferedIO = bufferedIO1;

	if (bufferedIO1)
	{
		setImmediateFlush(false);
	}
}",103.0,112.0,1.0,44.0,10.0,11,6,6,3,0,0,2,2,0,0,,0,0,2,1,1,void
1268,19347,setOption,1,FileAppender.setOption,"void FileAppender.setOption (LogString,LogString)",main\cpp\fileappender.cpp,"void FileAppender::setOption(const LogString& option,
	const LogString& value)
{
	if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""FILE""), LOG4CXX_STR(""file""))
		|| StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""FILENAME""), LOG4CXX_STR(""filename"")))
	{
		std::lock_guard<std::recursive_mutex> lock(_priv->mutex);
		_priv->fileName = stripDuplicateBackslashes(value);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""APPEND""), LOG4CXX_STR(""append"")))
	{
		std::lock_guard<std::recursive_mutex> lock(_priv->mutex);
		_priv->fileAppend = OptionConverter::toBoolean(value, true);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""BUFFEREDIO""), LOG4CXX_STR(""bufferedio"")))
	{
		std::lock_guard<std::recursive_mutex> lock(_priv->mutex);
		_priv->bufferedIO = OptionConverter::toBoolean(value, false);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""IMMEDIATEFLUSH""), LOG4CXX_STR(""immediateflush"")))
	{
		std::lock_guard<std::recursive_mutex> l...",114.0,147.0,1.0,45.0,34.0,14,7,9,5,0,2,2,2,2,2,,0,2,4,2,2,void
1269,19613,activateOptions,1,FileAppender.activateOptions,void FileAppender.activateOptions (Pool),main\cpp\fileappender.cpp,"void FileAppender::activateOptions(Pool& p)
{
	std::lock_guard<std::recursive_mutex> lock(_priv->mutex);
	activateOptionsInternal(p);
}",149.0,153.0,1.0,44.0,5.0,7,5,4,3,0,0,1,1,0,0,,0,0,2,1,1,void
1270,19639,activateOptionsInternal,1,FileAppender.activateOptionsInternal,void FileAppender.activateOptionsInternal (Pool),main\cpp\fileappender.cpp,"void FileAppender::activateOptionsInternal(Pool& p)
{
	int errors = 0;

	if (!_priv->fileName.empty())
	{
		try
		{
			setFileInternal(_priv->fileName, _priv->fileAppend, _priv->bufferedIO, _priv->bufferSize, p);
		}
		catch (IOException& e)
		{
			errors++;
			LogString msg(LOG4CXX_STR(""setFile(""));
			msg.append(_priv->fileName);
			msg.append(1, (logchar) 0x2C /* ',' */);
			StringHelper::toString(_priv->fileAppend, msg);
			msg.append(LOG4CXX_STR("") call failed.""));
			_priv->errorHandler->error(msg, e, ErrorCode::FILE_OPEN_FAILURE);
		}
	}
	else
	{
		errors++;
		LogLog::error(LogString(LOG4CXX_STR(""File option not set for appender [""))
			+  _priv->name + LOG4CXX_STR(""].""));
		LogLog::warn(LOG4CXX_STR(""Are you using FileAppender instead of ConsoleAppender?""));
	}

	if (errors == 0)
	{
		WriterAppender::activateOptions(p);
	}
}",155.0,188.0,1.0,6.0,34.0,37,7,22,8,2,3,4,5,0,2,,0,1,2,1,1,void
1271,19817,stripDuplicateBackslashes,1,FileAppender.stripDuplicateBackslashes,LogString FileAppender.stripDuplicateBackslashes (LogString),main\cpp\fileappender.cpp,"LogString FileAppender::stripDuplicateBackslashes(const LogString& src)
{
	logchar backslash = 0x5C; // '\\'
	LogString::size_type i = src.find_last_of(backslash);

	if (i != LogString::npos)
	{
		LogString tmp(src);

		for (;
			i != LogString::npos && i > 0;
			i = tmp.find_last_of(backslash, i - 1))
		{
			//
			//   if the preceding character is a slash then
			//      remove the preceding character
			//      and continue processing
			if (tmp[i - 1] == backslash)
			{
				tmp.erase(i, 1);
				i--;

				if (i == 0)
				{
					break;
				}
			}
			else
			{
				//
				//  if there an odd number of slashes
				//     the string wasn't trying to work around
				//     OptionConverter::convertSpecialChars
				return src;
			}
		}

		return tmp;
	}

	return src;
}",202.0,243.0,1.0,1.0,42.0,15,9,19,5,0,0,6,11,0,0,,0,0,2,1,1,LogString
1272,20108,getFile,1,FileAppender.getFile,LogString FileAppender.getFile (),main\cpp\fileappender.cpp,"LogString FileAppender::getFile() const
{
	return _priv->fileName;
}",358.0,361.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,LogString
1273,20123,getBufferedIO,1,FileAppender.getBufferedIO,bool FileAppender.getBufferedIO (),main\cpp\fileappender.cpp,"bool FileAppender::getBufferedIO() const
{
	return _priv->bufferedIO;
}",363.0,366.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,bool
1274,20138,getBufferSize,1,FileAppender.getBufferSize,int FileAppender.getBufferSize (),main\cpp\fileappender.cpp,"int FileAppender::getBufferSize() const
{
	return _priv->bufferSize;
}",368.0,371.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,int
1275,20153,setBufferSize,1,FileAppender.setBufferSize,void FileAppender.setBufferSize (int),main\cpp\fileappender.cpp,"void FileAppender::setBufferSize(int bufferSize1)
{
	_priv->bufferSize = bufferSize1;
}",373.0,376.0,1.0,1.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1276,20170,getAppend,1,FileAppender.getAppend,bool FileAppender.getAppend (),main\cpp\fileappender.cpp,"bool FileAppender::getAppend() const
{
	return _priv->fileAppend;
}",378.0,381.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,bool
1277,20196,newInstance,1,FileDatePatternConverter.newInstance,PatternConverterPtr FileDatePatternConverter.newInstance (ANY),main\cpp\filedatepatternconverter.cpp,"PatternConverterPtr FileDatePatternConverter::newInstance(
	const std::vector<LogString>& options)
{
	if (options.size() == 0)
	{
		std::vector<LogString> altOptions;
		altOptions.push_back(LOG4CXX_STR(""yyyy-MM-dd""));
		return DatePatternConverter::newInstance(altOptions);
	}

	return DatePatternConverter::newInstance(options);
}",27.0,38.0,1.0,1.0,12.0,8,4,9,5,0,2,2,2,0,2,,0,0,2,1,1,PatternConverterPtr
1278,20254,FileInputStreamPrivate,1,FileInputStreamPrivate.FileInputStreamPrivate,ANY FileInputStreamPrivate.FileInputStreamPrivate (),main\cpp\fileinputstream.cpp,FileInputStreamPrivate() : fileptr(nullptr) {},34.0,34.0,2.0,47.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1279,20262,FileInputStream,1,FileInputStream.FileInputStream,ANY FileInputStream.FileInputStream (LogString),main\cpp\fileinputstream.cpp,"FileInputStream::FileInputStream(const File& aFile) :
	m_priv(std::make_unique<FileInputStreamPrivate>())
{
	apr_fileperms_t perm = APR_OS_DEFAULT;
	apr_int32_t flags = APR_READ;
	apr_status_t stat = aFile.open(&m_priv->fileptr, flags, perm, m_priv->pool);

	if (stat != APR_SUCCESS)
	{
		throw IOException(stat);
	}
}",69.0,80.0,1.0,1.0,12.0,0,0,1,1,0,0,1,1,0,0,,0,0,2,1,1,ANY
1280,20279,open,1,FileInputStream.open,void FileInputStream.open (LogString),main\cpp\fileinputstream.cpp,"void FileInputStream::open(const LogString& filename)
{
	apr_fileperms_t perm = APR_OS_DEFAULT;
	apr_int32_t flags = APR_READ;
	apr_status_t stat = File().setPath(filename).open(&m_priv->fileptr, flags, perm, m_priv->pool);

	if (stat != APR_SUCCESS)
	{
		throw IOException(stat);
	}
}",56.0,66.0,1.0,1.0,11.0,10,6,13,8,0,0,2,2,0,0,,0,0,2,1,1,void
1281,20357,~FileInputStream,1,FileInputStream.~FileInputStream,ANY FileInputStream.~FileInputStream (),main\cpp\fileinputstream.cpp,"FileInputStream::~FileInputStream()
{
	if (m_priv->fileptr != NULL && !APRInitializer::isDestructed)
	{
		apr_file_close(m_priv->fileptr);
	}
}",83.0,89.0,1.0,1.0,7.0,6,5,4,3,0,1,2,2,1,0,,0,1,0,0,0,ANY
1282,20377,close,1,FileInputStream.close,void FileInputStream.close (),main\cpp\fileinputstream.cpp,"void FileInputStream::close()
{
	apr_status_t stat = apr_file_close(m_priv->fileptr);

	if (stat == APR_SUCCESS)
	{
		m_priv->fileptr = NULL;
	}
	else
	{
		throw IOException(stat);
	}
}",92.0,104.0,1.0,1.0,13.0,5,3,6,4,0,0,2,2,0,0,,0,0,0,0,0,void
1283,20403,read,1,FileInputStream.read,int FileInputStream.read (ByteBuffer),main\cpp\fileinputstream.cpp,"int FileInputStream::read(ByteBuffer& buf)
{
	apr_size_t bytesRead = buf.remaining();
	apr_status_t stat = apr_file_read(m_priv->fileptr, buf.current(), &bytesRead);
	int retval = -1;

	if (!APR_STATUS_IS_EOF(stat))
	{
		if (stat != APR_SUCCESS)
		{
			throw IOException(stat);
		}

		buf.position(buf.position() + bytesRead);
		retval = (int)bytesRead;
	}

	return retval;
}",107.0,125.0,1.0,1.0,19.0,16,10,17,6,0,0,3,4,0,0,,0,0,2,1,1,int
1284,20478,FileLocationPatternConverter,1,FileLocationPatternConverter.FileLocationPatternConverter,ANY FileLocationPatternConverter.FileLocationPatternConverter (),main\cpp\filelocationpatternconverter.cpp,"FileLocationPatternConverter::FileLocationPatternConverter() :
	LoggingEventPatternConverter(LOG4CXX_STR(""File Location""),
		LOG4CXX_STR(""file""))
{
}",29.0,33.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1285,20482,newInstance,1,FileLocationPatternConverter.newInstance,PatternConverterPtr FileLocationPatternConverter.newInstance (ANY),main\cpp\filelocationpatternconverter.cpp,"PatternConverterPtr FileLocationPatternConverter::newInstance(
	const std::vector<LogString>& /* options */ )
{
	static WideLife<PatternConverterPtr> instance = std::make_shared<FileLocationPatternConverter>();
	return instance;
}",35.0,40.0,1.0,1.0,6.0,2,2,3,2,0,0,1,1,0,0,,0,0,2,1,1,PatternConverterPtr
1286,20496,format,1,FileLocationPatternConverter.format,"void FileLocationPatternConverter.format (LoggingEventPtr,LogString,Pool)",main\cpp\filelocationpatternconverter.cpp,"void FileLocationPatternConverter::format(
	const LoggingEventPtr& event,
	LogString& toAppendTo,
	Pool& /* p */ ) const
{
	append(toAppendTo, event->getLocationInformation().getFileName());
}",42.0,48.0,1.0,1.0,7.0,2,2,2,2,0,0,1,1,0,0,,0,0,6,3,3,void
1287,20532,FileOutputStreamPrivate,1,FileOutputStreamPrivate.FileOutputStreamPrivate,ANY FileOutputStreamPrivate.FileOutputStreamPrivate (),main\cpp\fileoutputstream.cpp,FileOutputStreamPrivate() : fileptr(nullptr) {},34.0,34.0,2.0,48.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1288,20540,FileOutputStream,1,FileOutputStream.FileOutputStream,"ANY FileOutputStream.FileOutputStream (LogString,bool)",main\cpp\fileoutputstream.cpp,"FileOutputStream::FileOutputStream(const logchar* filename,
	bool append) : m_priv(std::make_unique<FileOutputStreamPrivate>())
{
	m_priv->fileptr = open(filename, append, m_priv->pool);
}",48.0,52.0,1.0,1.0,5.0,3,2,4,3,0,0,1,1,0,0,,0,0,4,2,2,ANY
1289,20572,open,1,FileOutputStream.open,"apr_file_t FileOutputStream.open (LogString,bool,Pool)",main\cpp\fileoutputstream.cpp,"apr_file_t* FileOutputStream::open(const LogString& filename,
	bool append, Pool& pool)
{
	apr_fileperms_t perm = APR_OS_DEFAULT;
	apr_int32_t flags = APR_WRITE | APR_CREATE;

	if (append)
	{
		flags |= APR_APPEND;
	}
	else
	{
		flags |= APR_TRUNCATE;
	}

	File fn;
	fn.setPath(filename);
	apr_file_t* fileptr = 0;
	apr_status_t stat = fn.open(&fileptr, flags, perm, pool);

	if (stat != APR_SUCCESS)
	{
		throw IOException(stat);
	}

	return fileptr;
}",54.0,80.0,1.0,1.0,27.0,10,6,21,13,0,0,3,3,0,0,,0,0,6,3,3,apr_file_t
1290,20632,~FileOutputStream,1,FileOutputStream.~FileOutputStream,ANY FileOutputStream.~FileOutputStream (),main\cpp\fileoutputstream.cpp,"FileOutputStream::~FileOutputStream()
{
	if (m_priv->fileptr != NULL && !APRInitializer::isDestructed)
	{
		apr_file_close(m_priv->fileptr);
	}
}",82.0,88.0,1.0,1.0,7.0,6,5,4,3,0,1,2,2,1,0,,0,1,0,0,0,ANY
1291,20652,close,1,FileOutputStream.close,void FileOutputStream.close (Pool),main\cpp\fileoutputstream.cpp,"void FileOutputStream::close(Pool& /* p */)
{
	if (m_priv->fileptr != NULL)
	{
		apr_status_t stat = apr_file_close(m_priv->fileptr);

		if (stat != APR_SUCCESS)
		{
			throw IOException(stat);
		}

		m_priv->fileptr = NULL;
	}
}",90.0,103.0,1.0,1.0,14.0,8,4,9,4,0,0,3,4,0,0,,0,0,2,1,1,void
1292,20684,flush,1,FileOutputStream.flush,void FileOutputStream.flush (Pool),main\cpp\fileoutputstream.cpp,"void FileOutputStream::flush(Pool& /* p */)
{
}",105.0,107.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
1293,20689,write,1,FileOutputStream.write,"void FileOutputStream.write (ByteBuffer,Pool)",main\cpp\fileoutputstream.cpp,"void FileOutputStream::write(ByteBuffer& buf, Pool& /* p */ )
{
	if (m_priv->fileptr == NULL)
	{
		throw IOException(-1);
	}

	size_t nbytes = buf.remaining();
	size_t pos = buf.position();
	const char* data = buf.data();

	while (nbytes > 0)
	{
		apr_status_t stat = apr_file_write(
				m_priv->fileptr, data + pos, &nbytes);

		if (stat != APR_SUCCESS)
		{
			throw IOException(stat);
		}

		pos += nbytes;
		buf.position(pos);
		nbytes = buf.remaining();
	}
}",109.0,134.0,1.0,1.0,26.0,21,11,23,8,0,0,4,5,0,0,,0,0,4,2,2,void
1294,20766,getFilePtr,1,FileOutputStream.getFilePtr,apr_file_t FileOutputStream.getFilePtr (),main\cpp\fileoutputstream.cpp,"apr_file_t* FileOutputStream::getFilePtr() const{
	return m_priv->fileptr;
}",136.0,138.0,1.0,1.0,3.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,apr_file_t
1295,20786,FileRenameActionPrivate,1,FileRenameActionPrivate.FileRenameActionPrivate,"ANY FileRenameActionPrivate.FileRenameActionPrivate (File,File,bool)",main\cpp\filerenameaction.cpp,"FileRenameActionPrivate( const File& toRename,
		const File& renameTo,
		bool renameEmptyFile1):
		source(toRename), destination(renameTo), renameEmptyFile(renameEmptyFile1) {}",30.0,33.0,2.0,79.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ANY
1296,20798,FileRenameAction,1,FileRenameAction.FileRenameAction,"ANY FileRenameAction.FileRenameAction (File,File,bool)",main\cpp\filerenameaction.cpp,"FileRenameAction::FileRenameAction(const File& toRename,
	const File& renameTo,
	bool renameEmptyFile1)
	: Action( std::make_unique<FileRenameActionPrivate>(toRename, renameTo, renameEmptyFile1) )
{
}",42.0,47.0,1.0,1.0,6.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ANY
1297,20805,execute,1,FileRenameAction.execute,bool FileRenameAction.execute (ANY),main\cpp\filerenameaction.cpp,"bool FileRenameAction::execute(LOG4CXX_NS::helpers::Pool& pool1) const
{
	return priv->source.renameTo(priv->destination, pool1);
}",49.0,52.0,1.0,8.0,4.0,7,3,3,2,0,0,1,1,0,0,,0,0,2,1,1,bool
1298,20861,FileWatchdogPrivate,1,FileWatchdogPrivate.FileWatchdogPrivate,ANY FileWatchdogPrivate.FileWatchdogPrivate (File),main\cpp\filewatchdog.cpp,"FileWatchdogPrivate(const File& file1) :
		file(file1), delay(DEFAULT_DELAY), lastModif(0),
		warnedAlready(false), interrupted(0), thread(){}",34.0,36.0,2.0,50.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1299,20875,FileWatchdog,1,FileWatchdog.FileWatchdog,ANY FileWatchdog.FileWatchdog (File),main\cpp\filewatchdog.cpp,"FileWatchdog::FileWatchdog(const File& file1)
	: m_priv(std::make_unique<FileWatchdogPrivate>(file1))
{
}",56.0,59.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1300,20880,~FileWatchdog,1,FileWatchdog.~FileWatchdog,ANY FileWatchdog.~FileWatchdog (),main\cpp\filewatchdog.cpp,"FileWatchdog::~FileWatchdog()
{
	if (m_priv->thread.joinable())
		stop();
}",61.0,65.0,1.0,1.0,5.0,2,2,1,1,0,0,2,2,0,0,,0,0,0,0,0,ANY
1301,20893,is_active,1,FileWatchdog.is_active,bool FileWatchdog.is_active (),main\cpp\filewatchdog.cpp,"bool FileWatchdog::is_active()
{
	return m_priv->thread.joinable();
}",68.0,71.0,1.0,1.0,4.0,2,2,1,1,0,0,1,1,0,0,,0,0,0,0,0,bool
1302,20904,stop,1,FileWatchdog.stop,void FileWatchdog.stop (),main\cpp\filewatchdog.cpp,"void FileWatchdog::stop()
{
	LogLog::debug(LOG4CXX_STR(""Stopping file watchdog""));
	m_priv->interrupted = 0xFFFF;

	{
		std::unique_lock<std::mutex> lock(m_priv->interrupt_mutex);
		m_priv->interrupt.notify_all();
	}
	m_priv->thread.join();
}",73.0,83.0,1.0,1.0,11.0,12,5,7,3,0,1,1,1,0,1,,0,0,0,0,0,void
1303,20944,file,1,FileWatchdog.file,File FileWatchdog.file (),main\cpp\filewatchdog.cpp,"const File& FileWatchdog::file()
{
	return m_priv->file;
}",85.0,88.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,File
1304,20952,checkAndConfigure,1,FileWatchdog.checkAndConfigure,void FileWatchdog.checkAndConfigure (),main\cpp\filewatchdog.cpp,"void FileWatchdog::checkAndConfigure()
{
	LogString msg(LOG4CXX_STR(""Checking [""));
	msg += m_priv->file.getPath();
	msg += LOG4CXX_STR(""]"");
	LogLog::debug(msg);
	Pool pool1;

	if (!m_priv->file.exists(pool1))
	{
		if (!m_priv->warnedAlready)
		{
			LogLog::debug(((LogString) LOG4CXX_STR(""[""))
				+ m_priv->file.getPath()
				+ LOG4CXX_STR(""] does not exist.""));
			m_priv->warnedAlready = true;
		}
	}
	else
	{
		auto thisMod = m_priv->file.lastModified(pool1);

		if (thisMod > m_priv->lastModif)
		{
			m_priv->lastModif = thisMod;
			doOnChange();
			m_priv->warnedAlready = false;
		}
	}
}",90.0,119.0,1.0,1.0,30.0,18,7,11,4,0,2,3,4,0,2,,0,0,0,0,0,void
1305,21047,run,1,FileWatchdog.run,void FileWatchdog.run (),main\cpp\filewatchdog.cpp,"void FileWatchdog::run()
{
	LogString msg(LOG4CXX_STR(""Checking [""));
	msg += m_priv->file.getPath();
	msg += LOG4CXX_STR(""] at "");
	StringHelper::toString((int)m_priv->delay, m_priv->pool, msg);
	msg += LOG4CXX_STR("" ms interval"");
	LogLog::debug(msg);

	while (!is_interrupted())
	{
		std::unique_lock<std::mutex> lock( m_priv->interrupt_mutex );
		if (!m_priv->interrupt.wait_for( lock, std::chrono::milliseconds( m_priv->delay ),
			std::bind(&FileWatchdog::is_interrupted, this) ))
			checkAndConfigure();
	}

	LogString msg2(LOG4CXX_STR(""Stop checking [""));
	msg2 += m_priv->file.getPath();
	msg2 += LOG4CXX_STR(""]"");
	LogLog::debug(msg2);
}",121.0,142.0,1.0,1.0,22.0,30,8,25,9,0,3,3,4,0,3,,0,0,0,0,0,void
1306,21155,start,1,FileWatchdog.start,void FileWatchdog.start (),main\cpp\filewatchdog.cpp,"void FileWatchdog::start()
{
	checkAndConfigure();
	if (!m_priv->thread.joinable())
	{
		m_priv->interrupted = 0;
		m_priv->thread = ThreadUtility::instance()->createThread(LOG4CXX_STR(""FileWatchdog""), &FileWatchdog::run, this);
	}
}",144.0,152.0,1.0,1.0,9.0,11,5,5,3,0,0,2,2,0,0,,0,0,0,0,0,void
1307,21192,is_interrupted,1,FileWatchdog.is_interrupted,bool FileWatchdog.is_interrupted (),main\cpp\filewatchdog.cpp,"bool FileWatchdog::is_interrupted()
{
	return m_priv->interrupted == 0xFFFF;
}",154.0,157.0,1.0,1.0,4.0,2,2,1,1,0,0,1,1,0,0,,0,0,0,0,0,bool
1308,21202,setDelay,1,FileWatchdog.setDelay,void FileWatchdog.setDelay (long),main\cpp\filewatchdog.cpp,"void FileWatchdog::setDelay(long delay1){
	m_priv->delay = delay1;
}",159.0,161.0,1.0,1.0,3.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1309,21223,Filter,1,Filter.Filter,ANY Filter.Filter (),main\cpp\filter.cpp,"Filter::Filter(std::unique_ptr<FilterPrivate> priv) :
	m_priv(std::move(priv))
{

}",30.0,34.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1310,21232,~Filter,1,Filter.~Filter,ANY Filter.~Filter (),main\cpp\filter.cpp,Filter::~Filter() {},36.0,36.0,1.0,20.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1311,21236,getNext,1,Filter.getNext,FilterPtr Filter.getNext (),main\cpp\filter.cpp,"FilterPtr Filter::getNext() const
{
	return m_priv->next;
}",38.0,41.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,FilterPtr
1312,21244,setNext,1,Filter.setNext,void Filter.setNext (FilterPtr),main\cpp\filter.cpp,"void Filter::setNext(const FilterPtr& newNext)
{
	m_priv->next = newNext;
}",43.0,46.0,1.0,1.0,4.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1313,21254,activateOptions,1,Filter.activateOptions,void Filter.activateOptions (Pool),main\cpp\filter.cpp,"void Filter::activateOptions(Pool&)
{
}",48.0,50.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
1314,21259,setOption,1,Filter.setOption,"void Filter.setOption (LogString,LogString)",main\cpp\filter.cpp,"void Filter::setOption(const LogString&, const LogString&)
{
}",52.0,54.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
1315,21281,FilterBasedTriggeringPolicy,1,FilterBasedTriggeringPolicy.FilterBasedTriggeringPolicy,ANY FilterBasedTriggeringPolicy.FilterBasedTriggeringPolicy (),main\cpp\filterbasedtriggeringpolicy.cpp,"FilterBasedTriggeringPolicy::FilterBasedTriggeringPolicy() :
	m_priv(std::make_unique<FilterBasedTriggeringPolicyPrivate>())
{
}",41.0,44.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1316,21285,~FilterBasedTriggeringPolicy,1,FilterBasedTriggeringPolicy.~FilterBasedTriggeringPolicy,ANY FilterBasedTriggeringPolicy.~FilterBasedTriggeringPolicy (),main\cpp\filterbasedtriggeringpolicy.cpp,"FilterBasedTriggeringPolicy::~FilterBasedTriggeringPolicy()
{
}",47.0,49.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1317,21289,isTriggeringEvent,1,FilterBasedTriggeringPolicy.isTriggeringEvent,"bool FilterBasedTriggeringPolicy.isTriggeringEvent (Appender*,ANY,LogString,size_t)",main\cpp\filterbasedtriggeringpolicy.cpp,"bool FilterBasedTriggeringPolicy::isTriggeringEvent(
	Appender* /* appender */,
	const LOG4CXX_NS::spi::LoggingEventPtr& event,
	const LogString& /* filename */,
	size_t /* fileLength */ )
{
	if (m_priv->headFilter == NULL)
	{
		return false;
	}

	for (LOG4CXX_NS::spi::FilterPtr f = m_priv->headFilter; f != NULL; f = f->getNext())
	{
		switch (f->decide(event))
		{
			case Filter::DENY:
				return false;

			case Filter::ACCEPT:
				return true;

			case Filter::NEUTRAL:
				break;
		}
	}

	return true;
}",52.0,79.0,1.0,1.0,28.0,9,5,11,5,0,0,5,5,0,0,,0,0,8,4,4,bool
1318,21350,addFilter,1,FilterBasedTriggeringPolicy.addFilter,void FilterBasedTriggeringPolicy.addFilter (ANY),main\cpp\filterbasedtriggeringpolicy.cpp,"void FilterBasedTriggeringPolicy::addFilter(const LOG4CXX_NS::spi::FilterPtr& newFilter)
{
	if (m_priv->headFilter == NULL)
	{
		m_priv->headFilter = newFilter;
		m_priv->tailFilter = newFilter;
	}
	else
	{
		m_priv->tailFilter->setNext(newFilter);
		m_priv->tailFilter = newFilter;
	}
}",85.0,97.0,1.0,1.0,13.0,6,3,6,3,0,0,2,2,0,0,,0,0,2,1,1,void
1319,21386,clearFilters,1,FilterBasedTriggeringPolicy.clearFilters,void FilterBasedTriggeringPolicy.clearFilters (),main\cpp\filterbasedtriggeringpolicy.cpp,"void FilterBasedTriggeringPolicy::clearFilters()
{
	LOG4CXX_NS::spi::FilterPtr empty;
	m_priv->headFilter = empty;
	m_priv->tailFilter = empty;
}",99.0,104.0,1.0,1.0,6.0,4,2,4,2,0,0,1,1,0,0,,0,0,0,0,0,void
1320,21401,getFilter,1,FilterBasedTriggeringPolicy.getFilter,FilterPtr FilterBasedTriggeringPolicy.getFilter (),main\cpp\filterbasedtriggeringpolicy.cpp,"LOG4CXX_NS::spi::FilterPtr& FilterBasedTriggeringPolicy::getFilter()
{
	return m_priv->headFilter;
}",106.0,109.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,FilterPtr
1321,21409,activateOptions,1,FilterBasedTriggeringPolicy.activateOptions,void FilterBasedTriggeringPolicy.activateOptions (ANY),main\cpp\filterbasedtriggeringpolicy.cpp,"void FilterBasedTriggeringPolicy::activateOptions(LOG4CXX_NS::helpers::Pool& p)
{
	for (LOG4CXX_NS::spi::FilterPtr f = m_priv->headFilter; f != NULL; f = f->getNext())
	{
		f->activateOptions(p);
	}
}",114.0,120.0,1.0,1.0,7.0,4,3,6,4,0,0,2,2,0,0,,0,0,2,1,1,void
1322,21437,setOption,1,FilterBasedTriggeringPolicy.setOption,"void FilterBasedTriggeringPolicy.setOption (LogString,LogString)",main\cpp\filterbasedtriggeringpolicy.cpp,"void FilterBasedTriggeringPolicy::setOption(const LogString& /* option */, const LogString& /* value */ )
{
}",122.0,124.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
1323,21477,FixedWindowRollingPolicyPrivate,1,FixedWindowRollingPolicyPrivate.FixedWindowRollingPolicyPrivate,ANY FixedWindowRollingPolicyPrivate.FixedWindowRollingPolicyPrivate (),main\cpp\fixedwindowrollingpolicy.cpp,"FixedWindowRollingPolicyPrivate() :
		RollingPolicyBasePrivate(),
		minIndex(1),
		maxIndex(7),
		explicitActiveFile(false)
	{}",40.0,45.0,2.0,3.0,6.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1324,21494,FixedWindowRollingPolicy,1,FixedWindowRollingPolicy.FixedWindowRollingPolicy,ANY FixedWindowRollingPolicy.FixedWindowRollingPolicy (),main\cpp\fixedwindowrollingpolicy.cpp,"FixedWindowRollingPolicy::FixedWindowRollingPolicy() :
	RollingPolicyBase (std::make_unique<FixedWindowRollingPolicyPrivate>())
{
}",55.0,58.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1325,21498,~FixedWindowRollingPolicy,1,FixedWindowRollingPolicy.~FixedWindowRollingPolicy,ANY FixedWindowRollingPolicy.~FixedWindowRollingPolicy (),main\cpp\fixedwindowrollingpolicy.cpp,FixedWindowRollingPolicy::~FixedWindowRollingPolicy(){},60.0,60.0,1.0,55.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1326,21502,setMaxIndex,1,FixedWindowRollingPolicy.setMaxIndex,void FixedWindowRollingPolicy.setMaxIndex (int),main\cpp\fixedwindowrollingpolicy.cpp,"void FixedWindowRollingPolicy::setMaxIndex(int maxIndex1)
{
	priv->maxIndex = maxIndex1;
}",62.0,65.0,1.0,1.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1327,21519,setMinIndex,1,FixedWindowRollingPolicy.setMinIndex,void FixedWindowRollingPolicy.setMinIndex (int),main\cpp\fixedwindowrollingpolicy.cpp,"void FixedWindowRollingPolicy::setMinIndex(int minIndex1)
{
	priv->minIndex = minIndex1;
}",67.0,70.0,1.0,1.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1328,21536,setOption,1,FixedWindowRollingPolicy.setOption,"void FixedWindowRollingPolicy.setOption (LogString,LogString)",main\cpp\fixedwindowrollingpolicy.cpp,"void FixedWindowRollingPolicy::setOption(const LogString& option,
	const LogString& value)
{
	if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""MININDEX""),
			LOG4CXX_STR(""minindex"")))
	{
		priv->minIndex = OptionConverter::toInt(value, 1);
	}
	else if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""MAXINDEX""),
			LOG4CXX_STR(""maxindex"")))
	{
		priv->maxIndex = OptionConverter::toInt(value, 7);
	}
	else if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""THROWIOEXCEPTIONONFORKFAILURE""),
			LOG4CXX_STR(""throwioexceptiononforkfailure"")))
	{
		priv->throwIOExceptionOnForkFailure = OptionConverter::toBoolean(value, true);
	}
	else
	{
		RollingPolicyBase::setOption(option, value);
	}
}",72.0,97.0,1.0,2.0,26.0,6,4,5,5,0,2,2,2,1,2,,0,2,4,2,2,void
1329,21638,activateOptions,1,FixedWindowRollingPolicy.activateOptions,void FixedWindowRollingPolicy.activateOptions (Pool),main\cpp\fixedwindowrollingpolicy.cpp,"void FixedWindowRollingPolicy::activateOptions(Pool& p)
{
	RollingPolicyBase::activateOptions(p);

	if (priv->maxIndex < priv->minIndex)
	{
		LogLog::warn(
			LOG4CXX_STR(""MaxIndex  cannot be smaller than MinIndex.""));
		priv->maxIndex = priv->minIndex;
	}

	if ((priv->maxIndex - priv->minIndex) > MAX_WINDOW_SIZE)
	{
		LogLog::warn(LOG4CXX_STR(""Large window sizes are not allowed.""));
		priv->maxIndex = priv->minIndex + MAX_WINDOW_SIZE;
	}

	PatternConverterPtr itc = getIntegerPatternConverter();

	if (itc == NULL)
	{
		throw IllegalStateException();
	}
}",102.0,125.0,1.0,5.0,24.0,36,10,17,7,0,3,4,4,0,3,,0,0,2,1,1,void
1330,21763,initialize,1,FixedWindowRollingPolicy.initialize,"RolloverDescriptionPtr FixedWindowRollingPolicy.initialize (LogString,bool,Pool)",main\cpp\fixedwindowrollingpolicy.cpp,"RolloverDescriptionPtr FixedWindowRollingPolicy::initialize(
	const   LogString&  currentActiveFile,
	const   bool        append,
	Pool&       pool)
{
	LogString newActiveFile(currentActiveFile);
	priv->explicitActiveFile = false;

	if (currentActiveFile.length() > 0)
	{
		priv->explicitActiveFile = true;
		newActiveFile = currentActiveFile;
	}

	if (!priv->explicitActiveFile)
	{
		LogString buf;
		ObjectPtr obj = std::make_shared<Integer>(priv->minIndex);
		formatFileName(obj, buf, pool);
		newActiveFile = buf;
	}

	ActionPtr noAction;

	return std::make_shared<RolloverDescription>(newActiveFile, append, noAction, noAction);
}",130.0,155.0,1.0,1.0,26.0,28,9,22,11,0,0,3,3,0,0,,0,0,6,3,3,RolloverDescriptionPtr
1331,21862,rollover,1,FixedWindowRollingPolicy.rollover,"RolloverDescriptionPtr FixedWindowRollingPolicy.rollover (LogString,bool,Pool)",main\cpp\fixedwindowrollingpolicy.cpp,"RolloverDescriptionPtr FixedWindowRollingPolicy::rollover(
	const   LogString&  currentActiveFile,
	const   bool        append,
	Pool&       pool)
{
	RolloverDescriptionPtr desc;

	if (priv->maxIndex < 0)
	{
		return desc;
	}

	int purgeStart = priv->minIndex;

	if (!priv->explicitActiveFile)
	{
		purgeStart++;
	}

	if (!purge(purgeStart, priv->maxIndex, pool))
	{
		return desc;
	}

	LogString buf;
	ObjectPtr obj = std::make_shared<Integer>(purgeStart);
	formatFileName(obj, buf, pool);

	LogString renameTo(buf);
	LogString compressedName(renameTo);
	ActionPtr compressAction ;

	if(getCreateIntermediateDirectories()){
		File compressedFile(compressedName);
		File compressedParent (compressedFile.getParent(pool));
		compressedParent.mkdirs(pool);
	}

	if (StringHelper::endsWith(renameTo, LOG4CXX_STR("".gz"")))
	{
		renameTo.resize(renameTo.size() - 3);
		GZCompressActionPtr comp = std::make_shared<GZCompressAction>(
					File().setPath(renameTo),
					File().setPath(compressedName),
			...",160.0,229.0,1.0,5.0,70.0,54,11,50,21,0,1,6,6,1,1,,0,1,6,3,3,RolloverDescriptionPtr
1332,22128,getMaxIndex,1,FixedWindowRollingPolicy.getMaxIndex,int FixedWindowRollingPolicy.getMaxIndex (),main\cpp\fixedwindowrollingpolicy.cpp,"int FixedWindowRollingPolicy::getMaxIndex() const
{
	return priv->maxIndex;
}",235.0,238.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,int
1333,22143,getMinIndex,1,FixedWindowRollingPolicy.getMinIndex,int FixedWindowRollingPolicy.getMinIndex (),main\cpp\fixedwindowrollingpolicy.cpp,"int FixedWindowRollingPolicy::getMinIndex() const
{
	return priv->minIndex;
}",244.0,247.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,int
1334,22158,purge,1,FixedWindowRollingPolicy.purge,"bool FixedWindowRollingPolicy.purge (int,int,Pool)",main\cpp\fixedwindowrollingpolicy.cpp,"bool FixedWindowRollingPolicy::purge(int lowIndex, int highIndex, Pool& p) const
{
	int suffixLength = 0;

	std::vector<FileRenameActionPtr> renames;
	LogString buf;
	ObjectPtr obj = std::make_shared<Integer>(lowIndex);
	formatFileName(obj, buf, p);

	LogString lowFilename(buf);

	if (lowFilename.compare(lowFilename.length() - 3, 3, LOG4CXX_STR("".gz"")) == 0)
	{
		suffixLength = 3;
	}
	else if (lowFilename.compare(lowFilename.length() - 4, 4, LOG4CXX_STR("".zip"")) == 0)
	{
		suffixLength = 4;
	}

	for (int i = lowIndex; i <= highIndex; i++)
	{
		File toRenameCompressed;
		toRenameCompressed.setPath(lowFilename);
		File toRenameBase;
		toRenameBase.setPath(lowFilename.substr(0, lowFilename.length() - suffixLength));
		File* toRename = &toRenameCompressed;
		bool isBase = false;
		bool exists = toRenameCompressed.exists(p);

		if (suffixLength > 0)
		{
			if (exists)
			{
				if (toRenameBase.exists(p))
				{
					toRenameBase.deleteFile(p);
				}
			}
			else
			{
				toRename = &toRen...",257.0,369.0,1.0,1.0,113.0,60,15,73,22,0,1,14,30,0,1,,0,0,6,3,3,bool
1335,22459,getFormatSpecifiers,1,FixedWindowRollingPolicy.getFormatSpecifiers,PatternMap FixedWindowRollingPolicy.getFormatSpecifiers (),main\cpp\fixedwindowrollingpolicy.cpp,"LOG4CXX_NS::pattern::PatternMap FixedWindowRollingPolicy::getFormatSpecifiers() const
{
	PatternMap specs;
	RULES_PUT(""i"", IntegerPatternConverter);
	RULES_PUT(""index"", IntegerPatternConverter);
	return specs;
}",375.0,381.0,1.0,1.0,7.0,8,2,7,3,0,0,1,1,0,0,,0,0,0,0,0,PatternMap
1336,22532,FMTLayoutPrivate,1,FMTLayoutPrivate.FMTLayoutPrivate,ANY FMTLayoutPrivate.FMTLayoutPrivate (),main\cpp\fmtlayout.cpp,"FMTLayoutPrivate(const LogString& pattern)
		: conversionPattern(pattern)
		, expectedPatternLength(100)
	{}",38.0,41.0,2.0,3.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1337,22545,FMTLayout,1,FMTLayout.FMTLayout,ANY FMTLayout.FMTLayout (),main\cpp\fmtlayout.cpp,"FMTLayout::FMTLayout(const LogString& pattern) :
	m_priv(std::make_unique<FMTLayoutPrivate>(pattern))
{}",55.0,57.0,1.0,2.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1338,22554,~FMTLayout,1,FMTLayout.~FMTLayout,ANY FMTLayout.~FMTLayout (),main\cpp\fmtlayout.cpp,FMTLayout::~FMTLayout(){},59.0,59.0,1.0,25.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1339,22558,setConversionPattern,1,FMTLayout.setConversionPattern,void FMTLayout.setConversionPattern (LogString),main\cpp\fmtlayout.cpp,"void FMTLayout::setConversionPattern(const LogString& pattern)
{
	m_priv->conversionPattern = pattern;
	helpers::Pool pool;
	activateOptions(pool);
}",61.0,66.0,1.0,1.0,6.0,2,2,3,3,0,0,1,1,0,0,,0,0,2,1,1,void
1340,22571,getConversionPattern,1,FMTLayout.getConversionPattern,LogString FMTLayout.getConversionPattern (),main\cpp\fmtlayout.cpp,"LogString FMTLayout::getConversionPattern() const
{
	return m_priv->conversionPattern;
}",68.0,71.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,LogString
1341,22579,setOption,1,FMTLayout.setOption,"void FMTLayout.setOption (LogString,LogString)",main\cpp\fmtlayout.cpp,"void FMTLayout::setOption(const LogString& option, const LogString& value)
{
	if (helpers::StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""CONVERSIONPATTERN""),
			LOG4CXX_STR(""conversionpattern"")))
	{
		m_priv->conversionPattern = helpers::OptionConverter::convertSpecialChars(value);
	}
}",73.0,81.0,1.0,1.0,9.0,6,3,7,6,0,0,2,2,0,0,,0,0,4,2,2,void
1342,22609,activateOptions,1,FMTLayout.activateOptions,void FMTLayout.activateOptions (ANY),main\cpp\fmtlayout.cpp,"void FMTLayout::activateOptions(helpers::Pool&)
{
	m_priv->expectedPatternLength = getFormattedEventCharacterCount() * 2;
}",83.0,86.0,1.0,1.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,2,1,1,void
1343,22621,format,1,FMTLayout.format,"void FMTLayout.format (LogString,ANY,ANY)",main\cpp\fmtlayout.cpp,"void FMTLayout::format(LogString& output,
	const spi::LoggingEventPtr& event,
	LOG4CXX_NS::helpers::Pool&) const
{
	output.reserve(m_priv->expectedPatternLength + event->getMessage().size());
	auto locationFull = fmt::format(""{}({})"",
										 event->getLocationInformation().getFileName(),
										 event->getLocationInformation().getLineNumber());
	LogString ndc;
	event->getNDC(ndc);
#if LOG4CXX_LOGCHAR_IS_WCHAR || LOG4CXX_LOGCHAR_IS_UNICHAR
	LOG4CXX_ENCODE_CHAR(sNDC, ndc);
	LOG4CXX_ENCODE_CHAR(sPattern, m_priv->conversionPattern);
	LOG4CXX_ENCODE_CHAR(sLogger, event->getLoggerName());
	LOG4CXX_ENCODE_CHAR(sLevel, event->getLevel()->toString());
	LOG4CXX_ENCODE_CHAR(sMsg, event->getMessage());
	LOG4CXX_ENCODE_CHAR(sThread, event->getThreadName());
	LOG4CXX_ENCODE_CHAR(endOfLine, LOG4CXX_EOL);
#else
	auto& sNDC = ndc;
	auto& sPattern = m_priv->conversionPattern;
	auto& sLogger = event->getLoggerName();
	auto sLevel = event->getLevel()->toString();
	auto& sMsg = event->getMessage(...",88.0,144.0,1.0,1.0,57.0,72,4,80,15,0,0,1,1,0,0,,0,0,6,3,3,void
1344,22952,FormattingInfoPrivate,1,FormattingInfoPrivate.FormattingInfoPrivate,"ANY FormattingInfoPrivate.FormattingInfoPrivate (bool,int,int)",main\cpp\formattinginfo.cpp,"FormattingInfoPrivate(const bool leftAlign1, const int minLength1, const int maxLength1):
		minLength(minLength1),
		maxLength(maxLength1),
		leftAlign(leftAlign1) {}",27.0,30.0,2.0,26.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ANY
1345,22964,FormattingInfo,1,FormattingInfo.FormattingInfo,"ANY FormattingInfo.FormattingInfo (bool,int,int)",main\cpp\formattinginfo.cpp,"FormattingInfo::FormattingInfo(
	const bool leftAlign1, const int minLength1, const int maxLength1) :
	m_priv(std::make_unique<FormattingInfoPrivate>(leftAlign1, minLength1, maxLength1))
{
}",56.0,60.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ANY
1346,22971,~FormattingInfo,1,FormattingInfo.~FormattingInfo,ANY FormattingInfo.~FormattingInfo (),main\cpp\formattinginfo.cpp,FormattingInfo::~FormattingInfo() {},62.0,62.0,1.0,36.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1347,22975,getDefault,1,FormattingInfo.getDefault,FormattingInfoPtr FormattingInfo.getDefault (),main\cpp\formattinginfo.cpp,"FormattingInfoPtr FormattingInfo::getDefault()
{
	static helpers::WideLife<FormattingInfoPtr> def= std::make_shared<FormattingInfo>(false, 0, INT_MAX);
	return def;
}",68.0,72.0,1.0,1.0,5.0,6,6,5,4,3,0,1,1,0,0,,0,0,0,0,0,FormattingInfoPtr
1348,22995,format,1,FormattingInfo.format,"void FormattingInfo.format (int,LogString)",main\cpp\formattinginfo.cpp,"void FormattingInfo::format(const int fieldStart, LogString& buffer) const
{
	int rawLength = int(buffer.length() - fieldStart);

	if (rawLength > m_priv->maxLength)
	{
		buffer.erase(buffer.begin() + fieldStart,
			buffer.begin() + fieldStart + (rawLength - m_priv->maxLength));
	}
	else if (rawLength < m_priv->minLength)
	{
		if (m_priv->leftAlign)
		{
			buffer.append(m_priv->minLength - rawLength, (logchar) 0x20 /* ' ' */);
		}
		else
		{
			buffer.insert(fieldStart, m_priv->minLength - rawLength, 0x20 /* ' ' */);
		}
	}
}",80.0,100.0,1.0,1.0,21.0,14,7,12,4,0,0,2,2,0,0,,0,0,4,2,2,void
1349,23080,isLeftAligned,1,FormattingInfo.isLeftAligned,bool FormattingInfo.isLeftAligned (),main\cpp\formattinginfo.cpp,"bool FormattingInfo::isLeftAligned() const
{
	return m_priv->leftAlign;
}",102.0,105.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,bool
1350,23088,getMinLength,1,FormattingInfo.getMinLength,int FormattingInfo.getMinLength (),main\cpp\formattinginfo.cpp,"int FormattingInfo::getMinLength() const
{
	return m_priv->minLength;
}",107.0,110.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,int
1351,23096,getMaxLength,1,FormattingInfo.getMaxLength,int FormattingInfo.getMaxLength (),main\cpp\formattinginfo.cpp,"int FormattingInfo::getMaxLength() const
{
	return m_priv->maxLength;
}",112.0,115.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,int
1352,23121,FullLocationPatternConverter,1,FullLocationPatternConverter.FullLocationPatternConverter,ANY FullLocationPatternConverter.FullLocationPatternConverter (),main\cpp\fulllocationpatternconverter.cpp,"FullLocationPatternConverter::FullLocationPatternConverter() :
	LoggingEventPatternConverter(LOG4CXX_STR(""Full Location""),
		LOG4CXX_STR(""fullLocation""))
{
}",31.0,35.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1353,23125,newInstance,1,FullLocationPatternConverter.newInstance,PatternConverterPtr FullLocationPatternConverter.newInstance (ANY),main\cpp\fulllocationpatternconverter.cpp,"PatternConverterPtr FullLocationPatternConverter::newInstance(
	const std::vector<LogString>& /* options */)
{
	static WideLife<PatternConverterPtr> instance = std::make_shared<FullLocationPatternConverter>();
	return instance;
}",37.0,42.0,1.0,1.0,6.0,2,2,3,2,0,0,1,1,0,0,,0,0,2,1,1,PatternConverterPtr
1354,23139,format,1,FullLocationPatternConverter.format,"void FullLocationPatternConverter.format (LoggingEventPtr,LogString,Pool)",main\cpp\fulllocationpatternconverter.cpp,"void FullLocationPatternConverter::format(
	const LoggingEventPtr& event,
	LogString& toAppendTo,
	Pool& p) const
{
	append(toAppendTo, event->getLocationInformation().getFileName());
	toAppendTo.append(1, (logchar) 0x28 /* '(' */);
	StringHelper::toString(
		event->getLocationInformation().getLineNumber(),
		p, toAppendTo);
	toAppendTo.append(1, (logchar) 0x29 /* ')' */);
}",44.0,55.0,1.0,1.0,12.0,9,3,8,4,0,1,1,1,0,1,,0,0,6,3,3,void
1355,23204,GZCompressActionPrivate,1,GZCompressActionPrivate.GZCompressActionPrivate,"ANY GZCompressActionPrivate.GZCompressActionPrivate (File,File,bool)",main\cpp\gzcompressaction.cpp,"GZCompressActionPrivate( const File& toRename,
		const File& renameTo,
		bool deleteSource):
		source(toRename), destination(renameTo), deleteSource(deleteSource) {}",34.0,37.0,2.0,72.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ANY
1356,23224,GZCompressAction,1,GZCompressAction.GZCompressAction,"ANY GZCompressAction.GZCompressAction (File,File,bool)",main\cpp\gzcompressaction.cpp,"GZCompressAction::GZCompressAction(const File& src,
	const File& dest,
	bool del)
	: Action(std::make_unique<GZCompressActionPrivate>(
			  src, dest, del))
{
}",47.0,53.0,1.0,1.0,7.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ANY
1357,23231,~GZCompressAction,1,GZCompressAction.~GZCompressAction,ANY GZCompressAction.~GZCompressAction (),main\cpp\gzcompressaction.cpp,GZCompressAction::~GZCompressAction() {},55.0,55.0,1.0,40.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1358,23235,execute,1,GZCompressAction.execute,bool GZCompressAction.execute (ANY),main\cpp\gzcompressaction.cpp,"bool GZCompressAction::execute(LOG4CXX_NS::helpers::Pool& p) const
{
	if (priv->source.exists(p))
	{
		apr_pool_t* aprpool = p.getAPRPool();
		apr_procattr_t* attr;
		apr_status_t stat = apr_procattr_create(&attr, aprpool);

		if (stat != APR_SUCCESS)
		{
			throw IOException(stat);
		}

		stat = apr_procattr_io_set(attr, APR_NO_PIPE, APR_FULL_BLOCK, APR_FULL_BLOCK);

		if (stat != APR_SUCCESS)
		{
			throw IOException(stat);
		}

		stat = apr_procattr_cmdtype_set(attr, APR_PROGRAM_PATH);

		if (stat != APR_SUCCESS)
		{
			throw IOException(stat);
		}

		//
		//   set child process output to destination file
		//
		apr_file_t* child_out;
		apr_int32_t flags = APR_FOPEN_READ | APR_FOPEN_WRITE |
			APR_FOPEN_CREATE | APR_FOPEN_TRUNCATE;
		stat = priv->destination.open(&child_out, flags, APR_OS_DEFAULT, p);

		if (stat != APR_SUCCESS)
		{
			throw IOException(stat);
		}

		stat =  apr_procattr_child_out_set(attr, child_out, NULL);

		if (stat != APR_SUCCESS)
		{
			throw IOException(st...",57.0,174.0,1.0,5.0,118.0,87,15,97,23,0,1,12,23,0,1,,0,0,2,1,1,bool
1359,23591,setThrowIOExceptionOnForkFailure,1,GZCompressAction.setThrowIOExceptionOnForkFailure,void GZCompressAction.setThrowIOExceptionOnForkFailure (bool),main\cpp\gzcompressaction.cpp,"void GZCompressAction::setThrowIOExceptionOnForkFailure(bool throwIO){
	priv->throwIOExceptionOnForkFailure = throwIO;
}",176.0,178.0,1.0,1.0,3.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1360,23628,hexdump,1,LOG4CXX_NS.hexdump,"LogString LOG4CXX_NS.hexdump (void*,uint32_t,HexdumpFlags)",main\cpp\hexdump.cpp,"LogString LOG4CXX_NS::hexdump(const void* bytes, uint32_t len, HexdumpFlags flags){
	LogString ret;
	const uint8_t* bytes_u8 = static_cast<const uint8_t*>(bytes);
	LogStream sstream;
#if LOG4CXX_LOGCHAR_IS_WCHAR
	const wchar_t fill_char = L'0';
	const wchar_t space_fill_char = L' ';
#else
	const logchar fill_char = '0';
	const logchar space_fill_char = ' ';
#endif

	if(flags & HexdumpFlags::AddStartingNewline){
		sstream << LOG4CXX_EOL;
	}

	for(uint32_t offset = 0; offset < len; offset += 16){
		if(offset != 0){
			sstream << LOG4CXX_EOL;
		}

		// Print out the offset
		sstream << std::hex << std::setw(8) << std::setfill(fill_char) << offset << std::resetiosflags(std::ios_base::fmtflags(0));

		sstream << std::setw(0) << LOG4CXX_STR(""  "");

		// Print out the first 8 bytes
		for(int byte = 0; byte < 8; byte++){
			if(offset + byte >= len){
				sstream << LOG4CXX_STR(""  "");
				if(byte != 8){
					sstream << LOG4CXX_STR("" "");
				}
				continue;
			}

			sstream << std::hex << std:...",34.0,116.0,1.0,1.0,83.0,91,10,93,14,0,2,19,38,2,0,,0,2,6,3,3,LogString
1361,23964,<lambda>0,1,Hierarchy.removeLogger.<lambda>0,int Hierarchy.removeLogger.<lambda>0 (LoggerPtr),main\cpp\hierarchy.cpp,"[this](const LoggerPtr& child) -> int
	{
		int result = 0;
		for (auto& node : m_priv->provisionNodes)
		{
			if (node.second.end() != std::find(node.second.begin(), node.second.end(), child))
				++result;
		}
		return result;
	}",493.0,502.0,24.0,2.0,10.0,11,5,9,5,0,0,3,4,0,0,,0,0,2,1,1,int
1362,24047,HierarchyPrivate,1,HierarchyPrivate.HierarchyPrivate,ANY HierarchyPrivate.HierarchyPrivate (),main\cpp\hierarchy.cpp,"HierarchyPrivate()
		: configured(false)
		, emittedNoAppenderWarning(false)
		, emittedNoResourceBundleWarning(false)
		, thresholdInt(Level::ALL_INT)
	{
	}",48.0,54.0,2.0,2.0,7.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1363,24066,Hierarchy,1,Hierarchy.Hierarchy,ANY Hierarchy.Hierarchy (),main\cpp\hierarchy.cpp,"Hierarchy::Hierarchy() :
	m_priv(std::make_unique<HierarchyPrivate>())
{
}",75.0,78.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1364,24070,~Hierarchy,1,Hierarchy.~Hierarchy,ANY Hierarchy.~Hierarchy (),main\cpp\hierarchy.cpp,"Hierarchy::~Hierarchy()
{
	std::lock_guard<std::recursive_mutex> lock(m_priv->mutex);
	for (auto& item : m_priv->loggers)
	{
		if (auto& pLogger = item.second)
		{
			pLogger->removeHierarchy();
			pLogger->removeAllAppenders();
		}
	}
	if (m_priv->root)
	{
		m_priv->root->removeHierarchy();
		m_priv->root->removeAllAppenders();
	}
}",80.0,96.0,1.0,1.0,17.0,15,5,11,4,0,0,4,5,0,0,,0,0,0,0,0,ANY
1365,24126,addHierarchyEventListener,1,Hierarchy.addHierarchyEventListener,void Hierarchy.addHierarchyEventListener (ANY),main\cpp\hierarchy.cpp,"void Hierarchy::addHierarchyEventListener(const spi::HierarchyEventListenerPtr& listener)
{
	std::lock_guard<std::recursive_mutex> lock(m_priv->mutex);

	if (std::find(m_priv->listeners.begin(), m_priv->listeners.end(), listener) != m_priv->listeners.end())
	{
		LogLog::warn(LOG4CXX_STR(""Ignoring attempt to add an existent listener.""));
	}
	else
	{
		m_priv->listeners.push_back(listener);
	}
}",98.0,110.0,1.0,1.0,13.0,14,5,9,4,0,1,2,2,0,1,,0,0,2,1,1,void
1366,24184,removeHierarchyEventListener,1,Hierarchy.removeHierarchyEventListener,void Hierarchy.removeHierarchyEventListener (ANY),main\cpp\hierarchy.cpp,"void Hierarchy::removeHierarchyEventListener(const spi::HierarchyEventListenerPtr& listener)
{
	std::lock_guard<std::recursive_mutex> lock(m_priv->mutex);

    auto found = std::find(m_priv->listeners.begin(), m_priv->listeners.end(), listener);
    if(found != m_priv->listeners.end()){
        m_priv->listeners.erase(found);
    }
}",112.0,120.0,1.0,1.0,9.0,16,6,12,4,0,0,2,2,0,0,,0,0,2,1,1,void
1367,24238,clear,1,Hierarchy.clear,void Hierarchy.clear (),main\cpp\hierarchy.cpp,"void Hierarchy::clear()
{
	std::lock_guard<std::recursive_mutex> lock(m_priv->mutex);
	m_priv->loggers.clear();
}",122.0,126.0,1.0,1.0,5.0,7,4,4,2,0,0,1,1,0,0,,0,0,0,0,0,void
1368,24260,emitNoAppenderWarning,1,Hierarchy.emitNoAppenderWarning,void Hierarchy.emitNoAppenderWarning (Logger*),main\cpp\hierarchy.cpp,"void Hierarchy::emitNoAppenderWarning(const Logger* logger)
{
	bool emitWarning = false;
	{
		std::lock_guard<std::recursive_mutex> lock(m_priv->mutex);
		emitWarning = !m_priv->emittedNoAppenderWarning;
		m_priv->emittedNoAppenderWarning = true;
	}

	// No appender in hierarchy, warn user only once.
	if (emitWarning)
	{
		LogLog::warn(((LogString) LOG4CXX_STR(""No appender could be found for logger (""))
			+ logger->getName() + LOG4CXX_STR("").""));
		LogLog::warn(LOG4CXX_STR(""Please initialize the log4cxx system properly.""));
	}
}",128.0,144.0,1.0,1.0,17.0,17,8,11,5,0,2,2,2,0,2,,0,0,2,1,1,void
1369,24318,exists,1,Hierarchy.exists,LoggerPtr Hierarchy.exists (LogString),main\cpp\hierarchy.cpp,"LoggerPtr Hierarchy::exists(const LogString& name)
{
	std::lock_guard<std::recursive_mutex> lock(m_priv->mutex);

	LoggerPtr logger;
	LoggerMap::iterator it = m_priv->loggers.find(name);

	if (it != m_priv->loggers.end())
	{
		logger = it->second;
	}


	return logger;
}",147.0,161.0,1.0,1.0,15.0,13,6,11,5,0,0,2,2,0,0,,0,0,2,1,1,LoggerPtr
1370,24363,setThreshold,1,Hierarchy.setThreshold,void Hierarchy.setThreshold (LevelPtr),main\cpp\hierarchy.cpp,"void Hierarchy::setThreshold(const LogString& levelStr)
{
	LevelPtr l(Level::toLevelLS(levelStr, 0));

	if (l != 0)
	{
		setThreshold(l);
	}
	else
	{
		LogLog::warn(((LogString) LOG4CXX_STR(""No level could be found named \""""))
			+ levelStr + LOG4CXX_STR(""\"".""));
	}
}",172.0,185.0,1.0,1.0,14.0,6,5,5,3,0,0,2,2,0,0,,0,0,2,1,1,void
1371,24422,setThresholdInternal,1,Hierarchy.setThresholdInternal,void Hierarchy.setThresholdInternal (LevelPtr),main\cpp\hierarchy.cpp,"void Hierarchy::setThresholdInternal(const LevelPtr& l)
{
	m_priv->thresholdInt = l->toInt();
	m_priv->threshold = l;

	if (m_priv->thresholdInt != Level::ALL_INT)
	{
		m_priv->configured = true;
	}
}",187.0,196.0,1.0,1.0,10.0,10,4,7,3,0,0,2,2,0,0,,0,0,2,1,1,void
1372,24454,fireAddAppenderEvent,1,Hierarchy.fireAddAppenderEvent,"void Hierarchy.fireAddAppenderEvent (Logger*,Appender*)",main\cpp\hierarchy.cpp,"void Hierarchy::fireAddAppenderEvent(const Logger* logger, const Appender* appender)
{
	setConfigured(true);
	HierarchyEventListenerList clonedList;
	{
		std::lock_guard<std::recursive_mutex> lock(m_priv->mutex);
		clonedList = m_priv->listeners;
	}

	HierarchyEventListenerList::iterator it, itEnd = clonedList.end();
	HierarchyEventListenerPtr listener;

	for (it = clonedList.begin(); it != itEnd; it++)
	{
		listener = *it;
		listener->addAppenderEvent(logger, appender);
	}
}",198.0,215.0,1.0,1.0,18.0,15,7,16,8,0,0,2,2,0,0,,0,0,4,2,2,void
1373,24514,fireRemoveAppenderEvent,1,Hierarchy.fireRemoveAppenderEvent,"void Hierarchy.fireRemoveAppenderEvent (Logger*,Appender*)",main\cpp\hierarchy.cpp,"void Hierarchy::fireRemoveAppenderEvent(const Logger* logger, const Appender* appender)

{
	HierarchyEventListenerList clonedList;
	{
		std::lock_guard<std::recursive_mutex> lock(m_priv->mutex);
		clonedList = m_priv->listeners;
	}
	HierarchyEventListenerList::iterator it, itEnd = clonedList.end();
	HierarchyEventListenerPtr listener;

	for (it = clonedList.begin(); it != itEnd; it++)
	{
		listener = *it;
		listener->removeAppenderEvent(logger, appender);
	}
}",217.0,233.0,1.0,1.0,17.0,15,7,16,8,0,0,2,2,0,0,,0,0,4,2,2,void
1374,24572,getThreshold,1,Hierarchy.getThreshold,LevelPtr Hierarchy.getThreshold (),main\cpp\hierarchy.cpp,"LevelPtr Hierarchy::getThreshold() const
{
	return m_priv->threshold ? m_priv->threshold : Level::getAll();
}",235.0,238.0,1.0,1.0,4.0,4,3,3,2,0,1,1,1,0,0,,0,0,0,0,0,LevelPtr
1375,24588,getLogger,1,Hierarchy.getLogger,LoggerPtr Hierarchy.getLogger (LogString),main\cpp\hierarchy.cpp,"LoggerPtr Hierarchy::getLogger(const LogString& name,
	const spi::LoggerFactoryPtr& factory)
{
	auto root = getRootLogger();
	std::lock_guard<std::recursive_mutex> lock(m_priv->mutex);

	LoggerMap::iterator it = m_priv->loggers.find(name);
	LoggerPtr result;

	if (it != m_priv->loggers.end())
	{
		result = it->second;
	}
	if (!result && factory)
	{
		LoggerPtr logger(factory->makeNewLoggerInstance(m_priv->pool, name));
		logger->setHierarchy(this);
		m_priv->loggers.insert(LoggerMap::value_type(name, logger));

		ProvisionNodeMap::iterator it2 = m_priv->provisionNodes.find(name);

		if (it2 != m_priv->provisionNodes.end())
		{
			updateChildren(it2->second, logger);
			m_priv->provisionNodes.erase(it2);
		}

		updateParents(logger, root);
		result = logger;
	}
	return result;

}",246.0,278.0,1.0,1.0,33.0,2,2,4,3,0,0,1,1,0,0,,0,0,4,2,2,LoggerPtr
1376,24725,getCurrentLoggers,1,Hierarchy.getCurrentLoggers,LoggerList Hierarchy.getCurrentLoggers (),main\cpp\hierarchy.cpp,"LoggerList Hierarchy::getCurrentLoggers() const
{
	std::lock_guard<std::recursive_mutex> lock(m_priv->mutex);

	LoggerList v;
	for (auto& item : m_priv->loggers)
	{
		if (auto pLogger = item.second)
			v.push_back(pLogger);
	}
	return v;
}",280.0,291.0,1.0,1.0,12.0,9,5,9,5,0,0,3,4,0,0,,0,0,0,0,0,LoggerList
1377,24764,getRootLogger,1,Hierarchy.getRootLogger,LoggerPtr Hierarchy.getRootLogger (),main\cpp\hierarchy.cpp,"LoggerPtr Hierarchy::getRootLogger() const
{
	std::lock_guard<std::recursive_mutex> lock(m_priv->mutex);
	if (!m_priv->root)
	{
		m_priv->root = std::make_shared<RootLogger>(m_priv->pool, Level::getDebug());
		m_priv->root->setHierarchy(const_cast<Hierarchy*>(this));
	}

	return m_priv->root;
}",293.0,303.0,1.0,1.0,11.0,20,9,11,4,0,1,2,2,0,0,,0,1,0,0,0,LoggerPtr
1378,24818,isDisabled,1,Hierarchy.isDisabled,bool Hierarchy.isDisabled (int),main\cpp\hierarchy.cpp,"bool Hierarchy::isDisabled(int level) const
{
	return m_priv->thresholdInt > level;
}",305.0,308.0,1.0,1.0,4.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,bool
1379,24829,ensureIsConfigured,1,Hierarchy.ensureIsConfigured,void Hierarchy.ensureIsConfigured (ANY),main\cpp\hierarchy.cpp,"void Hierarchy::ensureIsConfigured(std::function<void()> configurator)
{
	std::unique_lock<std::mutex> lock(m_priv->configuredMutex);
	if (!m_priv->configured)
	{
		configurator();
		m_priv->configured = true;
	}
}",310.0,318.0,1.0,1.0,9.0,9,6,5,2,0,0,2,2,0,0,,0,0,2,1,1,void
1380,24858,resetConfiguration,1,Hierarchy.resetConfiguration,void Hierarchy.resetConfiguration (),main\cpp\hierarchy.cpp,"void Hierarchy::resetConfiguration()
{
	std::lock_guard<std::recursive_mutex> lock(m_priv->mutex);

	if (m_priv->root)
	{
		m_priv->root->setLevel(Level::getDebug());
		m_priv->root->setResourceBundle(0);
	}
	setThresholdInternal(Level::getAll());

	shutdownInternal();

	LoggerMap::const_iterator it, itEnd = m_priv->loggers.end();

	for (it = m_priv->loggers.begin(); it != itEnd; it++)
	{
		if (auto pLogger = it->second)
		{
			pLogger->setLevel(0);
			pLogger->setAdditivity(true);
			pLogger->setResourceBundle(0);
		}
	}

	//rendererMap.clear();
}",320.0,346.0,1.0,1.0,27.0,24,6,19,6,0,2,4,5,0,0,,0,0,0,0,0,void
1381,24952,shutdown,1,Hierarchy.shutdown,void Hierarchy.shutdown (),main\cpp\hierarchy.cpp,"void Hierarchy::shutdown()
{
	std::lock_guard<std::recursive_mutex> lock(m_priv->mutex);

	shutdownInternal();
}",348.0,353.0,1.0,1.0,6.0,5,4,3,2,0,0,1,1,0,0,,0,0,0,0,0,void
1382,24969,shutdownInternal,1,Hierarchy.shutdownInternal,void Hierarchy.shutdownInternal (),main\cpp\hierarchy.cpp,"void Hierarchy::shutdownInternal()
{
	m_priv->configured = false;

	// begin by closing nested appenders
	if (m_priv->root)
		m_priv->root->closeNestedAppenders();

	LoggerMap::iterator it, itEnd = m_priv->loggers.end();

	for (it = m_priv->loggers.begin(); it != itEnd; it++)
	{
		if (auto pLogger = it->second)
			pLogger->closeNestedAppenders();
	}

	// then, remove all appenders
	if (m_priv->root)
		m_priv->root->removeAllAppenders();

	for (it = m_priv->loggers.begin(); it != itEnd; it++)
	{
		if (auto pLogger = it->second)
			pLogger->removeAllAppenders();
	}
}",355.0,380.0,1.0,1.0,26.0,25,4,21,4,0,0,7,9,0,0,,0,0,0,0,0,void
1383,25068,updateParents,1,Hierarchy.updateParents,"void Hierarchy.updateParents (LoggerPtr,LoggerPtr)",main\cpp\hierarchy.cpp,"void Hierarchy::updateParents(const LoggerPtr& logger, const LoggerPtr& root)
{
	const LogString name(logger->getName());
	size_t length = name.size();
	bool parentFound = false;


	// if name = ""w.x.y.z"", loop through ""w.x.y"", ""w.x"" and ""w"", but not ""w.x.y.z""
	for (size_t i = name.find_last_of(0x2E /* '.' */, length - 1);
		(i != LogString::npos) && (i != 0);
		i = name.find_last_of(0x2E /* '.' */, i - 1))
	{
		LogString substr = name.substr(0, i);

		LoggerMap::iterator it = m_priv->loggers.find(substr);

		if (it != m_priv->loggers.end())
		{
			parentFound = true;
			logger->setParent( it->second );
			break; // no need to update the ancestors of the closest ancestor
		}
		else
		{
			ProvisionNodeMap::iterator it2 = m_priv->provisionNodes.find(substr);

			if (it2 != m_priv->provisionNodes.end())
			{
				it2->second.push_back(logger);
			}
			else
			{
				ProvisionNode node(1, logger);
				m_priv->provisionNodes.insert(
					ProvisionNodeMap::value_type(substr, node));
			}
	...",382.0,426.0,1.0,1.0,45.0,24,7,24,10,0,0,5,5,0,0,,0,0,4,2,2,void
1384,25220,updateChildren,1,Hierarchy.updateChildren,"void Hierarchy.updateChildren (ProvisionNode,LoggerPtr)",main\cpp\hierarchy.cpp,"void Hierarchy::updateChildren(const Logger* parent)
{
	for (auto& item : m_priv->loggers)
	{
		for (auto l = item.second; l; l = l->getParent())
		{
			if (l->getParent().get() == parent)
			{
				item.second->updateThreshold();
				break;
			}
		}
	}
}",447.0,460.0,1.0,1.0,14.0,15,6,15,6,0,1,3,4,1,1,,0,1,2,1,1,void
1385,25329,setConfigured,1,Hierarchy.setConfigured,void Hierarchy.setConfigured (bool),main\cpp\hierarchy.cpp,"void Hierarchy::setConfigured(bool newValue)
{
	std::unique_lock<std::mutex> lock(m_priv->configuredMutex, std::try_to_lock);
	if (lock.owns_lock()) // Not being auto-configured?
		m_priv->configured = newValue;
}",462.0,467.0,1.0,1.0,6.0,9,5,7,4,0,0,2,2,0,0,,0,0,2,1,1,void
1386,25360,isConfigured,1,Hierarchy.isConfigured,bool Hierarchy.isConfigured (),main\cpp\hierarchy.cpp,"bool Hierarchy::isConfigured()
{
	std::unique_lock<std::mutex> lock(m_priv->configuredMutex); // Blocks while auto-configuration is active
	return m_priv->configured;
}",469.0,473.0,1.0,1.0,5.0,6,4,4,2,0,0,1,1,0,0,,0,0,0,0,0,bool
1387,25380,create,1,Hierarchy.create,HierarchyPtr Hierarchy.create (),main\cpp\hierarchy.cpp,"HierarchyPtr Hierarchy::create()
{
	HierarchyPtr ret(new Hierarchy);
	return ret;
}",475.0,479.0,1.0,1.0,5.0,1,1,2,2,1,0,1,1,0,0,,0,0,0,0,0,HierarchyPtr
1388,25390,clearAppenders,1,Hierarchy.clearAppenders,void Hierarchy.clearAppenders (),main\cpp\hierarchy.cpp,"void Hierarchy::clearAppenders()
{
	m_priv->allAppenders.clear();
}",481.0,484.0,1.0,1.0,4.0,2,2,1,1,0,0,1,1,0,0,,0,0,0,0,0,void
1389,25400,addAppender,1,Hierarchy.addAppender,void Hierarchy.addAppender (AppenderPtr),main\cpp\hierarchy.cpp,"void Hierarchy::addAppender(AppenderPtr appender)
{
	m_priv->allAppenders.push_back(appender);
}",486.0,489.0,1.0,1.0,4.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1390,25412,removeLogger,1,Hierarchy.removeLogger,"bool Hierarchy.removeLogger (LogString,bool)",main\cpp\hierarchy.cpp,"bool Hierarchy::removeLogger(const LogString& name, bool ifNotUsed)
{
	auto parentRefCount = [this](const LoggerPtr& child) -> int
	{
		int result = 0;
		for (auto& node : m_priv->provisionNodes)
		{
			if (node.second.end() != std::find(node.second.begin(), node.second.end(), child))
				++result;
		}
		return result;
	};
	bool result = false;
	std::lock_guard<std::recursive_mutex> lock(m_priv->mutex);
	auto it = m_priv->loggers.find(name);
	if (it == m_priv->loggers.end())
		;
	else if (ifNotUsed && 1 + parentRefCount(it->second) < it->second.use_count())
		;
	else
	{
		for (auto& node : m_priv->provisionNodes)
		{
			for (size_t i = node.second.size(); 0 < i; )
			{
				if (node.second[--i] == it->second)
					node.second.erase(node.second.begin() + i);
			}
		}
		m_priv->loggers.erase(it);
		result = true;
	}
	return result;
}",491.0,524.0,1.0,1.0,34.0,13,6,11,6,0,0,2,2,0,0,,0,0,4,2,2,bool
1391,25564,HTMLLayoutPrivate,1,HTMLLayoutPrivate.HTMLLayoutPrivate,ANY HTMLLayoutPrivate.HTMLLayoutPrivate (),main\cpp\htmllayout.cpp,"HTMLLayoutPrivate()
		: locationInfo(false)
		, title(LOG4CXX_STR(""Log4cxx Log Messages""))
		, dateFormat()
		, expectedPatternLength(100)
		{}",35.0,40.0,2.0,4.0,6.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1392,25574,HTMLLayout,1,HTMLLayout.HTMLLayout,ANY HTMLLayout.HTMLLayout (),main\cpp\htmllayout.cpp,"HTMLLayout::HTMLLayout()
	: m_priv(std::make_unique<HTMLLayoutPrivate>())
{
	m_priv->dateFormat.setTimeZone(TimeZone::getGMT());
	m_priv->expectedPatternLength = getFormattedEventCharacterCount() * 2;
}",56.0,61.0,1.0,1.0,6.0,6,4,3,2,0,1,1,1,0,0,,0,0,0,0,0,ANY
1393,25595,~HTMLLayout,1,HTMLLayout.~HTMLLayout,ANY HTMLLayout.~HTMLLayout (),main\cpp\htmllayout.cpp,HTMLLayout::~HTMLLayout() {},63.0,63.0,1.0,28.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1394,25599,setOption,1,HTMLLayout.setOption,"void HTMLLayout.setOption (LogString,LogString)",main\cpp\htmllayout.cpp,"void HTMLLayout::setOption(const LogString& option,
	const LogString& value)
{

	if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""TITLE""), LOG4CXX_STR(""title"")))
	{
		setTitle(value);
	}
	else if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""LOCATIONINFO""), LOG4CXX_STR(""locationinfo"")))
	{
		setLocationInfo(OptionConverter::toBoolean(value, false));
		m_priv->expectedPatternLength = getFormattedEventCharacterCount() * 2;
	}
}",66.0,81.0,1.0,1.0,16.0,1,1,3,3,0,1,2,2,1,1,,0,1,4,2,2,void
1395,25645,format,1,HTMLLayout.format,"void HTMLLayout.format (LogString,ANY,Pool)",main\cpp\htmllayout.cpp,"void HTMLLayout::format(LogString& output,
	const spi::LoggingEventPtr& event,
	Pool& p) const
{
	output.reserve(m_priv->expectedPatternLength + event->getMessage().size());
	output.append(LOG4CXX_EOL);
	output.append(LOG4CXX_STR(""<tr>""));
	output.append(LOG4CXX_EOL);
	output.append(LOG4CXX_STR(""<td>""));

	m_priv->dateFormat.format(output, event->getTimeStamp(), p);


	output.append(LOG4CXX_STR(""</td>""));
	output.append(LOG4CXX_EOL);

	output.append(LOG4CXX_STR(""<td title=\""""));
	LogString threadName(event->getThreadName());
	output.append(threadName);
	output.append(LOG4CXX_STR("" thread\"">""));
	output.append(threadName);
	output.append(LOG4CXX_STR(""</td>""));
	output.append(LOG4CXX_EOL);

	output.append(LOG4CXX_STR(""<td title=\""Level\"">""));

	if (event->getLevel()->equals(Level::getDebug()))
	{
		output.append(LOG4CXX_STR(""<font color=\""#339933\"">""));
		output.append(event->getLevel()->toString());
		output.append(LOG4CXX_STR(""</font>""));
	}
	else if (event->getLevel()->isGreaterOrE...",83.0,173.0,1.0,1.0,91.0,70,6,88,13,0,6,5,6,1,5,,0,1,6,3,3,void
1396,26052,appendHeader,1,HTMLLayout.appendHeader,"void HTMLLayout.appendHeader (LogString,Pool)",main\cpp\htmllayout.cpp,"void HTMLLayout::appendHeader(LogString& output, Pool& p)
{
	output.append(LOG4CXX_STR(""<!DOCTYPE HTML PUBLIC ""));
	output.append(LOG4CXX_STR(""\""-//W3C//DTD HTML 4.01 Transitional//EN\"" ""));
	output.append(LOG4CXX_STR(""\""http://www.w3.org/TR/html4/loose.dtd\"">""));
	output.append(LOG4CXX_EOL);
	output.append(LOG4CXX_STR(""<html>""));
	output.append(LOG4CXX_EOL);
	output.append(LOG4CXX_STR(""<head>""));
	output.append(LOG4CXX_EOL);
	output.append(LOG4CXX_STR(""<title>""));
	output.append(m_priv->title);
	output.append(LOG4CXX_STR(""</title>""));
	output.append(LOG4CXX_EOL);
	output.append(LOG4CXX_STR(""<style type=\""text/css\"">""));
	output.append(LOG4CXX_EOL);
	output.append(LOG4CXX_STR(""<!--""));
	output.append(LOG4CXX_EOL);
	output.append(LOG4CXX_STR(""body, table {font-family: arial,sans-serif; font-size: x-small;}""));
	output.append(LOG4CXX_EOL);
	output.append(LOG4CXX_STR(""th {background: #336699; color: #FFFFFF; text-align: left;}""));
	output.append(LOG4CXX_EOL);
	output.append(LOG4CXX_STR...",175.0,238.0,1.0,1.0,64.0,58,2,83,5,0,1,2,2,0,0,,0,0,4,2,2,void
1397,26370,appendFooter,1,HTMLLayout.appendFooter,"void HTMLLayout.appendFooter (LogString,Pool)",main\cpp\htmllayout.cpp,"void HTMLLayout::appendFooter(LogString& output, Pool& /* pool */ )
{
	output.append(LOG4CXX_STR(""</table>""));
	output.append(LOG4CXX_EOL);
	output.append(LOG4CXX_STR(""<br>""));
	output.append(LOG4CXX_EOL);
	output.append(LOG4CXX_STR(""</body></html>""));
}",240.0,247.0,1.0,1.0,8.0,5,1,7,2,0,0,1,1,0,0,,0,0,4,2,2,void
1398,26404,setLocationInfo,1,HTMLLayout.setLocationInfo,void HTMLLayout.setLocationInfo (bool),main\cpp\htmllayout.cpp,"void HTMLLayout::setLocationInfo(bool locationInfoFlag)
{
	m_priv->locationInfo = locationInfoFlag;
}",249.0,252.0,1.0,1.0,4.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1399,26414,getLocationInfo,1,HTMLLayout.getLocationInfo,bool HTMLLayout.getLocationInfo (),main\cpp\htmllayout.cpp,"bool HTMLLayout::getLocationInfo() const
{
	return m_priv->locationInfo;
}",254.0,257.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,bool
1400,26422,setTitle,1,HTMLLayout.setTitle,void HTMLLayout.setTitle (LogString),main\cpp\htmllayout.cpp,"void HTMLLayout::setTitle(const LogString& title1)
{
	m_priv->title.assign(title1);
}",259.0,262.0,1.0,1.0,4.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1401,26434,getTitle,1,HTMLLayout.getTitle,LogString HTMLLayout.getTitle (),main\cpp\htmllayout.cpp,"const LogString& HTMLLayout::getTitle() const
{
	return m_priv->title;
}",264.0,267.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,LogString
1402,26442,getContentType,1,HTMLLayout.getContentType,LogString HTMLLayout.getContentType (),main\cpp\htmllayout.cpp,"LogString HTMLLayout::getContentType() const
{
	return LOG4CXX_STR(""text/html"");
}",269.0,272.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,LogString
1403,26449,ignoresThrowable,1,HTMLLayout.ignoresThrowable,bool HTMLLayout.ignoresThrowable (),main\cpp\htmllayout.cpp,"bool HTMLLayout::ignoresThrowable() const
{
	return false;
}",274.0,277.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,bool
1404,26477,UnknownHostException,1,UnknownHostException.UnknownHostException,ANY UnknownHostException.UnknownHostException (LogString),main\cpp\inetaddress.cpp,"UnknownHostException::UnknownHostException(const UnknownHostException& src)
	: Exception(src)
{
}",42.0,45.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1405,26487,operator =,1,UnknownHostException.operator =,UnknownHostException UnknownHostException.operator = (UnknownHostException),main\cpp\inetaddress.cpp,"UnknownHostException& UnknownHostException::operator=(const UnknownHostException& src)
{
	Exception::operator=(src);
	return *this;
}",47.0,51.0,1.0,1.0,5.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,UnknownHostException
1406,26500,InetAddress,1,InetAddress.InetAddress,"ANY InetAddress.InetAddress (LogString,LogString)",main\cpp\inetaddress.cpp,"InetAddress::InetAddress(const LogString& hostName, const LogString& hostAddr)
	: m_priv(std::make_unique<InetAddressPrivate>())
{
	m_priv->ipAddrString = hostAddr;
	m_priv->hostNameString = hostName;
}",54.0,59.0,1.0,1.0,6.0,4,2,4,3,0,0,1,1,0,0,,0,0,4,2,2,ANY
1407,26516,~InetAddress,1,InetAddress.~InetAddress,ANY InetAddress.~InetAddress (),main\cpp\inetaddress.cpp,InetAddress::~InetAddress(){},61.0,61.0,1.0,29.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1408,26520,getAllByName,1,InetAddress.getAllByName,vector<InetAddressPtr> InetAddress.getAllByName (LogString),main\cpp\inetaddress.cpp,"std::vector<InetAddressPtr> InetAddress::getAllByName(const LogString& host)
{
	LOG4CXX_ENCODE_CHAR(encodedHost, host);

	// retrieve information about the given host
	Pool addrPool;

	apr_sockaddr_t* address = 0;
	apr_status_t status =
		apr_sockaddr_info_get(&address, encodedHost.c_str(),
			APR_INET, 0, 0, addrPool.getAPRPool());

	if (status != APR_SUCCESS)
	{
		LogString msg(LOG4CXX_STR(""Cannot get information about host: ""));
		msg.append(host);
		LogLog::error(msg);
		throw UnknownHostException(msg);
	}

	std::vector<InetAddressPtr> result;
	apr_sockaddr_t* currentAddr = address;

	while (currentAddr != NULL)
	{
		// retrieve the IP address of this InetAddress.
		LogString ipAddrString;
		char* ipAddr;
		status = apr_sockaddr_ip_get(&ipAddr, currentAddr);

		if (status == APR_SUCCESS)
		{
			std::string ip(ipAddr);
			Transcoder::decode(ip, ipAddrString);
		}

		// retrieve the host name of this InetAddress.
		LogString hostNameString;
		char* hostName;
		status = apr_getname...",65.0,117.0,1.0,1.0,53.0,30,11,48,21,0,3,5,7,0,3,,0,0,2,1,1,vector<InetAddressPtr>
1409,26654,getByName,1,InetAddress.getByName,InetAddressPtr InetAddress.getByName (LogString),main\cpp\inetaddress.cpp,"InetAddressPtr InetAddress::getByName(const LogString& host)
{
	InetAddressPtr result;
	auto address = getAllByName(host);
	if (!address.empty())
		result = address.front();
	return result;
}",122.0,129.0,1.0,1.0,8.0,5,3,6,3,1,0,2,2,0,0,,0,0,2,1,1,InetAddressPtr
1410,26680,getHostAddress,1,InetAddress.getHostAddress,LogString InetAddress.getHostAddress (),main\cpp\inetaddress.cpp,"LogString InetAddress::getHostAddress() const
{
	return m_priv->ipAddrString;
}",133.0,136.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,LogString
1411,26688,getHostName,1,InetAddress.getHostName,LogString InetAddress.getHostName (),main\cpp\inetaddress.cpp,"LogString InetAddress::getHostName() const
{
	return m_priv->hostNameString;
}",140.0,143.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,LogString
1412,26696,getLocalHost,1,InetAddress.getLocalHost,InetAddressPtr InetAddress.getLocalHost (),main\cpp\inetaddress.cpp,"InetAddressPtr InetAddress::getLocalHost()
{
	return getByName(LOG4CXX_STR(""127.0.0.1""));
}",147.0,150.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,InetAddressPtr
1413,26704,anyAddress,1,InetAddress.anyAddress,InetAddressPtr InetAddress.anyAddress (),main\cpp\inetaddress.cpp,"InetAddressPtr InetAddress::anyAddress()
{
	// APR_ANYADDR does not work with the LOG4CXX_STR macro
	return getByName(LOG4CXX_STR(""0.0.0.0""));
}",153.0,157.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,InetAddressPtr
1414,26712,toString,1,InetAddress.toString,LogString InetAddress.toString (),main\cpp\inetaddress.cpp,"LogString InetAddress::toString() const
{
	LogString rv(getHostName());
	if (!rv.empty())
		rv.append(LOG4CXX_STR(""/""));
	rv.append(getHostAddress());
	return rv;
}",162.0,169.0,1.0,1.0,8.0,4,2,4,1,0,0,2,2,0,0,,0,0,0,0,0,LogString
1415,26750,InputStream,1,InputStream.InputStream,ANY InputStream.InputStream (),main\cpp\inputstream.cpp,"InputStream::InputStream()
{
}",26.0,28.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1416,26754,~InputStream,1,InputStream.~InputStream,ANY InputStream.~InputStream (),main\cpp\inputstream.cpp,"InputStream::~InputStream()
{
}",30.0,32.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1417,26780,InputStreamReaderPrivate,1,InputStreamReaderPrivate.InputStreamReaderPrivate,ANY InputStreamReaderPrivate.InputStreamReaderPrivate (InputStreamPtr),main\cpp\inputstreamreader.cpp,"InputStreamReaderPrivate(const InputStreamPtr& in1, const CharsetDecoderPtr& dec1) :
		in(in1), dec(dec1) {}",36.0,37.0,2.0,23.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ANY
1418,26793,InputStreamReader,1,InputStreamReader.InputStreamReader,ANY InputStreamReader.InputStreamReader (InputStreamPtr),main\cpp\inputstreamreader.cpp,"InputStreamReader::InputStreamReader(const InputStreamPtr& in1, const CharsetDecoderPtr& dec1)
	: m_priv(std::make_unique<InputStreamReaderPrivate>(in1, dec1))
{
	if (in1 == 0)
	{
		throw NullPointerException(LOG4CXX_STR(""in parameter may not be null.""));
	}

	if (dec1 == 0)
	{
		throw NullPointerException(LOG4CXX_STR(""dec parameter may not be null.""));
	}
}",52.0,64.0,1.0,1.0,13.0,2,2,1,1,0,0,2,2,0,0,,0,0,4,2,2,ANY
1419,26831,~InputStreamReader,1,InputStreamReader.~InputStreamReader,ANY InputStreamReader.~InputStreamReader (),main\cpp\inputstreamreader.cpp,"InputStreamReader::~InputStreamReader()
{
}",66.0,68.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1420,26835,close,1,InputStreamReader.close,void InputStreamReader.close (Pool),main\cpp\inputstreamreader.cpp,"void InputStreamReader::close(Pool& )
{
	m_priv->in->close();
}",70.0,73.0,1.0,1.0,4.0,2,1,1,1,0,0,1,1,0,0,,0,0,2,1,1,void
1421,26846,read,1,InputStreamReader.read,LogString InputStreamReader.read (Pool),main\cpp\inputstreamreader.cpp,"LogString InputStreamReader::read(Pool& p)
{
	const size_t BUFSIZE = 4096;
	ByteBuffer buf(p.pstralloc(BUFSIZE), BUFSIZE);
	LogString output;

	// read whole file
	while (m_priv->in->read(buf) >= 0)
	{
		buf.flip();
		log4cxx_status_t stat = m_priv->dec->decode(buf, output);

		if (stat != 0)
		{
			throw IOException(stat);
		}

		if (buf.remaining() > 0)
		{
			memmove(buf.data(), buf.current(), buf.remaining());
			buf.limit(buf.remaining());
		}
		else
		{
			buf.clear();
		}
	}

	return output;
}",75.0,104.0,1.0,1.0,30.0,18,7,20,6,0,0,4,6,0,0,,0,0,2,1,1,LogString
1422,26946,Integer,1,Integer.Integer,ANY Integer.Integer (),main\cpp\integer.cpp,"Integer::Integer(int val1) : val(val1)
{
}",31.0,33.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1423,26955,~Integer,1,Integer.~Integer,ANY Integer.~Integer (),main\cpp\integer.cpp,"Integer::~Integer()
{
}",35.0,37.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1424,26974,IntegerPatternConverter,1,IntegerPatternConverter.IntegerPatternConverter,ANY IntegerPatternConverter.IntegerPatternConverter (),main\cpp\integerpatternconverter.cpp,"IntegerPatternConverter::IntegerPatternConverter() :
	PatternConverter(LOG4CXX_STR(""Integer""),
		LOG4CXX_STR(""integer""))
{
}",29.0,33.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1425,26978,newInstance,1,IntegerPatternConverter.newInstance,PatternConverterPtr IntegerPatternConverter.newInstance (ANY),main\cpp\integerpatternconverter.cpp,"PatternConverterPtr IntegerPatternConverter::newInstance(
	const std::vector<LogString>& /* options */)
{
	static WideLife<PatternConverterPtr> instance = std::make_shared<IntegerPatternConverter>();
	return instance;
}",35.0,40.0,1.0,1.0,6.0,2,2,3,2,0,0,1,1,0,0,,0,0,2,1,1,PatternConverterPtr
1426,26992,format,1,IntegerPatternConverter.format,"void IntegerPatternConverter.format (ObjectPtr,LogString,Pool)",main\cpp\integerpatternconverter.cpp,"void IntegerPatternConverter::format(
	const ObjectPtr& obj,
	LogString& toAppendTo,
	Pool& p) const
{
	IntegerPtr i = LOG4CXX_NS::cast<Integer>(obj);

	if (i != NULL)
	{
		StringHelper::toString(i->intValue(), p, toAppendTo);
	}
}",42.0,53.0,1.0,1.0,12.0,7,6,10,8,0,1,2,2,0,1,,0,0,6,3,3,void
1427,27050,JSONLayoutPrivate,1,JSONLayoutPrivate.JSONLayoutPrivate,ANY JSONLayoutPrivate.JSONLayoutPrivate (),main\cpp\jsonlayout.cpp,"JSONLayoutPrivate() :
		locationInfo(false),
		prettyPrint(false),
		dateFormat(),
		ppIndentL1(LOG4CXX_STR(""  "")),
		ppIndentL2(LOG4CXX_STR(""    "")),
		expectedPatternLength(100),
		threadInfo(false) {}",37.0,44.0,2.0,22.0,8.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1428,27061,JSONLayout,1,JSONLayout.JSONLayout,ANY JSONLayout.JSONLayout (),main\cpp\jsonlayout.cpp,"JSONLayout::JSONLayout() :
	m_priv(std::make_unique<JSONLayoutPrivate>())
{
}",62.0,65.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1429,27065,~JSONLayout,1,JSONLayout.~JSONLayout,ANY JSONLayout.~JSONLayout (),main\cpp\jsonlayout.cpp,JSONLayout::~JSONLayout(){},67.0,67.0,1.0,27.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1430,27069,setLocationInfo,1,JSONLayout.setLocationInfo,void JSONLayout.setLocationInfo (bool),main\cpp\jsonlayout.cpp,"void JSONLayout::setLocationInfo(bool locationInfoFlag)
{
	m_priv->locationInfo = locationInfoFlag;
}",69.0,72.0,1.0,1.0,4.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1431,27079,getLocationInfo,1,JSONLayout.getLocationInfo,bool JSONLayout.getLocationInfo (),main\cpp\jsonlayout.cpp,"bool JSONLayout::getLocationInfo() const
{
	return m_priv->locationInfo;
}",74.0,77.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,bool
1432,27087,setPrettyPrint,1,JSONLayout.setPrettyPrint,void JSONLayout.setPrettyPrint (bool),main\cpp\jsonlayout.cpp,"void JSONLayout::setPrettyPrint(bool prettyPrintFlag)
{
	m_priv->prettyPrint = prettyPrintFlag;
}",79.0,82.0,1.0,1.0,4.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1433,27097,getPrettyPrint,1,JSONLayout.getPrettyPrint,bool JSONLayout.getPrettyPrint (),main\cpp\jsonlayout.cpp,"bool JSONLayout::getPrettyPrint() const
{
	return m_priv->prettyPrint;
}",84.0,87.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,bool
1434,27105,setThreadInfo,1,JSONLayout.setThreadInfo,void JSONLayout.setThreadInfo (bool),main\cpp\jsonlayout.cpp,"void JSONLayout::setThreadInfo(bool newValue)
{
	m_priv->threadInfo = newValue;
}",89.0,92.0,1.0,1.0,4.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1435,27115,getThreadInfo,1,JSONLayout.getThreadInfo,bool JSONLayout.getThreadInfo (),main\cpp\jsonlayout.cpp,"bool JSONLayout::getThreadInfo() const
{
	return m_priv->threadInfo;
}",94.0,97.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,bool
1436,27123,getContentType,1,JSONLayout.getContentType,LogString JSONLayout.getContentType (),main\cpp\jsonlayout.cpp,"LogString JSONLayout::getContentType() const
{
	return LOG4CXX_STR(""application/json"");
}",99.0,102.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,LogString
1437,27130,activateOptions,1,JSONLayout.activateOptions,void JSONLayout.activateOptions (ANY),main\cpp\jsonlayout.cpp,"void JSONLayout::activateOptions(helpers::Pool& /* p */)
{
	m_priv->expectedPatternLength = getFormattedEventCharacterCount() * 2;
}",104.0,107.0,1.0,1.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,2,1,1,void
1438,27142,setOption,1,JSONLayout.setOption,"void JSONLayout.setOption (LogString,LogString)",main\cpp\jsonlayout.cpp,"void JSONLayout::setOption(const LogString& option, const LogString& value)
{
	if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""LOCATIONINFO""), LOG4CXX_STR(""locationinfo"")))
	{
		setLocationInfo(OptionConverter::toBoolean(value, false));
	}
	else if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""THREADINFO""), LOG4CXX_STR(""threadinfo"")))
	{
		setThreadInfo(OptionConverter::toBoolean(value, false));
	}
	else if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""PRETTYPRINT""), LOG4CXX_STR(""prettyprint"")))
	{
		setPrettyPrint(OptionConverter::toBoolean(value, false));
	}
}",109.0,126.0,1.0,1.0,18.0,2,1,4,4,0,2,2,2,1,2,,0,1,4,2,2,void
1439,27206,format,1,JSONLayout.format,"void JSONLayout.format (LogString,ANY,Pool)",main\cpp\jsonlayout.cpp,"void JSONLayout::format(LogString& output,
	const spi::LoggingEventPtr& event,
	Pool& p) const
{
	output.reserve(m_priv->expectedPatternLength + event->getMessage().size());
	output.append(LOG4CXX_STR(""{""));
	output.append(m_priv->prettyPrint ? LOG4CXX_EOL : LOG4CXX_STR("" ""));

	if (m_priv->prettyPrint)
	{
		output.append(m_priv->ppIndentL1);
	}

	appendQuotedEscapedString(output, LOG4CXX_STR(""timestamp""));
	output.append(LOG4CXX_STR("": ""));
	LogString timestamp;
	m_priv->dateFormat.format(timestamp, event->getTimeStamp(), p);
	appendQuotedEscapedString(output, timestamp);
	output.append(LOG4CXX_STR("",""));
	output.append(m_priv->prettyPrint ? LOG4CXX_EOL : LOG4CXX_STR("" ""));

	if (m_priv->threadInfo)
	{
		if (m_priv->prettyPrint)
		{
			output.append(m_priv->ppIndentL1);
		}
		appendQuotedEscapedString(output, LOG4CXX_STR(""thread""));
		output.append(LOG4CXX_STR("": ""));
		appendQuotedEscapedString(output, event->getThreadName());
		output.append(LOG4CXX_STR("",""));
		output.append(m_p...",128.0,208.0,1.0,1.0,81.0,64,4,83,7,0,0,8,9,0,0,,0,0,6,3,3,void
1440,27528,appendQuotedEscapedString,1,JSONLayout.appendQuotedEscapedString,"void JSONLayout.appendQuotedEscapedString (LogString,LogString)",main\cpp\jsonlayout.cpp,"void JSONLayout::appendQuotedEscapedString(LogString& buf,
	const LogString& input) const
{
	appendItem(input, buf);
}",210.0,214.0,1.0,1.0,5.0,0,0,2,2,0,0,1,1,0,0,,0,0,4,2,2,void
1441,27537,appendItem,1,JSONLayout.appendItem,"void JSONLayout.appendItem (LogString,LogString)",main\cpp\jsonlayout.cpp,"void JSONLayout::appendItem(const LogString& input, LogString& buf)
{
	/* add leading quote */
	buf.push_back(0x22);

	logchar specialChars[] =
	{
		0x08,   /* \b backspace         */
		0x09,   /* \t tab               */
		0x0a,   /* \n newline           */
		0x0c,   /* \f form feed         */
		0x0d,   /* \r carriage return   */
		0x22,   /* \"" double quote      */
		0x5c,   /* \\ backslash         */
		0x00    /* terminating NULL for C-strings */
	};

	size_t start = 0;
	size_t found = input.find_first_of(specialChars, start);

	while (found != LogString::npos)
	{
		if (found > start)
		{
			buf.append(input, start, found - start);
		}

		switch (input[found])
		{
			case 0x08:
				/* \b backspace */
				buf.push_back(0x5c);
				buf.push_back('b');
				break;

			case 0x09:
				/* \t tab */
				buf.push_back(0x5c);
				buf.push_back('t');
				break;

			case 0x0a:
				/* \n newline */
				buf.push_back(0x5c);
				buf.push_back('n');
				break;

			case 0x0c:
				/* \f form feed */...",216.0,311.0,1.0,1.0,96.0,40,9,51,6,2,0,14,9,0,0,,0,0,4,2,2,void
1442,27752,appendSerializedMDC,1,JSONLayout.appendSerializedMDC,"void JSONLayout.appendSerializedMDC (LogString,LoggingEventPtr)",main\cpp\jsonlayout.cpp,"void JSONLayout::appendSerializedMDC(LogString& buf,
	const LoggingEventPtr& event) const
{
	LoggingEvent::KeySet keys = event->getMDCKeySet();

	if (keys.empty())
	{
		return;
	}

	buf.append(LOG4CXX_STR("",""));
	buf.append(m_priv->prettyPrint ? LOG4CXX_EOL : LOG4CXX_STR("" ""));

	if (m_priv->prettyPrint)
	{
		buf.append(m_priv->ppIndentL1);
	}

	appendQuotedEscapedString(buf, LOG4CXX_STR(""context_map""));
	buf.append(LOG4CXX_STR("": {""));
	buf.append(m_priv->prettyPrint ? LOG4CXX_EOL : LOG4CXX_STR("" ""));

	for (LoggingEvent::KeySet::iterator it = keys.begin();
		it != keys.end(); ++it)
	{
		if (m_priv->prettyPrint)
		{
			buf.append(m_priv->ppIndentL2);
		}

		appendQuotedEscapedString(buf, *it);
		buf.append(LOG4CXX_STR("": ""));
		LogString value;
		event->getMDC(*it, value);
		appendQuotedEscapedString(buf, value);

		/* if this isn't the last k:v pair, we need a comma */
		if (it + 1 != keys.end())
		{
			buf.append(LOG4CXX_STR("",""));
			buf.append(m_priv->prettyPrint ? LOG4CXX_EOL ...",313.0,367.0,1.0,1.0,55.0,36,7,40,7,0,0,7,9,0,0,,0,0,4,2,2,void
1443,27931,appendSerializedNDC,1,JSONLayout.appendSerializedNDC,"void JSONLayout.appendSerializedNDC (LogString,LoggingEventPtr)",main\cpp\jsonlayout.cpp,"void JSONLayout::appendSerializedNDC(LogString& buf,
	const LoggingEventPtr& event) const
{
	LogString ndcVal;

	if (!event->getNDC(ndcVal))
	{
		return;
	}

	buf.append(LOG4CXX_STR("",""));
	buf.append(m_priv->prettyPrint ? LOG4CXX_EOL : LOG4CXX_STR("" ""));

	if (m_priv->prettyPrint)
	{
		buf.append(m_priv->ppIndentL1);
	}

	appendQuotedEscapedString(buf, LOG4CXX_STR(""context_stack""));
	buf.append(LOG4CXX_STR("": [""));
	buf.append(m_priv->prettyPrint ? LOG4CXX_EOL : LOG4CXX_STR("" ""));

	if (m_priv->prettyPrint)
	{
		buf.append(m_priv->ppIndentL2);
	}

	appendQuotedEscapedString(buf, ndcVal);
	buf.append(m_priv->prettyPrint ? LOG4CXX_EOL : LOG4CXX_STR("" ""));

	if (m_priv->prettyPrint)
	{
		buf.append(m_priv->ppIndentL1);
	}

	buf.append(LOG4CXX_STR(""]""));
}",369.0,405.0,1.0,1.0,37.0,23,4,26,5,0,0,5,5,0,0,,0,0,4,2,2,void
1444,28041,appendSerializedLocationInfo,1,JSONLayout.appendSerializedLocationInfo,"void JSONLayout.appendSerializedLocationInfo (LogString,LoggingEventPtr,Pool)",main\cpp\jsonlayout.cpp,"void JSONLayout::appendSerializedLocationInfo(LogString& buf,
	const LoggingEventPtr& event, Pool& p) const
{
	if (m_priv->prettyPrint)
	{
		buf.append(m_priv->ppIndentL1);
	}

	appendQuotedEscapedString(buf, LOG4CXX_STR(""location_info""));
	buf.append(LOG4CXX_STR("": {""));
	buf.append(m_priv->prettyPrint ? LOG4CXX_EOL : LOG4CXX_STR("" ""));
	const LocationInfo& locInfo = event->getLocationInformation();

	if (m_priv->prettyPrint)
	{
		buf.append(m_priv->ppIndentL2);
	}

	appendQuotedEscapedString(buf, LOG4CXX_STR(""file""));
	buf.append(LOG4CXX_STR("": ""));
	LOG4CXX_DECODE_CHAR(fileName, locInfo.getFileName());
	appendQuotedEscapedString(buf, fileName);
	buf.append(LOG4CXX_STR("",""));
	buf.append(m_priv->prettyPrint ? LOG4CXX_EOL : LOG4CXX_STR("" ""));

	if (m_priv->prettyPrint)
	{
		buf.append(m_priv->ppIndentL2);
	}

	appendQuotedEscapedString(buf, LOG4CXX_STR(""line""));
	buf.append(LOG4CXX_STR("": ""));
	LogString lineNumber;
	StringHelper::toString(locInfo.getLineNumber(), p, lineNumber);
	...",407.0,474.0,1.0,1.0,68.0,49,4,67,11,0,1,7,7,0,1,,0,0,6,3,3,void
1445,28308,~Layout,1,Layout.~Layout,ANY Layout.~Layout (),main\cpp\layout.cpp,Layout::~Layout() {},26.0,26.0,1.0,20.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1446,28312,getContentType,1,Layout.getContentType,LogString Layout.getContentType (),main\cpp\layout.cpp,"LogString Layout::getContentType() const
{
	return LOG4CXX_STR(""text/plain"");
}",28.0,31.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,LogString
1447,28319,appendHeader,1,Layout.appendHeader,"void Layout.appendHeader (LogString,ANY)",main\cpp\layout.cpp,"void Layout::appendHeader(LogString&, LOG4CXX_NS::helpers::Pool&) {}",33.0,33.0,1.0,68.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
1448,28325,appendFooter,1,Layout.appendFooter,"void Layout.appendFooter (LogString,ANY)",main\cpp\layout.cpp,"void Layout::appendFooter(LogString&, LOG4CXX_NS::helpers::Pool&) {}",35.0,35.0,1.0,68.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
1449,28331,getFormattedEventCharacterCount,1,Layout.getFormattedEventCharacterCount,size_t Layout.getFormattedEventCharacterCount (),main\cpp\layout.cpp,"size_t Layout::getFormattedEventCharacterCount() const
{
	auto exampleEvent = std::make_shared<spi::LoggingEvent>
		( LOG4CXX_STR(""example.logger"")
		, Level::getDebug()
		, LOG4CXX_LOCATION
		, LogString()
		);
	LogString text;
	Pool pool;
	format(text, exampleEvent, pool);
	return text.size();
}",40.0,52.0,1.0,1.0,13.0,9,6,9,7,0,1,1,1,0,0,,0,1,0,0,0,size_t
1450,28385,getFatal,1,Level.getFatal,LevelPtr Level.getFatal (),main\cpp\level.cpp,"LevelPtr Level::getFatal()
{
	static WideLife<LevelPtr> fatalLevel = std::make_shared<Level>(Level::FATAL_INT, LOG4CXX_STR(""FATAL""), 0);
	return fatalLevel;
}",39.0,43.0,1.0,1.0,5.0,7,6,5,3,0,0,1,1,0,0,,0,0,0,0,0,LevelPtr
1451,28408,getError,1,Level.getError,LevelPtr Level.getError (),main\cpp\level.cpp,"LevelPtr Level::getError()
{
	static WideLife<LevelPtr> errorLevel = std::make_shared<Level>(Level::ERROR_INT, LOG4CXX_STR(""ERROR""), 3);
	return errorLevel;
}",45.0,49.0,1.0,1.0,5.0,7,6,5,3,1,0,1,1,0,0,,0,0,0,0,0,LevelPtr
1452,28431,getWarn,1,Level.getWarn,LevelPtr Level.getWarn (),main\cpp\level.cpp,"LevelPtr Level::getWarn()
{
	static WideLife<LevelPtr> warnLevel = std::make_shared<Level>(Level::WARN_INT, LOG4CXX_STR(""WARN""), 4);
	return warnLevel;
}",51.0,55.0,1.0,1.0,5.0,7,6,5,3,0,0,1,1,0,0,,0,0,0,0,0,LevelPtr
1453,28454,getInfo,1,Level.getInfo,LevelPtr Level.getInfo (),main\cpp\level.cpp,"LevelPtr Level::getInfo()
{
	static WideLife<LevelPtr> infoLevel = std::make_shared<Level>(Level::INFO_INT, LOG4CXX_STR(""INFO""), 6);
	return infoLevel;
}",57.0,61.0,1.0,1.0,5.0,7,6,5,3,0,0,1,1,0,0,,0,0,0,0,0,LevelPtr
1454,28477,getDebug,1,Level.getDebug,LevelPtr Level.getDebug (),main\cpp\level.cpp,"LevelPtr Level::getDebug()
{
	static WideLife<LevelPtr> debugLevel = std::make_shared<Level>(Level::DEBUG_INT, LOG4CXX_STR(""DEBUG""), 7);
	return debugLevel;
}",63.0,67.0,1.0,1.0,5.0,7,6,5,3,6,0,1,1,0,0,,0,0,0,0,0,LevelPtr
1455,28500,getTrace,1,Level.getTrace,LevelPtr Level.getTrace (),main\cpp\level.cpp,"LevelPtr Level::getTrace()
{
	static WideLife<LevelPtr> traceLevel = std::make_shared<Level>(Level::TRACE_INT, LOG4CXX_STR(""TRACE""), 7);
	return traceLevel;
}",69.0,73.0,1.0,1.0,5.0,7,6,5,3,0,0,1,1,0,0,,0,0,0,0,0,LevelPtr
1456,28523,getAll,1,Level.getAll,LevelPtr Level.getAll (),main\cpp\level.cpp,"LevelPtr Level::getAll()
{
	static WideLife<LevelPtr> allLevel = std::make_shared<Level>(Level::ALL_INT, LOG4CXX_STR(""ALL""), 7);
	return allLevel;
}",76.0,80.0,1.0,1.0,5.0,7,6,5,3,2,0,1,1,0,0,,0,0,0,0,0,LevelPtr
1457,28546,Level,1,Level.Level,"ANY Level.Level (int,LogString,int)",main\cpp\level.cpp,"Level::Level(int level1,
	const LogString& name1, int syslogEquivalent1)
	: level(level1), name(name1), syslogEquivalent(syslogEquivalent1)
{
	APRInitializer::initialize();
}",84.0,89.0,1.0,1.0,6.0,1,1,1,1,0,1,1,1,0,0,,0,0,6,3,3,ANY
1458,28557,toLevelLS,1,Level.toLevelLS,LevelPtr Level.toLevelLS (LogString),main\cpp\level.cpp,"LevelPtr Level::toLevelLS(const LogString& sArg, const LevelPtr& defaultLevel)
{
	const LogString trimmed(StringHelper::trim(sArg));
	const size_t len = trimmed.length();

	if (len == 4)
	{
		if (StringHelper::equalsIgnoreCase(trimmed, LOG4CXX_STR(""INFO""), LOG4CXX_STR(""info"")))
		{
			return getInfo();
		}

		if (StringHelper::equalsIgnoreCase(trimmed, LOG4CXX_STR(""WARN""), LOG4CXX_STR(""warn"")))
		{
			return getWarn();
		}
	}
	else
	{
		if (len == 5)
		{
			if (StringHelper::equalsIgnoreCase(trimmed, LOG4CXX_STR(""DEBUG""), LOG4CXX_STR(""debug"")))
			{
				return getDebug();
			}

			if (StringHelper::equalsIgnoreCase(trimmed, LOG4CXX_STR(""TRACE""), LOG4CXX_STR(""trace"")))
			{
				return getTrace();
			}

			if (StringHelper::equalsIgnoreCase(trimmed, LOG4CXX_STR(""ERROR""), LOG4CXX_STR(""error"")))
			{
				return getError();
			}

			if (StringHelper::equalsIgnoreCase(trimmed, LOG4CXX_STR(""FATAL""), LOG4CXX_STR(""fatal"")))
			{
				return getFatal();
			}
		}
		else
		{
			if (len == 3)
			...",215.0,274.0,1.0,1.0,60.0,1,1,2,2,2,1,1,1,0,0,,0,0,4,2,2,LevelPtr
1459,28569,toString,1,Level.toString,LogString Level.toString (),main\cpp\level.cpp,"void Level::toString(std::string& dst) const
{
	Transcoder::encode(name, dst);
}",152.0,155.0,1.0,1.0,4.0,0,0,1,1,0,0,1,1,0,0,,0,0,2,1,1,void
1460,28575,toLevel,1,Level.toLevel,LevelPtr Level.toLevel (int),main\cpp\level.cpp,"LevelPtr Level::toLevel(const std::string& sArg, const LevelPtr& defaultLevel)
{
	LOG4CXX_DECODE_CHAR(s, sArg);
	return toLevelLS(s, defaultLevel);
}",146.0,150.0,1.0,1.0,5.0,1,1,2,2,0,1,1,1,0,0,,0,0,4,2,2,LevelPtr
1461,28812,equals,1,Level.equals,bool Level.equals (LevelPtr),main\cpp\level.cpp,"bool Level::equals(const LevelPtr& level1) const
{
	return level1 && this->level == level1->level;
}",277.0,280.0,1.0,1.0,4.0,4,3,2,1,0,0,1,1,0,0,,0,0,2,1,1,bool
1462,28827,isGreaterOrEqual,1,Level.isGreaterOrEqual,bool Level.isGreaterOrEqual (LevelPtr),main\cpp\level.cpp,"bool Level::isGreaterOrEqual(const LevelPtr& level1) const
{
	return level1 && this->level >= level1->level;
}",282.0,285.0,1.0,1.0,4.0,4,3,2,1,0,0,1,1,0,0,,0,0,2,1,1,bool
1463,28866,LevelMatchFilter,1,LevelMatchFilter.LevelMatchFilter,ANY LevelMatchFilter.LevelMatchFilter (),main\cpp\levelmatchfilter.cpp,"LevelMatchFilter::LevelMatchFilter()
	: Filter(std::make_unique<LevelMatchFilterPrivate>())
{
	priv->acceptOnMatch = true;
}",41.0,45.0,1.0,1.0,5.0,4,4,1,1,0,0,1,1,0,0,,0,0,0,0,0,ANY
1464,28882,~LevelMatchFilter,1,LevelMatchFilter.~LevelMatchFilter,ANY LevelMatchFilter.~LevelMatchFilter (),main\cpp\levelmatchfilter.cpp,LevelMatchFilter::~LevelMatchFilter() {},47.0,47.0,1.0,40.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1465,28886,setOption,1,LevelMatchFilter.setOption,"void LevelMatchFilter.setOption (LogString,LogString)",main\cpp\levelmatchfilter.cpp,"void LevelMatchFilter::setOption(const LogString& option,
	const LogString& value)
{


	if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""LEVELTOMATCH""), LOG4CXX_STR(""leveltomatch"")))
	{
		setLevelToMatch(value);
	}
	else if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""ACCEPTONMATCH""), LOG4CXX_STR(""acceptonmatch"")))
	{
		priv->acceptOnMatch = OptionConverter::toBoolean(value, priv->acceptOnMatch);
	}
}",49.0,64.0,1.0,2.0,16.0,1,1,3,3,0,1,2,2,1,1,,0,1,4,2,2,void
1466,28944,setLevelToMatch,1,LevelMatchFilter.setLevelToMatch,void LevelMatchFilter.setLevelToMatch (LogString),main\cpp\levelmatchfilter.cpp,"void LevelMatchFilter::setLevelToMatch(const LogString& levelToMatch1)
{
	priv->levelToMatch = OptionConverter::toLevel(levelToMatch1, priv->levelToMatch);
}",66.0,69.0,1.0,1.0,4.0,8,4,4,3,0,1,1,1,0,1,,0,1,2,1,1,void
1467,28975,getLevelToMatch,1,LevelMatchFilter.getLevelToMatch,LogString LevelMatchFilter.getLevelToMatch (),main\cpp\levelmatchfilter.cpp,"LogString LevelMatchFilter::getLevelToMatch() const
{
	return priv->levelToMatch->toString();
}",71.0,74.0,1.0,8.0,4.0,4,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,LogString
1468,28993,decide,1,LevelMatchFilter.decide,FilterDecision LevelMatchFilter.decide (ANY),main\cpp\levelmatchfilter.cpp,"Filter::FilterDecision LevelMatchFilter::decide(
	const LOG4CXX_NS::spi::LoggingEventPtr& event) const
{
	if (priv->levelToMatch != 0 && priv->levelToMatch->equals(event->getLevel()))
	{
		if (priv->acceptOnMatch)
		{
			return Filter::ACCEPT;
		}
		else
		{
			return Filter::DENY;
		}
	}
	else
	{
		return Filter::NEUTRAL;
	}
}",76.0,94.0,1.0,5.0,19.0,14,5,5,3,0,0,3,4,0,0,,0,0,2,1,1,FilterDecision
1469,29058,setAcceptOnMatch,1,LevelMatchFilter.setAcceptOnMatch,void LevelMatchFilter.setAcceptOnMatch (bool),main\cpp\levelmatchfilter.cpp,"void LevelMatchFilter::setAcceptOnMatch(bool acceptOnMatch1)
{
	priv->acceptOnMatch = acceptOnMatch1;
}",96.0,99.0,1.0,1.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1470,29075,getAcceptOnMatch,1,LevelMatchFilter.getAcceptOnMatch,bool LevelMatchFilter.getAcceptOnMatch (),main\cpp\levelmatchfilter.cpp,"bool LevelMatchFilter::getAcceptOnMatch() const
{
	return priv->acceptOnMatch;
}",101.0,104.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,bool
1471,29107,LevelPatternConverter,1,LevelPatternConverter.LevelPatternConverter,ANY LevelPatternConverter.LevelPatternConverter (),main\cpp\levelpatternconverter.cpp,"LevelPatternConverter::LevelPatternConverter() :
	LoggingEventPatternConverter(LOG4CXX_STR(""Level""),
		LOG4CXX_STR(""level""))
{
}",32.0,36.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1472,29111,newInstance,1,LevelPatternConverter.newInstance,PatternConverterPtr LevelPatternConverter.newInstance (ANY),main\cpp\levelpatternconverter.cpp,"PatternConverterPtr LevelPatternConverter::newInstance(
	const std::vector<LogString>& /* options */)
{
	static WideLife<PatternConverterPtr> def = std::make_shared<LevelPatternConverter>();
	return def;
}",38.0,43.0,1.0,1.0,6.0,2,2,3,2,0,0,1,1,0,0,,0,0,2,1,1,PatternConverterPtr
1473,29125,format,1,LevelPatternConverter.format,"void LevelPatternConverter.format (LoggingEventPtr,LogString,ANY)",main\cpp\levelpatternconverter.cpp,"void LevelPatternConverter::format(
	const LoggingEventPtr& event,
	LogString& toAppendTo,
	LOG4CXX_NS::helpers::Pool& /* p */) const
{
	toAppendTo.append(event->getLevel()->toString());
}",45.0,51.0,1.0,1.0,7.0,3,2,2,2,0,0,1,1,0,0,,0,0,6,3,3,void
1474,29143,getStyleClass,1,LevelPatternConverter.getStyleClass,LogString LevelPatternConverter.getStyleClass (ObjectPtr),main\cpp\levelpatternconverter.cpp,"LogString LevelPatternConverter::getStyleClass(const ObjectPtr& obj) const
{
	LoggingEventPtr e = LOG4CXX_NS::cast<LoggingEvent>(obj);

	if (e != NULL)
	{
		int lint = e->getLevel()->toInt();

		switch (lint)
		{
			case Level::TRACE_INT:
				return LOG4CXX_STR(""level trace"");

			case Level::DEBUG_INT:
				return LOG4CXX_STR(""level debug"");

			case Level::INFO_INT:
				return LOG4CXX_STR(""level info"");

			case Level::WARN_INT:
				return LOG4CXX_STR(""level warn"");

			case Level::ERROR_INT:
				return LOG4CXX_STR(""level error"");

			case Level::FATAL_INT:
				return LOG4CXX_STR(""level fatal"");

			default:
				return LogString(LOG4CXX_STR(""level "")) + e->getLevel()->toString();
		}
	}

	return LOG4CXX_STR(""level"");
}",57.0,91.0,1.0,1.0,35.0,17,7,16,7,0,0,3,4,0,0,,0,0,2,1,1,LogString
1475,29254,LevelRangeFilterPrivate,1,LevelRangeFilterPrivate.LevelRangeFilterPrivate,ANY LevelRangeFilterPrivate.LevelRangeFilterPrivate (),main\cpp\levelrangefilter.cpp,"LevelRangeFilterPrivate() : acceptOnMatch(false), levelMin(Level::getAll()), levelMax(Level::getOff()) {}",35.0,35.0,2.0,106.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1476,29263,LevelRangeFilter,1,LevelRangeFilter.LevelRangeFilter,ANY LevelRangeFilter.LevelRangeFilter (),main\cpp\levelrangefilter.cpp,"LevelRangeFilter::LevelRangeFilter()
	: Filter(std::make_unique<LevelRangeFilterPrivate>())
{
}",49.0,52.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1477,29267,~LevelRangeFilter,1,LevelRangeFilter.~LevelRangeFilter,ANY LevelRangeFilter.~LevelRangeFilter (),main\cpp\levelrangefilter.cpp,LevelRangeFilter::~LevelRangeFilter() {},54.0,54.0,1.0,40.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1478,29271,setOption,1,LevelRangeFilter.setOption,"void LevelRangeFilter.setOption (LogString,LogString)",main\cpp\levelrangefilter.cpp,"void LevelRangeFilter::setOption(const LogString& option,
	const LogString& value)
{

	if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""LEVELMIN""), LOG4CXX_STR(""levelmin"")))
	{
		priv->levelMin = OptionConverter::toLevel(value, priv->levelMin);
	}
	else if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""LEVELMAX""), LOG4CXX_STR(""levelmax"")))
	{
		priv->levelMax = OptionConverter::toLevel(value, priv->levelMax);
	}
	else if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""ACCEPTONMATCH""), LOG4CXX_STR(""acceptonmatch"")))
	{
		priv->acceptOnMatch = OptionConverter::toBoolean(value, priv->acceptOnMatch);
	}
}",56.0,75.0,1.0,2.0,20.0,9,4,6,5,0,2,2,2,1,2,,0,2,4,2,2,void
1479,29392,decide,1,LevelRangeFilter.decide,FilterDecision LevelRangeFilter.decide (ANY),main\cpp\levelrangefilter.cpp,"Filter::FilterDecision LevelRangeFilter::decide(
	const spi::LoggingEventPtr& event) const
{
	if (priv->levelMin != 0 && !event->getLevel()->isGreaterOrEqual(priv->levelMin))
	{
		// level of event is less than minimum
		return Filter::DENY;
	}

	if (priv->levelMax != 0 && event->getLevel()->toInt() > priv->levelMax->toInt())
	{
		// level of event is greater than maximum
		// Alas, there is no Level.isGreater method. and using
		// a combo of isGreaterOrEqual && !Equal seems worse than
		// checking the int values of the level objects..
		return Filter::DENY;
	}

	if (priv->acceptOnMatch)
	{
		// this filter set up to bypass later filters and always return
		// accept if level in range
		return Filter::ACCEPT;
	}
	else
	{
		// event is ok for this filter; allow later filters to have a look..
		return Filter::NEUTRAL;
	}
}",77.0,106.0,1.0,5.0,30.0,29,7,10,3,0,0,4,4,0,0,,0,0,2,1,1,FilterDecision
1480,29496,setLevelMin,1,LevelRangeFilter.setLevelMin,void LevelRangeFilter.setLevelMin (LevelPtr),main\cpp\levelrangefilter.cpp,"void LevelRangeFilter::setLevelMin(const LevelPtr& levelMin1)
{
	priv->levelMin = levelMin1;
}",108.0,111.0,1.0,1.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1481,29513,getLevelMin,1,LevelRangeFilter.getLevelMin,LevelPtr LevelRangeFilter.getLevelMin (),main\cpp\levelrangefilter.cpp,"const LevelPtr& LevelRangeFilter::getLevelMin() const
{
	return priv->levelMin;
}",113.0,116.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,LevelPtr
1482,29528,setLevelMax,1,LevelRangeFilter.setLevelMax,void LevelRangeFilter.setLevelMax (LevelPtr),main\cpp\levelrangefilter.cpp,"void LevelRangeFilter::setLevelMax(const LevelPtr& levelMax1)
{
	priv->levelMax = levelMax1;
}",118.0,121.0,1.0,1.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1483,29545,getLevelMax,1,LevelRangeFilter.getLevelMax,LevelPtr LevelRangeFilter.getLevelMax (),main\cpp\levelrangefilter.cpp,"const LevelPtr& LevelRangeFilter::getLevelMax() const
{
	return priv->levelMax;
}",123.0,126.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,LevelPtr
1484,29560,setAcceptOnMatch,1,LevelRangeFilter.setAcceptOnMatch,void LevelRangeFilter.setAcceptOnMatch (bool),main\cpp\levelrangefilter.cpp,"void LevelRangeFilter::setAcceptOnMatch(bool acceptOnMatch1)
{
	priv->acceptOnMatch = acceptOnMatch1;
}",128.0,131.0,1.0,1.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1485,29577,getAcceptOnMatch,1,LevelRangeFilter.getAcceptOnMatch,bool LevelRangeFilter.getAcceptOnMatch (),main\cpp\levelrangefilter.cpp,"bool LevelRangeFilter::getAcceptOnMatch() const
{
	return priv->acceptOnMatch;
}",133.0,136.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,bool
1486,29609,LineLocationPatternConverter,1,LineLocationPatternConverter.LineLocationPatternConverter,ANY LineLocationPatternConverter.LineLocationPatternConverter (),main\cpp\linelocationpatternconverter.cpp,"LineLocationPatternConverter::LineLocationPatternConverter() :
	LoggingEventPatternConverter(LOG4CXX_STR(""Line""),
		LOG4CXX_STR(""line""))
{
}",31.0,35.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1487,29613,newInstance,1,LineLocationPatternConverter.newInstance,PatternConverterPtr LineLocationPatternConverter.newInstance (ANY),main\cpp\linelocationpatternconverter.cpp,"PatternConverterPtr LineLocationPatternConverter::newInstance(
	const std::vector<LogString>& /* options */)
{
	static WideLife<PatternConverterPtr> instance = std::make_shared<LineLocationPatternConverter>();
	return instance;
}",37.0,42.0,1.0,1.0,6.0,2,2,3,2,0,0,1,1,0,0,,0,0,2,1,1,PatternConverterPtr
1488,29627,format,1,LineLocationPatternConverter.format,"void LineLocationPatternConverter.format (LoggingEventPtr,LogString,Pool)",main\cpp\linelocationpatternconverter.cpp,"void LineLocationPatternConverter::format(
	const LoggingEventPtr& event,
	LogString& toAppendTo,
	Pool& p) const
{
	StringHelper::toString(
		event->getLocationInformation().getLineNumber(),
		p, toAppendTo);
}",44.0,52.0,1.0,1.0,9.0,3,2,4,4,0,1,1,1,0,1,,0,0,6,3,3,void
1489,29662,LineSeparatorPatternConverter,1,LineSeparatorPatternConverter.LineSeparatorPatternConverter,ANY LineSeparatorPatternConverter.LineSeparatorPatternConverter (),main\cpp\lineseparatorpatternconverter.cpp,"LineSeparatorPatternConverter::LineSeparatorPatternConverter() :
	LoggingEventPatternConverter(LOG4CXX_STR(""Line Sep""),
		LOG4CXX_STR(""lineSep""))
{
}",30.0,34.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1490,29666,newInstance,1,LineSeparatorPatternConverter.newInstance,PatternConverterPtr LineSeparatorPatternConverter.newInstance (ANY),main\cpp\lineseparatorpatternconverter.cpp,"PatternConverterPtr LineSeparatorPatternConverter::newInstance(
	const std::vector<LogString>& /* options */)
{
	static WideLife<PatternConverterPtr> instance = std::make_shared<LineSeparatorPatternConverter>();
	return instance;
}",36.0,41.0,1.0,1.0,6.0,2,2,3,2,0,0,1,1,0,0,,0,0,2,1,1,PatternConverterPtr
1491,29680,format,1,LineSeparatorPatternConverter.format,"void LineSeparatorPatternConverter.format (LoggingEventPtr,LogString,Pool)",main\cpp\lineseparatorpatternconverter.cpp,"void LineSeparatorPatternConverter::format(
	const ObjectPtr& /* event */,
	LogString& toAppendTo,
	Pool& /* p */) const
{
	toAppendTo.append(LOG4CXX_EOL);
}",51.0,57.0,1.0,1.0,7.0,1,1,2,2,0,0,1,1,0,0,,0,0,6,3,3,void
1492,29720,LiteralPatternConverterPrivate,1,LiteralPatternConverterPrivate.LiteralPatternConverterPrivate,"ANY LiteralPatternConverterPrivate.LiteralPatternConverterPrivate (LogString,LogString,LogString)",main\cpp\literalpatternconverter.cpp,"LiteralPatternConverterPrivate( const LogString& name, const LogString& style, const LogString& literal1 ) :
		PatternConverterPrivate( name, style ),
		literal(literal1) {}",33.0,35.0,2.0,22.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ANY
1493,29730,LiteralPatternConverter,1,LiteralPatternConverter.LiteralPatternConverter,ANY LiteralPatternConverter.LiteralPatternConverter (LogString),main\cpp\literalpatternconverter.cpp,"LiteralPatternConverter::LiteralPatternConverter(const LogString& literal1) :
	LoggingEventPatternConverter(std::make_unique<LiteralPatternConverterPrivate>
		(LOG4CXX_STR(""Literal""), LOG4CXX_STR(""literal""), literal1))
{
}",45.0,49.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1494,29735,newInstance,1,LiteralPatternConverter.newInstance,PatternConverterPtr LiteralPatternConverter.newInstance (LogString),main\cpp\literalpatternconverter.cpp,"PatternConverterPtr LiteralPatternConverter::newInstance(
	const LogString& literal)
{
	if (literal.length() == 1 && literal[0] == 0x20 /* ' ' */)
	{
		static WideLife<PatternConverterPtr> blank = std::make_shared<LiteralPatternConverter>(literal);
		return blank;
	}

	return std::make_shared<LiteralPatternConverter>(literal);
}",51.0,61.0,1.0,1.0,11.0,12,7,10,4,2,0,2,2,0,0,,0,0,2,1,1,PatternConverterPtr
1495,29774,format,1,LiteralPatternConverter.format,"void LiteralPatternConverter.format (LoggingEventPtr,LogString,Pool)",main\cpp\literalpatternconverter.cpp,"void LiteralPatternConverter::format(
	const ObjectPtr& /* event */,
	LogString& toAppendTo,
	Pool& /* p */)  const
{
	toAppendTo.append(priv->literal);
}",71.0,77.0,1.0,19.0,7.0,4,3,2,2,0,0,1,1,0,0,,0,0,6,3,3,void
1496,29885,loadClass,1,Loader.loadClass,Class Loader.loadClass (LogString),main\cpp\loader.cpp,"const Class& Loader::loadClass(const LogString& clazz)
{
	return Class::forName(clazz);
}",57.0,60.0,1.0,1.0,4.0,1,1,2,2,10,1,1,1,0,1,,0,0,2,1,1,Class
1497,29896,getResourceAsStream,1,Loader.getResourceAsStream,InputStreamPtr Loader.getResourceAsStream (LogString),main\cpp\loader.cpp,"InputStreamPtr Loader::getResourceAsStream(const LogString& name)
{

	try
	{
		return std::make_shared<FileInputStream>(name);
	}
	catch (const IOException&)
	{
	}

	return 0;
}",63.0,75.0,1.0,1.0,13.0,3,3,3,3,1,0,2,2,0,0,,0,0,2,1,1,InputStreamPtr
1498,29922,LocalePrivate,1,LocalePrivate.LocalePrivate,ANY LocalePrivate.LocalePrivate (LogString),main\cpp\locale.cpp,"LocalePrivate(const LogString& language1, const LogString& country1,
		const LogString& variant1)
		: language(language1), country(country1), variant(variant1)
	{
	}",35.0,39.0,2.0,2.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ANY
1499,29943,Locale,1,Locale.Locale,ANY Locale.Locale (LogString),main\cpp\locale.cpp,"Locale::Locale(const LogString& language1, const LogString& country1,
	const LogString& variant1)
	: m_priv(std::make_unique<LocalePrivate>(language1, country1, variant1))
{
}",56.0,60.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ANY
1500,29961,~Locale,1,Locale.~Locale,ANY Locale.~Locale (),main\cpp\locale.cpp,Locale::~Locale() {},62.0,62.0,1.0,20.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1501,29965,getLanguage,1,Locale.getLanguage,LogString Locale.getLanguage (),main\cpp\locale.cpp,"const LogString& Locale::getLanguage() const
{
	return m_priv->language;
}",64.0,67.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,LogString
1502,29973,getCountry,1,Locale.getCountry,LogString Locale.getCountry (),main\cpp\locale.cpp,"const LogString& Locale::getCountry() const
{
	return m_priv->country;
}",69.0,72.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,LogString
1503,29981,getVariant,1,Locale.getVariant,LogString Locale.getVariant (),main\cpp\locale.cpp,"const LogString& Locale::getVariant() const
{
	return m_priv->variant;
}",74.0,77.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,LogString
1504,30008,getLocationUnavailable,1,LocationInfo.getLocationUnavailable,LocationInfo LocationInfo.getLocationUnavailable (),main\cpp\locationinfo.cpp,"const LocationInfo& LocationInfo::getLocationUnavailable()
{
	static const WideLife<LocationInfo> unavailable;
	return unavailable;
}",32.0,36.0,1.0,1.0,5.0,0,0,1,1,0,0,1,1,0,0,,0,0,0,0,0,LocationInfo
1505,30015,LocationInfo,1,LocationInfo.LocationInfo,"ANY LocationInfo.LocationInfo (char*,char*,char*,int)",main\cpp\locationinfo.cpp,"LocationInfo::LocationInfo( const LocationInfo& src )
	:  lineNumber( src.lineNumber ),
	   fileName( src.fileName ),
	   shortFileName( src.shortFileName ),
	   methodName( src.methodName )
{
}",69.0,75.0,1.0,1.0,7.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1506,30032,operator =,1,LocationInfo.operator =,LocationInfo LocationInfo.operator = (LocationInfo),main\cpp\locationinfo.cpp,"LocationInfo& LocationInfo::operator = ( const LocationInfo& src )
{
	fileName = src.fileName;
	methodName = src.methodName;
	lineNumber = src.lineNumber;
	return * this;
}",81.0,87.0,1.0,1.0,7.0,7,3,6,4,0,0,1,1,0,0,,0,0,2,1,1,LocationInfo
1507,30055,clear,1,LocationInfo.clear,void LocationInfo.clear (),main\cpp\locationinfo.cpp,"void LocationInfo::clear()
{
	fileName = NA;
	methodName = NA_METHOD;
	lineNumber = -1;
}",92.0,97.0,1.0,1.0,6.0,4,2,5,5,0,2,1,1,0,0,,0,2,0,0,0,void
1508,30069,getFileName,1,LocationInfo.getFileName,const char* LocationInfo.getFileName (),main\cpp\locationinfo.cpp,"const char* LocationInfo::getFileName() const
{
	return fileName;
}",104.0,107.0,1.0,1.0,4.0,0,0,1,1,0,0,1,1,0,0,,0,0,0,0,0,const char*
1509,30075,getShortFileName,1,LocationInfo.getShortFileName,const char* LocationInfo.getShortFileName (),main\cpp\locationinfo.cpp,"const char* LocationInfo::getShortFileName() const{
	return shortFileName;
}",109.0,111.0,1.0,1.0,3.0,0,0,1,1,0,0,1,1,0,0,,0,0,0,0,0,const char*
1510,30081,getLineNumber,1,LocationInfo.getLineNumber,int LocationInfo.getLineNumber (),main\cpp\locationinfo.cpp,"int LocationInfo::getLineNumber() const
{
	return lineNumber;
}",117.0,120.0,1.0,1.0,4.0,0,0,1,1,0,0,1,1,0,0,,0,0,0,0,0,int
1511,30087,getMethodName,1,LocationInfo.getMethodName,string LocationInfo.getMethodName (),main\cpp\locationinfo.cpp,"const std::string LocationInfo::getMethodName() const
{
	std::string tmp(methodName);
	size_t parenPos = tmp.find('(');

	if (parenPos != std::string::npos)
	{
		tmp.erase(parenPos);
	}

	size_t colonPos = tmp.rfind(""::"");

	if (colonPos != std::string::npos)
	{
		tmp.erase(0, colonPos + 2);
	}
	else
	{
		size_t spacePos = tmp.find(' ');

		if (spacePos != std::string::npos)
		{
			tmp.erase(0, spacePos + 1);
		}
	}

	return tmp;
}",123.0,150.0,1.0,1.0,28.0,13,4,16,6,0,0,3,3,0,0,,0,0,0,0,0,string
1512,30170,getClassName,1,LocationInfo.getClassName,string LocationInfo.getClassName (),main\cpp\locationinfo.cpp,"const std::string LocationInfo::getClassName() const
{
	std::string tmp(methodName);
	size_t parenPos = tmp.find('(');

	if (parenPos != std::string::npos)
	{
		tmp.erase(parenPos);
	}

	size_t colonPos = tmp.rfind(""::"");

	if (colonPos != std::string::npos)
	{
		tmp.erase(colonPos);
		size_t spacePos = tmp.find_last_of(' ');

		if (spacePos != std::string::npos)
		{
			tmp.erase(0, spacePos + 1);
		}

		return tmp;
	}

	tmp.erase(0, tmp.length() );
	return tmp;
}",153.0,180.0,1.0,1.0,28.0,21,4,26,7,0,0,4,5,0,0,,0,0,0,0,0,string
1513,30281,LocationInfoFilterPrivate,1,LocationInfoFilterPrivate.LocationInfoFilterPrivate,ANY LocationInfoFilterPrivate.LocationInfoFilterPrivate (),main\cpp\locationinfofilter.cpp,"LocationInfoFilterPrivate() : FilterPrivate(),
		acceptOnMatch(true),
		mustMatchAll(false),
		lineNumber(-1)
	{}",36.0,40.0,2.0,3.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1514,30291,LocationInfoFilter,1,LocationInfoFilter.LocationInfoFilter,ANY LocationInfoFilter.LocationInfoFilter (),main\cpp\locationinfofilter.cpp,"LocationInfoFilter::LocationInfoFilter() :
	Filter(std::make_unique<LocationInfoFilterPrivate>())
{
}",50.0,53.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1515,30295,~LocationInfoFilter,1,LocationInfoFilter.~LocationInfoFilter,ANY LocationInfoFilter.~LocationInfoFilter (),main\cpp\locationinfofilter.cpp,LocationInfoFilter::~LocationInfoFilter() {},55.0,55.0,1.0,44.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1516,30299,setOption,1,LocationInfoFilter.setOption,"void LocationInfoFilter.setOption (LogString,LogString)",main\cpp\locationinfofilter.cpp,"void LocationInfoFilter::setOption(  const LogString& option,
	const LogString& value)
{
	LogLog::warn(option + LOG4CXX_STR("":"") + value);
	if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""ACCEPTONMATCH""), LOG4CXX_STR(""acceptonmatch"")))
	{
		priv->acceptOnMatch = OptionConverter::toBoolean(value, priv->acceptOnMatch);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""OPERATOR""), LOG4CXX_STR(""operator"")))
	{
		priv->mustMatchAll = StringHelper::equalsIgnoreCase(value, LOG4CXX_STR(""AND""), LOG4CXX_STR(""and"")) ? true : false;
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""LINENUMBER""), LOG4CXX_STR(""linenumber"")))
	{
		priv->lineNumber = OptionConverter::toInt(value, -1);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""METHOD""), LOG4CXX_STR(""method"")))
	{
		LOG4CXX_ENCODE_CHAR(sName, value);
		priv->methodName = sName;
	}
}",57.0,78.0,1.0,2.0,22.0,12,5,9,6,0,3,2,2,1,3,,0,2,4,2,2,void
1517,30447,decide,1,LocationInfoFilter.decide,FilterDecision LocationInfoFilter.decide (ANY),main\cpp\locationinfofilter.cpp,"Filter::FilterDecision LocationInfoFilter::decide(
	const LOG4CXX_NS::spi::LoggingEventPtr& event) const
{
	if (priv->lineNumber == -1 &&
			priv->methodName.empty())
	{
		return Filter::NEUTRAL;
	}

	if (event->getLocationInformation().getLineNumber() == -1 ||
			event->getLocationInformation().getMethodName().compare(LocationInfo::NA_METHOD) == 0){
		return Filter::NEUTRAL;
	}

	bool matched = false;
	bool matchLineNumber = priv->lineNumber == event->getLocationInformation().getLineNumber();
	bool matchMethodName = priv->methodName.compare(event->getLocationInformation().getMethodName()) == 0;

	if(priv->mustMatchAll){
		matched = matchLineNumber && matchMethodName;
	}else{
		matched = matchLineNumber || matchMethodName;
	}

	if (priv->acceptOnMatch)
	{
		return matched ? Filter::ACCEPT : Filter::NEUTRAL;
	}
	else
	{
		return matched ? Filter::DENY : Filter::NEUTRAL;
	}
}",80.0,112.0,1.0,5.0,33.0,49,9,22,7,0,0,5,5,0,0,,0,0,2,1,1,FilterDecision
1518,30623,setAcceptOnMatch,1,LocationInfoFilter.setAcceptOnMatch,void LocationInfoFilter.setAcceptOnMatch (bool),main\cpp\locationinfofilter.cpp,"void LocationInfoFilter::setAcceptOnMatch(bool acceptOnMatch1)
{
	priv->acceptOnMatch = acceptOnMatch1;
}",114.0,117.0,1.0,1.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1519,30640,getAcceptOnMatch,1,LocationInfoFilter.getAcceptOnMatch,bool LocationInfoFilter.getAcceptOnMatch (),main\cpp\locationinfofilter.cpp,"bool LocationInfoFilter::getAcceptOnMatch() const
{
	return priv->acceptOnMatch;
}",119.0,122.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,bool
1520,30655,getMustMatchAll,1,LocationInfoFilter.getMustMatchAll,bool LocationInfoFilter.getMustMatchAll (),main\cpp\locationinfofilter.cpp,"bool LocationInfoFilter::getMustMatchAll() const
{
	return priv->mustMatchAll;
}",124.0,127.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,bool
1521,30670,setMustMatchAll,1,LocationInfoFilter.setMustMatchAll,void LocationInfoFilter.setMustMatchAll (bool),main\cpp\locationinfofilter.cpp,"void LocationInfoFilter::setMustMatchAll(bool mustMatchAll1)
{
	priv->mustMatchAll = mustMatchAll1;
}",129.0,132.0,1.0,1.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1522,30687,setLineNumber,1,LocationInfoFilter.setLineNumber,void LocationInfoFilter.setLineNumber (int),main\cpp\locationinfofilter.cpp,"void LocationInfoFilter::setLineNumber(int lineNum){
	priv->lineNumber = lineNum;
}",134.0,136.0,1.0,1.0,3.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1523,30704,setMethodName,1,LocationInfoFilter.setMethodName,void LocationInfoFilter.setMethodName (LogString),main\cpp\locationinfofilter.cpp,"void LocationInfoFilter::setMethodName(const LogString& methodName){
	LOG4CXX_ENCODE_CHAR(sName, methodName);
	priv->methodName = sName;
}",138.0,141.0,1.0,1.0,4.0,4,4,4,3,0,0,1,1,0,0,,0,0,2,1,1,void
1524,30760,LoggerPrivate,1,LoggerPrivate.LoggerPrivate,"ANY LoggerPrivate.LoggerPrivate (Pool,LogString)",main\cpp\logger.cpp,"LoggerPrivate(Pool& p, const LogString& name1):
		name(name1),
		repositoryRaw(0),
		aai(p),
		additive(true) {}",43.0,47.0,2.0,19.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ANY
1525,30775,Logger,1,Logger.Logger,"ANY Logger.Logger (Pool,LogString)",main\cpp\logger.cpp,"Logger::Logger(Pool& p, const LogString& name1)
	: m_priv(std::make_unique<LoggerPrivate>(p, name1))
	, m_threshold(0)
{
}",89.0,93.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ANY
1526,30781,~Logger,1,Logger.~Logger,ANY Logger.~Logger (),main\cpp\logger.cpp,"Logger::~Logger()
{
}",95.0,97.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1527,30785,addAppender,1,Logger.addAppender,void Logger.addAppender (AppenderPtr),main\cpp\logger.cpp,"void Logger::addAppender(const AppenderPtr newAppender)
{
	m_priv->aai.addAppender(newAppender);
	if (auto rep = getHierarchy())
	{
		rep->fireAddAppenderEvent(this, newAppender.get());
	}
}",99.0,106.0,1.0,1.0,8.0,5,3,5,3,0,0,2,2,0,0,,0,0,2,1,1,void
1528,30813,reconfigure,1,Logger.reconfigure,"void Logger.reconfigure (ANY,bool)",main\cpp\logger.cpp,"void Logger::reconfigure( const std::vector<AppenderPtr>& appenders, bool additive1 )
{
	m_priv->additive = additive1;

	m_priv->aai.removeAllAppenders();

	for ( std::vector<AppenderPtr>::const_iterator it = appenders.cbegin();
		it != appenders.cend();
		it++ )
	{
		m_priv->aai.addAppender( *it );

		if (auto rep = getHierarchy())
		{
			rep->fireAddAppenderEvent(this, it->get());
		}
	}
}",108.0,125.0,1.0,1.0,18.0,14,5,12,5,0,0,3,4,0,0,,0,0,4,2,2,void
1529,30872,callAppenders,1,Logger.callAppenders,"void Logger.callAppenders (ANY,Pool)",main\cpp\logger.cpp,"void Logger::callAppenders(const spi::LoggingEventPtr& event, Pool& p) const
{
	int writes = 0;

	for (const Logger* logger = this;
		logger != 0;
		logger = logger->m_priv->parent.get())
	{
		writes += logger->m_priv->aai.appendLoopOnAppenders(event, p);

		if (!logger->m_priv->additive)
		{
			break;
		}
	}

	auto rep = getHierarchy();

	if (writes == 0 && rep)
	{
		rep->emitNoAppenderWarning(const_cast<Logger*>(this));
	}
}",127.0,149.0,1.0,1.0,23.0,15,9,12,5,0,0,5,5,0,0,,0,0,4,2,2,void
1530,30941,closeNestedAppenders,1,Logger.closeNestedAppenders,void Logger.closeNestedAppenders (),main\cpp\logger.cpp,"void Logger::closeNestedAppenders()
{
	AppenderList appenders = getAllAppenders();

	for (AppenderList::iterator it = appenders.begin(); it != appenders.end(); ++it)
	{
		(*it)->close();
	}
}",151.0,159.0,1.0,1.0,9.0,7,5,6,2,0,0,2,2,0,0,,0,0,0,0,0,void
1531,30972,addEvent,1,Logger.addEvent,"void Logger.addEvent (LevelPtr,ANY,LocationInfo)",main\cpp\logger.cpp,"void Logger::addEvent(const LevelPtr& level, std::string&& message, const LocationInfo& location) const
{
	if (!getHierarchy()) // Has removeHierarchy() been called?
		return;
#if LOG4CXX_LOGCHAR_IS_UTF8
	auto event = std::make_shared<LoggingEvent>(m_priv->name, level, location, std::move(message));
#else
	LOG4CXX_DECODE_CHAR(msg, message);
	auto event = std::make_shared<LoggingEvent>(m_priv->name, level, location, std::move(msg));
#endif
	Pool p;
	callAppenders(event, p);
}",161.0,173.0,1.0,1.0,13.0,9,8,12,9,0,0,2,2,0,0,,0,0,6,3,3,void
1532,31012,forcedLog,1,Logger.forcedLog,"void Logger.forcedLog (LevelPtr,ANY,LocationInfo)",main\cpp\logger.cpp,"void Logger::forcedLog(const LevelPtr& level1, const std::string& message) const
{
	forcedLog(level1, message, LocationInfo::getLocationUnavailable());
}",190.0,193.0,1.0,1.0,4.0,9,8,12,9,0,0,2,2,0,0,,0,0,4,2,2,void
1533,31065,addEventLS,1,Logger.addEventLS,"void Logger.addEventLS (LevelPtr,LogString,LocationInfo)",main\cpp\logger.cpp,"void Logger::addEventLS(const LevelPtr& level, LogString&& message, const LocationInfo& location) const
{
	if (!getHierarchy()) // Has removeHierarchy() been called?
		return;
	Pool p;
	auto event = std::make_shared<LoggingEvent>(m_priv->name, level, location, std::move(message));
	callAppenders(event, p);
}",195.0,202.0,1.0,1.0,8.0,9,8,10,8,0,0,2,2,0,0,,0,0,6,3,3,void
1534,31102,forcedLogLS,1,Logger.forcedLogLS,"void Logger.forcedLogLS (LevelPtr,LogString,LocationInfo)",main\cpp\logger.cpp,"void Logger::forcedLogLS(const LevelPtr& level1, const LogString& message,
	const LocationInfo& location) const
{
	if (!getHierarchy()) // Has removeHierarchy() been called?
		return;
	Pool p;
	auto event = std::make_shared<LoggingEvent>(m_priv->name, level1, message, location);
	callAppenders(event, p);
}",204.0,212.0,1.0,1.0,9.0,8,8,9,8,0,0,2,2,0,0,,0,0,6,3,3,void
1535,31135,getAdditivity,1,Logger.getAdditivity,bool Logger.getAdditivity (),main\cpp\logger.cpp,"bool Logger::getAdditivity() const
{
	return m_priv->additive;
}",215.0,218.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,bool
1536,31143,getAllAppenders,1,Logger.getAllAppenders,AppenderList Logger.getAllAppenders (),main\cpp\logger.cpp,"AppenderList Logger::getAllAppenders() const
{
	return m_priv->aai.getAllAppenders();
}",220.0,223.0,1.0,1.0,4.0,2,2,1,1,0,0,1,1,0,0,,0,0,0,0,0,AppenderList
1537,31154,getAppender,1,Logger.getAppender,AppenderPtr Logger.getAppender (LogString),main\cpp\logger.cpp,"AppenderPtr Logger::getAppender(const LogString& name1) const
{
	return m_priv->aai.getAppender(name1);
}",225.0,228.0,1.0,1.0,4.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,AppenderPtr
1538,31167,getEffectiveLevel,1,Logger.getEffectiveLevel,LevelPtr Logger.getEffectiveLevel (),main\cpp\logger.cpp,"const LevelPtr& Logger::getEffectiveLevel() const
{
	for (const Logger* l = this; l != 0; l = l->m_priv->parent.get())
	{
		if (l->m_priv->level != 0)
		{
			return l->m_priv->level;
		}
	}

	throw NullPointerException(LOG4CXX_STR(""No level specified for logger or ancestors.""));
#if LOG4CXX_RETURN_AFTER_THROW
	return m_priv->level;
#endif
}",230.0,244.0,1.0,1.0,15.0,8,4,4,1,0,0,3,4,0,0,,0,0,0,0,0,LevelPtr
1539,31210,getLoggerRepository,1,Logger.getLoggerRepository,LoggerRepository Logger.getLoggerRepository (),main\cpp\logger.cpp,"LoggerRepository* Logger::getLoggerRepository() const
{
	return m_priv->repositoryRaw;
}",246.0,249.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,LoggerRepository
1540,31218,getHierarchy,1,Logger.getHierarchy,LoggerRepository Logger.getHierarchy (),main\cpp\logger.cpp,"LoggerRepository* Logger::getHierarchy() const
{
	return m_priv->repositoryRaw;
}",251.0,254.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,LoggerRepository
1541,31226,getResourceBundle,1,Logger.getResourceBundle,ResourceBundlePtr Logger.getResourceBundle (),main\cpp\logger.cpp,"ResourceBundlePtr Logger::getResourceBundle() const
{
	for (const Logger* l = this; l != 0; l = l->m_priv->parent.get())
	{
		if (l->m_priv->resourceBundle != 0)
		{
			return l->m_priv->resourceBundle;
		}
	}

	// It might be the case that there is no resource bundle
	return 0;
}",256.0,268.0,1.0,1.0,13.0,7,3,4,1,0,0,3,4,0,0,,0,0,0,0,0,ResourceBundlePtr
1542,31267,getResourceBundleString,1,Logger.getResourceBundleString,LogString Logger.getResourceBundleString (LogString),main\cpp\logger.cpp,"LogString Logger::getResourceBundleString(const LogString& key) const
{
	ResourceBundlePtr rb = getResourceBundle();

	// This is one of the rare cases where we can use logging in order
	// to report errors from within log4j.
	if (rb == 0)
	{
		return LogString();
	}
	else
	{
		try
		{
			return rb->getString(key);
		}
		catch (MissingResourceException&)
		{
			logLS(Level::getError(), LOG4CXX_STR(""No resource is associated with key \"""") +
				key + LOG4CXX_STR(""\"".""), LocationInfo::getLocationUnavailable());

			return LogString();
		}
	}
}",271.0,295.0,1.0,1.0,25.0,2,2,2,1,0,0,2,2,0,0,,0,0,2,1,1,LogString
1543,31312,getParent,1,Logger.getParent,LoggerPtr Logger.getParent (),main\cpp\logger.cpp,"LoggerPtr Logger::getParent() const
{
	return m_priv->parent;
}",298.0,301.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,LoggerPtr
1544,31320,getLevel,1,Logger.getLevel,LevelPtr Logger.getLevel (),main\cpp\logger.cpp,"const LevelPtr& Logger::getLevel() const
{
	return m_priv->level;
}",303.0,306.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,LevelPtr
1545,31328,isAttached,1,Logger.isAttached,bool Logger.isAttached (AppenderPtr),main\cpp\logger.cpp,"bool Logger::isAttached(const AppenderPtr appender) const
{
	return m_priv->aai.isAttached(appender);
}",308.0,311.0,1.0,1.0,4.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,bool
1546,31341,isTraceEnabled,1,Logger.isTraceEnabled,bool Logger.isTraceEnabled (),main\cpp\logger.cpp,"bool Logger::isTraceEnabled() const
{
	auto rep = getHierarchy();

	if (!rep || rep->isDisabled(Level::TRACE_INT))
	{
		return false;
	}

	return getEffectiveLevel()->toInt() <= Level::TRACE_INT;
}",313.0,323.0,1.0,1.0,11.0,8,6,5,2,0,0,2,2,0,0,,0,0,0,0,0,bool
1547,31372,isDebugEnabled,1,Logger.isDebugEnabled,bool Logger.isDebugEnabled (),main\cpp\logger.cpp,"bool Logger::isDebugEnabled() const
{
	auto rep = getHierarchy();

	if (!rep || rep->isDisabled(Level::DEBUG_INT))
	{
		return false;
	}

	return getEffectiveLevel()->toInt() <= Level::DEBUG_INT;
}",325.0,335.0,1.0,1.0,11.0,8,6,5,2,0,0,2,2,0,0,,0,0,0,0,0,bool
1548,31403,isEnabledFor,1,Logger.isEnabledFor,bool Logger.isEnabledFor (LevelPtr),main\cpp\logger.cpp,"bool Logger::isEnabledFor(const LevelPtr& level1) const
{
	auto rep = getHierarchy();

	if (!rep || rep->isDisabled(level1->toInt()))
	{
		return false;
	}

	return level1->isGreaterOrEqual(getEffectiveLevel());
}",337.0,347.0,1.0,1.0,11.0,6,4,5,2,0,0,2,2,0,0,,0,0,2,1,1,bool
1549,31433,isInfoEnabled,1,Logger.isInfoEnabled,bool Logger.isInfoEnabled (),main\cpp\logger.cpp,"bool Logger::isInfoEnabled() const
{
	auto rep = getHierarchy();

	if (!rep || rep->isDisabled(Level::INFO_INT))
	{
		return false;
	}

	return getEffectiveLevel()->toInt() <= Level::INFO_INT;
}",350.0,360.0,1.0,1.0,11.0,8,6,5,2,0,0,2,2,0,0,,0,0,0,0,0,bool
1550,31464,isErrorEnabled,1,Logger.isErrorEnabled,bool Logger.isErrorEnabled (),main\cpp\logger.cpp,"bool Logger::isErrorEnabled() const
{
	auto rep = getHierarchy();

	if (!rep || rep->isDisabled(Level::ERROR_INT))
	{
		return false;
	}

	return getEffectiveLevel()->toInt() <= Level::ERROR_INT;
}",362.0,372.0,1.0,1.0,11.0,8,6,5,2,0,0,2,2,0,0,,0,0,0,0,0,bool
1551,31495,isWarnEnabled,1,Logger.isWarnEnabled,bool Logger.isWarnEnabled (),main\cpp\logger.cpp,"bool Logger::isWarnEnabled() const
{
	auto rep = getHierarchy();

	if (!rep || rep->isDisabled(Level::WARN_INT))
	{
		return false;
	}

	return getEffectiveLevel()->toInt() <= Level::WARN_INT;
}",374.0,384.0,1.0,1.0,11.0,8,6,5,2,0,0,2,2,0,0,,0,0,0,0,0,bool
1552,31526,isFatalEnabled,1,Logger.isFatalEnabled,bool Logger.isFatalEnabled (),main\cpp\logger.cpp,"bool Logger::isFatalEnabled() const
{
	auto rep = getHierarchy();

	if (!rep || rep->isDisabled(Level::FATAL_INT))
	{
		return false;
	}

	return getEffectiveLevel()->toInt() <= Level::FATAL_INT;
}",386.0,396.0,1.0,1.0,11.0,8,6,5,2,0,0,2,2,0,0,,0,0,0,0,0,bool
1553,31557,l7dlog,1,Logger.l7dlog,"void Logger.l7dlog (LevelPtr,LogString,LocationInfo,ANY)",main\cpp\logger.cpp,"void Logger::l7dlog(const LevelPtr& level1, const std::string& key,
	const LocationInfo& location,
	const std::string& val1, const std::string& val2, const std::string& val3) const
{
	LOG4CXX_DECODE_CHAR(lkey, key);
	LOG4CXX_DECODE_CHAR(lval1, val1);
	LOG4CXX_DECODE_CHAR(lval2, val2);
	LOG4CXX_DECODE_CHAR(lval3, val3);

	std::vector<LogString> values(3);
	values[0] = lval1;
	values[1] = lval2;
	values[2] = lval3;
	l7dlog(level1, lkey, location, values);
}",487.0,501.0,1.0,1.0,15.0,10,5,14,7,0,0,4,5,0,0,,0,0,12,6,6,void
1554,31769,removeAllAppenders,1,Logger.removeAllAppenders,void Logger.removeAllAppenders (),main\cpp\logger.cpp,"void Logger::removeAllAppenders()
{
	AppenderList currentAppenders = m_priv->aai.getAllAppenders();
	m_priv->aai.removeAllAppenders();

	auto rep = getHierarchy();
	if(rep){
		for(AppenderPtr appender : currentAppenders){
			rep->fireRemoveAppenderEvent(this, appender.get());
		}
	}
}",503.0,514.0,1.0,1.0,12.0,8,3,8,4,0,0,3,4,0,0,,0,0,0,0,0,void
1555,31808,removeAppender,1,Logger.removeAppender,void Logger.removeAppender (AppenderPtr),main\cpp\logger.cpp,"void Logger::removeAppender(const LogString& name1)
{
	AppenderPtr appender = m_priv->aai.getAppender(name1);
	if(appender){
		removeAppender(appender);
	}
}",525.0,531.0,1.0,1.0,7.0,5,3,5,3,0,0,2,2,0,0,,0,0,2,1,1,void
1556,31856,removeHierarchy,1,Logger.removeHierarchy,void Logger.removeHierarchy (),main\cpp\logger.cpp,"void Logger::removeHierarchy()
{
	m_priv->repositoryRaw = 0;
}",533.0,536.0,1.0,1.0,4.0,2,2,1,1,0,0,1,1,0,0,,0,0,0,0,0,void
1557,31865,setAdditivity,1,Logger.setAdditivity,void Logger.setAdditivity (bool),main\cpp\logger.cpp,"void Logger::setAdditivity(bool additive1)
{
	m_priv->additive = additive1;
}",538.0,541.0,1.0,1.0,4.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1558,31875,setHierarchy,1,Logger.setHierarchy,void Logger.setHierarchy (ANY*),main\cpp\logger.cpp,"void Logger::setHierarchy(spi::LoggerRepository* repository1)
{
	m_priv->repositoryRaw = repository1;
}",543.0,546.0,1.0,1.0,4.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1559,31885,setParent,1,Logger.setParent,void Logger.setParent (LoggerPtr),main\cpp\logger.cpp,"void Logger::setParent(LoggerPtr parentLogger)
{
	m_priv->parent = parentLogger;
	updateThreshold();
}",548.0,552.0,1.0,1.0,5.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1560,31896,setLevel,1,Logger.setLevel,void Logger.setLevel (LevelPtr),main\cpp\logger.cpp,"void Logger::setLevel(const LevelPtr level1)
{
	if (m_priv->level != level1)
	{
		m_priv->level = level1;
		updateThreshold();
		if (auto rep = dynamic_cast<Hierarchy*>(getHierarchy()))
			rep->updateChildren(this);
	}
}",554.0,563.0,1.0,1.0,10.0,7,4,6,3,0,0,3,4,0,0,,0,0,2,1,1,void
1561,31928,updateThreshold,1,Logger.updateThreshold,void Logger.updateThreshold (),main\cpp\logger.cpp,"void Logger::updateThreshold()
{
	m_threshold = getEffectiveLevel()->toInt();
}",565.0,568.0,1.0,1.0,4.0,2,2,1,1,0,0,1,1,0,0,,0,0,0,0,0,void
1562,31938,getName,1,Logger.getName,LogString Logger.getName (),main\cpp\logger.cpp,"void Logger::getName(std::string& rv) const
{
	Transcoder::encode(m_priv->name, rv);
}",602.0,605.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,2,1,1,void
1563,31946,getLogger,1,Logger.getLogger,LoggerPtr Logger.getLogger (ANY),main\cpp\logger.cpp,"LoggerPtr Logger::getLogger(const char* const name)
{
	return LogManager::getLogger(name);
}",581.0,584.0,1.0,1.0,4.0,1,1,2,2,0,1,1,1,0,1,,0,0,2,1,1,LoggerPtr
1564,31968,setResourceBundle,1,Logger.setResourceBundle,void Logger.setResourceBundle (ANY),main\cpp\logger.cpp,"void Logger::setResourceBundle(const helpers::ResourceBundlePtr& bundle)
{
	m_priv->resourceBundle = bundle;
}",586.0,589.0,1.0,1.0,4.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1565,31978,getRootLogger,1,Logger.getRootLogger,LoggerPtr Logger.getRootLogger (),main\cpp\logger.cpp,"LoggerPtr Logger::getRootLogger()
{
	return LogManager::getRootLogger();
}",591.0,594.0,1.0,1.0,4.0,1,1,1,1,1,1,1,1,0,0,,0,0,0,0,0,LoggerPtr
1566,31987,getLoggerLS,1,Logger.getLoggerLS,"LoggerPtr Logger.getLoggerLS (LogString,ANY)",main\cpp\logger.cpp,"LoggerPtr Logger::getLoggerLS(const LogString& name)
{
	return LogManager::getLoggerLS(name);
}",733.0,736.0,1.0,1.0,4.0,1,1,3,3,0,1,1,1,0,1,,0,0,2,1,1,LoggerPtr
1567,32013,trace,1,Logger.trace,"void Logger.trace (ANY,ANY)",main\cpp\logger.cpp,"void Logger::trace(const std::string& msg) const
{
	if (isTraceEnabled())
	{
		forcedLog(LOG4CXX_NS::Level::getTrace(), msg);
	}
}",617.0,623.0,1.0,1.0,7.0,2,1,4,4,0,0,2,2,0,0,,0,0,2,1,1,void
1568,32047,debug,1,Logger.debug,"void Logger.debug (ANY,ANY)",main\cpp\logger.cpp,"void Logger::debug(const std::string& msg) const
{
	if (isDebugEnabled())
	{
		forcedLog(LOG4CXX_NS::Level::getDebug(), msg);
	}
}",633.0,639.0,1.0,1.0,7.0,2,1,4,4,0,0,2,2,0,0,,0,0,2,1,1,void
1569,32081,error,1,Logger.error,"void Logger.error (ANY,ANY)",main\cpp\logger.cpp,"void Logger::error(const std::string& msg) const
{
	if (isErrorEnabled())
	{
		forcedLog(LOG4CXX_NS::Level::getError(), msg);
	}
}",651.0,657.0,1.0,1.0,7.0,2,1,4,4,0,0,2,2,0,0,,0,0,2,1,1,void
1570,32115,fatal,1,Logger.fatal,"void Logger.fatal (ANY,ANY)",main\cpp\logger.cpp,"void Logger::fatal(const std::string& msg) const
{
	if (isFatalEnabled())
	{
		forcedLog(LOG4CXX_NS::Level::getFatal(), msg);
	}
}",667.0,673.0,1.0,1.0,7.0,2,1,4,4,0,0,2,2,0,0,,0,0,2,1,1,void
1571,32149,info,1,Logger.info,"void Logger.info (ANY,ANY)",main\cpp\logger.cpp,"void Logger::info(const std::string& msg) const
{
	if (isInfoEnabled())
	{
		forcedLog(LOG4CXX_NS::Level::getInfo(), msg);
	}
}",683.0,689.0,1.0,1.0,7.0,2,1,4,4,0,0,2,2,0,0,,0,0,2,1,1,void
1572,32183,log,1,Logger.log,"void Logger.log (LevelPtr,ANY,ANY)",main\cpp\logger.cpp,"void Logger::log(const LevelPtr& level1, const std::string& message) const
{
	if (isEnabledFor(level1))
	{
		forcedLog(level1, message);
	}
}",700.0,706.0,1.0,1.0,7.0,0,0,4,3,0,0,2,2,0,0,,0,0,4,2,2,void
1573,32211,logLS,1,Logger.logLS,"void Logger.logLS (LevelPtr,LogString,ANY)",main\cpp\logger.cpp,"void Logger::logLS(const LevelPtr& level1, const LogString& message,
	const LOG4CXX_NS::spi::LocationInfo& location) const
{
	if (isEnabledFor(level1))
	{
		forcedLogLS(level1, message, location);
	}
}",708.0,715.0,1.0,1.0,8.0,0,0,4,3,0,0,2,2,0,0,,0,0,6,3,3,void
1574,32226,warn,1,Logger.warn,"void Logger.warn (ANY,ANY)",main\cpp\logger.cpp,"void Logger::warn(const std::string& msg) const
{
	if (isWarnEnabled())
	{
		forcedLog(LOG4CXX_NS::Level::getWarn(), msg);
	}
}",725.0,731.0,1.0,1.0,7.0,2,1,4,4,0,0,2,2,0,0,,0,0,2,1,1,void
1575,32289,LoggerMatchFilterPrivate,1,LoggerMatchFilterPrivate.LoggerMatchFilterPrivate,ANY LoggerMatchFilterPrivate.LoggerMatchFilterPrivate (),main\cpp\loggermatchfilter.cpp,"LoggerMatchFilterPrivate() : FilterPrivate(),
		acceptOnMatch(true),
		loggerToMatch(LOG4CXX_STR(""root"")) {}",34.0,36.0,2.0,39.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1576,32297,LoggerMatchFilter,1,LoggerMatchFilter.LoggerMatchFilter,ANY LoggerMatchFilter.LoggerMatchFilter (),main\cpp\loggermatchfilter.cpp,"LoggerMatchFilter::LoggerMatchFilter()
	: Filter(std::make_unique<LoggerMatchFilterPrivate>())
{
}",45.0,48.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1577,32301,~LoggerMatchFilter,1,LoggerMatchFilter.~LoggerMatchFilter,ANY LoggerMatchFilter.~LoggerMatchFilter (),main\cpp\loggermatchfilter.cpp,LoggerMatchFilter::~LoggerMatchFilter() {},50.0,50.0,1.0,42.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1578,32305,setLoggerToMatch,1,LoggerMatchFilter.setLoggerToMatch,void LoggerMatchFilter.setLoggerToMatch (LogString),main\cpp\loggermatchfilter.cpp,"void LoggerMatchFilter::setLoggerToMatch(const LogString& value)
{
	priv->loggerToMatch = value;
}",52.0,55.0,1.0,1.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1579,32322,getLoggerToMatch,1,LoggerMatchFilter.getLoggerToMatch,LogString LoggerMatchFilter.getLoggerToMatch (),main\cpp\loggermatchfilter.cpp,"LogString LoggerMatchFilter::getLoggerToMatch() const
{
	return priv->loggerToMatch;
}",57.0,60.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,LogString
1580,32337,setOption,1,LoggerMatchFilter.setOption,"void LoggerMatchFilter.setOption (LogString,LogString)",main\cpp\loggermatchfilter.cpp,"void LoggerMatchFilter::setOption(const LogString& option,
	const LogString& value)
{

	if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""LOGGERTOMATCH""), LOG4CXX_STR(""loggertomatch"")))
	{
		setLoggerToMatch(value);
	}
	else if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""ACCEPTONMATCH""), LOG4CXX_STR(""acceptonmatch"")))
	{
		priv->acceptOnMatch = OptionConverter::toBoolean(value, priv->acceptOnMatch);
	}
}",62.0,76.0,1.0,2.0,15.0,1,1,3,3,0,1,2,2,1,1,,0,1,4,2,2,void
1581,32395,decide,1,LoggerMatchFilter.decide,FilterDecision LoggerMatchFilter.decide (ANY),main\cpp\loggermatchfilter.cpp,"Filter::FilterDecision LoggerMatchFilter::decide(
	const spi::LoggingEventPtr& event) const
{
	bool matchOccured = priv->loggerToMatch == event->getLoggerName();

	if (matchOccured)
	{
		if (priv->acceptOnMatch)
		{
			return Filter::ACCEPT;
		}
		else
		{
			return Filter::DENY;
		}
	}
	else
	{
		return Filter::NEUTRAL;
	}
}",78.0,98.0,1.0,21.0,21.0,10,5,6,4,0,0,3,4,0,0,,0,0,2,1,1,FilterDecision
1582,32449,setAcceptOnMatch,1,LoggerMatchFilter.setAcceptOnMatch,void LoggerMatchFilter.setAcceptOnMatch (bool),main\cpp\loggermatchfilter.cpp,"void LoggerMatchFilter::setAcceptOnMatch(bool acceptOnMatch1)
{
	priv->acceptOnMatch = acceptOnMatch1;
}",100.0,103.0,1.0,1.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1583,32466,getAcceptOnMatch,1,LoggerMatchFilter.getAcceptOnMatch,bool LoggerMatchFilter.getAcceptOnMatch (),main\cpp\loggermatchfilter.cpp,"bool LoggerMatchFilter::getAcceptOnMatch() const
{
	return priv->acceptOnMatch;
}",105.0,108.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,bool
1584,32496,LoggerPatternConverter,1,LoggerPatternConverter.LoggerPatternConverter,ANY LoggerPatternConverter.LoggerPatternConverter (ANY),main\cpp\loggerpatternconverter.cpp,"LoggerPatternConverter::LoggerPatternConverter(
	const std::vector<LogString>& options) :
	NamePatternConverter(LOG4CXX_STR(""Logger""),
		LOG4CXX_STR(""logger""), options)
{
}",30.0,35.0,1.0,1.0,6.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1585,32501,newInstance,1,LoggerPatternConverter.newInstance,PatternConverterPtr LoggerPatternConverter.newInstance (ANY),main\cpp\loggerpatternconverter.cpp,"PatternConverterPtr LoggerPatternConverter::newInstance(
	const std::vector<LogString>& options)
{
	if (options.size() == 0)
	{
		static WideLife<PatternConverterPtr> def = std::make_shared<LoggerPatternConverter>(options);
		return def;
	}

	return std::make_shared<LoggerPatternConverter>(options);
}",37.0,47.0,1.0,1.0,11.0,9,5,9,4,0,0,2,2,0,0,,0,0,2,1,1,PatternConverterPtr
1586,32534,format,1,LoggerPatternConverter.format,"void LoggerPatternConverter.format (LoggingEventPtr,LogString,Pool)",main\cpp\loggerpatternconverter.cpp,"void LoggerPatternConverter::format(
	const LoggingEventPtr& event,
	LogString& toAppendTo,
	Pool& /* p */ ) const
{
	int initialLength = (int)toAppendTo.length();
	toAppendTo.append(event->getLoggerName());
	abbreviate(initialLength, toAppendTo);
}",49.0,57.0,1.0,1.0,9.0,5,4,6,3,0,0,1,1,0,0,,0,0,6,3,3,void
1587,32562,<lambda>0,1,LoggingEvent.getCurrentThreadName.<lambda>0,ANY LoggingEvent.getCurrentThreadName.<lambda>0 (ListItem),main\cpp\loggingevent.cpp,[threadId](const ListItem& item) { return threadId == item.first; },361.0,361.0,5.0,71.0,1.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,ANY
1588,32614,LoggingEventPrivate,1,LoggingEventPrivate.LoggingEventPrivate,ANY LoggingEventPrivate.LoggingEventPrivate (),main\cpp\loggingevent.cpp,"LoggingEventPrivate(
		const LogString& logger1, const LevelPtr& level1,
		const LogString& message1, const LocationInfo& locationInfo1) :
		logger(logger1),
		level(level1),
		ndc(0),
		mdcCopy(0),
		properties(0),
		ndcLookupRequired(true),
		mdcCopyLookupRequired(true),
		message(message1),
		timeStamp(Date::currentTime()),
		locationInfo(locationInfo1),
		threadName(getCurrentThreadName()),
		threadUserName(getCurrentThreadUserName()),
		chronoTimeStamp(std::chrono::microseconds(timeStamp))
	{
	}",82.0,99.0,2.0,2.0,18.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,ANY
1589,32634,~LoggingEventPrivate,1,LoggingEventPrivate.~LoggingEventPrivate,ANY LoggingEventPrivate.~LoggingEventPrivate (),main\cpp\loggingevent.cpp,"~LoggingEventPrivate()
	{
		delete ndc;
		delete mdcCopy;
		delete properties;
	}",101.0,106.0,2.0,2.0,6.0,3,1,3,3,0,3,1,1,0,0,,0,3,0,0,0,ANY
1590,32659,getStartTime,1,LoggingEvent.getStartTime,log4cxx_time_t LoggingEvent.getStartTime (),main\cpp\loggingevent.cpp,"log4cxx_time_t LoggingEvent::getStartTime()
{
	return LOG4CXX_NS::helpers::APRInitializer::initialize();
}",174.0,177.0,1.0,1.0,4.0,3,1,3,3,1,1,1,1,0,0,,0,0,0,0,0,log4cxx_time_t
1591,32672,LoggingEvent,1,LoggingEvent.LoggingEvent,ANY LoggingEvent.LoggingEvent (),main\cpp\loggingevent.cpp,"LoggingEvent::LoggingEvent(
	const LogString& logger1, const LevelPtr& level1,
	const LogString& message1, const LocationInfo& locationInfo1) :
	m_priv(std::make_unique<LoggingEventPrivate>(logger1, level1, message1, locationInfo1))
{
}",194.0,199.0,1.0,1.0,6.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,ANY
1592,32692,~LoggingEvent,1,LoggingEvent.~LoggingEvent,ANY LoggingEvent.~LoggingEvent (),main\cpp\loggingevent.cpp,"LoggingEvent::~LoggingEvent()
{
}",201.0,203.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1593,32696,getThreadUserName,1,LoggingEvent.getThreadUserName,LogString LoggingEvent.getThreadUserName (),main\cpp\loggingevent.cpp,"const LogString& LoggingEvent::getThreadUserName() const{
	return m_priv->threadUserName;
}",205.0,207.0,1.0,1.0,3.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,LogString
1594,32704,getNDC,1,LoggingEvent.getNDC,bool LoggingEvent.getNDC (LogString),main\cpp\loggingevent.cpp,"bool LoggingEvent::getNDC(LogString& dest) const
{
	if (m_priv->ndcLookupRequired)
	{
		m_priv->ndcLookupRequired = false;
		LogString val;

		if (NDC::get(val))
		{
			m_priv->ndc = new LogString(val);
		}
	}

	if (m_priv->ndc)
	{
		dest.append(*m_priv->ndc);
		return true;
	}

	return false;
}",209.0,229.0,1.0,1.0,21.0,11,5,10,5,0,1,4,5,1,1,,0,1,2,1,1,bool
1595,32751,getMDC,1,LoggingEvent.getMDC,"bool LoggingEvent.getMDC (LogString,LogString)",main\cpp\loggingevent.cpp,"bool LoggingEvent::getMDC(const LogString& key, LogString& dest) const
{
	// Note the mdcCopy is used if it exists. Otherwise we use the MDC
	// that is associated with the thread.
	if (m_priv->mdcCopy != 0 && !m_priv->mdcCopy->empty())
	{
		MDC::Map::const_iterator it = m_priv->mdcCopy->find(key);

		if (it != m_priv->mdcCopy->end())
		{
			if (!it->second.empty())
			{
				dest.append(it->second);
				return true;
			}
		}
	}

	return MDC::get(key, dest);

}",231.0,251.0,1.0,1.0,21.0,18,6,13,5,0,1,4,7,0,1,,0,0,4,2,2,bool
1596,32817,getMDCKeySet,1,LoggingEvent.getMDCKeySet,KeySet LoggingEvent.getMDCKeySet (),main\cpp\loggingevent.cpp,"LoggingEvent::KeySet LoggingEvent::getMDCKeySet() const
{
	LoggingEvent::KeySet set;

	if (m_priv->mdcCopy != 0 && !m_priv->mdcCopy->empty())
	{
		MDC::Map::const_iterator it;

		for (it = m_priv->mdcCopy->begin(); it != m_priv->mdcCopy->end(); it++)
		{
			set.push_back(it->first);

		}
	}
	else
	{
		ThreadSpecificData* data = ThreadSpecificData::getCurrentData();

		if (data != 0)
		{
			MDC::Map& m = data->getMap();

			for (MDC::Map::const_iterator it = m.begin(); it != m.end(); it++)
			{
				set.push_back(it->first);
			}
		}
	}

	return set;
}",253.0,283.0,1.0,1.0,31.0,14,6,9,3,0,0,3,4,0,0,,0,0,0,0,0,KeySet
1597,32914,getMDCCopy,1,LoggingEvent.getMDCCopy,void LoggingEvent.getMDCCopy (),main\cpp\loggingevent.cpp,"void LoggingEvent::getMDCCopy() const
{
	if (m_priv->mdcCopyLookupRequired)
	{
		m_priv->mdcCopyLookupRequired = false;
		// the clone call is required for asynchronous logging.
		ThreadSpecificData* data = ThreadSpecificData::getCurrentData();

		if (data != 0)
		{
			m_priv->mdcCopy = new MDC::Map(data->getMap());
		}
		else
		{
			m_priv->mdcCopy = new MDC::Map();
		}
	}
}",285.0,302.0,1.0,1.0,18.0,10,5,8,4,0,1,3,4,0,0,,0,1,0,0,0,void
1598,32958,getProperty,1,LoggingEvent.getProperty,"bool LoggingEvent.getProperty (LogString,LogString)",main\cpp\loggingevent.cpp,"bool LoggingEvent::getProperty(const LogString& key, LogString& dest) const
{
	if (m_priv->properties == 0)
	{
		return false;
	}

	std::map<LogString, LogString>::const_iterator  it = m_priv->properties->find(key);

	if (it != m_priv->properties->end())
	{
		dest.append(it->second);
		return true;
	}

	return false;
}",304.0,320.0,1.0,1.0,17.0,10,5,8,4,0,0,3,3,0,0,,0,0,4,2,2,bool
1599,33004,getPropertyKeySet,1,LoggingEvent.getPropertyKeySet,KeySet LoggingEvent.getPropertyKeySet (),main\cpp\loggingevent.cpp,"LoggingEvent::KeySet LoggingEvent::getPropertyKeySet() const
{
	LoggingEvent::KeySet set;

	if (m_priv->properties != 0)
	{
		std::map<LogString, LogString>::const_iterator it;

		for (it = m_priv->properties->begin(); it != m_priv->properties->end(); it++)
		{
			set.push_back(it->first);
		}
	}

	return set;
}",322.0,337.0,1.0,1.0,16.0,10,4,8,3,0,0,3,4,0,0,,0,0,0,0,0,KeySet
1600,33047,getCurrentThreadName,1,LoggingEvent.getCurrentThreadName,LogString LoggingEvent.getCurrentThreadName (),main\cpp\loggingevent.cpp,"const LogString& LoggingEvent::getCurrentThreadName()
{
#if defined(_WIN32)
	using ThreadIdType = DWORD;
	ThreadIdType threadId = GetCurrentThreadId();
#elif LOG4CXX_HAS_PTHREAD_SELF
	using ThreadIdType = pthread_t;
	ThreadIdType threadId = pthread_self();
#else
	using ThreadIdType = int;
	ThreadIdType threadId = 0;
#endif

#if LOG4CXX_HAS_THREAD_LOCAL
	thread_local LogString thread_id_string;
#else
	using ListItem = std::pair<ThreadIdType, LogString>;
	static std::list<ListItem> thread_id_map;
	static std::mutex mutex;
	std::lock_guard<std::mutex> lock(mutex);
	auto pThreadId = std::find_if(thread_id_map.begin(), thread_id_map.end()
		, [threadId](const ListItem& item) { return threadId == item.first; });
	if (thread_id_map.end() == pThreadId)
		pThreadId = thread_id_map.insert(thread_id_map.begin(), ListItem(threadId, LogString()));
	LogString& thread_id_string = pThreadId->second;
#endif
	if ( !thread_id_string.empty() )
	{
		return thread_id_string;
	}

#if defined(_WIN32)
	char...",340.0,385.0,1.0,1.0,46.0,19,7,20,6,0,0,3,3,0,0,,0,0,0,0,0,LogString
1601,33126,getCurrentThreadUserName,1,LoggingEvent.getCurrentThreadUserName,LogString LoggingEvent.getCurrentThreadUserName (),main\cpp\loggingevent.cpp,"const LogString& LoggingEvent::getCurrentThreadUserName()
{
#if LOG4CXX_HAS_THREAD_LOCAL
	thread_local LogString thread_name;
#else
	static WideLife<LogString> thread_name = LOG4CXX_STR(""(noname)"");
#endif
	if( !thread_name.empty() ){
		return thread_name;
	}

#if LOG4CXX_HAS_PTHREAD_GETNAME
	char result[16];
	pthread_t current_thread = pthread_self();
	if (pthread_getname_np(current_thread, result, sizeof(result)) < 0 || 0 == result[0])
		thread_name = getCurrentThreadName();
	else
		thread_name = Transcoder::decode(result);
#elif WIN32
	typedef HRESULT (WINAPI *TGetThreadDescription)(HANDLE, PWSTR*);
	static struct initialiser
	{
		HMODULE hKernelBase;
		TGetThreadDescription GetThreadDescription;
		initialiser()
			: hKernelBase(GetModuleHandleA(""KernelBase.dll""))
			, GetThreadDescription(nullptr)
		{
			if (hKernelBase)
				GetThreadDescription = reinterpret_cast<TGetThreadDescription>(GetProcAddress(hKernelBase, ""GetThreadDescription""));
		}
	} win32func;
	if (win32func.GetThr...",387.0,437.0,1.0,1.0,51.0,4,3,5,1,0,0,2,2,0,0,,0,0,0,0,0,LogString
1602,33149,setProperty,1,LoggingEvent.setProperty,"void LoggingEvent.setProperty (LogString,LogString)",main\cpp\loggingevent.cpp,"void LoggingEvent::setProperty(const LogString& key, const LogString& value)
{
	if (m_priv->properties == 0)
	{
		m_priv->properties = new std::map<LogString, LogString>;
	}

	(*m_priv->properties)[key] = value;
}",439.0,447.0,1.0,1.0,9.0,9,6,6,4,0,0,2,2,0,0,,0,0,4,2,2,void
1603,33176,getLevel,1,LoggingEvent.getLevel,LevelPtr LoggingEvent.getLevel (),main\cpp\loggingevent.cpp,"const LevelPtr& LoggingEvent::getLevel() const
{
	return m_priv->level;
}",449.0,452.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,LevelPtr
1604,33184,getLoggerName,1,LoggingEvent.getLoggerName,LogString LoggingEvent.getLoggerName (),main\cpp\loggingevent.cpp,"const LogString& LoggingEvent::getLoggerName() const
{
	return m_priv->logger;
}",454.0,457.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,LogString
1605,33192,getMessage,1,LoggingEvent.getMessage,LogString LoggingEvent.getMessage (),main\cpp\loggingevent.cpp,"const LogString& LoggingEvent::getMessage() const
{
	return m_priv->message;
}",459.0,462.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,LogString
1606,33200,getRenderedMessage,1,LoggingEvent.getRenderedMessage,LogString LoggingEvent.getRenderedMessage (),main\cpp\loggingevent.cpp,"const LogString& LoggingEvent::getRenderedMessage() const
{
	return m_priv->message;
}",464.0,467.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,LogString
1607,33208,getThreadName,1,LoggingEvent.getThreadName,LogString LoggingEvent.getThreadName (),main\cpp\loggingevent.cpp,"const LogString& LoggingEvent::getThreadName() const
{
	return m_priv->threadName;
}",469.0,472.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,LogString
1608,33216,getTimeStamp,1,LoggingEvent.getTimeStamp,log4cxx_time_t LoggingEvent.getTimeStamp (),main\cpp\loggingevent.cpp,"log4cxx_time_t LoggingEvent::getTimeStamp() const
{
	return m_priv->timeStamp;
}",474.0,477.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,log4cxx_time_t
1609,33224,getLocationInformation,1,LoggingEvent.getLocationInformation,LocationInfo LoggingEvent.getLocationInformation (),main\cpp\loggingevent.cpp,"const LOG4CXX_NS::spi::LocationInfo& LoggingEvent::getLocationInformation() const
{
	return m_priv->locationInfo;
}",479.0,482.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,LocationInfo
1610,33232,getChronoTimeStamp,1,LoggingEvent.getChronoTimeStamp,time_point<std::chrono::system_clock> LoggingEvent.getChronoTimeStamp (),main\cpp\loggingevent.cpp,"std::chrono::time_point<std::chrono::system_clock> LoggingEvent::getChronoTimeStamp() const{
	return m_priv->chronoTimeStamp;
}",484.0,486.0,1.0,1.0,3.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,time_point<std.chrono.system_clock>
1611,33255,LoggingEventPatternConverter,1,LoggingEventPatternConverter.LoggingEventPatternConverter,"ANY LoggingEventPatternConverter.LoggingEventPatternConverter (LogString,LogString)",main\cpp\loggingeventpatternconverter.cpp,"LoggingEventPatternConverter::LoggingEventPatternConverter(std::unique_ptr<PatternConverterPrivate> priv) :
	PatternConverter (std::move(priv))
{

}",37.0,41.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1612,33266,format,1,LoggingEventPatternConverter.format,"void LoggingEventPatternConverter.format (ObjectPtr,LogString,ANY)",main\cpp\loggingeventpatternconverter.cpp,"void LoggingEventPatternConverter::format(const ObjectPtr& obj,
	LogString& output,
	LOG4CXX_NS::helpers::Pool& p) const
{
	LoggingEventPtr le = LOG4CXX_NS::cast<LoggingEvent>(obj);

	if (le != NULL)
	{
		format(le, output, p);
	}
}",43.0,53.0,1.0,1.0,11.0,5,5,9,7,0,0,2,2,0,0,,0,0,6,3,3,void
1613,33292,handlesThrowable,1,LoggingEventPatternConverter.handlesThrowable,bool LoggingEventPatternConverter.handlesThrowable (),main\cpp\loggingeventpatternconverter.cpp,"bool LoggingEventPatternConverter::handlesThrowable() const
{
	return false;
}",55.0,58.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,bool
1614,33322,LogLogPrivate,1,LogLogPrivate.LogLogPrivate,ANY LogLogPrivate.LogLogPrivate (),main\cpp\loglog.cpp,"LogLogPrivate() :
		debugEnabled(false),
		quietMode(false){}",35.0,37.0,2.0,20.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1615,33326,~LogLogPrivate,1,LogLogPrivate.~LogLogPrivate,ANY LogLogPrivate.~LogLogPrivate (),main\cpp\loglog.cpp,"~LogLogPrivate()
	{
		quietMode = true; // Prevent output after deletion by onexit processing chain.
	}",39.0,42.0,2.0,2.0,4.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,ANY
1616,33336,LogLog,1,LogLog.LogLog,ANY LogLog.LogLog (),main\cpp\loglog.cpp,"LogLog::LogLog() :
	m_priv(std::make_unique<LogLogPrivate>())
{
	LogString log4cxxDebug = OptionConverter::getSystemProperty(LOG4CXX_STR(""LOG4CXX_DEBUG""), LOG4CXX_STR(""false""));
	m_priv->debugEnabled = OptionConverter::toBoolean(log4cxxDebug, false);
}",53.0,58.0,1.0,1.0,6.0,5,3,5,3,0,2,1,1,0,2,,0,2,0,0,0,ANY
1617,33361,~LogLog,1,LogLog.~LogLog,ANY LogLog.~LogLog (),main\cpp\loglog.cpp,LogLog::~LogLog(){},60.0,60.0,1.0,19.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1618,33365,getInstance,1,LogLog.getInstance,LogLog LogLog.getInstance (),main\cpp\loglog.cpp,"LogLog& LogLog::getInstance()
{
	static WideLife<LogLog> internalLogger;

	return internalLogger;
}",62.0,67.0,1.0,1.0,6.0,0,0,1,1,0,0,1,1,0,0,,0,0,0,0,0,LogLog
1619,33372,setInternalDebugging,1,LogLog.setInternalDebugging,void LogLog.setInternalDebugging (bool),main\cpp\loglog.cpp,"void LogLog::setInternalDebugging(bool debugEnabled1)
{
	auto p = getInstance().m_priv.get();
	std::unique_lock<std::mutex> lock(p->mutex);

	p->debugEnabled = debugEnabled1;
}",69.0,75.0,1.0,1.0,7.0,10,5,6,3,2,0,1,1,0,0,,0,0,2,1,1,void
1620,33403,debug,1,LogLog.debug,void LogLog.debug (LogString),main\cpp\loglog.cpp,"void LogLog::debug(const LogString& msg, const std::exception& e)
{
	auto p = getInstance().m_priv.get();
	if (p && !p->quietMode) // Not deleted by onexit processing?
	{
		if (!p->debugEnabled)
			return;

		std::unique_lock<std::mutex> lock(p->mutex);
		emit(msg);
		emit(e);
	}
}",93.0,105.0,1.0,1.0,13.0,13,7,8,3,46,0,3,4,0,0,,0,0,4,2,2,void
1621,33492,error,1,LogLog.error,void LogLog.error (LogString),main\cpp\loglog.cpp,"void LogLog::error(const LogString& msg, const std::exception& e)
{
	auto p = getInstance().m_priv.get();
	if (p && !p->quietMode) // Not deleted by onexit processing?
	{
		std::unique_lock<std::mutex> lock(p->mutex);
		emit(msg);
		emit(e);
	}
}",119.0,128.0,1.0,1.0,10.0,11,7,7,3,39,0,2,2,0,0,,0,0,4,2,2,void
1622,33567,setQuietMode,1,LogLog.setQuietMode,void LogLog.setQuietMode (bool),main\cpp\loglog.cpp,"void LogLog::setQuietMode(bool quietMode1)
{
	auto p = getInstance().m_priv.get();
	std::unique_lock<std::mutex> lock(p->mutex);

	p->quietMode = quietMode1;
}",130.0,136.0,1.0,1.0,7.0,10,5,6,3,0,0,1,1,0,0,,0,0,2,1,1,void
1623,33598,warn,1,LogLog.warn,void LogLog.warn (LogString),main\cpp\loglog.cpp,"void LogLog::warn(const LogString& msg, const std::exception& e)
{
	auto p = getInstance().m_priv.get();
	if (p && !p->quietMode) // Not deleted by onexit processing?
	{
		std::unique_lock<std::mutex> lock(p->mutex);
		emit(msg);
		emit(e);
	}
}",148.0,157.0,1.0,1.0,10.0,11,7,7,3,35,0,2,2,0,0,,0,0,4,2,2,void
1624,33673,emit,1,LogLog.emit,void LogLog.emit (LogString),main\cpp\loglog.cpp,"void LogLog::emit(const std::exception& ex)
{
	LogString out(LOG4CXX_STR(""log4cxx: ""));
	const char* raw = ex.what();

	if (raw != 0)
	{
		Transcoder::decode(raw, out);
	}
	else
	{
		out.append(LOG4CXX_STR(""std::exception::what() == null""));
	}

	out.append(1, (logchar) 0x0A);

	SystemErrWriter::write(out);
}",169.0,186.0,1.0,1.0,18.0,4,2,5,3,0,1,1,1,0,1,,0,0,2,1,1,void
1625,33749,<lambda>0,1,[]() -> ObjectPtr { LoggerRepositoryPtr hierarchy = Hierarchy.create(); return std.make_shared<DefaultRepositorySelector>(hierarchy); }.<lambda>0,ObjectPtr []() -> ObjectPtr { LoggerRepositoryPtr hierarchy = Hierarchy.create(); return std.make_shared<DefaultRepositorySelector>(hierarchy); }.<lambda>0 (),main\cpp\logmanager.cpp,"[]() -> ObjectPtr
		{
			LoggerRepositoryPtr hierarchy = Hierarchy::create();
			return std::make_shared<DefaultRepositorySelector>(hierarchy);
		}",49.0,53.0,73.0,3.0,5.0,5,4,5,4,0,1,1,1,0,0,,0,1,0,0,0,ObjectPtr
1626,33811,getRepositorySelector,1,LogManager.getRepositorySelector,RepositorySelectorPtr LogManager.getRepositorySelector (),main\cpp\logmanager.cpp,"RepositorySelectorPtr LogManager::getRepositorySelector()
{
	auto result = APRInitializer::getOrAddUnique<spi::RepositorySelector>( []() -> ObjectPtr
		{
			LoggerRepositoryPtr hierarchy = Hierarchy::create();
			return std::make_shared<DefaultRepositorySelector>(hierarchy);
		}
	);
	return result;
}",47.0,56.0,1.0,1.0,10.0,5,4,4,3,0,0,1,1,0,0,,0,0,0,0,0,RepositorySelectorPtr
1627,33829,setRepositorySelector,1,LogManager.setRepositorySelector,"void LogManager.setRepositorySelector (ANY,void*)",main\cpp\logmanager.cpp,"void LogManager::setRepositorySelector(spi::RepositorySelectorPtr selector, void* guard1)
{
	if ((LogManager::guard != 0) && (LogManager::guard != guard1))
	{
		throw IllegalArgumentException(LOG4CXX_STR(""Attempted to reset the LoggerFactory without possessing the guard.""));
	}

	if (selector == 0)
	{
		throw IllegalArgumentException(LOG4CXX_STR(""RepositorySelector must be non-null.""));
	}

	LogManager::guard = guard1;
	APRInitializer::setUnique<spi::RepositorySelector>(selector);
}",58.0,72.0,1.0,1.0,15.0,14,8,9,5,0,0,3,3,0,0,,0,0,4,2,2,void
1628,33875,getLoggerRepository,1,LogManager.getLoggerRepository,LoggerRepositoryPtr LogManager.getLoggerRepository (),main\cpp\logmanager.cpp,"LoggerRepositoryPtr LogManager::getLoggerRepository()
{
	return getRepositorySelector()->getLoggerRepository();
}",76.0,79.0,1.0,1.0,4.0,1,1,0,0,7,0,1,1,0,0,,0,0,0,0,0,LoggerRepositoryPtr
1629,33884,getRootLogger,1,LogManager.getRootLogger,LoggerPtr LogManager.getRootLogger (),main\cpp\logmanager.cpp,"LoggerPtr LogManager::getRootLogger()
{
	// Delegate the actual manufacturing of the logger to the logger repository.
	auto r = getLoggerRepository();
	r->ensureIsConfigured(std::bind(DefaultConfigurator::configure, r));
	return r->getRootLogger();
}",81.0,87.0,1.0,1.0,7.0,5,3,6,3,3,0,1,1,0,0,,0,0,0,0,0,LoggerPtr
1630,33909,getLoggerLS,1,LogManager.getLoggerLS,LoggerPtr LogManager.getLoggerLS (LogString),main\cpp\logmanager.cpp,"LoggerPtr LogManager::getLoggerLS(const LogString& name,
	const spi::LoggerFactoryPtr& factory)
{
	// Delegate the actual manufacturing of the logger to the logger repository.
	auto r = getLoggerRepository();
	r->ensureIsConfigured(std::bind(DefaultConfigurator::configure, r));
	return r->getLogger(name, factory);
}",102.0,109.0,1.0,1.0,8.0,5,3,7,4,1,0,1,1,0,0,,0,0,4,2,2,LoggerPtr
1631,33965,getLogger,1,LogManager.getLogger,LoggerPtr LogManager.getLogger (ANY),main\cpp\logmanager.cpp,"LoggerPtr LogManager::getLogger(const std::string& name,
	const spi::LoggerFactoryPtr& factory)
{
	LOG4CXX_DECODE_CHAR(n, name);
	return getLoggerLS(n, factory);
}",117.0,122.0,1.0,1.0,6.0,0,0,3,2,2,0,1,1,0,0,,0,0,4,2,2,LoggerPtr
1632,33989,exists,1,LogManager.exists,LoggerPtr LogManager.exists (ANY),main\cpp\logmanager.cpp,"LoggerPtr LogManager::exists(const std::string& name)
{
	LOG4CXX_DECODE_CHAR(n, name);
	return existsLS(n);
}",124.0,128.0,1.0,1.0,5.0,0,0,3,2,0,0,1,1,0,0,,0,0,2,1,1,LoggerPtr
1633,34000,existsLS,1,LogManager.existsLS,LoggerPtr LogManager.existsLS (LogString),main\cpp\logmanager.cpp,"LoggerPtr LogManager::existsLS(const LogString& name)
{
	return getLoggerRepository()->exists(name);
}",193.0,196.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,2,1,1,LoggerPtr
1634,34011,getCurrentLoggers,1,LogManager.getCurrentLoggers,LoggerList LogManager.getCurrentLoggers (),main\cpp\logmanager.cpp,"LoggerList LogManager::getCurrentLoggers()
{
	return getLoggerRepository()->getCurrentLoggers();
}",198.0,201.0,1.0,1.0,4.0,1,1,0,0,0,0,1,1,0,0,,0,0,0,0,0,LoggerList
1635,34020,shutdown,1,LogManager.shutdown,void LogManager.shutdown (),main\cpp\logmanager.cpp,"void LogManager::shutdown()
{
	APRInitializer::unregisterAll();
	getLoggerRepository()->shutdown();
}",203.0,207.0,1.0,1.0,5.0,2,2,1,1,0,1,1,1,0,0,,0,0,0,0,0,void
1636,34032,resetConfiguration,1,LogManager.resetConfiguration,void LogManager.resetConfiguration (),main\cpp\logmanager.cpp,"void LogManager::resetConfiguration()
{
	getLoggerRepository()->resetConfiguration();
}",209.0,212.0,1.0,1.0,4.0,1,1,0,0,1,0,1,1,0,0,,0,0,0,0,0,void
1637,34040,removeLogger,1,LogManager.removeLogger,"bool LogManager.removeLogger (LogString,bool)",main\cpp\logmanager.cpp,"bool LogManager::removeLogger(const LogString& name, bool ifNotUsed)
{
#if LOG4CXX_ABI_VERSION <= 15
	bool result = false;
	if (auto r = dynamic_cast<Hierarchy*>(getLoggerRepository().get()))
		result = r->removeLogger(name, ifNotUsed);
	return result;
#else
	return getLoggerRepository()->removeLogger(name, ifNotUsed);
#endif
}",214.0,224.0,1.0,1.0,11.0,6,4,7,4,1,0,2,2,0,0,,0,0,4,2,2,bool
1638,34087,logstream_ios_base,1,logstream_base.logstream_ios_base.logstream_ios_base,"ANY logstream_base.logstream_ios_base.logstream_ios_base (ANY,int)",main\cpp\logstream.cpp,"logstream_base::logstream_ios_base::logstream_ios_base(std::ios_base::fmtflags initval,
	int initsize)
{
#if LOG4CXX_MEMSET_IOS_BASE
	//
	//    the destructor for std::ios_base in the MSVC STL
	//        releases a pointer that was not initialized in the constructor.
	//
	memset(this, 0, sizeof(*this));
#endif
#if LOG4CXX_INIT_IOS_BASE
	init(NULL);
#endif
	flags(initval);
	precision(initsize);
	width(initsize);

}",33.0,50.0,1.0,1.0,18.0,0,0,3,2,0,0,1,1,0,0,,0,0,4,2,2,ANY
1639,34099,logstream_base,1,logstream_base.logstream_base,"ANY logstream_base.logstream_base (LoggerPtr,LevelPtr)",main\cpp\logstream.cpp,"logstream_base::logstream_base(const LoggerPtr& log,
	const LevelPtr& lvl) : initset((std::ios_base::fmtflags) - 1, 1),
	initclear((std::ios_base::fmtflags) 0, 0), fillchar(0), fillset(false), logger(log), level(lvl), location()
{
	enabled = logger->isEnabledFor(level);
}",53.0,58.0,1.0,1.0,6.0,2,2,3,3,0,0,1,1,0,0,,0,0,4,2,2,ANY
1640,34112,~logstream_base,1,logstream_base.~logstream_base,ANY logstream_base.~logstream_base (),main\cpp\logstream.cpp,"logstream_base::~logstream_base()
{
}",60.0,62.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1641,34116,insert,1,logstream_base.insert,void logstream_base.insert (ANY),main\cpp\logstream.cpp,"void logstream_base::insert(std::ios_base & (*manip)(std::ios_base&))
{
	get_stream_state(initclear, initset, fillchar, fillset);
	(*manip)(initset);
	(*manip)(initclear);
	refresh_stream_state();
}",64.0,70.0,1.0,1.0,7.0,2,1,8,5,0,0,1,1,0,0,,0,0,2,1,1,void
1642,34135,set_stream_state,1,logstream_base.set_stream_state,"bool logstream_base.set_stream_state (ANY,int)",main\cpp\logstream.cpp,"bool logstream_base::set_stream_state(std::ios_base& dest, int& dstchar)
{
	std::ios_base::fmtflags setval = initset.flags();
	std::ios_base::fmtflags clrval = initclear.flags();
	std::ios_base::fmtflags mask = setval ^ (~clrval);
	dest.setf(clrval, mask);

	if (initset.precision() == initclear.precision())
	{
		dest.precision(initset.precision());
	}

	if (initset.width() == initclear.width())
	{
		dest.width(initset.width());
	}

	dstchar = fillchar;
	return fillset;
}",72.0,91.0,1.0,1.0,20.0,19,5,21,9,1,0,3,3,0,0,,0,0,4,2,2,bool
1643,34211,endmsg,1,logstream_base.endmsg,logstream_base logstream_base.endmsg (logstream_base),main\cpp\logstream.cpp,"logstream_base& logstream_base::endmsg(logstream_base& stream)
{
	stream.end_message();
	return stream;
}",93.0,97.0,1.0,1.0,5.0,1,1,2,1,0,0,1,1,0,0,,0,0,2,1,1,logstream_base
1644,34222,nop,1,logstream_base.nop,logstream_base logstream_base.nop (logstream_base),main\cpp\logstream.cpp,"logstream_base& logstream_base::nop(logstream_base& stream)
{
	return stream;
}",99.0,102.0,1.0,1.0,4.0,0,0,1,1,0,0,1,1,0,0,,0,0,2,1,1,logstream_base
1645,34229,end_message,1,logstream_base.end_message,void logstream_base.end_message (),main\cpp\logstream.cpp,"void logstream_base::end_message()
{
	if (isEnabled())
	{
		log(logger, level, location);
	}

	erase();
}",104.0,112.0,1.0,1.0,9.0,0,0,3,3,0,0,2,2,0,0,,0,0,0,0,0,void
1646,34241,precision,1,LOG4CXX_NS.logstream_base.precision,int LOG4CXX_NS.logstream_base.precision (int),main\cpp\logstream.cpp,"int LOG4CXX_NS::logstream_base::precision()
{
	get_stream_state(initclear, initset, fillchar, fillset);
	return (int)initclear.precision();
}",125.0,129.0,1.0,1.0,5.0,4,3,10,6,0,0,1,1,0,0,,0,0,0,0,0,int
1647,34285,width,1,LOG4CXX_NS.logstream_base.width,int LOG4CXX_NS.logstream_base.width (int),main\cpp\logstream.cpp,"int LOG4CXX_NS::logstream_base::width()
{
	get_stream_state(initclear, initset, fillchar, fillset);
	return (int)initclear.width();
}",140.0,144.0,1.0,1.0,5.0,4,3,10,6,0,0,1,1,0,0,,0,0,0,0,0,int
1648,34329,fill,1,LOG4CXX_NS.logstream_base.fill,int LOG4CXX_NS.logstream_base.fill (int),main\cpp\logstream.cpp,"int logstream_base::fill()
{
	get_stream_state(initclear, initset, fillchar, fillset);
	return fillchar;
}",156.0,160.0,1.0,1.0,5.0,3,1,10,6,0,0,1,1,0,0,,0,0,0,0,0,int
1649,34363,flags,1,logstream_base.flags,fmtflags logstream_base.flags (ANY),main\cpp\logstream.cpp,"std::ios_base::fmtflags logstream_base::flags(std::ios_base::fmtflags newflags)
{
	get_stream_state(initclear, initset, fillchar, fillset);
	initset.flags(newflags);
	std::ios_base::fmtflags oldVal = initclear.flags(newflags);
	refresh_stream_state();
	return oldVal;
}",162.0,169.0,1.0,1.0,8.0,3,2,10,6,0,0,1,1,0,0,,0,0,2,1,1,fmtflags
1650,34389,setf,1,logstream_base.setf,"fmtflags logstream_base.setf (ANY,ANY)",main\cpp\logstream.cpp,"std::ios_base::fmtflags logstream_base::setf(std::ios_base::fmtflags newflags)
{
	get_stream_state(initclear, initset, fillchar, fillset);
	initset.setf(newflags);
	std::ios_base::fmtflags oldVal = initclear.setf(newflags);
	refresh_stream_state();
	return oldVal;
}",180.0,187.0,1.0,1.0,8.0,3,2,12,7,0,0,1,1,0,0,,0,0,2,1,1,fmtflags
1651,34444,setLevel,1,logstream_base.setLevel,void logstream_base.setLevel (ANY),main\cpp\logstream.cpp,"void logstream_base::setLevel(const ::LOG4CXX_NS::LevelPtr& newlevel)
{
	level = newlevel;
	bool oldLevel = enabled;
	enabled = logger->isEnabledFor(level);

	if (oldLevel != enabled)
	{
		erase();
	}
}",191.0,201.0,1.0,1.0,11.0,5,3,9,5,0,0,2,2,0,0,,0,0,2,1,1,void
1652,34469,isEnabledFor,1,logstream_base.isEnabledFor,bool logstream_base.isEnabledFor (ANY),main\cpp\logstream.cpp,"bool logstream_base::isEnabledFor(const ::LOG4CXX_NS::LevelPtr& l) const
{
	return logger->isEnabledFor(l);
}",203.0,206.0,1.0,1.0,4.0,1,1,2,2,0,0,1,1,0,0,,0,0,2,1,1,bool
1653,34480,setLocation,1,logstream_base.setLocation,void logstream_base.setLocation (ANY),main\cpp\logstream.cpp,"void logstream_base::setLocation(const LOG4CXX_NS::spi::LocationInfo& newlocation)
{
	if (LOG4CXX_UNLIKELY(enabled))
	{
		location = newlocation;
	}
}",209.0,215.0,1.0,1.0,7.0,1,1,2,2,0,0,2,2,0,0,,0,0,2,1,1,void
1654,34492,logstream,1,logstream.logstream,"ANY logstream.logstream (ANY,ANY)",main\cpp\logstream.cpp,"logstream::logstream(const std::basic_string<Ch>& loggerName,
	const LOG4CXX_NS::LevelPtr& level) : logstream_base(LOG4CXX_NS::Logger::getLogger(loggerName), level), stream(0)
{
}",230.0,233.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ANY
1655,34510,~logstream,1,logstream.~logstream,ANY logstream.~logstream (),main\cpp\logstream.cpp,"logstream::~logstream()
{
	delete stream;
}",235.0,238.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,ANY
1656,34516,operator <<,1,logstream.operator <<,logstream logstream.operator << (logstream_base),main\cpp\logstream.cpp,"logstream& logstream::operator<<(std::ios_base & (*manip)(std::ios_base&))
{
	logstream_base::insert(manip);
	return *this;
}",264.0,268.0,1.0,1.0,5.0,3,1,1,1,0,0,1,1,0,0,,0,0,2,1,1,logstream
1657,34549,operator >>,1,logstream.operator >>,logstream logstream.operator >> (ANY),main\cpp\logstream.cpp,"logstream& logstream::operator>>(const LOG4CXX_NS::spi::LocationInfo& newlocation)
{
	setLocation(newlocation);
	return *this;
}",258.0,262.0,1.0,1.0,5.0,1,1,1,1,0,0,1,1,0,0,,0,0,2,1,1,logstream
1658,34572,operator ? &,1,logstream.operator ? &,ANY logstream.operator ? & (),main\cpp\logstream.cpp,"logstream::operator std::basic_ostream<char>& ()
{
	if (stream == 0)
	{
		stream = new std::basic_stringstream<Ch>();
		refresh_stream_state();
	}

	return *stream;
}",270.0,279.0,1.0,1.0,10.0,4,4,4,2,0,0,2,2,0,0,,0,0,0,0,0,ANY
1659,34589,log,1,logstream.log,"void logstream.log (LoggerPtr,LevelPtr,ANY)",main\cpp\logstream.cpp,"void logstream::log(LoggerPtr& log,
	const LevelPtr& lev,
	const LOG4CXX_NS::spi::LocationInfo& loc)
{
	if (stream != 0)
	{
		std::basic_string<Ch> msg = stream->str();

		if (!msg.empty())
		{
			log->log(lev, msg, loc);
		}
	}
}",281.0,294.0,1.0,1.0,14.0,9,7,10,7,0,0,3,4,0,0,,0,0,6,3,3,void
1660,34627,erase,1,logstream.erase,void logstream.erase (),main\cpp\logstream.cpp,"void logstream::erase()
{
	if (stream != 0)
	{
		std::basic_string<Ch> emptyStr;
		stream->str(emptyStr);
	}
}",297.0,304.0,1.0,1.0,8.0,5,5,6,4,0,0,2,2,0,0,,0,0,0,0,0,void
1661,34648,get_stream_state,1,logstream.get_stream_state,"void logstream.get_stream_state (ANY,ANY,int,bool)",main\cpp\logstream.cpp,"void logstream::get_stream_state(std::ios_base& base,
	std::ios_base& mask,
	int& fill,
	bool& fillSet) const
{
	if (stream != 0)
	{
		std::ios_base::fmtflags flags = stream->flags();
		base.flags(flags);
		mask.flags(flags);
		int width = (int)stream->width();
		base.width(width);
		mask.width(width);
		int precision = (int)stream->precision();
		base.precision(precision);
		mask.precision(precision);
		fill = stream->fill();
		fillSet = true;
	}
}",307.0,326.0,1.0,1.0,20.0,18,5,22,8,0,0,2,2,0,0,,0,0,8,4,4,void
1662,34725,refresh_stream_state,1,logstream.refresh_stream_state,void logstream.refresh_stream_state (),main\cpp\logstream.cpp,"void logstream::refresh_stream_state()
{
	if (stream != 0)
	{
		int ch;

		if (logstream_base::set_stream_state(*stream, ch))
		{
			stream->fill(ch);
		}
	}
}",328.0,339.0,1.0,1.0,12.0,4,4,6,3,0,1,3,4,1,1,,0,1,0,0,0,void
1663,34762,ManualTriggeringPolicy,1,ManualTriggeringPolicy.ManualTriggeringPolicy,ANY ManualTriggeringPolicy.ManualTriggeringPolicy (),main\cpp\manualtriggeringpolicy.cpp,"ManualTriggeringPolicy::ManualTriggeringPolicy()
{
}",28.0,30.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1664,34766,isTriggeringEvent,1,ManualTriggeringPolicy.isTriggeringEvent,"bool ManualTriggeringPolicy.isTriggeringEvent (Appender*,ANY,LogString,size_t)",main\cpp\manualtriggeringpolicy.cpp,"bool ManualTriggeringPolicy::isTriggeringEvent(Appender* /* appender */,
	const LOG4CXX_NS::spi::LoggingEventPtr& /* event */,
	const LogString& /* file */,
	size_t /* fileLength */ )
{
	return false;
}",32.0,38.0,1.0,1.0,7.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,bool
1665,34776,activateOptions,1,ManualTriggeringPolicy.activateOptions,void ManualTriggeringPolicy.activateOptions (Pool),main\cpp\manualtriggeringpolicy.cpp,"void ManualTriggeringPolicy::activateOptions(Pool& /* p */ )
{
}",40.0,42.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
1666,34781,setOption,1,ManualTriggeringPolicy.setOption,"void ManualTriggeringPolicy.setOption (LogString,LogString)",main\cpp\manualtriggeringpolicy.cpp,"void ManualTriggeringPolicy::setOption(const LogString& /* option */, const LogString& /* value */ )
{
}",44.0,46.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
1667,34805,MapFilterPrivate,1,MapFilterPrivate.MapFilterPrivate,ANY MapFilterPrivate.MapFilterPrivate (),main\cpp\mapfilter.cpp,"MapFilterPrivate() : FilterPrivate(),
		acceptOnMatch(true), mustMatchAll(false) {}",34.0,35.0,2.0,45.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1668,34814,MapFilter,1,MapFilter.MapFilter,ANY MapFilter.MapFilter (),main\cpp\mapfilter.cpp,"MapFilter::MapFilter() : Filter(std::make_unique<MapFilterPrivate>())
{

}",44.0,47.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1669,34818,~MapFilter,1,MapFilter.~MapFilter,ANY MapFilter.~MapFilter (),main\cpp\mapfilter.cpp,MapFilter::~MapFilter() {},49.0,49.0,1.0,26.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1670,34822,setOption,1,MapFilter.setOption,"void MapFilter.setOption (LogString,LogString)",main\cpp\mapfilter.cpp,"void MapFilter::setOption(  const LogString& option,
	const LogString& value)
{
	if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""ACCEPTONMATCH""), LOG4CXX_STR(""acceptonmatch"")))
	{
		priv->acceptOnMatch = OptionConverter::toBoolean(value, priv->acceptOnMatch);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""OPERATOR""), LOG4CXX_STR(""operator"")))
	{
		priv->mustMatchAll = StringHelper::equalsIgnoreCase(value, LOG4CXX_STR(""AND""), LOG4CXX_STR(""and"")) ? true : false;
	}
	else if (!option.empty() && !value.empty())
	{
		priv->keyVals[option] = value;
	}
}",51.0,66.0,1.0,2.0,16.0,9,4,6,5,0,2,2,2,1,2,,0,2,4,2,2,void
1671,34930,decide,1,MapFilter.decide,FilterDecision MapFilter.decide (ANY),main\cpp\mapfilter.cpp,"Filter::FilterDecision MapFilter::decide(
	const LOG4CXX_NS::spi::LoggingEventPtr& event) const
{
	if (priv->keyVals.empty())
	{
		return Filter::NEUTRAL;
	}

	bool matched = true;

	for (KeyVals::const_iterator it = priv->keyVals.begin(); it != priv->keyVals.end(); ++it)
	{
		LogString curval;
		event->getMDC(it->first, curval);

		if (curval.empty() || curval != it->second)
		{
			matched = false;
		}
		else
		{
			matched = true;
		}

		if (priv->mustMatchAll != matched)
		{
			break;
		}
	}

	if (priv->acceptOnMatch)
	{
		return matched ? Filter::ACCEPT : Filter::NEUTRAL;
	}
	else
	{
		return matched ? Filter::DENY : Filter::NEUTRAL;
	}
}",68.0,106.0,1.0,5.0,39.0,33,7,20,6,0,0,7,8,0,0,,0,0,2,1,1,FilterDecision
1672,35070,setKeyValue,1,MapFilter.setKeyValue,"void MapFilter.setKeyValue (LogString,LogString)",main\cpp\mapfilter.cpp,"void MapFilter::setKeyValue(const LogString& strKey, const LogString& strValue)
{
	priv->keyVals[strKey] = strValue;
}",108.0,111.0,1.0,1.0,4.0,5,5,3,3,0,0,1,1,0,0,,0,0,4,2,2,void
1673,35090,getValue,1,MapFilter.getValue,LogString MapFilter.getValue (LogString),main\cpp\mapfilter.cpp,"const LogString& MapFilter::getValue(const LogString& strKey) const
{
	static const WideLife<LogString> empty;
	const KeyVals::const_iterator   it(priv->keyVals.find(strKey));

	return (it != priv->keyVals.end() ? it->second : empty.value());
}",113.0,119.0,1.0,36.0,7.0,12,5,6,4,0,0,1,1,0,0,,0,0,2,1,1,LogString
1674,35136,setAcceptOnMatch,1,MapFilter.setAcceptOnMatch,void MapFilter.setAcceptOnMatch (bool),main\cpp\mapfilter.cpp,"void MapFilter::setAcceptOnMatch(bool acceptOnMatch1)
{
	priv->acceptOnMatch = acceptOnMatch1;
}",121.0,124.0,1.0,1.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1675,35153,getAcceptOnMatch,1,MapFilter.getAcceptOnMatch,bool MapFilter.getAcceptOnMatch (),main\cpp\mapfilter.cpp,"bool MapFilter::getAcceptOnMatch() const
{
	return priv->acceptOnMatch;
}",126.0,129.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,bool
1676,35168,getMustMatchAll,1,MapFilter.getMustMatchAll,bool MapFilter.getMustMatchAll (),main\cpp\mapfilter.cpp,"bool MapFilter::getMustMatchAll() const
{
	return priv->mustMatchAll;
}",131.0,134.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,bool
1677,35183,setMustMatchAll,1,MapFilter.setMustMatchAll,void MapFilter.setMustMatchAll (bool),main\cpp\mapfilter.cpp,"void MapFilter::setMustMatchAll(bool mustMatchAll1)
{
	priv->mustMatchAll = mustMatchAll1;
}",136.0,139.0,1.0,1.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1678,35213,MDC,1,MDC.MDC,"ANY MDC.MDC (ANY,ANY)",main\cpp\mdc.cpp,"MDC::MDC(const std::string& key1, const std::string& value) : key()
{
	Transcoder::decode(key1, key);
	LOG4CXX_DECODE_CHAR(v, value);
	putLS(key, v);
}",30.0,35.0,1.0,1.0,6.0,1,1,7,5,0,1,1,1,0,1,,0,0,4,2,2,ANY
1679,35231,~MDC,1,MDC.~MDC,ANY MDC.~MDC (),main\cpp\mdc.cpp,"MDC::~MDC()
{
	LogString prevVal;
	remove(key, prevVal);
}",37.0,41.0,1.0,1.0,5.0,0,0,2,2,0,0,1,1,0,0,,0,0,0,0,0,ANY
1680,35239,putLS,1,MDC.putLS,"void MDC.putLS (LogString,LogString)",main\cpp\mdc.cpp,"void MDC::putLS(const LogString& key, const LogString& value)
{
	ThreadSpecificData::put(key, value);
}",43.0,46.0,1.0,1.0,4.0,1,1,3,3,0,1,1,1,0,1,,0,0,4,2,2,void
1681,35251,put,1,MDC.put,"void MDC.put (ANY,ANY)",main\cpp\mdc.cpp,"void MDC::put(const std::string& key, const std::string& value)
{
	LOG4CXX_DECODE_CHAR(lkey, key);
	LOG4CXX_DECODE_CHAR(lvalue, value);
	putLS(lkey, lvalue);
}",48.0,53.0,1.0,1.0,6.0,0,0,6,4,0,0,1,1,0,0,,0,0,4,2,2,void
1682,35266,get,1,MDC.get,"bool MDC.get (LogString,LogString)",main\cpp\mdc.cpp,"std::string MDC::get(const std::string& key)
{
	LOG4CXX_DECODE_CHAR(lkey, key);
	LogString lvalue;

	if (get(lkey, lvalue))
	{
		LOG4CXX_ENCODE_CHAR(value, lvalue);
		return value;
	}

	return std::string();
}",77.0,89.0,1.0,1.0,13.0,12,4,13,6,1,1,3,4,0,0,,0,1,2,1,1,string
1683,35346,remove,1,MDC.remove,"bool MDC.remove (LogString,LogString)",main\cpp\mdc.cpp,"std::string MDC::remove(const std::string& key)
{
	LOG4CXX_DECODE_CHAR(lkey, key);
	LogString lvalue;

	if (remove(lkey, lvalue))
	{
		LOG4CXX_ENCODE_CHAR(value, lvalue);
		return value;
	}

	return std::string();
}",112.0,124.0,1.0,1.0,13.0,13,4,14,6,0,1,3,4,0,0,,0,1,2,1,1,string
1684,35428,clear,1,MDC.clear,void MDC.clear (),main\cpp\mdc.cpp,"void MDC::clear()
{
	ThreadSpecificData* data = ThreadSpecificData::getCurrentData();

	if (data != 0)
	{
		Map& map = data->getMap();
		map.erase(map.begin(), map.end());
		data->recycle();
	}
}",127.0,137.0,1.0,1.0,11.0,9,4,9,3,0,1,2,2,0,0,,0,1,0,0,0,void
1685,35482,MDCPatternConverter,1,MDCPatternConverter.MDCPatternConverter,"ANY MDCPatternConverter.MDCPatternConverter (LogString,LogString,ANY)",main\cpp\mdcpatternconverter.cpp,"MDCPatternConverter::MDCPatternConverter
	( const LogString&              name
	, const LogString&              style
	, const std::vector<LogString>& options
	)
	: LoggingEventPatternConverter(std::make_unique<PatternConverter::PatternConverterPrivate>(name, style))
{
}",28.0,35.0,1.0,1.0,8.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ANY
1686,35489,newInstance,1,MDCPatternConverter.newInstance,PatternConverterPtr MDCPatternConverter.newInstance (ANY),main\cpp\mdcpatternconverter.cpp,"PatternConverterPtr MDCPatternConverter::newInstance(
	const std::vector<LogString>& options)
{
	if (options.empty())
	{
		static helpers::WideLife<PatternConverterPtr> def = std::make_shared<MDCPatternConverter>();
		return def;
	}
	return std::make_shared<MDCPatternConverter>(LogString(), options.front());
}",37.0,46.0,1.0,1.0,10.0,9,6,7,4,0,0,2,2,0,0,,0,0,2,1,1,PatternConverterPtr
1687,35523,format,1,MDCPatternConverter.format,"void MDCPatternConverter.format (ANY,LogString,ANY)",main\cpp\mdcpatternconverter.cpp,"void MDCPatternConverter::format
	( const spi::LoggingEventPtr& event
	, LogString&                  toAppendTo
	, helpers::Pool&           /* p */
	) const
{
	size_t startIndex = toAppendTo.size();
	if (m_priv->name.empty()) // Full MDC required?
	{
		bool first = true;
		for (auto key : event->getMDCKeySet())
		{
			toAppendTo.append(first ? LOG4CXX_STR(""{"") : LOG4CXX_STR("",""));
			JSONLayout::appendItem(key, toAppendTo);
			toAppendTo.append(LOG4CXX_STR("":""));
			LogString value;
			event->getMDC(key, value);
			JSONLayout::appendItem(value, toAppendTo);
			first = false;
		}
		if (!first)
			toAppendTo.append(LOG4CXX_STR(""}""));
	}
	else
		event->getMDC(m_priv->name, toAppendTo);
	if (!m_priv->style.empty()) // In a quoted context?
	{
		auto quote = m_priv->style.front();
		size_t endIndex;
		while ((endIndex = toAppendTo.find(quote, startIndex)) != toAppendTo.npos)
		{
			toAppendTo.insert(endIndex + 1, 1, quote);
			startIndex = endIndex + 2;
		}
	}
}",48.0,83.0,1.0,1.0,36.0,29,7,33,10,0,2,6,9,0,2,,0,0,6,3,3,void
1688,35686,StringOrStream,1,anonymous_namespace_2.StringOrStream.StringOrStream,ANY anonymous_namespace_2.StringOrStream.StringOrStream (),main\cpp\messagebuffer.cpp,"StringOrStream()
		: stream(nullptr)
		{}",40.0,42.0,2.0,4.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1689,35690,~StringOrStream,1,anonymous_namespace_3.StringOrStream.~StringOrStream,ANY anonymous_namespace_3.StringOrStream.~StringOrStream (),main\cpp\messagebuffer.cpp,"~StringOrStream()
	{
#if !LOG4CXX_HAS_THREAD_LOCAL
		delete stream;
#endif
	}",43.0,48.0,2.0,2.0,6.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,ANY
1690,35696,StreamFromBuf,1,anonymous_namespace_4.StringOrStream.StreamFromBuf,basic_ostringstream<T> anonymous_namespace_4.StringOrStream.StreamFromBuf (),main\cpp\messagebuffer.cpp,"std::basic_ostringstream<T>& StreamFromBuf()
	{
		if (!this->stream)
		{
#if LOG4CXX_HAS_THREAD_LOCAL
			const static std::basic_ostringstream<T> initialState;
			thread_local static std::basic_ostringstream<T> sStream;
			this->stream = &sStream;
			this->stream->clear();
			this->stream->precision(initialState.precision());
			this->stream->width(initialState.width());
			this->stream->setf(initialState.flags(), ~initialState.flags());
			this->stream->fill(initialState.fill());
#else
			this->stream = new std::basic_ostringstream<T>();
#endif
			auto index = this->buf.size();
			this->stream->str(std::move(this->buf));
			this->stream->seekp(index);
		}
		return *this->stream;
	}",52.0,73.0,2.0,2.0,22.0,16,6,4,3,0,7,2,2,1,0,,0,7,0,0,0,basic_ostringstream<T>
1691,35746,BufFromStream,1,anonymous_namespace_5.StringOrStream.BufFromStream,basic_string<T> anonymous_namespace_5.StringOrStream.BufFromStream (),main\cpp\messagebuffer.cpp,"std::basic_string<T>& BufFromStream()
	{
		if (this->stream)
		{
			this->buf = std::move(*this->stream).str();
			this->stream->seekp(0);
			this->stream->str(std::basic_string<T>());
			this->stream->clear();
		}
		return this->buf;
	}",77.0,87.0,2.0,2.0,11.0,15,4,2,1,0,7,2,2,1,0,,0,7,0,0,0,basic_string<T>
1692,35798,CharMessageBuffer,1,CharMessageBuffer.CharMessageBuffer,ANY CharMessageBuffer.CharMessageBuffer (),main\cpp\messagebuffer.cpp,"CharMessageBuffer::CharMessageBuffer() : m_priv(std::make_unique<CharMessageBufferPrivate>())
{
}",93.0,95.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1693,35802,~CharMessageBuffer,1,CharMessageBuffer.~CharMessageBuffer,ANY CharMessageBuffer.~CharMessageBuffer (),main\cpp\messagebuffer.cpp,"CharMessageBuffer::~CharMessageBuffer()
{
}",97.0,99.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1694,35806,operator <<,1,CharMessageBuffer.operator <<,CharMessageBuffer CharMessageBuffer.operator << (ANY),main\cpp\messagebuffer.cpp,"std::ostream& CharMessageBuffer::operator<<(void* val)
{
	return ((std::ostream&) * this).operator << (val);
}",228.0,231.0,1.0,1.0,4.0,5,4,3,2,0,0,2,2,0,0,,0,0,2,1,1,ostream
1695,35929,operator ? &,1,CharMessageBuffer.operator ? &,ANY CharMessageBuffer.operator ? & (),main\cpp\messagebuffer.cpp,"CharMessageBuffer::operator std::basic_ostream<char>& ()
{
	return m_priv->StreamFromBuf();
}",155.0,158.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,ANY
1696,35938,extract_str,1,CharMessageBuffer.extract_str,basic_string<char> CharMessageBuffer.extract_str (ANY),main\cpp\messagebuffer.cpp,"std::basic_string<char> CharMessageBuffer::extract_str(CharMessageBuffer&)
{
	return std::move(m_priv->buf);
}",165.0,168.0,1.0,1.0,4.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,basic_string<char>
1697,35965,str,1,CharMessageBuffer.str,basic_string<char> CharMessageBuffer.str (ANY),main\cpp\messagebuffer.cpp,"const std::basic_string<char>& CharMessageBuffer::str(CharMessageBuffer&)
{
	return m_priv->buf;
}",175.0,178.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,2,1,1,basic_string<char>
1698,35984,hasStream,1,CharMessageBuffer.hasStream,bool CharMessageBuffer.hasStream (),main\cpp\messagebuffer.cpp,"bool CharMessageBuffer::hasStream() const
{
	return (m_priv->stream != 0);
}",180.0,183.0,1.0,1.0,4.0,2,2,1,1,0,0,1,1,0,0,,0,0,0,0,0,bool
1699,36168,QuotedMessagePatternConverter,1,anonymous_namespace_2.QuotedMessagePatternConverter.QuotedMessagePatternConverter,ANY anonymous_namespace_2.QuotedMessagePatternConverter.QuotedMessagePatternConverter (logchar),main\cpp\messagepatternconverter.cpp,"QuotedMessagePatternConverter(logchar quote)
			: LoggingEventPatternConverter(LOG4CXX_STR(""Message""), LOG4CXX_STR(""quoted""))
			, m_quote(quote)
			{}",37.0,40.0,3.0,5.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1700,36173,format,1,anonymous_namespace_3.QuotedMessagePatternConverter.format,"void anonymous_namespace_3.QuotedMessagePatternConverter.format (ANY,LogString,ANY)",main\cpp\messagepatternconverter.cpp,"void format
			( const spi::LoggingEventPtr& event
			, LogString&                  toAppendTo
			, helpers::Pool&              p
			) const override
		{
			auto& input = event->getRenderedMessage();
			size_t endIndex, startIndex = 0;
			while ((endIndex = input.find(m_quote, startIndex)) != input.npos)
			{
				toAppendTo.append(input.substr(startIndex, endIndex - startIndex + 1));
				toAppendTo += m_quote;
				startIndex = endIndex + 1;
			}
			toAppendTo.append(input.substr(startIndex));
		}",45.0,60.0,3.0,3.0,16.0,16,7,20,6,0,2,2,2,1,0,,0,2,6,3,3,void
1701,36237,MessagePatternConverter,1,MessagePatternConverter.MessagePatternConverter,ANY MessagePatternConverter.MessagePatternConverter (),main\cpp\messagepatternconverter.cpp,"MessagePatternConverter::MessagePatternConverter()
	: LoggingEventPatternConverter(LOG4CXX_STR(""Message"")
	, LOG4CXX_STR(""message""))
{
}",64.0,68.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1702,36241,newInstance,1,MessagePatternConverter.newInstance,PatternConverterPtr MessagePatternConverter.newInstance (ANY),main\cpp\messagepatternconverter.cpp,"PatternConverterPtr MessagePatternConverter::newInstance(
	const std::vector<LogString>& options)
{
	if (options.empty() || options.front().empty())
	{
		static helpers::WideLife<PatternConverterPtr> def = std::make_shared<MessagePatternConverter>();
		return def;
	}
	return std::make_shared<QuotedMessagePatternConverter>(options.front().front());
}",70.0,79.0,1.0,1.0,10.0,11,5,8,4,0,0,2,2,0,0,,0,0,2,1,1,PatternConverterPtr
1703,36283,format,1,MessagePatternConverter.format,"void MessagePatternConverter.format (ANY,LogString,ANY)",main\cpp\messagepatternconverter.cpp,"void MessagePatternConverter::format
	( const spi::LoggingEventPtr& event
	, LogString&                  toAppendTo
	, helpers::Pool&           /* p */
	) const
{
	toAppendTo.append(event->getRenderedMessage());
}",81.0,88.0,1.0,1.0,8.0,2,2,2,2,0,0,1,1,0,0,,0,0,6,3,3,void
1704,36313,MethodLocationPatternConverter,1,MethodLocationPatternConverter.MethodLocationPatternConverter,ANY MethodLocationPatternConverter.MethodLocationPatternConverter (),main\cpp\methodlocationpatternconverter.cpp,"MethodLocationPatternConverter::MethodLocationPatternConverter() :
	LoggingEventPatternConverter(LOG4CXX_STR(""Method""),
		LOG4CXX_STR(""method""))
{
}",30.0,34.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1705,36317,newInstance,1,MethodLocationPatternConverter.newInstance,PatternConverterPtr MethodLocationPatternConverter.newInstance (ANY),main\cpp\methodlocationpatternconverter.cpp,"PatternConverterPtr MethodLocationPatternConverter::newInstance(
	const std::vector<LogString>& /* options */ )
{
	static WideLife<PatternConverterPtr> def = std::make_shared<MethodLocationPatternConverter>();
	return def;
}",36.0,41.0,1.0,1.0,6.0,2,2,3,2,0,0,1,1,0,0,,0,0,2,1,1,PatternConverterPtr
1706,36331,format,1,MethodLocationPatternConverter.format,"void MethodLocationPatternConverter.format (LoggingEventPtr,LogString,Pool)",main\cpp\methodlocationpatternconverter.cpp,"void MethodLocationPatternConverter::format(
	const LoggingEventPtr& event,
	LogString& toAppendTo,
	Pool& /* p */ ) const
{
	append(toAppendTo, event->getLocationInformation().getMethodName());
}",43.0,49.0,1.0,1.0,7.0,2,2,2,2,0,0,1,1,0,0,,0,0,6,3,3,void
1707,36387,MultiprocessRollingFileAppenderPriv,1,MultiprocessRollingFileAppenderPriv.MultiprocessRollingFileAppenderPriv,ANY MultiprocessRollingFileAppenderPriv.MultiprocessRollingFileAppenderPriv (),main\cpp\multiprocessrollingfileappender.cpp,"MultiprocessRollingFileAppenderPriv() :
		FileAppenderPriv(),
		fileLength(0) {}",47.0,49.0,2.0,18.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1708,36397,MultiprocessRollingFileAppender,1,MultiprocessRollingFileAppender.MultiprocessRollingFileAppender,ANY MultiprocessRollingFileAppender.MultiprocessRollingFileAppender (),main\cpp\multiprocessrollingfileappender.cpp,"MultiprocessRollingFileAppender::MultiprocessRollingFileAppender() :
	FileAppender (std::make_unique<MultiprocessRollingFileAppenderPriv>())
{
}",80.0,83.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1709,36401,activateOptions,1,MultiprocessRollingFileAppender.activateOptions,void MultiprocessRollingFileAppender.activateOptions (Pool),main\cpp\multiprocessrollingfileappender.cpp,"void MultiprocessRollingFileAppender::activateOptions(Pool& p)
{
	if (_priv->rollingPolicy == NULL)
	{
		auto fwrp = std::make_shared<FixedWindowRollingPolicy>();
		fwrp->setFileNamePattern(getFile() + LOG4CXX_STR("".%i""));
		_priv->rollingPolicy = fwrp;
	}

	//
	//  if no explicit triggering policy and rolling policy is both.
	//
	if (_priv->triggeringPolicy == NULL)
	{
		TriggeringPolicyPtr trig = LOG4CXX_NS::cast<TriggeringPolicy>(_priv->rollingPolicy);

		if (trig != NULL)
		{
			_priv->triggeringPolicy = trig;
		}
	}

	if (_priv->triggeringPolicy == NULL)
	{
		_priv->triggeringPolicy = std::make_shared<ManualTriggeringPolicy>();
	}

	{
		std::lock_guard<std::recursive_mutex> lock(_priv->mutex);
		_priv->triggeringPolicy->activateOptions(p);
		_priv->rollingPolicy->activateOptions(p);

		try
		{
			RolloverDescriptionPtr rollover1 =
				_priv->rollingPolicy->initialize(getFile(), getAppend(), p);

			if (rollover1 != NULL)
			{
				ActionPtr syncAction(rollover1->getSynchronous()...",88.0,169.0,1.0,5.0,82.0,83,9,54,14,0,2,10,17,0,2,,0,0,2,1,1,void
1710,36716,releaseFileLock,1,MultiprocessRollingFileAppender.releaseFileLock,void MultiprocessRollingFileAppender.releaseFileLock (apr_file_t*),main\cpp\multiprocessrollingfileappender.cpp,"void MultiprocessRollingFileAppender::releaseFileLock(apr_file_t* lock_file)
{
	if (lock_file)
	{
		apr_status_t stat = apr_file_unlock(lock_file);

		if (stat != APR_SUCCESS)
		{
			LogLog::warn(LOG4CXX_STR(""flock: unlock failed""));
		}

		apr_file_close(lock_file);
		lock_file = NULL;
	}
}",171.0,185.0,1.0,1.0,15.0,4,3,9,5,0,1,3,4,0,1,,0,0,2,1,1,void
1711,36745,rollover,1,MultiprocessRollingFileAppender.rollover,bool MultiprocessRollingFileAppender.rollover (Pool),main\cpp\multiprocessrollingfileappender.cpp,"bool MultiprocessRollingFileAppender::rollover(Pool& p)
{
	std::lock_guard<std::recursive_mutex> lock(_priv->mutex);
	return rolloverInternal(p);
}",202.0,206.0,1.0,44.0,5.0,7,5,4,3,0,0,1,1,0,0,,0,0,2,1,1,bool
1712,36772,rolloverInternal,1,MultiprocessRollingFileAppender.rolloverInternal,bool MultiprocessRollingFileAppender.rolloverInternal (Pool),main\cpp\multiprocessrollingfileappender.cpp,"bool MultiprocessRollingFileAppender::rolloverInternal(Pool& p)
{
	//
	//   can't roll without a policy
	//
	if (_priv->rollingPolicy != NULL)
	{

		{
			LogString fileName(getFile());
			RollingPolicyBasePtr basePolicy = LOG4CXX_NS::cast<RollingPolicyBase>(_priv->rollingPolicy);
			apr_time_t n = apr_time_now();
			ObjectPtr obj = std::make_shared<Date>(n);
			LogString fileNamePattern;

			if (basePolicy)
			{
				if (basePolicy->getPatternConverterList().size())
				{
					(*(basePolicy->getPatternConverterList().begin()))->format(obj, fileNamePattern, p);
					fileName = std::string(fileNamePattern);
				}
			}

			bool bAlreadyRolled = true;
			char szDirName[MAX_FILE_LEN] = {'\0'};
			char szBaseName[MAX_FILE_LEN] = {'\0'};
			char szUid[MAX_FILE_LEN] = {'\0'};
			memcpy(szDirName, fileName.c_str(), fileName.size() > MAX_FILE_LEN ? MAX_FILE_LEN : fileName.size());
			memcpy(szBaseName, fileName.c_str(), fileName.size() > MAX_FILE_LEN ? MAX_FILE_LEN : fileName.size());
			apr_u...",208.0,455.0,1.0,5.0,248.0,154,19,147,47,0,6,19,69,0,6,,0,0,2,1,1,bool
1713,37642,reopenLatestFile,1,MultiprocessRollingFileAppender.reopenLatestFile,void MultiprocessRollingFileAppender.reopenLatestFile (Pool),main\cpp\multiprocessrollingfileappender.cpp,"void MultiprocessRollingFileAppender::reopenLatestFile(Pool& p)
{
	closeWriter();
	OutputStreamPtr os = std::make_shared<FileOutputStream>(getFile(), true);
	WriterPtr newWriter(createWriter(os));
	setFile(getFile());
	setWriter(newWriter);
	_priv->fileLength = File().setPath(getFile()).length(p);
	writeHeader(p);
}",460.0,469.0,1.0,1.0,10.0,12,8,8,6,0,0,1,1,0,0,,0,0,2,1,1,void
1714,37690,subAppend,1,MultiprocessRollingFileAppender.subAppend,"void MultiprocessRollingFileAppender.subAppend (LoggingEventPtr,Pool)",main\cpp\multiprocessrollingfileappender.cpp,"void MultiprocessRollingFileAppender::subAppend(const LoggingEventPtr& event, Pool& p)
{
	// The rollover check must precede actual writing. This is the
	// only correct behavior for time driven triggers.
	if (
		_priv->triggeringPolicy->isTriggeringEvent(
			this, event, getFile(), getFileLength()))
	{
		//
		//   wrap rollover request in try block since
		//    rollover may fail in case read access to directory
		//    is not provided.  However appender should still be in good
		//     condition and the append should still happen.
		try
		{
			_priv->_event = event;
			rolloverInternal(p);
		}
		catch (std::exception& ex)
		{
			LogLog::warn(LOG4CXX_STR(""Exception during rollover attempt.""));
			LogString exmsg;
			LOG4CXX_NS::helpers::Transcoder::decode(ex.what(), exmsg);
			_priv->errorHandler->error(exmsg);
		}
	}

	//do re-check before every write
	//
	apr_finfo_t finfo1, finfo2;
	apr_status_t st1, st2;
	const WriterPtr writer = getWriter();
	const FileOutputStreamPtr fos = LO...",475.0,537.0,1.0,2.0,63.0,52,13,53,23,0,4,7,8,0,4,,0,0,4,2,2,void
1715,37891,getRollingPolicy,1,MultiprocessRollingFileAppender.getRollingPolicy,RollingPolicyPtr MultiprocessRollingFileAppender.getRollingPolicy (),main\cpp\multiprocessrollingfileappender.cpp,"RollingPolicyPtr MultiprocessRollingFileAppender::getRollingPolicy() const
{
	return _priv->rollingPolicy;
}",543.0,546.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,RollingPolicyPtr
1716,37906,getTriggeringPolicy,1,MultiprocessRollingFileAppender.getTriggeringPolicy,TriggeringPolicyPtr MultiprocessRollingFileAppender.getTriggeringPolicy (),main\cpp\multiprocessrollingfileappender.cpp,"TriggeringPolicyPtr MultiprocessRollingFileAppender::getTriggeringPolicy() const
{
	return _priv->triggeringPolicy;
}",552.0,555.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,TriggeringPolicyPtr
1717,37921,setRollingPolicy,1,MultiprocessRollingFileAppender.setRollingPolicy,void MultiprocessRollingFileAppender.setRollingPolicy (RollingPolicyPtr),main\cpp\multiprocessrollingfileappender.cpp,"void MultiprocessRollingFileAppender::setRollingPolicy(const RollingPolicyPtr& policy)
{
	_priv->rollingPolicy = policy;

	TimeBasedRollingPolicyPtr timeBased = LOG4CXX_NS::cast<TimeBasedRollingPolicy>(policy);
	if( timeBased ){
		timeBased->setMultiprocess(true);
	}
}",561.0,569.0,1.0,1.0,9.0,9,6,8,5,0,0,2,2,0,0,,0,0,2,1,1,void
1718,37956,setTriggeringPolicy,1,MultiprocessRollingFileAppender.setTriggeringPolicy,void MultiprocessRollingFileAppender.setTriggeringPolicy (TriggeringPolicyPtr),main\cpp\multiprocessrollingfileappender.cpp,"void MultiprocessRollingFileAppender::setTriggeringPolicy(const TriggeringPolicyPtr& policy)
{
	_priv->triggeringPolicy = policy;
}",575.0,578.0,1.0,1.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1719,37973,close,1,MultiprocessRollingFileAppender.close,void MultiprocessRollingFileAppender.close (),main\cpp\multiprocessrollingfileappender.cpp,"void MultiprocessRollingFileAppender::close()
{
	FileAppender::close();
}",583.0,586.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,void
1720,37986,CountingOutputStream,1,LOG4CXX_NS.rolling.CountingOutputStream.CountingOutputStream,"ANY LOG4CXX_NS.rolling.CountingOutputStream.CountingOutputStream (OutputStreamPtr,MultiprocessRollingFileAppender*)",main\cpp\rollingfileappender.cpp,"CountingOutputStream(
			OutputStreamPtr& os1, RollingFileAppender* rfa1) :
			os(os1), rfa(rfa1)
		{
		}",551.0,555.0,3.0,3.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ANY
1721,37992,close,1,LOG4CXX_NS.rolling.CountingOutputStream.close,void LOG4CXX_NS.rolling.CountingOutputStream.close (Pool),main\cpp\rollingfileappender.cpp,"void close(Pool& p)
		{
			os->close(p);
			rfa = 0;
		}",560.0,564.0,3.0,3.0,5.0,2,2,3,3,0,2,1,1,0,0,,0,2,2,1,1,void
1722,38005,flush,1,LOG4CXX_NS.rolling.CountingOutputStream.flush,void LOG4CXX_NS.rolling.CountingOutputStream.flush (Pool),main\cpp\rollingfileappender.cpp,"void flush(Pool& p)
		{
			os->flush(p);
		}",569.0,572.0,3.0,3.0,4.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
1723,38015,write,1,LOG4CXX_NS.rolling.CountingOutputStream.write,"void LOG4CXX_NS.rolling.CountingOutputStream.write (ByteBuffer,Pool)",main\cpp\rollingfileappender.cpp,"void write(ByteBuffer& buf, Pool& p)
		{
			os->write(buf, p);

			if (rfa != 0)
			{
				rfa->incrementFileLength(buf.limit());
			}
		}",577.0,585.0,3.0,3.0,9.0,6,3,7,4,0,4,2,2,1,0,,0,4,4,2,2,void
1724,38048,getFileOutPutStreamPtr,1,LOG4CXX_NS.rolling.CountingOutputStream.getFileOutPutStreamPtr,OutputStream LOG4CXX_NS.rolling.CountingOutputStream.getFileOutPutStreamPtr (),main\cpp\multiprocessrollingfileappender.cpp,"OutputStream& getFileOutPutStreamPtr()
		{
			return *os;
		}",651.0,654.0,3.0,3.0,4.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,OutputStream
1725,38055,createWriter,1,MultiprocessRollingFileAppender.createWriter,WriterPtr MultiprocessRollingFileAppender.createWriter (OutputStreamPtr),main\cpp\multiprocessrollingfileappender.cpp,"WriterPtr MultiprocessRollingFileAppender::createWriter(OutputStreamPtr& os)
{
	OutputStreamPtr cos = std::make_shared<CountingOutputStream>(os, this);
	return FileAppender::createWriter(cos);
}",668.0,672.0,1.0,1.0,5.0,7,6,6,5,0,0,1,1,0,0,,0,0,2,1,1,WriterPtr
1726,38079,getFileLength,1,MultiprocessRollingFileAppender.getFileLength,size_t MultiprocessRollingFileAppender.getFileLength (),main\cpp\multiprocessrollingfileappender.cpp,"size_t MultiprocessRollingFileAppender::getFileLength() const
{
	return _priv->fileLength;
}",678.0,681.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,size_t
1727,38094,setFileLength,1,MultiprocessRollingFileAppender.setFileLength,void MultiprocessRollingFileAppender.setFileLength (size_t),main\cpp\multiprocessrollingfileappender.cpp,"void MultiprocessRollingFileAppender::setFileLength(size_t length)
{
	_priv->fileLength = length;
}",683.0,686.0,1.0,1.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1728,38111,incrementFileLength,1,MultiprocessRollingFileAppender.incrementFileLength,void MultiprocessRollingFileAppender.incrementFileLength (size_t),main\cpp\multiprocessrollingfileappender.cpp,"void MultiprocessRollingFileAppender::incrementFileLength(size_t increment)
{
	_priv->fileLength += increment;
}",692.0,695.0,1.0,1.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1729,38145,NameAbbreviator,1,NameAbbreviator.NameAbbreviator,ANY NameAbbreviator.NameAbbreviator (),main\cpp\nameabbreviator.cpp,"NameAbbreviator::NameAbbreviator()
{
}",30.0,32.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1730,38149,~NameAbbreviator,1,NameAbbreviator.~NameAbbreviator,ANY NameAbbreviator.~NameAbbreviator (),main\cpp\nameabbreviator.cpp,"NameAbbreviator::~NameAbbreviator()
{
}",34.0,36.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1731,38159,abbreviate,1,LOG4CXX_NS.pattern.NOPAbbreviator.abbreviate,"void LOG4CXX_NS.pattern.NOPAbbreviator.abbreviate (ANY,LogString)",main\cpp\nameabbreviator.cpp,"void abbreviate(LogString::size_type /* nameStart */, LogString& /* buf */) const override
		{
		}",64.0,66.0,3.0,3.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
1732,38170,abbreviate,1,LOG4CXX_NS.pattern.MaxElementAbbreviator.abbreviate,"void LOG4CXX_NS.pattern.MaxElementAbbreviator.abbreviate (ANY,LogString)",main\cpp\nameabbreviator.cpp,"void abbreviate(LogString::size_type nameStart, LogString& buf) const override
		{
			// We substract 1 from 'len' when assigning to 'end' to avoid out of
			// bounds exception in return r.substring(end+1, len). This can happen if
			// precision is 1 and the logger name ends with a dot.
			LogString::size_type end = buf.length() - 1;

			for (LogString::size_type i = count; i > 0; i--)
			{
				end = buf.rfind(0x2E /* '.' */, end - 1);

				if ((end == LogString::npos) || (end < nameStart))
				{
					return;
				}
			}

			buf.erase(buf.begin() + nameStart, buf.begin() + (end + 1));
		}",99.0,117.0,3.0,3.0,19.0,18,8,17,6,0,1,3,4,0,0,,0,1,4,2,2,void
1733,38240,PatternAbbreviatorFragment,1,LOG4CXX_NS.pattern.PatternAbbreviatorFragment.PatternAbbreviatorFragment,"ANY LOG4CXX_NS.pattern.PatternAbbreviatorFragment.PatternAbbreviatorFragment (int,logchar)",main\cpp\nameabbreviator.cpp,"PatternAbbreviatorFragment(const PatternAbbreviatorFragment& src)
			: charCount(src.charCount), ellipsis(src.ellipsis)
		{
		}",153.0,156.0,3.0,3.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1734,38255,operator =,1,LOG4CXX_NS.pattern.PatternAbbreviatorFragment.operator =,PatternAbbreviatorFragment LOG4CXX_NS.pattern.PatternAbbreviatorFragment.operator = (PatternAbbreviatorFragment),main\cpp\nameabbreviator.cpp,"PatternAbbreviatorFragment& operator=(const PatternAbbreviatorFragment& src)
		{
			charCount = src.charCount;
			ellipsis = src.ellipsis;
			return *this;
		}",158.0,163.0,3.0,3.0,6.0,5,3,4,3,0,4,1,1,0,0,,0,4,2,1,1,PatternAbbreviatorFragment
1735,38273,abbreviate,1,LOG4CXX_NS.pattern.PatternAbbreviatorFragment.abbreviate,"size_type LOG4CXX_NS.pattern.PatternAbbreviatorFragment.abbreviate (LogString,ANY)",main\cpp\nameabbreviator.cpp,"LogString::size_type abbreviate(LogString& buf, LogString::size_type startPos) const
		{
			LogString::size_type nextDot = buf.find(0x2E /* '.' */, startPos);

			if (nextDot != LogString::npos)
			{
				if ((nextDot - startPos) > charCount)
				{
					buf.erase(buf.begin() + (startPos + charCount), buf.begin() + nextDot);
					nextDot = startPos + charCount;

					if (ellipsis != 0x00)
					{
						buf.insert(nextDot, 1, ellipsis);
						nextDot++;
					}
				}

				nextDot++;
			}

			return nextDot;
		}",171.0,193.0,3.0,3.0,23.0,18,7,24,6,0,5,4,7,2,0,,0,5,4,2,2,size_type
1736,38348,abbreviate,1,LOG4CXX_NS.pattern.PatternAbbreviator.abbreviate,"void LOG4CXX_NS.pattern.PatternAbbreviator.abbreviate (ANY,LogString)",main\cpp\nameabbreviator.cpp,"void abbreviate(LogString::size_type nameStart, LogString& buf) const override
		{
			//
			//  all non-terminal patterns are executed once
			//
			LogString::size_type pos = nameStart;

			for (LogString::size_type i = 0; (i < (fragments.size() - 1)) && (pos < buf.length());
				i++)
			{
				pos = fragments[i].abbreviate(buf, pos);
			}

			//
			//   last pattern in executed repeatedly
			//
			PatternAbbreviatorFragment terminalFragment =
				fragments[fragments.size() - 1];

			while (pos < buf.length())
			{
				pos = terminalFragment.abbreviate(buf, pos);
			}
		}",233.0,256.0,3.0,3.0,24.0,19,6,21,6,0,4,3,3,1,0,,0,4,4,2,2,void
1737,38425,getAbbreviator,1,NameAbbreviator.getAbbreviator,NameAbbreviatorPtr NameAbbreviator.getAbbreviator (LogString),main\cpp\nameabbreviator.cpp,"NameAbbreviatorPtr NameAbbreviator::getAbbreviator(const LogString& pattern)
{
	if (pattern.length() > 0)
	{
		//  if pattern is just spaces and numbers then
		//     use MaxElementAbbreviator
		LogString trimmed(StringHelper::trim(pattern));

		if (trimmed.length() == 0)
		{
			return getDefaultAbbreviator();
		}

		LogString::size_type i = 0;

		while (
			(i < trimmed.length()) && (trimmed[i] >= 0x30 /* '0' */)
			&& (trimmed[i] <= 0x39 /* '9' */))
		{
			i++;
		}

		//
		//  if all blanks and digits
		//
		if (i == trimmed.length())
		{
			return std::make_shared<MaxElementAbbreviator>(StringHelper::toInt(trimmed));
		}

		std::vector<PatternAbbreviatorFragment> fragments;
		logchar ellipsis;
		int charCount;
		LogString::size_type pos = 0;

		while (pos < trimmed.length())
		{
			LogString::size_type ellipsisPos = pos;

			if (trimmed[pos] == 0x2A /* '*' */)
			{
				charCount = INT_MAX;
				ellipsisPos++;
			}
			else
			{
				if ((trimmed[pos] >= 0x30 /* '0' */)
					&& (trim...",267.0,355.0,1.0,1.0,89.0,48,10,51,15,1,2,11,23,0,2,,0,0,2,1,1,NameAbbreviatorPtr
1738,38626,getDefaultAbbreviator,1,NameAbbreviator.getDefaultAbbreviator,NameAbbreviatorPtr NameAbbreviator.getDefaultAbbreviator (),main\cpp\nameabbreviator.cpp,"NameAbbreviatorPtr NameAbbreviator::getDefaultAbbreviator()
{
	static WideLife<NameAbbreviatorPtr> def = std::make_shared<NOPAbbreviator>();
	return def;
}",362.0,366.0,1.0,1.0,5.0,2,2,3,2,1,0,1,1,0,0,,0,0,0,0,0,NameAbbreviatorPtr
1739,38655,NamePatternConverterPrivate,1,NamePatternConverterPrivate.NamePatternConverterPrivate,"ANY NamePatternConverterPrivate.NamePatternConverterPrivate (LogString,LogString,NameAbbreviatorPtr)",main\cpp\namepatternconverter.cpp,"NamePatternConverterPrivate( const LogString& name, const LogString& style, const NameAbbreviatorPtr abbrev ) :
		PatternConverterPrivate( name, style ),
		abbreviator(abbrev) {}",32.0,34.0,2.0,24.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ANY
1740,38665,NamePatternConverter,1,NamePatternConverter.NamePatternConverter,"ANY NamePatternConverter.NamePatternConverter (LogString,LogString,ANY)",main\cpp\namepatternconverter.cpp,"NamePatternConverter::NamePatternConverter(
	const LogString& name1,
	const LogString& style1,
	const std::vector<LogString>& options) :
	LoggingEventPatternConverter(std::make_unique<NamePatternConverterPrivate>(name1, style1,
			getAbbreviator(options)))
{
}",44.0,51.0,1.0,1.0,8.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ANY
1741,38672,getAbbreviator,1,NamePatternConverter.getAbbreviator,NameAbbreviatorPtr NamePatternConverter.getAbbreviator (ANY),main\cpp\namepatternconverter.cpp,"NameAbbreviatorPtr NamePatternConverter::getAbbreviator(
	const std::vector<LogString>& options)
{
	if (options.size() > 0)
	{
		return NameAbbreviator::getAbbreviator(options[0]);
	}

	return NameAbbreviator::getDefaultAbbreviator();
}",53.0,62.0,1.0,1.0,10.0,5,3,4,2,0,2,2,2,0,1,,0,0,2,1,1,NameAbbreviatorPtr
1742,38698,abbreviate,1,NamePatternConverter.abbreviate,"void NamePatternConverter.abbreviate (ANY,LogString)",main\cpp\namepatternconverter.cpp,"void NamePatternConverter::abbreviate(LogString::size_type nameStart, LogString& buf) const
{
	priv->abbreviator->abbreviate(nameStart, buf);
}",69.0,72.0,1.0,1.0,4.0,4,3,3,3,0,0,1,1,0,0,,0,0,4,2,2,void
1743,38730,NDC,1,NDC.NDC,ANY NDC.NDC (ANY),main\cpp\ndc.cpp,"NDC::NDC(const std::string& message)
{
	push(message);
}",25.0,28.0,1.0,1.0,4.0,0,0,1,1,0,0,1,1,0,0,,0,0,2,1,1,ANY
1744,38737,~NDC,1,NDC.~NDC,ANY NDC.~NDC (),main\cpp\ndc.cpp,"NDC::~NDC()
{
	pop();
}",30.0,33.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1745,38742,getMessage,1,NDC.getMessage,LogString NDC.getMessage (ANY),main\cpp\ndc.cpp,"LogString& NDC::getMessage(NDC::DiagnosticContext& ctx)
{
	return ctx.first;
}",36.0,39.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,2,1,1,LogString
1746,38751,getFullMessage,1,NDC.getFullMessage,LogString NDC.getFullMessage (ANY),main\cpp\ndc.cpp,"LogString& NDC::getFullMessage(NDC::DiagnosticContext& ctx)
{
	return ctx.second;
}",41.0,44.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,2,1,1,LogString
1747,38760,clear,1,NDC.clear,void NDC.clear (),main\cpp\ndc.cpp,"void NDC::clear()
{
	ThreadSpecificData* data = ThreadSpecificData::getCurrentData();

	if (data != 0)
	{
		Stack& stack = data->getStack();

		while (!stack.empty())
		{
			stack.pop();
		}

		data->recycle();
	}
}",46.0,61.0,1.0,1.0,16.0,9,5,8,3,0,1,3,4,0,0,,0,1,0,0,0,void
1748,38798,cloneStack,1,NDC.cloneStack,Stack NDC.cloneStack (),main\cpp\ndc.cpp,"NDC::Stack* NDC::cloneStack()
{
	ThreadSpecificData* data = ThreadSpecificData::getCurrentData();

	if (data != 0)
	{
		Stack& stack = data->getStack();

		if (!stack.empty())
		{
			return new Stack(stack);
		}
	}

	return new Stack();
}",63.0,78.0,1.0,1.0,16.0,9,6,9,4,0,1,3,4,0,0,,0,1,0,0,0,Stack
1749,38835,inherit,1,NDC.inherit,void NDC.inherit (ANY*),main\cpp\ndc.cpp,"void NDC::inherit(NDC::Stack* stack)
{
	if (stack != NULL)
	{
		ThreadSpecificData::inherit(*stack);
		delete stack;
	}
}",80.0,87.0,1.0,1.0,8.0,4,4,5,3,0,1,2,2,0,1,,0,0,2,1,1,void
1750,38853,get,1,NDC.get,bool NDC.get (LogString),main\cpp\ndc.cpp,"bool NDC::get(LogString& dest)
{
	ThreadSpecificData* data = ThreadSpecificData::getCurrentData();

	if (data != 0)
	{
		Stack& stack = data->getStack();

		if (!stack.empty())
		{
			dest.append(getFullMessage(stack.top()));
			return true;
		}

		data->recycle();
	}

	return false;
}",90.0,108.0,1.0,1.0,19.0,10,5,9,4,1,1,3,4,0,0,,0,1,2,1,1,bool
1751,38901,getDepth,1,NDC.getDepth,int NDC.getDepth (),main\cpp\ndc.cpp,"int NDC::getDepth()
{
	int size = 0;
	ThreadSpecificData* data = ThreadSpecificData::getCurrentData();

	if (data != 0)
	{
		size = (int)data->getStack().size();

		if (size == 0)
		{
			data->recycle();
		}
	}

	return size;
}",110.0,126.0,1.0,1.0,17.0,10,6,9,3,0,1,3,4,0,0,,0,1,0,0,0,int
1752,38943,pop,1,NDC.pop,LogString NDC.pop (),main\cpp\ndc.cpp,"bool NDC::pop(std::string& dst)
{
	bool retval = false;
	ThreadSpecificData* data = ThreadSpecificData::getCurrentData();

	if (data != 0)
	{
		Stack& stack = data->getStack();

		if (!stack.empty())
		{
			Transcoder::encode(getMessage(stack.top()), dst);
			stack.pop();
			retval = true;
		}

		data->recycle();
	}

	return retval;
}",150.0,170.0,1.0,1.0,21.0,11,5,11,4,0,1,3,4,0,0,,0,1,2,1,1,bool
1753,39054,peek,1,NDC.peek,LogString NDC.peek (),main\cpp\ndc.cpp,"bool NDC::peek(std::string& dst)
{
	ThreadSpecificData* data = ThreadSpecificData::getCurrentData();

	if (data != 0)
	{
		Stack& stack = data->getStack();

		if (!stack.empty())
		{
			Transcoder::encode(getMessage(stack.top()), dst);
			return true;
		}

		data->recycle();
	}

	return false;
}",191.0,209.0,1.0,1.0,19.0,9,5,8,3,0,1,3,4,0,0,,0,1,2,1,1,bool
1754,39145,pushLS,1,NDC.pushLS,void NDC.pushLS (LogString),main\cpp\ndc.cpp,"void NDC::pushLS(const LogString& message)
{
	ThreadSpecificData::push(message);
}",211.0,214.0,1.0,1.0,4.0,1,1,2,2,0,1,1,1,0,1,,0,0,2,1,1,void
1755,39155,push,1,NDC.push,void NDC.push (ANY),main\cpp\ndc.cpp,"void NDC::push(const std::string& message)
{
	LOG4CXX_DECODE_CHAR(msg, message);
	pushLS(msg);
}",216.0,220.0,1.0,1.0,5.0,0,0,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1756,39164,remove,1,NDC.remove,void NDC.remove (),main\cpp\ndc.cpp,"void NDC::remove()
{
	clear();
}",222.0,225.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,void
1757,39169,empty,1,NDC.empty,bool NDC.empty (),main\cpp\ndc.cpp,"bool NDC::empty()
{
	bool empty = true;
	ThreadSpecificData* data = ThreadSpecificData::getCurrentData();

	if (data != 0)
	{
		Stack& stack = data->getStack();
		empty = stack.empty();

		if (empty)
		{
			data->recycle();
		}
	}

	return empty;
}",227.0,244.0,1.0,1.0,18.0,9,4,11,4,0,1,3,4,0,0,,0,1,0,0,0,bool
1758,39226,NDCPatternConverter,1,NDCPatternConverter.NDCPatternConverter,ANY NDCPatternConverter.NDCPatternConverter (),main\cpp\ndcpatternconverter.cpp,"NDCPatternConverter::NDCPatternConverter() :
	LoggingEventPatternConverter(LOG4CXX_STR(""NDC""),
		LOG4CXX_STR(""ndc""))
{
}",30.0,34.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1759,39230,newInstance,1,NDCPatternConverter.newInstance,PatternConverterPtr NDCPatternConverter.newInstance (ANY),main\cpp\ndcpatternconverter.cpp,"PatternConverterPtr NDCPatternConverter::newInstance(
	const std::vector<LogString>& /* options */)
{
	static WideLife<PatternConverterPtr> def = std::make_shared<NDCPatternConverter>();
	return def;
}",36.0,41.0,1.0,1.0,6.0,2,2,3,2,0,0,1,1,0,0,,0,0,2,1,1,PatternConverterPtr
1760,39244,format,1,NDCPatternConverter.format,"void NDCPatternConverter.format (LoggingEventPtr,LogString,Pool)",main\cpp\ndcpatternconverter.cpp,"void NDCPatternConverter::format(
	const LoggingEventPtr& event,
	LogString& toAppendTo,
	Pool& /* p */) const
{
	if (!event->getNDC(toAppendTo))
	{
		toAppendTo.append(LOG4CXX_STR(""null""));
	}
}",43.0,52.0,1.0,1.0,10.0,3,3,3,2,0,0,2,2,0,0,,0,0,6,3,3,void
1761,39354,SQLException,1,SQLException.SQLException,"ANY SQLException.SQLException (short,void*,char*,ANY)",main\cpp\odbcappender.cpp,"SQLException::SQLException(const SQLException& src)
	: Exception(src)
{
}",81.0,84.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1762,39372,formatMessage,1,SQLException.formatMessage,"const char* SQLException.formatMessage (short,void*,char*,ANY)",main\cpp\odbcappender.cpp,"const char* SQLException::formatMessage(short fHandleType,
	void* hInput, const char* prolog, LOG4CXX_NS::helpers::Pool& p)
{
	std::string strReturn(prolog);
	strReturn.append("" - "");
#if LOG4CXX_HAVE_ODBC
	SQLCHAR       SqlState[6];
	SQLCHAR       Msg[SQL_MAX_MESSAGE_LENGTH];
	SQLINTEGER    NativeError;
	SQLSMALLINT   i;
	SQLSMALLINT   MsgLen;
	SQLRETURN     rc2;

	// Get the status records.
	i = 1;

	while ((rc2 = SQLGetDiagRecA(fHandleType, hInput, i, SqlState, &NativeError,
					Msg, sizeof(Msg), &MsgLen)) != SQL_NO_DATA)
	{
		strReturn.append((char*) Msg);
		i++;
	}

#else
	strReturn.append(""log4cxx built without ODBC support"");
#endif

	return apr_pstrdup((apr_pool_t*) p.getAPRPool(), strReturn.c_str());
}",86.0,114.0,1.0,1.0,29.0,5,2,5,3,0,0,1,1,0,0,,0,0,8,4,4,const char*
1763,39407,ODBCAppender,1,ODBCAppender.ODBCAppender,ANY ODBCAppender.ODBCAppender (),main\cpp\odbcappender.cpp,"ODBCAppender::ODBCAppender()
	: AppenderSkeleton (std::make_unique<ODBCAppenderPriv>(
#if LOG4CXX_EVENTS_AT_EXIT
		[this] {
			std::lock_guard<std::recursive_mutex> lock(_priv->mutex);
			if(_priv->closed)
				return;
			try
			{
				flushBuffer(_priv->pool);
			}
			catch (SQLException& e)
			{
				_priv->errorHandler->error(LOG4CXX_STR(""Error flushing connection""),
					e, ErrorCode::GENERIC_FAILURE);
			}
		}
#endif
								))
{
}",121.0,141.0,1.0,1.0,21.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1764,39411,~ODBCAppender,1,ODBCAppender.~ODBCAppender,ANY ODBCAppender.~ODBCAppender (),main\cpp\odbcappender.cpp,"ODBCAppender::~ODBCAppender()
{
	finalize();
}",143.0,146.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1765,39667,setOption,1,ODBCAppender.setOption,"void ODBCAppender.setOption (LogString,LogString)",main\cpp\odbcappender.cpp,"void ODBCAppender::setOption(const LogString& option, const LogString& value)
{
	if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""BUFFERSIZE""), LOG4CXX_STR(""buffersize"")))
	{
		setBufferSize((size_t)OptionConverter::toInt(value, 1));
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""PASSWORD""), LOG4CXX_STR(""password"")))
	{
		setPassword(value);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""SQL""), LOG4CXX_STR(""sql"")))
	{
		setSql(value);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""URL""), LOG4CXX_STR(""url""))
		|| StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""DSN""), LOG4CXX_STR(""dsn""))
		|| StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""CONNECTIONSTRING""), LOG4CXX_STR(""connectionstring""))  )
	{
		setURL(value);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""USER""), LOG4CXX_STR(""user"")))
	{
		setUser(value);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""COLUMNMAPPING""), LOG4CXX_...",174.0,206.0,1.0,2.0,33.0,3,2,4,4,0,2,2,2,1,2,,0,1,4,2,2,void
1766,39808,requiresLayout,1,ODBCAppender.requiresLayout,bool ODBCAppender.requiresLayout (),main\cpp\odbcappender.cpp,"bool ODBCAppender::requiresLayout() const
{
	return false;
}",210.0,213.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,bool
1767,39814,activateOptions,1,ODBCAppender.activateOptions,void ODBCAppender.activateOptions (ANY),main\cpp\odbcappender.cpp,"void ODBCAppender::activateOptions(LOG4CXX_NS::helpers::Pool&)
{
#if !LOG4CXX_HAVE_ODBC
	LogLog::error(LOG4CXX_STR(""Can not activate ODBCAppender unless compiled with ODBC support.""));
#else
	if (_priv->mappedName.empty())
	{
		LogLog::error(LOG4CXX_STR(""ODBCAppender column mappings not defined, logging events will not be inserted""));
	}
	auto specs = getFormatSpecifiers();
	for (auto& name : _priv->mappedName)
	{
		auto lowerName = StringHelper::toLowerCase(name);
		auto pItem = specs.find(lowerName);
		if (specs.end() == pItem)
		{
			if (lowerName.size() < 5
			 || lowerName.substr(0, 4) != LOG4CXX_STR(""mdc{""))
				LogLog::error(name + LOG4CXX_STR("" is not a supported ColumnMapping value""));
			else // A single MDC entry
			{
				auto index = lowerName.find(0x7D /* '}' */, 4);
				auto len = (lowerName.npos == index ? lowerName.size() : index) - 4;
				ODBCAppenderPriv::DataBinding paramData{ 0, 0, 0, 0, 0 };
				paramData.converter = std::make_shared<MDCPatternConverter>(lowerNa...",215.0,254.0,1.0,1.0,40.0,1,1,1,1,0,1,1,1,0,1,,0,0,2,1,1,void
1768,39825,append,1,ODBCAppender.append,"void ODBCAppender.append (ANY,ANY)",main\cpp\odbcappender.cpp,"void ODBCAppender::append(const spi::LoggingEventPtr& event, LOG4CXX_NS::helpers::Pool& p)
{
#if LOG4CXX_HAVE_ODBC
	_priv->buffer.push_back(event);

	if (_priv->buffer.size() >= _priv->bufferSize)
	{
		flushBuffer(p);
	}

#endif
}",257.0,268.0,1.0,1.0,12.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
1769,39831,getLogStatement,1,ODBCAppender.getLogStatement,"LogString ODBCAppender.getLogStatement (ANY,ANY)",main\cpp\odbcappender.cpp,"LogString ODBCAppender::getLogStatement(const spi::LoggingEventPtr& event, LOG4CXX_NS::helpers::Pool& p) const
{
    return LogString();
}",270.0,273.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,LogString
1770,39839,execute,1,ODBCAppender.execute,"void ODBCAppender.execute (LogString,ANY)",main\cpp\odbcappender.cpp,"void ODBCAppender::execute(const LogString& sql, LOG4CXX_NS::helpers::Pool& p)
{
}",275.0,277.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
1771,39845,closeConnection,1,ODBCAppender.closeConnection,void ODBCAppender.closeConnection (ANY),main\cpp\odbcappender.cpp,"void ODBCAppender::closeConnection(ODBCAppender::SQLHDBC /* con */)
{
}",281.0,283.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
1772,39850,getConnection,1,ODBCAppender.getConnection,SQLHDBC ODBCAppender.getConnection (ANY),main\cpp\odbcappender.cpp,"ODBCAppender::SQLHDBC ODBCAppender::getConnection(LOG4CXX_NS::helpers::Pool& p)
{
#if LOG4CXX_HAVE_ODBC
	SQLRETURN ret;

	if (_priv->env == SQL_NULL_HENV)
	{
		ret = SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &_priv->env);

		if (ret < 0)
		{
			SQLException ex(SQL_HANDLE_ENV, _priv->env, ""Failed to allocate SQL handle"", p);
			_priv->env = SQL_NULL_HENV;
			throw ex;
		}

		ret = SQLSetEnvAttr(_priv->env, SQL_ATTR_ODBC_VERSION, (SQLPOINTER) SQL_OV_ODBC3, SQL_IS_INTEGER);

		if (ret < 0)
		{
			SQLException ex(SQL_HANDLE_ENV, _priv->env, ""Failed to set odbc version"", p);
			SQLFreeHandle(SQL_HANDLE_ENV, _priv->env);
			_priv->env = SQL_NULL_HENV;
			throw ex;
		}
	}

	if (_priv->connection == SQL_NULL_HDBC)
	{
		ret = SQLAllocHandle(SQL_HANDLE_DBC, _priv->env, &_priv->connection);

		if (ret < 0)
		{
			SQLException ex(SQL_HANDLE_DBC, _priv->connection, ""Failed to allocate sql handle"", p);
			_priv->connection = SQL_NULL_HDBC;
			throw ex;
		}

#if LOG4CXX_LOGCHAR_IS_WCHAR
		SQ...",285.0,373.0,1.0,1.0,89.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,SQLHDBC
1773,39857,close,1,ODBCAppender.close,void ODBCAppender.close (),main\cpp\odbcappender.cpp,"void ODBCAppender::close()
{
	if (_priv->closed)
	{
		return;
	}

	Pool p;

	try
	{
		flushBuffer(p);
	}
	catch (SQLException& e)
	{
		_priv->errorHandler->error(LOG4CXX_STR(""Error closing connection""),
			e, ErrorCode::GENERIC_FAILURE);
	}

#if LOG4CXX_HAVE_ODBC

	if (_priv->connection != SQL_NULL_HDBC)
	{
		SQLDisconnect(_priv->connection);
		SQLFreeHandle(SQL_HANDLE_DBC, _priv->connection);
	}

	if (_priv->env != SQL_NULL_HENV)
	{
		SQLFreeHandle(SQL_HANDLE_ENV, _priv->env);
	}

#endif
	_priv->closed = true;
}",375.0,409.0,1.0,5.0,35.0,12,4,6,4,0,1,3,3,0,0,,0,1,0,0,0,void
1774,39911,flushBuffer,1,ODBCAppender.flushBuffer,void ODBCAppender.flushBuffer (Pool),main\cpp\odbcappender.cpp,"void ODBCAppender::flushBuffer(Pool& p)
{
	for (auto& logEvent : _priv->buffer)
	{
		if (_priv->parameterValue.empty())
			_priv->errorHandler->error(LOG4CXX_STR(""ODBCAppender column mappings not defined""));
#if LOG4CXX_HAVE_ODBC
		else try
		{
			if (0 == _priv->preparedStatement)
				_priv->setPreparedStatement(getConnection(p), p);
			_priv->setParameterValues(logEvent, p);
			auto ret = SQLExecute(_priv->preparedStatement);
			if (ret < 0)
			{
				throw SQLException(SQL_HANDLE_STMT, _priv->preparedStatement, ""Failed to execute prepared statement"", p);
			}
		}
		catch (SQLException& e)
		{
			_priv->errorHandler->error(LOG4CXX_STR(""Failed to execute sql""), e,
				ErrorCode::FLUSH_FAILURE);
		}
#endif
	}

	// clear the buffer of reported events
	_priv->buffer.clear();
}",584.0,612.0,1.0,23.0,29.0,15,3,4,1,0,0,3,4,0,0,,0,0,2,1,1,void
1775,39972,setSql,1,ODBCAppender.setSql,void ODBCAppender.setSql (LogString),main\cpp\odbcappender.cpp,"void ODBCAppender::setSql(const LogString& s)
{
    _priv->sqlStatement = s;
}",614.0,617.0,1.0,4.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1776,39989,encode,1,ODBCAppender.encode,"void ODBCAppender.encode (short unsigned**,LogString,Pool)",main\cpp\odbcappender.cpp,"void ODBCAppender::encode(unsigned short** dest,
	const LogString& src, Pool& p)
{
	//  worst case double number of characters from UTF-8 or wchar_t
	*dest = (unsigned short*)
		p.palloc((src.size() + 1) * 2 * sizeof(unsigned short));
	unsigned short* current = *dest;

	for (LogString::const_iterator i = src.begin();
		i != src.end();)
	{
		unsigned int sv = Transcoder::decode(src, i);

		if (sv < 0x10000)
		{
			*current++ = (unsigned short) sv;
		}
		else
		{
			unsigned char u = (unsigned char) (sv >> 16);
			unsigned char w = (unsigned char) (u - 1);
			unsigned short hs = (0xD800 + ((w & 0xF) << 6) + ((sv & 0xFFFF) >> 10));
			unsigned short ls = (0xDC00 + (sv & 0x3FF));
			*current++ = (unsigned short) hs;
			*current++ = (unsigned short) ls;
		}
	}

	*current = 0;
}",626.0,655.0,1.0,1.0,30.0,24,10,18,8,0,1,3,4,0,1,,0,1,6,3,3,void
1777,40118,getSql,1,ODBCAppender.getSql,LogString ODBCAppender.getSql (),main\cpp\odbcappender.cpp,"const LogString& ODBCAppender::getSql() const
{
	return _priv->sqlStatement;
}",657.0,660.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,LogString
1778,40133,setUser,1,ODBCAppender.setUser,void ODBCAppender.setUser (LogString),main\cpp\odbcappender.cpp,"void ODBCAppender::setUser(const LogString& user)
{
	_priv->databaseUser = user;
}",662.0,665.0,1.0,1.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1779,40150,setURL,1,ODBCAppender.setURL,void ODBCAppender.setURL (LogString),main\cpp\odbcappender.cpp,"void ODBCAppender::setURL(const LogString& url)
{
	_priv->databaseURL = url;
}",667.0,670.0,1.0,1.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1780,40167,setPassword,1,ODBCAppender.setPassword,void ODBCAppender.setPassword (LogString),main\cpp\odbcappender.cpp,"void ODBCAppender::setPassword(const LogString& password)
{
	_priv->databasePassword = password;
}",672.0,675.0,1.0,1.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1781,40184,setBufferSize,1,ODBCAppender.setBufferSize,void ODBCAppender.setBufferSize (size_t),main\cpp\odbcappender.cpp,"void ODBCAppender::setBufferSize(size_t newBufferSize)
{
	_priv->bufferSize = newBufferSize;
}",677.0,680.0,1.0,1.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1782,40201,getUser,1,ODBCAppender.getUser,LogString ODBCAppender.getUser (),main\cpp\odbcappender.cpp,"const LogString& ODBCAppender::getUser() const
{
	return _priv->databaseUser;
}",682.0,685.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,LogString
1783,40216,getURL,1,ODBCAppender.getURL,LogString ODBCAppender.getURL (),main\cpp\odbcappender.cpp,"const LogString& ODBCAppender::getURL() const
{
	return _priv->databaseURL;
}",687.0,690.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,LogString
1784,40231,getPassword,1,ODBCAppender.getPassword,LogString ODBCAppender.getPassword (),main\cpp\odbcappender.cpp,"const LogString& ODBCAppender::getPassword() const
{
	return _priv->databasePassword;
}",692.0,695.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,LogString
1785,40246,getBufferSize,1,ODBCAppender.getBufferSize,size_t ODBCAppender.getBufferSize (),main\cpp\odbcappender.cpp,"size_t ODBCAppender::getBufferSize() const
{
	return _priv->bufferSize;
}",697.0,700.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,size_t
1786,40277,OnlyOnceErrorHandlerPrivate,1,OnlyOnceErrorHandlerPrivate.OnlyOnceErrorHandlerPrivate,ANY OnlyOnceErrorHandlerPrivate.OnlyOnceErrorHandlerPrivate (),main\cpp\onlyonceerrorhandler.cpp,"OnlyOnceErrorHandlerPrivate() :
		WARN_PREFIX(LOG4CXX_STR(""log4cxx warning: "")),
		ERROR_PREFIX(LOG4CXX_STR(""log4cxx error: "")),
		firstTime(true){}",30.0,33.0,2.0,19.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1787,40284,OnlyOnceErrorHandler,1,OnlyOnceErrorHandler.OnlyOnceErrorHandler,ANY OnlyOnceErrorHandler.OnlyOnceErrorHandler (),main\cpp\onlyonceerrorhandler.cpp,"OnlyOnceErrorHandler::OnlyOnceErrorHandler() :
	m_priv(std::make_unique<OnlyOnceErrorHandlerPrivate>())
{
}",40.0,43.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1788,40288,~OnlyOnceErrorHandler,1,OnlyOnceErrorHandler.~OnlyOnceErrorHandler,ANY OnlyOnceErrorHandler.~OnlyOnceErrorHandler (),main\cpp\onlyonceerrorhandler.cpp,OnlyOnceErrorHandler::~OnlyOnceErrorHandler(){},45.0,45.0,1.0,47.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1789,40292,setLogger,1,OnlyOnceErrorHandler.setLogger,void OnlyOnceErrorHandler.setLogger (LoggerPtr),main\cpp\onlyonceerrorhandler.cpp,"void OnlyOnceErrorHandler::setLogger(const LoggerPtr&)
{
}",47.0,49.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
1790,40297,activateOptions,1,OnlyOnceErrorHandler.activateOptions,void OnlyOnceErrorHandler.activateOptions (Pool),main\cpp\onlyonceerrorhandler.cpp,"void OnlyOnceErrorHandler::activateOptions(Pool&)
{
}",51.0,53.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
1791,40302,setOption,1,OnlyOnceErrorHandler.setOption,"void OnlyOnceErrorHandler.setOption (LogString,LogString)",main\cpp\onlyonceerrorhandler.cpp,"void OnlyOnceErrorHandler::setOption(const LogString&, const LogString&)
{
}",55.0,57.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
1792,40308,error,1,OnlyOnceErrorHandler.error,"void OnlyOnceErrorHandler.error (LogString,ANY,int)",main\cpp\onlyonceerrorhandler.cpp,"void OnlyOnceErrorHandler::error(const LogString& message) const
{
	if (m_priv->firstTime)
	{
		LogLog::error(message);
		m_priv->firstTime = false;
	}
}",76.0,83.0,1.0,1.0,8.0,4,3,5,4,0,1,2,2,0,1,,0,0,2,1,1,void
1793,40363,setAppender,1,OnlyOnceErrorHandler.setAppender,void OnlyOnceErrorHandler.setAppender (AppenderPtr),main\cpp\onlyonceerrorhandler.cpp,"void OnlyOnceErrorHandler::setAppender(const AppenderPtr&)
{
}",86.0,88.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
1794,40368,setBackupAppender,1,OnlyOnceErrorHandler.setBackupAppender,void OnlyOnceErrorHandler.setBackupAppender (AppenderPtr),main\cpp\onlyonceerrorhandler.cpp,"void OnlyOnceErrorHandler::setBackupAppender(const AppenderPtr&)
{
}",91.0,93.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
1795,40429,ConfiguratorWatchdog,1,LOG4CXX_NS.ConfiguratorWatchdog.ConfiguratorWatchdog,"ANY LOG4CXX_NS.ConfiguratorWatchdog.ConfiguratorWatchdog (ANY,File)",main\cpp\optionconverter.cpp,"ConfiguratorWatchdog(const spi::ConfiguratorPtr& config, const File& filename)
        : helpers::FileWatchdog(filename)
        , m_config(config)
    {
    }",53.0,57.0,5.0,5.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ANY
1796,40435,doOnChange,1,LOG4CXX_NS.ConfiguratorWatchdog.doOnChange,void LOG4CXX_NS.ConfiguratorWatchdog.doOnChange (),main\cpp\optionconverter.cpp,"void doOnChange() override
    {
        m_config->doConfigure(file(), LogManager::getLoggerRepository());
    }",64.0,67.0,5.0,5.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,1,0,0,0,void
1797,40448,convertSpecialChars,1,OptionConverter.convertSpecialChars,LogString OptionConverter.convertSpecialChars (LogString),main\cpp\optionconverter.cpp,"LogString OptionConverter::convertSpecialChars(const LogString& s)
{
	logchar c;
	LogString sbuf;

	LogString::const_iterator i = s.begin();

	while (i != s.end())
	{
		c = *i++;

		if (c == 0x5C /* '\\' */)
		{
			c =  *i++;

			switch (c)
			{
				case 0x6E: //'n'
					c = 0x0A;
					break;

				case 0x72: //'r'
					c = 0x0D;
					break;

				case 0x74: //'t'
					c = 0x09;
					break;

				case 0x66: //'f'
					c = 0x0C;
					break;

				default:
					break;
			}
		}

		sbuf.append(1, c);
	}

	return sbuf;
}",77.0,119.0,1.0,1.0,43.0,16,6,17,4,1,0,9,7,0,0,,0,0,2,1,1,LogString
1798,40522,toBoolean,1,OptionConverter.toBoolean,"bool OptionConverter.toBoolean (LogString,bool)",main\cpp\optionconverter.cpp,"bool OptionConverter::toBoolean(const LogString& value, bool dEfault)
{
	if (value.length() >= 4)
	{
		if (StringHelper::equalsIgnoreCase(value.substr(0, 4),
				LOG4CXX_STR(""TRUE""), LOG4CXX_STR(""true"")))
		{
			return true;
		}
	}

	if (dEfault && value.length() >= 5)
	{
		if (StringHelper::equalsIgnoreCase(value.substr(0, 5),
				LOG4CXX_STR(""FALSE""), LOG4CXX_STR(""false"")))
		{
			return false;
		}
	}

	return dEfault;
}",122.0,143.0,1.0,1.0,22.0,9,3,8,3,13,2,5,7,2,2,,0,2,4,2,2,bool
1799,40584,toInt,1,OptionConverter.toInt,"int OptionConverter.toInt (LogString,int)",main\cpp\optionconverter.cpp,"int OptionConverter::toInt(const LogString& value, int dEfault)
{
	LogString trimmed(StringHelper::trim(value));

	if (trimmed.empty())
	{
		return dEfault;
	}

	LOG4CXX_ENCODE_CHAR(cvalue, trimmed);

	return (int) atol(cvalue.c_str());
}",145.0,157.0,1.0,1.0,13.0,4,2,7,5,5,1,2,2,0,1,,0,0,4,2,2,int
1800,40616,toFileSize,1,OptionConverter.toFileSize,"long OptionConverter.toFileSize (LogString,long)",main\cpp\optionconverter.cpp,"long OptionConverter::toFileSize(const LogString& s, long dEfault)
{
	if (s.empty())
	{
		return dEfault;
	}

	size_t index = s.find_first_of(LOG4CXX_STR(""bB""));

	if (index != LogString::npos && index > 0)
	{
		long multiplier = 1;
		index--;

		if (s[index] == 0x6B /* 'k' */ || s[index] == 0x4B /* 'K' */)
		{
			multiplier = 1024;
		}
		else if (s[index] == 0x6D /* 'm' */ || s[index] == 0x4D /* 'M' */)
		{
			multiplier = 1024 * 1024;
		}
		else if (s[index] == 0x67 /* 'g'*/ || s[index] == 0x47 /* 'G' */)
		{
			multiplier = 1024 * 1024 * 1024;
		}

		return toInt(s.substr(0, index), 1) * multiplier;
	}

	return toInt(s, 1);
}",159.0,190.0,1.0,1.0,32.0,17,10,18,5,2,0,4,5,0,0,,0,0,4,2,2,long
1801,40729,findAndSubst,1,OptionConverter.findAndSubst,"LogString OptionConverter.findAndSubst (LogString,Properties)",main\cpp\optionconverter.cpp,"LogString OptionConverter::findAndSubst(const LogString& key, Properties& props)
{
	LogString value(props.getProperty(key));

	if (value.empty())
	{
		return value;
	}

	try
	{
		return substVars(value, props);
	}
	catch (IllegalArgumentException& e)
	{
		LogLog::error(((LogString) LOG4CXX_STR(""Bad option value [""))
			+ value + LOG4CXX_STR(""].""), e);
		return value;
	}
}",192.0,211.0,1.0,1.0,20.0,6,3,10,5,9,1,3,3,0,1,,0,0,4,2,2,LogString
1802,40773,substVars,1,OptionConverter.substVars,"LogString OptionConverter.substVars (LogString,Properties)",main\cpp\optionconverter.cpp,"LogString OptionConverter::substVars(const LogString& val, Properties& props)
{
	LogString sbuf;
	const logchar delimStartArray[] = { 0x24, 0x7B, 0 };
	const LogString delimStart(delimStartArray);
	const logchar delimStop = 0x7D; // '}';
	const size_t DELIM_START_LEN = 2;
	const size_t DELIM_STOP_LEN = 1;

	size_t i = 0;

	while (true)
	{
		size_t j = val.find(delimStart, i);

		if (j == val.npos)
		{
			// no more variables
			if (i == 0)
			{
				// this is a simple string
				return val;
			}
			else
			{
				// add the tail string which contails no variables and return the result.
				sbuf.append(val.substr(i, val.length() - i));
				return sbuf;
			}
		}
		else
		{
			sbuf.append(val.substr(i, j - i));
			size_t k = val.find(delimStop, j);

			if (k == val.npos)
			{
				LogString msg(1, (logchar) 0x22 /* '\""' */);
				msg.append(val);
				msg.append(LOG4CXX_STR(""\"" has no closing brace. Opening brace at position ""));
				Pool p;
				StringHelper::toString(j, p, msg);
				msg.a...",213.0,286.0,1.0,1.0,74.0,11,4,14,8,1,0,4,7,0,0,,0,0,4,2,2,LogString
1803,40974,getSystemProperty,1,OptionConverter.getSystemProperty,"LogString OptionConverter.getSystemProperty (LogString,LogString)",main\cpp\optionconverter.cpp,"LogString OptionConverter::getSystemProperty(const LogString& key, const LogString& def)
{
	if (!key.empty())
	{
		LogString value(System::getProperty(key));

		if (!value.empty())
		{
			return value;
		}
	}

	return def;
}",288.0,301.0,1.0,1.0,14.0,5,2,6,4,6,1,3,4,0,1,,0,0,4,2,2,LogString
1804,41005,toLevel,1,OptionConverter.toLevel,"LevelPtr OptionConverter.toLevel (LogString,LevelPtr)",main\cpp\optionconverter.cpp,"LevelPtr OptionConverter::toLevel(const LogString& value,
	const LevelPtr& defaultValue)
{
	size_t hashIndex = value.find(LOG4CXX_STR(""#""));

	if (hashIndex == LogString::npos)
	{
		if (value.empty())
		{
			return defaultValue;
		}
		else
		{
			LogLog::debug(
				((LogString) LOG4CXX_STR(""OptionConverter::toLevel: no class name specified, level=[""))
				+ value
				+ LOG4CXX_STR(""]""));
			// no class name specified : use standard Level class
			return Level::toLevelLS(value, defaultValue);
		}
	}

	LogString clazz = value.substr(hashIndex + 1);
	LogString levelName = value.substr(0, hashIndex);
	LogLog::debug(((LogString) LOG4CXX_STR(""OptionConverter::toLevel: class=[""))
		+ clazz + LOG4CXX_STR(""], level=["") + levelName + LOG4CXX_STR(""]""));

	// This is degenerate case but you never know.
	if (levelName.empty())
	{
		return Level::toLevelLS(value, defaultValue);
	}

	try
	{
		Level::LevelClass& levelClass =
			(Level::LevelClass&)Loader::loadClass(clazz);
		return levelClass.toLev...",303.0,361.0,1.0,1.0,59.0,36,5,34,11,2,6,5,6,0,6,,0,1,4,2,2,LevelPtr
1805,41176,instantiateByKey,1,OptionConverter.instantiateByKey,"ObjectPtr OptionConverter.instantiateByKey (Properties,LogString,Class,ObjectPtr)",main\cpp\optionconverter.cpp,"ObjectPtr OptionConverter::instantiateByKey(Properties& props, const LogString& key,
	const Class& superClass, const ObjectPtr& defaultValue)
{
	// Get the value of the property in string form
	LogString className(findAndSubst(key, props));

	if (className.empty())
	{
		LogLog::error(
			((LogString) LOG4CXX_STR(""Could not find value for key "")) + key);
		return defaultValue;
	}

	// Trim className to avoid trailing spaces that cause problems.
	return OptionConverter::instantiateByClassName(
			StringHelper::trim(className), superClass, defaultValue);
}",364.0,380.0,1.0,1.0,17.0,6,3,11,8,4,3,2,2,0,3,,0,1,8,4,4,ObjectPtr
1806,41219,instantiateByClassName,1,OptionConverter.instantiateByClassName,"ObjectPtr OptionConverter.instantiateByClassName (LogString,Class,ObjectPtr)",main\cpp\optionconverter.cpp,"ObjectPtr OptionConverter::instantiateByClassName(const LogString& className,
	const Class& superClass, const ObjectPtr& defaultValue)
{
	if (!className.empty())
	{
		try
		{
			const Class& classObj = Loader::loadClass(className);
			ObjectPtr newObject =  ObjectPtr(classObj.newInstance());

			if (!newObject->instanceof(superClass))
			{
				return defaultValue;
			}

			return newObject;
		}
		catch (Exception& e)
		{
			LogLog::error(LOG4CXX_STR(""Could not instantiate class ["") +
				className + LOG4CXX_STR(""].""), e);
		}
	}

	return defaultValue;
}",382.0,407.0,1.0,1.0,26.0,11,5,14,8,3,2,4,7,0,2,,0,1,6,3,3,ObjectPtr
1807,41278,selectAndConfigure,1,OptionConverter.selectAndConfigure,"void OptionConverter.selectAndConfigure (File,LogString,ANY,int)",main\cpp\optionconverter.cpp,"void OptionConverter::selectAndConfigure(const File& configFileName,
	const LogString& _clazz, spi::LoggerRepositoryPtr hierarchy, int delay)
{
	ConfiguratorPtr configurator;
	LogString clazz = _clazz;

	LogString filename(configFileName.getPath());

#if LOG4CXX_HAS_DOMCONFIGURATOR
	if (clazz.empty()
		&& filename.length() > 4
		&& StringHelper::equalsIgnoreCase(
			filename.substr(filename.length() - 4),
			LOG4CXX_STR("".XML""), LOG4CXX_STR("".xml"")))
	{
		clazz = LOG4CXX_NS::xml::DOMConfigurator::getStaticClass().toString();
	}
#endif

	if (!clazz.empty())
	{
		LogLog::debug(LOG4CXX_STR(""Preferred configurator class: "") + clazz);
		const Class& clazzObj = Loader::loadClass(clazz);
		ObjectPtr obj = ObjectPtr(clazzObj.newInstance());
		configurator = LOG4CXX_NS::cast<Configurator>(obj);

		if (configurator == 0)
		{
			LogLog::error(LOG4CXX_STR(""Could not instantiate configurator ["")
				+ clazz + LOG4CXX_STR(""].""));
			return;
		}
	}
	else
	{
		configurator = std::make_shared<Proper...",409.0,456.0,1.0,1.0,48.0,24,9,28,14,1,4,4,5,0,4,,0,1,8,4,4,void
1808,41422,OutputStream,1,OutputStream.OutputStream,ANY OutputStream.OutputStream (),main\cpp\outputstream.cpp,"OutputStream::OutputStream()
{
}",27.0,29.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1809,41426,~OutputStream,1,OutputStream.~OutputStream,ANY OutputStream.~OutputStream (),main\cpp\outputstream.cpp,"OutputStream::~OutputStream()
{
}",31.0,33.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1810,41450,OutputStreamWriterPrivate,1,OutputStreamWriterPrivate.OutputStreamWriterPrivate,ANY OutputStreamWriterPrivate.OutputStreamWriterPrivate (OutputStreamPtr),main\cpp\outputstreamwriter.cpp,"OutputStreamWriterPrivate(OutputStreamPtr& out1,
							  CharsetEncoderPtr& enc1)
		: out(out1), enc(enc1){}",33.0,35.0,2.0,26.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ANY
1811,41463,OutputStreamWriter,1,OutputStreamWriter.OutputStreamWriter,ANY OutputStreamWriter.OutputStreamWriter (OutputStreamPtr),main\cpp\outputstreamwriter.cpp,"OutputStreamWriter::OutputStreamWriter(OutputStreamPtr& out1,
	CharsetEncoderPtr& enc1)
	: m_priv(std::make_unique<OutputStreamWriterPrivate>(out1, enc1))
{
	if (out1 == 0)
	{
		throw NullPointerException(LOG4CXX_STR(""out parameter may not be null.""));
	}

	if (enc1 == 0)
	{
		throw NullPointerException(LOG4CXX_STR(""enc parameter may not be null.""));
	}
}",50.0,63.0,1.0,1.0,14.0,2,2,1,1,0,0,2,2,0,0,,0,0,4,2,2,ANY
1812,41501,~OutputStreamWriter,1,OutputStreamWriter.~OutputStreamWriter,ANY OutputStreamWriter.~OutputStreamWriter (),main\cpp\outputstreamwriter.cpp,"OutputStreamWriter::~OutputStreamWriter()
{
}",65.0,67.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1813,41505,close,1,OutputStreamWriter.close,void OutputStreamWriter.close (Pool),main\cpp\outputstreamwriter.cpp,"void OutputStreamWriter::close(Pool& p)
{
	m_priv->out->close(p);
}",69.0,72.0,1.0,1.0,4.0,2,1,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1814,41517,flush,1,OutputStreamWriter.flush,void OutputStreamWriter.flush (Pool),main\cpp\outputstreamwriter.cpp,"void OutputStreamWriter::flush(Pool& p)
{
	m_priv->out->flush(p);
}",74.0,77.0,1.0,1.0,4.0,2,1,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1815,41529,write,1,OutputStreamWriter.write,"void OutputStreamWriter.write (LogString,Pool)",main\cpp\outputstreamwriter.cpp,"void OutputStreamWriter::write(const LogString& str, Pool& p)
{
	if (str.empty())
		return;
	if (CharsetEncoder::isTriviallyCopyable(str, m_priv->enc))
	{
		ByteBuffer buf((char*)str.data(), str.size() * sizeof (logchar));
		m_priv->out->write(buf, p);
	}
	else
	{
		enum { BUFSIZE = 1024 };
		char stackData[BUFSIZE];
		char* rawbuf = stackData;
		size_t bufSize = BUFSIZE;
#ifdef LOG4CXX_MULTI_PROCESS
		std::vector<char> heapData;
		// Ensure the logging event is a single write system call to keep events from each process separate
		if (bufSize < str.length() * 2)
		{
			heapData.resize(bufSize = str.length() * 2);
			rawbuf = heapData.data();
		}
#endif
		ByteBuffer buf(rawbuf, bufSize);
		m_priv->enc->reset();
		LogString::const_iterator iter = str.begin();

		while (iter != str.end())
		{
			CharsetEncoder::encode(m_priv->enc, str, iter, buf);
			buf.flip();
			m_priv->out->write(buf, p);
			buf.clear();
		}

		CharsetEncoder::encode(m_priv->enc, str, iter, buf);
		m_priv->enc->fl...",79.0,120.0,1.0,1.0,42.0,10,5,10,6,0,1,3,3,1,1,,0,1,4,2,2,void
1816,41666,getOutputStreamPtr,1,OutputStreamWriter.getOutputStreamPtr,OutputStreamPtr OutputStreamWriter.getOutputStreamPtr (),main\cpp\outputstreamwriter.cpp,"OutputStreamPtr OutputStreamWriter::getOutputStreamPtr() const
{
	return m_priv->out;
}",122.0,125.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,OutputStreamPtr
1817,41689,PatternConverter,1,PatternConverter.PatternConverter,ANY PatternConverter.PatternConverter (ANY),main\cpp\patternconverter.cpp,"PatternConverter::PatternConverter(const LogString& name,
	const LogString& style) :
	m_priv(std::make_unique<PatternConverterPrivate>(name, style))
{

}",34.0,39.0,1.0,1.0,6.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ANY
1818,41700,~PatternConverter,1,PatternConverter.~PatternConverter,ANY PatternConverter.~PatternConverter (),main\cpp\patternconverter.cpp,"PatternConverter::~PatternConverter()
{
}",41.0,43.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1819,41704,getName,1,PatternConverter.getName,LogString PatternConverter.getName (),main\cpp\patternconverter.cpp,"LogString PatternConverter::getName() const
{
	return m_priv->name;
}",45.0,48.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,LogString
1820,41712,getStyleClass,1,PatternConverter.getStyleClass,LogString PatternConverter.getStyleClass (ANY),main\cpp\patternconverter.cpp,"LogString PatternConverter::getStyleClass(const LOG4CXX_NS::helpers::ObjectPtr& /* e */) const
{
	return m_priv->style;
}",50.0,53.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,2,1,1,LogString
1821,41721,append,1,PatternConverter.append,"void PatternConverter.append (LogString,ANY)",main\cpp\patternconverter.cpp,"void PatternConverter::append(LogString& toAppendTo, const std::string& src)
{
	LOG4CXX_DECODE_CHAR(decoded, src);
	toAppendTo.append(decoded);
}",55.0,59.0,1.0,1.0,5.0,1,1,4,3,0,0,1,1,0,0,,0,0,4,2,2,void
1822,41805,PatternLayoutPrivate,1,PatternLayoutPrivate.PatternLayoutPrivate,ANY PatternLayoutPrivate.PatternLayoutPrivate (),main\cpp\patternlayout.cpp,"PatternLayoutPrivate(const LogString& pattern)
		: conversionPattern(pattern)
		, expectedPatternLength(100)
		{}",63.0,66.0,2.0,4.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1823,41854,PatternLayout,1,PatternLayout.PatternLayout,ANY PatternLayout.PatternLayout (),main\cpp\patternlayout.cpp,"PatternLayout::PatternLayout(const LogString& pattern) :
	m_priv(std::make_unique<PatternLayoutPrivate>(pattern))
{
	Pool pool;
	activateOptions(pool);
}",105.0,110.0,1.0,1.0,6.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1824,41866,~PatternLayout,1,PatternLayout.~PatternLayout,ANY PatternLayout.~PatternLayout (),main\cpp\patternlayout.cpp,PatternLayout::~PatternLayout() {},112.0,112.0,1.0,34.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1825,41870,setConversionPattern,1,PatternLayout.setConversionPattern,void PatternLayout.setConversionPattern (LogString),main\cpp\patternlayout.cpp,"void PatternLayout::setConversionPattern(const LogString& pattern)
{
	m_priv->conversionPattern = pattern;
	Pool pool;
	activateOptions(pool);
}",114.0,119.0,1.0,1.0,6.0,2,2,3,3,0,0,1,1,0,0,,0,0,2,1,1,void
1826,41883,format,1,PatternLayout.format,"void PatternLayout.format (LogString,ANY,Pool)",main\cpp\patternlayout.cpp,"void PatternLayout::format(LogString& output,
	const spi::LoggingEventPtr& event,
	Pool& pool) const
{
	output.reserve(m_priv->expectedPatternLength + event->getMessage().size());
	std::vector<FormattingInfoPtr>::const_iterator formatterIter =
		m_priv->patternFields.begin();

	for (std::vector<LoggingEventPatternConverterPtr>::const_iterator
		converterIter = m_priv->patternConverters.begin();
		converterIter != m_priv->patternConverters.end();
		converterIter++, formatterIter++)
	{
		int startField = (int)output.length();
		(*converterIter)->format(event, output, pool);
		(*formatterIter)->format(startField, output);
	}

}",121.0,139.0,1.0,1.0,19.0,21,7,18,7,0,0,2,2,0,0,,0,0,6,3,3,void
1827,41963,setOption,1,PatternLayout.setOption,"void PatternLayout.setOption (LogString,LogString)",main\cpp\patternlayout.cpp,"void PatternLayout::setOption(const LogString& option, const LogString& value)
{
	if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""CONVERSIONPATTERN""),
			LOG4CXX_STR(""conversionpattern"")))
	{
		m_priv->conversionPattern = OptionConverter::convertSpecialChars(value);
	}else if(StringHelper::equalsIgnoreCase(option,
											LOG4CXX_STR(""ERRORCOLOR""),
											LOG4CXX_STR(""errorcolor""))){
		m_priv->m_errorColor = value;
		LogLog::debug(LOG4CXX_STR(""Setting error color to ""));
		LogLog::debug(value);
	}else if(StringHelper::equalsIgnoreCase(option,
											LOG4CXX_STR(""FATALCOLOR""),
											LOG4CXX_STR(""fatalcolor""))){
		m_priv->m_fatalColor = value;
	}else if(StringHelper::equalsIgnoreCase(option,
											LOG4CXX_STR(""WARNCOLOR""),
											LOG4CXX_STR(""warncolor""))){
		m_priv->m_warnColor = value;
	}else if(StringHelper::equalsIgnoreCase(option,
											LOG4CXX_STR(""INFOCOLOR""),
											LOG4CXX_STR(""infocolor""))){
		m_priv->m_infoColor = value;
	}else i...",141.0,175.0,1.0,1.0,35.0,4,3,5,5,0,2,2,2,1,2,,0,2,4,2,2,void
1828,42108,activateOptions,1,PatternLayout.activateOptions,void PatternLayout.activateOptions (Pool),main\cpp\patternlayout.cpp,"void PatternLayout::activateOptions(Pool&)
{
	LogString pat(m_priv->conversionPattern);

	if (pat.empty())
	{
		pat = LOG4CXX_STR(""%m%n"");
	}

	m_priv->patternConverters.erase(m_priv->patternConverters.begin(), m_priv->patternConverters.end());
	m_priv->patternFields.erase(m_priv->patternFields.begin(), m_priv->patternFields.end());
	std::vector<PatternConverterPtr> converters;
	PatternParser::parse(pat,
		converters,
		m_priv->patternFields,
		getFormatSpecifiers());

	//
	//   strip out any pattern converters that don't handle LoggingEvents
	//
	//
	for (std::vector<PatternConverterPtr>::const_iterator converterIter = converters.begin();
		converterIter != converters.end();
		converterIter++)
	{
		LoggingEventPatternConverterPtr eventConverter =
			LOG4CXX_NS::cast<LoggingEventPatternConverter>(*converterIter);

		if (eventConverter != NULL)
		{
			m_priv->patternConverters.push_back(eventConverter);
		}
	}
	m_priv->expectedPatternLength = getFormattedEventCharacterCount() * 2;
}",177.0,211.0,1.0,1.0,35.0,35,8,29,11,0,2,4,5,0,1,,0,1,2,1,1,void
1829,42229,getFormatSpecifiers,1,PatternLayout.getFormatSpecifiers,PatternMap PatternLayout.getFormatSpecifiers (),main\cpp\patternlayout.cpp,"LOG4CXX_NS::pattern::PatternMap PatternLayout::getFormatSpecifiers()
{
	PatternMap specs;
	RULES_PUT(""c"", LoggerPatternConverter);
	RULES_PUT(""logger"", LoggerPatternConverter);

	RULES_PUT(""C"", ClassNamePatternConverter);
	RULES_PUT(""class"", ClassNamePatternConverter);

	specs.insert(PatternMap::value_type(LogString(LOG4CXX_STR(""Y"")), std::bind(&PatternLayout::createColorStartPatternConverter, this, std::placeholders::_1)));
	RULES_PUT(""y"", ColorEndPatternConverter);

	RULES_PUT(""d"", DatePatternConverter);
	RULES_PUT(""date"", DatePatternConverter);

	RULES_PUT(""f"", ShortFileLocationPatternConverter);

	RULES_PUT(""F"", FileLocationPatternConverter);
	RULES_PUT(""file"", FileLocationPatternConverter);

	RULES_PUT(""l"", FullLocationPatternConverter);

	RULES_PUT(""L"", LineLocationPatternConverter);
	RULES_PUT(""line"", LineLocationPatternConverter);

	RULES_PUT(""m"", MessagePatternConverter);
	RULES_PUT(""message"", MessagePatternConverter);

	RULES_PUT(""n"", LineSeparatorPatternConverter);

	RULE...",217.0,271.0,1.0,1.0,55.0,103,2,103,37,0,0,1,1,0,0,,0,0,0,0,0,PatternMap
1830,42805,getConversionPattern,1,PatternLayout.getConversionPattern,LogString PatternLayout.getConversionPattern (),main\cpp\patternlayout.cpp,"LogString PatternLayout::getConversionPattern() const
{
	return m_priv->conversionPattern;
}",273.0,276.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,LogString
1831,42813,createColorStartPatternConverter,1,PatternLayout.createColorStartPatternConverter,PatternConverterPtr PatternLayout.createColorStartPatternConverter (ANY),main\cpp\patternlayout.cpp,"pattern::PatternConverterPtr PatternLayout::createColorStartPatternConverter(const std::vector<LogString>& options){
	std::shared_ptr<ColorStartPatternConverter> colorPatternConverter = std::make_shared<ColorStartPatternConverter>();

	colorPatternConverter->setErrorColor(m_priv->m_errorColor);
	colorPatternConverter->setFatalColor(m_priv->m_fatalColor);
	colorPatternConverter->setWarnColor(m_priv->m_warnColor);
	colorPatternConverter->setInfoColor(m_priv->m_infoColor);
	colorPatternConverter->setDebugColor(m_priv->m_debugColor);
	colorPatternConverter->setTraceColor(m_priv->m_traceColor);

	return colorPatternConverter;
}",278.0,289.0,1.0,1.0,12.0,17,5,17,4,0,0,1,1,0,0,,0,0,2,1,1,PatternConverterPtr
1832,42891,PatternParser,1,PatternParser.PatternParser,ANY PatternParser.PatternParser (),main\cpp\patternparser.cpp,"PatternParser::PatternParser()
{
}",33.0,35.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1833,42895,isUnicodeIdentifierStart,1,PatternParser.isUnicodeIdentifierStart,bool PatternParser.isUnicodeIdentifierStart (logchar),main\cpp\patternparser.cpp,"bool PatternParser::isUnicodeIdentifierStart(logchar ch)
{
	//
	//   greatly simplified version checks if
	//     character is USACII alpha or number
	//
	return (ch >= 0x41 /* 'A' */ && ch <= 0x5A /* 'Z' */) ||
		(ch >= 0x61 /* 'a' */ && ch <= 0x7A /* 'z' */) ||
		(ch >= 0x30 /* '0' */ && ch <= 0x39 /* '9' */);
}",37.0,46.0,1.0,1.0,10.0,11,4,6,1,0,0,1,1,0,0,,0,0,2,1,1,bool
1834,42924,isUnicodeIdentifierPart,1,PatternParser.isUnicodeIdentifierPart,bool PatternParser.isUnicodeIdentifierPart (logchar),main\cpp\patternparser.cpp,"bool PatternParser::isUnicodeIdentifierPart(logchar ch)
{
	//
	//   greatly simplified version checks if
	//     character is USACII alpha or number
	//
	return isUnicodeIdentifierStart(ch)
		|| (ch == 0x5F /* '_' */);
}",48.0,56.0,1.0,1.0,9.0,2,2,2,1,0,0,1,1,0,0,,0,0,2,1,1,bool
1835,42936,extractConverter,1,PatternParser.extractConverter,"size_t PatternParser.extractConverter (logchar,LogString,ANY,LogString,LogString)",main\cpp\patternparser.cpp,"size_t PatternParser::extractConverter(
	logchar lastChar, const LogString& pattern,
	LogString::size_type i, LogString& convBuf,
	LogString& currentLiteral)
{
	if (!convBuf.empty())
	{
		convBuf.erase(convBuf.begin(), convBuf.end());
	}

	// When this method is called, lastChar points to the first character of the
	// conversion word. For example:
	// For ""%hello""     lastChar = 'h'
	// For ""%-5hello""   lastChar = 'h'
	//System.out.println(""lastchar is ""+lastChar);
	if (!isUnicodeIdentifierStart(lastChar))
	{
		return i;
	}

	convBuf.append(1, lastChar);

	while (
		(i < pattern.length())
		&& isUnicodeIdentifierPart(pattern[i]))
	{
		convBuf.append(1, pattern[i]);
		currentLiteral.append(1, pattern[i]);

		//System.out.println(""conv buffer is now [""+convBuf+""]."");
		i++;
	}

	return i;
}",58.0,92.0,1.0,1.0,35.0,16,6,20,5,0,0,4,4,0,0,,0,0,10,5,5,size_t
1836,43010,extractOptions,1,PatternParser.extractOptions,"size_t PatternParser.extractOptions (LogString,ANY,ANY)",main\cpp\patternparser.cpp,"size_t PatternParser::extractOptions(const LogString& pattern, LogString::size_type i,
	std::vector<LogString>& options)
{
	while ((i < pattern.length()) && (pattern[i] == 0x7B /* '{' */))
	{
		size_t end = pattern.find(0x7D /* '}' */, i);

		if (end == pattern.npos)
		{
			break;
		}

		LogString r(pattern.substr(i + 1, end - i - 1));
		options.push_back(r);
		i = end + 1;
	}

	return i;
}",95.0,113.0,1.0,1.0,19.0,16,8,18,5,0,0,4,4,0,0,,0,0,6,3,3,size_t
1837,43074,parse,1,PatternParser.parse,"void PatternParser.parse (LogString,ANY,ANY,PatternMap)",main\cpp\patternparser.cpp,"void PatternParser::parse(
	const LogString& pattern,
	std::vector<PatternConverterPtr>& patternConverters,
	std::vector<FormattingInfoPtr>& formattingInfos,
	const PatternMap& rules)
{

	LogString currentLiteral;

	size_t patternLength = pattern.length();
	int state = LITERAL_STATE;
	logchar c;
	size_t i = 0;
	FormattingInfoPtr formattingInfo(FormattingInfo::getDefault());

	while (i < patternLength)
	{
		c = pattern[i++];

		switch (state)
		{
			case LITERAL_STATE:

				// In literal state, the last char is always a literal.
				if (i == patternLength)
				{
					currentLiteral.append(1, c);

					continue;
				}

				if (c == ESCAPE_CHAR)
				{
					// peek at the next char.
					if (pattern[i] == ESCAPE_CHAR)
					{
						currentLiteral.append(1, c);
						i++; // move pointer
					}
					else
					{
						if (!currentLiteral.empty())
						{
							patternConverters.push_back(
								LiteralPatternConverter::newInstance(currentLiteral));
							formattingInfos.push_back(Forma...",115.0,304.0,1.0,1.0,190.0,91,17,89,18,2,5,20,31,2,1,,0,2,8,4,4,void
1838,43592,createConverter,1,PatternParser.createConverter,"PatternConverterPtr PatternParser.createConverter (LogString,LogString,PatternMap,ANY)",main\cpp\patternparser.cpp,"PatternConverterPtr PatternParser::createConverter(
	const LogString& converterId,
	LogString& currentLiteral,
	const PatternMap& rules,
	std::vector<LogString>& options)
{

	LogString converterName(converterId);

	for (size_t i = converterId.length(); i > 0; i--)
	{
		converterName = converterName.substr(0, i);
		PatternMap::const_iterator iter = rules.find(converterName);

		if (iter != rules.end())
		{
			currentLiteral.erase(currentLiteral.begin(),
				currentLiteral.end() - (converterId.length() - i));
			return (iter->second)(options);
		}
	}

	LogLog::error(LogString(LOG4CXX_STR(""Unrecognized format specifier "")) + converterId);

	return PatternConverterPtr();
}",307.0,332.0,1.0,1.0,26.0,18,7,21,8,0,1,3,4,0,1,,0,0,8,4,4,PatternConverterPtr
1839,43678,finalizeConverter,1,PatternParser.finalizeConverter,"size_t PatternParser.finalizeConverter (logchar,LogString,size_t,LogString,FormattingInfoPtr,PatternMap,ANY,ANY)",main\cpp\patternparser.cpp,"size_t PatternParser::finalizeConverter(
	logchar c, const LogString& pattern, size_t i,
	LogString& currentLiteral, const FormattingInfoPtr& formattingInfo,
	const PatternMap&  rules,
	std::vector<PatternConverterPtr>& patternConverters,
	std::vector<FormattingInfoPtr>&  formattingInfos)
{
	LogString convBuf;
	i = extractConverter(c, pattern, i, convBuf, currentLiteral);

	if (convBuf.empty())
	{
		LogLog::error(LOG4CXX_STR(""Empty conversion specifier""));
		patternConverters.push_back(
			LiteralPatternConverter::newInstance(currentLiteral));
		formattingInfos.push_back(FormattingInfo::getDefault());
	}
	else
	{
		LogString converterId(convBuf);

		std::vector<LogString> options;
		i = extractOptions(pattern, i, options);

		PatternConverterPtr pc(
			createConverter(
				converterId, currentLiteral, rules, options));

		if (pc == NULL)
		{
			LogString msg(LOG4CXX_STR(""Unrecognized conversion specifier [""));
			msg.append(converterId);
			msg.append(LOG4CXX_STR(""] in conversion pa...",334.0,392.0,1.0,1.0,59.0,12,3,18,10,0,3,3,3,0,2,,0,0,16,8,8,size_t
1840,43872,Pool,1,Pool.Pool,ANY Pool.Pool (),main\cpp\pool.cpp,"Pool::Pool(apr_pool_t* p, bool release1) : pool(p), release(release1)
{
	assert(p != NULL);
}",43.0,46.0,1.0,1.0,4.0,5,5,6,4,0,1,2,2,0,0,,0,1,4,2,2,ANY
1841,43904,~Pool,1,Pool.~Pool,ANY Pool.~Pool (),main\cpp\pool.cpp,"Pool::~Pool()
{
	if (release)
	{
		apr_pool_destroy(pool);
	}
}",48.0,54.0,1.0,1.0,7.0,0,0,1,1,0,0,2,2,0,0,,0,0,0,0,0,ANY
1842,43912,getAPRPool,1,Pool.getAPRPool,apr_pool_t Pool.getAPRPool (),main\cpp\pool.cpp,"apr_pool_t* Pool::getAPRPool()
{
	return pool;
}",57.0,60.0,1.0,1.0,4.0,0,0,1,1,0,0,1,1,0,0,,0,0,0,0,0,apr_pool_t
1843,43918,create,1,Pool.create,apr_pool_t Pool.create (),main\cpp\pool.cpp,"apr_pool_t* Pool::create()
{
	apr_pool_t* child;
	apr_status_t stat = apr_pool_create(&child, pool);

	if (stat != APR_SUCCESS)
	{
		throw PoolException(stat);
	}

	return child;
}",62.0,73.0,1.0,1.0,12.0,4,4,7,4,0,0,2,2,0,0,,0,0,0,0,0,apr_pool_t
1844,43940,palloc,1,Pool.palloc,void* Pool.palloc (size_t),main\cpp\pool.cpp,"void* Pool::palloc(size_t size)
{
	return apr_palloc(pool, size);
}",75.0,78.0,1.0,1.0,4.0,0,0,2,2,0,0,1,1,0,0,,0,0,2,1,1,void*
1845,43949,pstralloc,1,Pool.pstralloc,char* Pool.pstralloc (size_t),main\cpp\pool.cpp,"char* Pool::pstralloc(size_t size)
{
	return (char*) palloc(size);
}",80.0,83.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,2,1,1,char*
1846,43959,itoa,1,Pool.itoa,char* Pool.itoa (int),main\cpp\pool.cpp,"char* Pool::itoa(int n)
{
	return apr_itoa(pool, n);
}",85.0,88.0,1.0,1.0,4.0,0,0,2,2,0,0,1,1,0,0,,0,0,2,1,1,char*
1847,43968,pstrndup,1,Pool.pstrndup,"char* Pool.pstrndup (char*,size_t)",main\cpp\pool.cpp,"char* Pool::pstrndup(const char* s, size_t len)
{
	return apr_pstrndup(pool, s, len);
}",90.0,93.0,1.0,1.0,4.0,0,0,3,3,0,0,1,1,0,0,,0,0,4,2,2,char*
1848,43979,pstrdup,1,Pool.pstrdup,char* Pool.pstrdup (char*),main\cpp\pool.cpp,"char* Pool::pstrdup(const std::string& s)
{
	return apr_pstrndup(pool, s.data(), s.length());
}",100.0,103.0,1.0,1.0,4.0,0,0,2,2,0,0,1,1,0,0,,0,0,2,1,1,char*
1849,44020,parse,1,PropertyParser.parse,"void PropertyParser.parse (LogString,Properties)",main\cpp\properties.cpp,"void parse(LogString& in, Properties& properties)
		{
			LogString key, element;
			LexemType lexemType = BEGIN;
			logchar c;
			bool finished = false;

			if (!get(in, c))
			{
				return;
			}

			while (!finished)
			{
				switch (lexemType)
				{
					case BEGIN:
						switch (c)
						{
							case 0x20: // ' '
							case 0x09: // '\t'
							case 0x0A: // '\n'
							case 0x0D: // '\r'
								if (!get(in, c))
								{
									finished = true;
								}

								break;

							case 0x23: // '#'
							case 0x21: // '!'
								lexemType = COMMENT;

								if (!get(in, c))
								{
									finished = true;
								}

								break;

							default:
								lexemType = KEY;
								break;
						}

						break;

					case KEY:
						switch (c)
						{
							case 0x5C: // '\\'
								lexemType = KEY_ESCAPE;

								if (!get(in, c))
								{
									finished = true;
								}

								break;

							case 0x09: // '\t'
							case 0x20: // ' '
							case 0x3A: // ':'
		...",30.0,365.0,3.0,3.0,336.0,92,5,167,18,0,57,75,104,18,18,,0,57,4,2,2,void
1850,44591,get,1,PropertyParser.get,"bool PropertyParser.get (LogString,logchar)",main\cpp\properties.cpp,"static bool get(LogString& in, logchar& c)
		{
			if (in.empty())
			{
				c = 0;
				return false;
			}

			c = in[0];
			in.erase(in.begin());
			return true;
		}",368.0,379.0,3.0,3.0,12.0,6,3,6,2,18,0,2,2,0,0,,0,0,4,2,2,bool
1851,44636,Properties,1,Properties.Properties,ANY Properties.Properties (),main\cpp\properties.cpp,"Properties::Properties() : properties(new PropertyMap())
{
}",398.0,400.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1852,44640,~Properties,1,Properties.~Properties,ANY Properties.~Properties (),main\cpp\properties.cpp,"Properties::~Properties()
{
	delete properties;
}",402.0,405.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,ANY
1853,44646,setProperty,1,Properties.setProperty,"LogString Properties.setProperty (LogString,LogString)",main\cpp\properties.cpp,"LogString Properties::setProperty(const LogString& key, const LogString& value)
{
	return put(key, value);
}",407.0,410.0,1.0,1.0,4.0,0,0,2,2,0,0,1,1,0,0,,0,0,4,2,2,LogString
1854,44656,put,1,Properties.put,"LogString Properties.put (LogString,LogString)",main\cpp\properties.cpp,"LogString Properties::put(const LogString& key, const LogString& value)
{
	LogString oldValue((*properties)[key]);
	(*properties)[key] = value;
	return oldValue;
}",412.0,417.0,1.0,1.0,6.0,5,3,6,4,0,0,1,1,0,0,,0,0,4,2,2,LogString
1855,44676,getProperty,1,Properties.getProperty,LogString Properties.getProperty (LogString),main\cpp\properties.cpp,"LogString Properties::getProperty(const LogString& key) const
{
	return get(key);
}",419.0,422.0,1.0,1.0,4.0,0,0,1,1,0,0,1,1,0,0,,0,0,2,1,1,LogString
1856,44684,get,1,Properties.get,LogString Properties.get (LogString),main\cpp\properties.cpp,"LogString Properties::get(const LogString& key) const
{
	PropertyMap::const_iterator it = properties->find(key);
	return (it != properties->end()) ? it->second : LogString();
}",424.0,428.0,1.0,1.0,5.0,6,4,6,3,0,0,1,1,0,0,,0,0,2,1,1,LogString
1857,44709,load,1,Properties.load,void Properties.load (InputStreamPtr),main\cpp\properties.cpp,"void Properties::load(InputStreamPtr inStream)
{
	Pool pool;
	auto lineReader = std::make_shared<InputStreamReader>(inStream, CharsetDecoder::getISOLatinDecoder());
	LogString contents = lineReader->read(pool);
	properties->clear();
	PropertyParser parser;
	parser.parse(contents, *this);
}",430.0,438.0,1.0,1.0,9.0,12,8,11,9,0,1,1,1,0,0,,0,1,2,1,1,void
1858,44751,propertyNames,1,Properties.propertyNames,vector<LogString> Properties.propertyNames (),main\cpp\properties.cpp,"std::vector<LogString> Properties::propertyNames() const
{
	std::vector<LogString> names;
	names.reserve(properties->size());

	PropertyMap::const_iterator it;

	for (it = properties->begin(); it != properties->end(); it++)
	{
		const LogString& key = it->first;
		names.push_back(key);
	}

	return names;
}",440.0,454.0,1.0,1.0,15.0,12,6,14,6,0,0,2,2,0,0,,0,0,0,0,0,vector<LogString>
1859,44819,PropertiesPatternConverterPrivate,1,PropertiesPatternConverterPrivate.PropertiesPatternConverterPrivate,"ANY PropertiesPatternConverterPrivate.PropertiesPatternConverterPrivate (LogString,LogString,LogString)",main\cpp\propertiespatternconverter.cpp,"PropertiesPatternConverterPrivate( const LogString& name, const LogString& style, const LogString& propertyName ) :
		PatternConverterPrivate( name, style ),
		option(propertyName) {}",35.0,37.0,2.0,25.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ANY
1860,44829,PropertiesPatternConverter,1,PropertiesPatternConverter.PropertiesPatternConverter,"ANY PropertiesPatternConverter.PropertiesPatternConverter (LogString,LogString)",main\cpp\propertiespatternconverter.cpp,"PropertiesPatternConverter::PropertiesPatternConverter(const LogString& name1,
	const LogString& propertyName) :
	LoggingEventPatternConverter(
		std::make_unique<PropertiesPatternConverterPrivate>(name1, LOG4CXX_STR(""property""), propertyName))
{
}",47.0,52.0,1.0,1.0,6.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ANY
1861,44835,newInstance,1,PropertiesPatternConverter.newInstance,PatternConverterPtr PropertiesPatternConverter.newInstance (ANY),main\cpp\propertiespatternconverter.cpp,"PatternConverterPtr PropertiesPatternConverter::newInstance(
	const std::vector<LogString>& options)
{
	if (options.size() == 0)
	{
		static WideLife<PatternConverterPtr> def = std::make_shared<PropertiesPatternConverter>(
				LOG4CXX_STR(""Properties""), LOG4CXX_STR(""""));
		return def;
	}

	LogString converterName(LOG4CXX_STR(""Property{""));
	converterName.append(options[0]);
	converterName.append(LOG4CXX_STR(""}""));
	return std::make_shared<PropertiesPatternConverter>(converterName, options[0]);
}",54.0,68.0,1.0,1.0,15.0,17,8,12,5,0,0,2,2,0,0,,0,0,2,1,1,PatternConverterPtr
1862,44895,format,1,PropertiesPatternConverter.format,"void PropertiesPatternConverter.format (LoggingEventPtr,LogString,Pool)",main\cpp\propertiespatternconverter.cpp,"void PropertiesPatternConverter::format(
	const LoggingEventPtr& event,
	LogString& toAppendTo,
	Pool& /* p */) const
{
	if (priv->option.length() == 0)
	{
		toAppendTo.append(1, (logchar) 0x7B /* '{' */);

		LoggingEvent::KeySet keySet(event->getMDCKeySet());

		for (LoggingEvent::KeySet::const_iterator iter = keySet.begin();
			iter != keySet.end();
			iter++)
		{
			toAppendTo.append(1, (logchar) 0x7B /* '{' */);
			toAppendTo.append(*iter);
			toAppendTo.append(1, (logchar) 0x2C /* ',' */);
			event->getMDC(*iter, toAppendTo);
			toAppendTo.append(1, (logchar) 0x7D /* '}' */);
		}

		toAppendTo.append(1, (logchar) 0x7D /* '}' */);

	}
	else
	{
		event->getMDC(priv->option, toAppendTo);
	}
}",70.0,99.0,1.0,5.0,30.0,24,7,16,5,0,0,3,4,0,0,,0,0,6,3,3,void
1863,45068,PropertyWatchdog,1,LOG4CXX_NS.PropertyWatchdog.PropertyWatchdog,ANY LOG4CXX_NS.PropertyWatchdog.PropertyWatchdog (File),main\cpp\propertyconfigurator.cpp,"PropertyWatchdog(const File& filename) : FileWatchdog(filename)
		{
		}",56.0,58.0,3.0,3.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1864,45073,doOnChange,1,LOG4CXX_NS.PropertyWatchdog.doOnChange,void LOG4CXX_NS.PropertyWatchdog.doOnChange (),main\cpp\propertyconfigurator.cpp,"void doOnChange()
		{
			PropertyConfigurator().doConfigure(file(),
				LogManager::getLoggerRepository());
		}",65.0,69.0,3.0,3.0,5.0,2,1,1,1,0,1,1,1,0,0,,0,0,0,0,0,void
1865,45092,PropertyConfigurator,1,PropertyConfigurator.PropertyConfigurator,ANY PropertyConfigurator.PropertyConfigurator (),main\cpp\propertyconfigurator.cpp,"PropertyConfigurator::PropertyConfigurator()
	: registry(new std::map<LogString, AppenderPtr>()), loggerFactory(new DefaultLoggerFactory())
{
}",77.0,80.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1866,45096,~PropertyConfigurator,1,PropertyConfigurator.~PropertyConfigurator,ANY PropertyConfigurator.~PropertyConfigurator (),main\cpp\propertyconfigurator.cpp,"PropertyConfigurator::~PropertyConfigurator()
{
	delete registry;
}",82.0,85.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,ANY
1867,45102,doConfigure,1,PropertyConfigurator.doConfigure,"ConfigurationStatus PropertyConfigurator.doConfigure (File,ANY)",main\cpp\propertyconfigurator.cpp,"spi::ConfigurationStatus PropertyConfigurator::doConfigure(helpers::Properties& properties,
	spi::LoggerRepositoryPtr hierarchy)
{
	hierarchy->setConfigured(true);

	static const WideLife<LogString> DEBUG_KEY(LOG4CXX_STR(""log4j.debug""));
	LogString value(properties.getProperty(DEBUG_KEY));

	if (!value.empty())
	{
		LogLog::setInternalDebugging(OptionConverter::toBoolean(value, true));
	}

	static const WideLife<LogString> THRESHOLD_PREFIX(LOG4CXX_STR(""log4j.threshold""));
	LogString thresholdStr =
		OptionConverter::findAndSubst(THRESHOLD_PREFIX, properties);

	if (!thresholdStr.empty())
	{
		hierarchy->setThreshold(OptionConverter::toLevel(thresholdStr, Level::getAll()));
		LogLog::debug(((LogString) LOG4CXX_STR(""Hierarchy threshold set to [""))
			+ hierarchy->getThreshold()->toString()
			+ LOG4CXX_STR(""].""));
	}

	LogString threadConfigurationValue(properties.getProperty(LOG4CXX_STR(""log4j.threadConfiguration"")));

	if ( threadConfigurationValue == LOG4CXX_STR(""NoConfiguration"") ...",159.0,214.0,1.0,1.0,56.0,25,6,24,11,0,3,3,3,0,3,,0,0,4,2,2,ConfigurationStatus
1868,45207,configure,1,PropertyConfigurator.configure,ConfigurationStatus PropertyConfigurator.configure (File),main\cpp\propertyconfigurator.cpp,"spi::ConfigurationStatus PropertyConfigurator::configure(helpers::Properties& properties)
{
	return PropertyConfigurator().doConfigure(properties, LogManager::getLoggerRepository());
}",128.0,131.0,1.0,1.0,4.0,2,1,2,2,0,1,1,1,0,0,,0,0,2,1,1,ConfigurationStatus
1869,45237,configureAndWatch,1,PropertyConfigurator.configureAndWatch,ConfigurationStatus PropertyConfigurator.configureAndWatch (File),main\cpp\propertyconfigurator.cpp,"spi::ConfigurationStatus PropertyConfigurator::configureAndWatch(
	const File& configFilename, long delay)
{
	if (pdog)
	{
		APRInitializer::unregisterCleanup(pdog);
		delete pdog;
	}

	spi::ConfigurationStatus stat = PropertyConfigurator().doConfigure(configFilename, LogManager::getLoggerRepository());

	pdog = new PropertyWatchdog(configFilename);
	APRInitializer::registerCleanup(pdog);
	pdog->setDelay(delay);
	pdog->start();

	return stat;
}",140.0,157.0,1.0,1.0,18.0,1,1,2,2,0,0,1,1,0,0,,0,0,4,2,2,ConfigurationStatus
1870,45478,configureLoggerFactory,1,PropertyConfigurator.configureLoggerFactory,void PropertyConfigurator.configureLoggerFactory (ANY),main\cpp\propertyconfigurator.cpp,"void PropertyConfigurator::configureLoggerFactory(helpers::Properties& props)
{
	static const WideLife<LogString> LOGGER_FACTORY_KEY(LOG4CXX_STR(""log4j.loggerFactory""));

	LogString factoryClassName =
		OptionConverter::findAndSubst(LOGGER_FACTORY_KEY, props);

	if (!factoryClassName.empty())
	{
		LogString msg(LOG4CXX_STR(""Setting logger factory to [""));
		msg += factoryClassName;
		msg += LOG4CXX_STR(""]."");
		LogLog::debug(msg);
		std::shared_ptr<Object> instance = std::shared_ptr<Object>(
				Loader::loadClass(factoryClassName).newInstance() );

		loggerFactory = LOG4CXX_NS::cast<LoggerFactory>( instance );
		static const WideLife<LogString> FACTORY_PREFIX(LOG4CXX_STR(""log4j.factory.""));
		Pool p;
		PropertySetter::setProperties(loggerFactory, props, FACTORY_PREFIX, p);
	}
}",216.0,237.0,1.0,1.0,22.0,21,6,26,16,0,4,2,2,0,4,,0,2,2,1,1,void
1871,45563,configureRootLogger,1,PropertyConfigurator.configureRootLogger,"void PropertyConfigurator.configureRootLogger (ANY,ANY)",main\cpp\propertyconfigurator.cpp,"void PropertyConfigurator::configureRootLogger(helpers::Properties& props,
	spi::LoggerRepositoryPtr& hierarchy)
{
	static const WideLife<LogString> ROOT_CATEGORY_PREFIX(LOG4CXX_STR(""log4j.rootCategory""));
	static const WideLife<LogString> ROOT_LOGGER_PREFIX(LOG4CXX_STR(""log4j.rootLogger""));



	LogString effectiveFrefix(ROOT_LOGGER_PREFIX);
	LogString value = OptionConverter::findAndSubst(ROOT_LOGGER_PREFIX, props);

	if (value.empty())
	{
		value = OptionConverter::findAndSubst(ROOT_CATEGORY_PREFIX, props);
		effectiveFrefix = ROOT_CATEGORY_PREFIX;
	}

	if (value.empty())
	{
		LogLog::debug(LOG4CXX_STR(""Could not find root logger information. Is this OK?""));
	}
	else
	{
		LoggerPtr root = hierarchy->getRootLogger();

		static const WideLife<LogString> INTERNAL_ROOT_NAME(LOG4CXX_STR(""root""));
		parseLogger(props, root, effectiveFrefix, INTERNAL_ROOT_NAME, value, true);
	}
}",239.0,267.0,1.0,1.0,29.0,8,2,14,7,0,3,3,3,0,3,,0,2,4,2,2,void
1872,45638,parseCatsAndRenderers,1,PropertyConfigurator.parseCatsAndRenderers,"void PropertyConfigurator.parseCatsAndRenderers (ANY,ANY)",main\cpp\propertyconfigurator.cpp,"void PropertyConfigurator::parseCatsAndRenderers(helpers::Properties& props,
	spi::LoggerRepositoryPtr& hierarchy)
{
	static const WideLife<LogString> CATEGORY_PREFIX(LOG4CXX_STR(""log4j.category.""));
	static const WideLife<LogString> LOGGER_PREFIX(LOG4CXX_STR(""log4j.logger.""));

	std::vector<LogString> names = props.propertyNames();

	std::vector<LogString>::iterator it = names.begin();
	std::vector<LogString>::iterator itEnd = names.end();

	while (it != itEnd)
	{
		LogString key = *it++;

		if (key.find(CATEGORY_PREFIX) == 0 || key.find(LOGGER_PREFIX) == 0)
		{
			LogString loggerName;

			if (key.find(CATEGORY_PREFIX) == 0)
			{
				loggerName = key.substr(CATEGORY_PREFIX.value().length());
			}
			else if (key.find(LOGGER_PREFIX.value()) == 0)
			{
				loggerName = key.substr(LOGGER_PREFIX.value().length());
			}

			LogString value = OptionConverter::findAndSubst(key, props);
			LoggerPtr logger = hierarchy->getLogger(loggerName, loggerFactory);

			bool additivity = parseAddit...",269.0,305.0,1.0,1.0,37.0,29,10,39,16,0,1,4,7,0,1,,0,1,4,2,2,void
1873,45788,parseAdditivityForLogger,1,PropertyConfigurator.parseAdditivityForLogger,"bool PropertyConfigurator.parseAdditivityForLogger (ANY,LoggerPtr,LogString)",main\cpp\propertyconfigurator.cpp,"bool PropertyConfigurator::parseAdditivityForLogger(helpers::Properties& props,
	LoggerPtr& cat, const LogString& loggerName)
{

	static const WideLife<LogString> ADDITIVITY_PREFIX(LOG4CXX_STR(""log4j.additivity.""));



	LogString value(OptionConverter::findAndSubst(ADDITIVITY_PREFIX.value() + loggerName, props));
	LogLog::debug((LogString) LOG4CXX_STR(""Handling "") + ADDITIVITY_PREFIX.value()
		+ loggerName + LOG4CXX_STR(""=["") +  value + LOG4CXX_STR(""]""));

	// touch additivity only if necessary
	if (!value.empty())
	{
		bool additivity = OptionConverter::toBoolean(value, true);
		LogLog::debug(((LogString) LOG4CXX_STR(""Setting additivity for \""""))
			+ loggerName
			+ ((additivity) ?  LOG4CXX_STR(""\"" to true"") :
				LOG4CXX_STR(""\"" to false"")));

		return additivity;
	}

	return true;
}",307.0,332.0,1.0,1.0,26.0,20,6,16,7,0,4,2,2,0,4,,0,1,6,3,3,bool
1874,45872,parseLogger,1,PropertyConfigurator.parseLogger,"void PropertyConfigurator.parseLogger (ANY,LoggerPtr,LogString,LogString,LogString,bool)",main\cpp\propertyconfigurator.cpp,"void PropertyConfigurator::parseLogger(
	helpers::Properties& props, LoggerPtr& logger, const LogString& /* optionKey */,
	const LogString& loggerName, const LogString& value, bool additivity)
{
	LogLog::debug(((LogString) LOG4CXX_STR(""Parsing for [""))
		+ loggerName
		+ LOG4CXX_STR(""] with value=["")
		+ value + LOG4CXX_STR(""].""));

	// We must skip over ',' but not white space
	StringTokenizer st(value, LOG4CXX_STR("",""));

	// If value is not in the form "", appender.."" or """", then we should set
	// the level of the logger.
	if (!(value.find(LOG4CXX_STR("","")) == 0 || value.empty()))
	{
		// just to be on the safe side...
		if (!st.hasMoreTokens())
		{
			return;
		}

		LogString levelStr = st.nextToken();
		LogLog::debug((LogString) LOG4CXX_STR(""Level token is ["")
			+ levelStr +  LOG4CXX_STR(""].""));


		// If the level value is inherited, set logger level value to
		// null. We also check that the user has not specified inherited for the
		// root logger.
		if (StringHelper::equals...",337.0,418.0,1.0,1.0,82.0,42,11,38,15,0,7,9,14,2,7,,0,3,12,6,6,void
1875,46113,parseAppender,1,PropertyConfigurator.parseAppender,"AppenderPtr PropertyConfigurator.parseAppender (ANY,LogString)",main\cpp\propertyconfigurator.cpp,"AppenderPtr PropertyConfigurator::parseAppender(
	helpers::Properties& props, const LogString& appenderName)
{
	AppenderPtr appender = registryGet(appenderName);

	if (appender != 0)
	{
		LogLog::debug((LogString) LOG4CXX_STR(""Appender \"""")
			+ appenderName + LOG4CXX_STR(""\"" was already parsed.""));

		return appender;
	}

	static const WideLife<LogString> APPENDER_PREFIX(LOG4CXX_STR(""log4j.appender.""));

	// Appender was not previously initialized.
	LogString prefix = APPENDER_PREFIX.value() + appenderName;
	LogString layoutPrefix = prefix + LOG4CXX_STR("".layout"");

	std::shared_ptr<Object> obj =
		OptionConverter::instantiateByKey(
			props, prefix, Appender::getStaticClass(), 0);
	appender = LOG4CXX_NS::cast<Appender>( obj );

	// Map obsolete DailyRollingFileAppender property configuration
	if (!appender &&
		StringHelper::endsWith(OptionConverter::findAndSubst(prefix, props), LOG4CXX_STR(""DailyRollingFileAppender"")))
	{
		appender = std::make_shared<RollingFileAppender>();
		au...",420.0,535.0,1.0,1.0,116.0,120,10,134,29,0,20,13,28,4,20,,0,9,4,2,2,AppenderPtr
1876,46563,registryPut,1,PropertyConfigurator.registryPut,void PropertyConfigurator.registryPut (AppenderPtr),main\cpp\propertyconfigurator.cpp,"void PropertyConfigurator::registryPut(const AppenderPtr& appender)
{
	(*registry)[appender->getName()] = appender;
}",537.0,540.0,1.0,1.0,4.0,4,4,3,2,0,0,1,1,0,0,,0,0,2,1,1,void
1877,46577,registryGet,1,PropertyConfigurator.registryGet,AppenderPtr PropertyConfigurator.registryGet (LogString),main\cpp\propertyconfigurator.cpp,"AppenderPtr PropertyConfigurator::registryGet(const LogString& name)
{
	return (*registry)[name];
}",542.0,545.0,1.0,1.0,4.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,AppenderPtr
1878,46602,PropertyResourceBundle,1,PropertyResourceBundle.PropertyResourceBundle,ANY PropertyResourceBundle.PropertyResourceBundle (InputStreamPtr),main\cpp\propertyresourcebundle.cpp,"PropertyResourceBundle::PropertyResourceBundle(InputStreamPtr inStream)
{
	properties.load(inStream);
}",31.0,34.0,1.0,1.0,4.0,1,1,2,2,0,0,1,1,0,0,,0,0,2,1,1,ANY
1879,46612,getString,1,PropertyResourceBundle.getString,LogString PropertyResourceBundle.getString (LogString),main\cpp\propertyresourcebundle.cpp,"LogString PropertyResourceBundle::getString(const LogString& key) const
{
	LogString resource;
	PropertyResourceBundle* resourceBundle(const_cast<PropertyResourceBundle*>(this));

	do
	{
		resource = resourceBundle->properties.getProperty(key);

		if (!resource.empty())
		{
			return resource;
		}

		resourceBundle = dynamic_cast<PropertyResourceBundle*>(resourceBundle->parent.get());
	}
	while (resourceBundle != 0);

	throw MissingResourceException(key);
#if LOG4CXX_RETURN_AFTER_THROW
	return resource;
#endif
}",36.0,58.0,1.0,1.0,23.0,12,7,9,3,0,0,3,4,0,0,,0,0,2,1,1,LogString
1880,46684,PropertySetter,1,PropertySetter.PropertySetter,ANY PropertySetter.PropertySetter (ANY),main\cpp\propertysetter.cpp,"PropertySetter::PropertySetter(const helpers::ObjectPtr& obj1) : obj(obj1)
{
}",34.0,36.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1881,46689,setProperties,1,PropertySetter.setProperties,"void PropertySetter.setProperties (ANY,ANY,LogString,Pool)",main\cpp\propertysetter.cpp,"void PropertySetter::setProperties(helpers::Properties& properties,
	const LogString& prefix,
	Pool& p)
{
	size_t len = prefix.length();

	std::vector<LogString> names = properties.propertyNames();
	std::vector<LogString>::iterator it;

	for (it = names.begin(); it != names.end(); it++)
	{
		LogString key = *it;

		// handle only properties that start with the desired frefix.
		if (key.find(prefix) == 0)
		{
			// ignore key if it contains dots after the prefix
			if (key.find(0x2E /* '.' */, len + 1) != LogString::npos)
			{
				continue;
			}

			LogString value = OptionConverter::findAndSubst(key, properties);
			key = key.substr(len);

			if (key == LOG4CXX_STR(""layout"")
				&& obj != 0
				&& obj->instanceof(Appender::getStaticClass()))
			{
				continue;
			}

			setProperty(key, value, p);
		}
	}

	activate(p);
}",47.0,84.0,1.0,1.0,38.0,1,1,4,4,5,0,1,1,0,0,,0,0,6,3,3,void
1882,46820,setProperty,1,PropertySetter.setProperty,"void PropertySetter.setProperty (LogString,LogString,Pool)",main\cpp\propertysetter.cpp,"void PropertySetter::setProperty(const LogString& option,
	const LogString& value,
	Pool&)
{
	if (value.empty())
	{
		return;
	}

	if (obj != 0 && obj->instanceof(OptionHandler::getStaticClass()))
	{
		LogLog::debug(LOG4CXX_STR(""Setting option name=["") +
			option + LOG4CXX_STR(""], value=["") + value + LOG4CXX_STR(""]""));
		OptionHandlerPtr handler = LOG4CXX_NS::cast<OptionHandler>(obj);
		handler->setOption(option, value);
	}
}",86.0,102.0,1.0,1.0,17.0,15,8,14,7,0,1,3,3,0,1,,0,0,6,3,3,void
1883,46880,activate,1,PropertySetter.activate,void PropertySetter.activate (Pool),main\cpp\propertysetter.cpp,"void PropertySetter::activate(Pool& p)
{
	if (obj != 0 && obj->instanceof(OptionHandler::getStaticClass()))
	{
		OptionHandlerPtr handler = LOG4CXX_NS::cast<OptionHandler>(obj);
		handler->activateOptions(p);
	}
}",104.0,111.0,1.0,1.0,8.0,9,7,9,5,0,0,2,2,0,0,,0,0,2,1,1,void
1884,46925,Reader,1,Reader.Reader,ANY Reader.Reader (),main\cpp\reader.cpp,"Reader::Reader()
{
}",25.0,27.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1885,46929,~Reader,1,Reader.~Reader,ANY Reader.~Reader (),main\cpp\reader.cpp,"Reader::~Reader()
{
}",29.0,31.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1886,46946,RelativeTimeDateFormat,1,LOG4CXX_NS.helpers.RelativeTimeDateFormat.RelativeTimeDateFormat,ANY LOG4CXX_NS.helpers.RelativeTimeDateFormat.RelativeTimeDateFormat (),main\cpp\relativetimedateformat.cpp,"LOG4CXX_NS::helpers::RelativeTimeDateFormat::RelativeTimeDateFormat()
	: DateFormat(), startTime(LOG4CXX_NS::spi::LoggingEvent::getStartTime())
{
}",24.0,27.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1887,46950,format,1,LOG4CXX_NS.helpers.RelativeTimeDateFormat.format,"void LOG4CXX_NS.helpers.RelativeTimeDateFormat.format (LogString,log4cxx_time_t,Pool)",main\cpp\relativetimedateformat.cpp,"void LOG4CXX_NS::helpers::RelativeTimeDateFormat::format(
	LogString& s,
	log4cxx_time_t date,
	Pool& p) const
{
	int64_t interval = (date - startTime) / int64_t(1000);
	StringHelper::toString(interval, p, s);
}",29.0,36.0,1.0,1.0,8.0,4,4,7,6,0,1,1,1,0,1,,0,0,6,3,3,void
1888,46990,RelativeTimePatternConverter,1,RelativeTimePatternConverter.RelativeTimePatternConverter,ANY RelativeTimePatternConverter.RelativeTimePatternConverter (),main\cpp\relativetimepatternconverter.cpp,"RelativeTimePatternConverter::RelativeTimePatternConverter() :
	LoggingEventPatternConverter(LOG4CXX_STR(""Time""),
		LOG4CXX_STR(""time""))
{
}",31.0,35.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1889,46994,newInstance,1,RelativeTimePatternConverter.newInstance,PatternConverterPtr RelativeTimePatternConverter.newInstance (ANY),main\cpp\relativetimepatternconverter.cpp,"PatternConverterPtr RelativeTimePatternConverter::newInstance(
	const std::vector<LogString>& /* options */)
{
	static WideLife<PatternConverterPtr> def = std::make_shared<RelativeTimePatternConverter>();
	return def;
}",37.0,42.0,1.0,1.0,6.0,2,2,3,2,0,0,1,1,0,0,,0,0,2,1,1,PatternConverterPtr
1890,47008,format,1,RelativeTimePatternConverter.format,"void RelativeTimePatternConverter.format (LoggingEventPtr,LogString,Pool)",main\cpp\relativetimepatternconverter.cpp,"void RelativeTimePatternConverter::format(
	const LoggingEventPtr& event,
	LogString& toAppendTo,
	Pool& p) const
{
	log4cxx_time_t delta = (event->getTimeStamp() - LoggingEvent::getStartTime()) / 1000;
	StringHelper::toString(delta, p, toAppendTo);
}",44.0,51.0,1.0,1.0,8.0,6,5,7,6,0,2,1,1,0,1,,0,1,6,3,3,void
1891,47057,getBundle,1,ResourceBundle.getBundle,"ResourceBundlePtr ResourceBundle.getBundle (LogString,Locale)",main\cpp\resourcebundle.cpp,"ResourceBundlePtr ResourceBundle::getBundle(const LogString& baseName,
	const Locale& locale)
{
	LogString bundleName;
	PropertyResourceBundlePtr resourceBundle, previous;

	std::vector<LogString> bundlesNames;

	if (!locale.getVariant().empty())
	{
		bundlesNames.push_back(baseName + LOG4CXX_STR(""_"") +
			locale.getLanguage() + LOG4CXX_STR(""_"") +
			locale.getCountry() + LOG4CXX_STR(""_"") +
			locale.getVariant());
	}

	if (!locale.getCountry().empty())
	{
		bundlesNames.push_back(baseName + LOG4CXX_STR(""_"") +
			locale.getLanguage() + LOG4CXX_STR(""_"") +
			locale.getCountry());
	}

	if (!locale.getLanguage().empty())
	{
		bundlesNames.push_back(baseName + LOG4CXX_STR(""_"") +
			locale.getLanguage());
	}

	bundlesNames.push_back(baseName);

	for (std::vector<LogString>::iterator it = bundlesNames.begin();
		it != bundlesNames.end(); it++)
	{

		bundleName = *it;

		PropertyResourceBundlePtr current;

		// Try loading a class which implements ResourceBundle
		try
		{
			const Class& c...",30.0,124.0,1.0,1.0,95.0,66,11,53,16,0,2,12,18,0,2,,0,2,4,2,2,ResourceBundlePtr
1892,47328,RollingFileAppenderPriv,1,RollingFileAppenderPriv.RollingFileAppenderPriv,ANY RollingFileAppenderPriv.RollingFileAppenderPriv (),main\cpp\rollingfileappender.cpp,"RollingFileAppenderPriv() :
		FileAppenderPriv(),
		fileLength(0) {}",39.0,41.0,2.0,18.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1893,47338,RollingFileAppender,1,RollingFileAppender.RollingFileAppender,ANY RollingFileAppender.RollingFileAppender (),main\cpp\rollingfileappender.cpp,"RollingFileAppender::RollingFileAppender() :
	FileAppender (std::make_unique<RollingFileAppenderPriv>())
{
}",72.0,75.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1894,47342,setOption,1,RollingFileAppender.setOption,"void RollingFileAppender.setOption (LogString,LogString)",main\cpp\rollingfileappender.cpp,"void RollingFileAppender::setOption(const LogString& option, const LogString& value)
{
	if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""MAXFILESIZE""), LOG4CXX_STR(""maxfilesize""))
		|| StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""MAXIMUMFILESIZE""), LOG4CXX_STR(""maximumfilesize"")))
	{
		setMaxFileSize(value);
	}
	else if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""MAXBACKUPINDEX""), LOG4CXX_STR(""maxbackupindex""))
		|| StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""MAXIMUMBACKUPINDEX""), LOG4CXX_STR(""maximumbackupindex"")))
	{
		setMaxBackupIndex(StringHelper::toInt(value));
	}
	else if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""FILEDATEPATTERN""), LOG4CXX_STR(""filedatepattern"")))
	{
		setDatePattern(value);
	}
	else
	{
		FileAppender::setOption(option, value);
	}
}",77.0,102.0,1.0,1.0,26.0,3,2,5,3,0,2,2,2,2,2,,0,2,4,2,2,void
1895,47423,getMaxBackupIndex,1,RollingFileAppender.getMaxBackupIndex,int RollingFileAppender.getMaxBackupIndex (),main\cpp\rollingfileappender.cpp,"int RollingFileAppender::getMaxBackupIndex() const
{
	int result = 1;
	if (auto fwrp = LOG4CXX_NS::cast<FixedWindowRollingPolicy>(_priv->rollingPolicy))
		result = fwrp->getMaxIndex();
	return result;
}",104.0,110.0,1.0,60.0,7.0,10,6,8,5,0,0,2,2,0,0,,0,0,0,0,0,int
1896,47461,setMaxBackupIndex,1,RollingFileAppender.setMaxBackupIndex,void RollingFileAppender.setMaxBackupIndex (int),main\cpp\rollingfileappender.cpp,"void RollingFileAppender::setMaxBackupIndex(int maxBackups)
{
	auto fwrp = LOG4CXX_NS::cast<FixedWindowRollingPolicy>(_priv->rollingPolicy);
	if (!fwrp)
	{
		fwrp = std::make_shared<FixedWindowRollingPolicy>();
		fwrp->setFileNamePattern(getFile() + LOG4CXX_STR("".%i""));
		_priv->rollingPolicy = fwrp;
	}
	fwrp->setMaxIndex(maxBackups);
}",112.0,122.0,1.0,56.0,11.0,17,8,12,6,0,0,2,2,0,0,,0,0,2,1,1,void
1897,47520,getMaximumFileSize,1,RollingFileAppender.getMaximumFileSize,size_t RollingFileAppender.getMaximumFileSize (),main\cpp\rollingfileappender.cpp,"size_t RollingFileAppender::getMaximumFileSize() const
{
	size_t result = 10 * 1024 * 1024;
	if (auto sbtp = LOG4CXX_NS::cast<SizeBasedTriggeringPolicy>(_priv->triggeringPolicy))
		result = sbtp->getMaxFileSize();
	return result;
}",124.0,130.0,1.0,61.0,7.0,12,7,8,5,0,0,2,2,0,0,,0,0,0,0,0,size_t
1898,47562,setMaximumFileSize,1,RollingFileAppender.setMaximumFileSize,void RollingFileAppender.setMaximumFileSize (size_t),main\cpp\rollingfileappender.cpp,"void RollingFileAppender::setMaximumFileSize(size_t maxFileSize)
{
	auto sbtp = LOG4CXX_NS::cast<SizeBasedTriggeringPolicy>(_priv->triggeringPolicy);
	if (!sbtp)
	{
		sbtp = std::make_shared<SizeBasedTriggeringPolicy>();
		_priv->triggeringPolicy = sbtp;
	}
	sbtp->setMaxFileSize(maxFileSize);
}",132.0,141.0,1.0,57.0,10.0,15,7,11,6,0,0,2,2,0,0,,0,0,2,1,1,void
1899,47613,setMaxFileSize,1,RollingFileAppender.setMaxFileSize,void RollingFileAppender.setMaxFileSize (LogString),main\cpp\rollingfileappender.cpp,"void RollingFileAppender::setMaxFileSize(const LogString& value)
{
	setMaximumFileSize(OptionConverter::toFileSize(value, long(getMaximumFileSize() + 1)));
}",143.0,146.0,1.0,1.0,4.0,3,3,2,2,0,1,1,1,0,1,,0,0,2,1,1,void
1900,47629,makeFileNamePattern,1,RollingFileAppender.makeFileNamePattern,LogString RollingFileAppender.makeFileNamePattern (LogString),main\cpp\rollingfileappender.cpp,"LogString RollingFileAppender::makeFileNamePattern(const LogString& datePattern)
{
	LogString result(getFile());
	bool inLiteral = false;
	bool inPattern = false;

	for (size_t i = 0; i < datePattern.length(); i++)
	{
		if (datePattern[i] == 0x27 /* '\'' */)
		{
			inLiteral = !inLiteral;

			if (inLiteral && inPattern)
			{
				result.append(1, (logchar) 0x7D /* '}' */);
				inPattern = false;
			}
		}
		else
		{
			if (!inLiteral && !inPattern)
			{
				const logchar dbrace[] = { 0x25, 0x64, 0x7B, 0 }; // ""%d{""
				result.append(dbrace);
				inPattern = true;
			}

			result.append(1, datePattern[i]);
		}
	}

	if (inPattern)
	{
		result.append(1, (logchar) 0x7D /* '}' */);
	}
	return result;
}",148.0,184.0,1.0,1.0,37.0,15,8,16,5,0,0,5,8,0,0,,0,0,2,1,1,LogString
1901,47733,setDatePattern,1,RollingFileAppender.setDatePattern,void RollingFileAppender.setDatePattern (LogString),main\cpp\rollingfileappender.cpp,"void RollingFileAppender::setDatePattern(const LogString& newPattern)
{
	auto tbrp = LOG4CXX_NS::cast<TimeBasedRollingPolicy>(_priv->rollingPolicy);
	if (!tbrp)
	{
		tbrp = std::make_shared<TimeBasedRollingPolicy>();
		_priv->rollingPolicy = tbrp;
	}
	tbrp->setFileNamePattern(makeFileNamePattern(newPattern));
}",186.0,195.0,1.0,54.0,10.0,15,7,11,6,0,0,2,2,0,0,,0,0,2,1,1,void
1902,47785,activateOptions,1,RollingFileAppender.activateOptions,void RollingFileAppender.activateOptions (Pool),main\cpp\rollingfileappender.cpp,"void RollingFileAppender::activateOptions(Pool& p)
{
	if (!_priv->rollingPolicy)
	{
		LogLog::warn(LOG4CXX_STR(""No rolling policy configured for the appender named ["")
			+ _priv->name + LOG4CXX_STR(""].""));
		auto fwrp = std::make_shared<FixedWindowRollingPolicy>();
		fwrp->setFileNamePattern(getFile() + LOG4CXX_STR("".%i""));
		_priv->rollingPolicy = fwrp;
	}

	//
	//  if no explicit triggering policy and rolling policy is both.
	//
	if (!_priv->triggeringPolicy)
	{
		TriggeringPolicyPtr trig = LOG4CXX_NS::cast<TriggeringPolicy>(_priv->rollingPolicy);

		if (trig != NULL)
		{
			_priv->triggeringPolicy = trig;
		}
	}

	if (!_priv->triggeringPolicy)
	{
		LogLog::warn(LOG4CXX_STR(""No triggering policy configured for the appender named ["")
			+ _priv->name + LOG4CXX_STR(""].""));
		_priv->triggeringPolicy = std::make_shared<SizeBasedTriggeringPolicy>();
	}

	{
		std::lock_guard<std::recursive_mutex> lock(_priv->mutex);
		_priv->triggeringPolicy->activateOptions(p);
		_priv->rollingPolicy-...",200.0,285.0,1.0,6.0,86.0,95,9,55,14,0,4,10,17,0,4,,0,0,2,1,1,void
1903,48137,rollover,1,RollingFileAppender.rollover,bool RollingFileAppender.rollover (Pool),main\cpp\rollingfileappender.cpp,"bool RollingFileAppender::rollover(Pool& p)
{
	std::lock_guard<std::recursive_mutex> lock(_priv->mutex);
	return rolloverInternal(p);
}",302.0,306.0,1.0,44.0,5.0,7,5,4,3,0,0,1,1,0,0,,0,0,2,1,1,bool
1904,48164,rolloverInternal,1,RollingFileAppender.rolloverInternal,bool RollingFileAppender.rolloverInternal (Pool),main\cpp\rollingfileappender.cpp,"bool RollingFileAppender::rolloverInternal(Pool& p)
{
	//
	//   can't roll without a policy
	//
	if (_priv->rollingPolicy != NULL)
	{

		{
				try
				{
					RolloverDescriptionPtr rollover1(_priv->rollingPolicy->rollover(this->getFile(), this->getAppend(), p));

					if (rollover1 != NULL)
					{
						if (rollover1->getActiveFileName() == getFile())
						{
							closeWriter();

							bool success = true;

							if (rollover1->getSynchronous() != NULL)
							{
								success = false;

								try
								{
									success = rollover1->getSynchronous()->execute(p);
								}
								catch (std::exception& ex)
								{
									LOG4CXX_DECODE_CHAR(lsMsg, ex.what());
									LogString errorMsg = LOG4CXX_STR(""Exception on rollover: "");
									errorMsg.append(lsMsg);
									LogLog::error(errorMsg);
									_priv->errorHandler->error(lsMsg, ex, 0);
								}
							}

							if (success)
							{
								if (rollover1->getAppend())
								{
									_priv->fileLength = Fil...",308.0,448.0,1.0,5.0,141.0,55,6,49,10,0,2,10,39,0,2,,0,0,2,1,1,bool
1905,48612,subAppend,1,RollingFileAppender.subAppend,"void RollingFileAppender.subAppend (LoggingEventPtr,Pool)",main\cpp\rollingfileappender.cpp,"void RollingFileAppender::subAppend(const LoggingEventPtr& event, Pool& p)
{
	// The rollover check must precede actual writing. This is the
	// only correct behavior for time driven triggers.
	if (
		_priv->triggeringPolicy->isTriggeringEvent(
			this, event, getFile(), getFileLength()))
	{
		//
		//   wrap rollover request in try block since
		//    rollover may fail in case read access to directory
		//    is not provided.  However appender should still be in good
		//     condition and the append should still happen.
		try
		{
			_priv->_event = event;
			rolloverInternal(p);
		}
		catch (std::exception& ex)
		{
			LOG4CXX_DECODE_CHAR(lsMsg, ex.what());
			LogString errorMsg = LOG4CXX_STR(""Exception during rollover attempt: "");
			errorMsg.append(lsMsg);
			LogLog::warn(errorMsg);
			_priv->errorHandler->error(lsMsg);
		}
	}

	FileAppender::subAppend(event, p);
}",453.0,482.0,1.0,2.0,30.0,17,4,17,8,0,1,3,4,0,1,,0,0,4,2,2,void
1906,48695,getRollingPolicy,1,RollingFileAppender.getRollingPolicy,RollingPolicyPtr RollingFileAppender.getRollingPolicy (),main\cpp\rollingfileappender.cpp,"RollingPolicyPtr RollingFileAppender::getRollingPolicy() const
{
	return _priv->rollingPolicy;
}",487.0,490.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,RollingPolicyPtr
1907,48710,getTriggeringPolicy,1,RollingFileAppender.getTriggeringPolicy,TriggeringPolicyPtr RollingFileAppender.getTriggeringPolicy (),main\cpp\rollingfileappender.cpp,"TriggeringPolicyPtr RollingFileAppender::getTriggeringPolicy() const
{
	return _priv->triggeringPolicy;
}",495.0,498.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,TriggeringPolicyPtr
1908,48725,setRollingPolicy,1,RollingFileAppender.setRollingPolicy,void RollingFileAppender.setRollingPolicy (RollingPolicyPtr),main\cpp\rollingfileappender.cpp,"void RollingFileAppender::setRollingPolicy(const RollingPolicyPtr& policy)
{
	_priv->rollingPolicy = policy;
}",503.0,506.0,1.0,1.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1909,48742,setTriggeringPolicy,1,RollingFileAppender.setTriggeringPolicy,void RollingFileAppender.setTriggeringPolicy (TriggeringPolicyPtr),main\cpp\rollingfileappender.cpp,"void RollingFileAppender::setTriggeringPolicy(const TriggeringPolicyPtr& policy)
{
	_priv->triggeringPolicy = policy;
}",511.0,514.0,1.0,1.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1910,48759,close,1,RollingFileAppender.close,void RollingFileAppender.close (),main\cpp\rollingfileappender.cpp,"void RollingFileAppender::close()
{
	FileAppender::close();
}",519.0,522.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,void
1911,48826,createWriter,1,RollingFileAppender.createWriter,WriterPtr RollingFileAppender.createWriter (OutputStreamPtr),main\cpp\rollingfileappender.cpp,"WriterPtr RollingFileAppender::createWriter(OutputStreamPtr& os)
{
	OutputStreamPtr cos = std::make_shared<CountingOutputStream>(os, this);
	return FileAppender::createWriter(cos);
}",599.0,603.0,1.0,1.0,5.0,7,6,6,5,0,0,1,1,0,0,,0,0,2,1,1,WriterPtr
1912,48850,getFileLength,1,RollingFileAppender.getFileLength,size_t RollingFileAppender.getFileLength (),main\cpp\rollingfileappender.cpp,"size_t RollingFileAppender::getFileLength() const
{
	return _priv->fileLength;
}",609.0,612.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,size_t
1913,48865,incrementFileLength,1,RollingFileAppender.incrementFileLength,void RollingFileAppender.incrementFileLength (size_t),main\cpp\rollingfileappender.cpp,"void RollingFileAppender::incrementFileLength(size_t increment)
{
	_priv->fileLength += increment;
}",618.0,621.0,1.0,1.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1914,48919,RollingPolicyBase,1,RollingPolicyBase.RollingPolicyBase,ANY RollingPolicyBase.RollingPolicyBase (),main\cpp\rollingpolicybase.cpp,"RollingPolicyBase::RollingPolicyBase( std::unique_ptr<RollingPolicyBasePrivate> priv ) :
	m_priv(std::move(priv)){
}",42.0,44.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1915,48928,~RollingPolicyBase,1,RollingPolicyBase.~RollingPolicyBase,ANY RollingPolicyBase.~RollingPolicyBase (),main\cpp\rollingpolicybase.cpp,"RollingPolicyBase::~RollingPolicyBase()
{
}",46.0,48.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1916,48932,activateOptions,1,RollingPolicyBase.activateOptions,void RollingPolicyBase.activateOptions (ANY),main\cpp\rollingpolicybase.cpp,"void RollingPolicyBase::activateOptions(LOG4CXX_NS::helpers::Pool& /* pool */)
{
	if (m_priv->fileNamePatternStr.length() > 0)
	{
		parseFileNamePattern();
	}
	else
	{
		LogString msg(LOG4CXX_STR(""The FileNamePattern option must be set before using FixedWindowRollingPolicy.""));
		LogString ref1(LOG4CXX_STR(""See also http://logging.apache.org/log4j/codes.html#tbr_fnp_not_set""));
		LogLog::warn(msg);
		LogLog::warn(ref1);
		throw IllegalStateException();
	}
}",50.0,64.0,1.0,1.0,15.0,3,3,1,1,1,0,2,2,0,0,,0,0,2,1,1,void
1917,48970,setOption,1,RollingPolicyBase.setOption,"void RollingPolicyBase.setOption (LogString,LogString)",main\cpp\rollingpolicybase.cpp,"void RollingPolicyBase::setOption(const LogString& option, const LogString& value)
{
	if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""FILENAMEPATTERN""),
			LOG4CXX_STR(""filenamepattern"")))
	{
		m_priv->fileNamePatternStr = value;
	}else if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""CREATEINTERMEDIATEDIRECTORIES""),
			LOG4CXX_STR(""createintermediatedirectories"")))
	{
		m_priv->createIntermediateDirectories = OptionConverter::toBoolean(value, false);
	}
}",67.0,80.0,1.0,1.0,14.0,3,3,4,4,0,1,2,2,1,1,,0,1,4,2,2,void
1918,49015,setFileNamePattern,1,RollingPolicyBase.setFileNamePattern,void RollingPolicyBase.setFileNamePattern (LogString),main\cpp\rollingpolicybase.cpp,"void RollingPolicyBase::setFileNamePattern(const LogString& fnp)
{
	m_priv->fileNamePatternStr = fnp;
}",82.0,85.0,1.0,1.0,4.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1919,49025,getFileNamePattern,1,RollingPolicyBase.getFileNamePattern,LogString RollingPolicyBase.getFileNamePattern (),main\cpp\rollingpolicybase.cpp,"LogString RollingPolicyBase::getFileNamePattern() const
{
	return m_priv->fileNamePatternStr;
}",88.0,91.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,LogString
1920,49033,parseFileNamePattern,1,RollingPolicyBase.parseFileNamePattern,void RollingPolicyBase.parseFileNamePattern (),main\cpp\rollingpolicybase.cpp,"void RollingPolicyBase::parseFileNamePattern()
{
	m_priv->patternConverters.erase(m_priv->patternConverters.begin(), m_priv->patternConverters.end());
	m_priv->patternFields.erase(m_priv->patternFields.begin(), m_priv->patternFields.end());
	PatternParser::parse(m_priv->fileNamePatternStr,
		m_priv->patternConverters,
		m_priv->patternFields,
		getFormatSpecifiers());
}",96.0,104.0,1.0,1.0,9.0,16,2,10,2,0,2,1,1,0,1,,0,1,0,0,0,void
1921,49087,formatFileName,1,RollingPolicyBase.formatFileName,"void RollingPolicyBase.formatFileName (ObjectPtr,LogString,Pool)",main\cpp\rollingpolicybase.cpp,"void RollingPolicyBase::formatFileName(
	const ObjectPtr& obj,
	LogString& toAppendTo,
	Pool& pool) const
{
	std::vector<FormattingInfoPtr>::const_iterator formatterIter =
		m_priv->patternFields.begin();

	for (std::vector<PatternConverterPtr>::const_iterator
		converterIter = m_priv->patternConverters.begin();
		converterIter != m_priv->patternConverters.end();
		converterIter++, formatterIter++)
	{
		auto startField = toAppendTo.length();
		(*converterIter)->format(obj, toAppendTo, pool);
		(*formatterIter)->format((int)startField, toAppendTo);
	}
}",112.0,129.0,1.0,1.0,18.0,16,6,15,7,0,0,2,2,0,0,,0,0,6,3,3,void
1922,49152,getIntegerPatternConverter,1,RollingPolicyBase.getIntegerPatternConverter,PatternConverterPtr RollingPolicyBase.getIntegerPatternConverter (),main\cpp\rollingpolicybase.cpp,"PatternConverterPtr RollingPolicyBase::getIntegerPatternConverter() const
{
	for (std::vector<PatternConverterPtr>::const_iterator
		converterIter = m_priv->patternConverters.begin();
		converterIter != m_priv->patternConverters.end();
		converterIter++)
	{
		IntegerPatternConverterPtr intPattern;
		PatternConverterPtr patternptr = (*converterIter);
		intPattern = LOG4CXX_NS::cast<IntegerPatternConverter>(patternptr);

		if (intPattern != NULL)
		{
			return *converterIter;
		}
	}

	PatternConverterPtr noMatch;
	return noMatch;
}",132.0,151.0,1.0,1.0,20.0,14,7,14,8,0,0,3,4,0,0,,0,0,0,0,0,PatternConverterPtr
1923,49204,getDatePatternConverter,1,RollingPolicyBase.getDatePatternConverter,PatternConverterPtr RollingPolicyBase.getDatePatternConverter (),main\cpp\rollingpolicybase.cpp,"PatternConverterPtr RollingPolicyBase::getDatePatternConverter() const
{
	for (std::vector<PatternConverterPtr>::const_iterator
		converterIter = m_priv->patternConverters.begin();
		converterIter != m_priv->patternConverters.end();
		converterIter++)
	{
		DatePatternConverterPtr datePattern;
		PatternConverterPtr patternptr = (*converterIter);
		datePattern = LOG4CXX_NS::cast<DatePatternConverter>(patternptr);

		if (datePattern != NULL)
		{
			return *converterIter;
		}
	}

	PatternConverterPtr noMatch;
	return noMatch;
}",153.0,172.0,1.0,1.0,20.0,14,7,14,8,0,0,3,4,0,0,,0,0,0,0,0,PatternConverterPtr
1924,49256,getCreateIntermediateDirectories,1,RollingPolicyBase.getCreateIntermediateDirectories,bool RollingPolicyBase.getCreateIntermediateDirectories (),main\cpp\rollingpolicybase.cpp,"bool RollingPolicyBase::getCreateIntermediateDirectories() const{
	return m_priv->createIntermediateDirectories;
}",174.0,176.0,1.0,1.0,3.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,bool
1925,49264,setCreateIntermediateDirectories,1,RollingPolicyBase.setCreateIntermediateDirectories,void RollingPolicyBase.setCreateIntermediateDirectories (bool),main\cpp\rollingpolicybase.cpp,"void RollingPolicyBase::setCreateIntermediateDirectories(bool createIntermediate){
	m_priv->createIntermediateDirectories = createIntermediate;
}",178.0,180.0,1.0,1.0,3.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1926,49274,getPatternConverterList,1,RollingPolicyBase.getPatternConverterList,PatternConverterList RollingPolicyBase.getPatternConverterList (),main\cpp\rollingpolicybase.cpp,"PatternConverterList RollingPolicyBase::getPatternConverterList() const
{
	return m_priv->patternConverters;
}",182.0,185.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,PatternConverterList
1927,49294,RolloverDescriptionPrivate,1,RolloverDescriptionPrivate.RolloverDescriptionPrivate,ANY RolloverDescriptionPrivate.RolloverDescriptionPrivate (),main\cpp\rolloverdescription.cpp,"RolloverDescriptionPrivate(
		const LogString& activeFileName1,
		const bool append1,
		const ActionPtr& synchronous1,
		const ActionPtr& asynchronous1)
		: activeFileName(activeFileName1),
		  append(append1),
		  synchronous(synchronous1),
		  asynchronous(asynchronous1)
	{}",30.0,39.0,2.0,3.0,10.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,ANY
1928,49310,RolloverDescription,1,RolloverDescription.RolloverDescription,ANY RolloverDescription.RolloverDescription (),main\cpp\rolloverdescription.cpp,"RolloverDescription::RolloverDescription(
	const LogString& activeFileName1,
	const bool append1,
	const ActionPtr& synchronous1,
	const ActionPtr& asynchronous1)
	: m_priv(std::make_unique<RolloverDescriptionPrivate>(activeFileName1, append1, synchronous1, asynchronous1))
{
}",70.0,77.0,1.0,1.0,8.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,ANY
1929,49322,~RolloverDescription,1,RolloverDescription.~RolloverDescription,ANY RolloverDescription.~RolloverDescription (),main\cpp\rolloverdescription.cpp,RolloverDescription::~RolloverDescription(){},79.0,79.0,1.0,45.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1930,49326,getActiveFileName,1,RolloverDescription.getActiveFileName,LogString RolloverDescription.getActiveFileName (),main\cpp\rolloverdescription.cpp,"LogString RolloverDescription::getActiveFileName() const
{
	return m_priv->activeFileName;
}",81.0,84.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,LogString
1931,49334,getAppend,1,RolloverDescription.getAppend,bool RolloverDescription.getAppend (),main\cpp\rolloverdescription.cpp,"bool RolloverDescription::getAppend() const
{
	return m_priv->append;
}",86.0,89.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,bool
1932,49342,getSynchronous,1,RolloverDescription.getSynchronous,ActionPtr RolloverDescription.getSynchronous (),main\cpp\rolloverdescription.cpp,"ActionPtr RolloverDescription::getSynchronous() const
{
	return m_priv->synchronous;
}",91.0,94.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,ActionPtr
1933,49350,getAsynchronous,1,RolloverDescription.getAsynchronous,ActionPtr RolloverDescription.getAsynchronous (),main\cpp\rolloverdescription.cpp,"ActionPtr RolloverDescription::getAsynchronous() const
{
	return m_priv->asynchronous;
}",102.0,105.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,ActionPtr
1934,49373,RootLogger,1,RootLogger.RootLogger,"ANY RootLogger.RootLogger (Pool,LevelPtr)",main\cpp\rootlogger.cpp,"RootLogger::RootLogger(Pool& pool, const LevelPtr level1) :
	Logger(pool, LOG4CXX_STR(""root""))
{
	setLevel(level1);
}",27.0,31.0,1.0,1.0,5.0,0,0,1,1,0,0,1,1,0,0,,0,0,4,2,2,ANY
1935,49381,getEffectiveLevel,1,RootLogger.getEffectiveLevel,LevelPtr RootLogger.getEffectiveLevel (),main\cpp\rootlogger.cpp,"const LevelPtr& RootLogger::getEffectiveLevel() const
{
	return getLevel();
}",33.0,36.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,LevelPtr
1936,49387,setLevel,1,RootLogger.setLevel,void RootLogger.setLevel (LevelPtr),main\cpp\rootlogger.cpp,"void RootLogger::setLevel(const LevelPtr level1)
{
	if (level1 == 0)
	{
		LogLog::error(LOG4CXX_STR(""You have tried to set a null level to root.""));
	}
	else
	{
		Logger::setLevel(level1);
	}
}",38.0,48.0,1.0,1.0,11.0,2,2,2,2,0,1,2,2,0,1,,0,0,2,1,1,void
1937,49421,ServerSocket,1,ServerSocket.ServerSocket,ANY ServerSocket.ServerSocket (ANY),main\cpp\serversocket.cpp,"ServerSocket::ServerSocket(std::unique_ptr<ServerSocketPrivate> priv) :
	m_priv(std::move(priv))
{
}",26.0,29.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1938,49426,~ServerSocket,1,ServerSocket.~ServerSocket,ANY ServerSocket.~ServerSocket (),main\cpp\serversocket.cpp,"ServerSocket::~ServerSocket()
{
	close();
}",31.0,34.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1939,49431,close,1,ServerSocket.close,void ServerSocket.close (),main\cpp\serversocket.cpp,"void ServerSocket::close()
{
}",36.0,38.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,void
1940,49435,getSoTimeout,1,ServerSocket.getSoTimeout,int ServerSocket.getSoTimeout (),main\cpp\serversocket.cpp,"int ServerSocket::getSoTimeout() const
{
	return m_priv->timeout;
}",42.0,45.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,int
1941,49443,setSoTimeout,1,ServerSocket.setSoTimeout,void ServerSocket.setSoTimeout (int),main\cpp\serversocket.cpp,"void ServerSocket::setSoTimeout(int newVal)
{
	m_priv->timeout = newVal;
}",49.0,52.0,1.0,1.0,4.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
1942,49453,create,1,ServerSocket.create,ServerSocketUniquePtr ServerSocket.create (int),main\cpp\serversocket.cpp,"ServerSocketUniquePtr ServerSocket::create(int port){
	return std::make_unique<APRServerSocket>(port);
}",54.0,56.0,1.0,1.0,3.0,3,3,3,3,1,0,1,1,0,0,,0,0,2,1,1,ServerSocketUniquePtr
1943,49481,ShortFileLocationPatternConverter,1,ShortFileLocationPatternConverter.ShortFileLocationPatternConverter,ANY ShortFileLocationPatternConverter.ShortFileLocationPatternConverter (),main\cpp\shortfilelocationpatternconverter.cpp,"ShortFileLocationPatternConverter::ShortFileLocationPatternConverter() :
    LoggingEventPatternConverter(LOG4CXX_STR(""Short File Location""),
                                 LOG4CXX_STR(""shortFile"")) {
}",30.0,33.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1944,49485,newInstance,1,ShortFileLocationPatternConverter.newInstance,PatternConverterPtr ShortFileLocationPatternConverter.newInstance (ANY),main\cpp\shortfilelocationpatternconverter.cpp,"PatternConverterPtr ShortFileLocationPatternConverter::newInstance(
    const std::vector<LogString> & /* options */ ) {
  static WideLife<PatternConverterPtr> instance(new ShortFileLocationPatternConverter());
  return instance;
}",35.0,39.0,1.0,1.0,5.0,1,1,2,2,0,0,1,1,0,0,,0,0,2,1,1,PatternConverterPtr
1945,49496,format,1,ShortFileLocationPatternConverter.format,"void ShortFileLocationPatternConverter.format (LoggingEventPtr,LogString,Pool)",main\cpp\shortfilelocationpatternconverter.cpp,"void ShortFileLocationPatternConverter::format(
    const LoggingEventPtr &event,
    LogString &toAppendTo,
    Pool & /* p */ ) const {
  append(toAppendTo, event->getLocationInformation().getShortFileName());
}",41.0,46.0,1.0,1.0,6.0,2,2,2,2,0,0,1,1,0,0,,0,0,6,3,3,void
1946,49542,incrementFunction,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.incrementFunction,"void LOG4CXX_NS.helpers.SimpleDateFormatImpl.incrementFunction (tm,apr_time_exp_t)",main\cpp\simpledateformat.cpp,"typedef void (*incrementFunction)(tm& time, apr_time_exp_t& apr_time);",62.0,62.0,14.0,69.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
1947,49549,PatternToken,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken.PatternToken,ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken.PatternToken (),main\cpp\simpledateformat.cpp,"PatternToken()
		{
		}",71.0,73.0,3.0,3.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1948,49553,~PatternToken,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken.~PatternToken,ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken.~PatternToken (),main\cpp\simpledateformat.cpp,"virtual ~PatternToken()
		{
		}",75.0,77.0,3.0,3.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
1949,49557,setTimeZone,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken.setTimeZone,void LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken.setTimeZone (TimeZonePtr),main\cpp\simpledateformat.cpp,"virtual void setTimeZone(const TimeZonePtr& zone)
		{
		}",83.0,85.0,3.0,3.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
1950,49562,format,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken.format,"void LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken.format (LogString,apr_time_exp_t,ANY)",main\cpp\simpledateformat.cpp,"virtual void format(LogString& s,
			const apr_time_exp_t& date,
			LOG4CXX_NS::helpers::Pool& p) const = 0;",93.0,95.0,16.0,42.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,void
1951,49569,incrementMonth,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken.incrementMonth,"void LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken.incrementMonth (tm,apr_time_exp_t)",main\cpp\simpledateformat.cpp,"static void incrementMonth(tm& time, apr_time_exp_t& aprtime)
		{
			time.tm_mon++;
			aprtime.tm_mon++;
		}",99.0,103.0,3.0,3.0,5.0,4,2,2,2,0,0,1,1,0,0,,0,0,4,2,2,void
1952,49583,incrementDay,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken.incrementDay,"void LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken.incrementDay (tm,apr_time_exp_t)",main\cpp\simpledateformat.cpp,"static void incrementDay(tm& time, apr_time_exp_t& aprtime)
		{
			time.tm_wday++;
			aprtime.tm_wday++;
		}",105.0,109.0,3.0,3.0,5.0,4,2,2,2,0,0,1,1,0,0,,0,0,4,2,2,void
1953,49597,incrementHalfDay,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken.incrementHalfDay,"void LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken.incrementHalfDay (tm,apr_time_exp_t)",main\cpp\simpledateformat.cpp,"static void incrementHalfDay(tm& time, apr_time_exp_t& aprtime)
		{
			time.tm_hour += 12;
			aprtime.tm_hour += 12;
		}",111.0,115.0,3.0,3.0,5.0,4,2,2,2,0,0,1,1,0,0,,0,0,4,2,2,void
1954,49613,renderFacet,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken.renderFacet,"void LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken.renderFacet (ANY*,incrementFunction,char,unsigned int,char*,ANY)",main\cpp\simpledateformat.cpp,"static void renderFacet(const std::locale* locale,
			incrementFunction inc,
			char spec,
			unsigned int wspec,
			const char* aprspec,
			std::vector<LogString>& values)
		{
			std::vector<LogString>::iterator valueIter = values.begin();
			tm time;
			memset(&time, 0, sizeof(time));
			apr_time_exp_t aprtime;
			memset(&aprtime, 0, sizeof(aprtime));
#if LOG4CXX_HAS_STD_LOCALE

			if (locale != NULL)
			{
#if LOG4CXX_WCHAR_T_API

				if (HAS_FACET(*locale, std::time_put<wchar_t>))
				{
					const std::time_put<wchar_t>& facet = USE_FACET(*locale, std::time_put<wchar_t>);
					size_t start = 0;
					std::basic_ostringstream<wchar_t> os;

					for (; valueIter != values.end(); valueIter++)
					{
						PUT_FACET(facet, os, &time, (char)wspec);
						Transcoder::decode(os.str().substr(start), *valueIter);
						start = os.str().length();
						(*inc)(time, aprtime);
					}
				}
				else
#endif
					if (HAS_FACET(*locale,  std::time_put<char>))
					{
						const std::time_put<char...",117.0,187.0,3.0,3.0,71.0,18,7,28,13,5,1,3,4,0,1,,0,0,12,6,6,void
1955,49716,operator =,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken.operator =,PatternToken LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken.operator = (PatternToken),main\cpp\simpledateformat.cpp,PatternToken& operator=(const PatternToken&);,198.0,198.0,15.0,46.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,PatternToken
1956,49722,LiteralToken,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.LiteralToken.LiteralToken,"ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.LiteralToken.LiteralToken (logchar,int)",main\cpp\simpledateformat.cpp,"LiteralToken( logchar ch1, int count1 ) : ch( ch1 ), count( count1 )
		{
		}",205.0,207.0,3.0,3.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ANY
1957,49728,format,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.LiteralToken.format,"void LOG4CXX_NS.helpers.SimpleDateFormatImpl.LiteralToken.format (LogString,apr_time_exp_t,Pool)",main\cpp\simpledateformat.cpp,"void format( LogString& s, const apr_time_exp_t&, Pool& /* p */ ) const
		{
			s.append( count, ch );
		}",209.0,212.0,3.0,3.0,4.0,1,1,3,3,0,2,1,1,0,0,,0,2,6,3,3,void
1958,49744,EraToken,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.EraToken.EraToken,"ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.EraToken.EraToken (int,ANY*)",main\cpp\simpledateformat.cpp,"EraToken( int /* count */, const std::locale* /* locale */  )
		{
		}",224.0,226.0,3.0,3.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ANY
1959,49750,format,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.EraToken.format,"void LOG4CXX_NS.helpers.SimpleDateFormatImpl.EraToken.format (LogString,apr_time_exp_t,Pool)",main\cpp\simpledateformat.cpp,"void format(LogString& s, const apr_time_exp_t& /* tm */, Pool& /* p */ ) const
		{
			s.append(1, (logchar) 0x41 /* 'A' */);
			s.append(1, (logchar) 0x44 /* 'D' */);
		}",228.0,232.0,3.0,3.0,5.0,4,2,2,1,0,0,1,1,0,0,,0,0,6,3,3,void
1960,49774,NumericToken,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.NumericToken.NumericToken,ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.NumericToken.NumericToken (size_t),main\cpp\simpledateformat.cpp,"NumericToken( size_t width1 ) : width( width1 )
		{
		}",240.0,242.0,3.0,3.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1961,49779,getField,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.NumericToken.getField,int LOG4CXX_NS.helpers.SimpleDateFormatImpl.NumericToken.getField (apr_time_exp_t),main\cpp\simpledateformat.cpp,virtual int getField( const apr_time_exp_t& tm ) const = 0;,244.0,244.0,15.0,60.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,int
1962,49784,format,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.NumericToken.format,"void LOG4CXX_NS.helpers.SimpleDateFormatImpl.NumericToken.format (LogString,apr_time_exp_t,Pool)",main\cpp\simpledateformat.cpp,"void format( LogString& s, const apr_time_exp_t& tm, Pool& p ) const
		{
			size_t initialLength = s.length();

			StringHelper::toString( getField( tm ), p, s );
			size_t finalLength = s.length();

			if ( initialLength + width > finalLength )
			{
				s.insert( initialLength, ( initialLength + width ) - finalLength, (logchar) 0x30 /* '0' */);
			}
		}",246.0,257.0,3.0,3.0,12.0,11,6,16,7,0,3,2,2,1,1,,0,2,6,3,3,void
1963,49835,YearToken,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.YearToken.YearToken,ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.YearToken.YearToken (int),main\cpp\simpledateformat.cpp,"YearToken( int width1 ) : NumericToken( width1 )
		{
		}",268.0,270.0,3.0,3.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1964,49840,getField,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.YearToken.getField,int LOG4CXX_NS.helpers.SimpleDateFormatImpl.YearToken.getField (apr_time_exp_t),main\cpp\simpledateformat.cpp,"int getField( const apr_time_exp_t& tm ) const
		{
			return 1900 + tm.tm_year;
		}",272.0,275.0,3.0,3.0,4.0,2,2,1,1,0,0,1,1,0,0,,0,0,2,1,1,int
1965,49852,MonthToken,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.MonthToken.MonthToken,ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.MonthToken.MonthToken (int),main\cpp\simpledateformat.cpp,"MonthToken( int width1 ) : NumericToken( width1 )
		{
		}",283.0,285.0,3.0,3.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1966,49857,getField,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.MonthToken.getField,int LOG4CXX_NS.helpers.SimpleDateFormatImpl.MonthToken.getField (apr_time_exp_t),main\cpp\simpledateformat.cpp,"int getField( const apr_time_exp_t& tm ) const
		{
			return tm.tm_mon + 1;
		}",287.0,290.0,3.0,3.0,4.0,2,2,1,1,0,0,1,1,0,0,,0,0,2,1,1,int
1967,49869,AbbreviatedMonthNameToken,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.AbbreviatedMonthNameToken.AbbreviatedMonthNameToken,"ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.AbbreviatedMonthNameToken.AbbreviatedMonthNameToken (int,ANY*)",main\cpp\simpledateformat.cpp,"AbbreviatedMonthNameToken(int, const std::locale* locale) : names( 12 )
		{
			renderFacet(locale, PatternToken::incrementMonth, 'b', 0x62, ""%b"", names);
		}",298.0,301.0,3.0,3.0,4.0,1,1,3,3,0,2,1,1,0,1,,0,1,4,2,2,ANY
1968,49884,format,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.AbbreviatedMonthNameToken.format,"void LOG4CXX_NS.helpers.SimpleDateFormatImpl.AbbreviatedMonthNameToken.format (LogString,apr_time_exp_t,Pool)",main\cpp\simpledateformat.cpp,"void format(LogString& s, const apr_time_exp_t& tm, Pool& /* p */ ) const
		{
			s.append( names[tm.tm_mon] );
		}",303.0,306.0,3.0,3.0,4.0,3,2,3,3,0,1,1,1,0,0,,0,1,6,3,3,void
1969,49902,FullMonthNameToken,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.FullMonthNameToken.FullMonthNameToken,"ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.FullMonthNameToken.FullMonthNameToken (int,ANY*)",main\cpp\simpledateformat.cpp,"FullMonthNameToken( int width, const std::locale* locale) : names( 12 )
		{
			renderFacet(locale, PatternToken::incrementMonth, 'B', 0x42, ""%B"", names);
		}",317.0,320.0,3.0,3.0,4.0,1,1,3,3,0,2,1,1,0,1,,0,1,4,2,2,ANY
1970,49917,format,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.FullMonthNameToken.format,"void LOG4CXX_NS.helpers.SimpleDateFormatImpl.FullMonthNameToken.format (LogString,apr_time_exp_t,Pool)",main\cpp\simpledateformat.cpp,"void format( LogString& s, const apr_time_exp_t& tm, Pool& /* p */ ) const
		{
			s.append( names[tm.tm_mon] );
		}",322.0,325.0,3.0,3.0,4.0,3,2,3,3,0,1,1,1,0,0,,0,1,6,3,3,void
1971,49935,WeekInYearToken,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.WeekInYearToken.WeekInYearToken,ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.WeekInYearToken.WeekInYearToken (int),main\cpp\simpledateformat.cpp,"WeekInYearToken( int width1 ) : NumericToken( width1 )
		{
		}",336.0,338.0,3.0,3.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1972,49940,getField,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.WeekInYearToken.getField,int LOG4CXX_NS.helpers.SimpleDateFormatImpl.WeekInYearToken.getField (apr_time_exp_t),main\cpp\simpledateformat.cpp,"int getField( const apr_time_exp_t& tm ) const
		{
			return tm.tm_yday / 7;
		}",340.0,343.0,3.0,3.0,4.0,2,2,1,1,0,0,1,1,0,0,,0,0,2,1,1,int
1973,49952,WeekInMonthToken,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.WeekInMonthToken.WeekInMonthToken,ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.WeekInMonthToken.WeekInMonthToken (int),main\cpp\simpledateformat.cpp,"WeekInMonthToken( int width1 ) : NumericToken( width1 )
		{
		}",351.0,353.0,3.0,3.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1974,49957,getField,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.WeekInMonthToken.getField,int LOG4CXX_NS.helpers.SimpleDateFormatImpl.WeekInMonthToken.getField (apr_time_exp_t),main\cpp\simpledateformat.cpp,"int getField( const apr_time_exp_t& tm ) const
		{
			return tm.tm_mday / 7;
		}",355.0,358.0,3.0,3.0,4.0,2,2,1,1,0,0,1,1,0,0,,0,0,2,1,1,int
1975,49969,DayInMonthToken,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.DayInMonthToken.DayInMonthToken,ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.DayInMonthToken.DayInMonthToken (int),main\cpp\simpledateformat.cpp,"DayInMonthToken( int width1 ) : NumericToken( width1 )
		{
		}",366.0,368.0,3.0,3.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1976,49974,getField,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.DayInMonthToken.getField,int LOG4CXX_NS.helpers.SimpleDateFormatImpl.DayInMonthToken.getField (apr_time_exp_t),main\cpp\simpledateformat.cpp,"int getField( const apr_time_exp_t& tm ) const
		{
			return tm.tm_mday;
		}",370.0,373.0,3.0,3.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,2,1,1,int
1977,49984,DayInYearToken,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.DayInYearToken.DayInYearToken,ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.DayInYearToken.DayInYearToken (int),main\cpp\simpledateformat.cpp,"DayInYearToken( int width1 ) : NumericToken( width1 )
		{
		}",381.0,383.0,3.0,3.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1978,49989,getField,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.DayInYearToken.getField,int LOG4CXX_NS.helpers.SimpleDateFormatImpl.DayInYearToken.getField (apr_time_exp_t),main\cpp\simpledateformat.cpp,"int getField( const apr_time_exp_t& tm ) const
		{
			return tm.tm_yday;
		}",385.0,388.0,3.0,3.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,2,1,1,int
1979,49999,DayOfWeekInMonthToken,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.DayOfWeekInMonthToken.DayOfWeekInMonthToken,ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.DayOfWeekInMonthToken.DayOfWeekInMonthToken (int),main\cpp\simpledateformat.cpp,"DayOfWeekInMonthToken( int width1 ) : NumericToken( width1 )
		{
		}",396.0,398.0,3.0,3.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1980,50004,getField,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.DayOfWeekInMonthToken.getField,int LOG4CXX_NS.helpers.SimpleDateFormatImpl.DayOfWeekInMonthToken.getField (apr_time_exp_t),main\cpp\simpledateformat.cpp,"int getField( const apr_time_exp_t& /* tm */ ) const
		{
			return -1;
		}",400.0,403.0,3.0,3.0,4.0,1,1,0,0,0,0,1,1,0,0,,0,0,2,1,1,int
1981,50013,AbbreviatedDayNameToken,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.AbbreviatedDayNameToken.AbbreviatedDayNameToken,"ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.AbbreviatedDayNameToken.AbbreviatedDayNameToken (int,ANY*)",main\cpp\simpledateformat.cpp,"AbbreviatedDayNameToken( int width, const std::locale* locale) : names( 7 )
		{
			renderFacet(locale, PatternToken::incrementDay, 'a', 0x61, ""%a"", names);
		}",411.0,414.0,3.0,3.0,4.0,1,1,3,3,0,2,1,1,0,1,,0,1,4,2,2,ANY
1982,50028,format,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.AbbreviatedDayNameToken.format,"void LOG4CXX_NS.helpers.SimpleDateFormatImpl.AbbreviatedDayNameToken.format (LogString,apr_time_exp_t,Pool)",main\cpp\simpledateformat.cpp,"void format( LogString& s, const apr_time_exp_t& tm, Pool& /* p */ ) const
		{
			s.append( names[tm.tm_wday] );
		}",416.0,419.0,3.0,3.0,4.0,3,2,3,3,0,1,1,1,0,0,,0,1,6,3,3,void
1983,50046,FullDayNameToken,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.FullDayNameToken.FullDayNameToken,"ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.FullDayNameToken.FullDayNameToken (int,ANY*)",main\cpp\simpledateformat.cpp,"FullDayNameToken( int width, const std::locale* locale) : names( 7 )
		{
			renderFacet(locale, PatternToken::incrementDay, 'A', 0x41, ""%A"", names);
		}",431.0,434.0,3.0,3.0,4.0,1,1,3,3,0,2,1,1,0,1,,0,1,4,2,2,ANY
1984,50061,format,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.FullDayNameToken.format,"void LOG4CXX_NS.helpers.SimpleDateFormatImpl.FullDayNameToken.format (LogString,apr_time_exp_t,Pool)",main\cpp\simpledateformat.cpp,"void format( LogString& s, const apr_time_exp_t& tm, Pool& /* p */ ) const
		{
			s.append( names[tm.tm_wday] );
		}",436.0,439.0,3.0,3.0,4.0,3,2,3,3,0,1,1,1,0,0,,0,1,6,3,3,void
1985,50079,MilitaryHourToken,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.MilitaryHourToken.MilitaryHourToken,"ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.MilitaryHourToken.MilitaryHourToken (int,int)",main\cpp\simpledateformat.cpp,"MilitaryHourToken( int width1, int offset1 ) : NumericToken( width1 ), offset( offset1 )
		{
		}",451.0,453.0,3.0,3.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ANY
1986,50085,getField,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.MilitaryHourToken.getField,int LOG4CXX_NS.helpers.SimpleDateFormatImpl.MilitaryHourToken.getField (apr_time_exp_t),main\cpp\simpledateformat.cpp,"int getField( const apr_time_exp_t& tm ) const
		{
			return tm.tm_hour + offset;
		}",455.0,458.0,3.0,3.0,4.0,2,2,2,2,0,1,1,1,0,0,,0,1,2,1,1,int
1987,50098,HourToken,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.HourToken.HourToken,"ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.HourToken.HourToken (int,int)",main\cpp\simpledateformat.cpp,"HourToken( int width1, int /* offset1 */ ) : NumericToken( width1 ), offset( 0 )
		{
		}",469.0,471.0,3.0,3.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ANY
1988,50104,getField,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.HourToken.getField,int LOG4CXX_NS.helpers.SimpleDateFormatImpl.HourToken.getField (apr_time_exp_t),main\cpp\simpledateformat.cpp,"int getField( const apr_time_exp_t& tm ) const
		{
			return ( ( tm.tm_hour + 12 - offset ) % 12 ) + offset;
		}",473.0,476.0,3.0,3.0,4.0,5,4,3,2,0,2,1,1,0,0,,0,2,2,1,1,int
1989,50123,MinuteToken,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.MinuteToken.MinuteToken,ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.MinuteToken.MinuteToken (int),main\cpp\simpledateformat.cpp,"MinuteToken( int width1 ) : NumericToken( width1 )
		{
		}",487.0,489.0,3.0,3.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1990,50128,getField,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.MinuteToken.getField,int LOG4CXX_NS.helpers.SimpleDateFormatImpl.MinuteToken.getField (apr_time_exp_t),main\cpp\simpledateformat.cpp,"int getField( const apr_time_exp_t& tm ) const
		{
			return tm.tm_min;
		}",491.0,494.0,3.0,3.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,2,1,1,int
1991,50138,SecondToken,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.SecondToken.SecondToken,ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.SecondToken.SecondToken (int),main\cpp\simpledateformat.cpp,"SecondToken( int width1 ) : NumericToken( width1 )
		{
		}",502.0,504.0,3.0,3.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1992,50143,getField,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.SecondToken.getField,int LOG4CXX_NS.helpers.SimpleDateFormatImpl.SecondToken.getField (apr_time_exp_t),main\cpp\simpledateformat.cpp,"int getField( const apr_time_exp_t& tm ) const
		{
			return tm.tm_sec;
		}",506.0,509.0,3.0,3.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,2,1,1,int
1993,50153,MillisecondToken,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.MillisecondToken.MillisecondToken,ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.MillisecondToken.MillisecondToken (int),main\cpp\simpledateformat.cpp,"MillisecondToken( int width1 ) : NumericToken( width1 )
		{
		}",517.0,519.0,3.0,3.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1994,50158,getField,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.MillisecondToken.getField,int LOG4CXX_NS.helpers.SimpleDateFormatImpl.MillisecondToken.getField (apr_time_exp_t),main\cpp\simpledateformat.cpp,"int getField( const apr_time_exp_t& tm ) const
		{
			return tm.tm_usec / 1000;
		}",521.0,524.0,3.0,3.0,4.0,2,2,1,1,0,0,1,1,0,0,,0,0,2,1,1,int
1995,50170,MicrosecondToken,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.MicrosecondToken.MicrosecondToken,ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.MicrosecondToken.MicrosecondToken (int),main\cpp\simpledateformat.cpp,"MicrosecondToken( int width1 ) : NumericToken( width1 )
		{
		}",532.0,534.0,3.0,3.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
1996,50175,getField,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.MicrosecondToken.getField,int LOG4CXX_NS.helpers.SimpleDateFormatImpl.MicrosecondToken.getField (apr_time_exp_t),main\cpp\simpledateformat.cpp,"int getField( const apr_time_exp_t& tm ) const
		{
			return tm.tm_usec;
		}",536.0,539.0,3.0,3.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,2,1,1,int
1997,50185,AMPMToken,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.AMPMToken.AMPMToken,"ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.AMPMToken.AMPMToken (int,ANY*)",main\cpp\simpledateformat.cpp,"AMPMToken( int width, const std::locale* locale) : names( 2 )
		{
			renderFacet(locale, PatternToken::incrementHalfDay, 'p', 0x70, ""%p"", names);
		}",547.0,550.0,3.0,3.0,4.0,1,1,3,3,0,2,1,1,0,1,,0,1,4,2,2,ANY
1998,50200,format,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.AMPMToken.format,"void LOG4CXX_NS.helpers.SimpleDateFormatImpl.AMPMToken.format (LogString,apr_time_exp_t,Pool)",main\cpp\simpledateformat.cpp,"void format( LogString& s, const apr_time_exp_t& tm, Pool& /* p */ ) const
		{
			s.append( names[tm.tm_hour / 12] );
		}",552.0,555.0,3.0,3.0,4.0,4,3,3,3,0,1,1,1,0,0,,0,1,6,3,3,void
1999,50220,GeneralTimeZoneToken,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.GeneralTimeZoneToken.GeneralTimeZoneToken,ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.GeneralTimeZoneToken.GeneralTimeZoneToken (int),main\cpp\simpledateformat.cpp,"GeneralTimeZoneToken( int /* width */ )
		{
		}",566.0,568.0,3.0,3.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
2000,50225,format,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.GeneralTimeZoneToken.format,"void LOG4CXX_NS.helpers.SimpleDateFormatImpl.GeneralTimeZoneToken.format (LogString,apr_time_exp_t,Pool)",main\cpp\simpledateformat.cpp,"void format( LogString& s, const apr_time_exp_t&, Pool& /* p */ ) const
		{
			s.append(timeZone->getID());
		}",570.0,573.0,3.0,3.0,4.0,2,2,2,2,0,1,1,1,0,0,,0,1,6,3,3,void
2001,50240,setTimeZone,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.GeneralTimeZoneToken.setTimeZone,void LOG4CXX_NS.helpers.SimpleDateFormatImpl.GeneralTimeZoneToken.setTimeZone (TimeZonePtr),main\cpp\simpledateformat.cpp,"void setTimeZone( const TimeZonePtr& zone )
		{
			timeZone = zone;
		}",575.0,578.0,3.0,3.0,4.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
2002,50250,RFC822TimeZoneToken,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.RFC822TimeZoneToken.RFC822TimeZoneToken,ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.RFC822TimeZoneToken.RFC822TimeZoneToken (int),main\cpp\simpledateformat.cpp,"RFC822TimeZoneToken( int /* width */ )
		{
		}",589.0,591.0,3.0,3.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
2003,50255,format,1,LOG4CXX_NS.helpers.SimpleDateFormatImpl.RFC822TimeZoneToken.format,"void LOG4CXX_NS.helpers.SimpleDateFormatImpl.RFC822TimeZoneToken.format (LogString,apr_time_exp_t,Pool)",main\cpp\simpledateformat.cpp,"void format( LogString& s, const apr_time_exp_t& tm, Pool& p ) const
		{
			if ( tm.tm_gmtoff == 0 )
			{
				s.append( 1, (logchar) 0x5A /* 'Z'  */ );
			}
			else
			{
				apr_int32_t off = tm.tm_gmtoff;
				size_t basePos = s.length();
				s.append( LOG4CXX_STR( ""+0000"" ) );

				if ( off < 0 )
				{
					s[basePos] = 0x2D; // '-'
					off = -off;
				}

				LogString hours;
				StringHelper::toString( off / 3600, p, hours );
				size_t hourPos = basePos + 2;

				//
				//   assumes that point values for 0-9 are same between char and wchar_t
				//
				for ( size_t i = hours.length(); i-- > 0; )
				{
					s[hourPos--] = hours[i];
				}

				LogString min;
				StringHelper::toString( ( off % 3600 ) / 60, p, min );
				size_t minPos = basePos + 4;

				//
				//   assumes that point values for 0-9 are same between char and wchar_t
				//
				for ( size_t j = min.length(); j-- > 0; )
				{
					s[minPos--] = min[j];
				}
			}
		}",593.0,635.0,3.0,3.0,43.0,4,3,2,2,0,0,2,2,0,0,,0,0,6,3,3,void
2004,50390,addToken,1,SimpleDateFormat.addToken,"void SimpleDateFormat.addToken (logchar,int,ANY*,ANY)",main\cpp\simpledateformat.cpp,"void SimpleDateFormat::addToken(const logchar spec, const int repeat, const std::locale* locale,
	std::vector < PatternToken* >& pattern )
{
	PatternToken* token = NULL;

	switch ( spec )
	{
		case 0x47: // 'G'
			token = ( new EraToken( repeat, locale ) );
			break;

		case 0x79: // 'y'
			token = ( new YearToken( repeat ) );
			break;

		case 0x4D: // 'M'
			if ( repeat <= 2 )
			{
				token = ( new MonthToken( repeat ) );
			}
			else if ( repeat <= 3 )
			{
				token = ( new AbbreviatedMonthNameToken( repeat, locale ) );
			}
			else
			{
				token = ( new FullMonthNameToken( repeat, locale ) );
			}

			break;

		case 0x77: // 'w'
			token = ( new WeekInYearToken( repeat ) );
			break;

		case 0x57: // 'W'
			token = ( new WeekInMonthToken( repeat ) );
			break;

		case 0x44: // 'D'
			token = ( new DayInYearToken( repeat ) );
			break;

		case 0x64: // 'd'
			token = ( new DayInMonthToken( repeat ) );
			break;

		case 0x46: // 'F'
			token = ( new DayOfWeekInMonthToken( repea...",648.0,768.0,1.0,1.0,121.0,46,6,74,24,0,0,24,8,0,0,,0,0,8,4,4,void
2005,50631,parsePattern,1,SimpleDateFormat.parsePattern,"void SimpleDateFormat.parsePattern (LogString,ANY*,ANY)",main\cpp\simpledateformat.cpp,"void SimpleDateFormat::parsePattern( const LogString& fmt, const std::locale* locale,
	std::vector < PatternToken* >& pattern )
{
	if ( !fmt.empty() )
	{
		LogString::const_iterator iter = fmt.begin();
		int repeat = 1;
		logchar prevChar = * iter;

		for ( iter++; iter != fmt.end(); iter++ )
		{
			if ( * iter == prevChar )
			{
				repeat++;
			}
			else
			{
				addToken( prevChar, repeat, locale, pattern );
				prevChar = * iter;
				repeat = 1;
			}
		}

		addToken( prevChar, repeat, locale, pattern );
	}
}",771.0,796.0,1.0,1.0,26.0,13,7,16,6,0,0,4,7,0,0,,0,0,6,3,3,void
2006,50702,SimpleDateFormatPrivate,1,SimpleDateFormatPrivate.SimpleDateFormatPrivate,ANY SimpleDateFormatPrivate.SimpleDateFormatPrivate (),main\cpp\simpledateformat.cpp,"SimpleDateFormatPrivate() :
		timeZone(TimeZone::getDefault())
	{}",800.0,802.0,2.0,3.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2007,50708,SimpleDateFormat,1,SimpleDateFormat.SimpleDateFormat,ANY SimpleDateFormat.SimpleDateFormat (LogString),main\cpp\simpledateformat.cpp,"SimpleDateFormat::SimpleDateFormat( const LogString& fmt, const std::locale* locale ) : m_priv(std::make_unique<SimpleDateFormatPrivate>())
{
	parsePattern( fmt, locale, m_priv->pattern );

	for ( PatternTokenList::iterator iter = m_priv->pattern.begin(); iter != m_priv->pattern.end(); iter++ )
	{
		( * iter )->setTimeZone( m_priv->timeZone );
	}
}",830.0,838.0,1.0,1.0,9.0,10,5,9,4,0,0,2,2,0,0,,0,0,4,2,2,ANY
2008,50791,~SimpleDateFormat,1,SimpleDateFormat.~SimpleDateFormat,ANY SimpleDateFormat.~SimpleDateFormat (),main\cpp\simpledateformat.cpp,"SimpleDateFormat::~SimpleDateFormat()
{
	for ( PatternTokenList::iterator iter = m_priv->pattern.begin(); iter != m_priv->pattern.end(); iter++ )
	{
		delete * iter;
	}
}",841.0,847.0,1.0,1.0,7.0,8,6,5,2,0,0,2,2,0,0,,0,0,0,0,0,ANY
2009,50820,format,1,SimpleDateFormat.format,"void SimpleDateFormat.format (LogString,log4cxx_time_t,Pool)",main\cpp\simpledateformat.cpp,"void SimpleDateFormat::format( LogString& s, log4cxx_time_t time, Pool& p ) const
{
	apr_time_exp_t exploded;
	apr_status_t stat = m_priv->timeZone->explode( & exploded, time );

	if ( stat == APR_SUCCESS )
	{
		for ( PatternTokenList::const_iterator iter = m_priv->pattern.begin(); iter != m_priv->pattern.end(); iter++ )
		{
			( * iter )->format( s, exploded, p );
		}
	}
}",850.0,862.0,1.0,1.0,13.0,13,7,14,8,0,0,3,4,0,0,,0,0,6,3,3,void
2010,50875,setTimeZone,1,SimpleDateFormat.setTimeZone,void SimpleDateFormat.setTimeZone (TimeZonePtr),main\cpp\simpledateformat.cpp,"void SimpleDateFormat::setTimeZone( const TimeZonePtr& zone )
{
	m_priv->timeZone = zone;
}",864.0,867.0,1.0,1.0,4.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
2011,50900,format,1,SimpleLayout.format,"void SimpleLayout.format (LogString,ANY,ANY)",main\cpp\simplelayout.cpp,"void SimpleLayout::format(LogString& output,
	const spi::LoggingEventPtr& event,
	LOG4CXX_NS::helpers::Pool&) const
{
	output.append(event->getLevel()->toString());
	output.append(LOG4CXX_STR("" - ""));
	output.append(event->getRenderedMessage());
	output.append(LOG4CXX_EOL);
}",29.0,37.0,1.0,1.0,9.0,7,2,7,3,0,0,1,1,0,0,,0,0,6,3,3,void
2012,50950,SizeBasedTriggeringPolicy,1,SizeBasedTriggeringPolicy.SizeBasedTriggeringPolicy,ANY SizeBasedTriggeringPolicy.SizeBasedTriggeringPolicy (),main\cpp\sizebasedtriggeringpolicy.cpp,"SizeBasedTriggeringPolicy::SizeBasedTriggeringPolicy()
	: maxFileSize(10 * 1024 * 1024)
{
}",28.0,31.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2013,50954,isTriggeringEvent,1,SizeBasedTriggeringPolicy.isTriggeringEvent,"bool SizeBasedTriggeringPolicy.isTriggeringEvent (Appender*,ANY,LogString,size_t)",main\cpp\sizebasedtriggeringpolicy.cpp,"bool SizeBasedTriggeringPolicy::isTriggeringEvent(Appender* /* appender */,
	const LOG4CXX_NS::spi::LoggingEventPtr& /* event */,
	const LogString& /* file */,
	size_t fileLength)
{
	return (fileLength >= maxFileSize);
}",33.0,39.0,1.0,1.0,7.0,1,1,2,2,0,0,1,1,0,0,,0,0,8,4,4,bool
2014,50966,getMaxFileSize,1,SizeBasedTriggeringPolicy.getMaxFileSize,size_t SizeBasedTriggeringPolicy.getMaxFileSize (),main\cpp\sizebasedtriggeringpolicy.cpp,"size_t SizeBasedTriggeringPolicy::getMaxFileSize()
{
	return maxFileSize;
}",41.0,44.0,1.0,1.0,4.0,0,0,1,1,0,0,1,1,0,0,,0,0,0,0,0,size_t
2015,50972,setMaxFileSize,1,SizeBasedTriggeringPolicy.setMaxFileSize,void SizeBasedTriggeringPolicy.setMaxFileSize (size_t),main\cpp\sizebasedtriggeringpolicy.cpp,"void SizeBasedTriggeringPolicy::setMaxFileSize(size_t l)
{
	maxFileSize = l;
}",46.0,49.0,1.0,1.0,4.0,1,1,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
2016,50980,activateOptions,1,SizeBasedTriggeringPolicy.activateOptions,void SizeBasedTriggeringPolicy.activateOptions (Pool),main\cpp\sizebasedtriggeringpolicy.cpp,"void SizeBasedTriggeringPolicy::activateOptions(Pool& /* p */)
{
}",51.0,53.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
2017,50985,setOption,1,SizeBasedTriggeringPolicy.setOption,"void SizeBasedTriggeringPolicy.setOption (LogString,LogString)",main\cpp\sizebasedtriggeringpolicy.cpp,"void SizeBasedTriggeringPolicy::setOption(const LogString& option, const LogString& value)
{
	if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""MAXFILESIZE""),
			LOG4CXX_STR(""maxfilesize"")))
	{
		maxFileSize = OptionConverter::toFileSize(value, 10 * 1024 * 1024);
	}
}",55.0,63.0,1.0,1.0,9.0,5,3,5,5,0,2,2,2,1,2,,0,2,4,2,2,void
2018,51059,SMTPPriv,1,SMTPPriv.SMTPPriv,ANY SMTPPriv.SMTPPriv (),main\cpp\smtpappender.cpp,"SMTPPriv(spi::TriggeringEventEvaluatorPtr evaluator) :
		AppenderSkeletonPrivate(),
		smtpPort(25),
		bufferSize(512),
		locationInfo(false),
		cb(bufferSize),
		evaluator(evaluator) {}",393.0,399.0,2.0,25.0,7.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
2019,51081,DefaultEvaluator,1,DefaultEvaluator.DefaultEvaluator,ANY DefaultEvaluator.DefaultEvaluator (),main\cpp\smtpappender.cpp,"DefaultEvaluator::DefaultEvaluator()
{
}",418.0,420.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2020,51085,isTriggeringEvent,1,DefaultEvaluator.isTriggeringEvent,bool DefaultEvaluator.isTriggeringEvent (ANY),main\cpp\smtpappender.cpp,"bool DefaultEvaluator::isTriggeringEvent(const spi::LoggingEventPtr& event)
{
	return event->getLevel()->isGreaterOrEqual(Level::getError());
}",422.0,425.0,1.0,1.0,4.0,3,2,2,2,0,1,1,1,0,0,,0,0,2,1,1,bool
2021,51102,SMTPAppender,1,SMTPAppender.SMTPAppender,ANY SMTPAppender.SMTPAppender (),main\cpp\smtpappender.cpp,"SMTPAppender::SMTPAppender(spi::TriggeringEventEvaluatorPtr evaluator)
	: AppenderSkeleton (std::make_unique<SMTPPriv>(evaluator))
{
}",435.0,438.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
2022,51111,~SMTPAppender,1,SMTPAppender.~SMTPAppender,ANY SMTPAppender.~SMTPAppender (),main\cpp\smtpappender.cpp,"SMTPAppender::~SMTPAppender()
{
	finalize();
}",440.0,443.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2023,51116,requiresLayout,1,SMTPAppender.requiresLayout,bool SMTPAppender.requiresLayout (),main\cpp\smtpappender.cpp,"bool SMTPAppender::requiresLayout() const
{
	return true;
}",445.0,448.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,bool
2024,51122,getFrom,1,SMTPAppender.getFrom,LogString SMTPAppender.getFrom (),main\cpp\smtpappender.cpp,"LogString SMTPAppender::getFrom() const
{
	return _priv->from;
}",450.0,453.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,LogString
2025,51137,setFrom,1,SMTPAppender.setFrom,void SMTPAppender.setFrom (LogString),main\cpp\smtpappender.cpp,"void SMTPAppender::setFrom(const LogString& newVal)
{
	_priv->from = newVal;
}",455.0,458.0,1.0,1.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
2026,51154,getSubject,1,SMTPAppender.getSubject,LogString SMTPAppender.getSubject (),main\cpp\smtpappender.cpp,"LogString SMTPAppender::getSubject() const
{
	return _priv->subject;
}",461.0,464.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,LogString
2027,51169,setSubject,1,SMTPAppender.setSubject,void SMTPAppender.setSubject (LogString),main\cpp\smtpappender.cpp,"void SMTPAppender::setSubject(const LogString& newVal)
{
	_priv->subject = newVal;
}",466.0,469.0,1.0,1.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
2028,51186,getSMTPHost,1,SMTPAppender.getSMTPHost,LogString SMTPAppender.getSMTPHost (),main\cpp\smtpappender.cpp,"LogString SMTPAppender::getSMTPHost() const
{
	return _priv->smtpHost;
}",471.0,474.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,LogString
2029,51201,setSMTPHost,1,SMTPAppender.setSMTPHost,void SMTPAppender.setSMTPHost (LogString),main\cpp\smtpappender.cpp,"void SMTPAppender::setSMTPHost(const LogString& newVal)
{
	_priv->smtpHost = newVal;
}",476.0,479.0,1.0,1.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
2030,51218,getSMTPPort,1,SMTPAppender.getSMTPPort,int SMTPAppender.getSMTPPort (),main\cpp\smtpappender.cpp,"int SMTPAppender::getSMTPPort() const
{
	return _priv->smtpPort;
}",481.0,484.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,int
2031,51233,setSMTPPort,1,SMTPAppender.setSMTPPort,void SMTPAppender.setSMTPPort (int),main\cpp\smtpappender.cpp,"void SMTPAppender::setSMTPPort(int newVal)
{
	_priv->smtpPort = newVal;
}",486.0,489.0,1.0,1.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
2032,51250,getLocationInfo,1,SMTPAppender.getLocationInfo,bool SMTPAppender.getLocationInfo (),main\cpp\smtpappender.cpp,"bool SMTPAppender::getLocationInfo() const
{
	return _priv->locationInfo;
}",491.0,494.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,bool
2033,51265,setLocationInfo,1,SMTPAppender.setLocationInfo,void SMTPAppender.setLocationInfo (bool),main\cpp\smtpappender.cpp,"void SMTPAppender::setLocationInfo(bool newVal)
{
	_priv->locationInfo = newVal;
}",496.0,499.0,1.0,1.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
2034,51282,getSMTPUsername,1,SMTPAppender.getSMTPUsername,LogString SMTPAppender.getSMTPUsername (),main\cpp\smtpappender.cpp,"LogString SMTPAppender::getSMTPUsername() const
{
	return _priv->smtpUsername;
}",501.0,504.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,LogString
2035,51297,setSMTPUsername,1,SMTPAppender.setSMTPUsername,void SMTPAppender.setSMTPUsername (LogString),main\cpp\smtpappender.cpp,"void SMTPAppender::setSMTPUsername(const LogString& newVal)
{
	_priv->smtpUsername = newVal;
}",506.0,509.0,1.0,1.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
2036,51314,getSMTPPassword,1,SMTPAppender.getSMTPPassword,LogString SMTPAppender.getSMTPPassword (),main\cpp\smtpappender.cpp,"LogString SMTPAppender::getSMTPPassword() const
{
	return _priv->smtpPassword;
}",511.0,514.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,LogString
2037,51329,setSMTPPassword,1,SMTPAppender.setSMTPPassword,void SMTPAppender.setSMTPPassword (LogString),main\cpp\smtpappender.cpp,"void SMTPAppender::setSMTPPassword(const LogString& newVal)
{
	_priv->smtpPassword = newVal;
}",516.0,519.0,1.0,1.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
2038,51346,setOption,1,SMTPAppender.setOption,"void SMTPAppender.setOption (LogString,LogString)",main\cpp\smtpappender.cpp,"void SMTPAppender::setOption(const LogString& option,
	const LogString& value)
{
	if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""BUFFERSIZE""), LOG4CXX_STR(""buffersize"")))
	{
		setBufferSize(OptionConverter::toInt(value, 512));
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""EVALUATORCLASS""), LOG4CXX_STR(""evaluatorclass"")))
	{
		setEvaluatorClass(value);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""FROM""), LOG4CXX_STR(""from"")))
	{
		setFrom(value);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""SMTPHOST""), LOG4CXX_STR(""smtphost"")))
	{
		setSMTPHost(value);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""SMTPUSERNAME""), LOG4CXX_STR(""smtpusername"")))
	{
		setSMTPUsername(value);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""SMTPPASSWORD""), LOG4CXX_STR(""smtppassword"")))
	{
		setSMTPPassword(value);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""SUBJECT""), LOG4CXX_STR(""su...",525.0,576.0,1.0,1.0,52.0,2,1,4,4,0,2,2,2,1,2,,0,1,4,2,2,void
2039,51533,asciiCheck,1,SMTPAppender.asciiCheck,"bool SMTPAppender.asciiCheck (LogString,LogString)",main\cpp\smtpappender.cpp,"bool SMTPAppender::asciiCheck(const LogString& value, const LogString& field)
{
	for (LogString::const_iterator iter = value.begin();
		iter != value.end();
		iter++)
	{
		if (0x7F < (unsigned int) *iter)
		{
			LogLog::warn(field + LOG4CXX_STR("" contains non-ASCII character""));
			return false;
		}
	}

	return true;
}",579.0,593.0,1.0,1.0,15.0,9,7,7,4,0,1,3,4,0,1,,0,0,4,2,2,bool
2040,51577,activateOptions,1,SMTPAppender.activateOptions,void SMTPAppender.activateOptions (Pool),main\cpp\smtpappender.cpp,"void SMTPAppender::activateOptions(Pool& p)
{
	bool activate = true;

	if (_priv->layout == 0)
	{
		_priv->errorHandler->error(LOG4CXX_STR(""No layout set for appender named ["") + _priv->name + LOG4CXX_STR(""].""));
		activate = false;
	}

	if (_priv->evaluator == 0)
	{
		_priv->errorHandler->error(LOG4CXX_STR(""No TriggeringEventEvaluator is set for appender ["") +
			_priv->name + LOG4CXX_STR(""].""));
		activate = false;
	}

	if (_priv->smtpHost.empty())
	{
		_priv->errorHandler->error(LOG4CXX_STR(""No smtpHost is set for appender ["") +
			_priv->name + LOG4CXX_STR(""].""));
		activate = false;
	}

	if (_priv->to.empty() && _priv->cc.empty() && _priv->bcc.empty())
	{
		_priv->errorHandler->error(LOG4CXX_STR(""No recipient address is set for appender ["") +
			_priv->name + LOG4CXX_STR(""].""));
		activate = false;
	}

	activate &= asciiCheck(_priv->to, LOG4CXX_STR(""to""));
	activate &= asciiCheck(_priv->cc, LOG4CXX_STR(""cc""));
	activate &= asciiCheck(_priv->bcc, LOG4CXX_STR(""bcc""));
	activate &...",598.0,643.0,1.0,5.0,46.0,85,7,32,4,0,0,6,6,0,0,,0,0,2,1,1,void
2041,51884,append,1,SMTPAppender.append,"void SMTPAppender.append (ANY,Pool)",main\cpp\smtpappender.cpp,"void SMTPAppender::append(const spi::LoggingEventPtr& event, Pool& p)
{
	if (!checkEntryConditions())
	{
		return;
	}

	LogString ndc;
	event->getNDC(ndc);
	event->getThreadName();
	// Get a copy of this thread's MDC.
	event->getMDCCopy();

	_priv->cb.add(event);

	if (_priv->evaluator->isTriggeringEvent(event))
	{
		sendBuffer(p);
	}
}",649.0,668.0,1.0,1.0,20.0,12,4,9,4,0,0,3,3,0,0,,0,0,4,2,2,void
2042,51941,checkEntryConditions,1,SMTPAppender.checkEntryConditions,bool SMTPAppender.checkEntryConditions (),main\cpp\smtpappender.cpp,"bool SMTPAppender::checkEntryConditions()
{
#if LOG4CXX_HAVE_LIBESMTP

	if ((_priv->to.empty() && _priv->cc.empty() && _priv->bcc.empty()) || _priv->from.empty() || _priv->smtpHost.empty())
	{
		_priv->errorHandler->error(LOG4CXX_STR(""Message not configured.""));
		return false;
	}

	if (_priv->evaluator == 0)
	{
		_priv->errorHandler->error(LOG4CXX_STR(""No TriggeringEventEvaluator is set for appender ["") +
			_priv->name + LOG4CXX_STR(""].""));
		return false;
	}


	if (_priv->layout == 0)
	{
		_priv->errorHandler->error(LOG4CXX_STR(""No layout set for appender named ["") + _priv->name + LOG4CXX_STR(""].""));
		return false;
	}

	return true;
#else
	return false;
#endif
}",675.0,703.0,1.0,1.0,29.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,bool
2043,51947,close,1,SMTPAppender.close,void SMTPAppender.close (),main\cpp\smtpappender.cpp,"void SMTPAppender::close()
{
	_priv->closed = true;
}",707.0,710.0,1.0,1.0,4.0,4,4,1,1,0,0,1,1,0,0,,0,0,0,0,0,void
2044,51965,getTo,1,SMTPAppender.getTo,LogString SMTPAppender.getTo (),main\cpp\smtpappender.cpp,"LogString SMTPAppender::getTo() const
{
	return _priv->to;
}",712.0,715.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,LogString
2045,51980,setTo,1,SMTPAppender.setTo,void SMTPAppender.setTo (LogString),main\cpp\smtpappender.cpp,"void SMTPAppender::setTo(const LogString& addressStr)
{
	_priv->to = addressStr;
}",717.0,720.0,1.0,1.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
2046,51997,getCc,1,SMTPAppender.getCc,LogString SMTPAppender.getCc (),main\cpp\smtpappender.cpp,"LogString SMTPAppender::getCc() const
{
	return _priv->cc;
}",722.0,725.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,LogString
2047,52012,setCc,1,SMTPAppender.setCc,void SMTPAppender.setCc (LogString),main\cpp\smtpappender.cpp,"void SMTPAppender::setCc(const LogString& addressStr)
{
	_priv->cc = addressStr;
}",727.0,730.0,1.0,1.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
2048,52029,getBcc,1,SMTPAppender.getBcc,LogString SMTPAppender.getBcc (),main\cpp\smtpappender.cpp,"LogString SMTPAppender::getBcc() const
{
	return _priv->bcc;
}",732.0,735.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,LogString
2049,52044,setBcc,1,SMTPAppender.setBcc,void SMTPAppender.setBcc (LogString),main\cpp\smtpappender.cpp,"void SMTPAppender::setBcc(const LogString& addressStr)
{
	_priv->bcc = addressStr;
}",737.0,740.0,1.0,1.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
2050,52061,sendBuffer,1,SMTPAppender.sendBuffer,void SMTPAppender.sendBuffer (Pool),main\cpp\smtpappender.cpp,"void SMTPAppender::sendBuffer(Pool& p)
{
#if LOG4CXX_HAVE_LIBESMTP

	// Note: this code already owns the monitor for this
	// appender. This frees us from needing to synchronize on 'cb'.
	try
	{
		LogString sbuf;
		_priv->layout->appendHeader(sbuf, p);

		int len = _priv->cb.length();

		for (int i = 0; i < len; i++)
		{
			LoggingEventPtr event = _priv->cb.get();
			_priv->layout->format(sbuf, event, p);
		}

		_priv->layout->appendFooter(sbuf, p);

		SMTPSession session(_priv->smtpHost, _priv->smtpPort, _priv->smtpUsername, _priv->smtpPassword, p);

		SMTPMessage message(session, _priv->from, _priv->to, _priv->cc,
			_priv->bcc, _priv->subject, sbuf, p);

		session.send(p);

	}
	catch (std::exception& e)
	{
		LogLog::error(LOG4CXX_STR(""Error occured while sending e-mail notification.""), e);
	}

#endif
}",745.0,780.0,1.0,1.0,36.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
2051,52066,getEvaluatorClass,1,SMTPAppender.getEvaluatorClass,LogString SMTPAppender.getEvaluatorClass (),main\cpp\smtpappender.cpp,"LogString SMTPAppender::getEvaluatorClass()
{
	return _priv->evaluator == 0 ? LogString() : _priv->evaluator->getClass().getName();
}",785.0,788.0,1.0,8.0,4.0,10,5,2,1,0,0,1,1,0,0,,0,0,0,0,0,LogString
2052,52099,getEvaluator,1,SMTPAppender.getEvaluator,TriggeringEventEvaluatorPtr SMTPAppender.getEvaluator (),main\cpp\smtpappender.cpp,"LOG4CXX_NS::spi::TriggeringEventEvaluatorPtr SMTPAppender::getEvaluator() const
{
	return _priv->evaluator;
}",790.0,793.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,TriggeringEventEvaluatorPtr
2053,52114,setEvaluator,1,SMTPAppender.setEvaluator,void SMTPAppender.setEvaluator (ANY),main\cpp\smtpappender.cpp,"void SMTPAppender::setEvaluator(LOG4CXX_NS::spi::TriggeringEventEvaluatorPtr& trigger)
{
	_priv->evaluator = trigger;
}",795.0,798.0,1.0,1.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
2054,52133,setBufferSize,1,SMTPAppender.setBufferSize,void SMTPAppender.setBufferSize (int),main\cpp\smtpappender.cpp,"void SMTPAppender::setBufferSize(int sz)
{
	_priv->bufferSize = sz;
	_priv->cb.resize(sz);
}",807.0,811.0,1.0,1.0,5.0,8,4,4,2,0,0,1,1,0,0,,0,0,2,1,1,void
2055,52164,setEvaluatorClass,1,SMTPAppender.setEvaluatorClass,void SMTPAppender.setEvaluatorClass (LogString),main\cpp\smtpappender.cpp,"void SMTPAppender::setEvaluatorClass(const LogString& value)
{
	ObjectPtr obj = ObjectPtr(Loader::loadClass(value).newInstance());
	_priv->evaluator = LOG4CXX_NS::cast<TriggeringEventEvaluator>(obj);
}",820.0,824.0,1.0,1.0,5.0,10,6,7,6,0,1,1,1,0,1,,0,1,2,1,1,void
2056,52199,getBufferSize,1,SMTPAppender.getBufferSize,int SMTPAppender.getBufferSize (),main\cpp\smtpappender.cpp,"int SMTPAppender::getBufferSize() const
{
	return _priv->bufferSize;
}",826.0,829.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,int
2057,52231,Socket,1,Socket.Socket,ANY Socket.Socket (ANY),main\cpp\socket.cpp,"Socket::Socket(std::unique_ptr<Socket::SocketPrivate> priv) :
	m_priv(std::move(priv)){

}",29.0,32.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
2058,52236,~Socket,1,Socket.~Socket,ANY Socket.~Socket (),main\cpp\socket.cpp,"Socket::~Socket()
{
}",34.0,36.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2059,52240,getInetAddress,1,Socket.getInetAddress,InetAddressPtr Socket.getInetAddress (),main\cpp\socket.cpp,"InetAddressPtr Socket::getInetAddress() const
{
	return m_priv->address;
}",38.0,41.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,InetAddressPtr
2060,52248,getPort,1,Socket.getPort,int Socket.getPort (),main\cpp\socket.cpp,"int Socket::getPort() const
{
	return m_priv->port;
}",43.0,46.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,int
2061,52256,create,1,Socket.create,"SocketUniquePtr Socket.create (InetAddressPtr,int)",main\cpp\socket.cpp,"SocketUniquePtr Socket::create(InetAddressPtr& address, int port){
	return std::make_unique<APRSocket>(address, port);
}",48.0,50.0,1.0,1.0,3.0,5,5,4,4,1,0,1,1,0,0,,0,0,4,2,2,SocketUniquePtr
2062,52302,SocketAppenderSkeleton,1,SocketAppenderSkeleton.SocketAppenderSkeleton,"ANY SocketAppenderSkeleton.SocketAppenderSkeleton (int,int)",main\cpp\socketappenderskeleton.cpp,"SocketAppenderSkeleton::SocketAppenderSkeleton(std::unique_ptr<SocketAppenderSkeletonPriv> priv)
	:  AppenderSkeleton (std::move(priv))
{
}",53.0,56.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
2063,52327,~SocketAppenderSkeleton,1,SocketAppenderSkeleton.~SocketAppenderSkeleton,ANY SocketAppenderSkeleton.~SocketAppenderSkeleton (),main\cpp\socketappenderskeleton.cpp,"SocketAppenderSkeleton::~SocketAppenderSkeleton()
{
	finalize();
}",58.0,61.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2064,52332,activateOptions,1,SocketAppenderSkeleton.activateOptions,void SocketAppenderSkeleton.activateOptions (Pool),main\cpp\socketappenderskeleton.cpp,"void SocketAppenderSkeleton::activateOptions(Pool& p)
{
	AppenderSkeleton::activateOptions(p);
	connect(p);
}",63.0,67.0,1.0,1.0,5.0,1,1,3,2,0,0,1,1,0,0,,0,0,2,1,1,void
2065,52344,close,1,SocketAppenderSkeleton.close,void SocketAppenderSkeleton.close (),main\cpp\socketappenderskeleton.cpp,"void SocketAppenderSkeleton::close()
{
	std::lock_guard<std::recursive_mutex> lock(_priv->mutex);

	if (_priv->closed)
	{
		return;
	}

	_priv->closed = true;
	cleanUp(_priv->pool);

	{
		std::unique_lock<std::mutex> lock2(_priv->interrupt_mutex);
		_priv->interrupt.notify_all();
	}

	if ( _priv->thread.joinable() )
	{
		_priv->thread.join();
	}
}",69.0,90.0,1.0,44.0,22.0,36,6,12,2,0,0,3,3,0,0,,0,0,0,0,0,void
2066,52464,connect,1,SocketAppenderSkeleton.connect,void SocketAppenderSkeleton.connect (Pool),main\cpp\socketappenderskeleton.cpp,"void SocketAppenderSkeleton::connect(Pool& p)
{
	if (_priv->address == 0)
	{
		LogLog::error(LogString(LOG4CXX_STR(""No remote host is set for Appender named \"""")) +
			_priv->name + LOG4CXX_STR(""\"".""));
	}
	else
	{
		cleanUp(p);

		try
		{
			LogString msg(LOG4CXX_STR(""Connecting to ["")
				+ _priv->address->toString() + LOG4CXX_STR("":""));
			StringHelper::toString(_priv->port, p, msg);
			msg += LOG4CXX_STR(""]."");
			LogLog::debug(msg);
			SocketPtr socket = Socket::create(_priv->address, _priv->port);
			setSocket(socket, p);
		}
		catch (SocketException& e)
		{
			LogString msg = LOG4CXX_STR(""Could not connect to ["")
				+ _priv->address->toString() + LOG4CXX_STR("":"");
			StringHelper::toString(_priv->port, p, msg);
			msg += LOG4CXX_STR(""]."");

			fireConnector(); // fire the connector thread
			LogLog::error(msg, e);
		}
	}
}",92.0,124.0,1.0,5.0,33.0,10,5,3,2,0,1,2,2,0,1,,0,0,2,1,1,void
2067,52636,setOption,1,SocketAppenderSkeleton.setOption,"void SocketAppenderSkeleton.setOption (LogString,LogString)",main\cpp\socketappenderskeleton.cpp,"void SocketAppenderSkeleton::setOption(const LogString& option, const LogString& value)
{
	if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""REMOTEHOST""), LOG4CXX_STR(""remotehost"")))
	{
		setRemoteHost(value);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""PORT""), LOG4CXX_STR(""port"")))
	{
		setPort(OptionConverter::toInt(value, getDefaultPort()));
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""LOCATIONINFO""), LOG4CXX_STR(""locationinfo"")))
	{
		setLocationInfo(OptionConverter::toBoolean(value, false));
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""RECONNECTIONDELAY""), LOG4CXX_STR(""reconnectiondelay"")))
	{
		setReconnectionDelay(OptionConverter::toInt(value, getDefaultDelay()));
	}
	else
	{
		AppenderSkeleton::setOption(option, value);
	}
}",126.0,148.0,1.0,1.0,23.0,1,1,3,3,0,1,2,2,1,1,,0,1,4,2,2,void
2068,52723,fireConnector,1,SocketAppenderSkeleton.fireConnector,void SocketAppenderSkeleton.fireConnector (),main\cpp\socketappenderskeleton.cpp,"void SocketAppenderSkeleton::fireConnector()
{
	std::lock_guard<std::recursive_mutex> lock(_priv->mutex);

	if ( !_priv->thread.joinable() )
	{
		LogLog::debug(LOG4CXX_STR(""Connector thread not alive: starting monitor.""));

		_priv->thread = ThreadUtility::instance()->createThread( LOG4CXX_STR(""SocketAppend""), &SocketAppenderSkeleton::monitor, this );
	}
}",150.0,160.0,1.0,44.0,11.0,21,8,8,5,0,1,2,2,0,1,,0,0,0,0,0,void
2069,52793,monitor,1,SocketAppenderSkeleton.monitor,void SocketAppenderSkeleton.monitor (),main\cpp\socketappenderskeleton.cpp,"void SocketAppenderSkeleton::monitor()
{
	Pool p;
	SocketPtr socket;

	while (!is_closed())
	{
		try
		{
			LogString msg(LOG4CXX_STR(""Attempting connection to ["")
				+ _priv->address->toString() + LOG4CXX_STR("":""));
			StringHelper::toString(_priv->port, p, msg);
			msg += LOG4CXX_STR(""]."");
			LogLog::debug(msg);
			socket = Socket::create(_priv->address, _priv->port);
			setSocket(socket, p);
			LogLog::debug(LOG4CXX_STR(""Connection established. Exiting connector thread.""));
			return;
		}
		catch (ConnectException& e)
		{
			LogLog::error(LOG4CXX_STR(""Remote host "")
				+ _priv->address->toString()
				+ LOG4CXX_STR("" refused connection.""), e);
		}
		catch (IOException& e)
		{
			LogString msg(LOG4CXX_STR(""Could not connect to ["")
				+ _priv->address->toString() + LOG4CXX_STR("":""));
			StringHelper::toString(_priv->port, p, msg);
			msg += LOG4CXX_STR(""]."");
			LogLog::error(msg, e);
		}

		if (_priv->reconnectionDelay > 0)
		{
			LogString msg(LOG4CXX_STR(""Waiting ""));
			Str...",162.0,212.0,1.0,6.0,51.0,81,10,51,12,0,10,6,9,0,10,,0,1,0,0,0,void
2070,53099,is_closed,1,SocketAppenderSkeleton.is_closed,bool SocketAppenderSkeleton.is_closed (),main\cpp\socketappenderskeleton.cpp,"bool SocketAppenderSkeleton::is_closed()
{
	return _priv->closed;
}",214.0,217.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,bool
2071,53114,setRemoteHost,1,SocketAppenderSkeleton.setRemoteHost,void SocketAppenderSkeleton.setRemoteHost (LogString),main\cpp\socketappenderskeleton.cpp,"void SocketAppenderSkeleton::setRemoteHost(const LogString& host)
{
	_priv->address = helpers::InetAddress::getByName(host);
	_priv->remoteHost.assign(host);
}",219.0,223.0,1.0,1.0,5.0,10,4,6,4,0,0,1,1,0,0,,0,0,2,1,1,void
2072,53153,getRemoteHost,1,SocketAppenderSkeleton.getRemoteHost,LogString SocketAppenderSkeleton.getRemoteHost (),main\cpp\socketappenderskeleton.cpp,"const LogString& SocketAppenderSkeleton::getRemoteHost() const
{
	return _priv->remoteHost;
}",225.0,228.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,LogString
2073,53168,setPort,1,SocketAppenderSkeleton.setPort,void SocketAppenderSkeleton.setPort (int),main\cpp\socketappenderskeleton.cpp,"void SocketAppenderSkeleton::setPort(int port1)
{
	_priv->port = port1;
}",230.0,233.0,1.0,1.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
2074,53185,getPort,1,SocketAppenderSkeleton.getPort,int SocketAppenderSkeleton.getPort (),main\cpp\socketappenderskeleton.cpp,"int SocketAppenderSkeleton::getPort() const
{
	return _priv->port;
}",235.0,238.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,int
2075,53200,setLocationInfo,1,SocketAppenderSkeleton.setLocationInfo,void SocketAppenderSkeleton.setLocationInfo (bool),main\cpp\socketappenderskeleton.cpp,"void SocketAppenderSkeleton::setLocationInfo(bool locationInfo1)
{
	_priv->locationInfo = locationInfo1;
}",240.0,243.0,1.0,1.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
2076,53217,getLocationInfo,1,SocketAppenderSkeleton.getLocationInfo,bool SocketAppenderSkeleton.getLocationInfo (),main\cpp\socketappenderskeleton.cpp,"bool SocketAppenderSkeleton::getLocationInfo() const
{
	return _priv->locationInfo;
}",245.0,248.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,bool
2077,53232,setReconnectionDelay,1,SocketAppenderSkeleton.setReconnectionDelay,void SocketAppenderSkeleton.setReconnectionDelay (int),main\cpp\socketappenderskeleton.cpp,"void SocketAppenderSkeleton::setReconnectionDelay(int reconnectionDelay1)
{
	_priv->reconnectionDelay = reconnectionDelay1;
}",250.0,253.0,1.0,1.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
2078,53249,getReconnectionDelay,1,SocketAppenderSkeleton.getReconnectionDelay,int SocketAppenderSkeleton.getReconnectionDelay (),main\cpp\socketappenderskeleton.cpp,"int SocketAppenderSkeleton::getReconnectionDelay() const
{
	return _priv->reconnectionDelay;
}",255.0,258.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,int
2079,53286,SocketOutputStream,1,SocketOutputStream.SocketOutputStream,ANY SocketOutputStream.SocketOutputStream (SocketPtr),main\cpp\socketoutputstream.cpp,"SocketOutputStream::SocketOutputStream(const SocketPtr& socket1)
	: m_priv(std::make_unique<SocketOutputStreamPrivate>())
{
	m_priv->socket = socket1;
}",37.0,41.0,1.0,1.0,5.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,ANY
2080,53296,~SocketOutputStream,1,SocketOutputStream.~SocketOutputStream,ANY SocketOutputStream.~SocketOutputStream (),main\cpp\socketoutputstream.cpp,"SocketOutputStream::~SocketOutputStream()
{
}",43.0,45.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2081,53300,close,1,SocketOutputStream.close,void SocketOutputStream.close (Pool),main\cpp\socketoutputstream.cpp,"void SocketOutputStream::close(Pool& p)
{
	flush(p);
	m_priv->socket->close();
}",47.0,51.0,1.0,1.0,5.0,2,1,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
2082,53313,flush,1,SocketOutputStream.flush,void SocketOutputStream.flush (Pool),main\cpp\socketoutputstream.cpp,"void SocketOutputStream::flush(Pool& /* p */)
{
	if (m_priv->array.size() > 0)
	{
		ByteBuffer buf((char*) &m_priv->array[0], m_priv->array.size());
		m_priv->socket->write(buf);
		m_priv->array.resize(0);
	}
}",53.0,61.0,1.0,1.0,9.0,13,6,6,2,0,0,2,2,0,0,,0,0,2,1,1,void
2083,53358,write,1,SocketOutputStream.write,"void SocketOutputStream.write (ByteBuffer,Pool)",main\cpp\socketoutputstream.cpp,"void SocketOutputStream::write(ByteBuffer& buf, Pool& /* p */ )
{
	if (buf.remaining() > 0)
	{
		size_t sz = m_priv->array.size();
		m_priv->array.resize(sz + buf.remaining());
		memcpy(&m_priv->array[sz], buf.current(), buf.remaining());
		buf.position(buf.limit());
	}
}",63.0,72.0,1.0,1.0,10.0,16,7,12,3,0,0,2,2,0,0,,0,0,4,2,2,void
2084,53430,StrftimeDateFormatPrivate,1,StrftimeDateFormatPrivate.StrftimeDateFormatPrivate,ANY StrftimeDateFormatPrivate.StrftimeDateFormatPrivate (),main\cpp\strftimedateformat.cpp,"StrftimeDateFormatPrivate() :
		timeZone(TimeZone::getDefault())
	{}",28.0,30.0,2.0,3.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2085,53436,StrftimeDateFormat,1,StrftimeDateFormat.StrftimeDateFormat,ANY StrftimeDateFormat.StrftimeDateFormat (LogString),main\cpp\strftimedateformat.cpp,"StrftimeDateFormat::StrftimeDateFormat(const LogString& fmt)
	: m_priv(std::make_unique<StrftimeDateFormatPrivate>())
{
	LOG4CXX_NS::helpers::Transcoder::encode(fmt, m_priv->pattern);
}",40.0,44.0,1.0,1.0,5.0,4,2,5,5,0,0,1,1,0,0,,0,0,2,1,1,ANY
2086,53453,~StrftimeDateFormat,1,StrftimeDateFormat.~StrftimeDateFormat,ANY StrftimeDateFormat.~StrftimeDateFormat (),main\cpp\strftimedateformat.cpp,"StrftimeDateFormat::~StrftimeDateFormat()
{
}",46.0,48.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2087,53457,format,1,StrftimeDateFormat.format,"void StrftimeDateFormat.format (LogString,log4cxx_time_t,Pool)",main\cpp\strftimedateformat.cpp,"void StrftimeDateFormat::format(LogString& s, log4cxx_time_t time, Pool& /* p */ ) const
{
	apr_time_exp_t exploded;
	apr_status_t stat = m_priv->timeZone->explode(&exploded, time);

	if (stat == APR_SUCCESS)
	{
		const apr_size_t bufSize = 255;
		char buf[bufSize];
		apr_size_t bufLen;
		stat = apr_strftime(buf, &bufLen, bufSize, m_priv->pattern.c_str(), &exploded);

		if (stat == APR_SUCCESS)
		{
			LOG4CXX_NS::helpers::Transcoder::decode(std::string(buf, bufLen), s);
		}
	}
}",51.0,68.0,1.0,1.0,18.0,16,5,22,13,0,0,3,4,0,0,,0,0,6,3,3,void
2088,53523,setTimeZone,1,StrftimeDateFormat.setTimeZone,void StrftimeDateFormat.setTimeZone (TimeZonePtr),main\cpp\strftimedateformat.cpp,"void StrftimeDateFormat::setTimeZone(const TimeZonePtr& zone)
{
	m_priv->timeZone = zone;
}",70.0,73.0,1.0,1.0,4.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
2089,53554,equalsIgnoreCase,1,StringHelper.equalsIgnoreCase,"bool StringHelper.equalsIgnoreCase (LogString,logchar*,logchar*)",main\cpp\stringhelper.cpp,"bool StringHelper::equalsIgnoreCase(const LogString& s1, const LogString& upper, const LogString& lower)
{
	LogString::const_iterator u = upper.begin();
	LogString::const_iterator l = lower.begin();
	LogString::const_iterator iter = s1.begin();

	for (;
		iter != s1.end() && u != upper.end() && l != lower.end();
		iter++, u++, l++)
	{
		if (*iter != *u && *iter != *l)
		{
			return false;
		}
	}

	return u == upper.end() && iter == s1.end();
}",46.0,63.0,1.0,1.0,18.0,13,6,9,4,48,0,3,4,0,0,,0,0,6,3,3,bool
2090,53691,toLowerCase,1,StringHelper.toLowerCase,LogString StringHelper.toLowerCase (LogString),main\cpp\stringhelper.cpp,"LogString StringHelper::toLowerCase(const LogString& s)
{
	LogString d;
	std::transform(s.begin(), s.end(),
		std::insert_iterator<LogString>(d, d.begin()), tolower);
	return d;
}",67.0,73.0,1.0,1.0,7.0,9,5,9,5,4,0,1,1,0,0,,0,0,2,1,1,LogString
2091,53725,trim,1,StringHelper.trim,LogString StringHelper.trim (LogString),main\cpp\stringhelper.cpp,"LogString StringHelper::trim(const LogString& s)
{
	LogString::size_type pos = s.find_first_not_of(' ');

	if (pos == std::string::npos)
	{
		return LogString();
	}

	LogString::size_type n = s.find_last_not_of(' ') - pos + 1;
	return s.substr(pos, n);
}",75.0,86.0,1.0,1.0,12.0,10,5,11,5,6,0,2,2,0,0,,0,0,2,1,1,LogString
2092,53768,startsWith,1,StringHelper.startsWith,"bool StringHelper.startsWith (LogString,LogString)",main\cpp\stringhelper.cpp,"bool StringHelper::startsWith(const LogString& s, const LogString& prefix)
{
	if (s.length() < prefix.length())
	{
		return false;
	}

	return s.compare(0, prefix.length(), prefix) == 0;
}",88.0,96.0,1.0,1.0,9.0,6,3,5,2,3,0,2,2,0,0,,0,0,4,2,2,bool
2093,53800,endsWith,1,StringHelper.endsWith,"bool StringHelper.endsWith (LogString,LogString)",main\cpp\stringhelper.cpp,"bool StringHelper::endsWith(const LogString& s, const LogString& suffix)
{
	if (suffix.length() <= s.length())
	{
		return s.compare(s.length() - suffix.length(), suffix.length(), suffix) == 0;
	}

	return false;
}",98.0,106.0,1.0,1.0,9.0,9,4,7,2,2,0,2,2,0,0,,0,0,4,2,2,bool
2094,53840,toInt,1,StringHelper.toInt,int StringHelper.toInt (LogString),main\cpp\stringhelper.cpp,"int StringHelper::toInt(const LogString& s)
{
#if LOG4CXX_LOGCHAR_IS_UNICHAR
	std::string as;
	Transcoder::encode(s, as);
	return std::stoi(as);
#else
	return std::stoi(s);
#endif
}",109.0,118.0,1.0,1.0,10.0,1,1,2,2,5,0,1,1,0,0,,0,0,2,1,1,int
2095,53851,toInt64,1,StringHelper.toInt64,int64_t StringHelper.toInt64 (LogString),main\cpp\stringhelper.cpp,"int64_t StringHelper::toInt64(const LogString& s)
{
#if LOG4CXX_LOGCHAR_IS_UNICHAR
	std::string as;
	Transcoder::encode(s, as);
	return std::stoll(as);
#else
	return std::stoll(s);
#endif
}",120.0,129.0,1.0,1.0,10.0,1,1,2,2,0,0,1,1,0,0,,0,0,2,1,1,int64_t
2096,53862,toString,1,StringHelper.toString,"void StringHelper.toString (int,Pool,LogString)",main\cpp\stringhelper.cpp,"void StringHelper::toString(size_t n, Pool& pool, LogString& dst)
{
#if LOG4CXX_LOGCHAR_IS_WCHAR
	dst.append(std::to_wstring(n));
#else
	Transcoder::decode(std::to_string(n), dst);
#endif
}",163.0,170.0,1.0,1.0,8.0,2,1,4,4,29,1,1,1,0,1,,0,0,6,3,3,void
2097,53936,format,1,StringHelper.format,"LogString StringHelper.format (LogString,ANY)",main\cpp\stringhelper.cpp,"LogString StringHelper::format(const LogString& pattern, const std::vector<LogString>& params)
{

	LogString result;
	int i = 0;

	while (pattern[i] != 0)
	{
		if (pattern[i] == 0x7B /* '{' */ && pattern[i + 1] >= 0x30 /* '0' */ &&
			pattern[i + 1] <= 0x39 /* '9' */ && pattern[i + 2] == 0x7D /* '}' */)
		{
			int arg = pattern[i + 1] - 0x30 /* '0' */;
			result = result + params[arg];
			i += 3;
		}
		else
		{
			result = result + pattern[i];
			i++;
		}
	}

	return result;
}",172.0,195.0,1.0,1.0,24.0,25,10,20,5,0,0,3,4,0,0,,0,0,4,2,2,LogString
2098,54036,StringMatchFilterPrivate,1,StringMatchFilterPrivate.StringMatchFilterPrivate,ANY StringMatchFilterPrivate.StringMatchFilterPrivate (),main\cpp\stringmatchfilter.cpp,"StringMatchFilterPrivate() : FilterPrivate(),
		acceptOnMatch(true),
		stringToMatch() {}",34.0,36.0,2.0,20.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2099,54044,StringMatchFilter,1,StringMatchFilter.StringMatchFilter,ANY StringMatchFilter.StringMatchFilter (),main\cpp\stringmatchfilter.cpp,"StringMatchFilter::StringMatchFilter() :
	Filter(std::make_unique<StringMatchFilterPrivate>())
{
}",44.0,47.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2100,54048,~StringMatchFilter,1,StringMatchFilter.~StringMatchFilter,ANY StringMatchFilter.~StringMatchFilter (),main\cpp\stringmatchfilter.cpp,StringMatchFilter::~StringMatchFilter() {},49.0,49.0,1.0,42.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2101,54052,setOption,1,StringMatchFilter.setOption,"void StringMatchFilter.setOption (LogString,LogString)",main\cpp\stringmatchfilter.cpp,"void StringMatchFilter::setOption(const LogString& option,
	const LogString& value)
{

	if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""STRINGTOMATCH""), LOG4CXX_STR(""stringtomatch"")))
	{
		priv->stringToMatch = value;
	}
	else if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""ACCEPTONMATCH""), LOG4CXX_STR(""acceptonmatch"")))
	{
		priv->acceptOnMatch = OptionConverter::toBoolean(value, priv->acceptOnMatch);
	}
}",51.0,65.0,1.0,2.0,15.0,5,4,4,4,0,1,2,2,1,1,,0,1,4,2,2,void
2102,54120,decide,1,StringMatchFilter.decide,FilterDecision StringMatchFilter.decide (ANY),main\cpp\stringmatchfilter.cpp,"Filter::FilterDecision StringMatchFilter::decide(
	const LOG4CXX_NS::spi::LoggingEventPtr& event) const
{
	const LogString& msg = event->getRenderedMessage();

	if (msg.empty() || priv->stringToMatch.empty())
	{
		return Filter::NEUTRAL;
	}


	if ( msg.find(priv->stringToMatch) == LogString::npos )
	{
		return Filter::NEUTRAL;
	}
	else
	{
		// we've got a match
		if (priv->acceptOnMatch)
		{
			return Filter::ACCEPT;
		}
		else
		{
			return Filter::DENY;
		}
	}
}",67.0,94.0,1.0,20.0,28.0,16,6,9,5,0,0,3,3,0,0,,0,0,2,1,1,FilterDecision
2103,54204,setStringToMatch,1,StringMatchFilter.setStringToMatch,void StringMatchFilter.setStringToMatch (LogString),main\cpp\stringmatchfilter.cpp,"void StringMatchFilter::setStringToMatch(const LogString& stringToMatch1)
{
	priv->stringToMatch.assign(stringToMatch1);
}",96.0,99.0,1.0,1.0,4.0,4,3,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
2104,54223,getStringToMatch,1,StringMatchFilter.getStringToMatch,LogString StringMatchFilter.getStringToMatch (),main\cpp\stringmatchfilter.cpp,"const LogString& StringMatchFilter::getStringToMatch() const
{
	return priv->stringToMatch;
}",101.0,104.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,LogString
2105,54238,setAcceptOnMatch,1,StringMatchFilter.setAcceptOnMatch,void StringMatchFilter.setAcceptOnMatch (bool),main\cpp\stringmatchfilter.cpp,"void StringMatchFilter::setAcceptOnMatch(bool acceptOnMatch1)
{
	priv->acceptOnMatch = acceptOnMatch1;
}",106.0,109.0,1.0,1.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
2106,54255,getAcceptOnMatch,1,StringMatchFilter.getAcceptOnMatch,bool StringMatchFilter.getAcceptOnMatch (),main\cpp\stringmatchfilter.cpp,"bool StringMatchFilter::getAcceptOnMatch() const
{
	return priv->acceptOnMatch;
}",111.0,114.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,bool
2107,54284,StringTokenizerPrivate,1,StringTokenizerPrivate.StringTokenizerPrivate,"ANY StringTokenizerPrivate.StringTokenizerPrivate (LogString,LogString)",main\cpp\stringtokenizer.cpp,"StringTokenizerPrivate(const LogString& str, const LogString& delim1) : src(str), delim(delim1), pos(0){}",30.0,30.0,2.0,106.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ANY
2108,54293,StringTokenizer,1,StringTokenizer.StringTokenizer,"ANY StringTokenizer.StringTokenizer (LogString,LogString)",main\cpp\stringtokenizer.cpp,"StringTokenizer::StringTokenizer(const LogString& str, const LogString& delim1)
	: m_priv(std::make_unique<StringTokenizerPrivate>(str, delim1))
{
}",37.0,40.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ANY
2109,54299,~StringTokenizer,1,StringTokenizer.~StringTokenizer,ANY StringTokenizer.~StringTokenizer (),main\cpp\stringtokenizer.cpp,"StringTokenizer::~StringTokenizer()
{
}",42.0,44.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2110,54303,hasMoreTokens,1,StringTokenizer.hasMoreTokens,bool StringTokenizer.hasMoreTokens (),main\cpp\stringtokenizer.cpp,"bool StringTokenizer::hasMoreTokens() const
{
	return (m_priv->pos != LogString::npos
			&& m_priv->src.find_first_not_of(m_priv->delim, m_priv->pos) != LogString::npos);
}",46.0,50.0,1.0,1.0,5.0,10,4,6,2,0,0,1,1,0,0,,0,0,0,0,0,bool
2111,54332,nextToken,1,StringTokenizer.nextToken,LogString StringTokenizer.nextToken (),main\cpp\stringtokenizer.cpp,"LogString StringTokenizer::nextToken()
{
	if (m_priv->pos != LogString::npos)
	{
		size_t nextPos = m_priv->src.find_first_not_of(m_priv->delim, m_priv->pos);

		if (nextPos != LogString::npos)
		{
			m_priv->pos = m_priv->src.find_first_of(m_priv->delim, nextPos);

			if (m_priv->pos == LogString::npos)
			{
				return m_priv->src.substr(nextPos);
			}

			return m_priv->src.substr(nextPos, m_priv->pos - nextPos);
		}
	}

	throw NoSuchElementException();
#if LOG4CXX_RETURN_AFTER_THROW
	return LogString();
#endif
}",52.0,75.0,1.0,1.0,24.0,25,7,20,3,0,0,4,7,0,0,,0,0,0,0,0,LogString
2112,54440,SyslogAppender,1,SyslogAppender.SyslogAppender,ANY SyslogAppender.SyslogAppender (),main\cpp\syslogappender.cpp,"SyslogAppender::SyslogAppender(const LayoutPtr& layout1,
	const LogString& syslogHost1, int syslogFacility1)
	: AppenderSkeleton (std::make_unique<SyslogAppenderPriv>(layout1, syslogHost1, syslogFacility1))
{
	this->initSyslogFacilityStr();
	setSyslogHost(syslogHost1);
}",56.0,62.0,1.0,1.0,7.0,1,1,0,0,0,0,1,1,0,0,,0,0,6,3,3,ANY
2113,54471,~SyslogAppender,1,SyslogAppender.~SyslogAppender,ANY SyslogAppender.~SyslogAppender (),main\cpp\syslogappender.cpp,"SyslogAppender::~SyslogAppender()
{
	finalize();
}",64.0,67.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2114,54476,close,1,SyslogAppender.close,void SyslogAppender.close (),main\cpp\syslogappender.cpp,"void SyslogAppender::close()
{
	_priv->closed = true;

	if (_priv->sw)
	{
		_priv->sw = nullptr;
	}
}",70.0,78.0,1.0,1.0,9.0,11,4,3,1,0,0,2,2,0,0,,0,0,0,0,0,void
2115,54516,initSyslogFacilityStr,1,SyslogAppender.initSyslogFacilityStr,void SyslogAppender.initSyslogFacilityStr (),main\cpp\syslogappender.cpp,"void SyslogAppender::initSyslogFacilityStr()
{
	_priv->facilityStr = getFacilityString(_priv->syslogFacility);

	if (_priv->facilityStr.empty())
	{
		Pool p;
		LogString msg(LOG4CXX_STR(""\""""));
		StringHelper::toString(_priv->syslogFacility, p, msg);
		msg.append(LOG4CXX_STR(""\"" is an unknown syslog facility. Defaulting to \""USER\"".""));
		LogLog::error(msg);
		_priv->syslogFacility = LOG_USER;
		_priv->facilityStr = LOG4CXX_STR(""user:"");
	}
	else
	{
		_priv->facilityStr += LOG4CXX_STR("":"");
	}
}",80.0,98.0,1.0,1.0,19.0,25,4,13,6,0,2,2,2,0,2,,0,0,0,0,0,void
2116,54629,getFacilityString,1,SyslogAppender.getFacilityString,LogString SyslogAppender.getFacilityString (int),main\cpp\syslogappender.cpp,"LogString SyslogAppender::getFacilityString(
	int syslogFacility)
{
	switch (syslogFacility)
	{
		case LOG_KERN:
			return LOG4CXX_STR(""kern"");

		case LOG_USER:
			return LOG4CXX_STR(""user"");

		case LOG_MAIL:
			return LOG4CXX_STR(""mail"");

		case LOG_DAEMON:
			return LOG4CXX_STR(""daemon"");

		case LOG_AUTH:
			return LOG4CXX_STR(""auth"");

		case LOG_SYSLOG:
			return LOG4CXX_STR(""syslog"");

		case LOG_LPR:
			return LOG4CXX_STR(""lpr"");

		case LOG_NEWS:
			return LOG4CXX_STR(""news"");

		case LOG_UUCP:
			return LOG4CXX_STR(""uucp"");

		case LOG_CRON:
			return LOG4CXX_STR(""cron"");
#ifdef LOG_AUTHPRIV

		case LOG_AUTHPRIV:
			return LOG4CXX_STR(""authpriv"");
#endif
#ifdef LOG_FTP

		case LOG_FTP:
			return LOG4CXX_STR(""ftp"");
#endif

		case LOG_LOCAL0:
			return LOG4CXX_STR(""local0"");

		case LOG_LOCAL1:
			return LOG4CXX_STR(""local1"");

		case LOG_LOCAL2:
			return LOG4CXX_STR(""local2"");

		case LOG_LOCAL3:
			return LOG4CXX_STR(""local3"");

		case LOG_LOCAL4:
			return LOG4CXX_STR...",104.0,176.0,1.0,1.0,73.0,0,0,19,19,0,0,2,2,0,0,,0,0,2,1,1,LogString
2117,54730,getFacility,1,SyslogAppender.getFacility,int SyslogAppender.getFacility (LogString),main\cpp\syslogappender.cpp,"LogString SyslogAppender::getFacility() const
{
	return getFacilityString(_priv->syslogFacility);
}",466.0,469.0,1.0,26.0,4.0,1,1,3,3,0,1,2,2,1,1,,0,1,0,0,0,LogString
2118,55010,append,1,SyslogAppender.append,"void SyslogAppender.append (ANY,Pool)",main\cpp\syslogappender.cpp,"void SyslogAppender::append(const spi::LoggingEventPtr& event, Pool& p)
{
	if  (!isAsSevereAsThreshold(event->getLevel()))
	{
		return;
	}

	LogString msg;
	std::string encoded;
	_priv->layout->format(msg, event, p);

	Transcoder::encode(msg, encoded);

	// Split up the message if it is over maxMessageLength in size.
	// According to RFC 3164, the max message length is 1024, however
	// newer systems(such as syslog-ng) can go up to 8k in size for their
	// messages.  We will append (x/y) at the end of each message
	// to indicate how far through the message we are
	std::vector<LogString> packets;

	if ( msg.size() > _priv->maxMessageLength )
	{
		LogString::iterator start = msg.begin();

		while ( start != msg.end() )
		{
			LogString::iterator end = start + _priv->maxMessageLength - 12;

			if ( end > msg.end() )
			{
				end = msg.end();
			}

			LogString newMsg = LogString( start, end );
			packets.push_back( newMsg );
			start = end;
		}

		int current = 1;

		for ( std::vector...",274.0,373.0,1.0,1.0,100.0,80,14,64,18,0,2,9,14,0,2,,0,0,4,2,2,void
2119,55328,activateOptions,1,SyslogAppender.activateOptions,void SyslogAppender.activateOptions (Pool),main\cpp\syslogappender.cpp,"void SyslogAppender::activateOptions(Pool&)
{
}",375.0,377.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
2120,55333,setOption,1,SyslogAppender.setOption,"void SyslogAppender.setOption (LogString,LogString)",main\cpp\syslogappender.cpp,"void SyslogAppender::setOption(const LogString& option, const LogString& value)
{
	if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""SYSLOGHOST""), LOG4CXX_STR(""sysloghost"")))
	{
		setSyslogHost(value);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""FACILITY""), LOG4CXX_STR(""facility"")))
	{
		setFacility(value);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""MAXMESSAGELENGTH""), LOG4CXX_STR(""maxmessagelength"")))
	{
		setMaxMessageLength(OptionConverter::toInt(value, 1024));
	}
	else
	{
		AppenderSkeleton::setOption(option, value);
	}
}",379.0,397.0,1.0,1.0,19.0,1,1,3,3,0,1,2,2,1,1,,0,1,4,2,2,void
2121,55395,setSyslogHost,1,SyslogAppender.setSyslogHost,void SyslogAppender.setSyslogHost (LogString),main\cpp\syslogappender.cpp,"void SyslogAppender::setSyslogHost(const LogString& syslogHost1)
{
	if (_priv->sw != 0)
	{
		_priv->sw = nullptr;
	}

	LogString slHost = syslogHost1;
	int slHostPort = -1;

	LogString::size_type colonPos = 0;
	colonPos = slHost.rfind(':');

	if (colonPos != LogString::npos)
	{
		slHostPort = StringHelper::toInt(slHost.substr(colonPos + 1));
		// Erase the :port part of the host name
		slHost.erase( colonPos );
	}

	// On the local host, we can directly use the system function 'syslog'
	// if it is available (cf. append)
#if LOG4CXX_HAVE_SYSLOG

	if (syslogHost1 != LOG4CXX_STR(""localhost"") && syslogHost1 != LOG4CXX_STR(""127.0.0.1"")
		&& !syslogHost1.empty())
#endif
	{
		if (slHostPort >= 0)
		{
			_priv->sw = std::make_unique<SyslogWriter>(slHost, slHostPort);
		}
		else
		{
			_priv->sw = std::make_unique<SyslogWriter>(slHost);
		}
	}

	_priv->syslogHost = slHost;
	_priv->syslogHostPort = slHostPort;
}",399.0,439.0,1.0,5.0,41.0,39,12,26,9,0,1,4,4,0,1,,0,1,2,1,1,void
2122,55544,setFacility,1,SyslogAppender.setFacility,void SyslogAppender.setFacility (LogString),main\cpp\syslogappender.cpp,"void SyslogAppender::setFacility(const LogString& facilityName)
{
	if (facilityName.empty())
	{
		return;
	}

	_priv->syslogFacility = getFacility(facilityName);

	if (_priv->syslogFacility == LOG_UNDEF)
	{
		LogLog::error(LOG4CXX_STR(""["") + facilityName +
			LOG4CXX_STR(""] is an unknown syslog facility. Defaulting to [USER].""));
		_priv->syslogFacility = LOG_USER;
	}

	this->initSyslogFacilityStr();
}",442.0,459.0,1.0,1.0,18.0,18,7,8,4,0,1,3,3,0,1,,0,0,2,1,1,void
2123,55613,getSyslogHost,1,SyslogAppender.getSyslogHost,LogString SyslogAppender.getSyslogHost (),main\cpp\syslogappender.cpp,"const LogString& SyslogAppender::getSyslogHost() const
{
	return _priv->syslogHost;
}",461.0,464.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,LogString
2124,55644,setFacilityPrinting,1,SyslogAppender.setFacilityPrinting,void SyslogAppender.setFacilityPrinting (bool),main\cpp\syslogappender.cpp,"void SyslogAppender::setFacilityPrinting(bool facilityPrinting1)
{
	_priv->facilityPrinting = facilityPrinting1;
}",471.0,474.0,1.0,1.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
2125,55661,getFacilityPrinting,1,SyslogAppender.getFacilityPrinting,bool SyslogAppender.getFacilityPrinting (),main\cpp\syslogappender.cpp,"bool SyslogAppender::getFacilityPrinting() const
{
	return _priv->facilityPrinting;
}",476.0,479.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,bool
2126,55676,setMaxMessageLength,1,SyslogAppender.setMaxMessageLength,void SyslogAppender.setMaxMessageLength (int),main\cpp\syslogappender.cpp,"void SyslogAppender::setMaxMessageLength(int maxMessageLength1)
{
	_priv->maxMessageLength = maxMessageLength1;
}",481.0,484.0,1.0,1.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
2127,55693,getMaxMessageLength,1,SyslogAppender.getMaxMessageLength,int SyslogAppender.getMaxMessageLength (),main\cpp\syslogappender.cpp,"int SyslogAppender::getMaxMessageLength() const
{
	return _priv->maxMessageLength;
}",486.0,489.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,int
2128,55728,SyslogWriterPrivate,1,SyslogWriterPrivate.SyslogWriterPrivate,"ANY SyslogWriterPrivate.SyslogWriterPrivate (LogString,int)",main\cpp\syslogwriter.cpp,"SyslogWriterPrivate(const LogString& syslogHost1, int syslogHostPort1)
		: syslogHost(syslogHost1), syslogHostPort(syslogHostPort1){}",30.0,31.0,2.0,62.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ANY
2129,55738,SyslogWriter,1,SyslogWriter.SyslogWriter,"ANY SyslogWriter.SyslogWriter (LogString,int)",main\cpp\syslogwriter.cpp,"SyslogWriter::SyslogWriter(const LogString& syslogHost1, int syslogHostPort1)
	: m_priv(std::make_unique<SyslogWriterPrivate>(syslogHost1, syslogHostPort1))
{
	try
	{
		m_priv->address = InetAddress::getByName(syslogHost1);
	}
	catch (UnknownHostException& e)
	{
		LogLog::error(((LogString) LOG4CXX_STR(""Could not find "")) + syslogHost1 +
			LOG4CXX_STR("". All logging will FAIL.""), e);
	}

	try
	{
		m_priv->ds = DatagramSocket::create();
	}
	catch (SocketException& e)
	{
		LogLog::error(((LogString) LOG4CXX_STR(""Could not instantiate DatagramSocket to "")) + syslogHost1 +
			LOG4CXX_STR("". All logging will FAIL.""), e);
	}
}",39.0,61.0,1.0,1.0,23.0,14,5,11,6,0,4,3,3,0,4,,0,2,4,2,2,ANY
2130,55795,~SyslogWriter,1,SyslogWriter.~SyslogWriter,ANY SyslogWriter.~SyslogWriter (),main\cpp\syslogwriter.cpp,SyslogWriter::~SyslogWriter(){},63.0,63.0,1.0,31.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2131,55799,write,1,SyslogWriter.write,void SyslogWriter.write (LogString),main\cpp\syslogwriter.cpp,"void SyslogWriter::write(const LogString& source)
{
	if (m_priv->ds != 0 && m_priv->address != 0)
	{
		LOG4CXX_ENCODE_CHAR(data, source);

		auto packet = std::make_shared<DatagramPacket>(
				(void*) data.data(), (int)data.length(),
				m_priv->address, m_priv->syslogHostPort);

		m_priv->ds->send(packet);
	}
}",65.0,77.0,1.0,1.0,13.0,19,10,13,6,0,0,2,2,0,0,,0,0,2,1,1,void
2132,55875,getProperty,1,System.getProperty,LogString System.getProperty (LogString),main\cpp\system.cpp,"LogString System::getProperty(const LogString& lkey)
{
	if (lkey.empty())
	{
		throw IllegalArgumentException(LOG4CXX_STR(""key is empty""));
	}

	LogString rv;

	if (lkey == LOG4CXX_STR(""java.io.tmpdir""))
	{
		Pool p;
		const char* dir = NULL;
		apr_status_t stat = apr_temp_dir_get(&dir, p.getAPRPool());

		if (stat == APR_SUCCESS)
		{
			Transcoder::decode(dir, rv);
		}

		return rv;
	}

	if (lkey == LOG4CXX_STR(""user.dir""))
	{
		Pool p;
		char* dir = NULL;
		apr_status_t stat = apr_filepath_get(&dir, APR_FILEPATH_NATIVE,
				p.getAPRPool());

		if (stat == APR_SUCCESS)
		{
			Transcoder::decode(dir, rv);
		}

		return rv;
	}

#if APR_HAS_USER

	if (lkey == LOG4CXX_STR(""user.home"") || lkey == LOG4CXX_STR(""user.name""))
	{
		Pool pool;
		apr_uid_t userid;
		apr_gid_t groupid;
		apr_pool_t* p = pool.getAPRPool();
		apr_status_t stat = apr_uid_current(&userid, &groupid, p);

		if (stat == APR_SUCCESS)
		{
			char* username = NULL;
			stat = apr_uid_name_get(&username, userid, p);

			if...",32.0,121.0,1.0,1.0,90.0,24,6,40,11,1,3,7,9,0,3,,0,0,2,1,1,LogString
2133,56014,SystemErrWriter,1,SystemErrWriter.SystemErrWriter,ANY SystemErrWriter.SystemErrWriter (),main\cpp\systemerrwriter.cpp,"SystemErrWriter::SystemErrWriter()
{
}",32.0,34.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2134,56018,~SystemErrWriter,1,SystemErrWriter.~SystemErrWriter,ANY SystemErrWriter.~SystemErrWriter (),main\cpp\systemerrwriter.cpp,"SystemErrWriter::~SystemErrWriter()
{
}",36.0,38.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2135,56022,close,1,SystemErrWriter.close,void SystemErrWriter.close (Pool),main\cpp\systemerrwriter.cpp,"void SystemErrWriter::close(Pool& /* p */)
{
}",40.0,42.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
2136,56027,flush,1,SystemErrWriter.flush,void SystemErrWriter.flush (Pool),main\cpp\systemerrwriter.cpp,"void SystemErrWriter::flush()
{
	fflush(stderr);
}",81.0,84.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,void
2137,56033,write,1,SystemErrWriter.write,"void SystemErrWriter.write (LogString,Pool)",main\cpp\systemerrwriter.cpp,"void SystemErrWriter::write(const LogString& str)
{
#if LOG4CXX_WCHAR_T_API

	if (isWide())
	{
		LOG4CXX_ENCODE_WCHAR(msg, str);
		fputws(msg.c_str(), stderr);
		return;
	}

#endif
	LOG4CXX_ENCODE_CHAR(msg, str);
	fputs(msg.c_str(), stderr);
}",65.0,79.0,1.0,1.0,15.0,0,0,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
2138,56041,isWide,1,SystemErrWriter.isWide,bool SystemErrWriter.isWide (),main\cpp\systemerrwriter.cpp,"bool SystemErrWriter::isWide()
{
#if LOG4CXX_FORCE_WIDE_CONSOLE
	return true;
#elif LOG4CXX_FORCE_BYTE_CONSOLE || !LOG4CXX_HAS_FWIDE
	return false;
#else
	return fwide(stderr, 0) > 0;
#endif
}",54.0,63.0,1.0,1.0,10.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,bool
2139,56083,SystemOutWriter,1,SystemOutWriter.SystemOutWriter,ANY SystemOutWriter.SystemOutWriter (),main\cpp\systemoutwriter.cpp,"SystemOutWriter::SystemOutWriter()
{
}",32.0,34.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2140,56087,~SystemOutWriter,1,SystemOutWriter.~SystemOutWriter,ANY SystemOutWriter.~SystemOutWriter (),main\cpp\systemoutwriter.cpp,"SystemOutWriter::~SystemOutWriter()
{
}",36.0,38.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2141,56091,close,1,SystemOutWriter.close,void SystemOutWriter.close (Pool),main\cpp\systemoutwriter.cpp,"void SystemOutWriter::close(Pool& /* p */ )
{
}",40.0,42.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
2142,56096,flush,1,SystemOutWriter.flush,void SystemOutWriter.flush (Pool),main\cpp\systemoutwriter.cpp,"void SystemOutWriter::flush()
{
	fflush(stdout);
}",81.0,84.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,void
2143,56102,write,1,SystemOutWriter.write,"void SystemOutWriter.write (LogString,Pool)",main\cpp\systemoutwriter.cpp,"void SystemOutWriter::write(const LogString& str)
{
#if LOG4CXX_WCHAR_T_API

	if (isWide())
	{
		LOG4CXX_ENCODE_WCHAR(msg, str);
		fputws(msg.c_str(), stdout);
		return;
	}

#endif
	LOG4CXX_ENCODE_CHAR(msg, str);
	fputs(msg.c_str(), stdout);
}",65.0,79.0,1.0,1.0,15.0,0,0,1,1,0,0,1,1,0,0,,0,0,2,1,1,void
2144,56110,isWide,1,SystemOutWriter.isWide,bool SystemOutWriter.isWide (),main\cpp\systemoutwriter.cpp,"bool SystemOutWriter::isWide()
{
#if LOG4CXX_FORCE_WIDE_CONSOLE
	return true;
#elif LOG4CXX_FORCE_BYTE_CONSOLE || !LOG4CXX_HAS_FWIDE
	return false;
#else
	return fwide(stdout, 0) > 0;
#endif
}",54.0,63.0,1.0,1.0,10.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,bool
2145,56161,TelnetAppenderPriv,1,TelnetAppenderPriv.TelnetAppenderPriv,"ANY TelnetAppenderPriv.TelnetAppenderPriv (int,int)",main\cpp\telnetappender.cpp,"TelnetAppenderPriv( int port, int maxConnections ) : AppenderSkeletonPrivate(),
		port(port),
		connections(maxConnections),
		encoding(LOG4CXX_STR(""UTF-8"")),
		encoder(CharsetEncoder::getUTF8Encoder()),
		sh(),
		activeConnections(0) {}",36.0,42.0,2.0,25.0,7.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ANY
2146,56182,TelnetAppender,1,TelnetAppender.TelnetAppender,ANY TelnetAppender.TelnetAppender (),main\cpp\telnetappender.cpp,"TelnetAppender::TelnetAppender()
	: AppenderSkeleton (std::make_unique<TelnetAppenderPriv>(DEFAULT_PORT, MAX_CONNECTIONS))
{
}",61.0,64.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2147,56186,~TelnetAppender,1,TelnetAppender.~TelnetAppender,ANY TelnetAppender.~TelnetAppender (),main\cpp\telnetappender.cpp,"TelnetAppender::~TelnetAppender()
{
	finalize();
}",66.0,69.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2148,56191,activateOptions,1,TelnetAppender.activateOptions,void TelnetAppender.activateOptions (Pool),main\cpp\telnetappender.cpp,"void TelnetAppender::activateOptions(Pool& /* p */)
{
	if (_priv->serverSocket == NULL)
	{
		_priv->serverSocket = ServerSocket::create(_priv->port);
		_priv->serverSocket->setSoTimeout(1000);
	}

	_priv->sh = ThreadUtility::instance()->createThread( LOG4CXX_STR(""TelnetAppender""), &TelnetAppender::acceptConnections, this );
}",71.0,80.0,1.0,5.0,10.0,24,6,9,5,0,1,2,2,0,1,,0,1,2,1,1,void
2149,56274,setOption,1,TelnetAppender.setOption,"void TelnetAppender.setOption (LogString,LogString)",main\cpp\telnetappender.cpp,"void TelnetAppender::setOption(const LogString& option,
	const LogString& value)
{
	if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""PORT""), LOG4CXX_STR(""port"")))
	{
		setPort(OptionConverter::toInt(value, DEFAULT_PORT));
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""ENCODING""), LOG4CXX_STR(""encoding"")))
	{
		setEncoding(value);
	}
	else
	{
		AppenderSkeleton::setOption(option, value);
	}
}",82.0,97.0,1.0,1.0,16.0,2,1,5,5,0,3,2,2,1,2,,0,2,4,2,2,void
2150,56321,getEncoding,1,TelnetAppender.getEncoding,LogString TelnetAppender.getEncoding (),main\cpp\telnetappender.cpp,"LogString TelnetAppender::getEncoding() const
{
	std::lock_guard<std::recursive_mutex> lock(_priv->mutex);
	return _priv->encoding;
}",99.0,103.0,1.0,44.0,5.0,10,5,4,2,0,0,1,1,0,0,,0,0,0,0,0,LogString
2151,56355,setEncoding,1,TelnetAppender.setEncoding,void TelnetAppender.setEncoding (LogString),main\cpp\telnetappender.cpp,"void TelnetAppender::setEncoding(const LogString& value)
{
	std::lock_guard<std::recursive_mutex> lock(_priv->mutex);
	_priv->encoder = CharsetEncoder::getEncoder(value);
	_priv->encoding = value;
}",105.0,110.0,1.0,44.0,6.0,16,6,8,4,0,1,1,1,0,1,,0,1,2,1,1,void
2152,56407,close,1,TelnetAppender.close,void TelnetAppender.close (),main\cpp\telnetappender.cpp,"void TelnetAppender::close()
{
	std::lock_guard<std::recursive_mutex> lock(_priv->mutex);

	if (_priv->closed)
	{
		return;
	}

	_priv->closed = true;

	SocketPtr nullSocket;

	for (ConnectionList::iterator iter = _priv->connections.begin();
		iter != _priv->connections.end();
		iter++)
	{
		if (*iter != 0)
		{
			(*iter)->close();
			*iter = nullSocket;
		}
	}

	if (_priv->serverSocket != NULL)
	{
		try
		{
			_priv->serverSocket->close();
		}
		catch (Exception&)
		{
		}
	}

	if ( _priv->sh.joinable() )
	{
		_priv->sh.join();
	}

	_priv->activeConnections = 0;
}",113.0,154.0,1.0,44.0,42.0,50,8,19,5,0,0,7,9,0,0,,0,0,0,0,0,void
2153,56577,write,1,TelnetAppender.write,void TelnetAppender.write (ByteBuffer),main\cpp\telnetappender.cpp,"void TelnetAppender::write(ByteBuffer& buf)
{
	for (ConnectionList::iterator iter = _priv->connections.begin();
		iter != _priv->connections.end();
		iter++)
	{
		if (*iter != 0)
		{
			try
			{
				ByteBuffer b(buf.current(), buf.remaining());
				(*iter)->write(b);
			}
			catch (Exception&)
			{
				// The client has closed the connection, remove it from our list:
				*iter = 0;
				_priv->activeConnections--;
			}
		}
	}
}",157.0,178.0,1.0,38.0,22.0,22,7,11,4,0,0,4,7,0,0,,0,0,2,1,1,void
2154,56658,writeStatus,1,TelnetAppender.writeStatus,"void TelnetAppender.writeStatus (SocketPtr,LogString,Pool)",main\cpp\telnetappender.cpp,"void TelnetAppender::writeStatus(const SocketPtr& socket, const LogString& msg, Pool& p)
{
	size_t bytesSize = msg.size() * 2;
	char* bytes = p.pstralloc(bytesSize);

	LogString::const_iterator msgIter(msg.begin());
	ByteBuffer buf(bytes, bytesSize);

	while (msgIter != msg.end())
	{
		_priv->encoder->encode(msg, msgIter, buf);
		buf.flip();
		socket->write(buf);
		buf.clear();
	}
}",180.0,195.0,1.0,2.0,16.0,15,6,18,8,0,0,2,2,0,0,,0,0,6,3,3,void
2155,56729,append,1,TelnetAppender.append,"void TelnetAppender.append (ANY,Pool)",main\cpp\telnetappender.cpp,"void TelnetAppender::append(const spi::LoggingEventPtr& event, Pool& p)
{
	size_t count = _priv->activeConnections;

	if (count > 0)
	{
		LogString msg;
		_priv->layout->format(msg, event, _priv->pool);
		msg.append(LOG4CXX_STR(""\r\n""));
		size_t bytesSize = msg.size() * 2;
		char* bytes = p.pstralloc(bytesSize);

		LogString::const_iterator msgIter(msg.begin());
		ByteBuffer buf(bytes, bytesSize);

		std::lock_guard<std::recursive_mutex> lock(_priv->mutex);

		while (msgIter != msg.end())
		{
			log4cxx_status_t stat = _priv->encoder->encode(msg, msgIter, buf);
			buf.flip();
			write(buf);
			buf.clear();

			if (CharsetEncoder::isError(stat))
			{
				LogString unrepresented(1, 0x3F /* '?' */);
				LogString::const_iterator unrepresentedIter(unrepresented.begin());
				stat = _priv->encoder->encode(unrepresented, unrepresentedIter, buf);
				buf.flip();
				write(buf);
				buf.clear();
				msgIter++;
			}
		}
	}
}",197.0,233.0,1.0,16.0,37.0,45,9,41,14,0,0,4,7,0,0,,0,0,4,2,2,void
2156,56913,acceptConnections,1,TelnetAppender.acceptConnections,void TelnetAppender.acceptConnections (),main\cpp\telnetappender.cpp,"void TelnetAppender::acceptConnections()
{

	// main loop; is left when This->closed is != 0 after an accept()
	while (true)
	{
		try
		{
			SocketPtr newClient = _priv->serverSocket->accept();
			bool done = _priv->closed;

			if (done)
			{
				Pool p;
				writeStatus(newClient, LOG4CXX_STR(""Log closed.\r\n""), p);
				newClient->close();

				break;
			}

			size_t count = _priv->activeConnections;

			if (count >= _priv->connections.size())
			{
				Pool p;
				writeStatus(newClient, LOG4CXX_STR(""Too many connections.\r\n""), p);
				newClient->close();
			}
			else
			{
				//
				//   find unoccupied connection
				//
				std::lock_guard<std::recursive_mutex> lock(_priv->mutex);

				for (ConnectionList::iterator iter = _priv->connections.begin();
					iter != _priv->connections.end();
					iter++)
				{
					if (*iter == NULL)
					{
						*iter = newClient;
						_priv->activeConnections++;

						break;
					}
				}

				Pool p;
				LogString oss(LOG4CXX_STR(""TelnetAppender v...",235.0,310.0,1.0,25.0,76.0,28,6,19,7,0,1,9,16,0,1,,0,0,0,0,0,void
2157,57146,getPort,1,TelnetAppender.getPort,int TelnetAppender.getPort (),main\cpp\telnetappender.cpp,"int TelnetAppender::getPort() const
{
	return _priv->port;
}",312.0,315.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,int
2158,57161,setPort,1,TelnetAppender.setPort,void TelnetAppender.setPort (int),main\cpp\telnetappender.cpp,"void TelnetAppender::setPort(int port1)
{
	_priv->port = port1;
}",317.0,320.0,1.0,1.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
2159,57191,create,1,ThreadLocal.create,apr_threadkey_t ThreadLocal.create (Pool),main\cpp\threadlocal.cpp,"apr_threadkey_t* ThreadLocal::create(Pool& p)
{
	apr_threadkey_t* key = 0;
#if APR_HAS_THREADS
	apr_status_t stat = apr_threadkey_private_create(&key, 0, p.getAPRPool());

	if (stat != APR_SUCCESS)
	{
		throw RuntimeException(stat);
	}

#endif
	return key;
}",25.0,38.0,1.0,1.0,14.0,1,1,2,1,0,0,1,1,0,0,,0,0,2,1,1,apr_threadkey_t
2160,57202,ThreadLocal,1,ThreadLocal.ThreadLocal,ANY ThreadLocal.ThreadLocal (),main\cpp\threadlocal.cpp,"ThreadLocal::ThreadLocal() : p(), key(create(p))
{
}",40.0,42.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2161,57206,~ThreadLocal,1,ThreadLocal.~ThreadLocal,ANY ThreadLocal.~ThreadLocal (),main\cpp\threadlocal.cpp,"ThreadLocal::~ThreadLocal()
{
}",44.0,46.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2162,57210,set,1,ThreadLocal.set,void ThreadLocal.set (void*),main\cpp\threadlocal.cpp,"void ThreadLocal::set(void* priv)
{
#if APR_HAS_THREADS
	apr_status_t stat = apr_threadkey_private_set(priv, key);

	if (stat != APR_SUCCESS)
	{
		throw RuntimeException(stat);
	}

#endif
}",48.0,59.0,1.0,1.0,12.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
2163,57215,get,1,ThreadLocal.get,void* ThreadLocal.get (),main\cpp\threadlocal.cpp,"void* ThreadLocal::get()
{
	void* retval = 0;
#if APR_HAS_THREADS
	apr_status_t stat = apr_threadkey_private_get(&retval, key);

	if (stat != APR_SUCCESS)
	{
		throw RuntimeException(stat);
	}

#endif
	return retval;
}",61.0,74.0,1.0,1.0,14.0,1,1,2,1,0,0,1,1,0,0,,0,0,0,0,0,void*
2164,57240,ThreadPatternConverter,1,ThreadPatternConverter.ThreadPatternConverter,ANY ThreadPatternConverter.ThreadPatternConverter (),main\cpp\threadpatternconverter.cpp,"ThreadPatternConverter::ThreadPatternConverter() :
	LoggingEventPatternConverter(LOG4CXX_STR(""Thread""),
		LOG4CXX_STR(""Thread""))
{
}",30.0,34.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2165,57244,newInstance,1,ThreadPatternConverter.newInstance,PatternConverterPtr ThreadPatternConverter.newInstance (ANY),main\cpp\threadpatternconverter.cpp,"PatternConverterPtr ThreadPatternConverter::newInstance(
	const std::vector<LogString>& /* options */)
{
	static WideLife<PatternConverterPtr> def = std::make_shared<ThreadPatternConverter>();
	return def;
}",36.0,41.0,1.0,1.0,6.0,2,2,3,2,0,0,1,1,0,0,,0,0,2,1,1,PatternConverterPtr
2166,57258,format,1,ThreadPatternConverter.format,"void ThreadPatternConverter.format (LoggingEventPtr,LogString,Pool)",main\cpp\threadpatternconverter.cpp,"void ThreadPatternConverter::format(
	const LoggingEventPtr& event,
	LogString& toAppendTo,
	Pool& /* p */) const
{
	toAppendTo.append(event->getThreadName());
}",43.0,49.0,1.0,1.0,7.0,2,2,2,2,0,0,1,1,0,0,,0,0,6,3,3,void
2167,57291,ThreadSpecificData,1,ThreadSpecificData.ThreadSpecificData,ANY ThreadSpecificData.ThreadSpecificData (),main\cpp\threadspecificdata.cpp,"ThreadSpecificData::ThreadSpecificData()
	: m_priv(std::make_unique<ThreadSpecificDataPrivate>())
{
}",35.0,38.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2168,57295,~ThreadSpecificData,1,ThreadSpecificData.~ThreadSpecificData,ANY ThreadSpecificData.~ThreadSpecificData (),main\cpp\threadspecificdata.cpp,"ThreadSpecificData::~ThreadSpecificData()
{
}",40.0,42.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2169,57299,getStack,1,ThreadSpecificData.getStack,Stack ThreadSpecificData.getStack (),main\cpp\threadspecificdata.cpp,"LOG4CXX_NS::NDC::Stack& ThreadSpecificData::getStack()
{
	return m_priv->ndcStack;
}",45.0,48.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,Stack
2170,57307,getMap,1,ThreadSpecificData.getMap,Map ThreadSpecificData.getMap (),main\cpp\threadspecificdata.cpp,"LOG4CXX_NS::MDC::Map& ThreadSpecificData::getMap()
{
	return m_priv->mdcMap;
}",50.0,53.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,Map
2171,57315,getDataNoThreads,1,ThreadSpecificData.getDataNoThreads,ThreadSpecificData ThreadSpecificData.getDataNoThreads (),main\cpp\threadspecificdata.cpp,"ThreadSpecificData& ThreadSpecificData::getDataNoThreads()
{
	static WideLife<ThreadSpecificData> noThreadData;
	return noThreadData;
}",55.0,59.0,1.0,1.0,5.0,0,0,1,1,0,0,1,1,0,0,,0,0,0,0,0,ThreadSpecificData
2172,57322,getCurrentData,1,ThreadSpecificData.getCurrentData,ThreadSpecificData ThreadSpecificData.getCurrentData (),main\cpp\threadspecificdata.cpp,"ThreadSpecificData* ThreadSpecificData::getCurrentData()
{
#if APR_HAS_THREADS
	void* pData = NULL;
	apr_threadkey_private_get(&pData, APRInitializer::getTlsKey());
	return (ThreadSpecificData*) pData;
#elif LOG4CXX_HAS_THREAD_LOCAL
	thread_local ThreadSpecificData data;
	return &data;
#else
	return &getDataNoThreads();
#endif
}",61.0,73.0,1.0,1.0,13.0,1,1,0,0,11,0,1,1,0,0,,0,0,0,0,0,ThreadSpecificData
2173,57329,recycle,1,ThreadSpecificData.recycle,void ThreadSpecificData.recycle (),main\cpp\threadspecificdata.cpp,"void ThreadSpecificData::recycle()
{
#if APR_HAS_THREADS

	if (m_priv->ndcStack.empty() && m_priv->mdcMap.empty())
	{
		void* pData = NULL;
		apr_status_t stat = apr_threadkey_private_get(&pData, APRInitializer::getTlsKey());

		if (stat == APR_SUCCESS && pData == this)
		{
			stat = apr_threadkey_private_set(0, APRInitializer::getTlsKey());

			if (stat == APR_SUCCESS)
			{
				delete this;
			}
		}
	}

#endif
}",75.0,96.0,1.0,1.0,22.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,void
2174,57333,put,1,ThreadSpecificData.put,"void ThreadSpecificData.put (LogString,LogString)",main\cpp\threadspecificdata.cpp,"void ThreadSpecificData::put(const LogString& key, const LogString& val)
{
	ThreadSpecificData* data = getCurrentData();

	if (data == 0)
	{
		data = createCurrentData();
	}

	if (data != 0)
	{
		data->getMap()[key] = val;
	}
}",98.0,111.0,1.0,1.0,14.0,7,5,7,3,1,0,3,3,0,0,,0,0,4,2,2,void
2175,57364,push,1,ThreadSpecificData.push,void ThreadSpecificData.push (LogString),main\cpp\threadspecificdata.cpp,"void ThreadSpecificData::push(const LogString& val)
{
	ThreadSpecificData* data = getCurrentData();

	if (data == 0)
	{
		data = createCurrentData();
	}

	if (data != 0)
	{
		NDC::Stack& stack = data->getStack();

		if (stack.empty())
		{
			stack.push(NDC::DiagnosticContext(val, val));
		}
		else
		{
			LogString fullMessage(stack.top().second);
			fullMessage.append(1, (logchar) 0x20);
			fullMessage.append(val);
			stack.push(NDC::DiagnosticContext(val, fullMessage));
		}
	}
}",116.0,141.0,1.0,1.0,26.0,9,5,11,4,1,0,4,5,0,0,,0,0,2,1,1,void
2176,57442,inherit,1,ThreadSpecificData.inherit,void ThreadSpecificData.inherit (ANY),main\cpp\threadspecificdata.cpp,"void ThreadSpecificData::inherit(const NDC::Stack& src)
{
	ThreadSpecificData* data = getCurrentData();

	if (data == 0)
	{
		data = createCurrentData();
	}

	if (data != 0)
	{
		data->getStack() = src;
	}
}",143.0,156.0,1.0,1.0,14.0,6,4,6,2,1,0,3,3,0,0,,0,0,2,1,1,void
2177,57470,createCurrentData,1,ThreadSpecificData.createCurrentData,ThreadSpecificData ThreadSpecificData.createCurrentData (),main\cpp\threadspecificdata.cpp,"ThreadSpecificData* ThreadSpecificData::createCurrentData()
{
#if APR_HAS_THREADS
	ThreadSpecificData* newData = new ThreadSpecificData();
	apr_status_t stat = apr_threadkey_private_set(newData, APRInitializer::getTlsKey());

	if (stat != APR_SUCCESS)
	{
		delete newData;
		newData = NULL;
	}

	return newData;
#elif LOG4CXX_HAS_THREAD_LOCAL
	return getCurrentData();
#else
	return 0;
#endif
}",160.0,178.0,1.0,1.0,19.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ThreadSpecificData
2178,57491,ThreadUsernamePatternConverter,1,ThreadUsernamePatternConverter.ThreadUsernamePatternConverter,ANY ThreadUsernamePatternConverter.ThreadUsernamePatternConverter (),main\cpp\threadusernamepatternconverter.cpp,"ThreadUsernamePatternConverter::ThreadUsernamePatternConverter() :
	LoggingEventPatternConverter(LOG4CXX_STR(""Thread Name""),
		LOG4CXX_STR(""Thread Name""))
{
}",30.0,34.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2179,57495,newInstance,1,ThreadUsernamePatternConverter.newInstance,PatternConverterPtr ThreadUsernamePatternConverter.newInstance (ANY),main\cpp\threadusernamepatternconverter.cpp,"PatternConverterPtr ThreadUsernamePatternConverter::newInstance(
	const std::vector<LogString>& /* options */)
{
	static WideLife<PatternConverterPtr> def = std::make_shared<ThreadUsernamePatternConverter>();
	return def;
}",36.0,41.0,1.0,1.0,6.0,2,2,3,2,0,0,1,1,0,0,,0,0,2,1,1,PatternConverterPtr
2180,57509,format,1,ThreadUsernamePatternConverter.format,"void ThreadUsernamePatternConverter.format (LoggingEventPtr,LogString,Pool)",main\cpp\threadusernamepatternconverter.cpp,"void ThreadUsernamePatternConverter::format(
	const LoggingEventPtr& event,
	LogString& toAppendTo,
	Pool& /* p */) const
{
	toAppendTo.append(event->getThreadUserName());
}",43.0,49.0,1.0,1.0,7.0,2,2,2,2,0,0,1,1,0,0,,0,0,6,3,3,void
2181,57548,priv_data,1,LOG4CXX_NS.helpers.priv_data.priv_data,ANY LOG4CXX_NS.helpers.priv_data.priv_data (),main\cpp\threadutility.cpp,"priv_data()
	{
		start_pre = nullptr;
		started = nullptr;
		start_post = nullptr;
	}",41.0,46.0,2.0,2.0,6.0,3,1,3,3,0,3,1,1,0,0,,0,3,0,0,0,ANY
2182,57564,ThreadUtility,1,LOG4CXX_NS.helpers.ThreadUtility.ThreadUtility,ANY LOG4CXX_NS.helpers.ThreadUtility.ThreadUtility (),main\cpp\threadutility.cpp,"ThreadUtility::ThreadUtility() :
	m_priv( new priv_data() )
{
	// Block signals by default.
	configureFuncs( std::bind( &ThreadUtility::preThreadBlockSignals, this ),
		nullptr,
		std::bind( &ThreadUtility::postThreadUnblockSignals, this ) );
}",58.0,65.0,1.0,1.0,8.0,6,2,4,2,0,0,1,1,0,0,,0,0,0,0,0,ANY
2183,57588,~ThreadUtility,1,LOG4CXX_NS.helpers.ThreadUtility.~ThreadUtility,ANY LOG4CXX_NS.helpers.ThreadUtility.~ThreadUtility (),main\cpp\threadutility.cpp,ThreadUtility::~ThreadUtility() {},67.0,67.0,1.0,34.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2184,57592,instance,1,LOG4CXX_NS.helpers.ThreadUtility.instance,ThreadUtility LOG4CXX_NS.helpers.ThreadUtility.instance (),main\cpp\threadutility.cpp,"ThreadUtility* ThreadUtility::instance()
{
	static WideLife<ThreadUtility> instance;
	return &instance.value();
}",69.0,73.0,1.0,1.0,5.0,2,2,1,1,0,0,1,1,0,0,,0,0,0,0,0,ThreadUtility
2185,57603,configure,1,LOG4CXX_NS.helpers.ThreadUtility.configure,void LOG4CXX_NS.helpers.ThreadUtility.configure (ThreadConfigurationType),main\cpp\threadutility.cpp,"void ThreadUtility::configure( ThreadConfigurationType type )
{
	auto utility = instance();

	if ( type == ThreadConfigurationType::NoConfiguration )
	{
		utility->configureFuncs( nullptr, nullptr, nullptr );
	}
	else if ( type == ThreadConfigurationType::NameThreadOnly )
	{
		utility->configureFuncs( nullptr,
			std::bind( &ThreadUtility::threadStartedNameThread, utility,
				std::placeholders::_1,
				std::placeholders::_2,
				std::placeholders::_3 ),
			nullptr );
	}
	else if ( type == ThreadConfigurationType::BlockSignalsOnly )
	{
		utility->configureFuncs( std::bind( &ThreadUtility::preThreadBlockSignals, utility ),
			nullptr,
			std::bind( &ThreadUtility::postThreadUnblockSignals, utility ) );
	}
	else if ( type == ThreadConfigurationType::BlockSignalsAndNameThread )
	{
		utility->configureFuncs( std::bind( &ThreadUtility::preThreadBlockSignals, utility ),
			std::bind( &ThreadUtility::threadStartedNameThread, utility,
				std::placeholders::_1,
				std::placeholders::_2,
		...",75.0,107.0,1.0,1.0,33.0,4,4,4,3,0,1,2,2,1,0,,0,1,2,1,1,void
2186,57752,configureFuncs,1,LOG4CXX_NS.helpers.ThreadUtility.configureFuncs,"void LOG4CXX_NS.helpers.ThreadUtility.configureFuncs (ThreadStartPre,ThreadStarted,ThreadStartPost)",main\cpp\threadutility.cpp,"void ThreadUtility::configureFuncs( ThreadStartPre pre_start,
	ThreadStarted started,
	ThreadStartPost post_start )
{
	m_priv->start_pre = pre_start;
	m_priv->started = started;
	m_priv->start_post = post_start;
}",109.0,116.0,1.0,1.0,8.0,6,2,6,4,0,0,1,1,0,0,,0,0,6,3,3,void
2187,57774,preThreadBlockSignals,1,LOG4CXX_NS.helpers.ThreadUtility.preThreadBlockSignals,void LOG4CXX_NS.helpers.ThreadUtility.preThreadBlockSignals (),main\cpp\threadutility.cpp,"void ThreadUtility::preThreadBlockSignals()
{
#if LOG4CXX_HAS_PTHREAD_SIGMASK
	sigset_t set;
	sigfillset(&set);

	if ( pthread_sigmask(SIG_SETMASK, &set, &old_mask) < 0 )
	{
		LOGLOG_ERROR( LOG4CXX_STR(""Unable to set thread sigmask"") );
		sigmask_valid = false;
	}
	else
	{
		sigmask_valid = true;
	}

#endif /* LOG4CXX_HAS_PTHREAD_SIGMASK */
}",118.0,135.0,1.0,1.0,18.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,void
2188,57778,threadStartedNameThread,1,LOG4CXX_NS.helpers.ThreadUtility.threadStartedNameThread,"void LOG4CXX_NS.helpers.ThreadUtility.threadStartedNameThread (LogString,ANY,ANY)",main\cpp\threadutility.cpp,"void ThreadUtility::threadStartedNameThread(LogString threadName,
	std::thread::id /*threadId*/,
	std::thread::native_handle_type nativeHandle)
{
#if LOG4CXX_HAS_PTHREAD_SETNAME
	LOG4CXX_ENCODE_CHAR(sthreadName, threadName);
	if (pthread_setname_np(static_cast<pthread_t>(nativeHandle), sthreadName.c_str()) < 0) {
		LOGLOG_ERROR(LOG4CXX_STR(""unable to set thread name""));
	}
#elif WIN32
	typedef HRESULT (WINAPI *TSetThreadDescription)(HANDLE, PCWSTR);
	static struct initialiser
	{
		HMODULE hKernelBase;
		TSetThreadDescription SetThreadDescription;
		initialiser()
			: hKernelBase(GetModuleHandleA(""KernelBase.dll""))
			, SetThreadDescription(nullptr)
		{
			if (hKernelBase)
				SetThreadDescription = reinterpret_cast<TSetThreadDescription>(GetProcAddress(hKernelBase, ""SetThreadDescription""));
		}
	} win32Func;
	if (win32Func.SetThreadDescription)
	{
		LOG4CXX_ENCODE_WCHAR(wthreadName, threadName);
		if(FAILED(win32Func.SetThreadDescription(static_cast<HANDLE>(nativeHandle), wthreadNam...",137.0,167.0,1.0,1.0,31.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,void
2189,57785,postThreadUnblockSignals,1,LOG4CXX_NS.helpers.ThreadUtility.postThreadUnblockSignals,void LOG4CXX_NS.helpers.ThreadUtility.postThreadUnblockSignals (),main\cpp\threadutility.cpp,"void ThreadUtility::postThreadUnblockSignals()
{
#if LOG4CXX_HAS_PTHREAD_SIGMASK

	// Only restore the signal mask if we were able to set it in the first place.
	if ( sigmask_valid )
	{
		if ( pthread_sigmask(SIG_SETMASK, &old_mask, nullptr) < 0 )
		{
			LOGLOG_ERROR( LOG4CXX_STR(""Unable to set thread sigmask"") );
		}
	}

#endif /* LOG4CXX_HAS_PTHREAD_SIGMASK */
}",169.0,183.0,1.0,1.0,15.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,void
2190,57789,preStartFunction,1,LOG4CXX_NS.helpers.ThreadUtility.preStartFunction,ThreadStartPre LOG4CXX_NS.helpers.ThreadUtility.preStartFunction (),main\cpp\threadutility.cpp,"ThreadStartPre ThreadUtility::preStartFunction()
{
	return m_priv->start_pre;
}",186.0,189.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,ThreadStartPre
2191,57797,threadStartedFunction,1,LOG4CXX_NS.helpers.ThreadUtility.threadStartedFunction,ThreadStarted LOG4CXX_NS.helpers.ThreadUtility.threadStartedFunction (),main\cpp\threadutility.cpp,"ThreadStarted ThreadUtility::threadStartedFunction()
{
	return m_priv->started;
}",191.0,194.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,ThreadStarted
2192,57805,postStartFunction,1,LOG4CXX_NS.helpers.ThreadUtility.postStartFunction,ThreadStartPost LOG4CXX_NS.helpers.ThreadUtility.postStartFunction (),main\cpp\threadutility.cpp,"ThreadStartPost ThreadUtility::postStartFunction()
{
	return m_priv->start_post;
}",196.0,199.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,ThreadStartPost
2193,57831,ThrowableInformationPatternConverterPrivate,1,ThrowableInformationPatternConverterPrivate.ThrowableInformationPatternConverterPrivate,"ANY ThrowableInformationPatternConverterPrivate.ThrowableInformationPatternConverterPrivate (LogString,LogString,bool)",main\cpp\throwableinformationpatternconverter.cpp,"ThrowableInformationPatternConverterPrivate( const LogString& name, const LogString& style, bool shortReport ) :
		PatternConverterPrivate( name, style ),
		shortReport(shortReport) {}",33.0,35.0,2.0,29.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ANY
2194,57841,ThrowableInformationPatternConverter,1,ThrowableInformationPatternConverter.ThrowableInformationPatternConverter,ANY ThrowableInformationPatternConverter.ThrowableInformationPatternConverter (bool),main\cpp\throwableinformationpatternconverter.cpp,"ThrowableInformationPatternConverter::ThrowableInformationPatternConverter(bool shortReport1) :
	LoggingEventPatternConverter(
		std::make_unique<ThrowableInformationPatternConverterPrivate>(
			LOG4CXX_STR(""Throwable""),
			LOG4CXX_STR(""throwable""),
			shortReport1))
{
}",45.0,52.0,1.0,1.0,8.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
2195,57846,newInstance,1,ThrowableInformationPatternConverter.newInstance,PatternConverterPtr ThrowableInformationPatternConverter.newInstance (ANY),main\cpp\throwableinformationpatternconverter.cpp,"PatternConverterPtr ThrowableInformationPatternConverter::newInstance(
	const std::vector<LogString>& options)
{
	if (options.size() > 0 && options[0].compare(LOG4CXX_STR(""short"")) == 0)
	{
		static WideLife<PatternConverterPtr> shortConverter = std::make_shared<ThrowableInformationPatternConverter>(true);
		return shortConverter;
	}

	static WideLife<PatternConverterPtr> converter = std::make_shared<ThrowableInformationPatternConverter>(false);
	return converter;
}",54.0,65.0,1.0,1.0,12.0,14,7,10,5,0,0,2,2,0,0,,0,0,2,1,1,PatternConverterPtr
2196,57894,format,1,ThrowableInformationPatternConverter.format,"void ThrowableInformationPatternConverter.format (LoggingEventPtr,LogString,Pool)",main\cpp\throwableinformationpatternconverter.cpp,"void ThrowableInformationPatternConverter::format(
	const LoggingEventPtr& /* event */,
	LogString& /* toAppendTo */,
	Pool& /* p */) const
{
}",67.0,72.0,1.0,1.0,6.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,void
2197,57901,handlesThrowable,1,ThrowableInformationPatternConverter.handlesThrowable,bool ThrowableInformationPatternConverter.handlesThrowable (),main\cpp\throwableinformationpatternconverter.cpp,"bool ThrowableInformationPatternConverter::handlesThrowable() const
{
	return true;
}",78.0,81.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,bool
2198,57947,TimeBasedRollingPolicyPrivate,1,TimeBasedRollingPolicyPrivate.TimeBasedRollingPolicyPrivate,ANY TimeBasedRollingPolicyPrivate.TimeBasedRollingPolicyPrivate (),main\cpp\timebasedrollingpolicy.cpp,TimeBasedRollingPolicyPrivate(){},51.0,51.0,2.0,34.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2199,57978,createMMapFile,1,TimeBasedRollingPolicy.createMMapFile,"int TimeBasedRollingPolicy.createMMapFile (ANY,ANY)",main\cpp\timebasedrollingpolicy.cpp,"int TimeBasedRollingPolicy::createMMapFile(const std::string&, LOG4CXX_NS::helpers::Pool&) {
	return 0;
}",248.0,250.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,int
2200,57986,isMapFileEmpty,1,TimeBasedRollingPolicy.isMapFileEmpty,bool TimeBasedRollingPolicy.isMapFileEmpty (ANY),main\cpp\timebasedrollingpolicy.cpp,"bool TimeBasedRollingPolicy::isMapFileEmpty(LOG4CXX_NS::helpers::Pool&){
	return true;
}",252.0,254.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,bool
2201,57993,initMMapFile,1,TimeBasedRollingPolicy.initMMapFile,"void TimeBasedRollingPolicy.initMMapFile (LogString,ANY)",main\cpp\timebasedrollingpolicy.cpp,"void TimeBasedRollingPolicy::initMMapFile(const LogString&, LOG4CXX_NS::helpers::Pool&){}",256.0,256.0,1.0,89.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
2202,57999,lockMMapFile,1,TimeBasedRollingPolicy.lockMMapFile,int TimeBasedRollingPolicy.lockMMapFile (int),main\cpp\timebasedrollingpolicy.cpp,"int TimeBasedRollingPolicy::lockMMapFile(int){
	return 0;
}",258.0,260.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,int
2203,58006,unLockMMapFile,1,TimeBasedRollingPolicy.unLockMMapFile,int TimeBasedRollingPolicy.unLockMMapFile (),main\cpp\timebasedrollingpolicy.cpp,"int TimeBasedRollingPolicy::unLockMMapFile(){
	return 0;
}",262.0,264.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,int
2204,58012,createFile,1,TimeBasedRollingPolicy.createFile,"string TimeBasedRollingPolicy.createFile (ANY,ANY,ANY)",main\cpp\timebasedrollingpolicy.cpp,"const std::string TimeBasedRollingPolicy::createFile(const std::string&, const std::string&, LOG4CXX_NS::helpers::Pool&){
	return """";
}",266.0,268.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,string
2205,58021,TimeBasedRollingPolicy,1,TimeBasedRollingPolicy.TimeBasedRollingPolicy,ANY TimeBasedRollingPolicy.TimeBasedRollingPolicy (),main\cpp\timebasedrollingpolicy.cpp,"TimeBasedRollingPolicy::TimeBasedRollingPolicy() :
	m_priv(std::make_unique<TimeBasedRollingPolicyPrivate>())
{
}",271.0,274.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2206,58025,~TimeBasedRollingPolicy,1,TimeBasedRollingPolicy.~TimeBasedRollingPolicy,ANY TimeBasedRollingPolicy.~TimeBasedRollingPolicy (),main\cpp\timebasedrollingpolicy.cpp,TimeBasedRollingPolicy::~TimeBasedRollingPolicy(){},276.0,276.0,1.0,51.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2207,58029,activateOptions,1,TimeBasedRollingPolicy.activateOptions,void TimeBasedRollingPolicy.activateOptions (ANY),main\cpp\timebasedrollingpolicy.cpp,"void TimeBasedRollingPolicy::activateOptions(LOG4CXX_NS::helpers::Pool& pool)
{
	// find out period from the filename pattern
	if (getFileNamePattern().length() > 0)
	{
		parseFileNamePattern();
	}
	else
	{
		LogLog::warn(
			LOG4CXX_STR(""The FileNamePattern option must be set before using TimeBasedRollingPolicy. ""));
		throw IllegalStateException();
	}

	PatternConverterPtr dtc(getDatePatternConverter());

	if (dtc == NULL)
	{
		throw IllegalStateException();
	}

	LogString buf;
	ObjectPtr obj = std::make_shared<Date>();
	formatFileName(obj, buf, pool);
	m_priv->lastFileName = buf;

	if( m_priv->multiprocess ){
#if LOG4CXX_HAS_MULTIPROCESS_ROLLING_FILE_APPENDER
		if (getPatternConverterList().size())
		{
			(*(getPatternConverterList().begin()))->format(obj, m_priv->_fileNamePattern, pool);
		}
		else
		{
			m_priv->_fileNamePattern = m_priv->lastFileName;
		}

		if (!m_priv->_lock_file)
		{
			const std::string lockname = createFile(std::string(m_priv->_fileNamePattern), LOCK_FILE...",278.0,343.0,1.0,1.0,66.0,22,8,15,7,0,0,6,7,0,0,,0,0,2,1,1,void
2208,58163,getFormatSpecifiers,1,TimeBasedRollingPolicy.getFormatSpecifiers,PatternMap TimeBasedRollingPolicy.getFormatSpecifiers (),main\cpp\timebasedrollingpolicy.cpp,"LOG4CXX_NS::pattern::PatternMap TimeBasedRollingPolicy::getFormatSpecifiers() const
{
	PatternMap specs;
	RULES_PUT(""d"", FileDatePatternConverter);
	RULES_PUT(""date"", FileDatePatternConverter);
	return specs;
}",349.0,355.0,1.0,1.0,7.0,8,2,7,3,0,0,1,1,0,0,,0,0,0,0,0,PatternMap
2209,58208,initialize,1,TimeBasedRollingPolicy.initialize,"RolloverDescriptionPtr TimeBasedRollingPolicy.initialize (LogString,bool,Pool)",main\cpp\timebasedrollingpolicy.cpp,"RolloverDescriptionPtr TimeBasedRollingPolicy::initialize(
	const   LogString&  currentActiveFile,
	const   bool        append,
	Pool&       pool)
{
	Date now;
	log4cxx_time_t n = now.getTime();
	m_priv->nextCheck = now.getNextSecond();

	File currentFile(currentActiveFile);

	LogString buf;
	ObjectPtr obj = std::make_shared<Date>(currentFile.exists(pool) ? currentFile.lastModified(pool) : n);
	formatFileName(obj, buf, pool);
	m_priv->lastFileName = buf;

	ActionPtr noAction;

	if (currentActiveFile.length() > 0)
	{
		return std::make_shared<RolloverDescription>(
					currentActiveFile, append, noAction, noAction);
	}
	else
	{
		m_priv->bRefreshCurFile = true;
		return std::make_shared<RolloverDescription>(
					m_priv->lastFileName.substr(0, m_priv->lastFileName.length() - m_priv->suffixLength), append,
					noAction, noAction);
	}
}",360.0,390.0,1.0,1.0,31.0,21,8,25,13,0,0,2,2,0,0,,0,0,6,3,3,RolloverDescriptionPtr
2210,58323,rollover,1,TimeBasedRollingPolicy.rollover,"RolloverDescriptionPtr TimeBasedRollingPolicy.rollover (LogString,bool,Pool)",main\cpp\timebasedrollingpolicy.cpp,"RolloverDescriptionPtr TimeBasedRollingPolicy::rollover(
	const   LogString&  currentActiveFile,
	const   bool        append,
	Pool&       pool)
{
	Date now;
	log4cxx_time_t n = now.getTime();
	m_priv->nextCheck = now.getNextSecond();

	LogString buf;
	ObjectPtr obj = std::make_shared<Date>(n);
	formatFileName(obj, buf, pool);

	LogString newFileName(buf);

	if( m_priv->multiprocess ){
#if LOG4CXX_HAS_MULTIPROCESS_ROLLING_FILE_APPENDER
		m_priv->bAlreadyInitialized = true;

		if (m_priv->_mmap && !isMapFileEmpty(m_priv->_mmapPool))
		{
			lockMMapFile(APR_FLOCK_SHARED);
			LogString mapLastFile((char*)m_priv->_mmap->mm);
			m_priv->lastFileName = mapLastFile;
			unLockMMapFile();
		}
		else
		{
			m_priv->_mmap = NULL;
			initMMapFile(m_priv->lastFileName, m_priv->_mmapPool);
		}
#endif
	}

	//
	//  if file names haven't changed, no rollover
	//
	if (newFileName == m_priv->lastFileName)
	{
		RolloverDescriptionPtr desc;
		return desc;
	}

	ActionPtr renameAction;
	ActionPtr compress...",392.0,495.0,1.0,1.0,104.0,69,10,63,23,0,0,8,8,0,0,,0,0,6,3,3,RolloverDescriptionPtr
2211,58571,isTriggeringEvent,1,TimeBasedRollingPolicy.isTriggeringEvent,"bool TimeBasedRollingPolicy.isTriggeringEvent (Appender*,ANY,LogString,size_t)",main\cpp\timebasedrollingpolicy.cpp,"bool TimeBasedRollingPolicy::isTriggeringEvent(
	Appender* appender,
	const LOG4CXX_NS::spi::LoggingEventPtr& /* event */,
	const LogString&  filename,
	size_t /* fileLength */)
{
	if( m_priv->multiprocess ){
#if LOG4CXX_HAS_MULTIPROCESS_ROLLING_FILE_APPENDER
		if (m_priv->bRefreshCurFile && m_priv->_mmap && !isMapFileEmpty(m_priv->_mmapPool))
		{
			lockMMapFile(APR_FLOCK_SHARED);
			LogString mapCurrent((char*)m_priv->_mmap->mm);
			unLockMMapFile();
			LogString mapCurrentBase(mapCurrent.substr(0, mapCurrent.length() - m_priv->suffixLength));

			if (!mapCurrentBase.empty() && mapCurrentBase != filename)
			{
				const FileAppender* fappend = reinterpret_cast<const FileAppender*>(appender->cast(FileAppender::getStaticClass()));
				if( fappend ){
					const_cast<FileAppender*>(fappend)->setFile(mapCurrentBase);
				}
			}
		}

		return ( Date::currentTime() > m_priv->nextCheck) || (!m_priv->bAlreadyInitialized);
#endif
	}

	return Date::currentTime() > m_priv->nextCheck;
}",497.0,526.0,1.0,1.0,30.0,4,3,3,2,0,1,2,2,0,0,,0,0,8,4,4,bool
2212,58593,setMultiprocess,1,TimeBasedRollingPolicy.setMultiprocess,void TimeBasedRollingPolicy.setMultiprocess (bool),main\cpp\timebasedrollingpolicy.cpp,"void TimeBasedRollingPolicy::setMultiprocess(bool multiprocess){
#if LOG4CXX_HAS_MULTIPROCESS_ROLLING_FILE_APPENDER
	// If we don't have the multiprocess stuff, disregard any attempt to set this value
	m_priv->multiprocess = multiprocess;
#endif
}",528.0,533.0,1.0,1.0,6.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
2213,58598,setOption,1,TimeBasedRollingPolicy.setOption,"void TimeBasedRollingPolicy.setOption (LogString,LogString)",main\cpp\timebasedrollingpolicy.cpp,"void TimeBasedRollingPolicy::setOption(const LogString& option,
	const LogString& value)
{
	if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR(""THROWIOEXCEPTIONONFORKFAILURE""),
			LOG4CXX_STR(""throwioexceptiononforkfailure"")))
	{
		m_priv->throwIOExceptionOnForkFailure = OptionConverter::toBoolean(value, true);
	}
	else
	{
		RollingPolicyBase::setOption(option, value);
	}
}",535.0,548.0,1.0,1.0,14.0,4,3,5,5,0,2,2,2,1,2,,0,2,4,2,2,void
2214,58664,getInstance,1,LOG4CXX_NS.helpers.TimeZoneImpl.GMTTimeZone.getInstance,TimeZonePtr LOG4CXX_NS.helpers.TimeZoneImpl.GMTTimeZone.getInstance (),main\cpp\timezone.cpp,"static const TimeZonePtr& getInstance()
		{
			static WideLife<TimeZonePtr> tz = std::make_shared<GMTTimeZone>();
			return tz;
		}",47.0,51.0,3.0,3.0,5.0,2,2,3,2,2,0,1,1,0,0,,0,0,0,0,0,TimeZonePtr
2215,58677,explode,1,LOG4CXX_NS.helpers.TimeZoneImpl.GMTTimeZone.explode,"log4cxx_status_t LOG4CXX_NS.helpers.TimeZoneImpl.GMTTimeZone.explode (apr_time_exp_t*,log4cxx_time_t)",main\cpp\timezone.cpp,"log4cxx_status_t explode( apr_time_exp_t* result, log4cxx_time_t input ) const
		{
			apr_status_t stat;

			//  APR 1.1 and early mishandles microseconds on dates
			//   before 1970, APR bug 32520
			if (LOG4CXX_UNLIKELY(input < 0 && apr_time_usec(input) < 0))
			{
				apr_time_t floorTime = (apr_time_sec(input) - 1) * APR_USEC_PER_SEC;
				stat = apr_time_exp_gmt(result, floorTime);
				result->tm_usec = (int) (input - floorTime);
			}
			else
			{
				stat = apr_time_exp_gmt( result, input );
			}

			return stat;
		}",54.0,72.0,3.0,3.0,19.0,11,7,12,5,0,0,2,2,0,0,,0,0,4,2,2,log4cxx_status_t
2216,58727,GMTTimeZone,1,LOG4CXX_NS.helpers.TimeZoneImpl.GMTTimeZone.GMTTimeZone,ANY LOG4CXX_NS.helpers.TimeZoneImpl.GMTTimeZone.GMTTimeZone (),main\cpp\timezone.cpp,"GMTTimeZone() : TimeZone( LOG4CXX_STR(""GMT"") )
		{
		}",74.0,76.0,3.0,3.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2217,58732,getInstance,1,LOG4CXX_NS.helpers.TimeZoneImpl.LocalTimeZone.getInstance,TimeZonePtr LOG4CXX_NS.helpers.TimeZoneImpl.LocalTimeZone.getInstance (),main\cpp\timezone.cpp,"static const TimeZonePtr& getInstance()
		{
			static WideLife<TimeZonePtr> tz = std::make_shared<LocalTimeZone>();
			return tz;
		}",86.0,90.0,3.0,3.0,5.0,2,2,3,2,1,0,1,1,0,0,,0,0,0,0,0,TimeZonePtr
2218,58745,explode,1,LOG4CXX_NS.helpers.TimeZoneImpl.LocalTimeZone.explode,"log4cxx_status_t LOG4CXX_NS.helpers.TimeZoneImpl.LocalTimeZone.explode (apr_time_exp_t*,log4cxx_time_t)",main\cpp\timezone.cpp,"log4cxx_status_t explode( apr_time_exp_t* result, log4cxx_time_t input ) const
		{
			apr_status_t stat;

			//  APR 1.1 and early mishandles microseconds on dates
			//   before 1970, APR bug 32520
			if (LOG4CXX_UNLIKELY(input < 0 && apr_time_usec(input) < 0))
			{
				apr_time_t floorTime = (apr_time_sec(input) - 1) * APR_USEC_PER_SEC;
				stat = apr_time_exp_lt(result, floorTime);
				result->tm_usec = (int) (input - floorTime);
			}
			else
			{
				stat = apr_time_exp_lt( result, input );
			}

			return stat;
		}",93.0,111.0,3.0,3.0,19.0,11,7,12,5,0,0,2,2,0,0,,0,0,4,2,2,log4cxx_status_t
2219,58795,LocalTimeZone,1,LOG4CXX_NS.helpers.TimeZoneImpl.LocalTimeZone.LocalTimeZone,ANY LOG4CXX_NS.helpers.TimeZoneImpl.LocalTimeZone.LocalTimeZone (),main\cpp\timezone.cpp,"LocalTimeZone() : TimeZone( getTimeZoneName() )
		{
		}",114.0,116.0,3.0,3.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2220,58799,getTimeZoneName,1,LOG4CXX_NS.helpers.TimeZoneImpl.LocalTimeZone.getTimeZoneName,LogString LOG4CXX_NS.helpers.TimeZoneImpl.LocalTimeZone.getTimeZoneName (),main\cpp\timezone.cpp,"static const LogString getTimeZoneName()
		{
			const int MAX_TZ_LENGTH = 255;
			char tzName[MAX_TZ_LENGTH];
			apr_size_t tzLength;
			apr_time_exp_t tm;
			apr_time_exp_lt(&tm, 0);
			apr_strftime(tzName, &tzLength, MAX_TZ_LENGTH, ""%Z"", &tm);

			if (tzLength == 0)
			{
				apr_strftime(tzName, &tzLength, MAX_TZ_LENGTH, ""%z"", &tm);
			}

			tzName[tzLength] = 0;
			LogString retval;
			LOG4CXX_NS::helpers::Transcoder::decode(tzName, retval);
			return retval;
		}",119.0,137.0,3.0,3.0,19.0,12,5,19,8,0,0,2,2,0,0,,0,0,0,0,0,LogString
2221,58854,FixedTimeZone,1,LOG4CXX_NS.helpers.TimeZoneImpl.FixedTimeZone.FixedTimeZone,"ANY LOG4CXX_NS.helpers.TimeZoneImpl.FixedTimeZone.FixedTimeZone (LogString,apr_int32_t)",main\cpp\timezone.cpp,"FixedTimeZone( const LogString& name, apr_int32_t offset1 ) : TimeZone( name ), offset( offset1 )
		{
		}",147.0,149.0,3.0,3.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ANY
2222,58860,explode,1,LOG4CXX_NS.helpers.TimeZoneImpl.FixedTimeZone.explode,"log4cxx_status_t LOG4CXX_NS.helpers.TimeZoneImpl.FixedTimeZone.explode (apr_time_exp_t*,log4cxx_time_t)",main\cpp\timezone.cpp,"log4cxx_status_t explode( apr_time_exp_t* result, log4cxx_time_t input ) const
		{
			apr_status_t stat;

			//  APR 1.1 and early mishandles microseconds on dates
			//   before 1970, APR bug 32520
			if (LOG4CXX_UNLIKELY(input < 0 && apr_time_usec(input) < 0))
			{
				apr_time_t floorTime = (apr_time_sec(input) - 1) * APR_USEC_PER_SEC;
				stat = apr_time_exp_tz(result, floorTime, offset);
				result->tm_usec = (int) (input - floorTime);
			}
			else
			{
				stat = apr_time_exp_tz( result, input, offset );
			}

			return stat;
		}",152.0,170.0,3.0,3.0,19.0,11,7,13,6,0,1,2,2,0,0,,0,1,4,2,2,log4cxx_status_t
2223,58913,TimeZone,1,TimeZone.TimeZone,ANY TimeZone.TimeZone (LogString),main\cpp\timezone.cpp,"TimeZone::TimeZone( const LogString& id1 ) : id( id1 )
{
}",183.0,185.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
2224,58918,~TimeZone,1,TimeZone.~TimeZone,ANY TimeZone.~TimeZone (),main\cpp\timezone.cpp,"TimeZone::~TimeZone()
{
}",187.0,189.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2225,58922,getDefault,1,TimeZone.getDefault,TimeZonePtr TimeZone.getDefault (),main\cpp\timezone.cpp,"const TimeZonePtr& TimeZone::getDefault()
{
	return LOG4CXX_NS::helpers::TimeZoneImpl::LocalTimeZone::getInstance();
}",191.0,194.0,1.0,1.0,4.0,4,1,4,4,0,1,1,1,0,0,,0,0,0,0,0,TimeZonePtr
2226,58937,getGMT,1,TimeZone.getGMT,TimeZonePtr TimeZone.getGMT (),main\cpp\timezone.cpp,"const TimeZonePtr& TimeZone::getGMT()
{
	return LOG4CXX_NS::helpers::TimeZoneImpl::GMTTimeZone::getInstance();
}",196.0,199.0,1.0,1.0,4.0,4,1,4,4,1,1,1,1,0,0,,0,0,0,0,0,TimeZonePtr
2227,58952,getTimeZone,1,TimeZone.getTimeZone,TimeZonePtr TimeZone.getTimeZone (LogString),main\cpp\timezone.cpp,"const TimeZonePtr TimeZone::getTimeZone( const LogString& id )
{
	const logchar gmt[] = { 0x47, 0x4D, 0x54, 0 };

	if ( id == gmt )
	{
		return LOG4CXX_NS::helpers::TimeZoneImpl::GMTTimeZone::getInstance();
	}

	if ( id.length() >= 5 && id.substr( 0, 3 ) == gmt )
	{
		int hours = 0;
		int minutes = 0;
		int sign = 1;

		if (id[3] == 0x2D /* '-' */)
		{
			sign = -1;
		}

		LogString off( id.substr( 4 ) );

		if ( id.length() >= 7 )
		{
			size_t colonPos = off.find( 0x3A /* ':' */);

			if ( colonPos == LogString::npos )
			{
				minutes = StringHelper::toInt(off.substr(off.length() - 2));
				hours = StringHelper::toInt(off.substr(0, off.length() - 2));
			}
			else
			{
				minutes = StringHelper::toInt(off.substr(colonPos + 1));
				hours = StringHelper::toInt(off.substr(0, colonPos));
			}
		}
		else
		{
			hours = StringHelper::toInt(off);
		}

		LogString s(gmt);
		Pool p;
		LogString hh;
		StringHelper::toString(hours, p, hh);

		if (sign > 0)
		{
			s.append(1, (logchar) 0x2...",201.0,285.0,1.0,1.0,85.0,68,17,62,20,0,5,10,17,0,4,,0,2,2,1,1,TimeZonePtr
2228,59289,decodeUTF8,1,Transcoder.decodeUTF8,"void Transcoder.decodeUTF8 (ANY,LogString)",main\cpp\transcoder.cpp,"void Transcoder::decodeUTF8(const std::string& src, LogString& dst)
{
	std::string::const_iterator iter = src.begin();

	while (iter != src.end())
	{
		unsigned int sv = decode(src, iter);

		if (sv != 0xFFFF)
		{
			encode(sv, dst);
		}
		else
		{
			dst.append(1, LOSSCHAR);
			iter++;
		}
	}
}",43.0,61.0,1.0,1.0,19.0,6,3,10,4,1,0,3,4,0,0,,0,0,4,2,2,void
2229,59334,encodeUTF8,1,Transcoder.encodeUTF8,"void Transcoder.encodeUTF8 (LogString,ANY)",main\cpp\transcoder.cpp,"size_t Transcoder::encodeUTF8(unsigned int ch, char* dst)
{
	if (ch < 0x80)
	{
		dst[0] = (char) ch;
		return 1;
	}
	else if (ch < 0x800)
	{
		dst[0] = (char) (0xC0 + (ch >> 6));
		dst[1] = (char) (0x80 + (ch & 0x3F));
		return 2;
	}
	else if (ch < 0x10000)
	{
		dst[0] = (char) (0xE0 + (ch >> 12));
		dst[1] = (char) (0x80 + ((ch >> 6) & 0x3F));
		dst[2] = (char) (0x80 + (ch & 0x3F));
		return 3;
	}
	else if (ch <= 0x10FFFF)
	{
		dst[0] = (char) (0xF0 + (ch >> 18));
		dst[1] = (char) (0x80 + ((ch >> 12) & 0x3F));
		dst[2] = (char) (0x80 + ((ch >> 6) & 0x3F));
		dst[3] = (char) (0x80 + (ch & 0x3F));
		return 4;
	}
	else
	{
		//
		//  output UTF-8 encoding of 0xFFFF
		//
		dst[0] = (char) 0xEF;
		dst[1] = (char) 0xBF;
		dst[2] = (char) 0xBF;
		return 3;
	}
}",107.0,145.0,1.0,1.0,39.0,6,3,10,4,1,0,3,4,0,0,,0,0,4,2,2,size_t
2230,59597,encodeUTF16BE,1,Transcoder.encodeUTF16BE,"void Transcoder.encodeUTF16BE (unsigned int,ByteBuffer)",main\cpp\transcoder.cpp,"size_t Transcoder::encodeUTF16BE(unsigned int ch, char* dst)
{
	if (ch <= 0xFFFF)
	{
		dst[0] = (char) (ch >> 8);
		dst[1] = (char) (ch & 0xFF);
		return 2;
	}

	if (ch <= 0x10FFFF)
	{
		unsigned char w = (unsigned char) ((ch >> 16) - 1);
		dst[0] = (char) (0xD8 + (w >> 2));
		dst[1] = (char) (((w & 0x03) << 6) + ((ch >> 10) & 0x3F));
		dst[2] = (char) (0xDC + ((ch & 0x30) >> 4));
		dst[3] = (char) (ch & 0xFF);
		return 4;
	}

	dst[0] = dst[1] = (char) 0xFF;
	return 2;
}",154.0,175.0,1.0,1.0,22.0,5,3,6,3,1,0,1,1,0,0,,0,0,4,2,2,size_t
2231,59733,encodeUTF16LE,1,Transcoder.encodeUTF16LE,"void Transcoder.encodeUTF16LE (unsigned int,ByteBuffer)",main\cpp\transcoder.cpp,"size_t Transcoder::encodeUTF16LE(unsigned int ch, char* dst)
{
	if (ch <= 0xFFFF)
	{
		dst[1] = (char) (ch >> 8);
		dst[0] = (char) (ch & 0xFF);
		return 2;
	}

	if (ch <= 0x10FFFF)
	{
		unsigned char w = (unsigned char) ((ch >> 16) - 1);
		dst[1] = (char) (0xD8 + (w >> 2));
		dst[0] = (char) (((w & 0x03) << 6) + ((ch >> 10) & 0x3F));
		dst[3] = (char) (0xDC + ((ch & 0x30) >> 4));
		dst[2] = (char) (ch & 0xFF);
		return 4;
	}

	dst[0] = dst[1] = (char) 0xFF;
	return 2;
}",183.0,204.0,1.0,1.0,22.0,5,3,6,3,1,0,1,1,0,0,,0,0,4,2,2,size_t
2232,59869,decode,1,Transcoder.decode,"unsigned int Transcoder.decode (ANY,ANY)",main\cpp\transcoder.cpp,"LogString Transcoder::decode(const char* val)
{
#if LOG4CXX_LOGCHAR_IS_UTF8 && !LOG4CXX_CHARSET_EBCDIC
	return val;
#else
	LogString dst;
	Transcoder::decode(val, dst);
	return dst;
#endif
}",670.0,679.0,1.0,1.0,10.0,67,13,54,8,17,0,14,37,0,0,,0,0,2,1,1,LogString
2233,60086,encode,1,Transcoder.encode,"void Transcoder.encode (unsigned int,ANY)",main\cpp\transcoder.cpp,"void Transcoder::encode(const LogString& src, std::string& dst)
{
#if LOG4CXX_CHARSET_UTF8 && LOG4CXX_LOGCHAR_IS_UTF8
	dst.append(src);
#else
	static CharsetEncoderPtr encoder(CharsetEncoder::getDefaultEncoder());
	dst.reserve(dst.size() + src.size());
	LogString::const_iterator iter = src.begin();
#if !LOG4CXX_CHARSET_EBCDIC

	for (;
		iter != src.end() && ((unsigned int) *iter) < 0x80;
		iter++)
	{
		dst.append(1, *iter);
	}

#endif

	if (iter != src.end())
	{
		char buf[BUFSIZE];
		ByteBuffer out(buf, BUFSIZE);

		while (iter != src.end())
		{
			log4cxx_status_t stat = encoder->encode(src, iter, out);
			out.flip();
			dst.append(out.data(), out.limit());
			out.clear();

			if (CharsetEncoder::isError(stat))
			{
				dst.append(1, LOSSCHAR);
				iter++;
			}
		}

		encoder->encode(src, iter, out);
	}

#endif
}",368.0,410.0,1.0,1.0,43.0,2,2,6,4,7,0,1,1,0,0,,0,0,4,2,2,void
2234,60387,decodeUTF16,1,decodeUTF16,"unsigned int decodeUTF16<String,Iterator> (String,Iterator)",main\cpp\transcoder.cpp,"static unsigned int decodeUTF16(const String& in, Iterator& iter)
{
	unsigned int ch1 = *iter;

	//
	//   if not surrogate pair
	//
	if (ch1 < 0xD800 || ch1 > 0xDFFF)
	{
		//
		//  then advance iterator and return wchar_t value
		//
		if (ch1 != 0xFFFF)
		{
			iter++;
		}

		return ch1;
	}
	else if (ch1 < 0xDC00)
	{
		//
		//  started with high-surrogate value
		//     if there is an additional wchar_t
		Iterator iter2 = iter + 1;

		if (iter2 != in.end())
		{
			unsigned int ch2 = *iter2;

			//
			//    if it is a matching low surrogate then
			//       advance the iterator and return the scalar value
			if (ch2 >= 0xDC00 && ch2 <= 0xDFFF)
			{
				iter += 2;
				return (ch1 - 0xD800) * 0x400 + (ch2 - 0xDC00) + 0x10000;
			}
		}
	}

	//
	//    unrecognized value, do not advance iterator
	//
	return 0xFFFF;
}",414.0,459.0,1.0,1.0,46.0,7,7,7,2,0,0,3,4,0,0,,0,0,4,2,2,unsigned int
2235,60468,encodeUTF16,1,encodeUTF16,"void encodeUTF16<String> (unsigned int,String)",main\cpp\transcoder.cpp,"static void encodeUTF16(unsigned int sv, String& dst)
{
	if (sv < 0x10000)
	{
		dst.append(1, sv);
	}
	else
	{
		unsigned char u = (unsigned char) (sv >> 16);
		unsigned char w = (unsigned char) (u - 1);
		unsigned short hs = (0xD800 + ((w & 0xF) << 6) + ((sv & 0xFFFF) >> 10));
		unsigned short ls = (0xDC00 + (sv & 0x3FF));
		dst.append(1, hs);
		dst.append(1, ls);
	}
}",462.0,477.0,1.0,1.0,16.0,2,2,3,2,0,0,2,2,0,0,,0,0,4,2,2,void
2236,60560,encodeCharsetName,1,Transcoder.encodeCharsetName,string Transcoder.encodeCharsetName (LogString),main\cpp\transcoder.cpp,"std::string Transcoder::encodeCharsetName(const LogString& val)
{
	char asciiTable[] = { ' ', '!', '""', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
			'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=', '>', '?',
			'@', 'A', 'B', 'C', 'D', 'E', 'F',  'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',
			'P', 'Q', 'R', 'S', 'T', 'U', 'V',  'W', 'X', 'Y', 'Z', '[', '\\', ']', '^', '_',
			'`', 'a', 'b', 'c', 'd', 'e', 'f',  'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',
			'p', 'q', 'r', 's', 't', 'u', 'v',  'w', 'x', 'y', 'z', '{', '|', '}', '~'
		};
	std::string out;

	for (LogString::const_iterator iter = val.begin();
		iter != val.end();
		iter++)
	{
		if (*iter >= 0x20 && *iter < 0x7F)
		{
			out.append(1, asciiTable[*iter - 0x20]);
		}
		else
		{
			out.append(1, LOSSCHAR);
		}
	}

	return out;
}",682.0,708.0,1.0,1.0,27.0,15,10,11,4,0,0,3,4,0,0,,0,0,2,1,1,string
2237,60726,appendEscapingTags,1,Transform.appendEscapingTags,"void Transform.appendEscapingTags (LogString,LogString)",main\cpp\transform.cpp,"void Transform::appendEscapingTags(
	LogString& buf, const LogString& input)
{
	//Check if the string is zero length -- if so, return
	//what was sent in.

	if (input.length() == 0 )
	{
		return;
	}

	logchar specials[] = { 0x22 /* "" */, 0x26 /* & */, 0x3C /* < */, 0x3E /* > */, 0x00 };
	size_t start = 0;
	size_t special = input.find_first_of(specials, start);

	while (special != LogString::npos)
	{
		if (special > start)
		{
			buf.append(input, start, special - start);
		}

		switch (input[special])
		{
			case 0x22:
				buf.append(LOG4CXX_STR(""&quot;""));
				break;

			case 0x26:
				buf.append(LOG4CXX_STR(""&amp;""));
				break;

			case 0x3C:
				buf.append(LOG4CXX_STR(""&lt;""));
				break;

			case 0x3E:
				buf.append(LOG4CXX_STR(""&gt;""));
				break;

			default:
				buf.append(1, input[special]);
				break;
		}

		start = special + 1;

		if (special < input.size())
		{
			special = input.find_first_of(specials, start);
		}
		else
		{
			special = LogString::npos;
		}
	}

	if (s...",27.0,88.0,1.0,1.0,62.0,30,10,40,6,14,0,12,10,0,0,,0,0,4,2,2,void
2238,60883,appendEscapingCDATA,1,Transform.appendEscapingCDATA,"void Transform.appendEscapingCDATA (LogString,LogString)",main\cpp\transform.cpp,"void Transform::appendEscapingCDATA(
	LogString& buf, const LogString& input)
{
	static const WideLife<LogString> CDATA_END(LOG4CXX_STR(""]]>""));
	static const WideLife<LogString> CDATA_EMBEDED_END(LOG4CXX_STR(""]]>]]&gt;<![CDATA[""));

	const LogString::size_type CDATA_END_LEN = 3;


	if (input.length() == 0 )
	{
		return;
	}

	LogString::size_type end = input.find(CDATA_END);

	if (end == LogString::npos)
	{
		buf.append(input);
		return;
	}

	LogString::size_type start = 0;

	while (end != LogString::npos)
	{
		buf.append(input, start, end - start);
		buf.append(CDATA_EMBEDED_END);
		start = end + CDATA_END_LEN;

		if (start < input.length())
		{
			end = input.find(CDATA_END, start);
		}
		else
		{
			return;
		}
	}

	buf.append(input, start, input.length() - start);
}",90.0,131.0,1.0,1.0,42.0,23,7,33,8,2,0,5,6,0,0,,0,0,4,2,2,void
2239,61001,~TriggeringPolicy,1,TriggeringPolicy.~TriggeringPolicy,ANY TriggeringPolicy.~TriggeringPolicy (),main\cpp\triggeringpolicy.cpp,"TriggeringPolicy::~TriggeringPolicy()
{
}",26.0,28.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2240,61020,Writer,1,Writer.Writer,ANY Writer.Writer (),main\cpp\writer.cpp,"Writer::Writer()
{
}",27.0,29.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2241,61024,~Writer,1,Writer.~Writer,ANY Writer.~Writer (),main\cpp\writer.cpp,"Writer::~Writer()
{
}",31.0,33.0,1.0,1.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2242,61049,WriterAppender,1,WriterAppender.WriterAppender,ANY WriterAppender.WriterAppender (),main\cpp\writerappender.cpp,"WriterAppender::WriterAppender(std::unique_ptr<WriterAppenderPriv> priv)
	: AppenderSkeleton (std::move(priv))
{

}",52.0,56.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
2243,61072,~WriterAppender,1,WriterAppender.~WriterAppender,ANY WriterAppender.~WriterAppender (),main\cpp\writerappender.cpp,"WriterAppender::~WriterAppender()
{
	finalize();
}",58.0,61.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2244,61077,activateOptions,1,WriterAppender.activateOptions,void WriterAppender.activateOptions (Pool),main\cpp\writerappender.cpp,"void WriterAppender::activateOptions(Pool& p)
{
	int errors = 0;

	if (_priv->layout == 0)
	{
		_priv->errorHandler->error(
			((LogString) LOG4CXX_STR(""No layout set for the appender named [""))
			+ _priv->name + LOG4CXX_STR(""].""));
		errors++;
	}

	if (_priv->writer == 0)
	{
		_priv->errorHandler->error(
			((LogString) LOG4CXX_STR(""No writer set for the appender named [""))
			+ _priv->name + LOG4CXX_STR(""].""));
		errors++;
	}

	if (errors == 0)
	{
		AppenderSkeleton::activateOptions(p);
	}
}",63.0,87.0,1.0,5.0,25.0,33,7,12,4,2,0,4,4,0,0,,0,0,2,1,1,void
2245,61188,append,1,WriterAppender.append,"void WriterAppender.append (ANY,Pool)",main\cpp\writerappender.cpp,"void WriterAppender::append(const spi::LoggingEventPtr& event, Pool& pool1)
{

	if (!checkEntryConditions())
	{
		return;
	}

	subAppend(event, pool1);
}",91.0,100.0,1.0,1.0,10.0,1,1,2,2,0,0,2,2,0,0,,0,0,4,2,2,void
2246,61202,checkEntryConditions,1,WriterAppender.checkEntryConditions,bool WriterAppender.checkEntryConditions (),main\cpp\writerappender.cpp,"bool WriterAppender::checkEntryConditions() const
{
	static bool warnedClosed = false;
	static bool warnedNoWriter = false;
	static bool warnedNoLayout = false;

	if (_priv->closed)
	{
		if (!warnedClosed)
		{
			LogLog::warn(LOG4CXX_STR(""Not allowed to write to a closed appender.""));
			warnedClosed = true;
		}

		return false;
	}

	if (_priv->writer == 0)
	{
		if (!warnedNoWriter)
		{
			_priv->errorHandler->error(
				LogString(LOG4CXX_STR(""No output stream or file set for the appender named ["")) +
				_priv->name + LOG4CXX_STR(""].""));
			warnedNoWriter = true;
		}

		return false;
	}

	if (_priv->layout == 0)
	{
		if (!warnedNoLayout)
		{
			_priv->errorHandler->error(
				LogString(LOG4CXX_STR(""No layout set for the appender named ["")) +
				_priv->name + LOG4CXX_STR(""].""));
			warnedNoLayout = true;
		}
		return false;
	}

	return true;
}",108.0,151.0,1.0,5.0,44.0,39,7,17,5,0,1,7,10,0,1,,0,0,0,0,0,bool
2247,61353,close,1,WriterAppender.close,void WriterAppender.close (),main\cpp\writerappender.cpp,"void WriterAppender::close()
{
	std::lock_guard<std::recursive_mutex> lock(_priv->mutex);

	if (_priv->closed)
	{
		return;
	}

	_priv->closed = true;
	closeWriter();
}",164.0,175.0,1.0,44.0,12.0,14,6,5,2,0,0,2,2,0,0,,0,0,0,0,0,void
2248,61404,closeWriter,1,WriterAppender.closeWriter,void WriterAppender.closeWriter (),main\cpp\writerappender.cpp,"void WriterAppender::closeWriter()
{
	if (_priv->writer != NULL)
	{
		try
		{
			// before closing we have to output out layout's footer
			//
			//   Using the object's pool since this is a one-shot operation
			//    and pool is likely to be reclaimed soon when appender is destructed.
			//
			writeFooter(_priv->pool);
			_priv->writer->close(_priv->pool);
			_priv->writer = 0;
		}
		catch (IOException& e)
		{
			LogLog::error(LogString(LOG4CXX_STR(""Could not close writer for WriterAppender named "")) + _priv->name, e);
		}
	}

}",180.0,201.0,1.0,5.0,22.0,23,6,9,4,0,1,3,4,0,1,,0,0,0,0,0,void
2249,61490,createWriter,1,WriterAppender.createWriter,WriterPtr WriterAppender.createWriter (OutputStreamPtr),main\cpp\writerappender.cpp,"WriterPtr WriterAppender::createWriter(OutputStreamPtr& os)
{

	LogString enc(getEncoding());

	CharsetEncoderPtr encoder;

	if (enc.empty())
	{
		encoder = CharsetEncoder::getDefaultEncoder();
	}
	else
	{
		if (StringHelper::equalsIgnoreCase(enc,
				LOG4CXX_STR(""utf-16""), LOG4CXX_STR(""UTF-16"")))
		{
			encoder = CharsetEncoder::getEncoder(LOG4CXX_STR(""UTF-16BE""));
		}
		else
		{
			encoder = CharsetEncoder::getEncoder(enc);
		}

		if (encoder == NULL)
		{
			encoder = CharsetEncoder::getDefaultEncoder();
			LogLog::warn(LOG4CXX_STR(""Error initializing output writer.""));
			LogLog::warn(LOG4CXX_STR(""Unsupported encoding?""));
		}
	}

	return WriterPtr(new OutputStreamWriter(os, encoder));
}",209.0,241.0,1.0,1.0,33.0,4,3,6,5,0,1,2,2,0,0,,0,1,2,1,1,WriterPtr
2250,61570,getEncoding,1,WriterAppender.getEncoding,LogString WriterAppender.getEncoding (),main\cpp\writerappender.cpp,"LogString WriterAppender::getEncoding() const
{
	return _priv->encoding;
}",243.0,246.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,LogString
2251,61585,setEncoding,1,WriterAppender.setEncoding,void WriterAppender.setEncoding (LogString),main\cpp\writerappender.cpp,"void WriterAppender::setEncoding(const LogString& enc)
{
	_priv->encoding = enc;
}",248.0,251.0,1.0,1.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
2252,61602,subAppend,1,WriterAppender.subAppend,"void WriterAppender.subAppend (ANY,Pool)",main\cpp\writerappender.cpp,"void WriterAppender::subAppend(const spi::LoggingEventPtr& event, Pool& p)
{
	LogString msg;
	_priv->layout->format(msg, event, p);

	if (_priv->writer != NULL)
	{
		_priv->writer->write(msg, p);

		if (_priv->immediateFlush)
		{
			_priv->writer->flush(p);
		}
	}
}",253.0,267.0,1.0,1.0,15.0,19,4,12,5,0,0,3,4,0,0,,0,0,4,2,2,void
2253,61680,writeFooter,1,WriterAppender.writeFooter,void WriterAppender.writeFooter (Pool),main\cpp\writerappender.cpp,"void WriterAppender::writeFooter(Pool& p)
{
	if (_priv->layout != NULL)
	{
		LogString foot;
		_priv->layout->appendFooter(foot, p);
		_priv->writer->write(foot, p);
	}
}",270.0,278.0,1.0,5.0,9.0,12,4,8,4,0,0,2,2,0,0,,0,0,2,1,1,void
2254,61730,writeHeader,1,WriterAppender.writeHeader,void WriterAppender.writeHeader (Pool),main\cpp\writerappender.cpp,"void WriterAppender::writeHeader(Pool& p)
{
	if (_priv->layout != NULL)
	{
		LogString header;
		_priv->layout->appendHeader(header, p);
		_priv->writer->write(header, p);
	}
}",280.0,288.0,1.0,5.0,9.0,12,4,8,4,0,0,2,2,0,0,,0,0,2,1,1,void
2255,61780,setWriter,1,WriterAppender.setWriter,void WriterAppender.setWriter (WriterPtr),main\cpp\writerappender.cpp,"void WriterAppender::setWriter(const WriterPtr& newWriter)
{
	std::unique_lock<std::recursive_mutex> lock(_priv->mutex);
	setWriterInternal(newWriter);
}",291.0,295.0,1.0,45.0,5.0,7,5,4,3,0,0,1,1,0,0,,0,0,2,1,1,void
2256,61806,setWriterInternal,1,WriterAppender.setWriterInternal,void WriterAppender.setWriterInternal (WriterPtr),main\cpp\writerappender.cpp,"void WriterAppender::setWriterInternal(const WriterPtr& newWriter)
{
	_priv->writer = newWriter;
}",297.0,300.0,1.0,1.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
2257,61823,requiresLayout,1,WriterAppender.requiresLayout,bool WriterAppender.requiresLayout (),main\cpp\writerappender.cpp,"bool WriterAppender::requiresLayout() const
{
	return true;
}",302.0,305.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,bool
2258,61829,setOption,1,WriterAppender.setOption,"void WriterAppender.setOption (LogString,LogString)",main\cpp\writerappender.cpp,"void WriterAppender::setOption(const LogString& option, const LogString& value)
{
	if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""ENCODING""), LOG4CXX_STR(""encoding"")))
	{
		setEncoding(value);
	}
	else
	{
		AppenderSkeleton::setOption(option, value);
	}
}",307.0,317.0,1.0,1.0,11.0,1,1,3,3,0,1,2,2,1,1,,0,1,4,2,2,void
2259,61856,setImmediateFlush,1,WriterAppender.setImmediateFlush,void WriterAppender.setImmediateFlush (bool),main\cpp\writerappender.cpp,"void WriterAppender::setImmediateFlush(bool value)
{
	_priv->immediateFlush = value;
}",320.0,323.0,1.0,1.0,4.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
2260,61873,getImmediateFlush,1,WriterAppender.getImmediateFlush,bool WriterAppender.getImmediateFlush (),main\cpp\writerappender.cpp,"bool WriterAppender::getImmediateFlush() const
{
	return _priv->immediateFlush;
}",325.0,328.0,1.0,8.0,4.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,bool
2261,61888,getWriter,1,WriterAppender.getWriter,WriterPtr WriterAppender.getWriter (),main\cpp\writerappender.cpp,"const LOG4CXX_NS::helpers::WriterPtr WriterAppender::getWriter() const{
	return _priv->writer;
}",330.0,332.0,1.0,8.0,3.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,WriterPtr
2262,61929,XMLLayoutPrivate,1,XMLLayoutPrivate.XMLLayoutPrivate,ANY XMLLayoutPrivate.XMLLayoutPrivate (),main\cpp\xmllayout.cpp,"XMLLayoutPrivate()
		: locationInfo(false)
		, properties(false)
		, expectedPatternLength(100)
		{}",37.0,41.0,2.0,4.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2263,61938,XMLLayout,1,XMLLayout.XMLLayout,ANY XMLLayout.XMLLayout (),main\cpp\xmllayout.cpp,"XMLLayout::XMLLayout()
	: m_priv(std::make_unique<XMLLayoutPrivate>())
{
	m_priv->expectedPatternLength = getFormattedEventCharacterCount() * 2;
}",53.0,57.0,1.0,1.0,5.0,3,3,1,1,0,0,1,1,0,0,,0,0,0,0,0,ANY
2264,61949,~XMLLayout,1,XMLLayout.~XMLLayout,ANY XMLLayout.~XMLLayout (),main\cpp\xmllayout.cpp,XMLLayout::~XMLLayout() {},59.0,59.0,1.0,26.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2265,61953,setOption,1,XMLLayout.setOption,"void XMLLayout.setOption (LogString,LogString)",main\cpp\xmllayout.cpp,"void XMLLayout::setOption(const LogString& option,
	const LogString& value)
{
	if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""LOCATIONINFO""), LOG4CXX_STR(""locationinfo"")))
	{
		setLocationInfo(OptionConverter::toBoolean(value, false));
		m_priv->expectedPatternLength = getFormattedEventCharacterCount() * 2;
	}

	if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR(""PROPERTIES""), LOG4CXX_STR(""properties"")))
	{
		setProperties(OptionConverter::toBoolean(value, false));
		m_priv->expectedPatternLength = getFormattedEventCharacterCount() * 2;
	}
}",61.0,75.0,1.0,1.0,15.0,10,4,10,5,0,4,3,3,2,4,,0,2,4,2,2,void
2266,62009,format,1,XMLLayout.format,"void XMLLayout.format (LogString,ANY,Pool)",main\cpp\xmllayout.cpp,"void XMLLayout::format(LogString& output,
	const spi::LoggingEventPtr& event,
	Pool& p) const
{
	output.reserve(m_priv->expectedPatternLength + event->getMessage().size());
	output.append(LOG4CXX_STR(""<log4j:event logger=\""""));
	Transform::appendEscapingTags(output, event->getLoggerName());
	output.append(LOG4CXX_STR(""\"" timestamp=\""""));
	StringHelper::toString(event->getTimeStamp() / 1000L, p, output);
	output.append(LOG4CXX_STR(""\"" level=\""""));
	Transform::appendEscapingTags(output, event->getLevel()->toString());
	output.append(LOG4CXX_STR(""\"" thread=\""""));
	Transform::appendEscapingTags(output, event->getThreadName());
	output.append(LOG4CXX_STR(""\"">""));
	output.append(LOG4CXX_EOL);

	output.append(LOG4CXX_STR(""<log4j:message><![CDATA[""));
	// Append the rendered message. Also make sure to escape any
	// existing CDATA sections.
	Transform::appendEscapingCDATA(output, event->getRenderedMessage());
	output.append(LOG4CXX_STR(""]]></log4j:message>""));
	output.append(LOG4CXX_EOL);

...",77.0,182.0,1.0,1.0,106.0,86,9,122,18,0,14,9,20,0,14,,0,0,6,3,3,void
2267,62457,setLocationInfo,1,XMLLayout.setLocationInfo,void XMLLayout.setLocationInfo (bool),main\cpp\xmllayout.cpp,"void XMLLayout::setLocationInfo(bool locationInfo1)
{
	m_priv->locationInfo = locationInfo1;
}",184.0,187.0,1.0,1.0,4.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
2268,62467,getLocationInfo,1,XMLLayout.getLocationInfo,bool XMLLayout.getLocationInfo (),main\cpp\xmllayout.cpp,"bool XMLLayout::getLocationInfo() const
{
	return m_priv->locationInfo;
}",189.0,192.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,bool
2269,62475,setProperties,1,XMLLayout.setProperties,void XMLLayout.setProperties (bool),main\cpp\xmllayout.cpp,"void XMLLayout::setProperties(bool flag)
{
	m_priv->properties = flag;
}",194.0,197.0,1.0,1.0,4.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
2270,62485,getProperties,1,XMLLayout.getProperties,bool XMLLayout.getProperties (),main\cpp\xmllayout.cpp,"bool XMLLayout::getProperties()
{
	return m_priv->properties;
}",199.0,202.0,1.0,1.0,4.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,bool
2271,62525,XMLSocketAppenderPriv,1,XMLSocketAppenderPriv.XMLSocketAppenderPriv,"ANY XMLSocketAppenderPriv.XMLSocketAppenderPriv (int,int)",main\cpp\xmlsocketappender.cpp,"XMLSocketAppenderPriv(const LogString& host, int port, int delay) :
		SocketAppenderSkeletonPriv( host, port, delay ) {}",45.0,46.0,2.0,52.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ANY
2272,62560,XMLSocketAppender,1,XMLSocketAppender.XMLSocketAppender,ANY XMLSocketAppender.XMLSocketAppender (),main\cpp\xmlsocketappender.cpp,"XMLSocketAppender::XMLSocketAppender(const LogString& host, int port1)
	: SocketAppenderSkeleton(std::make_unique<XMLSocketAppenderPriv>(host, port1, DEFAULT_RECONNECTION_DELAY))
{
	_priv->layout = std::make_shared<XMLLayout>();
	Pool p;
	activateOptions(p);
}",77.0,83.0,1.0,1.0,7.0,5,4,2,2,0,0,1,1,0,0,,0,0,4,2,2,ANY
2273,62627,~XMLSocketAppender,1,XMLSocketAppender.~XMLSocketAppender,ANY XMLSocketAppender.~XMLSocketAppender (),main\cpp\xmlsocketappender.cpp,"XMLSocketAppender::~XMLSocketAppender()
{
	finalize();
}",85.0,88.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2274,62632,getDefaultDelay,1,XMLSocketAppender.getDefaultDelay,int XMLSocketAppender.getDefaultDelay (),main\cpp\xmlsocketappender.cpp,"int XMLSocketAppender::getDefaultDelay() const
{
	return DEFAULT_RECONNECTION_DELAY;
}",91.0,94.0,1.0,1.0,4.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
2275,62638,getDefaultPort,1,XMLSocketAppender.getDefaultPort,int XMLSocketAppender.getDefaultPort (),main\cpp\xmlsocketappender.cpp,"int XMLSocketAppender::getDefaultPort() const
{
	return DEFAULT_PORT;
}",96.0,99.0,1.0,1.0,4.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
2276,62644,setSocket,1,XMLSocketAppender.setSocket,"void XMLSocketAppender.setSocket (ANY,Pool)",main\cpp\xmlsocketappender.cpp,"void XMLSocketAppender::setSocket(LOG4CXX_NS::helpers::SocketPtr& socket, Pool& p)
{
	OutputStreamPtr os = std::make_shared<SocketOutputStream>(socket);
	CharsetEncoderPtr charset(CharsetEncoder::getUTF8Encoder());
	std::lock_guard<std::recursive_mutex> lock(_priv->mutex);
	_priv->writer = std::make_shared<OutputStreamWriter>(os, charset);
}",101.0,107.0,1.0,44.0,7.0,21,8,13,8,0,1,1,1,0,0,,0,0,4,2,2,void
2277,62706,cleanUp,1,XMLSocketAppender.cleanUp,void XMLSocketAppender.cleanUp (Pool),main\cpp\xmlsocketappender.cpp,"void XMLSocketAppender::cleanUp(Pool& p)
{
	if (_priv->writer)
	{
		try
		{
			_priv->writer->close(p);
			_priv->writer = nullptr;
		}
		catch (std::exception&)
		{
		}
	}
}",109.0,122.0,1.0,5.0,14.0,11,4,4,2,0,0,3,4,0,0,,0,0,2,1,1,void
2278,62752,append,1,XMLSocketAppender.append,"void XMLSocketAppender.append (ANY,ANY)",main\cpp\xmlsocketappender.cpp,"void XMLSocketAppender::append(const spi::LoggingEventPtr& event, LOG4CXX_NS::helpers::Pool& p)
{
	if (_priv->writer)
	{
		LogString output;
		_priv->layout->format(output, event, p);

		try
		{
			_priv->writer->write(output, p);
			_priv->writer->flush(p);
		}
		catch (std::exception& e)
		{
			_priv->writer = nullptr;
			LogLog::warn(LOG4CXX_STR(""Detected problem with connection: ""), e);

			if (getReconnectionDelay() > 0)
			{
				fireConnector();
			}
		}
	}
}",124.0,147.0,1.0,5.0,24.0,21,5,13,6,0,1,4,7,0,1,,0,0,4,2,2,void
2279,62864,ZipCompressActionPrivate,1,ZipCompressActionPrivate.ZipCompressActionPrivate,"ANY ZipCompressActionPrivate.ZipCompressActionPrivate (File,File,bool)",main\cpp\zipcompressaction.cpp,"ZipCompressActionPrivate( const File& toRename,
		const File& renameTo,
		bool deleteSource):
		source(toRename), destination(renameTo), deleteSource(deleteSource) {}",34.0,37.0,2.0,72.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ANY
2280,62884,ZipCompressAction,1,ZipCompressAction.ZipCompressAction,"ANY ZipCompressAction.ZipCompressAction (File,File,bool)",main\cpp\zipcompressaction.cpp,"ZipCompressAction::ZipCompressAction(const File& src,
	const File& dest,
	bool del)
	: Action(std::make_unique<ZipCompressActionPrivate>(
			  src, dest, del))
{
}",47.0,53.0,1.0,1.0,7.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ANY
2281,62891,execute,1,ZipCompressAction.execute,bool ZipCompressAction.execute (ANY),main\cpp\zipcompressaction.cpp,"bool ZipCompressAction::execute(LOG4CXX_NS::helpers::Pool& p) const
{
	if (!priv->source.exists(p))
	{
		return false;
	}

	apr_pool_t* aprpool = p.getAPRPool();
	apr_procattr_t* attr;
	apr_status_t stat = apr_procattr_create(&attr, aprpool);

	if (stat != APR_SUCCESS)
	{
		throw IOException(stat);
	}

	stat = apr_procattr_io_set(attr, APR_NO_PIPE, APR_NO_PIPE, APR_FULL_BLOCK);

	if (stat != APR_SUCCESS)
	{
		throw IOException(stat);
	}

	stat = apr_procattr_cmdtype_set(attr, APR_PROGRAM_PATH);

	if (stat != APR_SUCCESS)
	{
		throw IOException(stat);
	}

	//
	// redirect the child's error stream to this processes' error stream
	//
	apr_file_t* child_err;
	stat = apr_file_open_stderr(&child_err, aprpool);

	if (stat == APR_SUCCESS)
	{
		stat =  apr_procattr_child_err_set(attr, child_err, NULL);

		if (stat != APR_SUCCESS)
		{
			throw IOException(stat);
		}
	}

	const char** args = (const char**)
		apr_palloc(aprpool, 5 * sizeof(*args));
	int i = 0;

	args[i++] = ""zip"";
	args[i++] = ...",55.0,150.0,1.0,6.0,96.0,81,15,81,17,0,2,11,12,0,2,,0,0,2,1,1,bool
2282,63203,setThrowIOExceptionOnForkFailure,1,ZipCompressAction.setThrowIOExceptionOnForkFailure,void ZipCompressAction.setThrowIOExceptionOnForkFailure (bool),main\cpp\zipcompressaction.cpp,"void ZipCompressAction::setThrowIOExceptionOnForkFailure(bool throwIO){
	priv->throwIOExceptionOnForkFailure = throwIO;
}",152.0,154.0,1.0,1.0,3.0,4,4,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
2283,63695,initialize,1,LOG4CXX_NS.helpers.APRInitializer.initialize,log4cxx_time_t LOG4CXX_NS.helpers.APRInitializer.initialize (),main\include\log4cxx\helpers\aprinitializer.hpp,static log4cxx_time_t initialize();,47.0,47.0,25.0,36.0,1.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,log4cxx_time_t
2284,63699,getRootPool,1,LOG4CXX_NS.helpers.APRInitializer.getRootPool,apr_pool_t* LOG4CXX_NS.helpers.APRInitializer.getRootPool (),main\include\log4cxx\helpers\aprinitializer.hpp,static apr_pool_t* getRootPool();,48.0,48.0,20.0,34.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,apr_pool_t*
2285,63703,getTlsKey,1,LOG4CXX_NS.helpers.APRInitializer.getTlsKey,apr_threadkey_t* LOG4CXX_NS.helpers.APRInitializer.getTlsKey (),main\include\log4cxx\helpers\aprinitializer.hpp,static apr_threadkey_t* getTlsKey();,49.0,49.0,25.0,37.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,apr_threadkey_t*
2286,63708,registerCleanup,1,LOG4CXX_NS.helpers.APRInitializer.registerCleanup,void LOG4CXX_NS.helpers.APRInitializer.registerCleanup (FileWatchdog*),main\include\log4cxx\helpers\aprinitializer.hpp,static void registerCleanup(FileWatchdog* watchdog);,57.0,57.0,15.0,53.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
2287,63713,unregisterCleanup,1,LOG4CXX_NS.helpers.APRInitializer.unregisterCleanup,void LOG4CXX_NS.helpers.APRInitializer.unregisterCleanup (FileWatchdog*),main\include\log4cxx\helpers\aprinitializer.hpp,static void unregisterCleanup(FileWatchdog* watchdog);,58.0,58.0,15.0,55.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
2288,63718,unregisterAll,1,LOG4CXX_NS.helpers.APRInitializer.unregisterAll,void LOG4CXX_NS.helpers.APRInitializer.unregisterAll (),main\include\log4cxx\helpers\aprinitializer.hpp,static void unregisterAll();,59.0,59.0,15.0,29.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,void
2289,63722,setUnique,1,LOG4CXX_NS.helpers.APRInitializer.setUnique,void LOG4CXX_NS.helpers.APRInitializer.setUnique<T> (ANY),main\include\log4cxx\helpers\aprinitializer.hpp,"static void setUnique(const std::shared_ptr<T>& pObject)
		{
			getInstance().addObject(typeid(T).hash_code(), pObject);
		}",63.0,66.0,22.0,3.0,4.0,3,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
2290,63737,getOrAddUnique,1,LOG4CXX_NS.helpers.APRInitializer.getOrAddUnique,shared_ptr<T> LOG4CXX_NS.helpers.APRInitializer.getOrAddUnique<T> (ANY),main\include\log4cxx\helpers\aprinitializer.hpp,"static std::shared_ptr<T> getOrAddUnique(std::function<ObjectPtr()> creator)
		{
			return cast<T>(getInstance().findOrAddObject(typeid(T).hash_code(), creator));
		}",70.0,73.0,22.0,3.0,4.0,5,4,4,3,0,0,1,1,0,0,,0,0,2,1,1,shared_ptr<T>
2291,63758,APRInitializer,1,LOG4CXX_NS.helpers.APRInitializer.APRInitializer,ANY LOG4CXX_NS.helpers.APRInitializer.APRInitializer (),main\include\log4cxx\helpers\aprinitializer.hpp,APRInitializer();,78.0,78.0,3.0,18.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2292,63767,operator =,1,LOG4CXX_NS.helpers.APRInitializer.operator =,APRInitializer LOG4CXX_NS.helpers.APRInitializer.operator = (APRInitializer),main\include\log4cxx\helpers\aprinitializer.hpp,APRInitializer& operator=(const APRInitializer&) = delete;,80.0,80.0,3.0,60.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,APRInitializer
2293,63772,addObject,1,LOG4CXX_NS.helpers.APRInitializer.addObject,"void LOG4CXX_NS.helpers.APRInitializer.addObject (size_t,ObjectPtr)",main\include\log4cxx\helpers\aprinitializer.hpp,"void addObject(size_t key, const ObjectPtr& pObject);",82.0,82.0,8.0,54.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
2294,63778,findOrAddObject,1,LOG4CXX_NS.helpers.APRInitializer.findOrAddObject,"ObjectPtr LOG4CXX_NS.helpers.APRInitializer.findOrAddObject (size_t,ANY)",main\include\log4cxx\helpers\aprinitializer.hpp,"const ObjectPtr& findOrAddObject(size_t key, std::function<ObjectPtr()> creator);",83.0,83.0,18.0,82.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ObjectPtr
2295,63784,stopWatchDogs,1,LOG4CXX_NS.helpers.APRInitializer.stopWatchDogs,void LOG4CXX_NS.helpers.APRInitializer.stopWatchDogs (),main\include\log4cxx\helpers\aprinitializer.hpp,void stopWatchDogs();,84.0,84.0,8.0,22.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,void
2296,63789,~APRInitializer,1,LOG4CXX_NS.helpers.APRInitializer.~APRInitializer,ANY LOG4CXX_NS.helpers.APRInitializer.~APRInitializer (),main\include\log4cxx\helpers\aprinitializer.hpp,~APRInitializer();,91.0,91.0,3.0,19.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2297,64013,NoSuchElementException,1,LOG4CXX_NS.helpers.NoSuchElementException.NoSuchElementException,ANY LOG4CXX_NS.helpers.NoSuchElementException.NoSuchElementException (),main\include\log4cxx\helpers\exception.hpp,NoSuchElementException();,196.0,196.0,3.0,26.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2298,64022,operator =,1,LOG4CXX_NS.helpers.NoSuchElementException.operator =,NoSuchElementException LOG4CXX_NS.helpers.NoSuchElementException.operator = (NoSuchElementException),main\include\log4cxx\helpers\exception.hpp,NoSuchElementException& operator=(const NoSuchElementException&);,198.0,198.0,25.0,66.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,NoSuchElementException
2299,64028,IllegalStateException,1,LOG4CXX_NS.helpers.IllegalStateException.IllegalStateException,ANY LOG4CXX_NS.helpers.IllegalStateException.IllegalStateException (),main\include\log4cxx\helpers\exception.hpp,IllegalStateException();,204.0,204.0,3.0,25.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2300,64037,operator =,1,LOG4CXX_NS.helpers.IllegalStateException.operator =,IllegalStateException LOG4CXX_NS.helpers.IllegalStateException.operator = (IllegalStateException),main\include\log4cxx\helpers\exception.hpp,IllegalStateException& operator=(const IllegalStateException&);,206.0,206.0,24.0,64.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,IllegalStateException
2301,64118,UnknownHostException,1,LOG4CXX_NS.helpers.UnknownHostException.UnknownHostException,ANY LOG4CXX_NS.helpers.UnknownHostException.UnknownHostException (LogString),main\include\log4cxx\helpers\inetaddress.hpp,UnknownHostException(const LogString& msg);,33.0,33.0,3.0,44.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
2302,64128,operator =,1,LOG4CXX_NS.helpers.UnknownHostException.operator =,UnknownHostException LOG4CXX_NS.helpers.UnknownHostException.operator = (UnknownHostException),main\include\log4cxx\helpers\inetaddress.hpp,UnknownHostException& operator=(const UnknownHostException& src);,35.0,35.0,23.0,66.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,UnknownHostException
2303,64245,ios_base_manip,1,LOG4CXX_NS.helpers.ios_base_manip,ANY LOG4CXX_NS.helpers.ios_base_manip (ANY),main\include\log4cxx\helpers\messagebuffer.hpp,typedef std::ios_base& (*ios_base_manip)(std::ios_base&);,32.0,32.0,22.0,56.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
2304,64251,operator <<,1,LOG4CXX_NS.helpers.operator <<,"basic_ostream<char> LOG4CXX_NS.helpers.operator <<<V> (CharMessageBuffer,V)",main\include\log4cxx\helpers\messagebuffer.hpp,"std::basic_ostream<char>& operator<<(CharMessageBuffer& os, const V& val)
{
	return ((std::basic_ostream<char>&) os) << val;
}",208.0,211.0,1.0,1.0,4.0,2,2,2,2,0,0,1,1,0,0,,0,0,4,2,2,basic_ostream<char>
2305,64285,cast,1,LOG4CXX_NS.cast,"shared_ptr<Ret> LOG4CXX_NS.cast<Ret,Type,bool=std::is_base_of<Ret,helpers::Object>::value,bool=std::is_base_of<Type,helpers::Object>::value> (ANY)",main\include\log4cxx\helpers\object.hpp,"std::shared_ptr<Ret> cast(const std::shared_ptr<Type>& incoming)
{
	if(!incoming)
	{
		return std::shared_ptr<Ret>();
	}

	Ret* casted = reinterpret_cast<Ret*>(const_cast<void*>(incoming->cast(Ret::getStaticClass())));

	if ( casted )
	{
		return std::shared_ptr<Ret>( incoming, casted );
	}

	return std::shared_ptr<Ret>();
}",127.0,142.0,1.0,1.0,16.0,13,9,11,4,0,0,3,3,0,0,,0,0,2,1,1,shared_ptr<Ret>
2306,64562,minimum,1,LOG4CXX_NS.helpers.StrictMath.minimum,"_type LOG4CXX_NS.helpers.StrictMath.minimum<_type> (_type,_type)",main\include\log4cxx\helpers\strictmath.hpp,"static inline const _type&
		minimum(const _type& a, const _type& b)
		{
			return (a < b) ? a : b;
		}",34.0,38.0,28.0,3.0,5.0,2,2,4,2,0,0,1,1,0,0,,0,0,4,2,2,_type
2307,64575,maximum,1,LOG4CXX_NS.helpers.StrictMath.maximum,"_type LOG4CXX_NS.helpers.StrictMath.maximum<_type> (_type,_type)",main\include\log4cxx\helpers\strictmath.hpp,"static inline const _type&
		maximum(const _type& a, const _type& b)
		{
			return (a > b) ? a : b;
		}",40.0,44.0,28.0,3.0,5.0,2,2,4,2,0,0,1,1,0,0,,0,0,4,2,2,_type
2308,64767,WideLife,1,LOG4CXX_NS.helpers.WideLife.WideLife,ANY LOG4CXX_NS.helpers.WideLife.WideLife (),main\include\log4cxx\helpers\widelife.hpp,"WideLife(Arg0&& arg0, Args&&... args)
	{		
		new(&storage) T(std::forward<Arg0>(arg0), std::forward<Args>(args)...);
	}",47.0,50.0,2.0,2.0,4.0,2,2,2,2,0,1,1,1,0,0,,0,1,4,2,2,ANY
2309,64799,~WideLife,1,LOG4CXX_NS.helpers.WideLife.~WideLife,ANY LOG4CXX_NS.helpers.WideLife.~WideLife (),main\include\log4cxx\helpers\widelife.hpp,"~WideLife()
	{
#if LOG4CXX_EVENTS_AT_EXIT
		// keep the holded value alive
#else
		value().~T();
#endif
	}",52.0,59.0,2.0,2.0,8.0,1,1,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2310,64807,value,1,LOG4CXX_NS.helpers.WideLife.value,T LOG4CXX_NS.helpers.WideLife.value (),main\include\log4cxx\helpers\widelife.hpp,"const T& value() const
	{
		return *reinterpret_cast<const T*>(&storage);
	}",66.0,69.0,2.0,2.0,4.0,3,3,1,1,0,1,1,1,0,0,,0,1,0,0,0,T
2311,64827,operator #0 &,1,LOG4CXX_NS.helpers.WideLife.operator #0 &,ANY LOG4CXX_NS.helpers.WideLife.operator #0 & (),main\include\log4cxx\helpers\widelife.hpp,"operator T&()
	{
		return value();
	}",71.0,74.0,2.0,2.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2312,64833,operator const #0 &,1,LOG4CXX_NS.helpers.WideLife.operator const #0 &,ANY LOG4CXX_NS.helpers.WideLife.operator const #0 & (),main\include\log4cxx\helpers\widelife.hpp,"operator const T&() const
	{
		return value();
	}",76.0,79.0,2.0,2.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2313,64850,operator =,1,LOG4CXX_NS.helpers.WideLife.operator =,WideLife LOG4CXX_NS.helpers.WideLife.operator = (WideLife),main\include\log4cxx\helpers\widelife.hpp,WideLife& operator=(const WideLife& other) = delete;,87.0,87.0,2.0,53.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,WideLife
2314,64943,operator &,1,LOG4CXX_NS.operator &,"bool LOG4CXX_NS.operator & (HexdumpFlags,HexdumpFlags)",main\include\log4cxx\hexdump.hpp,"inline bool operator&(HexdumpFlags a, HexdumpFlags b){
	return !!(static_cast<uint32_t>(a) & static_cast<uint32_t>(b));
}",34.0,36.0,1.0,1.0,3.0,5,3,2,2,0,0,1,1,0,0,,0,0,4,2,2,bool
2315,64959,operator |,1,LOG4CXX_NS.operator |,"HexdumpFlags LOG4CXX_NS.operator | (HexdumpFlags,HexdumpFlags)",main\include\log4cxx\hexdump.hpp,"inline HexdumpFlags operator|(HexdumpFlags a, HexdumpFlags b){
	return static_cast<HexdumpFlags>(static_cast<uint32_t>(a) | static_cast<uint32_t>(b));
}",38.0,40.0,1.0,1.0,3.0,4,2,2,2,0,0,1,1,0,0,,0,0,4,2,2,HexdumpFlags
2316,65078,LevelChange,1,LOG4CXX_NS.LevelChange.LevelChange,"ANY LOG4CXX_NS.LevelChange.LevelChange (LoggerPtr,LevelPtr)",main\include\log4cxx\levelchange.hpp,"LevelChange(const StringType& otherCategory, const LoggerPtr& thisCategory)
		: LevelChange(LogManager::getLogger(otherCategory), thisCategory->getLevel())
	{
	}",66.0,69.0,2.0,2.0,4.0,1,1,2,2,0,1,1,1,0,0,,0,1,4,2,2,ANY
2317,65107,~LevelChange,1,LOG4CXX_NS.LevelChange.~LevelChange,ANY LOG4CXX_NS.LevelChange.~LevelChange (),main\include\log4cxx\levelchange.hpp,"~LevelChange()
	{
		m_otherCategory->setLevel(m_savedLevel);
	}",71.0,74.0,2.0,2.0,4.0,1,1,2,2,0,2,1,1,0,0,,0,2,0,0,0,ANY
2318,65126,operator =,1,LOG4CXX_NS.LevelChange.operator =,LevelChange LOG4CXX_NS.LevelChange.operator = (LevelChange),main\include\log4cxx\levelchange.hpp,LevelChange& operator=(const LevelChange&) = delete;,78.0,78.0,2.0,53.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,LevelChange
2319,65185,LoggerInstancePtr,1,LOG4CXX_NS.LoggerInstancePtr.LoggerInstancePtr,ANY LOG4CXX_NS.LoggerInstancePtr.LoggerInstancePtr (),main\include\log4cxx\loggerinstance.hpp,"LoggerInstancePtr(const StringType& instanceName)
		: m_hadConfiguration(LogManager::exists(instanceName))
		, m_logger(LogManager::getLogger(instanceName))
	{
	}",56.0,60.0,2.0,2.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
2320,65194,~LoggerInstancePtr,1,LOG4CXX_NS.LoggerInstancePtr.~LoggerInstancePtr,ANY LOG4CXX_NS.LoggerInstancePtr.~LoggerInstancePtr (),main\include\log4cxx\loggerinstance.hpp,"~LoggerInstancePtr()
	{
		reset();
	}",62.0,65.0,2.0,2.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2321,65199,operator ->,1,LOG4CXX_NS.LoggerInstancePtr.operator ->,LoggerPtr LOG4CXX_NS.LoggerInstancePtr.operator -> (),main\include\log4cxx\loggerinstance.hpp,"const LoggerPtr& operator->() const noexcept
	{
		return m_logger;
	}",67.0,70.0,2.0,2.0,4.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,LoggerPtr
2322,65205,operator bool,1,LOG4CXX_NS.LoggerInstancePtr.operator bool,ANY LOG4CXX_NS.LoggerInstancePtr.operator bool (),main\include\log4cxx\loggerinstance.hpp,"explicit operator bool() const noexcept
	{
		return !!m_logger;
	}",72.0,75.0,2.0,2.0,4.0,2,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,ANY
2323,65213,operator ? &,1,LOG4CXX_NS.LoggerInstancePtr.operator ? &,ANY LOG4CXX_NS.LoggerInstancePtr.operator ? & (),main\include\log4cxx\loggerinstance.hpp,"operator LoggerPtr&() noexcept
	{
		return m_logger;
	}",77.0,80.0,2.0,2.0,4.0,0,0,1,1,0,0,1,1,0,0,,0,0,0,0,0,ANY
2324,65219,operator const ? &,1,LOG4CXX_NS.LoggerInstancePtr.operator const ? &,ANY LOG4CXX_NS.LoggerInstancePtr.operator const ? & (),main\include\log4cxx\loggerinstance.hpp,"operator const LoggerPtr&() const noexcept
	{
		return m_logger;
	}",82.0,85.0,2.0,2.0,4.0,0,0,1,1,0,0,1,1,0,0,,0,0,0,0,0,ANY
2325,65225,get,1,LOG4CXX_NS.LoggerInstancePtr.get,Logger LOG4CXX_NS.LoggerInstancePtr.get (),main\include\log4cxx\loggerinstance.hpp,"const Logger* get() const noexcept
	{
		return m_logger.get();
	}",92.0,95.0,2.0,2.0,4.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,Logger
2326,65243,reset,1,LOG4CXX_NS.LoggerInstancePtr.reset,void LOG4CXX_NS.LoggerInstancePtr.reset (),main\include\log4cxx\loggerinstance.hpp,"void reset(const StringType& instanceName)
	{
		reset();
		m_hadConfiguration = !!LogManager::exists(instanceName);
		m_logger = LogManager::getLogger(instanceName);
	}",115.0,120.0,2.0,2.0,6.0,6,5,7,4,0,5,2,2,2,1,,0,4,2,1,1,void
2327,65823,ActionPrivate,1,LOG4CXX_NS.rolling.ActionPrivate.ActionPrivate,ANY LOG4CXX_NS.rolling.ActionPrivate.ActionPrivate (),main\include\log4cxx\private\action_priv.hpp,"ActionPrivate() :
		complete(false),
		interrupted(false),
		pool() {}",29.0,32.0,2.0,11.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2328,65827,~ActionPrivate,1,LOG4CXX_NS.rolling.ActionPrivate.~ActionPrivate,ANY LOG4CXX_NS.rolling.ActionPrivate.~ActionPrivate (),main\include\log4cxx\private\action_priv.hpp,virtual ~ActionPrivate(){},34.0,34.0,2.0,27.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2329,65848,AppenderSkeletonPrivate,1,LOG4CXX_NS.AppenderSkeletonPrivate.AppenderSkeletonPrivate,ANY LOG4CXX_NS.AppenderSkeletonPrivate.AppenderSkeletonPrivate (),main\include\log4cxx\private\appenderskeleton_priv.hpp,"AppenderSkeletonPrivate( LayoutPtr lay ) :
		layout( lay ),
		threshold(Level::getAll()),
		errorHandler(std::make_shared<LOG4CXX_NS::helpers::OnlyOnceErrorHandler>()),
		closed(false) {}",35.0,39.0,2.0,18.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
2330,65857,~AppenderSkeletonPrivate,1,LOG4CXX_NS.AppenderSkeletonPrivate.~AppenderSkeletonPrivate,ANY LOG4CXX_NS.AppenderSkeletonPrivate.~AppenderSkeletonPrivate (),main\include\log4cxx\private\appenderskeleton_priv.hpp,virtual ~AppenderSkeletonPrivate(){},41.0,41.0,2.0,37.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2331,65973,DatagramSocketPriv,1,LOG4CXX_NS.helpers.DatagramSocketPriv.DatagramSocketPriv,ANY LOG4CXX_NS.helpers.DatagramSocketPriv.DatagramSocketPriv (),main\include\log4cxx\private\datagramsocket_priv.hpp,"DatagramSocketPriv(int localPort1, InetAddressPtr localAddress1)
		: localAddress(localAddress1), port(0), localPort(localPort1)
	{
	}",40.0,43.0,2.0,2.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ANY
2332,65988,~DatagramSocketPriv,1,LOG4CXX_NS.helpers.DatagramSocketPriv.~DatagramSocketPriv,ANY LOG4CXX_NS.helpers.DatagramSocketPriv.~DatagramSocketPriv (),main\include\log4cxx\private\datagramsocket_priv.hpp,~DatagramSocketPriv() = default;,45.0,45.0,2.0,33.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2333,66007,FileAppenderPriv,1,LOG4CXX_NS.FileAppenderPriv.FileAppenderPriv,"ANY LOG4CXX_NS.FileAppenderPriv.FileAppenderPriv (LayoutPtr,LogString,bool,bool,int)",main\include\log4cxx\private\fileappender_priv.hpp,"FileAppenderPriv
		( LayoutPtr _layout = LayoutPtr()
		, const LogString& _fileName = LogString()
		, bool _fileAppend = true
		, bool _bufferedIO = false
		, int _bufferSize = 8 * 1024
		)
		: WriterAppenderPriv(_layout)
		, fileAppend(_fileAppend)
		, fileName(_fileName)
		, bufferedIO(_bufferedIO)
		, bufferSize(_bufferSize)
		{}",29.0,41.0,2.0,4.0,13.0,0,0,0,0,0,0,1,1,0,0,,0,0,10,5,5,ANY
2334,66030,~FilterPrivate,1,LOG4CXX_NS.spi.FilterPrivate.~FilterPrivate,ANY LOG4CXX_NS.spi.FilterPrivate.~FilterPrivate (),main\include\log4cxx\private\filter_priv.hpp,virtual ~FilterPrivate(){},29.0,29.0,2.0,27.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2335,66068,ODBCAppenderPriv,1,LOG4CXX_NS.db.ODBCAppenderPriv.ODBCAppenderPriv,ANY LOG4CXX_NS.db.ODBCAppenderPriv.ODBCAppenderPriv (),main\include\log4cxx\private\odbcappender_priv.hpp,"ODBCAppenderPriv(
#if LOG4CXX_EVENTS_AT_EXIT
		std::function<void()> atExitActivated
#endif
			)
		: AppenderSkeletonPrivate()
		, connection(0)
		, env(0)
		, preparedStatement(0)
		, bufferSize(1)
		, timeZone(helpers::TimeZone::getDefault())
#if LOG4CXX_EVENTS_AT_EXIT
		, atExitRegistryRaii(std::move(atExitActivated))
#endif
		{}",54.0,68.0,2.0,4.0,15.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2336,66092,setPreparedStatement,1,LOG4CXX_NS.db.ODBCAppenderPriv.setPreparedStatement,"void LOG4CXX_NS.db.ODBCAppenderPriv.setPreparedStatement (SQLHDBC,ANY)",main\include\log4cxx\private\odbcappender_priv.hpp,"void setPreparedStatement(SQLHDBC con, helpers::Pool& p);",131.0,131.0,7.0,57.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
2337,66098,setParameterValues,1,LOG4CXX_NS.db.ODBCAppenderPriv.setParameterValues,"void LOG4CXX_NS.db.ODBCAppenderPriv.setParameterValues (ANY,ANY)",main\include\log4cxx\private\odbcappender_priv.hpp,"void setParameterValues(const spi::LoggingEventPtr& event, helpers::Pool& p);",132.0,132.0,7.0,77.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
2338,66115,PatternConverterPrivate,1,LOG4CXX_NS.pattern.PatternConverterPrivate.PatternConverterPrivate,"ANY LOG4CXX_NS.pattern.PatternConverterPrivate.PatternConverterPrivate (LogString,LogString)",main\include\log4cxx\private\patternconverter_priv.hpp,"PatternConverterPrivate( const LogString& _name, const LogString& _style ) :
		name(_name),
		style(_style) {}",33.0,35.0,2.0,18.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ANY
2339,66121,~PatternConverterPrivate,1,LOG4CXX_NS.pattern.PatternConverterPrivate.~PatternConverterPrivate,ANY LOG4CXX_NS.pattern.PatternConverterPrivate.~PatternConverterPrivate (),main\include\log4cxx\private\patternconverter_priv.hpp,virtual ~PatternConverterPrivate(){},37.0,37.0,2.0,37.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2340,66143,~RollingPolicyBasePrivate,1,LOG4CXX_NS.rolling.RollingPolicyBasePrivate.~RollingPolicyBasePrivate,ANY LOG4CXX_NS.rolling.RollingPolicyBasePrivate.~RollingPolicyBasePrivate (),main\include\log4cxx\private\rollingpolicybase_priv.hpp,virtual ~RollingPolicyBasePrivate() = default;,31.0,31.0,5.0,50.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2341,66168,ServerSocketPrivate,1,LOG4CXX_NS.helpers.ServerSocketPrivate.ServerSocketPrivate,ANY LOG4CXX_NS.helpers.ServerSocketPrivate.ServerSocketPrivate (),main\include\log4cxx\private\serversocket_priv.hpp,"ServerSocketPrivate() :
		timeout(0){}",29.0,30.0,2.0,14.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2342,66172,~ServerSocketPrivate,1,LOG4CXX_NS.helpers.ServerSocketPrivate.~ServerSocketPrivate,ANY LOG4CXX_NS.helpers.ServerSocketPrivate.~ServerSocketPrivate (),main\include\log4cxx\private\serversocket_priv.hpp,virtual ~ServerSocketPrivate() = default;,31.0,31.0,2.0,42.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2343,66187,SocketPrivate,1,LOG4CXX_NS.helpers.SocketPrivate.SocketPrivate,"ANY LOG4CXX_NS.helpers.SocketPrivate.SocketPrivate (InetAddressPtr,int)",main\include\log4cxx\private\socket_priv.hpp,"SocketPrivate(const InetAddressPtr& addr = InetAddressPtr(), int _port = 0)
		: address(addr), port(_port) {}",30.0,31.0,2.0,33.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ANY
2344,66193,~SocketPrivate,1,LOG4CXX_NS.helpers.SocketPrivate.~SocketPrivate,ANY LOG4CXX_NS.helpers.SocketPrivate.~SocketPrivate (),main\include\log4cxx\private\socket_priv.hpp,virtual ~SocketPrivate() = default;,32.0,32.0,2.0,36.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2345,66213,SocketAppenderSkeletonPriv,1,LOG4CXX_NS.net.SocketAppenderSkeletonPriv.SocketAppenderSkeletonPriv,"ANY LOG4CXX_NS.net.SocketAppenderSkeletonPriv.SocketAppenderSkeletonPriv (int,int)",main\include\log4cxx\private\socketappenderskeleton_priv.hpp,"SocketAppenderSkeletonPriv(const LogString& host, int port, int delay) :
		AppenderSkeletonPrivate(),
		remoteHost(host),
		address(helpers::InetAddress::getByName(host)),
		port(port),
		reconnectionDelay(delay),
		locationInfo(false),
		thread() {}",49.0,56.0,2.0,13.0,8.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ANY
2346,66250,strnlen_s,1,strnlen_s,"size_t strnlen_s (char*,size_t)",main\include\log4cxx\private\string_c11.hpp,"static size_t strnlen_s( const char *str, size_t strsz )
{
	size_t result = 0;
	if (!str)
		;
	else while (*str++ != 0 && result < strsz)
		++result;
	return result;
}",31.0,39.0,1.0,1.0,9.0,2,2,3,2,1,0,2,2,0,0,,0,0,4,2,2,size_t
2347,66280,strcat_s,1,strcat_s,"int strcat_s (char*,size_t,char*)",main\include\log4cxx\private\string_c11.hpp,"static int strcat_s(char* destArg, size_t destsz, const char* src)
{
	if (!src || !destArg || RSIZE_MAX < destsz)
		return -1;
	if (0 == destsz)
		return -2;
	--destsz;
	char* dest = destArg;
	size_t index = 0;
	while (*dest && index < destsz)
		++index, ++dest;
	while (*src && index < destsz)
	{
		*dest++ = *src++;
		++index;
	}
	*dest = 0;
	if (*src) // longer than destsz?
	{
		*destArg = 0; // Do not return a partial result
		return -3;
	}
	return 0;
}",40.0,63.0,1.0,25.0,24.0,30,12,20,5,0,0,6,6,0,0,,0,0,6,3,3,int
2348,66385,SyslogAppenderPriv,1,LOG4CXX_NS.net.SyslogAppenderPriv.SyslogAppenderPriv,ANY LOG4CXX_NS.net.SyslogAppenderPriv.SyslogAppenderPriv (),main\include\log4cxx\private\syslogappender_priv.hpp,"SyslogAppenderPriv(const LayoutPtr& layout,
		const LogString& syslogHost, int syslogFacility) :
		AppenderSkeletonPrivate(layout),
		syslogFacility(syslogFacility),
		facilityPrinting(false),
		maxMessageLength(1024)
	{

	}",77.0,85.0,2.0,2.0,9.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ANY
2349,66426,WriterAppenderPriv,1,LOG4CXX_NS.WriterAppenderPriv.WriterAppenderPriv,ANY LOG4CXX_NS.WriterAppenderPriv.WriterAppenderPriv (),main\include\log4cxx\private\writerappender_priv.hpp,"WriterAppenderPriv(const LayoutPtr& layout1) :
		AppenderSkeletonPrivate(layout1),
		immediateFlush(true)
#if LOG4CXX_EVENTS_AT_EXIT
		, atExitRegistryRaii([this]{atExitActivated();})
#endif
	{
	}",56.0,63.0,2.0,2.0,8.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
2350,66441,atExitActivated,1,LOG4CXX_NS.WriterAppenderPriv.atExitActivated,void LOG4CXX_NS.WriterAppenderPriv.atExitActivated (),main\include\log4cxx\private\writerappender_priv.hpp,"void atExitActivated()
	{
		std::lock_guard<std::recursive_mutex> lock(mutex);
		if (writer)
			writer->flush(pool);
	}",66.0,71.0,2.0,2.0,6.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,void
2351,66511,~Action,1,LOG4CXX_NS.rolling.Action.~Action,virtual LOG4CXX_NS.rolling.Action.~Action (),main\include\log4cxx\rolling\action.hpp,virtual ~Action();,50.0,50.0,11.0,19.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,virtual
2352,66515,execute,1,LOG4CXX_NS.rolling.Action.execute,bool LOG4CXX_NS.rolling.Action.execute (ANY),main\include\log4cxx\rolling\action.hpp,virtual bool execute(LOG4CXX_NS::helpers::Pool& pool) const = 0;,58.0,58.0,16.0,65.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,bool
2353,66520,run,1,LOG4CXX_NS.rolling.Action.run,void LOG4CXX_NS.rolling.Action.run (ANY),main\include\log4cxx\rolling\action.hpp,void run(LOG4CXX_NS::helpers::Pool& pool);,60.0,60.0,8.0,43.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
2354,66525,close,1,LOG4CXX_NS.rolling.Action.close,void LOG4CXX_NS.rolling.Action.close (),main\include\log4cxx\rolling\action.hpp,void close();,62.0,62.0,8.0,14.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,void
2355,66529,isComplete,1,LOG4CXX_NS.rolling.Action.isComplete,bool LOG4CXX_NS.rolling.Action.isComplete (),main\include\log4cxx\rolling\action.hpp,bool isComplete() const;,68.0,68.0,8.0,25.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,bool
2356,66533,reportException,1,LOG4CXX_NS.rolling.Action.reportException,void LOG4CXX_NS.rolling.Action.reportException (ANY),main\include\log4cxx\rolling\action.hpp,void reportException(const std::exception&);,70.0,70.0,8.0,45.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
2357,66555,execute,1,LOG4CXX_NS.rolling.FileRenameAction.execute,bool LOG4CXX_NS.rolling.FileRenameAction.execute (ANY),main\include\log4cxx\rolling\filerenameaction.hpp,bool execute(LOG4CXX_NS::helpers::Pool& pool) const override;,52.0,52.0,8.0,62.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,bool
2358,66607,~GZCompressAction,1,LOG4CXX_NS.rolling.GZCompressAction.~GZCompressAction,ANY LOG4CXX_NS.rolling.GZCompressAction.~GZCompressAction (),main\include\log4cxx\rolling\gzcompressaction.hpp,~GZCompressAction();,46.0,46.0,3.0,21.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2359,66611,execute,1,LOG4CXX_NS.rolling.GZCompressAction.execute,bool LOG4CXX_NS.rolling.GZCompressAction.execute (ANY),main\include\log4cxx\rolling\gzcompressaction.hpp,bool execute(LOG4CXX_NS::helpers::Pool& pool) const override;,53.0,53.0,8.0,62.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,bool
2360,66616,setThrowIOExceptionOnForkFailure,1,LOG4CXX_NS.rolling.GZCompressAction.setThrowIOExceptionOnForkFailure,void LOG4CXX_NS.rolling.GZCompressAction.setThrowIOExceptionOnForkFailure (bool),main\include\log4cxx\rolling\gzcompressaction.hpp,void setThrowIOExceptionOnForkFailure(bool throwIO);,64.0,64.0,8.0,53.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
2361,66621,GZCompressAction,1,LOG4CXX_NS.rolling.GZCompressAction.GZCompressAction,ANY LOG4CXX_NS.rolling.GZCompressAction.GZCompressAction (GZCompressAction),main\include\log4cxx\rolling\gzcompressaction.hpp,GZCompressAction(const GZCompressAction&);,67.0,67.0,3.0,43.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
2362,66626,operator =,1,LOG4CXX_NS.rolling.GZCompressAction.operator =,GZCompressAction LOG4CXX_NS.rolling.GZCompressAction.operator = (GZCompressAction),main\include\log4cxx\rolling\gzcompressaction.hpp,GZCompressAction& operator=(const GZCompressAction&);,68.0,68.0,19.0,54.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,GZCompressAction
2363,66740,RolloverDescription,1,LOG4CXX_NS.rolling.RolloverDescription.RolloverDescription,"ANY LOG4CXX_NS.rolling.RolloverDescription.RolloverDescription (LogString,bool,ActionPtr,ActionPtr)",main\include\log4cxx\rolling\rolloverdescription.hpp,"RolloverDescription(
			const LogString& activeFileName,
			const bool append,
			const ActionPtr& synchronous,
			const ActionPtr& asynchronous);",48.0,52.0,3.0,33.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,ANY
2364,66748,~RolloverDescription,1,LOG4CXX_NS.rolling.RolloverDescription.~RolloverDescription,ANY LOG4CXX_NS.rolling.RolloverDescription.~RolloverDescription (),main\include\log4cxx\rolling\rolloverdescription.hpp,~RolloverDescription();,54.0,54.0,3.0,24.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ANY
2365,66752,getActiveFileName,1,LOG4CXX_NS.rolling.RolloverDescription.getActiveFileName,LogString LOG4CXX_NS.rolling.RolloverDescription.getActiveFileName (),main\include\log4cxx\rolling\rolloverdescription.hpp,LogString getActiveFileName() const;,60.0,60.0,13.0,37.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,LogString
2366,66756,getAppend,1,LOG4CXX_NS.rolling.RolloverDescription.getAppend,bool LOG4CXX_NS.rolling.RolloverDescription.getAppend (),main\include\log4cxx\rolling\rolloverdescription.hpp,bool getAppend() const;,62.0,62.0,8.0,24.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,bool
2367,66760,getSynchronous,1,LOG4CXX_NS.rolling.RolloverDescription.getSynchronous,ActionPtr LOG4CXX_NS.rolling.RolloverDescription.getSynchronous (),main\include\log4cxx\rolling\rolloverdescription.hpp,ActionPtr getSynchronous() const;,70.0,70.0,13.0,34.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ActionPtr
2368,66764,getAsynchronous,1,LOG4CXX_NS.rolling.RolloverDescription.getAsynchronous,ActionPtr LOG4CXX_NS.rolling.RolloverDescription.getAsynchronous (),main\include\log4cxx\rolling\rolloverdescription.hpp,ActionPtr getAsynchronous() const;,78.0,78.0,13.0,35.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,ActionPtr
2369,66836,execute,1,LOG4CXX_NS.rolling.ZipCompressAction.execute,bool LOG4CXX_NS.rolling.ZipCompressAction.execute (ANY),main\include\log4cxx\rolling\zipcompressaction.hpp,bool execute(LOG4CXX_NS::helpers::Pool& pool) const override;,52.0,52.0,8.0,62.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,bool
2370,66841,setThrowIOExceptionOnForkFailure,1,LOG4CXX_NS.rolling.ZipCompressAction.setThrowIOExceptionOnForkFailure,void LOG4CXX_NS.rolling.ZipCompressAction.setThrowIOExceptionOnForkFailure (bool),main\include\log4cxx\rolling\zipcompressaction.hpp,void setThrowIOExceptionOnForkFailure(bool throwIO);,63.0,63.0,8.0,53.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
2371,66846,ZipCompressAction,1,LOG4CXX_NS.rolling.ZipCompressAction.ZipCompressAction,ANY LOG4CXX_NS.rolling.ZipCompressAction.ZipCompressAction (ZipCompressAction),main\include\log4cxx\rolling\zipcompressaction.hpp,ZipCompressAction(const ZipCompressAction&);,66.0,66.0,3.0,45.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
2372,66851,operator =,1,LOG4CXX_NS.rolling.ZipCompressAction.operator =,ZipCompressAction LOG4CXX_NS.rolling.ZipCompressAction.operator = (ZipCompressAction),main\include\log4cxx\rolling\zipcompressaction.hpp,ZipCompressAction& operator=(const ZipCompressAction&);,67.0,67.0,20.0,56.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ZipCompressAction
2373,67130,logstream_manipulator,1,LOG4CXX_NS.logstream_manipulator,logstream_base LOG4CXX_NS.logstream_manipulator (logstream_base),main\include\log4cxx\stream.hpp,typedef logstream_base& (*logstream_manipulator)(logstream_base&);,215.0,215.0,23.0,65.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,logstream_base
2374,67227,throw_out_of_mem,1,anonymous_namespace_1.throw_out_of_mem,int anonymous_namespace_1.throw_out_of_mem (int),main\mock-apple\CFString.cpp,"int throw_out_of_mem(int status)
{
	throw std::bad_alloc();
	return status;
}",9.0,13.0,1.0,1.0,5.0,2,2,2,2,0,0,1,1,0,0,,0,0,2,1,1,int
2375,67239,getStringPool,1,anonymous_namespace_2.getStringPool,apr_pool_t anonymous_namespace_2.getStringPool (),main\mock-apple\CFString.cpp,"apr_pool_t* getStringPool()
{
	struct cfstring_pool
	{
		apr_pool_t* ptr = 0;
		cfstring_pool()
		{
			apr_pool_create_core_ex(&ptr, throw_out_of_mem, NULL);
		}
		~cfstring_pool()
		{
			apr_pool_destroy(ptr);
		}
	};
	static LOG4CXX_NS::helpers::WideLife<cfstring_pool> pool;
	return pool.ptr;
}",14.0,30.0,1.0,1.0,17.0,1,1,1,1,0,0,1,1,0,0,,0,0,0,0,0,apr_pool_t
2376,67248,CFRangeMake,1,CFRangeMake,"CFRange CFRangeMake (CFIndex,CFIndex)",main\mock-apple\CFString.cpp,"CFRange CFRangeMake(CFIndex loc, CFIndex len) {
	CFRange result;
	result.location = loc;
	result.length = len;
	return result;
}",35.0,40.0,1.0,1.0,6.0,4,2,5,3,0,0,1,1,0,0,,0,0,4,2,2,CFRange
2377,67267,CFStringGetLength,1,CFStringGetLength,CFIndex CFStringGetLength (CFStringRef),main\mock-apple\CFString.cpp,"CFIndex CFStringGetLength(CFStringRef theString) {
	UniChar* data = (UniChar*)theString;
	CFIndex result = 0;
	while (data[result])
		++result;
	return result;
}",42.0,48.0,1.0,1.0,7.0,4,3,6,3,0,0,2,2,0,0,,0,0,2,1,1,CFIndex
2378,67290,CFStringGetCharacters,1,CFStringGetCharacters,"void CFStringGetCharacters (CFStringRef,CFRange,UniChar*)",main\mock-apple\CFString.cpp,"void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer) {
	UniChar* data = (UniChar*)theString;
	CFIndex index = 0;
	while (index < range.length) {
		*buffer = data[range.location + index];
		++index;
		++buffer;
	}
}",49.0,57.0,1.0,1.0,9.0,12,8,11,5,0,0,2,2,0,0,,0,0,6,3,3,void
2379,67328,CFStringCreateWithCharacters,1,CFStringCreateWithCharacters,"CFStringRef CFStringCreateWithCharacters (CFAllocatorRef,UniChar*,CFIndex)",main\mock-apple\CFString.cpp,"CFStringRef CFStringCreateWithCharacters(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars) {
	UniChar* result = (UniChar*)apr_palloc(getStringPool(), (numChars + 1) * sizeof(UniChar));
	result[numChars] = 0;
	for (UniChar* p = result; 0 < numChars; --numChars)
		*p++ = *chars++;
	return (CFStringRef)result;
}",58.0,64.0,1.0,1.0,7.0,10,7,9,4,0,0,2,2,0,0,,0,0,6,3,3,CFStringRef
2380,67375,CFStringCreateWithCString,1,CFStringCreateWithCString,"CFStringRef CFStringCreateWithCString (CFAllocatorRef,char*,CFStringEncoding)",main\mock-apple\CFString.cpp,"CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding) {
	UniChar* result = (UniChar*)apr_palloc(getStringPool(), (strlen(cStr) + 1) * sizeof(UniChar));
	for (UniChar *p = result; *p++ = *cStr++;)
		;
	return (CFStringRef)result;
}",65.0,70.0,1.0,1.0,6.0,12,7,8,4,0,0,2,2,0,0,,0,0,6,3,3,CFStringRef
2381,105,foo,4,foo,,cmake\boost-fallback\test-boostsharedptr.cpp,"struct foo{
	int x;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2382,213,foo,4,foo,,cmake\boost-fallback\test-stdsharedptr.cpp,"struct foo{
	int x;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2383,290,UniChar,4,UniChar,,cmake\compiler-features\test-unicode.cpp,using UniChar = unsigned short;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2384,291,StringType,4,StringType,,cmake\compiler-features\test-unicode.cpp,using StringType = std::basic_string<UniChar>;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2385,292,StreamType,4,StreamType,,cmake\compiler-features\test-unicode.cpp,using StreamType = std::basic_ostringstream<UniChar>;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2386,543,ExampleStaticData,4,ExampleStaticData,,examples\cpp\auto-configured.cpp,"struct ExampleStaticData {
	ExampleStaticData()	{
		LOG4CXX_DEBUG(rootLogger, ""static initializer message"");
	}
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2387,612,Bar,4,com.foo.Bar,,examples\cpp\com\foo\bar.hpp,"class Bar {
    static LoggerPtr m_logger;
    public:
        void doIt();
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2388,769,LoggerPtr,4,LoggerPtr,,examples\cpp\com\foo\config-qt.hpp,using LoggerPtr = log4cxx::LoggerPtr;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2389,789,LoggerPtr,4,LoggerPtr,,examples\cpp\com\foo\config.hpp,using LoggerPtr = log4cxx::LoggerPtr;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2390,1473,NullWriterAppender,4,LOG4CXX_NS.NullWriterAppender,,examples\cpp\custom-appender.cpp,"class NullWriterAppender : public AppenderSkeleton {
public:
	DECLARE_LOG4CXX_OBJECT(NullWriterAppender)
	BEGIN_LOG4CXX_CAST_MAP()
	LOG4CXX_CAST_ENTRY(NullWriterAppender)
	LOG4CXX_CAST_ENTRY_CHAIN(AppenderSkeleton)
	END_LOG4CXX_CAST_MAP()

	NullWriterAppender(){}

	void close() override{}

	bool requiresLayout() const override {
		return false;
	}

	void append(const spi::LoggingEventPtr& event, helpers::Pool& p) override {
		// This gets called whenever there is a valid event for our appender.
	}

	void activateOptions(helpers::Pool& /* pool */) override {
		// Given all of our options, do something useful(e.g. open a file)
	}

	void setOption(const LogString& option, const LogString& value) override {
		if (helpers::StringHelper::equalsIgnoreCase(option,
										   LOG4CXX_STR(""SOMEVALUE""), LOG4CXX_STR(""somevalue""))){
			// Do something with the 'value' here.
		}
	}
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2391,1578,DelayedLoop,4,DelayedLoop,,examples\cpp\delayedloop.cpp,"class DelayedLoop
{
        static LoggerPtr logger;

public:
        static void main(int argc, const char * const argv[])
        {
                if(argc == 2)
                {
                        init(argv[1]);
                }
                else
                {
                        usage(argv[0], ""Wrong number of arguments."");
                }

                test();
        }

        static void usage(const char * programName, const char * msg)
        {
                std::cout << msg << std::endl;
                std::cout << ""Usage: "" << programName <<
                                "" configFile"" << std::endl;
                exit(1);
        }


        static void init(const std::string& configFile)
        {
                if(configFile.length() > 4 &&
                     configFile.substr(configFile.length() - 4) == "".xml"")
                {
                        xml::DOMConfigurator::configureAndWatch(configFile, 3000);
                }
        ...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2392,1759,MyStruct,4,MyStruct,,examples\cpp\format-string.cpp,"struct MyStruct {
		int x;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2393,2598,AndFilterPrivate,4,AndFilterPrivate,,main\cpp\andfilter.cpp,"struct AndFilter::AndFilterPrivate : public FilterPrivate
{
	AndFilterPrivate() : FilterPrivate(),
		headFilter(),
		tailFilter(),
		acceptOnMatch(true) {}

	LOG4CXX_NS::spi::FilterPtr headFilter;
	LOG4CXX_NS::spi::FilterPtr tailFilter;
	bool acceptOnMatch;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2394,2785,priv_data,4,priv_data,,main\cpp\appenderattachableimpl.cpp,"struct AppenderAttachableImpl::priv_data
{
	/** Array of appenders. */
	AppenderList  appenderList;
	mutable std::mutex m_mutex;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2395,3621,APRDatagramSocketPriv,4,LOG4CXX_NS.helpers.APRDatagramSocketPriv,,main\cpp\aprdatagramsocket.cpp,"struct APRDatagramSocket::APRDatagramSocketPriv : public DatagramSocketPriv {
	APRDatagramSocketPriv() :
		DatagramSocketPriv(),
		socket(nullptr)
	{}

	APRDatagramSocketPriv(int port) :
		DatagramSocketPriv(port),
		socket(nullptr)
	{}

	APRDatagramSocketPriv(int port, InetAddressPtr localAddress) :
		DatagramSocketPriv(port, localAddress),
		socket(nullptr)
	{}

	/** The APR socket */
	apr_socket_t* socket;

	/** The memory pool for the socket */
	Pool socketPool;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2396,4118,APRInitializerPrivate,4,APRInitializerPrivate,,main\cpp\aprinitializer.cpp,"struct APRInitializer::APRInitializerPrivate{
	APRInitializerPrivate() :
		p(0),
		startTime(0),
		tlsKey(0){

	}

	apr_pool_t* p;
	std::mutex mutex;
	std::list<FileWatchdog*> watchdogs;
	log4cxx_time_t startTime;
	apr_threadkey_t* tlsKey;
	std::map<size_t, ObjectPtr> objects;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2397,4148,apr_environment,4,anonymous_namespace_4.apr_environment,,main\cpp\aprinitializer.cpp,"struct apr_environment
{
    apr_environment()
    {
        apr_initialize();
    }
    ~apr_environment()
    {
        apr_terminate();
    }
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2398,4471,APRServerSocketPriv,4,LOG4CXX_NS.helpers.APRServerSocketPriv,,main\cpp\aprserversocket.cpp,"struct APRServerSocket::APRServerSocketPriv : public ServerSocketPrivate {
	Pool pool;
	std::mutex mutex;
	apr_socket_t* socket;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2399,4911,APRSocketPriv,4,LOG4CXX_NS.helpers.APRSocketPriv,,main\cpp\aprsocket.cpp,"struct APRSocket::APRSocketPriv : public Socket::SocketPrivate {
	APRSocketPriv(InetAddressPtr& address, int port)
		: Socket::SocketPrivate(address, port)
		, socket(nullptr)
	{}

	APRSocketPriv(apr_socket_t* sock, apr_pool_t* p) :
		pool(p, true),
		socket(sock)
	{}

	Pool pool;
	apr_socket_t* socket;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2400,5337,anonymous_enum_0,4,anonymous_enum_0,,main\cpp\asyncappender.cpp,enum { DEFAULT_BUFFER_SIZE = 128 },-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2401,5346,DiscardSummary,4,DiscardSummary,,main\cpp\asyncappender.cpp,"class DiscardSummary
{
	private:
		/**
		 * First event of the highest severity.
		*/
		::LOG4CXX_NS::spi::LoggingEventPtr maxEvent;

		/**
		* Total count of messages discarded.
		*/
		int count;

	public:
		/**
		 * Create new instance.
		 *
		 * @param event event, may not be null.
		*/
		DiscardSummary(const ::LOG4CXX_NS::spi::LoggingEventPtr& event);
		/** Copy constructor.  */
		DiscardSummary(const DiscardSummary& src);
		/** Assignment operator. */
		DiscardSummary& operator=(const DiscardSummary& src);

		/**
		 * Add discarded event to summary.
		 *
		 * @param event event, may not be null.
		*/
		void add(const ::LOG4CXX_NS::spi::LoggingEventPtr& event);

		/**
		 * Create event with summary information.
		 *
		 * @return new event.
		 */
		::LOG4CXX_NS::spi::LoggingEventPtr createEvent(::LOG4CXX_NS::helpers::Pool& p);

		static
		::LOG4CXX_NS::spi::LoggingEventPtr createEvent(::LOG4CXX_NS::helpers::Pool& p,
			size_t discardedCount);
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2402,5380,DiscardMap,4,DiscardMap,,main\cpp\asyncappender.cpp,"typedef std::map<LogString, DiscardSummary> DiscardMap;",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2403,5381,AsyncAppenderPriv,4,AsyncAppenderPriv,,main\cpp\asyncappender.cpp,"struct AsyncAppender::AsyncAppenderPriv : public AppenderSkeleton::AppenderSkeletonPrivate
{
	AsyncAppenderPriv() :
		AppenderSkeletonPrivate(),
		buffer(),
		bufferSize(DEFAULT_BUFFER_SIZE),
		appenders(std::make_shared<AppenderAttachableImpl>(pool)),
		dispatcher(),
		locationInfo(false),
		blocking(true)
#if LOG4CXX_EVENTS_AT_EXIT
		, atExitRegistryRaii([this]{atExitActivated();})
#endif
	{
	}

#if LOG4CXX_EVENTS_AT_EXIT
	void atExitActivated()
	{
		std::unique_lock<std::mutex> lock(bufferMutex);
		bufferNotFull.wait(lock, [this]() -> bool
			{ return buffer.empty() || closed; }
		);
	}
#endif

	/**
	 * Event buffer.
	*/
	LoggingEventList buffer;

	/**
	 *  Mutex used to guard access to buffer and discardMap.
	 */
	std::mutex bufferMutex;

	std::condition_variable bufferNotFull;
	std::condition_variable bufferNotEmpty;

	/**
	  * Map of DiscardSummary objects keyed by logger name.
	*/
	DiscardMap discardMap;

	/**
	 * Buffer size.
	*/
	int bufferSize;

	/**
	 * Nested appenders.
...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2404,6683,AtExitRegistryImpl,4,anonymous_namespace_1.AtExitRegistryImpl,,main\cpp\atexitregistry.cpp,"struct AtExitRegistryImpl : public AtExitRegistry
	{
		~AtExitRegistryImpl()
		{
			std::lock_guard<std::recursive_mutex> lock(mutex);
			while(!actions.empty())
			{
				std::function<void()> action = std::move(actions.begin()->second);
				actions.erase(actions.begin());
				action();
			}
		}

		void add(void* key, std::function<void()> action)
		{
			std::lock_guard<std::recursive_mutex> lock(mutex);
			actions.emplace(key, std::move(action));
		}

		void del(void* key)
		{
			std::lock_guard<std::recursive_mutex> lock(mutex);
			actions.erase(key);
		}

	private:
		std::recursive_mutex mutex;
		std::map<void*, std::function<void()>> actions;
	}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2405,6923,BufferedWriterPriv,4,BufferedWriterPriv,,main\cpp\bufferedwriter.cpp,"struct BufferedWriter::BufferedWriterPriv
{
	BufferedWriterPriv(WriterPtr& out1, size_t sz1) :
		out(out1),
		sz(sz1)
	{}

	WriterPtr out;
	size_t sz;
	LogString buf;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2406,7104,ByteArrayInputStreamPriv,4,ByteArrayInputStreamPriv,,main\cpp\bytearrayinputstream.cpp,"struct ByteArrayInputStream::ByteArrayInputStreamPriv
{
	ByteArrayInputStreamPriv(const ByteList& bytes) :
		buf(bytes),
		pos(0) {}

	ByteList buf;
	size_t pos;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2407,7218,ByteArrayOutputStreamPriv,4,ByteArrayOutputStreamPriv,,main\cpp\bytearrayoutputstream.cpp,"struct ByteArrayOutputStream::ByteArrayOutputStreamPriv
{
	ByteList array;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2408,7311,ByteBufferPriv,4,ByteBufferPriv,,main\cpp\bytebuffer.cpp,"struct ByteBuffer::ByteBufferPriv
{
	ByteBufferPriv(char* data1, size_t capacity) :
		base(data1), pos(0), lim(capacity), cap(capacity) {}

	char* base;
	size_t pos;
	size_t lim;
	size_t cap;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2409,7522,CachedDateFormatPriv,4,CachedDateFormatPriv,,main\cpp\cacheddateformat.cpp,"struct CachedDateFormat::CachedDateFormatPriv
{
	CachedDateFormatPriv(DateFormatPtr dateFormat, int expiration1) :
		formatter(dateFormat),
		millisecondStart(0),
		slotBegin(std::numeric_limits<log4cxx_time_t>::min()),
		cache(50, 0x20),
		expiration(expiration1),
		previousTime(std::numeric_limits<log4cxx_time_t>::min())
	{}

	/**
	 *   Wrapped formatter.
	 */
	LOG4CXX_NS::helpers::DateFormatPtr formatter;

	/**
	 *  Index of initial digit of millisecond pattern or
	 *   UNRECOGNIZED_MILLISECONDS or NO_MILLISECONDS.
	 */
	mutable int millisecondStart;

	/**
	 *  Integral second preceding the previous convered Date.
	 */
	mutable log4cxx_time_t slotBegin;


	/**
	 *  Cache of previous conversion.
	 */
	mutable LogString cache;


	/**
	 *  Maximum validity period for the cache.
	 *  Typically 1, use cache for duplicate requests only, or
	 *  1000000, use cache for requests within the same integral second.
	 */
	const int expiration;

	/**
	 *  Date requested in previous conversion.
...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2410,8236,TrivialCharsetDecoder,4,LOG4CXX_NS.helpers.TrivialCharsetDecoder,,main\cpp\charsetdecoder.cpp,"class TrivialCharsetDecoder : public CharsetDecoder
{
	public:
		TrivialCharsetDecoder()
		{
		}

		virtual ~TrivialCharsetDecoder()
		{
		}

		virtual log4cxx_status_t decode(ByteBuffer& in,
			LogString& out)
		{
			size_t remaining = in.remaining();

			if ( remaining > 0)
			{
				const logchar* src = (const logchar*) (in.data() + in.position());
				size_t count = remaining / sizeof(logchar);
				out.append(src, count);
				in.position(in.position() + remaining);
			}

			return APR_SUCCESS;
		}



	private:
		TrivialCharsetDecoder(const TrivialCharsetDecoder&);
		TrivialCharsetDecoder& operator=(const TrivialCharsetDecoder&);
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2411,8312,UTF8CharsetDecoder,4,LOG4CXX_NS.helpers.UTF8CharsetDecoder,,main\cpp\charsetdecoder.cpp,"class UTF8CharsetDecoder : public CharsetDecoder
{
	public:
		UTF8CharsetDecoder()
		{
		}

		virtual ~UTF8CharsetDecoder()
		{
		}

	private:
		virtual log4cxx_status_t decode(ByteBuffer& in,
			LogString& out)
		{
			if (in.remaining() > 0)
			{
				std::string tmp(in.current(), in.remaining());
				std::string::const_iterator iter = tmp.begin();

				while (iter != tmp.end())
				{
					unsigned int sv = Transcoder::decode(tmp, iter);

					if (sv == 0xFFFF)
					{
						size_t offset = iter - tmp.begin();
						in.position(in.position() + offset);
						return APR_BADARG;
					}
					else
					{
						Transcoder::encode(sv, out);
					}
				}

				in.position(in.limit());
			}

			return APR_SUCCESS;
		}

	private:
		UTF8CharsetDecoder(const UTF8CharsetDecoder&);
		UTF8CharsetDecoder& operator=(const UTF8CharsetDecoder&);
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2412,8423,ISOLatinCharsetDecoder,4,LOG4CXX_NS.helpers.ISOLatinCharsetDecoder,,main\cpp\charsetdecoder.cpp,"class ISOLatinCharsetDecoder : public CharsetDecoder
{
	public:
		ISOLatinCharsetDecoder()
		{
		}

		virtual ~ISOLatinCharsetDecoder()
		{
		}

	private:
		virtual log4cxx_status_t decode(ByteBuffer& in,
			LogString& out)
		{
			if (in.remaining() > 0)
			{

				const unsigned char* src = (unsigned char*) in.current();
				const unsigned char* srcEnd = src + in.remaining();

				while (src < srcEnd)
				{
					unsigned int sv = *(src++);
					Transcoder::encode(sv, out);
				}

				in.position(in.limit());
			}

			return APR_SUCCESS;
		}



	private:
		ISOLatinCharsetDecoder(const ISOLatinCharsetDecoder&);
		ISOLatinCharsetDecoder& operator=(const ISOLatinCharsetDecoder&);
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2413,8501,USASCIICharsetDecoder,4,LOG4CXX_NS.helpers.USASCIICharsetDecoder,,main\cpp\charsetdecoder.cpp,"class USASCIICharsetDecoder : public CharsetDecoder
{
	public:
		USASCIICharsetDecoder()
		{
		}

		virtual ~USASCIICharsetDecoder()
		{
		}

	private:

		virtual log4cxx_status_t decode(ByteBuffer& in,
			LogString& out)
		{
			log4cxx_status_t stat = APR_SUCCESS;

			if (in.remaining() > 0)
			{

				const unsigned char* src = (unsigned char*) in.current();
				const unsigned char* srcEnd = src + in.remaining();

				while (src < srcEnd)
				{
					unsigned char sv = *src;

					if (sv < 0x80)
					{
						src++;
						Transcoder::encode(sv, out);
					}
					else
					{
						stat = APR_BADARG;
						break;
					}
				}

				in.position(src - (const unsigned char*) in.data());
			}

			return stat;
		}



	private:
		USASCIICharsetDecoder(const USASCIICharsetDecoder&);
		USASCIICharsetDecoder& operator=(const USASCIICharsetDecoder&);
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2414,8599,LocaleCharsetDecoder,4,LOG4CXX_NS.helpers.LocaleCharsetDecoder,,main\cpp\charsetdecoder.cpp,"class LocaleCharsetDecoder : public CharsetDecoder
{
	public:
		LocaleCharsetDecoder() : state()
		{
		}
		log4cxx_status_t decode(ByteBuffer& in, LogString& out) override
		{
			log4cxx_status_t result = APR_SUCCESS;
			const char* p = in.current();
			size_t i = in.position();
			size_t remain = in.limit() - i;
#if !LOG4CXX_CHARSET_EBCDIC
			if (std::mbsinit(&this->state)) // ByteBuffer not partially decoded?
			{
				// Copy single byte characters
				for (; 0 < remain && ((unsigned int) *p) < 0x80; --remain, ++i, p++)
				{
					out.append(1, *p);
				}
			}
#endif
			// Decode characters that may be represented by multiple bytes
			while (0 < remain)
			{
				wchar_t ch = 0;
				size_t n = std::mbrtowc(&ch, p, remain, &this->state);
				if (0 == n) // NULL encountered?
				{
					++i;
					break;
				}
				if (static_cast<std::size_t>(-1) == n) // decoding error?
				{
					result = APR_BADARG;
					break;
				}
				if (static_cast<std::size_t>(-2) == n) // incomplete sequence?...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2415,9027,USASCIICharsetEncoder,4,LOG4CXX_NS.helpers.USASCIICharsetEncoder,,main\cpp\charsetencoder.cpp,"class USASCIICharsetEncoder : public CharsetEncoder
{
	public:
		USASCIICharsetEncoder()
		{
		}

		virtual log4cxx_status_t encode(const LogString& in,
			LogString::const_iterator& iter,
			ByteBuffer& out)
		{
			log4cxx_status_t stat = APR_SUCCESS;

			if (iter != in.end())
			{
				while (out.remaining() > 0 && iter != in.end())
				{
					LogString::const_iterator prev(iter);
					unsigned int sv = Transcoder::decode(in, iter);

					if (sv <= 0x7F)
					{
						out.put((char) sv);
					}
					else
					{
						iter = prev;
						stat = APR_BADARG;
						break;
					}
				}
			}

			return stat;
		}

	private:
		USASCIICharsetEncoder(const USASCIICharsetEncoder&);
		USASCIICharsetEncoder& operator=(const USASCIICharsetEncoder&);
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2416,9111,ISOLatinCharsetEncoder,4,LOG4CXX_NS.helpers.ISOLatinCharsetEncoder,,main\cpp\charsetencoder.cpp,"class ISOLatinCharsetEncoder : public CharsetEncoder
{
	public:
		ISOLatinCharsetEncoder()
		{
		}

		virtual log4cxx_status_t encode(const LogString& in,
			LogString::const_iterator& iter,
			ByteBuffer& out)
		{
			log4cxx_status_t stat = APR_SUCCESS;

			if (iter != in.end())
			{
				while (out.remaining() > 0 && iter != in.end())
				{
					LogString::const_iterator prev(iter);
					unsigned int sv = Transcoder::decode(in, iter);

					if (sv <= 0xFF)
					{
						out.put((char) sv);
					}
					else
					{
						iter = prev;
						stat = APR_BADARG;
						break;
					}
				}
			}

			return stat;
		}

	private:
		ISOLatinCharsetEncoder(const ISOLatinCharsetEncoder&);
		ISOLatinCharsetEncoder& operator=(const ISOLatinCharsetEncoder&);
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2417,9195,TrivialCharsetEncoder,4,LOG4CXX_NS.helpers.TrivialCharsetEncoder,,main\cpp\charsetencoder.cpp,"class TrivialCharsetEncoder : public CharsetEncoder
{
	public:
		TrivialCharsetEncoder()
		{
		}


		virtual log4cxx_status_t encode(const LogString& in,
			LogString::const_iterator& iter,
			ByteBuffer& out)
		{
			if (iter != in.end())
			{
				size_t requested = in.length() - (iter - in.begin());

				if (requested > out.remaining() / sizeof(logchar))
				{
					requested = out.remaining() / sizeof(logchar);
				}

				memcpy(out.current(),
					(const char*) in.data() + (iter - in.begin()),
					requested * sizeof(logchar));
				iter += requested;
				out.position(out.position() + requested * sizeof(logchar));
			}

			return APR_SUCCESS;
		}

	private:
		TrivialCharsetEncoder(const TrivialCharsetEncoder&);
		TrivialCharsetEncoder& operator=(const TrivialCharsetEncoder&);
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2418,9299,UTF8CharsetEncoder,4,LOG4CXX_NS.helpers.UTF8CharsetEncoder,,main\cpp\charsetencoder.cpp,"class UTF8CharsetEncoder : public CharsetEncoder
{
	public:
		UTF8CharsetEncoder()
		{
		}

		virtual log4cxx_status_t encode(const LogString& in,
			LogString::const_iterator& iter,
			ByteBuffer& out)
		{
			while (iter != in.end() && out.remaining() >= 8)
			{
				unsigned int sv = Transcoder::decode(in, iter);

				if (sv == 0xFFFF)
				{
					return APR_BADARG;
				}

				Transcoder::encodeUTF8(sv, out);
			}

			return APR_SUCCESS;
		}

	private:
		UTF8CharsetEncoder(const UTF8CharsetEncoder&);
		UTF8CharsetEncoder& operator=(const UTF8CharsetEncoder&);
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2419,9360,UTF16BECharsetEncoder,4,LOG4CXX_NS.helpers.UTF16BECharsetEncoder,,main\cpp\charsetencoder.cpp,"class UTF16BECharsetEncoder : public CharsetEncoder
{
	public:
		UTF16BECharsetEncoder()
		{
		}

		virtual log4cxx_status_t encode(const LogString& in,
			LogString::const_iterator& iter,
			ByteBuffer& out)
		{
			while (iter != in.end() && out.remaining() >= 4)
			{
				unsigned int sv = Transcoder::decode(in, iter);

				if (sv == 0xFFFF)
				{
					return APR_BADARG;
				}

				Transcoder::encodeUTF16BE(sv, out);
			}

			return APR_SUCCESS;
		}

	private:
		UTF16BECharsetEncoder(const UTF16BECharsetEncoder&);
		UTF16BECharsetEncoder& operator=(const UTF16BECharsetEncoder&);
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2420,9421,UTF16LECharsetEncoder,4,LOG4CXX_NS.helpers.UTF16LECharsetEncoder,,main\cpp\charsetencoder.cpp,"class UTF16LECharsetEncoder : public CharsetEncoder
{
	public:
		UTF16LECharsetEncoder()
		{
		}


		virtual log4cxx_status_t encode(const LogString& in,
			LogString::const_iterator& iter,
			ByteBuffer& out)
		{
			while (iter != in.end() && out.remaining() >= 4)
			{
				unsigned int sv = Transcoder::decode(in, iter);

				if (sv == 0xFFFF)
				{
					return APR_BADARG;
				}

				Transcoder::encodeUTF16LE(sv, out);
			}

			return APR_SUCCESS;
		}
	private:
		UTF16LECharsetEncoder(const UTF16LECharsetEncoder&);
		UTF16LECharsetEncoder& operator=(const UTF16LECharsetEncoder&);
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2421,9482,LocaleCharsetEncoder,4,LOG4CXX_NS.helpers.LocaleCharsetEncoder,,main\cpp\charsetencoder.cpp,"class LocaleCharsetEncoder : public CharsetEncoder
{
	public:
		LocaleCharsetEncoder() : state()
		{
		}
		log4cxx_status_t encode
			( const LogString&           in
			, LogString::const_iterator& iter
			, ByteBuffer&                out
			) override
		{
			log4cxx_status_t result = APR_SUCCESS;
#if !LOG4CXX_CHARSET_EBCDIC
			char* current = out.current();
			size_t remain = out.remaining();
			if (std::mbsinit(&this->state)) // ByteBuffer not partially encoded?
			{
				// Copy single byte characters
				for (;
					iter != in.end() && ((unsigned int) *iter) < 0x80 && 0 < remain;
					iter++, remain--, current++)
				{
					*current = *iter;
				}
			}
#endif
			// Encode characters that may require multiple bytes
			while (iter != in.end() && MB_CUR_MAX <= remain)
			{
				auto ch = Transcoder::decode(in, iter);
				auto n = std::wcrtomb(current, ch, &this->state);
				if (static_cast<std::size_t>(-1) == n) // not a valid wide character?
				{
					result = APR_BADARG;
					brea...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2422,10950,ColorPatternConverterPrivate,4,ColorPatternConverterPrivate,,main\cpp\colorstartpatternconverter.cpp,"struct ColorStartPatternConverter::ColorPatternConverterPrivate : public PatternConverterPrivate
{
	ColorPatternConverterPrivate( const LogString& name, const LogString& style ) :
		PatternConverterPrivate( name, style ){}

	LogString m_fatalColor;
	LogString m_errorColor;
	LogString m_warnColor;
	LogString m_infoColor;
	LogString m_debugColor;
	LogString m_traceColor;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2423,11477,ConsoleAppenderPriv,4,ConsoleAppenderPriv,,main\cpp\consoleappender.cpp,"struct ConsoleAppender::ConsoleAppenderPriv : public WriterAppender::WriterAppenderPriv
{
	ConsoleAppenderPriv(LogString target) :
		WriterAppenderPriv(),
		target(target) {}

	LogString target;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2424,11767,CyclicBufferPriv,4,CyclicBufferPriv,,main\cpp\cyclicbuffer.cpp,"struct CyclicBuffer::CyclicBufferPriv
{
	CyclicBufferPriv(int maxSize1) :
		ea(maxSize1), first(0), last(0), numElems(0), maxSize(maxSize1) {}

	LOG4CXX_NS::spi::LoggingEventList ea;
	int first;
	int last;
	int numElems;
	int maxSize;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2425,12119,DatagramPacketPriv,4,DatagramPacketPriv,,main\cpp\datagrampacket.cpp,"struct DatagramPacket::DatagramPacketPriv
{
	DatagramPacketPriv(void* buf1, int length1)
		: buf(buf1), offset(0), length(length1), address(), port(0)
	{
	}

	DatagramPacketPriv(void* buf1, int length1, InetAddressPtr address1,
		int port1)
		: buf(buf1), offset(0), length(length1), address(address1), port(port1)
	{
	}

	DatagramPacketPriv(void* buf1, int offset1, int length1)
		: buf(buf1), offset(offset1), length(length1), address(), port(0)
	{
	}

	DatagramPacketPriv(void* buf1, int offset1, int length1,
		InetAddressPtr address1, int port1)
		: buf(buf1), offset(offset1), length(length1), address(address1), port(port1)
	{
	}

	/** the data for this packet. */
	void* buf;

	/** The offset of the data for this packet. */
	int offset;

	/** The length of the data for this packet. */
	int length;

	/** The IP address for this packet. */
	InetAddressPtr address;

	/** The UDP port number of the remote host. */
	int port;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2426,12629,DatePatternConverterPrivate,4,DatePatternConverterPrivate,,main\cpp\datepatternconverter.cpp,"struct DatePatternConverter::DatePatternConverterPrivate : public PatternConverterPrivate
{
	DatePatternConverterPrivate( const LogString& name, const LogString& style, DateFormatPtr _df ):
		PatternConverterPrivate(name, style),
		df(_df) {}
	/**
	 * Date format.
	 */
	LOG4CXX_NS::helpers::DateFormatPtr df;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2427,13013,DBAppenderPriv,4,DBAppenderPriv,,main\cpp\dbappender.cpp,"struct DBAppender::DBAppenderPriv : public AppenderSkeleton::AppenderSkeletonPrivate
{
    DBAppenderPriv() :
        AppenderSkeletonPrivate()
	{
		static bool initialized = false;
		if (!initialized)
		{
			initialized = true;
			apr_status_t stat = apr_dbd_init(m_pool.getAPRPool());
			assert(stat == APR_SUCCESS);
		}
	}

    apr_dbd_driver_t* m_driver = nullptr;
    apr_dbd_t* m_databaseHandle = nullptr;
    apr_dbd_prepared_t* preparedStmt = nullptr;
    std::vector<LogString> mappedName;
    std::string driverName;
    std::string driverParams;
    std::string databaseName;
    std::string sqlStatement;
    Pool m_pool;
    std::vector<pattern::LoggingEventPatternConverterPtr> converters;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2428,14576,ResultType,4,ResultType,,main\cpp\defaultconfigurator.cpp,"using ResultType = std::tuple<LOG4CXX_NS::spi::ConfigurationStatus, LogString>;",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2429,14697,DefaultRepositorySelectorPrivate,4,DefaultRepositorySelectorPrivate,,main\cpp\defaultrepositoryselector.cpp,"struct DefaultRepositorySelector::DefaultRepositorySelectorPrivate
{
	LoggerRepositoryPtr repository;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2430,14790,DOMConfiguratorPrivate,4,DOMConfiguratorPrivate,,main\cpp\domconfigurator.cpp,"struct DOMConfigurator::DOMConfiguratorPrivate
{
	helpers::Properties props;
	spi::LoggerRepositoryPtr repository;
	spi::LoggerFactoryPtr loggerFactory;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2431,14796,XMLWatchdog,4,LOG4CXX_NS.xml.XMLWatchdog,,main\cpp\domconfigurator.cpp,"class XMLWatchdog  : public FileWatchdog
{
	public:
		XMLWatchdog(const File& filename) : FileWatchdog(filename)
		{
		}

		/**
		Call DOMConfigurator#doConfigure with the
		<code>filename</code> to reconfigure log4cxx.
		*/
		void doOnChange()
		{
			DOMConfigurator().doConfigure(file(),
				LogManager::getLoggerRepository());
		}
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2432,18212,FallbackErrorHandlerPrivate,4,FallbackErrorHandlerPrivate,,main\cpp\fallbackerrorhandler.cpp,"struct FallbackErrorHandler::FallbackErrorHandlerPrivate
{
	AppenderWeakPtr backup;
	AppenderWeakPtr primary;
	std::vector<LoggerPtr> loggers;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2433,18516,FilePrivate,4,FilePrivate,,main\cpp\file.cpp,"struct File::FilePrivate{
	FilePrivate() :
		autoDelete(false)
	{}

	FilePrivate(LogString path) :
		path(path),
		autoDelete(false)
	{}

	FilePrivate(LogString path, bool autoDelete) :
		path(path),
		autoDelete(autoDelete)
	{}

	LogString path;
	bool autoDelete;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2434,20253,FileInputStreamPrivate,4,FileInputStreamPrivate,,main\cpp\fileinputstream.cpp,"struct FileInputStream::FileInputStreamPrivate
{
	FileInputStreamPrivate() : fileptr(nullptr) {}

	Pool pool;
	apr_file_t* fileptr;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2435,20531,FileOutputStreamPrivate,4,FileOutputStreamPrivate,,main\cpp\fileoutputstream.cpp,"struct FileOutputStream::FileOutputStreamPrivate
{
	FileOutputStreamPrivate() : fileptr(nullptr) {}

	Pool pool;
	apr_file_t* fileptr;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2436,20785,FileRenameActionPrivate,4,FileRenameActionPrivate,,main\cpp\filerenameaction.cpp,"struct FileRenameAction::FileRenameActionPrivate : public ActionPrivate
{
	FileRenameActionPrivate( const File& toRename,
		const File& renameTo,
		bool renameEmptyFile1):
		source(toRename), destination(renameTo), renameEmptyFile(renameEmptyFile1) {}

	const File source;
	const File destination;
	bool renameEmptyFile;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2437,20860,FileWatchdogPrivate,4,FileWatchdogPrivate,,main\cpp\filewatchdog.cpp,"struct FileWatchdog::FileWatchdogPrivate{
	FileWatchdogPrivate(const File& file1) :
		file(file1), delay(DEFAULT_DELAY), lastModif(0),
		warnedAlready(false), interrupted(0), thread(){}

	/**
	The name of the file to observe  for changes.
	*/
	File file;

	/**
	The delay to observe between every check.
	By default set DEFAULT_DELAY.*/
	long delay;
	log4cxx_time_t lastModif;
	bool warnedAlready;
	volatile int interrupted;
	Pool pool;
	std::thread thread;
	std::condition_variable interrupt;
	std::mutex interrupt_mutex;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2438,21278,FilterBasedTriggeringPolicyPrivate,4,FilterBasedTriggeringPolicyPrivate,,main\cpp\filterbasedtriggeringpolicy.cpp,"struct FilterBasedTriggeringPolicy::FilterBasedTriggeringPolicyPrivate{

	/**
	 * The first filter in the filter chain. Set to <code>null</code> initially.
	 */
	LOG4CXX_NS::spi::FilterPtr headFilter;

	/**
	 * The last filter in the filter chain.
	 */
	LOG4CXX_NS::spi::FilterPtr tailFilter;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2439,21476,FixedWindowRollingPolicyPrivate,4,FixedWindowRollingPolicyPrivate,,main\cpp\fixedwindowrollingpolicy.cpp,"struct FixedWindowRollingPolicy::FixedWindowRollingPolicyPrivate : public RollingPolicyBasePrivate {
	FixedWindowRollingPolicyPrivate() :
		RollingPolicyBasePrivate(),
		minIndex(1),
		maxIndex(7),
		explicitActiveFile(false)
	{}

	int minIndex;
	int maxIndex;
	bool explicitActiveFile;
	bool throwIOExceptionOnForkFailure = true;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2440,22531,FMTLayoutPrivate,4,FMTLayoutPrivate,,main\cpp\fmtlayout.cpp,"struct FMTLayout::FMTLayoutPrivate{
	FMTLayoutPrivate()
		: expectedPatternLength(100)
		{}

	FMTLayoutPrivate(const LogString& pattern)
		: conversionPattern(pattern)
		, expectedPatternLength(100)
	{}

	LogString conversionPattern;

	// Expected length of a formatted event excluding the message text
	size_t expectedPatternLength;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2441,22951,FormattingInfoPrivate,4,FormattingInfoPrivate,,main\cpp\formattinginfo.cpp,"struct FormattingInfo::FormattingInfoPrivate
{
	FormattingInfoPrivate(const bool leftAlign1, const int minLength1, const int maxLength1):
		minLength(minLength1),
		maxLength(maxLength1),
		leftAlign(leftAlign1) {}

	/**
	 * Minimum length.
	 */
	const int minLength;

	/**
	 * Maximum length.
	 */
	const int maxLength;

	/**
	 * Alignment.
	 */
	const bool leftAlign;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2442,23203,GZCompressActionPrivate,4,GZCompressActionPrivate,,main\cpp\gzcompressaction.cpp,"struct GZCompressAction::GZCompressActionPrivate : public ActionPrivate
{
	GZCompressActionPrivate( const File& toRename,
		const File& renameTo,
		bool deleteSource):
		source(toRename), destination(renameTo), deleteSource(deleteSource) {}

	const File source;
	File destination;
	bool deleteSource;
	bool throwIOExceptionOnForkFailure = true;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2443,23627,LogStream,4,LogStream,,main\cpp\hexdump.cpp,typedef std::basic_stringstream<logchar> LogStream;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2444,24044,LoggerMap,4,LoggerMap,,main\cpp\hierarchy.cpp,"typedef std::map<LogString, LoggerPtr> LoggerMap;",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2445,24045,ProvisionNodeMap,4,ProvisionNodeMap,,main\cpp\hierarchy.cpp,"typedef std::map<LogString, ProvisionNode> ProvisionNodeMap;",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2446,24046,HierarchyPrivate,4,HierarchyPrivate,,main\cpp\hierarchy.cpp,"struct Hierarchy::HierarchyPrivate
{
	HierarchyPrivate()
		: configured(false)
		, emittedNoAppenderWarning(false)
		, emittedNoResourceBundleWarning(false)
		, thresholdInt(Level::ALL_INT)
	{
	}

	helpers::Pool pool;
	mutable std::recursive_mutex mutex;
	mutable std::mutex configuredMutex;
	bool configured;
	bool emittedNoAppenderWarning;
	bool emittedNoResourceBundleWarning;
	int thresholdInt;

	spi::HierarchyEventListenerList listeners;
	LoggerPtr root;
	LevelPtr threshold;
	LoggerMap loggers;
	ProvisionNodeMap provisionNodes;

	std::vector<AppenderPtr> allAppenders;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2447,25563,HTMLLayoutPrivate,4,HTMLLayoutPrivate,,main\cpp\htmllayout.cpp,"struct HTMLLayout::HTMLLayoutPrivate
{
	HTMLLayoutPrivate()
		: locationInfo(false)
		, title(LOG4CXX_STR(""Log4cxx Log Messages""))
		, dateFormat()
		, expectedPatternLength(100)
		{}

	// Print no location info by default
	bool locationInfo; //= false

	LogString title;

	helpers::ISO8601DateFormat dateFormat;

	// Expected length of a formatted event excluding the message text
	size_t expectedPatternLength;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2448,26474,InetAddressPrivate,4,InetAddressPrivate,,main\cpp\inetaddress.cpp,"struct InetAddress::InetAddressPrivate{

	LogString ipAddrString;
	LogString hostNameString;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2449,26779,InputStreamReaderPrivate,4,InputStreamReaderPrivate,,main\cpp\inputstreamreader.cpp,"struct InputStreamReader::InputStreamReaderPrivate{
	InputStreamReaderPrivate(const InputStreamPtr& in1) :
		in(in1), dec(CharsetDecoder::getDefaultDecoder()){}

	InputStreamReaderPrivate(const InputStreamPtr& in1, const CharsetDecoderPtr& dec1) :
		in(in1), dec(dec1) {}

	InputStreamPtr in;
	CharsetDecoderPtr dec;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2450,27049,JSONLayoutPrivate,4,JSONLayoutPrivate,,main\cpp\jsonlayout.cpp,"struct JSONLayout::JSONLayoutPrivate
{
	JSONLayoutPrivate() :
		locationInfo(false),
		prettyPrint(false),
		dateFormat(),
		ppIndentL1(LOG4CXX_STR(""  "")),
		ppIndentL2(LOG4CXX_STR(""    "")),
		expectedPatternLength(100),
		threadInfo(false) {}

	// Print no location info by default
	bool locationInfo; //= false
	bool prettyPrint; //= false

	helpers::ISO8601DateFormat dateFormat;

	LogString ppIndentL1;
	LogString ppIndentL2;

	// Expected length of a formatted event excluding the message text
	size_t expectedPatternLength;

	// Thread info is not included by default
	bool threadInfo; //= false
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2451,28861,LevelMatchFilterPrivate,4,LevelMatchFilterPrivate,,main\cpp\levelmatchfilter.cpp,"struct LevelMatchFilter::LevelMatchFilterPrivate : public FilterPrivate
{
	bool acceptOnMatch;
	LevelPtr levelToMatch;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2452,29253,LevelRangeFilterPrivate,4,LevelRangeFilterPrivate,,main\cpp\levelrangefilter.cpp,"struct LevelRangeFilter::LevelRangeFilterPrivate : public FilterPrivate
{
	LevelRangeFilterPrivate() : acceptOnMatch(false), levelMin(Level::getAll()), levelMax(Level::getOff()) {}

	/**
	Do we return ACCEPT when a match occurs. Default is
	<code>false</code>, so that later filters get run by default
	*/
	bool acceptOnMatch;
	LevelPtr levelMin;
	LevelPtr levelMax;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2453,29719,LiteralPatternConverterPrivate,4,LiteralPatternConverterPrivate,,main\cpp\literalpatternconverter.cpp,"struct LiteralPatternConverter::LiteralPatternConverterPrivate : public PatternConverterPrivate
{
	LiteralPatternConverterPrivate( const LogString& name, const LogString& style, const LogString& literal1 ) :
		PatternConverterPrivate( name, style ),
		literal(literal1) {}

	/**
	 * String literal.
	 */
	const LogString literal;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2454,29921,LocalePrivate,4,LocalePrivate,,main\cpp\locale.cpp,"struct Locale::LocalePrivate
{
	LocalePrivate(const LogString& language1)
		: language(language1)
	{
	}

	LocalePrivate(const LogString& language1, const LogString& country1)
		: language(language1), country(country1)
	{
	}

	LocalePrivate(const LogString& language1, const LogString& country1,
		const LogString& variant1)
		: language(language1), country(country1), variant(variant1)
	{
	}

	const LogString language;
	const LogString country;
	const LogString variant;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2455,30280,LocationInfoFilterPrivate,4,LocationInfoFilterPrivate,,main\cpp\locationinfofilter.cpp,"struct LocationInfoFilter::LocationInfoFilterPrivate : public FilterPrivate
{
	LocationInfoFilterPrivate() : FilterPrivate(),
		acceptOnMatch(true),
		mustMatchAll(false),
		lineNumber(-1)
	{}

	bool    acceptOnMatch;
	bool    mustMatchAll; // true = AND; false = OR
	int     lineNumber;
	std::string methodName;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2456,30759,LoggerPrivate,4,LoggerPrivate,,main\cpp\logger.cpp,"struct Logger::LoggerPrivate
{
	LoggerPrivate(Pool& p, const LogString& name1):
		name(name1),
		repositoryRaw(0),
		aai(p),
		additive(true) {}

	/**
	The name of this logger.
	*/
	LogString name;

	/**
	The assigned level of this logger.  The
	<code>level</code> variable need not be assigned a value in
	which case it is inherited form the hierarchy.  */
	LevelPtr level;

	/**
	The parent of this logger. All loggers have at least one
	ancestor which is the root logger. */
	LoggerPtr parent;

	/** The resourceBundle for localized messages.

	@see setResourceBundle, getResourceBundle
	*/
	helpers::ResourceBundlePtr resourceBundle;


	// Loggers need to know what Hierarchy they are in
	LOG4CXX_NS::spi::LoggerRepository* repositoryRaw;

	helpers::AppenderAttachableImpl aai;

	/** Additivity is set to true by default, that is children inherit
	        the appenders of their ancestors by default. If this variable is
	        set to <code>false</code> then the appenders found in the
	    ...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2457,32288,LoggerMatchFilterPrivate,4,LoggerMatchFilterPrivate,,main\cpp\loggermatchfilter.cpp,"struct LoggerMatchFilter::LoggerMatchFilterPrivate : public FilterPrivate
{
	LoggerMatchFilterPrivate() : FilterPrivate(),
		acceptOnMatch(true),
		loggerToMatch(LOG4CXX_STR(""root"")) {}

	bool acceptOnMatch;
	LogString loggerToMatch;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2458,32613,LoggingEventPrivate,4,LoggingEventPrivate,,main\cpp\loggingevent.cpp,"struct LoggingEvent::LoggingEventPrivate
{
	LoggingEventPrivate() :
		ndc(0),
		mdcCopy(0),
		properties(0),
		ndcLookupRequired(true),
		mdcCopyLookupRequired(true),
		timeStamp(0),
		locationInfo(),
		threadName(getCurrentThreadName()),
		threadUserName(getCurrentThreadUserName())
	{
	}

	LoggingEventPrivate
		( const LogString& logger1
		, const LevelPtr& level1
		, const LocationInfo& locationInfo1
		, LogString&& message1
		) :
		logger(logger1),
		level(level1),
		ndc(0),
		mdcCopy(0),
		properties(0),
		ndcLookupRequired(true),
		mdcCopyLookupRequired(true),
		message(std::move(message1)),
		timeStamp(Date::currentTime()),
		locationInfo(locationInfo1),
		threadName(getCurrentThreadName()),
		threadUserName(getCurrentThreadUserName()),
		chronoTimeStamp(std::chrono::microseconds(timeStamp))
	{
	}

	LoggingEventPrivate(
		const LogString& logger1, const LevelPtr& level1,
		const LogString& message1, const LocationInfo& locationInfo1) :
		logger(logger1),
		level(level1),
		ndc...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2459,33049,ThreadIdType,4,ThreadIdType,,main\cpp\loggingevent.cpp,using ThreadIdType = int;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2460,33053,ListItem,4,ListItem,,main\cpp\loggingevent.cpp,"using ListItem = std::pair<ThreadIdType, LogString>;",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2461,33321,LogLogPrivate,4,LogLogPrivate,,main\cpp\loglog.cpp,"struct LogLog::LogLogPrivate {
	LogLogPrivate() :
		debugEnabled(false),
		quietMode(false){}

	~LogLogPrivate()
	{
		quietMode = true; // Prevent output after deletion by onexit processing chain.
	}

	bool debugEnabled;

	/**
		   In quietMode not even errors generate any output.
	 */
	bool quietMode;
	std::mutex mutex;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2462,34804,MapFilterPrivate,4,MapFilterPrivate,,main\cpp\mapfilter.cpp,"struct MapFilter::MapFilterPrivate : public FilterPrivate
{
	MapFilterPrivate() : FilterPrivate(),
		acceptOnMatch(true), mustMatchAll(false) {}

	bool    acceptOnMatch;
	bool    mustMatchAll; // true = AND; false = OR
	KeyVals keyVals;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2463,35683,StringOrStream,4,anonymous_namespace_1.StringOrStream,,main\cpp\messagebuffer.cpp,"struct StringOrStream
{
	std::basic_string<T> buf;
	std::basic_ostringstream<T>* stream;

	StringOrStream()
		: stream(nullptr)
		{}
	~StringOrStream()
	{
#if !LOG4CXX_HAS_THREAD_LOCAL
		delete stream;
#endif
	}
	/**
	 * Move the character buffer from \c buf to \c stream
	 */
	std::basic_ostringstream<T>& StreamFromBuf()
	{
		if (!this->stream)
		{
#if LOG4CXX_HAS_THREAD_LOCAL
			const static std::basic_ostringstream<T> initialState;
			thread_local static std::basic_ostringstream<T> sStream;
			this->stream = &sStream;
			this->stream->clear();
			this->stream->precision(initialState.precision());
			this->stream->width(initialState.width());
			this->stream->setf(initialState.flags(), ~initialState.flags());
			this->stream->fill(initialState.fill());
#else
			this->stream = new std::basic_ostringstream<T>();
#endif
			auto index = this->buf.size();
			this->stream->str(std::move(this->buf));
			this->stream->seekp(index);
		}
		return *this->stream;
	}
	/**
	 * Move the character...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2464,35797,CharMessageBufferPrivate,4,CharMessageBufferPrivate,,main\cpp\messagebuffer.cpp,struct CharMessageBuffer::CharMessageBufferPrivate : public StringOrStream<char> {},-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2465,36166,QuotedMessagePatternConverter,4,anonymous_namespace_1.QuotedMessagePatternConverter,,main\cpp\messagepatternconverter.cpp,"class QuotedMessagePatternConverter : public LoggingEventPatternConverter
{
	logchar m_quote;
	public:
		QuotedMessagePatternConverter(logchar quote)
			: LoggingEventPatternConverter(LOG4CXX_STR(""Message""), LOG4CXX_STR(""quoted""))
			, m_quote(quote)
			{}

		using LoggingEventPatternConverter::format;

		// Duplicate any quote character in the event message
		void format
			( const spi::LoggingEventPtr& event
			, LogString&                  toAppendTo
			, helpers::Pool&              p
			) const override
		{
			auto& input = event->getRenderedMessage();
			size_t endIndex, startIndex = 0;
			while ((endIndex = input.find(m_quote, startIndex)) != input.npos)
			{
				toAppendTo.append(input.substr(startIndex, endIndex - startIndex + 1));
				toAppendTo += m_quote;
				startIndex = endIndex + 1;
			}
			toAppendTo.append(input.substr(startIndex));
		}
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2466,36386,MultiprocessRollingFileAppenderPriv,4,MultiprocessRollingFileAppenderPriv,,main\cpp\multiprocessrollingfileappender.cpp,"struct MultiprocessRollingFileAppender::MultiprocessRollingFileAppenderPriv : public FileAppenderPriv
{
	MultiprocessRollingFileAppenderPriv() :
		FileAppenderPriv(),
		fileLength(0) {}

	/**
	 * Triggering policy.
	 */
	TriggeringPolicyPtr triggeringPolicy;

	/**
	 * Rolling policy.
	 */
	RollingPolicyPtr rollingPolicy;

	/**
	 * Length of current active log file.
	 */
	size_t fileLength;

	/**
	 *  save the loggingevent
	 */
	spi::LoggingEventPtr _event;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2467,37983,CountingOutputStream,4,LOG4CXX_NS.rolling.CountingOutputStream,,main\cpp\multiprocessrollingfileappender.cpp,"class CountingOutputStream : public OutputStream
{
		/**
		 * Wrapped output stream.
		 */
	private:
		OutputStreamPtr os;

		/**
		 * Rolling file appender to inform of stream writes.
		 */
		MultiprocessRollingFileAppender* rfa;

	public:
		/**
		 * Constructor.
		 * @param os output stream to wrap.
		 * @param rfa rolling file appender to inform.
		 */
		CountingOutputStream(
			OutputStreamPtr& os1, MultiprocessRollingFileAppender* rfa1) :
			os(os1), rfa(rfa1)
		{
		}

		/**
		 * {@inheritDoc}
		 */
		void close(Pool& p)
		{
			os->close(p);
			rfa = 0;
		}

		/**
		 * {@inheritDoc}
		 */
		void flush(Pool& p)
		{
			os->flush(p);
		}

		/**
		 * {@inheritDoc}
		 */
		void write(ByteBuffer& buf, Pool& p)
		{
			os->write(buf, p);

			if (rfa != 0)
			{
				rfa->setFileLength(File().setPath(rfa->getFile()).length(p));
			}
		}

		OutputStream& getFileOutPutStreamPtr()
		{
			return *os;
		}
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2468,38155,NOPAbbreviator,4,LOG4CXX_NS.pattern.NOPAbbreviator,,main\cpp\nameabbreviator.cpp,"class NOPAbbreviator : public NameAbbreviator
{
	public:
		DECLARE_ABSTRACT_LOG4CXX_OBJECT(NOPAbbreviator)
		BEGIN_LOG4CXX_CAST_MAP()
		LOG4CXX_CAST_ENTRY(NOPAbbreviator)
		LOG4CXX_CAST_ENTRY_CHAIN(NameAbbreviator)
		END_LOG4CXX_CAST_MAP()

		/**
		 * Constructor.
		 */
		NOPAbbreviator()
		{
		}

		/**
		 * {@inheritDoc}
		 */
		void abbreviate(LogString::size_type /* nameStart */, LogString& /* buf */) const override
		{
		}
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2469,38165,MaxElementAbbreviator,4,LOG4CXX_NS.pattern.MaxElementAbbreviator,,main\cpp\nameabbreviator.cpp,"class MaxElementAbbreviator : public NameAbbreviator
{
		/**
		 * Maximum number of path elements to output.
		 */
		const int count;

	public:
		DECLARE_ABSTRACT_LOG4CXX_OBJECT(MaxElementAbbreviator)
		BEGIN_LOG4CXX_CAST_MAP()
		LOG4CXX_CAST_ENTRY(MaxElementAbbreviator)
		LOG4CXX_CAST_ENTRY_CHAIN(NameAbbreviator)
		END_LOG4CXX_CAST_MAP()
		/**
		 * Create new instance.
		 * @param count maximum number of path elements to output.
		 */
		MaxElementAbbreviator(const int count1) : count(count1)
		{
		}

		/**
		 * Abbreviate name.
		 * @param buf buffer to append abbreviation.
		 * @param nameStart start of name to abbreviate.
		 */
		void abbreviate(LogString::size_type nameStart, LogString& buf) const override
		{
			// We substract 1 from 'len' when assigning to 'end' to avoid out of
			// bounds exception in return r.substring(end+1, len). This can happen if
			// precision is 1 and the logger name ends with a dot.
			LogString::size_type end = buf.length() - 1;

			for (LogString...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2470,38237,PatternAbbreviatorFragment,4,LOG4CXX_NS.pattern.PatternAbbreviatorFragment,,main\cpp\nameabbreviator.cpp,"class PatternAbbreviatorFragment
{
		/**
		 * Count of initial characters of element to output.
		 */
		LogString::size_type charCount;

		/**
		 *  Character used to represent dropped characters.
		 * '\0' indicates no representation of dropped characters.
		 */
		logchar ellipsis;

	public:
		/**
		 * Creates a PatternAbbreviatorFragment.
		 * @param charCount number of initial characters to preserve.
		 * @param ellipsis character to represent elimination of characters,
		 *    '\0' if no ellipsis is desired.
		 */
		PatternAbbreviatorFragment(
			const int charCount1, const logchar ellipsis1)
			: charCount(charCount1), ellipsis(ellipsis1)
		{
		}
		PatternAbbreviatorFragment() : charCount(0), ellipsis(0)
		{
		}

		PatternAbbreviatorFragment(const PatternAbbreviatorFragment& src)
			: charCount(src.charCount), ellipsis(src.ellipsis)
		{
		}

		PatternAbbreviatorFragment& operator=(const PatternAbbreviatorFragment& src)
		{
			charCount = src.charCount;
			ellipsis = src.ellipsi...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2471,38343,PatternAbbreviator,4,LOG4CXX_NS.pattern.PatternAbbreviator,,main\cpp\nameabbreviator.cpp,"class PatternAbbreviator : public NameAbbreviator
{
		/**
		 * Element abbreviation patterns.
		 */
		std::vector<PatternAbbreviatorFragment> fragments;

	public:
		DECLARE_ABSTRACT_LOG4CXX_OBJECT(PatternAbbreviator)
		BEGIN_LOG4CXX_CAST_MAP()
		LOG4CXX_CAST_ENTRY(PatternAbbreviator)
		LOG4CXX_CAST_ENTRY_CHAIN(NameAbbreviator)
		END_LOG4CXX_CAST_MAP()
		/**
		 * Create PatternAbbreviator.
		 *
		 * @param fragments element abbreviation patterns.
		 */
		PatternAbbreviator(const std::vector<PatternAbbreviatorFragment>& fragments1) :
			fragments(fragments1)
		{
			if (fragments1.size() == 0)
			{
				throw IllegalArgumentException(LOG4CXX_STR(""fragments parameter must contain at least one element""));
			}
		}

		/**
		 * Abbreviate name.
		 * @param buf buffer that abbreviated name is appended.
		 * @param nameStart start of name.
		 */
		void abbreviate(LogString::size_type nameStart, LogString& buf) const override
		{
			//
			//  all non-terminal patterns are executed once
			//
	...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2472,38654,NamePatternConverterPrivate,4,NamePatternConverterPrivate,,main\cpp\namepatternconverter.cpp,"struct NamePatternConverter::NamePatternConverterPrivate : public PatternConverterPrivate
{
	NamePatternConverterPrivate( const LogString& name, const LogString& style, const NameAbbreviatorPtr abbrev ) :
		PatternConverterPrivate( name, style ),
		abbreviator(abbrev) {}

	/**
	 * Abbreviator.
	 */
	const NameAbbreviatorPtr abbreviator;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2473,39353,SQLHSTMT,4,SQLHSTMT,,main\cpp\odbcappender.cpp,typedef void* SQLHSTMT;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2474,40276,OnlyOnceErrorHandlerPrivate,4,OnlyOnceErrorHandlerPrivate,,main\cpp\onlyonceerrorhandler.cpp,"struct OnlyOnceErrorHandler::OnlyOnceErrorHandlerPrivate{
	OnlyOnceErrorHandlerPrivate() :
		WARN_PREFIX(LOG4CXX_STR(""log4cxx warning: "")),
		ERROR_PREFIX(LOG4CXX_STR(""log4cxx error: "")),
		firstTime(true){}

	LogString WARN_PREFIX;
	LogString ERROR_PREFIX;
	mutable bool firstTime;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2475,40427,ConfiguratorWatchdog,4,LOG4CXX_NS.ConfiguratorWatchdog,,main\cpp\optionconverter.cpp,"class ConfiguratorWatchdog  : public helpers::FileWatchdog
{
	spi::ConfiguratorPtr m_config;
	public:
    ConfiguratorWatchdog(const spi::ConfiguratorPtr& config, const File& filename)
        : helpers::FileWatchdog(filename)
        , m_config(config)
    {
    }

    /**
    Call PropertyConfigurator#doConfigure(const String& configFileName,
    const spi::LoggerRepositoryPtr& hierarchy) with the
    <code>filename</code> to reconfigure log4cxx.
    */
    void doOnChange() override
    {
        m_config->doConfigure(file(), LogManager::getLoggerRepository());
    }
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2476,41449,OutputStreamWriterPrivate,4,OutputStreamWriterPrivate,,main\cpp\outputstreamwriter.cpp,"struct OutputStreamWriter::OutputStreamWriterPrivate{
	OutputStreamWriterPrivate(OutputStreamPtr& out1) : out(out1), enc(CharsetEncoder::getDefaultEncoder()){}

	OutputStreamWriterPrivate(OutputStreamPtr& out1,
							  CharsetEncoderPtr& enc1)
		: out(out1), enc(enc1){}

	OutputStreamPtr out;
	CharsetEncoderPtr enc;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2477,41804,PatternLayoutPrivate,4,PatternLayoutPrivate,,main\cpp\patternlayout.cpp,"struct PatternLayout::PatternLayoutPrivate
{
	PatternLayoutPrivate()
		: expectedPatternLength(100)
		{}
	PatternLayoutPrivate(const LogString& pattern)
		: conversionPattern(pattern)
		, expectedPatternLength(100)
		{}

	/**
	 * Conversion pattern.
	 */
	LogString conversionPattern;

	/**
	 * Pattern converters.
	 */
	LoggingEventPatternConverterList patternConverters;

	/**
	 * Field widths and alignment corresponding to pattern converters.
	 */
	FormattingInfoList patternFields;

	LogString m_fatalColor = LOG4CXX_STR(""\\x1B[35m""); //magenta
	LogString m_errorColor = LOG4CXX_STR(""\\x1B[31m""); //red
	LogString m_warnColor = LOG4CXX_STR(""\\x1B[33m""); //yellow
	LogString m_infoColor = LOG4CXX_STR(""\\x1B[32m""); //green
	LogString m_debugColor = LOG4CXX_STR(""\\x1B[36m""); //cyan;
	LogString m_traceColor = LOG4CXX_STR(""\\x1B[34m""); //blue;

	// Expected length of a formatted event excluding the message text
	size_t expectedPatternLength;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2478,44019,PropertyParser,4,PropertyParser,,main\cpp\properties.cpp,"class PropertyParser
{
	public:
		void parse(LogString& in, Properties& properties)
		{
			LogString key, element;
			LexemType lexemType = BEGIN;
			logchar c;
			bool finished = false;

			if (!get(in, c))
			{
				return;
			}

			while (!finished)
			{
				switch (lexemType)
				{
					case BEGIN:
						switch (c)
						{
							case 0x20: // ' '
							case 0x09: // '\t'
							case 0x0A: // '\n'
							case 0x0D: // '\r'
								if (!get(in, c))
								{
									finished = true;
								}

								break;

							case 0x23: // '#'
							case 0x21: // '!'
								lexemType = COMMENT;

								if (!get(in, c))
								{
									finished = true;
								}

								break;

							default:
								lexemType = KEY;
								break;
						}

						break;

					case KEY:
						switch (c)
						{
							case 0x5C: // '\\'
								lexemType = KEY_ESCAPE;

								if (!get(in, c))
								{
									finished = true;
								}

								break;

							case 0x09: // '\t'
							case 0x20: ...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2479,44623,LexemType,4,PropertyParser.LexemType,,main\cpp\properties.cpp,"typedef enum
		{
			BEGIN,
			KEY,
			KEY_ESCAPE,
			KEY_CONTINUE,
			KEY_CONTINUE2,
			DELIMITER,
			ELEMENT,
			ELEMENT_ESCAPE,
			ELEMENT_CONTINUE,
			ELEMENT_CONTINUE2,
			COMMENT
		}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2480,44818,PropertiesPatternConverterPrivate,4,PropertiesPatternConverterPrivate,,main\cpp\propertiespatternconverter.cpp,"struct PropertiesPatternConverter::PropertiesPatternConverterPrivate : public PatternConverterPrivate
{
	PropertiesPatternConverterPrivate( const LogString& name, const LogString& style, const LogString& propertyName ) :
		PatternConverterPrivate( name, style ),
		option(propertyName) {}

	/**
	 * Name of property to output.
	 */
	const LogString option;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2481,45067,PropertyWatchdog,4,LOG4CXX_NS.PropertyWatchdog,,main\cpp\propertyconfigurator.cpp,"class PropertyWatchdog  : public FileWatchdog
{
	public:
		PropertyWatchdog(const File& filename) : FileWatchdog(filename)
		{
		}

		/**
		Call PropertyConfigurator#doConfigure(const String& configFileName,
		const spi::LoggerRepositoryPtr& hierarchy) with the
		<code>filename</code> to reconfigure log4cxx.
		*/
		void doOnChange()
		{
			PropertyConfigurator().doConfigure(file(),
				LogManager::getLoggerRepository());
		}
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2482,47327,RollingFileAppenderPriv,4,RollingFileAppenderPriv,,main\cpp\rollingfileappender.cpp,"struct RollingFileAppender::RollingFileAppenderPriv : public FileAppenderPriv
{
	RollingFileAppenderPriv() :
		FileAppenderPriv(),
		fileLength(0) {}

	/**
	 * Triggering policy.
	 */
	TriggeringPolicyPtr triggeringPolicy;

	/**
	 * Rolling policy.
	 */
	RollingPolicyPtr rollingPolicy;

	/**
	 * Length of current active log file.
	 */
	size_t fileLength;

	/**
	 *  save the loggingevent
	 */
	spi::LoggingEventPtr _event;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2483,48769,CountingOutputStream,4,LOG4CXX_NS.rolling.CountingOutputStream,,main\cpp\rollingfileappender.cpp,"class CountingOutputStream : public OutputStream
{
		/**
		 * Wrapped output stream.
		 */
	private:
		OutputStreamPtr os;

		/**
		 * Rolling file appender to inform of stream writes.
		 */
		RollingFileAppender* rfa;

	public:
		/**
		 * Constructor.
		 * @param os output stream to wrap.
		 * @param rfa rolling file appender to inform.
		 */
		CountingOutputStream(
			OutputStreamPtr& os1, RollingFileAppender* rfa1) :
			os(os1), rfa(rfa1)
		{
		}

		/**
		 * {@inheritDoc}
		 */
		void close(Pool& p)
		{
			os->close(p);
			rfa = 0;
		}

		/**
		 * {@inheritDoc}
		 */
		void flush(Pool& p)
		{
			os->flush(p);
		}

		/**
		 * {@inheritDoc}
		 */
		void write(ByteBuffer& buf, Pool& p)
		{
			os->write(buf, p);

			if (rfa != 0)
			{
				rfa->incrementFileLength(buf.limit());
			}
		}
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2484,49293,RolloverDescriptionPrivate,4,RolloverDescriptionPrivate,,main\cpp\rolloverdescription.cpp,"struct RolloverDescription::RolloverDescriptionPrivate{
	RolloverDescriptionPrivate(){}

	RolloverDescriptionPrivate(
		const LogString& activeFileName1,
		const bool append1,
		const ActionPtr& synchronous1,
		const ActionPtr& asynchronous1)
		: activeFileName(activeFileName1),
		  append(append1),
		  synchronous(synchronous1),
		  asynchronous(asynchronous1)
	{}

	/**
	 * Active log file name after rollover.
	 */
	LogString activeFileName;

	/**
	 * Should active file be opened for appending.
	 */
	bool append;

	/**
	 * Action to be completed after close of current active log file
	 * before returning control to caller.
	 */
	ActionPtr synchronous;

	/**
	 * Action to be completed after close of current active log file
	 * and before next rollover attempt, may be executed asynchronously.
	 */
	ActionPtr asynchronous;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2485,49548,PatternToken,4,LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken,,main\cpp\simpledateformat.cpp,"class PatternToken
{
	public:
		PatternToken()
		{
		}

		virtual ~PatternToken()
		{
		}

		/**
		 * Sets the time zone.
		 * @param zone new time zone.
		 */
		virtual void setTimeZone(const TimeZonePtr& zone)
		{
		}

		/**
		 * Appends the formatted content to the string.
		 * @param s string to which format contribution is appended.
		 * @param date exploded date/time.
		 * @param p memory pool.
		 */
		virtual void format(LogString& s,
			const apr_time_exp_t& date,
			LOG4CXX_NS::helpers::Pool& p) const = 0;

	protected:

		static void incrementMonth(tm& time, apr_time_exp_t& aprtime)
		{
			time.tm_mon++;
			aprtime.tm_mon++;
		}

		static void incrementDay(tm& time, apr_time_exp_t& aprtime)
		{
			time.tm_wday++;
			aprtime.tm_wday++;
		}

		static void incrementHalfDay(tm& time, apr_time_exp_t& aprtime)
		{
			time.tm_hour += 12;
			aprtime.tm_hour += 12;
		}

		static void renderFacet(const std::locale* locale,
			incrementFunction inc,
			char spec,
			unsigned int wspec...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2486,49721,LiteralToken,4,LOG4CXX_NS.helpers.SimpleDateFormatImpl.LiteralToken,,main\cpp\simpledateformat.cpp,"class LiteralToken : public PatternToken
{
	public:
		LiteralToken( logchar ch1, int count1 ) : ch( ch1 ), count( count1 )
		{
		}

		void format( LogString& s, const apr_time_exp_t&, Pool& /* p */ ) const
		{
			s.append( count, ch );
		}

	private:
		logchar ch;
		int count;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2487,49743,EraToken,4,LOG4CXX_NS.helpers.SimpleDateFormatImpl.EraToken,,main\cpp\simpledateformat.cpp,"class EraToken : public PatternToken
{
	public:
		EraToken( int /* count */, const std::locale* /* locale */  )
		{
		}

		void format(LogString& s, const apr_time_exp_t& /* tm */, Pool& /* p */ ) const
		{
			s.append(1, (logchar) 0x41 /* 'A' */);
			s.append(1, (logchar) 0x44 /* 'D' */);
		}
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2488,49773,NumericToken,4,LOG4CXX_NS.helpers.SimpleDateFormatImpl.NumericToken,,main\cpp\simpledateformat.cpp,"class NumericToken : public PatternToken
{
	public:
		NumericToken( size_t width1 ) : width( width1 )
		{
		}

		virtual int getField( const apr_time_exp_t& tm ) const = 0;

		void format( LogString& s, const apr_time_exp_t& tm, Pool& p ) const
		{
			size_t initialLength = s.length();

			StringHelper::toString( getField( tm ), p, s );
			size_t finalLength = s.length();

			if ( initialLength + width > finalLength )
			{
				s.insert( initialLength, ( initialLength + width ) - finalLength, (logchar) 0x30 /* '0' */);
			}
		}

	private:
		size_t width;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2489,49834,YearToken,4,LOG4CXX_NS.helpers.SimpleDateFormatImpl.YearToken,,main\cpp\simpledateformat.cpp,"class YearToken : public NumericToken
{
	public:
		YearToken( int width1 ) : NumericToken( width1 )
		{
		}

		int getField( const apr_time_exp_t& tm ) const
		{
			return 1900 + tm.tm_year;
		}
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2490,49851,MonthToken,4,LOG4CXX_NS.helpers.SimpleDateFormatImpl.MonthToken,,main\cpp\simpledateformat.cpp,"class MonthToken : public NumericToken
{
	public:
		MonthToken( int width1 ) : NumericToken( width1 )
		{
		}

		int getField( const apr_time_exp_t& tm ) const
		{
			return tm.tm_mon + 1;
		}
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2491,49868,AbbreviatedMonthNameToken,4,LOG4CXX_NS.helpers.SimpleDateFormatImpl.AbbreviatedMonthNameToken,,main\cpp\simpledateformat.cpp,"class AbbreviatedMonthNameToken : public PatternToken
{
	public:
		AbbreviatedMonthNameToken(int, const std::locale* locale) : names( 12 )
		{
			renderFacet(locale, PatternToken::incrementMonth, 'b', 0x62, ""%b"", names);
		}

		void format(LogString& s, const apr_time_exp_t& tm, Pool& /* p */ ) const
		{
			s.append( names[tm.tm_mon] );
		}

	private:
		std::vector < LogString > names;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2492,49901,FullMonthNameToken,4,LOG4CXX_NS.helpers.SimpleDateFormatImpl.FullMonthNameToken,,main\cpp\simpledateformat.cpp,"class FullMonthNameToken : public PatternToken
{
	public:
		FullMonthNameToken( int width, const std::locale* locale) : names( 12 )
		{
			renderFacet(locale, PatternToken::incrementMonth, 'B', 0x42, ""%B"", names);
		}

		void format( LogString& s, const apr_time_exp_t& tm, Pool& /* p */ ) const
		{
			s.append( names[tm.tm_mon] );
		}

	private:
		std::vector < LogString > names;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2493,49934,WeekInYearToken,4,LOG4CXX_NS.helpers.SimpleDateFormatImpl.WeekInYearToken,,main\cpp\simpledateformat.cpp,"class WeekInYearToken : public NumericToken
{
	public:
		WeekInYearToken( int width1 ) : NumericToken( width1 )
		{
		}

		int getField( const apr_time_exp_t& tm ) const
		{
			return tm.tm_yday / 7;
		}
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2494,49951,WeekInMonthToken,4,LOG4CXX_NS.helpers.SimpleDateFormatImpl.WeekInMonthToken,,main\cpp\simpledateformat.cpp,"class WeekInMonthToken : public NumericToken
{
	public:
		WeekInMonthToken( int width1 ) : NumericToken( width1 )
		{
		}

		int getField( const apr_time_exp_t& tm ) const
		{
			return tm.tm_mday / 7;
		}
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2495,49968,DayInMonthToken,4,LOG4CXX_NS.helpers.SimpleDateFormatImpl.DayInMonthToken,,main\cpp\simpledateformat.cpp,"class DayInMonthToken : public NumericToken
{
	public:
		DayInMonthToken( int width1 ) : NumericToken( width1 )
		{
		}

		int getField( const apr_time_exp_t& tm ) const
		{
			return tm.tm_mday;
		}
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2496,49983,DayInYearToken,4,LOG4CXX_NS.helpers.SimpleDateFormatImpl.DayInYearToken,,main\cpp\simpledateformat.cpp,"class DayInYearToken : public NumericToken
{
	public:
		DayInYearToken( int width1 ) : NumericToken( width1 )
		{
		}

		int getField( const apr_time_exp_t& tm ) const
		{
			return tm.tm_yday;
		}
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2497,49998,DayOfWeekInMonthToken,4,LOG4CXX_NS.helpers.SimpleDateFormatImpl.DayOfWeekInMonthToken,,main\cpp\simpledateformat.cpp,"class DayOfWeekInMonthToken : public NumericToken
{
	public:
		DayOfWeekInMonthToken( int width1 ) : NumericToken( width1 )
		{
		}

		int getField( const apr_time_exp_t& /* tm */ ) const
		{
			return -1;
		}
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2498,50012,AbbreviatedDayNameToken,4,LOG4CXX_NS.helpers.SimpleDateFormatImpl.AbbreviatedDayNameToken,,main\cpp\simpledateformat.cpp,"class AbbreviatedDayNameToken : public PatternToken
{
	public:
		AbbreviatedDayNameToken( int width, const std::locale* locale) : names( 7 )
		{
			renderFacet(locale, PatternToken::incrementDay, 'a', 0x61, ""%a"", names);
		}

		void format( LogString& s, const apr_time_exp_t& tm, Pool& /* p */ ) const
		{
			s.append( names[tm.tm_wday] );
		}

	private:
		std::vector < LogString > names;

}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2499,50045,FullDayNameToken,4,LOG4CXX_NS.helpers.SimpleDateFormatImpl.FullDayNameToken,,main\cpp\simpledateformat.cpp,"class FullDayNameToken : public PatternToken
{
	public:
		FullDayNameToken( int width, const std::locale* locale) : names( 7 )
		{
			renderFacet(locale, PatternToken::incrementDay, 'A', 0x41, ""%A"", names);
		}

		void format( LogString& s, const apr_time_exp_t& tm, Pool& /* p */ ) const
		{
			s.append( names[tm.tm_wday] );
		}

	private:
		std::vector < LogString > names;

}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2500,50078,MilitaryHourToken,4,LOG4CXX_NS.helpers.SimpleDateFormatImpl.MilitaryHourToken,,main\cpp\simpledateformat.cpp,"class MilitaryHourToken : public NumericToken
{
	public:
		MilitaryHourToken( int width1, int offset1 ) : NumericToken( width1 ), offset( offset1 )
		{
		}

		int getField( const apr_time_exp_t& tm ) const
		{
			return tm.tm_hour + offset;
		}

	private:
		int offset;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2501,50097,HourToken,4,LOG4CXX_NS.helpers.SimpleDateFormatImpl.HourToken,,main\cpp\simpledateformat.cpp,"class HourToken : public NumericToken
{
	public:
		HourToken( int width1, int /* offset1 */ ) : NumericToken( width1 ), offset( 0 )
		{
		}

		int getField( const apr_time_exp_t& tm ) const
		{
			return ( ( tm.tm_hour + 12 - offset ) % 12 ) + offset;
		}

	private:
		int offset;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2502,50122,MinuteToken,4,LOG4CXX_NS.helpers.SimpleDateFormatImpl.MinuteToken,,main\cpp\simpledateformat.cpp,"class MinuteToken : public NumericToken
{
	public:
		MinuteToken( int width1 ) : NumericToken( width1 )
		{
		}

		int getField( const apr_time_exp_t& tm ) const
		{
			return tm.tm_min;
		}
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2503,50137,SecondToken,4,LOG4CXX_NS.helpers.SimpleDateFormatImpl.SecondToken,,main\cpp\simpledateformat.cpp,"class SecondToken : public NumericToken
{
	public:
		SecondToken( int width1 ) : NumericToken( width1 )
		{
		}

		int getField( const apr_time_exp_t& tm ) const
		{
			return tm.tm_sec;
		}
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2504,50152,MillisecondToken,4,LOG4CXX_NS.helpers.SimpleDateFormatImpl.MillisecondToken,,main\cpp\simpledateformat.cpp,"class MillisecondToken : public NumericToken
{
	public:
		MillisecondToken( int width1 ) : NumericToken( width1 )
		{
		}

		int getField( const apr_time_exp_t& tm ) const
		{
			return tm.tm_usec / 1000;
		}
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2505,50169,MicrosecondToken,4,LOG4CXX_NS.helpers.SimpleDateFormatImpl.MicrosecondToken,,main\cpp\simpledateformat.cpp,"class MicrosecondToken : public NumericToken
{
	public:
		MicrosecondToken( int width1 ) : NumericToken( width1 )
		{
		}

		int getField( const apr_time_exp_t& tm ) const
		{
			return tm.tm_usec;
		}
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2506,50184,AMPMToken,4,LOG4CXX_NS.helpers.SimpleDateFormatImpl.AMPMToken,,main\cpp\simpledateformat.cpp,"class AMPMToken : public PatternToken
{
	public:
		AMPMToken( int width, const std::locale* locale) : names( 2 )
		{
			renderFacet(locale, PatternToken::incrementHalfDay, 'p', 0x70, ""%p"", names);
		}

		void format( LogString& s, const apr_time_exp_t& tm, Pool& /* p */ ) const
		{
			s.append( names[tm.tm_hour / 12] );
		}

	private:
		std::vector < LogString > names;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2507,50219,GeneralTimeZoneToken,4,LOG4CXX_NS.helpers.SimpleDateFormatImpl.GeneralTimeZoneToken,,main\cpp\simpledateformat.cpp,"class GeneralTimeZoneToken : public PatternToken
{
	public:
		GeneralTimeZoneToken( int /* width */ )
		{
		}

		void format( LogString& s, const apr_time_exp_t&, Pool& /* p */ ) const
		{
			s.append(timeZone->getID());
		}

		void setTimeZone( const TimeZonePtr& zone )
		{
			timeZone = zone;
		}

	private:
		TimeZonePtr timeZone;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2508,50249,RFC822TimeZoneToken,4,LOG4CXX_NS.helpers.SimpleDateFormatImpl.RFC822TimeZoneToken,,main\cpp\simpledateformat.cpp,"class RFC822TimeZoneToken : public PatternToken
{
	public:
		RFC822TimeZoneToken( int /* width */ )
		{
		}

		void format( LogString& s, const apr_time_exp_t& tm, Pool& p ) const
		{
			if ( tm.tm_gmtoff == 0 )
			{
				s.append( 1, (logchar) 0x5A /* 'Z'  */ );
			}
			else
			{
				apr_int32_t off = tm.tm_gmtoff;
				size_t basePos = s.length();
				s.append( LOG4CXX_STR( ""+0000"" ) );

				if ( off < 0 )
				{
					s[basePos] = 0x2D; // '-'
					off = -off;
				}

				LogString hours;
				StringHelper::toString( off / 3600, p, hours );
				size_t hourPos = basePos + 2;

				//
				//   assumes that point values for 0-9 are same between char and wchar_t
				//
				for ( size_t i = hours.length(); i-- > 0; )
				{
					s[hourPos--] = hours[i];
				}

				LogString min;
				StringHelper::toString( ( off % 3600 ) / 60, p, min );
				size_t minPos = basePos + 4;

				//
				//   assumes that point values for 0-9 are same between char and wchar_t
				//
				for ( size_t j = min.length()...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2509,50701,SimpleDateFormatPrivate,4,SimpleDateFormatPrivate,,main\cpp\simpledateformat.cpp,"struct SimpleDateFormat::SimpleDateFormatPrivate{
	SimpleDateFormatPrivate() :
		timeZone(TimeZone::getDefault())
	{}

	/**
	 * Time zone.
	 */
	TimeZonePtr timeZone;

	/**
	 * List of tokens.
	 */
	PatternTokenList pattern;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2510,51058,SMTPPriv,4,SMTPPriv,,main\cpp\smtpappender.cpp,"struct SMTPAppender::SMTPPriv : public AppenderSkeletonPrivate
{
	SMTPPriv() :
		AppenderSkeletonPrivate(),
		smtpPort(25),
		bufferSize(512),
		locationInfo(false),
		cb(bufferSize),
		evaluator(new DefaultEvaluator()) {}

	SMTPPriv(spi::TriggeringEventEvaluatorPtr evaluator) :
		AppenderSkeletonPrivate(),
		smtpPort(25),
		bufferSize(512),
		locationInfo(false),
		cb(bufferSize),
		evaluator(evaluator) {}

	LogString to;
	LogString cc;
	LogString bcc;
	LogString from;
	LogString subject;
	LogString smtpHost;
	LogString smtpUsername;
	LogString smtpPassword;
	int smtpPort;
	int bufferSize; // 512
	bool locationInfo;
	helpers::CyclicBuffer cb;
	spi::TriggeringEventEvaluatorPtr evaluator;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2511,53281,SocketOutputStreamPrivate,4,SocketOutputStreamPrivate,,main\cpp\socketoutputstream.cpp,"struct SocketOutputStream::SocketOutputStreamPrivate
{
	ByteList array;
	SocketPtr socket;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2512,53429,StrftimeDateFormatPrivate,4,StrftimeDateFormatPrivate,,main\cpp\strftimedateformat.cpp,"struct StrftimeDateFormat::StrftimeDateFormatPrivate{
	StrftimeDateFormatPrivate() :
		timeZone(TimeZone::getDefault())
	{}

	/**
	*    Time zone.
	*/
	TimeZonePtr timeZone;
	std::string pattern;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2513,54035,StringMatchFilterPrivate,4,StringMatchFilterPrivate,,main\cpp\stringmatchfilter.cpp,"struct StringMatchFilter::StringMatchFilterPrivate : public FilterPrivate
{
	StringMatchFilterPrivate() : FilterPrivate(),
		acceptOnMatch(true),
		stringToMatch() {}

	bool acceptOnMatch;
	LogString stringToMatch;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2514,54283,StringTokenizerPrivate,4,StringTokenizerPrivate,,main\cpp\stringtokenizer.cpp,"struct StringTokenizer::StringTokenizerPrivate{
	StringTokenizerPrivate(const LogString& str, const LogString& delim1) : src(str), delim(delim1), pos(0){}
	LogString src;
	LogString delim;
	size_t pos;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2515,55727,SyslogWriterPrivate,4,SyslogWriterPrivate,,main\cpp\syslogwriter.cpp,"struct SyslogWriter::SyslogWriterPrivate {
	SyslogWriterPrivate(const LogString& syslogHost1, int syslogHostPort1)
		: syslogHost(syslogHost1), syslogHostPort(syslogHostPort1){}

	LogString syslogHost;
	int syslogHostPort;
	InetAddressPtr address;
	DatagramSocketPtr ds;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2516,56160,TelnetAppenderPriv,4,TelnetAppenderPriv,,main\cpp\telnetappender.cpp,"struct TelnetAppender::TelnetAppenderPriv : public AppenderSkeletonPrivate
{
	TelnetAppenderPriv( int port, int maxConnections ) : AppenderSkeletonPrivate(),
		port(port),
		connections(maxConnections),
		encoding(LOG4CXX_STR(""UTF-8"")),
		encoder(CharsetEncoder::getUTF8Encoder()),
		sh(),
		activeConnections(0) {}

	int port;
	ConnectionList connections;
	LogString encoding;
	LOG4CXX_NS::helpers::CharsetEncoderPtr encoder;
	std::unique_ptr<helpers::ServerSocket> serverSocket;
	std::thread sh;
	size_t activeConnections;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2517,57288,ThreadSpecificDataPrivate,4,ThreadSpecificDataPrivate,,main\cpp\threadspecificdata.cpp,"struct ThreadSpecificData::ThreadSpecificDataPrivate{
	LOG4CXX_NS::NDC::Stack ndcStack;
	LOG4CXX_NS::MDC::Map mdcMap;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2518,57547,priv_data,4,LOG4CXX_NS.helpers.priv_data,,main\cpp\threadutility.cpp,"struct ThreadUtility::priv_data
{
	priv_data()
	{
		start_pre = nullptr;
		started = nullptr;
		start_post = nullptr;
	}

	ThreadStartPre start_pre;
	ThreadStarted started;
	ThreadStartPost start_post;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2519,57830,ThrowableInformationPatternConverterPrivate,4,ThrowableInformationPatternConverterPrivate,,main\cpp\throwableinformationpatternconverter.cpp,"struct ThrowableInformationPatternConverter::ThrowableInformationPatternConverterPrivate :
	public PatternConverterPrivate
{
	ThrowableInformationPatternConverterPrivate( const LogString& name, const LogString& style, bool shortReport ) :
		PatternConverterPrivate( name, style ),
		shortReport(shortReport) {}

	/**
	 * If ""short"", only first line of throwable report will be formatted.
	 */
	const bool shortReport;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2520,57946,TimeBasedRollingPolicyPrivate,4,TimeBasedRollingPolicyPrivate,,main\cpp\timebasedrollingpolicy.cpp,"struct TimeBasedRollingPolicy::TimeBasedRollingPolicyPrivate{
#if LOG4CXX_HAS_MULTIPROCESS_ROLLING_FILE_APPENDER
	TimeBasedRollingPolicyPrivate() :
		_mmap(nullptr),
		_file_map(nullptr),
		_lock_file(nullptr),
		bAlreadyInitialized(false),
		bRefreshCurFile(false){}
#else
	TimeBasedRollingPolicyPrivate(){}
#endif

		/**
		 * Time for next determination if time for rollover.
		 */
		log4cxx_time_t nextCheck;

		/**
		 * File name at last rollover.
		 */
		LogString lastFileName;

		/**
		 * Length of any file type suffix (.gz, .zip).
		 */
		int suffixLength;

		/**
		 * mmap pointer
		 */
		apr_mmap_t* _mmap;

		/*
		 * pool for mmap handler
		 * */
		LOG4CXX_NS::helpers::Pool _mmapPool;

		/**
		 * mmap file descriptor
		 */
		apr_file_t* _file_map;

		/**
		 * mmap file name
		 */
		std::string _mapFileName;

		/*
		 * lock file handle
		 * */
		apr_file_t* _lock_file;

		/**
		 * Check nextCheck if it has already been set
		 * Timebased rolling policy has an issue when working a...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2521,58663,GMTTimeZone,4,LOG4CXX_NS.helpers.TimeZoneImpl.GMTTimeZone,,main\cpp\timezone.cpp,"class GMTTimeZone : public TimeZone
{
	public:
		/** Class factory. */
		static const TimeZonePtr& getInstance()
		{
			static WideLife<TimeZonePtr> tz = std::make_shared<GMTTimeZone>();
			return tz;
		}

		/** Explode time to human readable form. */
		log4cxx_status_t explode( apr_time_exp_t* result, log4cxx_time_t input ) const
		{
			apr_status_t stat;

			//  APR 1.1 and early mishandles microseconds on dates
			//   before 1970, APR bug 32520
			if (LOG4CXX_UNLIKELY(input < 0 && apr_time_usec(input) < 0))
			{
				apr_time_t floorTime = (apr_time_sec(input) - 1) * APR_USEC_PER_SEC;
				stat = apr_time_exp_gmt(result, floorTime);
				result->tm_usec = (int) (input - floorTime);
			}
			else
			{
				stat = apr_time_exp_gmt( result, input );
			}

			return stat;
		}

		GMTTimeZone() : TimeZone( LOG4CXX_STR(""GMT"") )
		{
		}
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2522,58731,LocalTimeZone,4,LOG4CXX_NS.helpers.TimeZoneImpl.LocalTimeZone,,main\cpp\timezone.cpp,"class LocalTimeZone : public TimeZone
{
	public:
		/** Class factory. */
		static const TimeZonePtr& getInstance()
		{
			static WideLife<TimeZonePtr> tz = std::make_shared<LocalTimeZone>();
			return tz;
		}

		/** Explode time to human readable form. */
		log4cxx_status_t explode( apr_time_exp_t* result, log4cxx_time_t input ) const
		{
			apr_status_t stat;

			//  APR 1.1 and early mishandles microseconds on dates
			//   before 1970, APR bug 32520
			if (LOG4CXX_UNLIKELY(input < 0 && apr_time_usec(input) < 0))
			{
				apr_time_t floorTime = (apr_time_sec(input) - 1) * APR_USEC_PER_SEC;
				stat = apr_time_exp_lt(result, floorTime);
				result->tm_usec = (int) (input - floorTime);
			}
			else
			{
				stat = apr_time_exp_lt( result, input );
			}

			return stat;
		}


		LocalTimeZone() : TimeZone( getTimeZoneName() )
		{
		}

	private:
		static const LogString getTimeZoneName()
		{
			const int MAX_TZ_LENGTH = 255;
			char tzName[MAX_TZ_LENGTH];
			apr_size_t tzLength;
			apr...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2523,58853,FixedTimeZone,4,LOG4CXX_NS.helpers.TimeZoneImpl.FixedTimeZone,,main\cpp\timezone.cpp,"class FixedTimeZone : public TimeZone
{
	public:
		FixedTimeZone( const LogString& name, apr_int32_t offset1 ) : TimeZone( name ), offset( offset1 )
		{
		}

		/** Explode time to human readable form. */
		log4cxx_status_t explode( apr_time_exp_t* result, log4cxx_time_t input ) const
		{
			apr_status_t stat;

			//  APR 1.1 and early mishandles microseconds on dates
			//   before 1970, APR bug 32520
			if (LOG4CXX_UNLIKELY(input < 0 && apr_time_usec(input) < 0))
			{
				apr_time_t floorTime = (apr_time_sec(input) - 1) * APR_USEC_PER_SEC;
				stat = apr_time_exp_tz(result, floorTime, offset);
				result->tm_usec = (int) (input - floorTime);
			}
			else
			{
				stat = apr_time_exp_tz( result, input, offset );
			}

			return stat;
		}


	private:
		const apr_int32_t offset;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2524,61928,XMLLayoutPrivate,4,XMLLayoutPrivate,,main\cpp\xmllayout.cpp,"struct XMLLayout::XMLLayoutPrivate
{
	XMLLayoutPrivate()
		: locationInfo(false)
		, properties(false)
		, expectedPatternLength(100)
		{}

	// Print no location info by default
	bool locationInfo; //= false
	bool properties; // = false

	// Expected length of a formatted event excluding the message text
	size_t expectedPatternLength;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2525,62524,XMLSocketAppenderPriv,4,XMLSocketAppenderPriv,,main\cpp\xmlsocketappender.cpp,"struct XMLSocketAppender::XMLSocketAppenderPriv : public SocketAppenderSkeletonPriv
{
	XMLSocketAppenderPriv(int defaultPort, int reconnectionDelay) :
		SocketAppenderSkeletonPriv(defaultPort, reconnectionDelay) {}

	XMLSocketAppenderPriv(InetAddressPtr address, int defaultPort, int reconnectionDelay) :
		SocketAppenderSkeletonPriv( address, defaultPort, reconnectionDelay ) {}

	XMLSocketAppenderPriv(const LogString& host, int port, int delay) :
		SocketAppenderSkeletonPriv( host, port, delay ) {}

	LOG4CXX_NS::helpers::WriterPtr writer;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2526,62863,ZipCompressActionPrivate,4,ZipCompressActionPrivate,,main\cpp\zipcompressaction.cpp,"struct ZipCompressAction::ZipCompressActionPrivate : public ActionPrivate
{
	ZipCompressActionPrivate( const File& toRename,
		const File& renameTo,
		bool deleteSource):
		source(toRename), destination(renameTo), deleteSource(deleteSource) {}

	const File source;
	const File destination;
	bool deleteSource;
	bool throwIOExceptionOnForkFailure = true;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2527,63306,LoggingEvent,4,LOG4CXX_NS.spi.LoggingEvent,,main\include\log4cxx\appender.hpp,class LoggingEvent,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2528,63307,LoggingEventPtr,4,LoggingEventPtr,,main\include\log4cxx\appender.hpp,typedef std::shared_ptr<LoggingEvent> LoggingEventPtr;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2529,63308,Filter,4,LOG4CXX_NS.spi.Filter,,main\include\log4cxx\appender.hpp,class Filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2530,63309,FilterPtr,4,FilterPtr,,main\include\log4cxx\appender.hpp,typedef std::shared_ptr<Filter> FilterPtr;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2531,63310,ErrorHandler,4,LOG4CXX_NS.spi.ErrorHandler,,main\include\log4cxx\appender.hpp,class ErrorHandler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2532,63311,ErrorHandlerPtr,4,ErrorHandlerPtr,,main\include\log4cxx\appender.hpp,typedef std::shared_ptr<ErrorHandler> ErrorHandlerPtr;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2533,63312,Layout,4,LOG4CXX_NS.Layout,,main\include\log4cxx\appender.hpp,class Layout,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2534,63313,LayoutPtr,4,LayoutPtr,,main\include\log4cxx\appender.hpp,typedef std::shared_ptr<Layout> LayoutPtr;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2535,63367,Appender,4,LOG4CXX_NS.Appender,,main\include\log4cxx\basicconfigurator.hpp,class Appender,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2536,63368,AppenderPtr,4,AppenderPtr,,main\include\log4cxx\basicconfigurator.hpp,typedef std::shared_ptr<Appender> AppenderPtr;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2537,63381,Object,4,LOG4CXX_NS.helpers.Object,,main\include\log4cxx\config\propertysetter.hpp,class Object,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2538,63386,Properties,4,LOG4CXX_NS.helpers.Properties,,main\include\log4cxx\config\propertysetter.hpp,class Properties,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2539,63387,Pool,4,LOG4CXX_NS.helpers.Pool,,main\include\log4cxx\config\propertysetter.hpp,class Pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2540,63468,Logger,4,LOG4CXX_NS.Logger,,main\include\log4cxx\defaultloggerfactory.hpp,class Logger,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2541,63469,LoggerPtr,4,LoggerPtr,,main\include\log4cxx\defaultloggerfactory.hpp,typedef std::shared_ptr<Logger> LoggerPtr;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2542,63480,apr_file_t,4,apr_file_t,,main\include\log4cxx\file.hpp,struct apr_file_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2543,63481,apr_finfo_t,4,apr_finfo_t,,main\include\log4cxx\file.hpp,struct apr_finfo_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2544,63484,Transcoder,4,LOG4CXX_NS.helpers.Transcoder,,main\include\log4cxx\file.hpp,class Transcoder,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2545,63485,Pool,4,LOG4CXX_NS.helpers.Pool,,main\include\log4cxx\file.hpp,class Pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2546,63504,Pool,4,LOG4CXX_NS.helpers.Pool,,main\include\log4cxx\fileappender.hpp,class Pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2547,63540,Rule,4,LOG4CXX_NS.rule.Rule,,main\include\log4cxx\filter\expressionfilter.hpp,class Rule,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2548,63541,RulePtr,4,RulePtr,,main\include\log4cxx\filter\expressionfilter.hpp,typedef helpers::ObjectPtrT < Rule > RulePtr;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2549,63554,Level,4,LOG4CXX_NS.Level,,main\include\log4cxx\filter\levelmatchfilter.hpp,class Level,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2550,63592,Level,4,LOG4CXX_NS.Level,,main\include\log4cxx\filter\loggermatchfilter.hpp,class Level,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2551,63667,LoggingEvent,4,LOG4CXX_NS.spi.LoggingEvent,,main\include\log4cxx\helpers\appenderattachableimpl.hpp,class LoggingEvent,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2552,63668,LoggingEventPtr,4,LoggingEventPtr,,main\include\log4cxx\helpers\appenderattachableimpl.hpp,typedef std::shared_ptr<LoggingEvent> LoggingEventPtr;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2553,63689,apr_threadkey_t,4,apr_threadkey_t,,main\include\log4cxx\helpers\aprinitializer.hpp,struct apr_threadkey_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2554,63690,apr_pool_t,4,apr_pool_t,,main\include\log4cxx\helpers\aprinitializer.hpp,struct apr_pool_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2555,63693,FileWatchdog,4,LOG4CXX_NS.helpers.FileWatchdog,,main\include\log4cxx\helpers\aprinitializer.hpp,class FileWatchdog,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2556,63694,APRInitializer,4,LOG4CXX_NS.helpers.APRInitializer,,main\include\log4cxx\helpers\aprinitializer.hpp,"class APRInitializer
{
	public:
		static log4cxx_time_t initialize();
		static apr_pool_t* getRootPool();
		static apr_threadkey_t* getTlsKey();
		static bool isDestructed;

		/**
		 *  Register a FileWatchdog for deletion prior to termination.
		 *    FileWatchdog must be
		 *    allocated on heap and not deleted elsewhere.
		 */
		static void registerCleanup(FileWatchdog* watchdog);
		static void unregisterCleanup(FileWatchdog* watchdog);
		static void unregisterAll();
		/**
		 *  Store a single instance type ObjectPtr for deletion prior to termination
		 */
		template <class T> static void setUnique(const std::shared_ptr<T>& pObject)
		{
			getInstance().addObject(typeid(T).hash_code(), pObject);
		}
		/**
		 *  Fetch or add a single instance type ObjectPtr for deletion prior to termination
		 */
		template <class T> static std::shared_ptr<T> getOrAddUnique(std::function<ObjectPtr()> creator)
		{
			return cast<T>(getInstance().findOrAddObject(typeid(T).hash_code(), creator));
		...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2557,63757,WideLife<APRInitializer>,4,LOG4CXX_NS.helpers.APRInitializer.WideLife<APRInitializer>,,main\include\log4cxx\helpers\aprinitializer.hpp,friend class helpers::WideLife<APRInitializer>,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2558,63828,Pool,4,LOG4CXX_NS.helpers.Pool,,main\include\log4cxx\helpers\bytearrayoutputstream.hpp,class Pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2559,63863,CharsetDecoder,4,LOG4CXX_NS.helpers.CharsetDecoder,,main\include\log4cxx\helpers\charsetdecoder.hpp,class CharsetDecoder,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2560,63865,ByteBuffer,4,LOG4CXX_NS.helpers.ByteBuffer,,main\include\log4cxx\helpers\charsetdecoder.hpp,class ByteBuffer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2561,63878,ByteBuffer,4,LOG4CXX_NS.helpers.ByteBuffer,,main\include\log4cxx\helpers\charsetencoder.hpp,class ByteBuffer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2562,63879,CharsetEncoder,4,LOG4CXX_NS.helpers.CharsetEncoder,,main\include\log4cxx\helpers\charsetencoder.hpp,class CharsetEncoder,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2563,63893,Object,4,LOG4CXX_NS.helpers.Object,,main\include\log4cxx\helpers\class.hpp,class Object,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2564,63904,Class,4,LOG4CXX_NS.helpers.Class,,main\include\log4cxx\helpers\classregistration.hpp,class Class,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2565,63946,DatagramSocket,4,LOG4CXX_NS.helpers.DatagramSocket,,main\include\log4cxx\helpers\datagramsocket.hpp,class DatagramSocket,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2566,64012,NoSuchElementException,4,LOG4CXX_NS.helpers.NoSuchElementException,,main\include\log4cxx\helpers\exception.hpp,"class NoSuchElementException : public Exception
{
	public:
		NoSuchElementException();
		NoSuchElementException(const NoSuchElementException&);
		NoSuchElementException& operator=(const NoSuchElementException&);
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2567,64027,IllegalStateException,4,LOG4CXX_NS.helpers.IllegalStateException,,main\include\log4cxx\helpers\exception.hpp,"class IllegalStateException : public Exception
{
	public:
		IllegalStateException();
		IllegalStateException(const IllegalStateException&);
		IllegalStateException& operator=(const IllegalStateException&);
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2568,64117,UnknownHostException,4,LOG4CXX_NS.helpers.UnknownHostException,,main\include\log4cxx\helpers\inetaddress.hpp,"class UnknownHostException : public Exception
{
	public:
		UnknownHostException(const LogString& msg);
		UnknownHostException(const UnknownHostException& src);
		UnknownHostException& operator=(const UnknownHostException& src);
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2569,64133,InetAddress,4,LOG4CXX_NS.helpers.InetAddress,,main\include\log4cxx\helpers\inetaddress.hpp,class InetAddress,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2570,64146,ByteBuffer,4,LOG4CXX_NS.helpers.ByteBuffer,,main\include\log4cxx\helpers\inputstream.hpp,class ByteBuffer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2571,64202,Class,4,LOG4CXX_NS.helpers.Class,,main\include\log4cxx\helpers\loader.hpp,class Class,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2572,64263,MessageBuffer,4,MessageBuffer,,main\include\log4cxx\helpers\messagebuffer.hpp,typedef CharMessageBuffer MessageBuffer;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2573,64264,LogCharMessageBuffer,4,LogCharMessageBuffer,,main\include\log4cxx\helpers\messagebuffer.hpp,typedef CharMessageBuffer LogCharMessageBuffer;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2574,64279,AppenderSkeleton,4,LOG4CXX_NS.AppenderSkeleton,,main\include\log4cxx\helpers\object.hpp,class AppenderSkeleton,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2575,64280,Logger,4,LOG4CXX_NS.Logger,,main\include\log4cxx\helpers\object.hpp,class Logger,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2576,64282,Pool,4,LOG4CXX_NS.helpers.Pool,,main\include\log4cxx\helpers\object.hpp,class Pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2577,64355,Level,4,LOG4CXX_NS.Level,,main\include\log4cxx\helpers\optionconverter.hpp,class Level,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2578,64356,File,4,LOG4CXX_NS.File,,main\include\log4cxx\helpers\optionconverter.hpp,class File,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2579,64357,LevelPtr,4,LevelPtr,,main\include\log4cxx\helpers\optionconverter.hpp,typedef std::shared_ptr<Level> LevelPtr;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2580,64359,LoggerRepository,4,LOG4CXX_NS.spi.LoggerRepository,,main\include\log4cxx\helpers\optionconverter.hpp,class LoggerRepository,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2581,64360,LoggerRepositoryPtr,4,LoggerRepositoryPtr,,main\include\log4cxx\helpers\optionconverter.hpp,typedef std::shared_ptr<LoggerRepository> LoggerRepositoryPtr;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2582,64362,Properties,4,LOG4CXX_NS.helpers.Properties,,main\include\log4cxx\helpers\optionconverter.hpp,class Properties,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2583,64363,Object,4,LOG4CXX_NS.helpers.Object,,main\include\log4cxx\helpers\optionconverter.hpp,class Object,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2584,64364,ObjectPtr,4,ObjectPtr,,main\include\log4cxx\helpers\optionconverter.hpp,typedef std::shared_ptr<Object> ObjectPtr;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2585,64365,Class,4,LOG4CXX_NS.helpers.Class,,main\include\log4cxx\helpers\optionconverter.hpp,class Class,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2586,64376,ByteBuffer,4,LOG4CXX_NS.helpers.ByteBuffer,,main\include\log4cxx\helpers\outputstream.hpp,class ByteBuffer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2587,64403,apr_pool_t,4,apr_pool_t,,main\include\log4cxx\helpers\pool.hpp,struct apr_pool_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2588,64472,Locale,4,LOG4CXX_NS.helpers.Locale,,main\include\log4cxx\helpers\resourcebundle.hpp,class Locale,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2589,64473,ResourceBundle,4,LOG4CXX_NS.helpers.ResourceBundle,,main\include\log4cxx\helpers\resourcebundle.hpp,class ResourceBundle,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2590,64487,ServerSocket,4,LOG4CXX_NS.helpers.ServerSocket,,main\include\log4cxx\helpers\serversocket.hpp,class ServerSocket,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2591,64507,PatternToken,4,LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken,,main\include\log4cxx\helpers\simpledateformat.hpp,class PatternToken,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2592,64521,ByteBuffer,4,LOG4CXX_NS.helpers.ByteBuffer,,main\include\log4cxx\helpers\socket.hpp,class ByteBuffer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2593,64522,Socket,4,LOG4CXX_NS.helpers.Socket,,main\include\log4cxx\helpers\socket.hpp,class Socket,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2594,64561,StrictMath,4,LOG4CXX_NS.helpers.StrictMath,,main\include\log4cxx\helpers\strictmath.hpp,"class StrictMath
{
	public:
		template<typename _type> static inline const _type&
		minimum(const _type& a, const _type& b)
		{
			return (a < b) ? a : b;
		}

		template<typename _type> static inline const _type&
		maximum(const _type& a, const _type& b)
		{
			return (a > b) ? a : b;
		}
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2595,64599,Pool,4,LOG4CXX_NS.helpers.Pool,,main\include\log4cxx\helpers\stringhelper.hpp,class Pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2596,64638,Properties,4,LOG4CXX_NS.helpers.Properties,,main\include\log4cxx\helpers\system.hpp,class Properties,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2597,64674,apr_threadkey_t,4,apr_threadkey_t,,main\include\log4cxx\helpers\threadlocal.hpp,struct apr_threadkey_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2598,64707,ThreadStartPre,4,ThreadStartPre,,main\include\log4cxx\helpers\threadutility.hpp,typedef std::function<void()> ThreadStartPre;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2599,64708,ThreadStarted,4,ThreadStarted,,main\include\log4cxx\helpers\threadutility.hpp,"typedef std::function<void( LogString threadName,
	std::thread::id threadId,
	std::thread::native_handle_type nativeHandle )> ThreadStarted;",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2600,64709,ThreadStartPost,4,ThreadStartPost,,main\include\log4cxx\helpers\threadutility.hpp,typedef std::function<void()> ThreadStartPost;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2601,64710,ThreadConfigurationType,4,LOG4CXX_NS.helpers.ThreadConfigurationType,,main\include\log4cxx\helpers\threadutility.hpp,"enum class ThreadConfigurationType
{
	NoConfiguration,
	BlockSignalsOnly,
	NameThreadOnly,
	BlockSignalsAndNameThread,
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2602,64715,ThreadUtility,4,LOG4CXX_NS.helpers.ThreadUtility,,main\include\log4cxx\helpers\threadutility.hpp,class ThreadUtility,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2603,64727,apr_time_exp_t,4,apr_time_exp_t,,main\include\log4cxx\helpers\timezone.hpp,struct apr_time_exp_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2604,64730,TimeZone,4,LOG4CXX_NS.helpers.TimeZone,,main\include\log4cxx\helpers\timezone.hpp,class TimeZone,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2605,64742,ByteBuffer,4,LOG4CXX_NS.helpers.ByteBuffer,,main\include\log4cxx\helpers\transcoder.hpp,class ByteBuffer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2606,64743,Pool,4,LOG4CXX_NS.helpers.Pool,,main\include\log4cxx\helpers\transcoder.hpp,class Pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2607,64766,WideLife,4,LOG4CXX_NS.helpers.WideLife,,main\include\log4cxx\helpers\widelife.hpp,"class WideLife
{
public:
	WideLife()
	{		
		new(&storage) T();
	}
	template <class Arg0, class... Args>
#if defined(__cpp_concepts) && __cpp_concepts >= 201500
		requires (!std::same_as<WideLife, Arg0>)
#endif
	WideLife(Arg0&& arg0, Args&&... args)
	{		
		new(&storage) T(std::forward<Arg0>(arg0), std::forward<Args>(args)...);
	}
	
	~WideLife()
	{
#if LOG4CXX_EVENTS_AT_EXIT
		// keep the holded value alive
#else
		value().~T();
#endif
	}

	T& value()
	{
		return *reinterpret_cast<T*>(&storage);
	}
	
	const T& value() const
	{
		return *reinterpret_cast<const T*>(&storage);
	}
	
	operator T&()
	{
		return value();
	}
	
	operator const T&() const
	{
		return value();
	}

private:
	alignas(T) char storage[sizeof(T)];
	// Non-copyable
	WideLife(const WideLife& other) = delete;
	WideLife(const WideLife&& other) = delete;
	// Non-assignable
	WideLife& operator=(const WideLife& other) = delete;
	WideLife& operator=(const WideLife&& other) = delete;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2608,64892,File,4,LOG4CXX_NS.File,,main\include\log4cxx\helpers\xml.hpp,class File,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2609,64894,XMLDOMNode,4,LOG4CXX_NS.helpers.XMLDOMNode,,main\include\log4cxx\helpers\xml.hpp,class XMLDOMNode,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2610,64895,XMLDOMNodePtr,4,XMLDOMNodePtr,,main\include\log4cxx\helpers\xml.hpp,typedef std::shared_ptr<XMLDOMNode> XMLDOMNodePtr;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2611,64896,XMLDOMDocument,4,LOG4CXX_NS.helpers.XMLDOMDocument,,main\include\log4cxx\helpers\xml.hpp,class XMLDOMDocument,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2612,64897,XMLDOMDocumentPtr,4,XMLDOMDocumentPtr,,main\include\log4cxx\helpers\xml.hpp,typedef std::shared_ptr<XMLDOMDocument> XMLDOMDocumentPtr;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2613,64898,XMLDOMNodeList,4,LOG4CXX_NS.helpers.XMLDOMNodeList,,main\include\log4cxx\helpers\xml.hpp,class XMLDOMNodeList,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2614,64899,XMLDOMNodeListPtr,4,XMLDOMNodeListPtr,,main\include\log4cxx\helpers\xml.hpp,typedef std::shared_ptr<XMLDOMNodeList> XMLDOMNodeListPtr;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2615,64919,HexdumpFlags,4,LOG4CXX_NS.HexdumpFlags,,main\include\log4cxx\hexdump.hpp,"enum class HexdumpFlags : uint32_t{
	None,
	AddStartingNewline = (0x01 << 0),
	AddEndingNewline = (0x01 << 1),
	AddNewline = AddStartingNewline | AddEndingNewline,
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2616,65005,Hierarchy,4,LOG4CXX_NS.Hierarchy,,main\include\log4cxx\hierarchy.hpp,class Hierarchy,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2617,65062,Level,4,LOG4CXX_NS.Level,,main\include\log4cxx\level.hpp,class Level,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2618,65063,LevelPtr,4,LevelPtr,,main\include\log4cxx\level.hpp,typedef std::shared_ptr<Level> LevelPtr;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2619,65075,LevelChange,4,LOG4CXX_NS.LevelChange,,main\include\log4cxx\levelchange.hpp,"class LevelChange
{
	LoggerPtr m_otherCategory;
	LevelPtr m_savedLevel;
public: // ...structors
	/// Set \c otherCategory to \c level
	LevelChange(const LoggerPtr& otherCategory, const LevelPtr& level)
		: m_otherCategory(otherCategory)
		, m_savedLevel(otherCategory->getLevel())
	{
		m_otherCategory->setLevel(level);
	}
	/// Set \c otherCategory to the level of \c thisCategory
	LevelChange(const LoggerPtr& otherCategory, const LoggerPtr& thisCategory)
		: LevelChange(otherCategory, m_otherCategory->getLevel())
	{
	}
	/// Set the logger named \c otherCategory to \c level
	template <class StringType>
	LevelChange(const StringType& otherCategory, const LevelPtr& level)
		: LevelChange(LogManager::getLogger(otherCategory), level)
	{
	}
	/// Set the logger named \c otherCategory to the level of \c thisCategory
	template <class StringType>
	LevelChange(const StringType& otherCategory, const LoggerPtr& thisCategory)
		: LevelChange(LogManager::getLogger(otherCategory), thisCategory->getLe...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2620,65163,LoggerRepository,4,LOG4CXX_NS.spi.LoggerRepository,,main\include\log4cxx\logger.hpp,class LoggerRepository,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2621,65165,LoggerFactory,4,LOG4CXX_NS.spi.LoggerFactory,,main\include\log4cxx\logger.hpp,class LoggerFactory,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2622,65167,Logger,4,LOG4CXX_NS.Logger,,main\include\log4cxx\logger.hpp,class Logger,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2623,65182,LoggerInstancePtr,4,LOG4CXX_NS.LoggerInstancePtr,,main\include\log4cxx\loggerinstance.hpp,"class LoggerInstancePtr
{
	bool m_hadConfiguration; //!< Did the logger repository hold a \c m_logger before creation of this instance?
	LoggerPtr m_logger;
public: // ...structors
	/// A null LoggerPtr
	LoggerInstancePtr() : m_hadConfiguration(false)
	{}
	/// A separately configurable logger named \c instanceName
	template <class StringType>
	LoggerInstancePtr(const StringType& instanceName)
		: m_hadConfiguration(LogManager::exists(instanceName))
		, m_logger(LogManager::getLogger(instanceName))
	{
	}
	/// Conditionally remove the logger from the the spi::LoggerRepository
	~LoggerInstancePtr()
	{
		reset();
	}

	const LoggerPtr& operator->() const noexcept
	{
		return m_logger;
	}

	explicit operator bool() const noexcept
	{
		return !!m_logger;
	}

	operator LoggerPtr&() noexcept
	{
		return m_logger;
	}

	operator const LoggerPtr&() const noexcept
	{
		return m_logger;
	}

	Logger* get() noexcept
	{
		return m_logger.get();
	}

	const Logger* get() const noexcept
	{
		return m_l...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2624,65312,Logger,4,LOG4CXX_NS.Logger,,main\include\log4cxx\logmanager.hpp,class Logger,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2625,65313,LoggerPtr,4,LoggerPtr,,main\include\log4cxx\logmanager.hpp,typedef std::shared_ptr<Logger> LoggerPtr;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2626,65314,LoggerList,4,LoggerList,,main\include\log4cxx\logmanager.hpp,typedef std::vector<LoggerPtr> LoggerList;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2627,65316,LoggerFactory,4,LOG4CXX_NS.spi.LoggerFactory,,main\include\log4cxx\logmanager.hpp,class LoggerFactory,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2628,65317,LoggerFactoryPtr,4,LoggerFactoryPtr,,main\include\log4cxx\logmanager.hpp,typedef std::shared_ptr<LoggerFactory> LoggerFactoryPtr;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2629,65331,LogString,4,LogString,,main\include\log4cxx\logstring.hpp,typedef std::basic_string<logchar> LogString;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2630,65421,ByteBuffer,4,LOG4CXX_NS.helpers.ByteBuffer,,main\include\log4cxx\net\telnetappender.hpp,class ByteBuffer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2631,65423,Connection,4,Connection,,main\include\log4cxx\net\telnetappender.hpp,typedef LOG4CXX_NS::helpers::SocketPtr Connection;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2632,65539,FormattingInfo,4,LOG4CXX_NS.pattern.FormattingInfo,,main\include\log4cxx\pattern\formattinginfo.hpp,class FormattingInfo,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2633,65540,FormattingInfoPtr,4,FormattingInfoPtr,,main\include\log4cxx\pattern\formattinginfo.hpp,typedef std::shared_ptr<FormattingInfo> FormattingInfoPtr;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2634,65668,NameAbbreviator,4,LOG4CXX_NS.pattern.NameAbbreviator,,main\include\log4cxx\pattern\nameabbreviator.hpp,class NameAbbreviator,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2635,65708,OptionsList,4,OptionsList,,main\include\log4cxx\pattern\patternconverter.hpp,typedef std::vector<LogString> OptionsList;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2636,65730,PatternConstructor,4,PatternConstructor,,main\include\log4cxx\pattern\patternparser.hpp,typedef std::function<PatternConverterPtr(const std::vector<LogString>& options)> PatternConstructor;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2637,65731,PatternMap,4,PatternMap,,main\include\log4cxx\pattern\patternparser.hpp,"typedef std::map<LogString, PatternConstructor> PatternMap;",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2638,65822,ActionPrivate,4,LOG4CXX_NS.rolling.ActionPrivate,,main\include\log4cxx\private\action_priv.hpp,"struct Action::ActionPrivate
{
	ActionPrivate() :
		complete(false),
		interrupted(false),
		pool() {}

	virtual ~ActionPrivate(){}

	/**
	 * Is action complete.
	 */
	bool complete;

	/**
	 * Is action interrupted.
	 */
	bool interrupted;

	LOG4CXX_NS::helpers::Pool pool;
	std::mutex mutex;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2639,65847,AppenderSkeletonPrivate,4,LOG4CXX_NS.AppenderSkeletonPrivate,,main\include\log4cxx\private\appenderskeleton_priv.hpp,"struct AppenderSkeleton::AppenderSkeletonPrivate
{
	AppenderSkeletonPrivate() :
		threshold(Level::getAll()),
		errorHandler(std::make_shared<LOG4CXX_NS::helpers::OnlyOnceErrorHandler>()),
		closed(false) {}

	AppenderSkeletonPrivate( LayoutPtr lay ) :
		layout( lay ),
		threshold(Level::getAll()),
		errorHandler(std::make_shared<LOG4CXX_NS::helpers::OnlyOnceErrorHandler>()),
		closed(false) {}

	virtual ~AppenderSkeletonPrivate(){}

	/** The layout variable does not need to be set if the appender
	implementation has its own layout. */
	LayoutPtr layout;

	/** Appenders are named. */
	LogString name;

	/**
	There is no level threshold filtering by default.  */
	LevelPtr threshold;

	/**
	It is assumed and enforced that errorHandler is never null.
	*/
	spi::ErrorHandlerPtr errorHandler;

	/** The first filter in the filter chain. Set to <code>null</code>
	initially. */
	spi::FilterPtr headFilter;

	/** The last filter in the filter chain. */
	spi::FilterPtr tailFilter;

	/**
	Is this...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2640,65879,APRDatagramSocket,4,LOG4CXX_NS.helpers.APRDatagramSocket,,main\include\log4cxx\private\aprdatagramsocket.hpp,"class APRDatagramSocket : public DatagramSocket {
    private:
        struct APRDatagramSocketPriv;

    public:
	APRDatagramSocket();

	APRDatagramSocket(int port);

	APRDatagramSocket(int port, InetAddressPtr laddr);

	void bind(int lport, InetAddressPtr laddress) override;

	void close() override;

	bool isClosed() const override;

	/**  Receives a datagram packet from this socket. */
	virtual void receive(DatagramPacketPtr& p) override;

	/** Sends a datagram packet from this socket. */
	virtual void  send(DatagramPacketPtr& p) override;

	virtual void connect(InetAddressPtr address, int port) override;

    private:
	void init();
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2641,65880,APRDatagramSocketPriv,4,LOG4CXX_NS.helpers.APRDatagramSocket.APRDatagramSocketPriv,,main\include\log4cxx\private\aprdatagramsocket.hpp,struct APRDatagramSocketPriv,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2642,65947,apr_socket_t,4,apr_socket_t,,main\include\log4cxx\private\aprsocket.hpp,struct apr_socket_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2643,65972,DatagramSocketPriv,4,LOG4CXX_NS.helpers.DatagramSocketPriv,,main\include\log4cxx\private\datagramsocket_priv.hpp,"struct DatagramSocket::DatagramSocketPriv
{
	DatagramSocketPriv()
		: port(0), localPort(0)
	{
	}

	DatagramSocketPriv(int localPort1)
		: port(0), localPort(localPort1)
	{
	}

	DatagramSocketPriv(int localPort1, InetAddressPtr localAddress1)
		: localAddress(localAddress1), port(0), localPort(localPort1)
	{
	}

	~DatagramSocketPriv() = default;

	InetAddressPtr address;

	InetAddressPtr localAddress;

	int port;

	/** The local port number to which this socket is connected. */
	int localPort;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2644,66006,FileAppenderPriv,4,LOG4CXX_NS.FileAppenderPriv,,main\include\log4cxx\private\fileappender_priv.hpp,"struct FileAppender::FileAppenderPriv : public WriterAppender::WriterAppenderPriv
{
	FileAppenderPriv
		( LayoutPtr _layout = LayoutPtr()
		, const LogString& _fileName = LogString()
		, bool _fileAppend = true
		, bool _bufferedIO = false
		, int _bufferSize = 8 * 1024
		)
		: WriterAppenderPriv(_layout)
		, fileAppend(_fileAppend)
		, fileName(_fileName)
		, bufferedIO(_bufferedIO)
		, bufferSize(_bufferSize)
		{}

	/** Append to or truncate the file? The default value for this
	variable is <code>true</code>, meaning that by default a
	<code>FileAppender</code> will append to an existing file and
	not truncate it.
	<p>This option is meaningful only if the FileAppender opens the
	file.
	*/
	bool fileAppend;

	/**
	The name of the log file. */
	LogString fileName;

	/**
	Do we do bufferedIO? */
	bool bufferedIO;

	/**
	How big should the IO buffer be? Default is 8K. */
	int bufferSize;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2645,66029,FilterPrivate,4,LOG4CXX_NS.spi.FilterPrivate,,main\include\log4cxx\private\filter_priv.hpp,"struct Filter::FilterPrivate
{
	virtual ~FilterPrivate(){}

	/**
	Points to the next filter in the filter chain.
	*/
	FilterPtr next;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2646,66059,SQLHSTMT,4,SQLHSTMT,,main\include\log4cxx\private\odbcappender_priv.hpp,typedef void* SQLHSTMT;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2647,66060,SQLPOINTER,4,SQLPOINTER,,main\include\log4cxx\private\odbcappender_priv.hpp,typedef void* SQLPOINTER;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2648,66061,SQLULEN,4,SQLULEN,,main\include\log4cxx\private\odbcappender_priv.hpp,typedef uint64_t SQLULEN;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2649,66062,SQLLEN,4,SQLLEN,,main\include\log4cxx\private\odbcappender_priv.hpp,typedef int64_t SQLLEN;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2650,66063,SQLINTEGER,4,SQLINTEGER,,main\include\log4cxx\private\odbcappender_priv.hpp,typedef long SQLINTEGER;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2651,66064,SQLSMALLINT,4,SQLSMALLINT,,main\include\log4cxx\private\odbcappender_priv.hpp,typedef short SQLSMALLINT;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2652,66067,ODBCAppenderPriv,4,LOG4CXX_NS.db.ODBCAppenderPriv,,main\include\log4cxx\private\odbcappender_priv.hpp,"struct ODBCAppender::ODBCAppenderPriv : public AppenderSkeleton::AppenderSkeletonPrivate
{
	ODBCAppenderPriv(
#if LOG4CXX_EVENTS_AT_EXIT
		std::function<void()> atExitActivated
#endif
			)
		: AppenderSkeletonPrivate()
		, connection(0)
		, env(0)
		, preparedStatement(0)
		, bufferSize(1)
		, timeZone(helpers::TimeZone::getDefault())
#if LOG4CXX_EVENTS_AT_EXIT
		, atExitRegistryRaii(std::move(atExitActivated))
#endif
		{}

	/**
	* URL of the DB for default connection handling
	*/
	LogString databaseURL;

	/**
	* User to connect as for default connection handling
	*/
	LogString databaseUser;

	/**
	* User to use for default connection handling
	*/
	LogString databasePassword;

	/**
	* Connection used by default.  The connection is opened the first time it
	* is needed and then held open until the appender is closed (usually at
	* garbage collection).  This behavior is best modified by creating a
	* sub-class and overriding the <code>getConnection</code> and
	* <code>closeConnection<...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2653,66082,DataBinding,4,LOG4CXX_NS.db.ODBCAppenderPriv.DataBinding,,main\include\log4cxx\private\odbcappender_priv.hpp,"struct DataBinding
	{
		using ConverterPtr = pattern::LoggingEventPatternConverterPtr;
		ConverterPtr converter;
		SQLSMALLINT  paramType;
		SQLULEN      paramMaxCharCount;
		SQLPOINTER   paramValue;
		SQLINTEGER   paramValueSize;
		SQLLEN       strLen_or_Ind;
	}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2654,66083,ConverterPtr,4,ConverterPtr,,main\include\log4cxx\private\odbcappender_priv.hpp,using ConverterPtr = pattern::LoggingEventPatternConverterPtr;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2655,66114,PatternConverterPrivate,4,LOG4CXX_NS.pattern.PatternConverterPrivate,,main\include\log4cxx\private\patternconverter_priv.hpp,"struct PatternConverter::PatternConverterPrivate
{
	PatternConverterPrivate( const LogString& _name, const LogString& _style ) :
		name(_name),
		style(_style) {}

	virtual ~PatternConverterPrivate(){}

	/**
	 * Converter name.
	 */
	const LogString name;
	/**
	 * Converter style name.
	 */
	const LogString style;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2656,66142,RollingPolicyBasePrivate,4,LOG4CXX_NS.rolling.RollingPolicyBasePrivate,,main\include\log4cxx\private\rollingpolicybase_priv.hpp,"struct RollingPolicyBase::RollingPolicyBasePrivate {
    virtual ~RollingPolicyBasePrivate() = default;

    /**
     * File name pattern converters.
     */
    PatternConverterList patternConverters;

    /**
     * File name field specifiers.
     */
    FormattingInfoList patternFields;

    /**
     * File name pattern.
     */
    LogString fileNamePatternStr;

	bool createIntermediateDirectories = true;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2657,66167,ServerSocketPrivate,4,LOG4CXX_NS.helpers.ServerSocketPrivate,,main\include\log4cxx\private\serversocket_priv.hpp,"struct ServerSocket::ServerSocketPrivate{
	ServerSocketPrivate() :
		timeout(0){}
	virtual ~ServerSocketPrivate() = default;
	int timeout;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2658,66186,SocketPrivate,4,LOG4CXX_NS.helpers.SocketPrivate,,main\include\log4cxx\private\socket_priv.hpp,"struct Socket::SocketPrivate
{
	SocketPrivate(const InetAddressPtr& addr = InetAddressPtr(), int _port = 0)
		: address(addr), port(_port) {}
	virtual ~SocketPrivate() = default;
	/** The IP address of the remote end of this socket. */
	InetAddressPtr address;

	/** The port number on the remote host to which
	this socket is connected. */
	int port;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2659,66212,SocketAppenderSkeletonPriv,4,LOG4CXX_NS.net.SocketAppenderSkeletonPriv,,main\include\log4cxx\private\socketappenderskeleton_priv.hpp,"struct SocketAppenderSkeleton::SocketAppenderSkeletonPriv : public AppenderSkeletonPrivate
{
	SocketAppenderSkeletonPriv(int defaultPort, int reconnectionDelay) :
		AppenderSkeletonPrivate(),
		remoteHost(),
		address(),
		port(defaultPort),
		reconnectionDelay(reconnectionDelay),
		locationInfo(false),
		thread() {}

	SocketAppenderSkeletonPriv(helpers::InetAddressPtr address, int defaultPort, int reconnectionDelay) :
		AppenderSkeletonPrivate(),
		remoteHost(),
		address(address),
		port(defaultPort),
		reconnectionDelay(reconnectionDelay),
		locationInfo(false),
		thread() {}

	SocketAppenderSkeletonPriv(const LogString& host, int port, int delay) :
		AppenderSkeletonPrivate(),
		remoteHost(host),
		address(helpers::InetAddress::getByName(host)),
		port(port),
		reconnectionDelay(delay),
		locationInfo(false),
		thread() {}

	/**
	host name
	*/
	LogString remoteHost;

	/**
	IP address
	*/
	helpers::InetAddressPtr address;

	int port;
	int reconnectionDelay;
	bool locationInfo;
	s...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2660,66384,SyslogAppenderPriv,4,LOG4CXX_NS.net.SyslogAppenderPriv,,main\include\log4cxx\private\syslogappender_priv.hpp,"struct SyslogAppender::SyslogAppenderPriv : public AppenderSkeleton::AppenderSkeletonPrivate
{
	SyslogAppenderPriv() :
		AppenderSkeletonPrivate(),
		syslogFacility(LOG_USER),
		facilityPrinting(false),
		maxMessageLength(1024)
	{

	}

	SyslogAppenderPriv(const LayoutPtr& layout, int syslogFacility) :
		AppenderSkeletonPrivate (layout),
		syslogFacility(syslogFacility),
		facilityPrinting(false),
		maxMessageLength(1024)
	{

	}

	SyslogAppenderPriv(const LayoutPtr& layout,
		const LogString& syslogHost, int syslogFacility) :
		AppenderSkeletonPrivate(layout),
		syslogFacility(syslogFacility),
		facilityPrinting(false),
		maxMessageLength(1024)
	{

	}

	int syslogFacility; // Have LOG_USER as default
	LogString facilityStr;
	bool facilityPrinting;
	std::unique_ptr<helpers::SyslogWriter> sw;
	LogString syslogHost;
	int syslogHostPort;
	int maxMessageLength;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2661,66425,WriterAppenderPriv,4,LOG4CXX_NS.WriterAppenderPriv,,main\include\log4cxx\private\writerappender_priv.hpp,"struct WriterAppender::WriterAppenderPriv : public AppenderSkeleton::AppenderSkeletonPrivate
{
	WriterAppenderPriv() :
		AppenderSkeletonPrivate(),
		immediateFlush(true)
#if LOG4CXX_EVENTS_AT_EXIT
		, atExitRegistryRaii([this]{atExitActivated();})
#endif
	{
	}

	WriterAppenderPriv(const LayoutPtr& layout1,
		LOG4CXX_NS::helpers::WriterPtr& writer1) :
		AppenderSkeletonPrivate(layout1),
		immediateFlush(true),
		writer(writer1)
#if LOG4CXX_EVENTS_AT_EXIT
		, atExitRegistryRaii([this]{atExitActivated();})
#endif
	{
	}

	WriterAppenderPriv(const LayoutPtr& layout1) :
		AppenderSkeletonPrivate(layout1),
		immediateFlush(true)
#if LOG4CXX_EVENTS_AT_EXIT
		, atExitRegistryRaii([this]{atExitActivated();})
#endif
	{
	}

#if LOG4CXX_EVENTS_AT_EXIT
	void atExitActivated()
	{
		std::lock_guard<std::recursive_mutex> lock(mutex);
		if (writer)
			writer->flush(pool);
	}
#endif

	/**
	Immediate flush means that the underlying writer or output stream
	will be flushed at the end of each append ope...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2662,66465,Logger,4,LOG4CXX_NS.Logger,,main\include\log4cxx\propertyconfigurator.hpp,class Logger,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2663,66466,LoggerPtr,4,LoggerPtr,,main\include\log4cxx\propertyconfigurator.hpp,typedef std::shared_ptr<Logger> LoggerPtr;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2664,66467,Appender,4,LOG4CXX_NS.Appender,,main\include\log4cxx\propertyconfigurator.hpp,class Appender,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2665,66468,AppenderPtr,4,AppenderPtr,,main\include\log4cxx\propertyconfigurator.hpp,typedef std::shared_ptr<Appender> AppenderPtr;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2666,66470,Properties,4,LOG4CXX_NS.helpers.Properties,,main\include\log4cxx\propertyconfigurator.hpp,class Properties,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2667,66472,LoggerFactory,4,LOG4CXX_NS.spi.LoggerFactory,,main\include\log4cxx\propertyconfigurator.hpp,class LoggerFactory,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2668,66473,LoggerFactoryPtr,4,LoggerFactoryPtr,,main\include\log4cxx\propertyconfigurator.hpp,typedef std::shared_ptr<LoggerFactory> LoggerFactoryPtr;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2669,66474,PropertyWatchdog,4,LOG4CXX_NS.PropertyWatchdog,,main\include\log4cxx\propertyconfigurator.hpp,class PropertyWatchdog,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2670,66488,Logger,4,LOG4CXX_NS.Logger,,main\include\log4cxx\provisionnode.hpp,class Logger,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2671,66489,LoggerPtr,4,LoggerPtr,,main\include\log4cxx\provisionnode.hpp,typedef std::shared_ptr<Logger> LoggerPtr;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2672,66490,ProvisionNode,4,ProvisionNode,,main\include\log4cxx\provisionnode.hpp,typedef std::vector<LoggerPtr> ProvisionNode;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2673,66506,Action,4,LOG4CXX_NS.rolling.Action,,main\include\log4cxx\rolling\action.hpp,"class Action : public virtual LOG4CXX_NS::helpers::Object
{
		DECLARE_ABSTRACT_LOG4CXX_OBJECT(Action)
		BEGIN_LOG4CXX_CAST_MAP()
		LOG4CXX_CAST_ENTRY(Action)
		END_LOG4CXX_CAST_MAP()

		LOG4CXX_DECLARE_PRIVATE_MEMBER_PTR(ActionPrivate, m_priv)

	protected:
		/**
		 * Constructor.
		 */
		Action();
		Action(LOG4CXX_PRIVATE_PTR(ActionPrivate) priv);
		virtual ~Action();

	public:
		/**
		 * Perform action.
		 *
		 * @return true if successful.
		 */
		virtual bool execute(LOG4CXX_NS::helpers::Pool& pool) const = 0;

		void run(LOG4CXX_NS::helpers::Pool& pool);

		void close();

		/**
		 * Tests if the action is complete.
		 * @return true if action is complete.
		 */
		bool isComplete() const;

		void reportException(const std::exception&);


}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2674,66550,FileRenameAction,4,LOG4CXX_NS.rolling.FileRenameAction,,main\include\log4cxx\rolling\filerenameaction.hpp,"class FileRenameAction : public Action
{
		struct FileRenameActionPrivate;
	public:
		DECLARE_ABSTRACT_LOG4CXX_OBJECT(FileRenameAction)
		BEGIN_LOG4CXX_CAST_MAP()
		LOG4CXX_CAST_ENTRY(FileRenameAction)
		LOG4CXX_CAST_ENTRY_CHAIN(Action)
		END_LOG4CXX_CAST_MAP()

		/**
		 * Constructor.
		 */
		FileRenameAction(const File& toRename,
			const File& renameTo,
			bool renameEmptyFile);

		/**
		 * Perform action.
		 *
		 * @return true if successful.
		 */
		bool execute(LOG4CXX_NS::helpers::Pool& pool) const override;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2675,66551,FileRenameActionPrivate,4,LOG4CXX_NS.rolling.FileRenameAction.FileRenameActionPrivate,,main\include\log4cxx\rolling\filerenameaction.hpp,struct FileRenameActionPrivate,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2676,66572,File,4,LOG4CXX_NS.File,,main\include\log4cxx\rolling\filterbasedtriggeringpolicy.hpp,class File,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2677,66574,Pool,4,LOG4CXX_NS.helpers.Pool,,main\include\log4cxx\rolling\filterbasedtriggeringpolicy.hpp,class Pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2678,66587,Pool,4,LOG4CXX_NS.helpers.Pool,,main\include\log4cxx\rolling\fixedwindowrollingpolicy.hpp,class Pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2679,66602,GZCompressAction,4,LOG4CXX_NS.rolling.GZCompressAction,,main\include\log4cxx\rolling\gzcompressaction.hpp,"class GZCompressAction : public Action
{
		struct GZCompressActionPrivate;
	public:
		DECLARE_ABSTRACT_LOG4CXX_OBJECT(GZCompressAction)
		BEGIN_LOG4CXX_CAST_MAP()
		LOG4CXX_CAST_ENTRY(GZCompressAction)
		LOG4CXX_CAST_ENTRY_CHAIN(Action)
		END_LOG4CXX_CAST_MAP()

		/**
		 * Constructor.
		 */
		GZCompressAction(const File& source,
			const File& destination,
			bool deleteSource);
		~GZCompressAction();

		/**
		 * Perform action.
		 *
		 * @return true if successful.
		 */
		bool execute(LOG4CXX_NS::helpers::Pool& pool) const override;

		/**
		 * Set to true to throw an IOException on a fork failure.  By default, this
		 * is true.  When an IOException is thrown, this will automatically cause the
		 * error handler to be called(which is the recommended way of handling this
		 * problem).  By setting this to false, the GZCompressAction effectively
		 * turns into a FileRenameAction if any errors are encountered.
		 *
		 * @param throwIO
		 */
		void setThrowIOExceptionOnForkFailure(...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2680,66603,GZCompressActionPrivate,4,LOG4CXX_NS.rolling.GZCompressAction.GZCompressActionPrivate,,main\include\log4cxx\rolling\gzcompressaction.hpp,struct GZCompressActionPrivate,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2681,66640,File,4,LOG4CXX_NS.File,,main\include\log4cxx\rolling\manualtriggeringpolicy.hpp,class File,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2682,66642,Pool,4,LOG4CXX_NS.helpers.Pool,,main\include\log4cxx\rolling\manualtriggeringpolicy.hpp,class Pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2683,66736,RolloverDescription,4,LOG4CXX_NS.rolling.RolloverDescription,,main\include\log4cxx\rolling\rolloverdescription.hpp,"class RolloverDescription : public LOG4CXX_NS::helpers::Object
{
		DECLARE_LOG4CXX_OBJECT(RolloverDescription)
		BEGIN_LOG4CXX_CAST_MAP()
		LOG4CXX_CAST_ENTRY(RolloverDescription)
		END_LOG4CXX_CAST_MAP()

		LOG4CXX_DECLARE_PRIVATE_MEMBER_PTR(RolloverDescriptionPrivate, m_priv)

	public:
		RolloverDescription();
		/**
		 * Create new instance.
		 * @param activeFileName active log file name after rollover, may not be null.
		 * @param append true if active log file after rollover should be opened for appending.
		 * @param synchronous action to be completed after close of current active log file, may be null.
		 * @param asynchronous action to be completed after close of current active log file and
		 * before next rollover attempt.
		 */
		RolloverDescription(
			const LogString& activeFileName,
			const bool append,
			const ActionPtr& synchronous,
			const ActionPtr& asynchronous);

		~RolloverDescription();

		/**
		 * Active log file name after rollover.
		 * @return active log...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2684,66777,File,4,LOG4CXX_NS.File,,main\include\log4cxx\rolling\sizebasedtriggeringpolicy.hpp,class File,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2685,66779,Pool,4,LOG4CXX_NS.helpers.Pool,,main\include\log4cxx\rolling\sizebasedtriggeringpolicy.hpp,class Pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2686,66816,File,4,LOG4CXX_NS.File,,main\include\log4cxx\rolling\triggeringpolicy.hpp,class File,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2687,66831,ZipCompressAction,4,LOG4CXX_NS.rolling.ZipCompressAction,,main\include\log4cxx\rolling\zipcompressaction.hpp,"class ZipCompressAction : public Action
{
		struct ZipCompressActionPrivate;
	public:
		DECLARE_ABSTRACT_LOG4CXX_OBJECT(ZipCompressAction)
		BEGIN_LOG4CXX_CAST_MAP()
		LOG4CXX_CAST_ENTRY(ZipCompressAction)
		LOG4CXX_CAST_ENTRY_CHAIN(Action)
		END_LOG4CXX_CAST_MAP()

		/**
		 * Constructor.
		 */
		ZipCompressAction(const File& source,
			const File& destination,
			bool deleteSource);

		/**
		 * Perform action.
		 *
		 * @return true if successful.
		 */
		bool execute(LOG4CXX_NS::helpers::Pool& pool) const override;

		/**
		 * Set to true to throw an IOException on a fork failure.  By default, this
		 * is true.  When an IOException is thrown, this will automatically cause the
		 * error handler to be called(which is the recommended way of handling this
		 * problem).  By setting this to false, the ZipCompressAction effectively
		 * turns into a FileRenameAction if any errors are encountered.
		 *
		 * @param throwIO
		 */
		void setThrowIOExceptionOnForkFailure(bool throwIO);

	...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2688,66832,ZipCompressActionPrivate,4,LOG4CXX_NS.rolling.ZipCompressAction.ZipCompressActionPrivate,,main\include\log4cxx\rolling\zipcompressaction.hpp,struct ZipCompressActionPrivate,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2689,66892,File,4,LOG4CXX_NS.File,,main\include\log4cxx\spi\configurator.hpp,class File,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2690,66894,ConfigurationStatus,4,LOG4CXX_NS.spi.ConfigurationStatus,,main\include\log4cxx\spi\configurator.hpp,"enum class ConfigurationStatus{
	Configured,
	NotConfigured,
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2691,66930,ErrorCode,4,LOG4CXX_NS.spi.ErrorCode,,main\include\log4cxx\spi\errorhandler.hpp,"class ErrorCode
{
	public:
		enum
		{
			GENERIC_FAILURE = 0,
			WRITE_FAILURE = 1,
			FLUSH_FAILURE = 2,
			CLOSE_FAILURE = 3,
			FILE_OPEN_FAILURE = 4,
			MISSING_LAYOUT = 5,
			ADDRESS_PARSE_FAILURE = 6
		};
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2692,66931,anonymous_enum_0,4,LOG4CXX_NS.spi.ErrorCode.anonymous_enum_0,,main\include\log4cxx\spi\errorhandler.hpp,"enum
		{
			GENERIC_FAILURE = 0,
			WRITE_FAILURE = 1,
			FLUSH_FAILURE = 2,
			CLOSE_FAILURE = 3,
			FILE_OPEN_FAILURE = 4,
			MISSING_LAYOUT = 5,
			ADDRESS_PARSE_FAILURE = 6
		}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2693,66979,Filter,4,LOG4CXX_NS.spi.Filter,,main\include\log4cxx\spi\filter.hpp,class Filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2694,66992,Logger,4,LOG4CXX_NS.Logger,,main\include\log4cxx\spi\hierarchyeventlistener.hpp,class Logger,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2695,66993,Appender,4,LOG4CXX_NS.Appender,,main\include\log4cxx\spi\hierarchyeventlistener.hpp,class Appender,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2696,67063,ObjectOutputStream,4,LOG4CXX_NS.helpers.ObjectOutputStream,,main\include\log4cxx\spi\loggingevent.hpp,class ObjectOutputStream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2697,67080,OptionHandler,4,LOG4CXX_NS.spi.OptionHandler,,main\include\log4cxx\spi\optionhandler.hpp,class OptionHandler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2698,67081,OptionHandlerPtr,4,OptionHandlerPtr,,main\include\log4cxx\spi\optionhandler.hpp,typedef std::shared_ptr<OptionHandler> OptionHandlerPtr;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2699,67092,LoggerRepository,4,LOG4CXX_NS.spi.LoggerRepository,,main\include\log4cxx\spi\repositoryselector.hpp,class LoggerRepository,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2700,67093,LoggerRepositoryPtr,4,LoggerRepositoryPtr,,main\include\log4cxx\spi\repositoryselector.hpp,typedef std::shared_ptr<LoggerRepository> LoggerRepositoryPtr;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2701,67168,Transcoder,4,LOG4CXX_NS.helpers.Transcoder,,main\include\log4cxx\writerappender.hpp,class Transcoder,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2702,67420,UniChar,4,UniChar,,main\mock-apple\CoreFoundation\CFString.hpp,typedef unsigned short UniChar;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2703,67421,CFIndex,4,CFIndex,,main\mock-apple\CoreFoundation\CFString.hpp,typedef long CFIndex;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2704,67422,__CFRange,4,__CFRange,,main\mock-apple\CoreFoundation\CFString.hpp,"typedef struct __CFRange {
	CFIndex location;
	CFIndex length;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2705,67425,CFRange,4,CFRange,,main\mock-apple\CoreFoundation\CFString.hpp,"typedef struct __CFRange {
	CFIndex location;
	CFIndex length;
} CFRange;",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2706,67426,__CFString,4,__CFString,,main\mock-apple\CoreFoundation\CFString.hpp,typedef const struct __CFString,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2707,67427,CFStringRef,4,CFStringRef,,main\mock-apple\CoreFoundation\CFString.hpp,typedef const struct __CFString* CFStringRef;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2708,67428,__CFAllocator,4,__CFAllocator,,main\mock-apple\CoreFoundation\CFString.hpp,typedef const struct __CFAllocator,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2709,67429,CFAllocatorRef,4,CFAllocatorRef,,main\mock-apple\CoreFoundation\CFString.hpp,typedef const struct __CFAllocator* CFAllocatorRef;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2710,67430,CFStringEncoding,4,CFStringEncoding,,main\mock-apple\CoreFoundation\CFString.hpp,typedef uint32_t CFStringEncoding;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2711,416,logger,2,examples\cpp\MyApp1.cpp.logger,,examples\cpp\MyApp1.cpp,static auto logger,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2712,534,rootLogger,2,examples\cpp\auto-configured.cpp.rootLogger,,examples\cpp\auto-configured.cpp,auto rootLogger,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2713,551,static_object,2,examples\cpp\auto-configured.cpp.static_object,,examples\cpp\auto-configured.cpp,struct ExampleStaticData static_object,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2714,2494,,2,main\cpp\action.cpp.nan,,main\cpp\action.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2715,2606,,2,main\cpp\andfilter.cpp.nan,,main\cpp\andfilter.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2716,2783,,2,main\cpp\appenderattachableimpl.cpp.nan,,main\cpp\appenderattachableimpl.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2717,3235,,2,main\cpp\appenderskeleton.cpp.nan,,main\cpp\appenderskeleton.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2718,4114,isDestructed,2,main\cpp\aprinitializer.cpp.isDestructed,,main\cpp\aprinitializer.cpp,bool isDestructed,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2719,5401,,2,main\cpp\asyncappender.cpp.nan,,main\cpp\asyncappender.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2720,6933,,2,main\cpp\bufferedwriter.cpp.nan,,main\cpp\bufferedwriter.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2721,7112,,2,main\cpp\bytearrayinputstream.cpp.nan,,main\cpp\bytearrayinputstream.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2722,7220,,2,main\cpp\bytearrayoutputstream.cpp.nan,,main\cpp\bytearrayoutputstream.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2723,7535,digits,2,main\cpp\cacheddateformat.cpp.digits,,main\cpp\cacheddateformat.cpp,ANY digits,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2724,7550,magic1,2,main\cpp\cacheddateformat.cpp.magic1,,main\cpp\cacheddateformat.cpp,const int magic1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2725,7554,magicString1,2,main\cpp\cacheddateformat.cpp.magicString1,,main\cpp\cacheddateformat.cpp,ANY magicString1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2726,7562,magic2,2,main\cpp\cacheddateformat.cpp.magic2,,main\cpp\cacheddateformat.cpp,const int magic2,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2727,7566,magicString2,2,main\cpp\cacheddateformat.cpp.magicString2,,main\cpp\cacheddateformat.cpp,ANY magicString2,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2728,7574,zeroString,2,main\cpp\cacheddateformat.cpp.zeroString,,main\cpp\cacheddateformat.cpp,ANY zeroString,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2729,8232,,2,main\cpp\charsetdecoder.cpp.nan,,main\cpp\charsetdecoder.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2730,9023,,2,main\cpp\charsetencoder.cpp.nan,,main\cpp\charsetencoder.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2731,10348,,2,main\cpp\classnamepatternconverter.cpp.nan,,main\cpp\classnamepatternconverter.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2732,10454,,2,main\cpp\colorendpatternconverter.cpp.nan,,main\cpp\colorendpatternconverter.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2733,10504,,2,main\cpp\colorstartpatternconverter.cpp.nan,,main\cpp\colorstartpatternconverter.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2734,11448,,2,main\cpp\configurator.cpp.nan,,main\cpp\configurator.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2735,11484,,2,main\cpp\consoleappender.cpp.nan,,main\cpp\consoleappender.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2736,12155,,2,main\cpp\datagrampacket.cpp.nan,,main\cpp\datagrampacket.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2737,12312,,2,main\cpp\datagramsocket.cpp.nan,,main\cpp\datagramsocket.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2738,12460,,2,main\cpp\date.cpp.nan,,main\cpp\date.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2739,12569,,2,main\cpp\dateformat.cpp.nan,,main\cpp\dateformat.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2740,12638,,2,main\cpp\datepatternconverter.cpp.nan,,main\cpp\datepatternconverter.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2741,13011,,2,main\cpp\dbappender.cpp.nan,,main\cpp\dbappender.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2742,14267,MillisecondsPerSecond,2,main\cpp\defaultconfigurator.cpp.MillisecondsPerSecond,,main\cpp\defaultconfigurator.cpp,static const int MillisecondsPerSecond,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2743,14671,,2,main\cpp\defaultloggerfactory.cpp.nan,,main\cpp\defaultloggerfactory.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2744,14815,xdog,2,main\cpp\domconfigurator.cpp.xdog,,main\cpp\domconfigurator.cpp,XMLWatchdog* xdog,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2745,14819,,2,main\cpp\domconfigurator.cpp.nan,,main\cpp\domconfigurator.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2746,18210,,2,main\cpp\fallbackerrorhandler.cpp.nan,,main\cpp\fallbackerrorhandler.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2747,19180,,2,main\cpp\fileappender.cpp.nan,,main\cpp\fileappender.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2748,20260,,2,main\cpp\fileinputstream.cpp.nan,,main\cpp\fileinputstream.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2749,20476,,2,main\cpp\filelocationpatternconverter.cpp.nan,,main\cpp\filelocationpatternconverter.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2750,20538,,2,main\cpp\fileoutputstream.cpp.nan,,main\cpp\fileoutputstream.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2751,20796,,2,main\cpp\filerenameaction.cpp.nan,,main\cpp\filerenameaction.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2752,20856,DEFAULT_DELAY,2,main\cpp\filewatchdog.cpp.DEFAULT_DELAY,,main\cpp\filewatchdog.cpp,long DEFAULT_DELAY,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2753,21276,,2,main\cpp\filterbasedtriggeringpolicy.cpp.nan,,main\cpp\filterbasedtriggeringpolicy.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2754,21492,,2,main\cpp\fixedwindowrollingpolicy.cpp.nan,,main\cpp\fixedwindowrollingpolicy.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2755,22543,,2,main\cpp\fmtlayout.cpp.nan,,main\cpp\fmtlayout.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2756,22962,,2,main\cpp\formattinginfo.cpp.nan,,main\cpp\formattinginfo.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2757,23119,,2,main\cpp\fulllocationpatternconverter.cpp.nan,,main\cpp\fulllocationpatternconverter.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2758,23222,,2,main\cpp\gzcompressaction.cpp.nan,,main\cpp\gzcompressaction.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2759,24064,,2,main\cpp\hierarchy.cpp.nan,,main\cpp\hierarchy.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2760,25572,,2,main\cpp\htmllayout.cpp.nan,,main\cpp\htmllayout.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2761,26472,,2,main\cpp\inetaddress.cpp.nan,,main\cpp\inetaddress.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2762,26748,,2,main\cpp\inputstream.cpp.nan,,main\cpp\inputstream.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2763,26777,,2,main\cpp\inputstreamreader.cpp.nan,,main\cpp\inputstreamreader.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2764,26944,,2,main\cpp\integer.cpp.nan,,main\cpp\integer.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2765,26972,,2,main\cpp\integerpatternconverter.cpp.nan,,main\cpp\integerpatternconverter.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2766,27047,,2,main\cpp\jsonlayout.cpp.nan,,main\cpp\jsonlayout.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2767,28306,,2,main\cpp\layout.cpp.nan,,main\cpp\layout.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2768,28864,,2,main\cpp\levelmatchfilter.cpp.nan,,main\cpp\levelmatchfilter.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2769,29105,,2,main\cpp\levelpatternconverter.cpp.nan,,main\cpp\levelpatternconverter.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2770,29261,,2,main\cpp\levelrangefilter.cpp.nan,,main\cpp\levelrangefilter.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2771,29607,,2,main\cpp\linelocationpatternconverter.cpp.nan,,main\cpp\linelocationpatternconverter.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2772,29660,,2,main\cpp\lineseparatorpatternconverter.cpp.nan,,main\cpp\lineseparatorpatternconverter.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2773,29728,,2,main\cpp\literalpatternconverter.cpp.nan,,main\cpp\literalpatternconverter.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2774,29855,,2,main\cpp\loader.cpp.nan,,main\cpp\loader.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2775,29857,,2,main\cpp\loader.cpp.nan,,main\cpp\loader.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2776,29859,,2,main\cpp\loader.cpp.nan,,main\cpp\loader.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2777,29861,,2,main\cpp\loader.cpp.nan,,main\cpp\loader.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2778,29863,,2,main\cpp\loader.cpp.nan,,main\cpp\loader.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2779,29865,,2,main\cpp\loader.cpp.nan,,main\cpp\loader.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2780,29867,,2,main\cpp\loader.cpp.nan,,main\cpp\loader.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2781,29869,,2,main\cpp\loader.cpp.nan,,main\cpp\loader.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2782,29871,,2,main\cpp\loader.cpp.nan,,main\cpp\loader.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2783,29873,,2,main\cpp\loader.cpp.nan,,main\cpp\loader.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2784,29875,,2,main\cpp\loader.cpp.nan,,main\cpp\loader.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2785,29877,,2,main\cpp\loader.cpp.nan,,main\cpp\loader.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2786,29879,,2,main\cpp\loader.cpp.nan,,main\cpp\loader.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2787,29881,,2,main\cpp\loader.cpp.nan,,main\cpp\loader.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2788,29883,,2,main\cpp\loader.cpp.nan,,main\cpp\loader.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2789,30000,,2,main\cpp\locationinfo.cpp.nan,,main\cpp\locationinfo.cpp,const char* NA,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2790,30004,NA_METHOD,2,main\cpp\locationinfo.cpp.NA_METHOD,,main\cpp\locationinfo.cpp,const char* NA_METHOD,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2791,30289,,2,main\cpp\locationinfofilter.cpp.nan,,main\cpp\locationinfofilter.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2792,30773,,2,main\cpp\logger.cpp.nan,,main\cpp\logger.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2793,32295,,2,main\cpp\loggermatchfilter.cpp.nan,,main\cpp\loggermatchfilter.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2794,32494,,2,main\cpp\loggerpatternconverter.cpp.nan,,main\cpp\loggerpatternconverter.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2795,32657,,2,main\cpp\loggingevent.cpp.nan,,main\cpp\loggingevent.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2796,33253,,2,main\cpp\loggingeventpatternconverter.cpp.nan,,main\cpp\loggingeventpatternconverter.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2797,33805,,2,main\cpp\logmanager.cpp.nan,,main\cpp\logmanager.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2798,33807,guard,2,main\cpp\logmanager.cpp.guard,,main\cpp\logmanager.cpp,void* guard,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2799,34760,,2,main\cpp\manualtriggeringpolicy.cpp.nan,,main\cpp\manualtriggeringpolicy.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2800,34812,,2,main\cpp\mapfilter.cpp.nan,,main\cpp\mapfilter.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2801,35480,,2,main\cpp\mdcpatternconverter.cpp.nan,,main\cpp\mdcpatternconverter.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2802,36163,,2,main\cpp\messagepatternconverter.cpp.nan,,main\cpp\messagepatternconverter.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2803,36311,,2,main\cpp\methodlocationpatternconverter.cpp.nan,,main\cpp\methodlocationpatternconverter.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2804,36395,,2,main\cpp\multiprocessrollingfileappender.cpp.nan,,main\cpp\multiprocessrollingfileappender.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2805,38663,,2,main\cpp\namepatternconverter.cpp.nan,,main\cpp\namepatternconverter.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2806,39224,,2,main\cpp\ndcpatternconverter.cpp.nan,,main\cpp\ndcpatternconverter.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2807,39405,,2,main\cpp\odbcappender.cpp.nan,,main\cpp\odbcappender.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2808,40274,,2,main\cpp\onlyonceerrorhandler.cpp.nan,,main\cpp\onlyonceerrorhandler.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2809,41420,,2,main\cpp\outputstream.cpp.nan,,main\cpp\outputstream.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2810,41447,,2,main\cpp\outputstreamwriter.cpp.nan,,main\cpp\outputstreamwriter.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2811,41687,,2,main\cpp\patternconverter.cpp.nan,,main\cpp\patternconverter.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2812,41852,,2,main\cpp\patternlayout.cpp.nan,,main\cpp\patternlayout.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2813,42887,ESCAPE_CHAR,2,main\cpp\patternparser.cpp.ESCAPE_CHAR,,main\cpp\patternparser.cpp,const logchar ESCAPE_CHAR,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2814,44827,,2,main\cpp\propertiespatternconverter.cpp.nan,,main\cpp\propertiespatternconverter.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2815,45086,pdog,2,main\cpp\propertyconfigurator.cpp.pdog,,main\cpp\propertyconfigurator.cpp,PropertyWatchdog* pdog,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2816,45090,,2,main\cpp\propertyconfigurator.cpp.nan,,main\cpp\propertyconfigurator.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2817,46600,,2,main\cpp\propertyresourcebundle.cpp.nan,,main\cpp\propertyresourcebundle.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2818,46923,,2,main\cpp\reader.cpp.nan,,main\cpp\reader.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2819,46988,,2,main\cpp\relativetimepatternconverter.cpp.nan,,main\cpp\relativetimepatternconverter.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2820,47055,,2,main\cpp\resourcebundle.cpp.nan,,main\cpp\resourcebundle.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2821,47336,,2,main\cpp\rollingfileappender.cpp.nan,,main\cpp\rollingfileappender.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2822,48917,,2,main\cpp\rollingpolicybase.cpp.nan,,main\cpp\rollingpolicybase.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2823,49291,,2,main\cpp\rolloverdescription.cpp.nan,,main\cpp\rolloverdescription.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2824,49479,,2,main\cpp\shortfilelocationpatternconverter.cpp.nan,,main\cpp\shortfilelocationpatternconverter.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2825,50898,,2,main\cpp\simplelayout.cpp.nan,,main\cpp\simplelayout.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2826,50948,,2,main\cpp\sizebasedtriggeringpolicy.cpp.nan,,main\cpp\sizebasedtriggeringpolicy.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2827,51054,,2,main\cpp\smtpappender.cpp.nan,,main\cpp\smtpappender.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2828,51056,,2,main\cpp\smtpappender.cpp.nan,,main\cpp\smtpappender.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2829,52229,,2,main\cpp\socket.cpp.nan,,main\cpp\socket.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2830,53284,,2,main\cpp\socketoutputstream.cpp.nan,,main\cpp\socketoutputstream.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2831,54042,,2,main\cpp\stringmatchfilter.cpp.nan,,main\cpp\stringmatchfilter.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2832,54438,,2,main\cpp\syslogappender.cpp.nan,,main\cpp\syslogappender.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2833,56012,,2,main\cpp\systemerrwriter.cpp.nan,,main\cpp\systemerrwriter.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2834,56081,,2,main\cpp\systemoutwriter.cpp.nan,,main\cpp\systemoutwriter.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2835,56158,,2,main\cpp\telnetappender.cpp.nan,,main\cpp\telnetappender.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2836,56174,DEFAULT_PORT,2,main\cpp\telnetappender.cpp.DEFAULT_PORT,,main\cpp\telnetappender.cpp,const int DEFAULT_PORT,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2837,56178,MAX_CONNECTIONS,2,main\cpp\telnetappender.cpp.MAX_CONNECTIONS,,main\cpp\telnetappender.cpp,const int MAX_CONNECTIONS,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2838,57238,,2,main\cpp\threadpatternconverter.cpp.nan,,main\cpp\threadpatternconverter.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2839,57489,,2,main\cpp\threadusernamepatternconverter.cpp.nan,,main\cpp\threadusernamepatternconverter.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2840,57839,,2,main\cpp\throwableinformationpatternconverter.cpp.nan,,main\cpp\throwableinformationpatternconverter.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2841,57944,,2,main\cpp\timebasedrollingpolicy.cpp.nan,,main\cpp\timebasedrollingpolicy.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2842,58658,,2,main\cpp\timezone.cpp.nan,,main\cpp\timezone.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2843,60999,,2,main\cpp\triggeringpolicy.cpp.nan,,main\cpp\triggeringpolicy.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2844,61018,,2,main\cpp\writer.cpp.nan,,main\cpp\writer.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2845,61047,,2,main\cpp\writerappender.cpp.nan,,main\cpp\writerappender.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2846,61936,,2,main\cpp\xmllayout.cpp.nan,,main\cpp\xmllayout.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2847,62546,,2,main\cpp\xmlsocketappender.cpp.nan,,main\cpp\xmlsocketappender.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2848,62548,DEFAULT_PORT,2,main\cpp\xmlsocketappender.cpp.DEFAULT_PORT,,main\cpp\xmlsocketappender.cpp,int DEFAULT_PORT,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2849,62552,DEFAULT_RECONNECTION_DELAY,2,main\cpp\xmlsocketappender.cpp.DEFAULT_RECONNECTION_DELAY,,main\cpp\xmlsocketappender.cpp,int DEFAULT_RECONNECTION_DELAY,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2850,62556,MAX_EVENT_LEN,2,main\cpp\xmlsocketappender.cpp.MAX_EVENT_LEN,,main\cpp\xmlsocketappender.cpp,const int MAX_EVENT_LEN,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2851,62882,,2,main\cpp\zipcompressaction.cpp.nan,,main\cpp\zipcompressaction.cpp,IMPLEMENT_LOG4CXX_OBJECT ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2852,63383,,2,main\include\log4cxx\config\propertysetter.hpp.nan,,main\include\log4cxx\config\propertysetter.hpp,LOG4CXX_INSTANTIATE_EXPORTED_PTR ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2853,64160,,2,main\include\log4cxx\helpers\inputstreamreader.hpp.nan,,main\include\log4cxx\helpers\inputstreamreader.hpp,LOG4CXX_INSTANTIATE_EXPORTED_PTR ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2854,64161,,2,main\include\log4cxx\helpers\inputstreamreader.hpp.nan,,main\include\log4cxx\helpers\inputstreamreader.hpp,LOG4CXX_INSTANTIATE_EXPORTED_PTR ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2855,66570,,2,main\include\log4cxx\rolling\filterbasedtriggeringpolicy.hpp.nan,,main\include\log4cxx\rolling\filterbasedtriggeringpolicy.hpp,LOG4CXX_INSTANTIATE_EXPORTED_PTR ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
