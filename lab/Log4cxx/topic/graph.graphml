<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">
  <key id="d39" for="edge" attr.name="line_number" attr.type="long" />
  <key id="d38" for="edge" attr.name="r_label" attr.type="string" />
  <key id="d37" for="edge" attr.name="r_key" attr.type="long" />
  <key id="d36" for="edge" attr.name="target" attr.type="long" />
  <key id="d35" for="edge" attr.name="source" attr.type="long" />
  <key id="d34" for="node" attr.name="name" attr.type="double" />
  <key id="d33" for="node" attr.name="line_of_code" attr.type="long" />
  <key id="d32" for="node" attr.name="column_number_end" attr.type="long" />
  <key id="d31" for="node" attr.name="column_number" attr.type="long" />
  <key id="d30" for="node" attr.name="line_number_end" attr.type="long" />
  <key id="d29" for="node" attr.name="line_number" attr.type="long" />
  <key id="d28" for="node" attr.name="ret_type" attr.type="string" />
  <key id="d27" for="node" attr.name="param_out" attr.type="long" />
  <key id="d26" for="node" attr.name="param_in" attr.type="long" />
  <key id="d25" for="node" attr.name="param" attr.type="long" />
  <key id="d24" for="node" attr.name="con_val" attr.type="long" />
  <key id="d23" for="node" attr.name="con_rf" attr.type="long" />
  <key id="d22" for="node" attr.name="con_zc" attr.type="long" />
  <key id="d21" for="node" attr.name="con_df" attr.type="long" />
  <key id="d20" for="node" attr.name="con_cf" attr.type="long" />
  <key id="d19" for="node" attr.name="acc_cyc" attr.type="long" />
  <key id="d18" for="node" attr.name="mc_cabe" attr.type="long" />
  <key id="d17" for="node" attr.name="fan_out" attr.type="long" />
  <key id="d16" for="node" attr.name="fan_in" attr.type="long" />
  <key id="d15" for="node" attr.name="set_of_operands" attr.type="long" />
  <key id="d14" for="node" attr.name="number_of_operands" attr.type="long" />
  <key id="d13" for="node" attr.name="set_of_operators" attr.type="long" />
  <key id="d12" for="node" attr.name="number_of_operators" attr.type="long" />
  <key id="d11" for="node" attr.name="line_of_code" attr.type="double" />
  <key id="d10" for="node" attr.name="column_number_end" attr.type="double" />
  <key id="d9" for="node" attr.name="column_number" attr.type="double" />
  <key id="d8" for="node" attr.name="line_number_end" attr.type="double" />
  <key id="d7" for="node" attr.name="line_number" attr.type="double" />
  <key id="d6" for="node" attr.name="code" attr.type="string" />
  <key id="d5" for="node" attr.name="filename" attr.type="string" />
  <key id="d4" for="node" attr.name="signature" attr.type="string" />
  <key id="d3" for="node" attr.name="fullname" attr.type="string" />
  <key id="d2" for="node" attr.name="node_type" attr.type="long" />
  <key id="d1" for="node" attr.name="name" attr.type="string" />
  <key id="d0" for="node" attr.name="id" attr.type="long" />
  <graph edgedefault="directed">
    <node id="18434">
      <data key="d0">18434</data>
      <data key="d1">setBackupAppender</data>
      <data key="d2">1</data>
      <data key="d3">FallbackErrorHandler.setBackupAppender</data>
      <data key="d4">void FallbackErrorHandler.setBackupAppender (AppenderPtr)</data>
      <data key="d5">main\cpp\fallbackerrorhandler.cpp</data>
      <data key="d6">void FallbackErrorHandler::setBackupAppender(const AppenderPtr&amp; backup1)
{
	LogLog::debug(((LogString) LOG4CXX_STR("FB: Setting backup appender to ["))
		+ backup1-&gt;getName() + LOG4CXX_STR("]."));
	m_priv-&gt;backup = backup1;

	// Make sure that we keep a reference to the appender around, since otherwise
	// the appender would be lost if it has no loggers that use it.
	LoggerRepository* repository = LogManager::getRootLogger()-&gt;getLoggerRepository();
	Hierarchy* hierarchy = dynamic_cast&lt;Hierarchy*&gt;(repository);
	if(hierarchy){
		hierarchy-&gt;addAppender(backup1);
	}

}</data>
      <data key="d7">103.0</data>
      <data key="d8">117.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">15.0</data>
      <data key="d12">13</data>
      <data key="d13">5</data>
      <data key="d14">11</data>
      <data key="d15">6</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="34822">
      <data key="d0">34822</data>
      <data key="d1">setOption</data>
      <data key="d2">1</data>
      <data key="d3">MapFilter.setOption</data>
      <data key="d4">void MapFilter.setOption (LogString,LogString)</data>
      <data key="d5">main\cpp\mapfilter.cpp</data>
      <data key="d6">void MapFilter::setOption(  const LogString&amp; option,
	const LogString&amp; value)
{
	if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("ACCEPTONMATCH"), LOG4CXX_STR("acceptonmatch")))
	{
		priv-&gt;acceptOnMatch = OptionConverter::toBoolean(value, priv-&gt;acceptOnMatch);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("OPERATOR"), LOG4CXX_STR("operator")))
	{
		priv-&gt;mustMatchAll = StringHelper::equalsIgnoreCase(value, LOG4CXX_STR("AND"), LOG4CXX_STR("and")) ? true : false;
	}
	else if (!option.empty() &amp;&amp; !value.empty())
	{
		priv-&gt;keyVals[option] = value;
	}
}</data>
      <data key="d7">51.0</data>
      <data key="d8">66.0</data>
      <data key="d9">1.0</data>
      <data key="d10">2.0</data>
      <data key="d11">16.0</data>
      <data key="d12">9</data>
      <data key="d13">4</data>
      <data key="d14">6</data>
      <data key="d15">5</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">1</data>
      <data key="d21">2</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">2</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="50185">
      <data key="d0">50185</data>
      <data key="d1">AMPMToken</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.helpers.SimpleDateFormatImpl.AMPMToken.AMPMToken</data>
      <data key="d4">ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.AMPMToken.AMPMToken (int,ANY*)</data>
      <data key="d5">main\cpp\simpledateformat.cpp</data>
      <data key="d6">AMPMToken( int width, const std::locale* locale) : names( 2 )
		{
			renderFacet(locale, PatternToken::incrementHalfDay, 'p', 0x70, "%p", names);
		}</data>
      <data key="d7">547.0</data>
      <data key="d8">550.0</data>
      <data key="d9">3.0</data>
      <data key="d10">3.0</data>
      <data key="d11">4.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">3</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">ANY</data>
    </node>
    <node id="40974">
      <data key="d0">40974</data>
      <data key="d1">getSystemProperty</data>
      <data key="d2">1</data>
      <data key="d3">OptionConverter.getSystemProperty</data>
      <data key="d4">LogString OptionConverter.getSystemProperty (LogString,LogString)</data>
      <data key="d5">main\cpp\optionconverter.cpp</data>
      <data key="d6">LogString OptionConverter::getSystemProperty(const LogString&amp; key, const LogString&amp; def)
{
	if (!key.empty())
	{
		LogString value(System::getProperty(key));

		if (!value.empty())
		{
			return value;
		}
	}

	return def;
}</data>
      <data key="d7">288.0</data>
      <data key="d8">301.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">14.0</data>
      <data key="d12">5</data>
      <data key="d13">2</data>
      <data key="d14">6</data>
      <data key="d15">4</data>
      <data key="d16">6</data>
      <data key="d17">1</data>
      <data key="d18">3</data>
      <data key="d19">4</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">LogString</data>
    </node>
    <node id="45073">
      <data key="d0">45073</data>
      <data key="d1">doOnChange</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.PropertyWatchdog.doOnChange</data>
      <data key="d4">void LOG4CXX_NS.PropertyWatchdog.doOnChange ()</data>
      <data key="d5">main\cpp\propertyconfigurator.cpp</data>
      <data key="d6">void doOnChange()
		{
			PropertyConfigurator().doConfigure(file(),
				LogManager::getLoggerRepository());
		}</data>
      <data key="d7">65.0</data>
      <data key="d8">69.0</data>
      <data key="d9">3.0</data>
      <data key="d10">3.0</data>
      <data key="d11">5.0</data>
      <data key="d12">2</data>
      <data key="d13">1</data>
      <data key="d14">1</data>
      <data key="d15">1</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">void</data>
    </node>
    <node id="4114">
      <data key="d0">4114</data>
      <data key="d1">isDestructed</data>
      <data key="d2">2</data>
      <data key="d3">main\cpp\aprinitializer.cpp.isDestructed</data>
      <data key="d4" />
      <data key="d5">main\cpp\aprinitializer.cpp</data>
      <data key="d6">bool isDestructed</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="57364">
      <data key="d0">57364</data>
      <data key="d1">push</data>
      <data key="d2">1</data>
      <data key="d3">ThreadSpecificData.push</data>
      <data key="d4">void ThreadSpecificData.push (LogString)</data>
      <data key="d5">main\cpp\threadspecificdata.cpp</data>
      <data key="d6">void ThreadSpecificData::push(const LogString&amp; val)
{
	ThreadSpecificData* data = getCurrentData();

	if (data == 0)
	{
		data = createCurrentData();
	}

	if (data != 0)
	{
		NDC::Stack&amp; stack = data-&gt;getStack();

		if (stack.empty())
		{
			stack.push(NDC::DiagnosticContext(val, val));
		}
		else
		{
			LogString fullMessage(stack.top().second);
			fullMessage.append(1, (logchar) 0x20);
			fullMessage.append(val);
			stack.push(NDC::DiagnosticContext(val, fullMessage));
		}
	}
}</data>
      <data key="d7">116.0</data>
      <data key="d8">141.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">26.0</data>
      <data key="d12">9</data>
      <data key="d13">5</data>
      <data key="d14">11</data>
      <data key="d15">4</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">4</data>
      <data key="d19">5</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="50200">
      <data key="d0">50200</data>
      <data key="d1">format</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.helpers.SimpleDateFormatImpl.AMPMToken.format</data>
      <data key="d4">void LOG4CXX_NS.helpers.SimpleDateFormatImpl.AMPMToken.format (LogString,apr_time_exp_t,Pool)</data>
      <data key="d5">main\cpp\simpledateformat.cpp</data>
      <data key="d6">void format( LogString&amp; s, const apr_time_exp_t&amp; tm, Pool&amp; /* p */ ) const
		{
			s.append( names[tm.tm_hour / 12] );
		}</data>
      <data key="d7">552.0</data>
      <data key="d8">555.0</data>
      <data key="d9">3.0</data>
      <data key="d10">3.0</data>
      <data key="d11">4.0</data>
      <data key="d12">4</data>
      <data key="d13">3</data>
      <data key="d14">3</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">6</data>
      <data key="d26">3</data>
      <data key="d27">3</data>
      <data key="d28">void</data>
    </node>
    <node id="26654">
      <data key="d0">26654</data>
      <data key="d1">getByName</data>
      <data key="d2">1</data>
      <data key="d3">InetAddress.getByName</data>
      <data key="d4">InetAddressPtr InetAddress.getByName (LogString)</data>
      <data key="d5">main\cpp\inetaddress.cpp</data>
      <data key="d6">InetAddressPtr InetAddress::getByName(const LogString&amp; host)
{
	InetAddressPtr result;
	auto address = getAllByName(host);
	if (!address.empty())
		result = address.front();
	return result;
}</data>
      <data key="d7">122.0</data>
      <data key="d8">129.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">8.0</data>
      <data key="d12">5</data>
      <data key="d13">3</data>
      <data key="d14">6</data>
      <data key="d15">3</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">InetAddressPtr</data>
    </node>
    <node id="38943">
      <data key="d0">38943</data>
      <data key="d1">pop</data>
      <data key="d2">1</data>
      <data key="d3">NDC.pop</data>
      <data key="d4">LogString NDC.pop ()</data>
      <data key="d5">main\cpp\ndc.cpp</data>
      <data key="d6">bool NDC::pop(std::string&amp; dst)
{
	bool retval = false;
	ThreadSpecificData* data = ThreadSpecificData::getCurrentData();

	if (data != 0)
	{
		Stack&amp; stack = data-&gt;getStack();

		if (!stack.empty())
		{
			Transcoder::encode(getMessage(stack.top()), dst);
			stack.pop();
			retval = true;
		}

		data-&gt;recycle();
	}

	return retval;
}</data>
      <data key="d7">150.0</data>
      <data key="d8">170.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">21.0</data>
      <data key="d12">11</data>
      <data key="d13">5</data>
      <data key="d14">11</data>
      <data key="d15">4</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">3</data>
      <data key="d19">4</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">bool</data>
    </node>
    <node id="21536">
      <data key="d0">21536</data>
      <data key="d1">setOption</data>
      <data key="d2">1</data>
      <data key="d3">FixedWindowRollingPolicy.setOption</data>
      <data key="d4">void FixedWindowRollingPolicy.setOption (LogString,LogString)</data>
      <data key="d5">main\cpp\fixedwindowrollingpolicy.cpp</data>
      <data key="d6">void FixedWindowRollingPolicy::setOption(const LogString&amp; option,
	const LogString&amp; value)
{
	if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR("MININDEX"),
			LOG4CXX_STR("minindex")))
	{
		priv-&gt;minIndex = OptionConverter::toInt(value, 1);
	}
	else if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR("MAXINDEX"),
			LOG4CXX_STR("maxindex")))
	{
		priv-&gt;maxIndex = OptionConverter::toInt(value, 7);
	}
	else if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR("THROWIOEXCEPTIONONFORKFAILURE"),
			LOG4CXX_STR("throwioexceptiononforkfailure")))
	{
		priv-&gt;throwIOExceptionOnForkFailure = OptionConverter::toBoolean(value, true);
	}
	else
	{
		RollingPolicyBase::setOption(option, value);
	}
}</data>
      <data key="d7">72.0</data>
      <data key="d8">97.0</data>
      <data key="d9">1.0</data>
      <data key="d10">2.0</data>
      <data key="d11">26.0</data>
      <data key="d12">6</data>
      <data key="d13">4</data>
      <data key="d14">5</data>
      <data key="d15">5</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">1</data>
      <data key="d21">2</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">2</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="46113">
      <data key="d0">46113</data>
      <data key="d1">parseAppender</data>
      <data key="d2">1</data>
      <data key="d3">PropertyConfigurator.parseAppender</data>
      <data key="d4">AppenderPtr PropertyConfigurator.parseAppender (ANY,LogString)</data>
      <data key="d5">main\cpp\propertyconfigurator.cpp</data>
      <data key="d6">AppenderPtr PropertyConfigurator::parseAppender(
	helpers::Properties&amp; props, const LogString&amp; appenderName)
{
	AppenderPtr appender = registryGet(appenderName);

	if (appender != 0)
	{
		LogLog::debug((LogString) LOG4CXX_STR("Appender \"")
			+ appenderName + LOG4CXX_STR("\" was already parsed."));

		return appender;
	}

	static const WideLife&lt;LogString&gt; APPENDER_PREFIX(LOG4CXX_STR("log4j.appender."));

	// Appender was not previously initialized.
	LogString prefix = APPENDER_PREFIX.value() + appenderName;
	LogString layoutPrefix = prefix + LOG4CXX_STR(".layout");

	std::shared_ptr&lt;Object&gt; obj =
		OptionConverter::instantiateByKey(
			props, prefix, Appender::getStaticClass(), 0);
	appender = LOG4CXX_NS::cast&lt;Appender&gt;( obj );

	// Map obsolete DailyRollingFileAppender property configuration
	if (!appender &amp;&amp;
		StringHelper::endsWith(OptionConverter::findAndSubst(prefix, props), LOG4CXX_STR("DailyRollingFileAppender")))
	{
		appender = std::make_shared&lt;RollingFileAppender&gt;();
		au...</data>
      <data key="d7">420.0</data>
      <data key="d8">535.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">116.0</data>
      <data key="d12">120</data>
      <data key="d13">10</data>
      <data key="d14">134</data>
      <data key="d15">29</data>
      <data key="d16">0</data>
      <data key="d17">20</data>
      <data key="d18">13</data>
      <data key="d19">28</data>
      <data key="d20">4</data>
      <data key="d21">20</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">9</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">AppenderPtr</data>
    </node>
    <node id="52256">
      <data key="d0">52256</data>
      <data key="d1">create</data>
      <data key="d2">1</data>
      <data key="d3">Socket.create</data>
      <data key="d4">SocketUniquePtr Socket.create (InetAddressPtr,int)</data>
      <data key="d5">main\cpp\socket.cpp</data>
      <data key="d6">SocketUniquePtr Socket::create(InetAddressPtr&amp; address, int port){
	return std::make_unique&lt;APRSocket&gt;(address, port);
}</data>
      <data key="d7">48.0</data>
      <data key="d8">50.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">3.0</data>
      <data key="d12">5</data>
      <data key="d13">5</data>
      <data key="d14">4</data>
      <data key="d15">4</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">SocketUniquePtr</data>
    </node>
    <node id="56355">
      <data key="d0">56355</data>
      <data key="d1">setEncoding</data>
      <data key="d2">1</data>
      <data key="d3">TelnetAppender.setEncoding</data>
      <data key="d4">void TelnetAppender.setEncoding (LogString)</data>
      <data key="d5">main\cpp\telnetappender.cpp</data>
      <data key="d6">void TelnetAppender::setEncoding(const LogString&amp; value)
{
	std::lock_guard&lt;std::recursive_mutex&gt; lock(_priv-&gt;mutex);
	_priv-&gt;encoder = CharsetEncoder::getEncoder(value);
	_priv-&gt;encoding = value;
}</data>
      <data key="d7">105.0</data>
      <data key="d8">110.0</data>
      <data key="d9">1.0</data>
      <data key="d10">44.0</data>
      <data key="d11">6.0</data>
      <data key="d12">16</data>
      <data key="d13">6</data>
      <data key="d14">8</data>
      <data key="d15">4</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="1060">
      <data key="d0">1060</data>
      <data key="d1">SelectConfigurationFile</data>
      <data key="d2">1</data>
      <data key="d3">anonymous_namespace_2.SelectConfigurationFile</data>
      <data key="d4">void anonymous_namespace_2.SelectConfigurationFile ()</data>
      <data key="d5">examples\cpp\com\foo\config3.cpp</data>
      <data key="d6">void SelectConfigurationFile() {
#if defined(_DEBUG)
	helpers::LogLog::setInternalDebugging(true);
#endif
	const char* extension[] = { ".xml", ".properties", 0 };
	std::string altPrefix;
	helpers::Pool pool;

	for (auto baseName : DefaultConfigurationFileNames(altPrefix)) {
		int i = 0;
		for (; extension[i]; ++i) {
			File current_working_dir_candidate(baseName + extension[i]);
			if (current_working_dir_candidate.exists(pool)) {
				DefaultConfigurator::setConfigurationFileName(current_working_dir_candidate.getPath());
				DefaultConfigurator::setConfigurationWatchSeconds(5);
				break;
			}
			if (!altPrefix.empty()) {
				File alt_dir_candidate(altPrefix + baseName + extension[i]);
				if (alt_dir_candidate.exists(pool)) {
					DefaultConfigurator::setConfigurationFileName(alt_dir_candidate.getPath());
					DefaultConfigurator::setConfigurationWatchSeconds(5);
					break;
				}
			}
		}
		if (extension[i]) // Found a configuration file?
			return;
	}
	// Configuration file not f...</data>
      <data key="d7">117.0</data>
      <data key="d8">148.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">32.0</data>
      <data key="d12">21</data>
      <data key="d13">6</data>
      <data key="d14">26</data>
      <data key="d15">9</data>
      <data key="d16">0</data>
      <data key="d17">5</data>
      <data key="d18">9</data>
      <data key="d19">16</data>
      <data key="d20">0</data>
      <data key="d21">5</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">void</data>
    </node>
    <node id="55333">
      <data key="d0">55333</data>
      <data key="d1">setOption</data>
      <data key="d2">1</data>
      <data key="d3">SyslogAppender.setOption</data>
      <data key="d4">void SyslogAppender.setOption (LogString,LogString)</data>
      <data key="d5">main\cpp\syslogappender.cpp</data>
      <data key="d6">void SyslogAppender::setOption(const LogString&amp; option, const LogString&amp; value)
{
	if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("SYSLOGHOST"), LOG4CXX_STR("sysloghost")))
	{
		setSyslogHost(value);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("FACILITY"), LOG4CXX_STR("facility")))
	{
		setFacility(value);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("MAXMESSAGELENGTH"), LOG4CXX_STR("maxmessagelength")))
	{
		setMaxMessageLength(OptionConverter::toInt(value, 1024));
	}
	else
	{
		AppenderSkeleton::setOption(option, value);
	}
}</data>
      <data key="d7">379.0</data>
      <data key="d8">397.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">19.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">3</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">1</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="48164">
      <data key="d0">48164</data>
      <data key="d1">rolloverInternal</data>
      <data key="d2">1</data>
      <data key="d3">RollingFileAppender.rolloverInternal</data>
      <data key="d4">bool RollingFileAppender.rolloverInternal (Pool)</data>
      <data key="d5">main\cpp\rollingfileappender.cpp</data>
      <data key="d6">bool RollingFileAppender::rolloverInternal(Pool&amp; p)
{
	//
	//   can't roll without a policy
	//
	if (_priv-&gt;rollingPolicy != NULL)
	{

		{
				try
				{
					RolloverDescriptionPtr rollover1(_priv-&gt;rollingPolicy-&gt;rollover(this-&gt;getFile(), this-&gt;getAppend(), p));

					if (rollover1 != NULL)
					{
						if (rollover1-&gt;getActiveFileName() == getFile())
						{
							closeWriter();

							bool success = true;

							if (rollover1-&gt;getSynchronous() != NULL)
							{
								success = false;

								try
								{
									success = rollover1-&gt;getSynchronous()-&gt;execute(p);
								}
								catch (std::exception&amp; ex)
								{
									LOG4CXX_DECODE_CHAR(lsMsg, ex.what());
									LogString errorMsg = LOG4CXX_STR("Exception on rollover: ");
									errorMsg.append(lsMsg);
									LogLog::error(errorMsg);
									_priv-&gt;errorHandler-&gt;error(lsMsg, ex, 0);
								}
							}

							if (success)
							{
								if (rollover1-&gt;getAppend())
								{
									_priv-&gt;fileLength = Fil...</data>
      <data key="d7">308.0</data>
      <data key="d8">448.0</data>
      <data key="d9">1.0</data>
      <data key="d10">5.0</data>
      <data key="d11">141.0</data>
      <data key="d12">55</data>
      <data key="d13">6</data>
      <data key="d14">49</data>
      <data key="d15">10</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">10</data>
      <data key="d19">39</data>
      <data key="d20">0</data>
      <data key="d21">2</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">bool</data>
    </node>
    <node id="29735">
      <data key="d0">29735</data>
      <data key="d1">newInstance</data>
      <data key="d2">1</data>
      <data key="d3">LiteralPatternConverter.newInstance</data>
      <data key="d4">PatternConverterPtr LiteralPatternConverter.newInstance (LogString)</data>
      <data key="d5">main\cpp\literalpatternconverter.cpp</data>
      <data key="d6">PatternConverterPtr LiteralPatternConverter::newInstance(
	const LogString&amp; literal)
{
	if (literal.length() == 1 &amp;&amp; literal[0] == 0x20 /* ' ' */)
	{
		static WideLife&lt;PatternConverterPtr&gt; blank = std::make_shared&lt;LiteralPatternConverter&gt;(literal);
		return blank;
	}

	return std::make_shared&lt;LiteralPatternConverter&gt;(literal);
}</data>
      <data key="d7">51.0</data>
      <data key="d8">61.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">11.0</data>
      <data key="d12">12</data>
      <data key="d13">7</data>
      <data key="d14">10</data>
      <data key="d15">4</data>
      <data key="d16">2</data>
      <data key="d17">0</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">PatternConverterPtr</data>
    </node>
    <node id="15399">
      <data key="d0">15399</data>
      <data key="d1">parseErrorHandler</data>
      <data key="d2">1</data>
      <data key="d3">DOMConfigurator.parseErrorHandler</data>
      <data key="d4">void DOMConfigurator.parseErrorHandler (Pool,ANY,apr_xml_elem*,AppenderPtr,apr_xml_doc*,AppenderMap)</data>
      <data key="d5">main\cpp\domconfigurator.cpp</data>
      <data key="d6">void DOMConfigurator::parseErrorHandler(Pool&amp; p,
	LOG4CXX_NS::helpers::CharsetDecoderPtr&amp; utf8Decoder,
	apr_xml_elem* element,
	AppenderPtr&amp; appender,
	apr_xml_doc* doc,
	AppenderMap&amp; appenders)
{

	ErrorHandlerPtr eh;
	std::shared_ptr&lt;Object&gt; obj = OptionConverter::instantiateByClassName(
			subst(getAttribute(utf8Decoder, element, CLASS_ATTR)),
			ErrorHandler::getStaticClass(),
			0);
	eh = LOG4CXX_NS::cast&lt;ErrorHandler&gt;(obj);

	if (eh != 0)
	{
		eh-&gt;setAppender(appender);

		PropertySetter propSetter(eh);

		for (apr_xml_elem* currentElement = element-&gt;first_child;
			currentElement;
			currentElement = currentElement-&gt;next)
		{
			std::string tagName(currentElement-&gt;name);

			if (tagName == PARAM_TAG)
			{
				setParameter(p, utf8Decoder, currentElement, propSetter);
			}
			else if (tagName == APPENDER_REF_TAG)
			{
				eh-&gt;setBackupAppender(findAppenderByReference(p, utf8Decoder, currentElement, doc, appenders));
			}
			else if (tagName == LOGGER_REF)
			{
				LogString log...</data>
      <data key="d7">326.0</data>
      <data key="d8">382.0</data>
      <data key="d9">1.0</data>
      <data key="d10">44.0</data>
      <data key="d11">57.0</data>
      <data key="d12">26</data>
      <data key="d13">7</data>
      <data key="d14">35</data>
      <data key="d15">16</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">5</data>
      <data key="d19">9</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">12</data>
      <data key="d26">6</data>
      <data key="d27">6</data>
      <data key="d28">void</data>
    </node>
    <node id="50218">
      <data key="d0">50218</data>
      <data key="d1">names</data>
      <data key="d2">3</data>
      <data key="d3">LOG4CXX_NS.helpers.SimpleDateFormatImpl.AMPMToken.names</data>
      <data key="d4" />
      <data key="d5">main\cpp\simpledateformat.cpp</data>
      <data key="d6">names</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">2</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="41005">
      <data key="d0">41005</data>
      <data key="d1">toLevel</data>
      <data key="d2">1</data>
      <data key="d3">OptionConverter.toLevel</data>
      <data key="d4">LevelPtr OptionConverter.toLevel (LogString,LevelPtr)</data>
      <data key="d5">main\cpp\optionconverter.cpp</data>
      <data key="d6">LevelPtr OptionConverter::toLevel(const LogString&amp; value,
	const LevelPtr&amp; defaultValue)
{
	size_t hashIndex = value.find(LOG4CXX_STR("#"));

	if (hashIndex == LogString::npos)
	{
		if (value.empty())
		{
			return defaultValue;
		}
		else
		{
			LogLog::debug(
				((LogString) LOG4CXX_STR("OptionConverter::toLevel: no class name specified, level=["))
				+ value
				+ LOG4CXX_STR("]"));
			// no class name specified : use standard Level class
			return Level::toLevelLS(value, defaultValue);
		}
	}

	LogString clazz = value.substr(hashIndex + 1);
	LogString levelName = value.substr(0, hashIndex);
	LogLog::debug(((LogString) LOG4CXX_STR("OptionConverter::toLevel: class=["))
		+ clazz + LOG4CXX_STR("], level=[") + levelName + LOG4CXX_STR("]"));

	// This is degenerate case but you never know.
	if (levelName.empty())
	{
		return Level::toLevelLS(value, defaultValue);
	}

	try
	{
		Level::LevelClass&amp; levelClass =
			(Level::LevelClass&amp;)Loader::loadClass(clazz);
		return levelClass.toLev...</data>
      <data key="d7">303.0</data>
      <data key="d8">361.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">59.0</data>
      <data key="d12">36</data>
      <data key="d13">5</data>
      <data key="d14">34</data>
      <data key="d15">11</data>
      <data key="d16">2</data>
      <data key="d17">6</data>
      <data key="d18">5</data>
      <data key="d19">6</data>
      <data key="d20">0</data>
      <data key="d21">6</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">LevelPtr</data>
    </node>
    <node id="45102">
      <data key="d0">45102</data>
      <data key="d1">doConfigure</data>
      <data key="d2">1</data>
      <data key="d3">PropertyConfigurator.doConfigure</data>
      <data key="d4">ConfigurationStatus PropertyConfigurator.doConfigure (File,ANY)</data>
      <data key="d5">main\cpp\propertyconfigurator.cpp</data>
      <data key="d6">spi::ConfigurationStatus PropertyConfigurator::doConfigure(helpers::Properties&amp; properties,
	spi::LoggerRepositoryPtr hierarchy)
{
	hierarchy-&gt;setConfigured(true);

	static const WideLife&lt;LogString&gt; DEBUG_KEY(LOG4CXX_STR("log4j.debug"));
	LogString value(properties.getProperty(DEBUG_KEY));

	if (!value.empty())
	{
		LogLog::setInternalDebugging(OptionConverter::toBoolean(value, true));
	}

	static const WideLife&lt;LogString&gt; THRESHOLD_PREFIX(LOG4CXX_STR("log4j.threshold"));
	LogString thresholdStr =
		OptionConverter::findAndSubst(THRESHOLD_PREFIX, properties);

	if (!thresholdStr.empty())
	{
		hierarchy-&gt;setThreshold(OptionConverter::toLevel(thresholdStr, Level::getAll()));
		LogLog::debug(((LogString) LOG4CXX_STR("Hierarchy threshold set to ["))
			+ hierarchy-&gt;getThreshold()-&gt;toString()
			+ LOG4CXX_STR("]."));
	}

	LogString threadConfigurationValue(properties.getProperty(LOG4CXX_STR("log4j.threadConfiguration")));

	if ( threadConfigurationValue == LOG4CXX_STR("NoConfiguration") ...</data>
      <data key="d7">159.0</data>
      <data key="d8">214.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">56.0</data>
      <data key="d12">25</data>
      <data key="d13">6</data>
      <data key="d14">24</data>
      <data key="d15">11</data>
      <data key="d16">0</data>
      <data key="d17">3</data>
      <data key="d18">3</data>
      <data key="d19">3</data>
      <data key="d20">0</data>
      <data key="d21">3</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">ConfigurationStatus</data>
    </node>
    <node id="25645">
      <data key="d0">25645</data>
      <data key="d1">format</data>
      <data key="d2">1</data>
      <data key="d3">HTMLLayout.format</data>
      <data key="d4">void HTMLLayout.format (LogString,ANY,Pool)</data>
      <data key="d5">main\cpp\htmllayout.cpp</data>
      <data key="d6">void HTMLLayout::format(LogString&amp; output,
	const spi::LoggingEventPtr&amp; event,
	Pool&amp; p) const
{
	output.reserve(m_priv-&gt;expectedPatternLength + event-&gt;getMessage().size());
	output.append(LOG4CXX_EOL);
	output.append(LOG4CXX_STR("&lt;tr&gt;"));
	output.append(LOG4CXX_EOL);
	output.append(LOG4CXX_STR("&lt;td&gt;"));

	m_priv-&gt;dateFormat.format(output, event-&gt;getTimeStamp(), p);


	output.append(LOG4CXX_STR("&lt;/td&gt;"));
	output.append(LOG4CXX_EOL);

	output.append(LOG4CXX_STR("&lt;td title=\""));
	LogString threadName(event-&gt;getThreadName());
	output.append(threadName);
	output.append(LOG4CXX_STR(" thread\"&gt;"));
	output.append(threadName);
	output.append(LOG4CXX_STR("&lt;/td&gt;"));
	output.append(LOG4CXX_EOL);

	output.append(LOG4CXX_STR("&lt;td title=\"Level\"&gt;"));

	if (event-&gt;getLevel()-&gt;equals(Level::getDebug()))
	{
		output.append(LOG4CXX_STR("&lt;font color=\"#339933\"&gt;"));
		output.append(event-&gt;getLevel()-&gt;toString());
		output.append(LOG4CXX_STR("&lt;/font&gt;"));
	}
	else if (event-&gt;getLevel()-&gt;isGreaterOrE...</data>
      <data key="d7">83.0</data>
      <data key="d8">173.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">91.0</data>
      <data key="d12">70</data>
      <data key="d13">6</data>
      <data key="d14">88</data>
      <data key="d15">13</data>
      <data key="d16">0</data>
      <data key="d17">6</data>
      <data key="d18">5</data>
      <data key="d19">6</data>
      <data key="d20">1</data>
      <data key="d21">5</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">6</data>
      <data key="d26">3</data>
      <data key="d27">3</data>
      <data key="d28">void</data>
    </node>
    <node id="50225">
      <data key="d0">50225</data>
      <data key="d1">format</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.helpers.SimpleDateFormatImpl.GeneralTimeZoneToken.format</data>
      <data key="d4">void LOG4CXX_NS.helpers.SimpleDateFormatImpl.GeneralTimeZoneToken.format (LogString,apr_time_exp_t,Pool)</data>
      <data key="d5">main\cpp\simpledateformat.cpp</data>
      <data key="d6">void format( LogString&amp; s, const apr_time_exp_t&amp;, Pool&amp; /* p */ ) const
		{
			s.append(timeZone-&gt;getID());
		}</data>
      <data key="d7">570.0</data>
      <data key="d8">573.0</data>
      <data key="d9">3.0</data>
      <data key="d10">3.0</data>
      <data key="d11">4.0</data>
      <data key="d12">2</data>
      <data key="d13">2</data>
      <data key="d14">2</data>
      <data key="d15">2</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">6</data>
      <data key="d26">3</data>
      <data key="d27">3</data>
      <data key="d28">void</data>
    </node>
    <node id="61490">
      <data key="d0">61490</data>
      <data key="d1">createWriter</data>
      <data key="d2">1</data>
      <data key="d3">WriterAppender.createWriter</data>
      <data key="d4">WriterPtr WriterAppender.createWriter (OutputStreamPtr)</data>
      <data key="d5">main\cpp\writerappender.cpp</data>
      <data key="d6">WriterPtr WriterAppender::createWriter(OutputStreamPtr&amp; os)
{

	LogString enc(getEncoding());

	CharsetEncoderPtr encoder;

	if (enc.empty())
	{
		encoder = CharsetEncoder::getDefaultEncoder();
	}
	else
	{
		if (StringHelper::equalsIgnoreCase(enc,
				LOG4CXX_STR("utf-16"), LOG4CXX_STR("UTF-16")))
		{
			encoder = CharsetEncoder::getEncoder(LOG4CXX_STR("UTF-16BE"));
		}
		else
		{
			encoder = CharsetEncoder::getEncoder(enc);
		}

		if (encoder == NULL)
		{
			encoder = CharsetEncoder::getDefaultEncoder();
			LogLog::warn(LOG4CXX_STR("Error initializing output writer."));
			LogLog::warn(LOG4CXX_STR("Unsupported encoding?"));
		}
	}

	return WriterPtr(new OutputStreamWriter(os, encoder));
}</data>
      <data key="d7">209.0</data>
      <data key="d8">241.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">33.0</data>
      <data key="d12">4</data>
      <data key="d13">3</data>
      <data key="d14">6</data>
      <data key="d15">5</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">WriterPtr</data>
    </node>
    <node id="39989">
      <data key="d0">39989</data>
      <data key="d1">encode</data>
      <data key="d2">1</data>
      <data key="d3">ODBCAppender.encode</data>
      <data key="d4">void ODBCAppender.encode (short unsigned**,LogString,Pool)</data>
      <data key="d5">main\cpp\odbcappender.cpp</data>
      <data key="d6">void ODBCAppender::encode(unsigned short** dest,
	const LogString&amp; src, Pool&amp; p)
{
	//  worst case double number of characters from UTF-8 or wchar_t
	*dest = (unsigned short*)
		p.palloc((src.size() + 1) * 2 * sizeof(unsigned short));
	unsigned short* current = *dest;

	for (LogString::const_iterator i = src.begin();
		i != src.end();)
	{
		unsigned int sv = Transcoder::decode(src, i);

		if (sv &lt; 0x10000)
		{
			*current++ = (unsigned short) sv;
		}
		else
		{
			unsigned char u = (unsigned char) (sv &gt;&gt; 16);
			unsigned char w = (unsigned char) (u - 1);
			unsigned short hs = (0xD800 + ((w &amp; 0xF) &lt;&lt; 6) + ((sv &amp; 0xFFFF) &gt;&gt; 10));
			unsigned short ls = (0xDC00 + (sv &amp; 0x3FF));
			*current++ = (unsigned short) hs;
			*current++ = (unsigned short) ls;
		}
	}

	*current = 0;
}</data>
      <data key="d7">626.0</data>
      <data key="d8">655.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">30.0</data>
      <data key="d12">24</data>
      <data key="d13">10</data>
      <data key="d14">18</data>
      <data key="d15">8</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">3</data>
      <data key="d19">4</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">6</data>
      <data key="d26">3</data>
      <data key="d27">3</data>
      <data key="d28">void</data>
    </node>
    <node id="4159">
      <data key="d0">4159</data>
      <data key="d1">APRInitializer</data>
      <data key="d2">1</data>
      <data key="d3">APRInitializer.APRInitializer</data>
      <data key="d4">ANY APRInitializer.APRInitializer ()</data>
      <data key="d5">main\cpp\aprinitializer.cpp</data>
      <data key="d6">APRInitializer::APRInitializer() :
	m_priv(std::make_unique&lt;APRInitializerPrivate&gt;())
{
	apr_pool_create(&amp;m_priv-&gt;p, NULL);
	m_priv-&gt;startTime = Date::currentTime();
#if APR_HAS_THREADS
	apr_status_t stat = apr_threadkey_private_create(&amp;m_priv-&gt;tlsKey, tlsDestructImpl, m_priv-&gt;p);
	assert(stat == APR_SUCCESS);
#endif
}</data>
      <data key="d7">83.0</data>
      <data key="d8">92.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">10.0</data>
      <data key="d12">5</data>
      <data key="d13">4</data>
      <data key="d14">4</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">ANY</data>
    </node>
    <node id="50240">
      <data key="d0">50240</data>
      <data key="d1">setTimeZone</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.helpers.SimpleDateFormatImpl.GeneralTimeZoneToken.setTimeZone</data>
      <data key="d4">void LOG4CXX_NS.helpers.SimpleDateFormatImpl.GeneralTimeZoneToken.setTimeZone (TimeZonePtr)</data>
      <data key="d5">main\cpp\simpledateformat.cpp</data>
      <data key="d6">void setTimeZone( const TimeZonePtr&amp; zone )
		{
			timeZone = zone;
		}</data>
      <data key="d7">575.0</data>
      <data key="d8">578.0</data>
      <data key="d9">3.0</data>
      <data key="d10">3.0</data>
      <data key="d11">4.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">2</data>
      <data key="d15">2</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="16449">
      <data key="d0">16449</data>
      <data key="d1">parseLevel</data>
      <data key="d2">1</data>
      <data key="d3">DOMConfigurator.parseLevel</data>
      <data key="d4">void DOMConfigurator.parseLevel (ANY,ANY,apr_xml_elem*,LoggerPtr,bool)</data>
      <data key="d5">main\cpp\domconfigurator.cpp</data>
      <data key="d6">void DOMConfigurator::parseLevel(
	LOG4CXX_NS::helpers::Pool&amp; p,
	LOG4CXX_NS::helpers::CharsetDecoderPtr&amp; utf8Decoder,
	apr_xml_elem* element, LoggerPtr logger, bool isRoot)
{
	LogString loggerName = logger-&gt;getName();

	if (isRoot)
	{
		loggerName = LOG4CXX_STR("root");
	}

	LogString levelStr(subst(getAttribute(utf8Decoder, element, VALUE_ATTR)));
	LogLog::debug(LOG4CXX_STR("Level value for ") + loggerName + LOG4CXX_STR(" is [") + levelStr + LOG4CXX_STR("]."));

	if (StringHelper::equalsIgnoreCase(levelStr, LOG4CXX_STR("INHERITED"), LOG4CXX_STR("inherited"))
		|| StringHelper::equalsIgnoreCase(levelStr, LOG4CXX_STR("NULL"), LOG4CXX_STR("null")))
	{
		if (isRoot)
		{
			LogLog::error(LOG4CXX_STR("Root level cannot be inherited. Ignoring directive."));
		}
		else
		{
			logger-&gt;setLevel(0);
		}
	}
	else
	{
		LogString className(subst(getAttribute(utf8Decoder, element, CLASS_ATTR)));

		if (className.empty())
		{
			logger-&gt;setLevel(OptionConverter::toLevel(levelStr, Level::getDebug(...</data>
      <data key="d7">700.0</data>
      <data key="d8">767.0</data>
      <data key="d9">1.0</data>
      <data key="d10">61.0</data>
      <data key="d11">68.0</data>
      <data key="d12">17</data>
      <data key="d13">5</data>
      <data key="d14">18</data>
      <data key="d15">8</data>
      <data key="d16">0</data>
      <data key="d17">5</data>
      <data key="d18">4</data>
      <data key="d19">5</data>
      <data key="d20">2</data>
      <data key="d21">5</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">2</data>
      <data key="d25">10</data>
      <data key="d26">5</data>
      <data key="d27">5</data>
      <data key="d28">void</data>
    </node>
    <node id="43074">
      <data key="d0">43074</data>
      <data key="d1">parse</data>
      <data key="d2">1</data>
      <data key="d3">PatternParser.parse</data>
      <data key="d4">void PatternParser.parse (LogString,ANY,ANY,PatternMap)</data>
      <data key="d5">main\cpp\patternparser.cpp</data>
      <data key="d6">void PatternParser::parse(
	const LogString&amp; pattern,
	std::vector&lt;PatternConverterPtr&gt;&amp; patternConverters,
	std::vector&lt;FormattingInfoPtr&gt;&amp; formattingInfos,
	const PatternMap&amp; rules)
{

	LogString currentLiteral;

	size_t patternLength = pattern.length();
	int state = LITERAL_STATE;
	logchar c;
	size_t i = 0;
	FormattingInfoPtr formattingInfo(FormattingInfo::getDefault());

	while (i &lt; patternLength)
	{
		c = pattern[i++];

		switch (state)
		{
			case LITERAL_STATE:

				// In literal state, the last char is always a literal.
				if (i == patternLength)
				{
					currentLiteral.append(1, c);

					continue;
				}

				if (c == ESCAPE_CHAR)
				{
					// peek at the next char.
					if (pattern[i] == ESCAPE_CHAR)
					{
						currentLiteral.append(1, c);
						i++; // move pointer
					}
					else
					{
						if (!currentLiteral.empty())
						{
							patternConverters.push_back(
								LiteralPatternConverter::newInstance(currentLiteral));
							formattingInfos.push_back(Forma...</data>
      <data key="d7">115.0</data>
      <data key="d8">304.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">190.0</data>
      <data key="d12">91</data>
      <data key="d13">17</data>
      <data key="d14">89</data>
      <data key="d15">18</data>
      <data key="d16">2</data>
      <data key="d17">5</data>
      <data key="d18">20</data>
      <data key="d19">31</data>
      <data key="d20">2</data>
      <data key="d21">1</data>
      <data key="d22">2</data>
      <data key="d23">0</data>
      <data key="d24">2</data>
      <data key="d25">8</data>
      <data key="d26">4</data>
      <data key="d27">4</data>
      <data key="d28">void</data>
    </node>
    <node id="13379">
      <data key="d0">13379</data>
      <data key="d1">setOption</data>
      <data key="d2">1</data>
      <data key="d3">DBAppender.setOption</data>
      <data key="d4">void DBAppender.setOption (LogString,LogString)</data>
      <data key="d5">main\cpp\dbappender.cpp</data>
      <data key="d6">void DBAppender::setOption(const LogString&amp; option, const LogString&amp; value){
    if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("COLUMNMAPPING"), LOG4CXX_STR("columnmapping")))
    {
        _priv-&gt;mappedName.push_back(value);
    }
    else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("DRIVERNAME"), LOG4CXX_STR("drivername")))
    {
        Transcoder::encodeUTF8(value, _priv-&gt;driverName);
    }
    else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("DRIVERPARAMS"), LOG4CXX_STR("driverparams")))
    {
        Transcoder::encodeUTF8(value, _priv-&gt;driverParams);
    }
    else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("DATABASENAME"), LOG4CXX_STR("databasename")))
    {
        Transcoder::encodeUTF8(value, _priv-&gt;databaseName);
    }
    else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("SQL"), LOG4CXX_STR("sql")))
    {
        Transcoder::encodeUTF8(value, _priv-&gt;sqlStatement);
    }
    else
    {
        AppenderSkeleton::setOpti...</data>
      <data key="d7">120.0</data>
      <data key="d8">145.0</data>
      <data key="d9">1.0</data>
      <data key="d10">8.0</data>
      <data key="d11">26.0</data>
      <data key="d12">5</data>
      <data key="d13">3</data>
      <data key="d14">4</data>
      <data key="d15">4</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">1</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="50248">
      <data key="d0">50248</data>
      <data key="d1">timeZone</data>
      <data key="d2">3</data>
      <data key="d3">LOG4CXX_NS.helpers.SimpleDateFormatImpl.GeneralTimeZoneToken.timeZone</data>
      <data key="d4" />
      <data key="d5">main\cpp\simpledateformat.cpp</data>
      <data key="d6">timeZone</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">2</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="23628">
      <data key="d0">23628</data>
      <data key="d1">hexdump</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.hexdump</data>
      <data key="d4">LogString LOG4CXX_NS.hexdump (void*,uint32_t,HexdumpFlags)</data>
      <data key="d5">main\cpp\hexdump.cpp</data>
      <data key="d6">LogString LOG4CXX_NS::hexdump(const void* bytes, uint32_t len, HexdumpFlags flags){
	LogString ret;
	const uint8_t* bytes_u8 = static_cast&lt;const uint8_t*&gt;(bytes);
	LogStream sstream;
#if LOG4CXX_LOGCHAR_IS_WCHAR
	const wchar_t fill_char = L'0';
	const wchar_t space_fill_char = L' ';
#else
	const logchar fill_char = '0';
	const logchar space_fill_char = ' ';
#endif

	if(flags &amp; HexdumpFlags::AddStartingNewline){
		sstream &lt;&lt; LOG4CXX_EOL;
	}

	for(uint32_t offset = 0; offset &lt; len; offset += 16){
		if(offset != 0){
			sstream &lt;&lt; LOG4CXX_EOL;
		}

		// Print out the offset
		sstream &lt;&lt; std::hex &lt;&lt; std::setw(8) &lt;&lt; std::setfill(fill_char) &lt;&lt; offset &lt;&lt; std::resetiosflags(std::ios_base::fmtflags(0));

		sstream &lt;&lt; std::setw(0) &lt;&lt; LOG4CXX_STR("  ");

		// Print out the first 8 bytes
		for(int byte = 0; byte &lt; 8; byte++){
			if(offset + byte &gt;= len){
				sstream &lt;&lt; LOG4CXX_STR("  ");
				if(byte != 8){
					sstream &lt;&lt; LOG4CXX_STR(" ");
				}
				continue;
			}

			sstream &lt;&lt; std::hex &lt;&lt; std:...</data>
      <data key="d7">34.0</data>
      <data key="d8">116.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">83.0</data>
      <data key="d12">91</data>
      <data key="d13">10</data>
      <data key="d14">93</data>
      <data key="d15">14</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">19</data>
      <data key="d19">38</data>
      <data key="d20">2</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">2</data>
      <data key="d25">6</data>
      <data key="d26">3</data>
      <data key="d27">3</data>
      <data key="d28">LogString</data>
    </node>
    <node id="4177">
      <data key="d0">4177</data>
      <data key="d1">~APRInitializer</data>
      <data key="d2">1</data>
      <data key="d3">APRInitializer.~APRInitializer</data>
      <data key="d4">ANY APRInitializer.~APRInitializer ()</data>
      <data key="d5">main\cpp\aprinitializer.cpp</data>
      <data key="d6">APRInitializer::~APRInitializer()
{
	stopWatchDogs();
	isDestructed = true;
#if APR_HAS_THREADS
	std::unique_lock&lt;std::mutex&gt; lock(m_priv-&gt;mutex);
	apr_threadkey_private_delete(m_priv-&gt;tlsKey);
#endif
}</data>
      <data key="d7">94.0</data>
      <data key="d8">102.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">9.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">1</data>
      <data key="d15">1</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">ANY</data>
    </node>
    <node id="33875">
      <data key="d0">33875</data>
      <data key="d1">getLoggerRepository</data>
      <data key="d2">1</data>
      <data key="d3">LogManager.getLoggerRepository</data>
      <data key="d4">LoggerRepositoryPtr LogManager.getLoggerRepository ()</data>
      <data key="d5">main\cpp\logmanager.cpp</data>
      <data key="d6">LoggerRepositoryPtr LogManager::getLoggerRepository()
{
	return getRepositorySelector()-&gt;getLoggerRepository();
}</data>
      <data key="d7">76.0</data>
      <data key="d8">79.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">4.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">7</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">LoggerRepositoryPtr</data>
    </node>
    <node id="62548">
      <data key="d0">62548</data>
      <data key="d1">DEFAULT_PORT</data>
      <data key="d2">2</data>
      <data key="d3">main\cpp\xmlsocketappender.cpp.DEFAULT_PORT</data>
      <data key="d4" />
      <data key="d5">main\cpp\xmlsocketappender.cpp</data>
      <data key="d6">int DEFAULT_PORT</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="9304">
      <data key="d0">9304</data>
      <data key="d1">encode</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.helpers.UTF8CharsetEncoder.encode</data>
      <data key="d4">log4cxx_status_t LOG4CXX_NS.helpers.UTF8CharsetEncoder.encode (LogString,ANY,ByteBuffer)</data>
      <data key="d5">main\cpp\charsetencoder.cpp</data>
      <data key="d6">virtual log4cxx_status_t encode(const LogString&amp; in,
			LogString::const_iterator&amp; iter,
			ByteBuffer&amp; out)
		{
			while (iter != in.end() &amp;&amp; out.remaining() &gt;= 8)
			{
				unsigned int sv = Transcoder::decode(in, iter);

				if (sv == 0xFFFF)
				{
					return APR_BADARG;
				}

				Transcoder::encodeUTF8(sv, out);
			}

			return APR_SUCCESS;
		}</data>
      <data key="d7">355.0</data>
      <data key="d8">372.0</data>
      <data key="d9">3.0</data>
      <data key="d10">3.0</data>
      <data key="d11">18.0</data>
      <data key="d12">9</data>
      <data key="d13">6</data>
      <data key="d14">13</data>
      <data key="d15">7</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">3</data>
      <data key="d19">4</data>
      <data key="d20">0</data>
      <data key="d21">2</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">6</data>
      <data key="d26">3</data>
      <data key="d27">3</data>
      <data key="d28">log4cxx_status_t</data>
    </node>
    <node id="62552">
      <data key="d0">62552</data>
      <data key="d1">DEFAULT_RECONNECTION_DELAY</data>
      <data key="d2">2</data>
      <data key="d3">main\cpp\xmlsocketappender.cpp.DEFAULT_RECONNECTION_DELAY</data>
      <data key="d4" />
      <data key="d5">main\cpp\xmlsocketappender.cpp</data>
      <data key="d6">int DEFAULT_RECONNECTION_DELAY</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="33884">
      <data key="d0">33884</data>
      <data key="d1">getRootLogger</data>
      <data key="d2">1</data>
      <data key="d3">LogManager.getRootLogger</data>
      <data key="d4">LoggerPtr LogManager.getRootLogger ()</data>
      <data key="d5">main\cpp\logmanager.cpp</data>
      <data key="d6">LoggerPtr LogManager::getRootLogger()
{
	// Delegate the actual manufacturing of the logger to the logger repository.
	auto r = getLoggerRepository();
	r-&gt;ensureIsConfigured(std::bind(DefaultConfigurator::configure, r));
	return r-&gt;getRootLogger();
}</data>
      <data key="d7">81.0</data>
      <data key="d8">87.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">7.0</data>
      <data key="d12">5</data>
      <data key="d13">3</data>
      <data key="d14">6</data>
      <data key="d15">3</data>
      <data key="d16">3</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">LoggerPtr</data>
    </node>
    <node id="12383">
      <data key="d0">12383</data>
      <data key="d1">create</data>
      <data key="d2">1</data>
      <data key="d3">DatagramSocket.create</data>
      <data key="d4">DatagramSocketUniquePtr DatagramSocket.create ()</data>
      <data key="d5">main\cpp\datagramsocket.cpp</data>
      <data key="d6">DatagramSocketUniquePtr DatagramSocket::create(int localPort1, InetAddressPtr localAddress1){
	auto sock = std::make_unique&lt;APRDatagramSocket&gt;(localPort1, localAddress1);

	sock-&gt;bind(localPort1, localAddress1);
	return sock;
}</data>
      <data key="d7">91.0</data>
      <data key="d8">96.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">6.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">1</data>
      <data key="d15">1</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">DatagramSocketUniquePtr</data>
    </node>
    <node id="37984">
      <data key="d0">37984</data>
      <data key="d1">os</data>
      <data key="d2">3</data>
      <data key="d3">LOG4CXX_NS.rolling.CountingOutputStream.os</data>
      <data key="d4" />
      <data key="d5">main\cpp\multiprocessrollingfileappender.cpp</data>
      <data key="d6">os</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="57442">
      <data key="d0">57442</data>
      <data key="d1">inherit</data>
      <data key="d2">1</data>
      <data key="d3">ThreadSpecificData.inherit</data>
      <data key="d4">void ThreadSpecificData.inherit (ANY)</data>
      <data key="d5">main\cpp\threadspecificdata.cpp</data>
      <data key="d6">void ThreadSpecificData::inherit(const NDC::Stack&amp; src)
{
	ThreadSpecificData* data = getCurrentData();

	if (data == 0)
	{
		data = createCurrentData();
	}

	if (data != 0)
	{
		data-&gt;getStack() = src;
	}
}</data>
      <data key="d7">143.0</data>
      <data key="d8">156.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">14.0</data>
      <data key="d12">6</data>
      <data key="d13">4</data>
      <data key="d14">6</data>
      <data key="d15">2</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">3</data>
      <data key="d19">3</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="55395">
      <data key="d0">55395</data>
      <data key="d1">setSyslogHost</data>
      <data key="d2">1</data>
      <data key="d3">SyslogAppender.setSyslogHost</data>
      <data key="d4">void SyslogAppender.setSyslogHost (LogString)</data>
      <data key="d5">main\cpp\syslogappender.cpp</data>
      <data key="d6">void SyslogAppender::setSyslogHost(const LogString&amp; syslogHost1)
{
	if (_priv-&gt;sw != 0)
	{
		_priv-&gt;sw = nullptr;
	}

	LogString slHost = syslogHost1;
	int slHostPort = -1;

	LogString::size_type colonPos = 0;
	colonPos = slHost.rfind(':');

	if (colonPos != LogString::npos)
	{
		slHostPort = StringHelper::toInt(slHost.substr(colonPos + 1));
		// Erase the :port part of the host name
		slHost.erase( colonPos );
	}

	// On the local host, we can directly use the system function 'syslog'
	// if it is available (cf. append)
#if LOG4CXX_HAVE_SYSLOG

	if (syslogHost1 != LOG4CXX_STR("localhost") &amp;&amp; syslogHost1 != LOG4CXX_STR("127.0.0.1")
		&amp;&amp; !syslogHost1.empty())
#endif
	{
		if (slHostPort &gt;= 0)
		{
			_priv-&gt;sw = std::make_unique&lt;SyslogWriter&gt;(slHost, slHostPort);
		}
		else
		{
			_priv-&gt;sw = std::make_unique&lt;SyslogWriter&gt;(slHost);
		}
	}

	_priv-&gt;syslogHost = slHost;
	_priv-&gt;syslogHostPort = slHostPort;
}</data>
      <data key="d7">399.0</data>
      <data key="d8">439.0</data>
      <data key="d9">1.0</data>
      <data key="d10">5.0</data>
      <data key="d11">41.0</data>
      <data key="d12">39</data>
      <data key="d13">12</data>
      <data key="d14">26</data>
      <data key="d15">9</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">4</data>
      <data key="d19">4</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="37992">
      <data key="d0">37992</data>
      <data key="d1">close</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.rolling.CountingOutputStream.close</data>
      <data key="d4">void LOG4CXX_NS.rolling.CountingOutputStream.close (Pool)</data>
      <data key="d5">main\cpp\rollingfileappender.cpp</data>
      <data key="d6">void close(Pool&amp; p)
		{
			os-&gt;close(p);
			rfa = 0;
		}</data>
      <data key="d7">560.0</data>
      <data key="d8">564.0</data>
      <data key="d9">3.0</data>
      <data key="d10">3.0</data>
      <data key="d11">5.0</data>
      <data key="d12">2</data>
      <data key="d13">2</data>
      <data key="d14">3</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">2</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="18538">
      <data key="d0">18538</data>
      <data key="d1">decodeLS</data>
      <data key="d2">1</data>
      <data key="d3">decodeLS</data>
      <data key="d4">LogString decodeLS&lt;S&gt; (S*)</data>
      <data key="d5">main\cpp\file.cpp</data>
      <data key="d6">static LogString decodeLS(const std::basic_string&lt;S&gt;&amp; src)
{
	LogString dst;
	Transcoder::decode(src, dst);
	return dst;
}</data>
      <data key="d7">68.0</data>
      <data key="d8">73.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">6.0</data>
      <data key="d12">2</data>
      <data key="d13">2</data>
      <data key="d14">5</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">LogString</data>
    </node>
    <node id="14445">
      <data key="d0">14445</data>
      <data key="d1">getConfiguratorClass</data>
      <data key="d2">1</data>
      <data key="d3">DefaultConfigurator.getConfiguratorClass</data>
      <data key="d4">LogString DefaultConfigurator.getConfiguratorClass ()</data>
      <data key="d5">main\cpp\defaultconfigurator.cpp</data>
      <data key="d6">const LogString DefaultConfigurator::getConfiguratorClass()
{

	// Use automatic configration to configure the default hierarchy
	const LogString log4jConfiguratorClassName(
		OptionConverter::getSystemProperty(LOG4CXX_STR("log4j.configuratorClass"), LOG4CXX_STR("")));
	const LogString configuratorClassName(
		OptionConverter::getSystemProperty(LOG4CXX_STR("LOG4CXX_CONFIGURATOR_CLASS"),
			log4jConfiguratorClassName));
	return configuratorClassName;
}</data>
      <data key="d7">124.0</data>
      <data key="d8">134.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">11.0</data>
      <data key="d12">2</data>
      <data key="d13">1</data>
      <data key="d14">4</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">2</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">LogString</data>
    </node>
    <node id="33909">
      <data key="d0">33909</data>
      <data key="d1">getLoggerLS</data>
      <data key="d2">1</data>
      <data key="d3">LogManager.getLoggerLS</data>
      <data key="d4">LoggerPtr LogManager.getLoggerLS (LogString)</data>
      <data key="d5">main\cpp\logmanager.cpp</data>
      <data key="d6">LoggerPtr LogManager::getLoggerLS(const LogString&amp; name,
	const spi::LoggerFactoryPtr&amp; factory)
{
	// Delegate the actual manufacturing of the logger to the logger repository.
	auto r = getLoggerRepository();
	r-&gt;ensureIsConfigured(std::bind(DefaultConfigurator::configure, r));
	return r-&gt;getLogger(name, factory);
}</data>
      <data key="d7">102.0</data>
      <data key="d8">109.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">8.0</data>
      <data key="d12">5</data>
      <data key="d13">3</data>
      <data key="d14">7</data>
      <data key="d15">4</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">LoggerPtr</data>
    </node>
    <node id="38005">
      <data key="d0">38005</data>
      <data key="d1">flush</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.rolling.CountingOutputStream.flush</data>
      <data key="d4">void LOG4CXX_NS.rolling.CountingOutputStream.flush (Pool)</data>
      <data key="d5">main\cpp\rollingfileappender.cpp</data>
      <data key="d6">void flush(Pool&amp; p)
		{
			os-&gt;flush(p);
		}</data>
      <data key="d7">569.0</data>
      <data key="d8">572.0</data>
      <data key="d9">3.0</data>
      <data key="d10">3.0</data>
      <data key="d11">4.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">2</data>
      <data key="d15">2</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="42108">
      <data key="d0">42108</data>
      <data key="d1">activateOptions</data>
      <data key="d2">1</data>
      <data key="d3">PatternLayout.activateOptions</data>
      <data key="d4">void PatternLayout.activateOptions (Pool)</data>
      <data key="d5">main\cpp\patternlayout.cpp</data>
      <data key="d6">void PatternLayout::activateOptions(Pool&amp;)
{
	LogString pat(m_priv-&gt;conversionPattern);

	if (pat.empty())
	{
		pat = LOG4CXX_STR("%m%n");
	}

	m_priv-&gt;patternConverters.erase(m_priv-&gt;patternConverters.begin(), m_priv-&gt;patternConverters.end());
	m_priv-&gt;patternFields.erase(m_priv-&gt;patternFields.begin(), m_priv-&gt;patternFields.end());
	std::vector&lt;PatternConverterPtr&gt; converters;
	PatternParser::parse(pat,
		converters,
		m_priv-&gt;patternFields,
		getFormatSpecifiers());

	//
	//   strip out any pattern converters that don't handle LoggingEvents
	//
	//
	for (std::vector&lt;PatternConverterPtr&gt;::const_iterator converterIter = converters.begin();
		converterIter != converters.end();
		converterIter++)
	{
		LoggingEventPatternConverterPtr eventConverter =
			LOG4CXX_NS::cast&lt;LoggingEventPatternConverter&gt;(*converterIter);

		if (eventConverter != NULL)
		{
			m_priv-&gt;patternConverters.push_back(eventConverter);
		}
	}
	m_priv-&gt;expectedPatternLength = getFormattedEventCharacterCount() * 2;
}</data>
      <data key="d7">177.0</data>
      <data key="d8">211.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">35.0</data>
      <data key="d12">35</data>
      <data key="d13">8</data>
      <data key="d14">29</data>
      <data key="d15">11</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">4</data>
      <data key="d19">5</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="38015">
      <data key="d0">38015</data>
      <data key="d1">write</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.rolling.CountingOutputStream.write</data>
      <data key="d4">void LOG4CXX_NS.rolling.CountingOutputStream.write (ByteBuffer,Pool)</data>
      <data key="d5">main\cpp\rollingfileappender.cpp</data>
      <data key="d6">void write(ByteBuffer&amp; buf, Pool&amp; p)
		{
			os-&gt;write(buf, p);

			if (rfa != 0)
			{
				rfa-&gt;incrementFileLength(buf.limit());
			}
		}</data>
      <data key="d7">577.0</data>
      <data key="d8">585.0</data>
      <data key="d9">3.0</data>
      <data key="d10">3.0</data>
      <data key="d11">9.0</data>
      <data key="d12">6</data>
      <data key="d13">3</data>
      <data key="d14">7</data>
      <data key="d15">4</data>
      <data key="d16">0</data>
      <data key="d17">4</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">1</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">4</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="8321">
      <data key="d0">8321</data>
      <data key="d1">decode</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.helpers.UTF8CharsetDecoder.decode</data>
      <data key="d4">log4cxx_status_t LOG4CXX_NS.helpers.UTF8CharsetDecoder.decode (ByteBuffer,LogString)</data>
      <data key="d5">main\cpp\charsetdecoder.cpp</data>
      <data key="d6">virtual log4cxx_status_t decode(ByteBuffer&amp; in,
			LogString&amp; out)
		{
			if (in.remaining() &gt; 0)
			{
				std::string tmp(in.current(), in.remaining());
				std::string::const_iterator iter = tmp.begin();

				while (iter != tmp.end())
				{
					unsigned int sv = Transcoder::decode(tmp, iter);

					if (sv == 0xFFFF)
					{
						size_t offset = iter - tmp.begin();
						in.position(in.position() + offset);
						return APR_BADARG;
					}
					else
					{
						Transcoder::encode(sv, out);
					}
				}

				in.position(in.limit());
			}

			return APR_SUCCESS;
		}</data>
      <data key="d7">287.0</data>
      <data key="d8">315.0</data>
      <data key="d9">3.0</data>
      <data key="d10">3.0</data>
      <data key="d11">29.0</data>
      <data key="d12">19</data>
      <data key="d13">7</data>
      <data key="d14">22</data>
      <data key="d15">8</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">4</data>
      <data key="d19">7</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">log4cxx_status_t</data>
    </node>
    <node id="14470">
      <data key="d0">14470</data>
      <data key="d1">getConfigurationFileName</data>
      <data key="d2">1</data>
      <data key="d3">DefaultConfigurator.getConfigurationFileName</data>
      <data key="d4">LogString DefaultConfigurator.getConfigurationFileName ()</data>
      <data key="d5">main\cpp\defaultconfigurator.cpp</data>
      <data key="d6">const LogString DefaultConfigurator::getConfigurationFileName()
{
	static const WideLife&lt;LogString&gt; LOG4CXX_DEFAULT_CONFIGURATION_KEY(LOG4CXX_STR("LOG4CXX_CONFIGURATION"));
	static const WideLife&lt;LogString&gt; LOG4J_DEFAULT_CONFIGURATION_KEY(LOG4CXX_STR("log4j.configuration"));
	const LogString log4jConfigurationFileName(
		OptionConverter::getSystemProperty(LOG4J_DEFAULT_CONFIGURATION_KEY, LOG4CXX_STR("")));
	const LogString configurationFileName(
		OptionConverter::getSystemProperty(LOG4CXX_DEFAULT_CONFIGURATION_KEY,
			log4jConfigurationFileName));
	return configurationFileName;
}</data>
      <data key="d7">137.0</data>
      <data key="d8">147.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">11.0</data>
      <data key="d12">2</data>
      <data key="d13">1</data>
      <data key="d14">6</data>
      <data key="d15">5</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">2</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">LogString</data>
    </node>
    <node id="21638">
      <data key="d0">21638</data>
      <data key="d1">activateOptions</data>
      <data key="d2">1</data>
      <data key="d3">FixedWindowRollingPolicy.activateOptions</data>
      <data key="d4">void FixedWindowRollingPolicy.activateOptions (Pool)</data>
      <data key="d5">main\cpp\fixedwindowrollingpolicy.cpp</data>
      <data key="d6">void FixedWindowRollingPolicy::activateOptions(Pool&amp; p)
{
	RollingPolicyBase::activateOptions(p);

	if (priv-&gt;maxIndex &lt; priv-&gt;minIndex)
	{
		LogLog::warn(
			LOG4CXX_STR("MaxIndex  cannot be smaller than MinIndex."));
		priv-&gt;maxIndex = priv-&gt;minIndex;
	}

	if ((priv-&gt;maxIndex - priv-&gt;minIndex) &gt; MAX_WINDOW_SIZE)
	{
		LogLog::warn(LOG4CXX_STR("Large window sizes are not allowed."));
		priv-&gt;maxIndex = priv-&gt;minIndex + MAX_WINDOW_SIZE;
	}

	PatternConverterPtr itc = getIntegerPatternConverter();

	if (itc == NULL)
	{
		throw IllegalStateException();
	}
}</data>
      <data key="d7">102.0</data>
      <data key="d8">125.0</data>
      <data key="d9">1.0</data>
      <data key="d10">5.0</data>
      <data key="d11">24.0</data>
      <data key="d12">36</data>
      <data key="d13">10</data>
      <data key="d14">17</data>
      <data key="d15">7</data>
      <data key="d16">0</data>
      <data key="d17">3</data>
      <data key="d18">4</data>
      <data key="d19">4</data>
      <data key="d20">0</data>
      <data key="d21">3</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="4232">
      <data key="d0">4232</data>
      <data key="d1">unregisterAll</data>
      <data key="d2">1</data>
      <data key="d3">APRInitializer.unregisterAll</data>
      <data key="d4">void APRInitializer.unregisterAll ()</data>
      <data key="d5">main\cpp\aprinitializer.cpp</data>
      <data key="d6">void APRInitializer::unregisterAll()
{
	getInstance().stopWatchDogs();
}</data>
      <data key="d7">116.0</data>
      <data key="d8">119.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">4.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">void</data>
    </node>
    <node id="39054">
      <data key="d0">39054</data>
      <data key="d1">peek</data>
      <data key="d2">1</data>
      <data key="d3">NDC.peek</data>
      <data key="d4">LogString NDC.peek ()</data>
      <data key="d5">main\cpp\ndc.cpp</data>
      <data key="d6">bool NDC::peek(std::string&amp; dst)
{
	ThreadSpecificData* data = ThreadSpecificData::getCurrentData();

	if (data != 0)
	{
		Stack&amp; stack = data-&gt;getStack();

		if (!stack.empty())
		{
			Transcoder::encode(getMessage(stack.top()), dst);
			return true;
		}

		data-&gt;recycle();
	}

	return false;
}</data>
      <data key="d7">191.0</data>
      <data key="d8">209.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">19.0</data>
      <data key="d12">9</data>
      <data key="d13">5</data>
      <data key="d14">8</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">3</data>
      <data key="d19">4</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">bool</data>
    </node>
    <node id="51346">
      <data key="d0">51346</data>
      <data key="d1">setOption</data>
      <data key="d2">1</data>
      <data key="d3">SMTPAppender.setOption</data>
      <data key="d4">void SMTPAppender.setOption (LogString,LogString)</data>
      <data key="d5">main\cpp\smtpappender.cpp</data>
      <data key="d6">void SMTPAppender::setOption(const LogString&amp; option,
	const LogString&amp; value)
{
	if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("BUFFERSIZE"), LOG4CXX_STR("buffersize")))
	{
		setBufferSize(OptionConverter::toInt(value, 512));
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("EVALUATORCLASS"), LOG4CXX_STR("evaluatorclass")))
	{
		setEvaluatorClass(value);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("FROM"), LOG4CXX_STR("from")))
	{
		setFrom(value);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("SMTPHOST"), LOG4CXX_STR("smtphost")))
	{
		setSMTPHost(value);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("SMTPUSERNAME"), LOG4CXX_STR("smtpusername")))
	{
		setSMTPUsername(value);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("SMTPPASSWORD"), LOG4CXX_STR("smtppassword")))
	{
		setSMTPPassword(value);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("SUBJECT"), LOG4CXX_STR("su...</data>
      <data key="d7">525.0</data>
      <data key="d8">576.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">52.0</data>
      <data key="d12">2</data>
      <data key="d13">1</data>
      <data key="d14">4</data>
      <data key="d15">4</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">1</data>
      <data key="d21">2</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="32914">
      <data key="d0">32914</data>
      <data key="d1">getMDCCopy</data>
      <data key="d2">1</data>
      <data key="d3">LoggingEvent.getMDCCopy</data>
      <data key="d4">void LoggingEvent.getMDCCopy ()</data>
      <data key="d5">main\cpp\loggingevent.cpp</data>
      <data key="d6">void LoggingEvent::getMDCCopy() const
{
	if (m_priv-&gt;mdcCopyLookupRequired)
	{
		m_priv-&gt;mdcCopyLookupRequired = false;
		// the clone call is required for asynchronous logging.
		ThreadSpecificData* data = ThreadSpecificData::getCurrentData();

		if (data != 0)
		{
			m_priv-&gt;mdcCopy = new MDC::Map(data-&gt;getMap());
		}
		else
		{
			m_priv-&gt;mdcCopy = new MDC::Map();
		}
	}
}</data>
      <data key="d7">285.0</data>
      <data key="d8">302.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">18.0</data>
      <data key="d12">10</data>
      <data key="d13">5</data>
      <data key="d14">8</data>
      <data key="d15">4</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">3</data>
      <data key="d19">4</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">void</data>
    </node>
    <node id="9365">
      <data key="d0">9365</data>
      <data key="d1">encode</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.helpers.UTF16BECharsetEncoder.encode</data>
      <data key="d4">log4cxx_status_t LOG4CXX_NS.helpers.UTF16BECharsetEncoder.encode (LogString,ANY,ByteBuffer)</data>
      <data key="d5">main\cpp\charsetencoder.cpp</data>
      <data key="d6">virtual log4cxx_status_t encode(const LogString&amp; in,
			LogString::const_iterator&amp; iter,
			ByteBuffer&amp; out)
		{
			while (iter != in.end() &amp;&amp; out.remaining() &gt;= 4)
			{
				unsigned int sv = Transcoder::decode(in, iter);

				if (sv == 0xFFFF)
				{
					return APR_BADARG;
				}

				Transcoder::encodeUTF16BE(sv, out);
			}

			return APR_SUCCESS;
		}</data>
      <data key="d7">390.0</data>
      <data key="d8">407.0</data>
      <data key="d9">3.0</data>
      <data key="d10">3.0</data>
      <data key="d11">18.0</data>
      <data key="d12">9</data>
      <data key="d13">6</data>
      <data key="d14">13</data>
      <data key="d15">7</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">3</data>
      <data key="d19">4</data>
      <data key="d20">0</data>
      <data key="d21">2</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">6</data>
      <data key="d26">3</data>
      <data key="d27">3</data>
      <data key="d28">log4cxx_status_t</data>
    </node>
    <node id="45207">
      <data key="d0">45207</data>
      <data key="d1">configure</data>
      <data key="d2">1</data>
      <data key="d3">PropertyConfigurator.configure</data>
      <data key="d4">ConfigurationStatus PropertyConfigurator.configure (File)</data>
      <data key="d5">main\cpp\propertyconfigurator.cpp</data>
      <data key="d6">spi::ConfigurationStatus PropertyConfigurator::configure(helpers::Properties&amp; properties)
{
	return PropertyConfigurator().doConfigure(properties, LogManager::getLoggerRepository());
}</data>
      <data key="d7">128.0</data>
      <data key="d8">131.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">4.0</data>
      <data key="d12">2</data>
      <data key="d13">1</data>
      <data key="d14">2</data>
      <data key="d15">2</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">ConfigurationStatus</data>
    </node>
    <node id="20632">
      <data key="d0">20632</data>
      <data key="d1">~FileOutputStream</data>
      <data key="d2">1</data>
      <data key="d3">FileOutputStream.~FileOutputStream</data>
      <data key="d4">ANY FileOutputStream.~FileOutputStream ()</data>
      <data key="d5">main\cpp\fileoutputstream.cpp</data>
      <data key="d6">FileOutputStream::~FileOutputStream()
{
	if (m_priv-&gt;fileptr != NULL &amp;&amp; !APRInitializer::isDestructed)
	{
		apr_file_close(m_priv-&gt;fileptr);
	}
}</data>
      <data key="d7">82.0</data>
      <data key="d8">88.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">7.0</data>
      <data key="d12">6</data>
      <data key="d13">5</data>
      <data key="d14">4</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">1</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">ANY</data>
    </node>
    <node id="4248">
      <data key="d0">4248</data>
      <data key="d1">initialize</data>
      <data key="d2">1</data>
      <data key="d3">APRInitializer.initialize</data>
      <data key="d4">log4cxx_time_t APRInitializer.initialize ()</data>
      <data key="d5">main\cpp\aprinitializer.cpp</data>
      <data key="d6">log4cxx_time_t APRInitializer::initialize()
{
	return getInstance().m_priv-&gt;startTime;
}</data>
      <data key="d7">129.0</data>
      <data key="d8">132.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">4.0</data>
      <data key="d12">2</data>
      <data key="d13">2</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">log4cxx_time_t</data>
    </node>
    <node id="38048">
      <data key="d0">38048</data>
      <data key="d1">getFileOutPutStreamPtr</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.rolling.CountingOutputStream.getFileOutPutStreamPtr</data>
      <data key="d4">OutputStream LOG4CXX_NS.rolling.CountingOutputStream.getFileOutPutStreamPtr ()</data>
      <data key="d5">main\cpp\multiprocessrollingfileappender.cpp</data>
      <data key="d6">OutputStream&amp; getFileOutPutStreamPtr()
		{
			return *os;
		}</data>
      <data key="d7">651.0</data>
      <data key="d8">654.0</data>
      <data key="d9">3.0</data>
      <data key="d10">3.0</data>
      <data key="d11">4.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">1</data>
      <data key="d15">1</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">OutputStream</data>
    </node>
    <node id="4258">
      <data key="d0">4258</data>
      <data key="d1">getRootPool</data>
      <data key="d2">1</data>
      <data key="d3">APRInitializer.getRootPool</data>
      <data key="d4">apr_pool_t APRInitializer.getRootPool ()</data>
      <data key="d5">main\cpp\aprinitializer.cpp</data>
      <data key="d6">apr_pool_t* APRInitializer::getRootPool()
{
	return getInstance().m_priv-&gt;p;
}</data>
      <data key="d7">134.0</data>
      <data key="d8">137.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">4.0</data>
      <data key="d12">2</data>
      <data key="d13">2</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">apr_pool_t</data>
    </node>
    <node id="17571">
      <data key="d0">17571</data>
      <data key="d1">formatMessage</data>
      <data key="d2">1</data>
      <data key="d3">RuntimeException.formatMessage</data>
      <data key="d4">LogString RuntimeException.formatMessage (log4cxx_status_t)</data>
      <data key="d5">main\cpp\exception.cpp</data>
      <data key="d6">LogString RuntimeException::formatMessage(log4cxx_status_t stat)
{
	LogString s(LOG4CXX_STR("RuntimeException: return code = "));
	Pool p;
	StringHelper::toString(stat, p, s);
	return s;
}</data>
      <data key="d7">106.0</data>
      <data key="d8">112.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">7.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">5</data>
      <data key="d15">4</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">LogString</data>
    </node>
    <node id="14501">
      <data key="d0">14501</data>
      <data key="d1">getConfigurationWatchDelay</data>
      <data key="d2">1</data>
      <data key="d3">DefaultConfigurator.getConfigurationWatchDelay</data>
      <data key="d4">int DefaultConfigurator.getConfigurationWatchDelay ()</data>
      <data key="d5">main\cpp\defaultconfigurator.cpp</data>
      <data key="d6">int DefaultConfigurator::getConfigurationWatchDelay()
{
	static const WideLife&lt;LogString&gt; LOG4CXX_DEFAULT_CONFIGURATION_WATCH_KEY(LOG4CXX_STR("LOG4CXX_CONFIGURATION_WATCH_SECONDS"));
	LogString optionStr = OptionConverter::getSystemProperty(LOG4CXX_DEFAULT_CONFIGURATION_WATCH_KEY, LogString());
	int milliseconds = 0;
	if (!optionStr.empty())
		milliseconds = StringHelper::toInt(optionStr) * MillisecondsPerSecond;
	return milliseconds;
}</data>
      <data key="d7">150.0</data>
      <data key="d8">158.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">9.0</data>
      <data key="d12">8</data>
      <data key="d13">4</data>
      <data key="d14">10</data>
      <data key="d15">6</data>
      <data key="d16">0</data>
      <data key="d17">3</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">2</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">3</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">int</data>
    </node>
    <node id="1189">
      <data key="d0">1189</data>
      <data key="d1">&lt;lambda&gt;0</data>
      <data key="d2">1</data>
      <data key="d3">configure.&lt;lambda&gt;0</data>
      <data key="d4">ANY configure.&lt;lambda&gt;0 ()</data>
      <data key="d5">examples\cpp\console.cpp</data>
      <data key="d6">[r,err]() {
        auto appender = std::make_shared&lt;ConsoleAppender&gt;
            ( std::make_shared&lt;SimpleLayout&gt;()
            , err ? ConsoleAppender::getSystemErr() : ConsoleAppender::getSystemOut()
            );
        r-&gt;getRootLogger()-&gt;addAppender(appender);
    }</data>
      <data key="d7">35.0</data>
      <data key="d8">41.0</data>
      <data key="d9">27.0</data>
      <data key="d10">5.0</data>
      <data key="d11">7.0</data>
      <data key="d12">12</data>
      <data key="d13">8</data>
      <data key="d14">9</data>
      <data key="d15">5</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">2</data>
      <data key="d23">0</data>
      <data key="d24">2</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">ANY</data>
    </node>
    <node id="62632">
      <data key="d0">62632</data>
      <data key="d1">getDefaultDelay</data>
      <data key="d2">1</data>
      <data key="d3">XMLSocketAppender.getDefaultDelay</data>
      <data key="d4">int XMLSocketAppender.getDefaultDelay ()</data>
      <data key="d5">main\cpp\xmlsocketappender.cpp</data>
      <data key="d6">int XMLSocketAppender::getDefaultDelay() const
{
	return DEFAULT_RECONNECTION_DELAY;
}</data>
      <data key="d7">91.0</data>
      <data key="d8">94.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">4.0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">1</data>
      <data key="d15">1</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">int</data>
    </node>
    <node id="33965">
      <data key="d0">33965</data>
      <data key="d1">getLogger</data>
      <data key="d2">1</data>
      <data key="d3">LogManager.getLogger</data>
      <data key="d4">LoggerPtr LogManager.getLogger (ANY)</data>
      <data key="d5">main\cpp\logmanager.cpp</data>
      <data key="d6">LoggerPtr LogManager::getLogger(const std::string&amp; name,
	const spi::LoggerFactoryPtr&amp; factory)
{
	LOG4CXX_DECODE_CHAR(n, name);
	return getLoggerLS(n, factory);
}</data>
      <data key="d7">117.0</data>
      <data key="d8">122.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">6.0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">3</data>
      <data key="d15">2</data>
      <data key="d16">2</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">LoggerPtr</data>
    </node>
    <node id="62638">
      <data key="d0">62638</data>
      <data key="d1">getDefaultPort</data>
      <data key="d2">1</data>
      <data key="d3">XMLSocketAppender.getDefaultPort</data>
      <data key="d4">int XMLSocketAppender.getDefaultPort ()</data>
      <data key="d5">main\cpp\xmlsocketappender.cpp</data>
      <data key="d6">int XMLSocketAppender::getDefaultPort() const
{
	return DEFAULT_PORT;
}</data>
      <data key="d7">96.0</data>
      <data key="d8">99.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">4.0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">1</data>
      <data key="d15">1</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">int</data>
    </node>
    <node id="62644">
      <data key="d0">62644</data>
      <data key="d1">setSocket</data>
      <data key="d2">1</data>
      <data key="d3">XMLSocketAppender.setSocket</data>
      <data key="d4">void XMLSocketAppender.setSocket (ANY,Pool)</data>
      <data key="d5">main\cpp\xmlsocketappender.cpp</data>
      <data key="d6">void XMLSocketAppender::setSocket(LOG4CXX_NS::helpers::SocketPtr&amp; socket, Pool&amp; p)
{
	OutputStreamPtr os = std::make_shared&lt;SocketOutputStream&gt;(socket);
	CharsetEncoderPtr charset(CharsetEncoder::getUTF8Encoder());
	std::lock_guard&lt;std::recursive_mutex&gt; lock(_priv-&gt;mutex);
	_priv-&gt;writer = std::make_shared&lt;OutputStreamWriter&gt;(os, charset);
}</data>
      <data key="d7">101.0</data>
      <data key="d8">107.0</data>
      <data key="d9">1.0</data>
      <data key="d10">44.0</data>
      <data key="d11">7.0</data>
      <data key="d12">21</data>
      <data key="d13">8</data>
      <data key="d14">13</data>
      <data key="d15">8</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="4278">
      <data key="d0">4278</data>
      <data key="d1">registerCleanup</data>
      <data key="d2">1</data>
      <data key="d3">APRInitializer.registerCleanup</data>
      <data key="d4">void APRInitializer.registerCleanup (FileWatchdog*)</data>
      <data key="d5">main\cpp\aprinitializer.cpp</data>
      <data key="d6">void APRInitializer::registerCleanup(FileWatchdog* watchdog)
{
	APRInitializer&amp; instance(getInstance());
	std::unique_lock&lt;std::mutex&gt; lock(instance.m_priv-&gt;mutex);
	instance.m_priv-&gt;watchdogs.push_back(watchdog);
}</data>
      <data key="d7">144.0</data>
      <data key="d8">149.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">6.0</data>
      <data key="d12">9</data>
      <data key="d13">4</data>
      <data key="d14">5</data>
      <data key="d15">3</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="19639">
      <data key="d0">19639</data>
      <data key="d1">activateOptionsInternal</data>
      <data key="d2">1</data>
      <data key="d3">FileAppender.activateOptionsInternal</data>
      <data key="d4">void FileAppender.activateOptionsInternal (Pool)</data>
      <data key="d5">main\cpp\fileappender.cpp</data>
      <data key="d6">void FileAppender::activateOptionsInternal(Pool&amp; p)
{
	int errors = 0;

	if (!_priv-&gt;fileName.empty())
	{
		try
		{
			setFileInternal(_priv-&gt;fileName, _priv-&gt;fileAppend, _priv-&gt;bufferedIO, _priv-&gt;bufferSize, p);
		}
		catch (IOException&amp; e)
		{
			errors++;
			LogString msg(LOG4CXX_STR("setFile("));
			msg.append(_priv-&gt;fileName);
			msg.append(1, (logchar) 0x2C /* ',' */);
			StringHelper::toString(_priv-&gt;fileAppend, msg);
			msg.append(LOG4CXX_STR(") call failed."));
			_priv-&gt;errorHandler-&gt;error(msg, e, ErrorCode::FILE_OPEN_FAILURE);
		}
	}
	else
	{
		errors++;
		LogLog::error(LogString(LOG4CXX_STR("File option not set for appender ["))
			+  _priv-&gt;name + LOG4CXX_STR("]."));
		LogLog::warn(LOG4CXX_STR("Are you using FileAppender instead of ConsoleAppender?"));
	}

	if (errors == 0)
	{
		WriterAppender::activateOptions(p);
	}
}</data>
      <data key="d7">155.0</data>
      <data key="d8">188.0</data>
      <data key="d9">1.0</data>
      <data key="d10">6.0</data>
      <data key="d11">34.0</data>
      <data key="d12">37</data>
      <data key="d13">7</data>
      <data key="d14">22</data>
      <data key="d15">8</data>
      <data key="d16">2</data>
      <data key="d17">3</data>
      <data key="d18">4</data>
      <data key="d19">5</data>
      <data key="d20">0</data>
      <data key="d21">2</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="10427">
      <data key="d0">10427</data>
      <data key="d1">ClassRegistration</data>
      <data key="d2">1</data>
      <data key="d3">ClassRegistration.ClassRegistration</data>
      <data key="d4">ANY ClassRegistration.ClassRegistration (ClassAccessor)</data>
      <data key="d5">main\cpp\classregistration.cpp</data>
      <data key="d6">ClassRegistration::ClassRegistration(ClassAccessor accessor)
{
	Class::registerClass((*accessor)());
}</data>
      <data key="d7">24.0</data>
      <data key="d8">27.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">4.0</data>
      <data key="d12">2</data>
      <data key="d13">2</data>
      <data key="d14">2</data>
      <data key="d15">2</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">ANY</data>
    </node>
    <node id="24764">
      <data key="d0">24764</data>
      <data key="d1">getRootLogger</data>
      <data key="d2">1</data>
      <data key="d3">Hierarchy.getRootLogger</data>
      <data key="d4">LoggerPtr Hierarchy.getRootLogger ()</data>
      <data key="d5">main\cpp\hierarchy.cpp</data>
      <data key="d6">LoggerPtr Hierarchy::getRootLogger() const
{
	std::lock_guard&lt;std::recursive_mutex&gt; lock(m_priv-&gt;mutex);
	if (!m_priv-&gt;root)
	{
		m_priv-&gt;root = std::make_shared&lt;RootLogger&gt;(m_priv-&gt;pool, Level::getDebug());
		m_priv-&gt;root-&gt;setHierarchy(const_cast&lt;Hierarchy*&gt;(this));
	}

	return m_priv-&gt;root;
}</data>
      <data key="d7">293.0</data>
      <data key="d8">303.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">11.0</data>
      <data key="d12">20</data>
      <data key="d13">9</data>
      <data key="d14">11</data>
      <data key="d15">4</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">LoggerPtr</data>
    </node>
    <node id="29885">
      <data key="d0">29885</data>
      <data key="d1">loadClass</data>
      <data key="d2">1</data>
      <data key="d3">Loader.loadClass</data>
      <data key="d4">Class Loader.loadClass (LogString)</data>
      <data key="d5">main\cpp\loader.cpp</data>
      <data key="d6">const Class&amp; Loader::loadClass(const LogString&amp; clazz)
{
	return Class::forName(clazz);
}</data>
      <data key="d7">57.0</data>
      <data key="d8">60.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">4.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">2</data>
      <data key="d15">2</data>
      <data key="d16">10</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">Class</data>
    </node>
    <node id="64711">
      <data key="d0">64711</data>
      <data key="d1">NoConfiguration</data>
      <data key="d2">3</data>
      <data key="d3">LOG4CXX_NS.helpers.ThreadConfigurationType.NoConfiguration</data>
      <data key="d4" />
      <data key="d5">main\include\log4cxx\helpers\threadutility.hpp</data>
      <data key="d6">NoConfiguration</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">2</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="29896">
      <data key="d0">29896</data>
      <data key="d1">getResourceAsStream</data>
      <data key="d2">1</data>
      <data key="d3">Loader.getResourceAsStream</data>
      <data key="d4">InputStreamPtr Loader.getResourceAsStream (LogString)</data>
      <data key="d5">main\cpp\loader.cpp</data>
      <data key="d6">InputStreamPtr Loader::getResourceAsStream(const LogString&amp; name)
{

	try
	{
		return std::make_shared&lt;FileInputStream&gt;(name);
	}
	catch (const IOException&amp;)
	{
	}

	return 0;
}</data>
      <data key="d7">63.0</data>
      <data key="d8">75.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">13.0</data>
      <data key="d12">3</data>
      <data key="d13">3</data>
      <data key="d14">3</data>
      <data key="d15">3</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">InputStreamPtr</data>
    </node>
    <node id="31946">
      <data key="d0">31946</data>
      <data key="d1">getLogger</data>
      <data key="d2">1</data>
      <data key="d3">Logger.getLogger</data>
      <data key="d4">LoggerPtr Logger.getLogger (ANY)</data>
      <data key="d5">main\cpp\logger.cpp</data>
      <data key="d6">LoggerPtr Logger::getLogger(const char* const name)
{
	return LogManager::getLogger(name);
}</data>
      <data key="d7">581.0</data>
      <data key="d8">584.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">4.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">2</data>
      <data key="d15">2</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">LoggerPtr</data>
    </node>
    <node id="58571">
      <data key="d0">58571</data>
      <data key="d1">isTriggeringEvent</data>
      <data key="d2">1</data>
      <data key="d3">TimeBasedRollingPolicy.isTriggeringEvent</data>
      <data key="d4">bool TimeBasedRollingPolicy.isTriggeringEvent (Appender*,ANY,LogString,size_t)</data>
      <data key="d5">main\cpp\timebasedrollingpolicy.cpp</data>
      <data key="d6">bool TimeBasedRollingPolicy::isTriggeringEvent(
	Appender* appender,
	const LOG4CXX_NS::spi::LoggingEventPtr&amp; /* event */,
	const LogString&amp;  filename,
	size_t /* fileLength */)
{
	if( m_priv-&gt;multiprocess ){
#if LOG4CXX_HAS_MULTIPROCESS_ROLLING_FILE_APPENDER
		if (m_priv-&gt;bRefreshCurFile &amp;&amp; m_priv-&gt;_mmap &amp;&amp; !isMapFileEmpty(m_priv-&gt;_mmapPool))
		{
			lockMMapFile(APR_FLOCK_SHARED);
			LogString mapCurrent((char*)m_priv-&gt;_mmap-&gt;mm);
			unLockMMapFile();
			LogString mapCurrentBase(mapCurrent.substr(0, mapCurrent.length() - m_priv-&gt;suffixLength));

			if (!mapCurrentBase.empty() &amp;&amp; mapCurrentBase != filename)
			{
				const FileAppender* fappend = reinterpret_cast&lt;const FileAppender*&gt;(appender-&gt;cast(FileAppender::getStaticClass()));
				if( fappend ){
					const_cast&lt;FileAppender*&gt;(fappend)-&gt;setFile(mapCurrentBase);
				}
			}
		}

		return ( Date::currentTime() &gt; m_priv-&gt;nextCheck) || (!m_priv-&gt;bAlreadyInitialized);
#endif
	}

	return Date::currentTime() &gt; m_priv-&gt;nextCheck;
}</data>
      <data key="d7">497.0</data>
      <data key="d8">526.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">30.0</data>
      <data key="d12">4</data>
      <data key="d13">3</data>
      <data key="d14">3</data>
      <data key="d15">2</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">8</data>
      <data key="d26">4</data>
      <data key="d27">4</data>
      <data key="d28">bool</data>
    </node>
    <node id="57548">
      <data key="d0">57548</data>
      <data key="d1">priv_data</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.helpers.priv_data.priv_data</data>
      <data key="d4">ANY LOG4CXX_NS.helpers.priv_data.priv_data ()</data>
      <data key="d5">main\cpp\threadutility.cpp</data>
      <data key="d6">priv_data()
	{
		start_pre = nullptr;
		started = nullptr;
		start_post = nullptr;
	}</data>
      <data key="d7">41.0</data>
      <data key="d8">46.0</data>
      <data key="d9">2.0</data>
      <data key="d10">2.0</data>
      <data key="d11">6.0</data>
      <data key="d12">3</data>
      <data key="d13">1</data>
      <data key="d14">3</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">3</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">3</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">ANY</data>
    </node>
    <node id="59597">
      <data key="d0">59597</data>
      <data key="d1">encodeUTF16BE</data>
      <data key="d2">1</data>
      <data key="d3">Transcoder.encodeUTF16BE</data>
      <data key="d4">void Transcoder.encodeUTF16BE (unsigned int,ByteBuffer)</data>
      <data key="d5">main\cpp\transcoder.cpp</data>
      <data key="d6">size_t Transcoder::encodeUTF16BE(unsigned int ch, char* dst)
{
	if (ch &lt;= 0xFFFF)
	{
		dst[0] = (char) (ch &gt;&gt; 8);
		dst[1] = (char) (ch &amp; 0xFF);
		return 2;
	}

	if (ch &lt;= 0x10FFFF)
	{
		unsigned char w = (unsigned char) ((ch &gt;&gt; 16) - 1);
		dst[0] = (char) (0xD8 + (w &gt;&gt; 2));
		dst[1] = (char) (((w &amp; 0x03) &lt;&lt; 6) + ((ch &gt;&gt; 10) &amp; 0x3F));
		dst[2] = (char) (0xDC + ((ch &amp; 0x30) &gt;&gt; 4));
		dst[3] = (char) (ch &amp; 0xFF);
		return 4;
	}

	dst[0] = dst[1] = (char) 0xFF;
	return 2;
}</data>
      <data key="d7">154.0</data>
      <data key="d8">175.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">22.0</data>
      <data key="d12">5</data>
      <data key="d13">3</data>
      <data key="d14">6</data>
      <data key="d15">3</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">size_t</data>
    </node>
    <node id="63695">
      <data key="d0">63695</data>
      <data key="d1">initialize</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.helpers.APRInitializer.initialize</data>
      <data key="d4">log4cxx_time_t LOG4CXX_NS.helpers.APRInitializer.initialize ()</data>
      <data key="d5">main\include\log4cxx\helpers\aprinitializer.hpp</data>
      <data key="d6">static log4cxx_time_t initialize();</data>
      <data key="d7">47.0</data>
      <data key="d8">47.0</data>
      <data key="d9">25.0</data>
      <data key="d10">36.0</data>
      <data key="d11">1.0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">log4cxx_time_t</data>
    </node>
    <node id="9426">
      <data key="d0">9426</data>
      <data key="d1">encode</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.helpers.UTF16LECharsetEncoder.encode</data>
      <data key="d4">log4cxx_status_t LOG4CXX_NS.helpers.UTF16LECharsetEncoder.encode (LogString,ANY,ByteBuffer)</data>
      <data key="d5">main\cpp\charsetencoder.cpp</data>
      <data key="d6">virtual log4cxx_status_t encode(const LogString&amp; in,
			LogString::const_iterator&amp; iter,
			ByteBuffer&amp; out)
		{
			while (iter != in.end() &amp;&amp; out.remaining() &gt;= 4)
			{
				unsigned int sv = Transcoder::decode(in, iter);

				if (sv == 0xFFFF)
				{
					return APR_BADARG;
				}

				Transcoder::encodeUTF16LE(sv, out);
			}

			return APR_SUCCESS;
		}</data>
      <data key="d7">425.0</data>
      <data key="d8">442.0</data>
      <data key="d9">3.0</data>
      <data key="d10">3.0</data>
      <data key="d11">18.0</data>
      <data key="d12">9</data>
      <data key="d13">6</data>
      <data key="d14">13</data>
      <data key="d15">7</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">3</data>
      <data key="d19">4</data>
      <data key="d20">0</data>
      <data key="d21">2</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">6</data>
      <data key="d26">3</data>
      <data key="d27">3</data>
      <data key="d28">log4cxx_status_t</data>
    </node>
    <node id="28886">
      <data key="d0">28886</data>
      <data key="d1">setOption</data>
      <data key="d2">1</data>
      <data key="d3">LevelMatchFilter.setOption</data>
      <data key="d4">void LevelMatchFilter.setOption (LogString,LogString)</data>
      <data key="d5">main\cpp\levelmatchfilter.cpp</data>
      <data key="d6">void LevelMatchFilter::setOption(const LogString&amp; option,
	const LogString&amp; value)
{


	if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR("LEVELTOMATCH"), LOG4CXX_STR("leveltomatch")))
	{
		setLevelToMatch(value);
	}
	else if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR("ACCEPTONMATCH"), LOG4CXX_STR("acceptonmatch")))
	{
		priv-&gt;acceptOnMatch = OptionConverter::toBoolean(value, priv-&gt;acceptOnMatch);
	}
}</data>
      <data key="d7">49.0</data>
      <data key="d8">64.0</data>
      <data key="d9">1.0</data>
      <data key="d10">2.0</data>
      <data key="d11">16.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">3</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">1</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="41176">
      <data key="d0">41176</data>
      <data key="d1">instantiateByKey</data>
      <data key="d2">1</data>
      <data key="d3">OptionConverter.instantiateByKey</data>
      <data key="d4">ObjectPtr OptionConverter.instantiateByKey (Properties,LogString,Class,ObjectPtr)</data>
      <data key="d5">main\cpp\optionconverter.cpp</data>
      <data key="d6">ObjectPtr OptionConverter::instantiateByKey(Properties&amp; props, const LogString&amp; key,
	const Class&amp; superClass, const ObjectPtr&amp; defaultValue)
{
	// Get the value of the property in string form
	LogString className(findAndSubst(key, props));

	if (className.empty())
	{
		LogLog::error(
			((LogString) LOG4CXX_STR("Could not find value for key ")) + key);
		return defaultValue;
	}

	// Trim className to avoid trailing spaces that cause problems.
	return OptionConverter::instantiateByClassName(
			StringHelper::trim(className), superClass, defaultValue);
}</data>
      <data key="d7">364.0</data>
      <data key="d8">380.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">17.0</data>
      <data key="d12">6</data>
      <data key="d13">3</data>
      <data key="d14">11</data>
      <data key="d15">8</data>
      <data key="d16">4</data>
      <data key="d17">3</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">3</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">8</data>
      <data key="d26">4</data>
      <data key="d27">4</data>
      <data key="d28">ObjectPtr</data>
    </node>
    <node id="57561">
      <data key="d0">57561</data>
      <data key="d1">start_pre</data>
      <data key="d2">3</data>
      <data key="d3">LOG4CXX_NS.helpers.priv_data.start_pre</data>
      <data key="d4" />
      <data key="d5">main\cpp\threadutility.cpp</data>
      <data key="d6">start_pre</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="57562">
      <data key="d0">57562</data>
      <data key="d1">started</data>
      <data key="d2">3</data>
      <data key="d3">LOG4CXX_NS.helpers.priv_data.started</data>
      <data key="d4" />
      <data key="d5">main\cpp\threadutility.cpp</data>
      <data key="d6">started</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="63707">
      <data key="d0">63707</data>
      <data key="d1">isDestructed</data>
      <data key="d2">3</data>
      <data key="d3">LOG4CXX_NS.helpers.APRInitializer.isDestructed</data>
      <data key="d4" />
      <data key="d5">main\include\log4cxx\helpers\aprinitializer.hpp</data>
      <data key="d6">isDestructed</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">2</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="57563">
      <data key="d0">57563</data>
      <data key="d1">start_post</data>
      <data key="d2">3</data>
      <data key="d3">LOG4CXX_NS.helpers.priv_data.start_post</data>
      <data key="d4" />
      <data key="d5">main\cpp\threadutility.cpp</data>
      <data key="d6">start_post</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="13530">
      <data key="d0">13530</data>
      <data key="d1">activateOptions</data>
      <data key="d2">1</data>
      <data key="d3">DBAppender.activateOptions</data>
      <data key="d4">void DBAppender.activateOptions (ANY)</data>
      <data key="d5">main\cpp\dbappender.cpp</data>
      <data key="d6">void DBAppender::activateOptions(helpers::Pool&amp; p){
    apr_status_t stat = apr_dbd_get_driver(_priv-&gt;m_pool.getAPRPool(),
                                           _priv-&gt;driverName.c_str(),
                                           const_cast&lt;const apr_dbd_driver_t**&gt;(&amp;_priv-&gt;m_driver));

    if(stat != APR_SUCCESS){
        LogString errMsg = LOG4CXX_STR("Unable to get driver named ");
        LOG4CXX_DECODE_CHAR(driverName, _priv-&gt;driverName);
        errMsg.append(driverName);
        LogLog::error(errMsg);
        _priv-&gt;errorHandler-&gt;error(errMsg);
        return;
    }

    stat = apr_dbd_open(_priv-&gt;m_driver,
                        _priv-&gt;m_pool.getAPRPool(),
                        _priv-&gt;driverParams.c_str(),
                        &amp;_priv-&gt;m_databaseHandle);
    if(stat != APR_SUCCESS){
        LogLog::error(LOG4CXX_STR("Unable to open database"));
        _priv-&gt;errorHandler-&gt;error(LOG4CXX_STR("Unable to open database"));
        return;
    }

    if(!_priv-&gt;databas...</data>
      <data key="d7">147.0</data>
      <data key="d8">209.0</data>
      <data key="d9">1.0</data>
      <data key="d10">43.0</data>
      <data key="d11">63.0</data>
      <data key="d12">110</data>
      <data key="d13">9</data>
      <data key="d14">59</data>
      <data key="d15">13</data>
      <data key="d16">0</data>
      <data key="d17">6</data>
      <data key="d18">7</data>
      <data key="d19">8</data>
      <data key="d20">0</data>
      <data key="d21">5</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">2</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="1249">
      <data key="d0">1249</data>
      <data key="d1">configure</data>
      <data key="d2">1</data>
      <data key="d3">configure</data>
      <data key="d4">void configure (bool)</data>
      <data key="d5">examples\cpp\console.cpp</data>
      <data key="d6">static void configure(bool err)
{
    using namespace log4cxx;
    auto r = LogManager::getLoggerRepository();
    r-&gt;ensureIsConfigured([r,err]() {
        auto appender = std::make_shared&lt;ConsoleAppender&gt;
            ( std::make_shared&lt;SimpleLayout&gt;()
            , err ? ConsoleAppender::getSystemErr() : ConsoleAppender::getSystemOut()
            );
        r-&gt;getRootLogger()-&gt;addAppender(appender);
    });
}</data>
      <data key="d7">31.0</data>
      <data key="d8">42.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">12.0</data>
      <data key="d12">3</data>
      <data key="d13">3</data>
      <data key="d14">3</data>
      <data key="d15">2</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="34020">
      <data key="d0">34020</data>
      <data key="d1">shutdown</data>
      <data key="d2">1</data>
      <data key="d3">LogManager.shutdown</data>
      <data key="d4">void LogManager.shutdown ()</data>
      <data key="d5">main\cpp\logmanager.cpp</data>
      <data key="d6">void LogManager::shutdown()
{
	APRInitializer::unregisterAll();
	getLoggerRepository()-&gt;shutdown();
}</data>
      <data key="d7">203.0</data>
      <data key="d8">207.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">5.0</data>
      <data key="d12">2</data>
      <data key="d13">2</data>
      <data key="d14">1</data>
      <data key="d15">1</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">void</data>
    </node>
    <node id="12518">
      <data key="d0">12518</data>
      <data key="d1">currentTime</data>
      <data key="d2">1</data>
      <data key="d3">Date.currentTime</data>
      <data key="d4">log4cxx_time_t Date.currentTime ()</data>
      <data key="d5">main\cpp\date.cpp</data>
      <data key="d6">log4cxx_time_t Date::currentTime(){
	return getCurrentTimeFn ? getCurrentTimeFn() : getCurrentTimeStd();
}</data>
      <data key="d7">67.0</data>
      <data key="d8">69.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">3.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">1</data>
      <data key="d15">1</data>
      <data key="d16">3</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">log4cxx_time_t</data>
    </node>
    <node id="58598">
      <data key="d0">58598</data>
      <data key="d1">setOption</data>
      <data key="d2">1</data>
      <data key="d3">TimeBasedRollingPolicy.setOption</data>
      <data key="d4">void TimeBasedRollingPolicy.setOption (LogString,LogString)</data>
      <data key="d5">main\cpp\timebasedrollingpolicy.cpp</data>
      <data key="d6">void TimeBasedRollingPolicy::setOption(const LogString&amp; option,
	const LogString&amp; value)
{
	if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR("THROWIOEXCEPTIONONFORKFAILURE"),
			LOG4CXX_STR("throwioexceptiononforkfailure")))
	{
		m_priv-&gt;throwIOExceptionOnForkFailure = OptionConverter::toBoolean(value, true);
	}
	else
	{
		RollingPolicyBase::setOption(option, value);
	}
}</data>
      <data key="d7">535.0</data>
      <data key="d8">548.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">14.0</data>
      <data key="d12">4</data>
      <data key="d13">3</data>
      <data key="d14">5</data>
      <data key="d15">5</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">1</data>
      <data key="d21">2</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">2</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="39145">
      <data key="d0">39145</data>
      <data key="d1">pushLS</data>
      <data key="d2">1</data>
      <data key="d3">NDC.pushLS</data>
      <data key="d4">void NDC.pushLS (LogString)</data>
      <data key="d5">main\cpp\ndc.cpp</data>
      <data key="d6">void NDC::pushLS(const LogString&amp; message)
{
	ThreadSpecificData::push(message);
}</data>
      <data key="d7">211.0</data>
      <data key="d8">214.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">4.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">2</data>
      <data key="d15">2</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="31978">
      <data key="d0">31978</data>
      <data key="d1">getRootLogger</data>
      <data key="d2">1</data>
      <data key="d3">Logger.getRootLogger</data>
      <data key="d4">LoggerPtr Logger.getRootLogger ()</data>
      <data key="d5">main\cpp\logger.cpp</data>
      <data key="d6">LoggerPtr Logger::getRootLogger()
{
	return LogManager::getRootLogger();
}</data>
      <data key="d7">591.0</data>
      <data key="d8">594.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">4.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">1</data>
      <data key="d15">1</data>
      <data key="d16">1</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">LoggerPtr</data>
    </node>
    <node id="49387">
      <data key="d0">49387</data>
      <data key="d1">setLevel</data>
      <data key="d2">1</data>
      <data key="d3">RootLogger.setLevel</data>
      <data key="d4">void RootLogger.setLevel (LevelPtr)</data>
      <data key="d5">main\cpp\rootlogger.cpp</data>
      <data key="d6">void RootLogger::setLevel(const LevelPtr level1)
{
	if (level1 == 0)
	{
		LogLog::error(LOG4CXX_STR("You have tried to set a null level to root."));
	}
	else
	{
		Logger::setLevel(level1);
	}
}</data>
      <data key="d7">38.0</data>
      <data key="d8">48.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">11.0</data>
      <data key="d12">2</data>
      <data key="d13">2</data>
      <data key="d14">2</data>
      <data key="d15">2</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="14572">
      <data key="d0">14572</data>
      <data key="d1">configureFromFile</data>
      <data key="d2">1</data>
      <data key="d3">DefaultConfigurator.configureFromFile</data>
      <data key="d4">tuple&lt;LOG4CXX_NS::spi::ConfigurationStatus,LogString&gt; DefaultConfigurator.configureFromFile (ANY,ANY)</data>
      <data key="d5">main\cpp\defaultconfigurator.cpp</data>
      <data key="d6">std::tuple&lt;LOG4CXX_NS::spi::ConfigurationStatus,LogString&gt;
DefaultConfigurator::configureFromFile(const std::vector&lt;LogString&gt;&amp; directories, const std::vector&lt;LogString&gt;&amp; filenames){
	using ResultType = std::tuple&lt;LOG4CXX_NS::spi::ConfigurationStatus, LogString&gt;;
	LOG4CXX_NS::helpers::Pool pool;

	for( LogString dir : directories ){
		for( LogString fname : filenames ){
			LogString canidate_str = dir + LOG4CXX_STR("/") + fname;
			File candidate(canidate_str);

			LogString debugMsg = LOG4CXX_STR("Checking file ");
			debugMsg.append(canidate_str);
			LogLog::debug(debugMsg);
			if (candidate.exists(pool))
			{
				LOG4CXX_NS::spi::ConfigurationStatus configStatus = tryLoadFile(canidate_str);
				if( configStatus == LOG4CXX_NS::spi::ConfigurationStatus::Configured ){
					return ResultType{configStatus, canidate_str};
				}
				LogLog::debug(LOG4CXX_STR("Unable to load file: trying next"));
			}
		}
	}

	return ResultType{LOG4CXX_NS::spi::ConfigurationStatus::NotConfigured, LogStri...</data>
      <data key="d7">173.0</data>
      <data key="d8">198.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">26.0</data>
      <data key="d12">18</data>
      <data key="d13">5</data>
      <data key="d14">25</data>
      <data key="d15">13</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">5</data>
      <data key="d19">11</data>
      <data key="d20">0</data>
      <data key="d21">2</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">tuple&lt;LOG4CXX_NS.spi.ConfigurationStatus,LogString&gt;</data>
    </node>
    <node id="15595">
      <data key="d0">15595</data>
      <data key="d1">parseFilters</data>
      <data key="d2">1</data>
      <data key="d3">DOMConfigurator.parseFilters</data>
      <data key="d4">void DOMConfigurator.parseFilters (Pool,ANY,apr_xml_elem*,ANY)</data>
      <data key="d5">main\cpp\domconfigurator.cpp</data>
      <data key="d6">void DOMConfigurator::parseFilters(Pool&amp; p,
	LOG4CXX_NS::helpers::CharsetDecoderPtr&amp; utf8Decoder,
	apr_xml_elem* element,
	std::vector&lt;LOG4CXX_NS::spi::FilterPtr&gt;&amp; filters)
{
	LogString clazz = subst(getAttribute(utf8Decoder, element, CLASS_ATTR));
	FilterPtr filter;
	std::shared_ptr&lt;Object&gt; obj = OptionConverter::instantiateByClassName(clazz,
			Filter::getStaticClass(), 0);
	filter = LOG4CXX_NS::cast&lt;Filter&gt;(obj);

	if (filter != 0)
	{
		PropertySetter propSetter(filter);

		for (apr_xml_elem* currentElement = element-&gt;first_child;
			currentElement;
			currentElement = currentElement-&gt;next)
		{
			std::string tagName(currentElement-&gt;name);

			if (tagName == PARAM_TAG)
			{
				setParameter(p, utf8Decoder, currentElement, propSetter);
			}
		}

		propSetter.activate(p);
		filters.push_back(filter);
	}
}</data>
      <data key="d7">387.0</data>
      <data key="d8">417.0</data>
      <data key="d9">1.0</data>
      <data key="d10">60.0</data>
      <data key="d11">31.0</data>
      <data key="d12">18</data>
      <data key="d13">7</data>
      <data key="d14">28</data>
      <data key="d15">15</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">4</data>
      <data key="d19">7</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">8</data>
      <data key="d26">4</data>
      <data key="d27">4</data>
      <data key="d28">void</data>
    </node>
    <node id="47342">
      <data key="d0">47342</data>
      <data key="d1">setOption</data>
      <data key="d2">1</data>
      <data key="d3">RollingFileAppender.setOption</data>
      <data key="d4">void RollingFileAppender.setOption (LogString,LogString)</data>
      <data key="d5">main\cpp\rollingfileappender.cpp</data>
      <data key="d6">void RollingFileAppender::setOption(const LogString&amp; option, const LogString&amp; value)
{
	if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR("MAXFILESIZE"), LOG4CXX_STR("maxfilesize"))
		|| StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR("MAXIMUMFILESIZE"), LOG4CXX_STR("maximumfilesize")))
	{
		setMaxFileSize(value);
	}
	else if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR("MAXBACKUPINDEX"), LOG4CXX_STR("maxbackupindex"))
		|| StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR("MAXIMUMBACKUPINDEX"), LOG4CXX_STR("maximumbackupindex")))
	{
		setMaxBackupIndex(StringHelper::toInt(value));
	}
	else if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR("FILEDATEPATTERN"), LOG4CXX_STR("filedatepattern")))
	{
		setDatePattern(value);
	}
	else
	{
		FileAppender::setOption(option, value);
	}
}</data>
      <data key="d7">77.0</data>
      <data key="d8">102.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">26.0</data>
      <data key="d12">3</data>
      <data key="d13">2</data>
      <data key="d14">5</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">2</data>
      <data key="d21">2</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">2</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="8432">
      <data key="d0">8432</data>
      <data key="d1">decode</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.helpers.ISOLatinCharsetDecoder.decode</data>
      <data key="d4">log4cxx_status_t LOG4CXX_NS.helpers.ISOLatinCharsetDecoder.decode (ByteBuffer,LogString)</data>
      <data key="d5">main\cpp\charsetdecoder.cpp</data>
      <data key="d6">virtual log4cxx_status_t decode(ByteBuffer&amp; in,
			LogString&amp; out)
		{
			if (in.remaining() &gt; 0)
			{

				const unsigned char* src = (unsigned char*) in.current();
				const unsigned char* srcEnd = src + in.remaining();

				while (src &lt; srcEnd)
				{
					unsigned int sv = *(src++);
					Transcoder::encode(sv, out);
				}

				in.position(in.limit());
			}

			return APR_SUCCESS;
		}</data>
      <data key="d7">339.0</data>
      <data key="d8">358.0</data>
      <data key="d9">3.0</data>
      <data key="d10">3.0</data>
      <data key="d11">20.0</data>
      <data key="d12">15</data>
      <data key="d13">8</data>
      <data key="d14">16</data>
      <data key="d15">7</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">3</data>
      <data key="d19">4</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">log4cxx_status_t</data>
    </node>
    <node id="34032">
      <data key="d0">34032</data>
      <data key="d1">resetConfiguration</data>
      <data key="d2">1</data>
      <data key="d3">LogManager.resetConfiguration</data>
      <data key="d4">void LogManager.resetConfiguration ()</data>
      <data key="d5">main\cpp\logmanager.cpp</data>
      <data key="d6">void LogManager::resetConfiguration()
{
	getLoggerRepository()-&gt;resetConfiguration();
}</data>
      <data key="d7">209.0</data>
      <data key="d8">212.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">4.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">void</data>
    </node>
    <node id="52464">
      <data key="d0">52464</data>
      <data key="d1">connect</data>
      <data key="d2">1</data>
      <data key="d3">SocketAppenderSkeleton.connect</data>
      <data key="d4">void SocketAppenderSkeleton.connect (Pool)</data>
      <data key="d5">main\cpp\socketappenderskeleton.cpp</data>
      <data key="d6">void SocketAppenderSkeleton::connect(Pool&amp; p)
{
	if (_priv-&gt;address == 0)
	{
		LogLog::error(LogString(LOG4CXX_STR("No remote host is set for Appender named \"")) +
			_priv-&gt;name + LOG4CXX_STR("\"."));
	}
	else
	{
		cleanUp(p);

		try
		{
			LogString msg(LOG4CXX_STR("Connecting to [")
				+ _priv-&gt;address-&gt;toString() + LOG4CXX_STR(":"));
			StringHelper::toString(_priv-&gt;port, p, msg);
			msg += LOG4CXX_STR("].");
			LogLog::debug(msg);
			SocketPtr socket = Socket::create(_priv-&gt;address, _priv-&gt;port);
			setSocket(socket, p);
		}
		catch (SocketException&amp; e)
		{
			LogString msg = LOG4CXX_STR("Could not connect to [")
				+ _priv-&gt;address-&gt;toString() + LOG4CXX_STR(":");
			StringHelper::toString(_priv-&gt;port, p, msg);
			msg += LOG4CXX_STR("].");

			fireConnector(); // fire the connector thread
			LogLog::error(msg, e);
		}
	}
}</data>
      <data key="d7">92.0</data>
      <data key="d8">124.0</data>
      <data key="d9">1.0</data>
      <data key="d10">5.0</data>
      <data key="d11">33.0</data>
      <data key="d12">10</data>
      <data key="d13">5</data>
      <data key="d14">3</data>
      <data key="d15">2</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="31987">
      <data key="d0">31987</data>
      <data key="d1">getLoggerLS</data>
      <data key="d2">1</data>
      <data key="d3">Logger.getLoggerLS</data>
      <data key="d4">LoggerPtr Logger.getLoggerLS (LogString,ANY)</data>
      <data key="d5">main\cpp\logger.cpp</data>
      <data key="d6">LoggerPtr Logger::getLoggerLS(const LogString&amp; name)
{
	return LogManager::getLoggerLS(name);
}</data>
      <data key="d7">733.0</data>
      <data key="d8">736.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">4.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">3</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">LoggerPtr</data>
    </node>
    <node id="54516">
      <data key="d0">54516</data>
      <data key="d1">initSyslogFacilityStr</data>
      <data key="d2">1</data>
      <data key="d3">SyslogAppender.initSyslogFacilityStr</data>
      <data key="d4">void SyslogAppender.initSyslogFacilityStr ()</data>
      <data key="d5">main\cpp\syslogappender.cpp</data>
      <data key="d6">void SyslogAppender::initSyslogFacilityStr()
{
	_priv-&gt;facilityStr = getFacilityString(_priv-&gt;syslogFacility);

	if (_priv-&gt;facilityStr.empty())
	{
		Pool p;
		LogString msg(LOG4CXX_STR("\""));
		StringHelper::toString(_priv-&gt;syslogFacility, p, msg);
		msg.append(LOG4CXX_STR("\" is an unknown syslog facility. Defaulting to \"USER\"."));
		LogLog::error(msg);
		_priv-&gt;syslogFacility = LOG_USER;
		_priv-&gt;facilityStr = LOG4CXX_STR("user:");
	}
	else
	{
		_priv-&gt;facilityStr += LOG4CXX_STR(":");
	}
}</data>
      <data key="d7">80.0</data>
      <data key="d8">98.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">19.0</data>
      <data key="d12">25</data>
      <data key="d13">4</data>
      <data key="d14">13</data>
      <data key="d15">6</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">2</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">void</data>
    </node>
    <node id="55544">
      <data key="d0">55544</data>
      <data key="d1">setFacility</data>
      <data key="d2">1</data>
      <data key="d3">SyslogAppender.setFacility</data>
      <data key="d4">void SyslogAppender.setFacility (LogString)</data>
      <data key="d5">main\cpp\syslogappender.cpp</data>
      <data key="d6">void SyslogAppender::setFacility(const LogString&amp; facilityName)
{
	if (facilityName.empty())
	{
		return;
	}

	_priv-&gt;syslogFacility = getFacility(facilityName);

	if (_priv-&gt;syslogFacility == LOG_UNDEF)
	{
		LogLog::error(LOG4CXX_STR("[") + facilityName +
			LOG4CXX_STR("] is an unknown syslog facility. Defaulting to [USER]."));
		_priv-&gt;syslogFacility = LOG_USER;
	}

	this-&gt;initSyslogFacilityStr();
}</data>
      <data key="d7">442.0</data>
      <data key="d8">459.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">18.0</data>
      <data key="d12">18</data>
      <data key="d13">7</data>
      <data key="d14">8</data>
      <data key="d15">4</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">3</data>
      <data key="d19">3</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="34040">
      <data key="d0">34040</data>
      <data key="d1">removeLogger</data>
      <data key="d2">1</data>
      <data key="d3">LogManager.removeLogger</data>
      <data key="d4">bool LogManager.removeLogger (LogString,bool)</data>
      <data key="d5">main\cpp\logmanager.cpp</data>
      <data key="d6">bool LogManager::removeLogger(const LogString&amp; name, bool ifNotUsed)
{
#if LOG4CXX_ABI_VERSION &lt;= 15
	bool result = false;
	if (auto r = dynamic_cast&lt;Hierarchy*&gt;(getLoggerRepository().get()))
		result = r-&gt;removeLogger(name, ifNotUsed);
	return result;
#else
	return getLoggerRepository()-&gt;removeLogger(name, ifNotUsed);
#endif
}</data>
      <data key="d7">214.0</data>
      <data key="d8">224.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">11.0</data>
      <data key="d12">6</data>
      <data key="d13">4</data>
      <data key="d14">7</data>
      <data key="d15">4</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">bool</data>
    </node>
    <node id="64767">
      <data key="d0">64767</data>
      <data key="d1">WideLife</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.helpers.WideLife.WideLife</data>
      <data key="d4">ANY LOG4CXX_NS.helpers.WideLife.WideLife ()</data>
      <data key="d5">main\include\log4cxx\helpers\widelife.hpp</data>
      <data key="d6">WideLife(Arg0&amp;&amp; arg0, Args&amp;&amp;... args)
	{		
		new(&amp;storage) T(std::forward&lt;Arg0&gt;(arg0), std::forward&lt;Args&gt;(args)...);
	}</data>
      <data key="d7">47.0</data>
      <data key="d8">50.0</data>
      <data key="d9">2.0</data>
      <data key="d10">2.0</data>
      <data key="d11">4.0</data>
      <data key="d12">2</data>
      <data key="d13">2</data>
      <data key="d14">2</data>
      <data key="d15">2</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">ANY</data>
    </node>
    <node id="39169">
      <data key="d0">39169</data>
      <data key="d1">empty</data>
      <data key="d2">1</data>
      <data key="d3">NDC.empty</data>
      <data key="d4">bool NDC.empty ()</data>
      <data key="d5">main\cpp\ndc.cpp</data>
      <data key="d6">bool NDC::empty()
{
	bool empty = true;
	ThreadSpecificData* data = ThreadSpecificData::getCurrentData();

	if (data != 0)
	{
		Stack&amp; stack = data-&gt;getStack();
		empty = stack.empty();

		if (empty)
		{
			data-&gt;recycle();
		}
	}

	return empty;
}</data>
      <data key="d7">227.0</data>
      <data key="d8">244.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">18.0</data>
      <data key="d12">9</data>
      <data key="d13">4</data>
      <data key="d14">11</data>
      <data key="d15">4</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">3</data>
      <data key="d19">4</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">bool</data>
    </node>
    <node id="41219">
      <data key="d0">41219</data>
      <data key="d1">instantiateByClassName</data>
      <data key="d2">1</data>
      <data key="d3">OptionConverter.instantiateByClassName</data>
      <data key="d4">ObjectPtr OptionConverter.instantiateByClassName (LogString,Class,ObjectPtr)</data>
      <data key="d5">main\cpp\optionconverter.cpp</data>
      <data key="d6">ObjectPtr OptionConverter::instantiateByClassName(const LogString&amp; className,
	const Class&amp; superClass, const ObjectPtr&amp; defaultValue)
{
	if (!className.empty())
	{
		try
		{
			const Class&amp; classObj = Loader::loadClass(className);
			ObjectPtr newObject =  ObjectPtr(classObj.newInstance());

			if (!newObject-&gt;instanceof(superClass))
			{
				return defaultValue;
			}

			return newObject;
		}
		catch (Exception&amp; e)
		{
			LogLog::error(LOG4CXX_STR("Could not instantiate class [") +
				className + LOG4CXX_STR("]."), e);
		}
	}

	return defaultValue;
}</data>
      <data key="d7">382.0</data>
      <data key="d8">407.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">26.0</data>
      <data key="d12">11</data>
      <data key="d13">5</data>
      <data key="d14">14</data>
      <data key="d15">8</data>
      <data key="d16">3</data>
      <data key="d17">2</data>
      <data key="d18">4</data>
      <data key="d19">7</data>
      <data key="d20">0</data>
      <data key="d21">2</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">6</data>
      <data key="d26">3</data>
      <data key="d27">3</data>
      <data key="d28">ObjectPtr</data>
    </node>
    <node id="57603">
      <data key="d0">57603</data>
      <data key="d1">configure</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.helpers.ThreadUtility.configure</data>
      <data key="d4">void LOG4CXX_NS.helpers.ThreadUtility.configure (ThreadConfigurationType)</data>
      <data key="d5">main\cpp\threadutility.cpp</data>
      <data key="d6">void ThreadUtility::configure( ThreadConfigurationType type )
{
	auto utility = instance();

	if ( type == ThreadConfigurationType::NoConfiguration )
	{
		utility-&gt;configureFuncs( nullptr, nullptr, nullptr );
	}
	else if ( type == ThreadConfigurationType::NameThreadOnly )
	{
		utility-&gt;configureFuncs( nullptr,
			std::bind( &amp;ThreadUtility::threadStartedNameThread, utility,
				std::placeholders::_1,
				std::placeholders::_2,
				std::placeholders::_3 ),
			nullptr );
	}
	else if ( type == ThreadConfigurationType::BlockSignalsOnly )
	{
		utility-&gt;configureFuncs( std::bind( &amp;ThreadUtility::preThreadBlockSignals, utility ),
			nullptr,
			std::bind( &amp;ThreadUtility::postThreadUnblockSignals, utility ) );
	}
	else if ( type == ThreadConfigurationType::BlockSignalsAndNameThread )
	{
		utility-&gt;configureFuncs( std::bind( &amp;ThreadUtility::preThreadBlockSignals, utility ),
			std::bind( &amp;ThreadUtility::threadStartedNameThread, utility,
				std::placeholders::_1,
				std::placeholders::_2,
		...</data>
      <data key="d7">75.0</data>
      <data key="d8">107.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">33.0</data>
      <data key="d12">4</data>
      <data key="d13">4</data>
      <data key="d14">4</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">1</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="17668">
      <data key="d0">17668</data>
      <data key="d1">formatMessage</data>
      <data key="d2">1</data>
      <data key="d3">IOException.formatMessage</data>
      <data key="d4">LogString IOException.formatMessage (log4cxx_status_t)</data>
      <data key="d5">main\cpp\exception.cpp</data>
      <data key="d6">LogString IOException::formatMessage(log4cxx_status_t stat)
{
	char err_buff[1024];
	LogString s(LOG4CXX_STR("IO Exception : status code = "));
	Pool p;
	StringHelper::toString(stat, p, s);
	s.append(LOG4CXX_STR("("));
	apr_strerror(stat, err_buff, sizeof(err_buff));
	std::string sMsg = err_buff;
	LOG4CXX_DECODE_CHAR(lsMsg, sMsg);
	s.append(lsMsg);
	s.append(LOG4CXX_STR(")"));
	return s;
}</data>
      <data key="d7">173.0</data>
      <data key="d8">186.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">14.0</data>
      <data key="d12">6</data>
      <data key="d13">3</data>
      <data key="d14">16</data>
      <data key="d15">7</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">LogString</data>
    </node>
    <node id="11529">
      <data key="d0">11529</data>
      <data key="d1">getSystemOut</data>
      <data key="d2">1</data>
      <data key="d3">ConsoleAppender.getSystemOut</data>
      <data key="d4">LogString ConsoleAppender.getSystemOut ()</data>
      <data key="d5">main\cpp\consoleappender.cpp</data>
      <data key="d6">const LogString&amp; ConsoleAppender::getSystemOut()
{
	static const WideLife&lt;LogString&gt; name(LOG4CXX_STR("System.out"));
	return name;
}</data>
      <data key="d7">71.0</data>
      <data key="d8">75.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">5.0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">1</data>
      <data key="d15">1</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">LogString</data>
    </node>
    <node id="10506">
      <data key="d0">10506</data>
      <data key="d1">colorToANSISequence</data>
      <data key="d2">1</data>
      <data key="d3">colorToANSISequence</data>
      <data key="d4">LogString colorToANSISequence (LogString,bool,Pool)</data>
      <data key="d5">main\cpp\colorstartpatternconverter.cpp</data>
      <data key="d6">static LogString colorToANSISequence(const LogString&amp; color, bool isForeground, Pool&amp; pool){
	int numberToConvert = 0;

	if(StringHelper::equalsIgnoreCase(color, LOG4CXX_STR("BLACK"), LOG4CXX_STR("black"))){
		numberToConvert = 30;
	}else if(StringHelper::equalsIgnoreCase(color, LOG4CXX_STR("RED"), LOG4CXX_STR("red"))){
		numberToConvert = 31;
	}else if(StringHelper::equalsIgnoreCase(color, LOG4CXX_STR("GREEN"), LOG4CXX_STR("green"))){
		numberToConvert = 32;
	}else if(StringHelper::equalsIgnoreCase(color, LOG4CXX_STR("YELLOW"), LOG4CXX_STR("yellow"))){
		numberToConvert = 33;
	}else if(StringHelper::equalsIgnoreCase(color, LOG4CXX_STR("BLUE"), LOG4CXX_STR("blue"))){
		numberToConvert = 34;
	}else if(StringHelper::equalsIgnoreCase(color, LOG4CXX_STR("MAGENTA"), LOG4CXX_STR("magenta"))){
		numberToConvert = 35;
	}else if(StringHelper::equalsIgnoreCase(color, LOG4CXX_STR("CYAN"), LOG4CXX_STR("cyan"))){
		numberToConvert = 36;
	}else if(StringHelper::equalsIgnoreCase(color, LOG4CXX_STR...</data>
      <data key="d7">34.0</data>
      <data key="d8">64.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">31.0</data>
      <data key="d12">7</data>
      <data key="d13">4</data>
      <data key="d14">12</data>
      <data key="d15">6</data>
      <data key="d16">1</data>
      <data key="d17">2</data>
      <data key="d18">4</data>
      <data key="d19">4</data>
      <data key="d20">1</data>
      <data key="d21">2</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">6</data>
      <data key="d26">3</data>
      <data key="d27">3</data>
      <data key="d28">LogString</data>
    </node>
    <node id="9487">
      <data key="d0">9487</data>
      <data key="d1">encode</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.helpers.LocaleCharsetEncoder.encode</data>
      <data key="d4">log4cxx_status_t LOG4CXX_NS.helpers.LocaleCharsetEncoder.encode (LogString,ANY,ByteBuffer)</data>
      <data key="d5">main\cpp\charsetencoder.cpp</data>
      <data key="d6">log4cxx_status_t encode
			( const LogString&amp;           in
			, LogString::const_iterator&amp; iter
			, ByteBuffer&amp;                out
			) override
		{
			log4cxx_status_t result = APR_SUCCESS;
#if !LOG4CXX_CHARSET_EBCDIC
			char* current = out.current();
			size_t remain = out.remaining();
			if (std::mbsinit(&amp;this-&gt;state)) // ByteBuffer not partially encoded?
			{
				// Copy single byte characters
				for (;
					iter != in.end() &amp;&amp; ((unsigned int) *iter) &lt; 0x80 &amp;&amp; 0 &lt; remain;
					iter++, remain--, current++)
				{
					*current = *iter;
				}
			}
#endif
			// Encode characters that may require multiple bytes
			while (iter != in.end() &amp;&amp; MB_CUR_MAX &lt;= remain)
			{
				auto ch = Transcoder::decode(in, iter);
				auto n = std::wcrtomb(current, ch, &amp;this-&gt;state);
				if (static_cast&lt;std::size_t&gt;(-1) == n) // not a valid wide character?
				{
					result = APR_BADARG;
					break;
				}
				remain -= n;
				current += n;
			}
			out.position(current - out.data());
			return result;
		}</data>
      <data key="d7">457.0</data>
      <data key="d8">493.0</data>
      <data key="d9">3.0</data>
      <data key="d10">3.0</data>
      <data key="d11">37.0</data>
      <data key="d12">38</data>
      <data key="d13">15</data>
      <data key="d14">36</data>
      <data key="d15">13</data>
      <data key="d16">0</data>
      <data key="d17">3</data>
      <data key="d18">6</data>
      <data key="d19">7</data>
      <data key="d20">1</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">3</data>
      <data key="d25">6</data>
      <data key="d26">3</data>
      <data key="d27">3</data>
      <data key="d28">log4cxx_status_t</data>
    </node>
    <node id="28944">
      <data key="d0">28944</data>
      <data key="d1">setLevelToMatch</data>
      <data key="d2">1</data>
      <data key="d3">LevelMatchFilter.setLevelToMatch</data>
      <data key="d4">void LevelMatchFilter.setLevelToMatch (LogString)</data>
      <data key="d5">main\cpp\levelmatchfilter.cpp</data>
      <data key="d6">void LevelMatchFilter::setLevelToMatch(const LogString&amp; levelToMatch1)
{
	priv-&gt;levelToMatch = OptionConverter::toLevel(levelToMatch1, priv-&gt;levelToMatch);
}</data>
      <data key="d7">66.0</data>
      <data key="d8">69.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">4.0</data>
      <data key="d12">8</data>
      <data key="d13">4</data>
      <data key="d14">4</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="11539">
      <data key="d0">11539</data>
      <data key="d1">getSystemErr</data>
      <data key="d2">1</data>
      <data key="d3">ConsoleAppender.getSystemErr</data>
      <data key="d4">LogString ConsoleAppender.getSystemErr ()</data>
      <data key="d5">main\cpp\consoleappender.cpp</data>
      <data key="d6">const LogString&amp; ConsoleAppender::getSystemErr()
{
	static const WideLife&lt;LogString&gt; name(LOG4CXX_STR("System.err"));
	return name;
}</data>
      <data key="d7">77.0</data>
      <data key="d8">81.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">5.0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">1</data>
      <data key="d15">1</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">LogString</data>
    </node>
    <node id="38166">
      <data key="d0">38166</data>
      <data key="d1">count</data>
      <data key="d2">3</data>
      <data key="d3">LOG4CXX_NS.pattern.MaxElementAbbreviator.count</data>
      <data key="d4" />
      <data key="d5">main\cpp\nameabbreviator.cpp</data>
      <data key="d6">count</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="24858">
      <data key="d0">24858</data>
      <data key="d1">resetConfiguration</data>
      <data key="d2">1</data>
      <data key="d3">Hierarchy.resetConfiguration</data>
      <data key="d4">void Hierarchy.resetConfiguration ()</data>
      <data key="d5">main\cpp\hierarchy.cpp</data>
      <data key="d6">void Hierarchy::resetConfiguration()
{
	std::lock_guard&lt;std::recursive_mutex&gt; lock(m_priv-&gt;mutex);

	if (m_priv-&gt;root)
	{
		m_priv-&gt;root-&gt;setLevel(Level::getDebug());
		m_priv-&gt;root-&gt;setResourceBundle(0);
	}
	setThresholdInternal(Level::getAll());

	shutdownInternal();

	LoggerMap::const_iterator it, itEnd = m_priv-&gt;loggers.end();

	for (it = m_priv-&gt;loggers.begin(); it != itEnd; it++)
	{
		if (auto pLogger = it-&gt;second)
		{
			pLogger-&gt;setLevel(0);
			pLogger-&gt;setAdditivity(true);
			pLogger-&gt;setResourceBundle(0);
		}
	}

	//rendererMap.clear();
}</data>
      <data key="d7">320.0</data>
      <data key="d8">346.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">27.0</data>
      <data key="d12">24</data>
      <data key="d13">6</data>
      <data key="d14">19</data>
      <data key="d15">6</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">4</data>
      <data key="d19">5</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">2</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">void</data>
    </node>
    <node id="38170">
      <data key="d0">38170</data>
      <data key="d1">abbreviate</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.pattern.MaxElementAbbreviator.abbreviate</data>
      <data key="d4">void LOG4CXX_NS.pattern.MaxElementAbbreviator.abbreviate (ANY,LogString)</data>
      <data key="d5">main\cpp\nameabbreviator.cpp</data>
      <data key="d6">void abbreviate(LogString::size_type nameStart, LogString&amp; buf) const override
		{
			// We substract 1 from 'len' when assigning to 'end' to avoid out of
			// bounds exception in return r.substring(end+1, len). This can happen if
			// precision is 1 and the logger name ends with a dot.
			LogString::size_type end = buf.length() - 1;

			for (LogString::size_type i = count; i &gt; 0; i--)
			{
				end = buf.rfind(0x2E /* '.' */, end - 1);

				if ((end == LogString::npos) || (end &lt; nameStart))
				{
					return;
				}
			}

			buf.erase(buf.begin() + nameStart, buf.begin() + (end + 1));
		}</data>
      <data key="d7">99.0</data>
      <data key="d8">117.0</data>
      <data key="d9">3.0</data>
      <data key="d10">3.0</data>
      <data key="d11">19.0</data>
      <data key="d12">18</data>
      <data key="d13">8</data>
      <data key="d14">17</data>
      <data key="d15">6</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">3</data>
      <data key="d19">4</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="44629">
      <data key="d0">44629</data>
      <data key="d1">DELIMITER</data>
      <data key="d2">3</data>
      <data key="d3">PropertyParser.LexemType.DELIMITER</data>
      <data key="d4" />
      <data key="d5">main\cpp\properties.cpp</data>
      <data key="d6">DELIMITER</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">2</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="11549">
      <data key="d0">11549</data>
      <data key="d1">setTarget</data>
      <data key="d2">1</data>
      <data key="d3">ConsoleAppender.setTarget</data>
      <data key="d4">void ConsoleAppender.setTarget (LogString)</data>
      <data key="d5">main\cpp\consoleappender.cpp</data>
      <data key="d6">void ConsoleAppender::setTarget(const LogString&amp; value)
{
	LogString v = StringHelper::trim(value);

	if (StringHelper::equalsIgnoreCase(v,
			LOG4CXX_STR("SYSTEM.OUT"), LOG4CXX_STR("system.out")))
	{
		_priv-&gt;target = getSystemOut();
	}
	else if (StringHelper::equalsIgnoreCase(v,
			LOG4CXX_STR("SYSTEM.ERR"), LOG4CXX_STR("system.err")))
	{
		_priv-&gt;target = getSystemErr();
	}
	else
	{
		targetWarn(value);
	}
}</data>
      <data key="d7">83.0</data>
      <data key="d8">101.0</data>
      <data key="d9">1.0</data>
      <data key="d10">2.0</data>
      <data key="d11">19.0</data>
      <data key="d12">7</data>
      <data key="d13">4</data>
      <data key="d14">6</data>
      <data key="d15">4</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">1</data>
      <data key="d21">2</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">2</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="62752">
      <data key="d0">62752</data>
      <data key="d1">append</data>
      <data key="d2">1</data>
      <data key="d3">XMLSocketAppender.append</data>
      <data key="d4">void XMLSocketAppender.append (ANY,ANY)</data>
      <data key="d5">main\cpp\xmlsocketappender.cpp</data>
      <data key="d6">void XMLSocketAppender::append(const spi::LoggingEventPtr&amp; event, LOG4CXX_NS::helpers::Pool&amp; p)
{
	if (_priv-&gt;writer)
	{
		LogString output;
		_priv-&gt;layout-&gt;format(output, event, p);

		try
		{
			_priv-&gt;writer-&gt;write(output, p);
			_priv-&gt;writer-&gt;flush(p);
		}
		catch (std::exception&amp; e)
		{
			_priv-&gt;writer = nullptr;
			LogLog::warn(LOG4CXX_STR("Detected problem with connection: "), e);

			if (getReconnectionDelay() &gt; 0)
			{
				fireConnector();
			}
		}
	}
}</data>
      <data key="d7">124.0</data>
      <data key="d8">147.0</data>
      <data key="d9">1.0</data>
      <data key="d10">5.0</data>
      <data key="d11">24.0</data>
      <data key="d12">21</data>
      <data key="d13">5</data>
      <data key="d14">13</data>
      <data key="d15">6</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">4</data>
      <data key="d19">7</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="12580">
      <data key="d0">12580</data>
      <data key="d1">numberFormat</data>
      <data key="d2">1</data>
      <data key="d3">DateFormat.numberFormat</data>
      <data key="d4">void DateFormat.numberFormat (LogString,int,Pool)</data>
      <data key="d5">main\cpp\dateformat.cpp</data>
      <data key="d6">void DateFormat::numberFormat(LogString&amp; s, int n, Pool&amp; p) const
{
	StringHelper::toString(n, p, s);
}</data>
      <data key="d7">32.0</data>
      <data key="d8">35.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">4.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">4</data>
      <data key="d15">4</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">6</data>
      <data key="d26">3</data>
      <data key="d27">3</data>
      <data key="d28">void</data>
    </node>
    <node id="16679">
      <data key="d0">16679</data>
      <data key="d1">doConfigure</data>
      <data key="d2">1</data>
      <data key="d3">DOMConfigurator.doConfigure</data>
      <data key="d4">ConfigurationStatus DOMConfigurator.doConfigure (File,ANY)</data>
      <data key="d5">main\cpp\domconfigurator.cpp</data>
      <data key="d6">spi::ConfigurationStatus DOMConfigurator::doConfigure(const File&amp; filename, spi::LoggerRepositoryPtr repository1)
{
	repository1-&gt;setConfigured(true);
	m_priv-&gt;repository = repository1;
	LogString msg(LOG4CXX_STR("DOMConfigurator configuring file "));
	msg.append(filename.getPath());
	msg.append(LOG4CXX_STR("..."));
	LogLog::debug(msg);

	m_priv-&gt;loggerFactory = std::make_shared&lt;DefaultLoggerFactory&gt;();

	Pool p;
	apr_file_t* fd;

	log4cxx_status_t rv = filename.open(&amp;fd, APR_READ, APR_OS_DEFAULT, p);

	if (rv != APR_SUCCESS)
	{
		// There is not technically an exception thrown here, but this behavior matches
		// what the PropertyConfigurator does
		IOException io(rv);
		LogString msg2(LOG4CXX_STR("Could not read configuration file ["));
		msg2.append(filename.getPath());
		msg2.append(LOG4CXX_STR("]. "));
		LOG4CXX_DECODE_CHAR(msg, io.what());
		msg2.append(msg);
		LogLog::error(msg2);
		return spi::ConfigurationStatus::NotConfigured;
	}
	else
	{
		apr_xml_parser* parser = NULL;
	...</data>
      <data key="d7">780.0</data>
      <data key="d8">850.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">71.0</data>
      <data key="d12">24</data>
      <data key="d13">5</data>
      <data key="d14">32</data>
      <data key="d15">16</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">2</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">ConfigurationStatus</data>
    </node>
    <node id="64807">
      <data key="d0">64807</data>
      <data key="d1">value</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.helpers.WideLife.value</data>
      <data key="d4">T LOG4CXX_NS.helpers.WideLife.value ()</data>
      <data key="d5">main\include\log4cxx\helpers\widelife.hpp</data>
      <data key="d6">const T&amp; value() const
	{
		return *reinterpret_cast&lt;const T*&gt;(&amp;storage);
	}</data>
      <data key="d7">66.0</data>
      <data key="d8">69.0</data>
      <data key="d9">2.0</data>
      <data key="d10">2.0</data>
      <data key="d11">4.0</data>
      <data key="d12">3</data>
      <data key="d13">3</data>
      <data key="d14">1</data>
      <data key="d15">1</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">T</data>
    </node>
    <node id="58664">
      <data key="d0">58664</data>
      <data key="d1">getInstance</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.helpers.TimeZoneImpl.GMTTimeZone.getInstance</data>
      <data key="d4">TimeZonePtr LOG4CXX_NS.helpers.TimeZoneImpl.GMTTimeZone.getInstance ()</data>
      <data key="d5">main\cpp\timezone.cpp</data>
      <data key="d6">static const TimeZonePtr&amp; getInstance()
		{
			static WideLife&lt;TimeZonePtr&gt; tz = std::make_shared&lt;GMTTimeZone&gt;();
			return tz;
		}</data>
      <data key="d7">47.0</data>
      <data key="d8">51.0</data>
      <data key="d9">3.0</data>
      <data key="d10">3.0</data>
      <data key="d11">5.0</data>
      <data key="d12">2</data>
      <data key="d13">2</data>
      <data key="d14">3</data>
      <data key="d15">2</data>
      <data key="d16">2</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">TimeZonePtr</data>
    </node>
    <node id="49453">
      <data key="d0">49453</data>
      <data key="d1">create</data>
      <data key="d2">1</data>
      <data key="d3">ServerSocket.create</data>
      <data key="d4">ServerSocketUniquePtr ServerSocket.create (int)</data>
      <data key="d5">main\cpp\serversocket.cpp</data>
      <data key="d6">ServerSocketUniquePtr ServerSocket::create(int port){
	return std::make_unique&lt;APRServerSocket&gt;(port);
}</data>
      <data key="d7">54.0</data>
      <data key="d8">56.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">3.0</data>
      <data key="d12">3</data>
      <data key="d13">3</data>
      <data key="d14">3</data>
      <data key="d15">3</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">ServerSocketUniquePtr</data>
    </node>
    <node id="30000">
      <data key="d0">30000</data>
      <data key="d34">nan</data>
      <data key="d2">2</data>
      <data key="d3">main\cpp\locationinfo.cpp.nan</data>
      <data key="d4" />
      <data key="d5">main\cpp\locationinfo.cpp</data>
      <data key="d6">const char* NA</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="3376">
      <data key="d0">3376</data>
      <data key="d1">doAppendImpl</data>
      <data key="d2">1</data>
      <data key="d3">AppenderSkeleton.doAppendImpl</data>
      <data key="d4">void AppenderSkeleton.doAppendImpl (ANY,Pool)</data>
      <data key="d5">main\cpp\appenderskeleton.cpp</data>
      <data key="d6">void AppenderSkeleton::doAppendImpl(const spi::LoggingEventPtr&amp; event, Pool&amp; pool1)
{
	if (m_priv-&gt;closed)
	{
		LogLog::error(((LogString) LOG4CXX_STR("Attempted to append to closed appender named ["))
			+ m_priv-&gt;name + LOG4CXX_STR("]."));
		return;
	}

	if (!isAsSevereAsThreshold(event-&gt;getLevel()))
	{
		return;
	}

	FilterPtr f = m_priv-&gt;headFilter;


	while (f != 0)
	{
		switch (f-&gt;decide(event))
		{
			case Filter::DENY:
				return;

			case Filter::ACCEPT:
				f = nullptr;
				break;

			case Filter::NEUTRAL:
				f = f-&gt;getNext();
		}
	}

	append(event, pool1);
}</data>
      <data key="d7">98.0</data>
      <data key="d8">132.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">35.0</data>
      <data key="d12">18</data>
      <data key="d13">7</data>
      <data key="d14">17</data>
      <data key="d15">6</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">6</data>
      <data key="d19">6</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="53554">
      <data key="d0">53554</data>
      <data key="d1">equalsIgnoreCase</data>
      <data key="d2">1</data>
      <data key="d3">StringHelper.equalsIgnoreCase</data>
      <data key="d4">bool StringHelper.equalsIgnoreCase (LogString,logchar*,logchar*)</data>
      <data key="d5">main\cpp\stringhelper.cpp</data>
      <data key="d6">bool StringHelper::equalsIgnoreCase(const LogString&amp; s1, const LogString&amp; upper, const LogString&amp; lower)
{
	LogString::const_iterator u = upper.begin();
	LogString::const_iterator l = lower.begin();
	LogString::const_iterator iter = s1.begin();

	for (;
		iter != s1.end() &amp;&amp; u != upper.end() &amp;&amp; l != lower.end();
		iter++, u++, l++)
	{
		if (*iter != *u &amp;&amp; *iter != *l)
		{
			return false;
		}
	}

	return u == upper.end() &amp;&amp; iter == s1.end();
}</data>
      <data key="d7">46.0</data>
      <data key="d8">63.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">18.0</data>
      <data key="d12">13</data>
      <data key="d13">6</data>
      <data key="d14">9</data>
      <data key="d15">4</data>
      <data key="d16">48</data>
      <data key="d17">0</data>
      <data key="d18">3</data>
      <data key="d19">4</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">6</data>
      <data key="d26">3</data>
      <data key="d27">3</data>
      <data key="d28">bool</data>
    </node>
    <node id="30004">
      <data key="d0">30004</data>
      <data key="d1">NA_METHOD</data>
      <data key="d2">2</data>
      <data key="d3">main\cpp\locationinfo.cpp.NA_METHOD</data>
      <data key="d4" />
      <data key="d5">main\cpp\locationinfo.cpp</data>
      <data key="d6">const char* NA_METHOD</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="60726">
      <data key="d0">60726</data>
      <data key="d1">appendEscapingTags</data>
      <data key="d2">1</data>
      <data key="d3">Transform.appendEscapingTags</data>
      <data key="d4">void Transform.appendEscapingTags (LogString,LogString)</data>
      <data key="d5">main\cpp\transform.cpp</data>
      <data key="d6">void Transform::appendEscapingTags(
	LogString&amp; buf, const LogString&amp; input)
{
	//Check if the string is zero length -- if so, return
	//what was sent in.

	if (input.length() == 0 )
	{
		return;
	}

	logchar specials[] = { 0x22 /* " */, 0x26 /* &amp; */, 0x3C /* &lt; */, 0x3E /* &gt; */, 0x00 };
	size_t start = 0;
	size_t special = input.find_first_of(specials, start);

	while (special != LogString::npos)
	{
		if (special &gt; start)
		{
			buf.append(input, start, special - start);
		}

		switch (input[special])
		{
			case 0x22:
				buf.append(LOG4CXX_STR("&amp;quot;"));
				break;

			case 0x26:
				buf.append(LOG4CXX_STR("&amp;amp;"));
				break;

			case 0x3C:
				buf.append(LOG4CXX_STR("&amp;lt;"));
				break;

			case 0x3E:
				buf.append(LOG4CXX_STR("&amp;gt;"));
				break;

			default:
				buf.append(1, input[special]);
				break;
		}

		start = special + 1;

		if (special &lt; input.size())
		{
			special = input.find_first_of(specials, start);
		}
		else
		{
			special = LogString::npos;
		}
	}

	if (s...</data>
      <data key="d7">27.0</data>
      <data key="d8">88.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">62.0</data>
      <data key="d12">30</data>
      <data key="d13">10</data>
      <data key="d14">40</data>
      <data key="d15">6</data>
      <data key="d16">14</data>
      <data key="d17">0</data>
      <data key="d18">12</data>
      <data key="d19">10</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="5431">
      <data key="d0">5431</data>
      <data key="d1">setOption</data>
      <data key="d2">1</data>
      <data key="d3">AsyncAppender.setOption</data>
      <data key="d4">void AsyncAppender.setOption (LogString,LogString)</data>
      <data key="d5">main\cpp\asyncappender.cpp</data>
      <data key="d6">void AsyncAppender::setOption(const LogString&amp; option,
	const LogString&amp; value)
{
	if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("LOCATIONINFO"), LOG4CXX_STR("locationinfo")))
	{
		setLocationInfo(OptionConverter::toBoolean(value, false));
	}

	if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("BUFFERSIZE"), LOG4CXX_STR("buffersize")))
	{
		setBufferSize(OptionConverter::toInt(value, DEFAULT_BUFFER_SIZE));
	}

	if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("BLOCKING"), LOG4CXX_STR("blocking")))
	{
		setBlocking(OptionConverter::toBoolean(value, true));
	}
	else
	{
		AppenderSkeleton::setOption(option, value);
	}
}</data>
      <data key="d7">194.0</data>
      <data key="d8">215.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">22.0</data>
      <data key="d12">6</data>
      <data key="d13">1</data>
      <data key="d14">13</data>
      <data key="d15">5</data>
      <data key="d16">0</data>
      <data key="d17">6</data>
      <data key="d18">4</data>
      <data key="d19">4</data>
      <data key="d20">3</data>
      <data key="d21">6</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">3</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="8510">
      <data key="d0">8510</data>
      <data key="d1">decode</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.helpers.USASCIICharsetDecoder.decode</data>
      <data key="d4">log4cxx_status_t LOG4CXX_NS.helpers.USASCIICharsetDecoder.decode (ByteBuffer,LogString)</data>
      <data key="d5">main\cpp\charsetdecoder.cpp</data>
      <data key="d6">virtual log4cxx_status_t decode(ByteBuffer&amp; in,
			LogString&amp; out)
		{
			log4cxx_status_t stat = APR_SUCCESS;

			if (in.remaining() &gt; 0)
			{

				const unsigned char* src = (unsigned char*) in.current();
				const unsigned char* srcEnd = src + in.remaining();

				while (src &lt; srcEnd)
				{
					unsigned char sv = *src;

					if (sv &lt; 0x80)
					{
						src++;
						Transcoder::encode(sv, out);
					}
					else
					{
						stat = APR_BADARG;
						break;
					}
				}

				in.position(src - (const unsigned char*) in.data());
			}

			return stat;
		}</data>
      <data key="d7">385.0</data>
      <data key="d8">416.0</data>
      <data key="d9">3.0</data>
      <data key="d10">3.0</data>
      <data key="d11">32.0</data>
      <data key="d12">19</data>
      <data key="d13">9</data>
      <data key="d14">21</data>
      <data key="d15">8</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">4</data>
      <data key="d19">7</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">log4cxx_status_t</data>
    </node>
    <node id="41278">
      <data key="d0">41278</data>
      <data key="d1">selectAndConfigure</data>
      <data key="d2">1</data>
      <data key="d3">OptionConverter.selectAndConfigure</data>
      <data key="d4">void OptionConverter.selectAndConfigure (File,LogString,ANY,int)</data>
      <data key="d5">main\cpp\optionconverter.cpp</data>
      <data key="d6">void OptionConverter::selectAndConfigure(const File&amp; configFileName,
	const LogString&amp; _clazz, spi::LoggerRepositoryPtr hierarchy, int delay)
{
	ConfiguratorPtr configurator;
	LogString clazz = _clazz;

	LogString filename(configFileName.getPath());

#if LOG4CXX_HAS_DOMCONFIGURATOR
	if (clazz.empty()
		&amp;&amp; filename.length() &gt; 4
		&amp;&amp; StringHelper::equalsIgnoreCase(
			filename.substr(filename.length() - 4),
			LOG4CXX_STR(".XML"), LOG4CXX_STR(".xml")))
	{
		clazz = LOG4CXX_NS::xml::DOMConfigurator::getStaticClass().toString();
	}
#endif

	if (!clazz.empty())
	{
		LogLog::debug(LOG4CXX_STR("Preferred configurator class: ") + clazz);
		const Class&amp; clazzObj = Loader::loadClass(clazz);
		ObjectPtr obj = ObjectPtr(clazzObj.newInstance());
		configurator = LOG4CXX_NS::cast&lt;Configurator&gt;(obj);

		if (configurator == 0)
		{
			LogLog::error(LOG4CXX_STR("Could not instantiate configurator [")
				+ clazz + LOG4CXX_STR("]."));
			return;
		}
	}
	else
	{
		configurator = std::make_shared&lt;Proper...</data>
      <data key="d7">409.0</data>
      <data key="d8">456.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">48.0</data>
      <data key="d12">24</data>
      <data key="d13">9</data>
      <data key="d14">28</data>
      <data key="d15">14</data>
      <data key="d16">1</data>
      <data key="d17">4</data>
      <data key="d18">4</data>
      <data key="d19">5</data>
      <data key="d20">0</data>
      <data key="d21">4</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">8</data>
      <data key="d26">4</data>
      <data key="d27">4</data>
      <data key="d28">void</data>
    </node>
    <node id="36167">
      <data key="d0">36167</data>
      <data key="d1">m_quote</data>
      <data key="d2">3</data>
      <data key="d3">anonymous_namespace_1.QuotedMessagePatternConverter.m_quote</data>
      <data key="d4" />
      <data key="d5">main\cpp\messagepatternconverter.cpp</data>
      <data key="d6">m_quote</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">2</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="64839">
      <data key="d0">64839</data>
      <data key="d1">storage</data>
      <data key="d2">3</data>
      <data key="d3">LOG4CXX_NS.helpers.WideLife.storage</data>
      <data key="d4" />
      <data key="d5">main\include\log4cxx\helpers\widelife.hpp</data>
      <data key="d6">storage[sizeof(T)]</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">2</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="15691">
      <data key="d0">15691</data>
      <data key="d1">parseLogger</data>
      <data key="d2">1</data>
      <data key="d3">DOMConfigurator.parseLogger</data>
      <data key="d4">void DOMConfigurator.parseLogger (ANY,ANY,apr_xml_elem*,apr_xml_doc*,AppenderMap)</data>
      <data key="d5">main\cpp\domconfigurator.cpp</data>
      <data key="d6">void DOMConfigurator::parseLogger(
	LOG4CXX_NS::helpers::Pool&amp; p,
	LOG4CXX_NS::helpers::CharsetDecoderPtr&amp; utf8Decoder,
	apr_xml_elem* loggerElement,
	apr_xml_doc* doc,
	AppenderMap&amp; appenders)
{
	// Create a new Logger object from the &lt;category&gt; element.
	LogString loggerName = subst(getAttribute(utf8Decoder, loggerElement, NAME_ATTR));

	LogLog::debug(LOG4CXX_STR("Retreiving an instance of Logger."));
	LoggerPtr logger = m_priv-&gt;repository-&gt;getLogger(loggerName, m_priv-&gt;loggerFactory);

	// Setting up a logger needs to be an atomic operation, in order
	// to protect potential log operations while logger
	// configuration is in progress.
	bool additivity = OptionConverter::toBoolean(
			subst(getAttribute(utf8Decoder, loggerElement, ADDITIVITY_ATTR)),
			true);

	LogLog::debug(LOG4CXX_STR("Setting [") + logger-&gt;getName() + LOG4CXX_STR("] additivity to [") +
		(additivity ? LogString(LOG4CXX_STR("true")) : LogString(LOG4CXX_STR("false"))) + LOG4CXX_STR("]."));
	logger-&gt;setAdditivity...</data>
      <data key="d7">422.0</data>
      <data key="d8">446.0</data>
      <data key="d9">1.0</data>
      <data key="d10">71.0</data>
      <data key="d11">25.0</data>
      <data key="d12">16</data>
      <data key="d13">5</data>
      <data key="d14">23</data>
      <data key="d15">11</data>
      <data key="d16">0</data>
      <data key="d17">3</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">3</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">10</data>
      <data key="d26">5</data>
      <data key="d27">5</data>
      <data key="d28">void</data>
    </node>
    <node id="51533">
      <data key="d0">51533</data>
      <data key="d1">asciiCheck</data>
      <data key="d2">1</data>
      <data key="d3">SMTPAppender.asciiCheck</data>
      <data key="d4">bool SMTPAppender.asciiCheck (LogString,LogString)</data>
      <data key="d5">main\cpp\smtpappender.cpp</data>
      <data key="d6">bool SMTPAppender::asciiCheck(const LogString&amp; value, const LogString&amp; field)
{
	for (LogString::const_iterator iter = value.begin();
		iter != value.end();
		iter++)
	{
		if (0x7F &lt; (unsigned int) *iter)
		{
			LogLog::warn(field + LOG4CXX_STR(" contains non-ASCII character"));
			return false;
		}
	}

	return true;
}</data>
      <data key="d7">579.0</data>
      <data key="d8">593.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">15.0</data>
      <data key="d12">9</data>
      <data key="d13">7</data>
      <data key="d14">7</data>
      <data key="d15">4</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">3</data>
      <data key="d19">4</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">bool</data>
    </node>
    <node id="36173">
      <data key="d0">36173</data>
      <data key="d1">format</data>
      <data key="d2">1</data>
      <data key="d3">anonymous_namespace_3.QuotedMessagePatternConverter.format</data>
      <data key="d4">void anonymous_namespace_3.QuotedMessagePatternConverter.format (ANY,LogString,ANY)</data>
      <data key="d5">main\cpp\messagepatternconverter.cpp</data>
      <data key="d6">void format
			( const spi::LoggingEventPtr&amp; event
			, LogString&amp;                  toAppendTo
			, helpers::Pool&amp;              p
			) const override
		{
			auto&amp; input = event-&gt;getRenderedMessage();
			size_t endIndex, startIndex = 0;
			while ((endIndex = input.find(m_quote, startIndex)) != input.npos)
			{
				toAppendTo.append(input.substr(startIndex, endIndex - startIndex + 1));
				toAppendTo += m_quote;
				startIndex = endIndex + 1;
			}
			toAppendTo.append(input.substr(startIndex));
		}</data>
      <data key="d7">45.0</data>
      <data key="d8">60.0</data>
      <data key="d9">3.0</data>
      <data key="d10">3.0</data>
      <data key="d11">16.0</data>
      <data key="d12">16</data>
      <data key="d13">7</data>
      <data key="d14">20</data>
      <data key="d15">6</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">1</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">2</data>
      <data key="d25">6</data>
      <data key="d26">3</data>
      <data key="d27">3</data>
      <data key="d28">void</data>
    </node>
    <node id="59733">
      <data key="d0">59733</data>
      <data key="d1">encodeUTF16LE</data>
      <data key="d2">1</data>
      <data key="d3">Transcoder.encodeUTF16LE</data>
      <data key="d4">void Transcoder.encodeUTF16LE (unsigned int,ByteBuffer)</data>
      <data key="d5">main\cpp\transcoder.cpp</data>
      <data key="d6">size_t Transcoder::encodeUTF16LE(unsigned int ch, char* dst)
{
	if (ch &lt;= 0xFFFF)
	{
		dst[1] = (char) (ch &gt;&gt; 8);
		dst[0] = (char) (ch &amp; 0xFF);
		return 2;
	}

	if (ch &lt;= 0x10FFFF)
	{
		unsigned char w = (unsigned char) ((ch &gt;&gt; 16) - 1);
		dst[1] = (char) (0xD8 + (w &gt;&gt; 2));
		dst[0] = (char) (((w &amp; 0x03) &lt;&lt; 6) + ((ch &gt;&gt; 10) &amp; 0x3F));
		dst[3] = (char) (0xDC + ((ch &amp; 0x30) &gt;&gt; 4));
		dst[2] = (char) (ch &amp; 0xFF);
		return 4;
	}

	dst[0] = dst[1] = (char) 0xFF;
	return 2;
}</data>
      <data key="d7">183.0</data>
      <data key="d8">204.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">22.0</data>
      <data key="d12">5</data>
      <data key="d13">3</data>
      <data key="d14">6</data>
      <data key="d15">3</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">size_t</data>
    </node>
    <node id="34135">
      <data key="d0">34135</data>
      <data key="d1">set_stream_state</data>
      <data key="d2">1</data>
      <data key="d3">logstream_base.set_stream_state</data>
      <data key="d4">bool logstream_base.set_stream_state (ANY,int)</data>
      <data key="d5">main\cpp\logstream.cpp</data>
      <data key="d6">bool logstream_base::set_stream_state(std::ios_base&amp; dest, int&amp; dstchar)
{
	std::ios_base::fmtflags setval = initset.flags();
	std::ios_base::fmtflags clrval = initclear.flags();
	std::ios_base::fmtflags mask = setval ^ (~clrval);
	dest.setf(clrval, mask);

	if (initset.precision() == initclear.precision())
	{
		dest.precision(initset.precision());
	}

	if (initset.width() == initclear.width())
	{
		dest.width(initset.width());
	}

	dstchar = fillchar;
	return fillset;
}</data>
      <data key="d7">72.0</data>
      <data key="d8">91.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">20.0</data>
      <data key="d12">19</data>
      <data key="d13">5</data>
      <data key="d14">21</data>
      <data key="d15">9</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">3</data>
      <data key="d19">3</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">bool</data>
    </node>
    <node id="38238">
      <data key="d0">38238</data>
      <data key="d1">charCount</data>
      <data key="d2">3</data>
      <data key="d3">LOG4CXX_NS.pattern.PatternAbbreviatorFragment.charCount</data>
      <data key="d4" />
      <data key="d5">main\cpp\nameabbreviator.cpp</data>
      <data key="d6">charCount</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">5</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="38239">
      <data key="d0">38239</data>
      <data key="d1">ellipsis</data>
      <data key="d2">3</data>
      <data key="d3">LOG4CXX_NS.pattern.PatternAbbreviatorFragment.ellipsis</data>
      <data key="d4" />
      <data key="d5">main\cpp\nameabbreviator.cpp</data>
      <data key="d6">ellipsis</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">4</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="21862">
      <data key="d0">21862</data>
      <data key="d1">rollover</data>
      <data key="d2">1</data>
      <data key="d3">FixedWindowRollingPolicy.rollover</data>
      <data key="d4">RolloverDescriptionPtr FixedWindowRollingPolicy.rollover (LogString,bool,Pool)</data>
      <data key="d5">main\cpp\fixedwindowrollingpolicy.cpp</data>
      <data key="d6">RolloverDescriptionPtr FixedWindowRollingPolicy::rollover(
	const   LogString&amp;  currentActiveFile,
	const   bool        append,
	Pool&amp;       pool)
{
	RolloverDescriptionPtr desc;

	if (priv-&gt;maxIndex &lt; 0)
	{
		return desc;
	}

	int purgeStart = priv-&gt;minIndex;

	if (!priv-&gt;explicitActiveFile)
	{
		purgeStart++;
	}

	if (!purge(purgeStart, priv-&gt;maxIndex, pool))
	{
		return desc;
	}

	LogString buf;
	ObjectPtr obj = std::make_shared&lt;Integer&gt;(purgeStart);
	formatFileName(obj, buf, pool);

	LogString renameTo(buf);
	LogString compressedName(renameTo);
	ActionPtr compressAction ;

	if(getCreateIntermediateDirectories()){
		File compressedFile(compressedName);
		File compressedParent (compressedFile.getParent(pool));
		compressedParent.mkdirs(pool);
	}

	if (StringHelper::endsWith(renameTo, LOG4CXX_STR(".gz")))
	{
		renameTo.resize(renameTo.size() - 3);
		GZCompressActionPtr comp = std::make_shared&lt;GZCompressAction&gt;(
					File().setPath(renameTo),
					File().setPath(compressedName),
			...</data>
      <data key="d7">160.0</data>
      <data key="d8">229.0</data>
      <data key="d9">1.0</data>
      <data key="d10">5.0</data>
      <data key="d11">70.0</data>
      <data key="d12">54</data>
      <data key="d13">11</data>
      <data key="d14">50</data>
      <data key="d15">21</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">6</data>
      <data key="d19">6</data>
      <data key="d20">1</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">6</data>
      <data key="d26">3</data>
      <data key="d27">3</data>
      <data key="d28">RolloverDescriptionPtr</data>
    </node>
    <node id="30055">
      <data key="d0">30055</data>
      <data key="d1">clear</data>
      <data key="d2">1</data>
      <data key="d3">LocationInfo.clear</data>
      <data key="d4">void LocationInfo.clear ()</data>
      <data key="d5">main\cpp\locationinfo.cpp</data>
      <data key="d6">void LocationInfo::clear()
{
	fileName = NA;
	methodName = NA_METHOD;
	lineNumber = -1;
}</data>
      <data key="d7">92.0</data>
      <data key="d8">97.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">6.0</data>
      <data key="d12">4</data>
      <data key="d13">2</data>
      <data key="d14">5</data>
      <data key="d15">5</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">2</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">void</data>
    </node>
    <node id="58732">
      <data key="d0">58732</data>
      <data key="d1">getInstance</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.helpers.TimeZoneImpl.LocalTimeZone.getInstance</data>
      <data key="d4">TimeZonePtr LOG4CXX_NS.helpers.TimeZoneImpl.LocalTimeZone.getInstance ()</data>
      <data key="d5">main\cpp\timezone.cpp</data>
      <data key="d6">static const TimeZonePtr&amp; getInstance()
		{
			static WideLife&lt;TimeZonePtr&gt; tz = std::make_shared&lt;LocalTimeZone&gt;();
			return tz;
		}</data>
      <data key="d7">86.0</data>
      <data key="d8">90.0</data>
      <data key="d9">3.0</data>
      <data key="d10">3.0</data>
      <data key="d11">5.0</data>
      <data key="d12">2</data>
      <data key="d13">2</data>
      <data key="d14">3</data>
      <data key="d15">2</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">TimeZonePtr</data>
    </node>
    <node id="11629">
      <data key="d0">11629</data>
      <data key="d1">targetWarn</data>
      <data key="d2">1</data>
      <data key="d3">ConsoleAppender.targetWarn</data>
      <data key="d4">void ConsoleAppender.targetWarn (LogString)</data>
      <data key="d5">main\cpp\consoleappender.cpp</data>
      <data key="d6">void ConsoleAppender::targetWarn(const LogString&amp; val)
{
	LogLog::warn(((LogString) LOG4CXX_STR("["))
		+ val +  LOG4CXX_STR("] should be system.out or system.err."));
	LogLog::warn(LOG4CXX_STR("Using previously set target, System.out by default."));
}</data>
      <data key="d7">108.0</data>
      <data key="d8">113.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">6.0</data>
      <data key="d12">5</data>
      <data key="d13">3</data>
      <data key="d14">3</data>
      <data key="d15">2</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">2</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="38255">
      <data key="d0">38255</data>
      <data key="d1">operator =</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.pattern.PatternAbbreviatorFragment.operator =</data>
      <data key="d4">PatternAbbreviatorFragment LOG4CXX_NS.pattern.PatternAbbreviatorFragment.operator = (PatternAbbreviatorFragment)</data>
      <data key="d5">main\cpp\nameabbreviator.cpp</data>
      <data key="d6">PatternAbbreviatorFragment&amp; operator=(const PatternAbbreviatorFragment&amp; src)
		{
			charCount = src.charCount;
			ellipsis = src.ellipsis;
			return *this;
		}</data>
      <data key="d7">158.0</data>
      <data key="d8">163.0</data>
      <data key="d9">3.0</data>
      <data key="d10">3.0</data>
      <data key="d11">6.0</data>
      <data key="d12">5</data>
      <data key="d13">3</data>
      <data key="d14">4</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">4</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">4</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">PatternAbbreviatorFragment</data>
    </node>
    <node id="26992">
      <data key="d0">26992</data>
      <data key="d1">format</data>
      <data key="d2">1</data>
      <data key="d3">IntegerPatternConverter.format</data>
      <data key="d4">void IntegerPatternConverter.format (ObjectPtr,LogString,Pool)</data>
      <data key="d5">main\cpp\integerpatternconverter.cpp</data>
      <data key="d6">void IntegerPatternConverter::format(
	const ObjectPtr&amp; obj,
	LogString&amp; toAppendTo,
	Pool&amp; p) const
{
	IntegerPtr i = LOG4CXX_NS::cast&lt;Integer&gt;(obj);

	if (i != NULL)
	{
		StringHelper::toString(i-&gt;intValue(), p, toAppendTo);
	}
}</data>
      <data key="d7">42.0</data>
      <data key="d8">53.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">12.0</data>
      <data key="d12">7</data>
      <data key="d13">6</data>
      <data key="d14">10</data>
      <data key="d15">8</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">6</data>
      <data key="d26">3</data>
      <data key="d27">3</data>
      <data key="d28">void</data>
    </node>
    <node id="7535">
      <data key="d0">7535</data>
      <data key="d1">digits</data>
      <data key="d2">2</data>
      <data key="d3">main\cpp\cacheddateformat.cpp.digits</data>
      <data key="d4" />
      <data key="d5">main\cpp\cacheddateformat.cpp</data>
      <data key="d6">ANY digits</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">3</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="40308">
      <data key="d0">40308</data>
      <data key="d1">error</data>
      <data key="d2">1</data>
      <data key="d3">OnlyOnceErrorHandler.error</data>
      <data key="d4">void OnlyOnceErrorHandler.error (LogString,ANY,int)</data>
      <data key="d5">main\cpp\onlyonceerrorhandler.cpp</data>
      <data key="d6">void OnlyOnceErrorHandler::error(const LogString&amp; message) const
{
	if (m_priv-&gt;firstTime)
	{
		LogLog::error(message);
		m_priv-&gt;firstTime = false;
	}
}</data>
      <data key="d7">76.0</data>
      <data key="d8">83.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">8.0</data>
      <data key="d12">4</data>
      <data key="d13">3</data>
      <data key="d14">5</data>
      <data key="d15">4</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="66932">
      <data key="d0">66932</data>
      <data key="d1">GENERIC_FAILURE</data>
      <data key="d2">3</data>
      <data key="d3">LOG4CXX_NS.spi.ErrorCode.anonymous_enum_0.GENERIC_FAILURE</data>
      <data key="d4" />
      <data key="d5">main\include\log4cxx\spi\errorhandler.hpp</data>
      <data key="d6">GENERIC_FAILURE = 0</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="66936">
      <data key="d0">66936</data>
      <data key="d1">FILE_OPEN_FAILURE</data>
      <data key="d2">3</data>
      <data key="d3">LOG4CXX_NS.spi.ErrorCode.anonymous_enum_0.FILE_OPEN_FAILURE</data>
      <data key="d4" />
      <data key="d5">main\include\log4cxx\spi\errorhandler.hpp</data>
      <data key="d6">FILE_OPEN_FAILURE = 4</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="7550">
      <data key="d0">7550</data>
      <data key="d1">magic1</data>
      <data key="d2">2</data>
      <data key="d3">main\cpp\cacheddateformat.cpp.magic1</data>
      <data key="d4" />
      <data key="d5">main\cpp\cacheddateformat.cpp</data>
      <data key="d6">const int magic1</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">2</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="3456">
      <data key="d0">3456</data>
      <data key="d1">setErrorHandler</data>
      <data key="d2">1</data>
      <data key="d3">AppenderSkeleton.setErrorHandler</data>
      <data key="d4">void AppenderSkeleton.setErrorHandler (ANY)</data>
      <data key="d5">main\cpp\appenderskeleton.cpp</data>
      <data key="d6">void AppenderSkeleton::setErrorHandler(const spi::ErrorHandlerPtr errorHandler1)
{
	std::lock_guard&lt;std::recursive_mutex&gt; lock(m_priv-&gt;mutex);

	if (errorHandler1 == nullptr)
	{
		// We do not throw exception here since the cause is probably a
		// bad config file.
		LogLog::warn(LOG4CXX_STR("You have tried to set a null error-handler."));
	}
	else
	{
		m_priv-&gt;errorHandler = errorHandler1;
	}
}</data>
      <data key="d7">134.0</data>
      <data key="d8">148.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">15.0</data>
      <data key="d12">7</data>
      <data key="d13">5</data>
      <data key="d14">5</data>
      <data key="d15">4</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="38273">
      <data key="d0">38273</data>
      <data key="d1">abbreviate</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.pattern.PatternAbbreviatorFragment.abbreviate</data>
      <data key="d4">size_type LOG4CXX_NS.pattern.PatternAbbreviatorFragment.abbreviate (LogString,ANY)</data>
      <data key="d5">main\cpp\nameabbreviator.cpp</data>
      <data key="d6">LogString::size_type abbreviate(LogString&amp; buf, LogString::size_type startPos) const
		{
			LogString::size_type nextDot = buf.find(0x2E /* '.' */, startPos);

			if (nextDot != LogString::npos)
			{
				if ((nextDot - startPos) &gt; charCount)
				{
					buf.erase(buf.begin() + (startPos + charCount), buf.begin() + nextDot);
					nextDot = startPos + charCount;

					if (ellipsis != 0x00)
					{
						buf.insert(nextDot, 1, ellipsis);
						nextDot++;
					}
				}

				nextDot++;
			}

			return nextDot;
		}</data>
      <data key="d7">171.0</data>
      <data key="d8">193.0</data>
      <data key="d9">3.0</data>
      <data key="d10">3.0</data>
      <data key="d11">23.0</data>
      <data key="d12">18</data>
      <data key="d13">7</data>
      <data key="d14">24</data>
      <data key="d15">6</data>
      <data key="d16">0</data>
      <data key="d17">5</data>
      <data key="d18">4</data>
      <data key="d19">7</data>
      <data key="d20">2</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">5</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">size_type</data>
    </node>
    <node id="7554">
      <data key="d0">7554</data>
      <data key="d1">magicString1</data>
      <data key="d2">2</data>
      <data key="d3">main\cpp\cacheddateformat.cpp.magicString1</data>
      <data key="d4" />
      <data key="d5">main\cpp\cacheddateformat.cpp</data>
      <data key="d6">ANY magicString1</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="61829">
      <data key="d0">61829</data>
      <data key="d1">setOption</data>
      <data key="d2">1</data>
      <data key="d3">WriterAppender.setOption</data>
      <data key="d4">void WriterAppender.setOption (LogString,LogString)</data>
      <data key="d5">main\cpp\writerappender.cpp</data>
      <data key="d6">void WriterAppender::setOption(const LogString&amp; option, const LogString&amp; value)
{
	if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("ENCODING"), LOG4CXX_STR("encoding")))
	{
		setEncoding(value);
	}
	else
	{
		AppenderSkeleton::setOption(option, value);
	}
}</data>
      <data key="d7">307.0</data>
      <data key="d8">317.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">11.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">3</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">1</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="11653">
      <data key="d0">11653</data>
      <data key="d1">activateOptions</data>
      <data key="d2">1</data>
      <data key="d3">ConsoleAppender.activateOptions</data>
      <data key="d4">void ConsoleAppender.activateOptions (Pool)</data>
      <data key="d5">main\cpp\consoleappender.cpp</data>
      <data key="d6">void ConsoleAppender::activateOptions(Pool&amp; p)
{
	if (StringHelper::equalsIgnoreCase(_priv-&gt;target,
			LOG4CXX_STR("SYSTEM.OUT"), LOG4CXX_STR("system.out")))
	{
		WriterPtr writer1 = std::make_shared&lt;SystemOutWriter&gt;();
		setWriter(writer1);
	}
	else if (StringHelper::equalsIgnoreCase(_priv-&gt;target,
			LOG4CXX_STR("SYSTEM.ERR"), LOG4CXX_STR("system.err")))
	{
		WriterPtr writer1 = std::make_shared&lt;SystemErrWriter&gt;();
		setWriter(writer1);
	}

	WriterAppender::activateOptions(p);
}</data>
      <data key="d7">115.0</data>
      <data key="d8">131.0</data>
      <data key="d9">1.0</data>
      <data key="d10">36.0</data>
      <data key="d11">17.0</data>
      <data key="d12">7</data>
      <data key="d13">4</data>
      <data key="d14">7</data>
      <data key="d15">6</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">1</data>
      <data key="d21">2</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="28041">
      <data key="d0">28041</data>
      <data key="d1">appendSerializedLocationInfo</data>
      <data key="d2">1</data>
      <data key="d3">JSONLayout.appendSerializedLocationInfo</data>
      <data key="d4">void JSONLayout.appendSerializedLocationInfo (LogString,LoggingEventPtr,Pool)</data>
      <data key="d5">main\cpp\jsonlayout.cpp</data>
      <data key="d6">void JSONLayout::appendSerializedLocationInfo(LogString&amp; buf,
	const LoggingEventPtr&amp; event, Pool&amp; p) const
{
	if (m_priv-&gt;prettyPrint)
	{
		buf.append(m_priv-&gt;ppIndentL1);
	}

	appendQuotedEscapedString(buf, LOG4CXX_STR("location_info"));
	buf.append(LOG4CXX_STR(": {"));
	buf.append(m_priv-&gt;prettyPrint ? LOG4CXX_EOL : LOG4CXX_STR(" "));
	const LocationInfo&amp; locInfo = event-&gt;getLocationInformation();

	if (m_priv-&gt;prettyPrint)
	{
		buf.append(m_priv-&gt;ppIndentL2);
	}

	appendQuotedEscapedString(buf, LOG4CXX_STR("file"));
	buf.append(LOG4CXX_STR(": "));
	LOG4CXX_DECODE_CHAR(fileName, locInfo.getFileName());
	appendQuotedEscapedString(buf, fileName);
	buf.append(LOG4CXX_STR(","));
	buf.append(m_priv-&gt;prettyPrint ? LOG4CXX_EOL : LOG4CXX_STR(" "));

	if (m_priv-&gt;prettyPrint)
	{
		buf.append(m_priv-&gt;ppIndentL2);
	}

	appendQuotedEscapedString(buf, LOG4CXX_STR("line"));
	buf.append(LOG4CXX_STR(": "));
	LogString lineNumber;
	StringHelper::toString(locInfo.getLineNumber(), p, lineNumber);
	...</data>
      <data key="d7">407.0</data>
      <data key="d8">474.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">68.0</data>
      <data key="d12">49</data>
      <data key="d13">4</data>
      <data key="d14">67</data>
      <data key="d15">11</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">7</data>
      <data key="d19">7</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">6</data>
      <data key="d26">3</data>
      <data key="d27">3</data>
      <data key="d28">void</data>
    </node>
    <node id="7562">
      <data key="d0">7562</data>
      <data key="d1">magic2</data>
      <data key="d2">2</data>
      <data key="d3">main\cpp\cacheddateformat.cpp.magic2</data>
      <data key="d4" />
      <data key="d5">main\cpp\cacheddateformat.cpp</data>
      <data key="d6">const int magic2</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="35213">
      <data key="d0">35213</data>
      <data key="d1">MDC</data>
      <data key="d2">1</data>
      <data key="d3">MDC.MDC</data>
      <data key="d4">ANY MDC.MDC (ANY,ANY)</data>
      <data key="d5">main\cpp\mdc.cpp</data>
      <data key="d6">MDC::MDC(const std::string&amp; key1, const std::string&amp; value) : key()
{
	Transcoder::decode(key1, key);
	LOG4CXX_DECODE_CHAR(v, value);
	putLS(key, v);
}</data>
      <data key="d7">30.0</data>
      <data key="d8">35.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">6.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">7</data>
      <data key="d15">5</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">ANY</data>
    </node>
    <node id="7566">
      <data key="d0">7566</data>
      <data key="d1">magicString2</data>
      <data key="d2">2</data>
      <data key="d3">main\cpp\cacheddateformat.cpp.magicString2</data>
      <data key="d4" />
      <data key="d5">main\cpp\cacheddateformat.cpp</data>
      <data key="d6">ANY magicString2</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="9618">
      <data key="d0">9618</data>
      <data key="d1">state</data>
      <data key="d2">3</data>
      <data key="d3">LOG4CXX_NS.helpers.LocaleCharsetEncoder.state</data>
      <data key="d4" />
      <data key="d5">main\cpp\charsetencoder.cpp</data>
      <data key="d6">state</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">2</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="64921">
      <data key="d0">64921</data>
      <data key="d1">AddStartingNewline</data>
      <data key="d2">3</data>
      <data key="d3">LOG4CXX_NS.HexdumpFlags.AddStartingNewline</data>
      <data key="d4" />
      <data key="d5">main\include\log4cxx\hexdump.hpp</data>
      <data key="d6">AddStartingNewline = (0x01 &lt;&lt; 0)</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="64922">
      <data key="d0">64922</data>
      <data key="d1">AddEndingNewline</data>
      <data key="d2">3</data>
      <data key="d3">LOG4CXX_NS.HexdumpFlags.AddEndingNewline</data>
      <data key="d4" />
      <data key="d5">main\include\log4cxx\hexdump.hpp</data>
      <data key="d6">AddEndingNewline = (0x01 &lt;&lt; 1)</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="9627">
      <data key="d0">9627</data>
      <data key="d1">getDefaultEncoder</data>
      <data key="d2">1</data>
      <data key="d3">CharsetEncoder.getDefaultEncoder</data>
      <data key="d4">CharsetEncoderPtr CharsetEncoder.getDefaultEncoder ()</data>
      <data key="d5">main\cpp\charsetencoder.cpp</data>
      <data key="d6">CharsetEncoderPtr CharsetEncoder::getDefaultEncoder()
{
	static WideLife&lt;CharsetEncoderPtr&gt; encoder(createDefaultEncoder());

	//
	//  if invoked after static variable destruction
	//     (if logging is called in the destructor of a static object)
	//     then create a new decoder.
	//
	if (encoder.value() == 0)
	{
		return CharsetEncoderPtr( createDefaultEncoder() );
	}

	return encoder;
}</data>
      <data key="d7">514.0</data>
      <data key="d8">529.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">16.0</data>
      <data key="d12">2</data>
      <data key="d13">2</data>
      <data key="d14">2</data>
      <data key="d15">1</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">CharsetEncoderPtr</data>
    </node>
    <node id="8604">
      <data key="d0">8604</data>
      <data key="d1">decode</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.helpers.LocaleCharsetDecoder.decode</data>
      <data key="d4">log4cxx_status_t LOG4CXX_NS.helpers.LocaleCharsetDecoder.decode (ByteBuffer,LogString)</data>
      <data key="d5">main\cpp\charsetdecoder.cpp</data>
      <data key="d6">log4cxx_status_t decode(ByteBuffer&amp; in, LogString&amp; out) override
		{
			log4cxx_status_t result = APR_SUCCESS;
			const char* p = in.current();
			size_t i = in.position();
			size_t remain = in.limit() - i;
#if !LOG4CXX_CHARSET_EBCDIC
			if (std::mbsinit(&amp;this-&gt;state)) // ByteBuffer not partially decoded?
			{
				// Copy single byte characters
				for (; 0 &lt; remain &amp;&amp; ((unsigned int) *p) &lt; 0x80; --remain, ++i, p++)
				{
					out.append(1, *p);
				}
			}
#endif
			// Decode characters that may be represented by multiple bytes
			while (0 &lt; remain)
			{
				wchar_t ch = 0;
				size_t n = std::mbrtowc(&amp;ch, p, remain, &amp;this-&gt;state);
				if (0 == n) // NULL encountered?
				{
					++i;
					break;
				}
				if (static_cast&lt;std::size_t&gt;(-1) == n) // decoding error?
				{
					result = APR_BADARG;
					break;
				}
				if (static_cast&lt;std::size_t&gt;(-2) == n) // incomplete sequence?
				{
					break;
				}
				Transcoder::encode(static_cast&lt;unsigned int&gt;(ch), out);
				remain -= n;
				i...</data>
      <data key="d7">434.0</data>
      <data key="d8">476.0</data>
      <data key="d9">3.0</data>
      <data key="d10">3.0</data>
      <data key="d11">43.0</data>
      <data key="d12">40</data>
      <data key="d13">14</data>
      <data key="d14">39</data>
      <data key="d15">12</data>
      <data key="d16">0</data>
      <data key="d17">3</data>
      <data key="d18">10</data>
      <data key="d19">11</data>
      <data key="d20">1</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">2</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">log4cxx_status_t</data>
    </node>
    <node id="52636">
      <data key="d0">52636</data>
      <data key="d1">setOption</data>
      <data key="d2">1</data>
      <data key="d3">SocketAppenderSkeleton.setOption</data>
      <data key="d4">void SocketAppenderSkeleton.setOption (LogString,LogString)</data>
      <data key="d5">main\cpp\socketappenderskeleton.cpp</data>
      <data key="d6">void SocketAppenderSkeleton::setOption(const LogString&amp; option, const LogString&amp; value)
{
	if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("REMOTEHOST"), LOG4CXX_STR("remotehost")))
	{
		setRemoteHost(value);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("PORT"), LOG4CXX_STR("port")))
	{
		setPort(OptionConverter::toInt(value, getDefaultPort()));
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("LOCATIONINFO"), LOG4CXX_STR("locationinfo")))
	{
		setLocationInfo(OptionConverter::toBoolean(value, false));
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("RECONNECTIONDELAY"), LOG4CXX_STR("reconnectiondelay")))
	{
		setReconnectionDelay(OptionConverter::toInt(value, getDefaultDelay()));
	}
	else
	{
		AppenderSkeleton::setOption(option, value);
	}
}</data>
      <data key="d7">126.0</data>
      <data key="d8">148.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">23.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">3</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">1</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="45478">
      <data key="d0">45478</data>
      <data key="d1">configureLoggerFactory</data>
      <data key="d2">1</data>
      <data key="d3">PropertyConfigurator.configureLoggerFactory</data>
      <data key="d4">void PropertyConfigurator.configureLoggerFactory (ANY)</data>
      <data key="d5">main\cpp\propertyconfigurator.cpp</data>
      <data key="d6">void PropertyConfigurator::configureLoggerFactory(helpers::Properties&amp; props)
{
	static const WideLife&lt;LogString&gt; LOGGER_FACTORY_KEY(LOG4CXX_STR("log4j.loggerFactory"));

	LogString factoryClassName =
		OptionConverter::findAndSubst(LOGGER_FACTORY_KEY, props);

	if (!factoryClassName.empty())
	{
		LogString msg(LOG4CXX_STR("Setting logger factory to ["));
		msg += factoryClassName;
		msg += LOG4CXX_STR("].");
		LogLog::debug(msg);
		std::shared_ptr&lt;Object&gt; instance = std::shared_ptr&lt;Object&gt;(
				Loader::loadClass(factoryClassName).newInstance() );

		loggerFactory = LOG4CXX_NS::cast&lt;LoggerFactory&gt;( instance );
		static const WideLife&lt;LogString&gt; FACTORY_PREFIX(LOG4CXX_STR("log4j.factory."));
		Pool p;
		PropertySetter::setProperties(loggerFactory, props, FACTORY_PREFIX, p);
	}
}</data>
      <data key="d7">216.0</data>
      <data key="d8">237.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">22.0</data>
      <data key="d12">21</data>
      <data key="d13">6</data>
      <data key="d14">26</data>
      <data key="d15">16</data>
      <data key="d16">0</data>
      <data key="d17">4</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">4</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">2</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="35239">
      <data key="d0">35239</data>
      <data key="d1">putLS</data>
      <data key="d2">1</data>
      <data key="d3">MDC.putLS</data>
      <data key="d4">void MDC.putLS (LogString,LogString)</data>
      <data key="d5">main\cpp\mdc.cpp</data>
      <data key="d6">void MDC::putLS(const LogString&amp; key, const LogString&amp; value)
{
	ThreadSpecificData::put(key, value);
}</data>
      <data key="d7">43.0</data>
      <data key="d8">46.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">4.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">3</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="20904">
      <data key="d0">20904</data>
      <data key="d1">stop</data>
      <data key="d2">1</data>
      <data key="d3">FileWatchdog.stop</data>
      <data key="d4">void FileWatchdog.stop ()</data>
      <data key="d5">main\cpp\filewatchdog.cpp</data>
      <data key="d6">void FileWatchdog::stop()
{
	LogLog::debug(LOG4CXX_STR("Stopping file watchdog"));
	m_priv-&gt;interrupted = 0xFFFF;

	{
		std::unique_lock&lt;std::mutex&gt; lock(m_priv-&gt;interrupt_mutex);
		m_priv-&gt;interrupt.notify_all();
	}
	m_priv-&gt;thread.join();
}</data>
      <data key="d7">73.0</data>
      <data key="d8">83.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">11.0</data>
      <data key="d12">12</data>
      <data key="d13">5</data>
      <data key="d14">7</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">void</data>
    </node>
    <node id="15783">
      <data key="d0">15783</data>
      <data key="d1">parseLoggerFactory</data>
      <data key="d2">1</data>
      <data key="d3">DOMConfigurator.parseLoggerFactory</data>
      <data key="d4">void DOMConfigurator.parseLoggerFactory (ANY,ANY,apr_xml_elem*)</data>
      <data key="d5">main\cpp\domconfigurator.cpp</data>
      <data key="d6">void DOMConfigurator::parseLoggerFactory(
	LOG4CXX_NS::helpers::Pool&amp; p,
	LOG4CXX_NS::helpers::CharsetDecoderPtr&amp; utf8Decoder,
	apr_xml_elem* factoryElement)
{
	LogString className(subst(getAttribute(utf8Decoder, factoryElement, CLASS_ATTR)));

	if (className.empty())
	{
		LogLog::error(LOG4CXX_STR("Logger Factory tag class attribute not found."));
		LogLog::debug(LOG4CXX_STR("No Logger Factory configured."));
	}
	else
	{
		LogLog::debug(LOG4CXX_STR("Desired logger factory: [") + className + LOG4CXX_STR("]"));
		std::shared_ptr&lt;Object&gt; obj = OptionConverter::instantiateByClassName(
				className,
				LoggerFactory::getStaticClass(),
				0);
		m_priv-&gt;loggerFactory = LOG4CXX_NS::cast&lt;LoggerFactory&gt;(obj);
		PropertySetter propSetter(m_priv-&gt;loggerFactory);

		for (apr_xml_elem* currentElement = factoryElement-&gt;first_child;
			currentElement;
			currentElement = currentElement-&gt;next)
		{
			std::string tagName(currentElement-&gt;name);

			if (tagName == PARAM_TAG)
			{
				setParameter(p...</data>
      <data key="d7">451.0</data>
      <data key="d8">485.0</data>
      <data key="d9">1.0</data>
      <data key="d10">69.0</data>
      <data key="d11">35.0</data>
      <data key="d12">3</data>
      <data key="d13">1</data>
      <data key="d14">5</data>
      <data key="d15">4</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">2</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">6</data>
      <data key="d26">3</data>
      <data key="d27">3</data>
      <data key="d28">void</data>
    </node>
    <node id="62891">
      <data key="d0">62891</data>
      <data key="d1">execute</data>
      <data key="d2">1</data>
      <data key="d3">ZipCompressAction.execute</data>
      <data key="d4">bool ZipCompressAction.execute (ANY)</data>
      <data key="d5">main\cpp\zipcompressaction.cpp</data>
      <data key="d6">bool ZipCompressAction::execute(LOG4CXX_NS::helpers::Pool&amp; p) const
{
	if (!priv-&gt;source.exists(p))
	{
		return false;
	}

	apr_pool_t* aprpool = p.getAPRPool();
	apr_procattr_t* attr;
	apr_status_t stat = apr_procattr_create(&amp;attr, aprpool);

	if (stat != APR_SUCCESS)
	{
		throw IOException(stat);
	}

	stat = apr_procattr_io_set(attr, APR_NO_PIPE, APR_NO_PIPE, APR_FULL_BLOCK);

	if (stat != APR_SUCCESS)
	{
		throw IOException(stat);
	}

	stat = apr_procattr_cmdtype_set(attr, APR_PROGRAM_PATH);

	if (stat != APR_SUCCESS)
	{
		throw IOException(stat);
	}

	//
	// redirect the child's error stream to this processes' error stream
	//
	apr_file_t* child_err;
	stat = apr_file_open_stderr(&amp;child_err, aprpool);

	if (stat == APR_SUCCESS)
	{
		stat =  apr_procattr_child_err_set(attr, child_err, NULL);

		if (stat != APR_SUCCESS)
		{
			throw IOException(stat);
		}
	}

	const char** args = (const char**)
		apr_palloc(aprpool, 5 * sizeof(*args));
	int i = 0;

	args[i++] = "zip";
	args[i++] = ...</data>
      <data key="d7">55.0</data>
      <data key="d8">150.0</data>
      <data key="d9">1.0</data>
      <data key="d10">6.0</data>
      <data key="d11">96.0</data>
      <data key="d12">81</data>
      <data key="d13">15</data>
      <data key="d14">81</data>
      <data key="d15">17</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">11</data>
      <data key="d19">12</data>
      <data key="d20">0</data>
      <data key="d21">2</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">bool</data>
    </node>
    <node id="10669">
      <data key="d0">10669</data>
      <data key="d1">graphicsModeToANSISequence</data>
      <data key="d2">1</data>
      <data key="d3">graphicsModeToANSISequence</data>
      <data key="d4">LogString graphicsModeToANSISequence (LogString,Pool)</data>
      <data key="d5">main\cpp\colorstartpatternconverter.cpp</data>
      <data key="d6">static LogString graphicsModeToANSISequence(const LogString&amp; graphicsMode, Pool&amp; pool){
	int numberToConvert = 0;

	if(StringHelper::equalsIgnoreCase(graphicsMode, LOG4CXX_STR("BOLD"), LOG4CXX_STR("bold"))){
		numberToConvert = 1;
	}else if(StringHelper::equalsIgnoreCase(graphicsMode, LOG4CXX_STR("DIM"), LOG4CXX_STR("dim"))){
		numberToConvert = 2;
	}else if(StringHelper::equalsIgnoreCase(graphicsMode, LOG4CXX_STR("ITALIC"), LOG4CXX_STR("italic"))){
		numberToConvert = 3;
	}else if(StringHelper::equalsIgnoreCase(graphicsMode, LOG4CXX_STR("UNDERLINE"), LOG4CXX_STR("underline"))){
		numberToConvert = 4;
	}else if(StringHelper::equalsIgnoreCase(graphicsMode, LOG4CXX_STR("BLINKING"), LOG4CXX_STR("blinking"))){
		numberToConvert = 5;
	}else if(StringHelper::equalsIgnoreCase(graphicsMode, LOG4CXX_STR("INVERSE"), LOG4CXX_STR("inverse"))){
		numberToConvert = 7;
	}else if(StringHelper::equalsIgnoreCase(graphicsMode, LOG4CXX_STR("STRIKETHROUGH"), LOG4CXX_STR("strikethrough"))){
		numberToCon...</data>
      <data key="d7">66.0</data>
      <data key="d8">91.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">26.0</data>
      <data key="d12">5</data>
      <data key="d13">3</data>
      <data key="d14">10</data>
      <data key="d15">5</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">3</data>
      <data key="d19">3</data>
      <data key="d20">1</data>
      <data key="d21">2</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">LogString</data>
    </node>
    <node id="9654">
      <data key="d0">9654</data>
      <data key="d1">getUTF8Encoder</data>
      <data key="d2">1</data>
      <data key="d3">CharsetEncoder.getUTF8Encoder</data>
      <data key="d4">CharsetEncoderPtr CharsetEncoder.getUTF8Encoder ()</data>
      <data key="d5">main\cpp\charsetencoder.cpp</data>
      <data key="d6">CharsetEncoderPtr CharsetEncoder::getUTF8Encoder()
{
	return std::make_shared&lt;UTF8CharsetEncoder&gt;();
}</data>
      <data key="d7">547.0</data>
      <data key="d8">550.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">4.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">1</data>
      <data key="d15">1</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">CharsetEncoderPtr</data>
    </node>
    <node id="3513">
      <data key="d0">3513</data>
      <data key="d1">setOption</data>
      <data key="d2">1</data>
      <data key="d3">AppenderSkeleton.setOption</data>
      <data key="d4">void AppenderSkeleton.setOption (LogString,LogString)</data>
      <data key="d5">main\cpp\appenderskeleton.cpp</data>
      <data key="d6">void AppenderSkeleton::setOption(const LogString&amp; option,
	const LogString&amp; value)
{
	if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR("THRESHOLD"), LOG4CXX_STR("threshold")))
	{
		setThreshold(Level::toLevelLS(value));
	}
}</data>
      <data key="d7">156.0</data>
      <data key="d8">164.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">9.0</data>
      <data key="d12">2</data>
      <data key="d13">1</data>
      <data key="d14">4</data>
      <data key="d15">4</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">1</data>
      <data key="d21">2</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="55738">
      <data key="d0">55738</data>
      <data key="d1">SyslogWriter</data>
      <data key="d2">1</data>
      <data key="d3">SyslogWriter.SyslogWriter</data>
      <data key="d4">ANY SyslogWriter.SyslogWriter (LogString,int)</data>
      <data key="d5">main\cpp\syslogwriter.cpp</data>
      <data key="d6">SyslogWriter::SyslogWriter(const LogString&amp; syslogHost1, int syslogHostPort1)
	: m_priv(std::make_unique&lt;SyslogWriterPrivate&gt;(syslogHost1, syslogHostPort1))
{
	try
	{
		m_priv-&gt;address = InetAddress::getByName(syslogHost1);
	}
	catch (UnknownHostException&amp; e)
	{
		LogLog::error(((LogString) LOG4CXX_STR("Could not find ")) + syslogHost1 +
			LOG4CXX_STR(". All logging will FAIL."), e);
	}

	try
	{
		m_priv-&gt;ds = DatagramSocket::create();
	}
	catch (SocketException&amp; e)
	{
		LogLog::error(((LogString) LOG4CXX_STR("Could not instantiate DatagramSocket to ")) + syslogHost1 +
			LOG4CXX_STR(". All logging will FAIL."), e);
	}
}</data>
      <data key="d7">39.0</data>
      <data key="d8">61.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">23.0</data>
      <data key="d12">14</data>
      <data key="d13">5</data>
      <data key="d14">11</data>
      <data key="d15">6</data>
      <data key="d16">0</data>
      <data key="d17">4</data>
      <data key="d18">3</data>
      <data key="d19">3</data>
      <data key="d20">0</data>
      <data key="d21">4</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">2</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">ANY</data>
    </node>
    <node id="53691">
      <data key="d0">53691</data>
      <data key="d1">toLowerCase</data>
      <data key="d2">1</data>
      <data key="d3">StringHelper.toLowerCase</data>
      <data key="d4">LogString StringHelper.toLowerCase (LogString)</data>
      <data key="d5">main\cpp\stringhelper.cpp</data>
      <data key="d6">LogString StringHelper::toLowerCase(const LogString&amp; s)
{
	LogString d;
	std::transform(s.begin(), s.end(),
		std::insert_iterator&lt;LogString&gt;(d, d.begin()), tolower);
	return d;
}</data>
      <data key="d7">67.0</data>
      <data key="d8">73.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">7.0</data>
      <data key="d12">9</data>
      <data key="d13">5</data>
      <data key="d14">9</data>
      <data key="d15">5</data>
      <data key="d16">4</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">LogString</data>
    </node>
    <node id="7610">
      <data key="d0">7610</data>
      <data key="d1">findMillisecondStart</data>
      <data key="d2">1</data>
      <data key="d3">CachedDateFormat.findMillisecondStart</data>
      <data key="d4">int CachedDateFormat.findMillisecondStart (log4cxx_time_t,LogString,DateFormatPtr,Pool)</data>
      <data key="d5">main\cpp\cacheddateformat.cpp</data>
      <data key="d6">int CachedDateFormat::findMillisecondStart(
	log4cxx_time_t time, const LogString&amp; formatted,
	const DateFormatPtr&amp; formatter,
	Pool&amp; pool)
{

	log4cxx_time_t slotBegin = (time / 1000000) * 1000000;

	if (slotBegin &gt; time)
	{
		slotBegin -= 1000000;
	}

	int millis = (int) (time - slotBegin) / 1000;

	// the magic numbers are in microseconds
	int magic = magic1;
	LogString magicString(magicString1);

	if (millis == magic1 / 1000)
	{
		magic = magic2;
		magicString = magicString2;
	}

	LogString plusMagic;
	formatter-&gt;format(plusMagic, slotBegin + magic, pool);

	/**
	 *   If the string lengths differ then
	 *      we can't use the cache except for duplicate requests.
	 */
	if (plusMagic.length() != formatted.length())
	{
		return UNRECOGNIZED_MILLISECONDS;
	}
	else
	{
		// find first difference between values
		for (LogString::size_type i = 0; i &lt; formatted.length(); i++)
		{
			if (formatted[i] != plusMagic[i])
			{
				//
				//   determine the expected digits for the base time
		...</data>
      <data key="d7">152.0</data>
      <data key="d8">234.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">83.0</data>
      <data key="d12">19</data>
      <data key="d13">12</data>
      <data key="d14">26</data>
      <data key="d15">15</data>
      <data key="d16">0</data>
      <data key="d17">5</data>
      <data key="d18">4</data>
      <data key="d19">4</data>
      <data key="d20">1</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">5</data>
      <data key="d25">8</data>
      <data key="d26">4</data>
      <data key="d27">4</data>
      <data key="d28">int</data>
    </node>
    <node id="17851">
      <data key="d0">17851</data>
      <data key="d1">formatMessage</data>
      <data key="d2">1</data>
      <data key="d3">InterruptedException.formatMessage</data>
      <data key="d4">LogString InterruptedException.formatMessage (log4cxx_status_t)</data>
      <data key="d5">main\cpp\exception.cpp</data>
      <data key="d6">LogString InterruptedException::formatMessage(log4cxx_status_t stat)
{
	LogString s(LOG4CXX_STR("InterruptedException: stat = "));
	Pool p;
	StringHelper::toString(stat, p, s);
	return s;
}</data>
      <data key="d7">278.0</data>
      <data key="d8">284.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">7.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">5</data>
      <data key="d15">4</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">LogString</data>
    </node>
    <node id="22975">
      <data key="d0">22975</data>
      <data key="d1">getDefault</data>
      <data key="d2">1</data>
      <data key="d3">FormattingInfo.getDefault</data>
      <data key="d4">FormattingInfoPtr FormattingInfo.getDefault ()</data>
      <data key="d5">main\cpp\formattinginfo.cpp</data>
      <data key="d6">FormattingInfoPtr FormattingInfo::getDefault()
{
	static helpers::WideLife&lt;FormattingInfoPtr&gt; def= std::make_shared&lt;FormattingInfo&gt;(false, 0, INT_MAX);
	return def;
}</data>
      <data key="d7">68.0</data>
      <data key="d8">72.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">5.0</data>
      <data key="d12">6</data>
      <data key="d13">6</data>
      <data key="d14">5</data>
      <data key="d15">4</data>
      <data key="d16">3</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">FormattingInfoPtr</data>
    </node>
    <node id="9663">
      <data key="d0">9663</data>
      <data key="d1">getEncoder</data>
      <data key="d2">1</data>
      <data key="d3">CharsetEncoder.getEncoder</data>
      <data key="d4">CharsetEncoderPtr CharsetEncoder.getEncoder (LogString)</data>
      <data key="d5">main\cpp\charsetencoder.cpp</data>
      <data key="d6">CharsetEncoderPtr CharsetEncoder::getEncoder(const LogString&amp; charset)
{
	if (StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR("UTF-8"), LOG4CXX_STR("utf-8"))
		|| StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR("CP65001"), LOG4CXX_STR("cp65001")))
	{
		return std::make_shared&lt;UTF8CharsetEncoder&gt;();
	}
	else if (StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR("C"), LOG4CXX_STR("c")) ||
		charset == LOG4CXX_STR("646") ||
		StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR("US-ASCII"), LOG4CXX_STR("us-ascii")) ||
		StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR("ISO646-US"), LOG4CXX_STR("iso646-US")) ||
		StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR("ANSI_X3.4-1968"), LOG4CXX_STR("ansi_x3.4-1968")) ||
		StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR("CP20127"), LOG4CXX_STR("cp20127")))
	{
		return std::make_shared&lt;USASCIICharsetEncoder&gt;();
	}
	else if (StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR("ISO-8859-1"), LOG4CXX_STR("iso-8859-1")) ||
		Strin...</data>
      <data key="d7">554.0</data>
      <data key="d8">596.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">43.0</data>
      <data key="d12">5</data>
      <data key="d13">3</data>
      <data key="d14">6</data>
      <data key="d15">3</data>
      <data key="d16">1</data>
      <data key="d17">2</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">2</data>
      <data key="d21">2</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">2</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">CharsetEncoderPtr</data>
    </node>
    <node id="35266">
      <data key="d0">35266</data>
      <data key="d1">get</data>
      <data key="d2">1</data>
      <data key="d3">MDC.get</data>
      <data key="d4">bool MDC.get (LogString,LogString)</data>
      <data key="d5">main\cpp\mdc.cpp</data>
      <data key="d6">std::string MDC::get(const std::string&amp; key)
{
	LOG4CXX_DECODE_CHAR(lkey, key);
	LogString lvalue;

	if (get(lkey, lvalue))
	{
		LOG4CXX_ENCODE_CHAR(value, lvalue);
		return value;
	}

	return std::string();
}</data>
      <data key="d7">77.0</data>
      <data key="d8">89.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">13.0</data>
      <data key="d12">12</data>
      <data key="d13">4</data>
      <data key="d14">13</data>
      <data key="d15">6</data>
      <data key="d16">1</data>
      <data key="d17">1</data>
      <data key="d18">3</data>
      <data key="d19">4</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">string</data>
    </node>
    <node id="26052">
      <data key="d0">26052</data>
      <data key="d1">appendHeader</data>
      <data key="d2">1</data>
      <data key="d3">HTMLLayout.appendHeader</data>
      <data key="d4">void HTMLLayout.appendHeader (LogString,Pool)</data>
      <data key="d5">main\cpp\htmllayout.cpp</data>
      <data key="d6">void HTMLLayout::appendHeader(LogString&amp; output, Pool&amp; p)
{
	output.append(LOG4CXX_STR("&lt;!DOCTYPE HTML PUBLIC "));
	output.append(LOG4CXX_STR("\"-//W3C//DTD HTML 4.01 Transitional//EN\" "));
	output.append(LOG4CXX_STR("\"http://www.w3.org/TR/html4/loose.dtd\"&gt;"));
	output.append(LOG4CXX_EOL);
	output.append(LOG4CXX_STR("&lt;html&gt;"));
	output.append(LOG4CXX_EOL);
	output.append(LOG4CXX_STR("&lt;head&gt;"));
	output.append(LOG4CXX_EOL);
	output.append(LOG4CXX_STR("&lt;title&gt;"));
	output.append(m_priv-&gt;title);
	output.append(LOG4CXX_STR("&lt;/title&gt;"));
	output.append(LOG4CXX_EOL);
	output.append(LOG4CXX_STR("&lt;style type=\"text/css\"&gt;"));
	output.append(LOG4CXX_EOL);
	output.append(LOG4CXX_STR("&lt;!--"));
	output.append(LOG4CXX_EOL);
	output.append(LOG4CXX_STR("body, table {font-family: arial,sans-serif; font-size: x-small;}"));
	output.append(LOG4CXX_EOL);
	output.append(LOG4CXX_STR("th {background: #336699; color: #FFFFFF; text-align: left;}"));
	output.append(LOG4CXX_EOL);
	output.append(LOG4CXX_STR...</data>
      <data key="d7">175.0</data>
      <data key="d8">238.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">64.0</data>
      <data key="d12">58</data>
      <data key="d13">2</data>
      <data key="d14">83</data>
      <data key="d15">5</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="38344">
      <data key="d0">38344</data>
      <data key="d1">fragments</data>
      <data key="d2">3</data>
      <data key="d3">LOG4CXX_NS.pattern.PatternAbbreviator.fragments</data>
      <data key="d4" />
      <data key="d5">main\cpp\nameabbreviator.cpp</data>
      <data key="d6">fragments</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">4</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="54730">
      <data key="d0">54730</data>
      <data key="d1">getFacility</data>
      <data key="d2">1</data>
      <data key="d3">SyslogAppender.getFacility</data>
      <data key="d4">int SyslogAppender.getFacility (LogString)</data>
      <data key="d5">main\cpp\syslogappender.cpp</data>
      <data key="d6">LogString SyslogAppender::getFacility() const
{
	return getFacilityString(_priv-&gt;syslogFacility);
}</data>
      <data key="d7">466.0</data>
      <data key="d8">469.0</data>
      <data key="d9">1.0</data>
      <data key="d10">26.0</data>
      <data key="d11">4.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">3</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">1</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">LogString</data>
    </node>
    <node id="11723">
      <data key="d0">11723</data>
      <data key="d1">setOption</data>
      <data key="d2">1</data>
      <data key="d3">ConsoleAppender.setOption</data>
      <data key="d4">void ConsoleAppender.setOption (LogString,LogString)</data>
      <data key="d5">main\cpp\consoleappender.cpp</data>
      <data key="d6">void ConsoleAppender::setOption(const LogString&amp; option, const LogString&amp; value)
{
	if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR("TARGET"), LOG4CXX_STR("target")))
	{
		setTarget(value);
	}
	else
	{
		WriterAppender::setOption(option, value);
	}
}</data>
      <data key="d7">133.0</data>
      <data key="d8">144.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">12.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">3</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">1</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="38348">
      <data key="d0">38348</data>
      <data key="d1">abbreviate</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.pattern.PatternAbbreviator.abbreviate</data>
      <data key="d4">void LOG4CXX_NS.pattern.PatternAbbreviator.abbreviate (ANY,LogString)</data>
      <data key="d5">main\cpp\nameabbreviator.cpp</data>
      <data key="d6">void abbreviate(LogString::size_type nameStart, LogString&amp; buf) const override
		{
			//
			//  all non-terminal patterns are executed once
			//
			LogString::size_type pos = nameStart;

			for (LogString::size_type i = 0; (i &lt; (fragments.size() - 1)) &amp;&amp; (pos &lt; buf.length());
				i++)
			{
				pos = fragments[i].abbreviate(buf, pos);
			}

			//
			//   last pattern in executed repeatedly
			//
			PatternAbbreviatorFragment terminalFragment =
				fragments[fragments.size() - 1];

			while (pos &lt; buf.length())
			{
				pos = terminalFragment.abbreviate(buf, pos);
			}
		}</data>
      <data key="d7">233.0</data>
      <data key="d8">256.0</data>
      <data key="d9">3.0</data>
      <data key="d10">3.0</data>
      <data key="d11">24.0</data>
      <data key="d12">19</data>
      <data key="d13">6</data>
      <data key="d14">21</data>
      <data key="d15">6</data>
      <data key="d16">0</data>
      <data key="d17">4</data>
      <data key="d18">3</data>
      <data key="d19">3</data>
      <data key="d20">1</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">4</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="49613">
      <data key="d0">49613</data>
      <data key="d1">renderFacet</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken.renderFacet</data>
      <data key="d4">void LOG4CXX_NS.helpers.SimpleDateFormatImpl.PatternToken.renderFacet (ANY*,incrementFunction,char,unsigned int,char*,ANY)</data>
      <data key="d5">main\cpp\simpledateformat.cpp</data>
      <data key="d6">static void renderFacet(const std::locale* locale,
			incrementFunction inc,
			char spec,
			unsigned int wspec,
			const char* aprspec,
			std::vector&lt;LogString&gt;&amp; values)
		{
			std::vector&lt;LogString&gt;::iterator valueIter = values.begin();
			tm time;
			memset(&amp;time, 0, sizeof(time));
			apr_time_exp_t aprtime;
			memset(&amp;aprtime, 0, sizeof(aprtime));
#if LOG4CXX_HAS_STD_LOCALE

			if (locale != NULL)
			{
#if LOG4CXX_WCHAR_T_API

				if (HAS_FACET(*locale, std::time_put&lt;wchar_t&gt;))
				{
					const std::time_put&lt;wchar_t&gt;&amp; facet = USE_FACET(*locale, std::time_put&lt;wchar_t&gt;);
					size_t start = 0;
					std::basic_ostringstream&lt;wchar_t&gt; os;

					for (; valueIter != values.end(); valueIter++)
					{
						PUT_FACET(facet, os, &amp;time, (char)wspec);
						Transcoder::decode(os.str().substr(start), *valueIter);
						start = os.str().length();
						(*inc)(time, aprtime);
					}
				}
				else
#endif
					if (HAS_FACET(*locale,  std::time_put&lt;char&gt;))
					{
						const std::time_put&lt;char...</data>
      <data key="d7">117.0</data>
      <data key="d8">187.0</data>
      <data key="d9">3.0</data>
      <data key="d10">3.0</data>
      <data key="d11">71.0</data>
      <data key="d12">18</data>
      <data key="d13">7</data>
      <data key="d14">28</data>
      <data key="d15">13</data>
      <data key="d16">5</data>
      <data key="d17">1</data>
      <data key="d18">3</data>
      <data key="d19">4</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">12</data>
      <data key="d26">6</data>
      <data key="d27">6</data>
      <data key="d28">void</data>
    </node>
    <node id="14802">
      <data key="d0">14802</data>
      <data key="d1">doOnChange</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.xml.XMLWatchdog.doOnChange</data>
      <data key="d4">void LOG4CXX_NS.xml.XMLWatchdog.doOnChange ()</data>
      <data key="d5">main\cpp\domconfigurator.cpp</data>
      <data key="d6">void doOnChange()
		{
			DOMConfigurator().doConfigure(file(),
				LogManager::getLoggerRepository());
		}</data>
      <data key="d7">83.0</data>
      <data key="d8">87.0</data>
      <data key="d9">3.0</data>
      <data key="d10">3.0</data>
      <data key="d11">5.0</data>
      <data key="d12">2</data>
      <data key="d13">1</data>
      <data key="d14">1</data>
      <data key="d15">1</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">void</data>
    </node>
    <node id="60883">
      <data key="d0">60883</data>
      <data key="d1">appendEscapingCDATA</data>
      <data key="d2">1</data>
      <data key="d3">Transform.appendEscapingCDATA</data>
      <data key="d4">void Transform.appendEscapingCDATA (LogString,LogString)</data>
      <data key="d5">main\cpp\transform.cpp</data>
      <data key="d6">void Transform::appendEscapingCDATA(
	LogString&amp; buf, const LogString&amp; input)
{
	static const WideLife&lt;LogString&gt; CDATA_END(LOG4CXX_STR("]]&gt;"));
	static const WideLife&lt;LogString&gt; CDATA_EMBEDED_END(LOG4CXX_STR("]]&gt;]]&amp;gt;&lt;![CDATA["));

	const LogString::size_type CDATA_END_LEN = 3;


	if (input.length() == 0 )
	{
		return;
	}

	LogString::size_type end = input.find(CDATA_END);

	if (end == LogString::npos)
	{
		buf.append(input);
		return;
	}

	LogString::size_type start = 0;

	while (end != LogString::npos)
	{
		buf.append(input, start, end - start);
		buf.append(CDATA_EMBEDED_END);
		start = end + CDATA_END_LEN;

		if (start &lt; input.length())
		{
			end = input.find(CDATA_END, start);
		}
		else
		{
			return;
		}
	}

	buf.append(input, start, input.length() - start);
}</data>
      <data key="d7">90.0</data>
      <data key="d8">131.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">42.0</data>
      <data key="d12">23</data>
      <data key="d13">7</data>
      <data key="d14">33</data>
      <data key="d15">8</data>
      <data key="d16">2</data>
      <data key="d17">0</data>
      <data key="d18">5</data>
      <data key="d19">6</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="20952">
      <data key="d0">20952</data>
      <data key="d1">checkAndConfigure</data>
      <data key="d2">1</data>
      <data key="d3">FileWatchdog.checkAndConfigure</data>
      <data key="d4">void FileWatchdog.checkAndConfigure ()</data>
      <data key="d5">main\cpp\filewatchdog.cpp</data>
      <data key="d6">void FileWatchdog::checkAndConfigure()
{
	LogString msg(LOG4CXX_STR("Checking ["));
	msg += m_priv-&gt;file.getPath();
	msg += LOG4CXX_STR("]");
	LogLog::debug(msg);
	Pool pool1;

	if (!m_priv-&gt;file.exists(pool1))
	{
		if (!m_priv-&gt;warnedAlready)
		{
			LogLog::debug(((LogString) LOG4CXX_STR("["))
				+ m_priv-&gt;file.getPath()
				+ LOG4CXX_STR("] does not exist."));
			m_priv-&gt;warnedAlready = true;
		}
	}
	else
	{
		auto thisMod = m_priv-&gt;file.lastModified(pool1);

		if (thisMod &gt; m_priv-&gt;lastModif)
		{
			m_priv-&gt;lastModif = thisMod;
			doOnChange();
			m_priv-&gt;warnedAlready = false;
		}
	}
}</data>
      <data key="d7">90.0</data>
      <data key="d8">119.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">30.0</data>
      <data key="d12">18</data>
      <data key="d13">7</data>
      <data key="d14">11</data>
      <data key="d15">4</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">3</data>
      <data key="d19">4</data>
      <data key="d20">0</data>
      <data key="d21">2</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">void</data>
    </node>
    <node id="59869">
      <data key="d0">59869</data>
      <data key="d1">decode</data>
      <data key="d2">1</data>
      <data key="d3">Transcoder.decode</data>
      <data key="d4">unsigned int Transcoder.decode (ANY,ANY)</data>
      <data key="d5">main\cpp\transcoder.cpp</data>
      <data key="d6">LogString Transcoder::decode(const char* val)
{
#if LOG4CXX_LOGCHAR_IS_UTF8 &amp;&amp; !LOG4CXX_CHARSET_EBCDIC
	return val;
#else
	LogString dst;
	Transcoder::decode(val, dst);
	return dst;
#endif
}</data>
      <data key="d7">670.0</data>
      <data key="d8">679.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">10.0</data>
      <data key="d12">67</data>
      <data key="d13">13</data>
      <data key="d14">54</data>
      <data key="d15">8</data>
      <data key="d16">17</data>
      <data key="d17">0</data>
      <data key="d18">14</data>
      <data key="d19">37</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">LogString</data>
    </node>
    <node id="53725">
      <data key="d0">53725</data>
      <data key="d1">trim</data>
      <data key="d2">1</data>
      <data key="d3">StringHelper.trim</data>
      <data key="d4">LogString StringHelper.trim (LogString)</data>
      <data key="d5">main\cpp\stringhelper.cpp</data>
      <data key="d6">LogString StringHelper::trim(const LogString&amp; s)
{
	LogString::size_type pos = s.find_first_not_of(' ');

	if (pos == std::string::npos)
	{
		return LogString();
	}

	LogString::size_type n = s.find_last_not_of(' ') - pos + 1;
	return s.substr(pos, n);
}</data>
      <data key="d7">75.0</data>
      <data key="d8">86.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">12.0</data>
      <data key="d12">10</data>
      <data key="d13">5</data>
      <data key="d14">11</data>
      <data key="d15">5</data>
      <data key="d16">6</data>
      <data key="d17">0</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">LogString</data>
    </node>
    <node id="48612">
      <data key="d0">48612</data>
      <data key="d1">subAppend</data>
      <data key="d2">1</data>
      <data key="d3">RollingFileAppender.subAppend</data>
      <data key="d4">void RollingFileAppender.subAppend (LoggingEventPtr,Pool)</data>
      <data key="d5">main\cpp\rollingfileappender.cpp</data>
      <data key="d6">void RollingFileAppender::subAppend(const LoggingEventPtr&amp; event, Pool&amp; p)
{
	// The rollover check must precede actual writing. This is the
	// only correct behavior for time driven triggers.
	if (
		_priv-&gt;triggeringPolicy-&gt;isTriggeringEvent(
			this, event, getFile(), getFileLength()))
	{
		//
		//   wrap rollover request in try block since
		//    rollover may fail in case read access to directory
		//    is not provided.  However appender should still be in good
		//     condition and the append should still happen.
		try
		{
			_priv-&gt;_event = event;
			rolloverInternal(p);
		}
		catch (std::exception&amp; ex)
		{
			LOG4CXX_DECODE_CHAR(lsMsg, ex.what());
			LogString errorMsg = LOG4CXX_STR("Exception during rollover attempt: ");
			errorMsg.append(lsMsg);
			LogLog::warn(errorMsg);
			_priv-&gt;errorHandler-&gt;error(lsMsg);
		}
	}

	FileAppender::subAppend(event, p);
}</data>
      <data key="d7">453.0</data>
      <data key="d8">482.0</data>
      <data key="d9">1.0</data>
      <data key="d10">2.0</data>
      <data key="d11">30.0</data>
      <data key="d12">17</data>
      <data key="d13">4</data>
      <data key="d14">17</data>
      <data key="d15">8</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">3</data>
      <data key="d19">4</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="17898">
      <data key="d0">17898</data>
      <data key="d1">formatMessage</data>
      <data key="d2">1</data>
      <data key="d3">ThreadException.formatMessage</data>
      <data key="d4">LogString ThreadException.formatMessage (log4cxx_status_t)</data>
      <data key="d5">main\cpp\exception.cpp</data>
      <data key="d6">LogString ThreadException::formatMessage(log4cxx_status_t stat)
{
	LogString s(LOG4CXX_STR("Thread exception: stat = "));
	Pool p;
	StringHelper::toString(stat, p, s);
	return s;
}</data>
      <data key="d7">307.0</data>
      <data key="d8">313.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">7.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">5</data>
      <data key="d15">4</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">LogString</data>
    </node>
    <node id="40428">
      <data key="d0">40428</data>
      <data key="d1">m_config</data>
      <data key="d2">3</data>
      <data key="d3">LOG4CXX_NS.ConfiguratorWatchdog.m_config</data>
      <data key="d4" />
      <data key="d5">main\cpp\optionconverter.cpp</data>
      <data key="d6">m_config</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="58860">
      <data key="d0">58860</data>
      <data key="d1">explode</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.helpers.TimeZoneImpl.FixedTimeZone.explode</data>
      <data key="d4">log4cxx_status_t LOG4CXX_NS.helpers.TimeZoneImpl.FixedTimeZone.explode (apr_time_exp_t*,log4cxx_time_t)</data>
      <data key="d5">main\cpp\timezone.cpp</data>
      <data key="d6">log4cxx_status_t explode( apr_time_exp_t* result, log4cxx_time_t input ) const
		{
			apr_status_t stat;

			//  APR 1.1 and early mishandles microseconds on dates
			//   before 1970, APR bug 32520
			if (LOG4CXX_UNLIKELY(input &lt; 0 &amp;&amp; apr_time_usec(input) &lt; 0))
			{
				apr_time_t floorTime = (apr_time_sec(input) - 1) * APR_USEC_PER_SEC;
				stat = apr_time_exp_tz(result, floorTime, offset);
				result-&gt;tm_usec = (int) (input - floorTime);
			}
			else
			{
				stat = apr_time_exp_tz( result, input, offset );
			}

			return stat;
		}</data>
      <data key="d7">152.0</data>
      <data key="d8">170.0</data>
      <data key="d9">3.0</data>
      <data key="d10">3.0</data>
      <data key="d11">19.0</data>
      <data key="d12">11</data>
      <data key="d13">7</data>
      <data key="d14">13</data>
      <data key="d15">6</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">log4cxx_status_t</data>
    </node>
    <node id="18930">
      <data key="d0">18930</data>
      <data key="d1">list</data>
      <data key="d2">1</data>
      <data key="d3">File.list</data>
      <data key="d4">vector&lt;LogString&gt; File.list (Pool)</data>
      <data key="d5">main\cpp\file.cpp</data>
      <data key="d6">std::vector&lt;LogString&gt; File::list(Pool&amp; p) const
{
	apr_dir_t* dir;
	apr_finfo_t entry;
	std::vector&lt;LogString&gt; filenames;

	apr_status_t stat = apr_dir_open(&amp;dir,
			convertBackSlashes(getPath(p)),
			p.getAPRPool());

	if (stat == APR_SUCCESS)
	{
		int style = APR_FILEPATH_ENCODING_UNKNOWN;
		apr_filepath_encoding(&amp;style, p.getAPRPool());
		stat = apr_dir_read(&amp;entry, APR_FINFO_DIRENT, dir);

		while (stat == APR_SUCCESS)
		{
			if (entry.name != NULL)
			{
				LogString filename;

				if (style == APR_FILEPATH_ENCODING_UTF8)
				{
					Transcoder::decodeUTF8(entry.name, filename);
				}
				else
				{
					Transcoder::decode(entry.name, filename);
				}

				filenames.push_back(filename);
			}

			stat = apr_dir_read(&amp;entry, APR_FINFO_DIRENT, dir);
		}

		stat = apr_dir_close(dir);
	}

	return filenames;
}</data>
      <data key="d7">262.0</data>
      <data key="d8">303.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">42.0</data>
      <data key="d12">22</data>
      <data key="d13">7</data>
      <data key="d14">35</data>
      <data key="d15">15</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">5</data>
      <data key="d19">11</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">vector&lt;LogString&gt;</data>
    </node>
    <node id="52723">
      <data key="d0">52723</data>
      <data key="d1">fireConnector</data>
      <data key="d2">1</data>
      <data key="d3">SocketAppenderSkeleton.fireConnector</data>
      <data key="d4">void SocketAppenderSkeleton.fireConnector ()</data>
      <data key="d5">main\cpp\socketappenderskeleton.cpp</data>
      <data key="d6">void SocketAppenderSkeleton::fireConnector()
{
	std::lock_guard&lt;std::recursive_mutex&gt; lock(_priv-&gt;mutex);

	if ( !_priv-&gt;thread.joinable() )
	{
		LogLog::debug(LOG4CXX_STR("Connector thread not alive: starting monitor."));

		_priv-&gt;thread = ThreadUtility::instance()-&gt;createThread( LOG4CXX_STR("SocketAppend"), &amp;SocketAppenderSkeleton::monitor, this );
	}
}</data>
      <data key="d7">150.0</data>
      <data key="d8">160.0</data>
      <data key="d9">1.0</data>
      <data key="d10">44.0</data>
      <data key="d11">11.0</data>
      <data key="d12">21</data>
      <data key="d13">8</data>
      <data key="d14">8</data>
      <data key="d15">5</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">void</data>
    </node>
    <node id="40435">
      <data key="d0">40435</data>
      <data key="d1">doOnChange</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.ConfiguratorWatchdog.doOnChange</data>
      <data key="d4">void LOG4CXX_NS.ConfiguratorWatchdog.doOnChange ()</data>
      <data key="d5">main\cpp\optionconverter.cpp</data>
      <data key="d6">void doOnChange() override
    {
        m_config-&gt;doConfigure(file(), LogManager::getLoggerRepository());
    }</data>
      <data key="d7">64.0</data>
      <data key="d8">67.0</data>
      <data key="d9">5.0</data>
      <data key="d10">5.0</data>
      <data key="d11">4.0</data>
      <data key="d12">2</data>
      <data key="d13">2</data>
      <data key="d14">2</data>
      <data key="d15">2</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">void</data>
    </node>
    <node id="45563">
      <data key="d0">45563</data>
      <data key="d1">configureRootLogger</data>
      <data key="d2">1</data>
      <data key="d3">PropertyConfigurator.configureRootLogger</data>
      <data key="d4">void PropertyConfigurator.configureRootLogger (ANY,ANY)</data>
      <data key="d5">main\cpp\propertyconfigurator.cpp</data>
      <data key="d6">void PropertyConfigurator::configureRootLogger(helpers::Properties&amp; props,
	spi::LoggerRepositoryPtr&amp; hierarchy)
{
	static const WideLife&lt;LogString&gt; ROOT_CATEGORY_PREFIX(LOG4CXX_STR("log4j.rootCategory"));
	static const WideLife&lt;LogString&gt; ROOT_LOGGER_PREFIX(LOG4CXX_STR("log4j.rootLogger"));



	LogString effectiveFrefix(ROOT_LOGGER_PREFIX);
	LogString value = OptionConverter::findAndSubst(ROOT_LOGGER_PREFIX, props);

	if (value.empty())
	{
		value = OptionConverter::findAndSubst(ROOT_CATEGORY_PREFIX, props);
		effectiveFrefix = ROOT_CATEGORY_PREFIX;
	}

	if (value.empty())
	{
		LogLog::debug(LOG4CXX_STR("Could not find root logger information. Is this OK?"));
	}
	else
	{
		LoggerPtr root = hierarchy-&gt;getRootLogger();

		static const WideLife&lt;LogString&gt; INTERNAL_ROOT_NAME(LOG4CXX_STR("root"));
		parseLogger(props, root, effectiveFrefix, INTERNAL_ROOT_NAME, value, true);
	}
}</data>
      <data key="d7">239.0</data>
      <data key="d8">267.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">29.0</data>
      <data key="d12">8</data>
      <data key="d13">2</data>
      <data key="d14">14</data>
      <data key="d15">7</data>
      <data key="d16">0</data>
      <data key="d17">3</data>
      <data key="d18">3</data>
      <data key="d19">3</data>
      <data key="d20">0</data>
      <data key="d21">3</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">2</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="47613">
      <data key="d0">47613</data>
      <data key="d1">setMaxFileSize</data>
      <data key="d2">1</data>
      <data key="d3">RollingFileAppender.setMaxFileSize</data>
      <data key="d4">void RollingFileAppender.setMaxFileSize (LogString)</data>
      <data key="d5">main\cpp\rollingfileappender.cpp</data>
      <data key="d6">void RollingFileAppender::setMaxFileSize(const LogString&amp; value)
{
	setMaximumFileSize(OptionConverter::toFileSize(value, long(getMaximumFileSize() + 1)));
}</data>
      <data key="d7">143.0</data>
      <data key="d8">146.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">4.0</data>
      <data key="d12">3</data>
      <data key="d13">3</data>
      <data key="d14">2</data>
      <data key="d15">2</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="40448">
      <data key="d0">40448</data>
      <data key="d1">convertSpecialChars</data>
      <data key="d2">1</data>
      <data key="d3">OptionConverter.convertSpecialChars</data>
      <data key="d4">LogString OptionConverter.convertSpecialChars (LogString)</data>
      <data key="d5">main\cpp\optionconverter.cpp</data>
      <data key="d6">LogString OptionConverter::convertSpecialChars(const LogString&amp; s)
{
	logchar c;
	LogString sbuf;

	LogString::const_iterator i = s.begin();

	while (i != s.end())
	{
		c = *i++;

		if (c == 0x5C /* '\\' */)
		{
			c =  *i++;

			switch (c)
			{
				case 0x6E: //'n'
					c = 0x0A;
					break;

				case 0x72: //'r'
					c = 0x0D;
					break;

				case 0x74: //'t'
					c = 0x09;
					break;

				case 0x66: //'f'
					c = 0x0C;
					break;

				default:
					break;
			}
		}

		sbuf.append(1, c);
	}

	return sbuf;
}</data>
      <data key="d7">77.0</data>
      <data key="d8">119.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">43.0</data>
      <data key="d12">16</data>
      <data key="d13">6</data>
      <data key="d14">17</data>
      <data key="d15">4</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">9</data>
      <data key="d19">7</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">LogString</data>
    </node>
    <node id="61953">
      <data key="d0">61953</data>
      <data key="d1">setOption</data>
      <data key="d2">1</data>
      <data key="d3">XMLLayout.setOption</data>
      <data key="d4">void XMLLayout.setOption (LogString,LogString)</data>
      <data key="d5">main\cpp\xmllayout.cpp</data>
      <data key="d6">void XMLLayout::setOption(const LogString&amp; option,
	const LogString&amp; value)
{
	if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("LOCATIONINFO"), LOG4CXX_STR("locationinfo")))
	{
		setLocationInfo(OptionConverter::toBoolean(value, false));
		m_priv-&gt;expectedPatternLength = getFormattedEventCharacterCount() * 2;
	}

	if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("PROPERTIES"), LOG4CXX_STR("properties")))
	{
		setProperties(OptionConverter::toBoolean(value, false));
		m_priv-&gt;expectedPatternLength = getFormattedEventCharacterCount() * 2;
	}
}</data>
      <data key="d7">61.0</data>
      <data key="d8">75.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">15.0</data>
      <data key="d12">10</data>
      <data key="d13">4</data>
      <data key="d14">10</data>
      <data key="d15">5</data>
      <data key="d16">0</data>
      <data key="d17">4</data>
      <data key="d18">3</data>
      <data key="d19">3</data>
      <data key="d20">2</data>
      <data key="d21">4</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">2</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="11778">
      <data key="d0">11778</data>
      <data key="d1">CyclicBuffer</data>
      <data key="d2">1</data>
      <data key="d3">CyclicBuffer.CyclicBuffer</data>
      <data key="d4">ANY CyclicBuffer.CyclicBuffer (int)</data>
      <data key="d5">main\cpp\cyclicbuffer.cpp</data>
      <data key="d6">CyclicBuffer::CyclicBuffer(int maxSize1)
	: m_priv(std::make_unique&lt;CyclicBufferPriv&gt;(maxSize1))
{
	if (maxSize1 &lt; 1)
	{
		LogString msg(LOG4CXX_STR("The maxSize argument ("));
		Pool p;
		StringHelper::toString(maxSize1, p, msg);
		msg.append(LOG4CXX_STR(") is not a positive integer."));
		throw IllegalArgumentException(msg);
	}
}</data>
      <data key="d7">45.0</data>
      <data key="d8">56.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">12.0</data>
      <data key="d12">4</data>
      <data key="d13">3</data>
      <data key="d14">7</data>
      <data key="d15">4</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">ANY</data>
    </node>
    <node id="27142">
      <data key="d0">27142</data>
      <data key="d1">setOption</data>
      <data key="d2">1</data>
      <data key="d3">JSONLayout.setOption</data>
      <data key="d4">void JSONLayout.setOption (LogString,LogString)</data>
      <data key="d5">main\cpp\jsonlayout.cpp</data>
      <data key="d6">void JSONLayout::setOption(const LogString&amp; option, const LogString&amp; value)
{
	if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR("LOCATIONINFO"), LOG4CXX_STR("locationinfo")))
	{
		setLocationInfo(OptionConverter::toBoolean(value, false));
	}
	else if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR("THREADINFO"), LOG4CXX_STR("threadinfo")))
	{
		setThreadInfo(OptionConverter::toBoolean(value, false));
	}
	else if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR("PRETTYPRINT"), LOG4CXX_STR("prettyprint")))
	{
		setPrettyPrint(OptionConverter::toBoolean(value, false));
	}
}</data>
      <data key="d7">109.0</data>
      <data key="d8">126.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">18.0</data>
      <data key="d12">2</data>
      <data key="d13">1</data>
      <data key="d14">4</data>
      <data key="d15">4</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">1</data>
      <data key="d21">2</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="53768">
      <data key="d0">53768</data>
      <data key="d1">startsWith</data>
      <data key="d2">1</data>
      <data key="d3">StringHelper.startsWith</data>
      <data key="d4">bool StringHelper.startsWith (LogString,LogString)</data>
      <data key="d5">main\cpp\stringhelper.cpp</data>
      <data key="d6">bool StringHelper::startsWith(const LogString&amp; s, const LogString&amp; prefix)
{
	if (s.length() &lt; prefix.length())
	{
		return false;
	}

	return s.compare(0, prefix.length(), prefix) == 0;
}</data>
      <data key="d7">88.0</data>
      <data key="d8">96.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">9.0</data>
      <data key="d12">6</data>
      <data key="d13">3</data>
      <data key="d14">5</data>
      <data key="d15">2</data>
      <data key="d16">3</data>
      <data key="d17">0</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">bool</data>
    </node>
    <node id="35346">
      <data key="d0">35346</data>
      <data key="d1">remove</data>
      <data key="d2">1</data>
      <data key="d3">MDC.remove</data>
      <data key="d4">bool MDC.remove (LogString,LogString)</data>
      <data key="d5">main\cpp\mdc.cpp</data>
      <data key="d6">std::string MDC::remove(const std::string&amp; key)
{
	LOG4CXX_DECODE_CHAR(lkey, key);
	LogString lvalue;

	if (remove(lkey, lvalue))
	{
		LOG4CXX_ENCODE_CHAR(value, lvalue);
		return value;
	}

	return std::string();
}</data>
      <data key="d7">112.0</data>
      <data key="d8">124.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">13.0</data>
      <data key="d12">13</data>
      <data key="d13">4</data>
      <data key="d14">14</data>
      <data key="d15">6</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">3</data>
      <data key="d19">4</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">string</data>
    </node>
    <node id="534">
      <data key="d0">534</data>
      <data key="d1">rootLogger</data>
      <data key="d2">2</data>
      <data key="d3">examples\cpp\auto-configured.cpp.rootLogger</data>
      <data key="d4" />
      <data key="d5">examples\cpp\auto-configured.cpp</data>
      <data key="d6">auto rootLogger</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="38425">
      <data key="d0">38425</data>
      <data key="d1">getAbbreviator</data>
      <data key="d2">1</data>
      <data key="d3">NameAbbreviator.getAbbreviator</data>
      <data key="d4">NameAbbreviatorPtr NameAbbreviator.getAbbreviator (LogString)</data>
      <data key="d5">main\cpp\nameabbreviator.cpp</data>
      <data key="d6">NameAbbreviatorPtr NameAbbreviator::getAbbreviator(const LogString&amp; pattern)
{
	if (pattern.length() &gt; 0)
	{
		//  if pattern is just spaces and numbers then
		//     use MaxElementAbbreviator
		LogString trimmed(StringHelper::trim(pattern));

		if (trimmed.length() == 0)
		{
			return getDefaultAbbreviator();
		}

		LogString::size_type i = 0;

		while (
			(i &lt; trimmed.length()) &amp;&amp; (trimmed[i] &gt;= 0x30 /* '0' */)
			&amp;&amp; (trimmed[i] &lt;= 0x39 /* '9' */))
		{
			i++;
		}

		//
		//  if all blanks and digits
		//
		if (i == trimmed.length())
		{
			return std::make_shared&lt;MaxElementAbbreviator&gt;(StringHelper::toInt(trimmed));
		}

		std::vector&lt;PatternAbbreviatorFragment&gt; fragments;
		logchar ellipsis;
		int charCount;
		LogString::size_type pos = 0;

		while (pos &lt; trimmed.length())
		{
			LogString::size_type ellipsisPos = pos;

			if (trimmed[pos] == 0x2A /* '*' */)
			{
				charCount = INT_MAX;
				ellipsisPos++;
			}
			else
			{
				if ((trimmed[pos] &gt;= 0x30 /* '0' */)
					&amp;&amp; (trim...</data>
      <data key="d7">267.0</data>
      <data key="d8">355.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">89.0</data>
      <data key="d12">48</data>
      <data key="d13">10</data>
      <data key="d14">51</data>
      <data key="d15">15</data>
      <data key="d16">1</data>
      <data key="d17">2</data>
      <data key="d18">11</data>
      <data key="d19">23</data>
      <data key="d20">0</data>
      <data key="d21">2</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">NameAbbreviatorPtr</data>
    </node>
    <node id="6684">
      <data key="d0">6684</data>
      <data key="d1">~AtExitRegistryImpl</data>
      <data key="d2">1</data>
      <data key="d3">anonymous_namespace_2.AtExitRegistryImpl.~AtExitRegistryImpl</data>
      <data key="d4">ANY anonymous_namespace_2.AtExitRegistryImpl.~AtExitRegistryImpl ()</data>
      <data key="d5">main\cpp\atexitregistry.cpp</data>
      <data key="d6">~AtExitRegistryImpl()
		{
			std::lock_guard&lt;std::recursive_mutex&gt; lock(mutex);
			while(!actions.empty())
			{
				std::function&lt;void()&gt; action = std::move(actions.begin()-&gt;second);
				actions.erase(actions.begin());
				action();
			}
		}</data>
      <data key="d7">28.0</data>
      <data key="d8">37.0</data>
      <data key="d9">3.0</data>
      <data key="d10">3.0</data>
      <data key="d11">10.0</data>
      <data key="d12">16</data>
      <data key="d13">7</data>
      <data key="d14">10</data>
      <data key="d15">4</data>
      <data key="d16">0</data>
      <data key="d17">5</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">1</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">5</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">ANY</data>
    </node>
    <node id="16925">
      <data key="d0">16925</data>
      <data key="d1">configure</data>
      <data key="d2">1</data>
      <data key="d3">DOMConfigurator.configure</data>
      <data key="d4">ConfigurationStatus DOMConfigurator.configure (ANY)</data>
      <data key="d5">main\cpp\domconfigurator.cpp</data>
      <data key="d6">spi::ConfigurationStatus DOMConfigurator::configure(const std::string&amp; filename)
{
	File file(filename);
	return DOMConfigurator().doConfigure(file, LogManager::getLoggerRepository());
}</data>
      <data key="d7">852.0</data>
      <data key="d8">856.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">5.0</data>
      <data key="d12">2</data>
      <data key="d13">1</data>
      <data key="d14">3</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">ConfigurationStatus</data>
    </node>
    <node id="544">
      <data key="d0">544</data>
      <data key="d1">ExampleStaticData</data>
      <data key="d2">1</data>
      <data key="d3">ExampleStaticData.ExampleStaticData</data>
      <data key="d4">ANY ExampleStaticData.ExampleStaticData ()</data>
      <data key="d5">examples\cpp\auto-configured.cpp</data>
      <data key="d6">ExampleStaticData()	{
		LOG4CXX_DEBUG(rootLogger, "static initializer message");
	}</data>
      <data key="d7">22.0</data>
      <data key="d8">24.0</data>
      <data key="d9">2.0</data>
      <data key="d10">2.0</data>
      <data key="d11">3.0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">1</data>
      <data key="d15">1</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">ANY</data>
    </node>
    <node id="58912">
      <data key="d0">58912</data>
      <data key="d1">offset</data>
      <data key="d2">3</data>
      <data key="d3">LOG4CXX_NS.helpers.TimeZoneImpl.FixedTimeZone.offset</data>
      <data key="d4" />
      <data key="d5">main\cpp\timezone.cpp</data>
      <data key="d6">offset</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="53800">
      <data key="d0">53800</data>
      <data key="d1">endsWith</data>
      <data key="d2">1</data>
      <data key="d3">StringHelper.endsWith</data>
      <data key="d4">bool StringHelper.endsWith (LogString,LogString)</data>
      <data key="d5">main\cpp\stringhelper.cpp</data>
      <data key="d6">bool StringHelper::endsWith(const LogString&amp; s, const LogString&amp; suffix)
{
	if (suffix.length() &lt;= s.length())
	{
		return s.compare(s.length() - suffix.length(), suffix.length(), suffix) == 0;
	}

	return false;
}</data>
      <data key="d7">98.0</data>
      <data key="d8">106.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">9.0</data>
      <data key="d12">9</data>
      <data key="d13">4</data>
      <data key="d14">7</data>
      <data key="d15">2</data>
      <data key="d16">2</data>
      <data key="d17">0</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">bool</data>
    </node>
    <node id="58922">
      <data key="d0">58922</data>
      <data key="d1">getDefault</data>
      <data key="d2">1</data>
      <data key="d3">TimeZone.getDefault</data>
      <data key="d4">TimeZonePtr TimeZone.getDefault ()</data>
      <data key="d5">main\cpp\timezone.cpp</data>
      <data key="d6">const TimeZonePtr&amp; TimeZone::getDefault()
{
	return LOG4CXX_NS::helpers::TimeZoneImpl::LocalTimeZone::getInstance();
}</data>
      <data key="d7">191.0</data>
      <data key="d8">194.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">4.0</data>
      <data key="d12">4</data>
      <data key="d13">1</data>
      <data key="d14">4</data>
      <data key="d15">4</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">TimeZonePtr</data>
    </node>
    <node id="1579">
      <data key="d0">1579</data>
      <data key="d1">logger</data>
      <data key="d2">3</data>
      <data key="d3">DelayedLoop.logger</data>
      <data key="d4" />
      <data key="d5">examples\cpp\delayedloop.cpp</data>
      <data key="d6">logger</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="1580">
      <data key="d0">1580</data>
      <data key="d1">main</data>
      <data key="d2">1</data>
      <data key="d3">DelayedLoop.main</data>
      <data key="d4">void DelayedLoop.main (int,char[]*)</data>
      <data key="d5">examples\cpp\delayedloop.cpp</data>
      <data key="d6">static void main(int argc, const char * const argv[])
        {
                if(argc == 2)
                {
                        init(argv[1]);
                }
                else
                {
                        usage(argv[0], "Wrong number of arguments.");
                }

                test();
        }</data>
      <data key="d7">43.0</data>
      <data key="d8">55.0</data>
      <data key="d9">9.0</data>
      <data key="d10">9.0</data>
      <data key="d11">13.0</data>
      <data key="d12">2</data>
      <data key="d13">2</data>
      <data key="d14">2</data>
      <data key="d15">2</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="33326">
      <data key="d0">33326</data>
      <data key="d1">~LogLogPrivate</data>
      <data key="d2">1</data>
      <data key="d3">LogLogPrivate.~LogLogPrivate</data>
      <data key="d4">ANY LogLogPrivate.~LogLogPrivate ()</data>
      <data key="d5">main\cpp\loglog.cpp</data>
      <data key="d6">~LogLogPrivate()
	{
		quietMode = true; // Prevent output after deletion by onexit processing chain.
	}</data>
      <data key="d7">39.0</data>
      <data key="d8">42.0</data>
      <data key="d9">2.0</data>
      <data key="d10">2.0</data>
      <data key="d11">4.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">1</data>
      <data key="d15">1</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">ANY</data>
    </node>
    <node id="8751">
      <data key="d0">8751</data>
      <data key="d1">state</data>
      <data key="d2">3</data>
      <data key="d3">LOG4CXX_NS.helpers.LocaleCharsetDecoder.state</data>
      <data key="d4" />
      <data key="d5">main\cpp\charsetdecoder.cpp</data>
      <data key="d6">state</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">2</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="12848">
      <data key="d0">12848</data>
      <data key="d1">newInstance</data>
      <data key="d2">1</data>
      <data key="d3">DatePatternConverter.newInstance</data>
      <data key="d4">PatternConverterPtr DatePatternConverter.newInstance (ANY)</data>
      <data key="d5">main\cpp\datepatternconverter.cpp</data>
      <data key="d6">PatternConverterPtr DatePatternConverter::newInstance(
	const std::vector&lt;LogString&gt;&amp; options)
{
	return std::make_shared&lt;DatePatternConverter&gt;(options);
}</data>
      <data key="d7">133.0</data>
      <data key="d8">137.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">5.0</data>
      <data key="d12">3</data>
      <data key="d13">3</data>
      <data key="d14">3</data>
      <data key="d15">3</data>
      <data key="d16">2</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">PatternConverterPtr</data>
    </node>
    <node id="44591">
      <data key="d0">44591</data>
      <data key="d1">get</data>
      <data key="d2">1</data>
      <data key="d3">PropertyParser.get</data>
      <data key="d4">bool PropertyParser.get (LogString,logchar)</data>
      <data key="d5">main\cpp\properties.cpp</data>
      <data key="d6">static bool get(LogString&amp; in, logchar&amp; c)
		{
			if (in.empty())
			{
				c = 0;
				return false;
			}

			c = in[0];
			in.erase(in.begin());
			return true;
		}</data>
      <data key="d7">368.0</data>
      <data key="d8">379.0</data>
      <data key="d9">3.0</data>
      <data key="d10">3.0</data>
      <data key="d11">12.0</data>
      <data key="d12">6</data>
      <data key="d13">3</data>
      <data key="d14">6</data>
      <data key="d15">2</data>
      <data key="d16">18</data>
      <data key="d17">0</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">bool</data>
    </node>
    <node id="36401">
      <data key="d0">36401</data>
      <data key="d1">activateOptions</data>
      <data key="d2">1</data>
      <data key="d3">MultiprocessRollingFileAppender.activateOptions</data>
      <data key="d4">void MultiprocessRollingFileAppender.activateOptions (Pool)</data>
      <data key="d5">main\cpp\multiprocessrollingfileappender.cpp</data>
      <data key="d6">void MultiprocessRollingFileAppender::activateOptions(Pool&amp; p)
{
	if (_priv-&gt;rollingPolicy == NULL)
	{
		auto fwrp = std::make_shared&lt;FixedWindowRollingPolicy&gt;();
		fwrp-&gt;setFileNamePattern(getFile() + LOG4CXX_STR(".%i"));
		_priv-&gt;rollingPolicy = fwrp;
	}

	//
	//  if no explicit triggering policy and rolling policy is both.
	//
	if (_priv-&gt;triggeringPolicy == NULL)
	{
		TriggeringPolicyPtr trig = LOG4CXX_NS::cast&lt;TriggeringPolicy&gt;(_priv-&gt;rollingPolicy);

		if (trig != NULL)
		{
			_priv-&gt;triggeringPolicy = trig;
		}
	}

	if (_priv-&gt;triggeringPolicy == NULL)
	{
		_priv-&gt;triggeringPolicy = std::make_shared&lt;ManualTriggeringPolicy&gt;();
	}

	{
		std::lock_guard&lt;std::recursive_mutex&gt; lock(_priv-&gt;mutex);
		_priv-&gt;triggeringPolicy-&gt;activateOptions(p);
		_priv-&gt;rollingPolicy-&gt;activateOptions(p);

		try
		{
			RolloverDescriptionPtr rollover1 =
				_priv-&gt;rollingPolicy-&gt;initialize(getFile(), getAppend(), p);

			if (rollover1 != NULL)
			{
				ActionPtr syncAction(rollover1-&gt;getSynchronous()...</data>
      <data key="d7">88.0</data>
      <data key="d8">169.0</data>
      <data key="d9">1.0</data>
      <data key="d10">5.0</data>
      <data key="d11">82.0</data>
      <data key="d12">83</data>
      <data key="d13">9</data>
      <data key="d14">54</data>
      <data key="d15">14</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">10</data>
      <data key="d19">17</data>
      <data key="d20">0</data>
      <data key="d21">2</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="15922">
      <data key="d0">15922</data>
      <data key="d1">parseChildrenOfLoggerElement</data>
      <data key="d2">1</data>
      <data key="d3">DOMConfigurator.parseChildrenOfLoggerElement</data>
      <data key="d4">void DOMConfigurator.parseChildrenOfLoggerElement (ANY,ANY,apr_xml_elem*,LoggerPtr,bool,apr_xml_doc*,AppenderMap)</data>
      <data key="d5">main\cpp\domconfigurator.cpp</data>
      <data key="d6">void DOMConfigurator::parseChildrenOfLoggerElement(
	LOG4CXX_NS::helpers::Pool&amp; p,
	LOG4CXX_NS::helpers::CharsetDecoderPtr&amp; utf8Decoder,
	apr_xml_elem* loggerElement, LoggerPtr logger, bool isRoot,
	apr_xml_doc* doc,
	AppenderMap&amp; appenders)
{
	PropertySetter propSetter(logger);
	std::vector&lt;AppenderPtr&gt; newappenders;

	// Remove all existing appenders from logger. They will be
	// reconstructed if need be.
	logger-&gt;removeAllAppenders();

	for (apr_xml_elem* currentElement = loggerElement-&gt;first_child;
		currentElement;
		currentElement = currentElement-&gt;next)
	{
		std::string tagName(currentElement-&gt;name);

		if (tagName == APPENDER_REF_TAG)
		{
			AppenderPtr appender = findAppenderByReference(p, utf8Decoder, currentElement, doc, appenders);
			LogString refName =  subst(getAttribute(utf8Decoder, currentElement, REF_ATTR));

			if (appender != 0)
			{
				LogLog::debug(LOG4CXX_STR("Adding appender named [") + refName +
					LOG4CXX_STR("] to logger [") + logger-&gt;getName() + LOG4CX...</data>
      <data key="d7">504.0</data>
      <data key="d8">558.0</data>
      <data key="d9">1.0</data>
      <data key="d10">17.0</data>
      <data key="d11">55.0</data>
      <data key="d12">19</data>
      <data key="d13">8</data>
      <data key="d14">27</data>
      <data key="d15">15</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">4</data>
      <data key="d19">7</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">14</data>
      <data key="d26">7</data>
      <data key="d27">7</data>
      <data key="d28">void</data>
    </node>
    <node id="65076">
      <data key="d0">65076</data>
      <data key="d1">m_otherCategory</data>
      <data key="d2">3</data>
      <data key="d3">LOG4CXX_NS.LevelChange.m_otherCategory</data>
      <data key="d4" />
      <data key="d5">main\include\log4cxx\levelchange.hpp</data>
      <data key="d6">m_otherCategory</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">2</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="65077">
      <data key="d0">65077</data>
      <data key="d1">m_savedLevel</data>
      <data key="d2">3</data>
      <data key="d3">LOG4CXX_NS.LevelChange.m_savedLevel</data>
      <data key="d4" />
      <data key="d5">main\include\log4cxx\levelchange.hpp</data>
      <data key="d6">m_savedLevel</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="33334">
      <data key="d0">33334</data>
      <data key="d1">quietMode</data>
      <data key="d2">3</data>
      <data key="d3">LogLogPrivate.quietMode</data>
      <data key="d4" />
      <data key="d5">main\cpp\loglog.cpp</data>
      <data key="d6">quietMode</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="10807">
      <data key="d0">10807</data>
      <data key="d1">convertSingleSequence</data>
      <data key="d2">1</data>
      <data key="d3">convertSingleSequence</data>
      <data key="d4">LogString convertSingleSequence (LogString,Pool)</data>
      <data key="d5">main\cpp\colorstartpatternconverter.cpp</data>
      <data key="d6">static LogString convertSingleSequence(const LogString&amp; sequence, Pool&amp; pool){
	LogString strInParens;
	bool inParens = false;
	bool hasParens = false;
	size_t x = 0;

	for(x = 0; x &lt; sequence.length(); x++){
		if( sequence[x] == '(' &amp;&amp; !inParens ){
			inParens = true;
			hasParens = true;
			continue;
		}else if( sequence[x] == '(' &amp;&amp; inParens ){
			// Unbalanced parens - parse invalid
			return LOG4CXX_STR("");
		}

		if( sequence[x] == ')' &amp;&amp; inParens ){
			hasParens = true;
			inParens = false;
			break;
		}

		if( inParens ){
			strInParens.push_back(sequence[x]);
		}
	}

	if( (x != (sequence.length() - 1) || inParens) &amp;&amp; hasParens ){
		// Unbalanced parens, or more data in the string than we expected - parse invalid
		return LOG4CXX_STR("");
	}

	if(StringHelper::startsWith(sequence, LOG4CXX_STR("fg("))){
		// Parse foreground
		return colorToANSISequence(strInParens, true, pool);
	}else if(StringHelper::startsWith(sequence, LOG4CXX_STR("bg("))){
		return colorToANSISequence(s...</data>
      <data key="d7">93.0</data>
      <data key="d8">133.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">41.0</data>
      <data key="d12">25</data>
      <data key="d13">10</data>
      <data key="d14">28</data>
      <data key="d15">7</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">9</data>
      <data key="d19">10</data>
      <data key="d20">1</data>
      <data key="d21">2</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">LogString</data>
    </node>
    <node id="33336">
      <data key="d0">33336</data>
      <data key="d1">LogLog</data>
      <data key="d2">1</data>
      <data key="d3">LogLog.LogLog</data>
      <data key="d4">ANY LogLog.LogLog ()</data>
      <data key="d5">main\cpp\loglog.cpp</data>
      <data key="d6">LogLog::LogLog() :
	m_priv(std::make_unique&lt;LogLogPrivate&gt;())
{
	LogString log4cxxDebug = OptionConverter::getSystemProperty(LOG4CXX_STR("LOG4CXX_DEBUG"), LOG4CXX_STR("false"));
	m_priv-&gt;debugEnabled = OptionConverter::toBoolean(log4cxxDebug, false);
}</data>
      <data key="d7">53.0</data>
      <data key="d8">58.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">6.0</data>
      <data key="d12">5</data>
      <data key="d13">3</data>
      <data key="d14">5</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">2</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">2</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">ANY</data>
    </node>
    <node id="62009">
      <data key="d0">62009</data>
      <data key="d1">format</data>
      <data key="d2">1</data>
      <data key="d3">XMLLayout.format</data>
      <data key="d4">void XMLLayout.format (LogString,ANY,Pool)</data>
      <data key="d5">main\cpp\xmllayout.cpp</data>
      <data key="d6">void XMLLayout::format(LogString&amp; output,
	const spi::LoggingEventPtr&amp; event,
	Pool&amp; p) const
{
	output.reserve(m_priv-&gt;expectedPatternLength + event-&gt;getMessage().size());
	output.append(LOG4CXX_STR("&lt;log4j:event logger=\""));
	Transform::appendEscapingTags(output, event-&gt;getLoggerName());
	output.append(LOG4CXX_STR("\" timestamp=\""));
	StringHelper::toString(event-&gt;getTimeStamp() / 1000L, p, output);
	output.append(LOG4CXX_STR("\" level=\""));
	Transform::appendEscapingTags(output, event-&gt;getLevel()-&gt;toString());
	output.append(LOG4CXX_STR("\" thread=\""));
	Transform::appendEscapingTags(output, event-&gt;getThreadName());
	output.append(LOG4CXX_STR("\"&gt;"));
	output.append(LOG4CXX_EOL);

	output.append(LOG4CXX_STR("&lt;log4j:message&gt;&lt;![CDATA["));
	// Append the rendered message. Also make sure to escape any
	// existing CDATA sections.
	Transform::appendEscapingCDATA(output, event-&gt;getRenderedMessage());
	output.append(LOG4CXX_STR("]]&gt;&lt;/log4j:message&gt;"));
	output.append(LOG4CXX_EOL);

...</data>
      <data key="d7">77.0</data>
      <data key="d8">182.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">106.0</data>
      <data key="d12">86</data>
      <data key="d13">9</data>
      <data key="d14">122</data>
      <data key="d15">18</data>
      <data key="d16">0</data>
      <data key="d17">14</data>
      <data key="d18">9</data>
      <data key="d19">20</data>
      <data key="d20">0</data>
      <data key="d21">14</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">6</data>
      <data key="d26">3</data>
      <data key="d27">3</data>
      <data key="d28">void</data>
    </node>
    <node id="41529">
      <data key="d0">41529</data>
      <data key="d1">write</data>
      <data key="d2">1</data>
      <data key="d3">OutputStreamWriter.write</data>
      <data key="d4">void OutputStreamWriter.write (LogString,Pool)</data>
      <data key="d5">main\cpp\outputstreamwriter.cpp</data>
      <data key="d6">void OutputStreamWriter::write(const LogString&amp; str, Pool&amp; p)
{
	if (str.empty())
		return;
	if (CharsetEncoder::isTriviallyCopyable(str, m_priv-&gt;enc))
	{
		ByteBuffer buf((char*)str.data(), str.size() * sizeof (logchar));
		m_priv-&gt;out-&gt;write(buf, p);
	}
	else
	{
		enum { BUFSIZE = 1024 };
		char stackData[BUFSIZE];
		char* rawbuf = stackData;
		size_t bufSize = BUFSIZE;
#ifdef LOG4CXX_MULTI_PROCESS
		std::vector&lt;char&gt; heapData;
		// Ensure the logging event is a single write system call to keep events from each process separate
		if (bufSize &lt; str.length() * 2)
		{
			heapData.resize(bufSize = str.length() * 2);
			rawbuf = heapData.data();
		}
#endif
		ByteBuffer buf(rawbuf, bufSize);
		m_priv-&gt;enc-&gt;reset();
		LogString::const_iterator iter = str.begin();

		while (iter != str.end())
		{
			CharsetEncoder::encode(m_priv-&gt;enc, str, iter, buf);
			buf.flip();
			m_priv-&gt;out-&gt;write(buf, p);
			buf.clear();
		}

		CharsetEncoder::encode(m_priv-&gt;enc, str, iter, buf);
		m_priv-&gt;enc-&gt;fl...</data>
      <data key="d7">79.0</data>
      <data key="d8">120.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">42.0</data>
      <data key="d12">10</data>
      <data key="d13">5</data>
      <data key="d14">10</data>
      <data key="d15">6</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">3</data>
      <data key="d19">3</data>
      <data key="d20">1</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="21047">
      <data key="d0">21047</data>
      <data key="d1">run</data>
      <data key="d2">1</data>
      <data key="d3">FileWatchdog.run</data>
      <data key="d4">void FileWatchdog.run ()</data>
      <data key="d5">main\cpp\filewatchdog.cpp</data>
      <data key="d6">void FileWatchdog::run()
{
	LogString msg(LOG4CXX_STR("Checking ["));
	msg += m_priv-&gt;file.getPath();
	msg += LOG4CXX_STR("] at ");
	StringHelper::toString((int)m_priv-&gt;delay, m_priv-&gt;pool, msg);
	msg += LOG4CXX_STR(" ms interval");
	LogLog::debug(msg);

	while (!is_interrupted())
	{
		std::unique_lock&lt;std::mutex&gt; lock( m_priv-&gt;interrupt_mutex );
		if (!m_priv-&gt;interrupt.wait_for( lock, std::chrono::milliseconds( m_priv-&gt;delay ),
			std::bind(&amp;FileWatchdog::is_interrupted, this) ))
			checkAndConfigure();
	}

	LogString msg2(LOG4CXX_STR("Stop checking ["));
	msg2 += m_priv-&gt;file.getPath();
	msg2 += LOG4CXX_STR("]");
	LogLog::debug(msg2);
}</data>
      <data key="d7">121.0</data>
      <data key="d8">142.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">22.0</data>
      <data key="d12">30</data>
      <data key="d13">8</data>
      <data key="d14">25</data>
      <data key="d15">9</data>
      <data key="d16">0</data>
      <data key="d17">3</data>
      <data key="d18">3</data>
      <data key="d19">4</data>
      <data key="d20">0</data>
      <data key="d21">3</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">void</data>
    </node>
    <node id="65078">
      <data key="d0">65078</data>
      <data key="d1">LevelChange</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.LevelChange.LevelChange</data>
      <data key="d4">ANY LOG4CXX_NS.LevelChange.LevelChange (LoggerPtr,LevelPtr)</data>
      <data key="d5">main\include\log4cxx\levelchange.hpp</data>
      <data key="d6">LevelChange(const StringType&amp; otherCategory, const LoggerPtr&amp; thisCategory)
		: LevelChange(LogManager::getLogger(otherCategory), thisCategory-&gt;getLevel())
	{
	}</data>
      <data key="d7">66.0</data>
      <data key="d8">69.0</data>
      <data key="d9">2.0</data>
      <data key="d10">2.0</data>
      <data key="d11">4.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">2</data>
      <data key="d15">2</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">ANY</data>
    </node>
    <node id="52793">
      <data key="d0">52793</data>
      <data key="d1">monitor</data>
      <data key="d2">1</data>
      <data key="d3">SocketAppenderSkeleton.monitor</data>
      <data key="d4">void SocketAppenderSkeleton.monitor ()</data>
      <data key="d5">main\cpp\socketappenderskeleton.cpp</data>
      <data key="d6">void SocketAppenderSkeleton::monitor()
{
	Pool p;
	SocketPtr socket;

	while (!is_closed())
	{
		try
		{
			LogString msg(LOG4CXX_STR("Attempting connection to [")
				+ _priv-&gt;address-&gt;toString() + LOG4CXX_STR(":"));
			StringHelper::toString(_priv-&gt;port, p, msg);
			msg += LOG4CXX_STR("].");
			LogLog::debug(msg);
			socket = Socket::create(_priv-&gt;address, _priv-&gt;port);
			setSocket(socket, p);
			LogLog::debug(LOG4CXX_STR("Connection established. Exiting connector thread."));
			return;
		}
		catch (ConnectException&amp; e)
		{
			LogLog::error(LOG4CXX_STR("Remote host ")
				+ _priv-&gt;address-&gt;toString()
				+ LOG4CXX_STR(" refused connection."), e);
		}
		catch (IOException&amp; e)
		{
			LogString msg(LOG4CXX_STR("Could not connect to [")
				+ _priv-&gt;address-&gt;toString() + LOG4CXX_STR(":"));
			StringHelper::toString(_priv-&gt;port, p, msg);
			msg += LOG4CXX_STR("].");
			LogLog::error(msg, e);
		}

		if (_priv-&gt;reconnectionDelay &gt; 0)
		{
			LogString msg(LOG4CXX_STR("Waiting "));
			Str...</data>
      <data key="d7">162.0</data>
      <data key="d8">212.0</data>
      <data key="d9">1.0</data>
      <data key="d10">6.0</data>
      <data key="d11">51.0</data>
      <data key="d12">81</data>
      <data key="d13">10</data>
      <data key="d14">51</data>
      <data key="d15">12</data>
      <data key="d16">0</data>
      <data key="d17">10</data>
      <data key="d18">6</data>
      <data key="d19">9</data>
      <data key="d20">0</data>
      <data key="d21">10</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">void</data>
    </node>
    <node id="14910">
      <data key="d0">14910</data>
      <data key="d1">findAppenderByReference</data>
      <data key="d2">1</data>
      <data key="d3">DOMConfigurator.findAppenderByReference</data>
      <data key="d4">AppenderPtr DOMConfigurator.findAppenderByReference (ANY,ANY,apr_xml_elem*,apr_xml_doc*,AppenderMap)</data>
      <data key="d5">main\cpp\domconfigurator.cpp</data>
      <data key="d6">AppenderPtr DOMConfigurator::findAppenderByReference(
	LOG4CXX_NS::helpers::Pool&amp; p,
	LOG4CXX_NS::helpers::CharsetDecoderPtr&amp; utf8Decoder,
	apr_xml_elem* appenderRef,
	apr_xml_doc* doc,
	AppenderMap&amp; appenders)
{
	LogString appenderName(subst(getAttribute(utf8Decoder, appenderRef, REF_ATTR)));
	AppenderMap::const_iterator match = appenders.find(appenderName);
	AppenderPtr appender;

	if (match != appenders.end())
	{
		appender = match-&gt;second;
	}
	else if (doc)
	{
		appender = findAppenderByName(p, utf8Decoder, doc-&gt;root, doc, appenderName, appenders);

		if (appender)
		{
			appenders.insert(AppenderMap::value_type(appenderName, appender));
		}
	}

	if (!appender)
	{
		LogLog::error(LOG4CXX_STR("No appender named [") +
			appenderName + LOG4CXX_STR("] could be found."));
	}

	return appender;
}</data>
      <data key="d7">169.0</data>
      <data key="d8">201.0</data>
      <data key="d9">1.0</data>
      <data key="d10">69.0</data>
      <data key="d11">33.0</data>
      <data key="d12">10</data>
      <data key="d13">6</data>
      <data key="d14">13</data>
      <data key="d15">7</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">3</data>
      <data key="d19">3</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">10</data>
      <data key="d26">5</data>
      <data key="d27">5</data>
      <data key="d28">AppenderPtr</data>
    </node>
    <node id="58937">
      <data key="d0">58937</data>
      <data key="d1">getGMT</data>
      <data key="d2">1</data>
      <data key="d3">TimeZone.getGMT</data>
      <data key="d4">TimeZonePtr TimeZone.getGMT ()</data>
      <data key="d5">main\cpp\timezone.cpp</data>
      <data key="d6">const TimeZonePtr&amp; TimeZone::getGMT()
{
	return LOG4CXX_NS::helpers::TimeZoneImpl::GMTTimeZone::getInstance();
}</data>
      <data key="d7">196.0</data>
      <data key="d8">199.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">4.0</data>
      <data key="d12">4</data>
      <data key="d13">1</data>
      <data key="d14">4</data>
      <data key="d15">4</data>
      <data key="d16">1</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">TimeZonePtr</data>
    </node>
    <node id="49728">
      <data key="d0">49728</data>
      <data key="d1">format</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.helpers.SimpleDateFormatImpl.LiteralToken.format</data>
      <data key="d4">void LOG4CXX_NS.helpers.SimpleDateFormatImpl.LiteralToken.format (LogString,apr_time_exp_t,Pool)</data>
      <data key="d5">main\cpp\simpledateformat.cpp</data>
      <data key="d6">void format( LogString&amp; s, const apr_time_exp_t&amp;, Pool&amp; /* p */ ) const
		{
			s.append( count, ch );
		}</data>
      <data key="d7">209.0</data>
      <data key="d8">212.0</data>
      <data key="d9">3.0</data>
      <data key="d10">3.0</data>
      <data key="d11">4.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">3</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">2</data>
      <data key="d25">6</data>
      <data key="d26">3</data>
      <data key="d27">3</data>
      <data key="d28">void</data>
    </node>
    <node id="24126">
      <data key="d0">24126</data>
      <data key="d1">addHierarchyEventListener</data>
      <data key="d2">1</data>
      <data key="d3">Hierarchy.addHierarchyEventListener</data>
      <data key="d4">void Hierarchy.addHierarchyEventListener (ANY)</data>
      <data key="d5">main\cpp\hierarchy.cpp</data>
      <data key="d6">void Hierarchy::addHierarchyEventListener(const spi::HierarchyEventListenerPtr&amp; listener)
{
	std::lock_guard&lt;std::recursive_mutex&gt; lock(m_priv-&gt;mutex);

	if (std::find(m_priv-&gt;listeners.begin(), m_priv-&gt;listeners.end(), listener) != m_priv-&gt;listeners.end())
	{
		LogLog::warn(LOG4CXX_STR("Ignoring attempt to add an existent listener."));
	}
	else
	{
		m_priv-&gt;listeners.push_back(listener);
	}
}</data>
      <data key="d7">98.0</data>
      <data key="d8">110.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">13.0</data>
      <data key="d12">14</data>
      <data key="d13">5</data>
      <data key="d14">9</data>
      <data key="d15">4</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="55875">
      <data key="d0">55875</data>
      <data key="d1">getProperty</data>
      <data key="d2">1</data>
      <data key="d3">System.getProperty</data>
      <data key="d4">LogString System.getProperty (LogString)</data>
      <data key="d5">main\cpp\system.cpp</data>
      <data key="d6">LogString System::getProperty(const LogString&amp; lkey)
{
	if (lkey.empty())
	{
		throw IllegalArgumentException(LOG4CXX_STR("key is empty"));
	}

	LogString rv;

	if (lkey == LOG4CXX_STR("java.io.tmpdir"))
	{
		Pool p;
		const char* dir = NULL;
		apr_status_t stat = apr_temp_dir_get(&amp;dir, p.getAPRPool());

		if (stat == APR_SUCCESS)
		{
			Transcoder::decode(dir, rv);
		}

		return rv;
	}

	if (lkey == LOG4CXX_STR("user.dir"))
	{
		Pool p;
		char* dir = NULL;
		apr_status_t stat = apr_filepath_get(&amp;dir, APR_FILEPATH_NATIVE,
				p.getAPRPool());

		if (stat == APR_SUCCESS)
		{
			Transcoder::decode(dir, rv);
		}

		return rv;
	}

#if APR_HAS_USER

	if (lkey == LOG4CXX_STR("user.home") || lkey == LOG4CXX_STR("user.name"))
	{
		Pool pool;
		apr_uid_t userid;
		apr_gid_t groupid;
		apr_pool_t* p = pool.getAPRPool();
		apr_status_t stat = apr_uid_current(&amp;userid, &amp;groupid, p);

		if (stat == APR_SUCCESS)
		{
			char* username = NULL;
			stat = apr_uid_name_get(&amp;username, userid, p);

			if...</data>
      <data key="d7">32.0</data>
      <data key="d8">121.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">90.0</data>
      <data key="d12">24</data>
      <data key="d13">6</data>
      <data key="d14">40</data>
      <data key="d15">11</data>
      <data key="d16">1</data>
      <data key="d17">3</data>
      <data key="d18">7</data>
      <data key="d19">9</data>
      <data key="d20">0</data>
      <data key="d21">3</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">LogString</data>
    </node>
    <node id="45638">
      <data key="d0">45638</data>
      <data key="d1">parseCatsAndRenderers</data>
      <data key="d2">1</data>
      <data key="d3">PropertyConfigurator.parseCatsAndRenderers</data>
      <data key="d4">void PropertyConfigurator.parseCatsAndRenderers (ANY,ANY)</data>
      <data key="d5">main\cpp\propertyconfigurator.cpp</data>
      <data key="d6">void PropertyConfigurator::parseCatsAndRenderers(helpers::Properties&amp; props,
	spi::LoggerRepositoryPtr&amp; hierarchy)
{
	static const WideLife&lt;LogString&gt; CATEGORY_PREFIX(LOG4CXX_STR("log4j.category."));
	static const WideLife&lt;LogString&gt; LOGGER_PREFIX(LOG4CXX_STR("log4j.logger."));

	std::vector&lt;LogString&gt; names = props.propertyNames();

	std::vector&lt;LogString&gt;::iterator it = names.begin();
	std::vector&lt;LogString&gt;::iterator itEnd = names.end();

	while (it != itEnd)
	{
		LogString key = *it++;

		if (key.find(CATEGORY_PREFIX) == 0 || key.find(LOGGER_PREFIX) == 0)
		{
			LogString loggerName;

			if (key.find(CATEGORY_PREFIX) == 0)
			{
				loggerName = key.substr(CATEGORY_PREFIX.value().length());
			}
			else if (key.find(LOGGER_PREFIX.value()) == 0)
			{
				loggerName = key.substr(LOGGER_PREFIX.value().length());
			}

			LogString value = OptionConverter::findAndSubst(key, props);
			LoggerPtr logger = hierarchy-&gt;getLogger(loggerName, loggerFactory);

			bool additivity = parseAddit...</data>
      <data key="d7">269.0</data>
      <data key="d8">305.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">37.0</data>
      <data key="d12">29</data>
      <data key="d13">10</data>
      <data key="d14">39</data>
      <data key="d15">16</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">4</data>
      <data key="d19">7</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="43592">
      <data key="d0">43592</data>
      <data key="d1">createConverter</data>
      <data key="d2">1</data>
      <data key="d3">PatternParser.createConverter</data>
      <data key="d4">PatternConverterPtr PatternParser.createConverter (LogString,LogString,PatternMap,ANY)</data>
      <data key="d5">main\cpp\patternparser.cpp</data>
      <data key="d6">PatternConverterPtr PatternParser::createConverter(
	const LogString&amp; converterId,
	LogString&amp; currentLiteral,
	const PatternMap&amp; rules,
	std::vector&lt;LogString&gt;&amp; options)
{

	LogString converterName(converterId);

	for (size_t i = converterId.length(); i &gt; 0; i--)
	{
		converterName = converterName.substr(0, i);
		PatternMap::const_iterator iter = rules.find(converterName);

		if (iter != rules.end())
		{
			currentLiteral.erase(currentLiteral.begin(),
				currentLiteral.end() - (converterId.length() - i));
			return (iter-&gt;second)(options);
		}
	}

	LogLog::error(LogString(LOG4CXX_STR("Unrecognized format specifier ")) + converterId);

	return PatternConverterPtr();
}</data>
      <data key="d7">307.0</data>
      <data key="d8">332.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">26.0</data>
      <data key="d12">18</data>
      <data key="d13">7</data>
      <data key="d14">21</data>
      <data key="d15">8</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">3</data>
      <data key="d19">4</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">8</data>
      <data key="d26">4</data>
      <data key="d27">4</data>
      <data key="d28">PatternConverterPtr</data>
    </node>
    <node id="58952">
      <data key="d0">58952</data>
      <data key="d1">getTimeZone</data>
      <data key="d2">1</data>
      <data key="d3">TimeZone.getTimeZone</data>
      <data key="d4">TimeZonePtr TimeZone.getTimeZone (LogString)</data>
      <data key="d5">main\cpp\timezone.cpp</data>
      <data key="d6">const TimeZonePtr TimeZone::getTimeZone( const LogString&amp; id )
{
	const logchar gmt[] = { 0x47, 0x4D, 0x54, 0 };

	if ( id == gmt )
	{
		return LOG4CXX_NS::helpers::TimeZoneImpl::GMTTimeZone::getInstance();
	}

	if ( id.length() &gt;= 5 &amp;&amp; id.substr( 0, 3 ) == gmt )
	{
		int hours = 0;
		int minutes = 0;
		int sign = 1;

		if (id[3] == 0x2D /* '-' */)
		{
			sign = -1;
		}

		LogString off( id.substr( 4 ) );

		if ( id.length() &gt;= 7 )
		{
			size_t colonPos = off.find( 0x3A /* ':' */);

			if ( colonPos == LogString::npos )
			{
				minutes = StringHelper::toInt(off.substr(off.length() - 2));
				hours = StringHelper::toInt(off.substr(0, off.length() - 2));
			}
			else
			{
				minutes = StringHelper::toInt(off.substr(colonPos + 1));
				hours = StringHelper::toInt(off.substr(0, colonPos));
			}
		}
		else
		{
			hours = StringHelper::toInt(off);
		}

		LogString s(gmt);
		Pool p;
		LogString hh;
		StringHelper::toString(hours, p, hh);

		if (sign &gt; 0)
		{
			s.append(1, (logchar) 0x2...</data>
      <data key="d7">201.0</data>
      <data key="d8">285.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">85.0</data>
      <data key="d12">68</data>
      <data key="d13">17</data>
      <data key="d14">62</data>
      <data key="d15">20</data>
      <data key="d16">0</data>
      <data key="d17">5</data>
      <data key="d18">10</data>
      <data key="d19">17</data>
      <data key="d20">0</data>
      <data key="d21">4</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">2</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">TimeZonePtr</data>
    </node>
    <node id="40522">
      <data key="d0">40522</data>
      <data key="d1">toBoolean</data>
      <data key="d2">1</data>
      <data key="d3">OptionConverter.toBoolean</data>
      <data key="d4">bool OptionConverter.toBoolean (LogString,bool)</data>
      <data key="d5">main\cpp\optionconverter.cpp</data>
      <data key="d6">bool OptionConverter::toBoolean(const LogString&amp; value, bool dEfault)
{
	if (value.length() &gt;= 4)
	{
		if (StringHelper::equalsIgnoreCase(value.substr(0, 4),
				LOG4CXX_STR("TRUE"), LOG4CXX_STR("true")))
		{
			return true;
		}
	}

	if (dEfault &amp;&amp; value.length() &gt;= 5)
	{
		if (StringHelper::equalsIgnoreCase(value.substr(0, 5),
				LOG4CXX_STR("FALSE"), LOG4CXX_STR("false")))
		{
			return false;
		}
	}

	return dEfault;
}</data>
      <data key="d7">122.0</data>
      <data key="d8">143.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">22.0</data>
      <data key="d12">9</data>
      <data key="d13">3</data>
      <data key="d14">8</data>
      <data key="d15">3</data>
      <data key="d16">13</data>
      <data key="d17">2</data>
      <data key="d18">5</data>
      <data key="d19">7</data>
      <data key="d20">2</data>
      <data key="d21">2</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">2</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">bool</data>
    </node>
    <node id="6733">
      <data key="d0">6733</data>
      <data key="d1">add</data>
      <data key="d2">1</data>
      <data key="d3">anonymous_namespace_3.AtExitRegistryImpl.add</data>
      <data key="d4">void anonymous_namespace_3.AtExitRegistryImpl.add (void*,ANY)</data>
      <data key="d5">main\cpp\atexitregistry.cpp</data>
      <data key="d6">void add(void* key, std::function&lt;void()&gt; action)
		{
			std::lock_guard&lt;std::recursive_mutex&gt; lock(mutex);
			actions.emplace(key, std::move(action));
		}</data>
      <data key="d7">39.0</data>
      <data key="d8">43.0</data>
      <data key="d9">3.0</data>
      <data key="d10">3.0</data>
      <data key="d11">5.0</data>
      <data key="d12">6</data>
      <data key="d13">3</data>
      <data key="d14">7</data>
      <data key="d15">5</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">2</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="49742">
      <data key="d0">49742</data>
      <data key="d1">count</data>
      <data key="d2">3</data>
      <data key="d3">LOG4CXX_NS.helpers.SimpleDateFormatImpl.LiteralToken.count</data>
      <data key="d4" />
      <data key="d5">main\cpp\simpledateformat.cpp</data>
      <data key="d6">count</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="49741">
      <data key="d0">49741</data>
      <data key="d1">ch</data>
      <data key="d2">3</data>
      <data key="d3">LOG4CXX_NS.helpers.SimpleDateFormatImpl.LiteralToken.ch</data>
      <data key="d4" />
      <data key="d5">main\cpp\simpledateformat.cpp</data>
      <data key="d6">ch</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="53840">
      <data key="d0">53840</data>
      <data key="d1">toInt</data>
      <data key="d2">1</data>
      <data key="d3">StringHelper.toInt</data>
      <data key="d4">int StringHelper.toInt (LogString)</data>
      <data key="d5">main\cpp\stringhelper.cpp</data>
      <data key="d6">int StringHelper::toInt(const LogString&amp; s)
{
#if LOG4CXX_LOGCHAR_IS_UNICHAR
	std::string as;
	Transcoder::encode(s, as);
	return std::stoi(as);
#else
	return std::stoi(s);
#endif
}</data>
      <data key="d7">109.0</data>
      <data key="d8">118.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">10.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">2</data>
      <data key="d15">2</data>
      <data key="d16">5</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">int</data>
    </node>
    <node id="44624">
      <data key="d0">44624</data>
      <data key="d1">BEGIN</data>
      <data key="d2">3</data>
      <data key="d3">PropertyParser.LexemType.BEGIN</data>
      <data key="d4" />
      <data key="d5">main\cpp\properties.cpp</data>
      <data key="d6">BEGIN</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">5</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="44625">
      <data key="d0">44625</data>
      <data key="d1">KEY</data>
      <data key="d2">3</data>
      <data key="d3">PropertyParser.LexemType.KEY</data>
      <data key="d4" />
      <data key="d5">main\cpp\properties.cpp</data>
      <data key="d6">KEY</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">7</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="44626">
      <data key="d0">44626</data>
      <data key="d1">KEY_ESCAPE</data>
      <data key="d2">3</data>
      <data key="d3">PropertyParser.LexemType.KEY_ESCAPE</data>
      <data key="d4" />
      <data key="d5">main\cpp\properties.cpp</data>
      <data key="d6">KEY_ESCAPE</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">2</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="44627">
      <data key="d0">44627</data>
      <data key="d1">KEY_CONTINUE</data>
      <data key="d2">3</data>
      <data key="d3">PropertyParser.LexemType.KEY_CONTINUE</data>
      <data key="d4" />
      <data key="d5">main\cpp\properties.cpp</data>
      <data key="d6">KEY_CONTINUE</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">4</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="44628">
      <data key="d0">44628</data>
      <data key="d1">KEY_CONTINUE2</data>
      <data key="d2">3</data>
      <data key="d3">PropertyParser.LexemType.KEY_CONTINUE2</data>
      <data key="d4" />
      <data key="d5">main\cpp\properties.cpp</data>
      <data key="d6">KEY_CONTINUE2</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">2</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="32337">
      <data key="d0">32337</data>
      <data key="d1">setOption</data>
      <data key="d2">1</data>
      <data key="d3">LoggerMatchFilter.setOption</data>
      <data key="d4">void LoggerMatchFilter.setOption (LogString,LogString)</data>
      <data key="d5">main\cpp\loggermatchfilter.cpp</data>
      <data key="d6">void LoggerMatchFilter::setOption(const LogString&amp; option,
	const LogString&amp; value)
{

	if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR("LOGGERTOMATCH"), LOG4CXX_STR("loggertomatch")))
	{
		setLoggerToMatch(value);
	}
	else if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR("ACCEPTONMATCH"), LOG4CXX_STR("acceptonmatch")))
	{
		priv-&gt;acceptOnMatch = OptionConverter::toBoolean(value, priv-&gt;acceptOnMatch);
	}
}</data>
      <data key="d7">62.0</data>
      <data key="d8">76.0</data>
      <data key="d9">1.0</data>
      <data key="d10">2.0</data>
      <data key="d11">15.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">3</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">1</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="29271">
      <data key="d0">29271</data>
      <data key="d1">setOption</data>
      <data key="d2">1</data>
      <data key="d3">LevelRangeFilter.setOption</data>
      <data key="d4">void LevelRangeFilter.setOption (LogString,LogString)</data>
      <data key="d5">main\cpp\levelrangefilter.cpp</data>
      <data key="d6">void LevelRangeFilter::setOption(const LogString&amp; option,
	const LogString&amp; value)
{

	if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR("LEVELMIN"), LOG4CXX_STR("levelmin")))
	{
		priv-&gt;levelMin = OptionConverter::toLevel(value, priv-&gt;levelMin);
	}
	else if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR("LEVELMAX"), LOG4CXX_STR("levelmax")))
	{
		priv-&gt;levelMax = OptionConverter::toLevel(value, priv-&gt;levelMax);
	}
	else if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR("ACCEPTONMATCH"), LOG4CXX_STR("acceptonmatch")))
	{
		priv-&gt;acceptOnMatch = OptionConverter::toBoolean(value, priv-&gt;acceptOnMatch);
	}
}</data>
      <data key="d7">56.0</data>
      <data key="d8">75.0</data>
      <data key="d9">1.0</data>
      <data key="d10">2.0</data>
      <data key="d11">20.0</data>
      <data key="d12">9</data>
      <data key="d13">4</data>
      <data key="d14">6</data>
      <data key="d15">5</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">1</data>
      <data key="d21">2</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">2</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="44630">
      <data key="d0">44630</data>
      <data key="d1">ELEMENT</data>
      <data key="d2">3</data>
      <data key="d3">PropertyParser.LexemType.ELEMENT</data>
      <data key="d4" />
      <data key="d5">main\cpp\properties.cpp</data>
      <data key="d6">ELEMENT</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">7</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="44631">
      <data key="d0">44631</data>
      <data key="d1">ELEMENT_ESCAPE</data>
      <data key="d2">3</data>
      <data key="d3">PropertyParser.LexemType.ELEMENT_ESCAPE</data>
      <data key="d4" />
      <data key="d5">main\cpp\properties.cpp</data>
      <data key="d6">ELEMENT_ESCAPE</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">2</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="44632">
      <data key="d0">44632</data>
      <data key="d1">ELEMENT_CONTINUE</data>
      <data key="d2">3</data>
      <data key="d3">PropertyParser.LexemType.ELEMENT_CONTINUE</data>
      <data key="d4" />
      <data key="d5">main\cpp\properties.cpp</data>
      <data key="d6">ELEMENT_CONTINUE</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">4</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="44633">
      <data key="d0">44633</data>
      <data key="d1">ELEMENT_CONTINUE2</data>
      <data key="d2">3</data>
      <data key="d3">PropertyParser.LexemType.ELEMENT_CONTINUE2</data>
      <data key="d4" />
      <data key="d5">main\cpp\properties.cpp</data>
      <data key="d6">ELEMENT_CONTINUE2</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">2</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="33372">
      <data key="d0">33372</data>
      <data key="d1">setInternalDebugging</data>
      <data key="d2">1</data>
      <data key="d3">LogLog.setInternalDebugging</data>
      <data key="d4">void LogLog.setInternalDebugging (bool)</data>
      <data key="d5">main\cpp\loglog.cpp</data>
      <data key="d6">void LogLog::setInternalDebugging(bool debugEnabled1)
{
	auto p = getInstance().m_priv.get();
	std::unique_lock&lt;std::mutex&gt; lock(p-&gt;mutex);

	p-&gt;debugEnabled = debugEnabled1;
}</data>
      <data key="d7">69.0</data>
      <data key="d8">75.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">7.0</data>
      <data key="d12">10</data>
      <data key="d13">5</data>
      <data key="d14">6</data>
      <data key="d15">3</data>
      <data key="d16">2</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="44634">
      <data key="d0">44634</data>
      <data key="d1">COMMENT</data>
      <data key="d2">3</data>
      <data key="d3">PropertyParser.LexemType.COMMENT</data>
      <data key="d4" />
      <data key="d5">main\cpp\properties.cpp</data>
      <data key="d6">COMMENT</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">2</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="30299">
      <data key="d0">30299</data>
      <data key="d1">setOption</data>
      <data key="d2">1</data>
      <data key="d3">LocationInfoFilter.setOption</data>
      <data key="d4">void LocationInfoFilter.setOption (LogString,LogString)</data>
      <data key="d5">main\cpp\locationinfofilter.cpp</data>
      <data key="d6">void LocationInfoFilter::setOption(  const LogString&amp; option,
	const LogString&amp; value)
{
	LogLog::warn(option + LOG4CXX_STR(":") + value);
	if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("ACCEPTONMATCH"), LOG4CXX_STR("acceptonmatch")))
	{
		priv-&gt;acceptOnMatch = OptionConverter::toBoolean(value, priv-&gt;acceptOnMatch);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("OPERATOR"), LOG4CXX_STR("operator")))
	{
		priv-&gt;mustMatchAll = StringHelper::equalsIgnoreCase(value, LOG4CXX_STR("AND"), LOG4CXX_STR("and")) ? true : false;
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("LINENUMBER"), LOG4CXX_STR("linenumber")))
	{
		priv-&gt;lineNumber = OptionConverter::toInt(value, -1);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("METHOD"), LOG4CXX_STR("method")))
	{
		LOG4CXX_ENCODE_CHAR(sName, value);
		priv-&gt;methodName = sName;
	}
}</data>
      <data key="d7">57.0</data>
      <data key="d8">78.0</data>
      <data key="d9">1.0</data>
      <data key="d10">2.0</data>
      <data key="d11">22.0</data>
      <data key="d12">12</data>
      <data key="d13">5</data>
      <data key="d14">9</data>
      <data key="d15">6</data>
      <data key="d16">0</data>
      <data key="d17">3</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">1</data>
      <data key="d21">3</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">2</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="46689">
      <data key="d0">46689</data>
      <data key="d1">setProperties</data>
      <data key="d2">1</data>
      <data key="d3">PropertySetter.setProperties</data>
      <data key="d4">void PropertySetter.setProperties (ANY,ANY,LogString,Pool)</data>
      <data key="d5">main\cpp\propertysetter.cpp</data>
      <data key="d6">void PropertySetter::setProperties(helpers::Properties&amp; properties,
	const LogString&amp; prefix,
	Pool&amp; p)
{
	size_t len = prefix.length();

	std::vector&lt;LogString&gt; names = properties.propertyNames();
	std::vector&lt;LogString&gt;::iterator it;

	for (it = names.begin(); it != names.end(); it++)
	{
		LogString key = *it;

		// handle only properties that start with the desired frefix.
		if (key.find(prefix) == 0)
		{
			// ignore key if it contains dots after the prefix
			if (key.find(0x2E /* '.' */, len + 1) != LogString::npos)
			{
				continue;
			}

			LogString value = OptionConverter::findAndSubst(key, properties);
			key = key.substr(len);

			if (key == LOG4CXX_STR("layout")
				&amp;&amp; obj != 0
				&amp;&amp; obj-&gt;instanceof(Appender::getStaticClass()))
			{
				continue;
			}

			setProperty(key, value, p);
		}
	}

	activate(p);
}</data>
      <data key="d7">47.0</data>
      <data key="d8">84.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">38.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">4</data>
      <data key="d15">4</data>
      <data key="d16">5</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">6</data>
      <data key="d26">3</data>
      <data key="d27">3</data>
      <data key="d28">void</data>
    </node>
    <node id="23139">
      <data key="d0">23139</data>
      <data key="d1">format</data>
      <data key="d2">1</data>
      <data key="d3">FullLocationPatternConverter.format</data>
      <data key="d4">void FullLocationPatternConverter.format (LoggingEventPtr,LogString,Pool)</data>
      <data key="d5">main\cpp\fulllocationpatternconverter.cpp</data>
      <data key="d6">void FullLocationPatternConverter::format(
	const LoggingEventPtr&amp; event,
	LogString&amp; toAppendTo,
	Pool&amp; p) const
{
	append(toAppendTo, event-&gt;getLocationInformation().getFileName());
	toAppendTo.append(1, (logchar) 0x28 /* '(' */);
	StringHelper::toString(
		event-&gt;getLocationInformation().getLineNumber(),
		p, toAppendTo);
	toAppendTo.append(1, (logchar) 0x29 /* ')' */);
}</data>
      <data key="d7">44.0</data>
      <data key="d8">55.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">12.0</data>
      <data key="d12">9</data>
      <data key="d13">3</data>
      <data key="d14">8</data>
      <data key="d15">4</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">6</data>
      <data key="d26">3</data>
      <data key="d27">3</data>
      <data key="d28">void</data>
    </node>
    <node id="35428">
      <data key="d0">35428</data>
      <data key="d1">clear</data>
      <data key="d2">1</data>
      <data key="d3">MDC.clear</data>
      <data key="d4">void MDC.clear ()</data>
      <data key="d5">main\cpp\mdc.cpp</data>
      <data key="d6">void MDC::clear()
{
	ThreadSpecificData* data = ThreadSpecificData::getCurrentData();

	if (data != 0)
	{
		Map&amp; map = data-&gt;getMap();
		map.erase(map.begin(), map.end());
		data-&gt;recycle();
	}
}</data>
      <data key="d7">127.0</data>
      <data key="d8">137.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">11.0</data>
      <data key="d12">9</data>
      <data key="d13">4</data>
      <data key="d14">9</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">void</data>
    </node>
    <node id="53862">
      <data key="d0">53862</data>
      <data key="d1">toString</data>
      <data key="d2">1</data>
      <data key="d3">StringHelper.toString</data>
      <data key="d4">void StringHelper.toString (int,Pool,LogString)</data>
      <data key="d5">main\cpp\stringhelper.cpp</data>
      <data key="d6">void StringHelper::toString(size_t n, Pool&amp; pool, LogString&amp; dst)
{
#if LOG4CXX_LOGCHAR_IS_WCHAR
	dst.append(std::to_wstring(n));
#else
	Transcoder::decode(std::to_string(n), dst);
#endif
}</data>
      <data key="d7">163.0</data>
      <data key="d8">170.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">8.0</data>
      <data key="d12">2</data>
      <data key="d13">1</data>
      <data key="d14">4</data>
      <data key="d15">4</data>
      <data key="d16">29</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">6</data>
      <data key="d26">3</data>
      <data key="d27">3</data>
      <data key="d28">void</data>
    </node>
    <node id="16998">
      <data key="d0">16998</data>
      <data key="d1">parse</data>
      <data key="d2">1</data>
      <data key="d3">DOMConfigurator.parse</data>
      <data key="d4">void DOMConfigurator.parse (Pool,ANY,apr_xml_elem*,apr_xml_doc*,AppenderMap)</data>
      <data key="d5">main\cpp\domconfigurator.cpp</data>
      <data key="d6">void DOMConfigurator::parse(
	Pool&amp; p,
	LOG4CXX_NS::helpers::CharsetDecoderPtr&amp; utf8Decoder,
	apr_xml_elem* element,
	apr_xml_doc* doc,
	AppenderMap&amp; appenders)
{
	std::string rootElementName(element-&gt;name);

	if (rootElementName != CONFIGURATION_TAG)
	{
		if (rootElementName == OLD_CONFIGURATION_TAG)
		{
			//LogLog::warn(LOG4CXX_STR("The &lt;")+String(OLD_CONFIGURATION_TAG)+
			// LOG4CXX_STR("&gt; element has been deprecated."));
			//LogLog::warn(LOG4CXX_STR("Use the &lt;")+String(CONFIGURATION_TAG)+
			// LOG4CXX_STR("&gt; element instead."));
		}
		else
		{
			LogLog::error(LOG4CXX_STR("DOM element is - not a &lt;configuration&gt; element."));
			return;
		}
	}

	LogString debugAttrib = subst(getAttribute(utf8Decoder, element, INTERNAL_DEBUG_ATTR));

	static const WideLife&lt;LogString&gt; NULL_STRING(LOG4CXX_STR("NULL"));
	LogLog::debug(LOG4CXX_STR("debug attribute= \"") + debugAttrib + LOG4CXX_STR("\"."));

	// if the log4j.dtd is not specified in the XML file, then the
	// "debug" attribute is ret...</data>
      <data key="d7">991.0</data>
      <data key="d8">1101.0</data>
      <data key="d9">1.0</data>
      <data key="d10">24.0</data>
      <data key="d11">111.0</data>
      <data key="d12">55</data>
      <data key="d13">9</data>
      <data key="d14">64</data>
      <data key="d15">19</data>
      <data key="d16">0</data>
      <data key="d17">9</data>
      <data key="d18">12</data>
      <data key="d19">16</data>
      <data key="d20">0</data>
      <data key="d21">8</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">3</data>
      <data key="d25">10</data>
      <data key="d26">5</data>
      <data key="d27">5</data>
      <data key="d28">void</data>
    </node>
    <node id="6759">
      <data key="d0">6759</data>
      <data key="d1">del</data>
      <data key="d2">1</data>
      <data key="d3">anonymous_namespace_4.AtExitRegistryImpl.del</data>
      <data key="d4">void anonymous_namespace_4.AtExitRegistryImpl.del (void*)</data>
      <data key="d5">main\cpp\atexitregistry.cpp</data>
      <data key="d6">void del(void* key)
		{
			std::lock_guard&lt;std::recursive_mutex&gt; lock(mutex);
			actions.erase(key);
		}</data>
      <data key="d7">45.0</data>
      <data key="d8">49.0</data>
      <data key="d9">3.0</data>
      <data key="d10">3.0</data>
      <data key="d11">5.0</data>
      <data key="d12">5</data>
      <data key="d13">3</data>
      <data key="d14">5</data>
      <data key="d15">4</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">2</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="8810">
      <data key="d0">8810</data>
      <data key="d1">getISOLatinDecoder</data>
      <data key="d2">1</data>
      <data key="d3">CharsetDecoder.getISOLatinDecoder</data>
      <data key="d4">CharsetDecoderPtr CharsetDecoder.getISOLatinDecoder ()</data>
      <data key="d5">main\cpp\charsetdecoder.cpp</data>
      <data key="d6">CharsetDecoderPtr CharsetDecoder::getISOLatinDecoder()
{
	return std::make_shared&lt;ISOLatinCharsetDecoder&gt;();
}</data>
      <data key="d7">547.0</data>
      <data key="d8">550.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">4.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">1</data>
      <data key="d15">1</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">CharsetDecoderPtr</data>
    </node>
    <node id="8819">
      <data key="d0">8819</data>
      <data key="d1">getDecoder</data>
      <data key="d2">1</data>
      <data key="d3">CharsetDecoder.getDecoder</data>
      <data key="d4">CharsetDecoderPtr CharsetDecoder.getDecoder (LogString)</data>
      <data key="d5">main\cpp\charsetdecoder.cpp</data>
      <data key="d6">CharsetDecoderPtr CharsetDecoder::getDecoder(const LogString&amp; charset)
{
	if (StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR("UTF-8"), LOG4CXX_STR("utf-8")) ||
		StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR("UTF8"), LOG4CXX_STR("utf8")) ||
		StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR("CP65001"), LOG4CXX_STR("cp65001")))
	{
		return std::make_shared&lt;UTF8CharsetDecoder&gt;();
	}
	else if (StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR("C"), LOG4CXX_STR("c")) ||
		charset == LOG4CXX_STR("646") ||
		StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR("US-ASCII"), LOG4CXX_STR("us-ascii")) ||
		StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR("ISO646-US"), LOG4CXX_STR("iso646-US")) ||
		StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR("ANSI_X3.4-1968"), LOG4CXX_STR("ansi_x3.4-1968")) ||
		StringHelper::equalsIgnoreCase(charset, LOG4CXX_STR("CP20127"), LOG4CXX_STR("cp20127")))
	{
		return std::make_shared&lt;USASCIICharsetDecoder&gt;();
	}
	else if (StringHelper::equ...</data>
      <data key="d7">553.0</data>
      <data key="d8">586.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">34.0</data>
      <data key="d12">7</data>
      <data key="d13">3</data>
      <data key="d14">8</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">3</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">3</data>
      <data key="d21">3</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">3</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">CharsetDecoderPtr</data>
    </node>
    <node id="49784">
      <data key="d0">49784</data>
      <data key="d1">format</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.helpers.SimpleDateFormatImpl.NumericToken.format</data>
      <data key="d4">void LOG4CXX_NS.helpers.SimpleDateFormatImpl.NumericToken.format (LogString,apr_time_exp_t,Pool)</data>
      <data key="d5">main\cpp\simpledateformat.cpp</data>
      <data key="d6">void format( LogString&amp; s, const apr_time_exp_t&amp; tm, Pool&amp; p ) const
		{
			size_t initialLength = s.length();

			StringHelper::toString( getField( tm ), p, s );
			size_t finalLength = s.length();

			if ( initialLength + width &gt; finalLength )
			{
				s.insert( initialLength, ( initialLength + width ) - finalLength, (logchar) 0x30 /* '0' */);
			}
		}</data>
      <data key="d7">246.0</data>
      <data key="d8">257.0</data>
      <data key="d9">3.0</data>
      <data key="d10">3.0</data>
      <data key="d11">12.0</data>
      <data key="d12">11</data>
      <data key="d13">6</data>
      <data key="d14">16</data>
      <data key="d15">7</data>
      <data key="d16">0</data>
      <data key="d17">3</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">1</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">2</data>
      <data key="d25">6</data>
      <data key="d26">3</data>
      <data key="d27">3</data>
      <data key="d28">void</data>
    </node>
    <node id="33403">
      <data key="d0">33403</data>
      <data key="d1">debug</data>
      <data key="d2">1</data>
      <data key="d3">LogLog.debug</data>
      <data key="d4">void LogLog.debug (LogString)</data>
      <data key="d5">main\cpp\loglog.cpp</data>
      <data key="d6">void LogLog::debug(const LogString&amp; msg, const std::exception&amp; e)
{
	auto p = getInstance().m_priv.get();
	if (p &amp;&amp; !p-&gt;quietMode) // Not deleted by onexit processing?
	{
		if (!p-&gt;debugEnabled)
			return;

		std::unique_lock&lt;std::mutex&gt; lock(p-&gt;mutex);
		emit(msg);
		emit(e);
	}
}</data>
      <data key="d7">93.0</data>
      <data key="d8">105.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">13.0</data>
      <data key="d12">13</data>
      <data key="d13">7</data>
      <data key="d14">8</data>
      <data key="d15">3</data>
      <data key="d16">46</data>
      <data key="d17">0</data>
      <data key="d18">3</data>
      <data key="d19">4</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="6779">
      <data key="d0">6779</data>
      <data key="d1">mutex</data>
      <data key="d2">3</data>
      <data key="d3">anonymous_namespace_1.AtExitRegistryImpl.mutex</data>
      <data key="d4" />
      <data key="d5">main\cpp\atexitregistry.cpp</data>
      <data key="d6">mutex</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">3</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="6780">
      <data key="d0">6780</data>
      <data key="d1">actions</data>
      <data key="d2">3</data>
      <data key="d3">anonymous_namespace_1.AtExitRegistryImpl.actions</data>
      <data key="d4" />
      <data key="d5">main\cpp\atexitregistry.cpp</data>
      <data key="d6">actions</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">6</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="48770">
      <data key="d0">48770</data>
      <data key="d1">os</data>
      <data key="d2">3</data>
      <data key="d3">LOG4CXX_NS.rolling.CountingOutputStream.os</data>
      <data key="d4" />
      <data key="d5">main\cpp\rollingfileappender.cpp</data>
      <data key="d6">os</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">3</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="643">
      <data key="d0">643</data>
      <data key="d1">ConfigureLogging</data>
      <data key="d2">1</data>
      <data key="d3">com.foo.ConfigureLogging</data>
      <data key="d4">void com.foo.ConfigureLogging ()</data>
      <data key="d5">examples\cpp\com\foo\config-qt.cpp</data>
      <data key="d6">void ConfigureLogging() {
	using namespace log4cxx;
	static struct log4cxx_finalizer {
		~log4cxx_finalizer() {
			LogManager::shutdown();
		}
	} finaliser;
	QFileInfo app{QCoreApplication::applicationFilePath()};
	QString basename{app.baseName()};
	QVector&lt;QString&gt; paths =
		{ QString(".")
		, app.absoluteDir().absolutePath()
		};
	QVector&lt;QString&gt; names =
		{ QString(basename + ".xml")
		, QString(basename + ".properties")
		, QString("MyApp.properties")
		, QString("log4cxx.xml")
		, QString("log4cxx.properties")
		, QString("log4j.xml")
		, QString("log4j.properties")
	};
#if defined(_DEBUG)
	helpers::LogLog::setInternalDebugging(true);
#endif
	auto status       = spi::ConfigurationStatus::NotConfigured;
	auto selectedPath = QString();
	std::tie(status, selectedPath) = qt::Configuration::configureFromFileAndWatch(paths, names);
	if (status == spi::ConfigurationStatus::NotConfigured)
		BasicConfigurator::configure(); // Send events to the console
}</data>
      <data key="d7">31.0</data>
      <data key="d8">61.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">31.0</data>
      <data key="d12">24</data>
      <data key="d13">6</data>
      <data key="d14">25</data>
      <data key="d15">15</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">void</data>
    </node>
    <node id="25220">
      <data key="d0">25220</data>
      <data key="d1">updateChildren</data>
      <data key="d2">1</data>
      <data key="d3">Hierarchy.updateChildren</data>
      <data key="d4">void Hierarchy.updateChildren (ProvisionNode,LoggerPtr)</data>
      <data key="d5">main\cpp\hierarchy.cpp</data>
      <data key="d6">void Hierarchy::updateChildren(const Logger* parent)
{
	for (auto&amp; item : m_priv-&gt;loggers)
	{
		for (auto l = item.second; l; l = l-&gt;getParent())
		{
			if (l-&gt;getParent().get() == parent)
			{
				item.second-&gt;updateThreshold();
				break;
			}
		}
	}
}</data>
      <data key="d7">447.0</data>
      <data key="d8">460.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">14.0</data>
      <data key="d12">15</data>
      <data key="d13">6</data>
      <data key="d14">15</data>
      <data key="d15">6</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">3</data>
      <data key="d19">4</data>
      <data key="d20">1</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="48771">
      <data key="d0">48771</data>
      <data key="d1">rfa</data>
      <data key="d2">3</data>
      <data key="d3">LOG4CXX_NS.rolling.CountingOutputStream.rfa</data>
      <data key="d4" />
      <data key="d5">main\cpp\rollingfileappender.cpp</data>
      <data key="d6">* rfa</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">4</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="40584">
      <data key="d0">40584</data>
      <data key="d1">toInt</data>
      <data key="d2">1</data>
      <data key="d3">OptionConverter.toInt</data>
      <data key="d4">int OptionConverter.toInt (LogString,int)</data>
      <data key="d5">main\cpp\optionconverter.cpp</data>
      <data key="d6">int OptionConverter::toInt(const LogString&amp; value, int dEfault)
{
	LogString trimmed(StringHelper::trim(value));

	if (trimmed.empty())
	{
		return dEfault;
	}

	LOG4CXX_ENCODE_CHAR(cvalue, trimmed);

	return (int) atol(cvalue.c_str());
}</data>
      <data key="d7">145.0</data>
      <data key="d8">157.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">13.0</data>
      <data key="d12">4</data>
      <data key="d13">2</data>
      <data key="d14">7</data>
      <data key="d15">5</data>
      <data key="d16">5</data>
      <data key="d17">1</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">int</data>
    </node>
    <node id="56913">
      <data key="d0">56913</data>
      <data key="d1">acceptConnections</data>
      <data key="d2">1</data>
      <data key="d3">TelnetAppender.acceptConnections</data>
      <data key="d4">void TelnetAppender.acceptConnections ()</data>
      <data key="d5">main\cpp\telnetappender.cpp</data>
      <data key="d6">void TelnetAppender::acceptConnections()
{

	// main loop; is left when This-&gt;closed is != 0 after an accept()
	while (true)
	{
		try
		{
			SocketPtr newClient = _priv-&gt;serverSocket-&gt;accept();
			bool done = _priv-&gt;closed;

			if (done)
			{
				Pool p;
				writeStatus(newClient, LOG4CXX_STR("Log closed.\r\n"), p);
				newClient-&gt;close();

				break;
			}

			size_t count = _priv-&gt;activeConnections;

			if (count &gt;= _priv-&gt;connections.size())
			{
				Pool p;
				writeStatus(newClient, LOG4CXX_STR("Too many connections.\r\n"), p);
				newClient-&gt;close();
			}
			else
			{
				//
				//   find unoccupied connection
				//
				std::lock_guard&lt;std::recursive_mutex&gt; lock(_priv-&gt;mutex);

				for (ConnectionList::iterator iter = _priv-&gt;connections.begin();
					iter != _priv-&gt;connections.end();
					iter++)
				{
					if (*iter == NULL)
					{
						*iter = newClient;
						_priv-&gt;activeConnections++;

						break;
					}
				}

				Pool p;
				LogString oss(LOG4CXX_STR("TelnetAppender v...</data>
      <data key="d7">235.0</data>
      <data key="d8">310.0</data>
      <data key="d9">1.0</data>
      <data key="d10">25.0</data>
      <data key="d11">76.0</data>
      <data key="d12">28</data>
      <data key="d13">6</data>
      <data key="d14">19</data>
      <data key="d15">7</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">9</data>
      <data key="d19">16</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">void</data>
    </node>
    <node id="1675">
      <data key="d0">1675</data>
      <data key="d1">test</data>
      <data key="d2">1</data>
      <data key="d3">DelayedLoop.test</data>
      <data key="d4">void DelayedLoop.test ()</data>
      <data key="d5">examples\cpp\delayedloop.cpp</data>
      <data key="d6">static void test()
        {
                int i = 0;
                while(true)
                {
                   LOG4CXX_DEBUG(logger, "MSG " &lt;&lt; i++);
                        try
                        {
                                apr_sleep(1000000);
                        }
                        catch(std::exception&amp;)
                        {
                        }
                }
        }</data>
      <data key="d7">79.0</data>
      <data key="d8">93.0</data>
      <data key="d9">9.0</data>
      <data key="d10">9.0</data>
      <data key="d11">15.0</data>
      <data key="d12">3</data>
      <data key="d13">3</data>
      <data key="d14">3</data>
      <data key="d15">2</data>
      <data key="d16">1</data>
      <data key="d17">1</data>
      <data key="d18">3</data>
      <data key="d19">4</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">void</data>
    </node>
    <node id="22158">
      <data key="d0">22158</data>
      <data key="d1">purge</data>
      <data key="d2">1</data>
      <data key="d3">FixedWindowRollingPolicy.purge</data>
      <data key="d4">bool FixedWindowRollingPolicy.purge (int,int,Pool)</data>
      <data key="d5">main\cpp\fixedwindowrollingpolicy.cpp</data>
      <data key="d6">bool FixedWindowRollingPolicy::purge(int lowIndex, int highIndex, Pool&amp; p) const
{
	int suffixLength = 0;

	std::vector&lt;FileRenameActionPtr&gt; renames;
	LogString buf;
	ObjectPtr obj = std::make_shared&lt;Integer&gt;(lowIndex);
	formatFileName(obj, buf, p);

	LogString lowFilename(buf);

	if (lowFilename.compare(lowFilename.length() - 3, 3, LOG4CXX_STR(".gz")) == 0)
	{
		suffixLength = 3;
	}
	else if (lowFilename.compare(lowFilename.length() - 4, 4, LOG4CXX_STR(".zip")) == 0)
	{
		suffixLength = 4;
	}

	for (int i = lowIndex; i &lt;= highIndex; i++)
	{
		File toRenameCompressed;
		toRenameCompressed.setPath(lowFilename);
		File toRenameBase;
		toRenameBase.setPath(lowFilename.substr(0, lowFilename.length() - suffixLength));
		File* toRename = &amp;toRenameCompressed;
		bool isBase = false;
		bool exists = toRenameCompressed.exists(p);

		if (suffixLength &gt; 0)
		{
			if (exists)
			{
				if (toRenameBase.exists(p))
				{
					toRenameBase.deleteFile(p);
				}
			}
			else
			{
				toRename = &amp;toRen...</data>
      <data key="d7">257.0</data>
      <data key="d8">369.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">113.0</data>
      <data key="d12">60</data>
      <data key="d13">15</data>
      <data key="d14">73</data>
      <data key="d15">22</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">14</data>
      <data key="d19">30</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">6</data>
      <data key="d26">3</data>
      <data key="d27">3</data>
      <data key="d28">bool</data>
    </node>
    <node id="14996">
      <data key="d0">14996</data>
      <data key="d1">parseAppender</data>
      <data key="d2">1</data>
      <data key="d3">DOMConfigurator.parseAppender</data>
      <data key="d4">AppenderPtr DOMConfigurator.parseAppender (Pool,ANY,apr_xml_elem*,apr_xml_doc*,AppenderMap)</data>
      <data key="d5">main\cpp\domconfigurator.cpp</data>
      <data key="d6">AppenderPtr DOMConfigurator::parseAppender(Pool&amp; p,
	LOG4CXX_NS::helpers::CharsetDecoderPtr&amp; utf8Decoder,
	apr_xml_elem* appenderElement,
	apr_xml_doc* doc,
	AppenderMap&amp; appenders)
{

	LogString className(subst(getAttribute(utf8Decoder, appenderElement, CLASS_ATTR)));
	LogLog::debug(LOG4CXX_STR("Class name: [") + className + LOG4CXX_STR("]"));

	try
	{
		ObjectPtr instance = ObjectPtr(Loader::loadClass(className).newInstance());
		AppenderPtr appender = LOG4CXX_NS::cast&lt;Appender&gt;(instance);
		PropertySetter propSetter(appender);

		appender-&gt;setName(subst(getAttribute(utf8Decoder, appenderElement, NAME_ATTR)));

		for (apr_xml_elem* currentElement = appenderElement-&gt;first_child;
			currentElement;
			currentElement = currentElement-&gt;next)
		{

			std::string tagName(currentElement-&gt;name);

			// Parse appender parameters
			if (tagName == PARAM_TAG)
			{
				setParameter(p, utf8Decoder, currentElement, propSetter);
			}
			// Set appender layout
			else if (tagName == LAYOUT_TAG)
	...</data>
      <data key="d7">206.0</data>
      <data key="d8">321.0</data>
      <data key="d9">1.0</data>
      <data key="d10">70.0</data>
      <data key="d11">116.0</data>
      <data key="d12">17</data>
      <data key="d13">7</data>
      <data key="d14">29</data>
      <data key="d15">14</data>
      <data key="d16">0</data>
      <data key="d17">3</data>
      <data key="d18">4</data>
      <data key="d19">7</data>
      <data key="d20">0</data>
      <data key="d21">3</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">10</data>
      <data key="d26">5</data>
      <data key="d27">5</data>
      <data key="d28">AppenderPtr</data>
    </node>
    <node id="61077">
      <data key="d0">61077</data>
      <data key="d1">activateOptions</data>
      <data key="d2">1</data>
      <data key="d3">WriterAppender.activateOptions</data>
      <data key="d4">void WriterAppender.activateOptions (Pool)</data>
      <data key="d5">main\cpp\writerappender.cpp</data>
      <data key="d6">void WriterAppender::activateOptions(Pool&amp; p)
{
	int errors = 0;

	if (_priv-&gt;layout == 0)
	{
		_priv-&gt;errorHandler-&gt;error(
			((LogString) LOG4CXX_STR("No layout set for the appender named ["))
			+ _priv-&gt;name + LOG4CXX_STR("]."));
		errors++;
	}

	if (_priv-&gt;writer == 0)
	{
		_priv-&gt;errorHandler-&gt;error(
			((LogString) LOG4CXX_STR("No writer set for the appender named ["))
			+ _priv-&gt;name + LOG4CXX_STR("]."));
		errors++;
	}

	if (errors == 0)
	{
		AppenderSkeleton::activateOptions(p);
	}
}</data>
      <data key="d7">63.0</data>
      <data key="d8">87.0</data>
      <data key="d9">1.0</data>
      <data key="d10">5.0</data>
      <data key="d11">25.0</data>
      <data key="d12">33</data>
      <data key="d13">7</data>
      <data key="d14">12</data>
      <data key="d15">4</data>
      <data key="d16">2</data>
      <data key="d17">0</data>
      <data key="d18">4</data>
      <data key="d19">4</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="43678">
      <data key="d0">43678</data>
      <data key="d1">finalizeConverter</data>
      <data key="d2">1</data>
      <data key="d3">PatternParser.finalizeConverter</data>
      <data key="d4">size_t PatternParser.finalizeConverter (logchar,LogString,size_t,LogString,FormattingInfoPtr,PatternMap,ANY,ANY)</data>
      <data key="d5">main\cpp\patternparser.cpp</data>
      <data key="d6">size_t PatternParser::finalizeConverter(
	logchar c, const LogString&amp; pattern, size_t i,
	LogString&amp; currentLiteral, const FormattingInfoPtr&amp; formattingInfo,
	const PatternMap&amp;  rules,
	std::vector&lt;PatternConverterPtr&gt;&amp; patternConverters,
	std::vector&lt;FormattingInfoPtr&gt;&amp;  formattingInfos)
{
	LogString convBuf;
	i = extractConverter(c, pattern, i, convBuf, currentLiteral);

	if (convBuf.empty())
	{
		LogLog::error(LOG4CXX_STR("Empty conversion specifier"));
		patternConverters.push_back(
			LiteralPatternConverter::newInstance(currentLiteral));
		formattingInfos.push_back(FormattingInfo::getDefault());
	}
	else
	{
		LogString converterId(convBuf);

		std::vector&lt;LogString&gt; options;
		i = extractOptions(pattern, i, options);

		PatternConverterPtr pc(
			createConverter(
				converterId, currentLiteral, rules, options));

		if (pc == NULL)
		{
			LogString msg(LOG4CXX_STR("Unrecognized conversion specifier ["));
			msg.append(converterId);
			msg.append(LOG4CXX_STR("] in conversion pa...</data>
      <data key="d7">334.0</data>
      <data key="d8">392.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">59.0</data>
      <data key="d12">12</data>
      <data key="d13">3</data>
      <data key="d14">18</data>
      <data key="d15">10</data>
      <data key="d16">0</data>
      <data key="d17">3</data>
      <data key="d18">3</data>
      <data key="d19">3</data>
      <data key="d20">0</data>
      <data key="d21">2</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">16</data>
      <data key="d26">8</data>
      <data key="d27">8</data>
      <data key="d28">size_t</data>
    </node>
    <node id="65183">
      <data key="d0">65183</data>
      <data key="d1">m_hadConfiguration</data>
      <data key="d2">3</data>
      <data key="d3">LOG4CXX_NS.LoggerInstancePtr.m_hadConfiguration</data>
      <data key="d4" />
      <data key="d5">main\include\log4cxx\loggerinstance.hpp</data>
      <data key="d6">m_hadConfiguration</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="65184">
      <data key="d0">65184</data>
      <data key="d1">m_logger</data>
      <data key="d2">3</data>
      <data key="d3">LOG4CXX_NS.LoggerInstancePtr.m_logger</data>
      <data key="d4" />
      <data key="d5">main\include\log4cxx\loggerinstance.hpp</data>
      <data key="d6">m_logger</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">6</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="13984">
      <data key="d0">13984</data>
      <data key="d1">append</data>
      <data key="d2">1</data>
      <data key="d3">DBAppender.append</data>
      <data key="d4">void DBAppender.append (ANY,ANY)</data>
      <data key="d5">main\cpp\dbappender.cpp</data>
      <data key="d6">void DBAppender::append(const spi::LoggingEventPtr&amp; event, helpers::Pool&amp; p){
	std::vector&lt;std::string&gt; ls_args;
    std::vector&lt;const char*&gt; args;
    int stat;
    int num_rows;

    if(_priv-&gt;m_driver == nullptr ||
            _priv-&gt;m_databaseHandle == nullptr ||
            _priv-&gt;preparedStmt == nullptr){
        _priv-&gt;errorHandler-&gt;error(LOG4CXX_STR("DBAppender not initialized properly: logging not available"));
        return;
    }

    for(auto&amp; converter : _priv-&gt;converters){
        LogString str_data;
        converter-&gt;format(event, str_data, p);
		LOG4CXX_ENCODE_CHAR(new_str_data, str_data);
		ls_args.push_back(new_str_data);
    }

	for(std::string&amp; str : ls_args){
        args.push_back(str.data());
    }
    args.push_back(nullptr);

    stat = apr_dbd_pquery(_priv-&gt;m_driver,
                          _priv-&gt;m_pool.getAPRPool(),
                          _priv-&gt;m_databaseHandle,
                          &amp;num_rows,
                          _priv-&gt;preparedStmt,
  ...</data>
      <data key="d7">211.0</data>
      <data key="d8">250.0</data>
      <data key="d9">1.0</data>
      <data key="d10">7.0</data>
      <data key="d11">40.0</data>
      <data key="d12">62</data>
      <data key="d13">11</data>
      <data key="d14">41</data>
      <data key="d15">16</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">5</data>
      <data key="d19">5</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="44709">
      <data key="d0">44709</data>
      <data key="d1">load</data>
      <data key="d2">1</data>
      <data key="d3">Properties.load</data>
      <data key="d4">void Properties.load (InputStreamPtr)</data>
      <data key="d5">main\cpp\properties.cpp</data>
      <data key="d6">void Properties::load(InputStreamPtr inStream)
{
	Pool pool;
	auto lineReader = std::make_shared&lt;InputStreamReader&gt;(inStream, CharsetDecoder::getISOLatinDecoder());
	LogString contents = lineReader-&gt;read(pool);
	properties-&gt;clear();
	PropertyParser parser;
	parser.parse(contents, *this);
}</data>
      <data key="d7">430.0</data>
      <data key="d8">438.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">9.0</data>
      <data key="d12">12</data>
      <data key="d13">8</data>
      <data key="d14">11</data>
      <data key="d15">9</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="40616">
      <data key="d0">40616</data>
      <data key="d1">toFileSize</data>
      <data key="d2">1</data>
      <data key="d3">OptionConverter.toFileSize</data>
      <data key="d4">long OptionConverter.toFileSize (LogString,long)</data>
      <data key="d5">main\cpp\optionconverter.cpp</data>
      <data key="d6">long OptionConverter::toFileSize(const LogString&amp; s, long dEfault)
{
	if (s.empty())
	{
		return dEfault;
	}

	size_t index = s.find_first_of(LOG4CXX_STR("bB"));

	if (index != LogString::npos &amp;&amp; index &gt; 0)
	{
		long multiplier = 1;
		index--;

		if (s[index] == 0x6B /* 'k' */ || s[index] == 0x4B /* 'K' */)
		{
			multiplier = 1024;
		}
		else if (s[index] == 0x6D /* 'm' */ || s[index] == 0x4D /* 'M' */)
		{
			multiplier = 1024 * 1024;
		}
		else if (s[index] == 0x67 /* 'g'*/ || s[index] == 0x47 /* 'G' */)
		{
			multiplier = 1024 * 1024 * 1024;
		}

		return toInt(s.substr(0, index), 1) * multiplier;
	}

	return toInt(s, 1);
}</data>
      <data key="d7">159.0</data>
      <data key="d8">190.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">32.0</data>
      <data key="d12">17</data>
      <data key="d13">10</data>
      <data key="d14">18</data>
      <data key="d15">5</data>
      <data key="d16">2</data>
      <data key="d17">0</data>
      <data key="d18">4</data>
      <data key="d19">5</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">long</data>
    </node>
    <node id="47785">
      <data key="d0">47785</data>
      <data key="d1">activateOptions</data>
      <data key="d2">1</data>
      <data key="d3">RollingFileAppender.activateOptions</data>
      <data key="d4">void RollingFileAppender.activateOptions (Pool)</data>
      <data key="d5">main\cpp\rollingfileappender.cpp</data>
      <data key="d6">void RollingFileAppender::activateOptions(Pool&amp; p)
{
	if (!_priv-&gt;rollingPolicy)
	{
		LogLog::warn(LOG4CXX_STR("No rolling policy configured for the appender named [")
			+ _priv-&gt;name + LOG4CXX_STR("]."));
		auto fwrp = std::make_shared&lt;FixedWindowRollingPolicy&gt;();
		fwrp-&gt;setFileNamePattern(getFile() + LOG4CXX_STR(".%i"));
		_priv-&gt;rollingPolicy = fwrp;
	}

	//
	//  if no explicit triggering policy and rolling policy is both.
	//
	if (!_priv-&gt;triggeringPolicy)
	{
		TriggeringPolicyPtr trig = LOG4CXX_NS::cast&lt;TriggeringPolicy&gt;(_priv-&gt;rollingPolicy);

		if (trig != NULL)
		{
			_priv-&gt;triggeringPolicy = trig;
		}
	}

	if (!_priv-&gt;triggeringPolicy)
	{
		LogLog::warn(LOG4CXX_STR("No triggering policy configured for the appender named [")
			+ _priv-&gt;name + LOG4CXX_STR("]."));
		_priv-&gt;triggeringPolicy = std::make_shared&lt;SizeBasedTriggeringPolicy&gt;();
	}

	{
		std::lock_guard&lt;std::recursive_mutex&gt; lock(_priv-&gt;mutex);
		_priv-&gt;triggeringPolicy-&gt;activateOptions(p);
		_priv-&gt;rollingPolicy-...</data>
      <data key="d7">200.0</data>
      <data key="d8">285.0</data>
      <data key="d9">1.0</data>
      <data key="d10">6.0</data>
      <data key="d11">86.0</data>
      <data key="d12">95</data>
      <data key="d13">9</data>
      <data key="d14">55</data>
      <data key="d15">14</data>
      <data key="d16">0</data>
      <data key="d17">4</data>
      <data key="d18">10</data>
      <data key="d19">17</data>
      <data key="d20">0</data>
      <data key="d21">4</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="49833">
      <data key="d0">49833</data>
      <data key="d1">width</data>
      <data key="d2">3</data>
      <data key="d3">LOG4CXX_NS.helpers.SimpleDateFormatImpl.NumericToken.width</data>
      <data key="d4" />
      <data key="d5">main\cpp\simpledateformat.cpp</data>
      <data key="d6">width</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">2</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="28331">
      <data key="d0">28331</data>
      <data key="d1">getFormattedEventCharacterCount</data>
      <data key="d2">1</data>
      <data key="d3">Layout.getFormattedEventCharacterCount</data>
      <data key="d4">size_t Layout.getFormattedEventCharacterCount ()</data>
      <data key="d5">main\cpp\layout.cpp</data>
      <data key="d6">size_t Layout::getFormattedEventCharacterCount() const
{
	auto exampleEvent = std::make_shared&lt;spi::LoggingEvent&gt;
		( LOG4CXX_STR("example.logger")
		, Level::getDebug()
		, LOG4CXX_LOCATION
		, LogString()
		);
	LogString text;
	Pool pool;
	format(text, exampleEvent, pool);
	return text.size();
}</data>
      <data key="d7">40.0</data>
      <data key="d8">52.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">13.0</data>
      <data key="d12">9</data>
      <data key="d13">6</data>
      <data key="d14">9</data>
      <data key="d15">7</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">size_t</data>
    </node>
    <node id="65199">
      <data key="d0">65199</data>
      <data key="d1">operator -&gt;</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.LoggerInstancePtr.operator -&gt;</data>
      <data key="d4">LoggerPtr LOG4CXX_NS.LoggerInstancePtr.operator -&gt; ()</data>
      <data key="d5">main\include\log4cxx\loggerinstance.hpp</data>
      <data key="d6">const LoggerPtr&amp; operator-&gt;() const noexcept
	{
		return m_logger;
	}</data>
      <data key="d7">67.0</data>
      <data key="d8">70.0</data>
      <data key="d9">2.0</data>
      <data key="d10">2.0</data>
      <data key="d11">4.0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">1</data>
      <data key="d15">1</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">LoggerPtr</data>
    </node>
    <node id="6835">
      <data key="d0">6835</data>
      <data key="d1">configure</data>
      <data key="d2">1</data>
      <data key="d3">BasicConfigurator.configure</data>
      <data key="d4">void BasicConfigurator.configure (LayoutPtr)</data>
      <data key="d5">main\cpp\basicconfigurator.cpp</data>
      <data key="d6">void BasicConfigurator::configure(const AppenderPtr&amp; appender)
{
	LoggerPtr root = Logger::getRootLogger();
	root-&gt;addAppender(appender);
}</data>
      <data key="d7">40.0</data>
      <data key="d8">44.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">5.0</data>
      <data key="d12">14</data>
      <data key="d13">6</data>
      <data key="d14">14</data>
      <data key="d15">9</data>
      <data key="d16">2</data>
      <data key="d17">2</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">2</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="11955">
      <data key="d0">11955</data>
      <data key="d1">resize</data>
      <data key="d2">1</data>
      <data key="d3">CyclicBuffer.resize</data>
      <data key="d4">void CyclicBuffer.resize (int)</data>
      <data key="d5">main\cpp\cyclicbuffer.cpp</data>
      <data key="d6">void CyclicBuffer::resize(int newSize)
{
	if (newSize &lt; 0)
	{
		LogString msg(LOG4CXX_STR("Negative array size ["));
		Pool p;
		StringHelper::toString(newSize, p, msg);
		msg.append(LOG4CXX_STR("] not allowed."));
		throw IllegalArgumentException(msg);
	}

	if (newSize == m_priv-&gt;numElems)
	{
		return;    // nothing to do
	}

	LoggingEventList temp(newSize);

	int loopLen = newSize &lt; m_priv-&gt;numElems ? newSize : m_priv-&gt;numElems;
	int i;

	for (i = 0; i &lt; loopLen; i++)
	{
		temp[i] = m_priv-&gt;ea[m_priv-&gt;first];
		m_priv-&gt;ea[m_priv-&gt;first] = 0;

		if (++m_priv-&gt;first == m_priv-&gt;numElems)
		{
			m_priv-&gt;first = 0;
		}
	}

	m_priv-&gt;ea = temp;
	m_priv-&gt;first = 0;
	m_priv-&gt;numElems = loopLen;
	m_priv-&gt;maxSize = newSize;

	if (loopLen == newSize)
	{
		m_priv-&gt;last = 0;
	}
	else
	{
		m_priv-&gt;last = loopLen;
	}
}</data>
      <data key="d7">127.0</data>
      <data key="d8">172.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">46.0</data>
      <data key="d12">39</data>
      <data key="d13">9</data>
      <data key="d14">37</data>
      <data key="d15">8</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">6</data>
      <data key="d19">7</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="65205">
      <data key="d0">65205</data>
      <data key="d1">operator bool</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.LoggerInstancePtr.operator bool</data>
      <data key="d4">ANY LOG4CXX_NS.LoggerInstancePtr.operator bool ()</data>
      <data key="d5">main\include\log4cxx\loggerinstance.hpp</data>
      <data key="d6">explicit operator bool() const noexcept
	{
		return !!m_logger;
	}</data>
      <data key="d7">72.0</data>
      <data key="d8">75.0</data>
      <data key="d9">2.0</data>
      <data key="d10">2.0</data>
      <data key="d11">4.0</data>
      <data key="d12">2</data>
      <data key="d13">1</data>
      <data key="d14">1</data>
      <data key="d15">1</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">ANY</data>
    </node>
    <node id="60086">
      <data key="d0">60086</data>
      <data key="d1">encode</data>
      <data key="d2">1</data>
      <data key="d3">Transcoder.encode</data>
      <data key="d4">void Transcoder.encode (unsigned int,ANY)</data>
      <data key="d5">main\cpp\transcoder.cpp</data>
      <data key="d6">void Transcoder::encode(const LogString&amp; src, std::string&amp; dst)
{
#if LOG4CXX_CHARSET_UTF8 &amp;&amp; LOG4CXX_LOGCHAR_IS_UTF8
	dst.append(src);
#else
	static CharsetEncoderPtr encoder(CharsetEncoder::getDefaultEncoder());
	dst.reserve(dst.size() + src.size());
	LogString::const_iterator iter = src.begin();
#if !LOG4CXX_CHARSET_EBCDIC

	for (;
		iter != src.end() &amp;&amp; ((unsigned int) *iter) &lt; 0x80;
		iter++)
	{
		dst.append(1, *iter);
	}

#endif

	if (iter != src.end())
	{
		char buf[BUFSIZE];
		ByteBuffer out(buf, BUFSIZE);

		while (iter != src.end())
		{
			log4cxx_status_t stat = encoder-&gt;encode(src, iter, out);
			out.flip();
			dst.append(out.data(), out.limit());
			out.clear();

			if (CharsetEncoder::isError(stat))
			{
				dst.append(1, LOSSCHAR);
				iter++;
			}
		}

		encoder-&gt;encode(src, iter, out);
	}

#endif
}</data>
      <data key="d7">368.0</data>
      <data key="d8">410.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">43.0</data>
      <data key="d12">2</data>
      <data key="d13">2</data>
      <data key="d14">6</data>
      <data key="d15">4</data>
      <data key="d16">7</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="9918">
      <data key="d0">9918</data>
      <data key="d1">isTriviallyCopyable</data>
      <data key="d2">1</data>
      <data key="d3">CharsetEncoder.isTriviallyCopyable</data>
      <data key="d4">bool CharsetEncoder.isTriviallyCopyable (LogString,CharsetEncoderPtr)</data>
      <data key="d5">main\cpp\charsetencoder.cpp</data>
      <data key="d6">bool CharsetEncoder::isTriviallyCopyable(const LogString&amp; src, const CharsetEncoderPtr&amp; enc)
{
	bool result;
#if !LOG4CXX_CHARSET_EBCDIC
	if (dynamic_cast&lt;LocaleCharsetEncoder*&gt;(enc.get()))
	{
		result = src.end() == std::find_if(src.begin(), src.end()
			, [](const logchar&amp; ch) -&gt; bool { return 0x80 &lt;= (unsigned int)ch; });
	}
	else
#endif
		result = !!dynamic_cast&lt;TrivialCharsetEncoder*&gt;(enc.get());
	return result;
}</data>
      <data key="d7">631.0</data>
      <data key="d8">644.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">14.0</data>
      <data key="d12">8</data>
      <data key="d13">4</data>
      <data key="d14">7</data>
      <data key="d15">4</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">bool</data>
    </node>
    <node id="35523">
      <data key="d0">35523</data>
      <data key="d1">format</data>
      <data key="d2">1</data>
      <data key="d3">MDCPatternConverter.format</data>
      <data key="d4">void MDCPatternConverter.format (ANY,LogString,ANY)</data>
      <data key="d5">main\cpp\mdcpatternconverter.cpp</data>
      <data key="d6">void MDCPatternConverter::format
	( const spi::LoggingEventPtr&amp; event
	, LogString&amp;                  toAppendTo
	, helpers::Pool&amp;           /* p */
	) const
{
	size_t startIndex = toAppendTo.size();
	if (m_priv-&gt;name.empty()) // Full MDC required?
	{
		bool first = true;
		for (auto key : event-&gt;getMDCKeySet())
		{
			toAppendTo.append(first ? LOG4CXX_STR("{") : LOG4CXX_STR(","));
			JSONLayout::appendItem(key, toAppendTo);
			toAppendTo.append(LOG4CXX_STR(":"));
			LogString value;
			event-&gt;getMDC(key, value);
			JSONLayout::appendItem(value, toAppendTo);
			first = false;
		}
		if (!first)
			toAppendTo.append(LOG4CXX_STR("}"));
	}
	else
		event-&gt;getMDC(m_priv-&gt;name, toAppendTo);
	if (!m_priv-&gt;style.empty()) // In a quoted context?
	{
		auto quote = m_priv-&gt;style.front();
		size_t endIndex;
		while ((endIndex = toAppendTo.find(quote, startIndex)) != toAppendTo.npos)
		{
			toAppendTo.insert(endIndex + 1, 1, quote);
			startIndex = endIndex + 2;
		}
	}
}</data>
      <data key="d7">48.0</data>
      <data key="d8">83.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">36.0</data>
      <data key="d12">29</data>
      <data key="d13">7</data>
      <data key="d14">33</data>
      <data key="d15">10</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">6</data>
      <data key="d19">9</data>
      <data key="d20">0</data>
      <data key="d21">2</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">6</data>
      <data key="d26">3</data>
      <data key="d27">3</data>
      <data key="d28">void</data>
    </node>
    <node id="23235">
      <data key="d0">23235</data>
      <data key="d1">execute</data>
      <data key="d2">1</data>
      <data key="d3">GZCompressAction.execute</data>
      <data key="d4">bool GZCompressAction.execute (ANY)</data>
      <data key="d5">main\cpp\gzcompressaction.cpp</data>
      <data key="d6">bool GZCompressAction::execute(LOG4CXX_NS::helpers::Pool&amp; p) const
{
	if (priv-&gt;source.exists(p))
	{
		apr_pool_t* aprpool = p.getAPRPool();
		apr_procattr_t* attr;
		apr_status_t stat = apr_procattr_create(&amp;attr, aprpool);

		if (stat != APR_SUCCESS)
		{
			throw IOException(stat);
		}

		stat = apr_procattr_io_set(attr, APR_NO_PIPE, APR_FULL_BLOCK, APR_FULL_BLOCK);

		if (stat != APR_SUCCESS)
		{
			throw IOException(stat);
		}

		stat = apr_procattr_cmdtype_set(attr, APR_PROGRAM_PATH);

		if (stat != APR_SUCCESS)
		{
			throw IOException(stat);
		}

		//
		//   set child process output to destination file
		//
		apr_file_t* child_out;
		apr_int32_t flags = APR_FOPEN_READ | APR_FOPEN_WRITE |
			APR_FOPEN_CREATE | APR_FOPEN_TRUNCATE;
		stat = priv-&gt;destination.open(&amp;child_out, flags, APR_OS_DEFAULT, p);

		if (stat != APR_SUCCESS)
		{
			throw IOException(stat);
		}

		stat =  apr_procattr_child_out_set(attr, child_out, NULL);

		if (stat != APR_SUCCESS)
		{
			throw IOException(st...</data>
      <data key="d7">57.0</data>
      <data key="d8">174.0</data>
      <data key="d9">1.0</data>
      <data key="d10">5.0</data>
      <data key="d11">118.0</data>
      <data key="d12">87</data>
      <data key="d13">15</data>
      <data key="d14">97</data>
      <data key="d15">23</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">12</data>
      <data key="d19">23</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">bool</data>
    </node>
    <node id="24260">
      <data key="d0">24260</data>
      <data key="d1">emitNoAppenderWarning</data>
      <data key="d2">1</data>
      <data key="d3">Hierarchy.emitNoAppenderWarning</data>
      <data key="d4">void Hierarchy.emitNoAppenderWarning (Logger*)</data>
      <data key="d5">main\cpp\hierarchy.cpp</data>
      <data key="d6">void Hierarchy::emitNoAppenderWarning(const Logger* logger)
{
	bool emitWarning = false;
	{
		std::lock_guard&lt;std::recursive_mutex&gt; lock(m_priv-&gt;mutex);
		emitWarning = !m_priv-&gt;emittedNoAppenderWarning;
		m_priv-&gt;emittedNoAppenderWarning = true;
	}

	// No appender in hierarchy, warn user only once.
	if (emitWarning)
	{
		LogLog::warn(((LogString) LOG4CXX_STR("No appender could be found for logger ("))
			+ logger-&gt;getName() + LOG4CXX_STR(")."));
		LogLog::warn(LOG4CXX_STR("Please initialize the log4cxx system properly."));
	}
}</data>
      <data key="d7">128.0</data>
      <data key="d8">144.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">17.0</data>
      <data key="d12">17</data>
      <data key="d13">8</data>
      <data key="d14">11</data>
      <data key="d15">5</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">2</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="65225">
      <data key="d0">65225</data>
      <data key="d1">get</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.LoggerInstancePtr.get</data>
      <data key="d4">Logger LOG4CXX_NS.LoggerInstancePtr.get ()</data>
      <data key="d5">main\include\log4cxx\loggerinstance.hpp</data>
      <data key="d6">const Logger* get() const noexcept
	{
		return m_logger.get();
	}</data>
      <data key="d7">92.0</data>
      <data key="d8">95.0</data>
      <data key="d9">2.0</data>
      <data key="d10">2.0</data>
      <data key="d11">4.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">1</data>
      <data key="d15">1</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">Logger</data>
    </node>
    <node id="66250">
      <data key="d0">66250</data>
      <data key="d1">strnlen_s</data>
      <data key="d2">1</data>
      <data key="d3">strnlen_s</data>
      <data key="d4">size_t strnlen_s (char*,size_t)</data>
      <data key="d5">main\include\log4cxx\private\string_c11.hpp</data>
      <data key="d6">static size_t strnlen_s( const char *str, size_t strsz )
{
	size_t result = 0;
	if (!str)
		;
	else while (*str++ != 0 &amp;&amp; result &lt; strsz)
		++result;
	return result;
}</data>
      <data key="d7">31.0</data>
      <data key="d8">39.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">9.0</data>
      <data key="d12">2</data>
      <data key="d13">2</data>
      <data key="d14">3</data>
      <data key="d15">2</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">size_t</data>
    </node>
    <node id="716">
      <data key="d0">716</data>
      <data key="d1">getLogger</data>
      <data key="d2">1</data>
      <data key="d3">com.foo.getLogger</data>
      <data key="d4">ANY com.foo.getLogger (QString)</data>
      <data key="d5">examples\cpp\com\foo\config3.cpp</data>
      <data key="d6">auto getLogger(const std::string&amp; name) -&gt; LoggerPtr {
	using namespace log4cxx;
	static struct log4cxx_initializer {
		log4cxx_initializer() {
			SelectConfigurationFile();
		}
		~log4cxx_initializer() {
			LogManager::shutdown();
		}
	} initialiser;
	return name.empty()
		? LogManager::getRootLogger()
		: LogManager::getLogger(name);
}</data>
      <data key="d7">156.0</data>
      <data key="d8">169.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">14.0</data>
      <data key="d12">5</data>
      <data key="d13">2</data>
      <data key="d14">4</data>
      <data key="d15">2</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">ANY</data>
    </node>
    <node id="49869">
      <data key="d0">49869</data>
      <data key="d1">AbbreviatedMonthNameToken</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.helpers.SimpleDateFormatImpl.AbbreviatedMonthNameToken.AbbreviatedMonthNameToken</data>
      <data key="d4">ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.AbbreviatedMonthNameToken.AbbreviatedMonthNameToken (int,ANY*)</data>
      <data key="d5">main\cpp\simpledateformat.cpp</data>
      <data key="d6">AbbreviatedMonthNameToken(int, const std::locale* locale) : names( 12 )
		{
			renderFacet(locale, PatternToken::incrementMonth, 'b', 0x62, "%b", names);
		}</data>
      <data key="d7">298.0</data>
      <data key="d8">301.0</data>
      <data key="d9">3.0</data>
      <data key="d10">3.0</data>
      <data key="d11">4.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">3</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">ANY</data>
    </node>
    <node id="33492">
      <data key="d0">33492</data>
      <data key="d1">error</data>
      <data key="d2">1</data>
      <data key="d3">LogLog.error</data>
      <data key="d4">void LogLog.error (LogString)</data>
      <data key="d5">main\cpp\loglog.cpp</data>
      <data key="d6">void LogLog::error(const LogString&amp; msg, const std::exception&amp; e)
{
	auto p = getInstance().m_priv.get();
	if (p &amp;&amp; !p-&gt;quietMode) // Not deleted by onexit processing?
	{
		std::unique_lock&lt;std::mutex&gt; lock(p-&gt;mutex);
		emit(msg);
		emit(e);
	}
}</data>
      <data key="d7">119.0</data>
      <data key="d8">128.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">10.0</data>
      <data key="d12">11</data>
      <data key="d13">7</data>
      <data key="d14">7</data>
      <data key="d15">3</data>
      <data key="d16">39</data>
      <data key="d17">0</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="16084">
      <data key="d0">16084</data>
      <data key="d1">parseLayout</data>
      <data key="d2">1</data>
      <data key="d3">DOMConfigurator.parseLayout</data>
      <data key="d4">LayoutPtr DOMConfigurator.parseLayout (ANY,ANY,apr_xml_elem*)</data>
      <data key="d5">main\cpp\domconfigurator.cpp</data>
      <data key="d6">LayoutPtr DOMConfigurator::parseLayout (
	LOG4CXX_NS::helpers::Pool&amp; p,
	LOG4CXX_NS::helpers::CharsetDecoderPtr&amp; utf8Decoder,
	apr_xml_elem* layout_element)
{
	LogString className(subst(getAttribute(utf8Decoder, layout_element, CLASS_ATTR)));
	LogLog::debug(LOG4CXX_STR("Parsing layout of class: \"") + className + LOG4CXX_STR("\""));

	try
	{
		ObjectPtr instance = ObjectPtr(Loader::loadClass(className).newInstance());
		LayoutPtr layout = LOG4CXX_NS::cast&lt;Layout&gt;(instance);
		PropertySetter propSetter(layout);

		for (apr_xml_elem* currentElement = layout_element-&gt;first_child;
			currentElement;
			currentElement = currentElement-&gt;next)
		{
			std::string tagName(currentElement-&gt;name);

			if (tagName == PARAM_TAG)
			{
				setParameter(p, utf8Decoder, currentElement, propSetter);
			}
		}

		propSetter.activate(p);
		return layout;
	}
	catch (Exception&amp; oops)
	{
		LogLog::error(LOG4CXX_STR("Could not create the Layout. Reported error follows."),
			oops);
		return 0;
	}
}</data>
      <data key="d7">563.0</data>
      <data key="d8">598.0</data>
      <data key="d9">1.0</data>
      <data key="d10">69.0</data>
      <data key="d11">36.0</data>
      <data key="d12">16</data>
      <data key="d13">7</data>
      <data key="d14">26</data>
      <data key="d15">14</data>
      <data key="d16">0</data>
      <data key="d17">3</data>
      <data key="d18">4</data>
      <data key="d19">7</data>
      <data key="d20">0</data>
      <data key="d21">3</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">6</data>
      <data key="d26">3</data>
      <data key="d27">3</data>
      <data key="d28">LayoutPtr</data>
    </node>
    <node id="13014">
      <data key="d0">13014</data>
      <data key="d1">DBAppenderPriv</data>
      <data key="d2">1</data>
      <data key="d3">DBAppenderPriv.DBAppenderPriv</data>
      <data key="d4">ANY DBAppenderPriv.DBAppenderPriv ()</data>
      <data key="d5">main\cpp\dbappender.cpp</data>
      <data key="d6">DBAppenderPriv() :
        AppenderSkeletonPrivate()
	{
		static bool initialized = false;
		if (!initialized)
		{
			initialized = true;
			apr_status_t stat = apr_dbd_init(m_pool.getAPRPool());
			assert(stat == APR_SUCCESS);
		}
	}</data>
      <data key="d7">53.0</data>
      <data key="d8">63.0</data>
      <data key="d9">5.0</data>
      <data key="d10">2.0</data>
      <data key="d11">11.0</data>
      <data key="d12">6</data>
      <data key="d13">4</data>
      <data key="d14">7</data>
      <data key="d15">4</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">ANY</data>
    </node>
    <node id="65243">
      <data key="d0">65243</data>
      <data key="d1">reset</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.LoggerInstancePtr.reset</data>
      <data key="d4">void LOG4CXX_NS.LoggerInstancePtr.reset ()</data>
      <data key="d5">main\include\log4cxx\loggerinstance.hpp</data>
      <data key="d6">void reset(const StringType&amp; instanceName)
	{
		reset();
		m_hadConfiguration = !!LogManager::exists(instanceName);
		m_logger = LogManager::getLogger(instanceName);
	}</data>
      <data key="d7">115.0</data>
      <data key="d8">120.0</data>
      <data key="d9">2.0</data>
      <data key="d10">2.0</data>
      <data key="d11">6.0</data>
      <data key="d12">6</data>
      <data key="d13">5</data>
      <data key="d14">7</data>
      <data key="d15">4</data>
      <data key="d16">0</data>
      <data key="d17">5</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">2</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">4</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="45788">
      <data key="d0">45788</data>
      <data key="d1">parseAdditivityForLogger</data>
      <data key="d2">1</data>
      <data key="d3">PropertyConfigurator.parseAdditivityForLogger</data>
      <data key="d4">bool PropertyConfigurator.parseAdditivityForLogger (ANY,LoggerPtr,LogString)</data>
      <data key="d5">main\cpp\propertyconfigurator.cpp</data>
      <data key="d6">bool PropertyConfigurator::parseAdditivityForLogger(helpers::Properties&amp; props,
	LoggerPtr&amp; cat, const LogString&amp; loggerName)
{

	static const WideLife&lt;LogString&gt; ADDITIVITY_PREFIX(LOG4CXX_STR("log4j.additivity."));



	LogString value(OptionConverter::findAndSubst(ADDITIVITY_PREFIX.value() + loggerName, props));
	LogLog::debug((LogString) LOG4CXX_STR("Handling ") + ADDITIVITY_PREFIX.value()
		+ loggerName + LOG4CXX_STR("=[") +  value + LOG4CXX_STR("]"));

	// touch additivity only if necessary
	if (!value.empty())
	{
		bool additivity = OptionConverter::toBoolean(value, true);
		LogLog::debug(((LogString) LOG4CXX_STR("Setting additivity for \""))
			+ loggerName
			+ ((additivity) ?  LOG4CXX_STR("\" to true") :
				LOG4CXX_STR("\" to false")));

		return additivity;
	}

	return true;
}</data>
      <data key="d7">307.0</data>
      <data key="d8">332.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">26.0</data>
      <data key="d12">20</data>
      <data key="d13">6</data>
      <data key="d14">16</data>
      <data key="d15">7</data>
      <data key="d16">0</data>
      <data key="d17">4</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">4</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">6</data>
      <data key="d26">3</data>
      <data key="d27">3</data>
      <data key="d28">bool</data>
    </node>
    <node id="49884">
      <data key="d0">49884</data>
      <data key="d1">format</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.helpers.SimpleDateFormatImpl.AbbreviatedMonthNameToken.format</data>
      <data key="d4">void LOG4CXX_NS.helpers.SimpleDateFormatImpl.AbbreviatedMonthNameToken.format (LogString,apr_time_exp_t,Pool)</data>
      <data key="d5">main\cpp\simpledateformat.cpp</data>
      <data key="d6">void format(LogString&amp; s, const apr_time_exp_t&amp; tm, Pool&amp; /* p */ ) const
		{
			s.append( names[tm.tm_mon] );
		}</data>
      <data key="d7">303.0</data>
      <data key="d8">306.0</data>
      <data key="d9">3.0</data>
      <data key="d10">3.0</data>
      <data key="d11">4.0</data>
      <data key="d12">3</data>
      <data key="d13">2</data>
      <data key="d14">3</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">6</data>
      <data key="d26">3</data>
      <data key="d27">3</data>
      <data key="d28">void</data>
    </node>
    <node id="1760">
      <data key="d0">1760</data>
      <data key="d1">x</data>
      <data key="d2">3</data>
      <data key="d3">MyStruct.x</data>
      <data key="d4" />
      <data key="d5">examples\cpp\format-string.cpp</data>
      <data key="d6">x</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="56033">
      <data key="d0">56033</data>
      <data key="d1">write</data>
      <data key="d2">1</data>
      <data key="d3">SystemErrWriter.write</data>
      <data key="d4">void SystemErrWriter.write (LogString,Pool)</data>
      <data key="d5">main\cpp\systemerrwriter.cpp</data>
      <data key="d6">void SystemErrWriter::write(const LogString&amp; str)
{
#if LOG4CXX_WCHAR_T_API

	if (isWide())
	{
		LOG4CXX_ENCODE_WCHAR(msg, str);
		fputws(msg.c_str(), stderr);
		return;
	}

#endif
	LOG4CXX_ENCODE_CHAR(msg, str);
	fputs(msg.c_str(), stderr);
}</data>
      <data key="d7">65.0</data>
      <data key="d8">79.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">15.0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">1</data>
      <data key="d15">1</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="1761">
      <data key="d0">1761</data>
      <data key="d1">operator &lt;&lt;</data>
      <data key="d2">1</data>
      <data key="d3">operator &lt;&lt;</data>
      <data key="d4">ostream operator &lt;&lt; (ANY,MyStruct)</data>
      <data key="d5">main\include\log4cxx-qt\messagebuffer.hpp</data>
      <data key="d6">inline LOG4CXX_NS::helpers::CharMessageBuffer&amp;
operator&lt;&lt;(LOG4CXX_NS::helpers::CharMessageBuffer&amp; mb, const QString&amp; msg)
{
	LOG4CXX_DECODE_QSTRING(tmp, msg);
	return mb &lt;&lt; tmp;
}</data>
      <data key="d7">64.0</data>
      <data key="d8">69.0</data>
      <data key="d9">2.0</data>
      <data key="d10">1.0</data>
      <data key="d11">6.0</data>
      <data key="d12">4</data>
      <data key="d13">2</data>
      <data key="d14">3</data>
      <data key="d15">2</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">CharMessageBuffer</data>
    </node>
    <node id="38626">
      <data key="d0">38626</data>
      <data key="d1">getDefaultAbbreviator</data>
      <data key="d2">1</data>
      <data key="d3">NameAbbreviator.getDefaultAbbreviator</data>
      <data key="d4">NameAbbreviatorPtr NameAbbreviator.getDefaultAbbreviator ()</data>
      <data key="d5">main\cpp\nameabbreviator.cpp</data>
      <data key="d6">NameAbbreviatorPtr NameAbbreviator::getDefaultAbbreviator()
{
	static WideLife&lt;NameAbbreviatorPtr&gt; def = std::make_shared&lt;NOPAbbreviator&gt;();
	return def;
}</data>
      <data key="d7">362.0</data>
      <data key="d8">366.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">5.0</data>
      <data key="d12">2</data>
      <data key="d13">2</data>
      <data key="d14">3</data>
      <data key="d15">2</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">NameAbbreviatorPtr</data>
    </node>
    <node id="55010">
      <data key="d0">55010</data>
      <data key="d1">append</data>
      <data key="d2">1</data>
      <data key="d3">SyslogAppender.append</data>
      <data key="d4">void SyslogAppender.append (ANY,Pool)</data>
      <data key="d5">main\cpp\syslogappender.cpp</data>
      <data key="d6">void SyslogAppender::append(const spi::LoggingEventPtr&amp; event, Pool&amp; p)
{
	if  (!isAsSevereAsThreshold(event-&gt;getLevel()))
	{
		return;
	}

	LogString msg;
	std::string encoded;
	_priv-&gt;layout-&gt;format(msg, event, p);

	Transcoder::encode(msg, encoded);

	// Split up the message if it is over maxMessageLength in size.
	// According to RFC 3164, the max message length is 1024, however
	// newer systems(such as syslog-ng) can go up to 8k in size for their
	// messages.  We will append (x/y) at the end of each message
	// to indicate how far through the message we are
	std::vector&lt;LogString&gt; packets;

	if ( msg.size() &gt; _priv-&gt;maxMessageLength )
	{
		LogString::iterator start = msg.begin();

		while ( start != msg.end() )
		{
			LogString::iterator end = start + _priv-&gt;maxMessageLength - 12;

			if ( end &gt; msg.end() )
			{
				end = msg.end();
			}

			LogString newMsg = LogString( start, end );
			packets.push_back( newMsg );
			start = end;
		}

		int current = 1;

		for ( std::vector...</data>
      <data key="d7">274.0</data>
      <data key="d8">373.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">100.0</data>
      <data key="d12">80</data>
      <data key="d13">14</data>
      <data key="d14">64</data>
      <data key="d15">18</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">9</data>
      <data key="d19">14</data>
      <data key="d20">0</data>
      <data key="d21">2</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="20196">
      <data key="d0">20196</data>
      <data key="d1">newInstance</data>
      <data key="d2">1</data>
      <data key="d3">FileDatePatternConverter.newInstance</data>
      <data key="d4">PatternConverterPtr FileDatePatternConverter.newInstance (ANY)</data>
      <data key="d5">main\cpp\filedatepatternconverter.cpp</data>
      <data key="d6">PatternConverterPtr FileDatePatternConverter::newInstance(
	const std::vector&lt;LogString&gt;&amp; options)
{
	if (options.size() == 0)
	{
		std::vector&lt;LogString&gt; altOptions;
		altOptions.push_back(LOG4CXX_STR("yyyy-MM-dd"));
		return DatePatternConverter::newInstance(altOptions);
	}

	return DatePatternConverter::newInstance(options);
}</data>
      <data key="d7">27.0</data>
      <data key="d8">38.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">12.0</data>
      <data key="d12">8</data>
      <data key="d13">4</data>
      <data key="d14">9</data>
      <data key="d15">5</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">2</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">PatternConverterPtr</data>
    </node>
    <node id="46820">
      <data key="d0">46820</data>
      <data key="d1">setProperty</data>
      <data key="d2">1</data>
      <data key="d3">PropertySetter.setProperty</data>
      <data key="d4">void PropertySetter.setProperty (LogString,LogString,Pool)</data>
      <data key="d5">main\cpp\propertysetter.cpp</data>
      <data key="d6">void PropertySetter::setProperty(const LogString&amp; option,
	const LogString&amp; value,
	Pool&amp;)
{
	if (value.empty())
	{
		return;
	}

	if (obj != 0 &amp;&amp; obj-&gt;instanceof(OptionHandler::getStaticClass()))
	{
		LogLog::debug(LOG4CXX_STR("Setting option name=[") +
			option + LOG4CXX_STR("], value=[") + value + LOG4CXX_STR("]"));
		OptionHandlerPtr handler = LOG4CXX_NS::cast&lt;OptionHandler&gt;(obj);
		handler-&gt;setOption(option, value);
	}
}</data>
      <data key="d7">86.0</data>
      <data key="d8">102.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">17.0</data>
      <data key="d12">15</data>
      <data key="d13">8</data>
      <data key="d14">14</data>
      <data key="d15">7</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">3</data>
      <data key="d19">3</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">6</data>
      <data key="d26">3</data>
      <data key="d27">3</data>
      <data key="d28">void</data>
    </node>
    <node id="49900">
      <data key="d0">49900</data>
      <data key="d1">names</data>
      <data key="d2">3</data>
      <data key="d3">LOG4CXX_NS.helpers.SimpleDateFormatImpl.AbbreviatedMonthNameToken.names</data>
      <data key="d4" />
      <data key="d5">main\cpp\simpledateformat.cpp</data>
      <data key="d6">names</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">2</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="49902">
      <data key="d0">49902</data>
      <data key="d1">FullMonthNameToken</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.helpers.SimpleDateFormatImpl.FullMonthNameToken.FullMonthNameToken</data>
      <data key="d4">ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.FullMonthNameToken.FullMonthNameToken (int,ANY*)</data>
      <data key="d5">main\cpp\simpledateformat.cpp</data>
      <data key="d6">FullMonthNameToken( int width, const std::locale* locale) : names( 12 )
		{
			renderFacet(locale, PatternToken::incrementMonth, 'B', 0x42, "%B", names);
		}</data>
      <data key="d7">317.0</data>
      <data key="d8">320.0</data>
      <data key="d9">3.0</data>
      <data key="d10">3.0</data>
      <data key="d11">4.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">3</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">ANY</data>
    </node>
    <node id="39667">
      <data key="d0">39667</data>
      <data key="d1">setOption</data>
      <data key="d2">1</data>
      <data key="d3">ODBCAppender.setOption</data>
      <data key="d4">void ODBCAppender.setOption (LogString,LogString)</data>
      <data key="d5">main\cpp\odbcappender.cpp</data>
      <data key="d6">void ODBCAppender::setOption(const LogString&amp; option, const LogString&amp; value)
{
	if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("BUFFERSIZE"), LOG4CXX_STR("buffersize")))
	{
		setBufferSize((size_t)OptionConverter::toInt(value, 1));
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("PASSWORD"), LOG4CXX_STR("password")))
	{
		setPassword(value);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("SQL"), LOG4CXX_STR("sql")))
	{
		setSql(value);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("URL"), LOG4CXX_STR("url"))
		|| StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("DSN"), LOG4CXX_STR("dsn"))
		|| StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("CONNECTIONSTRING"), LOG4CXX_STR("connectionstring"))  )
	{
		setURL(value);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("USER"), LOG4CXX_STR("user")))
	{
		setUser(value);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("COLUMNMAPPING"), LOG4CXX_...</data>
      <data key="d7">174.0</data>
      <data key="d8">206.0</data>
      <data key="d9">1.0</data>
      <data key="d10">2.0</data>
      <data key="d11">33.0</data>
      <data key="d12">3</data>
      <data key="d13">2</data>
      <data key="d14">4</data>
      <data key="d15">4</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">1</data>
      <data key="d21">2</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="6904">
      <data key="d0">6904</data>
      <data key="d1">resetConfiguration</data>
      <data key="d2">1</data>
      <data key="d3">BasicConfigurator.resetConfiguration</data>
      <data key="d4">void BasicConfigurator.resetConfiguration ()</data>
      <data key="d5">main\cpp\basicconfigurator.cpp</data>
      <data key="d6">void BasicConfigurator::resetConfiguration()
{
	LogManager::resetConfiguration();
}</data>
      <data key="d7">46.0</data>
      <data key="d8">49.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">4.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">1</data>
      <data key="d15">1</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">void</data>
    </node>
    <node id="13049">
      <data key="d0">13049</data>
      <data key="d1">m_pool</data>
      <data key="d2">3</data>
      <data key="d3">DBAppenderPriv.m_pool</data>
      <data key="d4" />
      <data key="d5">main\cpp\dbappender.cpp</data>
      <data key="d6">m_pool</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="28408">
      <data key="d0">28408</data>
      <data key="d1">getError</data>
      <data key="d2">1</data>
      <data key="d3">Level.getError</data>
      <data key="d4">LevelPtr Level.getError ()</data>
      <data key="d5">main\cpp\level.cpp</data>
      <data key="d6">LevelPtr Level::getError()
{
	static WideLife&lt;LevelPtr&gt; errorLevel = std::make_shared&lt;Level&gt;(Level::ERROR_INT, LOG4CXX_STR("ERROR"), 3);
	return errorLevel;
}</data>
      <data key="d7">45.0</data>
      <data key="d8">49.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">5.0</data>
      <data key="d12">7</data>
      <data key="d13">6</data>
      <data key="d14">5</data>
      <data key="d15">3</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">LevelPtr</data>
    </node>
    <node id="49917">
      <data key="d0">49917</data>
      <data key="d1">format</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.helpers.SimpleDateFormatImpl.FullMonthNameToken.format</data>
      <data key="d4">void LOG4CXX_NS.helpers.SimpleDateFormatImpl.FullMonthNameToken.format (LogString,apr_time_exp_t,Pool)</data>
      <data key="d5">main\cpp\simpledateformat.cpp</data>
      <data key="d6">void format( LogString&amp; s, const apr_time_exp_t&amp; tm, Pool&amp; /* p */ ) const
		{
			s.append( names[tm.tm_mon] );
		}</data>
      <data key="d7">322.0</data>
      <data key="d8">325.0</data>
      <data key="d9">3.0</data>
      <data key="d10">3.0</data>
      <data key="d11">4.0</data>
      <data key="d12">3</data>
      <data key="d13">2</data>
      <data key="d14">3</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">6</data>
      <data key="d26">3</data>
      <data key="d27">3</data>
      <data key="d28">void</data>
    </node>
    <node id="13064">
      <data key="d0">13064</data>
      <data key="d1">getFormatSpecifiers</data>
      <data key="d2">1</data>
      <data key="d3">getFormatSpecifiers</data>
      <data key="d4">PatternMap getFormatSpecifiers ()</data>
      <data key="d5">main\cpp\odbcappender.cpp</data>
      <data key="d6">static PatternMap getFormatSpecifiers()
{
	PatternMap specs;
	if (specs.empty())
	{
		RULES_PUT("logger", LoggerPatternConverter);
		RULES_PUT("class", ClassNamePatternConverter);
		RULES_PUT("time", DatePatternConverter);
		RULES_PUT("shortfilename", ShortFileLocationPatternConverter);
		RULES_PUT("fullfilename", FileLocationPatternConverter);
		RULES_PUT("location", FullLocationPatternConverter);
		RULES_PUT("line", LineLocationPatternConverter);
		RULES_PUT("message", MessagePatternConverter);
		RULES_PUT("method", MethodLocationPatternConverter);
		RULES_PUT("level", LevelPatternConverter);
		RULES_PUT("thread", ThreadPatternConverter);
		RULES_PUT("threadname", ThreadUsernamePatternConverter);
		RULES_PUT("mdc", MDCPatternConverter);
		RULES_PUT("ndc", NDCPatternConverter);
	}
	return specs;
}</data>
      <data key="d7">151.0</data>
      <data key="d8">172.0</data>
      <data key="d9">1.0</data>
      <data key="d10">2.0</data>
      <data key="d11">22.0</data>
      <data key="d12">40</data>
      <data key="d13">1</data>
      <data key="d14">41</data>
      <data key="d15">14</data>
      <data key="d16">3</data>
      <data key="d17">0</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">PatternMap</data>
    </node>
    <node id="49933">
      <data key="d0">49933</data>
      <data key="d1">names</data>
      <data key="d2">3</data>
      <data key="d3">LOG4CXX_NS.helpers.SimpleDateFormatImpl.FullMonthNameToken.names</data>
      <data key="d4" />
      <data key="d5">main\cpp\simpledateformat.cpp</data>
      <data key="d6">names</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">2</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="38672">
      <data key="d0">38672</data>
      <data key="d1">getAbbreviator</data>
      <data key="d2">1</data>
      <data key="d3">NamePatternConverter.getAbbreviator</data>
      <data key="d4">NameAbbreviatorPtr NamePatternConverter.getAbbreviator (ANY)</data>
      <data key="d5">main\cpp\namepatternconverter.cpp</data>
      <data key="d6">NameAbbreviatorPtr NamePatternConverter::getAbbreviator(
	const std::vector&lt;LogString&gt;&amp; options)
{
	if (options.size() &gt; 0)
	{
		return NameAbbreviator::getAbbreviator(options[0]);
	}

	return NameAbbreviator::getDefaultAbbreviator();
}</data>
      <data key="d7">53.0</data>
      <data key="d8">62.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">10.0</data>
      <data key="d12">5</data>
      <data key="d13">3</data>
      <data key="d14">4</data>
      <data key="d15">2</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">NameAbbreviatorPtr</data>
    </node>
    <node id="61202">
      <data key="d0">61202</data>
      <data key="d1">checkEntryConditions</data>
      <data key="d2">1</data>
      <data key="d3">WriterAppender.checkEntryConditions</data>
      <data key="d4">bool WriterAppender.checkEntryConditions ()</data>
      <data key="d5">main\cpp\writerappender.cpp</data>
      <data key="d6">bool WriterAppender::checkEntryConditions() const
{
	static bool warnedClosed = false;
	static bool warnedNoWriter = false;
	static bool warnedNoLayout = false;

	if (_priv-&gt;closed)
	{
		if (!warnedClosed)
		{
			LogLog::warn(LOG4CXX_STR("Not allowed to write to a closed appender."));
			warnedClosed = true;
		}

		return false;
	}

	if (_priv-&gt;writer == 0)
	{
		if (!warnedNoWriter)
		{
			_priv-&gt;errorHandler-&gt;error(
				LogString(LOG4CXX_STR("No output stream or file set for the appender named [")) +
				_priv-&gt;name + LOG4CXX_STR("]."));
			warnedNoWriter = true;
		}

		return false;
	}

	if (_priv-&gt;layout == 0)
	{
		if (!warnedNoLayout)
		{
			_priv-&gt;errorHandler-&gt;error(
				LogString(LOG4CXX_STR("No layout set for the appender named [")) +
				_priv-&gt;name + LOG4CXX_STR("]."));
			warnedNoLayout = true;
		}
		return false;
	}

	return true;
}</data>
      <data key="d7">108.0</data>
      <data key="d8">151.0</data>
      <data key="d9">1.0</data>
      <data key="d10">5.0</data>
      <data key="d11">44.0</data>
      <data key="d12">39</data>
      <data key="d13">7</data>
      <data key="d14">17</data>
      <data key="d15">5</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">7</data>
      <data key="d19">10</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">bool</data>
    </node>
    <node id="40729">
      <data key="d0">40729</data>
      <data key="d1">findAndSubst</data>
      <data key="d2">1</data>
      <data key="d3">OptionConverter.findAndSubst</data>
      <data key="d4">LogString OptionConverter.findAndSubst (LogString,Properties)</data>
      <data key="d5">main\cpp\optionconverter.cpp</data>
      <data key="d6">LogString OptionConverter::findAndSubst(const LogString&amp; key, Properties&amp; props)
{
	LogString value(props.getProperty(key));

	if (value.empty())
	{
		return value;
	}

	try
	{
		return substVars(value, props);
	}
	catch (IllegalArgumentException&amp; e)
	{
		LogLog::error(((LogString) LOG4CXX_STR("Bad option value ["))
			+ value + LOG4CXX_STR("]."), e);
		return value;
	}
}</data>
      <data key="d7">192.0</data>
      <data key="d8">211.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">20.0</data>
      <data key="d12">6</data>
      <data key="d13">3</data>
      <data key="d14">10</data>
      <data key="d15">5</data>
      <data key="d16">9</data>
      <data key="d17">1</data>
      <data key="d18">3</data>
      <data key="d19">3</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">LogString</data>
    </node>
    <node id="54052">
      <data key="d0">54052</data>
      <data key="d1">setOption</data>
      <data key="d2">1</data>
      <data key="d3">StringMatchFilter.setOption</data>
      <data key="d4">void StringMatchFilter.setOption (LogString,LogString)</data>
      <data key="d5">main\cpp\stringmatchfilter.cpp</data>
      <data key="d6">void StringMatchFilter::setOption(const LogString&amp; option,
	const LogString&amp; value)
{

	if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR("STRINGTOMATCH"), LOG4CXX_STR("stringtomatch")))
	{
		priv-&gt;stringToMatch = value;
	}
	else if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR("ACCEPTONMATCH"), LOG4CXX_STR("acceptonmatch")))
	{
		priv-&gt;acceptOnMatch = OptionConverter::toBoolean(value, priv-&gt;acceptOnMatch);
	}
}</data>
      <data key="d7">51.0</data>
      <data key="d8">65.0</data>
      <data key="d9">1.0</data>
      <data key="d10">2.0</data>
      <data key="d11">15.0</data>
      <data key="d12">5</data>
      <data key="d13">4</data>
      <data key="d14">4</data>
      <data key="d15">4</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">1</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="25380">
      <data key="d0">25380</data>
      <data key="d1">create</data>
      <data key="d2">1</data>
      <data key="d3">Hierarchy.create</data>
      <data key="d4">HierarchyPtr Hierarchy.create ()</data>
      <data key="d5">main\cpp\hierarchy.cpp</data>
      <data key="d6">HierarchyPtr Hierarchy::create()
{
	HierarchyPtr ret(new Hierarchy);
	return ret;
}</data>
      <data key="d7">475.0</data>
      <data key="d8">479.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">5.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">2</data>
      <data key="d15">2</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">HierarchyPtr</data>
    </node>
    <node id="48932">
      <data key="d0">48932</data>
      <data key="d1">activateOptions</data>
      <data key="d2">1</data>
      <data key="d3">RollingPolicyBase.activateOptions</data>
      <data key="d4">void RollingPolicyBase.activateOptions (ANY)</data>
      <data key="d5">main\cpp\rollingpolicybase.cpp</data>
      <data key="d6">void RollingPolicyBase::activateOptions(LOG4CXX_NS::helpers::Pool&amp; /* pool */)
{
	if (m_priv-&gt;fileNamePatternStr.length() &gt; 0)
	{
		parseFileNamePattern();
	}
	else
	{
		LogString msg(LOG4CXX_STR("The FileNamePattern option must be set before using FixedWindowRollingPolicy."));
		LogString ref1(LOG4CXX_STR("See also http://logging.apache.org/log4j/codes.html#tbr_fnp_not_set"));
		LogLog::warn(msg);
		LogLog::warn(ref1);
		throw IllegalStateException();
	}
}</data>
      <data key="d7">50.0</data>
      <data key="d8">64.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">15.0</data>
      <data key="d12">3</data>
      <data key="d13">3</data>
      <data key="d14">1</data>
      <data key="d15">1</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="50985">
      <data key="d0">50985</data>
      <data key="d1">setOption</data>
      <data key="d2">1</data>
      <data key="d3">SizeBasedTriggeringPolicy.setOption</data>
      <data key="d4">void SizeBasedTriggeringPolicy.setOption (LogString,LogString)</data>
      <data key="d5">main\cpp\sizebasedtriggeringpolicy.cpp</data>
      <data key="d6">void SizeBasedTriggeringPolicy::setOption(const LogString&amp; option, const LogString&amp; value)
{
	if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR("MAXFILESIZE"),
			LOG4CXX_STR("maxfilesize")))
	{
		maxFileSize = OptionConverter::toFileSize(value, 10 * 1024 * 1024);
	}
}</data>
      <data key="d7">55.0</data>
      <data key="d8">63.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">9.0</data>
      <data key="d12">5</data>
      <data key="d13">3</data>
      <data key="d14">5</data>
      <data key="d15">5</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">1</data>
      <data key="d21">2</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">2</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="45872">
      <data key="d0">45872</data>
      <data key="d1">parseLogger</data>
      <data key="d2">1</data>
      <data key="d3">PropertyConfigurator.parseLogger</data>
      <data key="d4">void PropertyConfigurator.parseLogger (ANY,LoggerPtr,LogString,LogString,LogString,bool)</data>
      <data key="d5">main\cpp\propertyconfigurator.cpp</data>
      <data key="d6">void PropertyConfigurator::parseLogger(
	helpers::Properties&amp; props, LoggerPtr&amp; logger, const LogString&amp; /* optionKey */,
	const LogString&amp; loggerName, const LogString&amp; value, bool additivity)
{
	LogLog::debug(((LogString) LOG4CXX_STR("Parsing for ["))
		+ loggerName
		+ LOG4CXX_STR("] with value=[")
		+ value + LOG4CXX_STR("]."));

	// We must skip over ',' but not white space
	StringTokenizer st(value, LOG4CXX_STR(","));

	// If value is not in the form ", appender.." or "", then we should set
	// the level of the logger.
	if (!(value.find(LOG4CXX_STR(",")) == 0 || value.empty()))
	{
		// just to be on the safe side...
		if (!st.hasMoreTokens())
		{
			return;
		}

		LogString levelStr = st.nextToken();
		LogLog::debug((LogString) LOG4CXX_STR("Level token is [")
			+ levelStr +  LOG4CXX_STR("]."));


		// If the level value is inherited, set logger level value to
		// null. We also check that the user has not specified inherited for the
		// root logger.
		if (StringHelper::equals...</data>
      <data key="d7">337.0</data>
      <data key="d8">418.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">82.0</data>
      <data key="d12">42</data>
      <data key="d13">11</data>
      <data key="d14">38</data>
      <data key="d15">15</data>
      <data key="d16">0</data>
      <data key="d17">7</data>
      <data key="d18">9</data>
      <data key="d19">14</data>
      <data key="d20">2</data>
      <data key="d21">7</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">3</data>
      <data key="d25">12</data>
      <data key="d26">6</data>
      <data key="d27">6</data>
      <data key="d28">void</data>
    </node>
    <node id="18224">
      <data key="d0">18224</data>
      <data key="d1">setLogger</data>
      <data key="d2">1</data>
      <data key="d3">FallbackErrorHandler.setLogger</data>
      <data key="d4">void FallbackErrorHandler.setLogger (LoggerPtr)</data>
      <data key="d5">main\cpp\fallbackerrorhandler.cpp</data>
      <data key="d6">void FallbackErrorHandler::setLogger(const LoggerPtr&amp; logger)
{
	LogLog::debug(((LogString) LOG4CXX_STR("FB: Adding logger ["))
		+ logger-&gt;getName() + LOG4CXX_STR("]."));
	m_priv-&gt;loggers.push_back(logger);
}</data>
      <data key="d7">49.0</data>
      <data key="d8">54.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">6.0</data>
      <data key="d12">7</data>
      <data key="d13">4</data>
      <data key="d14">4</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="37690">
      <data key="d0">37690</data>
      <data key="d1">subAppend</data>
      <data key="d2">1</data>
      <data key="d3">MultiprocessRollingFileAppender.subAppend</data>
      <data key="d4">void MultiprocessRollingFileAppender.subAppend (LoggingEventPtr,Pool)</data>
      <data key="d5">main\cpp\multiprocessrollingfileappender.cpp</data>
      <data key="d6">void MultiprocessRollingFileAppender::subAppend(const LoggingEventPtr&amp; event, Pool&amp; p)
{
	// The rollover check must precede actual writing. This is the
	// only correct behavior for time driven triggers.
	if (
		_priv-&gt;triggeringPolicy-&gt;isTriggeringEvent(
			this, event, getFile(), getFileLength()))
	{
		//
		//   wrap rollover request in try block since
		//    rollover may fail in case read access to directory
		//    is not provided.  However appender should still be in good
		//     condition and the append should still happen.
		try
		{
			_priv-&gt;_event = event;
			rolloverInternal(p);
		}
		catch (std::exception&amp; ex)
		{
			LogLog::warn(LOG4CXX_STR("Exception during rollover attempt."));
			LogString exmsg;
			LOG4CXX_NS::helpers::Transcoder::decode(ex.what(), exmsg);
			_priv-&gt;errorHandler-&gt;error(exmsg);
		}
	}

	//do re-check before every write
	//
	apr_finfo_t finfo1, finfo2;
	apr_status_t st1, st2;
	const WriterPtr writer = getWriter();
	const FileOutputStreamPtr fos = LO...</data>
      <data key="d7">475.0</data>
      <data key="d8">537.0</data>
      <data key="d9">1.0</data>
      <data key="d10">2.0</data>
      <data key="d11">63.0</data>
      <data key="d12">52</data>
      <data key="d13">13</data>
      <data key="d14">53</data>
      <data key="d15">23</data>
      <data key="d16">0</data>
      <data key="d17">4</data>
      <data key="d18">7</data>
      <data key="d19">8</data>
      <data key="d20">0</data>
      <data key="d21">4</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="16187">
      <data key="d0">16187</data>
      <data key="d1">parseTriggeringPolicy</data>
      <data key="d2">1</data>
      <data key="d3">DOMConfigurator.parseTriggeringPolicy</data>
      <data key="d4">ObjectPtr DOMConfigurator.parseTriggeringPolicy (ANY,ANY,apr_xml_elem*)</data>
      <data key="d5">main\cpp\domconfigurator.cpp</data>
      <data key="d6">ObjectPtr DOMConfigurator::parseTriggeringPolicy (
	LOG4CXX_NS::helpers::Pool&amp; p,
	LOG4CXX_NS::helpers::CharsetDecoderPtr&amp; utf8Decoder,
	apr_xml_elem* layout_element)
{
	LogString className = subst(getAttribute(utf8Decoder, layout_element, CLASS_ATTR));
	LogLog::debug(LOG4CXX_STR("Parsing triggering policy of class: \"") + className + LOG4CXX_STR("\""));

	try
	{
		ObjectPtr instance = ObjectPtr(Loader::loadClass(className).newInstance());
		PropertySetter propSetter(instance);

		for (apr_xml_elem* currentElement = layout_element-&gt;first_child;
			currentElement;
			currentElement = currentElement-&gt;next)
		{
			std::string tagName(currentElement-&gt;name);

			if (tagName == PARAM_TAG)
			{
				setParameter(p, utf8Decoder, currentElement, propSetter);
			}
			else if (tagName == FILTER_TAG)
			{
				std::vector&lt;LOG4CXX_NS::spi::FilterPtr&gt; filters;
				parseFilters(p, utf8Decoder, currentElement, filters);
				FilterBasedTriggeringPolicyPtr fbtp = LOG4CXX_NS::cast&lt;FilterBasedTriggeringP...</data>
      <data key="d7">603.0</data>
      <data key="d8">653.0</data>
      <data key="d9">1.0</data>
      <data key="d10">71.0</data>
      <data key="d11">51.0</data>
      <data key="d12">13</data>
      <data key="d13">5</data>
      <data key="d14">23</data>
      <data key="d15">11</data>
      <data key="d16">0</data>
      <data key="d17">3</data>
      <data key="d18">4</data>
      <data key="d19">7</data>
      <data key="d20">0</data>
      <data key="d21">3</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">6</data>
      <data key="d26">3</data>
      <data key="d27">3</data>
      <data key="d28">ObjectPtr</data>
    </node>
    <node id="28477">
      <data key="d0">28477</data>
      <data key="d1">getDebug</data>
      <data key="d2">1</data>
      <data key="d3">Level.getDebug</data>
      <data key="d4">LevelPtr Level.getDebug ()</data>
      <data key="d5">main\cpp\level.cpp</data>
      <data key="d6">LevelPtr Level::getDebug()
{
	static WideLife&lt;LevelPtr&gt; debugLevel = std::make_shared&lt;Level&gt;(Level::DEBUG_INT, LOG4CXX_STR("DEBUG"), 7);
	return debugLevel;
}</data>
      <data key="d7">63.0</data>
      <data key="d8">67.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">5.0</data>
      <data key="d12">7</data>
      <data key="d13">6</data>
      <data key="d14">5</data>
      <data key="d15">3</data>
      <data key="d16">6</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">LevelPtr</data>
    </node>
    <node id="33598">
      <data key="d0">33598</data>
      <data key="d1">warn</data>
      <data key="d2">1</data>
      <data key="d3">LogLog.warn</data>
      <data key="d4">void LogLog.warn (LogString)</data>
      <data key="d5">main\cpp\loglog.cpp</data>
      <data key="d6">void LogLog::warn(const LogString&amp; msg, const std::exception&amp; e)
{
	auto p = getInstance().m_priv.get();
	if (p &amp;&amp; !p-&gt;quietMode) // Not deleted by onexit processing?
	{
		std::unique_lock&lt;std::mutex&gt; lock(p-&gt;mutex);
		emit(msg);
		emit(e);
	}
}</data>
      <data key="d7">148.0</data>
      <data key="d8">157.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">10.0</data>
      <data key="d12">11</data>
      <data key="d13">7</data>
      <data key="d14">7</data>
      <data key="d15">3</data>
      <data key="d16">35</data>
      <data key="d17">0</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="40773">
      <data key="d0">40773</data>
      <data key="d1">substVars</data>
      <data key="d2">1</data>
      <data key="d3">OptionConverter.substVars</data>
      <data key="d4">LogString OptionConverter.substVars (LogString,Properties)</data>
      <data key="d5">main\cpp\optionconverter.cpp</data>
      <data key="d6">LogString OptionConverter::substVars(const LogString&amp; val, Properties&amp; props)
{
	LogString sbuf;
	const logchar delimStartArray[] = { 0x24, 0x7B, 0 };
	const LogString delimStart(delimStartArray);
	const logchar delimStop = 0x7D; // '}';
	const size_t DELIM_START_LEN = 2;
	const size_t DELIM_STOP_LEN = 1;

	size_t i = 0;

	while (true)
	{
		size_t j = val.find(delimStart, i);

		if (j == val.npos)
		{
			// no more variables
			if (i == 0)
			{
				// this is a simple string
				return val;
			}
			else
			{
				// add the tail string which contails no variables and return the result.
				sbuf.append(val.substr(i, val.length() - i));
				return sbuf;
			}
		}
		else
		{
			sbuf.append(val.substr(i, j - i));
			size_t k = val.find(delimStop, j);

			if (k == val.npos)
			{
				LogString msg(1, (logchar) 0x22 /* '\"' */);
				msg.append(val);
				msg.append(LOG4CXX_STR("\" has no closing brace. Opening brace at position "));
				Pool p;
				StringHelper::toString(j, p, msg);
				msg.a...</data>
      <data key="d7">213.0</data>
      <data key="d8">286.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">74.0</data>
      <data key="d12">11</data>
      <data key="d13">4</data>
      <data key="d14">14</data>
      <data key="d15">8</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">4</data>
      <data key="d19">7</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">LogString</data>
    </node>
    <node id="8006">
      <data key="d0">8006</data>
      <data key="d1">millisecondFormat</data>
      <data key="d2">1</data>
      <data key="d3">CachedDateFormat.millisecondFormat</data>
      <data key="d4">void CachedDateFormat.millisecondFormat (int,LogString,int)</data>
      <data key="d5">main\cpp\cacheddateformat.cpp</data>
      <data key="d6">void CachedDateFormat::millisecondFormat(int millis,
	LogString&amp; buf,
	int offset)
{
	buf[offset] = digits[millis / 100];
	buf[offset + 1] = digits[(millis / 10) % 10];
	buf[offset + 2] = digits[millis  % 10];
}</data>
      <data key="d7">318.0</data>
      <data key="d8">325.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">8.0</data>
      <data key="d12">15</data>
      <data key="d13">5</data>
      <data key="d14">12</data>
      <data key="d15">4</data>
      <data key="d16">0</data>
      <data key="d17">3</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">3</data>
      <data key="d25">6</data>
      <data key="d26">3</data>
      <data key="d27">3</data>
      <data key="d28">void</data>
    </node>
    <node id="9032">
      <data key="d0">9032</data>
      <data key="d1">encode</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.helpers.USASCIICharsetEncoder.encode</data>
      <data key="d4">log4cxx_status_t LOG4CXX_NS.helpers.USASCIICharsetEncoder.encode (LogString,ANY,ByteBuffer)</data>
      <data key="d5">main\cpp\charsetencoder.cpp</data>
      <data key="d6">virtual log4cxx_status_t encode(const LogString&amp; in,
			LogString::const_iterator&amp; iter,
			ByteBuffer&amp; out)
		{
			log4cxx_status_t stat = APR_SUCCESS;

			if (iter != in.end())
			{
				while (out.remaining() &gt; 0 &amp;&amp; iter != in.end())
				{
					LogString::const_iterator prev(iter);
					unsigned int sv = Transcoder::decode(in, iter);

					if (sv &lt;= 0x7F)
					{
						out.put((char) sv);
					}
					else
					{
						iter = prev;
						stat = APR_BADARG;
						break;
					}
				}
			}

			return stat;
		}</data>
      <data key="d7">225.0</data>
      <data key="d8">252.0</data>
      <data key="d9">3.0</data>
      <data key="d10">3.0</data>
      <data key="d11">28.0</data>
      <data key="d12">13</data>
      <data key="d13">7</data>
      <data key="d14">16</data>
      <data key="d15">7</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">4</data>
      <data key="d19">7</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">6</data>
      <data key="d26">3</data>
      <data key="d27">3</data>
      <data key="d28">log4cxx_status_t</data>
    </node>
    <node id="48970">
      <data key="d0">48970</data>
      <data key="d1">setOption</data>
      <data key="d2">1</data>
      <data key="d3">RollingPolicyBase.setOption</data>
      <data key="d4">void RollingPolicyBase.setOption (LogString,LogString)</data>
      <data key="d5">main\cpp\rollingpolicybase.cpp</data>
      <data key="d6">void RollingPolicyBase::setOption(const LogString&amp; option, const LogString&amp; value)
{
	if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR("FILENAMEPATTERN"),
			LOG4CXX_STR("filenamepattern")))
	{
		m_priv-&gt;fileNamePatternStr = value;
	}else if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR("CREATEINTERMEDIATEDIRECTORIES"),
			LOG4CXX_STR("createintermediatedirectories")))
	{
		m_priv-&gt;createIntermediateDirectories = OptionConverter::toBoolean(value, false);
	}
}</data>
      <data key="d7">67.0</data>
      <data key="d8">80.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">14.0</data>
      <data key="d12">3</data>
      <data key="d13">3</data>
      <data key="d14">4</data>
      <data key="d15">4</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">1</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="50013">
      <data key="d0">50013</data>
      <data key="d1">AbbreviatedDayNameToken</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.helpers.SimpleDateFormatImpl.AbbreviatedDayNameToken.AbbreviatedDayNameToken</data>
      <data key="d4">ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.AbbreviatedDayNameToken.AbbreviatedDayNameToken (int,ANY*)</data>
      <data key="d5">main\cpp\simpledateformat.cpp</data>
      <data key="d6">AbbreviatedDayNameToken( int width, const std::locale* locale) : names( 7 )
		{
			renderFacet(locale, PatternToken::incrementDay, 'a', 0x61, "%a", names);
		}</data>
      <data key="d7">411.0</data>
      <data key="d8">414.0</data>
      <data key="d9">3.0</data>
      <data key="d10">3.0</data>
      <data key="d11">4.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">3</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">ANY</data>
    </node>
    <node id="43872">
      <data key="d0">43872</data>
      <data key="d1">Pool</data>
      <data key="d2">1</data>
      <data key="d3">Pool.Pool</data>
      <data key="d4">ANY Pool.Pool ()</data>
      <data key="d5">main\cpp\pool.cpp</data>
      <data key="d6">Pool::Pool(apr_pool_t* p, bool release1) : pool(p), release(release1)
{
	assert(p != NULL);
}</data>
      <data key="d7">43.0</data>
      <data key="d8">46.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">4.0</data>
      <data key="d12">5</data>
      <data key="d13">5</data>
      <data key="d14">6</data>
      <data key="d15">4</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">ANY</data>
    </node>
    <node id="35684">
      <data key="d0">35684</data>
      <data key="d1">buf</data>
      <data key="d2">3</data>
      <data key="d3">anonymous_namespace_1.StringOrStream.buf</data>
      <data key="d4" />
      <data key="d5">main\cpp\messagebuffer.cpp</data>
      <data key="d6">buf</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">4</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="35685">
      <data key="d0">35685</data>
      <data key="d1">stream</data>
      <data key="d2">3</data>
      <data key="d3">anonymous_namespace_1.StringOrStream.stream</data>
      <data key="d4" />
      <data key="d5">main\cpp\messagebuffer.cpp</data>
      <data key="d6">* stream</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">11</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="46950">
      <data key="d0">46950</data>
      <data key="d1">format</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.helpers.RelativeTimeDateFormat.format</data>
      <data key="d4">void LOG4CXX_NS.helpers.RelativeTimeDateFormat.format (LogString,log4cxx_time_t,Pool)</data>
      <data key="d5">main\cpp\relativetimedateformat.cpp</data>
      <data key="d6">void LOG4CXX_NS::helpers::RelativeTimeDateFormat::format(
	LogString&amp; s,
	log4cxx_time_t date,
	Pool&amp; p) const
{
	int64_t interval = (date - startTime) / int64_t(1000);
	StringHelper::toString(interval, p, s);
}</data>
      <data key="d7">29.0</data>
      <data key="d8">36.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">8.0</data>
      <data key="d12">4</data>
      <data key="d13">4</data>
      <data key="d14">7</data>
      <data key="d15">6</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">6</data>
      <data key="d26">3</data>
      <data key="d27">3</data>
      <data key="d28">void</data>
    </node>
    <node id="38760">
      <data key="d0">38760</data>
      <data key="d1">clear</data>
      <data key="d2">1</data>
      <data key="d3">NDC.clear</data>
      <data key="d4">void NDC.clear ()</data>
      <data key="d5">main\cpp\ndc.cpp</data>
      <data key="d6">void NDC::clear()
{
	ThreadSpecificData* data = ThreadSpecificData::getCurrentData();

	if (data != 0)
	{
		Stack&amp; stack = data-&gt;getStack();

		while (!stack.empty())
		{
			stack.pop();
		}

		data-&gt;recycle();
	}
}</data>
      <data key="d7">46.0</data>
      <data key="d8">61.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">16.0</data>
      <data key="d12">9</data>
      <data key="d13">5</data>
      <data key="d14">8</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">3</data>
      <data key="d19">4</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">void</data>
    </node>
    <node id="35690">
      <data key="d0">35690</data>
      <data key="d1">~StringOrStream</data>
      <data key="d2">1</data>
      <data key="d3">anonymous_namespace_3.StringOrStream.~StringOrStream</data>
      <data key="d4">ANY anonymous_namespace_3.StringOrStream.~StringOrStream ()</data>
      <data key="d5">main\cpp\messagebuffer.cpp</data>
      <data key="d6">~StringOrStream()
	{
#if !LOG4CXX_HAS_THREAD_LOCAL
		delete stream;
#endif
	}</data>
      <data key="d7">43.0</data>
      <data key="d8">48.0</data>
      <data key="d9">2.0</data>
      <data key="d10">2.0</data>
      <data key="d11">6.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">1</data>
      <data key="d15">1</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">ANY</data>
    </node>
    <node id="28523">
      <data key="d0">28523</data>
      <data key="d1">getAll</data>
      <data key="d2">1</data>
      <data key="d3">Level.getAll</data>
      <data key="d4">LevelPtr Level.getAll ()</data>
      <data key="d5">main\cpp\level.cpp</data>
      <data key="d6">LevelPtr Level::getAll()
{
	static WideLife&lt;LevelPtr&gt; allLevel = std::make_shared&lt;Level&gt;(Level::ALL_INT, LOG4CXX_STR("ALL"), 7);
	return allLevel;
}</data>
      <data key="d7">76.0</data>
      <data key="d8">80.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">5.0</data>
      <data key="d12">7</data>
      <data key="d13">6</data>
      <data key="d14">5</data>
      <data key="d15">3</data>
      <data key="d16">2</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">LevelPtr</data>
    </node>
    <node id="50028">
      <data key="d0">50028</data>
      <data key="d1">format</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.helpers.SimpleDateFormatImpl.AbbreviatedDayNameToken.format</data>
      <data key="d4">void LOG4CXX_NS.helpers.SimpleDateFormatImpl.AbbreviatedDayNameToken.format (LogString,apr_time_exp_t,Pool)</data>
      <data key="d5">main\cpp\simpledateformat.cpp</data>
      <data key="d6">void format( LogString&amp; s, const apr_time_exp_t&amp; tm, Pool&amp; /* p */ ) const
		{
			s.append( names[tm.tm_wday] );
		}</data>
      <data key="d7">416.0</data>
      <data key="d8">419.0</data>
      <data key="d9">3.0</data>
      <data key="d10">3.0</data>
      <data key="d11">4.0</data>
      <data key="d12">3</data>
      <data key="d13">2</data>
      <data key="d14">3</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">6</data>
      <data key="d26">3</data>
      <data key="d27">3</data>
      <data key="d28">void</data>
    </node>
    <node id="36716">
      <data key="d0">36716</data>
      <data key="d1">releaseFileLock</data>
      <data key="d2">1</data>
      <data key="d3">MultiprocessRollingFileAppender.releaseFileLock</data>
      <data key="d4">void MultiprocessRollingFileAppender.releaseFileLock (apr_file_t*)</data>
      <data key="d5">main\cpp\multiprocessrollingfileappender.cpp</data>
      <data key="d6">void MultiprocessRollingFileAppender::releaseFileLock(apr_file_t* lock_file)
{
	if (lock_file)
	{
		apr_status_t stat = apr_file_unlock(lock_file);

		if (stat != APR_SUCCESS)
		{
			LogLog::warn(LOG4CXX_STR("flock: unlock failed"));
		}

		apr_file_close(lock_file);
		lock_file = NULL;
	}
}</data>
      <data key="d7">171.0</data>
      <data key="d8">185.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">15.0</data>
      <data key="d12">4</data>
      <data key="d13">3</data>
      <data key="d14">9</data>
      <data key="d15">5</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">3</data>
      <data key="d19">4</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="56174">
      <data key="d0">56174</data>
      <data key="d1">DEFAULT_PORT</data>
      <data key="d2">2</data>
      <data key="d3">main\cpp\telnetappender.cpp.DEFAULT_PORT</data>
      <data key="d4" />
      <data key="d5">main\cpp\telnetappender.cpp</data>
      <data key="d6">const int DEFAULT_PORT</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="35696">
      <data key="d0">35696</data>
      <data key="d1">StreamFromBuf</data>
      <data key="d2">1</data>
      <data key="d3">anonymous_namespace_4.StringOrStream.StreamFromBuf</data>
      <data key="d4">basic_ostringstream&lt;T&gt; anonymous_namespace_4.StringOrStream.StreamFromBuf ()</data>
      <data key="d5">main\cpp\messagebuffer.cpp</data>
      <data key="d6">std::basic_ostringstream&lt;T&gt;&amp; StreamFromBuf()
	{
		if (!this-&gt;stream)
		{
#if LOG4CXX_HAS_THREAD_LOCAL
			const static std::basic_ostringstream&lt;T&gt; initialState;
			thread_local static std::basic_ostringstream&lt;T&gt; sStream;
			this-&gt;stream = &amp;sStream;
			this-&gt;stream-&gt;clear();
			this-&gt;stream-&gt;precision(initialState.precision());
			this-&gt;stream-&gt;width(initialState.width());
			this-&gt;stream-&gt;setf(initialState.flags(), ~initialState.flags());
			this-&gt;stream-&gt;fill(initialState.fill());
#else
			this-&gt;stream = new std::basic_ostringstream&lt;T&gt;();
#endif
			auto index = this-&gt;buf.size();
			this-&gt;stream-&gt;str(std::move(this-&gt;buf));
			this-&gt;stream-&gt;seekp(index);
		}
		return *this-&gt;stream;
	}</data>
      <data key="d7">52.0</data>
      <data key="d8">73.0</data>
      <data key="d9">2.0</data>
      <data key="d10">2.0</data>
      <data key="d11">22.0</data>
      <data key="d12">16</data>
      <data key="d13">6</data>
      <data key="d14">4</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">7</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">1</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">7</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">basic_ostringstream&lt;T&gt;</data>
    </node>
    <node id="10096">
      <data key="d0">10096</data>
      <data key="d1">forName</data>
      <data key="d2">1</data>
      <data key="d3">Class.forName</data>
      <data key="d4">Class Class.forName (LogString)</data>
      <data key="d5">main\cpp\class.cpp</data>
      <data key="d6">const Class&amp; Class::forName(const LogString&amp; className)
{
	LogString lowerName(StringHelper::toLowerCase(className));
	//
	//  check registry using full class name
	//
	const Class* clazz = getRegistry()[lowerName];

	if (clazz == 0)
	{
		LogString::size_type pos = className.find_last_of(LOG4CXX_STR(".$"));

		if (pos != LogString::npos)
		{
			LogString terminalName(lowerName, pos + 1, LogString::npos);
			clazz = getRegistry()[terminalName];

			if (clazz == 0)
			{
				registerClasses();
				clazz = getRegistry()[lowerName];

				if (clazz == 0)
				{
					clazz = getRegistry()[terminalName];
				}
			}
		}
		else
		{
			registerClasses();
			clazz = getRegistry()[lowerName];
		}
	}

	if (clazz == 0)
	{
		throw ClassNotFoundException(className);
	}

	return *clazz;
}</data>
      <data key="d7">122.0</data>
      <data key="d8">163.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">42.0</data>
      <data key="d12">21</data>
      <data key="d13">8</data>
      <data key="d14">23</data>
      <data key="d15">7</data>
      <data key="d16">1</data>
      <data key="d17">1</data>
      <data key="d18">6</data>
      <data key="d19">12</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">Class</data>
    </node>
    <node id="32634">
      <data key="d0">32634</data>
      <data key="d1">~LoggingEventPrivate</data>
      <data key="d2">1</data>
      <data key="d3">LoggingEventPrivate.~LoggingEventPrivate</data>
      <data key="d4">ANY LoggingEventPrivate.~LoggingEventPrivate ()</data>
      <data key="d5">main\cpp\loggingevent.cpp</data>
      <data key="d6">~LoggingEventPrivate()
	{
		delete ndc;
		delete mdcCopy;
		delete properties;
	}</data>
      <data key="d7">101.0</data>
      <data key="d8">106.0</data>
      <data key="d9">2.0</data>
      <data key="d10">2.0</data>
      <data key="d11">6.0</data>
      <data key="d12">3</data>
      <data key="d13">1</data>
      <data key="d14">3</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">3</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">3</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">ANY</data>
    </node>
    <node id="50044">
      <data key="d0">50044</data>
      <data key="d1">names</data>
      <data key="d2">3</data>
      <data key="d3">LOG4CXX_NS.helpers.SimpleDateFormatImpl.AbbreviatedDayNameToken.names</data>
      <data key="d4" />
      <data key="d5">main\cpp\simpledateformat.cpp</data>
      <data key="d6">names</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">2</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="50046">
      <data key="d0">50046</data>
      <data key="d1">FullDayNameToken</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.helpers.SimpleDateFormatImpl.FullDayNameToken.FullDayNameToken</data>
      <data key="d4">ANY LOG4CXX_NS.helpers.SimpleDateFormatImpl.FullDayNameToken.FullDayNameToken (int,ANY*)</data>
      <data key="d5">main\cpp\simpledateformat.cpp</data>
      <data key="d6">FullDayNameToken( int width, const std::locale* locale) : names( 7 )
		{
			renderFacet(locale, PatternToken::incrementDay, 'A', 0x41, "%A", names);
		}</data>
      <data key="d7">431.0</data>
      <data key="d8">434.0</data>
      <data key="d9">3.0</data>
      <data key="d10">3.0</data>
      <data key="d11">4.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">3</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">ANY</data>
    </node>
    <node id="56191">
      <data key="d0">56191</data>
      <data key="d1">activateOptions</data>
      <data key="d2">1</data>
      <data key="d3">TelnetAppender.activateOptions</data>
      <data key="d4">void TelnetAppender.activateOptions (Pool)</data>
      <data key="d5">main\cpp\telnetappender.cpp</data>
      <data key="d6">void TelnetAppender::activateOptions(Pool&amp; /* p */)
{
	if (_priv-&gt;serverSocket == NULL)
	{
		_priv-&gt;serverSocket = ServerSocket::create(_priv-&gt;port);
		_priv-&gt;serverSocket-&gt;setSoTimeout(1000);
	}

	_priv-&gt;sh = ThreadUtility::instance()-&gt;createThread( LOG4CXX_STR("TelnetAppender"), &amp;TelnetAppender::acceptConnections, this );
}</data>
      <data key="d7">71.0</data>
      <data key="d8">80.0</data>
      <data key="d9">1.0</data>
      <data key="d10">5.0</data>
      <data key="d11">10.0</data>
      <data key="d12">24</data>
      <data key="d13">6</data>
      <data key="d14">9</data>
      <data key="d15">5</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="28546">
      <data key="d0">28546</data>
      <data key="d1">Level</data>
      <data key="d2">1</data>
      <data key="d3">Level.Level</data>
      <data key="d4">ANY Level.Level (int,LogString,int)</data>
      <data key="d5">main\cpp\level.cpp</data>
      <data key="d6">Level::Level(int level1,
	const LogString&amp; name1, int syslogEquivalent1)
	: level(level1), name(name1), syslogEquivalent(syslogEquivalent1)
{
	APRInitializer::initialize();
}</data>
      <data key="d7">84.0</data>
      <data key="d8">89.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">6.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">1</data>
      <data key="d15">1</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">6</data>
      <data key="d26">3</data>
      <data key="d27">3</data>
      <data key="d28">ANY</data>
    </node>
    <node id="20357">
      <data key="d0">20357</data>
      <data key="d1">~FileInputStream</data>
      <data key="d2">1</data>
      <data key="d3">FileInputStream.~FileInputStream</data>
      <data key="d4">ANY FileInputStream.~FileInputStream ()</data>
      <data key="d5">main\cpp\fileinputstream.cpp</data>
      <data key="d6">FileInputStream::~FileInputStream()
{
	if (m_priv-&gt;fileptr != NULL &amp;&amp; !APRInitializer::isDestructed)
	{
		apr_file_close(m_priv-&gt;fileptr);
	}
}</data>
      <data key="d7">83.0</data>
      <data key="d8">89.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">7.0</data>
      <data key="d12">6</data>
      <data key="d13">5</data>
      <data key="d14">4</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">1</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">ANY</data>
    </node>
    <node id="39814">
      <data key="d0">39814</data>
      <data key="d1">activateOptions</data>
      <data key="d2">1</data>
      <data key="d3">ODBCAppender.activateOptions</data>
      <data key="d4">void ODBCAppender.activateOptions (ANY)</data>
      <data key="d5">main\cpp\odbcappender.cpp</data>
      <data key="d6">void ODBCAppender::activateOptions(LOG4CXX_NS::helpers::Pool&amp;)
{
#if !LOG4CXX_HAVE_ODBC
	LogLog::error(LOG4CXX_STR("Can not activate ODBCAppender unless compiled with ODBC support."));
#else
	if (_priv-&gt;mappedName.empty())
	{
		LogLog::error(LOG4CXX_STR("ODBCAppender column mappings not defined, logging events will not be inserted"));
	}
	auto specs = getFormatSpecifiers();
	for (auto&amp; name : _priv-&gt;mappedName)
	{
		auto lowerName = StringHelper::toLowerCase(name);
		auto pItem = specs.find(lowerName);
		if (specs.end() == pItem)
		{
			if (lowerName.size() &lt; 5
			 || lowerName.substr(0, 4) != LOG4CXX_STR("mdc{"))
				LogLog::error(name + LOG4CXX_STR(" is not a supported ColumnMapping value"));
			else // A single MDC entry
			{
				auto index = lowerName.find(0x7D /* '}' */, 4);
				auto len = (lowerName.npos == index ? lowerName.size() : index) - 4;
				ODBCAppenderPriv::DataBinding paramData{ 0, 0, 0, 0, 0 };
				paramData.converter = std::make_shared&lt;MDCPatternConverter&gt;(lowerNa...</data>
      <data key="d7">215.0</data>
      <data key="d8">254.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">40.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">1</data>
      <data key="d15">1</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="32646">
      <data key="d0">32646</data>
      <data key="d1">ndc</data>
      <data key="d2">3</data>
      <data key="d3">LoggingEventPrivate.ndc</data>
      <data key="d4" />
      <data key="d5">main\cpp\loggingevent.cpp</data>
      <data key="d6">* ndc</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="42887">
      <data key="d0">42887</data>
      <data key="d1">ESCAPE_CHAR</data>
      <data key="d2">2</data>
      <data key="d3">main\cpp\patternparser.cpp.ESCAPE_CHAR</data>
      <data key="d4" />
      <data key="d5">main\cpp\patternparser.cpp</data>
      <data key="d6">const logchar ESCAPE_CHAR</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">2</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="33673">
      <data key="d0">33673</data>
      <data key="d1">emit</data>
      <data key="d2">1</data>
      <data key="d3">LogLog.emit</data>
      <data key="d4">void LogLog.emit (LogString)</data>
      <data key="d5">main\cpp\loglog.cpp</data>
      <data key="d6">void LogLog::emit(const std::exception&amp; ex)
{
	LogString out(LOG4CXX_STR("log4cxx: "));
	const char* raw = ex.what();

	if (raw != 0)
	{
		Transcoder::decode(raw, out);
	}
	else
	{
		out.append(LOG4CXX_STR("std::exception::what() == null"));
	}

	out.append(1, (logchar) 0x0A);

	SystemErrWriter::write(out);
}</data>
      <data key="d7">169.0</data>
      <data key="d8">186.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">18.0</data>
      <data key="d12">4</data>
      <data key="d13">2</data>
      <data key="d14">5</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="32648">
      <data key="d0">32648</data>
      <data key="d1">properties</data>
      <data key="d2">3</data>
      <data key="d3">LoggingEventPrivate.properties</data>
      <data key="d4" />
      <data key="d5">main\cpp\loggingevent.cpp</data>
      <data key="d6">* properties</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="49033">
      <data key="d0">49033</data>
      <data key="d1">parseFileNamePattern</data>
      <data key="d2">1</data>
      <data key="d3">RollingPolicyBase.parseFileNamePattern</data>
      <data key="d4">void RollingPolicyBase.parseFileNamePattern ()</data>
      <data key="d5">main\cpp\rollingpolicybase.cpp</data>
      <data key="d6">void RollingPolicyBase::parseFileNamePattern()
{
	m_priv-&gt;patternConverters.erase(m_priv-&gt;patternConverters.begin(), m_priv-&gt;patternConverters.end());
	m_priv-&gt;patternFields.erase(m_priv-&gt;patternFields.begin(), m_priv-&gt;patternFields.end());
	PatternParser::parse(m_priv-&gt;fileNamePatternStr,
		m_priv-&gt;patternConverters,
		m_priv-&gt;patternFields,
		getFormatSpecifiers());
}</data>
      <data key="d7">96.0</data>
      <data key="d8">104.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">9.0</data>
      <data key="d12">16</data>
      <data key="d13">2</data>
      <data key="d14">10</data>
      <data key="d15">2</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">void</data>
    </node>
    <node id="32647">
      <data key="d0">32647</data>
      <data key="d1">mdcCopy</data>
      <data key="d2">3</data>
      <data key="d3">LoggingEventPrivate.mdcCopy</data>
      <data key="d4" />
      <data key="d5">main\cpp\loggingevent.cpp</data>
      <data key="d6">* mdcCopy</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="50061">
      <data key="d0">50061</data>
      <data key="d1">format</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.helpers.SimpleDateFormatImpl.FullDayNameToken.format</data>
      <data key="d4">void LOG4CXX_NS.helpers.SimpleDateFormatImpl.FullDayNameToken.format (LogString,apr_time_exp_t,Pool)</data>
      <data key="d5">main\cpp\simpledateformat.cpp</data>
      <data key="d6">void format( LogString&amp; s, const apr_time_exp_t&amp; tm, Pool&amp; /* p */ ) const
		{
			s.append( names[tm.tm_wday] );
		}</data>
      <data key="d7">436.0</data>
      <data key="d8">439.0</data>
      <data key="d9">3.0</data>
      <data key="d10">3.0</data>
      <data key="d11">4.0</data>
      <data key="d12">3</data>
      <data key="d13">2</data>
      <data key="d14">3</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">6</data>
      <data key="d26">3</data>
      <data key="d27">3</data>
      <data key="d28">void</data>
    </node>
    <node id="28557">
      <data key="d0">28557</data>
      <data key="d1">toLevelLS</data>
      <data key="d2">1</data>
      <data key="d3">Level.toLevelLS</data>
      <data key="d4">LevelPtr Level.toLevelLS (LogString)</data>
      <data key="d5">main\cpp\level.cpp</data>
      <data key="d6">LevelPtr Level::toLevelLS(const LogString&amp; sArg, const LevelPtr&amp; defaultLevel)
{
	const LogString trimmed(StringHelper::trim(sArg));
	const size_t len = trimmed.length();

	if (len == 4)
	{
		if (StringHelper::equalsIgnoreCase(trimmed, LOG4CXX_STR("INFO"), LOG4CXX_STR("info")))
		{
			return getInfo();
		}

		if (StringHelper::equalsIgnoreCase(trimmed, LOG4CXX_STR("WARN"), LOG4CXX_STR("warn")))
		{
			return getWarn();
		}
	}
	else
	{
		if (len == 5)
		{
			if (StringHelper::equalsIgnoreCase(trimmed, LOG4CXX_STR("DEBUG"), LOG4CXX_STR("debug")))
			{
				return getDebug();
			}

			if (StringHelper::equalsIgnoreCase(trimmed, LOG4CXX_STR("TRACE"), LOG4CXX_STR("trace")))
			{
				return getTrace();
			}

			if (StringHelper::equalsIgnoreCase(trimmed, LOG4CXX_STR("ERROR"), LOG4CXX_STR("error")))
			{
				return getError();
			}

			if (StringHelper::equalsIgnoreCase(trimmed, LOG4CXX_STR("FATAL"), LOG4CXX_STR("fatal")))
			{
				return getFatal();
			}
		}
		else
		{
			if (len == 3)
			...</data>
      <data key="d7">215.0</data>
      <data key="d8">274.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">60.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">2</data>
      <data key="d15">2</data>
      <data key="d16">2</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">LevelPtr</data>
    </node>
    <node id="38798">
      <data key="d0">38798</data>
      <data key="d1">cloneStack</data>
      <data key="d2">1</data>
      <data key="d3">NDC.cloneStack</data>
      <data key="d4">Stack NDC.cloneStack ()</data>
      <data key="d5">main\cpp\ndc.cpp</data>
      <data key="d6">NDC::Stack* NDC::cloneStack()
{
	ThreadSpecificData* data = ThreadSpecificData::getCurrentData();

	if (data != 0)
	{
		Stack&amp; stack = data-&gt;getStack();

		if (!stack.empty())
		{
			return new Stack(stack);
		}
	}

	return new Stack();
}</data>
      <data key="d7">63.0</data>
      <data key="d8">78.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">16.0</data>
      <data key="d12">9</data>
      <data key="d13">6</data>
      <data key="d14">9</data>
      <data key="d15">4</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">3</data>
      <data key="d19">4</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">Stack</data>
    </node>
    <node id="51085">
      <data key="d0">51085</data>
      <data key="d1">isTriggeringEvent</data>
      <data key="d2">1</data>
      <data key="d3">DefaultEvaluator.isTriggeringEvent</data>
      <data key="d4">bool DefaultEvaluator.isTriggeringEvent (ANY)</data>
      <data key="d5">main\cpp\smtpappender.cpp</data>
      <data key="d6">bool DefaultEvaluator::isTriggeringEvent(const spi::LoggingEventPtr&amp; event)
{
	return event-&gt;getLevel()-&gt;isGreaterOrEqual(Level::getError());
}</data>
      <data key="d7">422.0</data>
      <data key="d8">425.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">4.0</data>
      <data key="d12">3</data>
      <data key="d13">2</data>
      <data key="d14">2</data>
      <data key="d15">2</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">bool</data>
    </node>
    <node id="27537">
      <data key="d0">27537</data>
      <data key="d1">appendItem</data>
      <data key="d2">1</data>
      <data key="d3">JSONLayout.appendItem</data>
      <data key="d4">void JSONLayout.appendItem (LogString,LogString)</data>
      <data key="d5">main\cpp\jsonlayout.cpp</data>
      <data key="d6">void JSONLayout::appendItem(const LogString&amp; input, LogString&amp; buf)
{
	/* add leading quote */
	buf.push_back(0x22);

	logchar specialChars[] =
	{
		0x08,   /* \b backspace         */
		0x09,   /* \t tab               */
		0x0a,   /* \n newline           */
		0x0c,   /* \f form feed         */
		0x0d,   /* \r carriage return   */
		0x22,   /* \" double quote      */
		0x5c,   /* \\ backslash         */
		0x00    /* terminating NULL for C-strings */
	};

	size_t start = 0;
	size_t found = input.find_first_of(specialChars, start);

	while (found != LogString::npos)
	{
		if (found &gt; start)
		{
			buf.append(input, start, found - start);
		}

		switch (input[found])
		{
			case 0x08:
				/* \b backspace */
				buf.push_back(0x5c);
				buf.push_back('b');
				break;

			case 0x09:
				/* \t tab */
				buf.push_back(0x5c);
				buf.push_back('t');
				break;

			case 0x0a:
				/* \n newline */
				buf.push_back(0x5c);
				buf.push_back('n');
				break;

			case 0x0c:
				/* \f form feed */...</data>
      <data key="d7">216.0</data>
      <data key="d8">311.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">96.0</data>
      <data key="d12">40</data>
      <data key="d13">9</data>
      <data key="d14">51</data>
      <data key="d15">6</data>
      <data key="d16">2</data>
      <data key="d17">0</data>
      <data key="d18">14</data>
      <data key="d19">9</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="65107">
      <data key="d0">65107</data>
      <data key="d1">~LevelChange</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.LevelChange.~LevelChange</data>
      <data key="d4">ANY LOG4CXX_NS.LevelChange.~LevelChange ()</data>
      <data key="d5">main\include\log4cxx\levelchange.hpp</data>
      <data key="d6">~LevelChange()
	{
		m_otherCategory-&gt;setLevel(m_savedLevel);
	}</data>
      <data key="d7">71.0</data>
      <data key="d8">74.0</data>
      <data key="d9">2.0</data>
      <data key="d10">2.0</data>
      <data key="d11">4.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">2</data>
      <data key="d15">2</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">2</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">ANY</data>
    </node>
    <node id="19347">
      <data key="d0">19347</data>
      <data key="d1">setOption</data>
      <data key="d2">1</data>
      <data key="d3">FileAppender.setOption</data>
      <data key="d4">void FileAppender.setOption (LogString,LogString)</data>
      <data key="d5">main\cpp\fileappender.cpp</data>
      <data key="d6">void FileAppender::setOption(const LogString&amp; option,
	const LogString&amp; value)
{
	if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("FILE"), LOG4CXX_STR("file"))
		|| StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("FILENAME"), LOG4CXX_STR("filename")))
	{
		std::lock_guard&lt;std::recursive_mutex&gt; lock(_priv-&gt;mutex);
		_priv-&gt;fileName = stripDuplicateBackslashes(value);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("APPEND"), LOG4CXX_STR("append")))
	{
		std::lock_guard&lt;std::recursive_mutex&gt; lock(_priv-&gt;mutex);
		_priv-&gt;fileAppend = OptionConverter::toBoolean(value, true);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("BUFFEREDIO"), LOG4CXX_STR("bufferedio")))
	{
		std::lock_guard&lt;std::recursive_mutex&gt; lock(_priv-&gt;mutex);
		_priv-&gt;bufferedIO = OptionConverter::toBoolean(value, false);
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("IMMEDIATEFLUSH"), LOG4CXX_STR("immediateflush")))
	{
		std::lock_guard&lt;std::recursive_mutex&gt; l...</data>
      <data key="d7">114.0</data>
      <data key="d8">147.0</data>
      <data key="d9">1.0</data>
      <data key="d10">45.0</data>
      <data key="d11">34.0</data>
      <data key="d12">14</data>
      <data key="d13">7</data>
      <data key="d14">9</data>
      <data key="d15">5</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">2</data>
      <data key="d21">2</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">2</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="32659">
      <data key="d0">32659</data>
      <data key="d1">getStartTime</data>
      <data key="d2">1</data>
      <data key="d3">LoggingEvent.getStartTime</data>
      <data key="d4">log4cxx_time_t LoggingEvent.getStartTime ()</data>
      <data key="d5">main\cpp\loggingevent.cpp</data>
      <data key="d6">log4cxx_time_t LoggingEvent::getStartTime()
{
	return LOG4CXX_NS::helpers::APRInitializer::initialize();
}</data>
      <data key="d7">174.0</data>
      <data key="d8">177.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">4.0</data>
      <data key="d12">3</data>
      <data key="d13">1</data>
      <data key="d14">3</data>
      <data key="d15">3</data>
      <data key="d16">1</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">log4cxx_time_t</data>
    </node>
    <node id="26520">
      <data key="d0">26520</data>
      <data key="d1">getAllByName</data>
      <data key="d2">1</data>
      <data key="d3">InetAddress.getAllByName</data>
      <data key="d4">vector&lt;InetAddressPtr&gt; InetAddress.getAllByName (LogString)</data>
      <data key="d5">main\cpp\inetaddress.cpp</data>
      <data key="d6">std::vector&lt;InetAddressPtr&gt; InetAddress::getAllByName(const LogString&amp; host)
{
	LOG4CXX_ENCODE_CHAR(encodedHost, host);

	// retrieve information about the given host
	Pool addrPool;

	apr_sockaddr_t* address = 0;
	apr_status_t status =
		apr_sockaddr_info_get(&amp;address, encodedHost.c_str(),
			APR_INET, 0, 0, addrPool.getAPRPool());

	if (status != APR_SUCCESS)
	{
		LogString msg(LOG4CXX_STR("Cannot get information about host: "));
		msg.append(host);
		LogLog::error(msg);
		throw UnknownHostException(msg);
	}

	std::vector&lt;InetAddressPtr&gt; result;
	apr_sockaddr_t* currentAddr = address;

	while (currentAddr != NULL)
	{
		// retrieve the IP address of this InetAddress.
		LogString ipAddrString;
		char* ipAddr;
		status = apr_sockaddr_ip_get(&amp;ipAddr, currentAddr);

		if (status == APR_SUCCESS)
		{
			std::string ip(ipAddr);
			Transcoder::decode(ip, ipAddrString);
		}

		// retrieve the host name of this InetAddress.
		LogString hostNameString;
		char* hostName;
		status = apr_getname...</data>
      <data key="d7">65.0</data>
      <data key="d8">117.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">53.0</data>
      <data key="d12">30</data>
      <data key="d13">11</data>
      <data key="d14">48</data>
      <data key="d15">21</data>
      <data key="d16">0</data>
      <data key="d17">3</data>
      <data key="d18">5</data>
      <data key="d19">7</data>
      <data key="d20">0</data>
      <data key="d21">3</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">vector&lt;InetAddressPtr&gt;</data>
    </node>
    <node id="59289">
      <data key="d0">59289</data>
      <data key="d1">decodeUTF8</data>
      <data key="d2">1</data>
      <data key="d3">Transcoder.decodeUTF8</data>
      <data key="d4">void Transcoder.decodeUTF8 (ANY,LogString)</data>
      <data key="d5">main\cpp\transcoder.cpp</data>
      <data key="d6">void Transcoder::decodeUTF8(const std::string&amp; src, LogString&amp; dst)
{
	std::string::const_iterator iter = src.begin();

	while (iter != src.end())
	{
		unsigned int sv = decode(src, iter);

		if (sv != 0xFFFF)
		{
			encode(sv, dst);
		}
		else
		{
			dst.append(1, LOSSCHAR);
			iter++;
		}
	}
}</data>
      <data key="d7">43.0</data>
      <data key="d8">61.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">19.0</data>
      <data key="d12">6</data>
      <data key="d13">3</data>
      <data key="d14">10</data>
      <data key="d15">4</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">3</data>
      <data key="d19">4</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="9116">
      <data key="d0">9116</data>
      <data key="d1">encode</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.helpers.ISOLatinCharsetEncoder.encode</data>
      <data key="d4">log4cxx_status_t LOG4CXX_NS.helpers.ISOLatinCharsetEncoder.encode (LogString,ANY,ByteBuffer)</data>
      <data key="d5">main\cpp\charsetencoder.cpp</data>
      <data key="d6">virtual log4cxx_status_t encode(const LogString&amp; in,
			LogString::const_iterator&amp; iter,
			ByteBuffer&amp; out)
		{
			log4cxx_status_t stat = APR_SUCCESS;

			if (iter != in.end())
			{
				while (out.remaining() &gt; 0 &amp;&amp; iter != in.end())
				{
					LogString::const_iterator prev(iter);
					unsigned int sv = Transcoder::decode(in, iter);

					if (sv &lt;= 0xFF)
					{
						out.put((char) sv);
					}
					else
					{
						iter = prev;
						stat = APR_BADARG;
						break;
					}
				}
			}

			return stat;
		}</data>
      <data key="d7">269.0</data>
      <data key="d8">296.0</data>
      <data key="d9">3.0</data>
      <data key="d10">3.0</data>
      <data key="d11">28.0</data>
      <data key="d12">13</data>
      <data key="d13">7</data>
      <data key="d14">16</data>
      <data key="d15">7</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">4</data>
      <data key="d19">7</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">6</data>
      <data key="d26">3</data>
      <data key="d27">3</data>
      <data key="d28">log4cxx_status_t</data>
    </node>
    <node id="50077">
      <data key="d0">50077</data>
      <data key="d1">names</data>
      <data key="d2">3</data>
      <data key="d3">LOG4CXX_NS.helpers.SimpleDateFormatImpl.FullDayNameToken.names</data>
      <data key="d4" />
      <data key="d5">main\cpp\simpledateformat.cpp</data>
      <data key="d6">names</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">2</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="28575">
      <data key="d0">28575</data>
      <data key="d1">toLevel</data>
      <data key="d2">1</data>
      <data key="d3">Level.toLevel</data>
      <data key="d4">LevelPtr Level.toLevel (int)</data>
      <data key="d5">main\cpp\level.cpp</data>
      <data key="d6">LevelPtr Level::toLevel(const std::string&amp; sArg, const LevelPtr&amp; defaultLevel)
{
	LOG4CXX_DECODE_CHAR(s, sArg);
	return toLevelLS(s, defaultLevel);
}</data>
      <data key="d7">146.0</data>
      <data key="d8">150.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">5.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">2</data>
      <data key="d15">2</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">LevelPtr</data>
    </node>
    <node id="47008">
      <data key="d0">47008</data>
      <data key="d1">format</data>
      <data key="d2">1</data>
      <data key="d3">RelativeTimePatternConverter.format</data>
      <data key="d4">void RelativeTimePatternConverter.format (LoggingEventPtr,LogString,Pool)</data>
      <data key="d5">main\cpp\relativetimepatternconverter.cpp</data>
      <data key="d6">void RelativeTimePatternConverter::format(
	const LoggingEventPtr&amp; event,
	LogString&amp; toAppendTo,
	Pool&amp; p) const
{
	log4cxx_time_t delta = (event-&gt;getTimeStamp() - LoggingEvent::getStartTime()) / 1000;
	StringHelper::toString(delta, p, toAppendTo);
}</data>
      <data key="d7">44.0</data>
      <data key="d8">51.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">8.0</data>
      <data key="d12">6</data>
      <data key="d13">5</data>
      <data key="d14">7</data>
      <data key="d15">6</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">6</data>
      <data key="d26">3</data>
      <data key="d27">3</data>
      <data key="d28">void</data>
    </node>
    <node id="35746">
      <data key="d0">35746</data>
      <data key="d1">BufFromStream</data>
      <data key="d2">1</data>
      <data key="d3">anonymous_namespace_5.StringOrStream.BufFromStream</data>
      <data key="d4">basic_string&lt;T&gt; anonymous_namespace_5.StringOrStream.BufFromStream ()</data>
      <data key="d5">main\cpp\messagebuffer.cpp</data>
      <data key="d6">std::basic_string&lt;T&gt;&amp; BufFromStream()
	{
		if (this-&gt;stream)
		{
			this-&gt;buf = std::move(*this-&gt;stream).str();
			this-&gt;stream-&gt;seekp(0);
			this-&gt;stream-&gt;str(std::basic_string&lt;T&gt;());
			this-&gt;stream-&gt;clear();
		}
		return this-&gt;buf;
	}</data>
      <data key="d7">77.0</data>
      <data key="d8">87.0</data>
      <data key="d9">2.0</data>
      <data key="d10">2.0</data>
      <data key="d11">11.0</data>
      <data key="d12">15</data>
      <data key="d13">4</data>
      <data key="d14">2</data>
      <data key="d15">1</data>
      <data key="d16">0</data>
      <data key="d17">7</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">1</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">7</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">basic_string&lt;T&gt;</data>
    </node>
    <node id="36772">
      <data key="d0">36772</data>
      <data key="d1">rolloverInternal</data>
      <data key="d2">1</data>
      <data key="d3">MultiprocessRollingFileAppender.rolloverInternal</data>
      <data key="d4">bool MultiprocessRollingFileAppender.rolloverInternal (Pool)</data>
      <data key="d5">main\cpp\multiprocessrollingfileappender.cpp</data>
      <data key="d6">bool MultiprocessRollingFileAppender::rolloverInternal(Pool&amp; p)
{
	//
	//   can't roll without a policy
	//
	if (_priv-&gt;rollingPolicy != NULL)
	{

		{
			LogString fileName(getFile());
			RollingPolicyBasePtr basePolicy = LOG4CXX_NS::cast&lt;RollingPolicyBase&gt;(_priv-&gt;rollingPolicy);
			apr_time_t n = apr_time_now();
			ObjectPtr obj = std::make_shared&lt;Date&gt;(n);
			LogString fileNamePattern;

			if (basePolicy)
			{
				if (basePolicy-&gt;getPatternConverterList().size())
				{
					(*(basePolicy-&gt;getPatternConverterList().begin()))-&gt;format(obj, fileNamePattern, p);
					fileName = std::string(fileNamePattern);
				}
			}

			bool bAlreadyRolled = true;
			char szDirName[MAX_FILE_LEN] = {'\0'};
			char szBaseName[MAX_FILE_LEN] = {'\0'};
			char szUid[MAX_FILE_LEN] = {'\0'};
			memcpy(szDirName, fileName.c_str(), fileName.size() &gt; MAX_FILE_LEN ? MAX_FILE_LEN : fileName.size());
			memcpy(szBaseName, fileName.c_str(), fileName.size() &gt; MAX_FILE_LEN ? MAX_FILE_LEN : fileName.size());
			apr_u...</data>
      <data key="d7">208.0</data>
      <data key="d8">455.0</data>
      <data key="d9">1.0</data>
      <data key="d10">5.0</data>
      <data key="d11">248.0</data>
      <data key="d12">154</data>
      <data key="d13">19</data>
      <data key="d14">147</data>
      <data key="d15">47</data>
      <data key="d16">0</data>
      <data key="d17">6</data>
      <data key="d18">19</data>
      <data key="d19">69</data>
      <data key="d20">0</data>
      <data key="d21">6</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">bool</data>
    </node>
    <node id="50085">
      <data key="d0">50085</data>
      <data key="d1">getField</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.helpers.SimpleDateFormatImpl.MilitaryHourToken.getField</data>
      <data key="d4">int LOG4CXX_NS.helpers.SimpleDateFormatImpl.MilitaryHourToken.getField (apr_time_exp_t)</data>
      <data key="d5">main\cpp\simpledateformat.cpp</data>
      <data key="d6">int getField( const apr_time_exp_t&amp; tm ) const
		{
			return tm.tm_hour + offset;
		}</data>
      <data key="d7">455.0</data>
      <data key="d8">458.0</data>
      <data key="d9">3.0</data>
      <data key="d10">3.0</data>
      <data key="d11">4.0</data>
      <data key="d12">2</data>
      <data key="d13">2</data>
      <data key="d14">2</data>
      <data key="d15">2</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">int</data>
    </node>
    <node id="34725">
      <data key="d0">34725</data>
      <data key="d1">refresh_stream_state</data>
      <data key="d2">1</data>
      <data key="d3">logstream.refresh_stream_state</data>
      <data key="d4">void logstream.refresh_stream_state ()</data>
      <data key="d5">main\cpp\logstream.cpp</data>
      <data key="d6">void logstream::refresh_stream_state()
{
	if (stream != 0)
	{
		int ch;

		if (logstream_base::set_stream_state(*stream, ch))
		{
			stream-&gt;fill(ch);
		}
	}
}</data>
      <data key="d7">328.0</data>
      <data key="d8">339.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">12.0</data>
      <data key="d12">4</data>
      <data key="d13">4</data>
      <data key="d14">6</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">3</data>
      <data key="d19">4</data>
      <data key="d20">1</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">void</data>
    </node>
    <node id="14251">
      <data key="d0">14251</data>
      <data key="d1">setConfigurationFileName</data>
      <data key="d2">1</data>
      <data key="d3">DefaultConfigurator.setConfigurationFileName</data>
      <data key="d4">void DefaultConfigurator.setConfigurationFileName (LogString)</data>
      <data key="d5">main\cpp\defaultconfigurator.cpp</data>
      <data key="d6">void DefaultConfigurator::setConfigurationFileName(const LogString&amp; path)
{
	DefaultConfiguratorPath = path;
}</data>
      <data key="d7">38.0</data>
      <data key="d8">41.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">4.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">2</data>
      <data key="d15">2</data>
      <data key="d16">2</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="50096">
      <data key="d0">50096</data>
      <data key="d1">offset</data>
      <data key="d2">3</data>
      <data key="d3">LOG4CXX_NS.helpers.SimpleDateFormatImpl.MilitaryHourToken.offset</data>
      <data key="d4" />
      <data key="d5">main\cpp\simpledateformat.cpp</data>
      <data key="d6">offset</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="39857">
      <data key="d0">39857</data>
      <data key="d1">close</data>
      <data key="d2">1</data>
      <data key="d3">ODBCAppender.close</data>
      <data key="d4">void ODBCAppender.close ()</data>
      <data key="d5">main\cpp\odbcappender.cpp</data>
      <data key="d6">void ODBCAppender::close()
{
	if (_priv-&gt;closed)
	{
		return;
	}

	Pool p;

	try
	{
		flushBuffer(p);
	}
	catch (SQLException&amp; e)
	{
		_priv-&gt;errorHandler-&gt;error(LOG4CXX_STR("Error closing connection"),
			e, ErrorCode::GENERIC_FAILURE);
	}

#if LOG4CXX_HAVE_ODBC

	if (_priv-&gt;connection != SQL_NULL_HDBC)
	{
		SQLDisconnect(_priv-&gt;connection);
		SQLFreeHandle(SQL_HANDLE_DBC, _priv-&gt;connection);
	}

	if (_priv-&gt;env != SQL_NULL_HENV)
	{
		SQLFreeHandle(SQL_HANDLE_ENV, _priv-&gt;env);
	}

#endif
	_priv-&gt;closed = true;
}</data>
      <data key="d7">375.0</data>
      <data key="d8">409.0</data>
      <data key="d9">1.0</data>
      <data key="d10">5.0</data>
      <data key="d11">35.0</data>
      <data key="d12">12</data>
      <data key="d13">4</data>
      <data key="d14">6</data>
      <data key="d15">4</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">3</data>
      <data key="d19">3</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">void</data>
    </node>
    <node id="14259">
      <data key="d0">14259</data>
      <data key="d1">setConfigurationWatchSeconds</data>
      <data key="d2">1</data>
      <data key="d3">DefaultConfigurator.setConfigurationWatchSeconds</data>
      <data key="d4">void DefaultConfigurator.setConfigurationWatchSeconds (int)</data>
      <data key="d5">main\cpp\defaultconfigurator.cpp</data>
      <data key="d6">void DefaultConfigurator::setConfigurationWatchSeconds(int seconds)
{
	DefaultConfiguratorWatchSeconds = seconds;
}</data>
      <data key="d7">44.0</data>
      <data key="d8">47.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">4.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">2</data>
      <data key="d15">2</data>
      <data key="d16">2</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="38835">
      <data key="d0">38835</data>
      <data key="d1">inherit</data>
      <data key="d2">1</data>
      <data key="d3">NDC.inherit</data>
      <data key="d4">void NDC.inherit (ANY*)</data>
      <data key="d5">main\cpp\ndc.cpp</data>
      <data key="d6">void NDC::inherit(NDC::Stack* stack)
{
	if (stack != NULL)
	{
		ThreadSpecificData::inherit(*stack);
		delete stack;
	}
}</data>
      <data key="d7">80.0</data>
      <data key="d8">87.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">8.0</data>
      <data key="d12">4</data>
      <data key="d13">4</data>
      <data key="d14">5</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="50104">
      <data key="d0">50104</data>
      <data key="d1">getField</data>
      <data key="d2">1</data>
      <data key="d3">LOG4CXX_NS.helpers.SimpleDateFormatImpl.HourToken.getField</data>
      <data key="d4">int LOG4CXX_NS.helpers.SimpleDateFormatImpl.HourToken.getField (apr_time_exp_t)</data>
      <data key="d5">main\cpp\simpledateformat.cpp</data>
      <data key="d6">int getField( const apr_time_exp_t&amp; tm ) const
		{
			return ( ( tm.tm_hour + 12 - offset ) % 12 ) + offset;
		}</data>
      <data key="d7">473.0</data>
      <data key="d8">476.0</data>
      <data key="d9">3.0</data>
      <data key="d10">3.0</data>
      <data key="d11">4.0</data>
      <data key="d12">5</data>
      <data key="d13">4</data>
      <data key="d14">3</data>
      <data key="d15">2</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">2</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">int</data>
    </node>
    <node id="29627">
      <data key="d0">29627</data>
      <data key="d1">format</data>
      <data key="d2">1</data>
      <data key="d3">LineLocationPatternConverter.format</data>
      <data key="d4">void LineLocationPatternConverter.format (LoggingEventPtr,LogString,Pool)</data>
      <data key="d5">main\cpp\linelocationpatternconverter.cpp</data>
      <data key="d6">void LineLocationPatternConverter::format(
	const LoggingEventPtr&amp; event,
	LogString&amp; toAppendTo,
	Pool&amp; p) const
{
	StringHelper::toString(
		event-&gt;getLocationInformation().getLineNumber(),
		p, toAppendTo);
}</data>
      <data key="d7">44.0</data>
      <data key="d8">52.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">9.0</data>
      <data key="d12">3</data>
      <data key="d13">2</data>
      <data key="d14">4</data>
      <data key="d15">4</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">6</data>
      <data key="d26">3</data>
      <data key="d27">3</data>
      <data key="d28">void</data>
    </node>
    <node id="14267">
      <data key="d0">14267</data>
      <data key="d1">MillisecondsPerSecond</data>
      <data key="d2">2</data>
      <data key="d3">main\cpp\defaultconfigurator.cpp.MillisecondsPerSecond</data>
      <data key="d4" />
      <data key="d5">main\cpp\defaultconfigurator.cpp</data>
      <data key="d6">static const int MillisecondsPerSecond</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">2</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="14271">
      <data key="d0">14271</data>
      <data key="d1">configure</data>
      <data key="d2">1</data>
      <data key="d3">DefaultConfigurator.configure</data>
      <data key="d4">void DefaultConfigurator.configure (LoggerRepositoryPtr)</data>
      <data key="d5">main\cpp\defaultconfigurator.cpp</data>
      <data key="d6">void DefaultConfigurator::configure(LoggerRepositoryPtr repository)
{
	repository-&gt;setConfigured(true);
	const LogString configuratorClassName(getConfiguratorClass());

	LogString configurationFileName = DefaultConfiguratorPath;
	if (configurationFileName.empty())
		configurationFileName = getConfigurationFileName();
	Pool pool;
	File configuration;

	if (configurationFileName.empty())
	{
		LogString names[4] =
			{ LOG4CXX_STR("log4cxx.xml")
			, LOG4CXX_STR("log4cxx.properties")
			, LOG4CXX_STR("log4j.xml")
			, LOG4CXX_STR("log4j.properties")
			};

		for (int i = 0; i &lt; 4; i++)
		{
			File candidate(names[i]);

			LogString debugMsg = LOG4CXX_STR("Checking file ");
			debugMsg.append(names[i]);
			LogLog::debug(debugMsg);
			if (candidate.exists(pool))
			{
				configuration = candidate;
				break;
			}
		}
	}
	else
	{
		configuration.setPath(configurationFileName);
	}

	if (configuration.exists(pool))
	{
		LogString msg(LOG4CXX_STR("Using configuration file ["));
		msg += conf...</data>
      <data key="d7">51.0</data>
      <data key="d8">122.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">72.0</data>
      <data key="d12">25</data>
      <data key="d13">9</data>
      <data key="d14">36</data>
      <data key="d15">16</data>
      <data key="d16">0</data>
      <data key="d17">4</data>
      <data key="d18">7</data>
      <data key="d19">9</data>
      <data key="d20">0</data>
      <data key="d21">3</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="32704">
      <data key="d0">32704</data>
      <data key="d1">getNDC</data>
      <data key="d2">1</data>
      <data key="d3">LoggingEvent.getNDC</data>
      <data key="d4">bool LoggingEvent.getNDC (LogString)</data>
      <data key="d5">main\cpp\loggingevent.cpp</data>
      <data key="d6">bool LoggingEvent::getNDC(LogString&amp; dest) const
{
	if (m_priv-&gt;ndcLookupRequired)
	{
		m_priv-&gt;ndcLookupRequired = false;
		LogString val;

		if (NDC::get(val))
		{
			m_priv-&gt;ndc = new LogString(val);
		}
	}

	if (m_priv-&gt;ndc)
	{
		dest.append(*m_priv-&gt;ndc);
		return true;
	}

	return false;
}</data>
      <data key="d7">209.0</data>
      <data key="d8">229.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">21.0</data>
      <data key="d12">11</data>
      <data key="d13">5</data>
      <data key="d14">10</data>
      <data key="d15">5</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">4</data>
      <data key="d19">5</data>
      <data key="d20">1</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">bool</data>
    </node>
    <node id="52164">
      <data key="d0">52164</data>
      <data key="d1">setEvaluatorClass</data>
      <data key="d2">1</data>
      <data key="d3">SMTPAppender.setEvaluatorClass</data>
      <data key="d4">void SMTPAppender.setEvaluatorClass (LogString)</data>
      <data key="d5">main\cpp\smtpappender.cpp</data>
      <data key="d6">void SMTPAppender::setEvaluatorClass(const LogString&amp; value)
{
	ObjectPtr obj = ObjectPtr(Loader::loadClass(value).newInstance());
	_priv-&gt;evaluator = LOG4CXX_NS::cast&lt;TriggeringEventEvaluator&gt;(obj);
}</data>
      <data key="d7">820.0</data>
      <data key="d8">824.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">5.0</data>
      <data key="d12">10</data>
      <data key="d13">6</data>
      <data key="d14">7</data>
      <data key="d15">6</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="38853">
      <data key="d0">38853</data>
      <data key="d1">get</data>
      <data key="d2">1</data>
      <data key="d3">NDC.get</data>
      <data key="d4">bool NDC.get (LogString)</data>
      <data key="d5">main\cpp\ndc.cpp</data>
      <data key="d6">bool NDC::get(LogString&amp; dest)
{
	ThreadSpecificData* data = ThreadSpecificData::getCurrentData();

	if (data != 0)
	{
		Stack&amp; stack = data-&gt;getStack();

		if (!stack.empty())
		{
			dest.append(getFullMessage(stack.top()));
			return true;
		}

		data-&gt;recycle();
	}

	return false;
}</data>
      <data key="d7">90.0</data>
      <data key="d8">108.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">19.0</data>
      <data key="d12">10</data>
      <data key="d13">5</data>
      <data key="d14">9</data>
      <data key="d15">4</data>
      <data key="d16">1</data>
      <data key="d17">1</data>
      <data key="d18">3</data>
      <data key="d19">4</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">bool</data>
    </node>
    <node id="59334">
      <data key="d0">59334</data>
      <data key="d1">encodeUTF8</data>
      <data key="d2">1</data>
      <data key="d3">Transcoder.encodeUTF8</data>
      <data key="d4">void Transcoder.encodeUTF8 (LogString,ANY)</data>
      <data key="d5">main\cpp\transcoder.cpp</data>
      <data key="d6">size_t Transcoder::encodeUTF8(unsigned int ch, char* dst)
{
	if (ch &lt; 0x80)
	{
		dst[0] = (char) ch;
		return 1;
	}
	else if (ch &lt; 0x800)
	{
		dst[0] = (char) (0xC0 + (ch &gt;&gt; 6));
		dst[1] = (char) (0x80 + (ch &amp; 0x3F));
		return 2;
	}
	else if (ch &lt; 0x10000)
	{
		dst[0] = (char) (0xE0 + (ch &gt;&gt; 12));
		dst[1] = (char) (0x80 + ((ch &gt;&gt; 6) &amp; 0x3F));
		dst[2] = (char) (0x80 + (ch &amp; 0x3F));
		return 3;
	}
	else if (ch &lt;= 0x10FFFF)
	{
		dst[0] = (char) (0xF0 + (ch &gt;&gt; 18));
		dst[1] = (char) (0x80 + ((ch &gt;&gt; 12) &amp; 0x3F));
		dst[2] = (char) (0x80 + ((ch &gt;&gt; 6) &amp; 0x3F));
		dst[3] = (char) (0x80 + (ch &amp; 0x3F));
		return 4;
	}
	else
	{
		//
		//  output UTF-8 encoding of 0xFFFF
		//
		dst[0] = (char) 0xEF;
		dst[1] = (char) 0xBF;
		dst[2] = (char) 0xBF;
		return 3;
	}
}</data>
      <data key="d7">107.0</data>
      <data key="d8">145.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">39.0</data>
      <data key="d12">6</data>
      <data key="d13">3</data>
      <data key="d14">10</data>
      <data key="d15">4</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">3</data>
      <data key="d19">4</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">size_t</data>
    </node>
    <node id="50121">
      <data key="d0">50121</data>
      <data key="d1">offset</data>
      <data key="d2">3</data>
      <data key="d3">LOG4CXX_NS.helpers.SimpleDateFormatImpl.HourToken.offset</data>
      <data key="d4" />
      <data key="d5">main\cpp\simpledateformat.cpp</data>
      <data key="d6">offset</data>
      <data key="d29">-1</data>
      <data key="d30">-1</data>
      <data key="d31">-1</data>
      <data key="d32">-1</data>
      <data key="d33">0</data>
      <data key="d12">0</data>
      <data key="d13">0</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">2</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28" />
    </node>
    <node id="17354">
      <data key="d0">17354</data>
      <data key="d1">subst</data>
      <data key="d2">1</data>
      <data key="d3">DOMConfigurator.subst</data>
      <data key="d4">LogString DOMConfigurator.subst (LogString)</data>
      <data key="d5">main\cpp\domconfigurator.cpp</data>
      <data key="d6">LogString DOMConfigurator::subst(const LogString&amp; value)
{
	try
	{
		return OptionConverter::substVars(value, m_priv-&gt;props);
	}
	catch (IllegalArgumentException&amp; e)
	{
		LogLog::warn(LOG4CXX_STR("Could not perform variable substitution."), e);
		return value;
	}
}</data>
      <data key="d7">1103.0</data>
      <data key="d8">1114.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">12.0</data>
      <data key="d12">3</data>
      <data key="d13">2</data>
      <data key="d14">6</data>
      <data key="d15">5</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">0</data>
      <data key="d21">2</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">LogString</data>
    </node>
    <node id="10189">
      <data key="d0">10189</data>
      <data key="d1">registerClass</data>
      <data key="d2">1</data>
      <data key="d3">Class.registerClass</data>
      <data key="d4">bool Class.registerClass (Class)</data>
      <data key="d5">main\cpp\class.cpp</data>
      <data key="d6">bool Class::registerClass(const Class&amp; newClass)
{
	getRegistry()[StringHelper::toLowerCase(newClass.getName())] = &amp;newClass;
	return true;
}</data>
      <data key="d7">165.0</data>
      <data key="d8">169.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">5.0</data>
      <data key="d12">5</data>
      <data key="d13">4</data>
      <data key="d14">3</data>
      <data key="d15">2</data>
      <data key="d16">1</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">bool</data>
    </node>
    <node id="47057">
      <data key="d0">47057</data>
      <data key="d1">getBundle</data>
      <data key="d2">1</data>
      <data key="d3">ResourceBundle.getBundle</data>
      <data key="d4">ResourceBundlePtr ResourceBundle.getBundle (LogString,Locale)</data>
      <data key="d5">main\cpp\resourcebundle.cpp</data>
      <data key="d6">ResourceBundlePtr ResourceBundle::getBundle(const LogString&amp; baseName,
	const Locale&amp; locale)
{
	LogString bundleName;
	PropertyResourceBundlePtr resourceBundle, previous;

	std::vector&lt;LogString&gt; bundlesNames;

	if (!locale.getVariant().empty())
	{
		bundlesNames.push_back(baseName + LOG4CXX_STR("_") +
			locale.getLanguage() + LOG4CXX_STR("_") +
			locale.getCountry() + LOG4CXX_STR("_") +
			locale.getVariant());
	}

	if (!locale.getCountry().empty())
	{
		bundlesNames.push_back(baseName + LOG4CXX_STR("_") +
			locale.getLanguage() + LOG4CXX_STR("_") +
			locale.getCountry());
	}

	if (!locale.getLanguage().empty())
	{
		bundlesNames.push_back(baseName + LOG4CXX_STR("_") +
			locale.getLanguage());
	}

	bundlesNames.push_back(baseName);

	for (std::vector&lt;LogString&gt;::iterator it = bundlesNames.begin();
		it != bundlesNames.end(); it++)
	{

		bundleName = *it;

		PropertyResourceBundlePtr current;

		// Try loading a class which implements ResourceBundle
		try
		{
			const Class&amp; c...</data>
      <data key="d7">30.0</data>
      <data key="d8">124.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">95.0</data>
      <data key="d12">66</data>
      <data key="d13">11</data>
      <data key="d14">53</data>
      <data key="d15">16</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">12</data>
      <data key="d19">18</data>
      <data key="d20">0</data>
      <data key="d21">2</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">2</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">ResourceBundlePtr</data>
    </node>
    <node id="56274">
      <data key="d0">56274</data>
      <data key="d1">setOption</data>
      <data key="d2">1</data>
      <data key="d3">TelnetAppender.setOption</data>
      <data key="d4">void TelnetAppender.setOption (LogString,LogString)</data>
      <data key="d5">main\cpp\telnetappender.cpp</data>
      <data key="d6">void TelnetAppender::setOption(const LogString&amp; option,
	const LogString&amp; value)
{
	if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("PORT"), LOG4CXX_STR("port")))
	{
		setPort(OptionConverter::toInt(value, DEFAULT_PORT));
	}
	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("ENCODING"), LOG4CXX_STR("encoding")))
	{
		setEncoding(value);
	}
	else
	{
		AppenderSkeleton::setOption(option, value);
	}
}</data>
      <data key="d7">82.0</data>
      <data key="d8">97.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">16.0</data>
      <data key="d12">2</data>
      <data key="d13">1</data>
      <data key="d14">5</data>
      <data key="d15">5</data>
      <data key="d16">0</data>
      <data key="d17">3</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">1</data>
      <data key="d21">2</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">2</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="33749">
      <data key="d0">33749</data>
      <data key="d1">&lt;lambda&gt;0</data>
      <data key="d2">1</data>
      <data key="d3">[]() -&gt; ObjectPtr { LoggerRepositoryPtr hierarchy = Hierarchy.create(); return std.make_shared&lt;DefaultRepositorySelector&gt;(hierarchy); }.&lt;lambda&gt;0</data>
      <data key="d4">ObjectPtr []() -&gt; ObjectPtr { LoggerRepositoryPtr hierarchy = Hierarchy.create(); return std.make_shared&lt;DefaultRepositorySelector&gt;(hierarchy); }.&lt;lambda&gt;0 ()</data>
      <data key="d5">main\cpp\logmanager.cpp</data>
      <data key="d6">[]() -&gt; ObjectPtr
		{
			LoggerRepositoryPtr hierarchy = Hierarchy::create();
			return std::make_shared&lt;DefaultRepositorySelector&gt;(hierarchy);
		}</data>
      <data key="d7">49.0</data>
      <data key="d8">53.0</data>
      <data key="d9">73.0</data>
      <data key="d10">3.0</data>
      <data key="d11">5.0</data>
      <data key="d12">5</data>
      <data key="d13">4</data>
      <data key="d14">5</data>
      <data key="d15">4</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">ObjectPtr</data>
    </node>
    <node id="16345">
      <data key="d0">16345</data>
      <data key="d1">parseRollingPolicy</data>
      <data key="d2">1</data>
      <data key="d3">DOMConfigurator.parseRollingPolicy</data>
      <data key="d4">RollingPolicyPtr DOMConfigurator.parseRollingPolicy (ANY,ANY,apr_xml_elem*)</data>
      <data key="d5">main\cpp\domconfigurator.cpp</data>
      <data key="d6">RollingPolicyPtr DOMConfigurator::parseRollingPolicy (
	LOG4CXX_NS::helpers::Pool&amp; p,
	LOG4CXX_NS::helpers::CharsetDecoderPtr&amp; utf8Decoder,
	apr_xml_elem* layout_element)
{
	LogString className = subst(getAttribute(utf8Decoder, layout_element, CLASS_ATTR));
	LogLog::debug(LOG4CXX_STR("Parsing rolling policy of class: \"") + className + LOG4CXX_STR("\""));

	try
	{
		ObjectPtr instance = ObjectPtr(Loader::loadClass(className).newInstance());
		RollingPolicyPtr layout = LOG4CXX_NS::cast&lt;RollingPolicy&gt;(instance);
		PropertySetter propSetter(layout);

		for (apr_xml_elem* currentElement = layout_element-&gt;first_child;
			currentElement;
			currentElement = currentElement-&gt;next)
		{
			std::string tagName(currentElement-&gt;name);

			if (tagName == PARAM_TAG)
			{
				setParameter(p, utf8Decoder, currentElement, propSetter);
			}
		}

		propSetter.activate(p);
		return layout;
	}
	catch (Exception&amp; oops)
	{
		LogLog::error(LOG4CXX_STR("Could not create the RollingPolicy. Reported error foll...</data>
      <data key="d7">658.0</data>
      <data key="d8">693.0</data>
      <data key="d9">1.0</data>
      <data key="d10">71.0</data>
      <data key="d11">36.0</data>
      <data key="d12">17</data>
      <data key="d13">7</data>
      <data key="d14">27</data>
      <data key="d15">14</data>
      <data key="d16">0</data>
      <data key="d17">3</data>
      <data key="d18">4</data>
      <data key="d19">7</data>
      <data key="d20">0</data>
      <data key="d21">3</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">6</data>
      <data key="d26">3</data>
      <data key="d27">3</data>
      <data key="d28">RollingPolicyPtr</data>
    </node>
    <node id="61404">
      <data key="d0">61404</data>
      <data key="d1">closeWriter</data>
      <data key="d2">1</data>
      <data key="d3">WriterAppender.closeWriter</data>
      <data key="d4">void WriterAppender.closeWriter ()</data>
      <data key="d5">main\cpp\writerappender.cpp</data>
      <data key="d6">void WriterAppender::closeWriter()
{
	if (_priv-&gt;writer != NULL)
	{
		try
		{
			// before closing we have to output out layout's footer
			//
			//   Using the object's pool since this is a one-shot operation
			//    and pool is likely to be reclaimed soon when appender is destructed.
			//
			writeFooter(_priv-&gt;pool);
			_priv-&gt;writer-&gt;close(_priv-&gt;pool);
			_priv-&gt;writer = 0;
		}
		catch (IOException&amp; e)
		{
			LogLog::error(LogString(LOG4CXX_STR("Could not close writer for WriterAppender named ")) + _priv-&gt;name, e);
		}
	}

}</data>
      <data key="d7">180.0</data>
      <data key="d8">201.0</data>
      <data key="d9">1.0</data>
      <data key="d10">5.0</data>
      <data key="d11">22.0</data>
      <data key="d12">23</data>
      <data key="d13">6</data>
      <data key="d14">9</data>
      <data key="d15">4</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">3</data>
      <data key="d19">4</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">void</data>
    </node>
    <node id="17380">
      <data key="d0">17380</data>
      <data key="d1">getAttribute</data>
      <data key="d2">1</data>
      <data key="d3">DOMConfigurator.getAttribute</data>
      <data key="d4">LogString DOMConfigurator.getAttribute (ANY,apr_xml_elem*,ANY)</data>
      <data key="d5">main\cpp\domconfigurator.cpp</data>
      <data key="d6">LogString DOMConfigurator::getAttribute(
	LOG4CXX_NS::helpers::CharsetDecoderPtr&amp; utf8Decoder,
	apr_xml_elem* element,
	const std::string&amp; attrName)
{
	LogString attrValue;

	for (apr_xml_attr* attr = element-&gt;attr;
		attr;
		attr = attr-&gt;next)
	{
		if (attrName == attr-&gt;name)
		{
			ByteBuffer buf((char*) attr-&gt;value, strnlen_s(attr-&gt;value, MAX_ATTRIBUTE_NAME_LEN));
			utf8Decoder-&gt;decode(buf, attrValue);
		}
	}

	return attrValue;
}</data>
      <data key="d7">1117.0</data>
      <data key="d8">1136.0</data>
      <data key="d9">1.0</data>
      <data key="d10">62.0</data>
      <data key="d11">20.0</data>
      <data key="d12">8</data>
      <data key="d13">4</data>
      <data key="d14">11</data>
      <data key="d15">6</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">3</data>
      <data key="d19">4</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">6</data>
      <data key="d26">3</data>
      <data key="d27">3</data>
      <data key="d28">LogString</data>
    </node>
    <node id="11237">
      <data key="d0">11237</data>
      <data key="d1">parseColor</data>
      <data key="d2">1</data>
      <data key="d3">ColorStartPatternConverter.parseColor</data>
      <data key="d4">void ColorStartPatternConverter.parseColor (LogString,LogString*)</data>
      <data key="d5">main\cpp\colorstartpatternconverter.cpp</data>
      <data key="d6">void ColorStartPatternConverter::parseColor(const LogString&amp; color, LogString* result){
	LogString lower = StringHelper::toLowerCase(color);
	Pool pool;

	// If the color we are trying to parse is blank, clear our result
	if(StringHelper::trim(color).empty() ||
			StringHelper::equalsIgnoreCase(color,
										   LOG4CXX_STR("NONE"),
										   LOG4CXX_STR("none"))){
		result-&gt;clear();
		return;
	}

	if( StringHelper::startsWith(lower, LOG4CXX_STR("\\x1b")) ){
		if( color[color.size() - 1] != 'm' ){
			// In order for this to be a valid ANSI escape sequence,
			// it must end with an 'm'.  If it does not, reject.
			return;
		}
		// We start with an escape sequence, copy the data over after the escape byte
		result-&gt;clear();
		result-&gt;append(LOG4CXX_STR("\x1b"));
		for( size_t x = 4; x &lt; color.size(); x++ ){
			result-&gt;push_back(color[x]);
		}
	}else{
		// We do not start with an escape sequence: try to parse color
		// Escape sequence information:
		// https://gist.github.com/fn...</data>
      <data key="d7">224.0</data>
      <data key="d8">277.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">54.0</data>
      <data key="d12">19</data>
      <data key="d13">8</data>
      <data key="d14">20</data>
      <data key="d15">5</data>
      <data key="d16">0</data>
      <data key="d17">4</data>
      <data key="d18">5</data>
      <data key="d19">7</data>
      <data key="d20">3</data>
      <data key="d21">4</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">4</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="25574">
      <data key="d0">25574</data>
      <data key="d1">HTMLLayout</data>
      <data key="d2">1</data>
      <data key="d3">HTMLLayout.HTMLLayout</data>
      <data key="d4">ANY HTMLLayout.HTMLLayout ()</data>
      <data key="d5">main\cpp\htmllayout.cpp</data>
      <data key="d6">HTMLLayout::HTMLLayout()
	: m_priv(std::make_unique&lt;HTMLLayoutPrivate&gt;())
{
	m_priv-&gt;dateFormat.setTimeZone(TimeZone::getGMT());
	m_priv-&gt;expectedPatternLength = getFormattedEventCharacterCount() * 2;
}</data>
      <data key="d7">56.0</data>
      <data key="d8">61.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">6.0</data>
      <data key="d12">6</data>
      <data key="d13">4</data>
      <data key="d14">3</data>
      <data key="d15">2</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">ANY</data>
    </node>
    <node id="18408">
      <data key="d0">18408</data>
      <data key="d1">setAppender</data>
      <data key="d2">1</data>
      <data key="d3">FallbackErrorHandler.setAppender</data>
      <data key="d4">void FallbackErrorHandler.setAppender (AppenderPtr)</data>
      <data key="d5">main\cpp\fallbackerrorhandler.cpp</data>
      <data key="d6">void FallbackErrorHandler::setAppender(const AppenderPtr&amp; primary1)
{
	LogLog::debug(((LogString) LOG4CXX_STR("FB: Setting primary appender to ["))
		+ primary1-&gt;getName() + LOG4CXX_STR("]."));
	m_priv-&gt;primary = primary1;
}</data>
      <data key="d7">96.0</data>
      <data key="d8">101.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">6.0</data>
      <data key="d12">7</data>
      <data key="d13">5</data>
      <data key="d14">4</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">2</data>
      <data key="d26">1</data>
      <data key="d27">1</data>
      <data key="d28">void</data>
    </node>
    <node id="57322">
      <data key="d0">57322</data>
      <data key="d1">getCurrentData</data>
      <data key="d2">1</data>
      <data key="d3">ThreadSpecificData.getCurrentData</data>
      <data key="d4">ThreadSpecificData ThreadSpecificData.getCurrentData ()</data>
      <data key="d5">main\cpp\threadspecificdata.cpp</data>
      <data key="d6">ThreadSpecificData* ThreadSpecificData::getCurrentData()
{
#if APR_HAS_THREADS
	void* pData = NULL;
	apr_threadkey_private_get(&amp;pData, APRInitializer::getTlsKey());
	return (ThreadSpecificData*) pData;
#elif LOG4CXX_HAS_THREAD_LOCAL
	thread_local ThreadSpecificData data;
	return &amp;data;
#else
	return &amp;getDataNoThreads();
#endif
}</data>
      <data key="d7">61.0</data>
      <data key="d8">73.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">13.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">0</data>
      <data key="d15">0</data>
      <data key="d16">11</data>
      <data key="d17">0</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">ThreadSpecificData</data>
    </node>
    <node id="41963">
      <data key="d0">41963</data>
      <data key="d1">setOption</data>
      <data key="d2">1</data>
      <data key="d3">PatternLayout.setOption</data>
      <data key="d4">void PatternLayout.setOption (LogString,LogString)</data>
      <data key="d5">main\cpp\patternlayout.cpp</data>
      <data key="d6">void PatternLayout::setOption(const LogString&amp; option, const LogString&amp; value)
{
	if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR("CONVERSIONPATTERN"),
			LOG4CXX_STR("conversionpattern")))
	{
		m_priv-&gt;conversionPattern = OptionConverter::convertSpecialChars(value);
	}else if(StringHelper::equalsIgnoreCase(option,
											LOG4CXX_STR("ERRORCOLOR"),
											LOG4CXX_STR("errorcolor"))){
		m_priv-&gt;m_errorColor = value;
		LogLog::debug(LOG4CXX_STR("Setting error color to "));
		LogLog::debug(value);
	}else if(StringHelper::equalsIgnoreCase(option,
											LOG4CXX_STR("FATALCOLOR"),
											LOG4CXX_STR("fatalcolor"))){
		m_priv-&gt;m_fatalColor = value;
	}else if(StringHelper::equalsIgnoreCase(option,
											LOG4CXX_STR("WARNCOLOR"),
											LOG4CXX_STR("warncolor"))){
		m_priv-&gt;m_warnColor = value;
	}else if(StringHelper::equalsIgnoreCase(option,
											LOG4CXX_STR("INFOCOLOR"),
											LOG4CXX_STR("infocolor"))){
		m_priv-&gt;m_infoColor = value;
	}else i...</data>
      <data key="d7">141.0</data>
      <data key="d8">175.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">35.0</data>
      <data key="d12">4</data>
      <data key="d13">3</data>
      <data key="d14">5</data>
      <data key="d15">5</data>
      <data key="d16">0</data>
      <data key="d17">2</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">1</data>
      <data key="d21">2</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">2</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="32751">
      <data key="d0">32751</data>
      <data key="d1">getMDC</data>
      <data key="d2">1</data>
      <data key="d3">LoggingEvent.getMDC</data>
      <data key="d4">bool LoggingEvent.getMDC (LogString,LogString)</data>
      <data key="d5">main\cpp\loggingevent.cpp</data>
      <data key="d6">bool LoggingEvent::getMDC(const LogString&amp; key, LogString&amp; dest) const
{
	// Note the mdcCopy is used if it exists. Otherwise we use the MDC
	// that is associated with the thread.
	if (m_priv-&gt;mdcCopy != 0 &amp;&amp; !m_priv-&gt;mdcCopy-&gt;empty())
	{
		MDC::Map::const_iterator it = m_priv-&gt;mdcCopy-&gt;find(key);

		if (it != m_priv-&gt;mdcCopy-&gt;end())
		{
			if (!it-&gt;second.empty())
			{
				dest.append(it-&gt;second);
				return true;
			}
		}
	}

	return MDC::get(key, dest);

}</data>
      <data key="d7">231.0</data>
      <data key="d8">251.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">21.0</data>
      <data key="d12">18</data>
      <data key="d13">6</data>
      <data key="d14">13</data>
      <data key="d15">5</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">4</data>
      <data key="d19">7</data>
      <data key="d20">0</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">bool</data>
    </node>
    <node id="44020">
      <data key="d0">44020</data>
      <data key="d1">parse</data>
      <data key="d2">1</data>
      <data key="d3">PropertyParser.parse</data>
      <data key="d4">void PropertyParser.parse (LogString,Properties)</data>
      <data key="d5">main\cpp\properties.cpp</data>
      <data key="d6">void parse(LogString&amp; in, Properties&amp; properties)
		{
			LogString key, element;
			LexemType lexemType = BEGIN;
			logchar c;
			bool finished = false;

			if (!get(in, c))
			{
				return;
			}

			while (!finished)
			{
				switch (lexemType)
				{
					case BEGIN:
						switch (c)
						{
							case 0x20: // ' '
							case 0x09: // '\t'
							case 0x0A: // '\n'
							case 0x0D: // '\r'
								if (!get(in, c))
								{
									finished = true;
								}

								break;

							case 0x23: // '#'
							case 0x21: // '!'
								lexemType = COMMENT;

								if (!get(in, c))
								{
									finished = true;
								}

								break;

							default:
								lexemType = KEY;
								break;
						}

						break;

					case KEY:
						switch (c)
						{
							case 0x5C: // '\\'
								lexemType = KEY_ESCAPE;

								if (!get(in, c))
								{
									finished = true;
								}

								break;

							case 0x09: // '\t'
							case 0x20: // ' '
							case 0x3A: // ':'
		...</data>
      <data key="d7">30.0</data>
      <data key="d8">365.0</data>
      <data key="d9">3.0</data>
      <data key="d10">3.0</data>
      <data key="d11">336.0</data>
      <data key="d12">92</data>
      <data key="d13">5</data>
      <data key="d14">167</data>
      <data key="d15">18</data>
      <data key="d16">0</data>
      <data key="d17">57</data>
      <data key="d18">75</data>
      <data key="d19">104</data>
      <data key="d20">18</data>
      <data key="d21">18</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">57</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="38901">
      <data key="d0">38901</data>
      <data key="d1">getDepth</data>
      <data key="d2">1</data>
      <data key="d3">NDC.getDepth</data>
      <data key="d4">int NDC.getDepth ()</data>
      <data key="d5">main\cpp\ndc.cpp</data>
      <data key="d6">int NDC::getDepth()
{
	int size = 0;
	ThreadSpecificData* data = ThreadSpecificData::getCurrentData();

	if (data != 0)
	{
		size = (int)data-&gt;getStack().size();

		if (size == 0)
		{
			data-&gt;recycle();
		}
	}

	return size;
}</data>
      <data key="d7">110.0</data>
      <data key="d8">126.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">17.0</data>
      <data key="d12">10</data>
      <data key="d13">6</data>
      <data key="d14">9</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">3</data>
      <data key="d19">4</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">int</data>
    </node>
    <node id="57333">
      <data key="d0">57333</data>
      <data key="d1">put</data>
      <data key="d2">1</data>
      <data key="d3">ThreadSpecificData.put</data>
      <data key="d4">void ThreadSpecificData.put (LogString,LogString)</data>
      <data key="d5">main\cpp\threadspecificdata.cpp</data>
      <data key="d6">void ThreadSpecificData::put(const LogString&amp; key, const LogString&amp; val)
{
	ThreadSpecificData* data = getCurrentData();

	if (data == 0)
	{
		data = createCurrentData();
	}

	if (data != 0)
	{
		data-&gt;getMap()[key] = val;
	}
}</data>
      <data key="d7">98.0</data>
      <data key="d8">111.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">14.0</data>
      <data key="d12">7</data>
      <data key="d13">5</data>
      <data key="d14">7</data>
      <data key="d15">3</data>
      <data key="d16">1</data>
      <data key="d17">0</data>
      <data key="d18">3</data>
      <data key="d19">3</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <node id="24572">
      <data key="d0">24572</data>
      <data key="d1">getThreshold</data>
      <data key="d2">1</data>
      <data key="d3">Hierarchy.getThreshold</data>
      <data key="d4">LevelPtr Hierarchy.getThreshold ()</data>
      <data key="d5">main\cpp\hierarchy.cpp</data>
      <data key="d6">LevelPtr Hierarchy::getThreshold() const
{
	return m_priv-&gt;threshold ? m_priv-&gt;threshold : Level::getAll();
}</data>
      <data key="d7">235.0</data>
      <data key="d8">238.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">4.0</data>
      <data key="d12">4</data>
      <data key="d13">3</data>
      <data key="d14">3</data>
      <data key="d15">2</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">1</data>
      <data key="d19">1</data>
      <data key="d20">0</data>
      <data key="d21">0</data>
      <data key="d22">1</data>
      <data key="d23">0</data>
      <data key="d24">0</data>
      <data key="d25">0</data>
      <data key="d26">0</data>
      <data key="d27">0</data>
      <data key="d28">LevelPtr</data>
    </node>
    <node id="25599">
      <data key="d0">25599</data>
      <data key="d1">setOption</data>
      <data key="d2">1</data>
      <data key="d3">HTMLLayout.setOption</data>
      <data key="d4">void HTMLLayout.setOption (LogString,LogString)</data>
      <data key="d5">main\cpp\htmllayout.cpp</data>
      <data key="d6">void HTMLLayout::setOption(const LogString&amp; option,
	const LogString&amp; value)
{

	if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR("TITLE"), LOG4CXX_STR("title")))
	{
		setTitle(value);
	}
	else if (StringHelper::equalsIgnoreCase(option,
			LOG4CXX_STR("LOCATIONINFO"), LOG4CXX_STR("locationinfo")))
	{
		setLocationInfo(OptionConverter::toBoolean(value, false));
		m_priv-&gt;expectedPatternLength = getFormattedEventCharacterCount() * 2;
	}
}</data>
      <data key="d7">66.0</data>
      <data key="d8">81.0</data>
      <data key="d9">1.0</data>
      <data key="d10">1.0</data>
      <data key="d11">16.0</data>
      <data key="d12">1</data>
      <data key="d13">1</data>
      <data key="d14">3</data>
      <data key="d15">3</data>
      <data key="d16">0</data>
      <data key="d17">1</data>
      <data key="d18">2</data>
      <data key="d19">2</data>
      <data key="d20">1</data>
      <data key="d21">1</data>
      <data key="d22">0</data>
      <data key="d23">0</data>
      <data key="d24">1</data>
      <data key="d25">4</data>
      <data key="d26">2</data>
      <data key="d27">2</data>
      <data key="d28">void</data>
    </node>
    <edge source="18434" target="33403" id="0">
      <data key="d35">18434</data>
      <data key="d36">33403</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">105</data>
    </edge>
    <edge source="18434" target="33884" id="0">
      <data key="d35">18434</data>
      <data key="d36">33884</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">111</data>
    </edge>
    <edge source="18434" target="33884" id="1">
      <data key="d35">18434</data>
      <data key="d36">33884</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">111</data>
    </edge>
    <edge source="34822" target="53554" id="0">
      <data key="d35">34822</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">54</data>
    </edge>
    <edge source="34822" target="53554" id="1">
      <data key="d35">34822</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">54</data>
    </edge>
    <edge source="34822" target="53554" id="2">
      <data key="d35">34822</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">54</data>
    </edge>
    <edge source="34822" target="40522" id="0">
      <data key="d35">34822</data>
      <data key="d36">40522</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">56</data>
    </edge>
    <edge source="34822" target="40522" id="1">
      <data key="d35">34822</data>
      <data key="d36">40522</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">56</data>
    </edge>
    <edge source="50185" target="49613" id="0">
      <data key="d35">50185</data>
      <data key="d36">49613</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">549</data>
    </edge>
    <edge source="50185" target="50218" id="0">
      <data key="d35">50185</data>
      <data key="d36">50218</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">549</data>
    </edge>
    <edge source="40974" target="55875" id="0">
      <data key="d35">40974</data>
      <data key="d36">55875</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">292</data>
    </edge>
    <edge source="45073" target="33875" id="0">
      <data key="d35">45073</data>
      <data key="d36">33875</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">68</data>
    </edge>
    <edge source="50200" target="50218" id="0">
      <data key="d35">50200</data>
      <data key="d36">50218</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">554</data>
    </edge>
    <edge source="38943" target="57322" id="0">
      <data key="d35">38943</data>
      <data key="d36">57322</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">130</data>
    </edge>
    <edge source="38943" target="57322" id="1">
      <data key="d35">38943</data>
      <data key="d36">57322</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">130</data>
    </edge>
    <edge source="21536" target="53554" id="0">
      <data key="d35">21536</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">75</data>
    </edge>
    <edge source="21536" target="53554" id="1">
      <data key="d35">21536</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">75</data>
    </edge>
    <edge source="21536" target="53554" id="2">
      <data key="d35">21536</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">75</data>
    </edge>
    <edge source="21536" target="40584" id="0">
      <data key="d35">21536</data>
      <data key="d36">40584</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">79</data>
    </edge>
    <edge source="21536" target="40584" id="1">
      <data key="d35">21536</data>
      <data key="d36">40584</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">79</data>
    </edge>
    <edge source="46113" target="33403" id="0">
      <data key="d35">46113</data>
      <data key="d36">33403</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">427</data>
    </edge>
    <edge source="46113" target="33403" id="1">
      <data key="d35">46113</data>
      <data key="d36">33403</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">478</data>
    </edge>
    <edge source="46113" target="33403" id="2">
      <data key="d35">46113</data>
      <data key="d36">33403</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">482</data>
    </edge>
    <edge source="46113" target="33403" id="3">
      <data key="d35">46113</data>
      <data key="d36">33403</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">502</data>
    </edge>
    <edge source="46113" target="33403" id="4">
      <data key="d35">46113</data>
      <data key="d36">33403</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">520</data>
    </edge>
    <edge source="46113" target="33403" id="5">
      <data key="d35">46113</data>
      <data key="d36">33403</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">528</data>
    </edge>
    <edge source="46113" target="41176" id="0">
      <data key="d35">46113</data>
      <data key="d36">41176</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">440</data>
    </edge>
    <edge source="46113" target="41176" id="1">
      <data key="d35">46113</data>
      <data key="d36">41176</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">440</data>
    </edge>
    <edge source="46113" target="41176" id="2">
      <data key="d35">46113</data>
      <data key="d36">41176</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">471</data>
    </edge>
    <edge source="46113" target="41176" id="3">
      <data key="d35">46113</data>
      <data key="d36">41176</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">471</data>
    </edge>
    <edge source="46113" target="41176" id="4">
      <data key="d35">46113</data>
      <data key="d36">41176</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">495</data>
    </edge>
    <edge source="46113" target="41176" id="5">
      <data key="d35">46113</data>
      <data key="d36">41176</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">495</data>
    </edge>
    <edge source="46113" target="41176" id="6">
      <data key="d35">46113</data>
      <data key="d36">41176</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">513</data>
    </edge>
    <edge source="46113" target="41176" id="7">
      <data key="d35">46113</data>
      <data key="d36">41176</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">513</data>
    </edge>
    <edge source="46113" target="53800" id="0">
      <data key="d35">46113</data>
      <data key="d36">53800</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">446</data>
    </edge>
    <edge source="46113" target="53800" id="1">
      <data key="d35">46113</data>
      <data key="d36">53800</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">446</data>
    </edge>
    <edge source="46113" target="53800" id="2">
      <data key="d35">46113</data>
      <data key="d36">53800</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">446</data>
    </edge>
    <edge source="46113" target="40729" id="0">
      <data key="d35">46113</data>
      <data key="d36">40729</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">446</data>
    </edge>
    <edge source="46113" target="40729" id="1">
      <data key="d35">46113</data>
      <data key="d36">40729</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">446</data>
    </edge>
    <edge source="46113" target="40729" id="2">
      <data key="d35">46113</data>
      <data key="d36">40729</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">446</data>
    </edge>
    <edge source="46113" target="40729" id="3">
      <data key="d35">46113</data>
      <data key="d36">40729</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">449</data>
    </edge>
    <edge source="46113" target="40729" id="4">
      <data key="d35">46113</data>
      <data key="d36">40729</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">449</data>
    </edge>
    <edge source="46113" target="40729" id="5">
      <data key="d35">46113</data>
      <data key="d36">40729</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">491</data>
    </edge>
    <edge source="46113" target="40729" id="6">
      <data key="d35">46113</data>
      <data key="d36">40729</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">491</data>
    </edge>
    <edge source="46113" target="40729" id="7">
      <data key="d35">46113</data>
      <data key="d36">40729</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">491</data>
    </edge>
    <edge source="46113" target="40729" id="8">
      <data key="d35">46113</data>
      <data key="d36">40729</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">509</data>
    </edge>
    <edge source="46113" target="40729" id="9">
      <data key="d35">46113</data>
      <data key="d36">40729</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">509</data>
    </edge>
    <edge source="46113" target="40729" id="10">
      <data key="d35">46113</data>
      <data key="d36">40729</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">509</data>
    </edge>
    <edge source="46113" target="33492" id="0">
      <data key="d35">46113</data>
      <data key="d36">33492</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">456</data>
    </edge>
    <edge source="46113" target="46689" id="0">
      <data key="d35">46113</data>
      <data key="d36">46689</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">481</data>
    </edge>
    <edge source="46113" target="46689" id="1">
      <data key="d35">46113</data>
      <data key="d36">46689</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">504</data>
    </edge>
    <edge source="46113" target="46689" id="2">
      <data key="d35">46113</data>
      <data key="d36">46689</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">522</data>
    </edge>
    <edge source="46113" target="46689" id="3">
      <data key="d35">46113</data>
      <data key="d36">46689</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">527</data>
    </edge>
    <edge source="56355" target="9663" id="0">
      <data key="d35">56355</data>
      <data key="d36">9663</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">108</data>
    </edge>
    <edge source="56355" target="9663" id="1">
      <data key="d35">56355</data>
      <data key="d36">9663</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">108</data>
    </edge>
    <edge source="1060" target="14251" id="0">
      <data key="d35">1060</data>
      <data key="d36">14251</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">130</data>
    </edge>
    <edge source="1060" target="14251" id="1">
      <data key="d35">1060</data>
      <data key="d36">14251</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">137</data>
    </edge>
    <edge source="1060" target="14259" id="0">
      <data key="d35">1060</data>
      <data key="d36">14259</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">131</data>
    </edge>
    <edge source="1060" target="14259" id="1">
      <data key="d35">1060</data>
      <data key="d36">14259</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">138</data>
    </edge>
    <edge source="1060" target="6835" id="0">
      <data key="d35">1060</data>
      <data key="d36">6835</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">147</data>
    </edge>
    <edge source="55333" target="53554" id="0">
      <data key="d35">55333</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">381</data>
    </edge>
    <edge source="55333" target="53554" id="1">
      <data key="d35">55333</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">381</data>
    </edge>
    <edge source="55333" target="53554" id="2">
      <data key="d35">55333</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">381</data>
    </edge>
    <edge source="48164" target="33492" id="0">
      <data key="d35">48164</data>
      <data key="d36">33492</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">342</data>
    </edge>
    <edge source="48164" target="33598" id="0">
      <data key="d35">48164</data>
      <data key="d36">33598</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">441</data>
    </edge>
    <edge source="15399" target="41219" id="0">
      <data key="d35">15399</data>
      <data key="d36">41219</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">335</data>
    </edge>
    <edge source="15399" target="41219" id="1">
      <data key="d35">15399</data>
      <data key="d36">41219</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">335</data>
    </edge>
    <edge source="41005" target="33403" id="0">
      <data key="d35">41005</data>
      <data key="d36">33403</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">327</data>
    </edge>
    <edge source="41005" target="28557" id="0">
      <data key="d35">41005</data>
      <data key="d36">28557</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">333</data>
    </edge>
    <edge source="41005" target="29885" id="0">
      <data key="d35">41005</data>
      <data key="d36">29885</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">339</data>
    </edge>
    <edge source="41005" target="29885" id="1">
      <data key="d35">41005</data>
      <data key="d36">29885</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">339</data>
    </edge>
    <edge source="41005" target="33598" id="0">
      <data key="d35">41005</data>
      <data key="d36">33598</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">344</data>
    </edge>
    <edge source="41005" target="33598" id="1">
      <data key="d35">41005</data>
      <data key="d36">33598</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">349</data>
    </edge>
    <edge source="41005" target="33598" id="2">
      <data key="d35">41005</data>
      <data key="d36">33598</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">355</data>
    </edge>
    <edge source="45102" target="33492" id="0">
      <data key="d35">45102</data>
      <data key="d36">33492</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">102</data>
    </edge>
    <edge source="45102" target="33492" id="1">
      <data key="d35">45102</data>
      <data key="d36">33492</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">116</data>
    </edge>
    <edge source="45102" target="33403" id="0">
      <data key="d35">45102</data>
      <data key="d36">33403</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">111</data>
    </edge>
    <edge source="25645" target="28477" id="0">
      <data key="d35">25645</data>
      <data key="d36">28477</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">109</data>
    </edge>
    <edge source="25645" target="28477" id="1">
      <data key="d35">25645</data>
      <data key="d36">28477</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">109</data>
    </edge>
    <edge source="25645" target="28477" id="2">
      <data key="d35">25645</data>
      <data key="d36">28477</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">109</data>
    </edge>
    <edge source="25645" target="60726" id="0">
      <data key="d35">25645</data>
      <data key="d36">60726</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">132</data>
    </edge>
    <edge source="25645" target="60726" id="1">
      <data key="d35">25645</data>
      <data key="d36">60726</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">141</data>
    </edge>
    <edge source="25645" target="60726" id="2">
      <data key="d35">25645</data>
      <data key="d36">60726</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">155</data>
    </edge>
    <edge source="25645" target="60726" id="3">
      <data key="d35">25645</data>
      <data key="d36">60726</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">169</data>
    </edge>
    <edge source="25645" target="53862" id="0">
      <data key="d35">25645</data>
      <data key="d36">53862</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">147</data>
    </edge>
    <edge source="50225" target="50248" id="0">
      <data key="d35">50225</data>
      <data key="d36">50248</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">572</data>
    </edge>
    <edge source="61490" target="9627" id="0">
      <data key="d35">61490</data>
      <data key="d36">9627</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">218</data>
    </edge>
    <edge source="61490" target="9627" id="1">
      <data key="d35">61490</data>
      <data key="d36">9627</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">218</data>
    </edge>
    <edge source="39989" target="59869" id="0">
      <data key="d35">39989</data>
      <data key="d36">59869</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">637</data>
    </edge>
    <edge source="39989" target="59869" id="1">
      <data key="d35">39989</data>
      <data key="d36">59869</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">637</data>
    </edge>
    <edge source="4159" target="12518" id="0">
      <data key="d35">4159</data>
      <data key="d36">12518</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">87</data>
    </edge>
    <edge source="4159" target="12518" id="1">
      <data key="d35">4159</data>
      <data key="d36">12518</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">87</data>
    </edge>
    <edge source="50240" target="50248" id="0">
      <data key="d35">50240</data>
      <data key="d36">50248</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">577</data>
    </edge>
    <edge source="16449" target="33403" id="0">
      <data key="d35">16449</data>
      <data key="d36">33403</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">713</data>
    </edge>
    <edge source="16449" target="33403" id="1">
      <data key="d35">16449</data>
      <data key="d36">33403</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">765</data>
    </edge>
    <edge source="16449" target="53554" id="0">
      <data key="d35">16449</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">715</data>
    </edge>
    <edge source="16449" target="53554" id="1">
      <data key="d35">16449</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">715</data>
    </edge>
    <edge source="16449" target="53554" id="2">
      <data key="d35">16449</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">715</data>
    </edge>
    <edge source="16449" target="53554" id="3">
      <data key="d35">16449</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">716</data>
    </edge>
    <edge source="16449" target="53554" id="4">
      <data key="d35">16449</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">716</data>
    </edge>
    <edge source="16449" target="53554" id="5">
      <data key="d35">16449</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">716</data>
    </edge>
    <edge source="16449" target="33492" id="0">
      <data key="d35">16449</data>
      <data key="d36">33492</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">720</data>
    </edge>
    <edge source="43074" target="22975" id="0">
      <data key="d35">43074</data>
      <data key="d36">22975</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">128</data>
    </edge>
    <edge source="43074" target="22975" id="1">
      <data key="d35">43074</data>
      <data key="d36">22975</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">302</data>
    </edge>
    <edge source="43074" target="42887" id="0">
      <data key="d35">43074</data>
      <data key="d36">42887</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">146</data>
    </edge>
    <edge source="43074" target="42887" id="1">
      <data key="d35">43074</data>
      <data key="d36">42887</data>
      <data key="d37">6</data>
      <data key="d38">control_local</data>
      <data key="d39">146</data>
    </edge>
    <edge source="43074" target="42887" id="2">
      <data key="d35">43074</data>
      <data key="d36">42887</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">149</data>
    </edge>
    <edge source="43074" target="42887" id="3">
      <data key="d35">43074</data>
      <data key="d36">42887</data>
      <data key="d37">6</data>
      <data key="d38">control_local</data>
      <data key="d39">149</data>
    </edge>
    <edge source="43074" target="29735" id="0">
      <data key="d35">43074</data>
      <data key="d36">29735</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">301</data>
    </edge>
    <edge source="13379" target="53554" id="0">
      <data key="d35">13379</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">121</data>
    </edge>
    <edge source="13379" target="53554" id="1">
      <data key="d35">13379</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">121</data>
    </edge>
    <edge source="13379" target="53554" id="2">
      <data key="d35">13379</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">121</data>
    </edge>
    <edge source="23628" target="64921" id="0">
      <data key="d35">23628</data>
      <data key="d36">64921</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">46</data>
    </edge>
    <edge source="23628" target="64921" id="1">
      <data key="d35">23628</data>
      <data key="d36">64921</data>
      <data key="d37">6</data>
      <data key="d38">control_local</data>
      <data key="d39">46</data>
    </edge>
    <edge source="23628" target="64922" id="0">
      <data key="d35">23628</data>
      <data key="d36">64922</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">111</data>
    </edge>
    <edge source="23628" target="64922" id="1">
      <data key="d35">23628</data>
      <data key="d36">64922</data>
      <data key="d37">6</data>
      <data key="d38">control_local</data>
      <data key="d39">111</data>
    </edge>
    <edge source="4177" target="4114" id="0">
      <data key="d35">4177</data>
      <data key="d36">4114</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">97</data>
    </edge>
    <edge source="9304" target="59869" id="0">
      <data key="d35">9304</data>
      <data key="d36">59869</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">361</data>
    </edge>
    <edge source="9304" target="59869" id="1">
      <data key="d35">9304</data>
      <data key="d36">59869</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">361</data>
    </edge>
    <edge source="9304" target="59334" id="0">
      <data key="d35">9304</data>
      <data key="d36">59334</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">368</data>
    </edge>
    <edge source="55395" target="53840" id="0">
      <data key="d35">55395</data>
      <data key="d36">53840</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">414</data>
    </edge>
    <edge source="55395" target="53840" id="1">
      <data key="d35">55395</data>
      <data key="d36">53840</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">414</data>
    </edge>
    <edge source="37992" target="48770" id="0">
      <data key="d35">37992</data>
      <data key="d36">48770</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">626</data>
    </edge>
    <edge source="37992" target="48771" id="0">
      <data key="d35">37992</data>
      <data key="d36">48771</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">627</data>
    </edge>
    <edge source="18538" target="59869" id="0">
      <data key="d35">18538</data>
      <data key="d36">59869</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">61</data>
    </edge>
    <edge source="14445" target="40974" id="0">
      <data key="d35">14445</data>
      <data key="d36">40974</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">129</data>
    </edge>
    <edge source="14445" target="40974" id="1">
      <data key="d35">14445</data>
      <data key="d36">40974</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">131</data>
    </edge>
    <edge source="38005" target="48770" id="0">
      <data key="d35">38005</data>
      <data key="d36">48770</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">635</data>
    </edge>
    <edge source="42108" target="43074" id="0">
      <data key="d35">42108</data>
      <data key="d36">43074</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">189</data>
    </edge>
    <edge source="42108" target="13064" id="0">
      <data key="d35">42108</data>
      <data key="d36">13064</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">192</data>
    </edge>
    <edge source="42108" target="13064" id="1">
      <data key="d35">42108</data>
      <data key="d36">13064</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">192</data>
    </edge>
    <edge source="38015" target="48770" id="0">
      <data key="d35">38015</data>
      <data key="d36">48770</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">643</data>
    </edge>
    <edge source="38015" target="48771" id="0">
      <data key="d35">38015</data>
      <data key="d36">48771</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">645</data>
    </edge>
    <edge source="38015" target="48771" id="1">
      <data key="d35">38015</data>
      <data key="d36">48771</data>
      <data key="d37">6</data>
      <data key="d38">control_local</data>
      <data key="d39">645</data>
    </edge>
    <edge source="38015" target="48771" id="2">
      <data key="d35">38015</data>
      <data key="d36">48771</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">647</data>
    </edge>
    <edge source="38015" target="48771" id="3">
      <data key="d35">38015</data>
      <data key="d36">48771</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">647</data>
    </edge>
    <edge source="8321" target="59869" id="0">
      <data key="d35">8321</data>
      <data key="d36">59869</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">297</data>
    </edge>
    <edge source="8321" target="59869" id="1">
      <data key="d35">8321</data>
      <data key="d36">59869</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">297</data>
    </edge>
    <edge source="14470" target="40974" id="0">
      <data key="d35">14470</data>
      <data key="d36">40974</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">142</data>
    </edge>
    <edge source="14470" target="40974" id="1">
      <data key="d35">14470</data>
      <data key="d36">40974</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">144</data>
    </edge>
    <edge source="21638" target="48932" id="0">
      <data key="d35">21638</data>
      <data key="d36">48932</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">104</data>
    </edge>
    <edge source="21638" target="33598" id="0">
      <data key="d35">21638</data>
      <data key="d36">33598</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">108</data>
    </edge>
    <edge source="21638" target="33598" id="1">
      <data key="d35">21638</data>
      <data key="d36">33598</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">115</data>
    </edge>
    <edge source="39054" target="57322" id="0">
      <data key="d35">39054</data>
      <data key="d36">57322</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">174</data>
    </edge>
    <edge source="39054" target="57322" id="1">
      <data key="d35">39054</data>
      <data key="d36">57322</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">174</data>
    </edge>
    <edge source="51346" target="53554" id="0">
      <data key="d35">51346</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">528</data>
    </edge>
    <edge source="51346" target="53554" id="1">
      <data key="d35">51346</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">528</data>
    </edge>
    <edge source="51346" target="53554" id="2">
      <data key="d35">51346</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">528</data>
    </edge>
    <edge source="51346" target="40584" id="0">
      <data key="d35">51346</data>
      <data key="d36">40584</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">530</data>
    </edge>
    <edge source="32914" target="57322" id="0">
      <data key="d35">32914</data>
      <data key="d36">57322</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">291</data>
    </edge>
    <edge source="32914" target="57322" id="1">
      <data key="d35">32914</data>
      <data key="d36">57322</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">291</data>
    </edge>
    <edge source="9365" target="59869" id="0">
      <data key="d35">9365</data>
      <data key="d36">59869</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">396</data>
    </edge>
    <edge source="9365" target="59869" id="1">
      <data key="d35">9365</data>
      <data key="d36">59869</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">396</data>
    </edge>
    <edge source="9365" target="59597" id="0">
      <data key="d35">9365</data>
      <data key="d36">59597</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">403</data>
    </edge>
    <edge source="45207" target="33875" id="0">
      <data key="d35">45207</data>
      <data key="d36">33875</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">125</data>
    </edge>
    <edge source="20632" target="63707" id="0">
      <data key="d35">20632</data>
      <data key="d36">63707</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">84</data>
    </edge>
    <edge source="20632" target="63707" id="1">
      <data key="d35">20632</data>
      <data key="d36">63707</data>
      <data key="d37">6</data>
      <data key="d38">control_local</data>
      <data key="d39">84</data>
    </edge>
    <edge source="38048" target="37984" id="0">
      <data key="d35">38048</data>
      <data key="d36">37984</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">653</data>
    </edge>
    <edge source="17571" target="53862" id="0">
      <data key="d35">17571</data>
      <data key="d36">53862</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">110</data>
    </edge>
    <edge source="14501" target="40974" id="0">
      <data key="d35">14501</data>
      <data key="d36">40974</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">153</data>
    </edge>
    <edge source="14501" target="40974" id="1">
      <data key="d35">14501</data>
      <data key="d36">40974</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">153</data>
    </edge>
    <edge source="14501" target="53840" id="0">
      <data key="d35">14501</data>
      <data key="d36">53840</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">156</data>
    </edge>
    <edge source="14501" target="53840" id="1">
      <data key="d35">14501</data>
      <data key="d36">53840</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">156</data>
    </edge>
    <edge source="14501" target="14267" id="0">
      <data key="d35">14501</data>
      <data key="d36">14267</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">156</data>
    </edge>
    <edge source="1189" target="11539" id="0">
      <data key="d35">1189</data>
      <data key="d36">11539</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">38</data>
    </edge>
    <edge source="1189" target="11539" id="1">
      <data key="d35">1189</data>
      <data key="d36">11539</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">38</data>
    </edge>
    <edge source="1189" target="11529" id="0">
      <data key="d35">1189</data>
      <data key="d36">11529</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">38</data>
    </edge>
    <edge source="1189" target="11529" id="1">
      <data key="d35">1189</data>
      <data key="d36">11529</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">38</data>
    </edge>
    <edge source="62632" target="62552" id="0">
      <data key="d35">62632</data>
      <data key="d36">62552</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">93</data>
    </edge>
    <edge source="62638" target="62548" id="0">
      <data key="d35">62638</data>
      <data key="d36">62548</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">98</data>
    </edge>
    <edge source="62644" target="9654" id="0">
      <data key="d35">62644</data>
      <data key="d36">9654</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">104</data>
    </edge>
    <edge source="19639" target="53862" id="0">
      <data key="d35">19639</data>
      <data key="d36">53862</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">171</data>
    </edge>
    <edge source="19639" target="66936" id="0">
      <data key="d35">19639</data>
      <data key="d36">66936</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">173</data>
    </edge>
    <edge source="19639" target="61077" id="0">
      <data key="d35">19639</data>
      <data key="d36">61077</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">186</data>
    </edge>
    <edge source="10427" target="10189" id="0">
      <data key="d35">10427</data>
      <data key="d36">10189</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">26</data>
    </edge>
    <edge source="24764" target="28477" id="0">
      <data key="d35">24764</data>
      <data key="d36">28477</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">298</data>
    </edge>
    <edge source="24764" target="28477" id="1">
      <data key="d35">24764</data>
      <data key="d36">28477</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">298</data>
    </edge>
    <edge source="29885" target="10096" id="0">
      <data key="d35">29885</data>
      <data key="d36">10096</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">59</data>
    </edge>
    <edge source="31946" target="33965" id="0">
      <data key="d35">31946</data>
      <data key="d36">33965</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">577</data>
    </edge>
    <edge source="58571" target="12518" id="0">
      <data key="d35">58571</data>
      <data key="d36">12518</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">525</data>
    </edge>
    <edge source="57548" target="57561" id="0">
      <data key="d35">57548</data>
      <data key="d36">57561</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">43</data>
    </edge>
    <edge source="57548" target="57562" id="0">
      <data key="d35">57548</data>
      <data key="d36">57562</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">44</data>
    </edge>
    <edge source="57548" target="57563" id="0">
      <data key="d35">57548</data>
      <data key="d36">57563</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">45</data>
    </edge>
    <edge source="9426" target="59869" id="0">
      <data key="d35">9426</data>
      <data key="d36">59869</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">431</data>
    </edge>
    <edge source="9426" target="59869" id="1">
      <data key="d35">9426</data>
      <data key="d36">59869</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">431</data>
    </edge>
    <edge source="9426" target="59733" id="0">
      <data key="d35">9426</data>
      <data key="d36">59733</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">438</data>
    </edge>
    <edge source="28886" target="53554" id="0">
      <data key="d35">28886</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">54</data>
    </edge>
    <edge source="28886" target="53554" id="1">
      <data key="d35">28886</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">54</data>
    </edge>
    <edge source="28886" target="53554" id="2">
      <data key="d35">28886</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">54</data>
    </edge>
    <edge source="41176" target="33492" id="0">
      <data key="d35">41176</data>
      <data key="d36">33492</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">372</data>
    </edge>
    <edge source="41176" target="41219" id="0">
      <data key="d35">41176</data>
      <data key="d36">41219</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">378</data>
    </edge>
    <edge source="41176" target="53725" id="0">
      <data key="d35">41176</data>
      <data key="d36">53725</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">379</data>
    </edge>
    <edge source="41176" target="53725" id="1">
      <data key="d35">41176</data>
      <data key="d36">53725</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">379</data>
    </edge>
    <edge source="13530" target="33492" id="0">
      <data key="d35">13530</data>
      <data key="d36">33492</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">156</data>
    </edge>
    <edge source="13530" target="33492" id="1">
      <data key="d35">13530</data>
      <data key="d36">33492</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">166</data>
    </edge>
    <edge source="13530" target="33492" id="2">
      <data key="d35">13530</data>
      <data key="d36">33492</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">189</data>
    </edge>
    <edge source="13530" target="33492" id="3">
      <data key="d35">13530</data>
      <data key="d36">33492</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">199</data>
    </edge>
    <edge source="13530" target="13064" id="0">
      <data key="d35">13530</data>
      <data key="d36">13064</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">194</data>
    </edge>
    <edge source="13530" target="13064" id="1">
      <data key="d35">13530</data>
      <data key="d36">13064</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">194</data>
    </edge>
    <edge source="13530" target="53691" id="0">
      <data key="d35">13530</data>
      <data key="d36">53691</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">197</data>
    </edge>
    <edge source="13530" target="53691" id="1">
      <data key="d35">13530</data>
      <data key="d36">53691</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">197</data>
    </edge>
    <edge source="1249" target="33875" id="0">
      <data key="d35">1249</data>
      <data key="d36">33875</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">34</data>
    </edge>
    <edge source="1249" target="33875" id="1">
      <data key="d35">1249</data>
      <data key="d36">33875</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">34</data>
    </edge>
    <edge source="34020" target="4232" id="0">
      <data key="d35">34020</data>
      <data key="d36">4232</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">205</data>
    </edge>
    <edge source="58598" target="53554" id="0">
      <data key="d35">58598</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">538</data>
    </edge>
    <edge source="58598" target="53554" id="1">
      <data key="d35">58598</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">538</data>
    </edge>
    <edge source="58598" target="53554" id="2">
      <data key="d35">58598</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">538</data>
    </edge>
    <edge source="58598" target="40522" id="0">
      <data key="d35">58598</data>
      <data key="d36">40522</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">542</data>
    </edge>
    <edge source="58598" target="40522" id="1">
      <data key="d35">58598</data>
      <data key="d36">40522</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">542</data>
    </edge>
    <edge source="39145" target="57364" id="0">
      <data key="d35">39145</data>
      <data key="d36">57364</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">213</data>
    </edge>
    <edge source="31978" target="33884" id="0">
      <data key="d35">31978</data>
      <data key="d36">33884</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">593</data>
    </edge>
    <edge source="49387" target="33492" id="0">
      <data key="d35">49387</data>
      <data key="d36">33492</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">42</data>
    </edge>
    <edge source="14572" target="33403" id="0">
      <data key="d35">14572</data>
      <data key="d36">33403</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">185</data>
    </edge>
    <edge source="14572" target="33403" id="1">
      <data key="d35">14572</data>
      <data key="d36">33403</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">192</data>
    </edge>
    <edge source="15595" target="41219" id="0">
      <data key="d35">15595</data>
      <data key="d36">41219</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">394</data>
    </edge>
    <edge source="15595" target="41219" id="1">
      <data key="d35">15595</data>
      <data key="d36">41219</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">394</data>
    </edge>
    <edge source="47342" target="53554" id="0">
      <data key="d35">47342</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">79</data>
    </edge>
    <edge source="47342" target="53554" id="1">
      <data key="d35">47342</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">79</data>
    </edge>
    <edge source="47342" target="53554" id="2">
      <data key="d35">47342</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">79</data>
    </edge>
    <edge source="47342" target="53554" id="3">
      <data key="d35">47342</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">81</data>
    </edge>
    <edge source="47342" target="53554" id="4">
      <data key="d35">47342</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">81</data>
    </edge>
    <edge source="47342" target="53554" id="5">
      <data key="d35">47342</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">81</data>
    </edge>
    <edge source="8432" target="60086" id="0">
      <data key="d35">8432</data>
      <data key="d36">60086</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">351</data>
    </edge>
    <edge source="52464" target="33492" id="0">
      <data key="d35">52464</data>
      <data key="d36">33492</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">96</data>
    </edge>
    <edge source="31987" target="33909" id="0">
      <data key="d35">31987</data>
      <data key="d36">33909</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">599</data>
    </edge>
    <edge source="54516" target="53862" id="0">
      <data key="d35">54516</data>
      <data key="d36">53862</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">88</data>
    </edge>
    <edge source="54516" target="33492" id="0">
      <data key="d35">54516</data>
      <data key="d36">33492</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">90</data>
    </edge>
    <edge source="55544" target="33492" id="0">
      <data key="d35">55544</data>
      <data key="d36">33492</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">453</data>
    </edge>
    <edge source="64767" target="64839" id="0">
      <data key="d35">64767</data>
      <data key="d36">64839</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">41</data>
    </edge>
    <edge source="39169" target="57322" id="0">
      <data key="d35">39169</data>
      <data key="d36">57322</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">230</data>
    </edge>
    <edge source="39169" target="57322" id="1">
      <data key="d35">39169</data>
      <data key="d36">57322</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">230</data>
    </edge>
    <edge source="41219" target="29885" id="0">
      <data key="d35">41219</data>
      <data key="d36">29885</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">389</data>
    </edge>
    <edge source="41219" target="29885" id="1">
      <data key="d35">41219</data>
      <data key="d36">29885</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">389</data>
    </edge>
    <edge source="41219" target="33492" id="0">
      <data key="d35">41219</data>
      <data key="d36">33492</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">401</data>
    </edge>
    <edge source="57603" target="64711" id="0">
      <data key="d35">57603</data>
      <data key="d36">64711</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">79</data>
    </edge>
    <edge source="57603" target="64711" id="1">
      <data key="d35">57603</data>
      <data key="d36">64711</data>
      <data key="d37">6</data>
      <data key="d38">control_local</data>
      <data key="d39">79</data>
    </edge>
    <edge source="17668" target="53862" id="0">
      <data key="d35">17668</data>
      <data key="d36">53862</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">178</data>
    </edge>
    <edge source="10506" target="53554" id="0">
      <data key="d35">10506</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">37</data>
    </edge>
    <edge source="10506" target="53554" id="1">
      <data key="d35">10506</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">37</data>
    </edge>
    <edge source="10506" target="53554" id="2">
      <data key="d35">10506</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">37</data>
    </edge>
    <edge source="10506" target="53862" id="0">
      <data key="d35">10506</data>
      <data key="d36">53862</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">62</data>
    </edge>
    <edge source="9487" target="9618" id="0">
      <data key="d35">9487</data>
      <data key="d36">9618</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">467</data>
    </edge>
    <edge source="9487" target="9618" id="1">
      <data key="d35">9487</data>
      <data key="d36">9618</data>
      <data key="d37">6</data>
      <data key="d38">control_local</data>
      <data key="d39">467</data>
    </edge>
    <edge source="9487" target="9618" id="2">
      <data key="d35">9487</data>
      <data key="d36">9618</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">482</data>
    </edge>
    <edge source="9487" target="59869" id="0">
      <data key="d35">9487</data>
      <data key="d36">59869</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">481</data>
    </edge>
    <edge source="9487" target="59869" id="1">
      <data key="d35">9487</data>
      <data key="d36">59869</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">481</data>
    </edge>
    <edge source="28944" target="41005" id="0">
      <data key="d35">28944</data>
      <data key="d36">41005</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">68</data>
    </edge>
    <edge source="28944" target="41005" id="1">
      <data key="d35">28944</data>
      <data key="d36">41005</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">68</data>
    </edge>
    <edge source="24858" target="28477" id="0">
      <data key="d35">24858</data>
      <data key="d36">28477</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">326</data>
    </edge>
    <edge source="24858" target="28523" id="0">
      <data key="d35">24858</data>
      <data key="d36">28523</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">329</data>
    </edge>
    <edge source="38170" target="38166" id="0">
      <data key="d35">38170</data>
      <data key="d36">38166</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">106</data>
    </edge>
    <edge source="11549" target="53725" id="0">
      <data key="d35">11549</data>
      <data key="d36">53725</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">85</data>
    </edge>
    <edge source="11549" target="53725" id="1">
      <data key="d35">11549</data>
      <data key="d36">53725</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">85</data>
    </edge>
    <edge source="11549" target="53554" id="0">
      <data key="d35">11549</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">87</data>
    </edge>
    <edge source="11549" target="53554" id="1">
      <data key="d35">11549</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">87</data>
    </edge>
    <edge source="11549" target="53554" id="2">
      <data key="d35">11549</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">87</data>
    </edge>
    <edge source="62752" target="33598" id="0">
      <data key="d35">62752</data>
      <data key="d36">33598</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">139</data>
    </edge>
    <edge source="12580" target="53862" id="0">
      <data key="d35">12580</data>
      <data key="d36">53862</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">34</data>
    </edge>
    <edge source="16679" target="33403" id="0">
      <data key="d35">16679</data>
      <data key="d36">33403</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">787</data>
    </edge>
    <edge source="16679" target="33492" id="0">
      <data key="d35">16679</data>
      <data key="d36">33492</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">806</data>
    </edge>
    <edge source="64807" target="64839" id="0">
      <data key="d35">64807</data>
      <data key="d36">64839</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">63</data>
    </edge>
    <edge source="3376" target="33492" id="0">
      <data key="d35">3376</data>
      <data key="d36">33492</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">102</data>
    </edge>
    <edge source="5431" target="53554" id="0">
      <data key="d35">5431</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">197</data>
    </edge>
    <edge source="5431" target="53554" id="1">
      <data key="d35">5431</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">197</data>
    </edge>
    <edge source="5431" target="53554" id="2">
      <data key="d35">5431</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">197</data>
    </edge>
    <edge source="5431" target="53554" id="3">
      <data key="d35">5431</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">202</data>
    </edge>
    <edge source="5431" target="53554" id="4">
      <data key="d35">5431</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">202</data>
    </edge>
    <edge source="5431" target="53554" id="5">
      <data key="d35">5431</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">202</data>
    </edge>
    <edge source="5431" target="53554" id="6">
      <data key="d35">5431</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">207</data>
    </edge>
    <edge source="5431" target="53554" id="7">
      <data key="d35">5431</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">207</data>
    </edge>
    <edge source="5431" target="53554" id="8">
      <data key="d35">5431</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">207</data>
    </edge>
    <edge source="5431" target="40522" id="0">
      <data key="d35">5431</data>
      <data key="d36">40522</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">199</data>
    </edge>
    <edge source="5431" target="40522" id="1">
      <data key="d35">5431</data>
      <data key="d36">40522</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">209</data>
    </edge>
    <edge source="5431" target="40584" id="0">
      <data key="d35">5431</data>
      <data key="d36">40584</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">204</data>
    </edge>
    <edge source="8510" target="60086" id="0">
      <data key="d35">8510</data>
      <data key="d36">60086</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">403</data>
    </edge>
    <edge source="41278" target="33403" id="0">
      <data key="d35">41278</data>
      <data key="d36">33403</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">430</data>
    </edge>
    <edge source="41278" target="29885" id="0">
      <data key="d35">41278</data>
      <data key="d36">29885</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">431</data>
    </edge>
    <edge source="41278" target="29885" id="1">
      <data key="d35">41278</data>
      <data key="d36">29885</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">431</data>
    </edge>
    <edge source="41278" target="33492" id="0">
      <data key="d35">41278</data>
      <data key="d36">33492</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">437</data>
    </edge>
    <edge source="41278" target="4278" id="0">
      <data key="d35">41278</data>
      <data key="d36">4278</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">450</data>
    </edge>
    <edge source="15691" target="33403" id="0">
      <data key="d35">15691</data>
      <data key="d36">33403</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">432</data>
    </edge>
    <edge source="15691" target="33403" id="1">
      <data key="d35">15691</data>
      <data key="d36">33403</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">442</data>
    </edge>
    <edge source="15691" target="40522" id="0">
      <data key="d35">15691</data>
      <data key="d36">40522</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">438</data>
    </edge>
    <edge source="15691" target="40522" id="1">
      <data key="d35">15691</data>
      <data key="d36">40522</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">438</data>
    </edge>
    <edge source="51533" target="33598" id="0">
      <data key="d35">51533</data>
      <data key="d36">33598</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">587</data>
    </edge>
    <edge source="36173" target="36167" id="0">
      <data key="d35">36173</data>
      <data key="d36">36167</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">53</data>
    </edge>
    <edge source="36173" target="36167" id="1">
      <data key="d35">36173</data>
      <data key="d36">36167</data>
      <data key="d37">6</data>
      <data key="d38">control_local</data>
      <data key="d39">53</data>
    </edge>
    <edge source="36173" target="36167" id="2">
      <data key="d35">36173</data>
      <data key="d36">36167</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">56</data>
    </edge>
    <edge source="21862" target="53800" id="0">
      <data key="d35">21862</data>
      <data key="d36">53800</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">198</data>
    </edge>
    <edge source="21862" target="53800" id="1">
      <data key="d35">21862</data>
      <data key="d36">53800</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">198</data>
    </edge>
    <edge source="21862" target="53800" id="2">
      <data key="d35">21862</data>
      <data key="d36">53800</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">198</data>
    </edge>
    <edge source="30055" target="30000" id="0">
      <data key="d35">30055</data>
      <data key="d36">30000</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">94</data>
    </edge>
    <edge source="30055" target="30004" id="0">
      <data key="d35">30055</data>
      <data key="d36">30004</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">95</data>
    </edge>
    <edge source="11629" target="33598" id="0">
      <data key="d35">11629</data>
      <data key="d36">33598</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">110</data>
    </edge>
    <edge source="11629" target="33598" id="1">
      <data key="d35">11629</data>
      <data key="d36">33598</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">112</data>
    </edge>
    <edge source="38255" target="38238" id="0">
      <data key="d35">38255</data>
      <data key="d36">38238</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">160</data>
    </edge>
    <edge source="38255" target="38238" id="1">
      <data key="d35">38255</data>
      <data key="d36">38238</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">160</data>
    </edge>
    <edge source="38255" target="38239" id="0">
      <data key="d35">38255</data>
      <data key="d36">38239</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">161</data>
    </edge>
    <edge source="38255" target="38239" id="1">
      <data key="d35">38255</data>
      <data key="d36">38239</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">161</data>
    </edge>
    <edge source="26992" target="53862" id="0">
      <data key="d35">26992</data>
      <data key="d36">53862</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">51</data>
    </edge>
    <edge source="40308" target="33492" id="0">
      <data key="d35">40308</data>
      <data key="d36">33492</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">64</data>
    </edge>
    <edge source="3456" target="33598" id="0">
      <data key="d35">3456</data>
      <data key="d36">33598</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">142</data>
    </edge>
    <edge source="38273" target="38238" id="0">
      <data key="d35">38273</data>
      <data key="d36">38238</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">177</data>
    </edge>
    <edge source="38273" target="38238" id="1">
      <data key="d35">38273</data>
      <data key="d36">38238</data>
      <data key="d37">6</data>
      <data key="d38">control_local</data>
      <data key="d39">177</data>
    </edge>
    <edge source="38273" target="38238" id="2">
      <data key="d35">38273</data>
      <data key="d36">38238</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">179</data>
    </edge>
    <edge source="38273" target="38238" id="3">
      <data key="d35">38273</data>
      <data key="d36">38238</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">180</data>
    </edge>
    <edge source="38273" target="38239" id="0">
      <data key="d35">38273</data>
      <data key="d36">38239</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">182</data>
    </edge>
    <edge source="38273" target="38239" id="1">
      <data key="d35">38273</data>
      <data key="d36">38239</data>
      <data key="d37">6</data>
      <data key="d38">control_local</data>
      <data key="d39">182</data>
    </edge>
    <edge source="38273" target="38239" id="2">
      <data key="d35">38273</data>
      <data key="d36">38239</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">184</data>
    </edge>
    <edge source="61829" target="53554" id="0">
      <data key="d35">61829</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">309</data>
    </edge>
    <edge source="61829" target="53554" id="1">
      <data key="d35">61829</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">309</data>
    </edge>
    <edge source="61829" target="53554" id="2">
      <data key="d35">61829</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">309</data>
    </edge>
    <edge source="11653" target="53554" id="0">
      <data key="d35">11653</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">117</data>
    </edge>
    <edge source="11653" target="53554" id="1">
      <data key="d35">11653</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">117</data>
    </edge>
    <edge source="11653" target="53554" id="2">
      <data key="d35">11653</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">117</data>
    </edge>
    <edge source="11653" target="61077" id="0">
      <data key="d35">11653</data>
      <data key="d36">61077</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">130</data>
    </edge>
    <edge source="28041" target="53862" id="0">
      <data key="d35">28041</data>
      <data key="d36">53862</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">440</data>
    </edge>
    <edge source="35213" target="59869" id="0">
      <data key="d35">35213</data>
      <data key="d36">59869</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">32</data>
    </edge>
    <edge source="8604" target="8751" id="0">
      <data key="d35">8604</data>
      <data key="d36">8751</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">441</data>
    </edge>
    <edge source="8604" target="8751" id="1">
      <data key="d35">8604</data>
      <data key="d36">8751</data>
      <data key="d37">6</data>
      <data key="d38">control_local</data>
      <data key="d39">441</data>
    </edge>
    <edge source="8604" target="8751" id="2">
      <data key="d35">8604</data>
      <data key="d36">8751</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">454</data>
    </edge>
    <edge source="8604" target="60086" id="0">
      <data key="d35">8604</data>
      <data key="d36">60086</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">469</data>
    </edge>
    <edge source="52636" target="53554" id="0">
      <data key="d35">52636</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">128</data>
    </edge>
    <edge source="52636" target="53554" id="1">
      <data key="d35">52636</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">128</data>
    </edge>
    <edge source="52636" target="53554" id="2">
      <data key="d35">52636</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">128</data>
    </edge>
    <edge source="45478" target="40729" id="0">
      <data key="d35">45478</data>
      <data key="d36">40729</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">221</data>
    </edge>
    <edge source="45478" target="40729" id="1">
      <data key="d35">45478</data>
      <data key="d36">40729</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">221</data>
    </edge>
    <edge source="45478" target="33403" id="0">
      <data key="d35">45478</data>
      <data key="d36">33403</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">228</data>
    </edge>
    <edge source="45478" target="29885" id="0">
      <data key="d35">45478</data>
      <data key="d36">29885</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">230</data>
    </edge>
    <edge source="45478" target="29885" id="1">
      <data key="d35">45478</data>
      <data key="d36">29885</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">230</data>
    </edge>
    <edge source="45478" target="46689" id="0">
      <data key="d35">45478</data>
      <data key="d36">46689</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">235</data>
    </edge>
    <edge source="35239" target="57333" id="0">
      <data key="d35">35239</data>
      <data key="d36">57333</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">45</data>
    </edge>
    <edge source="20904" target="33403" id="0">
      <data key="d35">20904</data>
      <data key="d36">33403</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">75</data>
    </edge>
    <edge source="15783" target="33492" id="0">
      <data key="d35">15783</data>
      <data key="d36">33492</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">460</data>
    </edge>
    <edge source="15783" target="33403" id="0">
      <data key="d35">15783</data>
      <data key="d36">33403</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">461</data>
    </edge>
    <edge source="62891" target="60086" id="0">
      <data key="d35">62891</data>
      <data key="d36">60086</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">107</data>
    </edge>
    <edge source="62891" target="60086" id="1">
      <data key="d35">62891</data>
      <data key="d36">60086</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">108</data>
    </edge>
    <edge source="10669" target="53554" id="0">
      <data key="d35">10669</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">69</data>
    </edge>
    <edge source="10669" target="53554" id="1">
      <data key="d35">10669</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">69</data>
    </edge>
    <edge source="10669" target="53554" id="2">
      <data key="d35">10669</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">69</data>
    </edge>
    <edge source="10669" target="53862" id="0">
      <data key="d35">10669</data>
      <data key="d36">53862</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">89</data>
    </edge>
    <edge source="3513" target="53554" id="0">
      <data key="d35">3513</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">159</data>
    </edge>
    <edge source="3513" target="53554" id="1">
      <data key="d35">3513</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">159</data>
    </edge>
    <edge source="3513" target="53554" id="2">
      <data key="d35">3513</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">159</data>
    </edge>
    <edge source="3513" target="28557" id="0">
      <data key="d35">3513</data>
      <data key="d36">28557</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">162</data>
    </edge>
    <edge source="55738" target="26654" id="0">
      <data key="d35">55738</data>
      <data key="d36">26654</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">44</data>
    </edge>
    <edge source="55738" target="26654" id="1">
      <data key="d35">55738</data>
      <data key="d36">26654</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">44</data>
    </edge>
    <edge source="55738" target="33492" id="0">
      <data key="d35">55738</data>
      <data key="d36">33492</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">48</data>
    </edge>
    <edge source="55738" target="33492" id="1">
      <data key="d35">55738</data>
      <data key="d36">33492</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">58</data>
    </edge>
    <edge source="55738" target="12383" id="0">
      <data key="d35">55738</data>
      <data key="d36">12383</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">54</data>
    </edge>
    <edge source="55738" target="12383" id="1">
      <data key="d35">55738</data>
      <data key="d36">12383</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">54</data>
    </edge>
    <edge source="7610" target="7550" id="0">
      <data key="d35">7610</data>
      <data key="d36">7550</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">168</data>
    </edge>
    <edge source="7610" target="7550" id="1">
      <data key="d35">7610</data>
      <data key="d36">7550</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">171</data>
    </edge>
    <edge source="7610" target="7550" id="2">
      <data key="d35">7610</data>
      <data key="d36">7550</data>
      <data key="d37">6</data>
      <data key="d38">control_local</data>
      <data key="d39">171</data>
    </edge>
    <edge source="7610" target="7554" id="0">
      <data key="d35">7610</data>
      <data key="d36">7554</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">169</data>
    </edge>
    <edge source="7610" target="7562" id="0">
      <data key="d35">7610</data>
      <data key="d36">7562</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">173</data>
    </edge>
    <edge source="7610" target="7566" id="0">
      <data key="d35">7610</data>
      <data key="d36">7566</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">174</data>
    </edge>
    <edge source="17851" target="53862" id="0">
      <data key="d35">17851</data>
      <data key="d36">53862</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">282</data>
    </edge>
    <edge source="9663" target="53554" id="0">
      <data key="d35">9663</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">556</data>
    </edge>
    <edge source="9663" target="53554" id="1">
      <data key="d35">9663</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">556</data>
    </edge>
    <edge source="9663" target="53554" id="2">
      <data key="d35">9663</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">556</data>
    </edge>
    <edge source="9663" target="53554" id="3">
      <data key="d35">9663</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">557</data>
    </edge>
    <edge source="9663" target="53554" id="4">
      <data key="d35">9663</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">557</data>
    </edge>
    <edge source="9663" target="53554" id="5">
      <data key="d35">9663</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">557</data>
    </edge>
    <edge source="35266" target="57322" id="0">
      <data key="d35">35266</data>
      <data key="d36">57322</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">57</data>
    </edge>
    <edge source="35266" target="57322" id="1">
      <data key="d35">35266</data>
      <data key="d36">57322</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">57</data>
    </edge>
    <edge source="26052" target="12518" id="0">
      <data key="d35">26052</data>
      <data key="d36">12518</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">209</data>
    </edge>
    <edge source="54730" target="53554" id="0">
      <data key="d35">54730</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">181</data>
    </edge>
    <edge source="54730" target="53554" id="1">
      <data key="d35">54730</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">181</data>
    </edge>
    <edge source="54730" target="53554" id="2">
      <data key="d35">54730</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">181</data>
    </edge>
    <edge source="11723" target="53554" id="0">
      <data key="d35">11723</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">135</data>
    </edge>
    <edge source="11723" target="53554" id="1">
      <data key="d35">11723</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">135</data>
    </edge>
    <edge source="11723" target="53554" id="2">
      <data key="d35">11723</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">135</data>
    </edge>
    <edge source="38348" target="38344" id="0">
      <data key="d35">38348</data>
      <data key="d36">38344</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">240</data>
    </edge>
    <edge source="38348" target="38344" id="1">
      <data key="d35">38348</data>
      <data key="d36">38344</data>
      <data key="d37">6</data>
      <data key="d38">control_local</data>
      <data key="d39">240</data>
    </edge>
    <edge source="38348" target="38344" id="2">
      <data key="d35">38348</data>
      <data key="d36">38344</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">243</data>
    </edge>
    <edge source="38348" target="38344" id="3">
      <data key="d35">38348</data>
      <data key="d36">38344</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">250</data>
    </edge>
    <edge source="38348" target="38344" id="4">
      <data key="d35">38348</data>
      <data key="d36">38344</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">250</data>
    </edge>
    <edge source="49613" target="59869" id="0">
      <data key="d35">49613</data>
      <data key="d36">59869</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">180</data>
    </edge>
    <edge source="14802" target="33875" id="0">
      <data key="d35">14802</data>
      <data key="d36">33875</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">86</data>
    </edge>
    <edge source="20952" target="33403" id="0">
      <data key="d35">20952</data>
      <data key="d36">33403</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">95</data>
    </edge>
    <edge source="20952" target="33403" id="1">
      <data key="d35">20952</data>
      <data key="d36">33403</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">102</data>
    </edge>
    <edge source="48612" target="33598" id="0">
      <data key="d35">48612</data>
      <data key="d36">33598</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">476</data>
    </edge>
    <edge source="17898" target="53862" id="0">
      <data key="d35">17898</data>
      <data key="d36">53862</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">311</data>
    </edge>
    <edge source="58860" target="58912" id="0">
      <data key="d35">58860</data>
      <data key="d36">58912</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">161</data>
    </edge>
    <edge source="18930" target="59289" id="0">
      <data key="d35">18930</data>
      <data key="d36">59289</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">286</data>
    </edge>
    <edge source="52723" target="33403" id="0">
      <data key="d35">52723</data>
      <data key="d36">33403</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">156</data>
    </edge>
    <edge source="40435" target="40428" id="0">
      <data key="d35">40435</data>
      <data key="d36">40428</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">66</data>
    </edge>
    <edge source="40435" target="33875" id="0">
      <data key="d35">40435</data>
      <data key="d36">33875</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">66</data>
    </edge>
    <edge source="45563" target="40729" id="0">
      <data key="d35">45563</data>
      <data key="d36">40729</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">248</data>
    </edge>
    <edge source="45563" target="40729" id="1">
      <data key="d35">45563</data>
      <data key="d36">40729</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">248</data>
    </edge>
    <edge source="45563" target="40729" id="2">
      <data key="d35">45563</data>
      <data key="d36">40729</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">252</data>
    </edge>
    <edge source="45563" target="40729" id="3">
      <data key="d35">45563</data>
      <data key="d36">40729</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">252</data>
    </edge>
    <edge source="45563" target="33403" id="0">
      <data key="d35">45563</data>
      <data key="d36">33403</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">258</data>
    </edge>
    <edge source="47613" target="40616" id="0">
      <data key="d35">47613</data>
      <data key="d36">40616</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">145</data>
    </edge>
    <edge source="61953" target="53554" id="0">
      <data key="d35">61953</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">64</data>
    </edge>
    <edge source="61953" target="53554" id="1">
      <data key="d35">61953</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">64</data>
    </edge>
    <edge source="61953" target="53554" id="2">
      <data key="d35">61953</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">64</data>
    </edge>
    <edge source="61953" target="53554" id="3">
      <data key="d35">61953</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">70</data>
    </edge>
    <edge source="61953" target="53554" id="4">
      <data key="d35">61953</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">70</data>
    </edge>
    <edge source="61953" target="53554" id="5">
      <data key="d35">61953</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">70</data>
    </edge>
    <edge source="61953" target="40522" id="0">
      <data key="d35">61953</data>
      <data key="d36">40522</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">66</data>
    </edge>
    <edge source="61953" target="40522" id="1">
      <data key="d35">61953</data>
      <data key="d36">40522</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">72</data>
    </edge>
    <edge source="11778" target="53862" id="0">
      <data key="d35">11778</data>
      <data key="d36">53862</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">52</data>
    </edge>
    <edge source="27142" target="53554" id="0">
      <data key="d35">27142</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">111</data>
    </edge>
    <edge source="27142" target="53554" id="1">
      <data key="d35">27142</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">111</data>
    </edge>
    <edge source="27142" target="53554" id="2">
      <data key="d35">27142</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">111</data>
    </edge>
    <edge source="27142" target="40522" id="0">
      <data key="d35">27142</data>
      <data key="d36">40522</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">114</data>
    </edge>
    <edge source="35346" target="57322" id="0">
      <data key="d35">35346</data>
      <data key="d36">57322</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">93</data>
    </edge>
    <edge source="35346" target="57322" id="1">
      <data key="d35">35346</data>
      <data key="d36">57322</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">93</data>
    </edge>
    <edge source="38425" target="53725" id="0">
      <data key="d35">38425</data>
      <data key="d36">53725</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">273</data>
    </edge>
    <edge source="38425" target="53840" id="0">
      <data key="d35">38425</data>
      <data key="d36">53840</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">294</data>
    </edge>
    <edge source="6684" target="6779" id="0">
      <data key="d35">6684</data>
      <data key="d36">6779</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">30</data>
    </edge>
    <edge source="6684" target="6780" id="0">
      <data key="d35">6684</data>
      <data key="d36">6780</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">31</data>
    </edge>
    <edge source="6684" target="6780" id="1">
      <data key="d35">6684</data>
      <data key="d36">6780</data>
      <data key="d37">6</data>
      <data key="d38">control_local</data>
      <data key="d39">31</data>
    </edge>
    <edge source="6684" target="6780" id="2">
      <data key="d35">6684</data>
      <data key="d36">6780</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">33</data>
    </edge>
    <edge source="6684" target="6780" id="3">
      <data key="d35">6684</data>
      <data key="d36">6780</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">34</data>
    </edge>
    <edge source="6684" target="6780" id="4">
      <data key="d35">6684</data>
      <data key="d36">6780</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">34</data>
    </edge>
    <edge source="16925" target="33875" id="0">
      <data key="d35">16925</data>
      <data key="d36">33875</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">855</data>
    </edge>
    <edge source="544" target="534" id="0">
      <data key="d35">544</data>
      <data key="d36">534</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">23</data>
    </edge>
    <edge source="58922" target="58732" id="0">
      <data key="d35">58922</data>
      <data key="d36">58732</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">193</data>
    </edge>
    <edge source="1580" target="1675" id="0">
      <data key="d35">1580</data>
      <data key="d36">1675</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">54</data>
    </edge>
    <edge source="33326" target="33334" id="0">
      <data key="d35">33326</data>
      <data key="d36">33334</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">41</data>
    </edge>
    <edge source="36401" target="19639" id="0">
      <data key="d35">36401</data>
      <data key="d36">19639</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">160</data>
    </edge>
    <edge source="36401" target="33598" id="0">
      <data key="d35">36401</data>
      <data key="d36">33598</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">164</data>
    </edge>
    <edge source="15922" target="33403" id="0">
      <data key="d35">15922</data>
      <data key="d36">33403</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">531</data>
    </edge>
    <edge source="10807" target="53768" id="0">
      <data key="d35">10807</data>
      <data key="d36">53768</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">125</data>
    </edge>
    <edge source="10807" target="53768" id="1">
      <data key="d35">10807</data>
      <data key="d36">53768</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">125</data>
    </edge>
    <edge source="10807" target="53768" id="2">
      <data key="d35">10807</data>
      <data key="d36">53768</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">125</data>
    </edge>
    <edge source="10807" target="10506" id="0">
      <data key="d35">10807</data>
      <data key="d36">10506</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">127</data>
    </edge>
    <edge source="33336" target="40974" id="0">
      <data key="d35">33336</data>
      <data key="d36">40974</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">56</data>
    </edge>
    <edge source="33336" target="40974" id="1">
      <data key="d35">33336</data>
      <data key="d36">40974</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">56</data>
    </edge>
    <edge source="33336" target="40522" id="0">
      <data key="d35">33336</data>
      <data key="d36">40522</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">57</data>
    </edge>
    <edge source="33336" target="40522" id="1">
      <data key="d35">33336</data>
      <data key="d36">40522</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">57</data>
    </edge>
    <edge source="62009" target="60726" id="0">
      <data key="d35">62009</data>
      <data key="d36">60726</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">83</data>
    </edge>
    <edge source="62009" target="60726" id="1">
      <data key="d35">62009</data>
      <data key="d36">60726</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">87</data>
    </edge>
    <edge source="62009" target="60726" id="2">
      <data key="d35">62009</data>
      <data key="d36">60726</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">89</data>
    </edge>
    <edge source="62009" target="60726" id="3">
      <data key="d35">62009</data>
      <data key="d36">60726</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">115</data>
    </edge>
    <edge source="62009" target="60726" id="4">
      <data key="d35">62009</data>
      <data key="d36">60726</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">118</data>
    </edge>
    <edge source="62009" target="60726" id="5">
      <data key="d35">62009</data>
      <data key="d36">60726</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">121</data>
    </edge>
    <edge source="62009" target="60726" id="6">
      <data key="d35">62009</data>
      <data key="d36">60726</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">148</data>
    </edge>
    <edge source="62009" target="60726" id="7">
      <data key="d35">62009</data>
      <data key="d36">60726</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">150</data>
    </edge>
    <edge source="62009" target="60726" id="8">
      <data key="d35">62009</data>
      <data key="d36">60726</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">166</data>
    </edge>
    <edge source="62009" target="60726" id="9">
      <data key="d35">62009</data>
      <data key="d36">60726</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">168</data>
    </edge>
    <edge source="62009" target="53862" id="0">
      <data key="d35">62009</data>
      <data key="d36">53862</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">85</data>
    </edge>
    <edge source="62009" target="53862" id="1">
      <data key="d35">62009</data>
      <data key="d36">53862</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">123</data>
    </edge>
    <edge source="62009" target="60883" id="0">
      <data key="d35">62009</data>
      <data key="d36">60883</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">96</data>
    </edge>
    <edge source="62009" target="60883" id="1">
      <data key="d35">62009</data>
      <data key="d36">60883</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">105</data>
    </edge>
    <edge source="41529" target="9918" id="0">
      <data key="d35">41529</data>
      <data key="d36">9918</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">83</data>
    </edge>
    <edge source="41529" target="9918" id="1">
      <data key="d35">41529</data>
      <data key="d36">9918</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">83</data>
    </edge>
    <edge source="41529" target="9918" id="2">
      <data key="d35">41529</data>
      <data key="d36">9918</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">83</data>
    </edge>
    <edge source="21047" target="53862" id="0">
      <data key="d35">21047</data>
      <data key="d36">53862</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">126</data>
    </edge>
    <edge source="21047" target="33403" id="0">
      <data key="d35">21047</data>
      <data key="d36">33403</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">128</data>
    </edge>
    <edge source="21047" target="33403" id="1">
      <data key="d35">21047</data>
      <data key="d36">33403</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">141</data>
    </edge>
    <edge source="65078" target="65076" id="0">
      <data key="d35">65078</data>
      <data key="d36">65076</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">51</data>
    </edge>
    <edge source="52793" target="53862" id="0">
      <data key="d35">52793</data>
      <data key="d36">53862</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">173</data>
    </edge>
    <edge source="52793" target="53862" id="1">
      <data key="d35">52793</data>
      <data key="d36">53862</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">191</data>
    </edge>
    <edge source="52793" target="53862" id="2">
      <data key="d35">52793</data>
      <data key="d36">53862</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">199</data>
    </edge>
    <edge source="52793" target="53862" id="3">
      <data key="d35">52793</data>
      <data key="d36">53862</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">202</data>
    </edge>
    <edge source="52793" target="33403" id="0">
      <data key="d35">52793</data>
      <data key="d36">33403</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">175</data>
    </edge>
    <edge source="52793" target="33403" id="1">
      <data key="d35">52793</data>
      <data key="d36">33403</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">178</data>
    </edge>
    <edge source="52793" target="33403" id="2">
      <data key="d35">52793</data>
      <data key="d36">33403</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">204</data>
    </edge>
    <edge source="52793" target="52256" id="0">
      <data key="d35">52793</data>
      <data key="d36">52256</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">176</data>
    </edge>
    <edge source="52793" target="52256" id="1">
      <data key="d35">52793</data>
      <data key="d36">52256</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">176</data>
    </edge>
    <edge source="52793" target="33492" id="0">
      <data key="d35">52793</data>
      <data key="d36">33492</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">183</data>
    </edge>
    <edge source="52793" target="33492" id="1">
      <data key="d35">52793</data>
      <data key="d36">33492</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">193</data>
    </edge>
    <edge source="14910" target="33492" id="0">
      <data key="d35">14910</data>
      <data key="d36">33492</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">196</data>
    </edge>
    <edge source="58937" target="58664" id="0">
      <data key="d35">58937</data>
      <data key="d36">58664</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">198</data>
    </edge>
    <edge source="49728" target="49742" id="0">
      <data key="d35">49728</data>
      <data key="d36">49742</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">211</data>
    </edge>
    <edge source="49728" target="49741" id="0">
      <data key="d35">49728</data>
      <data key="d36">49741</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">211</data>
    </edge>
    <edge source="24126" target="33598" id="0">
      <data key="d35">24126</data>
      <data key="d36">33598</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">104</data>
    </edge>
    <edge source="55875" target="59869" id="0">
      <data key="d35">55875</data>
      <data key="d36">59869</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">49</data>
    </edge>
    <edge source="55875" target="59869" id="1">
      <data key="d35">55875</data>
      <data key="d36">59869</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">64</data>
    </edge>
    <edge source="55875" target="59869" id="2">
      <data key="d35">55875</data>
      <data key="d36">59869</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">117</data>
    </edge>
    <edge source="45638" target="40729" id="0">
      <data key="d35">45638</data>
      <data key="d36">40729</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">297</data>
    </edge>
    <edge source="45638" target="40729" id="1">
      <data key="d35">45638</data>
      <data key="d36">40729</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">297</data>
    </edge>
    <edge source="43592" target="33492" id="0">
      <data key="d35">43592</data>
      <data key="d36">33492</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">329</data>
    </edge>
    <edge source="58952" target="58664" id="0">
      <data key="d35">58952</data>
      <data key="d36">58664</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">207</data>
    </edge>
    <edge source="58952" target="53840" id="0">
      <data key="d35">58952</data>
      <data key="d36">53840</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">229</data>
    </edge>
    <edge source="58952" target="53840" id="1">
      <data key="d35">58952</data>
      <data key="d36">53840</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">229</data>
    </edge>
    <edge source="58952" target="53840" id="2">
      <data key="d35">58952</data>
      <data key="d36">53840</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">230</data>
    </edge>
    <edge source="58952" target="53840" id="3">
      <data key="d35">58952</data>
      <data key="d36">53840</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">230</data>
    </edge>
    <edge source="58952" target="53862" id="0">
      <data key="d35">58952</data>
      <data key="d36">53862</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">246</data>
    </edge>
    <edge source="58952" target="53862" id="1">
      <data key="d35">58952</data>
      <data key="d36">53862</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">265</data>
    </edge>
    <edge source="40522" target="53554" id="0">
      <data key="d35">40522</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">126</data>
    </edge>
    <edge source="40522" target="53554" id="1">
      <data key="d35">40522</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">126</data>
    </edge>
    <edge source="40522" target="53554" id="2">
      <data key="d35">40522</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">126</data>
    </edge>
    <edge source="40522" target="53554" id="3">
      <data key="d35">40522</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">135</data>
    </edge>
    <edge source="40522" target="53554" id="4">
      <data key="d35">40522</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">135</data>
    </edge>
    <edge source="40522" target="53554" id="5">
      <data key="d35">40522</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">135</data>
    </edge>
    <edge source="6733" target="6779" id="0">
      <data key="d35">6733</data>
      <data key="d36">6779</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">41</data>
    </edge>
    <edge source="6733" target="6780" id="0">
      <data key="d35">6733</data>
      <data key="d36">6780</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">42</data>
    </edge>
    <edge source="32337" target="53554" id="0">
      <data key="d35">32337</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">66</data>
    </edge>
    <edge source="32337" target="53554" id="1">
      <data key="d35">32337</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">66</data>
    </edge>
    <edge source="32337" target="53554" id="2">
      <data key="d35">32337</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">66</data>
    </edge>
    <edge source="29271" target="53554" id="0">
      <data key="d35">29271</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">60</data>
    </edge>
    <edge source="29271" target="53554" id="1">
      <data key="d35">29271</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">60</data>
    </edge>
    <edge source="29271" target="53554" id="2">
      <data key="d35">29271</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">60</data>
    </edge>
    <edge source="29271" target="41005" id="0">
      <data key="d35">29271</data>
      <data key="d36">41005</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">63</data>
    </edge>
    <edge source="29271" target="41005" id="1">
      <data key="d35">29271</data>
      <data key="d36">41005</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">63</data>
    </edge>
    <edge source="30299" target="33598" id="0">
      <data key="d35">30299</data>
      <data key="d36">33598</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">60</data>
    </edge>
    <edge source="30299" target="53554" id="0">
      <data key="d35">30299</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">61</data>
    </edge>
    <edge source="30299" target="53554" id="1">
      <data key="d35">30299</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">61</data>
    </edge>
    <edge source="30299" target="53554" id="2">
      <data key="d35">30299</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">61</data>
    </edge>
    <edge source="30299" target="40522" id="0">
      <data key="d35">30299</data>
      <data key="d36">40522</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">63</data>
    </edge>
    <edge source="30299" target="40522" id="1">
      <data key="d35">30299</data>
      <data key="d36">40522</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">63</data>
    </edge>
    <edge source="23139" target="53862" id="0">
      <data key="d35">23139</data>
      <data key="d36">53862</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">51</data>
    </edge>
    <edge source="35428" target="57322" id="0">
      <data key="d35">35428</data>
      <data key="d36">57322</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">129</data>
    </edge>
    <edge source="35428" target="57322" id="1">
      <data key="d35">35428</data>
      <data key="d36">57322</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">129</data>
    </edge>
    <edge source="53862" target="59869" id="0">
      <data key="d35">53862</data>
      <data key="d36">59869</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">136</data>
    </edge>
    <edge source="16998" target="33403" id="0">
      <data key="d35">16998</data>
      <data key="d36">33403</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">1019</data>
    </edge>
    <edge source="16998" target="33403" id="1">
      <data key="d35">16998</data>
      <data key="d36">33403</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">1043</data>
    </edge>
    <edge source="16998" target="33372" id="0">
      <data key="d35">16998</data>
      <data key="d36">33372</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">1025</data>
    </edge>
    <edge source="16998" target="33372" id="1">
      <data key="d35">16998</data>
      <data key="d36">33372</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">1039</data>
    </edge>
    <edge source="16998" target="40522" id="0">
      <data key="d35">16998</data>
      <data key="d36">40522</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">1025</data>
    </edge>
    <edge source="16998" target="40522" id="1">
      <data key="d35">16998</data>
      <data key="d36">40522</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">1025</data>
    </edge>
    <edge source="16998" target="40522" id="2">
      <data key="d35">16998</data>
      <data key="d36">40522</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">1039</data>
    </edge>
    <edge source="16998" target="40522" id="3">
      <data key="d35">16998</data>
      <data key="d36">40522</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">1039</data>
    </edge>
    <edge source="16998" target="33598" id="0">
      <data key="d35">16998</data>
      <data key="d36">33598</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">1037</data>
    </edge>
    <edge source="16998" target="33598" id="1">
      <data key="d35">16998</data>
      <data key="d36">33598</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">1038</data>
    </edge>
    <edge source="16998" target="64711" id="0">
      <data key="d35">16998</data>
      <data key="d36">64711</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">1056</data>
    </edge>
    <edge source="6759" target="6779" id="0">
      <data key="d35">6759</data>
      <data key="d36">6779</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">47</data>
    </edge>
    <edge source="6759" target="6780" id="0">
      <data key="d35">6759</data>
      <data key="d36">6780</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">48</data>
    </edge>
    <edge source="8819" target="53554" id="0">
      <data key="d35">8819</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">555</data>
    </edge>
    <edge source="8819" target="53554" id="1">
      <data key="d35">8819</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">555</data>
    </edge>
    <edge source="8819" target="53554" id="2">
      <data key="d35">8819</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">555</data>
    </edge>
    <edge source="8819" target="53554" id="3">
      <data key="d35">8819</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">556</data>
    </edge>
    <edge source="8819" target="53554" id="4">
      <data key="d35">8819</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">556</data>
    </edge>
    <edge source="8819" target="53554" id="5">
      <data key="d35">8819</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">556</data>
    </edge>
    <edge source="8819" target="53554" id="6">
      <data key="d35">8819</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">557</data>
    </edge>
    <edge source="8819" target="53554" id="7">
      <data key="d35">8819</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">557</data>
    </edge>
    <edge source="8819" target="53554" id="8">
      <data key="d35">8819</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">557</data>
    </edge>
    <edge source="49784" target="53862" id="0">
      <data key="d35">49784</data>
      <data key="d36">53862</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">250</data>
    </edge>
    <edge source="49784" target="49833" id="0">
      <data key="d35">49784</data>
      <data key="d36">49833</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">253</data>
    </edge>
    <edge source="49784" target="49833" id="1">
      <data key="d35">49784</data>
      <data key="d36">49833</data>
      <data key="d37">6</data>
      <data key="d38">control_local</data>
      <data key="d39">253</data>
    </edge>
    <edge source="49784" target="49833" id="2">
      <data key="d35">49784</data>
      <data key="d36">49833</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">255</data>
    </edge>
    <edge source="643" target="6835" id="0">
      <data key="d35">643</data>
      <data key="d36">6835</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">60</data>
    </edge>
    <edge source="25220" target="53768" id="0">
      <data key="d35">25220</data>
      <data key="d36">53768</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">438</data>
    </edge>
    <edge source="25220" target="53768" id="1">
      <data key="d35">25220</data>
      <data key="d36">53768</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">438</data>
    </edge>
    <edge source="25220" target="53768" id="2">
      <data key="d35">25220</data>
      <data key="d36">53768</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">438</data>
    </edge>
    <edge source="40584" target="53725" id="0">
      <data key="d35">40584</data>
      <data key="d36">53725</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">147</data>
    </edge>
    <edge source="56913" target="33492" id="0">
      <data key="d35">56913</data>
      <data key="d36">33492</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">301</data>
    </edge>
    <edge source="1675" target="1579" id="0">
      <data key="d35">1675</data>
      <data key="d36">1579</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">84</data>
    </edge>
    <edge source="22158" target="33598" id="0">
      <data key="d35">22158</data>
      <data key="d36">33598</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">362</data>
    </edge>
    <edge source="14996" target="33403" id="0">
      <data key="d35">14996</data>
      <data key="d36">33403</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">214</data>
    </edge>
    <edge source="14996" target="29885" id="0">
      <data key="d35">14996</data>
      <data key="d36">29885</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">218</data>
    </edge>
    <edge source="14996" target="29885" id="1">
      <data key="d35">14996</data>
      <data key="d36">29885</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">218</data>
    </edge>
    <edge source="14996" target="33492" id="0">
      <data key="d35">14996</data>
      <data key="d36">33492</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">317</data>
    </edge>
    <edge source="43678" target="33492" id="0">
      <data key="d35">43678</data>
      <data key="d36">33492</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">346</data>
    </edge>
    <edge source="43678" target="29735" id="0">
      <data key="d35">43678</data>
      <data key="d36">29735</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">348</data>
    </edge>
    <edge source="43678" target="22975" id="0">
      <data key="d35">43678</data>
      <data key="d36">22975</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">349</data>
    </edge>
    <edge source="13984" target="33492" id="0">
      <data key="d35">13984</data>
      <data key="d36">33492</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">247</data>
    </edge>
    <edge source="44709" target="8810" id="0">
      <data key="d35">44709</data>
      <data key="d36">8810</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">433</data>
    </edge>
    <edge source="44709" target="8810" id="1">
      <data key="d35">44709</data>
      <data key="d36">8810</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">433</data>
    </edge>
    <edge source="47785" target="33598" id="0">
      <data key="d35">47785</data>
      <data key="d36">33598</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">204</data>
    </edge>
    <edge source="47785" target="33598" id="1">
      <data key="d35">47785</data>
      <data key="d36">33598</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">226</data>
    </edge>
    <edge source="47785" target="33598" id="2">
      <data key="d35">47785</data>
      <data key="d36">33598</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">280</data>
    </edge>
    <edge source="47785" target="19639" id="0">
      <data key="d35">47785</data>
      <data key="d36">19639</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">276</data>
    </edge>
    <edge source="28331" target="28477" id="0">
      <data key="d35">28331</data>
      <data key="d36">28477</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">44</data>
    </edge>
    <edge source="28331" target="28477" id="1">
      <data key="d35">28331</data>
      <data key="d36">28477</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">44</data>
    </edge>
    <edge source="65199" target="65184" id="0">
      <data key="d35">65199</data>
      <data key="d36">65184</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">69</data>
    </edge>
    <edge source="6835" target="33875" id="0">
      <data key="d35">6835</data>
      <data key="d36">33875</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">29</data>
    </edge>
    <edge source="6835" target="31978" id="0">
      <data key="d35">6835</data>
      <data key="d36">31978</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">37</data>
    </edge>
    <edge source="11955" target="53862" id="0">
      <data key="d35">11955</data>
      <data key="d36">53862</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">133</data>
    </edge>
    <edge source="65205" target="65184" id="0">
      <data key="d35">65205</data>
      <data key="d36">65184</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">74</data>
    </edge>
    <edge source="35523" target="27537" id="0">
      <data key="d35">35523</data>
      <data key="d36">27537</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">61</data>
    </edge>
    <edge source="35523" target="27537" id="1">
      <data key="d35">35523</data>
      <data key="d36">27537</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">65</data>
    </edge>
    <edge source="23235" target="60086" id="0">
      <data key="d35">23235</data>
      <data key="d36">60086</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">127</data>
    </edge>
    <edge source="24260" target="33598" id="0">
      <data key="d35">24260</data>
      <data key="d36">33598</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">140</data>
    </edge>
    <edge source="24260" target="33598" id="1">
      <data key="d35">24260</data>
      <data key="d36">33598</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">142</data>
    </edge>
    <edge source="65225" target="65184" id="0">
      <data key="d35">65225</data>
      <data key="d36">65184</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">89</data>
    </edge>
    <edge source="716" target="33884" id="0">
      <data key="d35">716</data>
      <data key="d36">33884</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">67</data>
    </edge>
    <edge source="716" target="33965" id="0">
      <data key="d35">716</data>
      <data key="d36">33965</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">68</data>
    </edge>
    <edge source="49869" target="49613" id="0">
      <data key="d35">49869</data>
      <data key="d36">49613</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">300</data>
    </edge>
    <edge source="49869" target="49900" id="0">
      <data key="d35">49869</data>
      <data key="d36">49900</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">300</data>
    </edge>
    <edge source="16084" target="33403" id="0">
      <data key="d35">16084</data>
      <data key="d36">33403</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">569</data>
    </edge>
    <edge source="16084" target="29885" id="0">
      <data key="d35">16084</data>
      <data key="d36">29885</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">573</data>
    </edge>
    <edge source="16084" target="29885" id="1">
      <data key="d35">16084</data>
      <data key="d36">29885</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">573</data>
    </edge>
    <edge source="16084" target="33492" id="0">
      <data key="d35">16084</data>
      <data key="d36">33492</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">594</data>
    </edge>
    <edge source="13014" target="13049" id="0">
      <data key="d35">13014</data>
      <data key="d36">13049</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">60</data>
    </edge>
    <edge source="65243" target="65184" id="0">
      <data key="d35">65243</data>
      <data key="d36">65184</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">100</data>
    </edge>
    <edge source="65243" target="65184" id="1">
      <data key="d35">65243</data>
      <data key="d36">65184</data>
      <data key="d37">6</data>
      <data key="d38">control_local</data>
      <data key="d39">100</data>
    </edge>
    <edge source="65243" target="65184" id="2">
      <data key="d35">65243</data>
      <data key="d36">65184</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">102</data>
    </edge>
    <edge source="65243" target="65184" id="3">
      <data key="d35">65243</data>
      <data key="d36">65184</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">103</data>
    </edge>
    <edge source="65243" target="65183" id="0">
      <data key="d35">65243</data>
      <data key="d36">65183</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">100</data>
    </edge>
    <edge source="65243" target="65183" id="1">
      <data key="d35">65243</data>
      <data key="d36">65183</data>
      <data key="d37">6</data>
      <data key="d38">control_local</data>
      <data key="d39">100</data>
    </edge>
    <edge source="65243" target="34040" id="0">
      <data key="d35">65243</data>
      <data key="d36">34040</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">104</data>
    </edge>
    <edge source="45788" target="40729" id="0">
      <data key="d35">45788</data>
      <data key="d36">40729</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">315</data>
    </edge>
    <edge source="45788" target="33403" id="0">
      <data key="d35">45788</data>
      <data key="d36">33403</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">316</data>
    </edge>
    <edge source="45788" target="33403" id="1">
      <data key="d35">45788</data>
      <data key="d36">33403</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">323</data>
    </edge>
    <edge source="45788" target="40522" id="0">
      <data key="d35">45788</data>
      <data key="d36">40522</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">322</data>
    </edge>
    <edge source="45788" target="40522" id="1">
      <data key="d35">45788</data>
      <data key="d36">40522</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">322</data>
    </edge>
    <edge source="49884" target="49900" id="0">
      <data key="d35">49884</data>
      <data key="d36">49900</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">305</data>
    </edge>
    <edge source="1761" target="1760" id="0">
      <data key="d35">1761</data>
      <data key="d36">1760</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">36</data>
    </edge>
    <edge source="55010" target="60086" id="0">
      <data key="d35">55010</data>
      <data key="d36">60086</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">285</data>
    </edge>
    <edge source="55010" target="53862" id="0">
      <data key="d35">55010</data>
      <data key="d36">53862</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">362</data>
    </edge>
    <edge source="20196" target="12848" id="0">
      <data key="d35">20196</data>
      <data key="d36">12848</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">34</data>
    </edge>
    <edge source="20196" target="12848" id="1">
      <data key="d35">20196</data>
      <data key="d36">12848</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">37</data>
    </edge>
    <edge source="46820" target="33403" id="0">
      <data key="d35">46820</data>
      <data key="d36">33403</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">97</data>
    </edge>
    <edge source="49902" target="49613" id="0">
      <data key="d35">49902</data>
      <data key="d36">49613</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">319</data>
    </edge>
    <edge source="49902" target="49933" id="0">
      <data key="d35">49902</data>
      <data key="d36">49933</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">319</data>
    </edge>
    <edge source="39667" target="53554" id="0">
      <data key="d35">39667</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">176</data>
    </edge>
    <edge source="39667" target="53554" id="1">
      <data key="d35">39667</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">176</data>
    </edge>
    <edge source="39667" target="53554" id="2">
      <data key="d35">39667</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">176</data>
    </edge>
    <edge source="39667" target="40584" id="0">
      <data key="d35">39667</data>
      <data key="d36">40584</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">178</data>
    </edge>
    <edge source="6904" target="34032" id="0">
      <data key="d35">6904</data>
      <data key="d36">34032</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">48</data>
    </edge>
    <edge source="49917" target="49933" id="0">
      <data key="d35">49917</data>
      <data key="d36">49933</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">324</data>
    </edge>
    <edge source="38672" target="38425" id="0">
      <data key="d35">38672</data>
      <data key="d36">38425</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">58</data>
    </edge>
    <edge source="38672" target="38626" id="0">
      <data key="d35">38672</data>
      <data key="d36">38626</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">61</data>
    </edge>
    <edge source="61202" target="33598" id="0">
      <data key="d35">61202</data>
      <data key="d36">33598</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">118</data>
    </edge>
    <edge source="40729" target="33492" id="0">
      <data key="d35">40729</data>
      <data key="d36">33492</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">207</data>
    </edge>
    <edge source="54052" target="53554" id="0">
      <data key="d35">54052</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">55</data>
    </edge>
    <edge source="54052" target="53554" id="1">
      <data key="d35">54052</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">55</data>
    </edge>
    <edge source="54052" target="53554" id="2">
      <data key="d35">54052</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">55</data>
    </edge>
    <edge source="50985" target="53554" id="0">
      <data key="d35">50985</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">57</data>
    </edge>
    <edge source="50985" target="53554" id="1">
      <data key="d35">50985</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">57</data>
    </edge>
    <edge source="50985" target="53554" id="2">
      <data key="d35">50985</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">57</data>
    </edge>
    <edge source="50985" target="40616" id="0">
      <data key="d35">50985</data>
      <data key="d36">40616</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">61</data>
    </edge>
    <edge source="50985" target="40616" id="1">
      <data key="d35">50985</data>
      <data key="d36">40616</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">61</data>
    </edge>
    <edge source="45872" target="33403" id="0">
      <data key="d35">45872</data>
      <data key="d36">33403</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">341</data>
    </edge>
    <edge source="45872" target="33403" id="1">
      <data key="d35">45872</data>
      <data key="d36">33403</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">360</data>
    </edge>
    <edge source="45872" target="33403" id="2">
      <data key="d35">45872</data>
      <data key="d36">33403</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">407</data>
    </edge>
    <edge source="45872" target="53554" id="0">
      <data key="d35">45872</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">367</data>
    </edge>
    <edge source="45872" target="53554" id="1">
      <data key="d35">45872</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">367</data>
    </edge>
    <edge source="45872" target="53554" id="2">
      <data key="d35">45872</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">367</data>
    </edge>
    <edge source="45872" target="53554" id="3">
      <data key="d35">45872</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">368</data>
    </edge>
    <edge source="45872" target="53554" id="4">
      <data key="d35">45872</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">368</data>
    </edge>
    <edge source="45872" target="53554" id="5">
      <data key="d35">45872</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">368</data>
    </edge>
    <edge source="45872" target="33598" id="0">
      <data key="d35">45872</data>
      <data key="d36">33598</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">374</data>
    </edge>
    <edge source="45872" target="53725" id="0">
      <data key="d35">45872</data>
      <data key="d36">53725</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">400</data>
    </edge>
    <edge source="45872" target="53725" id="1">
      <data key="d35">45872</data>
      <data key="d36">53725</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">400</data>
    </edge>
    <edge source="18224" target="33403" id="0">
      <data key="d35">18224</data>
      <data key="d36">33403</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">51</data>
    </edge>
    <edge source="37690" target="33598" id="0">
      <data key="d35">37690</data>
      <data key="d36">33598</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">495</data>
    </edge>
    <edge source="37690" target="33598" id="1">
      <data key="d35">37690</data>
      <data key="d36">33598</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">517</data>
    </edge>
    <edge source="37690" target="33598" id="2">
      <data key="d35">37690</data>
      <data key="d36">33598</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">525</data>
    </edge>
    <edge source="37690" target="33492" id="0">
      <data key="d35">37690</data>
      <data key="d36">33492</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">509</data>
    </edge>
    <edge source="16187" target="33403" id="0">
      <data key="d35">16187</data>
      <data key="d36">33403</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">609</data>
    </edge>
    <edge source="16187" target="29885" id="0">
      <data key="d35">16187</data>
      <data key="d36">29885</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">613</data>
    </edge>
    <edge source="16187" target="29885" id="1">
      <data key="d35">16187</data>
      <data key="d36">29885</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">613</data>
    </edge>
    <edge source="16187" target="33492" id="0">
      <data key="d35">16187</data>
      <data key="d36">33492</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">649</data>
    </edge>
    <edge source="8006" target="7535" id="0">
      <data key="d35">8006</data>
      <data key="d36">7535</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">322</data>
    </edge>
    <edge source="8006" target="7535" id="1">
      <data key="d35">8006</data>
      <data key="d36">7535</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">323</data>
    </edge>
    <edge source="8006" target="7535" id="2">
      <data key="d35">8006</data>
      <data key="d36">7535</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">324</data>
    </edge>
    <edge source="9032" target="59869" id="0">
      <data key="d35">9032</data>
      <data key="d36">59869</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">236</data>
    </edge>
    <edge source="9032" target="59869" id="1">
      <data key="d35">9032</data>
      <data key="d36">59869</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">236</data>
    </edge>
    <edge source="48970" target="53554" id="0">
      <data key="d35">48970</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">69</data>
    </edge>
    <edge source="48970" target="53554" id="1">
      <data key="d35">48970</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">69</data>
    </edge>
    <edge source="48970" target="53554" id="2">
      <data key="d35">48970</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">69</data>
    </edge>
    <edge source="50013" target="49613" id="0">
      <data key="d35">50013</data>
      <data key="d36">49613</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">413</data>
    </edge>
    <edge source="50013" target="50044" id="0">
      <data key="d35">50013</data>
      <data key="d36">50044</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">413</data>
    </edge>
    <edge source="43872" target="4258" id="0">
      <data key="d35">43872</data>
      <data key="d36">4258</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">35</data>
    </edge>
    <edge source="43872" target="4258" id="1">
      <data key="d35">43872</data>
      <data key="d36">4258</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">35</data>
    </edge>
    <edge source="46950" target="53862" id="0">
      <data key="d35">46950</data>
      <data key="d36">53862</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">35</data>
    </edge>
    <edge source="38760" target="57322" id="0">
      <data key="d35">38760</data>
      <data key="d36">57322</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">48</data>
    </edge>
    <edge source="38760" target="57322" id="1">
      <data key="d35">38760</data>
      <data key="d36">57322</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">48</data>
    </edge>
    <edge source="35690" target="35685" id="0">
      <data key="d35">35690</data>
      <data key="d36">35685</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">46</data>
    </edge>
    <edge source="50028" target="50044" id="0">
      <data key="d35">50028</data>
      <data key="d36">50044</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">418</data>
    </edge>
    <edge source="36716" target="33598" id="0">
      <data key="d35">36716</data>
      <data key="d36">33598</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">179</data>
    </edge>
    <edge source="35696" target="35685" id="0">
      <data key="d35">35696</data>
      <data key="d36">35685</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">54</data>
    </edge>
    <edge source="35696" target="35685" id="1">
      <data key="d35">35696</data>
      <data key="d36">35685</data>
      <data key="d37">6</data>
      <data key="d38">control_local</data>
      <data key="d39">54</data>
    </edge>
    <edge source="35696" target="35685" id="2">
      <data key="d35">35696</data>
      <data key="d36">35685</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">66</data>
    </edge>
    <edge source="35696" target="35685" id="3">
      <data key="d35">35696</data>
      <data key="d36">35685</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">69</data>
    </edge>
    <edge source="35696" target="35685" id="4">
      <data key="d35">35696</data>
      <data key="d36">35685</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">70</data>
    </edge>
    <edge source="35696" target="35685" id="5">
      <data key="d35">35696</data>
      <data key="d36">35685</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">72</data>
    </edge>
    <edge source="35696" target="35684" id="0">
      <data key="d35">35696</data>
      <data key="d36">35684</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">68</data>
    </edge>
    <edge source="35696" target="35684" id="1">
      <data key="d35">35696</data>
      <data key="d36">35684</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">69</data>
    </edge>
    <edge source="10096" target="53691" id="0">
      <data key="d35">10096</data>
      <data key="d36">53691</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">124</data>
    </edge>
    <edge source="32634" target="32646" id="0">
      <data key="d35">32634</data>
      <data key="d36">32646</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">103</data>
    </edge>
    <edge source="32634" target="32647" id="0">
      <data key="d35">32634</data>
      <data key="d36">32647</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">104</data>
    </edge>
    <edge source="32634" target="32648" id="0">
      <data key="d35">32634</data>
      <data key="d36">32648</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">105</data>
    </edge>
    <edge source="50046" target="49613" id="0">
      <data key="d35">50046</data>
      <data key="d36">49613</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">433</data>
    </edge>
    <edge source="50046" target="50077" id="0">
      <data key="d35">50046</data>
      <data key="d36">50077</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">433</data>
    </edge>
    <edge source="56191" target="49453" id="0">
      <data key="d35">56191</data>
      <data key="d36">49453</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">75</data>
    </edge>
    <edge source="56191" target="49453" id="1">
      <data key="d35">56191</data>
      <data key="d36">49453</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">75</data>
    </edge>
    <edge source="28546" target="4248" id="0">
      <data key="d35">28546</data>
      <data key="d36">4248</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">88</data>
    </edge>
    <edge source="20357" target="63707" id="0">
      <data key="d35">20357</data>
      <data key="d36">63707</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">85</data>
    </edge>
    <edge source="20357" target="63707" id="1">
      <data key="d35">20357</data>
      <data key="d36">63707</data>
      <data key="d37">6</data>
      <data key="d38">control_local</data>
      <data key="d39">85</data>
    </edge>
    <edge source="39814" target="33492" id="0">
      <data key="d35">39814</data>
      <data key="d36">33492</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">218</data>
    </edge>
    <edge source="33673" target="56033" id="0">
      <data key="d35">33673</data>
      <data key="d36">56033</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">166</data>
    </edge>
    <edge source="49033" target="43074" id="0">
      <data key="d35">49033</data>
      <data key="d36">43074</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">100</data>
    </edge>
    <edge source="49033" target="13064" id="0">
      <data key="d35">49033</data>
      <data key="d36">13064</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">103</data>
    </edge>
    <edge source="49033" target="13064" id="1">
      <data key="d35">49033</data>
      <data key="d36">13064</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">103</data>
    </edge>
    <edge source="50061" target="50077" id="0">
      <data key="d35">50061</data>
      <data key="d36">50077</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">438</data>
    </edge>
    <edge source="28557" target="28477" id="0">
      <data key="d35">28557</data>
      <data key="d36">28477</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">94</data>
    </edge>
    <edge source="38798" target="57322" id="0">
      <data key="d35">38798</data>
      <data key="d36">57322</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">65</data>
    </edge>
    <edge source="38798" target="57322" id="1">
      <data key="d35">38798</data>
      <data key="d36">57322</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">65</data>
    </edge>
    <edge source="51085" target="28408" id="0">
      <data key="d35">51085</data>
      <data key="d36">28408</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">424</data>
    </edge>
    <edge source="65107" target="65076" id="0">
      <data key="d35">65107</data>
      <data key="d36">65076</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">73</data>
    </edge>
    <edge source="65107" target="65077" id="0">
      <data key="d35">65107</data>
      <data key="d36">65077</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">73</data>
    </edge>
    <edge source="19347" target="53554" id="0">
      <data key="d35">19347</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">117</data>
    </edge>
    <edge source="19347" target="53554" id="1">
      <data key="d35">19347</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">117</data>
    </edge>
    <edge source="19347" target="53554" id="2">
      <data key="d35">19347</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">117</data>
    </edge>
    <edge source="19347" target="53554" id="3">
      <data key="d35">19347</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">118</data>
    </edge>
    <edge source="19347" target="53554" id="4">
      <data key="d35">19347</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">118</data>
    </edge>
    <edge source="19347" target="53554" id="5">
      <data key="d35">19347</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">118</data>
    </edge>
    <edge source="32659" target="63695" id="0">
      <data key="d35">32659</data>
      <data key="d36">63695</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">176</data>
    </edge>
    <edge source="26520" target="33492" id="0">
      <data key="d35">26520</data>
      <data key="d36">33492</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">81</data>
    </edge>
    <edge source="26520" target="59869" id="0">
      <data key="d35">26520</data>
      <data key="d36">59869</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">98</data>
    </edge>
    <edge source="26520" target="59869" id="1">
      <data key="d35">26520</data>
      <data key="d36">59869</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">109</data>
    </edge>
    <edge source="9116" target="59869" id="0">
      <data key="d35">9116</data>
      <data key="d36">59869</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">280</data>
    </edge>
    <edge source="9116" target="59869" id="1">
      <data key="d35">9116</data>
      <data key="d36">59869</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">280</data>
    </edge>
    <edge source="28575" target="28477" id="0">
      <data key="d35">28575</data>
      <data key="d36">28477</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">105</data>
    </edge>
    <edge source="47008" target="32659" id="0">
      <data key="d35">47008</data>
      <data key="d36">32659</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">49</data>
    </edge>
    <edge source="47008" target="32659" id="1">
      <data key="d35">47008</data>
      <data key="d36">32659</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">49</data>
    </edge>
    <edge source="47008" target="53862" id="0">
      <data key="d35">47008</data>
      <data key="d36">53862</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">50</data>
    </edge>
    <edge source="35746" target="35685" id="0">
      <data key="d35">35746</data>
      <data key="d36">35685</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">79</data>
    </edge>
    <edge source="35746" target="35685" id="1">
      <data key="d35">35746</data>
      <data key="d36">35685</data>
      <data key="d37">6</data>
      <data key="d38">control_local</data>
      <data key="d39">79</data>
    </edge>
    <edge source="35746" target="35685" id="2">
      <data key="d35">35746</data>
      <data key="d36">35685</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">81</data>
    </edge>
    <edge source="35746" target="35685" id="3">
      <data key="d35">35746</data>
      <data key="d36">35685</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">82</data>
    </edge>
    <edge source="35746" target="35685" id="4">
      <data key="d35">35746</data>
      <data key="d36">35685</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">83</data>
    </edge>
    <edge source="35746" target="35685" id="5">
      <data key="d35">35746</data>
      <data key="d36">35685</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">84</data>
    </edge>
    <edge source="35746" target="35684" id="0">
      <data key="d35">35746</data>
      <data key="d36">35684</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">81</data>
    </edge>
    <edge source="35746" target="35684" id="1">
      <data key="d35">35746</data>
      <data key="d36">35684</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">86</data>
    </edge>
    <edge source="36772" target="33598" id="0">
      <data key="d35">36772</data>
      <data key="d36">33598</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">260</data>
    </edge>
    <edge source="36772" target="33598" id="1">
      <data key="d35">36772</data>
      <data key="d36">33598</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">299</data>
    </edge>
    <edge source="36772" target="33598" id="2">
      <data key="d35">36772</data>
      <data key="d36">33598</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">307</data>
    </edge>
    <edge source="36772" target="33598" id="3">
      <data key="d35">36772</data>
      <data key="d36">33598</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">339</data>
    </edge>
    <edge source="36772" target="33598" id="4">
      <data key="d35">36772</data>
      <data key="d36">33598</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">438</data>
    </edge>
    <edge source="36772" target="33492" id="0">
      <data key="d35">36772</data>
      <data key="d36">33492</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">291</data>
    </edge>
    <edge source="50085" target="50096" id="0">
      <data key="d35">50085</data>
      <data key="d36">50096</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">457</data>
    </edge>
    <edge source="34725" target="34135" id="0">
      <data key="d35">34725</data>
      <data key="d36">34135</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">334</data>
    </edge>
    <edge source="34725" target="34135" id="1">
      <data key="d35">34725</data>
      <data key="d36">34135</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">334</data>
    </edge>
    <edge source="34725" target="34135" id="2">
      <data key="d35">34725</data>
      <data key="d36">34135</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">334</data>
    </edge>
    <edge source="39857" target="66932" id="0">
      <data key="d35">39857</data>
      <data key="d36">66932</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">391</data>
    </edge>
    <edge source="38835" target="57442" id="0">
      <data key="d35">38835</data>
      <data key="d36">57442</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">84</data>
    </edge>
    <edge source="50104" target="50121" id="0">
      <data key="d35">50104</data>
      <data key="d36">50121</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">475</data>
    </edge>
    <edge source="50104" target="50121" id="1">
      <data key="d35">50104</data>
      <data key="d36">50121</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">475</data>
    </edge>
    <edge source="29627" target="53862" id="0">
      <data key="d35">29627</data>
      <data key="d36">53862</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">49</data>
    </edge>
    <edge source="14271" target="33403" id="0">
      <data key="d35">14271</data>
      <data key="d36">33403</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">77</data>
    </edge>
    <edge source="14271" target="33403" id="1">
      <data key="d35">14271</data>
      <data key="d36">33403</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">95</data>
    </edge>
    <edge source="14271" target="41278" id="0">
      <data key="d35">14271</data>
      <data key="d36">41278</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">98</data>
    </edge>
    <edge source="14271" target="14267" id="0">
      <data key="d35">14271</data>
      <data key="d36">14267</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">103</data>
    </edge>
    <edge source="32704" target="38853" id="0">
      <data key="d35">32704</data>
      <data key="d36">38853</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">216</data>
    </edge>
    <edge source="32704" target="38853" id="1">
      <data key="d35">32704</data>
      <data key="d36">38853</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">216</data>
    </edge>
    <edge source="32704" target="38853" id="2">
      <data key="d35">32704</data>
      <data key="d36">38853</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">216</data>
    </edge>
    <edge source="52164" target="29885" id="0">
      <data key="d35">52164</data>
      <data key="d36">29885</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">822</data>
    </edge>
    <edge source="52164" target="29885" id="1">
      <data key="d35">52164</data>
      <data key="d36">29885</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">822</data>
    </edge>
    <edge source="38853" target="57322" id="0">
      <data key="d35">38853</data>
      <data key="d36">57322</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">92</data>
    </edge>
    <edge source="38853" target="57322" id="1">
      <data key="d35">38853</data>
      <data key="d36">57322</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">92</data>
    </edge>
    <edge source="17354" target="40773" id="0">
      <data key="d35">17354</data>
      <data key="d36">40773</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">1107</data>
    </edge>
    <edge source="17354" target="33598" id="0">
      <data key="d35">17354</data>
      <data key="d36">33598</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">1111</data>
    </edge>
    <edge source="10189" target="53691" id="0">
      <data key="d35">10189</data>
      <data key="d36">53691</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">167</data>
    </edge>
    <edge source="47057" target="29885" id="0">
      <data key="d35">47057</data>
      <data key="d36">29885</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">72</data>
    </edge>
    <edge source="47057" target="29885" id="1">
      <data key="d35">47057</data>
      <data key="d36">29885</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">72</data>
    </edge>
    <edge source="47057" target="29896" id="0">
      <data key="d35">47057</data>
      <data key="d36">29896</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">85</data>
    </edge>
    <edge source="47057" target="29896" id="1">
      <data key="d35">47057</data>
      <data key="d36">29896</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">85</data>
    </edge>
    <edge source="56274" target="53554" id="0">
      <data key="d35">56274</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">85</data>
    </edge>
    <edge source="56274" target="53554" id="1">
      <data key="d35">56274</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">85</data>
    </edge>
    <edge source="56274" target="53554" id="2">
      <data key="d35">56274</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">85</data>
    </edge>
    <edge source="56274" target="40584" id="0">
      <data key="d35">56274</data>
      <data key="d36">40584</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">87</data>
    </edge>
    <edge source="56274" target="56174" id="0">
      <data key="d35">56274</data>
      <data key="d36">56174</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">87</data>
    </edge>
    <edge source="33749" target="25380" id="0">
      <data key="d35">33749</data>
      <data key="d36">25380</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">51</data>
    </edge>
    <edge source="33749" target="25380" id="1">
      <data key="d35">33749</data>
      <data key="d36">25380</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">51</data>
    </edge>
    <edge source="16345" target="33403" id="0">
      <data key="d35">16345</data>
      <data key="d36">33403</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">664</data>
    </edge>
    <edge source="16345" target="29885" id="0">
      <data key="d35">16345</data>
      <data key="d36">29885</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">668</data>
    </edge>
    <edge source="16345" target="29885" id="1">
      <data key="d35">16345</data>
      <data key="d36">29885</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">668</data>
    </edge>
    <edge source="16345" target="33492" id="0">
      <data key="d35">16345</data>
      <data key="d36">33492</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">689</data>
    </edge>
    <edge source="61404" target="33492" id="0">
      <data key="d35">61404</data>
      <data key="d36">33492</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">197</data>
    </edge>
    <edge source="17380" target="66250" id="0">
      <data key="d35">17380</data>
      <data key="d36">66250</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">1130</data>
    </edge>
    <edge source="11237" target="53691" id="0">
      <data key="d35">11237</data>
      <data key="d36">53691</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">225</data>
    </edge>
    <edge source="11237" target="53691" id="1">
      <data key="d35">11237</data>
      <data key="d36">53691</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">225</data>
    </edge>
    <edge source="11237" target="53725" id="0">
      <data key="d35">11237</data>
      <data key="d36">53725</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">229</data>
    </edge>
    <edge source="11237" target="53725" id="1">
      <data key="d35">11237</data>
      <data key="d36">53725</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">229</data>
    </edge>
    <edge source="11237" target="53725" id="2">
      <data key="d35">11237</data>
      <data key="d36">53725</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">229</data>
    </edge>
    <edge source="11237" target="53554" id="0">
      <data key="d35">11237</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">230</data>
    </edge>
    <edge source="11237" target="53554" id="1">
      <data key="d35">11237</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">230</data>
    </edge>
    <edge source="11237" target="53554" id="2">
      <data key="d35">11237</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">230</data>
    </edge>
    <edge source="11237" target="53768" id="0">
      <data key="d35">11237</data>
      <data key="d36">53768</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">237</data>
    </edge>
    <edge source="11237" target="53768" id="1">
      <data key="d35">11237</data>
      <data key="d36">53768</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">237</data>
    </edge>
    <edge source="11237" target="53768" id="2">
      <data key="d35">11237</data>
      <data key="d36">53768</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">237</data>
    </edge>
    <edge source="25574" target="58937" id="0">
      <data key="d35">25574</data>
      <data key="d36">58937</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">59</data>
    </edge>
    <edge source="18408" target="33403" id="0">
      <data key="d35">18408</data>
      <data key="d36">33403</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">98</data>
    </edge>
    <edge source="41963" target="53554" id="0">
      <data key="d35">41963</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">143</data>
    </edge>
    <edge source="41963" target="53554" id="1">
      <data key="d35">41963</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">143</data>
    </edge>
    <edge source="41963" target="53554" id="2">
      <data key="d35">41963</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">143</data>
    </edge>
    <edge source="41963" target="40448" id="0">
      <data key="d35">41963</data>
      <data key="d36">40448</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">147</data>
    </edge>
    <edge source="41963" target="40448" id="1">
      <data key="d35">41963</data>
      <data key="d36">40448</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">147</data>
    </edge>
    <edge source="32751" target="35266" id="0">
      <data key="d35">32751</data>
      <data key="d36">35266</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">249</data>
    </edge>
    <edge source="44020" target="44624" id="0">
      <data key="d35">44020</data>
      <data key="d36">44624</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">33</data>
    </edge>
    <edge source="44020" target="44624" id="1">
      <data key="d35">44020</data>
      <data key="d36">44624</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">46</data>
    </edge>
    <edge source="44020" target="44624" id="2">
      <data key="d35">44020</data>
      <data key="d36">44624</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">109</data>
    </edge>
    <edge source="44020" target="44624" id="3">
      <data key="d35">44020</data>
      <data key="d36">44624</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">247</data>
    </edge>
    <edge source="44020" target="44624" id="4">
      <data key="d35">44020</data>
      <data key="d36">44624</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">349</data>
    </edge>
    <edge source="44020" target="44591" id="0">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">37</data>
    </edge>
    <edge source="44020" target="44591" id="1">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">37</data>
    </edge>
    <edge source="44020" target="44591" id="2">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">37</data>
    </edge>
    <edge source="44020" target="44591" id="3">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">53</data>
    </edge>
    <edge source="44020" target="44591" id="4">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">53</data>
    </edge>
    <edge source="44020" target="44591" id="5">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">53</data>
    </edge>
    <edge source="44020" target="44591" id="6">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">64</data>
    </edge>
    <edge source="44020" target="44591" id="7">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">64</data>
    </edge>
    <edge source="44020" target="44591" id="8">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">64</data>
    </edge>
    <edge source="44020" target="44591" id="9">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">84</data>
    </edge>
    <edge source="44020" target="44591" id="10">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">84</data>
    </edge>
    <edge source="44020" target="44591" id="11">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">84</data>
    </edge>
    <edge source="44020" target="44591" id="12">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">97</data>
    </edge>
    <edge source="44020" target="44591" id="13">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">97</data>
    </edge>
    <edge source="44020" target="44591" id="14">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">97</data>
    </edge>
    <edge source="44020" target="44591" id="15">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">111</data>
    </edge>
    <edge source="44020" target="44591" id="16">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">111</data>
    </edge>
    <edge source="44020" target="44591" id="17">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">111</data>
    </edge>
    <edge source="44020" target="44591" id="18">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">121</data>
    </edge>
    <edge source="44020" target="44591" id="19">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">121</data>
    </edge>
    <edge source="44020" target="44591" id="20">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">121</data>
    </edge>
    <edge source="44020" target="44591" id="21">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">162</data>
    </edge>
    <edge source="44020" target="44591" id="22">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">162</data>
    </edge>
    <edge source="44020" target="44591" id="23">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">162</data>
    </edge>
    <edge source="44020" target="44591" id="24">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">174</data>
    </edge>
    <edge source="44020" target="44591" id="25">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">174</data>
    </edge>
    <edge source="44020" target="44591" id="26">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">174</data>
    </edge>
    <edge source="44020" target="44591" id="27">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">192</data>
    </edge>
    <edge source="44020" target="44591" id="28">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">192</data>
    </edge>
    <edge source="44020" target="44591" id="29">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">192</data>
    </edge>
    <edge source="44020" target="44591" id="30">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">214</data>
    </edge>
    <edge source="44020" target="44591" id="31">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">214</data>
    </edge>
    <edge source="44020" target="44591" id="32">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">214</data>
    </edge>
    <edge source="44020" target="44591" id="33">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">234</data>
    </edge>
    <edge source="44020" target="44591" id="34">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">234</data>
    </edge>
    <edge source="44020" target="44591" id="35">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">234</data>
    </edge>
    <edge source="44020" target="44591" id="36">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">249</data>
    </edge>
    <edge source="44020" target="44591" id="37">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">249</data>
    </edge>
    <edge source="44020" target="44591" id="38">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">249</data>
    </edge>
    <edge source="44020" target="44591" id="39">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">259</data>
    </edge>
    <edge source="44020" target="44591" id="40">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">259</data>
    </edge>
    <edge source="44020" target="44591" id="41">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">259</data>
    </edge>
    <edge source="44020" target="44591" id="42">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">301</data>
    </edge>
    <edge source="44020" target="44591" id="43">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">301</data>
    </edge>
    <edge source="44020" target="44591" id="44">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">301</data>
    </edge>
    <edge source="44020" target="44591" id="45">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">313</data>
    </edge>
    <edge source="44020" target="44591" id="46">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">313</data>
    </edge>
    <edge source="44020" target="44591" id="47">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">313</data>
    </edge>
    <edge source="44020" target="44591" id="48">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">331</data>
    </edge>
    <edge source="44020" target="44591" id="49">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">331</data>
    </edge>
    <edge source="44020" target="44591" id="50">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">331</data>
    </edge>
    <edge source="44020" target="44591" id="51">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">352</data>
    </edge>
    <edge source="44020" target="44591" id="52">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">352</data>
    </edge>
    <edge source="44020" target="44591" id="53">
      <data key="d35">44020</data>
      <data key="d36">44591</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">352</data>
    </edge>
    <edge source="44020" target="44634" id="0">
      <data key="d35">44020</data>
      <data key="d36">44634</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">62</data>
    </edge>
    <edge source="44020" target="44634" id="1">
      <data key="d35">44020</data>
      <data key="d36">44634</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">346</data>
    </edge>
    <edge source="44020" target="44625" id="0">
      <data key="d35">44020</data>
      <data key="d36">44625</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">72</data>
    </edge>
    <edge source="44020" target="44625" id="1">
      <data key="d35">44020</data>
      <data key="d36">44625</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">78</data>
    </edge>
    <edge source="44020" target="44625" id="2">
      <data key="d35">44020</data>
      <data key="d36">44625</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">136</data>
    </edge>
    <edge source="44020" target="44625" id="3">
      <data key="d35">44020</data>
      <data key="d36">44625</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">141</data>
    </edge>
    <edge source="44020" target="44625" id="4">
      <data key="d35">44020</data>
      <data key="d36">44625</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">146</data>
    </edge>
    <edge source="44020" target="44625" id="5">
      <data key="d35">44020</data>
      <data key="d36">44625</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">159</data>
    </edge>
    <edge source="44020" target="44625" id="6">
      <data key="d35">44020</data>
      <data key="d36">44625</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">182</data>
    </edge>
    <edge source="44020" target="44626" id="0">
      <data key="d35">44020</data>
      <data key="d36">44626</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">82</data>
    </edge>
    <edge source="44020" target="44626" id="1">
      <data key="d35">44020</data>
      <data key="d36">44626</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">131</data>
    </edge>
    <edge source="44020" target="44629" id="0">
      <data key="d35">44020</data>
      <data key="d36">44629</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">95</data>
    </edge>
    <edge source="44020" target="44629" id="1">
      <data key="d35">44020</data>
      <data key="d36">44629</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">207</data>
    </edge>
    <edge source="44020" target="44627" id="0">
      <data key="d35">44020</data>
      <data key="d36">44627</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">150</data>
    </edge>
    <edge source="44020" target="44627" id="1">
      <data key="d35">44020</data>
      <data key="d36">44627</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">169</data>
    </edge>
    <edge source="44020" target="44627" id="2">
      <data key="d35">44020</data>
      <data key="d36">44627</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">197</data>
    </edge>
    <edge source="44020" target="44627" id="3">
      <data key="d35">44020</data>
      <data key="d36">44627</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">201</data>
    </edge>
    <edge source="44020" target="44628" id="0">
      <data key="d35">44020</data>
      <data key="d36">44628</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">154</data>
    </edge>
    <edge source="44020" target="44628" id="1">
      <data key="d35">44020</data>
      <data key="d36">44628</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">188</data>
    </edge>
    <edge source="44020" target="44630" id="0">
      <data key="d35">44020</data>
      <data key="d36">44630</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">222</data>
    </edge>
    <edge source="44020" target="44630" id="1">
      <data key="d35">44020</data>
      <data key="d36">44630</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">228</data>
    </edge>
    <edge source="44020" target="44630" id="2">
      <data key="d35">44020</data>
      <data key="d36">44630</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">274</data>
    </edge>
    <edge source="44020" target="44630" id="3">
      <data key="d35">44020</data>
      <data key="d36">44630</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">279</data>
    </edge>
    <edge source="44020" target="44630" id="4">
      <data key="d35">44020</data>
      <data key="d36">44630</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">284</data>
    </edge>
    <edge source="44020" target="44630" id="5">
      <data key="d35">44020</data>
      <data key="d36">44630</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">297</data>
    </edge>
    <edge source="44020" target="44630" id="6">
      <data key="d35">44020</data>
      <data key="d36">44630</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">321</data>
    </edge>
    <edge source="44020" target="44631" id="0">
      <data key="d35">44020</data>
      <data key="d36">44631</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">232</data>
    </edge>
    <edge source="44020" target="44631" id="1">
      <data key="d35">44020</data>
      <data key="d36">44631</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">269</data>
    </edge>
    <edge source="44020" target="44632" id="0">
      <data key="d35">44020</data>
      <data key="d36">44632</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">288</data>
    </edge>
    <edge source="44020" target="44632" id="1">
      <data key="d35">44020</data>
      <data key="d36">44632</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">308</data>
    </edge>
    <edge source="44020" target="44632" id="2">
      <data key="d35">44020</data>
      <data key="d36">44632</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">336</data>
    </edge>
    <edge source="44020" target="44632" id="3">
      <data key="d35">44020</data>
      <data key="d36">44632</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">340</data>
    </edge>
    <edge source="44020" target="44633" id="0">
      <data key="d35">44020</data>
      <data key="d36">44633</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">292</data>
    </edge>
    <edge source="44020" target="44633" id="1">
      <data key="d35">44020</data>
      <data key="d36">44633</data>
      <data key="d37">4</data>
      <data key="d38">value_local</data>
      <data key="d39">327</data>
    </edge>
    <edge source="38901" target="57322" id="0">
      <data key="d35">38901</data>
      <data key="d36">57322</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">113</data>
    </edge>
    <edge source="38901" target="57322" id="1">
      <data key="d35">38901</data>
      <data key="d36">57322</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">113</data>
    </edge>
    <edge source="24572" target="28523" id="0">
      <data key="d35">24572</data>
      <data key="d36">28523</data>
      <data key="d37">2</data>
      <data key="d38">call_method</data>
      <data key="d39">237</data>
    </edge>
    <edge source="25599" target="53554" id="0">
      <data key="d35">25599</data>
      <data key="d36">53554</data>
      <data key="d37">3</data>
      <data key="d38">data_method</data>
      <data key="d39">70</data>
    </edge>
    <edge source="25599" target="53554" id="1">
      <data key="d35">25599</data>
      <data key="d36">53554</data>
      <data key="d37">4</data>
      <data key="d38">return_method</data>
      <data key="d39">70</data>
    </edge>
    <edge source="25599" target="53554" id="2">
      <data key="d35">25599</data>
      <data key="d36">53554</data>
      <data key="d37">6</data>
      <data key="d38">control_method</data>
      <data key="d39">70</data>
    </edge>
  </graph>
</graphml>
