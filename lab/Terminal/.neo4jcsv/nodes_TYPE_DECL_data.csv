10,TYPE_DECL,,audio\midi\MidiAudio.cpp:<global>,NAMESPACE_BLOCK,<global>,1,audio\midi\MidiAudio.cpp,audio\midi\MidiAudio.cpp:<global>,,false,1,<global>,4
108,TYPE_DECL,,audio\midi\MidiAudio.hpp:<global>,NAMESPACE_BLOCK,<global>,1,audio\midi\MidiAudio.hpp,audio\midi\MidiAudio.hpp:<global>,,false,1,<global>,2
111,TYPE_DECL,,,,struct IDirectSound8,1,audio\midi\MidiAudio.hpp,IDirectSound8,,false,16,IDirectSound8,1
112,TYPE_DECL,,,,struct IDirectSoundBuffer,1,audio\midi\MidiAudio.hpp,IDirectSoundBuffer,,false,17,IDirectSoundBuffer,2
113,TYPE_DECL,,,,"class MidiAudio
{
public:
    void BeginSkip() noexcept;
    void EndSkip() noexcept;
    void PlayNote(HWND windowHandle, const int noteNumber, const int velocity, const std::chrono::milliseconds duration) noexcept;

private:
    void _initialize(HWND windowHandle) noexcept;
    void _createBuffers() noexcept;

    wil::slim_event_manual_reset _skip;

    HWND _hwnd = nullptr;
    wil::unique_hmodule _directSoundModule;
    wil::com_ptr<IDirectSound8> _directSound;
    std::array<wil::com_ptr<IDirectSoundBuffer>, 2> _buffers;
    size_t _activeBufferIndex = 0;
    DWORD _lastBufferPosition = 0;
}",1,audio\midi\MidiAudio.hpp,MidiAudio,,false,19,MidiAudio,3
163,TYPE_DECL,,audio\midi\precomp.cpp:<global>,NAMESPACE_BLOCK,<global>,1,audio\midi\precomp.cpp,audio\midi\precomp.cpp:<global>,,false,1,<global>,2
176,TYPE_DECL,,audio\midi\precomp.hpp:<global>,NAMESPACE_BLOCK,<global>,1,audio\midi\precomp.hpp,audio\midi\precomp.hpp:<global>,,false,1,<global>,5
181,TYPE_DECL,,buffer\out\DbcsAttribute.hpp:<global>,NAMESPACE_BLOCK,<global>,1,buffer\out\DbcsAttribute.hpp,buffer\out\DbcsAttribute.hpp:<global>,,false,1,<global>,1
184,TYPE_DECL,,,,"enum class DbcsAttribute : uint8_t
{
    Single,
    Leading,
    Trailing,
}",1,buffer\out\DbcsAttribute.hpp,DbcsAttribute,,false,19,DbcsAttribute,1
213,TYPE_DECL,,buffer\out\LineRendition.hpp:<global>,NAMESPACE_BLOCK,<global>,1,buffer\out\LineRendition.hpp,buffer\out\LineRendition.hpp:<global>,,false,1,<global>,1
216,TYPE_DECL,,,,"enum class LineRendition : uint8_t
{
    SingleWidth,
    DoubleWidth,
    DoubleHeightTop,
    DoubleHeightBottom
}",1,buffer\out\LineRendition.hpp,LineRendition,,false,16,LineRendition,1
287,TYPE_DECL,,buffer\out\OutputCell.cpp:<global>,NAMESPACE_BLOCK,<global>,1,buffer\out\OutputCell.cpp,buffer\out\OutputCell.cpp:<global>,,false,1,<global>,6
432,TYPE_DECL,,buffer\out\OutputCell.hpp:<global>,NAMESPACE_BLOCK,<global>,1,buffer\out\OutputCell.hpp,buffer\out\OutputCell.hpp:<global>,,false,1,<global>,6
435,TYPE_DECL,,,,"class InvalidCharInfoConversionException : public std::exception
{
    const char* what() const noexcept override
    {
        return ""Cannot convert to CHAR_INFO without explicit TextAttribute"";
    }
}",1,buffer\out\OutputCell.hpp,InvalidCharInfoConversionException,std.exception,false,26,InvalidCharInfoConversionException,1
442,TYPE_DECL,,,,"class OutputCell final
{
public:
    OutputCell() noexcept;

    OutputCell(const std::wstring_view charData,
               const DbcsAttribute dbcsAttribute,
               const TextAttributeBehavior behavior);

    OutputCell(const std::wstring_view charData,
               const DbcsAttribute dbcsAttribute,
               const TextAttribute textAttribute);

    OutputCell(const OutputCellView& view);

    OutputCell(const OutputCell&) = default;
    OutputCell(OutputCell&&) = default;

    OutputCell& operator=(const OutputCell&) = default;
    OutputCell& operator=(OutputCell&&) = default;

    ~OutputCell() = default;

    const std::wstring_view Chars() const noexcept;
    void SetChars(const std::wstring_view chars);

    DbcsAttribute& DbcsAttr() noexcept;
    TextAttribute& TextAttr();

    constexpr const DbcsAttribute& DbcsAttr() const
    {
        return _dbcsAttribute;
    }

    const TextAttribute& TextAttr() const
    {
        THROW_HR_IF(E_INVALIDARG, _behavior...",1,buffer\out\OutputCell.hpp,OutputCell,,false,34,OutputCell,2
574,TYPE_DECL,,buffer\out\OutputCellIterator.cpp:<global>,NAMESPACE_BLOCK,<global>,1,buffer\out\OutputCellIterator.cpp,buffer\out\OutputCellIterator.cpp:<global>,,false,1,<global>,7
1216,TYPE_DECL,,buffer\out\OutputCellIterator.hpp:<global>,NAMESPACE_BLOCK,<global>,1,buffer\out\OutputCellIterator.hpp,buffer\out\OutputCellIterator.hpp:<global>,,false,1,<global>,4
1219,TYPE_DECL,,,,"class OutputCellIterator final
{
public:
    using iterator_category = std::input_iterator_tag;
    using value_type = OutputCellView;
    using difference_type = til::CoordType;
    using pointer = OutputCellView*;
    using reference = OutputCellView&;

    OutputCellIterator(const wchar_t& wch, const size_t fillLimit = 0) noexcept;
    OutputCellIterator(const TextAttribute& attr, const size_t fillLimit = 0) noexcept;
    OutputCellIterator(const wchar_t& wch, const TextAttribute& attr, const size_t fillLimit = 0) noexcept;
    OutputCellIterator(const CHAR_INFO& charInfo, const size_t fillLimit = 0) noexcept;
    OutputCellIterator(const std::wstring_view utf16Text) noexcept;
    OutputCellIterator(const std::wstring_view utf16Text, const TextAttribute& attribute, const size_t fillLimit = 0) noexcept;
    OutputCellIterator(const std::span<const WORD> legacyAttributes) noexcept;
    OutputCellIterator(const std::span<const CHAR_INFO> charInfos) noexcept;
    OutputCellIterator(c...",1,buffer\out\OutputCellIterator.hpp,OutputCellIterator,,false,27,OutputCellIterator,1
1220,TYPE_DECL,ANY,,,using iterator_category = std::input_iterator_tag;,5,buffer\out\OutputCellIterator.hpp,iterator_category,,false,30,iterator_category,1
1221,TYPE_DECL,OutputCellView,,,using value_type = OutputCellView;,5,buffer\out\OutputCellIterator.hpp,value_type,,false,31,value_type,2
1222,TYPE_DECL,ANY,,,using difference_type = til::CoordType;,5,buffer\out\OutputCellIterator.hpp,difference_type,,false,32,difference_type,3
1223,TYPE_DECL,OutputCellView*,,,using pointer = OutputCellView*;,5,buffer\out\OutputCellIterator.hpp,pointer,,false,33,pointer,4
1224,TYPE_DECL,OutputCellView &,,,using reference = OutputCellView&;,5,buffer\out\OutputCellIterator.hpp,reference,,false,34,reference,5
1312,TYPE_DECL,,,,"enum class Mode
    {
        // Loose mode is where we're given text and attributes in a raw sort of form
        // like while data is being inserted from an API call.
        Loose,

        // Loose mode with only text is where we're given just text and we want
        // to use the attribute already in the buffer when writing
        LooseTextOnly,

        // Fill mode is where we were given one thing and we just need to keep giving
        // that back over and over for eternity.
        Fill,

        // Given a run of legacy attributes, convert each of them and insert only attribute data.
        LegacyAttr,

        // CharInfo mode is where we've been given a pair of text and attribute for each
        // cell in the legacy format from an API call.
        CharInfo,

        // Cell mode is where we have an already fully structured cell data usually
        // from accessing/copying data already put into the OutputBuffer.
        Cell,
    }",5,buffer\out\OutputCellIterator.hpp,OutputCellIterator.Mode,,false,63,Mode,23
1386,TYPE_DECL,,buffer\out\OutputCellRect.cpp:<global>,NAMESPACE_BLOCK,<global>,1,buffer\out\OutputCellRect.cpp,buffer\out\OutputCellRect.cpp:<global>,,false,1,<global>,3
1504,TYPE_DECL,,buffer\out\OutputCellRect.hpp:<global>,NAMESPACE_BLOCK,<global>,1,buffer\out\OutputCellRect.hpp,buffer\out\OutputCellRect.hpp:<global>,,false,1,<global>,5
1507,TYPE_DECL,,,,"class OutputCellRect final
{
public:
    OutputCellRect() noexcept;
    OutputCellRect(const til::CoordType rows, const til::CoordType cols);

    std::span<OutputCell> GetRow(const til::CoordType row);
    OutputCellIterator GetRowIter(const til::CoordType row) const;

    til::CoordType Height() const noexcept;
    til::CoordType Width() const noexcept;

private:
    std::vector<OutputCell> _storage;

    OutputCell* _FindRowOffset(const til::CoordType row);
    const OutputCell* _FindRowOffset(const til::CoordType row) const;

    til::CoordType _cols;
    til::CoordType _rows;
}",1,buffer\out\OutputCellRect.hpp,OutputCellRect,,false,29,OutputCellRect,1
1550,TYPE_DECL,,buffer\out\OutputCellView.cpp:<global>,NAMESPACE_BLOCK,<global>,1,buffer\out\OutputCellView.cpp,buffer\out\OutputCellView.cpp:<global>,,false,1,<global>,3
1644,TYPE_DECL,,buffer\out\OutputCellView.hpp:<global>,NAMESPACE_BLOCK,<global>,1,buffer\out\OutputCellView.hpp,buffer\out\OutputCellView.hpp:<global>,,false,1,<global>,3
1647,TYPE_DECL,,,,"class OutputCellView
{
public:
    OutputCellView(const std::wstring_view view,
                   const DbcsAttribute dbcsAttr,
                   const TextAttribute textAttr,
                   const TextAttributeBehavior behavior) noexcept;

    const std::wstring_view& Chars() const noexcept;
    til::CoordType Columns() const noexcept;
    DbcsAttribute DbcsAttr() const noexcept;
    TextAttribute TextAttr() const noexcept;
    TextAttributeBehavior TextAttrBehavior() const noexcept;

    void UpdateText(const std::wstring_view& view) noexcept
    {
        _view = view;
    };

    void UpdateDbcsAttribute(const DbcsAttribute& dbcsAttr) noexcept
    {
        _dbcsAttr = dbcsAttr;
    }

    void UpdateTextAttribute(const TextAttribute& textAttr) noexcept
    {
        _textAttr = textAttr;
    }

    bool operator==(const OutputCellView& view) const noexcept;
    bool operator!=(const OutputCellView& view) const noexcept;

private:
    std::wstring_view _view;
    DbcsAttrib...",1,buffer\out\OutputCellView.hpp,OutputCellView,,false,25,OutputCellView,1
1737,TYPE_DECL,,buffer\out\Row.cpp:<global>,NAMESPACE_BLOCK,<global>,1,buffer\out\Row.cpp,buffer\out\Row.cpp:<global>,,false,1,<global>,7
4364,TYPE_DECL,,buffer\out\Row.hpp:<global>,NAMESPACE_BLOCK,<global>,1,buffer\out\Row.hpp,buffer\out\Row.hpp:<global>,,false,1,<global>,5
4367,TYPE_DECL,,,,class ROW,1,buffer\out\Row.hpp,ROW,,false,12,ROW,1
4368,TYPE_DECL,,,,class TextBuffer,1,buffer\out\Row.hpp,TextBuffer,,false,13,TextBuffer,2
4369,TYPE_DECL,,,,"enum class DelimiterClass
{
    ControlChar,
    DelimiterChar,
    RegularChar
}",1,buffer\out\Row.hpp,DelimiterClass,,false,15,DelimiterClass,3
4373,TYPE_DECL,,,,"struct RowWriteState
{
    // The text you want to write into the given ROW. When ReplaceText() returns,
    // this is updated to remove all text from the beginning that was successfully written.
    std::wstring_view text; // IN/OUT
    // The column at which to start writing.
    til::CoordType columnBegin = 0; // IN
    // The first column which should not be written to anymore.
    til::CoordType columnLimit = til::CoordTypeMax; // IN

    // The column 1 past the last glyph that was successfully written into the row. If you need to call
    // ReplaceAttributes() to colorize the written range, etc., this is the columnEnd parameter you want.
    // If you want to continue writing where you left off, this is also the next columnBegin parameter.
    til::CoordType columnEnd = 0; // OUT
    // The first column that got modified by this write operation. In case that the first glyph we write overwrites
    // the trailing half of a wide glyph, leadingSpaces will be 1 and this value ...",1,buffer\out\Row.hpp,RowWriteState,,false,22,RowWriteState,4
4401,TYPE_DECL,,,,"struct RowCopyTextFromState
{
    // The row to copy text from.
    const ROW& source; // IN
    // The column at which to start writing.
    til::CoordType columnBegin = 0; // IN
    // The first column which should not be written to anymore.
    til::CoordType columnLimit = til::CoordTypeMax; // IN
    // The column at which to start reading from source.
    til::CoordType sourceColumnBegin = 0; // IN
    // The first column which should not be read from anymore.
    til::CoordType sourceColumnLimit = til::CoordTypeMax; // IN

    til::CoordType columnEnd = 0; // OUT
    // The first column that got modified by this write operation. In case that the first glyph we write overwrites
    // the trailing half of a wide glyph, leadingSpaces will be 1 and this value will be 1 less than colBeg.
    til::CoordType columnBeginDirty = 0; // OUT
    // This is 1 past the last column that was modified and will be 1 past columnEnd if we overwrote
    // the leading half of a wide glyph and had...",1,buffer\out\Row.hpp,RowCopyTextFromState,,false,44,RowCopyTextFromState,5
4443,TYPE_DECL,,,,"struct CharToColumnMapper
{
    CharToColumnMapper(const wchar_t* chars, const uint16_t* charOffsets, ptrdiff_t lastCharOffset, til::CoordType currentColumn) noexcept;

    til::CoordType GetLeadingColumnAt(ptrdiff_t offset) noexcept;
    til::CoordType GetTrailingColumnAt(ptrdiff_t offset) noexcept;
    til::CoordType GetLeadingColumnAt(const wchar_t* str) noexcept;
    til::CoordType GetTrailingColumnAt(const wchar_t* str) noexcept;

private:
    // See ROW and its members with identical name.
    static constexpr uint16_t CharOffsetsTrailer = 0x8000;
    static constexpr uint16_t CharOffsetsMask = 0x7fff;

    const wchar_t* _chars;
    const uint16_t* _charOffsets;
    ptrdiff_t _lastCharOffset;
    til::CoordType _currentColumn;
}",1,buffer\out\Row.hpp,CharToColumnMapper,,false,70,CharToColumnMapper,6
4488,TYPE_DECL,,,,"class ROW final
{
public:
    // The implicit agreement between ROW and TextBuffer is that the `charsBuffer` and `charOffsetsBuffer`
    // arrays have a minimum alignment of 16 Bytes and a size of `rowWidth+1`. The former is used to
    // implement Reset() efficiently via SIMD and the latter is used to store the past-the-end offset
    // into the `charsBuffer`. Even though the `charsBuffer` could be only `rowWidth` large we need them
    // to be the same size so that the SIMD code can process both arrays in the same loop simultaneously.
    // This wastes up to 5.8% memory but increases overall scrolling performance by around 40%.
    // These methods exists to make this agreement explicit and serve as a reminder.
    //
    // TextBuffer calculates the distance in bytes between two ROWs (_bufferRowStride) as the sum of these values.
    // As such it's important that we return sizes with a minimum alignment of alignof(ROW).
    static constexpr size_t CalculateRowSize() noexcep...",1,buffer\out\Row.hpp,ROW,,false,90,ROW,7
4757,TYPE_DECL,,,,friend class RowTests,5,buffer\out\Row.hpp,ROW.RowTests,,false,170,RowTests,47
4758,TYPE_DECL,,,,"struct WriteHelper
    {
        explicit WriteHelper(ROW& row, til::CoordType columnBegin, til::CoordType columnLimit, const std::wstring_view& chars) noexcept;
        bool IsValid() const noexcept;
        void ReplaceCharacters(til::CoordType width) noexcept;
        void ReplaceText() noexcept;
        void _replaceTextUnicode(size_t ch, std::wstring_view::const_iterator it) noexcept;
        void CopyTextFrom(const std::span<const uint16_t>& charOffsets) noexcept;
        static void _copyOffsets(uint16_t* dst, const uint16_t* src, uint16_t size, uint16_t offset) noexcept;
        void Finish();

        // Parent pointer.
        ROW& row;
        // The text given by the caller.
        const std::wstring_view& chars;

        // This is the same as the columnBegin parameter for ReplaceText(), etc.,
        // but clamped to a valid range via _clampedColumnInclusive.
        uint16_t colBeg;
        // This is the same as the columnLimit parameter for ReplaceText(), etc.,
  ...",5,buffer\out\Row.hpp,ROW.WriteHelper,,false,176,WriteHelper,48
4921,TYPE_DECL,,buffer\out\TextAttribute.cpp:<global>,NAMESPACE_BLOCK,<global>,1,buffer\out\TextAttribute.cpp,buffer\out\TextAttribute.cpp:<global>,,false,1,<global>,4
5780,TYPE_DECL,,buffer\out\TextAttribute.hpp:<global>,NAMESPACE_BLOCK,<global>,1,buffer\out\TextAttribute.hpp,buffer\out\TextAttribute.hpp:<global>,,false,1,<global>,4
5783,TYPE_DECL,,,,"enum class UnderlineStyle
{
    NoUnderline = 0U,
    SinglyUnderlined = 1U,
    DoublyUnderlined = 2U,
    CurlyUnderlined = 3U,
    DottedUnderlined = 4U,
    DashedUnderlined = 5U,
    Max = DashedUnderlined
}",1,buffer\out\TextAttribute.hpp,UnderlineStyle,,false,30,UnderlineStyle,1
5816,TYPE_DECL,,,,"class TextAttribute final
{
public:
    constexpr TextAttribute() noexcept :
        _attrs{ CharacterAttributes::Normal },
        _foreground{},
        _background{},
        _hyperlinkId{ 0 },
        _underlineColor{}
    {
    }

    explicit constexpr TextAttribute(const WORD wLegacyAttr) noexcept :
        _attrs{ gsl::narrow_cast<WORD>(wLegacyAttr & USED_META_ATTRS) },
        _foreground{ gsl::at(s_legacyForegroundColorMap, wLegacyAttr & FG_ATTRS) },
        _background{ gsl::at(s_legacyBackgroundColorMap, (wLegacyAttr & BG_ATTRS) >> 4) },
        _hyperlinkId{ 0 },
        _underlineColor{}
    {
    }

    constexpr TextAttribute(const COLORREF rgbForeground,
                            const COLORREF rgbBackground,
                            const COLORREF rgbUnderline = INVALID_COLOR) noexcept :
        _attrs{ CharacterAttributes::Normal },
        _foreground{ rgbForeground },
        _background{ rgbBackground },
        _hyperlinkId{ 0 },
        _underlineColor{ ...",1,buffer\out\TextAttribute.hpp,TextAttribute,,false,41,TextAttribute,2
6226,TYPE_DECL,,,,friend class TextBufferTests,5,buffer\out\TextAttribute.hpp,TextAttribute.TextBufferTests,,false,207,TextBufferTests,73
6227,TYPE_DECL,,,,friend class TextAttributeTests,5,buffer\out\TextAttribute.hpp,TextAttribute.TextAttributeTests,,false,208,TextAttributeTests,74
6228,TYPE_DECL,TextAttribute.VerifyOutputTraits<TextAttribute>,,,friend class WEX::TestExecution::VerifyOutputTraits,5,buffer\out\TextAttribute.hpp,TextAttribute.VerifyOutputTraits,,false,210,VerifyOutputTraits,75
6229,TYPE_DECL,,,,"enum class TextAttributeBehavior
{
    Stored, // use contained text attribute
    Current, // use text attribute of cell being written to
    StoredOnly, // only use the contained text attribute and skip the insertion of anything else
}",1,buffer\out\TextAttribute.hpp,TextAttributeBehavior,,false,214,TextAttributeBehavior,3
6241,TYPE_DECL,,buffer\out\TextColor.cpp:<global>,NAMESPACE_BLOCK,<global>,1,buffer\out\TextColor.cpp,buffer\out\TextColor.cpp:<global>,,false,1,<global>,4
7071,TYPE_DECL,,buffer\out\TextColor.hpp:<global>,NAMESPACE_BLOCK,<global>,1,buffer\out\TextColor.hpp,buffer\out\TextColor.hpp:<global>,,false,1,<global>,2
7074,TYPE_DECL,,,,"enum class ColorType : BYTE
{
    IsDefault,
    IsIndex16,
    IsIndex256,
    IsRgb
}",1,buffer\out\TextColor.hpp,ColorType,,false,42,ColorType,1
7079,TYPE_DECL,,,,"enum class ColorAlias : size_t
{
    DefaultForeground,
    DefaultBackground,
    FrameForeground,
    FrameBackground,
    ENUM_COUNT // must be the last element in the enum class
}",1,buffer\out\TextColor.hpp,ColorAlias,,false,50,ColorAlias,2
7085,TYPE_DECL,,,,"struct TextColor
{
public:
    static constexpr BYTE DARK_BLACK = 0;
    static constexpr BYTE DARK_RED = 1;
    static constexpr BYTE DARK_GREEN = 2;
    static constexpr BYTE DARK_YELLOW = 3;
    static constexpr BYTE DARK_BLUE = 4;
    static constexpr BYTE DARK_MAGENTA = 5;
    static constexpr BYTE DARK_CYAN = 6;
    static constexpr BYTE DARK_WHITE = 7;
    static constexpr BYTE BRIGHT_BLACK = 8;
    static constexpr BYTE BRIGHT_RED = 9;
    static constexpr BYTE BRIGHT_GREEN = 10;
    static constexpr BYTE BRIGHT_YELLOW = 11;
    static constexpr BYTE BRIGHT_BLUE = 12;
    static constexpr BYTE BRIGHT_MAGENTA = 13;
    static constexpr BYTE BRIGHT_CYAN = 14;
    static constexpr BYTE BRIGHT_WHITE = 15;

    // Entries 256 to 260 are reserved for XTerm compatibility.
    static constexpr size_t DEFAULT_FOREGROUND = 261;
    static constexpr size_t DEFAULT_BACKGROUND = 262;
    static constexpr size_t FRAME_FOREGROUND = 263;
    static constexpr size_t FRAME_BACKGROUND = 264;
 ...",1,buffer\out\TextColor.hpp,TextColor,,false,59,TextColor,3
7245,TYPE_DECL,,,,"union
    {
        BYTE _red, _index;
    }",5,buffer\out\TextColor.hpp,TextColor.anonymous_composite_type_0,,false,154,TextColor.anonymous_composite_type_0,43
7251,TYPE_DECL,,,,friend class TextBufferTests,5,buffer\out\TextColor.hpp,TextColor.TextBufferTests,,false,163,TextBufferTests,47
7252,TYPE_DECL,TextColor.VerifyOutputTraits<TextColor>,,,friend class WEX::TestExecution::VerifyOutputTraits,5,buffer\out\TextColor.hpp,TextColor.VerifyOutputTraits,,false,165,VerifyOutputTraits,48
7331,TYPE_DECL,,buffer\out\UTextAdapter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,buffer\out\UTextAdapter.cpp,buffer\out\UTextAdapter.cpp:<global>,,false,1,<global>,4
7334,TYPE_DECL,,,,"struct RowRange
{
    til::CoordType begin;
    til::CoordType end;
}",1,buffer\out\UTextAdapter.cpp,RowRange,,false,9,RowRange,1
7618,TYPE_DECL,,buffer\out\UTextAdapter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,buffer\out\UTextAdapter.hpp,buffer\out\UTextAdapter.hpp:<global>,,false,1,<global>,2
7621,TYPE_DECL,,,,class TextBuffer,1,buffer\out\UTextAdapter.hpp,TextBuffer,,false,8,TextBuffer,1
7625,TYPE_DECL,ANY,,,"using unique_uregex = wistd::unique_ptr<URegularExpression, wil::function_deleter<decltype(&uregex_close), &uregex_close>>;",5,buffer\out\UTextAdapter.hpp,unique_uregex,,false,12,unique_uregex,1
7654,TYPE_DECL,,buffer\out\cursor.cpp:<global>,NAMESPACE_BLOCK,<global>,1,buffer\out\cursor.cpp,buffer\out\cursor.cpp:<global>,,false,1,<global>,4
8063,TYPE_DECL,,buffer\out\cursor.hpp:<global>,NAMESPACE_BLOCK,<global>,1,buffer\out\cursor.hpp,buffer\out\cursor.hpp:<global>,,false,1,<global>,2
8066,TYPE_DECL,,,,class TextBuffer,1,buffer\out\cursor.hpp,TextBuffer,,false,22,TextBuffer,1
8067,TYPE_DECL,,,,"class Cursor final
{
public:
    // the following values are used to create the textmode cursor.
    static constexpr unsigned int CURSOR_SMALL_SIZE = 25; // large enough to be one pixel on a six pixel font

    Cursor(const ULONG ulSize, TextBuffer& parentBuffer) noexcept;

    ~Cursor();

    // No Copy. It will copy the timer handle. Bad news.
    Cursor(const Cursor&) = delete;
    Cursor& operator=(const Cursor&) & = delete;

    Cursor(Cursor&&) = default;
    Cursor& operator=(Cursor&&) & = delete;

    bool HasMoved() const noexcept;
    bool IsVisible() const noexcept;
    bool IsOn() const noexcept;
    bool IsBlinkingAllowed() const noexcept;
    bool IsDouble() const noexcept;
    bool IsConversionArea() const noexcept;
    bool IsPopupShown() const noexcept;
    bool GetDelay() const noexcept;
    ULONG GetSize() const noexcept;
    til::point GetPosition() const noexcept;

    const CursorType GetType() const noexcept;

    void StartDeferDrawing() noexcept;
    bool I...",1,buffer\out\cursor.hpp,Cursor,,false,24,Cursor,2
8302,TYPE_DECL,,buffer\out\precomp.cpp:<global>,NAMESPACE_BLOCK,<global>,1,buffer\out\precomp.cpp,buffer\out\precomp.cpp:<global>,,false,1,<global>,2
8311,TYPE_DECL,,buffer\out\precomp.hpp:<global>,NAMESPACE_BLOCK,<global>,1,buffer\out\precomp.hpp,buffer\out\precomp.hpp:<global>,,false,1,<global>,3
8322,TYPE_DECL,,buffer\out\search.cpp:<global>,NAMESPACE_BLOCK,<global>,1,buffer\out\search.cpp,buffer\out\search.cpp:<global>,,false,1,<global>,4
8744,TYPE_DECL,,buffer\out\search.hpp:<global>,NAMESPACE_BLOCK,<global>,1,buffer\out\search.hpp,buffer\out\search.hpp:<global>,,false,1,<global>,3
8747,TYPE_DECL,,,,"class Search final
{
public:
    Search() = default;

    bool ResetIfStale(Microsoft::Console::Render::IRenderData& renderData, const std::wstring_view& needle, bool reverse, bool caseInsensitive);

    void MoveToCurrentSelection();
    void MoveToPoint(til::point anchor) noexcept;
    void MovePastPoint(til::point anchor) noexcept;
    void FindNext() noexcept;

    const til::point_span* GetCurrent() const noexcept;
    bool SelectCurrent() const;

    const std::vector<til::point_span>& Results() const noexcept;
    ptrdiff_t CurrentMatch() const noexcept;

private:
    // _renderData is a pointer so that Search() is constexpr default constructable.
    Microsoft::Console::Render::IRenderData* _renderData = nullptr;
    std::wstring _needle;
    bool _caseInsensitive = false;
    uint64_t _lastMutationId = 0;

    std::vector<til::point_span> _results;
    ptrdiff_t _index = 0;
    ptrdiff_t _step = 0;
}",1,buffer\out\search.hpp,Search,,false,23,Search,1
8892,TYPE_DECL,,buffer\out\textBuffer.cpp:<global>,NAMESPACE_BLOCK,<global>,1,buffer\out\textBuffer.cpp,buffer\out\textBuffer.cpp:<global>,,false,1,<global>,10
9048,TYPE_DECL,ANY,,,"using PointTree = interval_tree::IntervalTree<til::point, size_t>;",1,buffer\out\textBuffer.cpp,PointTree,,false,20,PointTree,1
15505,TYPE_DECL,,buffer\out\textBuffer.hpp:<global>,NAMESPACE_BLOCK,<global>,1,buffer\out\textBuffer.hpp,buffer\out\textBuffer.hpp:<global>,,false,1,<global>,8
15508,TYPE_DECL,,,,struct URegularExpression,1,buffer\out\textBuffer.hpp,URegularExpression,,false,62,URegularExpression,1
15512,TYPE_DECL,,,,class Renderer,5,buffer\out\textBuffer.hpp,Microsoft.Console.Render.Renderer,,false,66,Renderer,1
15513,TYPE_DECL,,,,"enum class MarkCategory
{
    Prompt = 0,
    Error = 1,
    Warning = 2,
    Success = 3,
    Info = 4
}",1,buffer\out\textBuffer.hpp,MarkCategory,,false,69,MarkCategory,3
15538,TYPE_DECL,,,,"struct ScrollMark
{
    std::optional<til::color> color;
    til::point start;
    til::point end; // exclusive
    std::optional<til::point> commandEnd;
    std::optional<til::point> outputEnd;

    MarkCategory category{ MarkCategory::Info };
    // Other things we may want to think about in the future are listed in
    // GH#11000

    bool HasCommand() const noexcept
    {
        return commandEnd.has_value() && *commandEnd != end;
    }
    bool HasOutput() const noexcept
    {
        return outputEnd.has_value() && *outputEnd != *commandEnd;
    }
    std::pair<til::point, til::point> GetExtent() const
    {
        til::point realEnd{ til::coalesce_value(outputEnd, commandEnd, end) };
        return std::make_pair(til::point{ start }, realEnd);
    }
}",1,buffer\out\textBuffer.hpp,ScrollMark,,false,77,ScrollMark,4
15608,TYPE_DECL,,,,"class TextBuffer final
{
public:
    TextBuffer(const til::size screenBufferSize,
               const TextAttribute defaultAttributes,
               const UINT cursorSize,
               const bool isActiveBuffer,
               Microsoft::Console::Render::Renderer& renderer);

    TextBuffer(const TextBuffer&) = delete;
    TextBuffer(TextBuffer&&) = delete;
    TextBuffer& operator=(const TextBuffer&) = delete;
    TextBuffer& operator=(TextBuffer&&) = delete;

    ~TextBuffer();

    // Used for duplicating properties to another text buffer
    void CopyProperties(const TextBuffer& OtherBuffer) noexcept;

    // row manipulation
    ROW& GetScratchpadRow();
    ROW& GetScratchpadRow(const TextAttribute& attributes);
    const ROW& GetRowByOffset(til::CoordType index) const;
    ROW& GetMutableRowByOffset(til::CoordType index);

    TextBufferCellIterator GetCellDataAt(const til::point at) const;
    TextBufferCellIterator GetCellLineDataAt(const til::point at) const;
    TextBu...",1,buffer\out\textBuffer.hpp,TextBuffer,,false,104,TextBuffer,5
16038,TYPE_DECL,,,,"class TextAndColor
    {
    public:
        std::vector<std::wstring> text;
        std::vector<std::vector<COLORREF>> FgAttr;
        std::vector<std::vector<COLORREF>> BkAttr;
    }",5,buffer\out\textBuffer.hpp,TextBuffer.TextAndColor,,false,233,TextAndColor,79
16079,TYPE_DECL,,,,"struct PositionInformation
    {
        til::CoordType mutableViewportTop{ 0 };
        til::CoordType visibleViewportTop{ 0 };
    }",5,buffer\out\textBuffer.hpp,TextBuffer.PositionInformation,,false,261,PositionInformation,85
16296,TYPE_DECL,,,,friend class TextBufferTests,5,buffer\out\textBuffer.hpp,TextBuffer.TextBufferTests,,false,382,TextBufferTests,141
16297,TYPE_DECL,,,,friend class UiaTextRangeTests,5,buffer\out\textBuffer.hpp,TextBuffer.UiaTextRangeTests,,false,383,UiaTextRangeTests,142
16350,TYPE_DECL,,buffer\out\textBufferCellIterator.cpp:<global>,NAMESPACE_BLOCK,<global>,1,buffer\out\textBufferCellIterator.cpp,buffer\out\textBufferCellIterator.cpp:<global>,,false,1,<global>,6
16937,TYPE_DECL,,buffer\out\textBufferCellIterator.hpp:<global>,NAMESPACE_BLOCK,<global>,1,buffer\out\textBufferCellIterator.hpp,buffer\out\textBufferCellIterator.hpp:<global>,,false,1,<global>,4
16940,TYPE_DECL,,,,class TextBuffer,1,buffer\out\textBufferCellIterator.hpp,TextBuffer,,false,22,TextBuffer,1
16941,TYPE_DECL,,,,"class TextBufferCellIterator
{
public:
    TextBufferCellIterator(const TextBuffer& buffer, til::point pos);
    TextBufferCellIterator(const TextBuffer& buffer, til::point pos, const Microsoft::Console::Types::Viewport limits);

    operator bool() const noexcept;

    bool operator==(const TextBufferCellIterator& it) const noexcept;
    bool operator!=(const TextBufferCellIterator& it) const noexcept;

    TextBufferCellIterator& operator+=(const ptrdiff_t& movement);
    TextBufferCellIterator& operator-=(const ptrdiff_t& movement);
    TextBufferCellIterator& operator++();
    TextBufferCellIterator& operator--();
    TextBufferCellIterator operator++(int);
    TextBufferCellIterator operator--(int);
    TextBufferCellIterator operator+(const ptrdiff_t& movement);
    TextBufferCellIterator operator-(const ptrdiff_t& movement);

    ptrdiff_t operator-(const TextBufferCellIterator& it);

    const OutputCellView& operator*() const noexcept;
    const OutputCellView* operator->()...",1,buffer\out\textBufferCellIterator.hpp,TextBufferCellIterator,,false,24,TextBufferCellIterator,2
17046,TYPE_DECL,,,,friend class TextBufferIteratorTests,5,buffer\out\textBufferCellIterator.hpp,TextBufferCellIterator.TextBufferIteratorTests,,false,66,TextBufferIteratorTests,28
17047,TYPE_DECL,,,,friend class TextBufferTests,5,buffer\out\textBufferCellIterator.hpp,TextBufferCellIterator.TextBufferTests,,false,67,TextBufferTests,29
17048,TYPE_DECL,,,,friend class ApiRoutinesTests,5,buffer\out\textBufferCellIterator.hpp,TextBufferCellIterator.ApiRoutinesTests,,false,68,ApiRoutinesTests,30
17057,TYPE_DECL,,buffer\out\textBufferTextIterator.cpp:<global>,NAMESPACE_BLOCK,<global>,1,buffer\out\textBufferTextIterator.cpp,buffer\out\textBufferTextIterator.cpp:<global>,,false,1,<global>,4
17088,TYPE_DECL,,buffer\out\textBufferTextIterator.hpp:<global>,NAMESPACE_BLOCK,<global>,1,buffer\out\textBufferTextIterator.hpp,buffer\out\textBufferTextIterator.hpp:<global>,,false,1,<global>,2
17091,TYPE_DECL,,,,class SCREEN_INFORMATION,1,buffer\out\textBufferTextIterator.hpp,SCREEN_INFORMATION,,false,20,SCREEN_INFORMATION,1
17092,TYPE_DECL,,,,"class TextBufferTextIterator final : public TextBufferCellIterator
{
public:
    TextBufferTextIterator(const TextBufferCellIterator& cellIter) noexcept;

    const std::wstring_view operator*() const noexcept;
    const std::wstring_view* operator->() const noexcept;

protected:
#if UNIT_TESTING
    friend class TextBufferIteratorTests;
#endif
}",1,buffer\out\textBufferTextIterator.hpp,TextBufferTextIterator,TextBufferCellIterator,false,22,TextBufferTextIterator,2
17106,TYPE_DECL,,,,friend class TextBufferIteratorTests,5,buffer\out\textBufferTextIterator.hpp,TextBufferTextIterator.TextBufferIteratorTests,,false,32,TextBufferIteratorTests,4
17123,TYPE_DECL,,buffer\out\ut_textbuffer\ReflowTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,buffer\out\ut_textbuffer\ReflowTests.cpp,buffer\out\ut_textbuffer\ReflowTests.cpp:<global>,,false,1,<global>,8
17126,TYPE_DECL,VerifyOutputTraits<wchar_t><>,,,"class WEX::TestExecution::VerifyOutputTraits<wchar_t>
{
public:
    static WEX::Common::NoThrowString ToString(const wchar_t& wch)
    {
        return WEX::Common::NoThrowString().Format(L""'%c'"", wch);
    }
}",1,buffer\out\ut_textbuffer\ReflowTests.cpp,VerifyOutputTraits<wchar_t>,,false,15,VerifyOutputTraits<wchar_t>,1
17145,TYPE_DECL,,,,"struct TestRow
    {
        std::wstring_view text;
        bool wrap;
    }",5,buffer\out\ut_textbuffer\ReflowTests.cpp,anonymous_namespace_1.TestRow,,false,30,TestRow,1
17148,TYPE_DECL,,,,"struct TestBuffer
    {
        til::size size;
        std::vector<TestRow> rows;
        til::point cursor;
    }",5,buffer\out\ut_textbuffer\ReflowTests.cpp,anonymous_namespace_2.TestBuffer,,false,36,TestBuffer,2
17152,TYPE_DECL,,,,"struct TestCase
    {
        std::wstring_view name;
        std::vector<TestBuffer> buffers;
    }",5,buffer\out\ut_textbuffer\ReflowTests.cpp,anonymous_namespace_3.TestCase,,false,43,TestCase,3
18227,TYPE_DECL,,,,"struct ArrayIndexTaefAdapterRow : public Microsoft::WRL::RuntimeClass<Microsoft::WRL::RuntimeClassFlags<Microsoft::WRL::ClassicCom | Microsoft::WRL::InhibitFtmBase>, IDataRow>
    {
        HRESULT RuntimeClassInitialize(const size_t index)
        {
            _index = index;
            return S_OK;
        }

        STDMETHODIMP GetTestData(BSTR /*pszName*/, SAFEARRAY** ppData) override
        {
            const auto indexString{ wil::str_printf<std::wstring>(L""%zu"", _index) };
            auto safeArray{ SafeArrayCreateVector(VT_BSTR, 0, 1) };
            LONG index{ 0 };
            auto indexBstr{ wil::make_bstr(indexString.c_str()) };
            (void)SafeArrayPutElement(safeArray, &index, indexBstr.release());
            *ppData = safeArray;
            return S_OK;
        }

        STDMETHODIMP GetMetadataNames(SAFEARRAY** ppMetadataNames) override
        {
            *ppMetadataNames = nullptr;
            return S_FALSE;
        }

        STDMETHODIMP GetMetada...",5,buffer\out\ut_textbuffer\ReflowTests.cpp,anonymous_namespace_4.ArrayIndexTaefAdapterRow,"Microsoft.WRL.RuntimeClass<Microsoft.WRL.RuntimeClassFlags<Microsoft.WRL.ClassicCom | Microsoft.WRL.InhibitFtmBase>, IDataRow>",false,605,ArrayIndexTaefAdapterRow,6
18336,TYPE_DECL,,,,"struct ArrayIndexTaefAdapterSource : public Microsoft::WRL::RuntimeClass<Microsoft::WRL::RuntimeClassFlags<Microsoft::WRL::ClassicCom | Microsoft::WRL::InhibitFtmBase>, IDataSource>
    {
        STDMETHODIMP Advance(IDataRow** ppDataRow) override
        {
            if (_index < std::extent_v<decltype(testCases)>)
            {
                Microsoft::WRL::MakeAndInitialize<ArrayIndexTaefAdapterRow>(ppDataRow, _index++);
            }
            else
            {
                *ppDataRow = nullptr;
            }
            return S_OK;
        }

        STDMETHODIMP Reset() override
        {
            _index = 0;
            return S_OK;
        }

        STDMETHODIMP GetTestDataNames(SAFEARRAY** names) override
        {
            auto safeArray{ SafeArrayCreateVector(VT_BSTR, 0, 1) };
            LONG index{ 0 };
            auto dataNameBstr{ wil::make_bstr(L""index"") };
            (void)SafeArrayPutElement(safeArray, &index, dataNameBstr.release());
           ...",5,buffer\out\ut_textbuffer\ReflowTests.cpp,anonymous_namespace_10.ArrayIndexTaefAdapterSource,"Microsoft.WRL.RuntimeClass<Microsoft.WRL.RuntimeClassFlags<Microsoft.WRL.ClassicCom | Microsoft.WRL.InhibitFtmBase>, IDataSource>",false,646,ArrayIndexTaefAdapterSource,7
18465,TYPE_DECL,,,,"class ReflowTests
{
    TEST_CLASS(ReflowTests);

    static DummyRenderer renderer;
    static std::unique_ptr<TextBuffer> _textBufferFromTestBuffer(const TestBuffer& testBuffer)
    {
        auto buffer = std::make_unique<TextBuffer>(testBuffer.size, TextAttribute{ 0x7 }, 0, false, renderer);

        til::CoordType y = 0;
        for (const auto& testRow : testBuffer.rows)
        {
            auto& row{ buffer->GetMutableRowByOffset(y) };

            row.SetWrapForced(testRow.wrap);

            til::CoordType x = 0;
            for (const auto& ch : testRow.text)
            {
                const til::CoordType width = IsGlyphFullWidth(ch) ? 2 : 1;
                row.ReplaceCharacters(x, width, { &ch, 1 });
                x += width;
            }

            y++;
        }

        buffer->GetCursor().SetPosition(testBuffer.cursor);
        return buffer;
    }

    static std::unique_ptr<TextBuffer> _textBufferByReflowingTextBuffer(TextBuffer& originalBuffer, const ti...",1,buffer\out\ut_textbuffer\ReflowTests.cpp,ReflowTests,,false,695,ReflowTests,4
18822,TYPE_DECL,,buffer\out\ut_textbuffer\TextAttributeTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,buffer\out\ut_textbuffer\TextAttributeTests.cpp,buffer\out\ut_textbuffer\TextAttributeTests.cpp:<global>,,false,1,<global>,6
18825,TYPE_DECL,,,,"class TextAttributeTests
{
    TEST_CLASS(TextAttributeTests);
    TEST_CLASS_SETUP(ClassSetup);

    TEST_METHOD(TestRoundtripLegacy);
    TEST_METHOD(TestRoundtripMetaBits);
    TEST_METHOD(TestRoundtripExhaustive);
    TEST_METHOD(TestTextAttributeColorGetters);
    TEST_METHOD(TestReverseDefaultColors);
    TEST_METHOD(TestRoundtripDefaultColors);
    TEST_METHOD(TestIntenseAsBright);

    RenderSettings _renderSettings;
    const COLORREF _defaultFg = RGB(1, 2, 3);
    const COLORREF _defaultBg = RGB(4, 5, 6);
    const size_t _defaultFgIndex = TextColor::DEFAULT_FOREGROUND;
    const size_t _defaultBgIndex = TextColor::DEFAULT_BACKGROUND;
}",1,buffer\out\ut_textbuffer\TextAttributeTests.cpp,TextAttributeTests,,false,16,TextAttributeTests,1
20207,TYPE_DECL,,buffer\out\ut_textbuffer\TextColorTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,buffer\out\ut_textbuffer\TextColorTests.cpp,buffer\out\ut_textbuffer\TextColorTests.cpp:<global>,,false,1,<global>,5
20210,TYPE_DECL,,,,"class TextColorTests
{
    TEST_CLASS(TextColorTests);

    TEST_CLASS_SETUP(ClassSetup);

    TEST_METHOD(TestDefaultColor);
    TEST_METHOD(TestDarkIndexColor);
    TEST_METHOD(TestBrightIndexColor);
    TEST_METHOD(TestRgbColor);
    TEST_METHOD(TestChangeColor);

    std::array<COLORREF, TextColor::TABLE_SIZE> _colorTable;
    const COLORREF _defaultFg = RGB(1, 2, 3);
    const COLORREF _defaultBg = RGB(4, 5, 6);
    const size_t _defaultFgIndex = TextColor::DEFAULT_FOREGROUND;
    const size_t _defaultBgIndex = TextColor::DEFAULT_BACKGROUND;
}",1,buffer\out\ut_textbuffer\TextColorTests.cpp,TextColorTests,,false,14,TextColorTests,1
20960,TYPE_DECL,,buffer\out\ut_textbuffer\precomp.cpp:<global>,NAMESPACE_BLOCK,<global>,1,buffer\out\ut_textbuffer\precomp.cpp,buffer\out\ut_textbuffer\precomp.cpp:<global>,,false,1,<global>,2
20975,TYPE_DECL,,buffer\out\ut_textbuffer\precomp.hpp:<global>,NAMESPACE_BLOCK,<global>,1,buffer\out\ut_textbuffer\precomp.hpp,buffer\out\ut_textbuffer\precomp.hpp:<global>,,false,1,<global>,6
21030,TYPE_DECL,,cascadia\ElevateShim\elevate-shim.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\ElevateShim\elevate-shim.cpp,cascadia\ElevateShim\elevate-shim.cpp:<global>,,false,1,<global>,11
21165,TYPE_DECL,,cascadia\ElevateShim\resource.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\ElevateShim\resource.hpp,cascadia\ElevateShim\resource.hpp:<global>,,false,1,<global>,1
21180,TYPE_DECL,,cascadia\LocalTests_SettingsModel\ColorSchemeTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\LocalTests_SettingsModel\ColorSchemeTests.cpp,cascadia\LocalTests_SettingsModel\ColorSchemeTests.cpp:<global>,,false,1,<global>,6
21184,TYPE_DECL,,,,"class ColorSchemeTests : public JsonTestClass
    {
        // Use a custom AppxManifest to ensure that we can activate winrt types
        // from our test. This property will tell taef to manually use this as
        // the AppxManifest for this test class.
        // This does not yet work for anything XAML-y. See TabTests.cpp for more
        // details on that.
        BEGIN_TEST_CLASS(ColorSchemeTests)
            TEST_CLASS_PROPERTY(L""RunAs"", L""UAP"")
            TEST_CLASS_PROPERTY(L""UAP:AppXManifest"", L""TestHostAppXManifest.xml"")
        END_TEST_CLASS()

        TEST_METHOD(ParseSimpleColorScheme);
        TEST_METHOD(LayerColorSchemesOnArray);
        TEST_METHOD(UpdateSchemeReferences);

        static Core::Color rgb(uint8_t r, uint8_t g, uint8_t b) noexcept
        {
            return Core::Color{ r, g, b, 255 };
        }
    }",5,cascadia\LocalTests_SettingsModel\ColorSchemeTests.cpp,SettingsModelLocalTests.ColorSchemeTests,JsonTestClass,false,25,ColorSchemeTests,1
21879,TYPE_DECL,,cascadia\LocalTests_SettingsModel\CommandTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\LocalTests_SettingsModel\CommandTests.cpp,cascadia\LocalTests_SettingsModel\CommandTests.cpp:<global>,,false,1,<global>,5
21883,TYPE_DECL,,,,"class CommandTests : public JsonTestClass
    {
        // Use a custom AppxManifest to ensure that we can activate winrt types
        // from our test. This property will tell taef to manually use this as
        // the AppxManifest for this test class.
        // This does not yet work for anything XAML-y. See TabTests.cpp for more
        // details on that.
        BEGIN_TEST_CLASS(CommandTests)
            TEST_CLASS_PROPERTY(L""RunAs"", L""UAP"")
            TEST_CLASS_PROPERTY(L""UAP:AppXManifest"", L""TestHostAppXManifest.xml"")
        END_TEST_CLASS()

        TEST_METHOD(ManyCommandsSameAction);
        TEST_METHOD(LayerCommand);
        TEST_METHOD(TestSplitPaneArgs);
        TEST_METHOD(TestSplitPaneBadSize);
        TEST_METHOD(TestResourceKeyName);
        TEST_METHOD(TestAutogeneratedName);
        TEST_METHOD(TestLayerOnAutogeneratedName);

        TEST_METHOD(TestGenerateCommandline);
    }",5,cascadia\LocalTests_SettingsModel\CommandTests.cpp,SettingsModelLocalTests.CommandTests,JsonTestClass,false,25,CommandTests,1
24253,TYPE_DECL,,cascadia\LocalTests_SettingsModel\DeserializationTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\LocalTests_SettingsModel\DeserializationTests.cpp,cascadia\LocalTests_SettingsModel\DeserializationTests.cpp:<global>,,false,1,<global>,8
24271,TYPE_DECL,ANY,,,using VirtualKeyModifiers = winrt::Windows::System::VirtualKeyModifiers;,1,cascadia\LocalTests_SettingsModel\DeserializationTests.cpp,VirtualKeyModifiers,,false,20,VirtualKeyModifiers,1
24273,TYPE_DECL,,,,"class DeserializationTests : public JsonTestClass
    {
        // Use a custom AppxManifest to ensure that we can activate winrt types
        // from our test. This property will tell taef to manually use this as
        // the AppxManifest for this test class.
        // This does not yet work for anything XAML-y. See TabTests.cpp for more
        // details on that.
        BEGIN_TEST_CLASS(DeserializationTests)
            TEST_CLASS_PROPERTY(L""RunAs"", L""UAP"")
            TEST_CLASS_PROPERTY(L""UAP:AppXManifest"", L""TestHostAppXManifest.xml"")
        END_TEST_CLASS()

        TEST_METHOD(ValidateProfilesExist);
        TEST_METHOD(ValidateDefaultProfileExists);
        TEST_METHOD(ValidateDuplicateProfiles);
        TEST_METHOD(ValidateManyWarnings);
        TEST_METHOD(LayerGlobalProperties);
        TEST_METHOD(ValidateProfileOrdering);
        TEST_METHOD(ValidateHideProfiles);
        TEST_METHOD(TestReorderWithNullGuids);
        TEST_METHOD(TestReorderingWithoutGuid);
     ...",5,cascadia\LocalTests_SettingsModel\DeserializationTests.cpp,SettingsModelLocalTests.DeserializationTests,JsonTestClass,false,29,DeserializationTests,1
29108,TYPE_DECL,,cascadia\LocalTests_SettingsModel\JsonTestClass.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\LocalTests_SettingsModel\JsonTestClass.hpp,cascadia\LocalTests_SettingsModel\JsonTestClass.hpp:<global>,,false,1,<global>,1
29111,TYPE_DECL,,,,"class JsonTestClass
{
public:
    static Json::Value VerifyParseSucceeded(const std::string_view& content)
    {
        static const std::unique_ptr<Json::CharReader> reader{ Json::CharReaderBuilder{}.newCharReader() };

        Json::Value root;
        std::string errs;
        const auto parseResult = reader->parse(content.data(), content.data() + content.size(), &root, &errs);
        VERIFY_IS_TRUE(parseResult, winrt::to_hstring(errs).c_str());
        return root;
    };

    static std::string toString(const Json::Value& json)
    {
        static const std::unique_ptr<Json::StreamWriter> writer{ Json::StreamWriterBuilder{}.newStreamWriter() };

        std::stringstream s;
        writer->write(json, &s);
        return s.str();
    }
}",1,cascadia\LocalTests_SettingsModel\JsonTestClass.hpp,JsonTestClass,,false,18,JsonTestClass,1
29226,TYPE_DECL,,cascadia\LocalTests_SettingsModel\KeyBindingsTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\LocalTests_SettingsModel\KeyBindingsTests.cpp,cascadia\LocalTests_SettingsModel\KeyBindingsTests.cpp:<global>,,false,1,<global>,7
29242,TYPE_DECL,ANY,,,using VirtualKeyModifiers = winrt::Windows::System::VirtualKeyModifiers;,1,cascadia\LocalTests_SettingsModel\KeyBindingsTests.cpp,VirtualKeyModifiers,,false,18,VirtualKeyModifiers,1
29244,TYPE_DECL,,,,"class KeyBindingsTests : public JsonTestClass
    {
        // Use a custom AppxManifest to ensure that we can activate winrt types
        // from our test. This property will tell taef to manually use this as
        // the AppxManifest for this test class.
        // This does not yet work for anything XAML-y. See TabTests.cpp for more
        // details on that.
        BEGIN_TEST_CLASS(KeyBindingsTests)
            TEST_CLASS_PROPERTY(L""RunAs"", L""UAP"")
            TEST_CLASS_PROPERTY(L""UAP:AppXManifest"", L""TestHostAppXManifest.xml"")
        END_TEST_CLASS()

        TEST_METHOD(KeyChords);
        TEST_METHOD(ManyKeysSameAction);
        TEST_METHOD(LayerKeybindings);
        TEST_METHOD(HashDeduplication);
        TEST_METHOD(UnbindKeybindings);
        TEST_METHOD(LayerScancodeKeybindings);
        TEST_METHOD(TestExplicitUnbind);
        TEST_METHOD(TestArbitraryArgs);
        TEST_METHOD(TestSplitPaneArgs);
        TEST_METHOD(TestStringOverload);
        TEST_METHOD(TestSe...",5,cascadia\LocalTests_SettingsModel\KeyBindingsTests.cpp,SettingsModelLocalTests.KeyBindingsTests,JsonTestClass,false,27,KeyBindingsTests,1
32370,TYPE_DECL,,cascadia\LocalTests_SettingsModel\NewTabMenuTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\LocalTests_SettingsModel\NewTabMenuTests.cpp,cascadia\LocalTests_SettingsModel\NewTabMenuTests.cpp:<global>,,false,1,<global>,8
32374,TYPE_DECL,,,,"class NewTabMenuTests : public JsonTestClass
    {
        // Use a custom AppxManifest to ensure that we can activate winrt types
        // from our test. This property will tell taef to manually use this as
        // the AppxManifest for this test class.
        // This does not yet work for anything XAML-y. See TabTests.cpp for more
        // details on that.
        BEGIN_TEST_CLASS(NewTabMenuTests)
            TEST_CLASS_PROPERTY(L""RunAs"", L""UAP"")
            TEST_CLASS_PROPERTY(L""UAP:AppXManifest"", L""TestHostAppXManifest.xml"")
        END_TEST_CLASS()

        TEST_METHOD(DefaultsToRemainingProfiles);
        TEST_METHOD(ParseEmptyFolder);
    }",5,cascadia\LocalTests_SettingsModel\NewTabMenuTests.cpp,SettingsModelLocalTests.NewTabMenuTests,JsonTestClass,false,28,NewTabMenuTests,1
32597,TYPE_DECL,,cascadia\LocalTests_SettingsModel\ProfileTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\LocalTests_SettingsModel\ProfileTests.cpp,cascadia\LocalTests_SettingsModel\ProfileTests.cpp:<global>,,false,1,<global>,6
32601,TYPE_DECL,,,,"class ProfileTests : public JsonTestClass
    {
        // Use a custom AppxManifest to ensure that we can activate winrt types
        // from our test. This property will tell taef to manually use this as
        // the AppxManifest for this test class.
        // This does not yet work for anything XAML-y. See TabTests.cpp for more
        // details on that.
        BEGIN_TEST_CLASS(ProfileTests)
            TEST_CLASS_PROPERTY(L""RunAs"", L""UAP"")
            TEST_CLASS_PROPERTY(L""UAP:AppXManifest"", L""TestHostAppXManifest.xml"")
        END_TEST_CLASS()

        TEST_METHOD(ProfileGeneratesGuid);
        TEST_METHOD(LayerProfileProperties);
        TEST_METHOD(LayerProfileIcon);
        TEST_METHOD(LayerProfilesOnArray);
        TEST_METHOD(ProfileWithEnvVars);
        TEST_METHOD(ProfileWithEnvVarsSameNameDifferentCases);

        TEST_METHOD(DuplicateProfileTest);
        TEST_METHOD(TestGenGuidsForProfiles);
        TEST_METHOD(TestCorrectOldDefaultShellPaths);
    }",5,cascadia\LocalTests_SettingsModel\ProfileTests.cpp,SettingsModelLocalTests.ProfileTests,JsonTestClass,false,25,ProfileTests,1
33933,TYPE_DECL,,cascadia\LocalTests_SettingsModel\SerializationTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\LocalTests_SettingsModel\SerializationTests.cpp,cascadia\LocalTests_SettingsModel\SerializationTests.cpp:<global>,,false,1,<global>,7
33937,TYPE_DECL,,,,"class SerializationTests : public JsonTestClass
    {
        // Use a custom AppxManifest to ensure that we can activate winrt types
        // from our test. This property will tell taef to manually use this as
        // the AppxManifest for this test class.
        // This does not yet work for anything XAML-y. See TabTests.cpp for more
        // details on that.
        BEGIN_TEST_CLASS(SerializationTests)
            TEST_CLASS_PROPERTY(L""RunAs"", L""UAP"")
            TEST_CLASS_PROPERTY(L""UAP:AppXManifest"", L""TestHostAppXManifest.xml"")
        END_TEST_CLASS()

        TEST_METHOD(GlobalSettings);
        TEST_METHOD(Profile);
        TEST_METHOD(ColorScheme);
        TEST_METHOD(Actions);
        TEST_METHOD(CascadiaSettings);
        TEST_METHOD(LegacyFontSettings);

        TEST_METHOD(RoundtripReloadEnvVars);
        TEST_METHOD(DontRoundtripNoReloadEnvVars);

    private:
        // Method Description:
        // - deserializes and reserializes a json string representing ...",5,cascadia\LocalTests_SettingsModel\SerializationTests.cpp,SettingsModelLocalTests.SerializationTests,JsonTestClass,false,26,SerializationTests,1
34526,TYPE_DECL,,cascadia\LocalTests_SettingsModel\TerminalSettingsTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\LocalTests_SettingsModel\TerminalSettingsTests.cpp,cascadia\LocalTests_SettingsModel\TerminalSettingsTests.cpp:<global>,,false,1,<global>,6
34588,TYPE_DECL,,,,"class TerminalSettingsTests
    {
        // Use a custom AppxManifest to ensure that we can activate winrt types
        // from our test. This property will tell taef to manually use this as
        // the AppxManifest for this test class.
        // This does not yet work for anything XAML-y. See TabTests.cpp for more
        // details on that.
        BEGIN_TEST_CLASS(TerminalSettingsTests)
            TEST_CLASS_PROPERTY(L""RunAs"", L""UAP"")
            TEST_CLASS_PROPERTY(L""UAP:AppXManifest"", L""TestHostAppXManifest.xml"")
        END_TEST_CLASS()

        TEST_METHOD(TryCreateWinRTType);
        TEST_METHOD(TestTerminalArgsForBinding);
        TEST_METHOD(CommandLineToArgvW);
        TEST_METHOD(NormalizeCommandLine);
        TEST_METHOD(GetProfileForArgsWithCommandline);
        TEST_METHOD(MakeSettingsForProfile);
        TEST_METHOD(MakeSettingsForDefaultProfileThatDoesntExist);
        TEST_METHOD(TestLayerProfileOnColorScheme);
        TEST_METHOD(TestCommandlineToTitlePromo...",5,cascadia\LocalTests_SettingsModel\TerminalSettingsTests.cpp,SettingsModelLocalTests.TerminalSettingsTests,,false,26,TerminalSettingsTests,1
37963,TYPE_DECL,,cascadia\LocalTests_SettingsModel\TestUtils.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\LocalTests_SettingsModel\TestUtils.hpp,cascadia\LocalTests_SettingsModel\TestUtils.hpp:<global>,,false,1,<global>,1
37966,TYPE_DECL,,,,"class TestUtils
{
public:
    // Function Description:
    // - This is a helper to retrieve the ActionAndArgs from the keybindings
    //   for a given chord.
    // Arguments:
    // - actionMap: The ActionMap to lookup the ActionAndArgs from.
    // - kc: The key chord to look up the bound ActionAndArgs for.
    // Return Value:
    // - The ActionAndArgs bound to the given key, or nullptr if nothing is bound to it.
    static const winrt::Microsoft::Terminal::Settings::Model::ActionAndArgs GetActionAndArgs(const winrt::Microsoft::Terminal::Settings::Model::ActionMap& actionMap,
                                                                                             const winrt::Microsoft::Terminal::Control::KeyChord& kc)
    {
        using VirtualKeyModifiers = winrt::Windows::System::VirtualKeyModifiers;

        std::wstring buffer{ L"""" };
        if (WI_IsFlagSet(kc.Modifiers(), VirtualKeyModifiers::Control))
        {
            buffer += L""Ctrl+"";
        }
        if...",1,cascadia\LocalTests_SettingsModel\TestUtils.hpp,TestUtils,,false,15,TestUtils,1
37971,TYPE_DECL,ANY,,,using VirtualKeyModifiers = winrt::Windows::System::VirtualKeyModifiers;,9,cascadia\LocalTests_SettingsModel\TestUtils.hpp,VirtualKeyModifiers,,false,29,VirtualKeyModifiers,1
38080,TYPE_DECL,,cascadia\LocalTests_SettingsModel\ThemeTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\LocalTests_SettingsModel\ThemeTests.cpp,cascadia\LocalTests_SettingsModel\ThemeTests.cpp:<global>,,false,1,<global>,7
38084,TYPE_DECL,,,,"class ThemeTests : public JsonTestClass
    {
        // Use a custom AppxManifest to ensure that we can activate winrt types
        // from our test. This property will tell taef to manually use this as
        // the AppxManifest for this test class.
        // This does not yet work for anything XAML-y. See TabTests.cpp for more
        // details on that.
        BEGIN_TEST_CLASS(ThemeTests)
            TEST_CLASS_PROPERTY(L""RunAs"", L""UAP"")
            TEST_CLASS_PROPERTY(L""UAP:AppXManifest"", L""TestHostAppXManifest.xml"")
        END_TEST_CLASS()

        TEST_METHOD(ParseSimpleTheme);
        TEST_METHOD(ParseEmptyTheme);
        TEST_METHOD(ParseNoWindowTheme);
        TEST_METHOD(ParseNullWindowTheme);
        TEST_METHOD(ParseThemeWithNullThemeColor);
        TEST_METHOD(InvalidCurrentTheme);

        static Core::Color rgb(uint8_t r, uint8_t g, uint8_t b) noexcept
        {
            return Core::Color{ r, g, b, 255 };
        }
        static Core::Color rgba(uint8_t r, ...",5,cascadia\LocalTests_SettingsModel\ThemeTests.cpp,SettingsModelLocalTests.ThemeTests,JsonTestClass,false,27,ThemeTests,1
38817,TYPE_DECL,,cascadia\LocalTests_SettingsModel\pch.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\LocalTests_SettingsModel\pch.cpp,cascadia\LocalTests_SettingsModel\pch.cpp:<global>,,false,1,<global>,2
38892,TYPE_DECL,,cascadia\LocalTests_SettingsModel\pch.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\LocalTests_SettingsModel\pch.hpp,cascadia\LocalTests_SettingsModel\pch.hpp:<global>,,false,1,<global>,36
38978,TYPE_DECL,,cascadia\LocalTests_TerminalApp\CommandlineTest.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\LocalTests_TerminalApp\CommandlineTest.cpp,cascadia\LocalTests_TerminalApp\CommandlineTest.cpp:<global>,,false,1,<global>,8
39081,TYPE_DECL,,,,"class CommandlineTest
    {
        // Use a custom AppxManifest to ensure that we can activate winrt types
        // from our test. This property will tell taef to manually use this as
        // the AppxManifest for this test class.
        // This does not yet work for anything XAML-y. See TabTests.cpp for more
        // details on that.
        BEGIN_TEST_CLASS(CommandlineTest)
            TEST_CLASS_PROPERTY(L""RunAs"", L""UAP"")
            TEST_CLASS_PROPERTY(L""UAP:AppXManifest"", L""TestHostAppXManifest.xml"")
        END_TEST_CLASS()

        TEST_METHOD(ParseSimpleCommandline);
        TEST_METHOD(ParseTrickyCommandlines);
        TEST_METHOD(TestEscapeDelimiters);

        TEST_METHOD(ParseSimpleHelp);
        TEST_METHOD(ParseBadOptions);
        TEST_METHOD(ParseSubcommandHelp);

        TEST_METHOD(ParseBasicCommandlineIntoArgs);
        TEST_METHOD(ParseNewTabCommand);
        TEST_METHOD(ParseSplitPaneIntoArgs);
        TEST_METHOD(ParseComboCommandlineIntoArgs);
        ...",5,cascadia\LocalTests_TerminalApp\CommandlineTest.cpp,TerminalAppLocalTests.CommandlineTest,,false,33,CommandlineTest,1
49498,TYPE_DECL,,cascadia\LocalTests_TerminalApp\CppWinrtTailored.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\LocalTests_TerminalApp\CppWinrtTailored.hpp,cascadia\LocalTests_TerminalApp\CppWinrtTailored.hpp:<global>,,false,1,<global>,2
49538,TYPE_DECL,,,,"class Event
    {
    public:
        Event() :
            m_handle(::CreateEvent(nullptr, FALSE, FALSE, nullptr))
        {
        }

        ~Event()
        {
            if (IsValid())
            {
                ::CloseHandle(m_handle);
            }
        }

        void Set()
        {
            ::SetEvent(m_handle);
        }

        HRESULT Wait()
        {
            return Thread_Wait_For(m_handle, INFINITE);
        }

        bool IsValid()
        {
            return m_handle != nullptr;
        }

        HANDLE m_handle;
    }",5,cascadia\LocalTests_TerminalApp\CppWinrtTailored.hpp,details.Event,,false,23,Event,1
50217,TYPE_DECL,,cascadia\LocalTests_TerminalApp\FilteredCommandTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\LocalTests_TerminalApp\FilteredCommandTests.cpp,cascadia\LocalTests_TerminalApp\FilteredCommandTests.cpp:<global>,,false,1,<global>,5
50923,TYPE_DECL,,,,"class FilteredCommandTests
    {
        BEGIN_TEST_CLASS(FilteredCommandTests)
            TEST_CLASS_PROPERTY(L""RunAs"", L""UAP"")
            TEST_CLASS_PROPERTY(L""UAP:AppXManifest"", L""TestHostAppXManifest.xml"")
        END_TEST_CLASS()

        TEST_METHOD(VerifyHighlighting);
        TEST_METHOD(VerifyWeight);
        TEST_METHOD(VerifyCompare);
        TEST_METHOD(VerifyCompareIgnoreCase);
    }",5,cascadia\LocalTests_TerminalApp\FilteredCommandTests.cpp,TerminalAppLocalTests.FilteredCommandTests,,false,18,FilteredCommandTests,1
50982,TYPE_DECL,,cascadia\LocalTests_TerminalApp\SettingsTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\LocalTests_TerminalApp\SettingsTests.cpp,cascadia\LocalTests_TerminalApp\SettingsTests.cpp:<global>,,false,1,<global>,4
50991,TYPE_DECL,,,,"class SettingsTests
    {
        // Use a custom AppxManifest to ensure that we can activate winrt types
        // from our test. This property will tell taef to manually use this as
        // the AppxManifest for this test class.
        // This does not yet work for anything XAML-y. See TabTests.cpp for more
        // details on that.
        BEGIN_TEST_CLASS(SettingsTests)
            TEST_CLASS_PROPERTY(L""RunAs"", L""UAP"")
            TEST_CLASS_PROPERTY(L""UAP:AppXManifest"", L""TestHostAppXManifest.xml"")
        END_TEST_CLASS()

        TEST_METHOD(TestIterateCommands);
        TEST_METHOD(TestIterateOnGeneratedNamedCommands);
        TEST_METHOD(TestIterateOnBadJson);
        TEST_METHOD(TestNestedCommands);
        TEST_METHOD(TestNestedInNestedCommand);
        TEST_METHOD(TestNestedInIterableCommand);
        TEST_METHOD(TestIterableInNestedCommand);
        TEST_METHOD(TestMixedNestedAndIterableCommand);

        TEST_METHOD(TestIterableColorSchemeCommands);

        TEST...",5,cascadia\LocalTests_TerminalApp\SettingsTests.cpp,TerminalAppLocalTests.SettingsTests,,false,49,SettingsTests,3
56517,TYPE_DECL,,cascadia\LocalTests_TerminalApp\TabTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\LocalTests_TerminalApp\TabTests.cpp,cascadia\LocalTests_TerminalApp\TabTests.cpp:<global>,,false,1,<global>,11
59484,TYPE_DECL,ANY,,,using IInspectable = Windows::Foundation::IInspectable;,5,cascadia\LocalTests_TerminalApp\TabTests.cpp,IInspectable,,false,37,IInspectable,3
60899,TYPE_DECL,,cascadia\LocalTests_TerminalApp\TestHostApp\UnitTestApp.xaml.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\LocalTests_TerminalApp\TestHostApp\UnitTestApp.xaml.cpp,cascadia\LocalTests_TerminalApp\TestHostApp\UnitTestApp.xaml.cpp:<global>,,false,1,<global>,2
60913,TYPE_DECL,,cascadia\LocalTests_TerminalApp\TestHostApp\UnitTestApp.xaml.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\LocalTests_TerminalApp\TestHostApp\UnitTestApp.xaml.hpp,cascadia\LocalTests_TerminalApp\TestHostApp\UnitTestApp.xaml.hpp:<global>,,false,1,<global>,2
60922,TYPE_DECL,,cascadia\LocalTests_TerminalApp\TestHostApp\pch.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\LocalTests_TerminalApp\TestHostApp\pch.cpp,cascadia\LocalTests_TerminalApp\TestHostApp\pch.cpp:<global>,,false,1,<global>,2
60929,TYPE_DECL,,cascadia\LocalTests_TerminalApp\TestHostApp\pch.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\LocalTests_TerminalApp\TestHostApp\pch.hpp,cascadia\LocalTests_TerminalApp\TestHostApp\pch.hpp:<global>,,false,1,<global>,2
60936,TYPE_DECL,,cascadia\LocalTests_TerminalApp\pch.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\LocalTests_TerminalApp\pch.cpp,cascadia\LocalTests_TerminalApp\pch.cpp:<global>,,false,1,<global>,2
61015,TYPE_DECL,,cascadia\LocalTests_TerminalApp\pch.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\LocalTests_TerminalApp\pch.hpp,cascadia\LocalTests_TerminalApp\pch.hpp:<global>,,false,1,<global>,38
61026,TYPE_DECL,,cascadia\Remoting\CommandlineArgs.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\Remoting\CommandlineArgs.cpp,cascadia\Remoting\CommandlineArgs.cpp:<global>,,false,1,<global>,4
61060,TYPE_DECL,,cascadia\Remoting\CommandlineArgs.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\Remoting\CommandlineArgs.hpp,cascadia\Remoting\CommandlineArgs.hpp:<global>,,false,1,<global>,2
61068,TYPE_DECL,,,,"struct CommandlineArgs : public CommandlineArgsT<CommandlineArgs>
    {
    public:
        CommandlineArgs() :
            _args{},
            _cwd{ L"""" }
        {
        }

        CommandlineArgs(const winrt::array_view<const winrt::hstring>& args,
                        winrt::hstring currentDirectory,
                        const uint32_t showWindowCommand,
                        winrt::hstring envString) :
            _args{ args.begin(), args.end() },
            _cwd{ currentDirectory },
            _ShowWindowCommand{ showWindowCommand },
            CurrentEnvironment{ envString }
        {
        }

        winrt::hstring CurrentDirectory() { return _cwd; };

        void Commandline(const winrt::array_view<const winrt::hstring>& value);
        winrt::com_array<winrt::hstring> Commandline();

        til::property<winrt::hstring> CurrentEnvironment;

        WINRT_PROPERTY(uint32_t, ShowWindowCommand, SW_NORMAL); // SW_NORMAL is 1, 0 is SW_HIDE

    private:
     ...",5,cascadia\Remoting\CommandlineArgs.hpp,winrt.Microsoft.Terminal.Remoting.implementation.CommandlineArgs,CommandlineArgsT<CommandlineArgs>,false,7,CommandlineArgs,1
61114,TYPE_DECL,,cascadia\Remoting\FindTargetWindowArgs.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\Remoting\FindTargetWindowArgs.cpp,cascadia\Remoting\FindTargetWindowArgs.cpp:<global>,,false,1,<global>,4
61121,TYPE_DECL,,cascadia\Remoting\FindTargetWindowArgs.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\Remoting\FindTargetWindowArgs.hpp,cascadia\Remoting\FindTargetWindowArgs.hpp:<global>,,false,1,<global>,2
61129,TYPE_DECL,,,,"struct FindTargetWindowArgs : public FindTargetWindowArgsT<FindTargetWindowArgs>
    {
        WINRT_PROPERTY(winrt::Microsoft::Terminal::Remoting::CommandlineArgs, Args, nullptr);
        WINRT_PROPERTY(int, ResultTargetWindow, -1);
        WINRT_PROPERTY(winrt::hstring, ResultTargetWindowName);

    public:
        FindTargetWindowArgs(winrt::Microsoft::Terminal::Remoting::CommandlineArgs args) :
            _Args{ args } {};
    }",5,cascadia\Remoting\FindTargetWindowArgs.hpp,winrt.Microsoft.Terminal.Remoting.implementation.FindTargetWindowArgs,FindTargetWindowArgsT<FindTargetWindowArgs>,false,25,FindTargetWindowArgs,1
61146,TYPE_DECL,,cascadia\Remoting\GetWindowLayoutArgs.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\Remoting\GetWindowLayoutArgs.cpp,cascadia\Remoting\GetWindowLayoutArgs.cpp:<global>,,false,1,<global>,4
61153,TYPE_DECL,,cascadia\Remoting\GetWindowLayoutArgs.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\Remoting\GetWindowLayoutArgs.hpp,cascadia\Remoting\GetWindowLayoutArgs.hpp:<global>,,false,1,<global>,2
61161,TYPE_DECL,,,,"struct GetWindowLayoutArgs : public GetWindowLayoutArgsT<GetWindowLayoutArgs>
    {
        WINRT_PROPERTY(winrt::hstring, WindowLayoutJson, L"""");
        WINRT_PROPERTY(winrt::Windows::Foundation::IAsyncOperation<winrt::hstring>, WindowLayoutJsonAsync, nullptr)
    }",5,cascadia\Remoting\GetWindowLayoutArgs.hpp,winrt.Microsoft.Terminal.Remoting.implementation.GetWindowLayoutArgs,GetWindowLayoutArgsT<GetWindowLayoutArgs>,false,21,GetWindowLayoutArgs,1
61182,TYPE_DECL,,cascadia\Remoting\Monarch.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\Remoting\Monarch.cpp,cascadia\Remoting\Monarch.cpp:<global>,,false,1,<global>,11
63400,TYPE_DECL,,cascadia\Remoting\Monarch.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\Remoting\Monarch.hpp,cascadia\Remoting\Monarch.hpp:<global>,,false,1,<global>,6
63420,TYPE_DECL,,,,class RemotingTests,5,cascadia\Remoting\Monarch.hpp,RemotingUnitTests.RemotingTests,,false,40,RemotingTests,1
63426,TYPE_DECL,,,,"struct WindowRequestedArgs : public WindowRequestedArgsT<WindowRequestedArgs>
    {
    public:
        WindowRequestedArgs(const Remoting::ProposeCommandlineResult& windowInfo, const Remoting::CommandlineArgs& command) :
            _Id{ windowInfo.Id() ? windowInfo.Id().Value() : 0 }, // We'll use 0 as a sentinel, since no window will ever get to have that ID
            _WindowName{ windowInfo.WindowName() },
            _args{ command.Commandline() },
            _CurrentDirectory{ command.CurrentDirectory() },
            _ShowWindowCommand{ command.ShowWindowCommand() },
            _CurrentEnvironment{ command.CurrentEnvironment() } {};

        WindowRequestedArgs(const winrt::hstring& window, const winrt::hstring& content, const Windows::Foundation::IReference<Windows::Foundation::Rect>& bounds) :
            _Id{ 0u },
            _WindowName{ window },
            _args{},
            _CurrentDirectory{},
            _Content{ content },
            _InitialBounds{ bounds...",5,cascadia\Remoting\Monarch.hpp,winrt.Microsoft.Terminal.Remoting.implementation.WindowRequestedArgs,WindowRequestedArgsT<WindowRequestedArgs>,false,45,WindowRequestedArgs,1
63470,TYPE_DECL,,,,"struct Monarch : public MonarchT<Monarch>
    {
        Monarch();
        Monarch(const uint64_t testPID);
        ~Monarch();

        uint64_t GetPID();

        uint64_t AddPeasant(winrt::Microsoft::Terminal::Remoting::IPeasant peasant);
        void SignalClose(const uint64_t peasantId);

        uint64_t GetNumberOfPeasants();

        winrt::Microsoft::Terminal::Remoting::ProposeCommandlineResult ProposeCommandline(const winrt::Microsoft::Terminal::Remoting::CommandlineArgs& args);
        void HandleActivatePeasant(const winrt::Microsoft::Terminal::Remoting::WindowActivatedArgs& args);
        void SummonWindow(const Remoting::SummonWindowSelectionArgs& args);

        void SummonAllWindows();
        bool DoesQuakeWindowExist();
        Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Terminal::Remoting::PeasantInfo> GetPeasantInfos();
        Windows::Foundation::Collections::IVector<winrt::hstring> GetAllWindowLayouts();

        void RequestMoveContent(win...",5,cascadia\Remoting\Monarch.hpp,winrt.Microsoft.Terminal.Remoting.implementation.Monarch,MonarchT<Monarch>,false,79,Monarch,2
63623,TYPE_DECL,decltype,,,using Map = decltype(_peasants);,13,cascadia\Remoting\Monarch.hpp,Map,,false,170,Map,1
63624,TYPE_DECL,ANY,,,"using R = std::invoke_result_t<F, Map::key_type, Map::mapped_type>;",13,cascadia\Remoting\Monarch.hpp,R,,false,171,R,2
63716,TYPE_DECL,,,,friend class RemotingUnitTests::RemotingTests,9,cascadia\Remoting\Monarch.hpp,winrt.Microsoft.Terminal.Remoting.implementation.Monarch.RemotingTests,,false,230,RemotingTests,44
63756,TYPE_DECL,,cascadia\Remoting\MonarchFactory.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\Remoting\MonarchFactory.hpp,cascadia\Remoting\MonarchFactory.hpp:<global>,,false,1,<global>,3
63759,TYPE_DECL,,,,"struct MonarchFactory : winrt::implements<MonarchFactory, ::IClassFactory>
{
    MonarchFactory() = default;

    HRESULT __stdcall CreateInstance(IUnknown* outer, GUID const& iid, void** result) noexcept
    {
        static winrt::weak_ref<winrt::Microsoft::Terminal::Remoting::implementation::Monarch> g_weak{ nullptr };

        *result = nullptr;
        if (outer)
        {
            return CLASS_E_NOAGGREGATION;
        }

        // Lock the ref immediately. We don't want it freed from out beneath us
        auto strong = g_weak.get();
        if (!strong)
        {
            // Create a new Monarch instance
            strong = winrt::make_self<winrt::Microsoft::Terminal::Remoting::implementation::Monarch>();
            g_weak = (*strong).get_weak();
            return strong.as(iid, result);
        }
        else
        {
            // We already instantiated one Monarch, let's just return that one!
            return strong.as(iid, result);
        }
    }

    HRES...",1,cascadia\Remoting\MonarchFactory.hpp,MonarchFactory,"winrt.implements<MonarchFactory, .IClassFactory>",false,15,MonarchFactory,1
63852,TYPE_DECL,,cascadia\Remoting\Peasant.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\Remoting\Peasant.cpp,cascadia\Remoting\Peasant.cpp:<global>,,false,1,<global>,10
64310,TYPE_DECL,,cascadia\Remoting\Peasant.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\Remoting\Peasant.hpp,cascadia\Remoting\Peasant.hpp:<global>,,false,1,<global>,5
64314,TYPE_DECL,,,,class RemotingTests,5,cascadia\Remoting\Peasant.hpp,RemotingUnitTests.RemotingTests,,false,13,RemotingTests,1
64320,TYPE_DECL,,,,"struct AttachRequest : public AttachRequestT<AttachRequest>
    {
        WINRT_PROPERTY(winrt::hstring, Content);
        WINRT_PROPERTY(uint32_t, TabIndex);

    public:
        AttachRequest(winrt::hstring content,
                      uint32_t tabIndex) :
            _Content{ content },
            _TabIndex{ tabIndex } {};
    }",5,cascadia\Remoting\Peasant.hpp,winrt.Microsoft.Terminal.Remoting.implementation.AttachRequest,AttachRequestT<AttachRequest>,false,17,AttachRequest,1
64329,TYPE_DECL,,,,"struct RequestReceiveContentArgs : RequestReceiveContentArgsT<RequestReceiveContentArgs>
    {
        WINRT_PROPERTY(uint64_t, SourceWindow);
        WINRT_PROPERTY(uint64_t, TargetWindow);
        WINRT_PROPERTY(uint32_t, TabIndex);

    public:
        RequestReceiveContentArgs(const uint64_t src, const uint64_t tgt, const uint32_t tabIndex) :
            _SourceWindow{ src },
            _TargetWindow{ tgt },
            _TabIndex{ tabIndex } {};
    }",5,cascadia\Remoting\Peasant.hpp,winrt.Microsoft.Terminal.Remoting.implementation.RequestReceiveContentArgs,RequestReceiveContentArgsT<RequestReceiveContentArgs>,false,29,RequestReceiveContentArgs,2
64340,TYPE_DECL,,,,"struct Peasant : public PeasantT<Peasant>
    {
        Peasant();

        void AssignID(uint64_t id);
        uint64_t GetID();
        uint64_t GetPID();

        bool ExecuteCommandline(const winrt::Microsoft::Terminal::Remoting::CommandlineArgs& args);
        void ActivateWindow(const winrt::Microsoft::Terminal::Remoting::WindowActivatedArgs& args);

        void Summon(const Remoting::SummonWindowBehavior& summonBehavior);
        void RequestIdentifyWindows();
        void DisplayWindowId();
        void RequestRename(const winrt::Microsoft::Terminal::Remoting::RenameRequestArgs& args);
        void RequestShowNotificationIcon();
        void RequestHideNotificationIcon();
        void RequestQuitAll();
        void Quit();

        void AttachContentToWindow(Remoting::AttachRequest request);

        winrt::Microsoft::Terminal::Remoting::WindowActivatedArgs GetLastActivatedArgs();

        winrt::Microsoft::Terminal::Remoting::CommandlineArgs InitialArgs();

        winrt::...",5,cascadia\Remoting\Peasant.hpp,winrt.Microsoft.Terminal.Remoting.implementation.Peasant,PeasantT<Peasant>,false,42,Peasant,3
64448,TYPE_DECL,,,,friend class RemotingUnitTests::RemotingTests,9,cascadia\Remoting\Peasant.hpp,winrt.Microsoft.Terminal.Remoting.implementation.Peasant.RemotingTests,,false,99,RemotingTests,40
64480,TYPE_DECL,,cascadia\Remoting\ProposeCommandlineResult.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\Remoting\ProposeCommandlineResult.cpp,cascadia\Remoting\ProposeCommandlineResult.cpp:<global>,,false,1,<global>,4
64487,TYPE_DECL,,cascadia\Remoting\ProposeCommandlineResult.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\Remoting\ProposeCommandlineResult.hpp,cascadia\Remoting\ProposeCommandlineResult.hpp:<global>,,false,1,<global>,2
64495,TYPE_DECL,,,,"struct ProposeCommandlineResult : public ProposeCommandlineResultT<ProposeCommandlineResult>
    {
    public:
        ProposeCommandlineResult(const Remoting::ProposeCommandlineResult& other) :
            _Id{ other.Id() },
            _WindowName{ other.WindowName() },
            _ShouldCreateWindow{ other.ShouldCreateWindow() } {};

        WINRT_PROPERTY(Windows::Foundation::IReference<uint64_t>, Id);
        WINRT_PROPERTY(winrt::hstring, WindowName);
        WINRT_PROPERTY(bool, ShouldCreateWindow, true);

    public:
        ProposeCommandlineResult(bool shouldCreateWindow) :
            _ShouldCreateWindow{ shouldCreateWindow } {};
    }",5,cascadia\Remoting\ProposeCommandlineResult.hpp,winrt.Microsoft.Terminal.Remoting.implementation.ProposeCommandlineResult,ProposeCommandlineResultT<ProposeCommandlineResult>,false,25,ProposeCommandlineResult,1
64517,TYPE_DECL,,cascadia\Remoting\QuitAllRequestedArgs.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\Remoting\QuitAllRequestedArgs.cpp,cascadia\Remoting\QuitAllRequestedArgs.cpp:<global>,,false,1,<global>,4
64524,TYPE_DECL,,cascadia\Remoting\QuitAllRequestedArgs.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\Remoting\QuitAllRequestedArgs.hpp,cascadia\Remoting\QuitAllRequestedArgs.hpp:<global>,,false,1,<global>,2
64532,TYPE_DECL,,,,"struct QuitAllRequestedArgs : public QuitAllRequestedArgsT<QuitAllRequestedArgs>
    {
        WINRT_PROPERTY(winrt::Windows::Foundation::IAsyncAction, BeforeQuitAllAction, nullptr)
    }",5,cascadia\Remoting\QuitAllRequestedArgs.hpp,winrt.Microsoft.Terminal.Remoting.implementation.QuitAllRequestedArgs,QuitAllRequestedArgsT<QuitAllRequestedArgs>,false,20,QuitAllRequestedArgs,1
64548,TYPE_DECL,,cascadia\Remoting\RenameRequestArgs.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\Remoting\RenameRequestArgs.cpp,cascadia\Remoting\RenameRequestArgs.cpp:<global>,,false,1,<global>,4
64555,TYPE_DECL,,cascadia\Remoting\RenameRequestArgs.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\Remoting\RenameRequestArgs.hpp,cascadia\Remoting\RenameRequestArgs.hpp:<global>,,false,1,<global>,2
64563,TYPE_DECL,,,,"struct RenameRequestArgs : public RenameRequestArgsT<RenameRequestArgs>
    {
        WINRT_PROPERTY(winrt::hstring, NewName);
        WINRT_PROPERTY(bool, Succeeded, false);

    public:
        RenameRequestArgs(winrt::hstring newName) :
            _NewName{ newName } {};
    }",5,cascadia\Remoting\RenameRequestArgs.hpp,winrt.Microsoft.Terminal.Remoting.implementation.RenameRequestArgs,RenameRequestArgsT<RenameRequestArgs>,false,15,RenameRequestArgs,1
64585,TYPE_DECL,,cascadia\Remoting\SummonWindowBehavior.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\Remoting\SummonWindowBehavior.cpp,cascadia\Remoting\SummonWindowBehavior.cpp:<global>,,false,1,<global>,4
64592,TYPE_DECL,,cascadia\Remoting\SummonWindowBehavior.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\Remoting\SummonWindowBehavior.hpp,cascadia\Remoting\SummonWindowBehavior.hpp:<global>,,false,1,<global>,2
64600,TYPE_DECL,,,,"struct SummonWindowBehavior : public SummonWindowBehaviorT<SummonWindowBehavior>
    {
    public:
        SummonWindowBehavior() = default;
        WINRT_PROPERTY(bool, MoveToCurrentDesktop, true);
        WINRT_PROPERTY(bool, ToggleVisibility, true);
        WINRT_PROPERTY(uint32_t, DropdownDuration, 0);
        WINRT_PROPERTY(Remoting::MonitorBehavior, ToMonitor, Remoting::MonitorBehavior::ToCurrent);

    public:
        SummonWindowBehavior(const Remoting::SummonWindowBehavior& other) :
            _MoveToCurrentDesktop{ other.MoveToCurrentDesktop() },
            _ToMonitor{ other.ToMonitor() },
            _DropdownDuration{ other.DropdownDuration() },
            _ToggleVisibility{ other.ToggleVisibility() } {};
    }",5,cascadia\Remoting\SummonWindowBehavior.hpp,winrt.Microsoft.Terminal.Remoting.implementation.SummonWindowBehavior,SummonWindowBehaviorT<SummonWindowBehavior>,false,23,SummonWindowBehavior,1
64628,TYPE_DECL,,cascadia\Remoting\SummonWindowSelectionArgs.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\Remoting\SummonWindowSelectionArgs.cpp,cascadia\Remoting\SummonWindowSelectionArgs.cpp:<global>,,false,1,<global>,4
64635,TYPE_DECL,,cascadia\Remoting\SummonWindowSelectionArgs.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\Remoting\SummonWindowSelectionArgs.hpp,cascadia\Remoting\SummonWindowSelectionArgs.hpp:<global>,,false,1,<global>,2
64643,TYPE_DECL,,,,"struct SummonWindowSelectionArgs : public SummonWindowSelectionArgsT<SummonWindowSelectionArgs>
    {
    public:
        SummonWindowSelectionArgs() = default;
        SummonWindowSelectionArgs(winrt::hstring name) :
            _WindowName{ name } {};

        WINRT_PROPERTY(winrt::hstring, WindowName);

        WINRT_PROPERTY(bool, FoundMatch, false);
        WINRT_PROPERTY(bool, OnCurrentDesktop, false);
        WINRT_PROPERTY(SummonWindowBehavior, SummonBehavior);

        WINRT_PROPERTY(Windows::Foundation::IReference<uint64_t>, WindowID);
    }",5,cascadia\Remoting\SummonWindowSelectionArgs.hpp,winrt.Microsoft.Terminal.Remoting.implementation.SummonWindowSelectionArgs,SummonWindowSelectionArgsT<SummonWindowSelectionArgs>,false,24,SummonWindowSelectionArgs,1
64672,TYPE_DECL,,cascadia\Remoting\WindowActivatedArgs.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\Remoting\WindowActivatedArgs.cpp,cascadia\Remoting\WindowActivatedArgs.cpp:<global>,,false,1,<global>,4
64679,TYPE_DECL,,cascadia\Remoting\WindowActivatedArgs.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\Remoting\WindowActivatedArgs.hpp,cascadia\Remoting\WindowActivatedArgs.hpp:<global>,,false,1,<global>,2
64687,TYPE_DECL,,,,"struct CompareWindowActivatedArgs
    {
        bool operator()(const Remoting::WindowActivatedArgs& lhs, const Remoting::WindowActivatedArgs& rhs) const
        {
            return lhs.ActivatedTime() > rhs.ActivatedTime();
        }
    }",5,cascadia\Remoting\WindowActivatedArgs.hpp,winrt.Microsoft.Terminal.Remoting.implementation.CompareWindowActivatedArgs,,false,20,CompareWindowActivatedArgs,1
64704,TYPE_DECL,,,,"struct WindowActivatedArgs : public WindowActivatedArgsT<WindowActivatedArgs>
    {
        WINRT_PROPERTY(uint64_t, PeasantID, 0);
        WINRT_PROPERTY(winrt::guid, DesktopID);
        WINRT_PROPERTY(winrt::Windows::Foundation::DateTime, ActivatedTime, {});
        WINRT_PROPERTY(uint64_t, Hwnd, 0);

    public:
        WindowActivatedArgs(uint64_t peasantID,
                            uint64_t hwnd,
                            winrt::guid desktopID,
                            winrt::Windows::Foundation::DateTime timestamp) :
            _PeasantID{ peasantID },
            _Hwnd{ hwnd },
            _DesktopID{ desktopID },
            _ActivatedTime{ timestamp } {};

        WindowActivatedArgs(uint64_t peasantID,
                            winrt::guid desktopID,
                            winrt::Windows::Foundation::DateTime timestamp) :
            WindowActivatedArgs(peasantID, 0, desktopID, timestamp){};

        WindowActivatedArgs(const Remoting::WindowActivatedArgs& ...",5,cascadia\Remoting\WindowActivatedArgs.hpp,winrt.Microsoft.Terminal.Remoting.implementation.WindowActivatedArgs,WindowActivatedArgsT<WindowActivatedArgs>,false,27,WindowActivatedArgs,2
64794,TYPE_DECL,,cascadia\Remoting\WindowManager.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\Remoting\WindowManager.cpp,cascadia\Remoting\WindowManager.cpp:<global>,,false,1,<global>,11
65419,TYPE_DECL,,cascadia\Remoting\WindowManager.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\Remoting\WindowManager.hpp,cascadia\Remoting\WindowManager.hpp:<global>,,false,1,<global>,4
65427,TYPE_DECL,,,,"struct WindowManager : public WindowManagerT<WindowManager>
    {
    public:
        WindowManager();
        ~WindowManager();
        winrt::Microsoft::Terminal::Remoting::ProposeCommandlineResult ProposeCommandline(const winrt::Microsoft::Terminal::Remoting::CommandlineArgs& args, const bool isolatedMode);
        Remoting::Peasant CreatePeasant(const Remoting::WindowRequestedArgs& args);

        void SignalClose(const Remoting::Peasant& peasant);
        void SummonWindow(const Remoting::SummonWindowSelectionArgs& args);
        void SummonAllWindows();
        Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Terminal::Remoting::PeasantInfo> GetPeasantInfos();

        uint64_t GetNumberOfPeasants();

        static winrt::fire_and_forget RequestQuitAll(Remoting::Peasant peasant);
        void UpdateActiveTabTitle(const winrt::hstring& title, const Remoting::Peasant& peasant);

        Windows::Foundation::Collections::IVector<winrt::hstring> GetAllWindowLayouts...",5,cascadia\Remoting\WindowManager.hpp,winrt.Microsoft.Terminal.Remoting.implementation.WindowManager,WindowManagerT<WindowManager>,false,26,WindowManager,1
65564,TYPE_DECL,,cascadia\Remoting\init.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\Remoting\init.cpp,cascadia\Remoting\init.cpp:<global>,,false,1,<global>,4
65610,TYPE_DECL,,cascadia\Remoting\pch.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\Remoting\pch.cpp,cascadia\Remoting\pch.cpp:<global>,,false,1,<global>,2
65649,TYPE_DECL,,cascadia\Remoting\pch.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\Remoting\pch.hpp,cascadia\Remoting\pch.hpp:<global>,,false,1,<global>,18
65667,TYPE_DECL,,cascadia\ShellExtension\OpenTerminalHere.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\ShellExtension\OpenTerminalHere.cpp,cascadia\ShellExtension\OpenTerminalHere.cpp:<global>,,false,1,<global>,7
65972,TYPE_DECL,,cascadia\ShellExtension\OpenTerminalHere.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\ShellExtension\OpenTerminalHere.hpp,cascadia\ShellExtension\OpenTerminalHere.hpp:<global>,,false,1,<global>,1
65975,TYPE_DECL,,,,"struct
#if defined(WT_BRANDING_RELEASE)
    __declspec(uuid(""9f156763-7844-4dc4-b2b1-901f640f5155""))
#elif defined(WT_BRANDING_PREVIEW)
    __declspec(uuid(""02db545a-3e20-46de-83a5-1329b1e88b6b""))
#elif defined(WT_BRANDING_CANARY)
    __declspec(uuid(""6119575F-6918-4392-AF16-C2C627AF9416""))
#else // DEV
    __declspec(uuid(""52065414-e077-47ec-a3ac-1cc5455e1b54""))
#endif
        OpenTerminalHere : public RuntimeClass<RuntimeClassFlags<ClassicCom | InhibitFtmBase>, IExplorerCommand, IObjectWithSite>
{
#pragma region IExplorerCommand
    STDMETHODIMP Invoke(IShellItemArray* psiItemArray,
                        IBindCtx* pBindContext);
    STDMETHODIMP GetToolTip(IShellItemArray* psiItemArray,
                            LPWSTR* ppszInfoTip);
    STDMETHODIMP GetTitle(IShellItemArray* psiItemArray,
                          LPWSTR* ppszName);
    STDMETHODIMP GetState(IShellItemArray* psiItemArray,
                          BOOL fOkToBeSlow,
                          EXPCMDSTATE* pCmdS...",1,cascadia\ShellExtension\OpenTerminalHere.hpp,OpenTerminalHere,"RuntimeClass<RuntimeClassFlags<ClassicCom | InhibitFtmBase>, IExplorerCommand, IObjectWithSite>",false,27,OpenTerminalHere,1
66058,TYPE_DECL,,cascadia\ShellExtension\dllmain.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\ShellExtension\dllmain.cpp,cascadia\ShellExtension\dllmain.cpp:<global>,,false,1,<global>,4
66095,TYPE_DECL,,cascadia\ShellExtension\pch.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\ShellExtension\pch.cpp,cascadia\ShellExtension\pch.cpp:<global>,,false,1,<global>,2
66118,TYPE_DECL,,cascadia\ShellExtension\pch.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\ShellExtension\pch.hpp,cascadia\ShellExtension\pch.hpp:<global>,,false,1,<global>,10
66137,TYPE_DECL,,cascadia\TerminalApp\AboutDialog.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\AboutDialog.cpp,cascadia\TerminalApp\AboutDialog.cpp:<global>,,false,1,<global>,8
66142,TYPE_DECL,ANY,,,using IInspectable = Windows::Foundation::IInspectable;,5,cascadia\TerminalApp\AboutDialog.cpp,IInspectable,,false,24,IInspectable,2
66438,TYPE_DECL,,cascadia\TerminalApp\AboutDialog.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\AboutDialog.hpp,cascadia\TerminalApp\AboutDialog.hpp:<global>,,false,1,<global>,2
66444,TYPE_DECL,,,,"struct AboutDialog : AboutDialogT<AboutDialog>
    {
    public:
        AboutDialog();

        winrt::hstring ApplicationDisplayName();
        winrt::hstring ApplicationVersion();

        WINRT_CALLBACK(PropertyChanged, Windows::UI::Xaml::Data::PropertyChangedEventHandler);
        WINRT_OBSERVABLE_PROPERTY(bool, UpdatesAvailable, _PropertyChangedHandlers, false);
        WINRT_OBSERVABLE_PROPERTY(bool, CheckingForUpdates, _PropertyChangedHandlers, false);

    private:
        friend struct AboutDialogT<AboutDialog>; // for Xaml to bind events

        std::chrono::system_clock::time_point _lastUpdateCheck{};

        void _ThirdPartyNoticesOnClick(const IInspectable& sender, const Windows::UI::Xaml::RoutedEventArgs& eventArgs);
        void _SendFeedbackOnClick(const IInspectable& sender, const Windows::UI::Xaml::Controls::ContentDialogButtonClickEventArgs& eventArgs);
        winrt::fire_and_forget _queueUpdateCheck();
    }",5,cascadia\TerminalApp\AboutDialog.hpp,winrt.TerminalApp.implementation.AboutDialog,AboutDialogT<AboutDialog>,false,10,AboutDialog,1
66460,TYPE_DECL,,,,friend struct AboutDialogT<AboutDialog>,9,cascadia\TerminalApp\AboutDialog.hpp,winrt.TerminalApp.implementation.AboutDialog.AboutDialogT<AboutDialog>,,false,23,AboutDialogT<AboutDialog>,7
66499,TYPE_DECL,,cascadia\TerminalApp\ActionPaletteItem.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\ActionPaletteItem.cpp,cascadia\TerminalApp\ActionPaletteItem.cpp:<global>,,false,1,<global>,5
66531,TYPE_DECL,,cascadia\TerminalApp\ActionPaletteItem.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\ActionPaletteItem.hpp,cascadia\TerminalApp\ActionPaletteItem.hpp:<global>,,false,1,<global>,3
66537,TYPE_DECL,,,,"struct ActionPaletteItem : ActionPaletteItemT<ActionPaletteItem, PaletteItem>
    {
        ActionPaletteItem() = default;
        ActionPaletteItem(const Microsoft::Terminal::Settings::Model::Command& command);

        WINRT_PROPERTY(Microsoft::Terminal::Settings::Model::Command, Command, nullptr);

    private:
        Windows::UI::Xaml::Data::INotifyPropertyChanged::PropertyChanged_revoker _commandChangedRevoker;
    }",5,cascadia\TerminalApp\ActionPaletteItem.hpp,winrt.TerminalApp.implementation.ActionPaletteItem,"ActionPaletteItemT<ActionPaletteItem, PaletteItem>",false,11,ActionPaletteItem,1
66563,TYPE_DECL,,cascadia\TerminalApp\ActionPreviewHandlers.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\ActionPreviewHandlers.cpp,cascadia\TerminalApp\ActionPreviewHandlers.cpp:<global>,,false,1,<global>,6
66670,TYPE_DECL,ANY,,,using IInspectable = Windows::Foundation::IInspectable;,5,cascadia\TerminalApp\ActionPreviewHandlers.cpp,IInspectable,,false,30,IInspectable,3
66835,TYPE_DECL,,cascadia\TerminalApp\App.base.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\App.base.hpp,cascadia\TerminalApp\App.base.hpp:<global>,,false,1,<global>,1
66841,TYPE_DECL,"winrt.TerminalApp.implementation.App_baseWithProvider<D,I>",,,"struct App_baseWithProvider : public App_base<D, ::winrt::Windows::UI::Xaml::Markup::IXamlMetadataProvider>
    {
        using IXamlType = ::winrt::Windows::UI::Xaml::Markup::IXamlType;

        IXamlType GetXamlType(const ::winrt::Windows::UI::Xaml::Interop::TypeName& type)
        {
            return AppProvider()->GetXamlType(type);
        }

        IXamlType GetXamlType(const ::winrt::hstring& fullName)
        {
            return AppProvider()->GetXamlType(fullName);
        }

        ::winrt::com_array<::winrt::Windows::UI::Xaml::Markup::XmlnsDefinition> GetXmlnsDefinitions()
        {
            return AppProvider()->GetXmlnsDefinitions();
        }

        void AddOtherProvider(const ::winrt::Windows::UI::Xaml::Markup::IXamlMetadataProvider& provider)
        {
            AppProvider()->AddOtherProvider(provider);
        }

    private:
        bool _contentLoaded{ false };
        winrt::com_ptr<XamlMetaDataProvider> _appProvider;
        winrt::com_ptr<XamlMetaDa...",5,cascadia\TerminalApp\App.base.hpp,winrt.TerminalApp.implementation.App_baseWithProvider,"App_base<D, .winrt.Windows.UI.Xaml.Markup.IXamlMetadataProvider>",false,6,App_baseWithProvider,1
66842,TYPE_DECL,ANY,,,using IXamlType = ::winrt::Windows::UI::Xaml::Markup::IXamlType;,9,cascadia\TerminalApp\App.base.hpp,IXamlType,,false,8,IXamlType,1
66910,TYPE_DECL,"App_baseWithProvider<D, I...>",,,"using AppT2 = App_baseWithProvider<D, I...>;",5,cascadia\TerminalApp\App.base.hpp,AppT2,,false,44,AppT2,2
66921,TYPE_DECL,,cascadia\TerminalApp\App.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\App.cpp,cascadia\TerminalApp\App.cpp:<global>,,false,1,<global>,5
67111,TYPE_DECL,,cascadia\TerminalApp\App.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\App.hpp,cascadia\TerminalApp\App.hpp:<global>,,false,1,<global>,4
67117,TYPE_DECL,,,,"struct App : AppT2<App>
    {
    public:
        App();
        void OnLaunched(const Windows::ApplicationModel::Activation::LaunchActivatedEventArgs&);
        void Initialize();

        TerminalApp::AppLogic Logic();

        void Close();
        void PrepareForSettingsUI();

        bool IsDisposed() const
        {
            return _bIsClosed;
        }

    private:
        winrt::Windows::UI::Xaml::Hosting::WindowsXamlManager _windowsXamlManager = nullptr;
        bool _bIsClosed = false;
        bool _preparedForSettingsUI{ false };
    }",5,cascadia\TerminalApp\App.hpp,winrt.TerminalApp.implementation.App,AppT2<App>,false,12,App,1
67169,TYPE_DECL,,,,"struct App : AppT<App, implementation::App>
    {
    }",5,cascadia\TerminalApp\App.hpp,winrt.TerminalApp.factory_implementation.App,"AppT<App, implementation.App>",false,38,App,1
67209,TYPE_DECL,,cascadia\TerminalApp\AppActionHandlers.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\AppActionHandlers.cpp,cascadia\TerminalApp\AppActionHandlers.cpp:<global>,,false,1,<global>,7
67509,TYPE_DECL,ANY,,,using IInspectable = Windows::Foundation::IInspectable;,5,cascadia\TerminalApp\AppActionHandlers.cpp,IInspectable,,false,27,IInspectable,2
70860,TYPE_DECL,,cascadia\TerminalApp\AppCommandlineArgs.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\AppCommandlineArgs.cpp,cascadia\TerminalApp\AppCommandlineArgs.cpp:<global>,,false,1,<global>,6
73175,TYPE_DECL,,cascadia\TerminalApp\AppCommandlineArgs.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\AppCommandlineArgs.hpp,cascadia\TerminalApp\AppCommandlineArgs.hpp:<global>,,false,1,<global>,2
73179,TYPE_DECL,,,,class AppCommandlineArgs,5,cascadia\TerminalApp\AppCommandlineArgs.hpp,TerminalApp.AppCommandlineArgs,,false,17,AppCommandlineArgs,1
73180,TYPE_DECL,,,,"class TerminalApp::AppCommandlineArgs final
{
public:
    static constexpr std::string_view NixHelpFlag{ ""-?"" };
    static constexpr std::string_view WindowsHelpFlag{ ""/?"" };
    static constexpr std::wstring_view PlaceholderExeName{ L""wt.exe"" };

    AppCommandlineArgs();
    ~AppCommandlineArgs() = default;

    int ParseCommand(const Commandline& command);
    int ParseArgs(winrt::array_view<const winrt::hstring>& args);

    static std::vector<Commandline> BuildCommands(const std::vector<const wchar_t*>& args);
    static std::vector<Commandline> BuildCommands(winrt::array_view<const winrt::hstring>& args);

    void ValidateStartupCommands();
    std::vector<winrt::Microsoft::Terminal::Settings::Model::ActionAndArgs>& GetStartupActions();
    bool IsHandoffListener() const noexcept;
    const std::string& GetExitMessage();
    bool ShouldExitEarly() const noexcept;

    std::optional<uint32_t> GetPersistedLayoutIdx() const noexcept;
    std::optional<winrt::Microsoft::Terminal...",1,cascadia\TerminalApp\AppCommandlineArgs.hpp,AppCommandlineArgs,,false,20,AppCommandlineArgs,2
73257,TYPE_DECL,,,,"struct NewTerminalSubcommand
    {
        CLI::App* subcommand;
        CLI::Option* commandlineOption;
        CLI::Option* profileNameOption;
        CLI::Option* startingDirectoryOption;
        CLI::Option* titleOption;
        CLI::Option* tabColorOption;
        CLI::Option* suppressApplicationTitleOption;
        CLI::Option* colorSchemeOption;
        CLI::Option* appendCommandLineOption;
        CLI::Option* inheritEnvOption;
    }",5,cascadia\TerminalApp\AppCommandlineArgs.hpp,AppCommandlineArgs.NewTerminalSubcommand,,false,60,NewTerminalSubcommand,23
73268,TYPE_DECL,,,,"struct NewPaneSubcommand : public NewTerminalSubcommand
    {
        CLI::Option* _horizontalOption;
        CLI::Option* _verticalOption;
        CLI::Option* _duplicateOption;
    }",5,cascadia\TerminalApp\AppCommandlineArgs.hpp,AppCommandlineArgs.NewPaneSubcommand,NewTerminalSubcommand,false,74,NewPaneSubcommand,24
73377,TYPE_DECL,,,,friend class TerminalAppLocalTests::CommandlineTest,5,cascadia\TerminalApp\AppCommandlineArgs.hpp,AppCommandlineArgs.CommandlineTest,,false,156,CommandlineTest,82
73525,TYPE_DECL,,cascadia\TerminalApp\AppKeyBindings.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\AppKeyBindings.cpp,cascadia\TerminalApp\AppKeyBindings.cpp:<global>,,false,1,<global>,4
73592,TYPE_DECL,,cascadia\TerminalApp\AppKeyBindings.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\AppKeyBindings.hpp,cascadia\TerminalApp\AppKeyBindings.hpp:<global>,,false,1,<global>,3
73596,TYPE_DECL,,,,class SettingsTests,5,cascadia\TerminalApp\AppKeyBindings.hpp,TerminalAppLocalTests.SettingsTests,,false,12,SettingsTests,1
73600,TYPE_DECL,,,,"struct AppKeyBindings : AppKeyBindingsT<AppKeyBindings>
    {
        AppKeyBindings() = default;

        bool TryKeyChord(const winrt::Microsoft::Terminal::Control::KeyChord& kc);
        bool IsKeyChordExplicitlyUnbound(const winrt::Microsoft::Terminal::Control::KeyChord& kc);

        void SetDispatch(const winrt::TerminalApp::ShortcutActionDispatch& dispatch);
        void SetActionMap(const Microsoft::Terminal::Settings::Model::IActionMapView& actionMap);

    private:
        winrt::Microsoft::Terminal::Settings::Model::IActionMapView _actionMap{ nullptr };

        winrt::TerminalApp::ShortcutActionDispatch _dispatch{ nullptr };

        friend class TerminalAppLocalTests::SettingsTests;
    }",5,cascadia\TerminalApp\AppKeyBindings.hpp,winrt.TerminalApp.implementation.AppKeyBindings,AppKeyBindingsT<AppKeyBindings>,false,17,AppKeyBindings,1
73627,TYPE_DECL,,,,friend class TerminalAppLocalTests::SettingsTests,9,cascadia\TerminalApp\AppKeyBindings.hpp,winrt.TerminalApp.implementation.AppKeyBindings.SettingsTests,,false,32,SettingsTests,8
73665,TYPE_DECL,,cascadia\TerminalApp\AppLogic.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\AppLogic.cpp,cascadia\TerminalApp\AppLogic.cpp:<global>,,false,1,<global>,11
73777,TYPE_DECL,ANY,,,using IInspectable = Windows::Foundation::IInspectable;,5,cascadia\TerminalApp\AppLogic.cpp,IInspectable,,false,31,IInspectable,2
74967,TYPE_DECL,,cascadia\TerminalApp\AppLogic.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\AppLogic.hpp,cascadia\TerminalApp\AppLogic.hpp:<global>,,false,1,<global>,10
74973,TYPE_DECL,,,,"struct FindTargetWindowResult : FindTargetWindowResultT<FindTargetWindowResult>
    {
        WINRT_PROPERTY(int32_t, WindowId, -1);
        WINRT_PROPERTY(winrt::hstring, WindowName, L"""");

    public:
        FindTargetWindowResult(const int32_t id, const winrt::hstring& name) :
            _WindowId{ id }, _WindowName{ name } {};

        FindTargetWindowResult(const int32_t id) :
            FindTargetWindowResult(id, L""""){};
    }",5,cascadia\TerminalApp\AppLogic.hpp,winrt.TerminalApp.implementation.FindTargetWindowResult,FindTargetWindowResultT<FindTargetWindowResult>,false,28,FindTargetWindowResult,1
74987,TYPE_DECL,,,,"struct AppLogic : AppLogicT<AppLogic>
    {
    public:
        static AppLogic* Current() noexcept;
        static const Microsoft::Terminal::Settings::Model::CascadiaSettings CurrentAppSettings();

        AppLogic();

        void Create();
        bool IsRunningElevated() const noexcept;
        bool CanDragDrop() const noexcept;
        void ReloadSettings();
        void NotifyRootInitialized();

        bool HasSettingsStartupActions() const noexcept;

        bool ShouldUsePersistedLayout() const;
        void SaveWindowLayoutJsons(const Windows::Foundation::Collections::IVector<hstring>& layouts);

        [[nodiscard]] Microsoft::Terminal::Settings::Model::CascadiaSettings GetSettings() const noexcept;

        TerminalApp::FindTargetWindowResult FindTargetWindow(array_view<const winrt::hstring> actions);

        Windows::Foundation::Collections::IMapView<Microsoft::Terminal::Control::KeyChord, Microsoft::Terminal::Settings::Model::Command> GlobalHotkeys();

        Micro...",5,cascadia\TerminalApp\AppLogic.hpp,winrt.TerminalApp.implementation.AppLogic,AppLogicT<AppLogic>,false,41,AppLogic,2
75121,TYPE_DECL,,,,friend class TerminalAppLocalTests::CommandlineTest,9,cascadia\TerminalApp\AppLogic.hpp,winrt.TerminalApp.implementation.AppLogic.CommandlineTest,,false,117,CommandlineTest,45
75170,TYPE_DECL,,cascadia\TerminalApp\ColorHelper.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\ColorHelper.cpp,cascadia\TerminalApp\ColorHelper.cpp:<global>,,false,1,<global>,2
76084,TYPE_DECL,,cascadia\TerminalApp\ColorHelper.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\ColorHelper.hpp,cascadia\TerminalApp\ColorHelper.hpp:<global>,,false,1,<global>,2
76089,TYPE_DECL,,,,"class HSL
    {
    public:
        float H;
        float S;
        float L;
    }",5,cascadia\TerminalApp\ColorHelper.hpp,winrt.TerminalApp.HSL,,false,7,HSL,1
76093,TYPE_DECL,,,,"class ColorHelper
    {
    public:
        static bool IsBrightColor(const Windows::UI::Color& color);
        static HSL RgbToHsl(const Windows::UI::Color& color);
        static Windows::UI::Color HslToRgb(const HSL& color);
        static Windows::UI::Color Lighten(const Windows::UI::Color& color, float amount = 10.f);
        static Windows::UI::Color Darken(const Windows::UI::Color& color, float amount = 10.f);
        static Windows::UI::Color GetAccentColor(const Windows::UI::Color& color);
        static float GetLuminance(const Windows::UI::Color& color);
        static float GetReadability(const Windows::UI::Color& first, const Windows::UI::Color& second);
        static float GetReadability(const HSL& first, const HSL& second);

    private:
        static float HueToRgb(float p, float q, float t);
    }",5,cascadia\TerminalApp\ColorHelper.hpp,winrt.TerminalApp.ColorHelper,,false,15,ColorHelper,2
76160,TYPE_DECL,,cascadia\TerminalApp\ColorPickupFlyout.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\ColorPickupFlyout.cpp,cascadia\TerminalApp\ColorPickupFlyout.cpp:<global>,,false,1,<global>,5
76331,TYPE_DECL,,cascadia\TerminalApp\ColorPickupFlyout.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\ColorPickupFlyout.hpp,cascadia\TerminalApp\ColorPickupFlyout.hpp:<global>,,false,1,<global>,2
76337,TYPE_DECL,,,,"struct ColorPickupFlyout : ColorPickupFlyoutT<ColorPickupFlyout>
    {
        ColorPickupFlyout();

        void ColorButton_Click(const Windows::Foundation::IInspectable& sender, const Windows::UI::Xaml::RoutedEventArgs& args);
        void ShowColorPickerButton_Click(const Windows::Foundation::IInspectable& sender, const Windows::UI::Xaml::RoutedEventArgs& args);
        void CustomColorButton_Click(const Windows::Foundation::IInspectable& sender, const Windows::UI::Xaml::RoutedEventArgs& args);
        void ClearColorButton_Click(const Windows::Foundation::IInspectable& sender, const Windows::UI::Xaml::RoutedEventArgs& args);
        void ColorPicker_ColorChanged(const Microsoft::UI::Xaml::Controls::ColorPicker&, const Microsoft::UI::Xaml::Controls::ColorChangedEventArgs& args);

        WINRT_CALLBACK(ColorCleared, TerminalApp::ColorClearedArgs);
        WINRT_CALLBACK(ColorSelected, TerminalApp::ColorSelectedArgs);
    }",5,cascadia\TerminalApp\ColorPickupFlyout.hpp,winrt.TerminalApp.implementation.ColorPickupFlyout,ColorPickupFlyoutT<ColorPickupFlyout>,false,6,ColorPickupFlyout,1
76388,TYPE_DECL,,cascadia\TerminalApp\CommandLinePaletteItem.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\CommandLinePaletteItem.cpp,cascadia\TerminalApp\CommandLinePaletteItem.cpp:<global>,,false,1,<global>,5
76407,TYPE_DECL,,cascadia\TerminalApp\CommandLinePaletteItem.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\CommandLinePaletteItem.hpp,cascadia\TerminalApp\CommandLinePaletteItem.hpp:<global>,,false,1,<global>,3
76413,TYPE_DECL,,,,"struct CommandLinePaletteItem : CommandLinePaletteItemT<CommandLinePaletteItem, PaletteItem>
    {
        CommandLinePaletteItem() = default;
        CommandLinePaletteItem(const winrt::hstring& commandLine);

        WINRT_PROPERTY(winrt::hstring, CommandLine);
    }",5,cascadia\TerminalApp\CommandLinePaletteItem.hpp,winrt.TerminalApp.implementation.CommandLinePaletteItem,"CommandLinePaletteItemT<CommandLinePaletteItem, PaletteItem>",false,11,CommandLinePaletteItem,1
76512,TYPE_DECL,,cascadia\TerminalApp\CommandPalette.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\CommandPalette.cpp,cascadia\TerminalApp\CommandPalette.cpp:<global>,,false,1,<global>,8
79804,TYPE_DECL,,cascadia\TerminalApp\CommandPalette.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\CommandPalette.hpp,cascadia\TerminalApp\CommandPalette.hpp:<global>,,false,1,<global>,5
79808,TYPE_DECL,,,,class TabTests,5,cascadia\TerminalApp\CommandPalette.hpp,TerminalAppLocalTests.TabTests,,false,15,TabTests,1
79812,TYPE_DECL,,,,"enum class CommandPaletteMode
    {
        ActionMode = 0,
        TabSearchMode,
        TabSwitchMode,
        CommandlineMode
    }",5,cascadia\TerminalApp\CommandPalette.hpp,winrt.TerminalApp.implementation.CommandPaletteMode,,false,20,CommandPaletteMode,1
79824,TYPE_DECL,,,,"struct CommandPalette : CommandPaletteT<CommandPalette>
    {
        CommandPalette();

        Windows::Foundation::Collections::IObservableVector<winrt::TerminalApp::FilteredCommand> FilteredActions();

        void SetCommands(const Windows::Foundation::Collections::IVector<Microsoft::Terminal::Settings::Model::Command>& actions);
        void SetTabs(const Windows::Foundation::Collections::IObservableVector<winrt::TerminalApp::TabBase>& tabs, const Windows::Foundation::Collections::IObservableVector<winrt::TerminalApp::TabBase>& mruTabs);
        void SetActionMap(const Microsoft::Terminal::Settings::Model::IActionMapView& actionMap);

        bool OnDirectKeyEvent(const uint32_t vkey, const uint8_t scanCode, const bool down);

        void SelectNextItem(const bool moveDown);

        void ScrollPageUp();
        void ScrollPageDown();
        void ScrollToTop();
        void ScrollToBottom();

        void EnableCommandPaletteMode(Microsoft::Terminal::Settings::Model::Command...",5,cascadia\TerminalApp\CommandPalette.hpp,winrt.TerminalApp.implementation.CommandPalette,CommandPaletteT<CommandPalette>,false,28,CommandPalette,2
79903,TYPE_DECL,,,,"struct winrt_object_hash
        {
            size_t operator()(const auto& value) const noexcept
            {
                return til::hash(winrt::get_abi(value));
            }
        }",9,cascadia\TerminalApp\CommandPalette.hpp,winrt.TerminalApp.implementation.CommandPalette.winrt_object_hash,,false,65,winrt_object_hash,26
79919,TYPE_DECL,,,,friend struct CommandPaletteT<CommandPalette>,9,cascadia\TerminalApp\CommandPalette.hpp,winrt.TerminalApp.implementation.CommandPalette.CommandPaletteT<CommandPalette>,,false,73,CommandPaletteT<CommandPalette>,27
80099,TYPE_DECL,,,,friend class TerminalAppLocalTests::TabTests,9,cascadia\TerminalApp\CommandPalette.hpp,winrt.TerminalApp.implementation.CommandPalette.TabTests,,false,157,TabTests,77
80153,TYPE_DECL,,cascadia\TerminalApp\Commandline.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\Commandline.cpp,cascadia\TerminalApp\Commandline.cpp:<global>,,false,1,<global>,3
80233,TYPE_DECL,,cascadia\TerminalApp\Commandline.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\Commandline.hpp,cascadia\TerminalApp\Commandline.hpp:<global>,,false,1,<global>,1
80237,TYPE_DECL,,,,class CommandlineTest,5,cascadia\TerminalApp\Commandline.hpp,TerminalAppLocalTests.CommandlineTest,,false,24,CommandlineTest,1
80239,TYPE_DECL,,,,class Commandline,5,cascadia\TerminalApp\Commandline.hpp,TerminalApp.Commandline,,false,28,Commandline,1
80240,TYPE_DECL,,,,"class TerminalApp::Commandline
{
public:
    static constexpr std::wstring_view Delimiter{ L"";"" };
    static constexpr std::wstring_view EscapedDelimiter{ L""\\;"" };

    void AddArg(const std::wstring& nextArg);

    size_t Argc() const;
    const std::vector<std::string>& Args() const;

private:
    std::vector<std::string> _args;

    friend class TerminalAppLocalTests::CommandlineTest;
}",1,cascadia\TerminalApp\Commandline.hpp,Commandline,,false,31,Commandline,3
80257,TYPE_DECL,,,,friend class TerminalAppLocalTests::CommandlineTest,5,cascadia\TerminalApp\Commandline.hpp,Commandline.CommandlineTest,,false,45,CommandlineTest,7
80282,TYPE_DECL,,cascadia\TerminalApp\ContentManager.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\ContentManager.cpp,cascadia\TerminalApp\ContentManager.cpp:<global>,,false,1,<global>,6
80412,TYPE_DECL,,cascadia\TerminalApp\ContentManager.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\ContentManager.hpp,cascadia\TerminalApp\ContentManager.hpp:<global>,,false,1,<global>,3
80418,TYPE_DECL,,,,"struct ContentManager : ContentManagerT<ContentManager>
    {
    public:
        ContentManager() = default;
        Microsoft::Terminal::Control::ControlInteractivity CreateCore(const Microsoft::Terminal::Control::IControlSettings& settings,
                                                                      const Microsoft::Terminal::Control::IControlAppearance& unfocusedAppearance,
                                                                      const Microsoft::Terminal::TerminalConnection::ITerminalConnection& connection);
        Microsoft::Terminal::Control::ControlInteractivity TryLookupCore(uint64_t id);

        void Detach(const Microsoft::Terminal::Control::TermControl& control);

    private:
        std::unordered_map<uint64_t, Microsoft::Terminal::Control::ControlInteractivity> _content;

        void _closedHandler(const winrt::Windows::Foundation::IInspectable& sender,
                            const winrt::Windows::Foundation::IInspectable& e);
    }",5,cascadia\TerminalApp\ContentManager.hpp,winrt.TerminalApp.implementation.ContentManager,ContentManagerT<ContentManager>,false,32,ContentManager,1
80459,TYPE_DECL,,cascadia\TerminalApp\DebugTapConnection.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\DebugTapConnection.cpp,cascadia\TerminalApp\DebugTapConnection.cpp:<global>,,false,1,<global>,3
80471,TYPE_DECL,,,,"class DebugInputTapConnection : public winrt::implements<DebugInputTapConnection, ITerminalConnection>
    {
    public:
        DebugInputTapConnection(winrt::com_ptr<DebugTapConnection> pairedTap, ITerminalConnection wrappedConnection) :
            _pairedTap{ pairedTap },
            _wrappedConnection{ std::move(wrappedConnection) }
        {
        }
        void Initialize(const Windows::Foundation::Collections::ValueSet& /*settings*/) {}
        ~DebugInputTapConnection() = default;
        winrt::fire_and_forget Start()
        {
            // GH#11282: It's possible that we're about to be started, _before_
            // our paired connection is started. Both will get Start()'ed when
            // their owning TermControl is finally laid out. However, if we're
            // started first, then we'll immediately start printing to the other
            // control as well, which might not have initialized yet. If we do
            // that, we'll explode.
            //
  ...",5,cascadia\TerminalApp\DebugTapConnection.cpp,winrt.Microsoft.TerminalApp.implementation.DebugInputTapConnection,"winrt.implements<DebugInputTapConnection, ITerminalConnection>",false,14,DebugInputTapConnection,1
80859,TYPE_DECL,,cascadia\TerminalApp\DebugTapConnection.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\DebugTapConnection.hpp,cascadia\TerminalApp\DebugTapConnection.hpp:<global>,,false,1,<global>,3
80866,TYPE_DECL,,,,class DebugInputTapConnection,5,cascadia\TerminalApp\DebugTapConnection.hpp,winrt.Microsoft.TerminalApp.implementation.DebugInputTapConnection,,false,11,DebugInputTapConnection,1
80867,TYPE_DECL,,,,"class DebugTapConnection : public winrt::implements<DebugTapConnection, winrt::Microsoft::Terminal::TerminalConnection::ITerminalConnection>
    {
    public:
        explicit DebugTapConnection(Microsoft::Terminal::TerminalConnection::ITerminalConnection wrappedConnection);
        void Initialize(const Windows::Foundation::Collections::ValueSet& /*settings*/){};
        ~DebugTapConnection();
        void Start();
        void WriteInput(const hstring& data);
        void Resize(uint32_t rows, uint32_t columns);
        void Close();
        winrt::Microsoft::Terminal::TerminalConnection::ConnectionState State() const noexcept;

        void SetInputTap(const Microsoft::Terminal::TerminalConnection::ITerminalConnection& inputTap);

        WINRT_CALLBACK(TerminalOutput, winrt::Microsoft::Terminal::TerminalConnection::TerminalOutputHandler);

        TYPED_EVENT(StateChanged, winrt::Microsoft::Terminal::TerminalConnection::ITerminalConnection, winrt::Windows::Foundation::IInspectab...",5,cascadia\TerminalApp\DebugTapConnection.hpp,winrt.Microsoft.TerminalApp.implementation.DebugTapConnection,"winrt.implements<DebugTapConnection, winrt.Microsoft.Terminal.TerminalConnection.ITerminalConnection>",false,12,DebugTapConnection,2
80927,TYPE_DECL,,,,friend class DebugInputTapConnection,9,cascadia\TerminalApp\DebugTapConnection.hpp,winrt.Microsoft.TerminalApp.implementation.DebugTapConnection.DebugInputTapConnection,,false,41,DebugInputTapConnection,19
80949,TYPE_DECL,,cascadia\TerminalApp\EmptyStringVisibilityConverter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\EmptyStringVisibilityConverter.cpp,cascadia\TerminalApp\EmptyStringVisibilityConverter.cpp:<global>,,false,1,<global>,4
81006,TYPE_DECL,,cascadia\TerminalApp\EmptyStringVisibilityConverter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\EmptyStringVisibilityConverter.hpp,cascadia\TerminalApp\EmptyStringVisibilityConverter.hpp:<global>,,false,1,<global>,2
81012,TYPE_DECL,,,,"struct EmptyStringVisibilityConverter : EmptyStringVisibilityConverterT<EmptyStringVisibilityConverter>
    {
        EmptyStringVisibilityConverter() = default;

        Windows::Foundation::IInspectable Convert(const Windows::Foundation::IInspectable& value,
                                                  const Windows::UI::Xaml::Interop::TypeName& targetType,
                                                  const Windows::Foundation::IInspectable& parameter,
                                                  const hstring& language);

        Windows::Foundation::IInspectable ConvertBack(const Windows::Foundation::IInspectable& value,
                                                      const Windows::UI::Xaml::Interop::TypeName& targetType,
                                                      const Windows::Foundation::IInspectable& parameter,
                                                      const hstring& language);
    }",5,cascadia\TerminalApp\EmptyStringVisibilityConverter.hpp,winrt.TerminalApp.implementation.EmptyStringVisibilityConverter,EmptyStringVisibilityConverterT<EmptyStringVisibilityConverter>,false,7,EmptyStringVisibilityConverter,1
81079,TYPE_DECL,,cascadia\TerminalApp\FilteredCommand.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\FilteredCommand.cpp,cascadia\TerminalApp\FilteredCommand.cpp:<global>,,false,1,<global>,6
81529,TYPE_DECL,,cascadia\TerminalApp\FilteredCommand.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\FilteredCommand.hpp,cascadia\TerminalApp\FilteredCommand.hpp:<global>,,false,1,<global>,3
81533,TYPE_DECL,,,,class FilteredCommandTests,5,cascadia\TerminalApp\FilteredCommand.hpp,TerminalAppLocalTests.FilteredCommandTests,,false,12,FilteredCommandTests,1
81537,TYPE_DECL,,,,"struct FilteredCommand : FilteredCommandT<FilteredCommand>
    {
        FilteredCommand() = default;
        FilteredCommand(const winrt::TerminalApp::PaletteItem& item);

        void UpdateFilter(const winrt::hstring& filter);

        static int Compare(const winrt::TerminalApp::FilteredCommand& first, const winrt::TerminalApp::FilteredCommand& second);

        WINRT_CALLBACK(PropertyChanged, Windows::UI::Xaml::Data::PropertyChangedEventHandler);
        WINRT_OBSERVABLE_PROPERTY(winrt::TerminalApp::PaletteItem, Item, _PropertyChangedHandlers, nullptr);
        WINRT_OBSERVABLE_PROPERTY(winrt::hstring, Filter, _PropertyChangedHandlers);
        WINRT_OBSERVABLE_PROPERTY(winrt::TerminalApp::HighlightedText, HighlightedName, _PropertyChangedHandlers);
        WINRT_OBSERVABLE_PROPERTY(int, Weight, _PropertyChangedHandlers);

    private:
        winrt::TerminalApp::HighlightedText _computeHighlightedName();
        int _computeWeight();
        Windows::UI::Xaml::Data::INotifyPro...",5,cascadia\TerminalApp\FilteredCommand.hpp,winrt.TerminalApp.implementation.FilteredCommand,FilteredCommandT<FilteredCommand>,false,17,FilteredCommand,1
81572,TYPE_DECL,,,,friend class TerminalAppLocalTests::FilteredCommandTests,9,cascadia\TerminalApp\FilteredCommand.hpp,winrt.TerminalApp.implementation.FilteredCommand.FilteredCommandTests,,false,37,FilteredCommandTests,13
81587,TYPE_DECL,,cascadia\TerminalApp\HighlightedText.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\HighlightedText.cpp,cascadia\TerminalApp\HighlightedText.cpp:<global>,,false,1,<global>,5
81610,TYPE_DECL,,cascadia\TerminalApp\HighlightedText.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\HighlightedText.hpp,cascadia\TerminalApp\HighlightedText.hpp:<global>,,false,1,<global>,3
81616,TYPE_DECL,,,,"struct HighlightedTextSegment : HighlightedTextSegmentT<HighlightedTextSegment>
    {
        HighlightedTextSegment() = default;
        HighlightedTextSegment(const winrt::hstring& text, bool isHighlighted);

        WINRT_CALLBACK(PropertyChanged, Windows::UI::Xaml::Data::PropertyChangedEventHandler);
        WINRT_OBSERVABLE_PROPERTY(winrt::hstring, TextSegment, _PropertyChangedHandlers);
        WINRT_OBSERVABLE_PROPERTY(bool, IsHighlighted, _PropertyChangedHandlers);
    }",5,cascadia\TerminalApp\HighlightedText.hpp,winrt.TerminalApp.implementation.HighlightedTextSegment,HighlightedTextSegmentT<HighlightedTextSegment>,false,11,HighlightedTextSegment,1
81630,TYPE_DECL,,,,"struct HighlightedText : HighlightedTextT<HighlightedText>
    {
        HighlightedText() = default;
        HighlightedText(const Windows::Foundation::Collections::IObservableVector<winrt::TerminalApp::HighlightedTextSegment>& segments);

        WINRT_CALLBACK(PropertyChanged, Windows::UI::Xaml::Data::PropertyChangedEventHandler);
        WINRT_OBSERVABLE_PROPERTY(Windows::Foundation::Collections::IObservableVector<winrt::TerminalApp::HighlightedTextSegment>, Segments, _PropertyChangedHandlers);
    }",5,cascadia\TerminalApp\HighlightedText.hpp,winrt.TerminalApp.implementation.HighlightedText,HighlightedTextT<HighlightedText>,false,21,HighlightedText,2
81657,TYPE_DECL,,cascadia\TerminalApp\HighlightedTextControl.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\HighlightedTextControl.cpp,cascadia\TerminalApp\HighlightedTextControl.cpp:<global>,,false,1,<global>,5
81820,TYPE_DECL,,cascadia\TerminalApp\HighlightedTextControl.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\HighlightedTextControl.hpp,cascadia\TerminalApp\HighlightedTextControl.hpp:<global>,,false,1,<global>,3
81826,TYPE_DECL,,,,"struct HighlightedTextControl : HighlightedTextControlT<HighlightedTextControl>
    {
        HighlightedTextControl();

        static Windows::UI::Xaml::DependencyProperty TextProperty();

        winrt::TerminalApp::HighlightedText Text();
        void Text(const winrt::TerminalApp::HighlightedText& value);

        Windows::UI::Xaml::Controls::TextBlock TextView();

    private:
        static Windows::UI::Xaml::DependencyProperty _textProperty;
        static void _onTextChanged(const Windows::UI::Xaml::DependencyObject& o, const Windows::UI::Xaml::DependencyPropertyChangedEventArgs& e);
    }",5,cascadia\TerminalApp\HighlightedTextControl.hpp,winrt.TerminalApp.implementation.HighlightedTextControl,HighlightedTextControlT<HighlightedTextControl>,false,12,HighlightedTextControl,1
81871,TYPE_DECL,,cascadia\TerminalApp\Jumplist.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\Jumplist.cpp,cascadia\TerminalApp\Jumplist.cpp:<global>,,false,1,<global>,6
82243,TYPE_DECL,,cascadia\TerminalApp\Jumplist.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\Jumplist.hpp,cascadia\TerminalApp\Jumplist.hpp:<global>,,false,1,<global>,1
82246,TYPE_DECL,,,,struct IObjectCollection,1,cascadia\TerminalApp\Jumplist.hpp,IObjectCollection,,false,15,IObjectCollection,1
82247,TYPE_DECL,,,,struct IShellLinkW,1,cascadia\TerminalApp\Jumplist.hpp,IShellLinkW,,false,16,IShellLinkW,2
82248,TYPE_DECL,,,,"class Jumplist
{
public:
    static winrt::fire_and_forget UpdateJumplist(const winrt::Microsoft::Terminal::Settings::Model::CascadiaSettings& settings) noexcept;

private:
    static void _updateProfiles(IObjectCollection* jumplistItems, winrt::Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Terminal::Settings::Model::Profile> profiles);
    static winrt::com_ptr<IShellLinkW> _createShellLink(const std::wstring_view name, const std::wstring_view path, const std::wstring_view args);
}",1,cascadia\TerminalApp\Jumplist.hpp,Jumplist,,false,18,Jumplist,3
82273,TYPE_DECL,,cascadia\TerminalApp\LanguageProfileNotifier.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\LanguageProfileNotifier.cpp,cascadia\TerminalApp\LanguageProfileNotifier.cpp:<global>,,false,1,<global>,3
82354,TYPE_DECL,,cascadia\TerminalApp\LanguageProfileNotifier.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\LanguageProfileNotifier.hpp,cascadia\TerminalApp\LanguageProfileNotifier.hpp:<global>,,false,1,<global>,1
82360,TYPE_DECL,,,,"class LanguageProfileNotifier : public winrt::implements<LanguageProfileNotifier, ITfInputProcessorProfileActivationSink>
    {
    public:
        explicit LanguageProfileNotifier(std::function<void()>&& callback);
        ~LanguageProfileNotifier();
        STDMETHODIMP OnActivated(DWORD dwProfileType, LANGID langid, REFCLSID clsid, REFGUID catid, REFGUID guidProfile, HKL hkl, DWORD dwFlags);

    private:
        std::function<void()> _callback;
        wil::com_ptr<ITfSource> _source;
        DWORD _cookie = TF_INVALID_COOKIE;
        HKL _currentKeyboardLayout;
    }",5,cascadia\TerminalApp\LanguageProfileNotifier.hpp,winrt.TerminalApp.implementation.LanguageProfileNotifier,"winrt.implements<LanguageProfileNotifier, ITfInputProcessorProfileActivationSink>",false,8,LanguageProfileNotifier,1
82432,TYPE_DECL,,cascadia\TerminalApp\MinMaxCloseControl.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\MinMaxCloseControl.cpp,cascadia\TerminalApp\MinMaxCloseControl.cpp:<global>,,false,1,<global>,5
83011,TYPE_DECL,,cascadia\TerminalApp\MinMaxCloseControl.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\MinMaxCloseControl.hpp,cascadia\TerminalApp\MinMaxCloseControl.hpp:<global>,,false,1,<global>,3
83017,TYPE_DECL,,,,"struct MinMaxCloseControl : MinMaxCloseControlT<MinMaxCloseControl>
    {
        MinMaxCloseControl();

        void SetWindowVisualState(WindowVisualState visualState);

        void HoverButton(CaptionButton button);
        void PressButton(CaptionButton button);
        void ReleaseButtons();

        void _MinimizeClick(const winrt::Windows::Foundation::IInspectable& sender,
                            const winrt::Windows::UI::Xaml::RoutedEventArgs& e);
        void _MaximizeClick(const winrt::Windows::Foundation::IInspectable& sender,
                            const winrt::Windows::UI::Xaml::RoutedEventArgs& e);
        void _CloseClick(const winrt::Windows::Foundation::IInspectable& sender,
                         const winrt::Windows::UI::Xaml::RoutedEventArgs& e);

        TYPED_EVENT(MinimizeClick, TerminalApp::MinMaxCloseControl, winrt::Windows::UI::Xaml::RoutedEventArgs);
        TYPED_EVENT(MaximizeClick, TerminalApp::MinMaxCloseControl, winrt::Windows::UI::Xaml::R...",5,cascadia\TerminalApp\MinMaxCloseControl.hpp,winrt.TerminalApp.implementation.MinMaxCloseControl,MinMaxCloseControlT<MinMaxCloseControl>,false,14,MinMaxCloseControl,1
83092,TYPE_DECL,,cascadia\TerminalApp\PaletteItem.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\PaletteItem.cpp,cascadia\TerminalApp\PaletteItem.cpp:<global>,,false,1,<global>,5
83126,TYPE_DECL,,cascadia\TerminalApp\PaletteItem.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\PaletteItem.hpp,cascadia\TerminalApp\PaletteItem.hpp:<global>,,false,1,<global>,2
83132,TYPE_DECL,,,,"struct PaletteItem : PaletteItemT<PaletteItem>
    {
    public:
        Windows::UI::Xaml::Controls::IconElement ResolvedIcon();

        WINRT_CALLBACK(PropertyChanged, Windows::UI::Xaml::Data::PropertyChangedEventHandler);

        WINRT_OBSERVABLE_PROPERTY(winrt::hstring, Name, _PropertyChangedHandlers);
        WINRT_OBSERVABLE_PROPERTY(winrt::hstring, Icon, _PropertyChangedHandlers);
        WINRT_OBSERVABLE_PROPERTY(winrt::hstring, KeyChordText, _PropertyChangedHandlers);
    }",5,cascadia\TerminalApp\PaletteItem.hpp,winrt.TerminalApp.implementation.PaletteItem,PaletteItemT<PaletteItem>,false,9,PaletteItem,1
83151,TYPE_DECL,,cascadia\TerminalApp\PaletteItemTemplateSelector.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\PaletteItemTemplateSelector.cpp,cascadia\TerminalApp\PaletteItemTemplateSelector.cpp:<global>,,false,1,<global>,5
83226,TYPE_DECL,,cascadia\TerminalApp\PaletteItemTemplateSelector.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\PaletteItemTemplateSelector.hpp,cascadia\TerminalApp\PaletteItemTemplateSelector.hpp:<global>,,false,1,<global>,2
83232,TYPE_DECL,,,,"struct PaletteItemTemplateSelector : PaletteItemTemplateSelectorT<PaletteItemTemplateSelector>
    {
        PaletteItemTemplateSelector() = default;

        Windows::UI::Xaml::DataTemplate SelectTemplateCore(const winrt::Windows::Foundation::IInspectable&, const winrt::Windows::UI::Xaml::DependencyObject&);
        Windows::UI::Xaml::DataTemplate SelectTemplateCore(const winrt::Windows::Foundation::IInspectable&);

        WINRT_PROPERTY(winrt::Windows::UI::Xaml::DataTemplate, TabItemTemplate);
        WINRT_PROPERTY(winrt::Windows::UI::Xaml::DataTemplate, NestedItemTemplate);
        WINRT_PROPERTY(winrt::Windows::UI::Xaml::DataTemplate, GeneralItemTemplate);
    }",5,cascadia\TerminalApp\PaletteItemTemplateSelector.hpp,winrt.TerminalApp.implementation.PaletteItemTemplateSelector,PaletteItemTemplateSelectorT<PaletteItemTemplateSelector>,false,10,PaletteItemTemplateSelector,1
83261,TYPE_DECL,,cascadia\TerminalApp\Pane.LayoutSizeNode.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\Pane.LayoutSizeNode.cpp,cascadia\TerminalApp\Pane.LayoutSizeNode.cpp:<global>,,false,1,<global>,3
83374,TYPE_DECL,,cascadia\TerminalApp\Pane.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\Pane.cpp,cascadia\TerminalApp\Pane.cpp:<global>,,false,1,<global>,6
90242,TYPE_DECL,,,,"class Pane : public std::enable_shared_from_this<Pane>
{
public:
    Pane(const winrt::Microsoft::Terminal::Settings::Model::Profile& profile,
         const winrt::Microsoft::Terminal::Control::TermControl& control,
         const bool lastFocused = false);

    Pane(std::shared_ptr<Pane> first,
         std::shared_ptr<Pane> second,
         const SplitState splitType,
         const float splitPosition,
         const bool lastFocused = false);

    std::shared_ptr<Pane> GetActivePane();
    winrt::Microsoft::Terminal::Control::TermControl GetLastFocusedTerminalControl();
    winrt::Microsoft::Terminal::Control::TermControl GetTerminalControl();
    winrt::Microsoft::Terminal::Settings::Model::Profile GetFocusedProfile();
    bool IsConnectionClosed() const;

    // Method Description:
    // - If this is a leaf pane, return its profile.
    // - If this is a branch/root pane, return nullptr.
    winrt::Microsoft::Terminal::Settings::Model::Profile GetProfile() const
    {
      ...",1,cascadia\TerminalApp\Pane.hpp,Pane,std.enable_shared_from_this<Pane>,false,61,Pane,7
90246,TYPE_DECL,,cascadia\TerminalApp\Pane.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\Pane.hpp,cascadia\TerminalApp\Pane.hpp:<global>,,false,1,<global>,2
90250,TYPE_DECL,,,,class TabTests,5,cascadia\TerminalApp\Pane.hpp,TerminalAppLocalTests.TabTests,,false,28,TabTests,1
90254,TYPE_DECL,,,,struct TerminalTab,5,cascadia\TerminalApp\Pane.hpp,winrt.TerminalApp.implementation.TerminalTab,,false,33,TerminalTab,1
90255,TYPE_DECL,,,,"enum class Borders : int
{
    None = 0x0,
    Top = 0x1,
    Bottom = 0x2,
    Left = 0x4,
    Right = 0x8,
    All = 0xF
}",1,cascadia\TerminalApp\Pane.hpp,Borders,,false,36,Borders,3
90285,TYPE_DECL,,,,"enum class SplitState : int
{
    None = 0,
    Horizontal = 1,
    Vertical = 2
}",1,cascadia\TerminalApp\Pane.hpp,SplitState,,false,47,SplitState,5
90302,TYPE_DECL,,,,"struct PaneResources
{
    winrt::Windows::UI::Xaml::Media::SolidColorBrush focusedBorderBrush{ nullptr };
    winrt::Windows::UI::Xaml::Media::SolidColorBrush unfocusedBorderBrush{ nullptr };
    winrt::Windows::UI::Xaml::Media::SolidColorBrush broadcastBorderBrush{ nullptr };
}",1,cascadia\TerminalApp\Pane.hpp,PaneResources,,false,54,PaneResources,6
90384,TYPE_DECL,,,,"struct BuildStartupState
    {
        std::vector<winrt::Microsoft::Terminal::Settings::Model::ActionAndArgs> args;
        std::shared_ptr<Pane> firstPane;
        std::optional<uint32_t> focusedPaneId;
        uint32_t panesCreated;
    }",5,cascadia\TerminalApp\Pane.hpp,Pane.BuildStartupState,,false,95,BuildStartupState,14
90562,TYPE_DECL,ANY,,,"using R = std::invoke_result_t<F, std::shared_ptr<Pane>>;",9,cascadia\TerminalApp\Pane.hpp,R,,false,167,R,1
90643,TYPE_DECL,ANY,,,"using gotFocusArgs = winrt::delegate<std::shared_ptr<Pane>, winrt::Windows::UI::Xaml::FocusState>;",5,cascadia\TerminalApp\Pane.hpp,gotFocusArgs,,false,216,gotFocusArgs,51
90649,TYPE_DECL,,,,struct PanePoint,5,cascadia\TerminalApp\Pane.hpp,Pane.PanePoint,,false,225,PanePoint,57
90650,TYPE_DECL,,,,struct PaneNeighborSearch,5,cascadia\TerminalApp\Pane.hpp,Pane.PaneNeighborSearch,,false,226,PaneNeighborSearch,58
90651,TYPE_DECL,,,,struct SnapSizeResult,5,cascadia\TerminalApp\Pane.hpp,Pane.SnapSizeResult,,false,227,SnapSizeResult,59
90652,TYPE_DECL,,,,struct SnapChildrenSizeResult,5,cascadia\TerminalApp\Pane.hpp,Pane.SnapChildrenSizeResult,,false,228,SnapChildrenSizeResult,60
90653,TYPE_DECL,,,,struct LayoutSizeNode,5,cascadia\TerminalApp\Pane.hpp,Pane.LayoutSizeNode,,false,229,LayoutSizeNode,61
90671,TYPE_DECL,_controlEvents,,,"struct ControlEventTokens
    {
        winrt::Microsoft::Terminal::Control::TermControl::ConnectionStateChanged_revoker _ConnectionStateChanged;
        winrt::Microsoft::Terminal::Control::TermControl::WarningBell_revoker _WarningBell;
        winrt::Microsoft::Terminal::Control::TermControl::CloseTerminalRequested_revoker _CloseTerminalRequested;
        winrt::Microsoft::Terminal::Control::TermControl::RestartTerminalRequested_revoker _RestartTerminalRequested;
        winrt::Microsoft::Terminal::Control::TermControl::ReadOnlyChanged_revoker _ReadOnlyChanged;
    }",5,cascadia\TerminalApp\Pane.hpp,Pane.ControlEventTokens,,false,255,ControlEventTokens,79
90947,TYPE_DECL,,,,"struct PanePoint
    {
        float x;
        float y;
        float scaleX;
        float scaleY;
    }",5,cascadia\TerminalApp\Pane.hpp,Pane.PanePoint,,false,370,PanePoint,128
90952,TYPE_DECL,,,,"struct PaneNeighborSearch
    {
        std::shared_ptr<Pane> source;
        std::shared_ptr<Pane> neighbor;
        PanePoint sourceOffset;
    }",5,cascadia\TerminalApp\Pane.hpp,Pane.PaneNeighborSearch,,false,378,PaneNeighborSearch,129
90956,TYPE_DECL,,,,"struct SnapSizeResult
    {
        float lower;
        float higher;
    }",5,cascadia\TerminalApp\Pane.hpp,Pane.SnapSizeResult,,false,385,SnapSizeResult,130
90959,TYPE_DECL,,,,"struct SnapChildrenSizeResult
    {
        std::pair<float, float> lower;
        std::pair<float, float> higher;
    }",5,cascadia\TerminalApp\Pane.hpp,Pane.SnapChildrenSizeResult,,false,391,SnapChildrenSizeResult,131
90962,TYPE_DECL,,,,"struct LayoutSizeNode
    {
        float size;
        bool isMinimumSize;
        std::unique_ptr<LayoutSizeNode> firstChild;
        std::unique_ptr<LayoutSizeNode> secondChild;

        // These two fields hold next possible snapped values of firstChild and
        // secondChild. Although that could be calculated from these fields themselves,
        // it would be wasteful as we have to know these values more often than for
        // simple increment. Hence we cache that here.
        std::unique_ptr<LayoutSizeNode> nextFirstChild;
        std::unique_ptr<LayoutSizeNode> nextSecondChild;

        explicit LayoutSizeNode(const float minSize);
        LayoutSizeNode(const LayoutSizeNode& other);

        LayoutSizeNode& operator=(const LayoutSizeNode& other);
    }",5,cascadia\TerminalApp\Pane.hpp,Pane.LayoutSizeNode,,false,399,LayoutSizeNode,132
90984,TYPE_DECL,,,,friend struct winrt::TerminalApp::implementation::TerminalTab,5,cascadia\TerminalApp\Pane.hpp,Pane.TerminalTab,,false,419,TerminalTab,133
90985,TYPE_DECL,,,,friend class ::TerminalAppLocalTests::TabTests,5,cascadia\TerminalApp\Pane.hpp,Pane.TabTests,,false,420,TabTests,134
91082,TYPE_DECL,,cascadia\TerminalApp\SettingsLoadEventArgs.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\SettingsLoadEventArgs.hpp,cascadia\TerminalApp\SettingsLoadEventArgs.hpp:<global>,,false,1,<global>,3
91088,TYPE_DECL,,,,"struct SettingsLoadEventArgs : SettingsLoadEventArgsT<SettingsLoadEventArgs>
    {
        WINRT_PROPERTY(bool, Reload, false);
        WINRT_PROPERTY(uint64_t, Result, S_OK);
        WINRT_PROPERTY(winrt::hstring, ExceptionText, L"""");
        WINRT_PROPERTY(winrt::Windows::Foundation::Collections::IVector<Microsoft::Terminal::Settings::Model::SettingsLoadWarnings>, Warnings, nullptr);
        WINRT_PROPERTY(Microsoft::Terminal::Settings::Model::CascadiaSettings, NewSettings, nullptr);

    public:
        SettingsLoadEventArgs(bool reload,
                              uint64_t result,
                              winrt::hstring exceptionText,
                              winrt::Windows::Foundation::Collections::IVector<Microsoft::Terminal::Settings::Model::SettingsLoadWarnings> warnings,
                              Microsoft::Terminal::Settings::Model::CascadiaSettings newSettings) :
            _Reload{ reload },
            _Result{ result },
            _ExceptionText{ std:...",5,cascadia\TerminalApp\SettingsLoadEventArgs.hpp,winrt.TerminalApp.implementation.SettingsLoadEventArgs,SettingsLoadEventArgsT<SettingsLoadEventArgs>,false,10,SettingsLoadEventArgs,1
91115,TYPE_DECL,,cascadia\TerminalApp\SettingsTab.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\SettingsTab.cpp,cascadia\TerminalApp\SettingsTab.cpp:<global>,,false,1,<global>,6
91329,TYPE_DECL,,cascadia\TerminalApp\SettingsTab.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\SettingsTab.hpp,cascadia\TerminalApp\SettingsTab.hpp:<global>,,false,1,<global>,3
91335,TYPE_DECL,,,,"struct SettingsTab : SettingsTabT<SettingsTab, TabBase>
    {
    public:
        SettingsTab(winrt::Microsoft::Terminal::Settings::Editor::MainPage settingsUI,
                    winrt::Windows::UI::Xaml::ElementTheme requestedTheme);

        void UpdateSettings(Microsoft::Terminal::Settings::Model::CascadiaSettings settings);
        void Focus(winrt::Windows::UI::Xaml::FocusState focusState) override;

        std::vector<Microsoft::Terminal::Settings::Model::ActionAndArgs> BuildStartupActions(const bool asContent = false) const override;

    private:
        winrt::Windows::UI::Xaml::ElementTheme _requestedTheme;

        void _MakeTabViewItem() override;
        void _CreateIcon();

        virtual winrt::Windows::UI::Xaml::Media::Brush _BackgroundBrush() override;
    }",5,cascadia\TerminalApp\SettingsTab.hpp,winrt.TerminalApp.implementation.SettingsTab,"SettingsTabT<SettingsTab, TabBase>",false,24,SettingsTab,1
91378,TYPE_DECL,,cascadia\TerminalApp\ShortcutActionDispatch.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\ShortcutActionDispatch.cpp,cascadia\TerminalApp\ShortcutActionDispatch.cpp:<global>,,false,1,<global>,4
92494,TYPE_DECL,,cascadia\TerminalApp\ShortcutActionDispatch.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\ShortcutActionDispatch.hpp,cascadia\TerminalApp\ShortcutActionDispatch.hpp:<global>,,false,1,<global>,3
92498,TYPE_DECL,,,,class SettingsTests,5,cascadia\TerminalApp\ShortcutActionDispatch.hpp,TerminalAppLocalTests.SettingsTests,,false,12,SettingsTests,1
92499,TYPE_DECL,,,,class KeyBindingsTests,5,cascadia\TerminalApp\ShortcutActionDispatch.hpp,TerminalAppLocalTests.KeyBindingsTests,,false,13,KeyBindingsTests,2
92503,TYPE_DECL,,,,"struct ShortcutActionDispatch : ShortcutActionDispatchT<ShortcutActionDispatch>
    {
        ShortcutActionDispatch() = default;

        bool DoAction(const Microsoft::Terminal::Settings::Model::ActionAndArgs& actionAndArgs);
        bool DoAction(const winrt::Windows::Foundation::IInspectable& sender,
                      const Microsoft::Terminal::Settings::Model::ActionAndArgs& actionAndArgs);

#define ON_ALL_ACTIONS(action) DECLARE_ACTION(action);
        ALL_SHORTCUT_ACTIONS
#undef ON_ALL_ACTIONS

    private:
        friend class TerminalAppLocalTests::SettingsTests;
        friend class TerminalAppLocalTests::KeyBindingsTests;
    }",5,cascadia\TerminalApp\ShortcutActionDispatch.hpp,winrt.TerminalApp.implementation.ShortcutActionDispatch,ShortcutActionDispatchT<ShortcutActionDispatch>,false,20,ShortcutActionDispatch,1
92606,TYPE_DECL,,,,friend class TerminalAppLocalTests::SettingsTests,9,cascadia\TerminalApp\ShortcutActionDispatch.hpp,winrt.TerminalApp.implementation.ShortcutActionDispatch.SettingsTests,,false,33,SettingsTests,91
92607,TYPE_DECL,,,,friend class TerminalAppLocalTests::KeyBindingsTests,9,cascadia\TerminalApp\ShortcutActionDispatch.hpp,winrt.TerminalApp.implementation.ShortcutActionDispatch.KeyBindingsTests,,false,34,KeyBindingsTests,92
92728,TYPE_DECL,,cascadia\TerminalApp\SuggestionsControl.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\SuggestionsControl.cpp,cascadia\TerminalApp\SuggestionsControl.cpp:<global>,,false,1,<global>,7
95155,TYPE_DECL,,cascadia\TerminalApp\SuggestionsControl.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\SuggestionsControl.hpp,cascadia\TerminalApp\SuggestionsControl.hpp:<global>,,false,1,<global>,5
95159,TYPE_DECL,,,,class TabTests,5,cascadia\TerminalApp\SuggestionsControl.hpp,TerminalAppLocalTests.TabTests,,false,15,TabTests,1
95163,TYPE_DECL,,,,"struct SuggestionsControl : SuggestionsControlT<SuggestionsControl>
    {
        SuggestionsControl();

        Windows::Foundation::Collections::IObservableVector<winrt::TerminalApp::FilteredCommand> FilteredActions();

        void SetCommands(const Windows::Foundation::Collections::IVector<Microsoft::Terminal::Settings::Model::Command>& actions);
        void SetActionMap(const Microsoft::Terminal::Settings::Model::IActionMapView& actionMap);

        bool OnDirectKeyEvent(const uint32_t vkey, const uint8_t scanCode, const bool down);

        void SelectNextItem(const bool moveDown);

        void ScrollPageUp();
        void ScrollPageDown();
        void ScrollToTop();
        void ScrollToBottom();

        Windows::UI::Xaml::FrameworkElement SelectedItem();

        TerminalApp::SuggestionsMode Mode() const;
        void Mode(TerminalApp::SuggestionsMode mode);

        void Open(TerminalApp::SuggestionsMode mode,
                  const Windows::Foundation::Collections::IV...",5,cascadia\TerminalApp\SuggestionsControl.hpp,winrt.TerminalApp.implementation.SuggestionsControl,SuggestionsControlT<SuggestionsControl>,false,20,SuggestionsControl,1
95241,TYPE_DECL,,,,"struct winrt_object_hash
        {
            size_t operator()(const auto& value) const noexcept
            {
                return til::hash(winrt::get_abi(value));
            }
        }",9,cascadia\TerminalApp\SuggestionsControl.hpp,winrt.TerminalApp.implementation.SuggestionsControl.winrt_object_hash,,false,61,winrt_object_hash,23
95257,TYPE_DECL,,,,friend struct SuggestionsControlT<SuggestionsControl>,9,cascadia\TerminalApp\SuggestionsControl.hpp,winrt.TerminalApp.implementation.SuggestionsControl.SuggestionsControlT<SuggestionsControl>,,false,68,SuggestionsControlT<SuggestionsControl>,24
95400,TYPE_DECL,,,,friend class TerminalAppLocalTests::TabTests,9,cascadia\TerminalApp\SuggestionsControl.hpp,winrt.TerminalApp.implementation.SuggestionsControl.TabTests,,false,126,TabTests,64
95477,TYPE_DECL,,cascadia\TerminalApp\TabBase.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\TabBase.cpp,cascadia\TerminalApp\TabBase.cpp:<global>,,false,1,<global>,7
97019,TYPE_DECL,,cascadia\TerminalApp\TabBase.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\TabBase.hpp,cascadia\TerminalApp\TabBase.hpp:<global>,,false,1,<global>,2
97023,TYPE_DECL,,,,class TabTests,5,cascadia\TerminalApp\TabBase.hpp,TerminalAppLocalTests.TabTests,,false,10,TabTests,1
97027,TYPE_DECL,,,,"struct TabBase : TabBaseT<TabBase>
    {
    public:
        virtual void Focus(winrt::Windows::UI::Xaml::FocusState focusState) = 0;

        virtual void Shutdown();
        void SetDispatch(const winrt::TerminalApp::ShortcutActionDispatch& dispatch);

        void UpdateTabViewIndex(const uint32_t idx, const uint32_t numTabs);
        void SetActionMap(const Microsoft::Terminal::Settings::Model::IActionMapView& actionMap);
        virtual std::vector<Microsoft::Terminal::Settings::Model::ActionAndArgs> BuildStartupActions(const bool asContent = false) const = 0;

        virtual std::optional<winrt::Windows::UI::Color> GetTabColor();
        void ThemeColor(const winrt::Microsoft::Terminal::Settings::Model::ThemeColor& focused,
                        const winrt::Microsoft::Terminal::Settings::Model::ThemeColor& unfocused,
                        const til::color& tabRowColor);

        Microsoft::Terminal::Settings::Model::TabCloseButtonVisibility CloseButtonVisibility();
     ...",5,cascadia\TerminalApp\TabBase.hpp,winrt.TerminalApp.implementation.TabBase,TabBaseT<TabBase>,false,15,TabBase,1
97165,TYPE_DECL,,,,friend class ::TerminalAppLocalTests::TabTests,9,cascadia\TerminalApp\TabBase.hpp,winrt.TerminalApp.implementation.TabBase.TabTests,,false,88,TabTests,48
97288,TYPE_DECL,,cascadia\TerminalApp\TabHeaderControl.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\TabHeaderControl.cpp,cascadia\TerminalApp\TabHeaderControl.cpp:<global>,,false,1,<global>,4
97548,TYPE_DECL,,cascadia\TerminalApp\TabHeaderControl.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\TabHeaderControl.hpp,cascadia\TerminalApp\TabHeaderControl.hpp:<global>,,false,1,<global>,3
97554,TYPE_DECL,,,,"struct TabHeaderControl : TabHeaderControlT<TabHeaderControl>
    {
        TabHeaderControl();
        void BeginRename();

        void RenameBoxLostFocusHandler(const winrt::Windows::Foundation::IInspectable& sender,
                                       const winrt::Windows::UI::Xaml::RoutedEventArgs& e);

        bool InRename();

        WINRT_CALLBACK(TitleChangeRequested, TerminalApp::TitleChangeRequestedArgs);

        WINRT_CALLBACK(PropertyChanged, Windows::UI::Xaml::Data::PropertyChangedEventHandler);
        WINRT_OBSERVABLE_PROPERTY(winrt::hstring, Title, _PropertyChangedHandlers);
        WINRT_OBSERVABLE_PROPERTY(double, RenamerMaxWidth, _PropertyChangedHandlers);
        WINRT_OBSERVABLE_PROPERTY(winrt::TerminalApp::TerminalTabStatus, TabStatus, _PropertyChangedHandlers);

        TYPED_EVENT(RenameEnded, winrt::Windows::Foundation::IInspectable, winrt::Windows::Foundation::IInspectable);

    private:
        bool _receivedKeyDown{ false };
        bool _renameCan...",5,cascadia\TerminalApp\TabHeaderControl.hpp,winrt.TerminalApp.implementation.TabHeaderControl,TabHeaderControlT<TabHeaderControl>,false,12,TabHeaderControl,1
97658,TYPE_DECL,,cascadia\TerminalApp\TabManagement.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\TabManagement.cpp,cascadia\TerminalApp\TabManagement.cpp:<global>,,false,1,<global>,13
97870,TYPE_DECL,ANY,,,using IInspectable = Windows::Foundation::IInspectable;,5,cascadia\TerminalApp\TabManagement.cpp,IInspectable,,false,49,IInspectable,3
99910,TYPE_DECL,,cascadia\TerminalApp\TabPaletteItem.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\TabPaletteItem.cpp,cascadia\TerminalApp\TabPaletteItem.cpp:<global>,,false,1,<global>,6
100012,TYPE_DECL,,cascadia\TerminalApp\TabPaletteItem.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\TabPaletteItem.hpp,cascadia\TerminalApp\TabPaletteItem.hpp:<global>,,false,1,<global>,3
100018,TYPE_DECL,,,,"struct TabPaletteItem : TabPaletteItemT<TabPaletteItem, PaletteItem>
    {
        TabPaletteItem() = default;
        TabPaletteItem(const winrt::TerminalApp::TabBase& tab);

        winrt::TerminalApp::TabBase Tab() const noexcept
        {
            return _tab.get();
        }

        WINRT_OBSERVABLE_PROPERTY(winrt::TerminalApp::TerminalTabStatus, TabStatus, _PropertyChangedHandlers);

    private:
        winrt::weak_ref<winrt::TerminalApp::TabBase> _tab;
        Windows::UI::Xaml::Data::INotifyPropertyChanged::PropertyChanged_revoker _tabChangedRevoker;
        Windows::UI::Xaml::Data::INotifyPropertyChanged::PropertyChanged_revoker _tabStatusChangedRevoker;
    }",5,cascadia\TerminalApp\TabPaletteItem.hpp,winrt.TerminalApp.implementation.TabPaletteItem,"TabPaletteItemT<TabPaletteItem, PaletteItem>",false,11,TabPaletteItem,1
100055,TYPE_DECL,,cascadia\TerminalApp\TabRowControl.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\TabRowControl.cpp,cascadia\TerminalApp\TabRowControl.cpp:<global>,,false,1,<global>,5
100201,TYPE_DECL,,cascadia\TerminalApp\TabRowControl.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\TabRowControl.hpp,cascadia\TerminalApp\TabRowControl.hpp:<global>,,false,1,<global>,3
100207,TYPE_DECL,,,,"struct TabRowControl : TabRowControlT<TabRowControl>
    {
        TabRowControl();

        void OnNewTabButtonClick(const Windows::Foundation::IInspectable& sender, const Microsoft::UI::Xaml::Controls::SplitButtonClickEventArgs& args);
        void OnNewTabButtonDrop(const winrt::Windows::Foundation::IInspectable& sender, const winrt::Windows::UI::Xaml::DragEventArgs& e);
        void OnNewTabButtonDragOver(const winrt::Windows::Foundation::IInspectable& sender, const winrt::Windows::UI::Xaml::DragEventArgs& e);

        WINRT_CALLBACK(PropertyChanged, Windows::UI::Xaml::Data::PropertyChangedEventHandler);
        WINRT_OBSERVABLE_PROPERTY(bool, ShowElevationShield, _PropertyChangedHandlers, false);
    }",5,cascadia\TerminalApp\TabRowControl.hpp,winrt.TerminalApp.implementation.TabRowControl,TabRowControlT<TabRowControl>,false,12,TabRowControl,1
100244,TYPE_DECL,,cascadia\TerminalApp\TaskbarState.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\TaskbarState.cpp,cascadia\TerminalApp\TaskbarState.cpp:<global>,,false,1,<global>,4
100309,TYPE_DECL,,cascadia\TerminalApp\TaskbarState.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\TaskbarState.hpp,cascadia\TerminalApp\TaskbarState.hpp:<global>,,false,1,<global>,2
100313,TYPE_DECL,,,,class TabTests,5,cascadia\TerminalApp\TaskbarState.hpp,TerminalAppLocalTests.TabTests,,false,10,TabTests,1
100317,TYPE_DECL,,,,"struct TaskbarState : TaskbarStateT<TaskbarState>
    {
    public:
        TaskbarState();
        TaskbarState(const uint64_t dispatchTypesState, const uint64_t progress);

        static int ComparePriority(const winrt::TerminalApp::TaskbarState& lhs, const winrt::TerminalApp::TaskbarState& rhs);

        uint64_t Priority() const;

        WINRT_PROPERTY(uint64_t, State, 0);
        WINRT_PROPERTY(uint64_t, Progress, 0);
    }",5,cascadia\TerminalApp\TaskbarState.hpp,winrt.TerminalApp.implementation.TaskbarState,TaskbarStateT<TaskbarState>,false,15,TaskbarState,1
100370,TYPE_DECL,,cascadia\TerminalApp\TerminalPage.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\TerminalPage.cpp,cascadia\TerminalApp\TerminalPage.cpp:<global>,,false,1,<global>,20
101246,TYPE_DECL,ANY,,,using IInspectable = Windows::Foundation::IInspectable;,5,cascadia\TerminalApp\TerminalPage.cpp,IInspectable,,false,54,IInspectable,3
101247,TYPE_DECL,ANY,,,using VirtualKeyModifiers = Windows::System::VirtualKeyModifiers;,5,cascadia\TerminalApp\TerminalPage.cpp,VirtualKeyModifiers,,false,55,VirtualKeyModifiers,4
112526,TYPE_DECL,,,,"struct TerminalPage : TerminalPageT<TerminalPage>
    {
    public:
        TerminalPage(TerminalApp::WindowProperties properties, const TerminalApp::ContentManager& manager);

        // This implements shobjidl's IInitializeWithWindow, but due to a XAML Compiler bug we cannot
        // put it in our inheritance graph. https://github.com/microsoft/microsoft-ui-xaml/issues/3331
        STDMETHODIMP Initialize(HWND hwnd);

        void SetSettings(Microsoft::Terminal::Settings::Model::CascadiaSettings settings, bool needRefreshUI);

        void Create();
        Windows::UI::Xaml::Automation::Peers::AutomationPeer OnCreateAutomationPeer();

        bool ShouldImmediatelyHandoffToElevated(const Microsoft::Terminal::Settings::Model::CascadiaSettings& settings) const;
        void HandoffToElevated(const Microsoft::Terminal::Settings::Model::CascadiaSettings& settings);
        Microsoft::Terminal::Settings::Model::WindowLayout GetWindowLayout();

        hstring Title();

        voi...",5,cascadia\TerminalApp\TerminalPage.hpp,winrt.TerminalApp.implementation.TerminalPage,TerminalPageT<TerminalPage>,false,92,TerminalPage,11
112546,TYPE_DECL,,cascadia\TerminalApp\TerminalPage.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\TerminalPage.hpp,cascadia\TerminalApp\TerminalPage.hpp:<global>,,false,1,<global>,10
112550,TYPE_DECL,,,,class TabTests,5,cascadia\TerminalApp\TerminalPage.hpp,TerminalAppLocalTests.TabTests,,false,20,TabTests,1
112551,TYPE_DECL,,,,class SettingsTests,5,cascadia\TerminalApp\TerminalPage.hpp,TerminalAppLocalTests.SettingsTests,,false,21,SettingsTests,2
112555,TYPE_DECL,,,,class ControlKeyStates,5,cascadia\TerminalApp\TerminalPage.hpp,Microsoft.Terminal.Core.ControlKeyStates,,false,26,ControlKeyStates,1
112569,TYPE_DECL,,,,"enum StartupState : int
    {
        NotInitialized = 0,
        InStartup = 1,
        Initialized = 2
    }",5,cascadia\TerminalApp\TerminalPage.hpp,winrt.TerminalApp.implementation.StartupState,,false,34,StartupState,5
112586,TYPE_DECL,,,,"enum ScrollDirection : int
    {
        ScrollUp = 0,
        ScrollDown = 1
    }",5,cascadia\TerminalApp\TerminalPage.hpp,winrt.TerminalApp.implementation.ScrollDirection,,false,41,ScrollDirection,6
112599,TYPE_DECL,,,,"struct LastTabClosedEventArgs : LastTabClosedEventArgsT<LastTabClosedEventArgs>
    {
        WINRT_PROPERTY(bool, ClearPersistedState);

    public:
        LastTabClosedEventArgs(const bool& shouldClear) :
            _ClearPersistedState{ shouldClear } {};
    }",5,cascadia\TerminalApp\TerminalPage.hpp,winrt.TerminalApp.implementation.LastTabClosedEventArgs,LastTabClosedEventArgsT<LastTabClosedEventArgs>,false,47,LastTabClosedEventArgs,7
112606,TYPE_DECL,,,,"struct RenameWindowRequestedArgs : RenameWindowRequestedArgsT<RenameWindowRequestedArgs>
    {
        WINRT_PROPERTY(winrt::hstring, ProposedName);

    public:
        RenameWindowRequestedArgs(const winrt::hstring& name) :
            _ProposedName{ name } {};
    }",5,cascadia\TerminalApp\TerminalPage.hpp,winrt.TerminalApp.implementation.RenameWindowRequestedArgs,RenameWindowRequestedArgsT<RenameWindowRequestedArgs>,false,56,RenameWindowRequestedArgs,8
112613,TYPE_DECL,,,,"struct RequestMoveContentArgs : RequestMoveContentArgsT<RequestMoveContentArgs>
    {
        WINRT_PROPERTY(winrt::hstring, Window);
        WINRT_PROPERTY(winrt::hstring, Content);
        WINRT_PROPERTY(uint32_t, TabIndex);
        WINRT_PROPERTY(Windows::Foundation::IReference<Windows::Foundation::Point>, WindowPosition);

    public:
        RequestMoveContentArgs(const winrt::hstring window, const winrt::hstring content, uint32_t tabIndex) :
            _Window{ window },
            _Content{ content },
            _TabIndex{ tabIndex } {};
    }",5,cascadia\TerminalApp\TerminalPage.hpp,winrt.TerminalApp.implementation.RequestMoveContentArgs,RequestMoveContentArgsT<RequestMoveContentArgs>,false,65,RequestMoveContentArgs,9
112625,TYPE_DECL,,,,"struct RequestReceiveContentArgs : RequestReceiveContentArgsT<RequestReceiveContentArgs>
    {
        WINRT_PROPERTY(uint64_t, SourceWindow);
        WINRT_PROPERTY(uint64_t, TargetWindow);
        WINRT_PROPERTY(uint32_t, TabIndex);

    public:
        RequestReceiveContentArgs(const uint64_t src, const uint64_t tgt, const uint32_t tabIndex) :
            _SourceWindow{ src },
            _TargetWindow{ tgt },
            _TabIndex{ tabIndex } {};
    }",5,cascadia\TerminalApp\TerminalPage.hpp,winrt.TerminalApp.implementation.RequestReceiveContentArgs,RequestReceiveContentArgsT<RequestReceiveContentArgs>,false,79,RequestReceiveContentArgs,10
112889,TYPE_DECL,,,,friend struct TerminalPageT<TerminalPage>,9,cascadia\TerminalApp\TerminalPage.hpp,winrt.TerminalApp.implementation.TerminalPage.TerminalPageT<TerminalPage>,,false,204,TerminalPageT<TerminalPage>,72
112940,TYPE_DECL,_stashed,,,"struct StashedDragData
        {
            winrt::com_ptr<winrt::TerminalApp::implementation::TabBase> draggedTab{ nullptr };
            til::point dragOffset{ 0, 0 };
        }",9,cascadia\TerminalApp\TerminalPage.hpp,winrt.TerminalApp.implementation.TerminalPage.StashedDragData,,false,275,StashedDragData,116
114366,TYPE_DECL,,,,friend class TerminalAppLocalTests::TabTests,9,cascadia\TerminalApp\TerminalPage.hpp,winrt.TerminalApp.implementation.TerminalPage.TabTests,,false,553,TabTests,374
114367,TYPE_DECL,,,,friend class TerminalAppLocalTests::SettingsTests,9,cascadia\TerminalApp\TerminalPage.hpp,winrt.TerminalApp.implementation.TerminalPage.SettingsTests,,false,554,SettingsTests,375
114564,TYPE_DECL,,cascadia\TerminalApp\TerminalTab.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\TerminalTab.cpp,cascadia\TerminalApp\TerminalTab.cpp:<global>,,false,1,<global>,10
119155,TYPE_DECL,,cascadia\TerminalApp\TerminalTab.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\TerminalTab.hpp,cascadia\TerminalApp\TerminalTab.hpp:<global>,,false,1,<global>,5
119159,TYPE_DECL,,,,class TabTests,5,cascadia\TerminalApp\TerminalTab.hpp,TerminalAppLocalTests.TabTests,,false,13,TabTests,1
119163,TYPE_DECL,,,,"struct TerminalTab : TerminalTabT<TerminalTab, TabBase>
    {
    public:
        TerminalTab(std::shared_ptr<Pane> rootPane);

        // Called after construction to perform the necessary setup, which relies on weak_ptr
        void Initialize();

        winrt::Microsoft::Terminal::Control::TermControl GetActiveTerminalControl() const;
        winrt::Microsoft::Terminal::Settings::Model::Profile GetFocusedProfile() const noexcept;

        void Focus(winrt::Windows::UI::Xaml::FocusState focusState) override;

        void Scroll(const int delta);

        std::shared_ptr<Pane> DetachRoot();
        std::shared_ptr<Pane> DetachPane();
        void AttachPane(std::shared_ptr<Pane> pane);

        void AttachColorPicker(winrt::TerminalApp::ColorPickupFlyout& colorPicker);

        std::pair<std::shared_ptr<Pane>, std::shared_ptr<Pane>> SplitPane(winrt::Microsoft::Terminal::Settings::Model::SplitDirection splitType,
                                                                    ...",5,cascadia\TerminalApp\TerminalTab.hpp,winrt.TerminalApp.implementation.TerminalTab,"TerminalTabT<TerminalTab, TabBase>",false,18,TerminalTab,1
119401,TYPE_DECL,,,,"struct ControlEventTokens
        {
            winrt::event_token titleToken;
            winrt::event_token colorToken;
            winrt::event_token taskbarToken;
            winrt::event_token stateToken;
            winrt::event_token readOnlyToken;
            winrt::event_token focusToken;

            winrt::Microsoft::Terminal::Control::TermControl::KeySent_revoker KeySent;
            winrt::Microsoft::Terminal::Control::TermControl::CharSent_revoker CharSent;
            winrt::Microsoft::Terminal::Control::TermControl::StringSent_revoker StringSent;
        }",9,cascadia\TerminalApp\TerminalTab.hpp,winrt.TerminalApp.implementation.TerminalTab.ControlEventTokens,,false,125,ControlEventTokens,67
119552,TYPE_DECL,,,,friend class ::TerminalAppLocalTests::TabTests,9,cascadia\TerminalApp\TerminalTab.hpp,winrt.TerminalApp.implementation.TerminalTab.TabTests,,false,195,TabTests,105
119632,TYPE_DECL,,cascadia\TerminalApp\TerminalTabStatus.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\TerminalTabStatus.cpp,cascadia\TerminalApp\TerminalTabStatus.cpp:<global>,,false,1,<global>,4
119642,TYPE_DECL,,cascadia\TerminalApp\TerminalTabStatus.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\TerminalTabStatus.hpp,cascadia\TerminalApp\TerminalTabStatus.hpp:<global>,,false,1,<global>,2
119648,TYPE_DECL,,,,"struct TerminalTabStatus : TerminalTabStatusT<TerminalTabStatus>
    {
        TerminalTabStatus() = default;

        WINRT_CALLBACK(PropertyChanged, Windows::UI::Xaml::Data::PropertyChangedEventHandler);
        WINRT_OBSERVABLE_PROPERTY(bool, IsConnectionClosed, _PropertyChangedHandlers);
        WINRT_OBSERVABLE_PROPERTY(bool, IsPaneZoomed, _PropertyChangedHandlers);
        WINRT_OBSERVABLE_PROPERTY(bool, IsProgressRingActive, _PropertyChangedHandlers);
        WINRT_OBSERVABLE_PROPERTY(bool, IsProgressRingIndeterminate, _PropertyChangedHandlers);
        WINRT_OBSERVABLE_PROPERTY(bool, BellIndicator, _PropertyChangedHandlers);
        WINRT_OBSERVABLE_PROPERTY(bool, IsReadOnlyActive, _PropertyChangedHandlers);
        WINRT_OBSERVABLE_PROPERTY(uint32_t, ProgressValue, _PropertyChangedHandlers);
        WINRT_OBSERVABLE_PROPERTY(bool, IsInputBroadcastActive, _PropertyChangedHandlers);
    }",5,cascadia\TerminalApp\TerminalTabStatus.hpp,winrt.TerminalApp.implementation.TerminalTabStatus,TerminalTabStatusT<TerminalTabStatus>,false,10,TerminalTabStatus,1
119718,TYPE_DECL,,cascadia\TerminalApp\TerminalWindow.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\TerminalWindow.cpp,cascadia\TerminalApp\TerminalWindow.cpp:<global>,,false,1,<global>,9
119741,TYPE_DECL,ANY,,,using IInspectable = Windows::Foundation::IInspectable;,5,cascadia\TerminalApp\TerminalWindow.cpp,IInspectable,,false,32,IInspectable,3
122306,TYPE_DECL,,cascadia\TerminalApp\TerminalWindow.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\TerminalWindow.hpp,cascadia\TerminalApp\TerminalWindow.hpp:<global>,,false,1,<global>,9
122312,TYPE_DECL,,,,"struct SystemMenuChangeArgs : SystemMenuChangeArgsT<SystemMenuChangeArgs>
    {
        WINRT_PROPERTY(winrt::hstring, Name, L"""");
        WINRT_PROPERTY(SystemMenuChangeAction, Action, SystemMenuChangeAction::Add);
        WINRT_PROPERTY(SystemMenuItemHandler, Handler, nullptr);

    public:
        SystemMenuChangeArgs(const winrt::hstring& name, SystemMenuChangeAction action, SystemMenuItemHandler handler = nullptr) :
            _Name{ name }, _Action{ action }, _Handler{ handler } {};
    }",5,cascadia\TerminalApp\TerminalWindow.hpp,winrt.TerminalApp.implementation.SystemMenuChangeArgs,SystemMenuChangeArgsT<SystemMenuChangeArgs>,false,27,SystemMenuChangeArgs,1
122323,TYPE_DECL,,,,"struct WindowProperties : WindowPropertiesT<WindowProperties>
    {
        // Normally, WindowName and WindowId would be
        // WINRT_OBSERVABLE_PROPERTY's, but we want them to raise
        // WindowNameForDisplay and WindowIdForDisplay instead
        winrt::hstring WindowName() const noexcept;
        void WindowName(const winrt::hstring& value);
        uint64_t WindowId() const noexcept;
        void WindowId(const uint64_t& value);
        winrt::hstring WindowIdForDisplay() const noexcept;
        winrt::hstring WindowNameForDisplay() const noexcept;
        bool IsQuakeWindow() const noexcept;

        WINRT_OBSERVABLE_PROPERTY(winrt::hstring, VirtualWorkingDirectory, _PropertyChangedHandlers, L"""");

        WINRT_CALLBACK(PropertyChanged, Windows::UI::Xaml::Data::PropertyChangedEventHandler);

    public:
        // Used for setting the initial CWD, before we have XAML set up for property change notifications.
        void SetInitialCwd(winrt::hstring cwd) { _VirtualWo...",5,cascadia\TerminalApp\TerminalWindow.hpp,winrt.TerminalApp.implementation.WindowProperties,WindowPropertiesT<WindowProperties>,false,38,WindowProperties,2
122382,TYPE_DECL,,,,"struct TerminalWindow : TerminalWindowT<TerminalWindow, IInitializeWithWindow>
    {
    public:
        TerminalWindow(const TerminalApp::SettingsLoadEventArgs& settingsLoadedResult, const TerminalApp::ContentManager& manager);
        ~TerminalWindow() = default;

        STDMETHODIMP Initialize(HWND hwnd);

        void Create();

        void Quit();

        winrt::fire_and_forget UpdateSettings(winrt::TerminalApp::SettingsLoadEventArgs args);

        bool HasCommandlineArguments() const noexcept;

        int32_t SetStartupCommandline(array_view<const winrt::hstring> actions, winrt::hstring cwd, winrt::hstring env);
        void SetStartupContent(const winrt::hstring& content, const Windows::Foundation::IReference<Windows::Foundation::Rect>& contentBounds);
        int32_t ExecuteCommandline(array_view<const winrt::hstring> actions, const winrt::hstring& cwd, const winrt::hstring& env);
        void SetSettingsStartupArgs(const std::vector<winrt::Microsoft::Terminal::Settings...",5,cascadia\TerminalApp\TerminalWindow.hpp,winrt.TerminalApp.implementation.TerminalWindow,"TerminalWindowT<TerminalWindow, IInitializeWithWindow>",false,66,TerminalWindow,3
122774,TYPE_DECL,,,,friend class TerminalAppLocalTests::CommandlineTest,9,cascadia\TerminalApp\TerminalWindow.hpp,winrt.TerminalApp.implementation.TerminalWindow.CommandlineTest,,false,243,CommandlineTest,110
122864,TYPE_DECL,,cascadia\TerminalApp\TitlebarControl.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\TitlebarControl.cpp,cascadia\TerminalApp\TitlebarControl.cpp:<global>,,false,1,<global>,5
123308,TYPE_DECL,,cascadia\TerminalApp\TitlebarControl.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\TitlebarControl.hpp,cascadia\TerminalApp\TitlebarControl.hpp:<global>,,false,1,<global>,2
123314,TYPE_DECL,,,,"struct TitlebarControl : TitlebarControlT<TitlebarControl>
    {
        TitlebarControl(uint64_t handle);

        void HoverButton(CaptionButton button);
        void PressButton(CaptionButton button);
        winrt::fire_and_forget ClickButton(CaptionButton button);
        void ReleaseButtons();
        double CaptionButtonWidth();

        IInspectable Content();
        void Content(IInspectable content);

        void SetWindowVisualState(WindowVisualState visualState);
        void Root_SizeChanged(const IInspectable& sender, const Windows::UI::Xaml::SizeChangedEventArgs& e);

        void Minimize_Click(const winrt::Windows::Foundation::IInspectable& sender, const winrt::Windows::UI::Xaml::RoutedEventArgs& e);
        void Maximize_Click(const winrt::Windows::Foundation::IInspectable& sender, const winrt::Windows::UI::Xaml::RoutedEventArgs& e);
        void Close_Click(const winrt::Windows::Foundation::IInspectable& sender, const winrt::Windows::UI::Xaml::RoutedEventArgs& e...",5,cascadia\TerminalApp\TitlebarControl.hpp,winrt.TerminalApp.implementation.TitlebarControl,TitlebarControlT<TitlebarControl>,false,10,TitlebarControl,1
123442,TYPE_DECL,,cascadia\TerminalApp\Toast.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\Toast.cpp,cascadia\TerminalApp\Toast.cpp:<global>,,false,1,<global>,3
123496,TYPE_DECL,,cascadia\TerminalApp\Toast.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\Toast.hpp,cascadia\TerminalApp\Toast.hpp:<global>,,false,1,<global>,2
123499,TYPE_DECL,,,,"class Toast : public std::enable_shared_from_this<Toast>
{
public:
    Toast(const winrt::Microsoft::UI::Xaml::Controls::TeachingTip& tip);
    void Open();

private:
    winrt::Microsoft::UI::Xaml::Controls::TeachingTip _tip;
    SafeDispatcherTimer _timer;
}",1,cascadia\TerminalApp\Toast.hpp,Toast,std.enable_shared_from_this<Toast>,false,29,Toast,1
123515,TYPE_DECL,,cascadia\TerminalApp\dll\pch.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\dll\pch.cpp,cascadia\TerminalApp\dll\pch.cpp:<global>,,false,1,<global>,2
123520,TYPE_DECL,,cascadia\TerminalApp\dll\pch.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\dll\pch.hpp,cascadia\TerminalApp\dll\pch.hpp:<global>,,false,1,<global>,1
123531,TYPE_DECL,,cascadia\TerminalApp\init.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\init.cpp,cascadia\TerminalApp\init.cpp:<global>,,false,1,<global>,4
123577,TYPE_DECL,,cascadia\TerminalApp\pch.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\pch.cpp,cascadia\TerminalApp\pch.cpp:<global>,,false,1,<global>,2
123688,TYPE_DECL,,cascadia\TerminalApp\pch.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalApp\pch.hpp,cascadia\TerminalApp\pch.hpp:<global>,,false,1,<global>,54
123700,TYPE_DECL,,cascadia\TerminalAzBridge\ConsoleInputReader.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalAzBridge\ConsoleInputReader.cpp,cascadia\TerminalAzBridge\ConsoleInputReader.cpp:<global>,,false,1,<global>,4
123944,TYPE_DECL,,cascadia\TerminalAzBridge\ConsoleInputReader.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalAzBridge\ConsoleInputReader.hpp,cascadia\TerminalAzBridge\ConsoleInputReader.hpp:<global>,,false,1,<global>,1
123947,TYPE_DECL,,,,"class ConsoleInputReader
{
public:
    explicit ConsoleInputReader(HANDLE handle);
    void SetWindowSizeChangedCallback(std::function<void()> callback);
    std::optional<std::wstring_view> Read();

private:
    static constexpr size_t BufferSize{ 128 };

    HANDLE _handle;
    std::wstring _convertedString;
    std::vector<INPUT_RECORD> _buffer;
    std::optional<wchar_t> _highSurrogate;
    std::function<void()> _windowSizeChangedCallback;
}",1,cascadia\TerminalAzBridge\ConsoleInputReader.hpp,ConsoleInputReader,,false,18,ConsoleInputReader,1
123996,TYPE_DECL,,cascadia\TerminalAzBridge\main.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalAzBridge\main.cpp,cascadia\TerminalAzBridge\main.cpp:<global>,,false,1,<global>,4
124381,TYPE_DECL,,cascadia\TerminalAzBridge\pch.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalAzBridge\pch.cpp,cascadia\TerminalAzBridge\pch.cpp:<global>,,false,1,<global>,2
124406,TYPE_DECL,,cascadia\TerminalAzBridge\pch.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalAzBridge\pch.hpp,cascadia\TerminalAzBridge\pch.hpp:<global>,,false,1,<global>,11
124411,TYPE_DECL,,cascadia\TerminalConnection\AzureClient.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalConnection\AzureClient.hpp,cascadia\TerminalConnection\AzureClient.hpp:<global>,,false,1,<global>,1
124417,TYPE_DECL,,,,"class AzureException : public std::runtime_error
    {
        std::wstring _code;

    public:
        static bool IsErrorPayload(const winrt::Windows::Data::Json::JsonObject& errorObject)
        {
            if (!errorObject.HasKey(L""error""))
            {
                return false;
            }

            if (errorObject.GetNamedValue(L""error"").ValueType() != winrt::Windows::Data::Json::JsonValueType::String)
            {
                return false;
            }

            return true;
        }

        AzureException(const winrt::Windows::Data::Json::JsonObject& errorObject) :
            runtime_error(til::u16u8(errorObject.GetNamedString(L""error_description""))), // surface the human-readable description as .what()
            _code(errorObject.GetNamedString(L""error""))
        {
        }

        std::wstring_view GetCode() const noexcept
        {
            return _code;
        }
    }",5,cascadia\TerminalConnection\AzureClient.hpp,Microsoft.Terminal.Azure.AzureException,std.runtime_error,false,8,AzureException,1
124482,TYPE_DECL,,,,"struct Tenant
    {
        std::wstring ID;
        std::optional<std::wstring> DisplayName;
        std::optional<std::wstring> DefaultDomain;
    }",5,cascadia\TerminalConnection\AzureClient.hpp,Microsoft.Terminal.Azure.Tenant,,false,46,Tenant,3
124488,TYPE_DECL,,cascadia\TerminalConnection\AzureClientID.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalConnection\AzureClientID.hpp,cascadia\TerminalConnection\AzureClientID.hpp:<global>,,false,1,<global>,1
124525,TYPE_DECL,,cascadia\TerminalConnection\AzureConnection.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalConnection\AzureConnection.cpp,cascadia\TerminalConnection\AzureConnection.cpp:<global>,,false,1,<global>,12
127148,TYPE_DECL,,cascadia\TerminalConnection\AzureConnection.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalConnection\AzureConnection.hpp,cascadia\TerminalConnection\AzureConnection.hpp:<global>,,false,1,<global>,6
127156,TYPE_DECL,,,,"struct AzureConnection : AzureConnectionT<AzureConnection>, ConnectionStateHolder<AzureConnection>
    {
        static winrt::guid ConnectionType() noexcept;
        static bool IsAzureConnectionAvailable() noexcept;

        AzureConnection() = default;
        void Initialize(const Windows::Foundation::Collections::ValueSet& settings);

        void Start();
        void WriteInput(const hstring& data);
        void Resize(uint32_t rows, uint32_t columns);
        void Close();

        WINRT_CALLBACK(TerminalOutput, TerminalOutputHandler);

    private:
        til::CoordType _initialRows{};
        til::CoordType _initialCols{};

        enum class AzureState
        {
            AccessStored,
            DeviceFlow,
            TenantChoice,
            StoreTokens,
            TermConnecting,
            TermConnected,
        };

        AzureState _state{ AzureState::AccessStored };

        wil::unique_handle _hOutputThread;

        DWORD _OutputThread();
        void _R...",5,cascadia\TerminalConnection\AzureConnection.hpp,winrt.Microsoft.Terminal.TerminalConnection.implementation.AzureConnection,AzureConnectionT<AzureConnection>;ConnectionStateHolder<AzureConnection>,false,16,AzureConnection,1
127196,TYPE_DECL,,,,"enum class AzureState
        {
            AccessStored,
            DeviceFlow,
            TenantChoice,
            StoreTokens,
            TermConnecting,
            TermConnected,
        }",9,cascadia\TerminalConnection\AzureConnection.hpp,winrt.Microsoft.Terminal.TerminalConnection.implementation.AzureConnection.AzureState,,false,35,AzureState,12
127302,TYPE_DECL,,,,"enum class InputMode
        {
            None = 0,
            Line
        }",9,cascadia\TerminalConnection\AzureConnection.hpp,winrt.Microsoft.Terminal.TerminalConnection.implementation.AzureConnection.InputMode,,false,83,InputMode,45
127397,TYPE_DECL,,cascadia\TerminalConnection\CTerminalHandoff.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalConnection\CTerminalHandoff.cpp,cascadia\TerminalConnection\CTerminalHandoff.cpp:<global>,,false,1,<global>,3
127548,TYPE_DECL,,cascadia\TerminalConnection\CTerminalHandoff.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalConnection\CTerminalHandoff.hpp,cascadia\TerminalConnection\CTerminalHandoff.hpp:<global>,,false,1,<global>,2
127551,TYPE_DECL,"HRESULT(*)(HANDLE,HANDLE,HANDLE,HANDLE,HANDLE,HANDLE,TERMINAL_STARTUP_INFO)",,,"using NewHandoffFunction = HRESULT (*)(HANDLE, HANDLE, HANDLE, HANDLE, HANDLE, HANDLE, TERMINAL_STARTUP_INFO);",1,cascadia\TerminalConnection\CTerminalHandoff.hpp,NewHandoffFunction,,false,31,NewHandoffFunction,1
127552,TYPE_DECL,,,,"struct __declspec(uuid(__CLSID_CTerminalHandoff))
    CTerminalHandoff : public Microsoft::WRL::RuntimeClass<Microsoft::WRL::RuntimeClassFlags<Microsoft::WRL::RuntimeClassType::ClassicCom>, ITerminalHandoff2>
{
#pragma region ITerminalHandoff
    STDMETHODIMP EstablishPtyHandoff(HANDLE in,
                                     HANDLE out,
                                     HANDLE signal,
                                     HANDLE ref,
                                     HANDLE server,
                                     HANDLE client,
                                     TERMINAL_STARTUP_INFO startupInfo) override;

#pragma endregion

    static HRESULT s_StartListening(NewHandoffFunction pfnHandoff);
    static HRESULT s_StopListening();

private:
    static HRESULT s_StopListeningLocked();
}",1,cascadia\TerminalConnection\CTerminalHandoff.hpp,CTerminalHandoff,"Microsoft.WRL.RuntimeClass<Microsoft.WRL.RuntimeClassFlags<Microsoft.WRL.RuntimeClassType.ClassicCom>, ITerminalHandoff2>",false,33,CTerminalHandoff,2
127586,TYPE_DECL,,cascadia\TerminalConnection\ConnectionInformation.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalConnection\ConnectionInformation.cpp,cascadia\TerminalConnection\ConnectionInformation.cpp:<global>,,false,1,<global>,4
127671,TYPE_DECL,,cascadia\TerminalConnection\ConnectionInformation.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalConnection\ConnectionInformation.hpp,cascadia\TerminalConnection\ConnectionInformation.hpp:<global>,,false,1,<global>,2
127679,TYPE_DECL,,,,"struct ConnectionInformation : ConnectionInformationT<ConnectionInformation>
    {
        ConnectionInformation(const hstring& className,
                              const Windows::Foundation::Collections::ValueSet& settings);

        static TerminalConnection::ITerminalConnection CreateConnection(TerminalConnection::ConnectionInformation info);

        winrt::hstring ClassName() const { return _ClassName; }
        void ClassName(const winrt::hstring& value) { _ClassName = value; }

        WINRT_PROPERTY(Windows::Foundation::Collections::ValueSet, Settings);

    private:
        winrt::hstring _ClassName{};
    }",5,cascadia\TerminalConnection\ConnectionInformation.hpp,winrt.Microsoft.Terminal.TerminalConnection.implementation.ConnectionInformation,ConnectionInformationT<ConnectionInformation>,false,23,ConnectionInformation,1
127722,TYPE_DECL,,cascadia\TerminalConnection\ConnectionStateHolder.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalConnection\ConnectionStateHolder.hpp,cascadia\TerminalConnection\ConnectionStateHolder.hpp:<global>,,false,1,<global>,1
127730,TYPE_DECL,winrt.Microsoft.Terminal.TerminalConnection.implementation.ConnectionStateHolder<T>,,,"struct ConnectionStateHolder
    {
    public:
        ConnectionState State() const noexcept { return _connectionState; }
        TYPED_EVENT(StateChanged, ITerminalConnection, winrt::Windows::Foundation::IInspectable);

    protected:
#pragma warning(push)
#pragma warning(disable : 26447) // Analyzer is still upset about noexcepts throwing even with function level try.
        // Method Description:
        // - Attempt to transition to and signal the specified connection state.
        //   The transition will only be effected if the state is ""beyond"" the current state.
        // Arguments:
        // - state: the new state
        // Return Value:
        //   Whether we've successfully transitioned to the new state.
        bool _transitionToState(const ConnectionState state) noexcept
        try
        {
            {
                std::lock_guard<std::mutex> stateLock{ _stateMutex };
                // only allow movement up the state gradient
                if (state < ...",5,cascadia\TerminalConnection\ConnectionStateHolder.hpp,winrt.Microsoft.Terminal.TerminalConnection.implementation.ConnectionStateHolder,,false,7,ConnectionStateHolder,1
127782,TYPE_DECL,,cascadia\TerminalConnection\ConptyConnection.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalConnection\ConptyConnection.cpp,cascadia\TerminalConnection\ConptyConnection.cpp:<global>,,false,1,<global>,10
128865,TYPE_DECL,,cascadia\TerminalConnection\ConptyConnection.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalConnection\ConptyConnection.hpp,cascadia\TerminalConnection\ConptyConnection.hpp:<global>,,false,1,<global>,5
128873,TYPE_DECL,,,,"struct ConptyConnection : ConptyConnectionT<ConptyConnection>, ConnectionStateHolder<ConptyConnection>
    {
        ConptyConnection(const HANDLE hSig,
                         const HANDLE hIn,
                         const HANDLE hOut,
                         const HANDLE hRef,
                         const HANDLE hServerProcess,
                         const HANDLE hClientProcess,
                         TERMINAL_STARTUP_INFO startupInfo);

        ConptyConnection() noexcept = default;
        void Initialize(const Windows::Foundation::Collections::ValueSet& settings);

        static winrt::fire_and_forget final_release(std::unique_ptr<ConptyConnection> connection);

        void Start();
        void WriteInput(const hstring& data);
        void Resize(uint32_t rows, uint32_t columns);
        void Close() noexcept;
        void ClearBuffer();

        void ShowHide(const bool show);

        void ReparentWindow(const uint64_t newParent);

        winrt::guid Guid() cons...",5,cascadia\TerminalConnection\ConptyConnection.hpp,winrt.Microsoft.Terminal.TerminalConnection.implementation.ConptyConnection,ConptyConnectionT<ConptyConnection>;ConnectionStateHolder<ConptyConnection>,false,14,ConptyConnection,1
129039,TYPE_DECL,_startupInfo,,,"struct StartupInfoFromDefTerm
        {
            winrt::hstring title{};
            winrt::hstring iconPath{};
            int32_t iconIndex{};
            WORD showWindow{};

        }",9,cascadia\TerminalConnection\ConptyConnection.hpp,winrt.Microsoft.Terminal.TerminalConnection.implementation.ConptyConnection.StartupInfoFromDefTerm,,false,101,StartupInfoFromDefTerm,52
129150,TYPE_DECL,,cascadia\TerminalConnection\EchoConnection.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalConnection\EchoConnection.cpp,cascadia\TerminalConnection\EchoConnection.cpp:<global>,,false,1,<global>,5
129226,TYPE_DECL,,cascadia\TerminalConnection\EchoConnection.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalConnection\EchoConnection.hpp,cascadia\TerminalConnection\EchoConnection.hpp:<global>,,false,1,<global>,2
129234,TYPE_DECL,,,,"struct EchoConnection : EchoConnectionT<EchoConnection>
    {
        EchoConnection() noexcept;

        void Start() noexcept;
        void WriteInput(const hstring& data);
        void Resize(uint32_t rows, uint32_t columns) noexcept;
        void Close() noexcept;

        void Initialize(const Windows::Foundation::Collections::ValueSet& /*settings*/) const noexcept {};

        ConnectionState State() const noexcept { return ConnectionState::Connected; }

        WINRT_CALLBACK(TerminalOutput, TerminalOutputHandler);
        TYPED_EVENT(StateChanged, ITerminalConnection, IInspectable);
    }",5,cascadia\TerminalConnection\EchoConnection.hpp,winrt.Microsoft.Terminal.TerminalConnection.implementation.EchoConnection,EchoConnectionT<EchoConnection>,false,10,EchoConnection,1
129287,TYPE_DECL,,cascadia\TerminalConnection\init.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalConnection\init.cpp,cascadia\TerminalConnection\init.cpp:<global>,,false,1,<global>,4
129335,TYPE_DECL,,cascadia\TerminalConnection\pch.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalConnection\pch.cpp,cascadia\TerminalConnection\pch.cpp:<global>,,false,1,<global>,2
129372,TYPE_DECL,,cascadia\TerminalConnection\pch.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalConnection\pch.hpp,cascadia\TerminalConnection\pch.hpp:<global>,,false,1,<global>,17
129386,TYPE_DECL,,cascadia\TerminalControl\ControlAppearance.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalControl\ControlAppearance.hpp,cascadia\TerminalControl\ControlAppearance.hpp:<global>,,false,1,<global>,5
129394,TYPE_DECL,,,,"struct ControlAppearance : public winrt::implements<ControlAppearance, Microsoft::Terminal::Core::ICoreAppearance, Microsoft::Terminal::Control::IControlAppearance>
    {
#define SETTINGS_GEN(type, name, ...) WINRT_PROPERTY(type, name, __VA_ARGS__);
        CORE_APPEARANCE_SETTINGS(SETTINGS_GEN)
        CONTROL_APPEARANCE_SETTINGS(SETTINGS_GEN)
#undef SETTINGS_GEN

    private:
        // Color Table is special because it's an array
        std::array<winrt::Microsoft::Terminal::Core::Color, COLOR_TABLE_SIZE> _ColorTable;

    public:
        winrt::Microsoft::Terminal::Core::Color GetColorTableEntry(int32_t index) noexcept
        {
            return _ColorTable.at(index);
        }
        void SetColorTableEntry(int32_t index,
                                winrt::Microsoft::Terminal::Core::Color color) noexcept
        {
            _ColorTable.at(index) = color;
        }

        ControlAppearance(Control::IControlAppearance appearance)
        {
#define COPY_SETTING(type, n...",5,cascadia\TerminalControl\ControlAppearance.hpp,winrt.Microsoft.Terminal.Control.implementation.ControlAppearance,"winrt.implements<ControlAppearance, Microsoft.Terminal.Core.ICoreAppearance, Microsoft.Terminal.Control.IControlAppearance>",false,14,ControlAppearance,1
129969,TYPE_DECL,,cascadia\TerminalControl\ControlCore.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalControl\ControlCore.cpp,cascadia\TerminalControl\ControlCore.cpp:<global>,,false,1,<global>,16
137093,TYPE_DECL,,cascadia\TerminalControl\ControlCore.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalControl\ControlCore.hpp,cascadia\TerminalControl\ControlCore.hpp:<global>,,false,1,<global>,10
137097,TYPE_DECL,,,,class ControlCoreTests,5,cascadia\TerminalControl\ControlCore.hpp,ControlUnitTests.ControlCoreTests,,false,30,ControlCoreTests,1
137098,TYPE_DECL,,,,class ControlInteractivityTests,5,cascadia\TerminalControl\ControlCore.hpp,ControlUnitTests.ControlInteractivityTests,,false,31,ControlInteractivityTests,2
137104,TYPE_DECL,,,,"struct SelectionColor : SelectionColorT<SelectionColor>
    {
        TextColor AsTextColor() const noexcept;

        til::property<til::color> Color;
        til::property<bool> IsIndex16;
    }",5,cascadia\TerminalControl\ControlCore.hpp,winrt.Microsoft.Terminal.Control.implementation.SelectionColor,SelectionColorT<SelectionColor>,false,50,SelectionColor,1
137111,TYPE_DECL,,,,"struct CommandHistoryContext : CommandHistoryContextT<CommandHistoryContext>
    {
        til::property<Windows::Foundation::Collections::IVector<winrt::hstring>> History;
        til::property<winrt::hstring> CurrentCommandline;

        CommandHistoryContext(std::vector<winrt::hstring>&& history)
        {
            History(winrt::single_threaded_vector<winrt::hstring>(std::move(history)));
        }
    }",5,cascadia\TerminalControl\ControlCore.hpp,winrt.Microsoft.Terminal.Control.implementation.CommandHistoryContext,CommandHistoryContextT<CommandHistoryContext>,false,57,CommandHistoryContext,2
137133,TYPE_DECL,,,,"struct ControlCore : ControlCoreT<ControlCore>
    {
    public:
        ControlCore(Control::IControlSettings settings,
                    Control::IControlAppearance unfocusedAppearance,
                    TerminalConnection::ITerminalConnection connection);
        ~ControlCore();

        bool Initialize(const float actualWidth,
                        const float actualHeight,
                        const float compositionScale);
        void EnablePainting();

        void Detach();

        void UpdateSettings(const Control::IControlSettings& settings, const IControlAppearance& newAppearance);
        void ApplyAppearance(const bool& focused);
        Control::IControlSettings Settings() { return *_settings; };
        Control::IControlAppearance FocusedAppearance() const { return *_settings->FocusedAppearance(); };
        Control::IControlAppearance UnfocusedAppearance() const { return *_settings->UnfocusedAppearance(); };
        bool HasUnfocusedAppearance() const;

  ...",5,cascadia\TerminalControl\ControlCore.hpp,winrt.Microsoft.Terminal.Control.implementation.ControlCore,ControlCoreT<ControlCore>,false,68,ControlCore,3
138276,TYPE_DECL,,,,"struct SharedState
        {
            std::shared_ptr<ThrottledFuncTrailing<>> tsfTryRedrawCanvas;
            std::unique_ptr<til::throttled_func_trailing<>> updatePatternLocations;
            std::shared_ptr<ThrottledFuncTrailing<Control::ScrollPositionChangedArgs>> updateScrollBar;
        }",9,cascadia\TerminalControl\ControlCore.hpp,winrt.Microsoft.Terminal.Control.implementation.ControlCore.SharedState,,false,285,SharedState,194
138478,TYPE_DECL,,,,friend class ControlUnitTests::ControlCoreTests,9,cascadia\TerminalControl\ControlCore.hpp,winrt.Microsoft.Terminal.Control.implementation.ControlCore.ControlCoreTests,,false,419,ControlCoreTests,258
138479,TYPE_DECL,,,,friend class ControlUnitTests::ControlInteractivityTests,9,cascadia\TerminalControl\ControlCore.hpp,winrt.Microsoft.Terminal.Control.implementation.ControlCore.ControlInteractivityTests,,false,420,ControlInteractivityTests,259
138603,TYPE_DECL,,,,ControlCore,5,cascadia\TerminalControl\ControlCore.hpp,winrt.Microsoft.Terminal.Control.factory_implementation.ControlCore,"ControlCoreT<ControlCore, ControlCore>",false,427,ControlCore,1
138604,TYPE_DECL,,,,SelectionColor,5,cascadia\TerminalControl\ControlCore.hpp,winrt.Microsoft.Terminal.Control.factory_implementation.SelectionColor,"SelectionColorT<SelectionColor, SelectionColor>",false,428,SelectionColor,2
138631,TYPE_DECL,,cascadia\TerminalControl\ControlInteractivity.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalControl\ControlInteractivity.cpp,cascadia\TerminalControl\ControlInteractivity.cpp:<global>,,false,1,<global>,13
139985,TYPE_DECL,,cascadia\TerminalControl\ControlInteractivity.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalControl\ControlInteractivity.hpp,cascadia\TerminalControl\ControlInteractivity.hpp:<global>,,false,1,<global>,6
139989,TYPE_DECL,,,,class ControlCoreTests,5,cascadia\TerminalControl\ControlInteractivity.hpp,ControlUnitTests.ControlCoreTests,,false,28,ControlCoreTests,1
139990,TYPE_DECL,,,,class ControlInteractivityTests,5,cascadia\TerminalControl\ControlInteractivity.hpp,ControlUnitTests.ControlInteractivityTests,,false,29,ControlInteractivityTests,2
139996,TYPE_DECL,,,,"struct ControlInteractivity : ControlInteractivityT<ControlInteractivity>
    {
    public:
        ControlInteractivity(IControlSettings settings,
                             Control::IControlAppearance unfocusedAppearance,
                             TerminalConnection::ITerminalConnection connection);

        void GotFocus();
        void LostFocus();
        void UpdateSettings();
        void Initialize();
        Control::ControlCore Core();

        void Close();
        void Detach();

        Control::InteractivityAutomationPeer OnCreateAutomationPeer();
        ::Microsoft::Console::Render::IRenderData* GetRenderData() const;

#pragma region Input Methods
        void PointerPressed(Control::MouseButtonState buttonState,
                            const unsigned int pointerUpdateKind,
                            const uint64_t timestamp,
                            const ::Microsoft::Terminal::Core::ControlKeyStates modifiers,
                            const Core::Po...",5,cascadia\TerminalControl\ControlInteractivity.hpp,winrt.Microsoft.Terminal.Control.implementation.ControlInteractivity,ControlInteractivityT<ControlInteractivity>,false,34,ControlInteractivity,1
140260,TYPE_DECL,uint64_t,,,using Timestamp = uint64_t;,9,cascadia\TerminalControl\ControlInteractivity.hpp,Timestamp,,false,120,Timestamp,48
140330,TYPE_DECL,,,,friend class ControlUnitTests::ControlCoreTests,9,cascadia\TerminalControl\ControlInteractivity.hpp,winrt.Microsoft.Terminal.Control.implementation.ControlInteractivity.ControlCoreTests,,false,166,ControlCoreTests,71
140331,TYPE_DECL,,,,friend class ControlUnitTests::ControlInteractivityTests,9,cascadia\TerminalControl\ControlInteractivity.hpp,winrt.Microsoft.Terminal.Control.implementation.ControlInteractivity.ControlInteractivityTests,,false,167,ControlInteractivityTests,72
140365,TYPE_DECL,,,,ControlInteractivity,5,cascadia\TerminalControl\ControlInteractivity.hpp,winrt.Microsoft.Terminal.Control.factory_implementation.ControlInteractivity,"ControlInteractivityT<ControlInteractivity, ControlInteractivity>",false,173,ControlInteractivity,1
140378,TYPE_DECL,,cascadia\TerminalControl\ControlSettings.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalControl\ControlSettings.hpp,cascadia\TerminalControl\ControlSettings.hpp:<global>,,false,1,<global>,6
140381,TYPE_DECL,ANY,,,"using IFontFeatureMap = winrt::Windows::Foundation::Collections::IMap<winrt::hstring, uint32_t>;",1,cascadia\TerminalControl\ControlSettings.hpp,IFontFeatureMap,,false,13,IFontFeatureMap,1
140382,TYPE_DECL,ANY,,,"using IFontAxesMap = winrt::Windows::Foundation::Collections::IMap<winrt::hstring, float>;",1,cascadia\TerminalControl\ControlSettings.hpp,IFontAxesMap,,false,14,IFontAxesMap,2
140388,TYPE_DECL,,,,"struct ControlSettings : public winrt::implements<ControlSettings, Microsoft::Terminal::Control::IControlSettings, Microsoft::Terminal::Control::IControlAppearance, Microsoft::Terminal::Core::ICoreSettings, Microsoft::Terminal::Core::ICoreAppearance>
    {
        // Getters and setters for each *Setting member. We're not using
        // WINRT_PROPERTY for these, because they actually exist inside the
        // _focusedAppearance member. We don't need to reserve another member to
        // hold them.
#define SETTINGS_GEN(type, name, ...) WINRT_PROPERTY(type, name, __VA_ARGS__);
        CORE_SETTINGS(SETTINGS_GEN)
        CONTROL_SETTINGS(SETTINGS_GEN)
#undef SETTINGS_GEN

    private:
        winrt::com_ptr<ControlAppearance> _unfocusedAppearance{ nullptr };
        winrt::com_ptr<ControlAppearance> _focusedAppearance{ nullptr };
        bool _hasUnfocusedAppearance{ false };

    public:
        ControlSettings(const Control::IControlSettings& settings,
                        c...",5,cascadia\TerminalControl\ControlSettings.hpp,winrt.Microsoft.Terminal.Control.implementation.ControlSettings,"winrt.implements<ControlSettings, Microsoft.Terminal.Control.IControlSettings, Microsoft.Terminal.Control.IControlAppearance, Microsoft.Terminal.Core.ICoreSettings, Microsoft.Terminal.Core.ICoreAppearance>",false,18,ControlSettings,1
141869,TYPE_DECL,,cascadia\TerminalControl\EventArgs.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalControl\EventArgs.cpp,cascadia\TerminalControl\EventArgs.cpp:<global>,,false,1,<global>,20
141908,TYPE_DECL,,cascadia\TerminalControl\EventArgs.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalControl\EventArgs.hpp,cascadia\TerminalControl\EventArgs.hpp:<global>,,false,1,<global>,18
141916,TYPE_DECL,,,,"struct FontSizeChangedArgs : public FontSizeChangedArgsT<FontSizeChangedArgs>
    {
    public:
        FontSizeChangedArgs(int32_t width,
                            int32_t height) :
            Width(width),
            Height(height)
        {
        }

        til::property<int32_t> Width;
        til::property<int32_t> Height;
    }",5,cascadia\TerminalControl\EventArgs.hpp,winrt.Microsoft.Terminal.Control.implementation.FontSizeChangedArgs,FontSizeChangedArgsT<FontSizeChangedArgs>,false,27,FontSizeChangedArgs,1
141925,TYPE_DECL,,,,"struct TitleChangedEventArgs : public TitleChangedEventArgsT<TitleChangedEventArgs>
    {
    public:
        TitleChangedEventArgs(hstring title) :
            _Title(title) {}

        WINRT_PROPERTY(hstring, Title);
    }",5,cascadia\TerminalControl\EventArgs.hpp,winrt.Microsoft.Terminal.Control.implementation.TitleChangedEventArgs,TitleChangedEventArgsT<TitleChangedEventArgs>,false,41,TitleChangedEventArgs,2
141932,TYPE_DECL,,,,"struct CopyToClipboardEventArgs : public CopyToClipboardEventArgsT<CopyToClipboardEventArgs>
    {
    public:
        CopyToClipboardEventArgs(hstring text) :
            _text(text),
            _html(),
            _rtf(),
            _formats(static_cast<CopyFormat>(0)) {}

        CopyToClipboardEventArgs(hstring text, hstring html, hstring rtf, Windows::Foundation::IReference<CopyFormat> formats) :
            _text(text),
            _html(html),
            _rtf(rtf),
            _formats(formats) {}

        hstring Text() { return _text; };
        hstring Html() { return _html; };
        hstring Rtf() { return _rtf; };
        Windows::Foundation::IReference<CopyFormat> Formats() { return _formats; };

    private:
        hstring _text;
        hstring _html;
        hstring _rtf;
        Windows::Foundation::IReference<CopyFormat> _formats;
    }",5,cascadia\TerminalControl\EventArgs.hpp,winrt.Microsoft.Terminal.Control.implementation.CopyToClipboardEventArgs,CopyToClipboardEventArgsT<CopyToClipboardEventArgs>,false,50,CopyToClipboardEventArgs,3
141974,TYPE_DECL,,,,"struct ContextMenuRequestedEventArgs : public ContextMenuRequestedEventArgsT<ContextMenuRequestedEventArgs>
    {
    public:
        ContextMenuRequestedEventArgs(winrt::Windows::Foundation::Point pos) :
            _Position(pos) {}

        WINRT_PROPERTY(winrt::Windows::Foundation::Point, Position);
    }",5,cascadia\TerminalControl\EventArgs.hpp,winrt.Microsoft.Terminal.Control.implementation.ContextMenuRequestedEventArgs,ContextMenuRequestedEventArgsT<ContextMenuRequestedEventArgs>,false,77,ContextMenuRequestedEventArgs,4
141981,TYPE_DECL,,,,"struct PasteFromClipboardEventArgs : public PasteFromClipboardEventArgsT<PasteFromClipboardEventArgs>
    {
    public:
        PasteFromClipboardEventArgs(std::function<void(const hstring&)> clipboardDataHandler, bool bracketedPasteEnabled) :
            m_clipboardDataHandler(clipboardDataHandler),
            _BracketedPasteEnabled{ bracketedPasteEnabled } {}

        void HandleClipboardData(hstring value)
        {
            m_clipboardDataHandler(value);
        };

        WINRT_PROPERTY(bool, BracketedPasteEnabled, false);

    private:
        std::function<void(const hstring&)> m_clipboardDataHandler;
    }",5,cascadia\TerminalControl\EventArgs.hpp,winrt.Microsoft.Terminal.Control.implementation.PasteFromClipboardEventArgs,PasteFromClipboardEventArgsT<PasteFromClipboardEventArgs>,false,86,PasteFromClipboardEventArgs,5
141997,TYPE_DECL,,,,"struct OpenHyperlinkEventArgs : public OpenHyperlinkEventArgsT<OpenHyperlinkEventArgs>
    {
    public:
        OpenHyperlinkEventArgs(hstring uri) :
            _uri(uri) {}

        hstring Uri() { return _uri; };

    private:
        hstring _uri;
    }",5,cascadia\TerminalControl\EventArgs.hpp,winrt.Microsoft.Terminal.Control.implementation.OpenHyperlinkEventArgs,OpenHyperlinkEventArgsT<OpenHyperlinkEventArgs>,false,104,OpenHyperlinkEventArgs,6
142010,TYPE_DECL,,,,"struct NoticeEventArgs : public NoticeEventArgsT<NoticeEventArgs>
    {
    public:
        NoticeEventArgs(const NoticeLevel level, const hstring& message) :
            _level(level),
            _message(message) {}

        NoticeLevel Level() { return _level; };
        hstring Message() { return _message; };

    private:
        const NoticeLevel _level;
        const hstring _message;
    }",5,cascadia\TerminalControl\EventArgs.hpp,winrt.Microsoft.Terminal.Control.implementation.NoticeEventArgs,NoticeEventArgsT<NoticeEventArgs>,false,116,NoticeEventArgs,7
142031,TYPE_DECL,,,,"struct ScrollPositionChangedArgs : public ScrollPositionChangedArgsT<ScrollPositionChangedArgs>
    {
    public:
        ScrollPositionChangedArgs(const int viewTop,
                                  const int viewHeight,
                                  const int bufferSize) :
            _ViewTop(viewTop),
            _ViewHeight(viewHeight),
            _BufferSize(bufferSize)
        {
        }

        WINRT_PROPERTY(int32_t, ViewTop);
        WINRT_PROPERTY(int32_t, ViewHeight);
        WINRT_PROPERTY(int32_t, BufferSize);
    }",5,cascadia\TerminalControl\EventArgs.hpp,winrt.Microsoft.Terminal.Control.implementation.ScrollPositionChangedArgs,ScrollPositionChangedArgsT<ScrollPositionChangedArgs>,false,131,ScrollPositionChangedArgs,8
142042,TYPE_DECL,,,,"struct RendererWarningArgs : public RendererWarningArgsT<RendererWarningArgs>
    {
    public:
        RendererWarningArgs(const uint64_t hr) :
            _Result(hr)
        {
        }

        WINRT_PROPERTY(uint64_t, Result);
    }",5,cascadia\TerminalControl\EventArgs.hpp,winrt.Microsoft.Terminal.Control.implementation.RendererWarningArgs,RendererWarningArgsT<RendererWarningArgs>,false,148,RendererWarningArgs,9
142049,TYPE_DECL,,,,"struct TransparencyChangedEventArgs : public TransparencyChangedEventArgsT<TransparencyChangedEventArgs>
    {
    public:
        TransparencyChangedEventArgs(const double opacity) :
            _Opacity(opacity)
        {
        }

        WINRT_PROPERTY(double, Opacity);
    }",5,cascadia\TerminalControl\EventArgs.hpp,winrt.Microsoft.Terminal.Control.implementation.TransparencyChangedEventArgs,TransparencyChangedEventArgsT<TransparencyChangedEventArgs>,false,159,TransparencyChangedEventArgs,10
142056,TYPE_DECL,,,,"struct FoundResultsArgs : public FoundResultsArgsT<FoundResultsArgs>
    {
    public:
        FoundResultsArgs(const bool foundMatch) :
            _FoundMatch(foundMatch)
        {
        }

        WINRT_PROPERTY(bool, FoundMatch);
        WINRT_PROPERTY(int32_t, TotalMatches);
        WINRT_PROPERTY(int32_t, CurrentMatch);
    }",5,cascadia\TerminalControl\EventArgs.hpp,winrt.Microsoft.Terminal.Control.implementation.FoundResultsArgs,FoundResultsArgsT<FoundResultsArgs>,false,170,FoundResultsArgs,11
142065,TYPE_DECL,,,,"struct ShowWindowArgs : public ShowWindowArgsT<ShowWindowArgs>
    {
    public:
        ShowWindowArgs(const bool showOrHide) :
            _ShowOrHide(showOrHide)
        {
        }

        WINRT_PROPERTY(bool, ShowOrHide);
    }",5,cascadia\TerminalControl\EventArgs.hpp,winrt.Microsoft.Terminal.Control.implementation.ShowWindowArgs,ShowWindowArgsT<ShowWindowArgs>,false,183,ShowWindowArgs,12
142072,TYPE_DECL,,,,"struct UpdateSelectionMarkersEventArgs : public UpdateSelectionMarkersEventArgsT<UpdateSelectionMarkersEventArgs>
    {
    public:
        UpdateSelectionMarkersEventArgs(const bool clearMarkers) :
            _ClearMarkers(clearMarkers)
        {
        }

        WINRT_PROPERTY(bool, ClearMarkers, false);
    }",5,cascadia\TerminalControl\EventArgs.hpp,winrt.Microsoft.Terminal.Control.implementation.UpdateSelectionMarkersEventArgs,UpdateSelectionMarkersEventArgsT<UpdateSelectionMarkersEventArgs>,false,194,UpdateSelectionMarkersEventArgs,13
142079,TYPE_DECL,,,,"struct CompletionsChangedEventArgs : public CompletionsChangedEventArgsT<CompletionsChangedEventArgs>
    {
    public:
        CompletionsChangedEventArgs(const winrt::hstring menuJson, const unsigned int replaceLength) :
            _MenuJson(menuJson),
            _ReplacementLength(replaceLength)
        {
        }

        WINRT_PROPERTY(winrt::hstring, MenuJson, L"""");
        WINRT_PROPERTY(uint32_t, ReplacementLength, 0);
    }",5,cascadia\TerminalControl\EventArgs.hpp,winrt.Microsoft.Terminal.Control.implementation.CompletionsChangedEventArgs,CompletionsChangedEventArgsT<CompletionsChangedEventArgs>,false,205,CompletionsChangedEventArgs,14
142088,TYPE_DECL,,,,"struct KeySentEventArgs : public KeySentEventArgsT<KeySentEventArgs>
    {
    public:
        KeySentEventArgs(const WORD vkey, const WORD scanCode, const winrt::Microsoft::Terminal::Core::ControlKeyStates modifiers, const bool keyDown) :
            _VKey(vkey),
            _ScanCode(scanCode),
            _Modifiers(modifiers),
            _KeyDown(keyDown) {}

        WINRT_PROPERTY(WORD, VKey);
        WINRT_PROPERTY(WORD, ScanCode);
        WINRT_PROPERTY(winrt::Microsoft::Terminal::Core::ControlKeyStates, Modifiers);
        WINRT_PROPERTY(bool, KeyDown, false);
    }",5,cascadia\TerminalControl\EventArgs.hpp,winrt.Microsoft.Terminal.Control.implementation.KeySentEventArgs,KeySentEventArgsT<KeySentEventArgs>,false,218,KeySentEventArgs,15
142101,TYPE_DECL,,,,"struct CharSentEventArgs : public CharSentEventArgsT<CharSentEventArgs>
    {
    public:
        CharSentEventArgs(const wchar_t character, const WORD scanCode, const winrt::Microsoft::Terminal::Core::ControlKeyStates modifiers) :
            _Character(character),
            _ScanCode(scanCode),
            _Modifiers(modifiers) {}

        WINRT_PROPERTY(wchar_t, Character);
        WINRT_PROPERTY(WORD, ScanCode);
        WINRT_PROPERTY(winrt::Microsoft::Terminal::Core::ControlKeyStates, Modifiers);
    }",5,cascadia\TerminalControl\EventArgs.hpp,winrt.Microsoft.Terminal.Control.implementation.CharSentEventArgs,CharSentEventArgsT<CharSentEventArgs>,false,233,CharSentEventArgs,16
142112,TYPE_DECL,,,,"struct StringSentEventArgs : public StringSentEventArgsT<StringSentEventArgs>
    {
    public:
        StringSentEventArgs(const winrt::hstring& text) :
            _Text(text) {}

        WINRT_PROPERTY(winrt::hstring, Text);
    }",5,cascadia\TerminalControl\EventArgs.hpp,winrt.Microsoft.Terminal.Control.implementation.StringSentEventArgs,StringSentEventArgsT<StringSentEventArgs>,false,246,StringSentEventArgs,17
142134,TYPE_DECL,,cascadia\TerminalControl\HwndTerminal.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalControl\HwndTerminal.cpp,cascadia\TerminalControl\HwndTerminal.cpp:<global>,,false,1,<global>,7
143340,TYPE_DECL,,cascadia\TerminalControl\HwndTerminal.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalControl\HwndTerminal.hpp,cascadia\TerminalControl\HwndTerminal.hpp:<global>,,false,1,<global>,7
143343,TYPE_DECL,TerminalTheme,,,"typedef struct _TerminalTheme
{
    COLORREF DefaultBackground;
    COLORREF DefaultForeground;
    COLORREF DefaultSelectionBackground;
    float SelectionBackgroundAlpha;
    uint32_t CursorStyle; // This will be converted to DispatchTypes::CursorStyle (size_t), but C# cannot marshal an enum type and have it fit in a size_t.
    COLORREF ColorTable[16];
}",1,cascadia\TerminalControl\HwndTerminal.hpp,_TerminalTheme,,false,16,_TerminalTheme,1
143356,TYPE_DECL,_TerminalTheme,,,"typedef struct _TerminalTheme
{
    COLORREF DefaultBackground;
    COLORREF DefaultForeground;
    COLORREF DefaultSelectionBackground;
    float SelectionBackgroundAlpha;
    uint32_t CursorStyle; // This will be converted to DispatchTypes::CursorStyle (size_t), but C# cannot marshal an enum type and have it fit in a size_t.
    COLORREF ColorTable[16];
} TerminalTheme, *LPTerminalTheme;",3,cascadia\TerminalControl\HwndTerminal.hpp,TerminalTheme,,false,24,TerminalTheme,2
143357,TYPE_DECL,_TerminalTheme*,,,"typedef struct _TerminalTheme
{
    COLORREF DefaultBackground;
    COLORREF DefaultForeground;
    COLORREF DefaultSelectionBackground;
    float SelectionBackgroundAlpha;
    uint32_t CursorStyle; // This will be converted to DispatchTypes::CursorStyle (size_t), but C# cannot marshal an enum type and have it fit in a size_t.
    COLORREF ColorTable[16];
} TerminalTheme, *LPTerminalTheme;",18,cascadia\TerminalControl\HwndTerminal.hpp,LPTerminalTheme,,false,24,LPTerminalTheme,3
143378,TYPE_DECL,,,,"struct HwndTerminal : ::Microsoft::Console::Types::IControlAccessibilityInfo
{
public:
    HwndTerminal(HWND hwnd) noexcept;

    HwndTerminal(const HwndTerminal&) = default;
    HwndTerminal(HwndTerminal&&) = default;
    HwndTerminal& operator=(const HwndTerminal&) = default;
    HwndTerminal& operator=(HwndTerminal&&) = default;
    ~HwndTerminal();

    HRESULT Initialize();
    void Teardown() noexcept;
    void SendOutput(std::wstring_view data);
    HRESULT Refresh(const til::size windowSize, _Out_ til::size* dimensions);
    void RegisterScrollCallback(std::function<void(int, int, int)> callback);
    void RegisterWriteCallback(const void _stdcall callback(wchar_t*));
    ::Microsoft::Console::Render::IRenderData* GetRenderData() const noexcept;
    HWND GetHwnd() const noexcept;

    static LRESULT CALLBACK HwndTerminalWndProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) noexcept;

private:
    wil::unique_hwnd _hwnd;
    FontInfoDesired _desiredFont;
    FontInfo _a...",1,cascadia\TerminalControl\HwndTerminal.hpp,HwndTerminal,Microsoft.Console.Types.IControlAccessibilityInfo,false,49,HwndTerminal,24
143605,TYPE_DECL,,cascadia\TerminalControl\HwndTerminalAutomationPeer.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalControl\HwndTerminalAutomationPeer.cpp,cascadia\TerminalControl\HwndTerminalAutomationPeer.cpp:<global>,,false,1,<global>,7
143877,TYPE_DECL,,cascadia\TerminalControl\HwndTerminalAutomationPeer.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalControl\HwndTerminalAutomationPeer.hpp,cascadia\TerminalControl\HwndTerminalAutomationPeer.hpp:<global>,,false,1,<global>,4
143880,TYPE_DECL,,,,"class HwndTerminalAutomationPeer :
    public ::Microsoft::Console::Types::IUiaEventDispatcher,
    public ::Microsoft::Terminal::TermControlUiaProvider
{
public:
    void RecordKeyEvent(const WORD vkey);

    IFACEMETHODIMP GetPropertyValue(_In_ PROPERTYID idProp,
                                    _Out_ VARIANT* pVariant) noexcept override;

#pragma region IUiaEventDispatcher
    void SignalSelectionChanged() override;
    void SignalTextChanged() override;
    void SignalCursorChanged() override;
    void NotifyNewOutput(std::wstring_view newOutput) override;
#pragma endregion
private:
    void _tryNotify(BSTR string, BSTR activity);
    std::deque<wchar_t> _keyEvents;
    bool _notificationsUnavailable{};
}",1,cascadia\TerminalControl\HwndTerminalAutomationPeer.hpp,HwndTerminalAutomationPeer,Microsoft.Console.Types.IUiaEventDispatcher;Microsoft.Terminal.TermControlUiaProvider,false,24,HwndTerminalAutomationPeer,1
143935,TYPE_DECL,,cascadia\TerminalControl\InteractivityAutomationPeer.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalControl\InteractivityAutomationPeer.cpp,cascadia\TerminalControl\InteractivityAutomationPeer.cpp:<global>,,false,1,<global>,8
144337,TYPE_DECL,,cascadia\TerminalControl\InteractivityAutomationPeer.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalControl\InteractivityAutomationPeer.hpp,cascadia\TerminalControl\InteractivityAutomationPeer.hpp:<global>,,false,1,<global>,6
144345,TYPE_DECL,,,,"struct InteractivityAutomationPeer :
        public InteractivityAutomationPeerT<InteractivityAutomationPeer>,
        ::Microsoft::Console::Types::IUiaEventDispatcher,
        ::Microsoft::Console::Types::IControlAccessibilityInfo
    {
    public:
        InteractivityAutomationPeer(Microsoft::Terminal::Control::implementation::ControlInteractivity* owner);

        void SetControlBounds(const Windows::Foundation::Rect bounds);
        void SetControlPadding(const Core::Padding padding);
        void ParentProvider(Windows::UI::Xaml::Automation::Peers::AutomationPeer parentProvider);

#pragma region IUiaEventDispatcher
        void SignalSelectionChanged() override;
        void SignalTextChanged() override;
        void SignalCursorChanged() override;
        void NotifyNewOutput(std::wstring_view newOutput) override;
#pragma endregion

#pragma region ITextProvider Pattern
        Windows::UI::Xaml::Automation::Provider::ITextRangeProvider RangeFromPoint(Windows::Foundation::Poin...",5,cascadia\TerminalControl\InteractivityAutomationPeer.hpp,winrt.Microsoft.Terminal.Control.implementation.InteractivityAutomationPeer,InteractivityAutomationPeerT<InteractivityAutomationPeer>;Microsoft.Console.Types.IUiaEventDispatcher;Microsoft.Console.Types.IControlAccessibilityInfo,false,36,InteractivityAutomationPeer,1
144556,TYPE_DECL,,cascadia\TerminalControl\KeyChord.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalControl\KeyChord.cpp,cascadia\TerminalControl\KeyChord.cpp:<global>,,false,1,<global>,4
144559,TYPE_DECL,ANY,,,using VirtualKeyModifiers = winrt::Windows::System::VirtualKeyModifiers;,1,cascadia\TerminalControl\KeyChord.cpp,VirtualKeyModifiers,,false,9,VirtualKeyModifiers,1
144764,TYPE_DECL,,cascadia\TerminalControl\KeyChord.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalControl\KeyChord.hpp,cascadia\TerminalControl\KeyChord.hpp:<global>,,false,1,<global>,2
144772,TYPE_DECL,,,,"struct KeyChord : KeyChordT<KeyChord>
    {
        KeyChord() noexcept = default;
        KeyChord(const winrt::Windows::System::VirtualKeyModifiers modifiers, int32_t vkey, int32_t scanCode) noexcept;
        KeyChord(bool ctrl, bool alt, bool shift, bool win, int32_t vkey, int32_t scanCode) noexcept;

        uint64_t Hash() const noexcept;
        bool Equals(const Control::KeyChord& other) const noexcept;

        winrt::Windows::System::VirtualKeyModifiers Modifiers() const noexcept;
        void Modifiers(const winrt::Windows::System::VirtualKeyModifiers value) noexcept;
        int32_t Vkey() const noexcept;
        void Vkey(int32_t value) noexcept;
        int32_t ScanCode() const noexcept;
        void ScanCode(int32_t value) noexcept;

    private:
        winrt::Windows::System::VirtualKeyModifiers _modifiers{};
        int32_t _vkey{};
        int32_t _scanCode{};
    }",5,cascadia\TerminalControl\KeyChord.hpp,winrt.Microsoft.Terminal.Control.implementation.KeyChord,KeyChordT<KeyChord>,false,10,KeyChord,1
144860,TYPE_DECL,,cascadia\TerminalControl\ScrollBarVisualStateManager.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalControl\ScrollBarVisualStateManager.cpp,cascadia\TerminalControl\ScrollBarVisualStateManager.cpp:<global>,,false,1,<global>,4
145017,TYPE_DECL,,cascadia\TerminalControl\ScrollBarVisualStateManager.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalControl\ScrollBarVisualStateManager.hpp,cascadia\TerminalControl\ScrollBarVisualStateManager.hpp:<global>,,false,1,<global>,5
145025,TYPE_DECL,,,,"struct ScrollBarVisualStateManager : ScrollBarVisualStateManagerT<ScrollBarVisualStateManager>
    {
        bool GoToStateCore(winrt::Windows::UI::Xaml::Controls::Control const& control, winrt::Windows::UI::Xaml::FrameworkElement const& templateRoot, hstring const& stateName, winrt::Windows::UI::Xaml::VisualStateGroup const& group, winrt::Windows::UI::Xaml::VisualState const& state, bool useTransitions);

    private:
        winrt::weak_ref<TermControl> _termControl;
        bool _initialized = false;
    }",5,cascadia\TerminalControl\ScrollBarVisualStateManager.hpp,winrt.Microsoft.Terminal.Control.implementation.ScrollBarVisualStateManager,ScrollBarVisualStateManagerT<ScrollBarVisualStateManager>,false,23,ScrollBarVisualStateManager,1
145050,TYPE_DECL,,,,"struct ScrollBarVisualStateManager : ScrollBarVisualStateManagerT<ScrollBarVisualStateManager, implementation::ScrollBarVisualStateManager>
    {
    }",5,cascadia\TerminalControl\ScrollBarVisualStateManager.hpp,winrt.Microsoft.Terminal.Control.factory_implementation.ScrollBarVisualStateManager,"ScrollBarVisualStateManagerT<ScrollBarVisualStateManager, implementation.ScrollBarVisualStateManager>",false,35,ScrollBarVisualStateManager,1
145073,TYPE_DECL,,cascadia\TerminalControl\SearchBoxControl.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalControl\SearchBoxControl.cpp,cascadia\TerminalControl\SearchBoxControl.cpp:<global>,,false,1,<global>,5
145680,TYPE_DECL,,cascadia\TerminalControl\SearchBoxControl.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalControl\SearchBoxControl.hpp,cascadia\TerminalControl\SearchBoxControl.hpp:<global>,,false,1,<global>,2
145688,TYPE_DECL,,,,"struct SearchBoxControl : SearchBoxControlT<SearchBoxControl>
    {
        static constexpr int32_t MaximumTotalResultsToShowInStatus = 999;
        static constexpr std::wstring_view TotalResultsTooHighStatus = L""999+"";
        static constexpr std::wstring_view CurrentIndexTooHighStatus = L""?"";
        static constexpr std::wstring_view StatusDelimiter = L""/"";

        SearchBoxControl();

        void TextBoxKeyDown(const winrt::Windows::Foundation::IInspectable& /*sender*/, const winrt::Windows::UI::Xaml::Input::KeyRoutedEventArgs& e);

        void SetFocusOnTextbox();
        void PopulateTextbox(const winrt::hstring& text);
        bool ContainsFocus();
        void SetStatus(int32_t totalMatches, int32_t currentMatch);
        bool NavigationEnabled();
        void NavigationEnabled(bool enabled);

        void GoBackwardClicked(const winrt::Windows::Foundation::IInspectable& /*sender*/, const winrt::Windows::UI::Xaml::RoutedEventArgs& /*e*/);
        void GoForwardClicked(...",5,cascadia\TerminalControl\SearchBoxControl.hpp,winrt.Microsoft.Terminal.Control.implementation.SearchBoxControl,SearchBoxControlT<SearchBoxControl>,false,22,SearchBoxControl,1
145831,TYPE_DECL,,cascadia\TerminalControl\TSFInputControl.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalControl\TSFInputControl.cpp,cascadia\TerminalControl\TSFInputControl.cpp:<global>,,false,1,<global>,4
146330,TYPE_DECL,,cascadia\TerminalControl\TSFInputControl.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalControl\TSFInputControl.hpp,cascadia\TerminalControl\TSFInputControl.hpp:<global>,,false,1,<global>,4
146338,TYPE_DECL,,,,"struct CursorPositionEventArgs :
        public CursorPositionEventArgsT<CursorPositionEventArgs>
    {
    public:
        CursorPositionEventArgs() = default;

        WINRT_PROPERTY(Windows::Foundation::Point, CurrentPosition);
    }",5,cascadia\TerminalControl\TSFInputControl.hpp,winrt.Microsoft.Terminal.Control.implementation.CursorPositionEventArgs,CursorPositionEventArgsT<CursorPositionEventArgs>,false,11,CursorPositionEventArgs,1
146344,TYPE_DECL,,,,"struct FontInfoEventArgs :
        public FontInfoEventArgsT<FontInfoEventArgs>
    {
    public:
        FontInfoEventArgs() = default;

        WINRT_PROPERTY(Windows::Foundation::Size, FontSize);

        WINRT_PROPERTY(winrt::hstring, FontFace);

        WINRT_PROPERTY(Windows::UI::Text::FontWeight, FontWeight);
    }",5,cascadia\TerminalControl\TSFInputControl.hpp,winrt.Microsoft.Terminal.Control.implementation.FontInfoEventArgs,FontInfoEventArgsT<FontInfoEventArgs>,false,20,FontInfoEventArgs,2
146352,TYPE_DECL,,,,"struct TSFInputControl : TSFInputControlT<TSFInputControl>
    {
    public:
        TSFInputControl();

        void NotifyFocusEnter();
        void NotifyFocusLeave();
        void ClearBuffer();
        void TryRedrawCanvas();

        void Close();

        // -------------------------------- WinRT Events ---------------------------------
        TYPED_EVENT(CurrentCursorPosition, Control::TSFInputControl, Control::CursorPositionEventArgs);
        TYPED_EVENT(CurrentFontInfo, Control::TSFInputControl, Control::FontInfoEventArgs);
        WINRT_CALLBACK(CompositionCompleted, Control::CompositionCompletedEventArgs);

    private:
        void _layoutRequestedHandler(winrt::Windows::UI::Text::Core::CoreTextEditContext sender, const winrt::Windows::UI::Text::Core::CoreTextLayoutRequestedEventArgs& args);
        void _compositionStartedHandler(winrt::Windows::UI::Text::Core::CoreTextEditContext sender, const winrt::Windows::UI::Text::Core::CoreTextCompositionStartedEventArgs& args...",5,cascadia\TerminalControl\TSFInputControl.hpp,winrt.Microsoft.Terminal.Control.implementation.TSFInputControl,TSFInputControlT<TSFInputControl>,false,33,TSFInputControl,3
146525,TYPE_DECL,,cascadia\TerminalControl\TermControl.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalControl\TermControl.cpp,cascadia\TerminalControl\TermControl.cpp:<global>,,false,1,<global>,7
154963,TYPE_DECL,,cascadia\TerminalControl\TermControl.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalControl\TermControl.hpp,cascadia\TerminalControl\TermControl.hpp:<global>,,false,1,<global>,12
154969,TYPE_DECL,,,,struct MouseButtonState,5,cascadia\TerminalControl\TermControl.hpp,Microsoft.Console.VirtualTerminal.MouseButtonState,,false,21,MouseButtonState,1
154975,TYPE_DECL,,,,"struct TermControl : TermControlT<TermControl>
    {
        TermControl(Control::ControlInteractivity content);

        TermControl(IControlSettings settings, Control::IControlAppearance unfocusedAppearance, TerminalConnection::ITerminalConnection connection);

        static Control::TermControl NewControlByAttachingContent(Control::ControlInteractivity content, const Microsoft::Terminal::Control::IKeyBindings& keyBindings);

        winrt::fire_and_forget UpdateControlSettings(Control::IControlSettings settings);
        winrt::fire_and_forget UpdateControlSettings(Control::IControlSettings settings, Control::IControlAppearance unfocusedAppearance);
        IControlSettings Settings() const;

        uint64_t ContentId() const;

        hstring GetProfileName() const;

        bool CopySelectionToClipboard(bool dismissSelection, bool singleLine, const Windows::Foundation::IReference<CopyFormat>& formats);
        void PasteTextFromClipboard();
        void SelectAll();
        b...",5,cascadia\TerminalControl\TermControl.hpp,winrt.Microsoft.Terminal.Control.implementation.TermControl,TermControlT<TermControl>,false,26,TermControl,1
155998,TYPE_DECL,,,,friend struct TermControlT<TermControl>,9,cascadia\TerminalControl\TermControl.hpp,winrt.Microsoft.Terminal.Control.implementation.TermControl.TermControlT<TermControl>,,false,201,TermControlT<TermControl>,168
156007,TYPE_DECL,,,,"struct ScrollBarUpdate
        {
            std::optional<double> newValue;
            double newMaximum;
            double newMinimum;
            double newViewportSize;
        }",9,cascadia\TerminalControl\TermControl.hpp,winrt.Microsoft.Terminal.Control.implementation.TermControl.ScrollBarUpdate,,false,223,ScrollBarUpdate,177
156103,TYPE_DECL,,,,"enum InitializeReason : bool
        {
            Create,
            Reattach
        }",9,cascadia\TerminalControl\TermControl.hpp,winrt.Microsoft.Terminal.Control.implementation.TermControl.InitializeReason,,false,290,InitializeReason,211
156472,TYPE_DECL,_revokers,,,"struct Revokers
        {
            Control::ControlCore::ScrollPositionChanged_revoker coreScrollPositionChanged;
            Control::ControlCore::WarningBell_revoker WarningBell;
            Control::ControlCore::CursorPositionChanged_revoker CursorPositionChanged;
            Control::ControlCore::RendererEnteredErrorState_revoker RendererEnteredErrorState;
            Control::ControlCore::BackgroundColorChanged_revoker BackgroundColorChanged;
            Control::ControlCore::FontSizeChanged_revoker FontSizeChanged;
            Control::ControlCore::TransparencyChanged_revoker TransparencyChanged;
            Control::ControlCore::RaiseNotice_revoker RaiseNotice;
            Control::ControlCore::HoveredHyperlinkChanged_revoker HoveredHyperlinkChanged;
            Control::ControlCore::FoundMatch_revoker FoundMatch;
            Control::ControlCore::UpdateSelectionMarkers_revoker UpdateSelectionMarkers;
            Control::ControlCore::OpenHyperlink_revoker coreOpenHyperlin...",9,cascadia\TerminalControl\TermControl.hpp,winrt.Microsoft.Terminal.Control.implementation.TermControl.Revokers,,false,383,Revokers,275
156589,TYPE_DECL,,,,TermControl,5,cascadia\TerminalControl\TermControl.hpp,winrt.Microsoft.Terminal.Control.factory_implementation.TermControl,"TermControlT<TermControl, TermControl>",false,421,TermControl,1
156610,TYPE_DECL,,cascadia\TerminalControl\TermControlAutomationPeer.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalControl\TermControlAutomationPeer.cpp,cascadia\TerminalControl\TermControlAutomationPeer.cpp:<global>,,false,1,<global>,9
157337,TYPE_DECL,,cascadia\TerminalControl\TermControlAutomationPeer.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalControl\TermControlAutomationPeer.hpp,cascadia\TerminalControl\TermControlAutomationPeer.hpp:<global>,,false,1,<global>,7
157345,TYPE_DECL,,,,"struct TermControlAutomationPeer :
        public TermControlAutomationPeerT<TermControlAutomationPeer>,
        ::Microsoft::Console::Types::IUiaEventDispatcher
    {
    public:
        TermControlAutomationPeer(winrt::com_ptr<Microsoft::Terminal::Control::implementation::TermControl> owner,
                                  const Core::Padding padding,
                                  Control::InteractivityAutomationPeer implementation);

        void UpdateControlBounds();
        void SetControlPadding(const Core::Padding padding);
        void RecordKeyEvent(const WORD vkey);
        void Close();

#pragma region FrameworkElementAutomationPeer
        hstring GetClassNameCore() const;
        Windows::UI::Xaml::Automation::Peers::AutomationControlType GetAutomationControlTypeCore() const;
        hstring GetLocalizedControlTypeCore() const;
        Windows::Foundation::IInspectable GetPatternCore(Windows::UI::Xaml::Automation::Peers::PatternInterface patternInterface) const;
...",5,cascadia\TerminalControl\TermControlAutomationPeer.hpp,winrt.Microsoft.Terminal.Control.implementation.TermControlAutomationPeer,TermControlAutomationPeerT<TermControlAutomationPeer>;Microsoft.Console.Types.IUiaEventDispatcher,false,40,TermControlAutomationPeer,1
157460,TYPE_DECL,,cascadia\TerminalControl\XamlLights.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalControl\XamlLights.cpp,cascadia\TerminalControl\XamlLights.cpp:<global>,,false,1,<global>,5
157658,TYPE_DECL,,cascadia\TerminalControl\XamlLights.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalControl\XamlLights.hpp,cascadia\TerminalControl\XamlLights.hpp:<global>,,false,1,<global>,2
157666,TYPE_DECL,,,,"struct VisualBellLight : VisualBellLightT<VisualBellLight>
    {
        VisualBellLight();

        winrt::hstring GetId();

        static Windows::UI::Xaml::DependencyProperty IsTargetProperty() { return _IsTargetProperty; }

        static bool GetIsTarget(const Windows::UI::Xaml::DependencyObject& target)
        {
            return winrt::unbox_value<bool>(target.GetValue(_IsTargetProperty));
        }

        static void SetIsTarget(const Windows::UI::Xaml::DependencyObject& target, bool value)
        {
            target.SetValue(_IsTargetProperty, winrt::box_value(value));
        }

        void OnConnected(const Windows::UI::Xaml::UIElement& newElement);
        void OnDisconnected(const Windows::UI::Xaml::UIElement& oldElement);

        static void OnIsTargetChanged(const Windows::UI::Xaml::DependencyObject& d, const Windows::UI::Xaml::DependencyPropertyChangedEventArgs& e);

        inline static winrt::hstring GetIdStatic()
        {
            // This specifies t...",5,cascadia\TerminalControl\XamlLights.hpp,winrt.Microsoft.Terminal.Control.implementation.VisualBellLight,VisualBellLightT<VisualBellLight>,false,10,VisualBellLight,1
157764,TYPE_DECL,,cascadia\TerminalControl\XamlUiaTextRange.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalControl\XamlUiaTextRange.cpp,cascadia\TerminalControl\XamlUiaTextRange.cpp:<global>,,false,1,<global>,7
158317,TYPE_DECL,,cascadia\TerminalControl\XamlUiaTextRange.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalControl\XamlUiaTextRange.hpp,cascadia\TerminalControl\XamlUiaTextRange.hpp:<global>,,false,1,<global>,4
158325,TYPE_DECL,,,,"class XamlUiaTextRange :
        public winrt::implements<XamlUiaTextRange, Windows::UI::Xaml::Automation::Provider::ITextRangeProvider>
    {
    public:
        XamlUiaTextRange(::ITextRangeProvider* uiaProvider, Windows::UI::Xaml::Automation::Provider::IRawElementProviderSimple parentProvider) :
            _parentProvider{ parentProvider }
        {
            _uiaProvider.attach(uiaProvider);
        }

#pragma region ITextRangeProvider
        Windows::UI::Xaml::Automation::Provider::ITextRangeProvider Clone() const;
        bool Compare(Windows::UI::Xaml::Automation::Provider::ITextRangeProvider pRange) const;
        int32_t CompareEndpoints(Windows::UI::Xaml::Automation::Text::TextPatternRangeEndpoint endpoint,
                                 Windows::UI::Xaml::Automation::Provider::ITextRangeProvider pTargetRange,
                                 Windows::UI::Xaml::Automation::Text::TextPatternRangeEndpoint targetEndpoint);
        void ExpandToEnclosingUnit(Windows::UI:...",5,cascadia\TerminalControl\XamlUiaTextRange.hpp,winrt.Microsoft.Terminal.Control.implementation.XamlUiaTextRange,"winrt.implements<XamlUiaTextRange, Windows.UI.Xaml.Automation.Provider.ITextRangeProvider>",false,29,XamlUiaTextRange,1
158438,TYPE_DECL,,cascadia\TerminalControl\dll\pch.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalControl\dll\pch.cpp,cascadia\TerminalControl\dll\pch.cpp:<global>,,false,1,<global>,2
158443,TYPE_DECL,,cascadia\TerminalControl\dll\pch.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalControl\dll\pch.hpp,cascadia\TerminalControl\dll\pch.hpp:<global>,,false,1,<global>,1
158456,TYPE_DECL,,cascadia\TerminalControl\init.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalControl\init.cpp,cascadia\TerminalControl\init.cpp:<global>,,false,1,<global>,5
158504,TYPE_DECL,,cascadia\TerminalControl\pch.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalControl\pch.cpp,cascadia\TerminalControl\pch.cpp:<global>,,false,1,<global>,2
158601,TYPE_DECL,,cascadia\TerminalControl\pch.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalControl\pch.hpp,cascadia\TerminalControl\pch.hpp:<global>,,false,1,<global>,47
158607,TYPE_DECL,,cascadia\TerminalCore\ControlKeyStates.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalCore\ControlKeyStates.hpp,cascadia\TerminalCore\ControlKeyStates.hpp:<global>,,false,1,<global>,1
158621,TYPE_DECL,,,,class ControlKeyStates,5,cascadia\TerminalCore\ControlKeyStates.hpp,Microsoft.Terminal.Core.ControlKeyStates,,false,16,ControlKeyStates,1
158628,TYPE_DECL,,,,"class Microsoft::Terminal::Core::ControlKeyStates
{
    struct StaticValue
    {
        DWORD v;
    };

public:
    static constexpr StaticValue RightAltPressed{ RIGHT_ALT_PRESSED };
    static constexpr StaticValue LeftAltPressed{ LEFT_ALT_PRESSED };
    static constexpr StaticValue RightCtrlPressed{ RIGHT_CTRL_PRESSED };
    static constexpr StaticValue LeftCtrlPressed{ LEFT_CTRL_PRESSED };
    static constexpr StaticValue ShiftPressed{ SHIFT_PRESSED };
    static constexpr StaticValue NumlockOn{ NUMLOCK_ON };
    static constexpr StaticValue ScrolllockOn{ SCROLLLOCK_ON };
    static constexpr StaticValue CapslockOn{ CAPSLOCK_ON };
    static constexpr StaticValue EnhancedKey{ ENHANCED_KEY };
    static constexpr StaticValue RightWinPressed{ RIGHT_WIN_PRESSED };
    static constexpr StaticValue LeftWinPressed{ LEFT_WIN_PRESSED };

    constexpr ControlKeyStates() noexcept :
        _value(0) {}

    constexpr ControlKeyStates(StaticValue value) noexcept :
        _value(value.v)...",1,cascadia\TerminalCore\ControlKeyStates.hpp,ControlKeyStates,,false,25,ControlKeyStates,7
158629,TYPE_DECL,,,,"struct StaticValue
    {
        DWORD v;
    }",5,cascadia\TerminalCore\ControlKeyStates.hpp,ControlKeyStates.StaticValue,,false,27,StaticValue,1
158900,TYPE_DECL,,cascadia\TerminalCore\ITerminalInput.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalCore\ITerminalInput.hpp,cascadia\TerminalCore\ITerminalInput.hpp:<global>,,false,1,<global>,2
158906,TYPE_DECL,,,,"class ITerminalInput
    {
    public:
        virtual ~ITerminalInput() {}
        ITerminalInput(const ITerminalInput&) = default;
        ITerminalInput(ITerminalInput&&) = default;
        ITerminalInput& operator=(const ITerminalInput&) = default;
        ITerminalInput& operator=(ITerminalInput&&) = default;

        virtual [[nodiscard]] ::Microsoft::Console::VirtualTerminal::TerminalInput::OutputType SendKeyEvent(const WORD vkey, const WORD scanCode, const ControlKeyStates states, const bool keyDown) = 0;
        virtual [[nodiscard]] ::Microsoft::Console::VirtualTerminal::TerminalInput::OutputType SendMouseEvent(const til::point viewportPos, const unsigned int uiButton, const ControlKeyStates states, const short wheelDelta, const Microsoft::Console::VirtualTerminal::TerminalInput::MouseButtonState state) = 0;
        virtual [[nodiscard]] ::Microsoft::Console::VirtualTerminal::TerminalInput::OutputType SendCharEvent(const wchar_t ch, const WORD scanCode, const ControlKeySta...",5,cascadia\TerminalCore\ITerminalInput.hpp,Microsoft.Terminal.Core.ITerminalInput,,false,10,ITerminalInput,1
159000,TYPE_DECL,,cascadia\TerminalCore\Terminal.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalCore\Terminal.cpp,cascadia\TerminalCore\Terminal.cpp:<global>,,false,1,<global>,12
159020,TYPE_DECL,,,,"struct URegularExpressionInterner
{
    // Interns (caches) URegularExpression instances so that they can be reused. This method is thread-safe.
    // uregex_open is not terribly expensive at ~10us/op, but it's also much more expensive than uregex_clone
    // at ~400ns/op and would effectively double the time it takes to scan the viewport for patterns.
    //
    // An alternative approach would be to not make this method thread-safe and give each
    // Terminal instance its own cache. I'm not sure which approach would have been better.
    ICU::unique_uregex Intern(const std::wstring_view& pattern)
    {
        UErrorCode status = U_ZERO_ERROR;

        {
            const auto guard = _lock.lock_shared();
            if (const auto it = _cache.find(pattern); it != _cache.end())
            {
                return ICU::unique_uregex{ uregex_clone(it->second.re.get(), &status) };
            }
        }

        // Even if the URegularExpression creation failed, we'll insert it...",1,cascadia\TerminalCore\Terminal.cpp,URegularExpressionInterner,,false,1338,URegularExpressionInterner,75
159076,TYPE_DECL,ANY,,,"using PointTree = interval_tree::IntervalTree<til::point, size_t>;",1,cascadia\TerminalCore\Terminal.cpp,PointTree,,false,24,PointTree,1
161820,TYPE_DECL,,,,"struct CacheValue
    {
        ICU::unique_uregex re;
        size_t generation = 0;
    }",5,cascadia\TerminalCore\Terminal.cpp,URegularExpressionInterner.CacheValue,,false,1381,CacheValue,2
161830,TYPE_DECL,,,,"struct CacheKeyHasher
    {
        using is_transparent = void;

        std::size_t operator()(const std::wstring_view& str) const noexcept
        {
            return til::hash(str);
        }
    }",5,cascadia\TerminalCore\Terminal.cpp,URegularExpressionInterner.CacheKeyHasher,,false,1387,CacheKeyHasher,3
161831,TYPE_DECL,void,,,using is_transparent = void;,9,cascadia\TerminalCore\Terminal.cpp,is_transparent,,false,1389,is_transparent,1
162280,TYPE_DECL,,cascadia\TerminalCore\Terminal.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalCore\Terminal.hpp,cascadia\TerminalCore\Terminal.hpp:<global>,,false,1,<global>,13
162292,TYPE_DECL,,,,struct ICoreSettings,5,cascadia\TerminalCore\Terminal.hpp,winrt.Microsoft.Terminal.Core.ICoreSettings,,false,28,ICoreSettings,1
162293,TYPE_DECL,,,,struct ICoreAppearance,5,cascadia\TerminalCore\Terminal.hpp,winrt.Microsoft.Terminal.Core.ICoreAppearance,,false,29,ICoreAppearance,2
162294,TYPE_DECL,,,,struct Scheme,5,cascadia\TerminalCore\Terminal.hpp,winrt.Microsoft.Terminal.Core.Scheme,,false,30,Scheme,3
162295,TYPE_DECL,,,,enum class MatchMode,5,cascadia\TerminalCore\Terminal.hpp,winrt.Microsoft.Terminal.Core.MatchMode,,false,31,MatchMode,4
162299,TYPE_DECL,,,,class AdaptDispatch,5,cascadia\TerminalCore\Terminal.hpp,Microsoft.Console.VirtualTerminal.AdaptDispatch,,false,36,AdaptDispatch,1
162303,TYPE_DECL,,,,class Terminal,5,cascadia\TerminalCore\Terminal.hpp,Microsoft.Terminal.Core.Terminal,,false,41,Terminal,1
162304,TYPE_DECL,,,,"class Microsoft::Terminal::Core::Terminal final :
    public Microsoft::Console::VirtualTerminal::ITerminalApi,
    public Microsoft::Terminal::Core::ITerminalInput,
    public Microsoft::Console::Render::IRenderData
{
    using RenderSettings = Microsoft::Console::Render::RenderSettings;

public:
    struct TestDummyMarker
    {
    };

    static constexpr bool IsInputKey(WORD vkey)
    {
        return vkey != VK_CONTROL &&
               vkey != VK_LCONTROL &&
               vkey != VK_RCONTROL &&
               vkey != VK_MENU &&
               vkey != VK_LMENU &&
               vkey != VK_RMENU &&
               vkey != VK_SHIFT &&
               vkey != VK_LSHIFT &&
               vkey != VK_RSHIFT &&
               vkey != VK_LWIN &&
               vkey != VK_RWIN &&
               vkey != VK_SNAPSHOT;
    }

    Terminal();
    Terminal(TestDummyMarker);

    void Create(til::size viewportSize,
                til::CoordType scrollbackLines,
                Microsoft::Conso...",1,cascadia\TerminalCore\Terminal.hpp,Terminal,Microsoft.Console.VirtualTerminal.ITerminalApi;Microsoft.Terminal.Core.ITerminalInput;Microsoft.Console.Render.IRenderData,false,55,Terminal,6
162305,TYPE_DECL,ANY,,,using RenderSettings = Microsoft::Console::Render::RenderSettings;,5,cascadia\TerminalCore\Terminal.hpp,RenderSettings,,false,60,RenderSettings,1
162306,TYPE_DECL,,,,"struct TestDummyMarker
    {
    }",5,cascadia\TerminalCore\Terminal.hpp,Terminal.TestDummyMarker,,false,63,TestDummyMarker,2
162911,TYPE_DECL,,,,"enum class SelectionInteractionMode
    {
        None,
        Mouse,
        Keyboard,
        Mark
    }",5,cascadia\TerminalCore\Terminal.hpp,Terminal.SelectionInteractionMode,,false,256,SelectionInteractionMode,122
162916,TYPE_DECL,,,,"enum class SelectionDirection
    {
        Left,
        Right,
        Up,
        Down
    }",5,cascadia\TerminalCore\Terminal.hpp,Terminal.SelectionDirection,,false,264,SelectionDirection,123
162921,TYPE_DECL,,,,"enum class SearchDirection
    {
        Forward,
        Backward
    }",5,cascadia\TerminalCore\Terminal.hpp,Terminal.SearchDirection,,false,272,SearchDirection,124
162924,TYPE_DECL,,,,"enum class SelectionExpansion
    {
        Char,
        Word,
        Line, // Mouse selection only!
        Viewport,
        Buffer
    }",5,cascadia\TerminalCore\Terminal.hpp,Terminal.SelectionExpansion,,false,278,SelectionExpansion,125
162930,TYPE_DECL,,,,"enum class SelectionEndpoint
    {
        None = 0,
        Start = 0x1,
        End = 0x2
    }",5,cascadia\TerminalCore\Terminal.hpp,Terminal.SelectionEndpoint,,false,287,SelectionEndpoint,126
163001,TYPE_DECL,ANY,,,"using UpdateSelectionParams = std::optional<std::pair<SelectionDirection, SelectionExpansion>>;",5,cascadia\TerminalCore\Terminal.hpp,UpdateSelectionParams,,false,306,UpdateSelectionParams,138
163055,TYPE_DECL,,,,"struct SelectionAnchors
    {
        til::point start;
        til::point end;
        til::point pivot;
    }",5,cascadia\TerminalCore\Terminal.hpp,Terminal.SelectionAnchors,,false,373,SelectionAnchors,174
163090,TYPE_DECL,,,,"struct KeyEventCodes
    {
        WORD VirtualKey;
        WORD ScanCode;
    }",5,cascadia\TerminalCore\Terminal.hpp,Terminal.KeyEventCodes,,false,420,KeyEventCodes,195
163094,TYPE_DECL,,,,"enum class PromptState : uint32_t
    {
        None = 0,
        Prompt,
        Command,
        Output,
    }",5,cascadia\TerminalCore\Terminal.hpp,Terminal.PromptState,,false,427,PromptState,197
163244,TYPE_DECL,,,,friend class TerminalCoreUnitTests::TerminalBufferTests,5,cascadia\TerminalCore\Terminal.hpp,Terminal.TerminalBufferTests,,false,479,TerminalBufferTests,227
163245,TYPE_DECL,,,,friend class TerminalCoreUnitTests::TerminalApiTest,5,cascadia\TerminalCore\Terminal.hpp,Terminal.TerminalApiTest,,false,480,TerminalApiTest,228
163246,TYPE_DECL,,,,friend class TerminalCoreUnitTests::ConptyRoundtripTests,5,cascadia\TerminalCore\Terminal.hpp,Terminal.ConptyRoundtripTests,,false,481,ConptyRoundtripTests,229
163247,TYPE_DECL,,,,friend class TerminalCoreUnitTests::ScrollTest,5,cascadia\TerminalCore\Terminal.hpp,Terminal.ScrollTest,,false,482,ScrollTest,230
163350,TYPE_DECL,,cascadia\TerminalCore\TerminalApi.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalCore\TerminalApi.cpp,cascadia\TerminalCore\TerminalApi.cpp:<global>,,false,1,<global>,5
164285,TYPE_DECL,,cascadia\TerminalCore\TerminalSelection.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalCore\TerminalSelection.cpp,cascadia\TerminalCore\TerminalSelection.cpp:<global>,,false,1,<global>,4
166537,TYPE_DECL,,cascadia\TerminalCore\pch.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalCore\pch.cpp,cascadia\TerminalCore\pch.cpp:<global>,,false,1,<global>,2
166550,TYPE_DECL,,cascadia\TerminalCore\pch.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalCore\pch.hpp,cascadia\TerminalCore\pch.hpp:<global>,,false,1,<global>,5
166561,TYPE_DECL,,cascadia\TerminalCore\terminalrenderdata.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalCore\terminalrenderdata.cpp,cascadia\TerminalCore\terminalrenderdata.cpp:<global>,,false,1,<global>,4
166974,TYPE_DECL,,cascadia\TerminalCore\tracing.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalCore\tracing.hpp,cascadia\TerminalCore\tracing.hpp:<global>,,false,1,<global>,6
167042,TYPE_DECL,,cascadia\TerminalSettingsEditor\Actions.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\Actions.cpp,cascadia\TerminalSettingsEditor\Actions.cpp:<global>,,false,1,<global>,8
168256,TYPE_DECL,,cascadia\TerminalSettingsEditor\Actions.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\Actions.hpp,cascadia\TerminalSettingsEditor\Actions.hpp:<global>,,false,1,<global>,7
168265,TYPE_DECL,,,,"struct KeyBindingViewModelComparator
    {
        bool operator()(const Editor::KeyBindingViewModel& lhs, const Editor::KeyBindingViewModel& rhs) const
        {
            return lhs.Name() < rhs.Name();
        }
    }",5,cascadia\TerminalSettingsEditor\Actions.hpp,winrt.Microsoft.Terminal.Settings.Editor.implementation.KeyBindingViewModelComparator,,false,15,KeyBindingViewModelComparator,1
168282,TYPE_DECL,,,,"struct ModifyKeyBindingEventArgs : ModifyKeyBindingEventArgsT<ModifyKeyBindingEventArgs>
    {
    public:
        ModifyKeyBindingEventArgs(const Control::KeyChord& oldKeys, const Control::KeyChord& newKeys, const hstring oldActionName, const hstring newActionName) :
            _OldKeys{ oldKeys },
            _NewKeys{ newKeys },
            _OldActionName{ std::move(oldActionName) },
            _NewActionName{ std::move(newActionName) } {}

        WINRT_PROPERTY(Control::KeyChord, OldKeys, nullptr);
        WINRT_PROPERTY(Control::KeyChord, NewKeys, nullptr);
        WINRT_PROPERTY(hstring, OldActionName);
        WINRT_PROPERTY(hstring, NewActionName);
    }",5,cascadia\TerminalSettingsEditor\Actions.hpp,winrt.Microsoft.Terminal.Settings.Editor.implementation.ModifyKeyBindingEventArgs,ModifyKeyBindingEventArgsT<ModifyKeyBindingEventArgs>,false,23,ModifyKeyBindingEventArgs,2
168295,TYPE_DECL,,,,"struct KeyBindingViewModel : KeyBindingViewModelT<KeyBindingViewModel>, ViewModelHelper<KeyBindingViewModel>
    {
    public:
        KeyBindingViewModel(const Windows::Foundation::Collections::IObservableVector<hstring>& availableActions);
        KeyBindingViewModel(const Control::KeyChord& keys, const hstring& name, const Windows::Foundation::Collections::IObservableVector<hstring>& availableActions);

        hstring Name() const { return _CurrentAction; }
        hstring KeyChordText() const { return _KeyChordText; }

        // UIA Text
        hstring EditButtonName() const noexcept;
        hstring CancelButtonName() const noexcept;
        hstring AcceptButtonName() const noexcept;
        hstring DeleteButtonName() const noexcept;

        void EnterHoverMode() { IsHovered(true); };
        void ExitHoverMode() { IsHovered(false); };
        void ActionGotFocus() { IsContainerFocused(true); };
        void ActionLostFocus() { IsContainerFocused(false); };
        void Edi...",5,cascadia\TerminalSettingsEditor\Actions.hpp,winrt.Microsoft.Terminal.Settings.Editor.implementation.KeyBindingViewModel,KeyBindingViewModelT<KeyBindingViewModel>;ViewModelHelper<KeyBindingViewModel>,false,38,KeyBindingViewModel,3
168716,TYPE_DECL,,,,"struct ActionsPageNavigationState : ActionsPageNavigationStateT<ActionsPageNavigationState>
    {
    public:
        ActionsPageNavigationState(const Model::CascadiaSettings& settings) :
            _Settings{ settings } {}

        WINRT_PROPERTY(Model::CascadiaSettings, Settings, nullptr)
    }",5,cascadia\TerminalSettingsEditor\Actions.hpp,winrt.Microsoft.Terminal.Settings.Editor.implementation.ActionsPageNavigationState,ActionsPageNavigationStateT<ActionsPageNavigationState>,false,101,ActionsPageNavigationState,4
168723,TYPE_DECL,,,,"struct Actions : public HasScrollViewer<Actions>, ActionsT<Actions>
    {
    public:
        Actions();

        void OnNavigatedTo(const winrt::Windows::UI::Xaml::Navigation::NavigationEventArgs& e);
        Windows::UI::Xaml::Automation::Peers::AutomationPeer OnCreateAutomationPeer();
        void AddNew_Click(const IInspectable& sender, const Windows::UI::Xaml::RoutedEventArgs& eventArgs);

        WINRT_CALLBACK(PropertyChanged, Windows::UI::Xaml::Data::PropertyChangedEventHandler);
        WINRT_PROPERTY(Editor::ActionsPageNavigationState, State, nullptr);
        WINRT_PROPERTY(Windows::Foundation::Collections::IObservableVector<Editor::KeyBindingViewModel>, KeyBindingList);

    private:
        void _ViewModelPropertyChangedHandler(const Windows::Foundation::IInspectable& senderVM, const Windows::UI::Xaml::Data::PropertyChangedEventArgs& args);
        void _ViewModelDeleteKeyBindingHandler(const Editor::KeyBindingViewModel& senderVM, const Control::KeyChord& args);
       ...",5,cascadia\TerminalSettingsEditor\Actions.hpp,winrt.Microsoft.Terminal.Settings.Editor.implementation.Actions,HasScrollViewer<Actions>;ActionsT<Actions>,false,110,Actions,5
168812,TYPE_DECL,,cascadia\TerminalSettingsEditor\AddProfile.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\AddProfile.cpp,cascadia\TerminalSettingsEditor\AddProfile.cpp:<global>,,false,1,<global>,7
168915,TYPE_DECL,,cascadia\TerminalSettingsEditor\AddProfile.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\AddProfile.hpp,cascadia\TerminalSettingsEditor\AddProfile.hpp:<global>,,false,1,<global>,4
168924,TYPE_DECL,,,,"struct AddProfilePageNavigationState : AddProfilePageNavigationStateT<AddProfilePageNavigationState>
    {
    public:
        AddProfilePageNavigationState(const Model::CascadiaSettings& settings) :
            _Settings{ settings } {}

        void RequestAddNew()
        {
            _AddNewHandlers(winrt::guid{});
        }

        void RequestDuplicate(GUID profile)
        {
            _AddNewHandlers(profile);
        }

        WINRT_PROPERTY(Model::CascadiaSettings, Settings, nullptr)
        WINRT_CALLBACK(AddNew, AddNewArgs);
    }",5,cascadia\TerminalSettingsEditor\AddProfile.hpp,winrt.Microsoft.Terminal.Settings.Editor.implementation.AddProfilePageNavigationState,AddProfilePageNavigationStateT<AddProfilePageNavigationState>,false,26,AddProfilePageNavigationState,1
168945,TYPE_DECL,,,,"struct AddProfile : public HasScrollViewer<AddProfile>, AddProfileT<AddProfile>
    {
    public:
        AddProfile();

        void OnNavigatedTo(const winrt::Windows::UI::Xaml::Navigation::NavigationEventArgs& e);

        void AddNewClick(const IInspectable& sender, const Windows::UI::Xaml::RoutedEventArgs& eventArgs);
        void DuplicateClick(const IInspectable& sender, const Windows::UI::Xaml::RoutedEventArgs& eventArgs);
        void ProfilesSelectionChanged(const IInspectable& sender, const Windows::UI::Xaml::RoutedEventArgs& eventArgs);

        WINRT_PROPERTY(Editor::AddProfilePageNavigationState, State, nullptr);
        WINRT_CALLBACK(PropertyChanged, Windows::UI::Xaml::Data::PropertyChangedEventHandler);
        WINRT_OBSERVABLE_PROPERTY(bool, IsProfileSelected, _PropertyChangedHandlers, nullptr);
    }",5,cascadia\TerminalSettingsEditor\AddProfile.hpp,winrt.Microsoft.Terminal.Settings.Editor.implementation.AddProfile,HasScrollViewer<AddProfile>;AddProfileT<AddProfile>,false,46,AddProfile,2
169007,TYPE_DECL,,cascadia\TerminalSettingsEditor\Appearances.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\Appearances.cpp,cascadia\TerminalSettingsEditor\Appearances.cpp:<global>,,false,1,<global>,7
171024,TYPE_DECL,,cascadia\TerminalSettingsEditor\Appearances.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\Appearances.hpp,cascadia\TerminalSettingsEditor\Appearances.hpp:<global>,,false,1,<global>,7
171033,TYPE_DECL,,,,"struct FontComparator
    {
        bool operator()(const Font& lhs, const Font& rhs) const
        {
            return lhs.LocalizedName() < rhs.LocalizedName();
        }
    }",5,cascadia\TerminalSettingsEditor\Appearances.hpp,winrt.Microsoft.Terminal.Settings.Editor.implementation.FontComparator,,false,28,FontComparator,1
171050,TYPE_DECL,,,,"struct Font : FontT<Font>
    {
    public:
        Font(std::wstring name, std::wstring localizedName, IDWriteFontFamily* family) :
            _Name{ name },
            _LocalizedName{ localizedName }
        {
            _family.copy_from(family);
        }

        hstring ToString() { return _LocalizedName; }
        bool HasPowerlineCharacters();

        WINRT_PROPERTY(hstring, Name);
        WINRT_PROPERTY(hstring, LocalizedName);

    private:
        winrt::com_ptr<IDWriteFontFamily> _family;
        std::optional<bool> _hasPowerlineCharacters;
    }",5,cascadia\TerminalSettingsEditor\Appearances.hpp,winrt.Microsoft.Terminal.Settings.Editor.implementation.Font,FontT<Font>,false,36,Font,2
171077,TYPE_DECL,,,,"struct AppearanceViewModel : AppearanceViewModelT<AppearanceViewModel>, ViewModelHelper<AppearanceViewModel>
    {
    public:
        AppearanceViewModel(const Model::AppearanceConfig& appearance);

        double LineHeight() const noexcept;
        void LineHeight(const double value);
        bool HasLineHeight() const;
        void ClearLineHeight();
        Model::FontConfig LineHeightOverrideSource() const;
        void SetFontWeightFromDouble(double fontWeight);
        void SetBackgroundImageOpacityFromPercentageValue(double percentageValue);
        void SetBackgroundImagePath(winrt::hstring path);

        // background image
        bool UseDesktopBGImage();
        void UseDesktopBGImage(const bool useDesktop);
        bool BackgroundImageSettingsVisible();

        void ClearColorScheme();
        Editor::ColorSchemeViewModel CurrentColorScheme();
        void CurrentColorScheme(const Editor::ColorSchemeViewModel& val);

        WINRT_PROPERTY(bool, IsDefault, false);

...",5,cascadia\TerminalSettingsEditor\Appearances.hpp,winrt.Microsoft.Terminal.Settings.Editor.implementation.AppearanceViewModel,AppearanceViewModelT<AppearanceViewModel>;ViewModelHelper<AppearanceViewModel>,false,57,AppearanceViewModel,3
172139,TYPE_DECL,,,,"struct Appearances : AppearancesT<Appearances>
    {
    public:
        Appearances();

        // font face
        Windows::Foundation::IInspectable CurrentFontFace() const;

        // CursorShape visibility logic
        bool IsVintageCursor() const;

        bool UsingMonospaceFont() const noexcept;
        bool ShowAllFonts() const noexcept;
        void ShowAllFonts(const bool& value);

        fire_and_forget BackgroundImage_Click(const Windows::Foundation::IInspectable& sender, const Windows::UI::Xaml::RoutedEventArgs& e);
        void BIAlignment_Click(const Windows::Foundation::IInspectable& sender, const Windows::UI::Xaml::RoutedEventArgs& e);
        void FontFace_SelectionChanged(const Windows::Foundation::IInspectable& sender, const Windows::UI::Xaml::Controls::SelectionChangedEventArgs& e);

        // manually bind FontWeight
        Windows::Foundation::IInspectable CurrentFontWeight() const;
        void CurrentFontWeight(const Windows::Foundation::IInspectable& ...",5,cascadia\TerminalSettingsEditor\Appearances.hpp,winrt.Microsoft.Terminal.Settings.Editor.implementation.Appearances,AppearancesT<Appearances>,false,109,Appearances,4
172590,TYPE_DECL,,cascadia\TerminalSettingsEditor\ColorSchemeViewModel.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\ColorSchemeViewModel.cpp,cascadia\TerminalSettingsEditor\ColorSchemeViewModel.cpp:<global>,,false,1,<global>,6
173210,TYPE_DECL,,cascadia\TerminalSettingsEditor\ColorSchemeViewModel.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\ColorSchemeViewModel.hpp,cascadia\TerminalSettingsEditor\ColorSchemeViewModel.hpp:<global>,,false,1,<global>,5
173249,TYPE_DECL,,,,"struct ColorSchemeViewModel : ColorSchemeViewModelT<ColorSchemeViewModel>, ViewModelHelper<ColorSchemeViewModel>
    {
    public:
        ColorSchemeViewModel(const Model::ColorScheme scheme, const Editor::ColorSchemesPageViewModel parentPageVM, const Model::CascadiaSettings& settings);

        winrt::hstring Name();
        void Name(winrt::hstring newName);
        hstring ToString();

        bool RequestRename(winrt::hstring newName);

        Editor::ColorTableEntry ColorEntryAt(uint32_t index);
        bool IsDefaultScheme();
        void RefreshIsDefault();

        void DeleteConfirmation_Click(const winrt::Windows::Foundation::IInspectable& sender, const winrt::Windows::UI::Xaml::RoutedEventArgs& e);
        void SetAsDefault_Click(const winrt::Windows::Foundation::IInspectable& sender, const winrt::Windows::UI::Xaml::RoutedEventArgs& e);

        // DON'T YOU DARE ADD A `WINRT_CALLBACK(PropertyChanged` TO A CLASS DERIVED FROM ViewModelHelper. Do this instead:
        usi...",5,cascadia\TerminalSettingsEditor\ColorSchemeViewModel.hpp,winrt.Microsoft.Terminal.Settings.Editor.implementation.ColorSchemeViewModel,ColorSchemeViewModelT<ColorSchemeViewModel>;ViewModelHelper<ColorSchemeViewModel>,false,21,ColorSchemeViewModel,13
173325,TYPE_DECL,,,,"struct ColorTableEntry : ColorTableEntryT<ColorTableEntry>
    {
    public:
        ColorTableEntry(uint8_t index, Windows::UI::Color color);
        ColorTableEntry(std::wstring_view tag, Windows::UI::Color color);

        hstring AccessibleName() const
        {
            return hstring{ fmt::format(FMT_COMPILE(L""{} RGB({}, {}, {})""), _Name, _Color.R, _Color.G, _Color.B) };
        }

        WINRT_CALLBACK(PropertyChanged, Windows::UI::Xaml::Data::PropertyChangedEventHandler);
        WINRT_OBSERVABLE_PROPERTY(Windows::UI::Color, Color, _PropertyChangedHandlers);
        WINRT_OBSERVABLE_PROPERTY(winrt::hstring, Name, _PropertyChangedHandlers);
        WINRT_OBSERVABLE_PROPERTY(IInspectable, Tag, _PropertyChangedHandlers);

    private:
        Windows::UI::Color _color;

        void _PropertyChangedHandler(const Windows::Foundation::IInspectable& sender, const Windows::UI::Xaml::Data::PropertyChangedEventArgs& args);
    }",5,cascadia\TerminalSettingsEditor\ColorSchemeViewModel.hpp,winrt.Microsoft.Terminal.Settings.Editor.implementation.ColorTableEntry,ColorTableEntryT<ColorTableEntry>,false,60,ColorTableEntry,14
173391,TYPE_DECL,,cascadia\TerminalSettingsEditor\ColorSchemes.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\ColorSchemes.cpp,cascadia\TerminalSettingsEditor\ColorSchemes.cpp:<global>,,false,1,<global>,6
173525,TYPE_DECL,,cascadia\TerminalSettingsEditor\ColorSchemes.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\ColorSchemes.hpp,cascadia\TerminalSettingsEditor\ColorSchemes.hpp:<global>,,false,1,<global>,6
173534,TYPE_DECL,,,,"struct ColorSchemes : public HasScrollViewer<ColorSchemes>, ColorSchemesT<ColorSchemes>
    {
    public:
        ColorSchemes();

        void OnNavigatedTo(const winrt::Windows::UI::Xaml::Navigation::NavigationEventArgs& e);

        void AddNew_Click(const winrt::Windows::Foundation::IInspectable& sender, const winrt::Windows::UI::Xaml::RoutedEventArgs& e);
        void ListView_PreviewKeyDown(const winrt::Windows::Foundation::IInspectable& sender, const winrt::Windows::UI::Xaml::Input::KeyRoutedEventArgs& e);

        WINRT_PROPERTY(Model::ColorScheme, CurrentColorScheme, nullptr);
        WINRT_OBSERVABLE_PROPERTY(Editor::ColorSchemesPageViewModel, ViewModel, _PropertyChangedHandlers, nullptr);

        WINRT_CALLBACK(PropertyChanged, Windows::UI::Xaml::Data::PropertyChangedEventHandler);

    private:
        winrt::Windows::UI::Xaml::FrameworkElement::LayoutUpdated_revoker _layoutUpdatedRevoker;
    }",5,cascadia\TerminalSettingsEditor\ColorSchemes.hpp,winrt.Microsoft.Terminal.Settings.Editor.implementation.ColorSchemes,HasScrollViewer<ColorSchemes>;ColorSchemesT<ColorSchemes>,false,14,ColorSchemes,1
173575,TYPE_DECL,,cascadia\TerminalSettingsEditor\ColorSchemesPageViewModel.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\ColorSchemesPageViewModel.cpp,cascadia\TerminalSettingsEditor\ColorSchemesPageViewModel.cpp:<global>,,false,1,<global>,4
174167,TYPE_DECL,,cascadia\TerminalSettingsEditor\ColorSchemesPageViewModel.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\ColorSchemesPageViewModel.hpp,cascadia\TerminalSettingsEditor\ColorSchemesPageViewModel.hpp:<global>,,false,1,<global>,6
174176,TYPE_DECL,,,,"struct ColorSchemesPageViewModel : ColorSchemesPageViewModelT<ColorSchemesPageViewModel>, ViewModelHelper<ColorSchemesPageViewModel>
    {
    public:
        ColorSchemesPageViewModel(const Model::CascadiaSettings& settings);
        void UpdateSettings(const Model::CascadiaSettings& settings);

        void CurrentScheme(const Editor::ColorSchemeViewModel& newSelectedScheme);
        Editor::ColorSchemeViewModel CurrentScheme();
        bool HasCurrentScheme() const noexcept;

        Editor::ColorSchemeViewModel RequestAddNew();
        bool RequestRenameCurrentScheme(winrt::hstring newName);
        void RequestDeleteCurrentScheme();
        void RequestEditSelectedScheme();
        void RequestSetSelectedSchemeAsDefault();

        bool CanDeleteCurrentScheme() const;

        void SchemeListItemClicked(const winrt::Windows::Foundation::IInspectable& sender, const winrt::Windows::UI::Xaml::Controls::ItemClickEventArgs& e);

        // DON'T YOU DARE ADD A `WINRT_CALLBACK(Proper...",5,cascadia\TerminalSettingsEditor\ColorSchemesPageViewModel.hpp,winrt.Microsoft.Terminal.Settings.Editor.implementation.ColorSchemesPageViewModel,ColorSchemesPageViewModelT<ColorSchemesPageViewModel>;ViewModelHelper<ColorSchemesPageViewModel>,false,14,ColorSchemesPageViewModel,1
174263,TYPE_DECL,,cascadia\TerminalSettingsEditor\Converters.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\Converters.cpp,cascadia\TerminalSettingsEditor\Converters.cpp:<global>,,false,1,<global>,4
174511,TYPE_DECL,,cascadia\TerminalSettingsEditor\Converters.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\Converters.hpp,cascadia\TerminalSettingsEditor\Converters.hpp:<global>,,false,1,<global>,2
174520,TYPE_DECL,,,,"struct Converters : ConvertersT<Converters>
    {
        static winrt::hstring AppendPercentageSign(double value);
        static winrt::Windows::UI::Text::FontWeight DoubleToFontWeight(double value);
        static winrt::Windows::UI::Xaml::Media::SolidColorBrush ColorToBrush(winrt::Windows::UI::Color color);
        static double FontWeightToDouble(winrt::Windows::UI::Text::FontWeight fontWeight);
        static bool InvertBoolean(bool value);
        static winrt::Windows::UI::Xaml::Visibility InvertedBooleanToVisibility(bool value);
        static double MaxValueFromPaddingString(winrt::hstring paddingString);
        static int PercentageToPercentageValue(double value);
        static double PercentageValueToPercentage(double value);
        static bool StringsAreNotEqual(winrt::hstring expected, winrt::hstring actual);
        static winrt::Windows::UI::Xaml::Visibility StringNotEmptyToVisibility(winrt::hstring value);
        static winrt::hstring StringOrEmptyIfPlaceholder(...",5,cascadia\TerminalSettingsEditor\Converters.hpp,winrt.Microsoft.Terminal.Settings.Editor.implementation.Converters,ConvertersT<Converters>,false,10,Converters,1
174600,TYPE_DECL,,cascadia\TerminalSettingsEditor\EditColorScheme.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\EditColorScheme.cpp,cascadia\TerminalSettingsEditor\EditColorScheme.cpp:<global>,,false,1,<global>,5
175026,TYPE_DECL,,cascadia\TerminalSettingsEditor\EditColorScheme.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\EditColorScheme.hpp,cascadia\TerminalSettingsEditor\EditColorScheme.hpp:<global>,,false,1,<global>,4
175035,TYPE_DECL,,,,"struct EditColorScheme : public HasScrollViewer<EditColorScheme>, EditColorSchemeT<EditColorScheme>
    {
        EditColorScheme();

        void OnNavigatedTo(const winrt::Windows::UI::Xaml::Navigation::NavigationEventArgs& e);

        void ColorPickerChanged(const winrt::Windows::Foundation::IInspectable& sender, const winrt::Microsoft::UI::Xaml::Controls::ColorChangedEventArgs& args);
        void RenameAccept_Click(const winrt::Windows::Foundation::IInspectable& sender, const winrt::Windows::UI::Xaml::RoutedEventArgs& e);
        void RenameCancel_Click(const winrt::Windows::Foundation::IInspectable& sender, const winrt::Windows::UI::Xaml::RoutedEventArgs& e);
        void NameBox_PreviewKeyDown(const winrt::Windows::Foundation::IInspectable& sender, const winrt::Windows::UI::Xaml::Input::KeyRoutedEventArgs& e);

        WINRT_OBSERVABLE_PROPERTY(Editor::ColorSchemeViewModel, ViewModel, _PropertyChangedHandlers, nullptr);

        WINRT_CALLBACK(PropertyChanged, Windows::UI::X...",5,cascadia\TerminalSettingsEditor\EditColorScheme.hpp,winrt.Microsoft.Terminal.Settings.Editor.implementation.EditColorScheme,HasScrollViewer<EditColorScheme>;EditColorSchemeT<EditColorScheme>,false,12,EditColorScheme,1
175089,TYPE_DECL,,cascadia\TerminalSettingsEditor\EnumEntry.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\EnumEntry.hpp,cascadia\TerminalSettingsEditor\EnumEntry.hpp:<global>,,false,1,<global>,3
175098,TYPE_DECL,winrt.Microsoft.Terminal.Settings.Editor.implementation.EnumEntryComparator<T>,,,"struct EnumEntryComparator
    {
        bool operator()(const Editor::EnumEntry& lhs, const Editor::EnumEntry& rhs) const
        {
            return lhs.EnumValue().as<T>() < rhs.EnumValue().as<T>();
        }
    }",5,cascadia\TerminalSettingsEditor\EnumEntry.hpp,winrt.Microsoft.Terminal.Settings.Editor.implementation.EnumEntryComparator,,false,25,EnumEntryComparator,1
175121,TYPE_DECL,winrt.Microsoft.Terminal.Settings.Editor.implementation.EnumEntryReverseComparator<T>,,,"struct EnumEntryReverseComparator
    {
        bool operator()(const Editor::EnumEntry& lhs, const Editor::EnumEntry& rhs) const
        {
            return lhs.EnumValue().as<T>() > rhs.EnumValue().as<T>();
        }
    }",5,cascadia\TerminalSettingsEditor\EnumEntry.hpp,winrt.Microsoft.Terminal.Settings.Editor.implementation.EnumEntryReverseComparator,,false,34,EnumEntryReverseComparator,2
175144,TYPE_DECL,,,,"struct EnumEntry : EnumEntryT<EnumEntry>
    {
    public:
        EnumEntry(const winrt::hstring enumName, const winrt::Windows::Foundation::IInspectable& enumValue) :
            _EnumName{ enumName },
            _EnumValue{ enumValue } {}

        hstring ToString()
        {
            return EnumName();
        }

        WINRT_CALLBACK(PropertyChanged, Windows::UI::Xaml::Data::PropertyChangedEventHandler);
        WINRT_OBSERVABLE_PROPERTY(winrt::hstring, EnumName, _PropertyChangedHandlers);
        WINRT_OBSERVABLE_PROPERTY(winrt::Windows::Foundation::IInspectable, EnumValue, _PropertyChangedHandlers);
    }",5,cascadia\TerminalSettingsEditor\EnumEntry.hpp,winrt.Microsoft.Terminal.Settings.Editor.implementation.EnumEntry,EnumEntryT<EnumEntry>,false,42,EnumEntry,3
175172,TYPE_DECL,,cascadia\TerminalSettingsEditor\GlobalAppearance.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\GlobalAppearance.cpp,cascadia\TerminalSettingsEditor\GlobalAppearance.cpp:<global>,,false,1,<global>,6
175206,TYPE_DECL,,cascadia\TerminalSettingsEditor\GlobalAppearance.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\GlobalAppearance.hpp,cascadia\TerminalSettingsEditor\GlobalAppearance.hpp:<global>,,false,1,<global>,3
175215,TYPE_DECL,,,,"struct GlobalAppearance : public HasScrollViewer<GlobalAppearance>, GlobalAppearanceT<GlobalAppearance>
    {
    public:
        GlobalAppearance();

        void OnNavigatedTo(const winrt::Windows::UI::Xaml::Navigation::NavigationEventArgs& e);

        WINRT_CALLBACK(PropertyChanged, Windows::UI::Xaml::Data::PropertyChangedEventHandler);
        WINRT_OBSERVABLE_PROPERTY(Editor::GlobalAppearanceViewModel, ViewModel, _PropertyChangedHandlers, nullptr);
    }",5,cascadia\TerminalSettingsEditor\GlobalAppearance.hpp,winrt.Microsoft.Terminal.Settings.Editor.implementation.GlobalAppearance,HasScrollViewer<GlobalAppearance>;GlobalAppearanceT<GlobalAppearance>,false,11,GlobalAppearance,1
175248,TYPE_DECL,,cascadia\TerminalSettingsEditor\GlobalAppearanceViewModel.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\GlobalAppearanceViewModel.cpp,cascadia\TerminalSettingsEditor\GlobalAppearanceViewModel.cpp:<global>,,false,1,<global>,7
176030,TYPE_DECL,,cascadia\TerminalSettingsEditor\GlobalAppearanceViewModel.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\GlobalAppearanceViewModel.hpp,cascadia\TerminalSettingsEditor\GlobalAppearanceViewModel.hpp:<global>,,false,1,<global>,4
176039,TYPE_DECL,,,,"struct GlobalAppearanceViewModel : GlobalAppearanceViewModelT<GlobalAppearanceViewModel>, ViewModelHelper<GlobalAppearanceViewModel>
    {
    public:
        GlobalAppearanceViewModel(Model::GlobalAppSettings globalSettings);

        // DON'T YOU DARE ADD A `WINRT_CALLBACK(PropertyChanged` TO A CLASS DERIVED FROM ViewModelHelper. Do this instead:
        using ViewModelHelper<GlobalAppearanceViewModel>::PropertyChanged;

        WINRT_PROPERTY(Windows::Foundation::Collections::IObservableVector<Model::Theme>, ThemeList, nullptr);
        GETSET_BINDABLE_ENUM_SETTING(NewTabPosition, Model::NewTabPosition, _GlobalSettings.NewTabPosition);
        GETSET_BINDABLE_ENUM_SETTING(TabWidthMode, winrt::Microsoft::UI::Xaml::Controls::TabViewWidthMode, _GlobalSettings.TabWidthMode);

    public:
        // LanguageDisplayConverter maps the given BCP 47 tag to a localized string.
        // For instance ""en-US"" produces ""English (United States)"", while ""de-DE"" produces
        // ""Deutsch (De...",5,cascadia\TerminalSettingsEditor\GlobalAppearanceViewModel.hpp,winrt.Microsoft.Terminal.Settings.Editor.implementation.GlobalAppearanceViewModel,GlobalAppearanceViewModelT<GlobalAppearanceViewModel>;ViewModelHelper<GlobalAppearanceViewModel>,false,12,GlobalAppearanceViewModel,1
176544,TYPE_DECL,,cascadia\TerminalSettingsEditor\Interaction.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\Interaction.cpp,cascadia\TerminalSettingsEditor\Interaction.cpp:<global>,,false,1,<global>,4
176578,TYPE_DECL,,cascadia\TerminalSettingsEditor\Interaction.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\Interaction.hpp,cascadia\TerminalSettingsEditor\Interaction.hpp:<global>,,false,1,<global>,3
176587,TYPE_DECL,,,,"struct Interaction : public HasScrollViewer<Interaction>, InteractionT<Interaction>
    {
        Interaction();

        void OnNavigatedTo(const winrt::Windows::UI::Xaml::Navigation::NavigationEventArgs& e);

        WINRT_CALLBACK(PropertyChanged, Windows::UI::Xaml::Data::PropertyChangedEventHandler);
        WINRT_OBSERVABLE_PROPERTY(Editor::InteractionViewModel, ViewModel, _PropertyChangedHandlers, nullptr);
    }",5,cascadia\TerminalSettingsEditor\Interaction.hpp,winrt.Microsoft.Terminal.Settings.Editor.implementation.Interaction,HasScrollViewer<Interaction>;InteractionT<Interaction>,false,11,Interaction,1
176616,TYPE_DECL,,cascadia\TerminalSettingsEditor\InteractionViewModel.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\InteractionViewModel.cpp,cascadia\TerminalSettingsEditor\InteractionViewModel.cpp:<global>,,false,1,<global>,5
176931,TYPE_DECL,,cascadia\TerminalSettingsEditor\InteractionViewModel.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\InteractionViewModel.hpp,cascadia\TerminalSettingsEditor\InteractionViewModel.hpp:<global>,,false,1,<global>,4
176940,TYPE_DECL,,,,"struct InteractionViewModel : InteractionViewModelT<InteractionViewModel>, ViewModelHelper<InteractionViewModel>
    {
    public:
        InteractionViewModel(Model::GlobalAppSettings globalSettings);

        // DON'T YOU DARE ADD A `WINRT_CALLBACK(PropertyChanged` TO A CLASS DERIVED FROM ViewModelHelper. Do this instead:
        using ViewModelHelper<InteractionViewModel>::PropertyChanged;

        GETSET_BINDABLE_ENUM_SETTING(TabSwitcherMode, Model::TabSwitcherMode, _GlobalSettings.TabSwitcherMode);
        GETSET_BINDABLE_ENUM_SETTING(CopyFormat, winrt::Microsoft::Terminal::Control::CopyFormat, _GlobalSettings.CopyFormatting);

        PERMANENT_OBSERVABLE_PROJECTED_SETTING(_GlobalSettings, CopyOnSelect);
        PERMANENT_OBSERVABLE_PROJECTED_SETTING(_GlobalSettings, TrimBlockSelection);
        PERMANENT_OBSERVABLE_PROJECTED_SETTING(_GlobalSettings, TrimPaste);
        PERMANENT_OBSERVABLE_PROJECTED_SETTING(_GlobalSettings, SnapToGridOnResize);
        PERMANENT_OBSERVABLE_PR...",5,cascadia\TerminalSettingsEditor\InteractionViewModel.hpp,winrt.Microsoft.Terminal.Settings.Editor.implementation.InteractionViewModel,InteractionViewModelT<InteractionViewModel>;ViewModelHelper<InteractionViewModel>,false,12,InteractionViewModel,1
177386,TYPE_DECL,,cascadia\TerminalSettingsEditor\KeyChordListener.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\KeyChordListener.cpp,cascadia\TerminalSettingsEditor\KeyChordListener.cpp:<global>,,false,1,<global>,5
177742,TYPE_DECL,,cascadia\TerminalSettingsEditor\KeyChordListener.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\KeyChordListener.hpp,cascadia\TerminalSettingsEditor\KeyChordListener.hpp:<global>,,false,1,<global>,3
177751,TYPE_DECL,,,,"struct KeyChordListener : KeyChordListenerT<KeyChordListener>
    {
    public:
        KeyChordListener();

        void KeyChordTextBox_KeyDown(const Windows::Foundation::IInspectable& sender, const Windows::UI::Xaml::Input::KeyRoutedEventArgs& e);

        DEPENDENCY_PROPERTY(Control::KeyChord, Keys);

    private:
        static void _InitializeProperties();
        static void _OnKeysChanged(const Windows::UI::Xaml::DependencyObject& d, const Windows::UI::Xaml::DependencyPropertyChangedEventArgs& e);
    }",5,cascadia\TerminalSettingsEditor\KeyChordListener.hpp,winrt.Microsoft.Terminal.Settings.Editor.implementation.KeyChordListener,KeyChordListenerT<KeyChordListener>,false,11,KeyChordListener,1
177825,TYPE_DECL,,cascadia\TerminalSettingsEditor\Launch.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\Launch.cpp,cascadia\TerminalSettingsEditor\Launch.cpp:<global>,,false,1,<global>,6
177930,TYPE_DECL,,cascadia\TerminalSettingsEditor\Launch.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\Launch.hpp,cascadia\TerminalSettingsEditor\Launch.hpp:<global>,,false,1,<global>,3
177939,TYPE_DECL,,,,"struct Launch : public HasScrollViewer<Launch>, LaunchT<Launch>
    {
    public:
        Launch();

        void OnNavigatedTo(const winrt::Windows::UI::Xaml::Navigation::NavigationEventArgs& e);

        WINRT_CALLBACK(PropertyChanged, Windows::UI::Xaml::Data::PropertyChangedEventHandler);
        WINRT_OBSERVABLE_PROPERTY(Editor::LaunchViewModel, ViewModel, _PropertyChangedHandlers, nullptr);
    }",5,cascadia\TerminalSettingsEditor\Launch.hpp,winrt.Microsoft.Terminal.Settings.Editor.implementation.Launch,HasScrollViewer<Launch>;LaunchT<Launch>,false,11,Launch,1
177981,TYPE_DECL,,cascadia\TerminalSettingsEditor\LaunchViewModel.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\LaunchViewModel.cpp,cascadia\TerminalSettingsEditor\LaunchViewModel.cpp:<global>,,false,1,<global>,6
179002,TYPE_DECL,,cascadia\TerminalSettingsEditor\LaunchViewModel.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\LaunchViewModel.hpp,cascadia\TerminalSettingsEditor\LaunchViewModel.hpp:<global>,,false,1,<global>,4
179011,TYPE_DECL,,,,"struct LaunchViewModel : LaunchViewModelT<LaunchViewModel>, ViewModelHelper<LaunchViewModel>
    {
    public:
        LaunchViewModel(Model::CascadiaSettings settings);

        winrt::hstring LaunchParametersCurrentValue();
        double InitialPosX();
        double InitialPosY();
        void InitialPosX(double xCoord);
        void InitialPosY(double yCoord);
        void UseDefaultLaunchPosition(bool useDefaultPosition);
        bool UseDefaultLaunchPosition();

        IInspectable CurrentDefaultProfile();
        void CurrentDefaultProfile(const IInspectable& value);
        winrt::Windows::Foundation::Collections::IObservableVector<Model::Profile> DefaultProfiles() const;

        IInspectable CurrentDefaultTerminal();
        void CurrentDefaultTerminal(const IInspectable& value);
        winrt::Windows::Foundation::Collections::IObservableVector<Model::DefaultTerminal> DefaultTerminals() const;

        // We cannot use the macro for LaunchMode because we want to insert ...",5,cascadia\TerminalSettingsEditor\LaunchViewModel.hpp,winrt.Microsoft.Terminal.Settings.Editor.implementation.LaunchViewModel,LaunchViewModelT<LaunchViewModel>;ViewModelHelper<LaunchViewModel>,false,12,LaunchViewModel,1
179557,TYPE_DECL,,cascadia\TerminalSettingsEditor\MainPage.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\MainPage.cpp,cascadia\TerminalSettingsEditor\MainPage.cpp:<global>,,false,1,<global>,20
181743,TYPE_DECL,,cascadia\TerminalSettingsEditor\MainPage.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\MainPage.hpp,cascadia\TerminalSettingsEditor\MainPage.hpp:<global>,,false,1,<global>,4
181752,TYPE_DECL,,,,"struct Breadcrumb : BreadcrumbT<Breadcrumb>
    {
        Breadcrumb(IInspectable tag, winrt::hstring label, BreadcrumbSubPage subPage) :
            _Tag{ tag },
            _Label{ label },
            _SubPage{ subPage } {}

        hstring ToString() { return _Label; }

        WINRT_PROPERTY(IInspectable, Tag);
        WINRT_PROPERTY(winrt::hstring, Label);
        WINRT_PROPERTY(BreadcrumbSubPage, SubPage);
    }",5,cascadia\TerminalSettingsEditor\MainPage.hpp,winrt.Microsoft.Terminal.Settings.Editor.implementation.Breadcrumb,BreadcrumbT<Breadcrumb>,false,12,Breadcrumb,1
181769,TYPE_DECL,,,,"struct MainPage : MainPageT<MainPage>
    {
        MainPage() = delete;
        MainPage(const Model::CascadiaSettings& settings);

        void UpdateSettings(const Model::CascadiaSettings& settings);

        void OpenJsonKeyDown(const Windows::Foundation::IInspectable& sender, const Windows::UI::Xaml::Input::KeyRoutedEventArgs& args);
        void OpenJsonTapped(const Windows::Foundation::IInspectable& sender, const Windows::UI::Xaml::Input::TappedRoutedEventArgs& args);
        void SettingsNav_Loaded(const Windows::Foundation::IInspectable& sender, const Windows::UI::Xaml::RoutedEventArgs& args);
        void SettingsNav_ItemInvoked(const Microsoft::UI::Xaml::Controls::NavigationView& sender, const Microsoft::UI::Xaml::Controls::NavigationViewItemInvokedEventArgs& args);
        void SaveButton_Click(const Windows::Foundation::IInspectable& sender, const Windows::UI::Xaml::RoutedEventArgs& args);
        void ResetButton_Click(const Windows::Foundation::IInspectable& sender, c...",5,cascadia\TerminalSettingsEditor\MainPage.hpp,winrt.Microsoft.Terminal.Settings.Editor.implementation.MainPage,MainPageT<MainPage>,false,26,MainPage,2
181939,TYPE_DECL,,cascadia\TerminalSettingsEditor\PercentageSignConverter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\PercentageSignConverter.cpp,cascadia\TerminalSettingsEditor\PercentageSignConverter.cpp:<global>,,false,1,<global>,4
181992,TYPE_DECL,,cascadia\TerminalSettingsEditor\PercentageSignConverter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\PercentageSignConverter.hpp,cascadia\TerminalSettingsEditor\PercentageSignConverter.hpp:<global>,,false,1,<global>,3
182004,TYPE_DECL,,cascadia\TerminalSettingsEditor\PreviewConnection.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\PreviewConnection.cpp,cascadia\TerminalSettingsEditor\PreviewConnection.cpp:<global>,,false,1,<global>,4
182084,TYPE_DECL,,cascadia\TerminalSettingsEditor\PreviewConnection.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\PreviewConnection.hpp,cascadia\TerminalSettingsEditor\PreviewConnection.hpp:<global>,,false,1,<global>,2
182093,TYPE_DECL,,,,"class PreviewConnection : public winrt::implements<PreviewConnection, winrt::Microsoft::Terminal::TerminalConnection::ITerminalConnection>
    {
    public:
        PreviewConnection() noexcept;

        void Initialize(const Windows::Foundation::Collections::ValueSet& settings) noexcept;
        void Start() noexcept;
        void WriteInput(const hstring& data);
        void Resize(uint32_t rows, uint32_t columns) noexcept;
        void Close() noexcept;

        void DisplayPowerlineGlyphs(bool d) noexcept;

        winrt::Microsoft::Terminal::TerminalConnection::ConnectionState State() const noexcept { return winrt::Microsoft::Terminal::TerminalConnection::ConnectionState::Connected; }

        WINRT_CALLBACK(TerminalOutput, winrt::Microsoft::Terminal::TerminalConnection::TerminalOutputHandler);
        TYPED_EVENT(StateChanged, winrt::Microsoft::Terminal::TerminalConnection::ITerminalConnection, IInspectable);

    private:
        bool _displayPowerlineGlyphs{ false };
    }",5,cascadia\TerminalSettingsEditor\PreviewConnection.hpp,winrt.Microsoft.Terminal.Settings.Editor.implementation.PreviewConnection,"winrt.implements<PreviewConnection, winrt.Microsoft.Terminal.TerminalConnection.ITerminalConnection>",false,19,PreviewConnection,1
182223,TYPE_DECL,,cascadia\TerminalSettingsEditor\ProfileViewModel.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\ProfileViewModel.cpp,cascadia\TerminalSettingsEditor\ProfileViewModel.cpp:<global>,,false,1,<global>,8
183267,TYPE_DECL,,cascadia\TerminalSettingsEditor\ProfileViewModel.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\ProfileViewModel.hpp,cascadia\TerminalSettingsEditor\ProfileViewModel.hpp:<global>,,false,1,<global>,7
183276,TYPE_DECL,,,,"struct NavigateToProfileArgs : NavigateToProfileArgsT<NavigateToProfileArgs>
    {
    public:
        NavigateToProfileArgs(ProfileViewModel profile, Editor::IHostedInWindow windowRoot) :
            _Profile(profile),
            _WindowRoot(windowRoot) {}

        Editor::IHostedInWindow WindowRoot() const noexcept { return _WindowRoot; }
        Editor::ProfileViewModel Profile() const noexcept { return _Profile; }

    private:
        Editor::IHostedInWindow _WindowRoot;
        Editor::ProfileViewModel _Profile{ nullptr };
    }",5,cascadia\TerminalSettingsEditor\ProfileViewModel.hpp,winrt.Microsoft.Terminal.Settings.Editor.implementation.NavigateToProfileArgs,NavigateToProfileArgsT<NavigateToProfileArgs>,false,15,NavigateToProfileArgs,1
183305,TYPE_DECL,,,,"struct ProfileViewModel : ProfileViewModelT<ProfileViewModel>, ViewModelHelper<ProfileViewModel>
    {
    public:
        // font face
        static void UpdateFontList() noexcept;
        static Windows::Foundation::Collections::IObservableVector<Editor::Font> CompleteFontList() noexcept { return _FontList; };
        static Windows::Foundation::Collections::IObservableVector<Editor::Font> MonospaceFontList() noexcept { return _MonospaceFontList; };
        static Editor::Font FindFontWithLocalizedName(winrt::hstring const& name) noexcept;

        ProfileViewModel(const Model::Profile& profile, const Model::CascadiaSettings& settings);
        Model::TerminalSettings TermSettings() const;
        void DeleteProfile();

        void SetupAppearances(Windows::Foundation::Collections::IObservableVector<Editor::ColorSchemeViewModel> schemesList);

        // bell style bits
        bool IsBellStyleFlagSet(const uint32_t flag);
        void SetBellStyleAudible(winrt::Windows::Foundat...",5,cascadia\TerminalSettingsEditor\ProfileViewModel.hpp,winrt.Microsoft.Terminal.Settings.Editor.implementation.ProfileViewModel,ProfileViewModelT<ProfileViewModel>;ViewModelHelper<ProfileViewModel>,false,30,ProfileViewModel,2
185577,TYPE_DECL,,,,"struct DeleteProfileEventArgs :
        public DeleteProfileEventArgsT<DeleteProfileEventArgs>
    {
    public:
        DeleteProfileEventArgs(guid profileGuid) :
            _ProfileGuid(profileGuid) {}

        guid ProfileGuid() const noexcept { return _ProfileGuid; }

    private:
        guid _ProfileGuid{};
    }",5,cascadia\TerminalSettingsEditor\ProfileViewModel.hpp,winrt.Microsoft.Terminal.Settings.Editor.implementation.DeleteProfileEventArgs,DeleteProfileEventArgsT<DeleteProfileEventArgs>,false,132,DeleteProfileEventArgs,3
185620,TYPE_DECL,,cascadia\TerminalSettingsEditor\Profiles_Advanced.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\Profiles_Advanced.cpp,cascadia\TerminalSettingsEditor\Profiles_Advanced.cpp:<global>,,false,1,<global>,8
185665,TYPE_DECL,,cascadia\TerminalSettingsEditor\Profiles_Advanced.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\Profiles_Advanced.hpp,cascadia\TerminalSettingsEditor\Profiles_Advanced.hpp:<global>,,false,1,<global>,4
185674,TYPE_DECL,,,,"struct Profiles_Advanced : public HasScrollViewer<Profiles_Advanced>, Profiles_AdvancedT<Profiles_Advanced>
    {
    public:
        Profiles_Advanced();

        void OnNavigatedTo(const Windows::UI::Xaml::Navigation::NavigationEventArgs& e);
        void OnNavigatedFrom(const Windows::UI::Xaml::Navigation::NavigationEventArgs& e);

        WINRT_CALLBACK(PropertyChanged, Windows::UI::Xaml::Data::PropertyChangedEventHandler);
        WINRT_PROPERTY(Editor::ProfileViewModel, Profile, nullptr);

    private:
        Windows::UI::Xaml::Data::INotifyPropertyChanged::PropertyChanged_revoker _ViewModelChangedRevoker;
    }",5,cascadia\TerminalSettingsEditor\Profiles_Advanced.hpp,winrt.Microsoft.Terminal.Settings.Editor.implementation.Profiles_Advanced,HasScrollViewer<Profiles_Advanced>;Profiles_AdvancedT<Profiles_Advanced>,false,12,Profiles_Advanced,1
185717,TYPE_DECL,,cascadia\TerminalSettingsEditor\Profiles_Appearance.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\Profiles_Appearance.cpp,cascadia\TerminalSettingsEditor\Profiles_Appearance.cpp:<global>,,false,1,<global>,9
185969,TYPE_DECL,,cascadia\TerminalSettingsEditor\Profiles_Appearance.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\Profiles_Appearance.hpp,cascadia\TerminalSettingsEditor\Profiles_Appearance.hpp:<global>,,false,1,<global>,4
185978,TYPE_DECL,,,,"struct Profiles_Appearance : public HasScrollViewer<Profiles_Appearance>, Profiles_AppearanceT<Profiles_Appearance>
    {
    public:
        Profiles_Appearance();

        void OnNavigatedTo(const Windows::UI::Xaml::Navigation::NavigationEventArgs& e);
        void OnNavigatedFrom(const Windows::UI::Xaml::Navigation::NavigationEventArgs& e);

        void CreateUnfocusedAppearance_Click(const Windows::Foundation::IInspectable& sender, const Windows::UI::Xaml::RoutedEventArgs& e);
        void DeleteUnfocusedAppearance_Click(const Windows::Foundation::IInspectable& sender, const Windows::UI::Xaml::RoutedEventArgs& e);

        Editor::IHostedInWindow WindowRoot() { return _windowRoot; };

        WINRT_CALLBACK(PropertyChanged, Windows::UI::Xaml::Data::PropertyChangedEventHandler);
        WINRT_PROPERTY(Editor::ProfileViewModel, Profile, nullptr);

    private:
        void _onProfilePropertyChanged(const IInspectable&, const PropertyChangedEventArgs&) const;
        bool _looksLi...",5,cascadia\TerminalSettingsEditor\Profiles_Appearance.hpp,winrt.Microsoft.Terminal.Settings.Editor.implementation.Profiles_Appearance,HasScrollViewer<Profiles_Appearance>;Profiles_AppearanceT<Profiles_Appearance>,false,12,Profiles_Appearance,1
186087,TYPE_DECL,,cascadia\TerminalSettingsEditor\Profiles_Base.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\Profiles_Base.cpp,cascadia\TerminalSettingsEditor\Profiles_Base.cpp:<global>,,false,1,<global>,7
186491,TYPE_DECL,,cascadia\TerminalSettingsEditor\Profiles_Base.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\Profiles_Base.hpp,cascadia\TerminalSettingsEditor\Profiles_Base.hpp:<global>,,false,1,<global>,4
186500,TYPE_DECL,,,,"struct Profiles_Base : public HasScrollViewer<Profiles_Base>, Profiles_BaseT<Profiles_Base>
    {
    public:
        Profiles_Base();

        void OnNavigatedTo(const Windows::UI::Xaml::Navigation::NavigationEventArgs& e);
        void OnNavigatedFrom(const Windows::UI::Xaml::Navigation::NavigationEventArgs& e);

        fire_and_forget StartingDirectory_Click(const Windows::Foundation::IInspectable& sender, const Windows::UI::Xaml::RoutedEventArgs& e);
        fire_and_forget Icon_Click(const Windows::Foundation::IInspectable& sender, const Windows::UI::Xaml::RoutedEventArgs& e);
        fire_and_forget Commandline_Click(const Windows::Foundation::IInspectable& sender, const Windows::UI::Xaml::RoutedEventArgs& e);
        void Appearance_Click(const Windows::Foundation::IInspectable& sender, const Windows::UI::Xaml::RoutedEventArgs& e);
        void Advanced_Click(const Windows::Foundation::IInspectable& sender, const Windows::UI::Xaml::RoutedEventArgs& e);
        void DeleteCon...",5,cascadia\TerminalSettingsEditor\Profiles_Base.hpp,winrt.Microsoft.Terminal.Settings.Editor.implementation.Profiles_Base,HasScrollViewer<Profiles_Base>;Profiles_BaseT<Profiles_Base>,false,12,Profiles_Base,1
186571,TYPE_DECL,,cascadia\TerminalSettingsEditor\Rendering.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\Rendering.cpp,cascadia\TerminalSettingsEditor\Rendering.cpp:<global>,,false,1,<global>,4
186605,TYPE_DECL,,cascadia\TerminalSettingsEditor\Rendering.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\Rendering.hpp,cascadia\TerminalSettingsEditor\Rendering.hpp:<global>,,false,1,<global>,3
186614,TYPE_DECL,,,,"struct Rendering : public HasScrollViewer<Rendering>, RenderingT<Rendering>
    {
        Rendering();

        void OnNavigatedTo(const winrt::Windows::UI::Xaml::Navigation::NavigationEventArgs& e);

        WINRT_CALLBACK(PropertyChanged, Windows::UI::Xaml::Data::PropertyChangedEventHandler);
        WINRT_OBSERVABLE_PROPERTY(Editor::RenderingViewModel, ViewModel, _PropertyChangedHandlers, nullptr);
    }",5,cascadia\TerminalSettingsEditor\Rendering.hpp,winrt.Microsoft.Terminal.Settings.Editor.implementation.Rendering,HasScrollViewer<Rendering>;RenderingT<Rendering>,false,11,Rendering,1
186641,TYPE_DECL,,cascadia\TerminalSettingsEditor\RenderingViewModel.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\RenderingViewModel.cpp,cascadia\TerminalSettingsEditor\RenderingViewModel.cpp:<global>,,false,1,<global>,4
186661,TYPE_DECL,,cascadia\TerminalSettingsEditor\RenderingViewModel.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\RenderingViewModel.hpp,cascadia\TerminalSettingsEditor\RenderingViewModel.hpp:<global>,,false,1,<global>,3
186670,TYPE_DECL,,,,"struct RenderingViewModel : RenderingViewModelT<RenderingViewModel>, ViewModelHelper<RenderingViewModel>
    {
        explicit RenderingViewModel(Model::CascadiaSettings settings) noexcept;

        PERMANENT_OBSERVABLE_PROJECTED_SETTING(_settings.ProfileDefaults(), UseAtlasEngine);
        PERMANENT_OBSERVABLE_PROJECTED_SETTING(_settings.GlobalSettings(), ForceFullRepaintRendering);
        PERMANENT_OBSERVABLE_PROJECTED_SETTING(_settings.GlobalSettings(), SoftwareRendering);

    private:
        Model::CascadiaSettings _settings{ nullptr };
    }",5,cascadia\TerminalSettingsEditor\RenderingViewModel.hpp,winrt.Microsoft.Terminal.Settings.Editor.implementation.RenderingViewModel,RenderingViewModelT<RenderingViewModel>;ViewModelHelper<RenderingViewModel>,false,11,RenderingViewModel,1
186899,TYPE_DECL,,cascadia\TerminalSettingsEditor\SettingContainer.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\SettingContainer.cpp,cascadia\TerminalSettingsEditor\SettingContainer.cpp:<global>,,false,1,<global>,5
187499,TYPE_DECL,,cascadia\TerminalSettingsEditor\SettingContainer.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\SettingContainer.hpp,cascadia\TerminalSettingsEditor\SettingContainer.hpp:<global>,,false,1,<global>,3
187508,TYPE_DECL,,,,"struct SettingContainer : SettingContainerT<SettingContainer>
    {
    public:
        SettingContainer();

        void OnApplyTemplate();

        DEPENDENCY_PROPERTY(Windows::Foundation::IInspectable, Header);
        DEPENDENCY_PROPERTY(hstring, HelpText);
        DEPENDENCY_PROPERTY(hstring, CurrentValue);
        DEPENDENCY_PROPERTY(bool, HasSettingValue);
        DEPENDENCY_PROPERTY(bool, StartExpanded);
        DEPENDENCY_PROPERTY(IInspectable, SettingOverrideSource);
        TYPED_EVENT(ClearSettingValue, Editor::SettingContainer, Windows::Foundation::IInspectable);

    private:
        static void _InitializeProperties();
        static void _OnHasSettingValueChanged(const Windows::UI::Xaml::DependencyObject& d, const Windows::UI::Xaml::DependencyPropertyChangedEventArgs& e);
        static hstring _GenerateOverrideMessage(const IInspectable& settingOrigin);
        void _UpdateOverrideSystem();
    }",5,cascadia\TerminalSettingsEditor\SettingContainer.hpp,winrt.Microsoft.Terminal.Settings.Editor.implementation.SettingContainer,SettingContainerT<SettingContainer>,false,25,SettingContainer,1
187744,TYPE_DECL,,cascadia\TerminalSettingsEditor\Utils.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\Utils.cpp,cascadia\TerminalSettingsEditor\Utils.cpp:<global>,,false,1,<global>,4
187819,TYPE_DECL,,cascadia\TerminalSettingsEditor\Utils.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\Utils.hpp,cascadia\TerminalSettingsEditor\Utils.hpp:<global>,,false,1,<global>,1
187871,TYPE_DECL,HasScrollViewer<T>,,,"struct HasScrollViewer
{
    // When the ScrollViewer scrolls, dismiss any popups we might have.
    void ViewChanging(const winrt::Windows::Foundation::IInspectable& sender,
                      const winrt::Windows::UI::Xaml::Controls::ScrollViewerViewChangingEventArgs& /*e*/)
    {
        // Inside this struct, we can't get at the XamlRoot() that our subclass
        // implements. I mean, _we_ can, but when XAML does its code
        // generation, _XAML_ won't be able to figure it out.
        //
        // Fortunately for us, we don't need to! The sender is a UIElement, so
        // we can just get _their_ XamlRoot().
        if (const auto& uielem{ sender.try_as<winrt::Windows::UI::Xaml::UIElement>() })
        {
            DismissAllPopups(uielem.XamlRoot());
        }
    }
}",1,cascadia\TerminalSettingsEditor\Utils.hpp,HasScrollViewer,,false,123,HasScrollViewer,3
187896,TYPE_DECL,,cascadia\TerminalSettingsEditor\ViewModelHelpers.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\ViewModelHelpers.hpp,cascadia\TerminalSettingsEditor\ViewModelHelpers.hpp:<global>,,false,1,<global>,1
187899,TYPE_DECL,ViewModelHelper<T>,,,"struct ViewModelHelper
{
public:
    winrt::event_token PropertyChanged(const ::winrt::Windows::UI::Xaml::Data::PropertyChangedEventHandler& handler)
    {
        return _propertyChangedHandlers.add(handler);
    }

    void PropertyChanged(const winrt::event_token& token)
    {
        _propertyChangedHandlers.remove(token);
    }

protected:
    void _NotifyChangeCore(const std::wstring_view name)
    {
        _propertyChangedHandlers(*static_cast<T*>(this), ::winrt::Windows::UI::Xaml::Data::PropertyChangedEventArgs{ name });
    }

    // template recursion base case: single dispatch
    void _NotifyChanges(const std::wstring_view name) { _NotifyChangeCore(name); }

    template<typename... Args>
    void _NotifyChanges(const std::wstring_view name, Args&&... more)
    {
        _NotifyChangeCore(name);
        _NotifyChanges(std::forward<Args>(more)...);
    }

protected:
    winrt::event<::winrt::Windows::UI::Xaml::Data::PropertyChangedEventHandler> _propertyChangedHandlers;
}",1,cascadia\TerminalSettingsEditor\ViewModelHelpers.hpp,ViewModelHelper,,false,7,ViewModelHelper,1
187960,TYPE_DECL,,cascadia\TerminalSettingsEditor\ViewModelHelpers.idl.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\ViewModelHelpers.idl.hpp,cascadia\TerminalSettingsEditor\ViewModelHelpers.idl.hpp:<global>,,false,1,<global>,1
187967,TYPE_DECL,,cascadia\TerminalSettingsEditor\pch.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\pch.cpp,cascadia\TerminalSettingsEditor\pch.cpp:<global>,,false,1,<global>,2
188038,TYPE_DECL,,cascadia\TerminalSettingsEditor\pch.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsEditor\pch.hpp,cascadia\TerminalSettingsEditor\pch.hpp:<global>,,false,1,<global>,34
188556,TYPE_DECL,,cascadia\TerminalSettingsModel\ActionAndArgs.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\ActionAndArgs.cpp,cascadia\TerminalSettingsModel\ActionAndArgs.cpp:<global>,,false,1,<global>,9
189910,TYPE_DECL,ANY,,,"using ParseResult = std::tuple<IActionArgs, std::vector<SettingsLoadWarnings>>;",5,cascadia\TerminalSettingsModel\ActionAndArgs.cpp,ParseResult,,false,134,ParseResult,5
189911,TYPE_DECL,ANY,,,using ParseActionFunction = std::function<ParseResult(const Json::Value&)>;,5,cascadia\TerminalSettingsModel\ActionAndArgs.cpp,ParseActionFunction,,false,135,ParseActionFunction,6
189912,TYPE_DECL,ANY,,,using SerializeActionFunction = std::function<Json::Value(IActionArgs)>;,5,cascadia\TerminalSettingsModel\ActionAndArgs.cpp,SerializeActionFunction,,false,136,SerializeActionFunction,7
190990,TYPE_DECL,,cascadia\TerminalSettingsModel\ActionAndArgs.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\ActionAndArgs.hpp,cascadia\TerminalSettingsModel\ActionAndArgs.hpp:<global>,,false,1,<global>,4
190999,TYPE_DECL,,,,"struct ActionAndArgs : public ActionAndArgsT<ActionAndArgs>
    {
        static const std::map<std::string_view, ShortcutAction, std::less<>> ActionKeyNamesMap;
        static winrt::com_ptr<ActionAndArgs> FromJson(const Json::Value& json,
                                                      std::vector<SettingsLoadWarnings>& warnings);
        static Json::Value ToJson(const Model::ActionAndArgs& val);

        static winrt::hstring Serialize(const winrt::Windows::Foundation::Collections::IVector<Model::ActionAndArgs>& args);
        static winrt::Windows::Foundation::Collections::IVector<Model::ActionAndArgs> Deserialize(winrt::hstring content);

        ActionAndArgs() = default;
        ActionAndArgs(ShortcutAction action);
        ActionAndArgs(ShortcutAction action, IActionArgs args) :
            _Action{ action },
            _Args{ args } {};
        com_ptr<ActionAndArgs> Copy() const;

        hstring GenerateName() const;

        WINRT_PROPERTY(ShortcutAction, Action,...",5,cascadia\TerminalSettingsModel\ActionAndArgs.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.ActionAndArgs,ActionAndArgsT<ActionAndArgs>,false,12,ActionAndArgs,1
191059,TYPE_DECL,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<ActionAndArgs><>,,,"struct ConversionTrait<ActionAndArgs>
    {
        ActionAndArgs FromJson(const Json::Value& json)
        {
            std::vector<SettingsLoadWarnings> v;
            return *implementation::ActionAndArgs::FromJson(json, v);
        }

        bool CanConvert(const Json::Value& json) const
        {
            // commands without args might just be a string
            return json.isString() || json.isObject();
        }

        Json::Value ToJson(const ActionAndArgs& val)
        {
            return implementation::ActionAndArgs::ToJson(val);
        }

        std::string TypeDescription() const
        {
            return ""ActionAndArgs"";
        }
    }",5,cascadia\TerminalSettingsModel\ActionAndArgs.hpp,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<ActionAndArgs>,,false,46,ConversionTrait<ActionAndArgs>,1
191212,TYPE_DECL,,cascadia\TerminalSettingsModel\ActionArgs.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\ActionArgs.cpp,cascadia\TerminalSettingsModel\ActionArgs.cpp:<global>,,false,1,<global>,48
193717,TYPE_DECL,,cascadia\TerminalSettingsModel\ActionArgs.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\ActionArgs.hpp,cascadia\TerminalSettingsModel\ActionArgs.hpp:<global>,,false,1,<global>,52
193726,TYPE_DECL,ANY,,,"using FromJsonResult = std::tuple<Model::IActionArgs, std::vector<SettingsLoadWarnings>>;",5,cascadia\TerminalSettingsModel\ActionArgs.hpp,FromJsonResult,,false,286,FromJsonResult,1
193727,TYPE_DECL,,,,"struct ActionEventArgs : public ActionEventArgsT<ActionEventArgs>
    {
        ActionEventArgs() = default;

        explicit ActionEventArgs(const Model::IActionArgs& args) :
            _ActionArgs{ args } {};
        WINRT_PROPERTY(IActionArgs, ActionArgs, nullptr);
        WINRT_PROPERTY(bool, Handled, false);
    }",5,cascadia\TerminalSettingsModel\ActionArgs.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.ActionEventArgs,ActionEventArgsT<ActionEventArgs>,false,288,ActionEventArgs,2
193739,TYPE_DECL,,,,"struct NewTerminalArgs : public NewTerminalArgsT<NewTerminalArgs>
    {
        NewTerminalArgs() = default;
        NewTerminalArgs(int32_t& profileIndex) :
            _ProfileIndex{ profileIndex } {};
        ACTION_ARG(winrt::hstring, Commandline, L"""");
        ACTION_ARG(winrt::hstring, StartingDirectory, L"""");
        ACTION_ARG(winrt::hstring, TabTitle, L"""");
        ACTION_ARG(Windows::Foundation::IReference<Windows::UI::Color>, TabColor, nullptr);
        ACTION_ARG(Windows::Foundation::IReference<int32_t>, ProfileIndex, nullptr);
        ACTION_ARG(winrt::hstring, Profile, L"""");
        ACTION_ARG(bool, AppendCommandLine, false);
        ACTION_ARG(Windows::Foundation::IReference<bool>, SuppressApplicationTitle, nullptr);
        ACTION_ARG(winrt::hstring, ColorScheme);
        ACTION_ARG(Windows::Foundation::IReference<bool>, Elevate, nullptr);
        ACTION_ARG(Windows::Foundation::IReference<bool>, ReloadEnvironmentVariables, nullptr);
        ACTION_ARG(uint64_t, Cont...",5,cascadia\TerminalSettingsModel\ActionArgs.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.NewTerminalArgs,NewTerminalArgsT<NewTerminalArgs>,false,301,NewTerminalArgs,3
194677,TYPE_DECL,hash_trait<winrt.Microsoft.Terminal.Settings.Model.NewTerminalArgs><>,,,"struct til::hash_trait<winrt::Microsoft::Terminal::Settings::Model::NewTerminalArgs>
{
    using M = winrt::Microsoft::Terminal::Settings::Model::NewTerminalArgs;
    using I = winrt::Microsoft::Terminal::Settings::Model::implementation::NewTerminalArgs;

    void operator()(hasher& h, const M& value) const noexcept
    {
        if (value)
        {
            winrt::get_self<I>(value)->Hash(h);
        }
    }
}",1,cascadia\TerminalSettingsModel\ActionArgs.hpp,hash_trait<winrt.Microsoft.Terminal.Settings.Model.NewTerminalArgs>,,false,434,hash_trait<winrt::Microsoft::Terminal::Settings::Model::NewTerminalArgs>,2
194678,TYPE_DECL,ANY,,,using M = winrt::Microsoft::Terminal::Settings::Model::NewTerminalArgs;,5,cascadia\TerminalSettingsModel\ActionArgs.hpp,M,,false,436,M,1
194679,TYPE_DECL,ANY,,,using I = winrt::Microsoft::Terminal::Settings::Model::implementation::NewTerminalArgs;,5,cascadia\TerminalSettingsModel\ActionArgs.hpp,I,,false,437,I,2
194700,TYPE_DECL,hash_trait<winrt.Microsoft.Terminal.Control.SelectionColor><>,,,"struct til::hash_trait<winrt::Microsoft::Terminal::Control::SelectionColor>
{
    using M = winrt::Microsoft::Terminal::Control::SelectionColor;

    void operator()(hasher& h, const M& value) const noexcept
    {
        if (value)
        {
            h.write(value.Color());
            h.write(value.IsIndex16());
        }
    }
}",1,cascadia\TerminalSettingsModel\ActionArgs.hpp,hash_trait<winrt.Microsoft.Terminal.Control.SelectionColor>,,false,448,hash_trait<winrt::Microsoft::Terminal::Control::SelectionColor>,3
194701,TYPE_DECL,ANY,,,using M = winrt::Microsoft::Terminal::Control::SelectionColor;,5,cascadia\TerminalSettingsModel\ActionArgs.hpp,M,,false,450,M,1
194733,TYPE_DECL,,,,"struct NewTabArgs : public NewTabArgsT<NewTabArgs>
    {
        NewTabArgs() = default;
        NewTabArgs(const Model::NewTerminalArgs& terminalArgs) :
            _TerminalArgs{ terminalArgs } {};
        WINRT_PROPERTY(Model::NewTerminalArgs, TerminalArgs, nullptr);

    public:
        hstring GenerateName() const;

        bool Equals(const IActionArgs& other)
        {
            auto otherAsUs = other.try_as<NewTabArgs>();
            if (otherAsUs)
            {
                return otherAsUs->_TerminalArgs.Equals(_TerminalArgs);
            }
            return false;
        };
        static FromJsonResult FromJson(const Json::Value& json)
        {
            // LOAD BEARING: Not using make_self here _will_ break you in the future!
            auto args = winrt::make_self<NewTabArgs>();
            args->_TerminalArgs = NewTerminalArgs::FromJson(json);

            // Don't let the user specify the __content property in their
            // settings. That's an inter...",5,cascadia\TerminalSettingsModel\ActionArgs.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.NewTabArgs,NewTabArgsT<NewTabArgs>,false,468,NewTabArgs,1
194869,TYPE_DECL,,,,"struct SplitPaneArgs : public SplitPaneArgsT<SplitPaneArgs>
    {
        SplitPaneArgs() = default;
        SplitPaneArgs(SplitType splitMode, SplitDirection direction, double size, const Model::NewTerminalArgs& terminalArgs) :
            _SplitMode{ splitMode },
            _SplitDirection{ direction },
            _SplitSize{ size },
            _TerminalArgs{ terminalArgs } {};
        SplitPaneArgs(SplitDirection direction, double size, const Model::NewTerminalArgs& terminalArgs) :
            _SplitDirection{ direction },
            _SplitSize{ size },
            _TerminalArgs{ terminalArgs } {};
        SplitPaneArgs(SplitDirection direction, const Model::NewTerminalArgs& terminalArgs) :
            _SplitDirection{ direction },
            _TerminalArgs{ terminalArgs } {};
        SplitPaneArgs(SplitType splitMode) :
            _SplitMode{ splitMode } {};
        ACTION_ARG(Model::SplitDirection, SplitDirection, SplitDirection::Automatic);
        WINRT_PROPERTY(Model::N...",5,cascadia\TerminalSettingsModel\ActionArgs.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.SplitPaneArgs,SplitPaneArgsT<SplitPaneArgs>,false,524,SplitPaneArgs,2
195277,TYPE_DECL,,,,"struct NewWindowArgs : public NewWindowArgsT<NewWindowArgs>
    {
        NewWindowArgs() = default;
        NewWindowArgs(const Model::NewTerminalArgs& terminalArgs) :
            _TerminalArgs{ terminalArgs } {};
        WINRT_PROPERTY(Model::NewTerminalArgs, TerminalArgs, nullptr);

    public:
        hstring GenerateName() const;

        bool Equals(const IActionArgs& other)
        {
            auto otherAsUs = other.try_as<NewWindowArgs>();
            if (otherAsUs)
            {
                return otherAsUs->_TerminalArgs.Equals(_TerminalArgs);
            }
            return false;
        };
        static FromJsonResult FromJson(const Json::Value& json)
        {
            // LOAD BEARING: Not using make_self here _will_ break you in the future!
            auto args = winrt::make_self<NewWindowArgs>();
            args->_TerminalArgs = NewTerminalArgs::FromJson(json);

            // Don't let the user specify the __content property in their
            // sett...",5,cascadia\TerminalSettingsModel\ActionArgs.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.NewWindowArgs,NewWindowArgsT<NewWindowArgs>,false,621,NewWindowArgs,3
195413,TYPE_DECL,,,,CopyTextArgs,5,cascadia\TerminalSettingsModel\ActionArgs.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.CopyTextArgs,CopyTextArgsT<CopyTextArgs>,false,678,CopyTextArgs,4
195747,TYPE_DECL,,,,MovePaneArgs,5,cascadia\TerminalSettingsModel\ActionArgs.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.MovePaneArgs,MovePaneArgsT<MovePaneArgs>,false,680,MovePaneArgs,5
196005,TYPE_DECL,,,,SwitchToTabArgs,5,cascadia\TerminalSettingsModel\ActionArgs.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.SwitchToTabArgs,SwitchToTabArgsT<SwitchToTabArgs>,false,682,SwitchToTabArgs,6
196187,TYPE_DECL,,,,ResizePaneArgs,5,cascadia\TerminalSettingsModel\ActionArgs.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.ResizePaneArgs,ResizePaneArgsT<ResizePaneArgs>,false,684,ResizePaneArgs,7
196380,TYPE_DECL,,,,MoveFocusArgs,5,cascadia\TerminalSettingsModel\ActionArgs.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.MoveFocusArgs,MoveFocusArgsT<MoveFocusArgs>,false,686,MoveFocusArgs,8
196575,TYPE_DECL,,,,SwapPaneArgs,5,cascadia\TerminalSettingsModel\ActionArgs.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.SwapPaneArgs,SwapPaneArgsT<SwapPaneArgs>,false,688,SwapPaneArgs,9
196770,TYPE_DECL,,,,AdjustFontSizeArgs,5,cascadia\TerminalSettingsModel\ActionArgs.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.AdjustFontSizeArgs,AdjustFontSizeArgsT<AdjustFontSizeArgs>,false,690,AdjustFontSizeArgs,10
196952,TYPE_DECL,,,,SendInputArgs,5,cascadia\TerminalSettingsModel\ActionArgs.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.SendInputArgs,SendInputArgsT<SendInputArgs>,false,692,SendInputArgs,11
197140,TYPE_DECL,,,,OpenSettingsArgs,5,cascadia\TerminalSettingsModel\ActionArgs.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.OpenSettingsArgs,OpenSettingsArgsT<OpenSettingsArgs>,false,694,OpenSettingsArgs,12
197324,TYPE_DECL,,,,SetFocusModeArgs,5,cascadia\TerminalSettingsModel\ActionArgs.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.SetFocusModeArgs,SetFocusModeArgsT<SetFocusModeArgs>,false,696,SetFocusModeArgs,13
197506,TYPE_DECL,,,,SetFullScreenArgs,5,cascadia\TerminalSettingsModel\ActionArgs.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.SetFullScreenArgs,SetFullScreenArgsT<SetFullScreenArgs>,false,698,SetFullScreenArgs,14
197688,TYPE_DECL,,,,SetMaximizedArgs,5,cascadia\TerminalSettingsModel\ActionArgs.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.SetMaximizedArgs,SetMaximizedArgsT<SetMaximizedArgs>,false,700,SetMaximizedArgs,15
197870,TYPE_DECL,,,,SetColorSchemeArgs,5,cascadia\TerminalSettingsModel\ActionArgs.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.SetColorSchemeArgs,SetColorSchemeArgsT<SetColorSchemeArgs>,false,702,SetColorSchemeArgs,16
198058,TYPE_DECL,,,,SetTabColorArgs,5,cascadia\TerminalSettingsModel\ActionArgs.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.SetTabColorArgs,SetTabColorArgsT<SetTabColorArgs>,false,704,SetTabColorArgs,17
198240,TYPE_DECL,,,,RenameTabArgs,5,cascadia\TerminalSettingsModel\ActionArgs.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.RenameTabArgs,RenameTabArgsT<RenameTabArgs>,false,706,RenameTabArgs,18
198422,TYPE_DECL,,,,ExecuteCommandlineArgs,5,cascadia\TerminalSettingsModel\ActionArgs.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.ExecuteCommandlineArgs,ExecuteCommandlineArgsT<ExecuteCommandlineArgs>,false,708,ExecuteCommandlineArgs,19
198610,TYPE_DECL,,,,CloseOtherTabsArgs,5,cascadia\TerminalSettingsModel\ActionArgs.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.CloseOtherTabsArgs,CloseOtherTabsArgsT<CloseOtherTabsArgs>,false,710,CloseOtherTabsArgs,20
198792,TYPE_DECL,,,,CloseTabsAfterArgs,5,cascadia\TerminalSettingsModel\ActionArgs.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.CloseTabsAfterArgs,CloseTabsAfterArgsT<CloseTabsAfterArgs>,false,712,CloseTabsAfterArgs,21
198974,TYPE_DECL,,,,CloseTabArgs,5,cascadia\TerminalSettingsModel\ActionArgs.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.CloseTabArgs,CloseTabArgsT<CloseTabArgs>,false,714,CloseTabArgs,22
199156,TYPE_DECL,,,,MoveTabArgs,5,cascadia\TerminalSettingsModel\ActionArgs.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.MoveTabArgs,MoveTabArgsT<MoveTabArgs>,false,716,MoveTabArgs,23
199431,TYPE_DECL,,,,ScrollUpArgs,5,cascadia\TerminalSettingsModel\ActionArgs.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.ScrollUpArgs,ScrollUpArgsT<ScrollUpArgs>,false,718,ScrollUpArgs,24
199613,TYPE_DECL,,,,ScrollDownArgs,5,cascadia\TerminalSettingsModel\ActionArgs.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.ScrollDownArgs,ScrollDownArgsT<ScrollDownArgs>,false,720,ScrollDownArgs,25
199795,TYPE_DECL,,,,ScrollToMarkArgs,5,cascadia\TerminalSettingsModel\ActionArgs.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.ScrollToMarkArgs,ScrollToMarkArgsT<ScrollToMarkArgs>,false,722,ScrollToMarkArgs,26
199985,TYPE_DECL,,,,AddMarkArgs,5,cascadia\TerminalSettingsModel\ActionArgs.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.AddMarkArgs,AddMarkArgsT<AddMarkArgs>,false,724,AddMarkArgs,27
200167,TYPE_DECL,,,,ToggleCommandPaletteArgs,5,cascadia\TerminalSettingsModel\ActionArgs.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.ToggleCommandPaletteArgs,ToggleCommandPaletteArgsT<ToggleCommandPaletteArgs>,false,726,ToggleCommandPaletteArgs,28
200351,TYPE_DECL,,,,SuggestionsArgs,5,cascadia\TerminalSettingsModel\ActionArgs.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.SuggestionsArgs,SuggestionsArgsT<SuggestionsArgs>,false,728,SuggestionsArgs,29
200611,TYPE_DECL,,,,FindMatchArgs,5,cascadia\TerminalSettingsModel\ActionArgs.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.FindMatchArgs,FindMatchArgsT<FindMatchArgs>,false,730,FindMatchArgs,30
200802,TYPE_DECL,,,,PrevTabArgs,5,cascadia\TerminalSettingsModel\ActionArgs.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.PrevTabArgs,PrevTabArgsT<PrevTabArgs>,false,732,PrevTabArgs,31
200984,TYPE_DECL,,,,NextTabArgs,5,cascadia\TerminalSettingsModel\ActionArgs.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.NextTabArgs,NextTabArgsT<NextTabArgs>,false,734,NextTabArgs,32
201166,TYPE_DECL,,,,RenameWindowArgs,5,cascadia\TerminalSettingsModel\ActionArgs.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.RenameWindowArgs,RenameWindowArgsT<RenameWindowArgs>,false,736,RenameWindowArgs,33
201348,TYPE_DECL,,,,SearchForTextArgs,5,cascadia\TerminalSettingsModel\ActionArgs.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.SearchForTextArgs,SearchForTextArgsT<SearchForTextArgs>,false,738,SearchForTextArgs,34
201530,TYPE_DECL,,,,"struct GlobalSummonArgs : public GlobalSummonArgsT<GlobalSummonArgs>
    {
        ACTION_ARG_BODY(GlobalSummonArgs, GLOBAL_SUMMON_ARGS)
    public:
        // SPECIAL! This deserializer creates a GlobalSummonArgs with the
        // default values for quakeMode
        static FromJsonResult QuakeModeFromJson(const Json::Value& /*json*/)
        {
            // LOAD BEARING: Not using make_self here _will_ break you in the future!
            auto args = winrt::make_self<GlobalSummonArgs>();
            // We want to summon the window with the name ""_quake"" specifically.
            args->_Name = QuakeWindowName;
            // We want the window to dropdown, with a 200ms duration.
            args->_DropdownDuration = 200;
            return { *args, {} };
        }
    }",5,cascadia\TerminalSettingsModel\ActionArgs.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.GlobalSummonArgs,GlobalSummonArgsT<GlobalSummonArgs>,false,740,GlobalSummonArgs,35
202047,TYPE_DECL,,,,FocusPaneArgs,5,cascadia\TerminalSettingsModel\ActionArgs.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.FocusPaneArgs,FocusPaneArgsT<FocusPaneArgs>,false,758,FocusPaneArgs,36
202229,TYPE_DECL,,,,ExportBufferArgs,5,cascadia\TerminalSettingsModel\ActionArgs.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.ExportBufferArgs,ExportBufferArgsT<ExportBufferArgs>,false,760,ExportBufferArgs,37
202411,TYPE_DECL,,,,ClearBufferArgs,5,cascadia\TerminalSettingsModel\ActionArgs.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.ClearBufferArgs,ClearBufferArgsT<ClearBufferArgs>,false,762,ClearBufferArgs,38
202603,TYPE_DECL,,,,"struct MultipleActionsArgs : public MultipleActionsArgsT<MultipleActionsArgs>
    {
        MultipleActionsArgs() = default;
        WINRT_PROPERTY(Windows::Foundation::Collections::IVector<ActionAndArgs>, Actions);
        static constexpr std::string_view ActionsKey{ ""actions"" };

    public:
        hstring GenerateName() const;

        bool Equals(const IActionArgs& other)
        {
            auto otherAsUs = other.try_as<MultipleActionsArgs>();
            if (otherAsUs)
            {
                return otherAsUs->_Actions == _Actions;
            }
            return false;
        };
        static FromJsonResult FromJson(const Json::Value& json)
        {
            // LOAD BEARING: Not using make_self here _will_ break you in the future!
            auto args = winrt::make_self<MultipleActionsArgs>();
            JsonUtils::GetValueForKey(json, ActionsKey, args->_Actions);
            return { *args, {} };
        }
        static Json::Value ToJson(const IActionArg...",5,cascadia\TerminalSettingsModel\ActionArgs.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.MultipleActionsArgs,MultipleActionsArgsT<MultipleActionsArgs>,false,764,MultipleActionsArgs,39
202745,TYPE_DECL,,,,AdjustOpacityArgs,5,cascadia\TerminalSettingsModel\ActionArgs.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.AdjustOpacityArgs,AdjustOpacityArgsT<AdjustOpacityArgs>,false,815,AdjustOpacityArgs,40
203003,TYPE_DECL,,,,SelectCommandArgs,5,cascadia\TerminalSettingsModel\ActionArgs.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.SelectCommandArgs,SelectCommandArgsT<SelectCommandArgs>,false,817,SelectCommandArgs,41
203187,TYPE_DECL,,,,SelectOutputArgs,5,cascadia\TerminalSettingsModel\ActionArgs.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.SelectOutputArgs,SelectOutputArgsT<SelectOutputArgs>,false,818,SelectOutputArgs,42
203371,TYPE_DECL,,,,ColorSelectionArgs,5,cascadia\TerminalSettingsModel\ActionArgs.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.ColorSelectionArgs,ColorSelectionArgsT<ColorSelectionArgs>,false,820,ColorSelectionArgs,43
203757,TYPE_DECL,,cascadia\TerminalSettingsModel\ActionArgsMagic.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\ActionArgsMagic.hpp,cascadia\TerminalSettingsModel\ActionArgsMagic.hpp:<global>,,false,1,<global>,1
203760,TYPE_DECL,,,,"struct InitListPlaceholder
{
}",1,cascadia\TerminalSettingsModel\ActionArgsMagic.hpp,InitListPlaceholder,,false,35,InitListPlaceholder,1
203772,TYPE_DECL,,cascadia\TerminalSettingsModel\ActionMap.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\ActionMap.cpp,cascadia\TerminalSettingsModel\ActionMap.cpp:<global>,,false,1,<global>,7
207458,TYPE_DECL,,cascadia\TerminalSettingsModel\ActionMap.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\ActionMap.hpp,cascadia\TerminalSettingsModel\ActionMap.hpp:<global>,,false,1,<global>,4
207462,TYPE_DECL,,,,class KeyBindingsTests,5,cascadia\TerminalSettingsModel\ActionMap.hpp,SettingsModelLocalTests.KeyBindingsTests,,false,25,KeyBindingsTests,1
207463,TYPE_DECL,,,,class DeserializationTests,5,cascadia\TerminalSettingsModel\ActionMap.hpp,SettingsModelLocalTests.DeserializationTests,,false,26,DeserializationTests,2
207464,TYPE_DECL,,,,class TerminalSettingsTests,5,cascadia\TerminalSettingsModel\ActionMap.hpp,SettingsModelLocalTests.TerminalSettingsTests,,false,27,TerminalSettingsTests,3
207471,TYPE_DECL,size_t,,,using InternalActionID = size_t;,5,cascadia\TerminalSettingsModel\ActionMap.hpp,InternalActionID,,false,32,InternalActionID,1
207472,TYPE_DECL,,,,"struct KeyChordHash
    {
        inline std::size_t operator()(const Control::KeyChord& key) const
        {
            return static_cast<size_t>(key.Hash());
        }
    }",5,cascadia\TerminalSettingsModel\ActionMap.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.KeyChordHash,,false,34,KeyChordHash,2
207485,TYPE_DECL,,,,"struct KeyChordEquality
    {
        inline bool operator()(const Control::KeyChord& lhs, const Control::KeyChord& rhs) const
        {
            return lhs.Equals(rhs);
        }
    }",5,cascadia\TerminalSettingsModel\ActionMap.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.KeyChordEquality,,false,42,KeyChordEquality,3
207498,TYPE_DECL,,,,"struct ActionMap : ActionMapT<ActionMap>, IInheritable<ActionMap>
    {
        // views
        Windows::Foundation::Collections::IMapView<hstring, Model::ActionAndArgs> AvailableActions();
        Windows::Foundation::Collections::IMapView<hstring, Model::Command> NameMap();
        Windows::Foundation::Collections::IMapView<Control::KeyChord, Model::Command> GlobalHotkeys();
        Windows::Foundation::Collections::IMapView<Control::KeyChord, Model::Command> KeyBindings();
        com_ptr<ActionMap> Copy() const;

        // queries
        Model::Command GetActionByKeyChord(const Control::KeyChord& keys) const;
        bool IsKeyChordExplicitlyUnbound(const Control::KeyChord& keys) const;
        Control::KeyChord GetKeyBindingForAction(const ShortcutAction& action) const;
        Control::KeyChord GetKeyBindingForAction(const ShortcutAction& action, const IActionArgs& actionArgs) const;

        // population
        void AddAction(const Model::Command& cmd);

        // JSON
...",5,cascadia\TerminalSettingsModel\ActionMap.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.ActionMap,ActionMapT<ActionMap>;IInheritable<ActionMap>,false,50,ActionMap,4
207666,TYPE_DECL,,,,friend class SettingsModelLocalTests::KeyBindingsTests,9,cascadia\TerminalSettingsModel\ActionMap.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.ActionMap.KeyBindingsTests,,false,126,KeyBindingsTests,42
207667,TYPE_DECL,,,,friend class SettingsModelLocalTests::DeserializationTests,9,cascadia\TerminalSettingsModel\ActionMap.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.ActionMap.DeserializationTests,,false,127,DeserializationTests,43
207668,TYPE_DECL,,,,friend class SettingsModelLocalTests::TerminalSettingsTests,9,cascadia\TerminalSettingsModel\ActionMap.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.ActionMap.TerminalSettingsTests,,false,128,TerminalSettingsTests,44
207731,TYPE_DECL,,cascadia\TerminalSettingsModel\ActionMapSerialization.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\ActionMapSerialization.cpp,cascadia\TerminalSettingsModel\ActionMapSerialization.cpp:<global>,,false,1,<global>,7
207845,TYPE_DECL,,cascadia\TerminalSettingsModel\AllShortcutActions.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\AllShortcutActions.hpp,cascadia\TerminalSettingsModel\AllShortcutActions.hpp:<global>,,false,1,<global>,1
207860,TYPE_DECL,,cascadia\TerminalSettingsModel\AppearanceConfig.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\AppearanceConfig.cpp,cascadia\TerminalSettingsModel\AppearanceConfig.cpp:<global>,,false,1,<global>,6
208478,TYPE_DECL,,cascadia\TerminalSettingsModel\AppearanceConfig.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\AppearanceConfig.hpp,cascadia\TerminalSettingsModel\AppearanceConfig.hpp:<global>,,false,1,<global>,6
208487,TYPE_DECL,,,,"struct AppearanceConfig : AppearanceConfigT<AppearanceConfig>, IInheritable<AppearanceConfig>
    {
    public:
        AppearanceConfig(winrt::weak_ref<Profile> sourceProfile);
        static winrt::com_ptr<AppearanceConfig> CopyAppearance(const AppearanceConfig* source, winrt::weak_ref<Profile> sourceProfile);
        Json::Value ToJson() const;
        void LayerJson(const Json::Value& json);

        Model::Profile SourceProfile();

        winrt::hstring ExpandedBackgroundImagePath();

        INHERITABLE_NULLABLE_SETTING(Model::IAppearanceConfig, Microsoft::Terminal::Core::Color, Foreground, nullptr);
        INHERITABLE_NULLABLE_SETTING(Model::IAppearanceConfig, Microsoft::Terminal::Core::Color, Background, nullptr);
        INHERITABLE_NULLABLE_SETTING(Model::IAppearanceConfig, Microsoft::Terminal::Core::Color, SelectionBackground, nullptr);
        INHERITABLE_NULLABLE_SETTING(Model::IAppearanceConfig, Microsoft::Terminal::Core::Color, CursorColor, nullptr);
        INHERIT...",5,cascadia\TerminalSettingsModel\AppearanceConfig.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.AppearanceConfig,AppearanceConfigT<AppearanceConfig>;IInheritable<AppearanceConfig>,false,27,AppearanceConfig,1
211049,TYPE_DECL,,cascadia\TerminalSettingsModel\ApplicationState.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\ApplicationState.cpp,cascadia\TerminalSettingsModel\ApplicationState.cpp:<global>,,false,1,<global>,10
211087,TYPE_DECL,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<WindowLayout><>,,,"struct ConversionTrait<WindowLayout>
    {
        WindowLayout FromJson(const Json::Value& json)
        {
            auto layout = winrt::make_self<implementation::WindowLayout>();

            GetValueForKey(json, TabLayoutKey, layout->_TabLayout);
            GetValueForKey(json, InitialPositionKey, layout->_InitialPosition);
            GetValueForKey(json, LaunchModeKey, layout->_LaunchMode);
            GetValueForKey(json, InitialSizeKey, layout->_InitialSize);

            return *layout;
        }

        bool CanConvert(const Json::Value& json)
        {
            return json.isObject();
        }

        Json::Value ToJson(const WindowLayout& val)
        {
            Json::Value json{ Json::objectValue };

            SetValueForKey(json, TabLayoutKey, val.TabLayout());
            SetValueForKey(json, InitialPositionKey, val.InitialPosition());
            SetValueForKey(json, LaunchModeKey, val.LaunchMode());
            SetValueForKey(json, InitialSizeKey, val....",5,cascadia\TerminalSettingsModel\ApplicationState.cpp,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<WindowLayout>,,false,27,ConversionTrait<WindowLayout>,1
212020,TYPE_DECL,,cascadia\TerminalSettingsModel\ApplicationState.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\ApplicationState.hpp,cascadia\TerminalSettingsModel\ApplicationState.hpp:<global>,,false,1,<global>,5
212029,TYPE_DECL,,,,"enum FileSource : int
    {
        Shared = 0x1,
        Local = 0x2
    }",5,cascadia\TerminalSettingsModel\ApplicationState.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.FileSource,,false,27,FileSource,1
212043,TYPE_DECL,,,,"struct WindowLayout : WindowLayoutT<WindowLayout>
    {
        static winrt::hstring ToJson(const Model::WindowLayout& layout);
        static Model::WindowLayout FromJson(const winrt::hstring& json);

        WINRT_PROPERTY(Windows::Foundation::Collections::IVector<Model::ActionAndArgs>, TabLayout, nullptr);
        WINRT_PROPERTY(winrt::Windows::Foundation::IReference<Model::LaunchPosition>, InitialPosition, nullptr);
        WINRT_PROPERTY(winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::Size>, InitialSize, nullptr);
        WINRT_PROPERTY(winrt::Windows::Foundation::IReference<Model::LaunchMode>, LaunchMode, nullptr);

        friend ::Microsoft::Terminal::Settings::Model::JsonUtils::ConversionTrait<Model::WindowLayout>;
    }",5,cascadia\TerminalSettingsModel\ApplicationState.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.WindowLayout,WindowLayoutT<WindowLayout>,false,45,WindowLayout,3
212058,TYPE_DECL,ConversionTrait<Model::WindowLayout>,,,friend ::Microsoft::Terminal::Settings::Model::JsonUtils::ConversionTrait<Model::WindowLayout>,9,cascadia\TerminalSettingsModel\ApplicationState.hpp,ConversionTrait<Model.WindowLayout>,,false,55,ConversionTrait<Model::WindowLayout>,7
212059,TYPE_DECL,,,,"struct ApplicationState : public ApplicationStateT<ApplicationState>
    {
        static Microsoft::Terminal::Settings::Model::ApplicationState SharedInstance();

        ApplicationState(const std::filesystem::path& stateRoot) noexcept;
        ~ApplicationState();

        // Methods
        void Reload() const noexcept;
        void Reset() noexcept;

        void FromJson(const Json::Value& root, FileSource parseSource) const noexcept;
        Json::Value ToJson(FileSource parseSource) const noexcept;

        // General getters/setters
        bool IsStatePath(const winrt::hstring& filename);

        // State getters/setters
#define MTSM_APPLICATION_STATE_GEN(source, type, name, key, ...) \
    type name() const noexcept;                                  \
    void name(const type& value) noexcept;
        MTSM_APPLICATION_STATE_FIELDS(MTSM_APPLICATION_STATE_GEN)
#undef MTSM_APPLICATION_STATE_GEN

    private:
        struct state_t
        {
#define MTSM_APPLICATION_STATE_GE...",5,cascadia\TerminalSettingsModel\ApplicationState.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.ApplicationState,ApplicationStateT<ApplicationState>,false,58,ApplicationState,4
212151,TYPE_DECL,,,,"struct state_t
        {
#define MTSM_APPLICATION_STATE_GEN(source, type, name, key, ...) std::optional<type> name{ __VA_ARGS__ };
            MTSM_APPLICATION_STATE_FIELDS(MTSM_APPLICATION_STATE_GEN)
#undef MTSM_APPLICATION_STATE_GEN
        }",9,cascadia\TerminalSettingsModel\ApplicationState.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.ApplicationState.state_t,,false,83,state_t,21
212237,TYPE_DECL,,cascadia\TerminalSettingsModel\AzureCloudShellGenerator.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\AzureCloudShellGenerator.cpp,cascadia\TerminalSettingsModel\AzureCloudShellGenerator.cpp:<global>,,false,1,<global>,6
212307,TYPE_DECL,,cascadia\TerminalSettingsModel\AzureCloudShellGenerator.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\AzureCloudShellGenerator.hpp,cascadia\TerminalSettingsModel\AzureCloudShellGenerator.hpp:<global>,,false,1,<global>,2
212315,TYPE_DECL,,,,"class AzureCloudShellGenerator final : public IDynamicProfileGenerator
    {
    public:
        std::wstring_view GetNamespace() const noexcept override;
        void GenerateProfiles(std::vector<winrt::com_ptr<implementation::Profile>>& profiles) const override;
    }",5,cascadia\TerminalSettingsModel\AzureCloudShellGenerator.hpp,winrt.Microsoft.Terminal.Settings.Model.AzureCloudShellGenerator,IDynamicProfileGenerator,false,24,AzureCloudShellGenerator,1
212340,TYPE_DECL,,cascadia\TerminalSettingsModel\CascadiaSettings.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\CascadiaSettings.cpp,cascadia\TerminalSettingsModel\CascadiaSettings.cpp:<global>,,false,1,<global>,13
215710,TYPE_DECL,,cascadia\TerminalSettingsModel\CascadiaSettings.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\CascadiaSettings.hpp,cascadia\TerminalSettingsModel\CascadiaSettings.hpp:<global>,,false,1,<global>,4
215718,TYPE_DECL,,,,class IDynamicProfileGenerator,5,cascadia\TerminalSettingsModel\CascadiaSettings.hpp,winrt.Microsoft.Terminal.Settings.Model.IDynamicProfileGenerator,,false,27,IDynamicProfileGenerator,1
215730,TYPE_DECL,,,,"class SettingsTypedDeserializationException final : public std::runtime_error
    {
    public:
        SettingsTypedDeserializationException(const char* message) noexcept :
            std::runtime_error(message) {}
    }",5,cascadia\TerminalSettingsModel\CascadiaSettings.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.SettingsTypedDeserializationException,std.runtime_error,false,34,SettingsTypedDeserializationException,2
215736,TYPE_DECL,,,,"struct ParsedSettings
    {
        winrt::com_ptr<implementation::GlobalAppSettings> globals;
        winrt::com_ptr<implementation::Profile> baseLayerProfile;
        std::vector<winrt::com_ptr<implementation::Profile>> profiles;
        std::unordered_map<winrt::guid, winrt::com_ptr<implementation::Profile>> profilesByGuid;

        void clear();
    }",5,cascadia\TerminalSettingsModel\CascadiaSettings.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.ParsedSettings,,false,41,ParsedSettings,3
215745,TYPE_DECL,,,,"struct SettingsLoader
    {
        static SettingsLoader Default(const std::string_view& userJSON, const std::string_view& inboxJSON);
        SettingsLoader(const std::string_view& userJSON, const std::string_view& inboxJSON);

        void GenerateProfiles();
        void ApplyRuntimeInitialSettings();
        void MergeInboxIntoUserSettings();
        void FindFragmentsAndMergeIntoUserSettings();
        void MergeFragmentIntoUserSettings(const winrt::hstring& source, const std::string_view& content);
        void FinalizeLayering();
        bool DisableDeletedProfiles();
        bool FixupUserSettings();

        ParsedSettings inboxSettings;
        ParsedSettings userSettings;
        bool duplicateProfile = false;

    private:
        struct JsonSettings
        {
            Json::Value root;
            const Json::Value& colorSchemes;
            const Json::Value& profileDefaults;
            const Json::Value& profilesList;
            const Json::Value& themes;
      ...",5,cascadia\TerminalSettingsModel\CascadiaSettings.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.SettingsLoader,,false,51,SettingsLoader,4
215795,TYPE_DECL,,,,"struct JsonSettings
        {
            Json::Value root;
            const Json::Value& colorSchemes;
            const Json::Value& profileDefaults;
            const Json::Value& profilesList;
            const Json::Value& themes;
        }",9,cascadia\TerminalSettingsModel\CascadiaSettings.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.SettingsLoader.JsonSettings,,false,70,JsonSettings,14
215884,TYPE_DECL,,,,"struct CascadiaSettings : CascadiaSettingsT<CascadiaSettings>
    {
    public:
        static Model::CascadiaSettings LoadDefaults();
        static Model::CascadiaSettings LoadAll();

        static winrt::hstring SettingsPath();
        static winrt::hstring DefaultSettingsPath();
        static winrt::hstring ApplicationDisplayName();
        static winrt::hstring ApplicationVersion();
        static bool IsPortableMode();
        static void ExportFile(winrt::hstring path, winrt::hstring content);

        CascadiaSettings() noexcept = default;
        CascadiaSettings(const winrt::hstring& userJSON, const winrt::hstring& inboxJSON);
        CascadiaSettings(const std::string_view& userJSON, const std::string_view& inboxJSON = {});
        explicit CascadiaSettings(SettingsLoader&& loader);

        // user settings
        winrt::hstring Hash() const noexcept;
        Model::CascadiaSettings Copy() const;
        Model::GlobalAppSettings GlobalSettings() const;
        winrt::...",5,cascadia\TerminalSettingsModel\CascadiaSettings.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.CascadiaSettings,CascadiaSettingsT<CascadiaSettings>,false,97,CascadiaSettings,5
216199,TYPE_DECL,,cascadia\TerminalSettingsModel\CascadiaSettingsSerialization.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\CascadiaSettingsSerialization.cpp,cascadia\TerminalSettingsModel\CascadiaSettingsSerialization.cpp:<global>,,false,1,<global>,22
219348,TYPE_DECL,,cascadia\TerminalSettingsModel\ColorScheme.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\ColorScheme.cpp,cascadia\TerminalSettingsModel\ColorScheme.cpp:<global>,,false,1,<global>,8
219882,TYPE_DECL,,cascadia\TerminalSettingsModel\ColorScheme.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\ColorScheme.hpp,cascadia\TerminalSettingsModel\ColorScheme.hpp:<global>,,false,1,<global>,4
219891,TYPE_DECL,,,,"struct ColorScheme : ColorSchemeT<ColorScheme>
    {
        // A ColorScheme constructed with uninitialized_t
        // leaves _table uninitialized.
        struct uninitialized_t
        {
        };

    public:
        ColorScheme() noexcept;
        explicit ColorScheme(uninitialized_t) noexcept {}
        explicit ColorScheme(const winrt::hstring& name) noexcept;

        com_ptr<ColorScheme> Copy() const;

        hstring ToString()
        {
            return Name();
        }

        static com_ptr<ColorScheme> FromJson(const Json::Value& json);
        Json::Value ToJson() const;

        winrt::Microsoft::Terminal::Core::Scheme ToCoreScheme() const noexcept;

        com_array<Core::Color> Table() const noexcept;
        void SetColorTableEntry(uint8_t index, const Core::Color& value) noexcept;

        WINRT_PROPERTY(winrt::hstring, Name);
        WINRT_PROPERTY(Core::Color, Foreground, static_cast<Core::Color>(DEFAULT_FOREGROUND));
        WINRT_PROPERTY(Core::Color,...",5,cascadia\TerminalSettingsModel\ColorScheme.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.ColorScheme,ColorSchemeT<ColorScheme>,false,26,ColorScheme,1
219892,TYPE_DECL,,,,"struct uninitialized_t
        {
        }",9,cascadia\TerminalSettingsModel\ColorScheme.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.ColorScheme.uninitialized_t,,false,30,uninitialized_t,1
219986,TYPE_DECL,,cascadia\TerminalSettingsModel\Command.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\Command.cpp,cascadia\TerminalSettingsModel\Command.cpp:<global>,,false,1,<global>,8
221747,TYPE_DECL,,cascadia\TerminalSettingsModel\Command.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\Command.hpp,cascadia\TerminalSettingsModel\Command.hpp:<global>,,false,1,<global>,6
221751,TYPE_DECL,,,,class DeserializationTests,5,cascadia\TerminalSettingsModel\Command.hpp,SettingsModelLocalTests.DeserializationTests,,false,30,DeserializationTests,1
221752,TYPE_DECL,,,,class CommandTests,5,cascadia\TerminalSettingsModel\Command.hpp,SettingsModelLocalTests.CommandTests,,false,31,CommandTests,2
221759,TYPE_DECL,,,,"struct Command : CommandT<Command>
    {
        Command();
        com_ptr<Command> Copy() const;

        static winrt::com_ptr<Command> FromJson(const Json::Value& json,
                                                std::vector<SettingsLoadWarnings>& warnings);

        static void ExpandCommands(Windows::Foundation::Collections::IMap<winrt::hstring, Model::Command>& commands,
                                   Windows::Foundation::Collections::IVectorView<Model::Profile> profiles,
                                   Windows::Foundation::Collections::IVectorView<Model::ColorScheme> schemes);

        static std::vector<SettingsLoadWarnings> LayerJson(Windows::Foundation::Collections::IMap<winrt::hstring, Model::Command>& commands,
                                                           const Json::Value& json);
        Json::Value ToJson() const;

        bool HasNestedCommands() const;
        bool IsNestedCommand() const noexcept;
        Windows::Foundation::Collections::I...",5,cascadia\TerminalSettingsModel\Command.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.Command,CommandT<Command>,false,36,Command,1
221880,TYPE_DECL,,,,friend class SettingsModelLocalTests::DeserializationTests,9,cascadia\TerminalSettingsModel\Command.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.Command.DeserializationTests,,false,89,DeserializationTests,32
221881,TYPE_DECL,,,,friend class SettingsModelLocalTests::CommandTests,9,cascadia\TerminalSettingsModel\Command.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.Command.CommandTests,,false,90,CommandTests,33
221911,TYPE_DECL,,cascadia\TerminalSettingsModel\DefaultTerminal.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\DefaultTerminal.cpp,cascadia\TerminalSettingsModel\DefaultTerminal.cpp:<global>,,false,1,<global>,5
222234,TYPE_DECL,,cascadia\TerminalSettingsModel\DefaultTerminal.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\DefaultTerminal.hpp,cascadia\TerminalSettingsModel\DefaultTerminal.hpp:<global>,,false,1,<global>,3
222243,TYPE_DECL,,,,"struct DefaultTerminal : public DefaultTerminalT<DefaultTerminal>
    {
        explicit DefaultTerminal(DelegationConfig::DelegationPackage&& pkg);

        hstring ToString()
        {
            return hstring{ fmt::format(L""{}, {}, {}"", Name(), Author(), Version()) };
        }

        hstring Name() const;
        hstring Author() const;
        hstring Version() const;
        hstring Icon() const;

        static std::pair<std::vector<Model::DefaultTerminal>, Model::DefaultTerminal> Available();
        static bool HasCurrent();
        static void Current(const Model::DefaultTerminal& term);

    private:
        DelegationConfig::DelegationPackage _pkg;
    }",5,cascadia\TerminalSettingsModel\DefaultTerminal.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.DefaultTerminal,DefaultTerminalT<DefaultTerminal>,false,27,DefaultTerminal,1
222302,TYPE_DECL,,cascadia\TerminalSettingsModel\DynamicProfileUtils.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\DynamicProfileUtils.cpp,cascadia\TerminalSettingsModel\DynamicProfileUtils.cpp:<global>,,false,1,<global>,4
222404,TYPE_DECL,,cascadia\TerminalSettingsModel\DynamicProfileUtils.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\DynamicProfileUtils.hpp,cascadia\TerminalSettingsModel\DynamicProfileUtils.hpp:<global>,,false,1,<global>,2
222461,TYPE_DECL,,cascadia\TerminalSettingsModel\EnumMappings.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\EnumMappings.cpp,cascadia\TerminalSettingsModel\EnumMappings.cpp:<global>,,false,1,<global>,7
223186,TYPE_DECL,,cascadia\TerminalSettingsModel\EnumMappings.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\EnumMappings.hpp,cascadia\TerminalSettingsModel\EnumMappings.hpp:<global>,,false,1,<global>,2
223195,TYPE_DECL,,,,"struct EnumMappings : EnumMappingsT<EnumMappings>
    {
    public:
        EnumMappings() = default;

        // Global Settings
        static winrt::Windows::Foundation::Collections::IMap<winrt::hstring, winrt::Windows::UI::Xaml::ElementTheme> ElementTheme();
        static winrt::Windows::Foundation::Collections::IMap<winrt::hstring, NewTabPosition> NewTabPosition();
        static winrt::Windows::Foundation::Collections::IMap<winrt::hstring, winrt::Microsoft::UI::Xaml::Controls::TabViewWidthMode> TabViewWidthMode();
        static winrt::Windows::Foundation::Collections::IMap<winrt::hstring, FirstWindowPreference> FirstWindowPreference();
        static winrt::Windows::Foundation::Collections::IMap<winrt::hstring, LaunchMode> LaunchMode();
        static winrt::Windows::Foundation::Collections::IMap<winrt::hstring, TabSwitcherMode> TabSwitcherMode();
        static winrt::Windows::Foundation::Collections::IMap<winrt::hstring, winrt::Microsoft::Terminal::Control::CopyFormat> Cop...",5,cascadia\TerminalSettingsModel\EnumMappings.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.EnumMappings,EnumMappingsT<EnumMappings>,false,23,EnumMappings,1
223311,TYPE_DECL,,cascadia\TerminalSettingsModel\FileUtils.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\FileUtils.cpp,cascadia\TerminalSettingsModel\FileUtils.cpp:<global>,,false,1,<global>,9
223940,TYPE_DECL,,cascadia\TerminalSettingsModel\FileUtils.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\FileUtils.hpp,cascadia\TerminalSettingsModel\FileUtils.hpp:<global>,,false,1,<global>,1
224001,TYPE_DECL,,cascadia\TerminalSettingsModel\FolderEntry.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\FolderEntry.cpp,cascadia\TerminalSettingsModel\FolderEntry.cpp:<global>,,false,1,<global>,6
224145,TYPE_DECL,ANY,,,using NewTabMenuEntryModel = winrt::Microsoft::Terminal::Settings::Model::NewTabMenuEntry;,1,cascadia\TerminalSettingsModel\FolderEntry.cpp,NewTabMenuEntryModel,,false,60,NewTabMenuEntryModel,15
224292,TYPE_DECL,,cascadia\TerminalSettingsModel\FolderEntry.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\FolderEntry.hpp,cascadia\TerminalSettingsModel\FolderEntry.hpp:<global>,,false,1,<global>,4
224301,TYPE_DECL,,,,"struct FolderEntry : FolderEntryT<FolderEntry, NewTabMenuEntry>
    {
    public:
        FolderEntry() noexcept;
        explicit FolderEntry(const winrt::hstring& name) noexcept;

        Json::Value ToJson() const override;
        static com_ptr<NewTabMenuEntry> FromJson(const Json::Value& json);

        // In JSON, we can set arbitrarily many profiles or nested profiles, that might not all
        // be rendered; for example, when a profile entry is invalid, or when a folder is empty.
        // Therefore, we will store the JSON entries list internally, and then expose only the
        // entries to be rendered to WinRT.
        winrt::Windows::Foundation::Collections::IVector<Model::NewTabMenuEntry> Entries() const;
        winrt::Windows::Foundation::Collections::IVector<Model::NewTabMenuEntry> RawEntries() const
        {
            return _Entries;
        };

        WINRT_PROPERTY(winrt::hstring, Name);
        WINRT_PROPERTY(winrt::hstring, Icon);
        WINRT_PROPERT...",5,cascadia\TerminalSettingsModel\FolderEntry.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.FolderEntry,"FolderEntryT<FolderEntry, NewTabMenuEntry>",false,23,FolderEntry,1
224361,TYPE_DECL,,cascadia\TerminalSettingsModel\FontConfig.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\FontConfig.cpp,cascadia\TerminalSettingsModel\FontConfig.cpp:<global>,,false,1,<global>,6
224648,TYPE_DECL,,cascadia\TerminalSettingsModel\FontConfig.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\FontConfig.hpp,cascadia\TerminalSettingsModel\FontConfig.hpp:<global>,,false,1,<global>,7
224651,TYPE_DECL,ANY,,,"using IFontAxesMap = winrt::Windows::Foundation::Collections::IMap<winrt::hstring, float>;",1,cascadia\TerminalSettingsModel\FontConfig.hpp,IFontAxesMap,,false,26,IFontAxesMap,1
224652,TYPE_DECL,ANY,,,"using IFontFeatureMap = winrt::Windows::Foundation::Collections::IMap<winrt::hstring, uint32_t>;",1,cascadia\TerminalSettingsModel\FontConfig.hpp,IFontFeatureMap,,false,27,IFontFeatureMap,2
224659,TYPE_DECL,,,,"struct FontConfig : FontConfigT<FontConfig>, IInheritable<FontConfig>
    {
    public:
        FontConfig(winrt::weak_ref<Profile> sourceProfile);
        static winrt::com_ptr<FontConfig> CopyFontInfo(const FontConfig* source, winrt::weak_ref<Profile> sourceProfile);
        Json::Value ToJson() const;
        void LayerJson(const Json::Value& json);

        Model::Profile SourceProfile();

#define FONT_SETTINGS_INITIALIZE(type, name, jsonKey, ...) \
    INHERITABLE_SETTING(Model::FontConfig, type, name, ##__VA_ARGS__)
        MTSM_FONT_SETTINGS(FONT_SETTINGS_INITIALIZE)
#undef FONT_SETTINGS_INITIALIZE

    private:
        winrt::weak_ref<Profile> _sourceProfile;
    }",5,cascadia\TerminalSettingsModel\FontConfig.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.FontConfig,FontConfigT<FontConfig>;IInheritable<FontConfig>,false,31,FontConfig,1
225623,TYPE_DECL,,cascadia\TerminalSettingsModel\GlobalAppSettings.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\GlobalAppSettings.cpp,cascadia\TerminalSettingsModel\GlobalAppSettings.cpp:<global>,,false,1,<global>,7
227149,TYPE_DECL,,cascadia\TerminalSettingsModel\GlobalAppSettings.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\GlobalAppSettings.hpp,cascadia\TerminalSettingsModel\GlobalAppSettings.hpp:<global>,,false,1,<global>,10
227153,TYPE_DECL,,,,class DeserializationTests,5,cascadia\TerminalSettingsModel\GlobalAppSettings.hpp,SettingsModelLocalTests.DeserializationTests,,false,32,DeserializationTests,1
227154,TYPE_DECL,,,,class ColorSchemeTests,5,cascadia\TerminalSettingsModel\GlobalAppSettings.hpp,SettingsModelLocalTests.ColorSchemeTests,,false,33,ColorSchemeTests,2
227161,TYPE_DECL,,,,"struct GlobalAppSettings : GlobalAppSettingsT<GlobalAppSettings>, IInheritable<GlobalAppSettings>
    {
    public:
        void _FinalizeInheritance() override;
        com_ptr<GlobalAppSettings> Copy() const;

        Windows::Foundation::Collections::IMapView<hstring, Model::ColorScheme> ColorSchemes() noexcept;
        void AddColorScheme(const Model::ColorScheme& scheme);
        void RemoveColorScheme(hstring schemeName);

        Model::ActionMap ActionMap() const noexcept;

        static com_ptr<GlobalAppSettings> FromJson(const Json::Value& json);
        void LayerJson(const Json::Value& json);

        Json::Value ToJson() const;

        const std::vector<SettingsLoadWarnings>& KeybindingsWarnings() const;

        // This DefaultProfile() setter is called by CascadiaSettings,
        // when it parses UnparsedDefaultProfile in _finalizeSettings().
        void DefaultProfile(const guid& defaultProfile) noexcept;
        guid DefaultProfile() const;

        Windows::Fo...",5,cascadia\TerminalSettingsModel\GlobalAppSettings.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.GlobalAppSettings,GlobalAppSettingsT<GlobalAppSettings>;IInheritable<GlobalAppSettings>,false,38,GlobalAppSettings,1
233931,TYPE_DECL,,cascadia\TerminalSettingsModel\HashUtils.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\HashUtils.hpp,cascadia\TerminalSettingsModel\HashUtils.hpp:<global>,,false,1,<global>,2
233935,TYPE_DECL,til.hash_trait<winrt.Windows.Foundation.IReference<T>><T>,,,"struct hash_trait<winrt::Windows::Foundation::IReference<T>>
    {
        constexpr void operator()(hasher& h, const winrt::Windows::Foundation::IReference<T>& v) const noexcept
        {
            if (v)
            {
                h.write(v.Value());
            }
        }
    }",5,cascadia\TerminalSettingsModel\HashUtils.hpp,til.hash_trait<winrt.Windows.Foundation.IReference<T>>,,false,25,hash_trait<winrt::Windows::Foundation::IReference<T>>,1
233953,TYPE_DECL,til.hash_trait<winrt.hstring><>,,,"struct hash_trait<winrt::hstring>
    {
        void operator()(hasher& h, const winrt::hstring& value) const noexcept
        {
            h.write(reinterpret_cast<const uint8_t*>(value.data()), value.size() * sizeof(wchar_t));
        }
    }",5,cascadia\TerminalSettingsModel\HashUtils.hpp,til.hash_trait<winrt.hstring>,,false,37,hash_trait<winrt::hstring>,2
233981,TYPE_DECL,,cascadia\TerminalSettingsModel\IDynamicProfileGenerator.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\IDynamicProfileGenerator.hpp,cascadia\TerminalSettingsModel\IDynamicProfileGenerator.hpp:<global>,,false,1,<global>,2
233989,TYPE_DECL,,,,"class IDynamicProfileGenerator
    {
    public:
        virtual ~IDynamicProfileGenerator() = default;
        virtual std::wstring_view GetNamespace() const noexcept = 0;
        virtual void GenerateProfiles(std::vector<winrt::com_ptr<implementation::Profile>>& profiles) const = 0;
    }",5,cascadia\TerminalSettingsModel\IDynamicProfileGenerator.hpp,winrt.Microsoft.Terminal.Settings.Model.IDynamicProfileGenerator,,false,28,IDynamicProfileGenerator,1
234005,TYPE_DECL,,cascadia\TerminalSettingsModel\IInheritable.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\IInheritable.hpp,cascadia\TerminalSettingsModel\IInheritable.hpp:<global>,,false,1,<global>,1
234014,TYPE_DECL,winrt.Microsoft.Terminal.Settings.Model.implementation.IInheritable<T>,,,"struct IInheritable
    {
    public:
        // Method Description:
        // - Create a new instance of T, but set its parent to this instance
        // Arguments:
        // - <none>
        // Return Value:
        // - a new instance of T with this instance set as its parent
        com_ptr<T> CreateChild() const
        {
            auto child{ winrt::make_self<T>() };

            // set ""this"" as the parent.
            // However, ""this"" is an IInheritable, so we need to cast it as T (the impl winrt type)
            //  to pass ownership over to the com_ptr.
            com_ptr<T> parent;
            winrt::copy_from_abi(parent, const_cast<T*>(static_cast<const T*>(this)));
            child->AddLeastImportantParent(parent);

            child->_FinalizeInheritance();
            return child;
        }

        void ClearParents()
        {
            _parents.clear();
        }

        void AddLeastImportantParent(com_ptr<T> parent)
        {
            _parents.em...",5,cascadia\TerminalSettingsModel\IInheritable.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.IInheritable,,false,20,IInheritable,1
234107,TYPE_DECL,ANY,,,using NullableSetting = std::optional<std::optional<T>>;,5,cascadia\TerminalSettingsModel\IInheritable.hpp,NullableSetting,,false,79,NullableSetting,2
234110,TYPE_DECL,,cascadia\TerminalSettingsModel\IInheritable.idl.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\IInheritable.idl.hpp,cascadia\TerminalSettingsModel\IInheritable.idl.hpp:<global>,,false,1,<global>,1
234129,TYPE_DECL,,cascadia\TerminalSettingsModel\IconPathConverter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\IconPathConverter.cpp,cascadia\TerminalSettingsModel\IconPathConverter.cpp:<global>,,false,1,<global>,8
234140,TYPE_DECL,winrt.Microsoft.Terminal.Settings.Model.implementation.BitmapIconSource<TIconSource>,,,"struct BitmapIconSource
    {
    }",5,cascadia\TerminalSettingsModel\IconPathConverter.cpp,winrt.Microsoft.Terminal.Settings.Model.implementation.BitmapIconSource,,false,28,BitmapIconSource,1
234141,TYPE_DECL,winrt.Microsoft.Terminal.Settings.Model.implementation.BitmapIconSource<winrt.Microsoft.UI.Xaml.Controls.IconSource><>,,,"struct BitmapIconSource<winrt::Microsoft::UI::Xaml::Controls::IconSource>
    {
        using type = winrt::Microsoft::UI::Xaml::Controls::BitmapIconSource;
    }",5,cascadia\TerminalSettingsModel\IconPathConverter.cpp,winrt.Microsoft.Terminal.Settings.Model.implementation.BitmapIconSource<winrt.Microsoft.UI.Xaml.Controls.IconSource>,,false,33,BitmapIconSource<winrt::Microsoft::UI::Xaml::Controls::IconSource>,2
234142,TYPE_DECL,ANY,,,using type = winrt::Microsoft::UI::Xaml::Controls::BitmapIconSource;,9,cascadia\TerminalSettingsModel\IconPathConverter.cpp,type,,false,35,type,1
234143,TYPE_DECL,winrt.Microsoft.Terminal.Settings.Model.implementation.BitmapIconSource<winrt.Windows.UI.Xaml.Controls.IconSource><>,,,"struct BitmapIconSource<winrt::Windows::UI::Xaml::Controls::IconSource>
    {
        using type = winrt::Windows::UI::Xaml::Controls::BitmapIconSource;
    }",5,cascadia\TerminalSettingsModel\IconPathConverter.cpp,winrt.Microsoft.Terminal.Settings.Model.implementation.BitmapIconSource<winrt.Windows.UI.Xaml.Controls.IconSource>,,false,39,BitmapIconSource<winrt::Windows::UI::Xaml::Controls::IconSource>,3
234144,TYPE_DECL,ANY,,,using type = winrt::Windows::UI::Xaml::Controls::BitmapIconSource;,9,cascadia\TerminalSettingsModel\IconPathConverter.cpp,type,,false,41,type,1
234145,TYPE_DECL,winrt.Microsoft.Terminal.Settings.Model.implementation.FontIconSource<TIconSource>,,,"struct FontIconSource
    {
    }",5,cascadia\TerminalSettingsModel\IconPathConverter.cpp,winrt.Microsoft.Terminal.Settings.Model.implementation.FontIconSource,,false,47,FontIconSource,4
234146,TYPE_DECL,winrt.Microsoft.Terminal.Settings.Model.implementation.FontIconSource<winrt.Microsoft.UI.Xaml.Controls.IconSource><>,,,"struct FontIconSource<winrt::Microsoft::UI::Xaml::Controls::IconSource>
    {
        using type = winrt::Microsoft::UI::Xaml::Controls::FontIconSource;
    }",5,cascadia\TerminalSettingsModel\IconPathConverter.cpp,winrt.Microsoft.Terminal.Settings.Model.implementation.FontIconSource<winrt.Microsoft.UI.Xaml.Controls.IconSource>,,false,52,FontIconSource<winrt::Microsoft::UI::Xaml::Controls::IconSource>,5
234147,TYPE_DECL,ANY,,,using type = winrt::Microsoft::UI::Xaml::Controls::FontIconSource;,9,cascadia\TerminalSettingsModel\IconPathConverter.cpp,type,,false,54,type,1
234148,TYPE_DECL,winrt.Microsoft.Terminal.Settings.Model.implementation.FontIconSource<winrt.Windows.UI.Xaml.Controls.IconSource><>,,,"struct FontIconSource<winrt::Windows::UI::Xaml::Controls::IconSource>
    {
        using type = winrt::Windows::UI::Xaml::Controls::FontIconSource;
    }",5,cascadia\TerminalSettingsModel\IconPathConverter.cpp,winrt.Microsoft.Terminal.Settings.Model.implementation.FontIconSource<winrt.Windows.UI.Xaml.Controls.IconSource>,,false,58,FontIconSource<winrt::Windows::UI::Xaml::Controls::IconSource>,6
234149,TYPE_DECL,ANY,,,using type = winrt::Windows::UI::Xaml::Controls::FontIconSource;,9,cascadia\TerminalSettingsModel\IconPathConverter.cpp,type,,false,60,type,1
234697,TYPE_DECL,,cascadia\TerminalSettingsModel\IconPathConverter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\IconPathConverter.hpp,cascadia\TerminalSettingsModel\IconPathConverter.hpp:<global>,,false,1,<global>,2
234706,TYPE_DECL,,,,"struct IconPathConverter : IconPathConverterT<IconPathConverter>
    {
        IconPathConverter() = default;

        Windows::Foundation::IInspectable Convert(const Windows::Foundation::IInspectable& value,
                                                  const Windows::UI::Xaml::Interop::TypeName& targetType,
                                                  const Windows::Foundation::IInspectable& parameter,
                                                  const hstring& language);

        Windows::Foundation::IInspectable ConvertBack(const Windows::Foundation::IInspectable& value,
                                                      const Windows::UI::Xaml::Interop::TypeName& targetType,
                                                      const Windows::Foundation::IInspectable& parameter,
                                                      const hstring& language);

        static Windows::UI::Xaml::Controls::IconElement IconWUX(const winrt::hstring& iconPath);
       ...",5,cascadia\TerminalSettingsModel\IconPathConverter.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.IconPathConverter,IconPathConverterT<IconPathConverter>,false,7,IconPathConverter,1
234760,TYPE_DECL,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<std.vector<T>><T>,,,"struct ConversionTrait<std::vector<T>>
    {
        std::vector<T> FromJson(const Json::Value& json)
        {
            std::vector<T> val;
            val.reserve(json.size());

            ConversionTrait<T> trait;
            if (json.isArray())
            {
                for (const auto& element : json)
                {
                    val.push_back(trait.FromJson(element));
                }
            }
            // If the value was null, then we want to accept the value, with an
            // empty array, not an array with a single empty string in it.
            // See GH#12276
            else if (!json.isNull())
            {
                val.push_back(trait.FromJson(json));
            }

            return val;
        }

        bool CanConvert(const Json::Value& json) const
        {
            ConversionTrait<T> trait;
            // If there's only one element provided, then see if we can convert
            // that single element into a length-1 ...",5,cascadia\TerminalSettingsModel\JsonUtils.hpp,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<std.vector<T>>,,false,358,ConversionTrait<std::vector<T>>,24
234775,TYPE_DECL,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<std.unordered_set<T>><T>,,,"struct ConversionTrait<std::unordered_set<T>>
    {
        std::unordered_set<T> FromJson(const Json::Value& json) const
        {
            ConversionTrait<T> trait;
            std::unordered_set<T> val;
            val.reserve(json.size());

            for (const auto& element : json)
            {
                val.emplace(trait.FromJson(element));
            }

            return val;
        }

        bool CanConvert(const Json::Value& json) const
        {
            ConversionTrait<T> trait;
            return json.isArray() && std::all_of(json.begin(), json.end(), [trait](const auto& json) mutable -> bool { return trait.CanConvert(json); });
        }

        Json::Value ToJson(const std::unordered_set<T>& val)
        {
            ConversionTrait<T> trait;
            Json::Value json{ Json::arrayValue };

            for (const auto& key : val)
            {
                json.append(trait.ToJson(key));
            }

            return json;
        }

     ...",5,cascadia\TerminalSettingsModel\JsonUtils.hpp,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<std.unordered_set<T>>,,false,411,ConversionTrait<std::unordered_set<T>>,25
234786,TYPE_DECL,"Microsoft.Terminal.Settings.Model.JsonUtils.EnumMapper<T,TBase>",,,"struct EnumMapper
    {
        using BaseEnumMapper = EnumMapper<T, TBase>;
        using ValueType = T;
        using pair_type = std::pair<std::string_view, T>;
        T FromJson(const Json::Value& json)
        {
            const auto name{ Detail::GetStringView(json) };
            for (const auto& pair : TBase::mappings)
            {
                if (pair.first == name)
                {
                    return pair.second;
                }
            }

            DeserializationError e{ json };
            e.expectedType = static_cast<const TBase&>(*this).TypeDescription();
            throw e;
        }

        bool CanConvert(const Json::Value& json)
        {
            return json.isString();
        }

        Json::Value ToJson(const T& val)
        {
            for (const auto& pair : TBase::mappings)
            {
                if (pair.second == val)
                {
                    return { pair.first.data() };
                }
            }
...",5,cascadia\TerminalSettingsModel\JsonUtils.hpp,Microsoft.Terminal.Settings.Model.JsonUtils.EnumMapper,,false,940,EnumMapper,36
234792,TYPE_DECL,,cascadia\TerminalSettingsModel\JsonUtils.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\JsonUtils.hpp,cascadia\TerminalSettingsModel\JsonUtils.hpp:<global>,,false,1,<global>,3
234796,TYPE_DECL,,,,struct guid,5,cascadia\TerminalSettingsModel\JsonUtils.hpp,winrt.guid,,false,25,guid,1
234797,TYPE_DECL,,,,struct hstring,5,cascadia\TerminalSettingsModel\JsonUtils.hpp,winrt.hstring,,false,26,hstring,2
234800,TYPE_DECL,winrt.Windows.Foundation.IReference<T>,,,struct IReference,9,cascadia\TerminalSettingsModel\JsonUtils.hpp,winrt.Windows.Foundation.IReference,,false,30,IReference,1
234815,TYPE_DECL,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<T>,,,"struct ConversionTrait
    {
        // Forward-declare these so the linker can pick up specializations from elsewhere!
        T FromJson(const Json::Value&);
        bool CanConvert(const Json::Value& json);

        Json::Value ToJson(const T& val);

        std::string TypeDescription() const { return ""<unknown>""; }
    }",5,cascadia\TerminalSettingsModel\JsonUtils.hpp,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait,,false,51,ConversionTrait,1
234877,TYPE_DECL,Microsoft.Terminal.Settings.Model.JsonUtils.OptionOracle<T>,,,"struct OptionOracle
    {
        template<typename U> // universal parameter
        static constexpr bool HasValue(U&&)
        {
            return true;
        }
    }",5,cascadia\TerminalSettingsModel\JsonUtils.hpp,Microsoft.Terminal.Settings.Model.JsonUtils.OptionOracle,,false,78,OptionOracle,3
234885,TYPE_DECL,Microsoft.Terminal.Settings.Model.JsonUtils.OptionOracle<std.optional<T>><T>,,,"struct OptionOracle<std::optional<T>>
    {
        static constexpr std::optional<T> EmptyV() { return std::nullopt; }
        static constexpr bool HasValue(const std::optional<T>& o) { return o.has_value(); }
        // We can return a reference here because the original value is stored inside an std::optional
        static constexpr auto&& Value(const std::optional<T>& o) { return *o; }
    }",5,cascadia\TerminalSettingsModel\JsonUtils.hpp,Microsoft.Terminal.Settings.Model.JsonUtils.OptionOracle<std.optional<T>>,,false,88,OptionOracle<std::optional<T>>,4
234912,TYPE_DECL,Microsoft.Terminal.Settings.Model.JsonUtils.OptionOracle<winrt.Windows.Foundation.IReference<T>><T>,,,"struct OptionOracle<::winrt::Windows::Foundation::IReference<T>>
    {
        static constexpr ::winrt::Windows::Foundation::IReference<T> EmptyV() { return nullptr; }
        static constexpr bool HasValue(const ::winrt::Windows::Foundation::IReference<T>& o) { return static_cast<bool>(o); }
        // We CANNOT return a reference here because IReference does NOT return a reference to its internal memory
        static constexpr auto Value(const ::winrt::Windows::Foundation::IReference<T>& o) { return o.Value(); }
    }",5,cascadia\TerminalSettingsModel\JsonUtils.hpp,Microsoft.Terminal.Settings.Model.JsonUtils.OptionOracle<winrt.Windows.Foundation.IReference<T>>,,false,97,OptionOracle<winrt::Windows::Foundation::IReference<T>>,5
234938,TYPE_DECL,,,,"class SerializationError : public std::runtime_error
    {
    public:
        SerializationError() :
            runtime_error(""failed to serialize"") {}
    }",5,cascadia\TerminalSettingsModel\JsonUtils.hpp,Microsoft.Terminal.Settings.Model.JsonUtils.SerializationError,std.runtime_error,false,105,SerializationError,6
234943,TYPE_DECL,,,,"class DeserializationError : public std::runtime_error
    {
    public:
        DeserializationError(const Json::Value& value) :
            runtime_error(std::string{ ""failed to deserialize JSON value"" }),
            jsonValue{ value } {}

        void SetKey(std::string_view newKey)
        {
            if (!key)
            {
                key = newKey;
            }
        }

        std::optional<std::string> key;
        Json::Value jsonValue;
        std::string expectedType;
    }",5,cascadia\TerminalSettingsModel\JsonUtils.hpp,Microsoft.Terminal.Settings.Model.JsonUtils.DeserializationError,std.runtime_error,false,112,DeserializationError,7
235244,TYPE_DECL,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<std.string><>,,,"struct ConversionTrait<std::string>
    {
        std::string FromJson(const Json::Value& json)
        {
            return json.asString();
        }

        bool CanConvert(const Json::Value& json)
        {
            return json.isString();
        }

        Json::Value ToJson(const std::string& val)
        {
            return val;
        }

        std::string TypeDescription() const
        {
            return ""string"";
        }
    }",5,cascadia\TerminalSettingsModel\JsonUtils.hpp,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<std.string>,,false,254,ConversionTrait<std::string>,20
235278,TYPE_DECL,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<std.wstring><>,,,"struct ConversionTrait<std::wstring>
    {
        std::wstring FromJson(const Json::Value& json)
        {
            return til::u8u16(Detail::GetStringView(json));
        }

        bool CanConvert(const Json::Value& json) const
        {
            return json.isString();
        }

        Json::Value ToJson(const std::wstring& val)
        {
            return til::u16u8(val);
        }

        std::string TypeDescription() const
        {
            return ""string"";
        }
    }",5,cascadia\TerminalSettingsModel\JsonUtils.hpp,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<std.wstring>,,false,278,ConversionTrait<std::wstring>,21
235321,TYPE_DECL,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<GUID><>,,,"struct ConversionTrait<GUID>
    {
        GUID FromJson(const Json::Value& json)
        {
            return ::Microsoft::Console::Utils::GuidFromString(til::u8u16(Detail::GetStringView(json)).c_str());
        }

        bool CanConvert(const Json::Value& json)
        {
            if (!json.isString())
            {
                return false;
            }

            const auto string{ Detail::GetStringView(json) };
            return string.length() == 38 && string.front() == '{' && string.back() == '}';
        }

        Json::Value ToJson(const GUID& val)
        {
            return til::u16u8(::Microsoft::Console::Utils::GuidToString(val));
        }

        std::string TypeDescription() const
        {
            return ""guid"";
        }
    }",5,cascadia\TerminalSettingsModel\JsonUtils.hpp,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<GUID>,,false,302,ConversionTrait<GUID>,22
235417,TYPE_DECL,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<winrt.guid><>,,,"struct ConversionTrait<winrt::guid>
    {
        winrt::guid FromJson(const Json::Value& json) const
        {
            return static_cast<winrt::guid>(ConversionTrait<GUID>{}.FromJson(json));
        }

        bool CanConvert(const Json::Value& json) const
        {
            return ConversionTrait<GUID>{}.CanConvert(json);
        }

        Json::Value ToJson(const winrt::guid& val)
        {
            return ConversionTrait<GUID>{}.ToJson(val);
        }

        std::string TypeDescription() const
        {
            return ConversionTrait<GUID>{}.TypeDescription();
        }
    }",5,cascadia\TerminalSettingsModel\JsonUtils.hpp,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<winrt.guid>,,false,334,ConversionTrait<winrt::guid>,23
235688,TYPE_DECL,"Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<std.unordered_map<std.string,T>><T>",,,"struct ConversionTrait<std::unordered_map<std::string, T>>
    {
        std::unordered_map<std::string, T> FromJson(const Json::Value& json) const
        {
            std::unordered_map<std::string, T> val;
            val.reserve(json.size());

            ConversionTrait<T> trait;
            for (auto it = json.begin(), end = json.end(); it != end; ++it)
            {
                GetValue(*it, val[it.name()], trait);
            }

            return val;
        }

        bool CanConvert(const Json::Value& json) const
        {
            if (!json.isObject())
            {
                return false;
            }
            ConversionTrait<T> trait;
            for (const auto& v : json)
            {
                if (!trait.CanConvert(v))
                {
                    return false;
                }
            }
            return true;
        }

        Json::Value ToJson(const std::unordered_map<std::string, T>& val)
        {
            Json::Valu...",5,cascadia\TerminalSettingsModel\JsonUtils.hpp,"Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<std.unordered_map<std.string,T>>",,false,453,"ConversionTrait<std::unordered_map<std::string,T>>",26
235808,TYPE_DECL,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<bool><>,,,"struct ConversionTrait<bool>
    {
        bool FromJson(const Json::Value& json)
        {
            return json.asBool();
        }

        bool CanConvert(const Json::Value& json)
        {
            return json.isBool();
        }

        Json::Value ToJson(const bool val)
        {
            return val;
        }

        std::string TypeDescription() const
        {
            return ""true | false"";
        }
    }",5,cascadia\TerminalSettingsModel\JsonUtils.hpp,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<bool>,,false,624,ConversionTrait<bool>,27
235842,TYPE_DECL,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<int><>,,,"struct ConversionTrait<int>
    {
        int FromJson(const Json::Value& json)
        {
            return json.asInt();
        }

        bool CanConvert(const Json::Value& json)
        {
            return json.isInt();
        }

        Json::Value ToJson(const int& val)
        {
            return val;
        }

        std::string TypeDescription() const
        {
            return ""number"";
        }
    }",5,cascadia\TerminalSettingsModel\JsonUtils.hpp,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<int>,,false,648,ConversionTrait<int>,28
235876,TYPE_DECL,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<unsigned int><>,,,"struct ConversionTrait<unsigned int>
    {
        unsigned int FromJson(const Json::Value& json)
        {
            return json.asUInt();
        }

        bool CanConvert(const Json::Value& json)
        {
            return json.isUInt();
        }

        Json::Value ToJson(const unsigned int& val)
        {
            return val;
        }

        std::string TypeDescription() const
        {
            return ""number (>= 0)"";
        }
    }",5,cascadia\TerminalSettingsModel\JsonUtils.hpp,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<unsigned int>,,false,672,ConversionTrait<unsigned int>,29
235910,TYPE_DECL,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<uint64_t><>,,,"struct ConversionTrait<uint64_t>
    {
        unsigned int FromJson(const Json::Value& json)
        {
            return json.asUInt();
        }

        bool CanConvert(const Json::Value& json)
        {
            return json.isUInt();
        }

        Json::Value ToJson(const uint64_t& val)
        {
            return val;
        }

        std::string TypeDescription() const
        {
            return ""number (>= 0)"";
        }
    }",5,cascadia\TerminalSettingsModel\JsonUtils.hpp,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<uint64_t>,,false,696,ConversionTrait<uint64_t>,30
235944,TYPE_DECL,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<float><>,,,"struct ConversionTrait<float>
    {
        float FromJson(const Json::Value& json)
        {
            return json.asFloat();
        }

        bool CanConvert(const Json::Value& json)
        {
            return json.isNumeric();
        }

        Json::Value ToJson(const float& val)
        {
            return val;
        }

        std::string TypeDescription() const
        {
            return ""number"";
        }
    }",5,cascadia\TerminalSettingsModel\JsonUtils.hpp,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<float>,,false,720,ConversionTrait<float>,31
235978,TYPE_DECL,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<double><>,,,"struct ConversionTrait<double>
    {
        double FromJson(const Json::Value& json)
        {
            return json.asDouble();
        }

        bool CanConvert(const Json::Value& json)
        {
            return json.isNumeric();
        }

        Json::Value ToJson(const double& val)
        {
            return val;
        }

        std::string TypeDescription() const
        {
            return ""number"";
        }
    }",5,cascadia\TerminalSettingsModel\JsonUtils.hpp,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<double>,,false,744,ConversionTrait<double>,32
236012,TYPE_DECL,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<til.color><>,,,"struct ConversionTrait<til::color>
    {
        til::color FromJson(const Json::Value& json)
        {
            return ::Microsoft::Console::Utils::ColorFromHexString(Detail::GetStringView(json));
        }

        bool CanConvert(const Json::Value& json)
        {
            if (!json.isString())
            {
                return false;
            }

            const auto string{ Detail::GetStringView(json) };
            return (string.length() == 7 || string.length() == 4) && string.front() == '#';
        }

        Json::Value ToJson(const til::color& val)
        {
            return til::u16u8(val.ToHexString(true));
        }

        std::string TypeDescription() const
        {
            return ""color (#rrggbb, #rgb)"";
        }
    }",5,cascadia\TerminalSettingsModel\JsonUtils.hpp,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<til.color>,,false,768,ConversionTrait<til::color>,33
236097,TYPE_DECL,"Microsoft.Terminal.Settings.Model.JsonUtils.OptionalConverter<T,TDelegatedConverter,TOpt>",,,"struct OptionalConverter
    {
        using Oracle = OptionOracle<TOpt>;
        TDelegatedConverter delegatedConverter{};

        TOpt FromJson(const Json::Value& json)
        {
            if (!json && !delegatedConverter.CanConvert(json))
            {
                // If the nested converter can't deal with null, emit an empty optional
                // If it can, it probably has specific null behavior that it wants to use.
                return Oracle::EmptyV();
            }
            TOpt val{ delegatedConverter.FromJson(json) };
            return val;
        }

        bool CanConvert(const Json::Value& json)
        {
            return json.isNull() || delegatedConverter.CanConvert(json);
        }

        Json::Value ToJson(const TOpt& val)
        {
            if (!Oracle::HasValue(val))
            {
                return Json::Value::nullSingleton();
            }
            return delegatedConverter.ToJson(Oracle::Value(val));
        }

        std::st...",5,cascadia\TerminalSettingsModel\JsonUtils.hpp,Microsoft.Terminal.Settings.Model.JsonUtils.OptionalConverter,,false,890,OptionalConverter,34
236098,TYPE_DECL,OptionOracle<TOpt>,,,using Oracle = OptionOracle<TOpt>;,9,cascadia\TerminalSettingsModel\JsonUtils.hpp,Oracle,,false,892,Oracle,1
236194,TYPE_DECL,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<std.optional<T>><T>,,,"struct ConversionTrait<std::optional<T>> : public OptionalConverter<T, ConversionTrait<T>, std::optional<T>>
    {
    }",5,cascadia\TerminalSettingsModel\JsonUtils.hpp,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<std.optional<T>>,"OptionalConverter<T, ConversionTrait<T>, std.optional<T>>",false,928,ConversionTrait<std::optional<T>>,35
236195,TYPE_DECL,"EnumMapper<T, TBase>",,,"using BaseEnumMapper = EnumMapper<T, TBase>;",9,cascadia\TerminalSettingsModel\JsonUtils.hpp,BaseEnumMapper,,false,942,BaseEnumMapper,1
236196,TYPE_DECL,T,,,using ValueType = T;,9,cascadia\TerminalSettingsModel\JsonUtils.hpp,ValueType,,false,943,ValueType,2
236197,TYPE_DECL,ANY,,,"using pair_type = std::pair<std::string_view, T>;",9,cascadia\TerminalSettingsModel\JsonUtils.hpp,pair_type,,false,944,pair_type,3
236326,TYPE_DECL,"Microsoft.Terminal.Settings.Model.JsonUtils.FlagMapper<T,TBase>",,,"struct FlagMapper : public EnumMapper<T, TBase>
    {
    private:
        // Hide BaseEnumMapper so FlagMapper's consumers cannot see
        // it.
        using BaseEnumMapper = EnumMapper<T, TBase>::BaseEnumMapper;

    public:
        using BaseFlagMapper = FlagMapper<T, TBase>;
        static constexpr T AllSet{ static_cast<T>(~0u) };
        static constexpr T AllClear{ static_cast<T>(0u) };

        T FromJson(const Json::Value& json)
        {
            if (json.isString())
            {
                return BaseEnumMapper::FromJson(json);
            }
            else if (json.isArray())
            {
                unsigned int seen{ 0 };
                T value{};
                for (const auto& element : json)
                {
                    const auto newFlag{ BaseEnumMapper::FromJson(element) };
                    if (++seen > 1 &&
                        ((newFlag == AllClear && value != AllClear) ||
                         (value == AllClear && newFla...",5,cascadia\TerminalSettingsModel\JsonUtils.hpp,Microsoft.Terminal.Settings.Model.JsonUtils.FlagMapper,"EnumMapper<T, TBase>",false,992,FlagMapper,37
236327,TYPE_DECL,ANY,,,"using BaseEnumMapper = EnumMapper<T, TBase>::BaseEnumMapper;",9,cascadia\TerminalSettingsModel\JsonUtils.hpp,BaseEnumMapper,,false,997,BaseEnumMapper,1
236328,TYPE_DECL,"FlagMapper<T, TBase>",,,"using BaseFlagMapper = FlagMapper<T, TBase>;",9,cascadia\TerminalSettingsModel\JsonUtils.hpp,BaseFlagMapper,,false,1000,BaseFlagMapper,2
236551,TYPE_DECL,Microsoft.Terminal.Settings.Model.JsonUtils.PermissiveStringConverter<T>,,,"struct PermissiveStringConverter
    {
    }",5,cascadia\TerminalSettingsModel\JsonUtils.hpp,Microsoft.Terminal.Settings.Model.JsonUtils.PermissiveStringConverter,,false,1072,PermissiveStringConverter,38
236552,TYPE_DECL,Microsoft.Terminal.Settings.Model.JsonUtils.PermissiveStringConverter<std.wstring><>,,,"struct PermissiveStringConverter<std::wstring>
    {
        std::wstring FromJson(const Json::Value& json)
        {
            return til::u8u16(json.asString());
        }

        bool CanConvert(const Json::Value& /*unused*/)
        {
            return true;
        }

        std::string TypeDescription() const
        {
            return ""any"";
        }
    }",5,cascadia\TerminalSettingsModel\JsonUtils.hpp,Microsoft.Terminal.Settings.Model.JsonUtils.PermissiveStringConverter<std.wstring>,,false,1077,PermissiveStringConverter<std::wstring>,39
236590,TYPE_DECL,,cascadia\TerminalSettingsModel\KeyChordSerialization.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\KeyChordSerialization.cpp,cascadia\TerminalSettingsModel\KeyChordSerialization.cpp:<global>,,false,1,<global>,5
236593,TYPE_DECL,ANY,,,using VirtualKeyModifiers = winrt::Windows::System::VirtualKeyModifiers;,1,cascadia\TerminalSettingsModel\KeyChordSerialization.cpp,VirtualKeyModifiers,,false,13,VirtualKeyModifiers,1
236720,TYPE_DECL,ANY,,,"using nameToVkeyPair = std::pair<std::wstring_view, int32_t>;",5,cascadia\TerminalSettingsModel\KeyChordSerialization.cpp,nameToVkeyPair,,false,131,nameToVkeyPair,2
237309,TYPE_DECL,ANY,,,"using vkeyToNamePair = std::pair<int32_t, std::wstring_view>;",5,cascadia\TerminalSettingsModel\KeyChordSerialization.cpp,vkeyToNamePair,,false,247,vkeyToNamePair,1
237933,TYPE_DECL,,cascadia\TerminalSettingsModel\KeyChordSerialization.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\KeyChordSerialization.hpp,cascadia\TerminalSettingsModel\KeyChordSerialization.hpp:<global>,,false,1,<global>,3
237942,TYPE_DECL,,,,"struct KeyChordSerialization
    {
        KeyChordSerialization() = default;

        static winrt::Microsoft::Terminal::Control::KeyChord FromString(const winrt::hstring& str);
        static winrt::hstring ToString(const winrt::Microsoft::Terminal::Control::KeyChord& chord);
    }",5,cascadia\TerminalSettingsModel\KeyChordSerialization.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.KeyChordSerialization,,false,11,KeyChordSerialization,1
237957,TYPE_DECL,ConversionTrait<winrt.Microsoft.Terminal.Control.KeyChord><>,,,"struct Microsoft::Terminal::Settings::Model::JsonUtils::ConversionTrait<winrt::Microsoft::Terminal::Control::KeyChord>
{
    winrt::Microsoft::Terminal::Control::KeyChord FromJson(const Json::Value& json);
    bool CanConvert(const Json::Value& json);
    Json::Value ToJson(const winrt::Microsoft::Terminal::Control::KeyChord& val);
    std::string TypeDescription() const;
}",1,cascadia\TerminalSettingsModel\KeyChordSerialization.hpp,ConversionTrait<winrt.Microsoft.Terminal.Control.KeyChord>,,false,21,ConversionTrait<winrt::Microsoft::Terminal::Control::KeyChord>,2
237986,TYPE_DECL,,cascadia\TerminalSettingsModel\LegacyProfileGeneratorNamespaces.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\LegacyProfileGeneratorNamespaces.hpp,cascadia\TerminalSettingsModel\LegacyProfileGeneratorNamespaces.hpp:<global>,,false,1,<global>,1
238006,TYPE_DECL,,cascadia\TerminalSettingsModel\MTSMSettings.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\MTSMSettings.hpp,cascadia\TerminalSettingsModel\MTSMSettings.hpp:<global>,,false,1,<global>,1
238019,TYPE_DECL,,cascadia\TerminalSettingsModel\MatchProfilesEntry.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\MatchProfilesEntry.cpp,cascadia\TerminalSettingsModel\MatchProfilesEntry.cpp:<global>,,false,1,<global>,5
238165,TYPE_DECL,,cascadia\TerminalSettingsModel\MatchProfilesEntry.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\MatchProfilesEntry.hpp,cascadia\TerminalSettingsModel\MatchProfilesEntry.hpp:<global>,,false,1,<global>,3
238174,TYPE_DECL,,,,"struct MatchProfilesEntry : MatchProfilesEntryT<MatchProfilesEntry, ProfileCollectionEntry>
    {
    public:
        MatchProfilesEntry() noexcept;

        Json::Value ToJson() const override;
        static com_ptr<NewTabMenuEntry> FromJson(const Json::Value& json);

        bool MatchesProfile(const Model::Profile& profile);

        WINRT_PROPERTY(winrt::hstring, Name);
        WINRT_PROPERTY(winrt::hstring, Commandline);
        WINRT_PROPERTY(winrt::hstring, Source);
    }",5,cascadia\TerminalSettingsModel\MatchProfilesEntry.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.MatchProfilesEntry,"MatchProfilesEntryT<MatchProfilesEntry, ProfileCollectionEntry>",false,23,MatchProfilesEntry,1
238216,TYPE_DECL,,cascadia\TerminalSettingsModel\ModelSerializationHelpers.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\ModelSerializationHelpers.hpp,cascadia\TerminalSettingsModel\ModelSerializationHelpers.hpp:<global>,,false,1,<global>,1
238362,TYPE_DECL,,cascadia\TerminalSettingsModel\NewTabMenuEntry.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\NewTabMenuEntry.cpp,cascadia\TerminalSettingsModel\NewTabMenuEntry.cpp:<global>,,false,1,<global>,11
238365,TYPE_DECL,ANY,,,using NewTabMenuEntryType = winrt::Microsoft::Terminal::Settings::Model::NewTabMenuEntryType;,1,cascadia\TerminalSettingsModel\NewTabMenuEntry.cpp,NewTabMenuEntryType,,false,18,NewTabMenuEntryType,1
238474,TYPE_DECL,,cascadia\TerminalSettingsModel\NewTabMenuEntry.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\NewTabMenuEntry.hpp,cascadia\TerminalSettingsModel\NewTabMenuEntry.hpp:<global>,,false,1,<global>,3
238483,TYPE_DECL,,,,"struct NewTabMenuEntry : NewTabMenuEntryT<NewTabMenuEntry>
    {
    public:
        static com_ptr<NewTabMenuEntry> FromJson(const Json::Value& json);
        virtual Json::Value ToJson() const;

        WINRT_PROPERTY(NewTabMenuEntryType, Type, NewTabMenuEntryType::Invalid);

        // We have a protected/hidden constructor so consumers cannot instantiate
        // this base class directly and need to go through either FromJson
        // or one of the subclasses.
    protected:
        explicit NewTabMenuEntry(const NewTabMenuEntryType type) noexcept;
    }",5,cascadia\TerminalSettingsModel\NewTabMenuEntry.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.NewTabMenuEntry,NewTabMenuEntryT<NewTabMenuEntry>,false,23,NewTabMenuEntry,1
238504,TYPE_DECL,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<NewTabMenuEntry><>,,,"struct ConversionTrait<NewTabMenuEntry>
    {
        NewTabMenuEntry FromJson(const Json::Value& json)
        {
            const auto entry = implementation::NewTabMenuEntry::FromJson(json);
            if (entry == nullptr)
            {
                return nullptr;
            }

            return *entry;
        }

        bool CanConvert(const Json::Value& json) const
        {
            return json.isObject();
        }

        Json::Value ToJson(const NewTabMenuEntry& val)
        {
            return winrt::get_self<implementation::NewTabMenuEntry>(val)->ToJson();
        }

        std::string TypeDescription() const
        {
            return ""NewTabMenuEntry"";
        }
    }",5,cascadia\TerminalSettingsModel\NewTabMenuEntry.hpp,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<NewTabMenuEntry>,,false,44,ConversionTrait<NewTabMenuEntry>,1
238588,TYPE_DECL,,cascadia\TerminalSettingsModel\PowershellCoreProfileGenerator.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\PowershellCoreProfileGenerator.cpp,cascadia\TerminalSettingsModel\PowershellCoreProfileGenerator.cpp:<global>,,false,1,<global>,12
238622,TYPE_DECL,,,,"enum PowerShellFlags
    {
        None = 0,

        // These flags are used as a sort key, so they encode some native ordering.
        // They are ordered such that the ""most important"" flags have the largest
        // impact on the sort space. For example, since we want Preview to be very polar
        // we give it the highest flag value.
        // The ""ideal"" powershell instance has 0 flags (stable, native, Program Files location)
        //
        // With this ordering, the sort space ends up being (for PowerShell 6)
        // (numerically greater values are on the left; this is flipped in the final sort)
        //
        // <-- Less Valued .................................... More Valued -->
        // |                 All instances of PS 6                 | All PS7  |
        // |          Preview          |          Stable           | ~~~      |
        // |  Non-Native | Native      |  Non-Native | Native      | ~~~      |
        // | Trd  | Pack | Trd  | Pack | T...",5,cascadia\TerminalSettingsModel\PowershellCoreProfileGenerator.cpp,anonymous_namespace_1.PowerShellFlags,,false,28,PowerShellFlags,1
238674,TYPE_DECL,,,,"struct PowerShellInstance
    {
        int majorVersion; // 0 = we don't know, sort last.
        PowerShellFlags flags;
        std::filesystem::path executablePath;

        constexpr bool operator<(const PowerShellInstance& second) const
        {
            if (majorVersion != second.majorVersion)
            {
                return majorVersion < second.majorVersion;
            }
            if (flags != second.flags)
            {
                return flags > second.flags; // flags are inverted because ""0"" is ideal; see above
            }
            return executablePath < second.executablePath; // fall back to path sorting
        }

        // Method Description:
        // - Generates a name, based on flags, for a powershell instance.
        // Return value:
        // - the name
        std::wstring Name() const
        {
            std::wstringstream namestream;
            namestream << L""PowerShell"";

            if (WI_IsFlagSet(flags, PowerShellFlags::Store)...",5,cascadia\TerminalSettingsModel\PowershellCoreProfileGenerator.cpp,anonymous_namespace_2.PowerShellInstance,,false,66,PowerShellInstance,3
239366,TYPE_DECL,,cascadia\TerminalSettingsModel\PowershellCoreProfileGenerator.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\PowershellCoreProfileGenerator.hpp,cascadia\TerminalSettingsModel\PowershellCoreProfileGenerator.hpp:<global>,,false,1,<global>,2
239374,TYPE_DECL,,,,"class PowershellCoreProfileGenerator final : public IDynamicProfileGenerator
    {
    public:
        static const std::wstring_view GetPreferredPowershellProfileName();

        std::wstring_view GetNamespace() const noexcept override;
        void GenerateProfiles(std::vector<winrt::com_ptr<implementation::Profile>>& profiles) const override;
    }",5,cascadia\TerminalSettingsModel\PowershellCoreProfileGenerator.hpp,winrt.Microsoft.Terminal.Settings.Model.PowershellCoreProfileGenerator,IDynamicProfileGenerator,false,23,PowershellCoreProfileGenerator,1
239406,TYPE_DECL,,cascadia\TerminalSettingsModel\Profile.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\Profile.cpp,cascadia\TerminalSettingsModel\Profile.cpp:<global>,,false,1,<global>,9
240632,TYPE_DECL,,cascadia\TerminalSettingsModel\Profile.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\Profile.hpp,cascadia\TerminalSettingsModel\Profile.hpp:<global>,,false,1,<global>,8
240636,TYPE_DECL,,,,class DeserializationTests,5,cascadia\TerminalSettingsModel\Profile.hpp,SettingsModelLocalTests.DeserializationTests,,false,59,DeserializationTests,1
240637,TYPE_DECL,,,,class ProfileTests,5,cascadia\TerminalSettingsModel\Profile.hpp,SettingsModelLocalTests.ProfileTests,,false,60,ProfileTests,2
240638,TYPE_DECL,,,,class ColorSchemeTests,5,cascadia\TerminalSettingsModel\Profile.hpp,SettingsModelLocalTests.ColorSchemeTests,,false,61,ColorSchemeTests,3
240639,TYPE_DECL,,,,class KeyBindingsTests,5,cascadia\TerminalSettingsModel\Profile.hpp,SettingsModelLocalTests.KeyBindingsTests,,false,62,KeyBindingsTests,4
240641,TYPE_DECL,,,,class DynamicProfileTests,5,cascadia\TerminalSettingsModel\Profile.hpp,TerminalAppUnitTests.DynamicProfileTests,,false,66,DynamicProfileTests,1
240642,TYPE_DECL,,,,class JsonTests,5,cascadia\TerminalSettingsModel\Profile.hpp,TerminalAppUnitTests.JsonTests,,false,67,JsonTests,2
240643,TYPE_DECL,ANY,,,"using IEnvironmentVariableMap = winrt::Windows::Foundation::Collections::IMap<winrt::hstring, winrt::hstring>;",1,cascadia\TerminalSettingsModel\Profile.hpp,IEnvironmentVariableMap,,false,70,IEnvironmentVariableMap,3
240666,TYPE_DECL,,,,"struct Profile : ProfileT<Profile>, IInheritable<Profile>
    {
    public:
        Profile() noexcept = default;
        Profile(guid guid) noexcept;

        void CreateUnfocusedAppearance();
        void DeleteUnfocusedAppearance();

        hstring ToString()
        {
            return Name();
        }

        static void CopyInheritanceGraphs(std::unordered_map<const Profile*, winrt::com_ptr<Profile>>& visited, const std::vector<winrt::com_ptr<Profile>>& source, std::vector<winrt::com_ptr<Profile>>& target);
        winrt::com_ptr<Profile>& CopyInheritanceGraph(std::unordered_map<const Profile*, winrt::com_ptr<Profile>>& visited) const;
        winrt::com_ptr<Profile> CopySettings() const;

        static com_ptr<Profile> FromJson(const Json::Value& json);
        void LayerJson(const Json::Value& json);
        Json::Value ToJson() const;

        hstring EvaluatedStartingDirectory() const;

        Model::IAppearanceConfig DefaultAppearance();
        Model::FontConfig Fo...",5,cascadia\TerminalSettingsModel\Profile.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.Profile,ProfileT<Profile>;IInheritable<Profile>,false,78,Profile,1
244576,TYPE_DECL,,,,friend class SettingsModelLocalTests::DeserializationTests,9,cascadia\TerminalSettingsModel\Profile.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.Profile.DeserializationTests,,false,135,DeserializationTests,263
244577,TYPE_DECL,,,,friend class SettingsModelLocalTests::ProfileTests,9,cascadia\TerminalSettingsModel\Profile.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.Profile.ProfileTests,,false,136,ProfileTests,264
244578,TYPE_DECL,,,,friend class SettingsModelLocalTests::ColorSchemeTests,9,cascadia\TerminalSettingsModel\Profile.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.Profile.ColorSchemeTests,,false,137,ColorSchemeTests,265
244579,TYPE_DECL,,,,friend class SettingsModelLocalTests::KeyBindingsTests,9,cascadia\TerminalSettingsModel\Profile.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.Profile.KeyBindingsTests,,false,138,KeyBindingsTests,266
244580,TYPE_DECL,,,,friend class TerminalAppUnitTests::DynamicProfileTests,9,cascadia\TerminalSettingsModel\Profile.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.Profile.DynamicProfileTests,,false,139,DynamicProfileTests,267
244581,TYPE_DECL,,,,friend class TerminalAppUnitTests::JsonTests,9,cascadia\TerminalSettingsModel\Profile.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.Profile.JsonTests,,false,140,JsonTests,268
244817,TYPE_DECL,,cascadia\TerminalSettingsModel\ProfileCollectionEntry.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\ProfileCollectionEntry.cpp,cascadia\TerminalSettingsModel\ProfileCollectionEntry.cpp:<global>,,false,1,<global>,5
244833,TYPE_DECL,,cascadia\TerminalSettingsModel\ProfileCollectionEntry.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\ProfileCollectionEntry.hpp,cascadia\TerminalSettingsModel\ProfileCollectionEntry.hpp:<global>,,false,1,<global>,4
244842,TYPE_DECL,,,,"struct ProfileCollectionEntry : ProfileCollectionEntryT<ProfileCollectionEntry, NewTabMenuEntry>
    {
    public:
        // Since a comma does not work very nicely in a macro and we need one
        // for our map definition, we use a macro te define a comma.
#define COMMA ,
        WINRT_PROPERTY(winrt::Windows::Foundation::Collections::IMap<int COMMA Model::Profile>, Profiles);
#undef COMMA

        // We have a protected/hidden constructor so consumers cannot instantiate
        // this class directly and need to go through one of the subclasses.
    protected:
        explicit ProfileCollectionEntry(const NewTabMenuEntryType type) noexcept;
    }",5,cascadia\TerminalSettingsModel\ProfileCollectionEntry.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.ProfileCollectionEntry,"ProfileCollectionEntryT<ProfileCollectionEntry, NewTabMenuEntry>",false,25,ProfileCollectionEntry,1
244859,TYPE_DECL,,cascadia\TerminalSettingsModel\ProfileEntry.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\ProfileEntry.cpp,cascadia\TerminalSettingsModel\ProfileEntry.cpp:<global>,,false,1,<global>,5
244944,TYPE_DECL,,cascadia\TerminalSettingsModel\ProfileEntry.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\ProfileEntry.hpp,cascadia\TerminalSettingsModel\ProfileEntry.hpp:<global>,,false,1,<global>,4
244953,TYPE_DECL,,,,"struct ProfileEntry : ProfileEntryT<ProfileEntry, NewTabMenuEntry>
    {
    public:
        ProfileEntry() noexcept;
        explicit ProfileEntry(const winrt::hstring& profile) noexcept;

        Json::Value ToJson() const override;
        static com_ptr<NewTabMenuEntry> FromJson(const Json::Value& json);

        // In JSON, only a profile name (guid or string) can be set;
        // but the consumers of this class would like to have direct access
        // to the appropriate Model::Profile. Therefore, we have a read-only
        // property ProfileName that corresponds to the JSON value, and
        // then CascadiaSettings::_resolveNewTabMenuProfiles() will populate
        // the Profile and ProfileIndex properties appropriately
        winrt::hstring ProfileName() const noexcept { return _ProfileName; };

        WINRT_PROPERTY(Model::Profile, Profile);
        WINRT_PROPERTY(int, ProfileIndex);

    private:
        winrt::hstring _ProfileName;
    }",5,cascadia\TerminalSettingsModel\ProfileEntry.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.ProfileEntry,"ProfileEntryT<ProfileEntry, NewTabMenuEntry>",false,25,ProfileEntry,1
245000,TYPE_DECL,,cascadia\TerminalSettingsModel\RemainingProfilesEntry.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\RemainingProfilesEntry.cpp,cascadia\TerminalSettingsModel\RemainingProfilesEntry.cpp:<global>,,false,1,<global>,6
245023,TYPE_DECL,,cascadia\TerminalSettingsModel\RemainingProfilesEntry.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\RemainingProfilesEntry.hpp,cascadia\TerminalSettingsModel\RemainingProfilesEntry.hpp:<global>,,false,1,<global>,3
245032,TYPE_DECL,,,,"struct RemainingProfilesEntry : RemainingProfilesEntryT<RemainingProfilesEntry, ProfileCollectionEntry>
    {
    public:
        RemainingProfilesEntry() noexcept;

        static com_ptr<NewTabMenuEntry> FromJson(const Json::Value& json);
    }",5,cascadia\TerminalSettingsModel\RemainingProfilesEntry.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.RemainingProfilesEntry,"RemainingProfilesEntryT<RemainingProfilesEntry, ProfileCollectionEntry>",false,23,RemainingProfilesEntry,1
245059,TYPE_DECL,,cascadia\TerminalSettingsModel\SeparatorEntry.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\SeparatorEntry.cpp,cascadia\TerminalSettingsModel\SeparatorEntry.cpp:<global>,,false,1,<global>,5
245082,TYPE_DECL,,cascadia\TerminalSettingsModel\SeparatorEntry.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\SeparatorEntry.hpp,cascadia\TerminalSettingsModel\SeparatorEntry.hpp:<global>,,false,1,<global>,3
245091,TYPE_DECL,,,,"struct SeparatorEntry : SeparatorEntryT<SeparatorEntry, NewTabMenuEntry>
    {
    public:
        SeparatorEntry() noexcept;

        static com_ptr<NewTabMenuEntry> FromJson(const Json::Value& json);
    }",5,cascadia\TerminalSettingsModel\SeparatorEntry.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.SeparatorEntry,"SeparatorEntryT<SeparatorEntry, NewTabMenuEntry>",false,22,SeparatorEntry,1
245110,TYPE_DECL,,cascadia\TerminalSettingsModel\SettingsTypes.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\SettingsTypes.hpp,cascadia\TerminalSettingsModel\SettingsTypes.hpp:<global>,,false,1,<global>,1
245118,TYPE_DECL,,,,"enum class ExpandCommandType : uint32_t
    {
        None = 0,
        Profiles,
        ColorSchemes
    }",5,cascadia\TerminalSettingsModel\SettingsTypes.hpp,winrt.Microsoft.Terminal.Settings.Model.ExpandCommandType,,false,16,ExpandCommandType,1
245139,TYPE_DECL,,cascadia\TerminalSettingsModel\SshHostGenerator.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\SshHostGenerator.cpp,cascadia\TerminalSettingsModel\SshHostGenerator.cpp:<global>,,false,1,<global>,5
245317,TYPE_DECL,,cascadia\TerminalSettingsModel\SshHostGenerator.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\SshHostGenerator.hpp,cascadia\TerminalSettingsModel\SshHostGenerator.hpp:<global>,,false,1,<global>,2
245325,TYPE_DECL,,,,"class SshHostGenerator final : public IDynamicProfileGenerator
    {
    public:
        std::wstring_view GetNamespace() const noexcept override;
        void GenerateProfiles(std::vector<winrt::com_ptr<implementation::Profile>>& profiles) const override;

    private:
        static const std::wregex _configKeyValueRegex;

        static std::wstring_view _getProfileName(const std::wstring_view& hostName) noexcept;
        static std::wstring_view _getProfileIconPath() noexcept;
        static std::wstring_view _getProfileCommandLine(const std::wstring_view& sshExePath, const std::wstring_view& hostName) noexcept;

        static bool _tryFindSshExePath(std::wstring& sshExePath) noexcept;
        static bool _tryParseConfigKeyValue(const std::wstring_view& line, std::wstring& key, std::wstring& value) noexcept;
        static void _getHostNamesFromConfigFile(const std::wstring_view& configPath, std::vector<std::wstring>& hostNames) noexcept;
    }",5,cascadia\TerminalSettingsModel\SshHostGenerator.hpp,winrt.Microsoft.Terminal.Settings.Model.SshHostGenerator,IDynamicProfileGenerator,false,23,SshHostGenerator,1
245382,TYPE_DECL,,cascadia\TerminalSettingsModel\TerminalSettings.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\TerminalSettings.cpp,cascadia\TerminalSettingsModel\TerminalSettings.cpp:<global>,,false,1,<global>,6
246896,TYPE_DECL,,cascadia\TerminalSettingsModel\TerminalSettings.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\TerminalSettings.hpp,cascadia\TerminalSettingsModel\TerminalSettings.hpp:<global>,,false,1,<global>,6
246899,TYPE_DECL,ANY,,,"using IFontAxesMap = winrt::Windows::Foundation::Collections::IMap<winrt::hstring, float>;",1,cascadia\TerminalSettingsModel\TerminalSettings.hpp,IFontAxesMap,,false,23,IFontAxesMap,1
246900,TYPE_DECL,ANY,,,"using IFontFeatureMap = winrt::Windows::Foundation::Collections::IMap<winrt::hstring, uint32_t>;",1,cascadia\TerminalSettingsModel\TerminalSettings.hpp,IFontFeatureMap,,false,24,IFontFeatureMap,2
246901,TYPE_DECL,ANY,,,"using IEnvironmentVariableMap = winrt::Windows::Foundation::Collections::IMap<winrt::hstring, winrt::hstring>;",1,cascadia\TerminalSettingsModel\TerminalSettings.hpp,IEnvironmentVariableMap,,false,25,IEnvironmentVariableMap,3
246903,TYPE_DECL,,,,class TerminalSettingsTests,5,cascadia\TerminalSettingsModel\TerminalSettings.hpp,SettingsModelLocalTests.TerminalSettingsTests,,false,30,TerminalSettingsTests,1
246910,TYPE_DECL,,,,"struct TerminalSettingsCreateResult :
        public TerminalSettingsCreateResultT<TerminalSettingsCreateResult>
    {
    public:
        TerminalSettingsCreateResult(Model::TerminalSettings defaultSettings, Model::TerminalSettings unfocusedSettings) :
            _defaultSettings(defaultSettings),
            _unfocusedSettings(unfocusedSettings) {}

        TerminalSettingsCreateResult(Model::TerminalSettings defaultSettings) :
            _defaultSettings(defaultSettings),
            _unfocusedSettings(nullptr) {}

        Model::TerminalSettings DefaultSettings() { return _defaultSettings; };
        Model::TerminalSettings UnfocusedSettings() { return _unfocusedSettings; };

    private:
        Model::TerminalSettings _defaultSettings;
        Model::TerminalSettings _unfocusedSettings;
    }",5,cascadia\TerminalSettingsModel\TerminalSettings.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.TerminalSettingsCreateResult,TerminalSettingsCreateResultT<TerminalSettingsCreateResult>,false,35,TerminalSettingsCreateResult,1
246936,TYPE_DECL,,,,"struct TerminalSettings : TerminalSettingsT<TerminalSettings>, IInheritable<TerminalSettings>
    {
        TerminalSettings() = default;

        static Model::TerminalSettings CreateForPreview(const Model::CascadiaSettings& appSettings, const Model::Profile& profile);

        static Model::TerminalSettingsCreateResult CreateWithProfile(const Model::CascadiaSettings& appSettings,
                                                                     const Model::Profile& profile,
                                                                     const Control::IKeyBindings& keybindings);

        static Model::TerminalSettingsCreateResult CreateWithNewTerminalArgs(const Model::CascadiaSettings& appSettings,
                                                                             const Model::NewTerminalArgs& newTerminalArgs,
                                                                             const Control::IKeyBindings& keybindings);

        void ApplyColorScheme(con...",5,cascadia\TerminalSettingsModel\TerminalSettings.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.TerminalSettings,TerminalSettingsT<TerminalSettings>;IInheritable<TerminalSettings>,false,55,TerminalSettings,2
254862,TYPE_DECL,,,,friend class SettingsModelLocalTests::TerminalSettingsTests,9,cascadia\TerminalSettingsModel\TerminalSettings.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.TerminalSettings.TerminalSettingsTests,,false,184,TerminalSettingsTests,511
255257,TYPE_DECL,,cascadia\TerminalSettingsModel\TerminalSettingsSerializationHelpers.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\TerminalSettingsSerializationHelpers.hpp,cascadia\TerminalSettingsModel\TerminalSettingsSerializationHelpers.hpp:<global>,,false,1,<global>,5
255278,TYPE_DECL,,,,"struct IntAsFloatPercentConversionTrait : ::Microsoft::Terminal::Settings::Model::JsonUtils::ConversionTrait<double>
{
    double FromJson(const Json::Value& json)
    {
        return ::base::saturated_cast<double>(json.asUInt()) / 100.0;
    }

    bool CanConvert(const Json::Value& json)
    {
        if (!json.isUInt())
        {
            return false;
        }
        const auto value = json.asUInt();
        return value >= 0 && value <= 100;
    }

    Json::Value ToJson(const double& val)
    {
        return std::clamp(::base::saturated_cast<uint32_t>(std::round(val * 100.0)), 0u, 100u);
    }

    std::string TypeDescription() const
    {
        return ""number (>= 0, <=100)"";
    }
}",1,cascadia\TerminalSettingsModel\TerminalSettingsSerializationHelpers.hpp,IntAsFloatPercentConversionTrait,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<double>,false,356,IntAsFloatPercentConversionTrait,19
255382,TYPE_DECL,,cascadia\TerminalSettingsModel\TerminalWarnings.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\TerminalWarnings.hpp,cascadia\TerminalSettingsModel\TerminalWarnings.hpp:<global>,,false,1,<global>,1
255391,TYPE_DECL,,,,"class SettingsException : public std::runtime_error
    {
    public:
        explicit SettingsException(const SettingsLoadErrors& error) :
            std::runtime_error{ nullptr },
            _error{ error } {};

        // We don't use the what() method - we want to be able to display
        // localizable error messages. Catchers of this exception should use
        // _GetErrorText (in App.cpp) to get the localized exception string.
        const char* what() const override
        {
            return ""Exception while loading or validating Terminal settings"";
        };

        SettingsLoadErrors Error() const noexcept { return _error; };

    private:
        const SettingsLoadErrors _error;
    }",5,cascadia\TerminalSettingsModel\TerminalWarnings.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.SettingsException,std.runtime_error,false,22,SettingsException,1
255437,TYPE_DECL,,cascadia\TerminalSettingsModel\Theme.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\Theme.cpp,cascadia\TerminalSettingsModel\Theme.cpp:<global>,,false,1,<global>,14
256512,TYPE_DECL,,cascadia\TerminalSettingsModel\Theme.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\Theme.hpp,cascadia\TerminalSettingsModel\Theme.hpp:<global>,,false,1,<global>,9
256521,TYPE_DECL,,,,"struct ThemePair : ThemePairT<ThemePair>
    {
    public:
        ThemePair() = default;
        explicit ThemePair(const winrt::hstring& name) noexcept :
            _DarkName{ name },
            _LightName{ name } {};

        explicit ThemePair(const winrt::hstring& lightName, const winrt::hstring& darkName) noexcept :
            _DarkName{ darkName },
            _LightName{ lightName } {};

        static com_ptr<ThemePair> FromJson(const Json::Value& json);
        Json::Value ToJson() const;
        com_ptr<ThemePair> Copy() const;

        WINRT_PROPERTY(winrt::hstring, DarkName);
        WINRT_PROPERTY(winrt::hstring, LightName);
    }",5,cascadia\TerminalSettingsModel\Theme.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.ThemePair,ThemePairT<ThemePair>,false,32,ThemePair,1
256552,TYPE_DECL,,,,"struct ThemeColor : ThemeColorT<ThemeColor>
    {
    public:
        ThemeColor() noexcept = default;
        static winrt::Microsoft::Terminal::Settings::Model::ThemeColor FromColor(const winrt::Microsoft::Terminal::Core::Color& coreColor) noexcept;
        static winrt::Microsoft::Terminal::Settings::Model::ThemeColor FromAccent() noexcept;
        static winrt::Microsoft::Terminal::Settings::Model::ThemeColor FromTerminalBackground() noexcept;

        static til::color ColorFromBrush(const winrt::Windows::UI::Xaml::Media::Brush& brush);

        winrt::Windows::UI::Xaml::Media::Brush Evaluate(const winrt::Windows::UI::Xaml::ResourceDictionary& res,
                                                        const winrt::Windows::UI::Xaml::Media::Brush& terminalBackground,
                                                        const bool forTitlebar);
        uint8_t UnfocusedTabOpacity() const noexcept;

        WINRT_PROPERTY(til::color, Color);
        WINRT_PROPERTY(winrt::Micr...",5,cascadia\TerminalSettingsModel\Theme.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.ThemeColor,ThemeColorT<ThemeColor>,false,52,ThemeColor,2
256588,TYPE_DECL,,,,WindowTheme,5,cascadia\TerminalSettingsModel\Theme.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.WindowTheme,WindowThemeT<WindowTheme>,false,83,WindowTheme,3
256598,TYPE_DECL,,,,TabRowTheme,5,cascadia\TerminalSettingsModel\Theme.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.TabRowTheme,TabRowThemeT<TabRowTheme>,false,84,TabRowTheme,4
256608,TYPE_DECL,,,,TabTheme,5,cascadia\TerminalSettingsModel\Theme.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.TabTheme,TabThemeT<TabTheme>,false,85,TabTheme,5
256618,TYPE_DECL,,,,"struct Theme : ThemeT<Theme>
    {
    public:
        Theme() = default;
        Theme(const winrt::Windows::UI::Xaml::ElementTheme& requestedTheme) noexcept;

        com_ptr<Theme> Copy() const;

        hstring ToString();

        static com_ptr<Theme> FromJson(const Json::Value& json);
        void LayerJson(const Json::Value& json);
        Json::Value ToJson() const;

        winrt::Windows::UI::Xaml::ElementTheme RequestedTheme() const noexcept;

        static bool IsSystemInDarkTheme();

        WINRT_PROPERTY(winrt::hstring, Name);

        MTSM_THEME_SETTINGS(THEME_SETTINGS_INITIALIZE)

    private:
    }",5,cascadia\TerminalSettingsModel\Theme.hpp,winrt.Microsoft.Terminal.Settings.Model.implementation.Theme,ThemeT<Theme>,false,87,Theme,6
256674,TYPE_DECL,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<winrt.Microsoft.Terminal.Settings.Model.ThemePair><>,,,"struct ConversionTrait<winrt::Microsoft::Terminal::Settings::Model::ThemePair>
    {
        winrt::Microsoft::Terminal::Settings::Model::ThemePair FromJson(const Json::Value& json)
        {
            return *winrt::Microsoft::Terminal::Settings::Model::implementation::ThemePair::FromJson(json);
        }

        bool CanConvert(const Json::Value& json) const
        {
            return json.isObject() || json.isString();
        }

        Json::Value ToJson(const winrt::Microsoft::Terminal::Settings::Model::ThemePair& val)
        {
            return winrt::get_self<winrt::Microsoft::Terminal::Settings::Model::implementation::ThemePair>(val)->ToJson();
        }

        std::string TypeDescription() const
        {
            return ""ThemePair{ string, string }"";
        }
    }",5,cascadia\TerminalSettingsModel\Theme.hpp,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<winrt.Microsoft.Terminal.Settings.Model.ThemePair>,,false,126,ConversionTrait<winrt::Microsoft::Terminal::Settings::Model::ThemePair>,1
256760,TYPE_DECL,,cascadia\TerminalSettingsModel\VisualStudioGenerator.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\VisualStudioGenerator.cpp,cascadia\TerminalSettingsModel\VisualStudioGenerator.cpp:<global>,,false,1,<global>,6
256816,TYPE_DECL,,cascadia\TerminalSettingsModel\VisualStudioGenerator.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\VisualStudioGenerator.hpp,cascadia\TerminalSettingsModel\VisualStudioGenerator.hpp:<global>,,false,1,<global>,3
256824,TYPE_DECL,,,,"class VisualStudioGenerator : public IDynamicProfileGenerator
    {
    public:
        std::wstring_view GetNamespace() const noexcept override;
        void GenerateProfiles(std::vector<winrt::com_ptr<implementation::Profile>>& profiles) const override;

        class IVisualStudioProfileGenerator
        {
        public:
            virtual void GenerateProfiles(const VsSetupConfiguration::VsSetupInstance& instance, bool hidden, std::vector<winrt::com_ptr<implementation::Profile>>& profiles) const = 0;
        };
    }",5,cascadia\TerminalSettingsModel\VisualStudioGenerator.hpp,winrt.Microsoft.Terminal.Settings.Model.VisualStudioGenerator,IDynamicProfileGenerator,false,26,VisualStudioGenerator,1
256834,TYPE_DECL,,,,"class IVisualStudioProfileGenerator
        {
        public:
            virtual void GenerateProfiles(const VsSetupConfiguration::VsSetupInstance& instance, bool hidden, std::vector<winrt::com_ptr<implementation::Profile>>& profiles) const = 0;
        }",9,cascadia\TerminalSettingsModel\VisualStudioGenerator.hpp,winrt.Microsoft.Terminal.Settings.Model.VisualStudioGenerator.IVisualStudioProfileGenerator,,false,32,IVisualStudioProfileGenerator,3
256850,TYPE_DECL,,cascadia\TerminalSettingsModel\VsDevCmdGenerator.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\VsDevCmdGenerator.cpp,cascadia\TerminalSettingsModel\VsDevCmdGenerator.cpp:<global>,,false,1,<global>,4
256927,TYPE_DECL,,cascadia\TerminalSettingsModel\VsDevCmdGenerator.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\VsDevCmdGenerator.hpp,cascadia\TerminalSettingsModel\VsDevCmdGenerator.hpp:<global>,,false,1,<global>,3
256935,TYPE_DECL,,,,"class VsDevCmdGenerator final : public VisualStudioGenerator::IVisualStudioProfileGenerator
    {
    public:
        void GenerateProfiles(const VsSetupConfiguration::VsSetupInstance& instance, bool hidden, std::vector<winrt::com_ptr<implementation::Profile>>& profiles) const override;

    private:
        bool IsInstanceValid(const VsSetupConfiguration::VsSetupInstance&) const
        {
            // We only support version of VS from 15.0.
            // Per heaths: The [ISetupConfiguration] COM server only supports Visual Studio 15.0 and newer anyway.
            // Eliding the version range will improve the discovery performance by not having to parse or compare the versions.
            return true;
        }

        std::wstring GetProfileGuidSeed(const VsSetupConfiguration::VsSetupInstance& instance) const
        {
            return L""VsDevCmd"" + instance.GetInstanceId();
        }

        std::wstring GetProfileIconPath() const
        {
            return L""ms-appx:/...",5,cascadia\TerminalSettingsModel\VsDevCmdGenerator.hpp,winrt.Microsoft.Terminal.Settings.Model.VsDevCmdGenerator,VisualStudioGenerator.IVisualStudioProfileGenerator,false,23,VsDevCmdGenerator,1
256993,TYPE_DECL,,cascadia\TerminalSettingsModel\VsDevShellGenerator.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\VsDevShellGenerator.cpp,cascadia\TerminalSettingsModel\VsDevShellGenerator.cpp:<global>,,false,1,<global>,5
257096,TYPE_DECL,,cascadia\TerminalSettingsModel\VsDevShellGenerator.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\VsDevShellGenerator.hpp,cascadia\TerminalSettingsModel\VsDevShellGenerator.hpp:<global>,,false,1,<global>,3
257104,TYPE_DECL,,,,"class VsDevShellGenerator final : public VisualStudioGenerator::IVisualStudioProfileGenerator
    {
    public:
        void GenerateProfiles(const VsSetupConfiguration::VsSetupInstance& instance, bool hidden, std::vector<winrt::com_ptr<implementation::Profile>>& profiles) const override;

    private:
        bool IsInstanceValid(const VsSetupConfiguration::VsSetupInstance& instance) const
        {
            return instance.VersionInRange(L""[16.2,)"");
        }

        std::wstring GetProfileGuidSeed(const VsSetupConfiguration::VsSetupInstance& instance) const
        {
            return L""VsDevShell"" + instance.GetInstanceId();
        }

        std::wstring GetProfileIconPath() const
        {
            return L""ms-appx:///ProfileIcons/{61c54bbd-c2c6-5271-96e7-009a87ff44bf}.png"";
        }

        std::wstring GetProfileName(const VsSetupConfiguration::VsSetupInstance& instance) const;
        std::wstring GetProfileCommandLine(const VsSetupConfiguration::VsSetupInstance...",5,cascadia\TerminalSettingsModel\VsDevShellGenerator.hpp,winrt.Microsoft.Terminal.Settings.Model.VsDevShellGenerator,VisualStudioGenerator.IVisualStudioProfileGenerator,false,23,VsDevShellGenerator,1
257197,TYPE_DECL,,cascadia\TerminalSettingsModel\VsSetupConfiguration.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\VsSetupConfiguration.cpp,cascadia\TerminalSettingsModel\VsSetupConfiguration.cpp:<global>,,false,1,<global>,3
257498,TYPE_DECL,,cascadia\TerminalSettingsModel\VsSetupConfiguration.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\VsSetupConfiguration.hpp,cascadia\TerminalSettingsModel\VsSetupConfiguration.hpp:<global>,,false,1,<global>,2
257506,TYPE_DECL,,,,"class VsSetupConfiguration
    {
        typedef wil::com_ptr<ISetupConfiguration2> ComPtrSetupQuery;
        typedef wil::com_ptr<ISetupHelper> ComPtrSetupHelper;
        typedef wil::com_ptr<ISetupInstance> ComPtrSetupInstance;
        typedef wil::com_ptr<ISetupInstance2> ComPtrSetupInstance2;
        typedef wil::com_ptr<ISetupPropertyStore> ComPtrPropertyStore;
        typedef wil::com_ptr<ISetupPackageReference> ComPtrPackageReference;
        typedef wil::com_ptr<ISetupInstanceCatalog> ComPtrInstanceCatalog;
        typedef ComPtrPropertyStore ComPtrCustomPropertyStore;
        typedef ComPtrPropertyStore ComPtrCatalogPropertyStore;

    public:
        struct VsSetupInstance
        {
            VsSetupInstance(VsSetupInstance&& other) = default;
            VsSetupInstance& operator=(VsSetupInstance&&) = default;

            std::wstring ResolvePath(std::wstring_view relativePath) const
            {
                return VsSetupConfiguration::ResolvePath(inst.get(), rel...",5,cascadia\TerminalSettingsModel\VsSetupConfiguration.hpp,winrt.Microsoft.Terminal.Settings.Model.VsSetupConfiguration,,false,26,VsSetupConfiguration,1
257507,TYPE_DECL,ANY,,,typedef wil::com_ptr<ISetupConfiguration2> ComPtrSetupQuery;,52,cascadia\TerminalSettingsModel\VsSetupConfiguration.hpp,ComPtrSetupQuery,,false,28,ComPtrSetupQuery,1
257508,TYPE_DECL,ANY,,,typedef wil::com_ptr<ISetupHelper> ComPtrSetupHelper;,44,cascadia\TerminalSettingsModel\VsSetupConfiguration.hpp,ComPtrSetupHelper,,false,29,ComPtrSetupHelper,2
257509,TYPE_DECL,ANY,,,typedef wil::com_ptr<ISetupInstance> ComPtrSetupInstance;,46,cascadia\TerminalSettingsModel\VsSetupConfiguration.hpp,ComPtrSetupInstance,,false,30,ComPtrSetupInstance,3
257510,TYPE_DECL,ANY,,,typedef wil::com_ptr<ISetupInstance2> ComPtrSetupInstance2;,47,cascadia\TerminalSettingsModel\VsSetupConfiguration.hpp,ComPtrSetupInstance2,,false,31,ComPtrSetupInstance2,4
257511,TYPE_DECL,ANY,,,typedef wil::com_ptr<ISetupPropertyStore> ComPtrPropertyStore;,51,cascadia\TerminalSettingsModel\VsSetupConfiguration.hpp,ComPtrPropertyStore,,false,32,ComPtrPropertyStore,5
257512,TYPE_DECL,ANY,,,typedef wil::com_ptr<ISetupPackageReference> ComPtrPackageReference;,54,cascadia\TerminalSettingsModel\VsSetupConfiguration.hpp,ComPtrPackageReference,,false,33,ComPtrPackageReference,6
257513,TYPE_DECL,ANY,,,typedef wil::com_ptr<ISetupInstanceCatalog> ComPtrInstanceCatalog;,53,cascadia\TerminalSettingsModel\VsSetupConfiguration.hpp,ComPtrInstanceCatalog,,false,34,ComPtrInstanceCatalog,7
257514,TYPE_DECL,ANY,,,typedef ComPtrPropertyStore ComPtrCustomPropertyStore;,37,cascadia\TerminalSettingsModel\VsSetupConfiguration.hpp,ComPtrCustomPropertyStore,,false,35,ComPtrCustomPropertyStore,8
257515,TYPE_DECL,ANY,,,typedef ComPtrPropertyStore ComPtrCatalogPropertyStore;,37,cascadia\TerminalSettingsModel\VsSetupConfiguration.hpp,ComPtrCatalogPropertyStore,,false,36,ComPtrCatalogPropertyStore,9
257516,TYPE_DECL,,,,"struct VsSetupInstance
        {
            VsSetupInstance(VsSetupInstance&& other) = default;
            VsSetupInstance& operator=(VsSetupInstance&&) = default;

            std::wstring ResolvePath(std::wstring_view relativePath) const
            {
                return VsSetupConfiguration::ResolvePath(inst.get(), relativePath);
            }

            bool VersionInRange(std::wstring_view range) const
            {
                return InstallationVersionInRange(query.get(), inst.get(), range);
            }

            std::wstring GetVersion() const
            {
                return VsSetupConfiguration::GetInstallationVersion(inst.get());
            }

            unsigned long long GetComparableInstallDate() const noexcept
            {
                return installDate;
            }

            unsigned long long GetComparableVersion() const noexcept
            {
                return version;
            }

            std::wstring GetInstallationPath(...",9,cascadia\TerminalSettingsModel\VsSetupConfiguration.hpp,winrt.Microsoft.Terminal.Settings.Model.VsSetupConfiguration.VsSetupInstance,,false,39,VsSetupInstance,10
258057,TYPE_DECL,,cascadia\TerminalSettingsModel\WslDistroGenerator.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\WslDistroGenerator.cpp,cascadia\TerminalSettingsModel\WslDistroGenerator.cpp:<global>,,false,1,<global>,6
258502,TYPE_DECL,,cascadia\TerminalSettingsModel\WslDistroGenerator.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\WslDistroGenerator.hpp,cascadia\TerminalSettingsModel\WslDistroGenerator.hpp:<global>,,false,1,<global>,2
258510,TYPE_DECL,,,,"class WslDistroGenerator final : public IDynamicProfileGenerator
    {
    public:
        std::wstring_view GetNamespace() const noexcept override;
        void GenerateProfiles(std::vector<winrt::com_ptr<implementation::Profile>>& profiles) const override;
    }",5,cascadia\TerminalSettingsModel\WslDistroGenerator.hpp,winrt.Microsoft.Terminal.Settings.Model.WslDistroGenerator,IDynamicProfileGenerator,false,23,WslDistroGenerator,1
258528,TYPE_DECL,,cascadia\TerminalSettingsModel\init.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\init.cpp,cascadia\TerminalSettingsModel\init.cpp:<global>,,false,1,<global>,4
258574,TYPE_DECL,,cascadia\TerminalSettingsModel\pch.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\pch.cpp,cascadia\TerminalSettingsModel\pch.cpp:<global>,,false,1,<global>,2
258641,TYPE_DECL,,cascadia\TerminalSettingsModel\pch.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\TerminalSettingsModel\pch.hpp,cascadia\TerminalSettingsModel\pch.hpp:<global>,,false,1,<global>,32
258709,TYPE_DECL,,cascadia\UnitTests_Control\ControlCoreTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\UnitTests_Control\ControlCoreTests.cpp,cascadia\UnitTests_Control\ControlCoreTests.cpp:<global>,,false,1,<global>,7
260373,TYPE_DECL,,cascadia\UnitTests_Control\ControlInteractivityTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\UnitTests_Control\ControlInteractivityTests.cpp,cascadia\UnitTests_Control\ControlInteractivityTests.cpp:<global>,,false,1,<global>,7
263864,TYPE_DECL,,cascadia\UnitTests_Control\MockConnection.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\UnitTests_Control\MockConnection.hpp,cascadia\UnitTests_Control\MockConnection.hpp:<global>,,false,1,<global>,1
263868,TYPE_DECL,,,,"class MockConnection : public winrt::implements<MockConnection, winrt::Microsoft::Terminal::TerminalConnection::ITerminalConnection>
    {
    public:
        MockConnection() noexcept = default;

        void Initialize(const winrt::Windows::Foundation::Collections::ValueSet& /*settings*/){};
        void Start() noexcept {};
        void WriteInput(const winrt::hstring& data)
        {
            _TerminalOutputHandlers(data);
        }
        void Resize(uint32_t /*rows*/, uint32_t /*columns*/) noexcept {}
        void Close() noexcept {}

        winrt::Microsoft::Terminal::TerminalConnection::ConnectionState State() const noexcept { return winrt::Microsoft::Terminal::TerminalConnection::ConnectionState::Connected; }

        WINRT_CALLBACK(TerminalOutput, winrt::Microsoft::Terminal::TerminalConnection::TerminalOutputHandler);
        TYPED_EVENT(StateChanged, winrt::Microsoft::Terminal::TerminalConnection::ITerminalConnection, IInspectable);
    }",5,cascadia\UnitTests_Control\MockConnection.hpp,ControlUnitTests.MockConnection,"winrt.implements<MockConnection, winrt.Microsoft.Terminal.TerminalConnection.ITerminalConnection>",false,12,MockConnection,1
263925,TYPE_DECL,,cascadia\UnitTests_Control\MockControlSettings.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\UnitTests_Control\MockControlSettings.hpp,cascadia\UnitTests_Control\MockControlSettings.hpp:<global>,,false,1,<global>,4
263928,TYPE_DECL,ANY,,,"using IFontFeatureMap = winrt::Windows::Foundation::Collections::IMap<winrt::hstring, uint32_t>;",1,cascadia\UnitTests_Control\MockControlSettings.hpp,IFontFeatureMap,,false,11,IFontFeatureMap,1
263929,TYPE_DECL,ANY,,,"using IFontAxesMap = winrt::Windows::Foundation::Collections::IMap<winrt::hstring, float>;",1,cascadia\UnitTests_Control\MockControlSettings.hpp,IFontAxesMap,,false,12,IFontAxesMap,2
263931,TYPE_DECL,,,,"class MockControlSettings : public winrt::implements<MockControlSettings, winrt::Microsoft::Terminal::Core::ICoreSettings, winrt::Microsoft::Terminal::Control::IControlSettings, winrt::Microsoft::Terminal::Core::ICoreAppearance, winrt::Microsoft::Terminal::Control::IControlAppearance>
    {
        // Color Table is special because it's an array
        std::array<winrt::Microsoft::Terminal::Core::Color, COLOR_TABLE_SIZE> _ColorTable;

#define SETTINGS_GEN(type, name, ...) WINRT_PROPERTY(type, name, __VA_ARGS__);
        CORE_SETTINGS(SETTINGS_GEN)
        CORE_APPEARANCE_SETTINGS(SETTINGS_GEN)
        CONTROL_SETTINGS(SETTINGS_GEN)
        CONTROL_APPEARANCE_SETTINGS(SETTINGS_GEN)
#undef SETTINGS_GEN

    public:
        MockControlSettings() = default;

        winrt::Microsoft::Terminal::Core::Color GetColorTableEntry(int32_t index) noexcept
        {
            return _ColorTable.at(index);
        }
        void SetColorTableEntry(int32_t index,
                               ...",5,cascadia\UnitTests_Control\MockControlSettings.hpp,ControlUnitTests.MockControlSettings,"winrt.implements<MockControlSettings, winrt.Microsoft.Terminal.Core.ICoreSettings, winrt.Microsoft.Terminal.Control.IControlSettings, winrt.Microsoft.Terminal.Core.ICoreAppearance, winrt.Microsoft.Terminal.Control.IControlAppearance>",false,16,MockControlSettings,1
264023,TYPE_DECL,,cascadia\UnitTests_Control\pch.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\UnitTests_Control\pch.cpp,cascadia\UnitTests_Control\pch.cpp:<global>,,false,1,<global>,2
264074,TYPE_DECL,,cascadia\UnitTests_Control\pch.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\UnitTests_Control\pch.hpp,cascadia\UnitTests_Control\pch.hpp:<global>,,false,1,<global>,24
264109,TYPE_DECL,,cascadia\UnitTests_Remoting\RemotingTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\UnitTests_Remoting\RemotingTests.cpp,cascadia\UnitTests_Remoting\RemotingTests.cpp:<global>,,false,1,<global>,7
265053,TYPE_DECL,,,,"struct MockDesktopManager : implements<MockDesktopManager, IVirtualDesktopManager>
    {
        IFACEMETHOD(GetWindowDesktopId)
        (HWND /*topLevelWindow*/, GUID* /*desktopId*/)
        {
            VERIFY_IS_TRUE(false, L""We shouldn't need GetWindowDesktopId in the tests."");
            return E_FAIL;
        }
        IFACEMETHOD(MoveWindowToDesktop)
        (HWND /*topLevelWindow*/, REFGUID /*desktopId*/)
        {
            VERIFY_IS_TRUE(false, L""We shouldn't need GetWindowDesktopId in the tests."");
            return E_FAIL;
        }
        IFACEMETHOD(IsWindowOnCurrentVirtualDesktop)
        (HWND topLevelWindow, BOOL* onCurrentDesktop)
        {
            if (pfnIsWindowOnCurrentVirtualDesktop)
            {
                return pfnIsWindowOnCurrentVirtualDesktop(topLevelWindow, onCurrentDesktop);
            }
            VERIFY_IS_TRUE(false, L""You didn't set up the pfnIsWindowOnCurrentVirtualDesktop for this test!"");
            return E_FAIL;
        }

  ...",5,cascadia\UnitTests_Remoting\RemotingTests.cpp,RemotingUnitTests.MockDesktopManager,"implements<MockDesktopManager, IVirtualDesktopManager>",false,21,MockDesktopManager,1
265095,TYPE_DECL,,,,"struct DeadPeasant : implements<DeadPeasant, winrt::Microsoft::Terminal::Remoting::IPeasant>
    {
        DeadPeasant() = default;
        void AssignID(uint64_t /*id*/) DIE;
        uint64_t GetID() DIE;
        winrt::hstring WindowName() DIE;
        winrt::hstring ActiveTabTitle() DIE;
        void ActiveTabTitle(const winrt::hstring& /*value*/) DIE;
        uint64_t GetPID() DIE;
        bool ExecuteCommandline(const Remoting::CommandlineArgs& /*args*/) DIE;
        void ActivateWindow(const Remoting::WindowActivatedArgs& /*args*/) DIE;
        void RequestIdentifyWindows() DIE;
        void DisplayWindowId() DIE;
        Remoting::CommandlineArgs InitialArgs() DIE;
        Remoting::WindowActivatedArgs GetLastActivatedArgs() DIE;
        void RequestRename(const Remoting::RenameRequestArgs& /*args*/) DIE;
        void Summon(const Remoting::SummonWindowBehavior& /*args*/) DIE;
        void RequestShowNotificationIcon() DIE;
        void RequestHideNotificationIcon() DIE;
    ...",5,cascadia\UnitTests_Remoting\RemotingTests.cpp,RemotingUnitTests.DeadPeasant,"implements<DeadPeasant, winrt.Microsoft.Terminal.Remoting.IPeasant>",false,66,DeadPeasant,2
265415,TYPE_DECL,,,,"struct DeadMonarch : implements<DeadMonarch, winrt::Microsoft::Terminal::Remoting::IMonarch>
    {
        DeadMonarch() = default;
        uint64_t GetPID() DIE;
        uint64_t AddPeasant(Remoting::IPeasant /*peasant*/) DIE;
        uint64_t GetNumberOfPeasants() DIE;
        Remoting::ProposeCommandlineResult ProposeCommandline(Remoting::CommandlineArgs /*args*/) DIE;
        void HandleActivatePeasant(Remoting::WindowActivatedArgs /*args*/) DIE;
        void SummonWindow(Remoting::SummonWindowSelectionArgs /*args*/) DIE;
        void SignalClose(uint64_t /*peasantId*/) DIE;

        void SummonAllWindows() DIE;
        bool DoesQuakeWindowExist() DIE;
        winrt::Windows::Foundation::Collections::IVectorView<Remoting::PeasantInfo> GetPeasantInfos() DIE;
        winrt::Windows::Foundation::Collections::IVector<winrt::hstring> GetAllWindowLayouts() DIE;
        void RequestMoveContent(winrt::hstring, winrt::hstring, uint32_t, winrt::Windows::Foundation::IReference<winrt::Windo...",5,cascadia\UnitTests_Remoting\RemotingTests.cpp,RemotingUnitTests.DeadMonarch,"implements<DeadMonarch, winrt.Microsoft.Terminal.Remoting.IMonarch>",false,106,DeadMonarch,3
274679,TYPE_DECL,,cascadia\UnitTests_Remoting\pch.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\UnitTests_Remoting\pch.cpp,cascadia\UnitTests_Remoting\pch.cpp:<global>,,false,1,<global>,2
274720,TYPE_DECL,,cascadia\UnitTests_Remoting\pch.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\UnitTests_Remoting\pch.hpp,cascadia\UnitTests_Remoting\pch.hpp:<global>,,false,1,<global>,19
274748,TYPE_DECL,,cascadia\UnitTests_TerminalCore\ConptyRoundtripTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\UnitTests_TerminalCore\ConptyRoundtripTests.cpp,cascadia\UnitTests_TerminalCore\ConptyRoundtripTests.cpp:<global>,,false,1,<global>,15
278964,TYPE_DECL,,,,class ConptyRoundtripTests,5,cascadia\UnitTests_TerminalCore\ConptyRoundtripTests.cpp,TerminalCoreUnitTests.ConptyRoundtripTests,,false,45,ConptyRoundtripTests,1
289121,TYPE_DECL,,cascadia\UnitTests_TerminalCore\InputTest.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\UnitTests_TerminalCore\InputTest.cpp,cascadia\UnitTests_TerminalCore\InputTest.cpp:<global>,,false,1,<global>,4
289142,TYPE_DECL,,,,"class InputTest
    {
        TEST_CLASS(InputTest);

        TEST_METHOD(AltShiftKey);
        TEST_METHOD(InvalidKeyEvent);

        Terminal term{ Terminal::TestDummyMarker{} };
    }",5,cascadia\UnitTests_TerminalCore\InputTest.cpp,TerminalCoreUnitTests.InputTest,,false,27,InputTest,1
289226,TYPE_DECL,,cascadia\UnitTests_TerminalCore\MockTermSettings.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\UnitTests_TerminalCore\MockTermSettings.hpp,cascadia\UnitTests_TerminalCore\MockTermSettings.hpp:<global>,,false,1,<global>,7
289230,TYPE_DECL,,,,"class MockTermSettings : public winrt::implements<MockTermSettings, ICoreSettings, ICoreAppearance>
    {
        // Color Table is special because it's an array
        std::array<winrt::Microsoft::Terminal::Core::Color, COLOR_TABLE_SIZE> _ColorTable;

    public:
#define SETTINGS_GEN(type, name, ...) til::property<type> name{ __VA_ARGS__ };
        CORE_SETTINGS(SETTINGS_GEN)
        CORE_APPEARANCE_SETTINGS(SETTINGS_GEN)
#undef SETTINGS_GEN

    public:
        MockTermSettings(int32_t historySize, int32_t initialRows, int32_t initialCols) :
            HistorySize(historySize),
            InitialRows(initialRows),
            InitialCols(initialCols)
        {
        }

        winrt::Microsoft::Terminal::Core::Color GetColorTableEntry(int32_t index) noexcept
        {
            return _ColorTable.at(index);
        }
        void SetColorTableEntry(int32_t index,
                                winrt::Microsoft::Terminal::Core::Color color) noexcept
        {
            _C...",5,cascadia\UnitTests_TerminalCore\MockTermSettings.hpp,TerminalCoreUnitTests.MockTermSettings,"winrt.implements<MockTermSettings, ICoreSettings, ICoreAppearance>",false,16,MockTermSettings,1
289427,TYPE_DECL,,cascadia\UnitTests_TerminalCore\ScreenSizeLimitsTest.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\UnitTests_TerminalCore\ScreenSizeLimitsTest.cpp,cascadia\UnitTests_TerminalCore\ScreenSizeLimitsTest.cpp:<global>,,false,1,<global>,7
289431,TYPE_DECL,,,,"class ScreenSizeLimitsTest
    {
        TEST_CLASS(ScreenSizeLimitsTest);

        TEST_METHOD(ScreenWidthAndHeightAreClampedToBounds);
        TEST_METHOD(ScrollbackHistorySizeIsClampedToBounds);

        TEST_METHOD(ResizeIsClampedToBounds);
    }",5,cascadia\UnitTests_TerminalCore\ScreenSizeLimitsTest.cpp,TerminalCoreUnitTests.ScreenSizeLimitsTest,,false,23,ScreenSizeLimitsTest,1
289900,TYPE_DECL,,cascadia\UnitTests_TerminalCore\ScrollTest.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\UnitTests_TerminalCore\ScrollTest.cpp,cascadia\UnitTests_TerminalCore\ScrollTest.cpp:<global>,,false,1,<global>,11
289904,TYPE_DECL,,,,"class MockScrollRenderEngine final : public RenderEngineBase
    {
    public:
        std::optional<til::point> TriggerScrollDelta() const
        {
            return _triggerScrollDelta;
        }

        void Reset()
        {
            _triggerScrollDelta.reset();
        }

        HRESULT StartPaint() noexcept { return S_OK; }
        HRESULT EndPaint() noexcept { return S_OK; }
        HRESULT Present() noexcept { return S_OK; }
        HRESULT PrepareForTeardown(_Out_ bool* /*pForcePaint*/) noexcept { return S_OK; }
        HRESULT ScrollFrame() noexcept { return S_OK; }
        HRESULT Invalidate(const til::rect* /*psrRegion*/) noexcept { return S_OK; }
        HRESULT InvalidateCursor(const til::rect* /*psrRegion*/) noexcept { return S_OK; }
        HRESULT InvalidateSystem(const til::rect* /*prcDirtyClient*/) noexcept { return S_OK; }
        HRESULT InvalidateSelection(const std::vector<til::rect>& /*rectangles*/) noexcept { return S_OK; }
        HRESULT InvalidateS...",5,cascadia\UnitTests_TerminalCore\ScrollTest.cpp,anonymous_namespace_1.MockScrollRenderEngine,RenderEngineBase,false,29,MockScrollRenderEngine,1
290075,TYPE_DECL,,,,"struct ScrollBarNotification
    {
        int ViewportTop;
        int ViewportHeight;
        int BufferHeight;
    }",5,cascadia\UnitTests_TerminalCore\ScrollTest.cpp,anonymous_namespace_24.ScrollBarNotification,,false,79,ScrollBarNotification,2
290080,TYPE_DECL,,,,class ScrollTest,5,cascadia\UnitTests_TerminalCore\ScrollTest.cpp,TerminalCoreUnitTests.ScrollTest,,false,89,ScrollTest,1
290432,TYPE_DECL,,cascadia\UnitTests_TerminalCore\SelectionTest.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\UnitTests_TerminalCore\SelectionTest.cpp,cascadia\UnitTests_TerminalCore\SelectionTest.cpp:<global>,,false,1,<global>,7
291390,TYPE_DECL,,cascadia\UnitTests_TerminalCore\TerminalApiTest.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\UnitTests_TerminalCore\TerminalApiTest.cpp,cascadia\UnitTests_TerminalCore\TerminalApiTest.cpp:<global>,,false,1,<global>,7
291407,TYPE_DECL,,,,"class TerminalApiTest
    {
        TEST_CLASS(TerminalApiTest);

        TEST_METHOD(SetColorTableEntry);

        TEST_METHOD(CursorVisibility);
        TEST_METHOD(CursorVisibilityViaStateMachine);

        // Terminal::_WriteBuffer used to enter infinite loops under certain conditions.
        // This test ensures that Terminal::_WriteBuffer doesn't get stuck when
        // PrintString() is called with more code units than the buffer width.
        TEST_METHOD(PrintStringOfSurrogatePairs);
        TEST_METHOD(CheckDoubleWidthCursor);

        TEST_METHOD(AddHyperlink);
        TEST_METHOD(AddHyperlinkCustomId);
        TEST_METHOD(AddHyperlinkCustomIdDifferentUri);

        TEST_METHOD(SetTaskbarProgress);
        TEST_METHOD(SetWorkingDirectory);
    }",5,cascadia\UnitTests_TerminalCore\TerminalApiTest.cpp,TerminalCoreUnitTests.TerminalApiTest,,false,23,TerminalApiTest,1
293203,TYPE_DECL,,cascadia\UnitTests_TerminalCore\TerminalBufferTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\UnitTests_TerminalCore\TerminalBufferTests.cpp,cascadia\UnitTests_TerminalCore\TerminalBufferTests.cpp:<global>,,false,1,<global>,8
293222,TYPE_DECL,,,,class TerminalBufferTests,5,cascadia\UnitTests_TerminalCore\TerminalBufferTests.cpp,TerminalCoreUnitTests.TerminalBufferTests,,false,22,TerminalBufferTests,1
295191,TYPE_DECL,,cascadia\UnitTests_TerminalCore\TilWinRtHelpersTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\UnitTests_TerminalCore\TilWinRtHelpersTests.cpp,cascadia\UnitTests_TerminalCore\TilWinRtHelpersTests.cpp:<global>,,false,1,<global>,12
295256,TYPE_DECL,,,,class TilWinRtHelpersTests,5,cascadia\UnitTests_TerminalCore\TilWinRtHelpersTests.cpp,TerminalCoreUnitTests.TilWinRtHelpersTests,,false,31,TilWinRtHelpersTests,1
295257,TYPE_DECL,,,,"class TerminalCoreUnitTests::TilWinRtHelpersTests final
{
    TEST_CLASS(TilWinRtHelpersTests);
    TEST_METHOD(TestPropertySimple);
    TEST_METHOD(TestPropertyHString);
    TEST_METHOD(TestTruthiness);
    TEST_METHOD(TestSimpleConstProperties);
    TEST_METHOD(TestComposedConstProperties);

    TEST_METHOD(TestEvent);

    TEST_METHOD(TestTypedEvent);
}",1,cascadia\UnitTests_TerminalCore\TilWinRtHelpersTests.cpp,TilWinRtHelpersTests,,false,35,TilWinRtHelpersTests,2
295653,TYPE_DECL,,cascadia\UnitTests_TerminalCore\pch.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\UnitTests_TerminalCore\pch.cpp,cascadia\UnitTests_TerminalCore\pch.cpp:<global>,,false,1,<global>,2
295692,TYPE_DECL,,cascadia\UnitTests_TerminalCore\pch.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\UnitTests_TerminalCore\pch.hpp,cascadia\UnitTests_TerminalCore\pch.hpp:<global>,,false,1,<global>,18
295703,TYPE_DECL,,cascadia\WinRTUtils\LibraryResources.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\WinRTUtils\LibraryResources.cpp,cascadia\WinRTUtils\LibraryResources.cpp:<global>,,false,1,<global>,4
295716,TYPE_DECL,,cascadia\WinRTUtils\ScopedResourceLoader.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\WinRTUtils\ScopedResourceLoader.cpp,cascadia\WinRTUtils\ScopedResourceLoader.cpp:<global>,,false,1,<global>,3
295792,TYPE_DECL,,cascadia\WinRTUtils\Utils.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\WinRTUtils\Utils.cpp,cascadia\WinRTUtils\Utils.cpp:<global>,,false,1,<global>,3
295835,TYPE_DECL,,cascadia\WinRTUtils\inc\LibraryResources.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\WinRTUtils\inc\LibraryResources.hpp,cascadia\WinRTUtils\inc\LibraryResources.hpp:<global>,,false,1,<global>,1
295850,TYPE_DECL,,cascadia\WinRTUtils\inc\SafeDispatcherTimer.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\WinRTUtils\inc\SafeDispatcherTimer.hpp,cascadia\WinRTUtils\inc\SafeDispatcherTimer.hpp:<global>,,false,1,<global>,1
295853,TYPE_DECL,,,,"struct SafeDispatcherTimer
{
    SafeDispatcherTimer() = default;
    SafeDispatcherTimer(SafeDispatcherTimer const&) = delete;
    SafeDispatcherTimer& operator=(SafeDispatcherTimer const&) = delete;
    SafeDispatcherTimer(SafeDispatcherTimer&&) = delete;
    SafeDispatcherTimer& operator=(SafeDispatcherTimer&&) = delete;

    ~SafeDispatcherTimer()
    {
        Destroy();
    }

    explicit operator bool() const noexcept
    {
        return _timer != nullptr;
    }

    winrt::Windows::Foundation::TimeSpan Interval()
    {
        return _getTimer().Interval();
    }

    void Interval(winrt::Windows::Foundation::TimeSpan const& value)
    {
        _getTimer().Interval(value);
    }

    bool IsEnabled()
    {
        return _timer && _timer.IsEnabled();
    }

    void Tick(winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler)
    {
        auto& timer = _getTimer();
        if (_token)
        {
            timer.Tick(_token);
  ...",1,cascadia\WinRTUtils\inc\SafeDispatcherTimer.hpp,SafeDispatcherTimer,,false,8,SafeDispatcherTimer,1
296016,TYPE_DECL,,cascadia\WinRTUtils\inc\ScopedResourceLoader.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\WinRTUtils\inc\ScopedResourceLoader.hpp,cascadia\WinRTUtils\inc\ScopedResourceLoader.hpp:<global>,,false,1,<global>,1
296019,TYPE_DECL,,,,"class ScopedResourceLoader
{
public:
    ScopedResourceLoader(const std::wstring_view resourceLocatorBase);
    winrt::Windows::ApplicationModel::Resources::Core::ResourceMap GetResourceMap() const noexcept;
    winrt::hstring GetLocalizedString(const std::wstring_view resourceName) const;
    bool HasResourceWithName(const std::wstring_view resourceName) const;

private:
    winrt::Windows::ApplicationModel::Resources::Core::ResourceMap _resourceMap;
    winrt::Windows::ApplicationModel::Resources::Core::ResourceContext _resourceContext;
}",1,cascadia\WinRTUtils\inc\ScopedResourceLoader.hpp,ScopedResourceLoader,,false,6,ScopedResourceLoader,1
296072,TYPE_DECL,"ThrottledFunc<bool,Args>",,,"class ThrottledFunc : public std::enable_shared_from_this<ThrottledFunc<leading, Args...>>
{
public:
    using filetime_duration = std::chrono::duration<int64_t, std::ratio<1, 10000000>>;
    using function = std::function<void(Args...)>;

    // Throttles invocations to the given `func` to not occur more often than `delay`.
    //
    // If this is a:
    // * ThrottledFuncLeading: `func` will be invoked immediately and
    //   further invocations prevented until `delay` time has passed.
    // * ThrottledFuncTrailing: On the first invocation a timer of `delay` time will
    //   be started. After the timer has expired `func` will be invoked just once.
    //
    // After `func` was invoked the state is reset and this cycle is repeated again.
    ThrottledFunc(
        winrt::Windows::System::DispatcherQueue dispatcher,
        filetime_duration delay,
        function func) :
        _dispatcher{ std::move(dispatcher) },
        _func{ std::move(func) },
        _timer{ _create_t...",1,cascadia\WinRTUtils\inc\ThrottledFunc.hpp,ThrottledFunc,"std.enable_shared_from_this<ThrottledFunc<leading, Args...>>",false,11,ThrottledFunc,1
296093,TYPE_DECL,,cascadia\WinRTUtils\inc\ThrottledFunc.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\WinRTUtils\inc\ThrottledFunc.hpp,cascadia\WinRTUtils\inc\ThrottledFunc.hpp:<global>,,false,1,<global>,2
296096,TYPE_DECL,ANY,,,"using filetime_duration = std::chrono::duration<int64_t, std::ratio<1, 10000000>>;",5,cascadia\WinRTUtils\inc\ThrottledFunc.hpp,filetime_duration,,false,14,filetime_duration,1
296097,TYPE_DECL,ANY,,,using function = std::function<void(Args...)>;,5,cascadia\WinRTUtils\inc\ThrottledFunc.hpp,function,,false,15,function,2
296276,TYPE_DECL,"ThrottledFunc<false, Args...>",,,"using ThrottledFuncTrailing = ThrottledFunc<false, Args...>;",1,cascadia\WinRTUtils\inc\ThrottledFunc.hpp,ThrottledFuncTrailing,,false,140,ThrottledFuncTrailing,2
296277,TYPE_DECL,ThrottledFunc<true>,,,using ThrottledFuncLeading = ThrottledFunc<true>;,1,cascadia\WinRTUtils\inc\ThrottledFunc.hpp,ThrottledFuncLeading,,false,141,ThrottledFuncLeading,3
296282,TYPE_DECL,,cascadia\WinRTUtils\inc\Utils.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\WinRTUtils\inc\Utils.hpp,cascadia\WinRTUtils\inc\Utils.hpp:<global>,,false,1,<global>,2
296452,TYPE_DECL,,cascadia\WinRTUtils\inc\WtExeUtils.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\WinRTUtils\inc\WtExeUtils.hpp,cascadia\WinRTUtils\inc\WtExeUtils.hpp:<global>,,false,1,<global>,1
296623,TYPE_DECL,,cascadia\WinRTUtils\pch.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\WinRTUtils\pch.cpp,cascadia\WinRTUtils\pch.cpp:<global>,,false,1,<global>,2
296650,TYPE_DECL,,cascadia\WinRTUtils\pch.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\WinRTUtils\pch.hpp,cascadia\WinRTUtils\pch.hpp:<global>,,false,1,<global>,12
296662,TYPE_DECL,,cascadia\WindowsTerminal\AppHost.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\WindowsTerminal\AppHost.cpp,cascadia\WindowsTerminal\AppHost.cpp:<global>,,false,1,<global>,11
300502,TYPE_DECL,,cascadia\WindowsTerminal\AppHost.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\WindowsTerminal\AppHost.hpp,cascadia\WindowsTerminal\AppHost.hpp:<global>,,false,1,<global>,5
300505,TYPE_DECL,,,,"class AppHost : public std::enable_shared_from_this<AppHost>
{
public:
    static constexpr DWORD WM_REFRIGERATE = WM_APP + 0;

    AppHost(const winrt::TerminalApp::AppLogic& logic,
            winrt::Microsoft::Terminal::Remoting::WindowRequestedArgs args,
            const winrt::Microsoft::Terminal::Remoting::WindowManager& manager,
            const winrt::Microsoft::Terminal::Remoting::Peasant& peasant,
            std::unique_ptr<IslandWindow> window = nullptr) noexcept;

    void AppTitleChanged(const winrt::Windows::Foundation::IInspectable& sender, winrt::hstring newTitle);
    void LastTabClosed(const winrt::Windows::Foundation::IInspectable& sender, const winrt::TerminalApp::LastTabClosedEventArgs& args);
    void Initialize();
    void Close();

    [[nodiscard]] std::unique_ptr<IslandWindow> Refrigerate();

    bool OnDirectKeyEvent(const uint32_t vkey, const uint8_t scanCode, const bool down);
    void SetTaskbarProgress(const winrt::Windows::Foundation::IInspectable&...",1,cascadia\WindowsTerminal\AppHost.hpp,AppHost,std.enable_shared_from_this<AppHost>,false,11,AppHost,1
300569,TYPE_DECL,,,,"enum WindowInitializedState : uint32_t
    {
        NotInitialized = 0,
        Initializing = 1,
        Initialized = 2,
    }",5,cascadia\WindowsTerminal\AppHost.hpp,AppHost.WindowInitializedState,,false,49,WindowInitializedState,19
300844,TYPE_DECL,_revokers,,,"struct Revokers
    {
        // Event handlers to revoke in ~AppHost, before calling App.Close
        winrt::Microsoft::Terminal::Remoting::Peasant::ExecuteCommandlineRequested_revoker peasantExecuteCommandlineRequested;
        winrt::Microsoft::Terminal::Remoting::Peasant::SummonRequested_revoker peasantSummonRequested;
        winrt::Microsoft::Terminal::Remoting::Peasant::DisplayWindowIdRequested_revoker peasantDisplayWindowIdRequested;
        winrt::Microsoft::Terminal::Remoting::Peasant::QuitRequested_revoker peasantQuitRequested;

        winrt::Microsoft::Terminal::Remoting::Peasant::AttachRequested_revoker AttachRequested;

        winrt::TerminalApp::TerminalWindow::Initialized_revoker Initialized;
        winrt::TerminalApp::TerminalWindow::CloseRequested_revoker CloseRequested;
        winrt::TerminalApp::TerminalWindow::RequestedThemeChanged_revoker RequestedThemeChanged;
        winrt::TerminalApp::TerminalWindow::FullscreenChanged_revoker FullscreenChanged;
       ...",5,cascadia\WindowsTerminal\AppHost.hpp,AppHost.Revokers,,false,177,Revokers,74
300876,TYPE_DECL,_windowCallbacks,,,"struct WindowRevokers
    {
        winrt::event_token MouseScrolled;
        winrt::event_token WindowActivated;
        winrt::event_token WindowMoved;
        winrt::event_token ShouldExitFullscreen;
        winrt::event_token WindowCloseButtonClicked;
        winrt::event_token DragRegionClicked;
        winrt::event_token WindowVisibilityChanged;
        winrt::event_token UpdateSettingsRequested;
        winrt::event_token MaximizeChanged;
        winrt::event_token AutomaticShutdownRequested;
        // LOAD BEARING!!
        //If you add events here, make sure they're revoked in AppHost::_revokeWindowCallbacks
    }",5,cascadia\WindowsTerminal\AppHost.hpp,AppHost.WindowRevokers,,false,219,WindowRevokers,76
300938,TYPE_DECL,,cascadia\WindowsTerminal\BaseWindow.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\WindowsTerminal\BaseWindow.hpp,cascadia\WindowsTerminal\BaseWindow.hpp:<global>,,false,1,<global>,3
300941,TYPE_DECL,BaseWindow<T>,,,"class BaseWindow
{
public:
    virtual ~BaseWindow() = 0;
    static T* GetThisFromHandle(HWND const window) noexcept
    {
        return reinterpret_cast<T*>(GetWindowLongPtr(window, GWLP_USERDATA));
    }

    [[nodiscard]] static LRESULT __stdcall WndProc(HWND const window, UINT const message, WPARAM const wparam, LPARAM const lparam) noexcept
    {
        WINRT_ASSERT(window);

        if (WM_NCCREATE == message)
        {
            auto cs = reinterpret_cast<CREATESTRUCT*>(lparam);
            T* that = static_cast<T*>(cs->lpCreateParams);
            WINRT_ASSERT(that);
            WINRT_ASSERT(!that->_window);
            that->_window = wil::unique_hwnd(window);

            return that->OnNcCreate(wparam, lparam);
        }
        else if (T* that = GetThisFromHandle(window))
        {
            return that->MessageHandler(message, wparam, lparam);
        }

        return DefWindowProc(window, message, wparam, lparam);
    }

    [[nodiscard]] virtual LRESULT Messa...",1,cascadia\WindowsTerminal\BaseWindow.hpp,BaseWindow,,false,10,BaseWindow,1
301394,TYPE_DECL,BaseWindow<T>,,,using base_type = BaseWindow<T>;,5,cascadia\WindowsTerminal\BaseWindow.hpp,base_type,,false,203,base_type,18
301463,TYPE_DECL,,cascadia\WindowsTerminal\CustomWindowMessages.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\WindowsTerminal\CustomWindowMessages.hpp,cascadia\WindowsTerminal\CustomWindowMessages.hpp:<global>,,false,1,<global>,1
301479,TYPE_DECL,,cascadia\WindowsTerminal\IslandWindow.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\WindowsTerminal\IslandWindow.cpp,cascadia\WindowsTerminal\IslandWindow.cpp:<global>,,false,1,<global>,10
301540,TYPE_DECL,ANY,,,using VirtualKeyModifiers = winrt::Windows::System::VirtualKeyModifiers;,1,cascadia\WindowsTerminal\IslandWindow.cpp,VirtualKeyModifiers,,false,25,VirtualKeyModifiers,2
304936,TYPE_DECL,,cascadia\WindowsTerminal\IslandWindow.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\WindowsTerminal\IslandWindow.hpp,cascadia\WindowsTerminal\IslandWindow.hpp:<global>,,false,1,<global>,4
304946,TYPE_DECL,,,,"struct SystemMenuItemInfo
{
    winrt::hstring label;
    winrt::delegate<void()> callback;
}",1,cascadia\WindowsTerminal\IslandWindow.hpp,SystemMenuItemInfo,,false,10,SystemMenuItemInfo,2
304949,TYPE_DECL,,,,"class IslandWindow :
    public BaseWindow<IslandWindow>
{
public:
    IslandWindow() noexcept;
    virtual ~IslandWindow() override;

    virtual void MakeWindow() noexcept;
    virtual void Close();

    virtual void Refrigerate() noexcept;

    virtual void OnSize(const UINT width, const UINT height);
    HWND GetInteropHandle() const;

    [[nodiscard]] virtual LRESULT MessageHandler(UINT const message, WPARAM const wparam, LPARAM const lparam) noexcept override;

    [[nodiscard]] LRESULT OnNcCreate(WPARAM wParam, LPARAM lParam) noexcept override;

    void OnResize(const UINT width, const UINT height) override;
    void OnMinimize() override;
    void OnRestore() override;
    virtual void OnAppInitialized();
    virtual void SetContent(winrt::Windows::UI::Xaml::UIElement content);
    virtual void OnApplicationThemeChanged(const winrt::Windows::UI::Xaml::ElementTheme& requestedTheme);
    virtual til::rect GetNonClientFrame(const UINT dpi) const noexcept;
    virtual til::siz...",1,cascadia\WindowsTerminal\IslandWindow.hpp,IslandWindow,BaseWindow<IslandWindow>,false,16,IslandWindow,3
305445,TYPE_DECL,,cascadia\WindowsTerminal\NonClientIslandWindow.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\WindowsTerminal\NonClientIslandWindow.cpp,cascadia\WindowsTerminal\NonClientIslandWindow.cpp:<global>,,false,1,<global>,5
307445,TYPE_DECL,,cascadia\WindowsTerminal\NonClientIslandWindow.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\WindowsTerminal\NonClientIslandWindow.hpp,cascadia\WindowsTerminal\NonClientIslandWindow.hpp:<global>,,false,1,<global>,6
307448,TYPE_DECL,,,,"class NonClientIslandWindow : public IslandWindow
{
public:
    // this is the same for all DPIs
    static constexpr const int topBorderVisibleHeight = 1;

    NonClientIslandWindow(const winrt::Windows::UI::Xaml::ElementTheme& requestedTheme) noexcept;
    ~NonClientIslandWindow() override;

    void Refrigerate() noexcept override;

    virtual void Close() override;
    void MakeWindow() noexcept override;
    virtual void OnSize(const UINT width, const UINT height) override;

    [[nodiscard]] virtual LRESULT MessageHandler(UINT const message, WPARAM const wparam, LPARAM const lparam) noexcept override;

    virtual til::rect GetNonClientFrame(UINT dpi) const noexcept override;
    virtual til::size GetTotalNonClientExclusiveSize(UINT dpi) const noexcept override;

    bool Initialize() override;

    void OnAppInitialized() override;
    void SetContent(winrt::Windows::UI::Xaml::UIElement content) override;
    void SetTitlebarContent(winrt::Windows::UI::Xaml::UIElement conten...",1,cascadia\WindowsTerminal\NonClientIslandWindow.hpp,NonClientIslandWindow,IslandWindow,false,26,NonClientIslandWindow,1
307635,TYPE_DECL,_callbacks,,,"struct Revokers
    {
        winrt::Windows::UI::Xaml::Controls::Border::SizeChanged_revoker dragBarSizeChanged;
        winrt::Windows::UI::Xaml::Controls::Grid::SizeChanged_revoker rootGridSizeChanged;
        winrt::TerminalApp::TitlebarControl::Loaded_revoker titlebarLoaded;
    }",5,cascadia\WindowsTerminal\NonClientIslandWindow.hpp,NonClientIslandWindow.Revokers,,false,102,Revokers,49
307688,TYPE_DECL,,cascadia\WindowsTerminal\NotificationIcon.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\WindowsTerminal\NotificationIcon.cpp,cascadia\WindowsTerminal\NotificationIcon.cpp:<global>,,false,1,<global>,7
308318,TYPE_DECL,,cascadia\WindowsTerminal\NotificationIcon.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\WindowsTerminal\NotificationIcon.hpp,cascadia\WindowsTerminal\NotificationIcon.hpp:<global>,,false,1,<global>,2
308321,TYPE_DECL,,,,"enum class NotificationIconMenuItemAction
{
    FocusTerminal, // Focus the MRU terminal.
    SummonWindow
}",1,cascadia\WindowsTerminal\NotificationIcon.hpp,NotificationIconMenuItemAction,,false,9,NotificationIconMenuItemAction,1
308324,TYPE_DECL,,,,"class NotificationIcon
{
public:
    NotificationIcon() = delete;
    NotificationIcon(const HWND owningHwnd);
    ~NotificationIcon();

    void CreateNotificationIcon();
    void RemoveIconFromNotificationArea();
    void ReAddNotificationIcon();

    void NotificationIconPressed();
    void ShowContextMenu(const til::point coord, const winrt::Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Terminal::Remoting::PeasantInfo>& peasants);
    void MenuItemSelected(const HMENU menu, const UINT menuItemIndex);

    WINRT_CALLBACK(SummonWindowRequested, winrt::delegate<void(winrt::Microsoft::Terminal::Remoting::SummonWindowSelectionArgs)>);

private:
    void _CreateWindow();
    HMENU _CreateContextMenu(const winrt::Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Terminal::Remoting::PeasantInfo>& peasants);

    wil::unique_hwnd _notificationIconHwnd;
    HWND _owningHwnd;
    NOTIFYICONDATA _notificationIconData;
}",1,cascadia\WindowsTerminal\NotificationIcon.hpp,NotificationIcon,,false,15,NotificationIcon,2
308385,TYPE_DECL,,cascadia\WindowsTerminal\VirtualDesktopUtils.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\WindowsTerminal\VirtualDesktopUtils.cpp,cascadia\WindowsTerminal\VirtualDesktopUtils.cpp:<global>,,false,1,<global>,3
308803,TYPE_DECL,,cascadia\WindowsTerminal\VirtualDesktopUtils.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\WindowsTerminal\VirtualDesktopUtils.hpp,cascadia\WindowsTerminal\VirtualDesktopUtils.hpp:<global>,,false,1,<global>,1
308854,TYPE_DECL,,cascadia\WindowsTerminal\WindowEmperor.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\WindowsTerminal\WindowEmperor.cpp,cascadia\WindowsTerminal\WindowEmperor.cpp:<global>,,false,1,<global>,8
308942,TYPE_DECL,ANY,,,using VirtualKeyModifiers = winrt::Windows::System::VirtualKeyModifiers;,1,cascadia\WindowsTerminal\WindowEmperor.cpp,VirtualKeyModifiers,,false,19,VirtualKeyModifiers,1
310626,TYPE_DECL,,cascadia\WindowsTerminal\WindowEmperor.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\WindowsTerminal\WindowEmperor.hpp,cascadia\WindowsTerminal\WindowEmperor.hpp:<global>,,false,1,<global>,3
310629,TYPE_DECL,,,,"class WindowEmperor : public std::enable_shared_from_this<WindowEmperor>
{
public:
    WindowEmperor() noexcept;
    void WaitForWindows();

    void HandleCommandlineArgs(int nCmdShow);

private:
    void _createNewWindowThread(const winrt::Microsoft::Terminal::Remoting::WindowRequestedArgs& args);

    [[nodiscard]] static LRESULT __stdcall _wndProc(HWND const window, UINT const message, WPARAM const wparam, LPARAM const lparam) noexcept;
    LRESULT _messageHandler(UINT const message, WPARAM const wParam, LPARAM const lParam) noexcept;
    wil::unique_hwnd _window;

    winrt::TerminalApp::App _app;
    winrt::Windows::System::DispatcherQueue _dispatcher{ nullptr };
    winrt::Microsoft::Terminal::Remoting::WindowManager _manager;

    til::shared_mutex<std::vector<std::shared_ptr<WindowThread>>> _windows;
    std::atomic<uint32_t> _windowThreadInstances;

    til::shared_mutex<std::vector<std::shared_ptr<WindowThread>>> _oldThreads;

    std::optional<til::throttled_func_trailin...",1,cascadia\WindowsTerminal\WindowEmperor.hpp,WindowEmperor,std.enable_shared_from_this<WindowEmperor>,false,23,WindowEmperor,1
310772,TYPE_DECL,_revokers,,,"struct Revokers
    {
        winrt::Microsoft::Terminal::Remoting::WindowManager::WindowCreated_revoker WindowCreated;
        winrt::Microsoft::Terminal::Remoting::WindowManager::WindowClosed_revoker WindowClosed;
        winrt::Microsoft::Terminal::Remoting::WindowManager::QuitAllRequested_revoker QuitAllRequested;
    }",5,cascadia\WindowsTerminal\WindowEmperor.hpp,WindowEmperor.Revokers,,false,88,Revokers,41
310799,TYPE_DECL,,cascadia\WindowsTerminal\WindowThread.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\WindowsTerminal\WindowThread.cpp,cascadia\WindowsTerminal\WindowThread.cpp:<global>,,false,1,<global>,3
311222,TYPE_DECL,,cascadia\WindowsTerminal\WindowThread.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\WindowsTerminal\WindowThread.hpp,cascadia\WindowsTerminal\WindowThread.hpp:<global>,,false,1,<global>,3
311225,TYPE_DECL,,,,"class WindowThread : public std::enable_shared_from_this<WindowThread>
{
public:
    WindowThread(winrt::TerminalApp::AppLogic logic,
                 winrt::Microsoft::Terminal::Remoting::WindowRequestedArgs args,
                 winrt::Microsoft::Terminal::Remoting::WindowManager manager,
                 winrt::Microsoft::Terminal::Remoting::Peasant peasant);

    winrt::TerminalApp::TerminalWindow Logic();
    void CreateHost();
    int RunMessagePump();
    void RundownForExit();

    bool KeepWarm();
    void Refrigerate();
    void Microwave(
        winrt::Microsoft::Terminal::Remoting::WindowRequestedArgs args,
        winrt::Microsoft::Terminal::Remoting::Peasant peasant);

    uint64_t PeasantID();

    WINRT_CALLBACK(UpdateSettingsRequested, winrt::delegate<void()>);

private:
    winrt::Microsoft::Terminal::Remoting::Peasant _peasant{ nullptr };

    winrt::TerminalApp::AppLogic _appLogic{ nullptr };
    winrt::Microsoft::Terminal::Remoting::WindowRequestedArgs _args{ ...",1,cascadia\WindowsTerminal\WindowThread.hpp,WindowThread,std.enable_shared_from_this<WindowThread>,false,7,WindowThread,1
311318,TYPE_DECL,,cascadia\WindowsTerminal\icon.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\WindowsTerminal\icon.cpp,cascadia\WindowsTerminal\icon.cpp:<global>,,false,1,<global>,3
311458,TYPE_DECL,,cascadia\WindowsTerminal\icon.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\WindowsTerminal\icon.hpp,cascadia\WindowsTerminal\icon.hpp:<global>,,false,1,<global>,1
311485,TYPE_DECL,,cascadia\WindowsTerminal\main.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\WindowsTerminal\main.cpp,cascadia\WindowsTerminal\main.cpp:<global>,,false,1,<global>,7
311671,TYPE_DECL,,cascadia\WindowsTerminal\pch.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\WindowsTerminal\pch.cpp,cascadia\WindowsTerminal\pch.cpp:<global>,,false,1,<global>,2
311756,TYPE_DECL,,cascadia\WindowsTerminal\pch.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\WindowsTerminal\pch.hpp,cascadia\WindowsTerminal\pch.hpp:<global>,,false,1,<global>,41
311762,TYPE_DECL,,cascadia\WindowsTerminal\resource.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\WindowsTerminal\resource.hpp,cascadia\WindowsTerminal\resource.hpp:<global>,,false,1,<global>,1
311767,TYPE_DECL,,cascadia\inc\ControlProperties.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\inc\ControlProperties.hpp,cascadia\inc\ControlProperties.hpp:<global>,,false,1,<global>,1
311772,TYPE_DECL,,cascadia\inc\WindowingBehavior.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\inc\WindowingBehavior.hpp,cascadia\inc\WindowingBehavior.hpp:<global>,,false,1,<global>,1
311827,TYPE_DECL,,cascadia\inc\cppwinrt_utils.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\inc\cppwinrt_utils.hpp,cascadia\inc\cppwinrt_utils.hpp:<global>,,false,1,<global>,1
311830,TYPE_DECL,"formatter<winrt.hstring,wchar_t><>",,,"struct fmt::formatter<winrt::hstring, wchar_t> : fmt::formatter<fmt::wstring_view, wchar_t>
{
    auto format(const winrt::hstring& str, auto& ctx)
    {
        return fmt::formatter<fmt::wstring_view, wchar_t>::format({ str.data(), str.size() }, ctx);
    }
}",1,cascadia\inc\cppwinrt_utils.hpp,"formatter<winrt.hstring,wchar_t>","fmt.formatter<fmt.wstring_view, wchar_t>",false,21,"formatter<winrt::hstring,wchar_t>",1
311949,TYPE_DECL,,cascadia\ut_app\ColorHelperTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\ut_app\ColorHelperTests.cpp,cascadia\ut_app\ColorHelperTests.cpp:<global>,,false,1,<global>,5
311953,TYPE_DECL,,,,"class ColorHelperTests
    {
        BEGIN_TEST_CLASS(ColorHelperTests)
            TEST_CLASS_PROPERTY(L""ActivationContext"", L""TerminalApp.Unit.Tests.manifest"")
        END_TEST_CLASS()

        TEST_METHOD(ConvertRgbToHsl);
        TEST_METHOD(ConvertHslToRgb);
        TEST_METHOD(LuminanceTests);
    }",5,cascadia\ut_app\ColorHelperTests.cpp,TerminalAppUnitTests.ColorHelperTests,,false,20,ColorHelperTests,1
312520,TYPE_DECL,,cascadia\ut_app\JsonUtilsTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\ut_app\JsonUtilsTests.cpp,cascadia\ut_app\JsonUtilsTests.cpp:<global>,,false,1,<global>,3
312528,TYPE_DECL,,,,"struct StructWithConverterSpecialization
{
    int value;

    bool operator==(const StructWithConverterSpecialization& other) const
    {
        return value == other.value;
    }
}",1,cascadia\ut_app\JsonUtilsTests.cpp,StructWithConverterSpecialization,,false,14,StructWithConverterSpecialization,1
312541,TYPE_DECL,ConversionTrait<StructWithConverterSpecialization><>,,,"struct ConversionTrait<StructWithConverterSpecialization>
{
    StructWithConverterSpecialization FromJson(const Json::Value& value)
    {
        return StructWithConverterSpecialization{ value.asInt() };
    }

    bool CanConvert(const Json::Value& value)
    {
        return value.isInt();
    }

    std::string TypeDescription() const { return """"; }
}",1,cascadia\ut_app\JsonUtilsTests.cpp,ConversionTrait<StructWithConverterSpecialization>,,false,25,ConversionTrait<StructWithConverterSpecialization>,2
312570,TYPE_DECL,,,,"struct CustomConverter
{
    int factor{ 1 };

    int FromJson(const Json::Value& value)
    {
        return std::stoi(value.asString()) * factor;
    }

    bool CanConvert(const Json::Value& /*value*/)
    {
        return true;
    }

    std::string TypeDescription() const { return """"; }
}",1,cascadia\ut_app\JsonUtilsTests.cpp,CustomConverter,,false,41,CustomConverter,3
312609,TYPE_DECL,,,,"enum class JsonTestEnum : int
{
    First = 0,
    Second,
    Third,
    Fourth,
    Fifth
}",1,cascadia\ut_app\JsonUtilsTests.cpp,JsonTestEnum,,false,58,JsonTestEnum,4
312623,TYPE_DECL,,,,"enum class JsonTestFlags : int
{
    None = 0,
    First = 1 << 0,
    Second = 1 << 1,
    Third = 1 << 2,
    Fourth = 1 << 3,
    Fifth = 1 << 4,
    All = ~0,
}",1,cascadia\ut_app\JsonUtilsTests.cpp,JsonTestFlags,,false,78,JsonTestFlags,6
312669,TYPE_DECL,,,,"struct hstring_like
{
    std::string value;
}",1,cascadia\ut_app\JsonUtilsTests.cpp,hstring_like,,false,104,hstring_like,9
312671,TYPE_DECL,ConversionTrait<hstring_like><>,,,"struct ConversionTrait<hstring_like>
{
    hstring_like FromJson(const Json::Value& json)
    {
        return { ConversionTrait<std::string>{}.FromJson(json) };
    }

    bool CanConvert(const Json::Value& json)
    {
        return json.isNull() || ConversionTrait<std::string>{}.CanConvert(json);
    }

    Json::Value ToJson(const hstring_like& val)
    {
        if (val.value == """")
        {
            return Json::Value::nullSingleton();
        }
        return val.value;
    }

    std::string TypeDescription() const
    {
        return ""string"";
    }
}",1,cascadia\ut_app\JsonUtilsTests.cpp,ConversionTrait<hstring_like>,,false,109,ConversionTrait<hstring_like>,10
312725,TYPE_DECL,,,,"class JsonUtilsTests
    {
        TEST_CLASS(JsonUtilsTests);

        TEST_METHOD(DocumentedBehaviors_GetValue_Returning);
        TEST_METHOD(DocumentedBehaviors_GetValue_Filling);
        TEST_METHOD(DocumentedBehaviors_GetValueForKey_Returning);
        TEST_METHOD(DocumentedBehaviors_GetValueForKey_Filling);

        TEST_METHOD(BasicTypeConversion);
        TEST_METHOD(BasicTypeWithCustomConverter);
        TEST_METHOD(CustomTypeWithConverterSpecialization);
        TEST_METHOD(EnumMapper);
        TEST_METHOD(FlagMapper);

        TEST_METHOD(NestedExceptionDuringKeyParse);

        TEST_METHOD(SetValueHStringLike);
        TEST_METHOD(GetValueHStringLike);

        TEST_METHOD(DoubleOptional);
    }",5,cascadia\ut_app\JsonUtilsTests.cpp,TerminalAppUnitTests.JsonUtilsTests,,false,138,JsonUtilsTests,1
314138,TYPE_DECL,,cascadia\ut_app\precomp.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\ut_app\precomp.cpp,cascadia\ut_app\precomp.cpp:<global>,,false,1,<global>,2
314175,TYPE_DECL,,cascadia\ut_app\precomp.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\ut_app\precomp.hpp,cascadia\ut_app\precomp.hpp:<global>,,false,1,<global>,17
314180,TYPE_DECL,,cascadia\wt\resource.hpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\wt\resource.hpp,cascadia\wt\resource.hpp:<global>,,false,1,<global>,1
314197,TYPE_DECL,,cascadia\wt\shim.cpp:<global>,NAMESPACE_BLOCK,<global>,1,cascadia\wt\shim.cpp,cascadia\wt\shim.cpp:<global>,,false,1,<global>,7
314290,TYPE_DECL,,host\ApiRoutines.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ApiRoutines.hpp,host\ApiRoutines.hpp:<global>,,false,1,<global>,2
314293,TYPE_DECL,,,,"class ApiRoutines : public IApiRoutines
{
public:
#pragma region ObjectManagement
    /*HRESULT CreateInitialObjects(_Out_ InputBuffer** const ppInputObject,
    _Out_ SCREEN_INFORMATION** const ppOutputObject);
    */

#pragma endregion

#pragma region L1
    void GetConsoleInputCodePageImpl(ULONG& codepage) noexcept override;

    void GetConsoleOutputCodePageImpl(ULONG& codepage) noexcept override;

    void GetConsoleInputModeImpl(InputBuffer& context,
                                 ULONG& mode) noexcept override;

    void GetConsoleOutputModeImpl(SCREEN_INFORMATION& context,
                                  ULONG& mode) noexcept override;

    [[nodiscard]] HRESULT SetConsoleInputModeImpl(InputBuffer& context,
                                                  const ULONG mode) noexcept override;

    [[nodiscard]] HRESULT SetConsoleOutputModeImpl(SCREEN_INFORMATION& context,
                                                   const ULONG Mode) noexcept override;

    [[nodis...",1,host\ApiRoutines.hpp,ApiRoutines,IApiRoutines,false,22,ApiRoutines,1
314837,TYPE_DECL,,host\ConsoleArguments.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ConsoleArguments.cpp,host\ConsoleArguments.cpp:<global>,,false,1,<global>,5
315743,TYPE_DECL,,host\ConsoleArguments.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ConsoleArguments.hpp,host\ConsoleArguments.hpp:<global>,,false,1,<global>,2
315746,TYPE_DECL,,,,"class ConsoleArguments
{
public:
    ConsoleArguments(const std::wstring& commandline,
                     const HANDLE hStdIn,
                     const HANDLE hStdOut);

    ConsoleArguments();

    ConsoleArguments& operator=(const ConsoleArguments& other);

    [[nodiscard]] HRESULT ParseCommandline();

    bool HasVtHandles() const;
    bool InConptyMode() const noexcept;
    bool IsHeadless() const;
    bool ShouldCreateServerHandle() const;
    bool ShouldRunAsComServer() const;
    bool IsPassthroughMode() const noexcept;

    HANDLE GetServerHandle() const;
    HANDLE GetVtInHandle() const;
    HANDLE GetVtOutHandle() const;

    bool HasSignalHandle() const;
    HANDLE GetSignalHandle() const;

    std::wstring GetOriginalCommandLine() const;
    std::wstring GetClientCommandline() const;
    std::wstring GetVtMode() const;
    bool GetForceV1() const;
    bool GetForceNoHandoff() const;

    short GetWidth() const;
    short GetHeight() const;
    bool GetInheritCursor(...",1,host\ConsoleArguments.hpp,ConsoleArguments,,false,21,ConsoleArguments,1
315911,TYPE_DECL,,,,friend class ConsoleArgumentsTests,5,host\ConsoleArguments.hpp,ConsoleArguments.ConsoleArgumentsTests,,false,165,ConsoleArgumentsTests,67
315932,TYPE_DECL,,host\CursorBlinker.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\CursorBlinker.cpp,host\CursorBlinker.cpp:<global>,,false,1,<global>,4
316310,TYPE_DECL,ANY,,,"using filetime_duration = std::chrono::duration<int64_t, std::ratio<1, 10000000>>;",5,host\CursorBlinker.cpp,filetime_duration,,false,168,filetime_duration,1
316361,TYPE_DECL,,host\CursorBlinker.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\CursorBlinker.hpp,host\CursorBlinker.hpp:<global>,,false,1,<global>,1
316366,TYPE_DECL,,,,"class CursorBlinker final
    {
    public:
        CursorBlinker();
        ~CursorBlinker();

        void FocusStart() const noexcept;
        void FocusEnd() const noexcept;

        void UpdateSystemMetrics() noexcept;
        void SettingsChanged() noexcept;
        void TimerRoutine(SCREEN_INFORMATION& ScreenInfo) const noexcept;

    private:
        void SetCaretTimer() const noexcept;
        void KillCaretTimer() const noexcept;

        wil::unique_threadpool_timer_nowait _timer;
        UINT _uCaretBlinkTime;
    }",5,host\CursorBlinker.hpp,Microsoft.Console.CursorBlinker,,false,17,CursorBlinker,1
316408,TYPE_DECL,,host\IIoProvider.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\IIoProvider.hpp,host\IIoProvider.hpp:<global>,,false,1,<global>,1
316411,TYPE_DECL,,,,class SCREEN_INFORMATION,1,host\IIoProvider.hpp,SCREEN_INFORMATION,,false,17,SCREEN_INFORMATION,1
316412,TYPE_DECL,,,,class InputBuffer,1,host\IIoProvider.hpp,InputBuffer,,false,18,InputBuffer,2
316415,TYPE_DECL,,,,"class IIoProvider
    {
    public:
        virtual SCREEN_INFORMATION& GetActiveOutputBuffer() = 0;
        virtual const SCREEN_INFORMATION& GetActiveOutputBuffer() const = 0;
        virtual InputBuffer* const GetActiveInputBuffer() const = 0;
    }",5,host\IIoProvider.hpp,Microsoft.Console.IIoProvider,,false,22,IIoProvider,1
316431,TYPE_DECL,,host\PtySignalInputThread.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\PtySignalInputThread.cpp,host\PtySignalInputThread.cpp:<global>,,false,1,<global>,6
316709,TYPE_DECL,,host\PtySignalInputThread.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\PtySignalInputThread.hpp,host\PtySignalInputThread.hpp:<global>,,false,1,<global>,2
316714,TYPE_DECL,,,,"class PtySignalInputThread final
    {
    public:
        PtySignalInputThread(_In_ wil::unique_hfile hPipe);
        ~PtySignalInputThread();

        [[nodiscard]] HRESULT Start() noexcept;
        static DWORD WINAPI StaticThreadProc(_In_ LPVOID lpParameter);

        // Prevent copying and assignment.
        PtySignalInputThread(const PtySignalInputThread&) = delete;
        PtySignalInputThread& operator=(const PtySignalInputThread&) = delete;

        void ConnectConsole() noexcept;
        void CreatePseudoWindow();

    private:
        enum class PtySignal : unsigned short
        {
            ShowHideWindow = 1,
            ClearBuffer = 2,
            SetParent = 3,
            ResizeWindow = 8
        };

        struct ResizeWindowData
        {
            unsigned short sx;
            unsigned short sy;
        };

        struct ShowHideData
        {
            unsigned short show; // used as a bool, but passed as a ushort
        };

        struct SetParentDa...",5,host\PtySignalInputThread.hpp,Microsoft.Console.PtySignalInputThread,,false,22,PtySignalInputThread,1
316743,TYPE_DECL,,,,"enum class PtySignal : unsigned short
        {
            ShowHideWindow = 1,
            ClearBuffer = 2,
            SetParent = 3,
            ResizeWindow = 8
        }",9,host\PtySignalInputThread.hpp,Microsoft.Console.PtySignalInputThread.PtySignal,,false,39,PtySignal,9
316764,TYPE_DECL,,,,"struct ResizeWindowData
        {
            unsigned short sx;
            unsigned short sy;
        }",9,host\PtySignalInputThread.hpp,Microsoft.Console.PtySignalInputThread.ResizeWindowData,,false,47,ResizeWindowData,10
316767,TYPE_DECL,,,,"struct ShowHideData
        {
            unsigned short show; // used as a bool, but passed as a ushort
        }",9,host\PtySignalInputThread.hpp,Microsoft.Console.PtySignalInputThread.ShowHideData,,false,53,ShowHideData,11
316769,TYPE_DECL,,,,"struct SetParentData
        {
            uint64_t handle;
        }",9,host\PtySignalInputThread.hpp,Microsoft.Console.PtySignalInputThread.SetParentData,,false,58,SetParentData,12
316817,TYPE_DECL,,host\VtApiRoutines.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\VtApiRoutines.cpp,host\VtApiRoutines.cpp:<global>,,false,1,<global>,5
318618,TYPE_DECL,,host\VtApiRoutines.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\VtApiRoutines.hpp,host\VtApiRoutines.hpp:<global>,,false,1,<global>,3
318621,TYPE_DECL,,,,"class VtApiRoutines : public IApiRoutines
{
public:
    VtApiRoutines();

#pragma region ObjectManagement
    /*HRESULT CreateInitialObjects(_Out_ InputBuffer** const ppInputObject,
    _Out_ SCREEN_INFORMATION** const ppOutputObject);
    */

#pragma endregion

#pragma region L1
    void GetConsoleInputCodePageImpl(ULONG& codepage) noexcept override;

    void GetConsoleOutputCodePageImpl(ULONG& codepage) noexcept override;

    void GetConsoleInputModeImpl(InputBuffer& context,
                                 ULONG& mode) noexcept override;

    void GetConsoleOutputModeImpl(SCREEN_INFORMATION& context,
                                  ULONG& mode) noexcept override;

    [[nodiscard]] HRESULT SetConsoleInputModeImpl(InputBuffer& context,
                                                  const ULONG mode) noexcept override;

    [[nodiscard]] HRESULT SetConsoleOutputModeImpl(SCREEN_INFORMATION& context,
                                                   const ULONG Mode) noexcep...",1,host\VtApiRoutines.hpp,VtApiRoutines,IApiRoutines,false,23,VtApiRoutines,1
319193,TYPE_DECL,,host\VtInputThread.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\VtInputThread.cpp,host\VtInputThread.cpp:<global>,,false,1,<global>,11
319337,TYPE_DECL,,host\VtInputThread.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\VtInputThread.hpp,host\VtInputThread.hpp:<global>,,false,1,<global>,2
319342,TYPE_DECL,,,,"class VtInputThread
    {
    public:
        VtInputThread(_In_ wil::unique_hfile hPipe, const bool inheritCursor);

        [[nodiscard]] HRESULT Start();
        static DWORD WINAPI StaticVtInputThreadProc(_In_ LPVOID lpParameter);
        bool DoReadInput();
        void SetLookingForDSR(const bool looking) noexcept;

    private:
        void _InputThread();

        wil::unique_hfile _hFile;
        wil::unique_handle _hThread;
        DWORD _dwThreadId;

        std::function<void(bool)> _pfnSetLookingForDSR;

        std::unique_ptr<Microsoft::Console::VirtualTerminal::StateMachine> _pInputStateMachine;
        til::u8state _u8State;
        std::wstring _wstr;
    }",5,host\VtInputThread.hpp,Microsoft.Console.VtInputThread,,false,21,VtInputThread,1
319380,TYPE_DECL,,host\VtIo.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\VtIo.cpp,host\VtIo.cpp:<global>,,false,1,<global>,12
319826,TYPE_DECL,,host\VtIo.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\VtIo.hpp,host\VtIo.hpp:<global>,,false,1,<global>,5
319829,TYPE_DECL,,,,class ConsoleArguments,1,host\VtIo.hpp,ConsoleArguments,,false,11,ConsoleArguments,1
319833,TYPE_DECL,,,,class VtEngine,5,host\VtIo.hpp,Microsoft.Console.Render.VtEngine,,false,15,VtEngine,1
319837,TYPE_DECL,,,,"class VtIo
    {
    public:
        VtIo();

        [[nodiscard]] HRESULT Initialize(const ConsoleArguments* const pArgs);

        [[nodiscard]] HRESULT CreateAndStartSignalThread() noexcept;
        [[nodiscard]] HRESULT CreateIoHandlers() noexcept;

        bool IsUsingVt() const;

        [[nodiscard]] HRESULT StartIfNeeded();

        [[nodiscard]] static HRESULT ParseIoMode(const std::wstring& VtMode, _Out_ VtIoMode& ioMode);
        [[nodiscard]] HRESULT SuppressResizeRepaint();
        [[nodiscard]] HRESULT SetCursorPosition(const til::point coordCursor);
        [[nodiscard]] HRESULT SwitchScreenBuffer(const bool useAltBuffer);
        void SendCloseEvent();

        void CloseInput();
        void CloseOutput();

        void CorkRenderer(bool corked) const noexcept;

#ifdef UNIT_TESTING
        void EnableConptyModeForTests(std::unique_ptr<Microsoft::Console::Render::VtEngine> vtRenderEngine);
#endif

        bool IsResizeQuirkEnabled() const;

        [[nodiscard]] HRE...",5,host\VtIo.hpp,Microsoft.Console.VirtualTerminal.VtIo,,false,20,VtIo,1
319935,TYPE_DECL,,,,friend class VtIoTests,9,host\VtIo.hpp,Microsoft.Console.VirtualTerminal.VtIo.VtIoTests,,false,80,VtIoTests,34
319959,TYPE_DECL,,host\_output.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\_output.cpp,host\_output.cpp:<global>,,false,1,<global>,11
320361,TYPE_DECL,,host\_output.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\_output.hpp,host\_output.hpp:<global>,,false,1,<global>,3
320389,TYPE_DECL,,host\_stream.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\_stream.cpp,host\_stream.cpp:<global>,,false,1,<global>,15
320995,TYPE_DECL,,host\_stream.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\_stream.hpp,host\_stream.hpp:<global>,,false,1,<global>,2
321013,TYPE_DECL,,host\alias.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\alias.cpp,host\alias.cpp:<global>,,false,1,<global>,10
321077,TYPE_DECL,,,,"struct case_insensitive_hash
{
    std::size_t operator()(const std::wstring& key) const
    {
        til::hasher h;
        for (const auto& ch : key)
        {
            h.write(::towlower(ch));
        }
        return h.finalize();
    }
}",1,host\alias.cpp,case_insensitive_hash,,false,22,case_insensitive_hash,1
321102,TYPE_DECL,,,,"struct case_insensitive_equality
{
    bool operator()(const std::wstring& lhs, const std::wstring& rhs) const
    {
        return 0 == _wcsicmp(lhs.data(), rhs.data());
    }
}",1,host\alias.cpp,case_insensitive_equality,,false,35,case_insensitive_equality,2
322603,TYPE_DECL,,host\alias.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\alias.hpp,host\alias.hpp:<global>,,false,1,<global>,1
322606,TYPE_DECL,,,,"class Alias
{
public:
    static void s_ClearCmdExeAliases();

    static std::wstring s_MatchAndCopyAlias(std::wstring_view sourceText, const std::wstring& exeName, size_t& lineCount);

private:
    static std::deque<std::wstring> s_Tokenize(const std::wstring_view str);
    static std::wstring s_GetArgString(const std::wstring_view str);
    static size_t s_ReplaceMacros(std::wstring& str,
                                  const std::deque<std::wstring>& tokens,
                                  const std::wstring& fullArgString);

    static bool s_TryReplaceNumberedArgMacro(const wchar_t ch,
                                             std::wstring& appendToStr,
                                             const std::deque<std::wstring>& tokens);
    static bool s_TryReplaceWildcardArgMacro(const wchar_t ch,
                                             std::wstring& appendToStr,
                                             const std::wstring fullArgString);

    static bool s_Tr...",1,host\alias.hpp,Alias,,false,14,Alias,1
322691,TYPE_DECL,,,,friend class AliasTests,5,host\alias.hpp,Alias.AliasTests,,false,56,AliasTests,15
322700,TYPE_DECL,,host\cmdline.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\cmdline.cpp,host\cmdline.cpp:<global>,,false,1,<global>,4
322805,TYPE_DECL,,host\cmdline.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\cmdline.hpp,host\cmdline.hpp:<global>,,false,1,<global>,2
322835,TYPE_DECL,,host\conapi.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\conapi.hpp,host\conapi.hpp:<global>,,false,1,<global>,6
322850,TYPE_DECL,,host\conareainfo.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\conareainfo.cpp,host\conareainfo.cpp:<global>,,false,1,<global>,6
323431,TYPE_DECL,,host\conareainfo.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\conareainfo.hpp,host\conareainfo.hpp:<global>,,false,1,<global>,4
323434,TYPE_DECL,,,,class SCREEN_INFORMATION,1,host\conareainfo.hpp,SCREEN_INFORMATION,,false,26,SCREEN_INFORMATION,1
323435,TYPE_DECL,,,,class TextBuffer,1,host\conareainfo.hpp,TextBuffer,,false,27,TextBuffer,2
323436,TYPE_DECL,,,,"class ConversionAreaBufferInfo final
{
public:
    til::size coordCaBuffer;
    til::inclusive_rect rcViewCaWindow;
    til::point coordConView;

    explicit ConversionAreaBufferInfo(const til::size coordBufferSize);
}",1,host\conareainfo.hpp,ConversionAreaBufferInfo,,false,30,ConversionAreaBufferInfo,3
323445,TYPE_DECL,,,,"class ConversionAreaInfo final
{
public:
    ConversionAreaInfo(const til::size bufferSize,
                       const til::size windowSize,
                       const TextAttribute& fill,
                       const TextAttribute& popupFill,
                       const FontInfo fontInfo);
    ~ConversionAreaInfo() = default;
    ConversionAreaInfo(const ConversionAreaInfo&) = delete;
    ConversionAreaInfo(ConversionAreaInfo&& other);
    ConversionAreaInfo& operator=(const ConversionAreaInfo&) & = delete;
    ConversionAreaInfo& operator=(ConversionAreaInfo&&) & = delete;

    bool IsHidden() const noexcept;
    void SetHidden(const bool fIsHidden) noexcept;
    void ClearArea() noexcept;

    [[nodiscard]] HRESULT Resize(const til::size newSize) noexcept;

    void SetViewPos(const til::point pos) noexcept;
    void SetWindowInfo(const til::inclusive_rect& view) noexcept;
    void Paint() const noexcept;

    void WriteText(const std::vector<OutputCell>& text, const til::Co...",1,host\conareainfo.hpp,ConversionAreaInfo,,false,40,ConversionAreaInfo,4
323532,TYPE_DECL,,host\conddkrefs.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\conddkrefs.hpp,host\conddkrefs.hpp:<global>,,false,1,<global>,2
323545,TYPE_DECL,_RTL_CONSTANT_STRING_remove_const_template_class<size_t>,,,class _RTL_CONSTANT_STRING_remove_const_template_class,1,host\conddkrefs.hpp,_RTL_CONSTANT_STRING_remove_const_template_class,,false,31,_RTL_CONSTANT_STRING_remove_const_template_class,3
323546,TYPE_DECL,_RTL_CONSTANT_STRING_remove_const_template_class<sizeof(char)><>,,,"class _RTL_CONSTANT_STRING_remove_const_template_class<sizeof(char)>
{
public:
    typedef char T;
}",1,host\conddkrefs.hpp,_RTL_CONSTANT_STRING_remove_const_template_class<sizeof(char)>,,false,34,_RTL_CONSTANT_STRING_remove_const_template_class<sizeof(char)>,4
323547,TYPE_DECL,char,,,typedef char T;,18,host\conddkrefs.hpp,T,,false,37,T,1
323548,TYPE_DECL,_RTL_CONSTANT_STRING_remove_const_template_class<sizeof(WCHAR)><>,,,"class _RTL_CONSTANT_STRING_remove_const_template_class<sizeof(WCHAR)>
{
public:
    typedef WCHAR T;
}",1,host\conddkrefs.hpp,_RTL_CONSTANT_STRING_remove_const_template_class<sizeof(WCHAR)>,,false,41,_RTL_CONSTANT_STRING_remove_const_template_class<sizeof(WCHAR)>,5
323549,TYPE_DECL,ANY,,,typedef WCHAR T;,19,host\conddkrefs.hpp,T,,false,44,T,1
323550,TYPE_DECL,FS_INFORMATION_CLASS,,,"typedef enum _FSINFOCLASS {
        FileFsVolumeInformation = 1,
        FileFsLabelInformation,         // 2
        FileFsSizeInformation,          // 3
        FileFsDeviceInformation,        // 4
        FileFsAttributeInformation,     // 5
        FileFsControlInformation,       // 6
        FileFsFullSizeInformation,      // 7
        FileFsObjectIdInformation,      // 8
        FileFsDriverPathInformation,    // 9
        FileFsVolumeFlagsInformation,   // 10
        FileFsSectorSizeInformation,    // 11
        FileFsDataCopyInformation,      // 12
        FileFsMetadataSizeInformation,  // 13
        FileFsMaximumInformation
    }",5,host\conddkrefs.hpp,_FSINFOCLASS,,false,65,_FSINFOCLASS,6
323572,TYPE_DECL,_FSINFOCLASS,,,"typedef enum _FSINFOCLASS {
        FileFsVolumeInformation = 1,
        FileFsLabelInformation,         // 2
        FileFsSizeInformation,          // 3
        FileFsDeviceInformation,        // 4
        FileFsAttributeInformation,     // 5
        FileFsControlInformation,       // 6
        FileFsFullSizeInformation,      // 7
        FileFsObjectIdInformation,      // 8
        FileFsDriverPathInformation,    // 9
        FileFsVolumeFlagsInformation,   // 10
        FileFsSectorSizeInformation,    // 11
        FileFsDataCopyInformation,      // 12
        FileFsMetadataSizeInformation,  // 13
        FileFsMaximumInformation
    } FS_INFORMATION_CLASS, *PFS_INFORMATION_CLASS;",7,host\conddkrefs.hpp,FS_INFORMATION_CLASS,,false,80,FS_INFORMATION_CLASS,7
323573,TYPE_DECL,_FSINFOCLASS,,,"typedef enum _FSINFOCLASS {
        FileFsVolumeInformation = 1,
        FileFsLabelInformation,         // 2
        FileFsSizeInformation,          // 3
        FileFsDeviceInformation,        // 4
        FileFsAttributeInformation,     // 5
        FileFsControlInformation,       // 6
        FileFsFullSizeInformation,      // 7
        FileFsObjectIdInformation,      // 8
        FileFsDriverPathInformation,    // 9
        FileFsVolumeFlagsInformation,   // 10
        FileFsSectorSizeInformation,    // 11
        FileFsDataCopyInformation,      // 12
        FileFsMetadataSizeInformation,  // 13
        FileFsMaximumInformation
    } FS_INFORMATION_CLASS, *PFS_INFORMATION_CLASS;",29,host\conddkrefs.hpp,PFS_INFORMATION_CLASS,,false,80,PFS_INFORMATION_CLASS,8
323574,TYPE_DECL,FILE_FS_DEVICE_INFORMATION,,,"typedef struct _FILE_FS_DEVICE_INFORMATION
{
    DEVICE_TYPE DeviceType;
    ULONG Characteristics;
}",1,host\conddkrefs.hpp,_FILE_FS_DEVICE_INFORMATION,,false,87,_FILE_FS_DEVICE_INFORMATION,9
323577,TYPE_DECL,_FILE_FS_DEVICE_INFORMATION,,,"typedef struct _FILE_FS_DEVICE_INFORMATION
{
    DEVICE_TYPE DeviceType;
    ULONG Characteristics;
} FILE_FS_DEVICE_INFORMATION, *PFILE_FS_DEVICE_INFORMATION;",3,host\conddkrefs.hpp,FILE_FS_DEVICE_INFORMATION,,false,91,FILE_FS_DEVICE_INFORMATION,10
323578,TYPE_DECL,_FILE_FS_DEVICE_INFORMATION*,,,"typedef struct _FILE_FS_DEVICE_INFORMATION
{
    DEVICE_TYPE DeviceType;
    ULONG Characteristics;
} FILE_FS_DEVICE_INFORMATION, *PFILE_FS_DEVICE_INFORMATION;",31,host\conddkrefs.hpp,PFILE_FS_DEVICE_INFORMATION,,false,91,PFILE_FS_DEVICE_INFORMATION,11
323606,TYPE_DECL,,host\conimeinfo.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\conimeinfo.cpp,host\conimeinfo.cpp:<global>,,false,1,<global>,9
324563,TYPE_DECL,,host\conimeinfo.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\conimeinfo.hpp,host\conimeinfo.hpp:<global>,,false,1,<global>,7
324566,TYPE_DECL,,,,class SCREEN_INFORMATION,1,host\conimeinfo.hpp,SCREEN_INFORMATION,,false,29,SCREEN_INFORMATION,1
324567,TYPE_DECL,,,,"class ConsoleImeInfo final
{
public:
    // IME composition string information
    // There is one ""composition string"" per line that must be rendered on the screen
    std::vector<ConversionAreaInfo> ConvAreaCompStr;

    ConsoleImeInfo();
    ~ConsoleImeInfo() = default;
    ConsoleImeInfo(const ConsoleImeInfo&) = delete;
    ConsoleImeInfo(ConsoleImeInfo&&) = delete;
    ConsoleImeInfo& operator=(const ConsoleImeInfo&) & = delete;
    ConsoleImeInfo& operator=(ConsoleImeInfo&&) & = delete;

    void RefreshAreaAttributes();
    void ClearAllAreas();

    [[nodiscard]] HRESULT ResizeAllAreas(const til::size newSize);

    void WriteCompMessage(const std::wstring_view text,
                          const std::span<const BYTE> attributes,
                          const std::span<const WORD> colorArray);

    void WriteResultMessage(const std::wstring_view text);

    void RedrawCompMessage();

    void SaveCursorVisibility();
    void RestoreCursorVisibility();

private:
    [[nod...",1,host\conimeinfo.hpp,ConsoleImeInfo,,false,31,ConsoleImeInfo,2
324693,TYPE_DECL,,host\conserv.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\conserv.hpp,host\conserv.hpp:<global>,,false,1,<global>,6
324696,TYPE_DECL,CONSOLE_API_CONNECTINFO,,,"typedef struct _CONSOLE_API_CONNECTINFO
{
    Settings ConsoleInfo;
    BOOLEAN ConsoleApp;
    BOOLEAN WindowVisible;
    DWORD ProcessGroupId;
    DWORD TitleLength;
    WCHAR Title[MAX_PATH + 1];
    DWORD AppNameLength;
    WCHAR AppName[128];
    DWORD CurDirLength;
    WCHAR CurDir[MAX_PATH + 1];
}",1,host\conserv.hpp,_CONSOLE_API_CONNECTINFO,,false,40,_CONSOLE_API_CONNECTINFO,1
324721,TYPE_DECL,_CONSOLE_API_CONNECTINFO,,,"typedef struct _CONSOLE_API_CONNECTINFO
{
    Settings ConsoleInfo;
    BOOLEAN ConsoleApp;
    BOOLEAN WindowVisible;
    DWORD ProcessGroupId;
    DWORD TitleLength;
    WCHAR Title[MAX_PATH + 1];
    DWORD AppNameLength;
    WCHAR AppName[128];
    DWORD CurDirLength;
    WCHAR CurDir[MAX_PATH + 1];
} CONSOLE_API_CONNECTINFO, *PCONSOLE_API_CONNECTINFO;",3,host\conserv.hpp,CONSOLE_API_CONNECTINFO,,false,52,CONSOLE_API_CONNECTINFO,2
324722,TYPE_DECL,_CONSOLE_API_CONNECTINFO*,,,"typedef struct _CONSOLE_API_CONNECTINFO
{
    Settings ConsoleInfo;
    BOOLEAN ConsoleApp;
    BOOLEAN WindowVisible;
    DWORD ProcessGroupId;
    DWORD TitleLength;
    WCHAR Title[MAX_PATH + 1];
    DWORD AppNameLength;
    WCHAR AppName[128];
    DWORD CurDirLength;
    WCHAR CurDir[MAX_PATH + 1];
} CONSOLE_API_CONNECTINFO, *PCONSOLE_API_CONNECTINFO;",28,host\conserv.hpp,PCONSOLE_API_CONNECTINFO,,false,52,PCONSOLE_API_CONNECTINFO,3
324742,TYPE_DECL,,host\consoleInformation.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\consoleInformation.cpp,host\consoleInformation.cpp:<global>,,false,1,<global>,10
325332,TYPE_DECL,,host\conv.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\conv.hpp,host\conv.hpp:<global>,,false,1,<global>,3
325361,TYPE_DECL,,host\convarea.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\convarea.cpp,host\convarea.cpp:<global>,,false,1,<global>,4
325825,TYPE_DECL,,host\conwinuserrefs.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\conwinuserrefs.hpp,host\conwinuserrefs.hpp:<global>,,false,1,<global>,1
325828,TYPE_DECL,CONSOLECONTROL,,,"typedef enum _CONSOLECONTROL
{
    Reserved1,
    ConsoleNotifyConsoleApplication,
    Reserved2,
    ConsoleSetCaretInfo,
    Reserved3,
    ConsoleSetForeground,
    ConsoleSetWindowOwner,
    ConsoleEndTask,
}",1,host\conwinuserrefs.hpp,_CONSOLECONTROL,,false,22,_CONSOLECONTROL,1
325837,TYPE_DECL,_CONSOLECONTROL,,,"typedef enum _CONSOLECONTROL
{
    Reserved1,
    ConsoleNotifyConsoleApplication,
    Reserved2,
    ConsoleSetCaretInfo,
    Reserved3,
    ConsoleSetForeground,
    ConsoleSetWindowOwner,
    ConsoleEndTask,
} CONSOLECONTROL;",3,host\conwinuserrefs.hpp,CONSOLECONTROL,,false,32,CONSOLECONTROL,2
325838,TYPE_DECL,CONSOLEENDTASK,,,"typedef struct _CONSOLEENDTASK
{
    HANDLE ProcessId;
    HWND hwnd;
    ULONG ConsoleEventCode;
    ULONG ConsoleFlags;
}",1,host\conwinuserrefs.hpp,_CONSOLEENDTASK,,false,44,_CONSOLEENDTASK,3
325843,TYPE_DECL,_CONSOLEENDTASK,,,"typedef struct _CONSOLEENDTASK
{
    HANDLE ProcessId;
    HWND hwnd;
    ULONG ConsoleEventCode;
    ULONG ConsoleFlags;
} CONSOLEENDTASK, *PCONSOLEENDTASK;",3,host\conwinuserrefs.hpp,CONSOLEENDTASK,,false,50,CONSOLEENDTASK,4
325844,TYPE_DECL,_CONSOLEENDTASK*,,,"typedef struct _CONSOLEENDTASK
{
    HANDLE ProcessId;
    HWND hwnd;
    ULONG ConsoleEventCode;
    ULONG ConsoleFlags;
} CONSOLEENDTASK, *PCONSOLEENDTASK;",19,host\conwinuserrefs.hpp,PCONSOLEENDTASK,,false,50,PCONSOLEENDTASK,5
325845,TYPE_DECL,CONSOLEWINDOWOWNER,,,"typedef struct _CONSOLEWINDOWOWNER
{
    HWND hwnd;
    ULONG ProcessId;
    ULONG ThreadId;
}",1,host\conwinuserrefs.hpp,_CONSOLEWINDOWOWNER,,false,52,_CONSOLEWINDOWOWNER,6
325849,TYPE_DECL,_CONSOLEWINDOWOWNER,,,"typedef struct _CONSOLEWINDOWOWNER
{
    HWND hwnd;
    ULONG ProcessId;
    ULONG ThreadId;
} CONSOLEWINDOWOWNER, *PCONSOLEWINDOWOWNER;",3,host\conwinuserrefs.hpp,CONSOLEWINDOWOWNER,,false,57,CONSOLEWINDOWOWNER,7
325850,TYPE_DECL,_CONSOLEWINDOWOWNER*,,,"typedef struct _CONSOLEWINDOWOWNER
{
    HWND hwnd;
    ULONG ProcessId;
    ULONG ThreadId;
} CONSOLEWINDOWOWNER, *PCONSOLEWINDOWOWNER;",23,host\conwinuserrefs.hpp,PCONSOLEWINDOWOWNER,,false,57,PCONSOLEWINDOWOWNER,8
325851,TYPE_DECL,CONSOLESETFOREGROUND,,,"typedef struct _CONSOLESETFOREGROUND
{
    HANDLE hProcess;
    BOOL bForeground;
}",1,host\conwinuserrefs.hpp,_CONSOLESETFOREGROUND,,false,59,_CONSOLESETFOREGROUND,9
325854,TYPE_DECL,_CONSOLESETFOREGROUND,,,"typedef struct _CONSOLESETFOREGROUND
{
    HANDLE hProcess;
    BOOL bForeground;
} CONSOLESETFOREGROUND, *PCONSOLESETFOREGROUND;",3,host\conwinuserrefs.hpp,CONSOLESETFOREGROUND,,false,63,CONSOLESETFOREGROUND,10
325855,TYPE_DECL,_CONSOLESETFOREGROUND*,,,"typedef struct _CONSOLESETFOREGROUND
{
    HANDLE hProcess;
    BOOL bForeground;
} CONSOLESETFOREGROUND, *PCONSOLESETFOREGROUND;",25,host\conwinuserrefs.hpp,PCONSOLESETFOREGROUND,,false,63,PCONSOLESETFOREGROUND,11
325856,TYPE_DECL,CONSOLE_PROCESS_INFO,,,"typedef struct _CONSOLE_PROCESS_INFO
{
    IN DWORD dwProcessID;
    IN DWORD dwFlags;
}",1,host\conwinuserrefs.hpp,_CONSOLE_PROCESS_INFO,,false,70,_CONSOLE_PROCESS_INFO,12
325861,TYPE_DECL,_CONSOLE_PROCESS_INFO,,,"typedef struct _CONSOLE_PROCESS_INFO
{
    IN DWORD dwProcessID;
    IN DWORD dwFlags;
} CONSOLE_PROCESS_INFO, *PCONSOLE_PROCESS_INFO;",3,host\conwinuserrefs.hpp,CONSOLE_PROCESS_INFO,,false,74,CONSOLE_PROCESS_INFO,13
325862,TYPE_DECL,_CONSOLE_PROCESS_INFO*,,,"typedef struct _CONSOLE_PROCESS_INFO
{
    IN DWORD dwProcessID;
    IN DWORD dwFlags;
} CONSOLE_PROCESS_INFO, *PCONSOLE_PROCESS_INFO;",25,host\conwinuserrefs.hpp,PCONSOLE_PROCESS_INFO,,false,74,PCONSOLE_PROCESS_INFO,14
325863,TYPE_DECL,CONSOLE_CARET_INFO,,,"typedef struct _CONSOLE_CARET_INFO
{
    IN HWND hwnd;
    IN RECT rc;
}",1,host\conwinuserrefs.hpp,_CONSOLE_CARET_INFO,,false,76,_CONSOLE_CARET_INFO,15
325868,TYPE_DECL,_CONSOLE_CARET_INFO,,,"typedef struct _CONSOLE_CARET_INFO
{
    IN HWND hwnd;
    IN RECT rc;
} CONSOLE_CARET_INFO, *PCONSOLE_CARET_INFO;",3,host\conwinuserrefs.hpp,CONSOLE_CARET_INFO,,false,80,CONSOLE_CARET_INFO,16
325869,TYPE_DECL,_CONSOLE_CARET_INFO*,,,"typedef struct _CONSOLE_CARET_INFO
{
    IN HWND hwnd;
    IN RECT rc;
} CONSOLE_CARET_INFO, *PCONSOLE_CARET_INFO;",23,host\conwinuserrefs.hpp,PCONSOLE_CARET_INFO,,false,80,PCONSOLE_CARET_INFO,17
325885,TYPE_DECL,,host\dbcs.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\dbcs.cpp,host\dbcs.cpp:<global>,,false,1,<global>,7
326160,TYPE_DECL,,host\dbcs.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\dbcs.hpp,host\dbcs.hpp:<global>,,false,1,<global>,2
326192,TYPE_DECL,,host\directio.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\directio.cpp,host\directio.cpp:<global>,,false,1,<global>,15
326615,TYPE_DECL,,host\directio.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\directio.hpp,host\directio.hpp:<global>,,false,1,<global>,3
326618,TYPE_DECL,,,,class SCREEN_INFORMATION,1,host\directio.hpp,SCREEN_INFORMATION,,false,22,SCREEN_INFORMATION,1
326628,TYPE_DECL,,host\exe\CConsoleHandoff.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\exe\CConsoleHandoff.cpp,host\exe\CConsoleHandoff.cpp:<global>,,false,1,<global>,4
326654,TYPE_DECL,,host\exe\CConsoleHandoff.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\exe\CConsoleHandoff.hpp,host\exe\CConsoleHandoff.hpp:<global>,,false,1,<global>,2
326657,TYPE_DECL,,,,"struct __declspec(uuid(__CLSID_CConsoleHandoff))
    CConsoleHandoff : public RuntimeClass<RuntimeClassFlags<ClassicCom>, IConsoleHandoff, IDefaultTerminalMarker>
{
#pragma region IConsoleHandoff
    STDMETHODIMP EstablishHandoff(HANDLE server,
                                  HANDLE inputEvent,
                                  PCCONSOLE_PORTABLE_ATTACH_MSG msg,
                                  HANDLE signalPipe,
                                  HANDLE inboxProcess,
                                  HANDLE* process);

#pragma endregion
}",1,host\exe\CConsoleHandoff.hpp,CConsoleHandoff,"RuntimeClass<RuntimeClassFlags<ClassicCom>, IConsoleHandoff, IDefaultTerminalMarker>",false,33,CConsoleHandoff,1
326685,TYPE_DECL,,host\exe\exemain.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\exe\exemain.cpp,host\exe\exemain.cpp:<global>,,false,1,<global>,8
326689,TYPE_DECL,DefaultOutOfProcModuleWithRegistrationFlag<int>,,,class DefaultOutOfProcModuleWithRegistrationFlag,1,host\exe\exemain.cpp,DefaultOutOfProcModuleWithRegistrationFlag,,false,30,DefaultOutOfProcModuleWithRegistrationFlag,2
326690,TYPE_DECL,"OutOfProcModuleWithRegistrationFlag<int,ModuleT>",,,"class OutOfProcModuleWithRegistrationFlag : public Microsoft::WRL::Module<Microsoft::WRL::ModuleType::OutOfProc, ModuleT>
{
    using Elsewhere = Microsoft::WRL::Module<Microsoft::WRL::ModuleType::OutOfProc, ModuleT>;
    using Super = Microsoft::WRL::Details::OutOfProcModuleBase<ModuleT>;

public:
    STDMETHOD(RegisterCOMObject)
    (_In_opt_z_ const wchar_t* serverName, _In_reads_(count) IID* clsids, _In_reads_(count) IClassFactory** factories, _Inout_updates_(count) DWORD* cookies, unsigned int count)
    {
        return Microsoft::WRL::Details::RegisterCOMObject<RegClsType>(serverName, clsids, factories, cookies, count);
    }
}",1,host\exe\exemain.cpp,OutOfProcModuleWithRegistrationFlag,"Microsoft.WRL.Module<Microsoft.WRL.ModuleType.OutOfProc, ModuleT>",false,33,OutOfProcModuleWithRegistrationFlag,3
326691,TYPE_DECL,ANY,,,"using Elsewhere = Microsoft::WRL::Module<Microsoft::WRL::ModuleType::OutOfProc, ModuleT>;",5,host\exe\exemain.cpp,Elsewhere,,false,35,Elsewhere,1
326692,TYPE_DECL,ANY,,,using Super = Microsoft::WRL::Details::OutOfProcModuleBase<ModuleT>;,5,host\exe\exemain.cpp,Super,,false,36,Super,2
326694,TYPE_DECL,DefaultOutOfProcModuleWithRegistrationFlag<int>,,,"class DefaultOutOfProcModuleWithRegistrationFlag : public OutOfProcModuleWithRegistrationFlag<RegClsType, DefaultOutOfProcModuleWithRegistrationFlag<RegClsType>>
{
}",1,host\exe\exemain.cpp,DefaultOutOfProcModuleWithRegistrationFlag,"OutOfProcModuleWithRegistrationFlag<RegClsType, DefaultOutOfProcModuleWithRegistrationFlag<RegClsType>>",false,47,DefaultOutOfProcModuleWithRegistrationFlag,4
326790,TYPE_DECL,,host\exe\resource.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\exe\resource.hpp,host\exe\resource.hpp:<global>,,false,1,<global>,2
326804,TYPE_DECL,,host\ft_fuzzer\fuzzmain.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ft_fuzzer\fuzzmain.cpp,host\ft_fuzzer\fuzzmain.cpp:<global>,,false,1,<global>,8
326822,TYPE_DECL,,,,"struct NullDeviceComm : public IDeviceComm
{
    HRESULT SetServerInformation(CD_IO_SERVER_INFORMATION* const) const override
    {
        return S_FALSE;
    }
    HRESULT ReadIo(PCONSOLE_API_MSG const, CONSOLE_API_MSG* const) const override
    {
        // The easiest way to get the IO thread to stop reading from us us to simply
        // suspend it. The fuzzer doesn't need a device IO thread.
        SuspendThread(GetCurrentThread());
        return S_FALSE;
    }
    HRESULT CompleteIo(CD_IO_COMPLETE* const) const override
    {
        return S_FALSE;
    }
    HRESULT ReadInput(CD_IO_OPERATION* const) const override
    {
        SuspendThread(GetCurrentThread());
        return S_FALSE;
    }
    HRESULT WriteOutput(CD_IO_OPERATION* const) const override
    {
        return S_FALSE;
    }
    HRESULT AllowUIAccess() const override
    {
        return S_FALSE;
    }
    ULONG_PTR PutHandle(const void*) override
    {
        return 0;
    }
    void* GetHandle(ULONG_PTR) ...",1,host\ft_fuzzer\fuzzmain.cpp,NullDeviceComm,IDeviceComm,false,14,NullDeviceComm,1
327209,TYPE_DECL,,host\ft_host\API_AliasTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ft_host\API_AliasTests.cpp,host\ft_host\API_AliasTests.cpp:<global>,,false,1,<global>,4
327251,TYPE_DECL,,,,"class AliasTests
{
    BEGIN_TEST_CLASS(AliasTests)
    END_TEST_CLASS()

    BEGIN_TEST_METHOD(TestGetConsoleAlias)
        TEST_METHOD_PROPERTY(L""Data:strSource"", L""{g}"")
        TEST_METHOD_PROPERTY(L""Data:strExpectedTarget"", L""{cmd.exe /k echo foo}"")
        TEST_METHOD_PROPERTY(L""Data:strExeName"", L""{cmd.exe}"")
        TEST_METHOD_PROPERTY(L""Data:dwSource"", L""{0, 1}"")
        TEST_METHOD_PROPERTY(L""Data:dwTarget"", L""{0, 1, 2, 3, 4, 5, 6}"")
        TEST_METHOD_PROPERTY(L""Data:dwExeName"", L""{0, 1}"")
        TEST_METHOD_PROPERTY(L""Data:bUnicode"", L""{FALSE, TRUE}"")
        TEST_METHOD_PROPERTY(L""Data:bSetFirst"", L""{FALSE, TRUE}"")
    END_TEST_METHOD()
}",1,host\ft_host\API_AliasTests.cpp,AliasTests,,false,35,AliasTests,1
327443,TYPE_DECL,,host\ft_host\API_AliasTestsHelpers.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ft_host\API_AliasTestsHelpers.hpp,host\ft_host\API_AliasTestsHelpers.hpp:<global>,,false,1,<global>,2
327947,TYPE_DECL,,host\ft_host\API_BufferTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ft_host\API_BufferTests.cpp,host\ft_host\API_BufferTests.cpp:<global>,,false,1,<global>,3
327951,TYPE_DECL,,,,"class BufferTests
{
    BEGIN_TEST_CLASS(BufferTests)
        TEST_CLASS_PROPERTY(L""IsolationLevel"", L""Method"")
    END_TEST_CLASS()

    TEST_METHOD(TestSetConsoleActiveScreenBufferInvalid);
    TEST_METHOD(TestCookedReadBufferReferenceCount);

    TEST_METHOD(TestCookedReadOnNonShareableScreenBuffer);

    BEGIN_TEST_METHOD(TestWritingInactiveScreenBuffer)
        TEST_METHOD_PROPERTY(L""Data:UseVtOutput"", L""{true, false}"")
    END_TEST_METHOD()

    TEST_METHOD(ScrollLargeBufferPerformance);

    TEST_METHOD(ChafaGifPerformance);
}",1,host\ft_host\API_BufferTests.cpp,BufferTests,,false,15,BufferTests,2
328970,TYPE_DECL,,host\ft_host\API_CursorTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ft_host\API_CursorTests.cpp,host\ft_host\API_CursorTests.cpp:<global>,,false,1,<global>,2
328973,TYPE_DECL,,,,"class CursorTests
{
    BEGIN_TEST_CLASS(CursorTests)
    END_TEST_CLASS()

    TEST_METHOD_SETUP(TestSetup);
    TEST_METHOD_CLEANUP(TestCleanup);

    BEGIN_TEST_METHOD(TestGetSetConsoleCursorInfo)
        // 0, max, boundaries, and a value in the middle
        TEST_METHOD_PROPERTY(L""Data:dwSize"", L""{0, 1, 50, 100, 101, 0xFFFFFFFF}"")
        // Both possible values
        TEST_METHOD_PROPERTY(L""Data:bVisible"", L""{TRUE, FALSE}"")
    END_TEST_METHOD()

    BEGIN_TEST_METHOD(TestSetConsoleCursorPosition)
        TEST_METHOD_PROPERTY(L""HostDestructive"", L""True"")
    END_TEST_METHOD()
}",1,host\ft_host\API_CursorTests.cpp,CursorTests,,false,10,CursorTests,1
329348,TYPE_DECL,,host\ft_host\API_DimensionsTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ft_host\API_DimensionsTests.cpp,host\ft_host\API_DimensionsTests.cpp:<global>,,false,1,<global>,3
329351,TYPE_DECL,,,,"class DimensionsTests
{
    BEGIN_TEST_CLASS(DimensionsTests)
    END_TEST_CLASS()

    TEST_METHOD_SETUP(TestSetup);
    TEST_METHOD_CLEANUP(TestCleanup);

    TEST_METHOD(TestGetLargestConsoleWindowSize);
    TEST_METHOD(TestGetConsoleScreenBufferInfoAndEx);

    BEGIN_TEST_METHOD(TestSetConsoleWindowInfo)
        // This needs to run in both absolute and relative modes.
        TEST_METHOD_PROPERTY(L""Data:bAbsolute"", L""{TRUE, FALSE}"")
    END_TEST_METHOD()

    BEGIN_TEST_METHOD(TestSetConsoleScreenBufferSize)
        // 0x1 = X, 0x2 = Y, 0x3 = Both
        TEST_METHOD_PROPERTY(L""Data:scaleChoices"", L""{1, 2, 3}"")
    END_TEST_METHOD()

    TEST_METHOD(TestZeroSizedConsoleScreenBuffers);
    TEST_METHOD(TestSetConsoleScreenBufferInfoEx);
}",1,host\ft_host\API_DimensionsTests.cpp,DimensionsTests,,false,19,DimensionsTests,1
330985,TYPE_DECL,,host\ft_host\API_FileTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ft_host\API_FileTests.cpp,host\ft_host\API_FileTests.cpp:<global>,,false,1,<global>,4
331089,TYPE_DECL,,,,"class FileTests
{
    // Method isolation level will completely close and re-open the OpenConsole session for every
    // TEST_METHOD below. This saves us the time of cleaning up the mode state and the contents of
    // the buffer and cursor position for each test. Launching a new OpenConsole is much quicker.
    BEGIN_TEST_CLASS(FileTests)
        TEST_CLASS_PROPERTY(L""IsolationLevel"", L""Method"")
    END_TEST_CLASS();

    TEST_METHOD(TestUtf8WriteFileInvalid);

    TEST_METHOD(TestWriteFileRaw);
    TEST_METHOD(TestWriteFileProcessed);

    BEGIN_TEST_METHOD(TestWriteFileWrapEOL)
        TEST_METHOD_PROPERTY(L""Data:fFlagOn"", L""{true, false}"")
    END_TEST_METHOD();

    BEGIN_TEST_METHOD(TestWriteFileVTProcessing)
        TEST_METHOD_PROPERTY(L""Data:fVtOn"", L""{true, false}"")
        TEST_METHOD_PROPERTY(L""Data:fProcessedOn"", L""{true, false}"")
    END_TEST_METHOD();

    BEGIN_TEST_METHOD(TestWriteFileDisableNewlineAutoReturn)
        TEST_METHOD_PROPERTY(L""Data:fDisableAutoRetur...",1,host\ft_host\API_FileTests.cpp,FileTests,,false,17,FileTests,1
333194,TYPE_DECL,,host\ft_host\API_FillOutputTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ft_host\API_FillOutputTests.cpp,host\ft_host\API_FillOutputTests.cpp:<global>,,false,1,<global>,2
333342,TYPE_DECL,,host\ft_host\API_FontTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ft_host\API_FontTests.cpp,host\ft_host\API_FontTests.cpp:<global>,,false,1,<global>,2
333355,TYPE_DECL,,,,"class FontTests
{
    BEGIN_TEST_CLASS(FontTests)
    END_TEST_CLASS()

    TEST_METHOD_SETUP(TestSetup);
    TEST_METHOD_CLEANUP(TestCleanup);

    BEGIN_TEST_METHOD(TestCurrentFontAPIsInvalid)
        TEST_METHOD_PROPERTY(L""Data:dwConsoleOutput"", L""{0, 1, 0xFFFFFFFF}"")
        TEST_METHOD_PROPERTY(L""Data:bMaximumWindow"", L""{TRUE, FALSE}"")
        TEST_METHOD_PROPERTY(L""Data:strOperation"", L""{Get, GetEx, SetEx}"")
    END_TEST_METHOD();

    BEGIN_TEST_METHOD(TestGetFontSizeInvalid)
        TEST_METHOD_PROPERTY(L""Data:dwConsoleOutput"", L""{0, 0xFFFFFFFF}"")
    END_TEST_METHOD();

    TEST_METHOD(TestGetFontSizeLargeIndexInvalid);
    TEST_METHOD(TestSetConsoleFontNegativeSize);

    TEST_METHOD(TestFontScenario);
    TEST_METHOD(TestLongFontNameScenario);

    TEST_METHOD(TestSetFontAdjustsWindow);
}",1,host\ft_host\API_FontTests.cpp,FontTests,,false,14,FontTests,5
334408,TYPE_DECL,,host\ft_host\API_InputTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ft_host\API_InputTests.cpp,host\ft_host\API_InputTests.cpp:<global>,,false,1,<global>,4
334440,TYPE_DECL,,,,"class InputTests
{
    BEGIN_TEST_CLASS(InputTests)
    END_TEST_CLASS()

    TEST_CLASS_SETUP(TestSetup);
    TEST_CLASS_CLEANUP(TestCleanup);

    // note: GetNumberOfConsoleMouseButtons crashes with nullptr, so there's no negative test
    TEST_METHOD(TestGetMouseButtonsValid);

    TEST_METHOD(TestInputScenario);
    TEST_METHOD(TestFlushValid);
    TEST_METHOD(TestFlushInvalid);
    TEST_METHOD(TestPeekConsoleInvalid);
    TEST_METHOD(TestReadConsoleInvalid);
    TEST_METHOD(TestWriteConsoleInvalid);

    TEST_METHOD(TestReadWaitOnHandle);

    TEST_METHOD(TestReadConsolePasswordScenario);

    TEST_METHOD(TestMouseWheelReadConsoleMouseInput);
    TEST_METHOD(TestMouseHorizWheelReadConsoleMouseInput);
    TEST_METHOD(TestMouseWheelReadConsoleNoMouseInput);
    TEST_METHOD(TestMouseHorizWheelReadConsoleNoMouseInput);
    TEST_METHOD(TestMouseWheelReadConsoleInputQuickEdit);
    TEST_METHOD(TestMouseHorizWheelReadConsoleInputQuickEdit);
    TEST_METHOD(RawReadUnpacksCoalescedInpu...",1,host\ft_host\API_InputTests.cpp,InputTests,,false,24,InputTests,1
336327,TYPE_DECL,,host\ft_host\API_ModeTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ft_host\API_ModeTests.cpp,host\ft_host\API_ModeTests.cpp:<global>,,false,1,<global>,2
336330,TYPE_DECL,,,,"class ModeTests
{
    BEGIN_TEST_CLASS(ModeTests)
    END_TEST_CLASS()

    TEST_METHOD_SETUP(TestSetup);
    TEST_METHOD_CLEANUP(TestCleanup);

    TEST_METHOD(TestGetConsoleModeInvalid);
    TEST_METHOD(TestSetConsoleModeInvalid);

    TEST_METHOD(TestConsoleModeInputScenario);
    TEST_METHOD(TestConsoleModeScreenBufferScenario);
    TEST_METHOD(TestConsoleModeAcrossMultipleBuffers);

    TEST_METHOD(TestGetConsoleDisplayMode);

    TEST_METHOD(TestGetConsoleProcessList);
}",1,host\ft_host\API_ModeTests.cpp,ModeTests,,false,11,ModeTests,1
336888,TYPE_DECL,,host\ft_host\API_MultipleInflightMessageTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ft_host\API_MultipleInflightMessageTests.cpp,host\ft_host\API_MultipleInflightMessageTests.cpp:<global>,,false,1,<global>,2
336891,TYPE_DECL,,,,"class MultipleInflightMessageTests
{
    BEGIN_TEST_CLASS(MultipleInflightMessageTests)
    END_TEST_CLASS()

    // This test is intended to make sure that we do not regress after the _handlePostCharInputLoop fix in OpenConsole:c0ab9cb5b
    TEST_METHOD(WriteWhileReadingInputCrash)
    {
        BEGIN_TEST_METHOD_PROPERTIES()
            TEST_METHOD_PROPERTY(L""IsolationLevel"", L""Method"") // Don't pollute other tests by isolating our potential crash and buffer resizing to this test.
        END_TEST_METHOD_PROPERTIES()

        // OneCore systems can't adjust the window/buffer size, so we'll skip making it smaller.
        // On Desktop systems, make it smaller so the test runs faster.
        if (!OneCoreDelay::IsIsWindowPresent())
        {
            Log::Comment(L""This scenario requires a large buffer size, which OneCore does not provide."");
            Log::Result(WEX::Logging::TestResults::Skipped);
            return;
        }

        using namespace std::string_view_liter...",1,host\ft_host\API_MultipleInflightMessageTests.cpp,MultipleInflightMessageTests,,false,8,MultipleInflightMessageTests,1
336917,TYPE_DECL,,host\ft_host\API_OutputTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ft_host\API_OutputTests.cpp,host\ft_host\API_OutputTests.cpp:<global>,,false,1,<global>,6
336944,TYPE_DECL,,,,"class OutputTests
{
    BEGIN_TEST_CLASS(OutputTests)
        TEST_CLASS_PROPERTY(L""IsolationLevel"", L""Method"")
    END_TEST_CLASS()

    TEST_CLASS_SETUP(TestSetup);
    TEST_CLASS_CLEANUP(TestCleanup);

    TEST_METHOD(BasicReadConsoleOutputATest);
    TEST_METHOD(BasicReadConsoleOutputWTest);

    TEST_METHOD(BasicWriteConsoleOutputWTest);
    TEST_METHOD(BasicWriteConsoleOutputATest);

    TEST_METHOD(WriteConsoleOutputWOutsideBuffer);
    TEST_METHOD(WriteConsoleOutputWWithClipping);
    TEST_METHOD(WriteConsoleOutputWNegativePositions);

    TEST_METHOD(ReadConsoleOutputWOutsideBuffer);
    TEST_METHOD(ReadConsoleOutputWWithClipping);
    TEST_METHOD(ReadConsoleOutputWNegativePositions);
    TEST_METHOD(ReadConsoleOutputWPartialUserBuffer);

    TEST_METHOD(WriteConsoleOutputCharacterWRunoff);

    TEST_METHOD(WriteConsoleOutputAttributeSimpleTest);
    TEST_METHOD(WriteConsoleOutputAttributeCheckerTest);

    TEST_METHOD(WriteBackspaceTest);

    TEST_METHOD(WinPtyWrite);
}",1,host\ft_host\API_OutputTests.cpp,OutputTests,,false,17,OutputTests,1
341122,TYPE_DECL,,host\ft_host\API_PolicyTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ft_host\API_PolicyTests.cpp,host\ft_host\API_PolicyTests.cpp:<global>,,false,1,<global>,2
341125,TYPE_DECL,,,,"class PolicyTests
{
    BEGIN_TEST_CLASS(PolicyTests)
    END_TEST_CLASS()

// UAP test type doesn't work quite right in VSO, skip. We'll get it in the RI-TP internally.
#ifdef __INSIDE_WINDOWS
    BEGIN_TEST_METHOD(WrongWayVerbsUAP)
        TEST_METHOD_PROPERTY(L""RunAs"", L""UAP"")
        TEST_METHOD_PROPERTY(L""UAP:AppxManifest"", L""MUA"")
    END_TEST_METHOD();
#endif

    BEGIN_TEST_METHOD(WrongWayVerbsUser)
        TEST_METHOD_PROPERTY(L""RunAs"", L""User"")
    END_TEST_METHOD();
}",1,host\ft_host\API_PolicyTests.cpp,PolicyTests,,false,9,PolicyTests,1
341146,TYPE_DECL,,host\ft_host\API_RgbColorTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ft_host\API_RgbColorTests.cpp,host\ft_host\API_RgbColorTests.cpp:<global>,,false,1,<global>,2
341184,TYPE_DECL,TEST_METHOD,,,"class RgbColorTests
{
    BEGIN_TEST_CLASS(RgbColorTests)
    END_TEST_CLASS()

    TEST_METHOD_SETUP(MethodSetup)
    {
        g_hOut = GetStdHandle(STD_OUTPUT_HANDLE);
        DWORD outMode;
        VERIFY_WIN32_BOOL_SUCCEEDED(GetConsoleMode(g_hOut, &outMode));
        outMode |= ENABLE_VIRTUAL_TERMINAL_PROCESSING | ENABLE_PROCESSED_OUTPUT;
        VERIFY_WIN32_BOOL_SUCCEEDED(SetConsoleMode(g_hOut, outMode));
        CONSOLE_SCREEN_BUFFER_INFOEX sbiex = { 0 };
        sbiex.cbSize = sizeof(sbiex);

        auto fSuccess = GetConsoleScreenBufferInfoEx(g_hOut, &sbiex);
        if (fSuccess)
        {
            sbiex.srWindow.Bottom++; // hack because the API is not good at roundtrip

            g_sbiex_backup = sbiex;

            // Set the Color table to a known color table
            sbiex.ColorTable[0] = RGB(0x0000, 0x0000, 0x0000);
            sbiex.ColorTable[1] = RGB(0x0000, 0x0000, 0x0080);
            sbiex.ColorTable[2] = RGB(0x0000, 0x0080, 0x0000);
            sbiex...",1,host\ft_host\API_RgbColorTests.cpp,RgbColorTests,,false,20,RgbColorTests,17
342587,TYPE_DECL,,host\ft_host\API_TitleTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ft_host\API_TitleTests.cpp,host\ft_host\API_TitleTests.cpp:<global>,,false,1,<global>,2
342590,TYPE_DECL,,,,"class TitleTests
{
    BEGIN_TEST_CLASS(TitleTests)
    END_TEST_CLASS()

    TEST_METHOD_SETUP(TestSetup);
    TEST_METHOD_CLEANUP(TestCleanup);

    TEST_METHOD(TestGetConsoleTitleA);
    TEST_METHOD(TestGetConsoleTitleW);
}",1,host\ft_host\API_TitleTests.cpp,TitleTests,,false,11,TitleTests,1
343125,TYPE_DECL,,host\ft_host\CJK_DbcsTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ft_host\CJK_DbcsTests.cpp,host\ft_host\CJK_DbcsTests.cpp:<global>,,false,1,<global>,5
343170,TYPE_DECL,ANY,,,"using CharInfoPattern = std::array<CHAR_INFO, 16>;",1,host\ft_host\CJK_DbcsTests.cpp,CharInfoPattern,,false,30,CharInfoPattern,3
343182,TYPE_DECL,,,,"enum WriteMode
    {
        CrtWrite = 0,
        WriteConsoleOutputFunc = 1,
        WriteConsoleOutputCharacterFunc = 2,
        WriteConsoleFunc = 3
    }",5,host\ft_host\CJK_DbcsTests.cpp,DbcsWriteRead.WriteMode,,false,43,WriteMode,1
343203,TYPE_DECL,,,,"enum ReadMode
    {
        ReadConsoleOutputFunc = 0,
        ReadConsoleOutputCharacterFunc = 1
    }",5,host\ft_host\CJK_DbcsTests.cpp,DbcsWriteRead.ReadMode,,false,51,ReadMode,2
343216,TYPE_DECL,,,,"enum UnicodeMode
    {
        Ascii = 0,
        UnicodeSingle,
        UnicodeDoubled,
    }",5,host\ft_host\CJK_DbcsTests.cpp,DbcsWriteRead.UnicodeMode,,false,57,UnicodeMode,3
343278,TYPE_DECL,,,,"class DbcsTests
{
    BEGIN_TEST_CLASS(DbcsTests)
        TEST_CLASS_PROPERTY(L""IsolationLevel"", L""Class"")
    END_TEST_CLASS();

    TEST_METHOD_SETUP(DbcsTestSetup);

    // This test must come before ones that launch another process as launching another process can tamper with the codepage
    // in ways that this test is not expecting.
    TEST_METHOD(TestMultibyteInputRetrieval);
    TEST_METHOD(TestMultibyteInputCoalescing);

    BEGIN_TEST_METHOD(TestDbcsWriteRead)
        TEST_METHOD_PROPERTY(L""Data:fUseTrueTypeFont"", L""{true, false}"")
        TEST_METHOD_PROPERTY(L""Data:WriteMode"", L""{0, 1, 2, 3}"")
        TEST_METHOD_PROPERTY(L""Data:fWriteInUnicode"", L""{0, 1, 2}"")
        TEST_METHOD_PROPERTY(L""Data:ReadMode"", L""{0, 1}"")
        TEST_METHOD_PROPERTY(L""Data:fReadInUnicode"", L""{true, false}"")
    END_TEST_METHOD()

    TEST_METHOD(TestDbcsBisect);

    BEGIN_TEST_METHOD(TestDbcsBisectWriteCellsBeginW)
        TEST_METHOD_PROPERTY(L""IsolationLevel"", L""Method"")
    END_TEST_ME...",1,host\ft_host\CJK_DbcsTests.cpp,DbcsTests,,false,109,DbcsTests,9
346325,TYPE_DECL,,,,"struct MultibyteInputData
{
    PCWSTR pwszInputText;
    PCSTR pszExpectedText;
}",1,host\ft_host\CJK_DbcsTests.cpp,MultibyteInputData,,false,1758,MultibyteInputData,26
347735,TYPE_DECL,,host\ft_host\CanaryTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ft_host\CanaryTests.cpp,host\ft_host\CanaryTests.cpp:<global>,,false,1,<global>,2
347738,TYPE_DECL,,,,"class CanaryTests
{
    BEGIN_TEST_CLASS(CanaryTests)
    END_TEST_CLASS()

    TEST_METHOD(LaunchV1Console);
}",1,host\ft_host\CanaryTests.cpp,CanaryTests,,false,11,CanaryTests,1
348008,TYPE_DECL,,host\ft_host\Common.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ft_host\Common.cpp,host\ft_host\Common.cpp:<global>,,false,1,<global>,2
348500,TYPE_DECL,,host\ft_host\Common.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ft_host\Common.hpp,host\ft_host\Common.hpp:<global>,,false,1,<global>,2
348503,TYPE_DECL,,,,"class Common
{
public:
    static bool TestBufferSetup();
    static bool TestBufferCleanup();
    static HANDLE _hConsole;
    static bool _isV2;
}",1,host\ft_host\Common.hpp,Common,,false,22,Common,1
348514,TYPE_DECL,,,,"class CommonV1V2Helper
{
public:
    enum class ForceV2States : DWORD
    {
        V1 = 0,
        V2 = 1
    };

    CommonV1V2Helper(const ForceV2States ForceV2StateDesired);
    ~CommonV1V2Helper();

private:
    bool _fRestoreOnExit = false;
    DWORD _dwForceV2Original = 0;
    wil::unique_hkey _consoleKey;
}",1,host\ft_host\Common.hpp,CommonV1V2Helper,,false,31,CommonV1V2Helper,2
348515,TYPE_DECL,,,,"enum class ForceV2States : DWORD
    {
        V1 = 0,
        V2 = 1
    }",5,host\ft_host\Common.hpp,CommonV1V2Helper.ForceV2States,,false,34,ForceV2States,1
348662,TYPE_DECL,,host\ft_host\InitTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ft_host\InitTests.cpp,host\ft_host\InitTests.cpp:<global>,,false,1,<global>,2
348722,TYPE_DECL,,host\ft_host\Message_KeyPressTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ft_host\Message_KeyPressTests.cpp,host\ft_host\Message_KeyPressTests.cpp:<global>,,false,1,<global>,8
348725,TYPE_DECL,,,,"class KeyPressTests
{
    BEGIN_TEST_CLASS(KeyPressTests)
    END_TEST_CLASS()

    void TurnOffModifierKeys(HWND hwnd)
    {
        // these are taken from GetControlKeyState.
        static const WPARAM modifiers[8] = {
            VK_LMENU,
            VK_RMENU,
            VK_LCONTROL,
            VK_RCONTROL,
            VK_SHIFT,
            VK_NUMLOCK,
            VK_SCROLL,
            VK_CAPITAL
        };
        for (unsigned int i = 0; i < 8; ++i)
        {
            PostMessage(hwnd, CM_SET_KEY_STATE, modifiers[i], KEY_STATE_RELEASED);
        }
    }

    TEST_METHOD(TestContextMenuKey)
    {
        if (!OneCoreDelay::IsPostMessageWPresent())
        {
            Log::Comment(L""Injecting keys to the window message queue cannot be done on systems without a classic window message queue. Skipping."");
            Log::Result(WEX::Logging::TestResults::Skipped);
            return;
        }

        Log::Comment(L""Checks that the context menu key is correctly added to...",1,host\ft_host\Message_KeyPressTests.cpp,KeyPressTests,,false,30,KeyPressTests,1
349464,TYPE_DECL,,host\ft_host\OneCoreDelay.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ft_host\OneCoreDelay.cpp,host\ft_host\OneCoreDelay.cpp:<global>,,false,1,<global>,3
349547,TYPE_DECL,,host\ft_host\OneCoreDelay.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ft_host\OneCoreDelay.hpp,host\ft_host\OneCoreDelay.hpp:<global>,,false,1,<global>,2
349601,TYPE_DECL,,host\ft_host\precomp.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ft_host\precomp.cpp,host\ft_host\precomp.cpp:<global>,,false,1,<global>,2
349630,TYPE_DECL,,host\ft_host\precomp.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ft_host\precomp.hpp,host\ft_host\precomp.hpp:<global>,,false,1,<global>,13
349635,TYPE_DECL,,host\ft_host\resource.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ft_host\resource.hpp,host\ft_host\resource.hpp:<global>,,false,1,<global>,1
349644,TYPE_DECL,,host\ft_integrity\IntegrityTest.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ft_integrity\IntegrityTest.cpp,host\ft_integrity\IntegrityTest.cpp:<global>,,false,1,<global>,3
350311,TYPE_DECL,,host\ft_integrity\IntegrityTest.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ft_integrity\IntegrityTest.hpp,host\ft_integrity\IntegrityTest.hpp:<global>,,false,1,<global>,1
350316,TYPE_DECL,,,,"class IntegrityTest
{
public:
    BEGIN_TEST_CLASS(IntegrityTest)
        // We need each method to start it in its own console.
        TEST_CLASS_PROPERTY(L""IsolationLevel"", L""Method"")
    END_TEST_CLASS()

    TEST_CLASS_SETUP(ClassSetup)
    TEST_CLASS_CLEANUP(ClassCleanup)

    BEGIN_TEST_METHOD(TestLaunchLowILFromHigh)
        TEST_METHOD_PROPERTY(L""RunAs"", L""ElevatedUserOrSystem"")
    END_TEST_METHOD()

    BEGIN_TEST_METHOD(TestLaunchLowILFromMedium)
        TEST_METHOD_PROPERTY(L""RunAs"", L""RestrictedUser"")
    END_TEST_METHOD()

    BEGIN_TEST_METHOD(TestLaunchAppFromHigh)
        TEST_METHOD_PROPERTY(L""RunAs"", L""ElevatedUserOrSystem"")
    END_TEST_METHOD()

    BEGIN_TEST_METHOD(TestLaunchAppFromMedium)
        TEST_METHOD_PROPERTY(L""RunAs"", L""RestrictedUser"")
    END_TEST_METHOD()

    BEGIN_TEST_METHOD(TestLaunchAppAlone)
        TEST_METHOD_PROPERTY(L""RunAs"", L""RestrictedUser"")
    END_TEST_METHOD()

    static PCWSTR s_GetMyIntegrityLevel();
    static void s_LogMyInte...",1,host\ft_integrity\IntegrityTest.hpp,IntegrityTest,,false,14,IntegrityTest,3
350369,TYPE_DECL,,host\ft_integrity\precomp.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ft_integrity\precomp.hpp,host\ft_integrity\precomp.hpp:<global>,,false,1,<global>,15
350379,TYPE_DECL,,host\getset.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\getset.cpp,host\getset.cpp:<global>,,false,1,<global>,14
350779,TYPE_DECL,,host\getset.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\getset.hpp,host\getset.hpp:<global>,,false,1,<global>,2
350782,TYPE_DECL,,,,class SCREEN_INFORMATION,1,host\getset.hpp,SCREEN_INFORMATION,,false,19,SCREEN_INFORMATION,1
350798,TYPE_DECL,,host\globals.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\globals.cpp,host\globals.cpp:<global>,,false,1,<global>,5
350846,TYPE_DECL,,host\globals.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\globals.hpp,host\globals.hpp:<global>,,false,1,<global>,11
350850,TYPE_DECL,,,,"class Globals
{
public:
    Globals();

    UINT uiOEMCP = GetOEMCP();
    UINT uiWindowsCP = GetACP();
    HINSTANCE hInstance;
    UINT uiDialogBoxCount;

    ConsoleArguments launchArgs;

    CONSOLE_INFORMATION& getConsoleInformation();

    IDeviceComm* pDeviceComm{ nullptr };

    wil::unique_event_nothrow hInputEvent;

    int sVerticalScrollSize;
    int sHorizontalScrollSize;

    int dpi = USER_DEFAULT_SCREEN_DPI;
    ULONG cursorPixelWidth = 1;

    NTSTATUS ntstatusConsoleInputInitStatus;
    wil::unique_event_nothrow hConsoleInputInitEvent;
    DWORD dwInputThreadId;

    std::vector<wchar_t> WordDelimiters;

    Microsoft::Console::Render::Renderer* pRender;

    Microsoft::Console::Render::IFontDefaultList* pFontDefaultList;

    bool IsHeadless() const;

    IApiRoutines* api;

    bool handoffTarget = false;

    DelegationConfig::DelegationPair delegationPair;
    wil::unique_hfile handoffInboxConsoleHandle;
    wil::unique_threadpool_wait handoffInboxConsoleExitWa...",1,host\globals.hpp,Globals,,false,34,Globals,2
350927,TYPE_DECL,,host\handle.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\handle.cpp,host\handle.cpp:<global>,,false,1,<global>,4
350979,TYPE_DECL,,host\handle.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\handle.hpp,host\handle.hpp:<global>,,false,1,<global>,1
350997,TYPE_DECL,,host\history.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\history.cpp,host\history.cpp:<global>,,false,1,<global>,15
352369,TYPE_DECL,,host\history.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\history.hpp,host\history.hpp:<global>,,false,1,<global>,1
352372,TYPE_DECL,,,,"class CommandHistory
{
public:
    using Index = int32_t;
    static constexpr Index IndexMax = INT32_MAX;

    // CommandHistory Flags
    static constexpr int CLE_ALLOCATED = 0x00000001;
    static constexpr int CLE_RESET = 0x00000002;

    static CommandHistory* s_Allocate(const std::wstring_view appName, const HANDLE processHandle);
    static CommandHistory* s_Find(const HANDLE processHandle);
    static CommandHistory* s_FindByExe(const std::wstring_view appName);
    static void s_ReallocExeToFront(const std::wstring_view appName, const size_t commands);
    static void s_Free(const HANDLE processHandle);
    static void s_ResizeAll(const size_t commands);
    static size_t s_CountOfHistories();

    enum class MatchOptions
    {
        None = 0x0,
        ExactMatch = 0x1,
        JustLooking = 0x2
    };

    enum class SearchDirection
    {
        Previous,
        Next
    };

    bool FindMatchingCommand(const std::wstring_view command,
                             con...",1,host\history.hpp,CommandHistory,,false,6,CommandHistory,1
352373,TYPE_DECL,int32_t,,,using Index = int32_t;,5,host\history.hpp,Index,,false,9,Index,1
352413,TYPE_DECL,,,,"enum class MatchOptions
    {
        None = 0x0,
        ExactMatch = 0x1,
        JustLooking = 0x2
    }",5,host\history.hpp,CommandHistory.MatchOptions,,false,24,MatchOptions,12
352430,TYPE_DECL,,,,"enum class SearchDirection
    {
        Previous,
        Next
    }",5,host\history.hpp,CommandHistory.SearchDirection,,false,31,SearchDirection,13
352542,TYPE_DECL,,,,friend class HistoryTests,5,host\history.hpp,CommandHistory.HistoryTests,,false,92,HistoryTests,42
352577,TYPE_DECL,,host\init.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\init.cpp,host\init.cpp:<global>,,false,1,<global>,4
352730,TYPE_DECL,,host\init.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\init.hpp,host\init.hpp:<global>,,false,1,<global>,2
352752,TYPE_DECL,,host\input.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\input.cpp,host\input.cpp:<global>,,false,1,<global>,7
353548,TYPE_DECL,,host\input.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\input.hpp,host\input.hpp:<global>,,false,1,<global>,7
353559,TYPE_DECL,,,,"class INPUT_KEY_INFO
{
public:
    INPUT_KEY_INFO(const WORD wVirtualKeyCode, const ULONG ulControlKeyState);
    ~INPUT_KEY_INFO();

    const WORD GetVirtualKey() const;

    const bool IsCtrlPressed() const;
    const bool IsAltPressed() const;
    const bool IsShiftPressed() const;

    const bool IsCtrlOnly() const;
    const bool IsShiftOnly() const;
    const bool IsShiftAndCtrlOnly() const;
    const bool IsAltOnly() const;

    const bool HasNoModifiers() const;

private:
    WORD _wVirtualKeyCode;
    ULONG _ulControlKeyState;
}",1,host\input.hpp,INPUT_KEY_INFO,,false,37,INPUT_KEY_INFO,5
353673,TYPE_DECL,,host\inputBuffer.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\inputBuffer.cpp,host\inputBuffer.cpp:<global>,,false,1,<global>,9
354908,TYPE_DECL,,host\inputBuffer.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\inputBuffer.hpp,host\inputBuffer.hpp:<global>,,false,1,<global>,7
354914,TYPE_DECL,,,,class Renderer,5,host\inputBuffer.hpp,Microsoft.Console.Render.Renderer,,false,17,Renderer,1
354915,TYPE_DECL,,,,class VtEngine,5,host\inputBuffer.hpp,Microsoft.Console.Render.VtEngine,,false,18,VtEngine,2
354916,TYPE_DECL,,,,"class InputBuffer final : public ConsoleObjectHeader
{
public:
    DWORD InputMode;
    ConsoleWaitQueue WaitQueue; // formerly ReadWaitQueue
    bool fInComposition; // specifies if there's an ongoing text composition

    InputBuffer();

    // String oriented APIs
    void Consume(bool isUnicode, std::wstring_view& source, std::span<char>& target);
    void ConsumeCached(bool isUnicode, std::span<char>& target);
    void Cache(std::wstring_view source);
    // INPUT_RECORD oriented APIs
    size_t ConsumeCached(bool isUnicode, size_t count, InputEventQueue& target);
    size_t PeekCached(bool isUnicode, size_t count, InputEventQueue& target);
    void Cache(bool isUnicode, InputEventQueue& source, size_t expectedSourceSize);

    // storage API for partial dbcs bytes being written to the buffer
    bool IsWritePartialByteSequenceAvailable() const noexcept;
    const INPUT_RECORD& FetchWritePartialByteSequence() noexcept;
    void StoreWritePartialByteSequence(const INPUT_RECORD& ...",1,host\inputBuffer.hpp,InputBuffer,ConsoleObjectHeader,false,21,InputBuffer,2
355039,TYPE_DECL,,,,"enum class ReadingMode : uint8_t
    {
        StringA,
        StringW,
        InputEventsA,
        InputEventsW,
    }",5,host\inputBuffer.hpp,InputBuffer.ReadingMode,,false,69,ReadingMode,29
355081,TYPE_DECL,,,,friend class InputBufferTests,5,host\inputBuffer.hpp,InputBuffer.InputBufferTests,,false,103,InputBufferTests,47
355107,TYPE_DECL,,host\inputKeyInfo.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\inputKeyInfo.cpp,host\inputKeyInfo.cpp:<global>,,false,1,<global>,3
355226,TYPE_DECL,,host\inputReadHandleData.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\inputReadHandleData.cpp,host\inputReadHandleData.cpp:<global>,,false,1,<global>,3
355325,TYPE_DECL,,host\inputReadHandleData.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\inputReadHandleData.hpp,host\inputReadHandleData.hpp:<global>,,false,1,<global>,1
355328,TYPE_DECL,,,,"class INPUT_READ_HANDLE_DATA
{
public:
    INPUT_READ_HANDLE_DATA();

    ~INPUT_READ_HANDLE_DATA() = default;
    INPUT_READ_HANDLE_DATA(const INPUT_READ_HANDLE_DATA&) = delete;
    INPUT_READ_HANDLE_DATA(INPUT_READ_HANDLE_DATA&&) = delete;
    INPUT_READ_HANDLE_DATA& operator=(const INPUT_READ_HANDLE_DATA&) & = delete;
    INPUT_READ_HANDLE_DATA& operator=(INPUT_READ_HANDLE_DATA&&) & = delete;

    void IncrementReadCount();
    void DecrementReadCount();
    size_t GetReadCount();

    bool IsInputPending() const;
    bool IsMultilineInput() const;

    void SavePendingInput(std::wstring_view pending);
    void SaveMultilinePendingInput(std::wstring_view pending);
    void UpdatePending(std::wstring_view pending);
    void CompletePending();

    std::wstring_view GetPendingInput() const;

private:
    bool _isInputPending;
    bool _isMultilineInput;

    std::wstring _buffer;

    std::atomic<size_t> _readCount;
}",1,host\inputReadHandleData.hpp,INPUT_READ_HANDLE_DATA,,false,23,INPUT_READ_HANDLE_DATA,1
355418,TYPE_DECL,,host\misc.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\misc.cpp,host\misc.cpp:<global>,,false,1,<global>,7
355494,TYPE_DECL,,host\misc.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\misc.hpp,host\misc.hpp:<global>,,false,1,<global>,5
355511,TYPE_DECL,,host\ntprivapi.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ntprivapi.cpp,host\ntprivapi.cpp:<global>,,false,1,<global>,3
355515,TYPE_DECL,,,,"struct PROCESS_BASIC_INFORMATION_EXPANDED
    {
        NTSTATUS ExitStatus;
        PVOID PebBaseAddress;
        ULONG_PTR AffinityMask;
        LONG BasePriority;
        ULONG_PTR UniqueProcessId;
        ULONG_PTR InheritedFromUniqueProcessId;
    }",5,host\ntprivapi.cpp,anonymous_namespace_1.PROCESS_BASIC_INFORMATION_EXPANDED,,false,10,PROCESS_BASIC_INFORMATION_EXPANDED,1
355560,TYPE_DECL,,host\ntprivapi.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ntprivapi.hpp,host\ntprivapi.hpp:<global>,,false,1,<global>,2
355584,TYPE_DECL,,host\output.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\output.cpp,host\output.cpp:<global>,,false,1,<global>,10
356631,TYPE_DECL,,host\output.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\output.hpp,host\output.hpp:<global>,,false,1,<global>,5
356695,TYPE_DECL,,host\outputStream.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\outputStream.cpp,host\outputStream.cpp:<global>,,false,1,<global>,9
357449,TYPE_DECL,,host\outputStream.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\outputStream.hpp,host\outputStream.hpp:<global>,,false,1,<global>,5
357452,TYPE_DECL,,,,"class ConhostInternalGetSet final : public Microsoft::Console::VirtualTerminal::ITerminalApi
{
public:
    ConhostInternalGetSet(_In_ Microsoft::Console::IIoProvider& io);

    void ReturnResponse(const std::wstring_view response) override;

    Microsoft::Console::VirtualTerminal::StateMachine& GetStateMachine() override;
    TextBuffer& GetTextBuffer() override;
    til::rect GetViewport() const override;
    void SetViewportPosition(const til::point position) override;

    void SetTextAttributes(const TextAttribute& attrs) override;

    void SetSystemMode(const Mode mode, const bool enabled) override;
    bool GetSystemMode(const Mode mode) const override;

    void WarningBell() override;

    void SetWindowTitle(const std::wstring_view title) override;

    void UseAlternateScreenBuffer(const TextAttribute& attrs) override;

    void UseMainScreenBuffer() override;

    CursorType GetUserDefaultCursorStyle() const override;

    void ShowWindow(bool showOrHide) override;

   ...",1,host\outputStream.hpp,ConhostInternalGetSet,Microsoft.Console.VirtualTerminal.ITerminalApi,false,27,ConhostInternalGetSet,1
357604,TYPE_DECL,,host\precomp.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\precomp.cpp,host\precomp.cpp:<global>,,false,1,<global>,2
357673,TYPE_DECL,,host\precomp.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\precomp.hpp,host\precomp.hpp:<global>,,false,1,<global>,33
357692,TYPE_DECL,,host\readData.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\readData.cpp,host\readData.cpp:<global>,,false,1,<global>,3
357744,TYPE_DECL,,host\readData.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\readData.hpp,host\readData.hpp:<global>,,false,1,<global>,4
357747,TYPE_DECL,,,,class InputBuffer,1,host\readData.hpp,InputBuffer,,false,27,InputBuffer,1
357748,TYPE_DECL,,,,"class ReadData : public IWaitRoutine
{
public:
    ReadData(_In_ InputBuffer* const pInputBuffer,
             _In_ INPUT_READ_HANDLE_DATA* const pInputReadHandleData);

    ~ReadData() override;

    ReadData(ReadData&&);

    InputBuffer* GetInputBuffer() const;
    INPUT_READ_HANDLE_DATA* GetInputReadHandleData() const;

// TODO MSFT:11285829 this is a temporary kludge until the constructors are ironed
// out, so that we can still run the tests in the meantime.
#if UNIT_TESTING
    ReadData() :
        IWaitRoutine(ReplyDataType::Read),
        _pInputBuffer{ nullptr },
        _pInputReadHandleData{ nullptr }
    {
    }
#endif
protected:
    InputBuffer* _pInputBuffer;
    INPUT_READ_HANDLE_DATA* _pInputReadHandleData;
}",1,host\readData.hpp,ReadData,IWaitRoutine,false,29,ReadData,2
357784,TYPE_DECL,,host\readDataCooked.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\readDataCooked.cpp,host\readDataCooked.cpp:<global>,,false,1,<global>,9
361840,TYPE_DECL,,host\readDataCooked.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\readDataCooked.hpp,host\readDataCooked.hpp:<global>,,false,1,<global>,3
361843,TYPE_DECL,,,,"class COOKED_READ_DATA final : public ReadData
{
public:
    COOKED_READ_DATA(_In_ InputBuffer* pInputBuffer,
                     _In_ INPUT_READ_HANDLE_DATA* pInputReadHandleData,
                     SCREEN_INFORMATION& screenInfo,
                     _In_ size_t UserBufferSize,
                     _In_ char* UserBuffer,
                     _In_ ULONG CtrlWakeupMask,
                     _In_ std::wstring_view exeName,
                     _In_ std::wstring_view initialData,
                     _In_ ConsoleProcessHandle* pClientProcess);

    void MigrateUserBuffersOnTransitionToBackgroundWait(const void* oldBuffer, void* newBuffer) noexcept override;

    bool Notify(WaitTerminationReason TerminationReason,
                bool fIsUnicode,
                _Out_ NTSTATUS* pReplyStatus,
                _Out_ size_t* pNumBytes,
                _Out_ DWORD* pControlKeyState,
                _Out_ void* pOutputData) noexcept override;

    bool Read(bool isUnicode, size_t& numByt...",1,host\readDataCooked.hpp,COOKED_READ_DATA,ReadData,false,9,COOKED_READ_DATA,1
361886,TYPE_DECL,,,,"enum class State : uint8_t
    {
        Accumulating = 0,
        DoneWithWakeupMask,
        DoneWithCarriageReturn,
    }",5,host\readDataCooked.hpp,COOKED_READ_DATA.State,,false,45,State,13
361897,TYPE_DECL,,,,"struct BufferState
    {
        const std::wstring& Get() const noexcept;
        std::wstring Extract() noexcept
        {
            return std::move(_buffer);
        }
        void Replace(size_t offset, size_t remove, const wchar_t* input, size_t count);
        void Replace(const std::wstring_view& str);

        size_t GetCursorPosition() const noexcept;
        void SetCursorPosition(size_t pos) noexcept;

        bool IsClean() const noexcept;
        void MarkEverythingDirty() noexcept;
        void MarkAsClean() noexcept;

        std::wstring_view GetUnmodifiedTextBeforeCursor() const noexcept;
        std::wstring_view GetUnmodifiedTextAfterCursor() const noexcept;
        std::wstring_view GetModifiedTextBeforeCursor() const noexcept;
        std::wstring_view GetModifiedTextAfterCursor() const noexcept;

    private:
        std::wstring_view _slice(size_t from, size_t to) const noexcept;

        std::wstring _buffer;
        size_t _dirtyBeg = npos;
        size_t...",5,host\readDataCooked.hpp,COOKED_READ_DATA.BufferState,,false,54,BufferState,14
361981,TYPE_DECL,,,,"enum class PopupKind
    {
        // Copies text from the previous command between the current cursor position and the first instance
        // of a given char (but not including it) into the current prompt line at the current cursor position.
        // Basically, F3 and this prompt have identical behavior, but the prompt searches for a terminating character.
        //
        // Let's say your last command was:
        //   echo hello
        // And you type the following with the cursor at ""^"":
        //   echo abcd efgh
        //       ^
        // Then this command, given the char ""o"" will turn it into
        //   echo hell efgh
        CopyToChar,
        // Erases text between the current cursor position and the first instance of a given char (but not including it).
        // It's unknown to me why this is was historically called ""copy from char"" as it conhost never copied anything.
        CopyFromChar,
        // Let's you choose to replace the current prompt with on...",5,host\readDataCooked.hpp,COOKED_READ_DATA.PopupKind,,false,84,PopupKind,15
361986,TYPE_DECL,,,,"struct Popup
    {
        PopupKind kind;

        // The inner rectangle of the popup, excluding the border that we draw.
        // In absolute TextBuffer coordinates.
        til::rect contentRect;
        // The area we've backed up and need to restore when we dismiss the popup.
        // It'll practically always be 1 larger than contentRect in all 4 directions.
        Microsoft::Console::Types::Viewport backupRect;
        // The backed up buffer contents. Uses CHAR_INFO for convenience.
        std::vector<CHAR_INFO> backup;

        // Using a std::variant would be preferable in modern C++ but is practically equally annoying to use.
        union
        {
            // Used by PopupKind::CommandNumber
            struct
            {
                // Keep 1 char space for the trailing \0 char.
                std::array<wchar_t, CommandNumberMaxInputLength + 1> buffer;
                uint8_t bufferSize;
            } commandNumber;

            // Used by PopupKind::C...",5,host\readDataCooked.hpp,COOKED_READ_DATA.Popup,,false,108,Popup,16
361991,TYPE_DECL,,,,"union
        {
            // Used by PopupKind::CommandNumber
            struct
            {
                // Keep 1 char space for the trailing \0 char.
                std::array<wchar_t, CommandNumberMaxInputLength + 1> buffer;
                uint8_t bufferSize;
            } commandNumber;

            // Used by PopupKind::CommandList
            struct
            {
                // Command history index of the first row we draw in the popup.
                CommandHistory::Index top;
                // Command history index of the currently selected row.
                CommandHistory::Index selected;
                // Tracks the part of the popup that has previously been drawn and needs to be redrawn in the next paint.
                // This becomes relevant when the length of the history changes while the popup is open (= when deleting entries).
                til::CoordType dirtyHeight;
            } commandList;
        }",9,host\readDataCooked.hpp,COOKED_READ_DATA.Popup.anonymous_composite_type_0,,false,122,COOKED_READ_DATA.Popup.anonymous_composite_type_0,5
361992,TYPE_DECL,commandNumber,,,"struct
            {
                // Keep 1 char space for the trailing \0 char.
                std::array<wchar_t, CommandNumberMaxInputLength + 1> buffer;
                uint8_t bufferSize;
            }",13,host\readDataCooked.hpp,COOKED_READ_DATA.Popup.anonymous_composite_type_1.commandNumber,,false,125,COOKED_READ_DATA.Popup.anonymous_composite_type_1.commandNumber,1
361996,TYPE_DECL,commandList,,,"struct
            {
                // Command history index of the first row we draw in the popup.
                CommandHistory::Index top;
                // Command history index of the currently selected row.
                CommandHistory::Index selected;
                // Tracks the part of the popup that has previously been drawn and needs to be redrawn in the next paint.
                // This becomes relevant when the length of the history changes while the popup is open (= when deleting entries).
                til::CoordType dirtyHeight;
            }",13,host\readDataCooked.hpp,COOKED_READ_DATA.Popup.anonymous_composite_type_2.commandList,,false,133,COOKED_READ_DATA.Popup.anonymous_composite_type_2.commandList,3
362219,TYPE_DECL,,host\readDataDirect.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\readDataDirect.cpp,host\readDataDirect.cpp:<global>,,false,1,<global>,6
362242,TYPE_DECL,,host\readDataDirect.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\readDataDirect.hpp,host\readDataDirect.hpp:<global>,,false,1,<global>,5
362245,TYPE_DECL,,,,"class DirectReadData final : public ReadData
{
public:
    DirectReadData(_In_ InputBuffer* const pInputBuffer,
                   _In_ INPUT_READ_HANDLE_DATA* const pInputReadHandleData,
                   const size_t eventReadCount);

    DirectReadData(DirectReadData&&) = default;

    void MigrateUserBuffersOnTransitionToBackgroundWait(const void* oldBuffer, void* newBuffer) override;
    bool Notify(const WaitTerminationReason TerminationReason,
                const bool fIsUnicode,
                _Out_ NTSTATUS* const pReplyStatus,
                _Out_ size_t* const pNumBytes,
                _Out_ DWORD* const pControlKeyState,
                _Out_ void* const pOutputData) override;

private:
    const size_t _eventReadCount;
    InputEventQueue _outEvents;
}",1,host\readDataDirect.hpp,DirectReadData,ReadData,false,31,DirectReadData,1
362275,TYPE_DECL,,host\readDataRaw.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\readDataRaw.cpp,host\readDataRaw.cpp:<global>,,false,1,<global>,7
362308,TYPE_DECL,,host\readDataRaw.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\readDataRaw.hpp,host\readDataRaw.hpp:<global>,,false,1,<global>,2
362311,TYPE_DECL,,,,"class RAW_READ_DATA final : public ReadData
{
public:
    RAW_READ_DATA(_In_ InputBuffer* const pInputBuffer,
                  _In_ INPUT_READ_HANDLE_DATA* const pInputReadHandleData,
                  const size_t BufferSize,
                  _In_ WCHAR* const BufPtr);

    ~RAW_READ_DATA() override;

    RAW_READ_DATA(RAW_READ_DATA&&) = default;

    void MigrateUserBuffersOnTransitionToBackgroundWait(const void* oldBuffer, void* newBuffer) override;
    bool Notify(const WaitTerminationReason TerminationReason,
                const bool fIsUnicode,
                _Out_ NTSTATUS* const pReplyStatus,
                _Out_ size_t* const pNumBytes,
                _Out_ DWORD* const pControlKeyState,
                _Out_ void* const pOutputData) override;

private:
    size_t _BufferSize;
    PWCHAR _BufPtr;
}",1,host\readDataRaw.hpp,RAW_READ_DATA,ReadData,false,28,RAW_READ_DATA,1
362343,TYPE_DECL,,host\registry.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\registry.cpp,host\registry.cpp:<global>,,false,1,<global>,6
362401,TYPE_DECL,,host\registry.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\registry.hpp,host\registry.hpp:<global>,,false,1,<global>,2
362404,TYPE_DECL,,,,"class Registry
{
public:
    Registry(_In_ Settings* const pSettings);
    ~Registry();

    void LoadGlobalsFromRegistry();
    void LoadDefaultFromRegistry();
    void LoadFromRegistry(_In_ PCWSTR const pwszConsoleTitle);

    void GetEditKeys(_In_opt_ HKEY hConsoleKey) const;

private:
    void _LoadMappedProperties(_In_reads_(cPropertyMappings) const RegistrySerialization::RegPropertyMap* const rgPropertyMappings,
                               const size_t cPropertyMappings,
                               const HKEY hKey);

    Settings* const _pSettings;
}",1,host\registry.hpp,Registry,,false,23,Registry,1
362434,TYPE_DECL,,host\renderData.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\renderData.cpp,host\renderData.cpp:<global>,,false,1,<global>,6
363077,TYPE_DECL,,host\renderData.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\renderData.hpp,host\renderData.hpp:<global>,,false,1,<global>,2
363080,TYPE_DECL,,,,"class RenderData final :
    public Microsoft::Console::Render::IRenderData
{
public:
    Microsoft::Console::Types::Viewport GetViewport() noexcept override;
    til::point GetTextBufferEndPosition() const noexcept override;
    const TextBuffer& GetTextBuffer() const noexcept override;
    const FontInfo& GetFontInfo() const noexcept override;

    std::vector<Microsoft::Console::Types::Viewport> GetSelectionRects() noexcept override;

    void LockConsole() noexcept override;
    void UnlockConsole() noexcept override;

    til::point GetCursorPosition() const noexcept override;
    bool IsCursorVisible() const noexcept override;
    bool IsCursorOn() const noexcept override;
    ULONG GetCursorHeight() const noexcept override;
    CursorType GetCursorStyle() const noexcept override;
    ULONG GetCursorPixelWidth() const noexcept override;
    bool IsCursorDoubleWidth() const override;

    const std::vector<Microsoft::Console::Render::RenderOverlay> GetOverlays() const noexcept ...",1,host\renderData.hpp,RenderData,Microsoft.Console.Render.IRenderData,false,19,RenderData,1
363207,TYPE_DECL,,host\renderFontDefaults.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\renderFontDefaults.cpp,host\renderFontDefaults.cpp:<global>,,false,1,<global>,3
363233,TYPE_DECL,,host\renderFontDefaults.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\renderFontDefaults.hpp,host\renderFontDefaults.hpp:<global>,,false,1,<global>,2
363239,TYPE_DECL,,host\resource.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\resource.hpp,host\resource.hpp:<global>,,false,1,<global>,1
363270,TYPE_DECL,,host\screenInfo.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\screenInfo.cpp,host\screenInfo.cpp:<global>,,false,1,<global>,14
367072,TYPE_DECL,,host\screenInfo.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\screenInfo.hpp,host\screenInfo.hpp:<global>,,false,1,<global>,21
367075,TYPE_DECL,,,,class ConversionAreaInfo,1,host\screenInfo.hpp,ConversionAreaInfo,,false,48,ConversionAreaInfo,1
367076,TYPE_DECL,,,,"class SCREEN_INFORMATION : public ConsoleObjectHeader, public Microsoft::Console::IIoProvider
{
public:
    [[nodiscard]] static NTSTATUS CreateInstance(_In_ til::size coordWindowSize,
                                                 const FontInfo fontInfo,
                                                 _In_ til::size coordScreenBufferSize,
                                                 const TextAttribute defaultAttributes,
                                                 const TextAttribute popupAttributes,
                                                 const UINT uiCursorSize,
                                                 _Outptr_ SCREEN_INFORMATION** const ppScreen);

    ~SCREEN_INFORMATION();

    void GetScreenBufferInformation(_Out_ til::size* pcoordSize,
                                    _Out_ til::point* pcoordCursorPosition,
                                    _Out_ til::inclusive_rect* psrWindow,
                                    _Out_ PWORD pwAttributes,
 ...",1,host\screenInfo.hpp,SCREEN_INFORMATION,ConsoleObjectHeader;Microsoft.Console.IIoProvider,false,58,SCREEN_INFORMATION,2
367147,TYPE_DECL,,,,"struct ScrollBarState
    {
        til::size maxSize;
        til::rect viewport;
        bool isAltBuffer = false;
    }",5,host\screenInfo.hpp,SCREEN_INFORMATION.ScrollBarState,,false,102,ScrollBarState,19
367487,TYPE_DECL,,,,friend class TextBufferIteratorTests,5,host\screenInfo.hpp,SCREEN_INFORMATION.TextBufferIteratorTests,,false,299,TextBufferIteratorTests,115
367488,TYPE_DECL,,,,friend class ScreenBufferTests,5,host\screenInfo.hpp,SCREEN_INFORMATION.ScreenBufferTests,,false,300,ScreenBufferTests,116
367489,TYPE_DECL,,,,friend class CommonState,5,host\screenInfo.hpp,SCREEN_INFORMATION.CommonState,,false,301,CommonState,117
367490,TYPE_DECL,,,,friend class ConptyOutputTests,5,host\screenInfo.hpp,SCREEN_INFORMATION.ConptyOutputTests,,false,302,ConptyOutputTests,118
367491,TYPE_DECL,,,,friend class TerminalCoreUnitTests::ConptyRoundtripTests,5,host\screenInfo.hpp,SCREEN_INFORMATION.ConptyRoundtripTests,,false,303,ConptyRoundtripTests,119
367514,TYPE_DECL,,host\scrolling.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\scrolling.cpp,host\scrolling.cpp:<global>,,false,1,<global>,5
368065,TYPE_DECL,,host\scrolling.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\scrolling.hpp,host\scrolling.hpp:<global>,,false,1,<global>,2
368068,TYPE_DECL,,,,"class Scrolling
{
public:
    static void s_UpdateSystemMetrics();

    // legacy methods (not refactored yet)
    static bool s_IsInScrollMode();
    static void s_DoScroll();
    static void s_ClearScroll();
    static void s_ScrollIfNecessary(const SCREEN_INFORMATION& ScreenInfo);
    static void s_HandleMouseWheel(_In_ bool isMouseWheel,
                                   _In_ bool isMouseHWheel,
                                   _In_ short wheelDelta,
                                   _In_ bool hasShift,
                                   SCREEN_INFORMATION& ScreenInfo);
    static bool s_HandleKeyScrollingEvent(const INPUT_KEY_INFO* const pKeyInfo);

private:
    static BOOL s_IsPointInRectangle(const til::rect* prc, const til::point pt);

    static til::CoordType s_ucWheelScrollLines;
    static til::CoordType s_ucWheelScrollChars;
}",1,host\scrolling.hpp,Scrolling,,false,24,Scrolling,1
368116,TYPE_DECL,,host\selection.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\selection.cpp,host\selection.cpp:<global>,,false,1,<global>,6
369026,TYPE_DECL,,host\selection.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\selection.hpp,host\selection.hpp:<global>,,false,1,<global>,4
369029,TYPE_DECL,,,,"class Selection
{
public:
    ~Selection() = default;

    std::vector<til::inclusive_rect> GetSelectionRects() const;

    void ShowSelection();
    void HideSelection();

    static Selection& Instance();

    // Key selection generally refers to ""mark mode"" selection where
    // the cursor is present and used to navigate 100% with the
    // keyboard.
    //
    // Mouse selection means either the block or line mode selection
    // usually initiated by the mouse.
    //
    // However, Mouse mode can also mean initiated with our
    // shift+directional commands as no block cursor is required for
    // navigation.

    void InitializeMarkSelection();
    void InitializeMouseSelection(const til::point coordBufferPos);

    void SelectNewRegion(const til::point coordStart, const til::point coordEnd);
    void SelectAll();

    void ExtendSelection(_In_ til::point coordBufferPos);
    void AdjustSelection(const til::point coordSelectionStart, const til::point coordSelectionEnd);
...",1,host\selection.hpp,Selection,,false,26,Selection,1
369129,TYPE_DECL,,,,"enum class KeySelectionEventResult
    {
        EventHandled,
        EventNotHandled,
        CopyToClipboard
    }",5,host\selection.hpp,Selection.KeySelectionEventResult,,false,87,KeySelectionEventResult,23
369268,TYPE_DECL,,,,friend class SelectionTests,5,host\selection.hpp,Selection.SelectionTests,,false,180,SelectionTests,63
369269,TYPE_DECL,,,,friend class SelectionInputTests,5,host\selection.hpp,Selection.SelectionInputTests,,false,181,SelectionInputTests,64
369270,TYPE_DECL,,,,friend class ClipboardTests,5,host\selection.hpp,Selection.ClipboardTests,,false,182,ClipboardTests,65
369281,TYPE_DECL,,host\selectionInput.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\selectionInput.cpp,host\selectionInput.cpp:<global>,,false,1,<global>,5
370906,TYPE_DECL,,host\selectionState.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\selectionState.cpp,host\selectionState.cpp:<global>,,false,1,<global>,4
371224,TYPE_DECL,,host\server.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\server.hpp,host\server.hpp:<global>,,false,1,<global>,13
371227,TYPE_DECL,,,,class COOKED_READ_DATA,1,host\server.hpp,COOKED_READ_DATA,,false,71,COOKED_READ_DATA,1
371228,TYPE_DECL,,,,class CommandHistory,1,host\server.hpp,CommandHistory,,false,72,CommandHistory,2
371229,TYPE_DECL,,,,"class CONSOLE_INFORMATION :
    public Settings,
    public Microsoft::Console::IIoProvider
{
public:
    CONSOLE_INFORMATION() = default;
    CONSOLE_INFORMATION(const CONSOLE_INFORMATION& c) = delete;
    CONSOLE_INFORMATION& operator=(const CONSOLE_INFORMATION& c) = delete;

    ConsoleProcessList ProcessHandleList;
    InputBuffer* pInputBuffer = nullptr;

    SCREEN_INFORMATION* ScreenBuffers = nullptr; // singly linked list
    ConsoleWaitQueue OutputQueue;

    DWORD Flags = 0;

    // the following fields are used for ansi-unicode translation
    UINT CP = 0;
    UINT OutputCP = 0;

    ULONG CtrlFlags = 0; // indicates outstanding ctrl requests
    ULONG LimitingProcessId = 0;

    CPINFO CPInfo = {};
    CPINFO OutputCPInfo = {};

    ConsoleImeInfo ConsoleIme;

    void LockConsole() noexcept;
    void UnlockConsole() noexcept;
    til::recursive_ticket_lock_suspension SuspendLock() noexcept;
    bool IsConsoleLocked() const noexcept;
    ULONG GetCSRecursionCount() const...",1,host\server.hpp,CONSOLE_INFORMATION,Settings;Microsoft.Console.IIoProvider,false,74,CONSOLE_INFORMATION,3
371369,TYPE_DECL,,,,friend class SCREEN_INFORMATION,5,host\server.hpp,CONSOLE_INFORMATION.SCREEN_INFORMATION,,false,140,SCREEN_INFORMATION,43
371370,TYPE_DECL,,,,friend class CommonState,5,host\server.hpp,CONSOLE_INFORMATION.CommonState,,false,141,CommonState,44
371452,TYPE_DECL,,host\settings.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\settings.cpp,host\settings.cpp:<global>,,false,1,<global>,5
373051,TYPE_DECL,,host\settings.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\settings.hpp,host\settings.hpp:<global>,,false,1,<global>,3
373058,TYPE_DECL,,,,"enum class UseDx : DWORD
{
    Disabled = 0,
    DxEngine,
    AtlasEngine,
}",1,host\settings.hpp,UseDx,,false,27,UseDx,3
373069,TYPE_DECL,,,,"class Settings
{
    using RenderSettings = Microsoft::Console::Render::RenderSettings;

public:
    Settings();

    void ApplyDesktopSpecificDefaults();

    void ApplyStartupInfo(const Settings* const pStartupSettings);
    void ApplyCommandlineArguments(const ConsoleArguments& consoleArgs);
    void InitFromStateInfo(_In_ PCONSOLE_STATE_INFO pStateInfo);
    void Validate();

    CONSOLE_STATE_INFO CreateConsoleStateInfo() const;

    RenderSettings& GetRenderSettings() noexcept { return _renderSettings; };
    const RenderSettings& GetRenderSettings() const noexcept { return _renderSettings; };

    DWORD GetDefaultVirtTermLevel() const;
    void SetDefaultVirtTermLevel(const DWORD dwVirtTermLevel);

    bool IsAltF4CloseAllowed() const;
    void SetAltF4CloseAllowed(const bool fAllowAltF4Close);

    bool GetFilterOnPaste() const;
    void SetFilterOnPaste(const bool fFilterOnPaste);

    const std::wstring_view GetLaunchFaceName() const;
    void SetLaunchFaceName(const std::...",1,host\settings.hpp,Settings,,false,34,Settings,4
373070,TYPE_DECL,ANY,,,using RenderSettings = Microsoft::Console::Render::RenderSettings;,5,host\settings.hpp,RenderSettings,,false,36,RenderSettings,1
373545,TYPE_DECL,,,,friend class RegistrySerialization,5,host\settings.hpp,Settings.RegistrySerialization,,false,234,RegistrySerialization,140
373594,TYPE_DECL,,host\srvinit.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\srvinit.cpp,host\srvinit.cpp:<global>,,false,1,<global>,21
374102,TYPE_DECL,,host\srvinit.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\srvinit.hpp,host\srvinit.hpp:<global>,,false,1,<global>,2
374144,TYPE_DECL,,host\stream.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\stream.cpp,host\stream.cpp:<global>,,false,1,<global>,10
374406,TYPE_DECL,,host\stream.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\stream.hpp,host\stream.hpp:<global>,,false,1,<global>,4
374440,TYPE_DECL,,host\telemetry.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\telemetry.cpp,host\telemetry.cpp:<global>,,false,1,<global>,8
375603,TYPE_DECL,,host\telemetry.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\telemetry.hpp,host\telemetry.hpp:<global>,,false,1,<global>,2
375606,TYPE_DECL,,,,"class Telemetry
{
public:
    // Implement this as a singleton class.
    static Telemetry& Instance()
    {
        static Telemetry s_Instance;
        return s_Instance;
    }

    void SetUserInteractive();
    void SetWindowSizeChanged();
    void SetContextMenuUsed();
    void SetKeyboardTextSelectionUsed();
    void SetKeyboardTextEditingUsed();
    void SetCtrlPgUpPgDnUsed();
    void LogCtrlShiftCProcUsed();
    void LogCtrlShiftCRawUsed();
    void LogCtrlShiftVProcUsed();
    void LogCtrlShiftVRawUsed();
    void LogQuickEditCopyProcUsed();
    void LogQuickEditCopyRawUsed();
    void LogQuickEditPasteProcUsed();
    void LogQuickEditPasteRawUsed();
    void LogColorSelectionUsed();

    void LogProcessConnected(const HANDLE hProcess);
    void WriteFinalTraceLog();

    void LogRipMessage(_In_z_ const char* pszMessage, ...) const;

    bool IsUserInteractive();

    // Names are from the external API call names.  Note that some names can be different
    // than the inte...",1,host\telemetry.hpp,Telemetry,,false,21,Telemetry,1
375688,TYPE_DECL,,,,"enum ApiCall
    {
        AddConsoleAlias = 0,
        AllocConsole,
        AttachConsole,
        CreateConsoleScreenBuffer,
        FillConsoleOutputAttribute,
        FillConsoleOutputCharacter,
        FlushConsoleInputBuffer,
        FreeConsole,
        GenerateConsoleCtrlEvent,
        GetConsoleAlias,
        GetConsoleAliases,
        GetConsoleAliasesLength,
        GetConsoleAliasExes,
        GetConsoleAliasExesLength,
        GetConsoleCP,
        GetConsoleCursorInfo,
        GetConsoleDisplayMode,
        GetConsoleFontSize,
        GetConsoleHistoryInfo,
        GetConsoleMode,
        GetConsoleLangId,
        GetConsoleOriginalTitle,
        GetConsoleOutputCP,
        GetConsoleProcessList,
        GetConsoleScreenBufferInfoEx,
        GetConsoleSelectionInfo,
        GetConsoleTitle,
        GetConsoleWindow,
        GetCurrentConsoleFontEx,
        GetLargestConsoleWindowSize,
        GetNumberOfConsoleInputEvents,
        GetNumberOfConsoleMouseButtons,
     ...",5,host\telemetry.hpp,Telemetry.ApiCall,,false,60,ApiCall,21
375844,TYPE_DECL,,host\tracing.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\tracing.cpp,host\tracing.cpp:<global>,,false,1,<global>,5
375847,TYPE_DECL,,,,"enum TraceKeywords
{
    //Font = 0x001, // _DBGFONTS
    //Font2 = 0x002, // _DBGFONTS2
    Chars = 0x004, // _DBGCHARS
    Output = 0x008, // _DBGOUTPUT
    General = 0x100,
    Input = 0x200,
    //API = 0x400, // No longer used
    UIA = 0x800,
    CookedRead = 0x1000,
    ConsoleAttachDetach = 0x2000,
    All = 0x1FFF
}",1,host\tracing.cpp,TraceKeywords,,false,13,TraceKeywords,1
376321,TYPE_DECL,,host\tracing.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\tracing.hpp,host\tracing.hpp:<global>,,false,1,<global>,3
376324,TYPE_DECL,,,,"class Tracing
{
public:
    static void s_TraceWindowViewport(const Microsoft::Console::Types::Viewport& viewport);

    static void s_TraceChars(_In_z_ const char* pszMessage, ...);
    static void s_TraceOutput(_In_z_ const char* pszMessage, ...);

    static void s_TraceWindowMessage(const MSG& msg);
    static void s_TraceInputRecord(const INPUT_RECORD& inputRecord);

    static void s_TraceCookedRead(_In_ ConsoleProcessHandle* const pConsoleProcessHandle, const std::wstring_view& text);
    static void s_TraceConsoleAttachDetach(_In_ ConsoleProcessHandle* const pConsoleProcessHandle, _In_ bool bIsAttach);

    static void __stdcall TraceFailure(const wil::FailureInfo& failure) noexcept;

private:
    static ULONG s_ulDebugFlag;
}",1,host\tracing.hpp,Tracing,,false,43,Tracing,1
376360,TYPE_DECL,,host\ut_host\AliasTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ut_host\AliasTests.cpp,host\ut_host\AliasTests.cpp:<global>,,false,1,<global>,5
376896,TYPE_DECL,,host\ut_host\ApiRoutinesTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ut_host\ApiRoutinesTests.cpp,host\ut_host\ApiRoutinesTests.cpp:<global>,,false,1,<global>,10
378206,TYPE_DECL,,host\ut_host\ClipboardTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ut_host\ClipboardTests.cpp,host\ut_host\ClipboardTests.cpp:<global>,,false,1,<global>,11
378548,TYPE_DECL,,host\ut_host\CodepointWidthDetectorTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ut_host\CodepointWidthDetectorTests.cpp,host\ut_host\CodepointWidthDetectorTests.cpp:<global>,,false,1,<global>,6
378739,TYPE_DECL,,host\ut_host\ConptyOutputTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ut_host\ConptyOutputTests.cpp,host\ut_host\ConptyOutputTests.cpp:<global>,,false,1,<global>,10
380071,TYPE_DECL,,host\ut_host\ConsoleArgumentsTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ut_host\ConsoleArgumentsTests.cpp,host\ut_host\ConsoleArgumentsTests.cpp:<global>,,false,1,<global>,7
380074,TYPE_DECL,,,,"class ConsoleArgumentsTests
{
public:
    TEST_CLASS(ConsoleArgumentsTests);

    TEST_METHOD(ArgSplittingTests);
    TEST_METHOD(ClientCommandlineTests);
    TEST_METHOD(LegacyFormatsTests);

    TEST_METHOD(IsUsingVtHandleTests);
    TEST_METHOD(CombineVtPipeHandleTests);
    TEST_METHOD(IsVtHandleValidTests);

    TEST_METHOD(InitialSizeTests);

    TEST_METHOD(HeadlessArgTests);
    TEST_METHOD(SignalHandleTests);
    TEST_METHOD(FeatureArgTests);
}",1,host\ut_host\ConsoleArgumentsTests.cpp,ConsoleArgumentsTests,,false,17,ConsoleArgumentsTests,1
381689,TYPE_DECL,,host\ut_host\DbcsTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ut_host\DbcsTests.cpp,host\ut_host\DbcsTests.cpp:<global>,,false,1,<global>,9
381692,TYPE_DECL,,,,"class DbcsTests
{
    TEST_CLASS(DbcsTests);

    TEST_METHOD(TestUnicodeRasterFontCellMungeOnRead)
    {
        const size_t cchTestSize = 20;

        // create test array of 20 characters
        CHAR_INFO rgci[cchTestSize];

        // pick a color to use for attributes to ensure it's preserved.
        const auto wAttrTest = FOREGROUND_BLUE | BACKGROUND_GREEN | BACKGROUND_INTENSITY;

        // target array will look like
        // abcdeLTLTLTLTLTpqrst
        // where L is a leading half of a double-wide char sequence
        // and T is the trailing half of a double-wide char sequence

        // fill ASCII characters first by looping and
        // incrementing. we'll cover up the middle later
        auto wch = L'a';
        for (size_t i = 0; i < ARRAYSIZE(rgci); i++)
        {
            rgci[i].Char.UnicodeChar = wch;
            rgci[i].Attributes = wAttrTest;
            wch++;
        }

        // we're going to do katakana KA, GA, KI, GI, KU
        // for the do...",1,host\ut_host\DbcsTests.cpp,DbcsTests,,false,20,DbcsTests,1
381750,TYPE_DECL,,host\ut_host\HistoryTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ut_host\HistoryTests.cpp,host\ut_host\HistoryTests.cpp:<global>,,false,1,<global>,6
381990,TYPE_DECL,,host\ut_host\InitTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ut_host\InitTests.cpp,host\ut_host\InitTests.cpp:<global>,,false,1,<global>,7
381993,TYPE_DECL,,,,"class InitTests
{
    TEST_CLASS(InitTests);

    // https://msdn.microsoft.com/en-us/library/windows/desktop/dd317756(v=vs.85).aspx
    static const UINT s_uiOEMJapaneseCP = 932;
    static const UINT s_uiOEMSimplifiedChineseCP = 936;
    static const UINT s_uiOEMKoreanCP = 949;
    static const UINT s_uiOEMTraditionalChineseCP = 950;

    static const LANGID s_langIdJapanese = MAKELANGID(LANG_JAPANESE, SUBLANG_DEFAULT);
    static const LANGID s_langIdSimplifiedChinese = MAKELANGID(LANG_CHINESE, SUBLANG_CHINESE_SIMPLIFIED);
    static const LANGID s_langIdKorean = MAKELANGID(LANG_KOREAN, SUBLANG_KOREAN);
    static const LANGID s_langIdTraditionalChinese = MAKELANGID(LANG_CHINESE, SUBLANG_CHINESE_TRADITIONAL);
    static const LANGID s_langIdEnglish = MAKELANGID(LANG_ENGLISH, SUBLANG_ENGLISH_US);

    // This test exists to ensure the continued behavior of the code in the Windows loader.
    // See the LOAD BEARING CODE comment inside GetConsoleLangId or the investigation results ...",1,host\ut_host\InitTests.cpp,InitTests,,false,17,InitTests,1
382074,TYPE_DECL,,host\ut_host\InputBufferTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ut_host\InputBufferTests.cpp,host\ut_host\InputBufferTests.cpp:<global>,,false,1,<global>,7
382723,TYPE_DECL,,host\ut_host\ObjectTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ut_host\ObjectTests.cpp,host\ut_host\ObjectTests.cpp:<global>,,false,1,<global>,5
382809,TYPE_DECL,,host\ut_host\OutputCellIteratorTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ut_host\OutputCellIteratorTests.cpp,host\ut_host\OutputCellIteratorTests.cpp:<global>,,false,1,<global>,5
383264,TYPE_DECL,,host\ut_host\ScreenBufferTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ut_host\ScreenBufferTests.cpp,host\ut_host\ScreenBufferTests.cpp:<global>,,false,1,<global>,17
418240,TYPE_DECL,,host\ut_host\SearchTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ut_host\SearchTests.cpp,host\ut_host\SearchTests.cpp:<global>,,false,1,<global>,6
418494,TYPE_DECL,,host\ut_host\SelectionTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ut_host\SelectionTests.cpp,host\ut_host\SelectionTests.cpp:<global>,,false,1,<global>,8
419337,TYPE_DECL,,host\ut_host\TextBufferIteratorTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ut_host\TextBufferIteratorTests.cpp,host\ut_host\TextBufferIteratorTests.cpp:<global>,,false,1,<global>,11
420702,TYPE_DECL,,host\ut_host\TextBufferTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ut_host\TextBufferTests.cpp,host\ut_host\TextBufferTests.cpp:<global>,,false,1,<global>,12
430353,TYPE_DECL,,host\ut_host\TitleTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ut_host\TitleTests.cpp,host\ut_host\TitleTests.cpp:<global>,,false,1,<global>,5
430514,TYPE_DECL,,host\ut_host\Utf8ToWideCharParserTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ut_host\Utf8ToWideCharParserTests.cpp,host\ut_host\Utf8ToWideCharParserTests.cpp:<global>,,false,1,<global>,5
431187,TYPE_DECL,,host\ut_host\UtilsTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ut_host\UtilsTests.cpp,host\ut_host\UtilsTests.cpp:<global>,,false,1,<global>,9
431375,TYPE_DECL,,host\ut_host\ViewportTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ut_host\ViewportTests.cpp,host\ut_host\ViewportTests.cpp:<global>,,false,1,<global>,6
432465,TYPE_DECL,,host\ut_host\VtIoTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ut_host\VtIoTests.cpp,host\ut_host\VtIoTests.cpp:<global>,,false,1,<global>,11
432489,TYPE_DECL,,,,"class Microsoft::Console::VirtualTerminal::VtIoTests
{
    BEGIN_TEST_CLASS(VtIoTests)
        TEST_CLASS_PROPERTY(L""IsolationLevel"", L""Class"")
    END_TEST_CLASS()

    // General Tests:
    TEST_METHOD(NoOpStartTest);
    TEST_METHOD(ModeParsingTest);

    TEST_METHOD(DtorTestJustEngine);
    TEST_METHOD(DtorTestDeleteVtio);
    TEST_METHOD(DtorTestStackAlloc);
    TEST_METHOD(DtorTestStackAllocMany);

    TEST_METHOD(RendererDtorAndThread);

#if TIL_FEATURE_CONHOSTDXENGINE_ENABLED
    TEST_METHOD(RendererDtorAndThreadAndDx);
#endif

    TEST_METHOD(BasicAnonymousPipeOpeningWithSignalChannelTest);
}",1,host\ut_host\VtIoTests.cpp,VtIoTests,,false,24,VtIoTests,1
433240,TYPE_DECL,,,,"class MockRenderData : public IRenderData
{
public:
    Microsoft::Console::Types::Viewport GetViewport() noexcept override
    {
        return Microsoft::Console::Types::Viewport{};
    }

    til::point GetTextBufferEndPosition() const noexcept override
    {
        return {};
    }

    const TextBuffer& GetTextBuffer() const noexcept override
    {
        FAIL_FAST_HR(E_NOTIMPL);
    }

    const FontInfo& GetFontInfo() const noexcept override
    {
        FAIL_FAST_HR(E_NOTIMPL);
    }

    std::vector<Microsoft::Console::Types::Viewport> GetSelectionRects() noexcept override
    {
        return std::vector<Microsoft::Console::Types::Viewport>{};
    }

    void LockConsole() noexcept override
    {
    }

    void UnlockConsole() noexcept override
    {
    }

    std::pair<COLORREF, COLORREF> GetAttributeColors(const TextAttribute& /*attr*/) const noexcept override
    {
        return std::make_pair(COLORREF{}, COLORREF{});
    }

    til::point GetCursorPosition() cons...",1,host\ut_host\VtIoTests.cpp,MockRenderData,IRenderData,false,257,MockRenderData,9
433641,TYPE_DECL,,host\ut_host\VtRendererTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\ut_host\VtRendererTests.cpp,host\ut_host\VtRendererTests.cpp:<global>,,false,1,<global>,10
436912,TYPE_DECL,,,,class VtRendererTest,13,host\ut_host\VtRendererTests.cpp,Microsoft.Console.Render.VtRendererTest,,false,25,VtRendererTest,1
440090,TYPE_DECL,,host\utf8ToWideCharParser.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\utf8ToWideCharParser.cpp,host\utf8ToWideCharParser.cpp:<global>,,false,1,<global>,4
440172,TYPE_DECL,,host\utf8ToWideCharParser.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\utf8ToWideCharParser.hpp,host\utf8ToWideCharParser.hpp:<global>,,false,1,<global>,1
440175,TYPE_DECL,,,,"class Utf8ToWideCharParser final
{
public:
    Utf8ToWideCharParser(const unsigned int codePage);
    void SetCodePage(const unsigned int codePage);
    [[nodiscard]] HRESULT Parse(_In_reads_(cchBuffer) const byte* const pBytes,
                                _In_ const unsigned int cchBuffer,
                                _Out_ unsigned int& cchConsumed,
                                _Inout_ std::unique_ptr<wchar_t[]>& converted,
                                _Out_ unsigned int& cchConverted);

private:
    enum class _State
    {
        Ready, // ready for input, no partially parsed code points
        Error, // error in parsing given bytes
        BeginPartialParse, // not a clean byte sequence, needs involved parsing
        AwaitingMoreBytes, // have a partial sequence saved, waiting for the rest of it
        Finished // ready to return a wide char sequence
    };

    bool _IsLeadByte(_In_ byte ch);
    bool _IsContinuationByte(_In_ byte ch);
    bool _IsAsciiByte(_In...",1,host\utf8ToWideCharParser.hpp,Utf8ToWideCharParser,,false,19,Utf8ToWideCharParser,1
440187,TYPE_DECL,,,,"enum class _State
    {
        Ready, // ready for input, no partially parsed code points
        Error, // error in parsing given bytes
        BeginPartialParse, // not a clean byte sequence, needs involved parsing
        AwaitingMoreBytes, // have a partial sequence saved, waiting for the rest of it
        Finished // ready to return a wide char sequence
    }",5,host\utf8ToWideCharParser.hpp,Utf8ToWideCharParser._State,,false,31,_State,4
440213,TYPE_DECL,,,,friend class Utf8ToWideCharParserTests,5,host\utf8ToWideCharParser.hpp,Utf8ToWideCharParser.Utf8ToWideCharParserTests,,false,62,Utf8ToWideCharParserTests,22
440233,TYPE_DECL,,host\utils.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\utils.cpp,host\utils.cpp:<global>,,false,1,<global>,5
440533,TYPE_DECL,,host\utils.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\utils.hpp,host\utils.hpp:<global>,,false,1,<global>,4
440559,TYPE_DECL,,,,"class Utils
{
public:
    static int s_CompareCoords(const til::size bufferSize, const til::point first, const til::point second) noexcept;
    static int s_CompareCoords(const til::point coordFirst, const til::point coordSecond) noexcept;

    static til::point s_GetOppositeCorner(const til::inclusive_rect& srRectangle, const til::point coordCorner) noexcept;
}",1,host\utils.hpp,Utils,,false,37,Utils,7
440591,TYPE_DECL,,host\writeData.cpp:<global>,NAMESPACE_BLOCK,<global>,1,host\writeData.cpp,host\writeData.cpp:<global>,,false,1,<global>,6
440639,TYPE_DECL,,host\writeData.hpp:<global>,NAMESPACE_BLOCK,<global>,1,host\writeData.hpp,host\writeData.hpp:<global>,,false,1,<global>,3
440642,TYPE_DECL,,,,"class WriteData : public IWaitRoutine
{
public:
    WriteData(SCREEN_INFORMATION& siContext,
              _In_reads_bytes_(cbContext) PCWCHAR pwchContext,
              const size_t cbContext,
              const UINT uiOutputCodepage,
              const bool requiresVtQuirk);
    ~WriteData();

    void SetLeadByteAdjustmentStatus(const bool fLeadByteCaptured,
                                     const bool fLeadByteConsumed);

    void SetUtf8ConsumedCharacters(const size_t cchUtf8Consumed);

    void MigrateUserBuffersOnTransitionToBackgroundWait(const void* oldBuffer, void* newBuffer) override;
    bool Notify(const WaitTerminationReason TerminationReason,
                const bool fIsUnicode,
                _Out_ NTSTATUS* const pReplyStatus,
                _Out_ size_t* const pNumBytes,
                _Out_ DWORD* const pControlKeyState,
                _Out_ void* const pOutputData);

private:
    SCREEN_INFORMATION& _siContext;
    wchar_t* const _pwchContext;
    cons...",1,host\writeData.hpp,WriteData,IWaitRoutine,false,24,WriteData,1
440676,TYPE_DECL,,inc\CppCoreCheck\warnings.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\CppCoreCheck\warnings.hpp,inc\CppCoreCheck\warnings.hpp:<global>,,false,1,<global>,1
440679,TYPE_DECL,,,,"enum ECppCoreCheckWarningCodes
{
    WARNING_NO_RAW_POINTER_ASSIGNMENT = 26400,                          // Do not assign the result of an allocation or a function call with an owner<T> return value to a raw pointer, use owner<T> instead (i.11: http://go.microsoft.com/fwlink/?linkid=845474).
    WARNING_DONT_DELETE_NON_OWNER = 26401,                              // Do not delete a raw pointer that is not an owner<T> (i.11: http://go.microsoft.com/fwlink/?linkid=845474).
    WARNING_DONT_HEAP_ALLOCATE_MOVABLE_RESULT = 26402,                  // Return a scoped object instead of a heap-allocated if it has a move constructor (r.3: http://go.microsoft.com/fwlink/?linkid=845471).
    WARNING_RESET_OR_DELETE_OWNER = 26403,                              // Reset or explicitly delete an owner<T> pointer '%1$s' (r.3: http://go.microsoft.com/fwlink/?linkid=845471).
    WARNING_DONT_DELETE_INVALID = 26404,                                // Do not delete an owner<T> which may be in invalid state...",1,inc\CppCoreCheck\warnings.hpp,ECppCoreCheckWarningCodes,,false,11,ECppCoreCheckWarningCodes,1
440954,TYPE_DECL,,inc\DefaultSettings.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\DefaultSettings.hpp,inc\DefaultSettings.hpp:<global>,,false,1,<global>,1
441055,TYPE_DECL,,inc\HostAndPropsheetIncludes.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\HostAndPropsheetIncludes.hpp,inc\HostAndPropsheetIncludes.hpp:<global>,,false,1,<global>,12
441060,TYPE_DECL,,inc\HostSignals.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\HostSignals.hpp,inc\HostSignals.hpp:<global>,,false,1,<global>,1
441065,TYPE_DECL,,,,"enum class HostSignals : uint8_t
    {
        NotifyApp = 1u,
        SetForeground = 5u,
        EndTask = 7u
    }",5,inc\HostSignals.hpp,Microsoft.Console.HostSignals,,false,6,HostSignals,1
441082,TYPE_DECL,,,,"struct HostSignalNotifyAppData
    {
        uint32_t sizeInBytes;
        uint32_t processId; // THIS IS A PID
    }",5,inc\HostSignals.hpp,Microsoft.Console.HostSignalNotifyAppData,,false,13,HostSignalNotifyAppData,2
441085,TYPE_DECL,,,,"struct HostSignalSetForegroundData
    {
        uint32_t sizeInBytes;
        uint32_t processId; // THIS IS A HANDLE, NOT A PID
        bool isForeground;
    }",5,inc\HostSignals.hpp,Microsoft.Console.HostSignalSetForegroundData,,false,19,HostSignalSetForegroundData,3
441089,TYPE_DECL,,,,"struct HostSignalEndTaskData
    {
        uint32_t sizeInBytes;
        uint32_t processId; // THIS IS A PID
        uint32_t eventType;
        uint32_t ctrlFlags;
    }",5,inc\HostSignals.hpp,Microsoft.Console.HostSignalEndTaskData,,false,26,HostSignalEndTaskData,4
441206,TYPE_DECL,,inc\LibraryIncludes.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\LibraryIncludes.hpp,inc\LibraryIncludes.hpp:<global>,,false,1,<global>,56
441259,TYPE_DECL,,,,"class TerminalCoreUnitTests::TestUtils
{
public:
    static constexpr std::wstring_view Test100CharsString{
        LR""(!""#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~!""#$%&)""
    };

    // Function Description:
    // - Helper function to validate that a number of characters in a row are all
    //   the same. Validates that the next end-start characters are all equal to the
    //   provided string. Will move the provided iterator as it validates. The
    //   caller should ensure that `iter` starts where they would like to validate.
    // Arguments:
    // - expectedChar: The character (or characters) we're expecting
    // - iter: a iterator pointing to the cell we'd like to start validating at.
    // - start: the first index in the range we'd like to validate
    // - end: the last index in the range we'd like to validate
    // Return Value:
    // - <none>
    static void VerifySpanOfText(const wchar_t* const expectedChar,
   ...",1,inc\TestUtils.hpp,TestUtils,,false,21,TestUtils,2
441263,TYPE_DECL,,inc\TestUtils.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\TestUtils.hpp,inc\TestUtils.hpp:<global>,,false,1,<global>,2
441267,TYPE_DECL,,,,class TestUtils,5,inc\TestUtils.hpp,TerminalCoreUnitTests.TestUtils,,false,19,TestUtils,1
441762,TYPE_DECL,,inc\VtIoModes.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\VtIoModes.hpp,inc\VtIoModes.hpp:<global>,,false,1,<global>,1
441765,TYPE_DECL,,,,"enum class VtIoMode
{
    INVALID,
    XTERM,
    XTERM_256,
    XTERM_ASCII
}",1,inc\VtIoModes.hpp,VtIoMode,,false,6,VtIoMode,1
441792,TYPE_DECL,,inc\WilErrorReporting.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\WilErrorReporting.hpp,inc\WilErrorReporting.hpp:<global>,,false,1,<global>,3
441822,TYPE_DECL,,inc\conattrs.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\conattrs.hpp,inc\conattrs.hpp:<global>,,false,1,<global>,1
441825,TYPE_DECL,,,,"enum class CharacterAttributes : uint16_t
{
    Normal = 0x00,
    Intense = 0x01,
    Italics = 0x02,
    Blinking = 0x04,
    Invisible = 0x08,
    CrossedOut = 0x10,
    Faint = 0x20,

    // 7th, 8th, 9th bit reserved for underline styles
    UnderlineStyle = 0x1C0,

    Unused1 = 0x200,
    TopGridline = COMMON_LVB_GRID_HORIZONTAL, // 0x400
    LeftGridline = COMMON_LVB_GRID_LVERTICAL, // 0x800
    RightGridline = COMMON_LVB_GRID_RVERTICAL, // 0x1000
    Protected = 0x2000,
    ReverseVideo = COMMON_LVB_REVERSE_VIDEO, // 0x4000
    BottomGridline = COMMON_LVB_UNDERSCORE, // 0x8000

    All = 0xFFFF, // All character attributes
    Rendition = All & ~Protected // Only rendition attributes (everything except Protected)
}",1,inc\conattrs.hpp,CharacterAttributes,,false,12,CharacterAttributes,1
441906,TYPE_DECL,,,,"enum class CursorType : unsigned int
{
    Legacy = 0x0, // uses the cursor's height value to range from underscore-like to full box
    VerticalBar = 0x1, // A single vertical line, '|'
    Underscore = 0x2, // a single horizontal underscore, smaller that the min height legacy cursor.
    EmptyBox = 0x3, // Just the outline of a full box
    FullBox = 0x4, // a full box, similar to legacy with height=100%
    DoubleUnderscore = 0x5 // a double horizontal underscore
}",1,inc\conattrs.hpp,CursorType,,false,40,CursorType,5
441945,TYPE_DECL,,inc\conime.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\conime.hpp,inc\conime.hpp:<global>,,false,1,<global>,1
441986,TYPE_DECL,,inc\conint.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\conint.hpp,inc\conint.hpp:<global>,,false,1,<global>,1
442015,TYPE_DECL,,inc\conpty-static.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\conpty-static.hpp,inc\conpty-static.hpp:<global>,,false,1,<global>,2
442040,TYPE_DECL,,inc\conpty.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\conpty.hpp,inc\conpty.hpp:<global>,,false,1,<global>,6
442334,TYPE_DECL,,inc\consoletaeftemplates.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\consoletaeftemplates.hpp,inc\consoletaeftemplates.hpp:<global>,,false,1,<global>,2
442401,TYPE_DECL,"WEX.TestExecution.VerifyCompareTraits<float,float><>",,,"struct VerifyCompareTraits<float, float>
    {
        static bool AreEqual(float a, float b) noexcept
        {
            return CompareFloats<float, uint32_t>(a, b);
        }
    }",5,inc\consoletaeftemplates.hpp,"WEX.TestExecution.VerifyCompareTraits<float,float>",,false,70,"VerifyCompareTraits<float,float>",2
442412,TYPE_DECL,"WEX.TestExecution.VerifyCompareTraits<double,double><>",,,"struct VerifyCompareTraits<double, double>
    {
        static bool AreEqual(double a, double b) noexcept
        {
            return CompareFloats<double, uint64_t>(a, b);
        }
    }",5,inc\consoletaeftemplates.hpp,"WEX.TestExecution.VerifyCompareTraits<double,double>",,false,79,"VerifyCompareTraits<double,double>",3
442423,TYPE_DECL,WEX.TestExecution.VerifyOutputTraits<SMALL_RECT><>,,,"class VerifyOutputTraits<SMALL_RECT>
    {
    public:
        static WEX::Common::NoThrowString ToString(const SMALL_RECT& sr)
        {
            return WEX::Common::NoThrowString().Format(L""(L:%d, R:%d, T:%d, B:%d)"", sr.Left, sr.Right, sr.Top, sr.Bottom);
        }
    }",5,inc\consoletaeftemplates.hpp,WEX.TestExecution.VerifyOutputTraits<SMALL_RECT>,,false,88,VerifyOutputTraits<SMALL_RECT>,4
442452,TYPE_DECL,"WEX.TestExecution.VerifyCompareTraits<SMALL_RECT,SMALL_RECT><>",,,"class VerifyCompareTraits<SMALL_RECT, SMALL_RECT>
    {
    public:
        static bool AreEqual(const SMALL_RECT& expected, const SMALL_RECT& actual)
        {
            return expected.Left == actual.Left &&
                   expected.Right == actual.Right &&
                   expected.Top == actual.Top &&
                   expected.Bottom == actual.Bottom;
        }

        static bool AreSame(const SMALL_RECT& expected, const SMALL_RECT& actual)
        {
            return &expected == &actual;
        }

        static bool IsLessThan(const SMALL_RECT& expectedLess, const SMALL_RECT& expectedGreater) = delete;

        static bool IsGreaterThan(const SMALL_RECT& expectedGreater, const SMALL_RECT& expectedLess) = delete;

        static bool IsNull(const SMALL_RECT& object)
        {
            return object.Left == 0 && object.Right == 0 && object.Top == 0 && object.Bottom == 0;
        }
    }",5,inc\consoletaeftemplates.hpp,"WEX.TestExecution.VerifyCompareTraits<SMALL_RECT,SMALL_RECT>",,false,98,"VerifyCompareTraits<SMALL_RECT,SMALL_RECT>",5
442544,TYPE_DECL,WEX.TestExecution.VerifyOutputTraits<COORD><>,,,"class VerifyOutputTraits<COORD>
    {
    public:
        static WEX::Common::NoThrowString ToString(const COORD& coord)
        {
            return WEX::Common::NoThrowString().Format(L""(X:%d, Y:%d)"", coord.X, coord.Y);
        }
    }",5,inc\consoletaeftemplates.hpp,WEX.TestExecution.VerifyOutputTraits<COORD>,,false,125,VerifyOutputTraits<COORD>,6
442567,TYPE_DECL,"WEX.TestExecution.VerifyCompareTraits<COORD,COORD><>",,,"class VerifyCompareTraits<COORD, COORD>
    {
    public:
        static bool AreEqual(const COORD& expected, const COORD& actual)
        {
            return expected.X == actual.X &&
                   expected.Y == actual.Y;
        }

        static bool AreSame(const COORD& expected, const COORD& actual)
        {
            return &expected == &actual;
        }

        static bool IsLessThan(const COORD& expectedLess, const COORD& expectedGreater)
        {
            // less is on a line above greater (Y values less than)
            return (expectedLess.Y < expectedGreater.Y) ||
                   // or on the same lines and less is left of greater (X values less than)
                   ((expectedLess.Y == expectedGreater.Y) && (expectedLess.X < expectedGreater.X));
        }

        static bool IsGreaterThan(const COORD& expectedGreater, const COORD& expectedLess)
        {
            // greater is on a line below less (Y value greater than)
            return (expe...",5,inc\consoletaeftemplates.hpp,"WEX.TestExecution.VerifyCompareTraits<COORD,COORD>",,false,135,"VerifyCompareTraits<COORD,COORD>",7
442679,TYPE_DECL,WEX.TestExecution.VerifyOutputTraits<CONSOLE_CURSOR_INFO><>,,,"class VerifyOutputTraits<CONSOLE_CURSOR_INFO>
    {
    public:
        static WEX::Common::NoThrowString ToString(const CONSOLE_CURSOR_INFO& cci)
        {
            return WEX::Common::NoThrowString().Format(L""(Vis:%s, Size:%d)"", cci.bVisible ? L""True"" : L""False"", cci.dwSize);
        }
    }",5,inc\consoletaeftemplates.hpp,WEX.TestExecution.VerifyOutputTraits<CONSOLE_CURSOR_INFO>,,false,172,VerifyOutputTraits<CONSOLE_CURSOR_INFO>,8
442705,TYPE_DECL,"WEX.TestExecution.VerifyCompareTraits<CONSOLE_CURSOR_INFO,CONSOLE_CURSOR_INFO><>",,,"class VerifyCompareTraits<CONSOLE_CURSOR_INFO, CONSOLE_CURSOR_INFO>
    {
    public:
        static bool AreEqual(const CONSOLE_CURSOR_INFO& expected, const CONSOLE_CURSOR_INFO& actual)
        {
            return expected.bVisible == actual.bVisible &&
                   expected.dwSize == actual.dwSize;
        }

        static bool AreSame(const CONSOLE_CURSOR_INFO& expected, const CONSOLE_CURSOR_INFO& actual)
        {
            return &expected == &actual;
        }

        static bool IsLessThan(const CONSOLE_CURSOR_INFO& expectedLess, const CONSOLE_CURSOR_INFO& expectedGreater) = delete;

        static bool IsGreaterThan(const CONSOLE_CURSOR_INFO& expectedGreater, const CONSOLE_CURSOR_INFO& expectedLess) = delete;

        static bool IsNull(const CONSOLE_CURSOR_INFO& object)
        {
            return object.bVisible == 0 && object.dwSize == 0;
        }
    }",5,inc\consoletaeftemplates.hpp,"WEX.TestExecution.VerifyCompareTraits<CONSOLE_CURSOR_INFO,CONSOLE_CURSOR_INFO>",,false,182,"VerifyCompareTraits<CONSOLE_CURSOR_INFO,CONSOLE_CURSOR_INFO>",9
442769,TYPE_DECL,WEX.TestExecution.VerifyOutputTraits<CONSOLE_SCREEN_BUFFER_INFOEX><>,,,"class VerifyOutputTraits<CONSOLE_SCREEN_BUFFER_INFOEX>
    {
    public:
        static WEX::Common::NoThrowString ToString(const CONSOLE_SCREEN_BUFFER_INFOEX& sbiex)
        {
            return WEX::Common::NoThrowString().Format(L""(Full:%s Attrs:0x%x PopupAttrs:0x%x CursorPos:%s Size:%s MaxSize:%s Viewport:%s)\r\nColors:\r\n(0:0x%x)\r\n(1:0x%x)\r\n(2:0x%x)\r\n(3:0x%x)\r\n(4:0x%x)\r\n(5:0x%x)\r\n(6:0x%x)\r\n(7:0x%x)\r\n(8:0x%x)\r\n(9:0x%x)\r\n(A:0x%x)\r\n(B:0x%x)\r\n(C:0x%x)\r\n(D:0x%x)\r\n(E:0x%x)\r\n(F:0x%x)\r\n"",
                                                       sbiex.bFullscreenSupported ? L""True"" : L""False"",
                                                       sbiex.wAttributes,
                                                       sbiex.wPopupAttributes,
                                                       VerifyOutputTraits<COORD>::ToString(sbiex.dwCursorPosition).ToCStrWithFallbackTo(L""Fail""),
                                                       VerifyOutputTra...",5,inc\consoletaeftemplates.hpp,WEX.TestExecution.VerifyOutputTraits<CONSOLE_SCREEN_BUFFER_INFOEX>,,false,207,VerifyOutputTraits<CONSOLE_SCREEN_BUFFER_INFOEX>,10
442938,TYPE_DECL,"WEX.TestExecution.VerifyCompareTraits<CONSOLE_SCREEN_BUFFER_INFOEX,CONSOLE_SCREEN_BUFFER_INFOEX><>",,,"class VerifyCompareTraits<CONSOLE_SCREEN_BUFFER_INFOEX, CONSOLE_SCREEN_BUFFER_INFOEX>
    {
    public:
        static bool AreEqual(const CONSOLE_SCREEN_BUFFER_INFOEX& expected, const CONSOLE_SCREEN_BUFFER_INFOEX& actual)
        {
            static_assert(std::has_unique_object_representations_v<CONSOLE_SCREEN_BUFFER_INFOEX>);
            return memcmp(&expected, &actual, sizeof(CONSOLE_SCREEN_BUFFER_INFOEX)) == 0;
        }

        static bool AreSame(const CONSOLE_SCREEN_BUFFER_INFOEX& expected, const CONSOLE_SCREEN_BUFFER_INFOEX& actual)
        {
            return &expected == &actual;
        }
    }",5,inc\consoletaeftemplates.hpp,"WEX.TestExecution.VerifyCompareTraits<CONSOLE_SCREEN_BUFFER_INFOEX,CONSOLE_SCREEN_BUFFER_INFOEX>",,false,240,"VerifyCompareTraits<CONSOLE_SCREEN_BUFFER_INFOEX,CONSOLE_SCREEN_BUFFER_INFOEX>",11
442971,TYPE_DECL,WEX.TestExecution.VerifyOutputTraits<INPUT_RECORD><>,,,"class VerifyOutputTraits<INPUT_RECORD>
    {
    public:
        static WEX::Common::NoThrowString ToString(const INPUT_RECORD& ir)
        {
            SetVerifyOutput verifySettings(VerifyOutputSettings::LogOnlyFailures);

            WEX::Common::NoThrowString str;
            str.Append(L""(ev: "");

            switch (ir.EventType)
            {
            case FOCUS_EVENT:
            {
                str.AppendFormat(
                    L""FOCUS set: %s)"",
                    ir.Event.FocusEvent.bSetFocus ? L""T"" : L""F"");
                break;
            }

            case KEY_EVENT:
            {
                str.AppendFormat(
                    L""KEY down: %s reps: %d kc: 0x%x sc: 0x%x uc: %d ctl: 0x%x)"",
                    ir.Event.KeyEvent.bKeyDown ? L""T"" : L""F"",
                    ir.Event.KeyEvent.wRepeatCount,
                    ir.Event.KeyEvent.wVirtualKeyCode,
                    ir.Event.KeyEvent.wVirtualScanCode,
                    ir.Event.KeyEvent.uC...",5,inc\consoletaeftemplates.hpp,WEX.TestExecution.VerifyOutputTraits<INPUT_RECORD>,,false,256,VerifyOutputTraits<INPUT_RECORD>,12
443171,TYPE_DECL,"WEX.TestExecution.VerifyCompareTraits<INPUT_RECORD,INPUT_RECORD><>",,,"class VerifyCompareTraits<INPUT_RECORD, INPUT_RECORD>
    {
    public:
        static bool AreEqual(const INPUT_RECORD& expected, const INPUT_RECORD& actual)
        {
            bool fEqual = false;
            if (expected.EventType == actual.EventType)
            {
                switch (expected.EventType)
                {
                case FOCUS_EVENT:
                {
                    fEqual = expected.Event.FocusEvent.bSetFocus == actual.Event.FocusEvent.bSetFocus;
                    break;
                }

                case KEY_EVENT:
                {
                    fEqual = (expected.Event.KeyEvent.bKeyDown == actual.Event.KeyEvent.bKeyDown &&
                              expected.Event.KeyEvent.wRepeatCount == actual.Event.KeyEvent.wRepeatCount &&
                              expected.Event.KeyEvent.wVirtualKeyCode == actual.Event.KeyEvent.wVirtualKeyCode &&
                              expected.Event.KeyEvent.wVirtualScanCode == actual.Event.Key...",5,inc\consoletaeftemplates.hpp,"WEX.TestExecution.VerifyCompareTraits<INPUT_RECORD,INPUT_RECORD>",,false,328,"VerifyCompareTraits<INPUT_RECORD,INPUT_RECORD>",13
443521,TYPE_DECL,WEX.TestExecution.VerifyOutputTraits<CONSOLE_FONT_INFO><>,,,"class VerifyOutputTraits<CONSOLE_FONT_INFO>
    {
    public:
        static WEX::Common::NoThrowString ToString(const CONSOLE_FONT_INFO& cfi)
        {
            return WEX::Common::NoThrowString().Format(L""Index: %n  Size: (X:%d, Y:%d)"", cfi.nFont, cfi.dwFontSize.X, cfi.dwFontSize.Y);
        }
    }",5,inc\consoletaeftemplates.hpp,WEX.TestExecution.VerifyOutputTraits<CONSOLE_FONT_INFO>,,false,402,VerifyOutputTraits<CONSOLE_FONT_INFO>,14
443551,TYPE_DECL,"WEX.TestExecution.VerifyCompareTraits<CONSOLE_FONT_INFO,CONSOLE_FONT_INFO><>",,,"class VerifyCompareTraits<CONSOLE_FONT_INFO, CONSOLE_FONT_INFO>
    {
    public:
        static bool AreEqual(const CONSOLE_FONT_INFO& expected, const CONSOLE_FONT_INFO& actual)
        {
            return expected.nFont == actual.nFont &&
                   expected.dwFontSize.X == actual.dwFontSize.X &&
                   expected.dwFontSize.Y == actual.dwFontSize.Y;
        }

        static bool AreSame(const CONSOLE_FONT_INFO& expected, const CONSOLE_FONT_INFO& actual)
        {
            return &expected == &actual;
        }

        static bool IsLessThan(const CONSOLE_FONT_INFO& expectedLess, const CONSOLE_FONT_INFO& expectedGreater)
        {
            return expectedLess.dwFontSize.X < expectedGreater.dwFontSize.X &&
                   expectedLess.dwFontSize.Y < expectedGreater.dwFontSize.Y;
        }

        static bool IsGreaterThan(const CONSOLE_FONT_INFO& expectedGreater, const CONSOLE_FONT_INFO& expectedLess)
        {
            return expectedLess.dwFontSi...",5,inc\consoletaeftemplates.hpp,"WEX.TestExecution.VerifyCompareTraits<CONSOLE_FONT_INFO,CONSOLE_FONT_INFO>",,false,412,"VerifyCompareTraits<CONSOLE_FONT_INFO,CONSOLE_FONT_INFO>",15
443689,TYPE_DECL,WEX.TestExecution.VerifyOutputTraits<CONSOLE_FONT_INFOEX><>,,,"class VerifyOutputTraits<CONSOLE_FONT_INFOEX>
    {
    public:
        static WEX::Common::NoThrowString ToString(const CONSOLE_FONT_INFOEX& cfiex)
        {
            return WEX::Common::NoThrowString().Format(L""Index: %d  Size: (X:%d, Y:%d)  Family: 0x%x (%d)  Weight: 0x%x (%d)  Name: %ls"",
                                                       cfiex.nFont,
                                                       cfiex.dwFontSize.X,
                                                       cfiex.dwFontSize.Y,
                                                       cfiex.FontFamily,
                                                       cfiex.FontFamily,
                                                       cfiex.FontWeight,
                                                       cfiex.FontWeight,
                                                       cfiex.FaceName);
        }
    }",5,inc\consoletaeftemplates.hpp,WEX.TestExecution.VerifyOutputTraits<CONSOLE_FONT_INFOEX>,,false,446,VerifyOutputTraits<CONSOLE_FONT_INFOEX>,16
443734,TYPE_DECL,"WEX.TestExecution.VerifyCompareTraits<CONSOLE_FONT_INFOEX,CONSOLE_FONT_INFOEX><>",,,"class VerifyCompareTraits<CONSOLE_FONT_INFOEX, CONSOLE_FONT_INFOEX>
    {
    public:
        static bool AreEqual(const CONSOLE_FONT_INFOEX& expected, const CONSOLE_FONT_INFOEX& actual)
        {
            return expected.nFont == actual.nFont &&
                   expected.dwFontSize.X == actual.dwFontSize.X &&
                   expected.dwFontSize.Y == actual.dwFontSize.Y &&
                   expected.FontFamily == actual.FontFamily &&
                   expected.FontWeight == actual.FontWeight &&
                   0 == wcscmp(expected.FaceName, actual.FaceName);
        }

        static bool AreSame(const CONSOLE_FONT_INFOEX& expected, const CONSOLE_FONT_INFOEX& actual)
        {
            return &expected == &actual;
        }

        static bool IsLessThan(const CONSOLE_FONT_INFOEX& expectedLess, const CONSOLE_FONT_INFOEX& expectedGreater)
        {
            return expectedLess.dwFontSize.X < expectedGreater.dwFontSize.X &&
                   expectedLess.dwFontSiz...",5,inc\consoletaeftemplates.hpp,"WEX.TestExecution.VerifyCompareTraits<CONSOLE_FONT_INFOEX,CONSOLE_FONT_INFOEX>",,false,464,"VerifyCompareTraits<CONSOLE_FONT_INFOEX,CONSOLE_FONT_INFOEX>",17
443918,TYPE_DECL,WEX.TestExecution.VerifyOutputTraits<CHAR_INFO><>,,,"class VerifyOutputTraits<CHAR_INFO>
    {
    public:
        static WEX::Common::NoThrowString ToString(const CHAR_INFO& ci)
        {
            // 0x2400 is the Unicode symbol for a printable 'NUL' inscribed in a 1 column block. It's for communicating NUL without printing 0x0.
            const wchar_t wch = ci.Char.UnicodeChar != L'\0' ? ci.Char.UnicodeChar : 0x2400;

            // 0x20 is a standard space character.
            const char ch = ci.Char.AsciiChar != '\0' ? ci.Char.AsciiChar : 0x20;

            return WEX::Common::NoThrowString().Format(L""Unicode Char: %lc (0x%x),  Attributes: 0x%x,  [Ascii Char: %c (0x%hhx)]"",
                                                       wch,
                                                       ci.Char.UnicodeChar,
                                                       ci.Attributes,
                                                       ch,
                                                       ci.Char.AsciiChar);
        }
    }",5,inc\consoletaeftemplates.hpp,WEX.TestExecution.VerifyOutputTraits<CHAR_INFO>,,false,502,VerifyOutputTraits<CHAR_INFO>,18
443984,TYPE_DECL,"WEX.TestExecution.VerifyCompareTraits<CHAR_INFO,CHAR_INFO><>",,,"class VerifyCompareTraits<CHAR_INFO, CHAR_INFO>
    {
    public:
        static bool AreEqual(const CHAR_INFO& expected, const CHAR_INFO& actual)
        {
            return expected.Attributes == actual.Attributes &&
                   expected.Char.UnicodeChar == actual.Char.UnicodeChar;
        }

        static bool AreSame(const CHAR_INFO& expected, const CHAR_INFO& actual)
        {
            return &expected == &actual;
        }

        static bool IsLessThan(const CHAR_INFO&, const CHAR_INFO&) = delete;

        static bool IsGreaterThan(const CHAR_INFO&, const CHAR_INFO&) = delete;

        static bool IsNull(const CHAR_INFO& object)
        {
            return object.Attributes == 0 && object.Char.UnicodeChar == 0;
        }
    }",5,inc\consoletaeftemplates.hpp,"WEX.TestExecution.VerifyCompareTraits<CHAR_INFO,CHAR_INFO>",,false,523,"VerifyCompareTraits<CHAR_INFO,CHAR_INFO>",19
444054,TYPE_DECL,WEX.TestExecution.VerifyOutputTraits<std.string_view><>,,,"class VerifyOutputTraits<std::string_view>
    {
    public:
        static WEX::Common::NoThrowString ToString(const std::string_view& view)
        {
            if (view.empty())
            {
                return L""<empty>"";
            }

            WEX::Common::NoThrowString s;
            s.AppendFormat(L""%.*hs"", gsl::narrow_cast<unsigned int>(view.size()), view.data());
            return s;
        }
    }",5,inc\consoletaeftemplates.hpp,WEX.TestExecution.VerifyOutputTraits<std.string_view>,,false,548,VerifyOutputTraits<std::string_view>,20
444088,TYPE_DECL,WEX.TestExecution.VerifyOutputTraits<std.wstring_view><>,,,"class VerifyOutputTraits<std::wstring_view>
    {
    public:
        static WEX::Common::NoThrowString ToString(const std::wstring_view& view)
        {
            if (view.empty())
            {
                return L""<empty>"";
            }

            return WEX::Common::NoThrowString(view.data(), gsl::narrow<int>(view.size()));
        }
    }",5,inc\consoletaeftemplates.hpp,WEX.TestExecution.VerifyOutputTraits<std.wstring_view>,,false,565,VerifyOutputTraits<std::wstring_view>,21
444121,TYPE_DECL,"WEX.TestExecution.VerifyCompareTraits<std.basic_string_view<Elem>,std.basic_string_view<Elem>><Elem>",,,"class VerifyCompareTraits<std::basic_string_view<Elem>, std::basic_string_view<Elem>>
    {
    public:
        static bool AreEqual(const std::basic_string_view<Elem>& expected, const std::basic_string_view<Elem>& actual)
        {
            return expected == actual;
        }

        static bool AreSame(const std::basic_string_view<Elem>& expected, const std::basic_string_view<Elem>& actual)
        {
            return expected.data() == actual.data();
        }

        static bool IsLessThan(const std::basic_string_view<Elem>&, const std::basic_string_view<Elem>&) = delete;

        static bool IsGreaterThan(const std::basic_string_view<Elem>&, const std::basic_string_view<Elem>&) = delete;

        static bool IsNull(const std::basic_string_view<Elem>& object)
        {
            return object.empty();
        }
    }",5,inc\consoletaeftemplates.hpp,"WEX.TestExecution.VerifyCompareTraits<std.basic_string_view<Elem>,std.basic_string_view<Elem>>",,false,580,"VerifyCompareTraits<std::basic_string_view<Elem>,std::basic_string_view<Elem>>",22
444174,TYPE_DECL,,inc\contsf.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\contsf.hpp,inc\contsf.hpp:<global>,,false,1,<global>,2
444210,TYPE_DECL,,inc\cpl_core.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\cpl_core.hpp,inc\cpl_core.hpp:<global>,,false,1,<global>,3
444214,TYPE_DECL,CPLINFO,,,"typedef struct tagCPLINFO
{
    int         idIcon;     /* icon resource id, provided by CPlApplet() */
    int         idName;     /* display name string resource id, provided by CPlApplet() */
    int         idInfo;     /* description/tooltip/status bar string resource id, provided by CPlApplet() */
    LONG_PTR    lData;      /* user defined data */
}",1,inc\cpl_core.hpp,tagCPLINFO,,false,43,tagCPLINFO,2
444219,TYPE_DECL,tagCPLINFO,,,"typedef struct tagCPLINFO
{
    int         idIcon;     /* icon resource id, provided by CPlApplet() */
    int         idName;     /* display name string resource id, provided by CPlApplet() */
    int         idInfo;     /* description/tooltip/status bar string resource id, provided by CPlApplet() */
    LONG_PTR    lData;      /* user defined data */
} CPLINFO, *LPCPLINFO;",3,inc\cpl_core.hpp,CPLINFO,,false,49,CPLINFO,3
444220,TYPE_DECL,tagCPLINFO*,,,"typedef struct tagCPLINFO
{
    int         idIcon;     /* icon resource id, provided by CPlApplet() */
    int         idName;     /* display name string resource id, provided by CPlApplet() */
    int         idInfo;     /* description/tooltip/status bar string resource id, provided by CPlApplet() */
    LONG_PTR    lData;      /* user defined data */
} CPLINFO, *LPCPLINFO;",12,inc\cpl_core.hpp,LPCPLINFO,,false,49,LPCPLINFO,4
444221,TYPE_DECL,NEWCPLINFOA,,,"typedef struct tagNEWCPLINFOA
{
    DWORD   dwSize;         /* size, in bytes, of the structure */
    DWORD   dwFlags;
    DWORD   dwHelpContext;  /* help context to use */
    LONG_PTR lData;         /* user defined data */
    HICON   hIcon;          /* icon to use, this is owned by the Control Panel window (may be deleted) */
    CHAR    szName[32];     /* display name */
    CHAR    szInfo[64];     /* description/tooltip/status bar string */
    CHAR    szHelpFile[128];/* path to help file to use */
}",1,inc\cpl_core.hpp,tagNEWCPLINFOA,,false,51,tagNEWCPLINFOA,5
444240,TYPE_DECL,tagNEWCPLINFOA,,,"typedef struct tagNEWCPLINFOA
{
    DWORD   dwSize;         /* size, in bytes, of the structure */
    DWORD   dwFlags;
    DWORD   dwHelpContext;  /* help context to use */
    LONG_PTR lData;         /* user defined data */
    HICON   hIcon;          /* icon to use, this is owned by the Control Panel window (may be deleted) */
    CHAR    szName[32];     /* display name */
    CHAR    szInfo[64];     /* description/tooltip/status bar string */
    CHAR    szHelpFile[128];/* path to help file to use */
} NEWCPLINFOA, *LPNEWCPLINFOA;",3,inc\cpl_core.hpp,NEWCPLINFOA,,false,61,NEWCPLINFOA,6
444241,TYPE_DECL,tagNEWCPLINFOA*,,,"typedef struct tagNEWCPLINFOA
{
    DWORD   dwSize;         /* size, in bytes, of the structure */
    DWORD   dwFlags;
    DWORD   dwHelpContext;  /* help context to use */
    LONG_PTR lData;         /* user defined data */
    HICON   hIcon;          /* icon to use, this is owned by the Control Panel window (may be deleted) */
    CHAR    szName[32];     /* display name */
    CHAR    szInfo[64];     /* description/tooltip/status bar string */
    CHAR    szHelpFile[128];/* path to help file to use */
} NEWCPLINFOA, *LPNEWCPLINFOA;",16,inc\cpl_core.hpp,LPNEWCPLINFOA,,false,61,LPNEWCPLINFOA,7
444242,TYPE_DECL,NEWCPLINFOW,,,"typedef struct tagNEWCPLINFOW
{
    DWORD   dwSize;         /* size, in bytes, of the structure */
    DWORD   dwFlags;
    DWORD   dwHelpContext;  /* help context to use */
    LONG_PTR lData;         /* user defined data */
    HICON   hIcon;          /* icon to use, this is owned by the Control Panel window (may be deleted) */
    WCHAR   szName[32];     /* display name */
    WCHAR   szInfo[64];     /* description/tooltip/status bar string */
    WCHAR   szHelpFile[128];/* path to help file to use */
}",1,inc\cpl_core.hpp,tagNEWCPLINFOW,,false,62,tagNEWCPLINFOW,8
444261,TYPE_DECL,tagNEWCPLINFOW,,,"typedef struct tagNEWCPLINFOW
{
    DWORD   dwSize;         /* size, in bytes, of the structure */
    DWORD   dwFlags;
    DWORD   dwHelpContext;  /* help context to use */
    LONG_PTR lData;         /* user defined data */
    HICON   hIcon;          /* icon to use, this is owned by the Control Panel window (may be deleted) */
    WCHAR   szName[32];     /* display name */
    WCHAR   szInfo[64];     /* description/tooltip/status bar string */
    WCHAR   szHelpFile[128];/* path to help file to use */
} NEWCPLINFOW, *LPNEWCPLINFOW;",3,inc\cpl_core.hpp,NEWCPLINFOW,,false,72,NEWCPLINFOW,9
444262,TYPE_DECL,tagNEWCPLINFOW*,,,"typedef struct tagNEWCPLINFOW
{
    DWORD   dwSize;         /* size, in bytes, of the structure */
    DWORD   dwFlags;
    DWORD   dwHelpContext;  /* help context to use */
    LONG_PTR lData;         /* user defined data */
    HICON   hIcon;          /* icon to use, this is owned by the Control Panel window (may be deleted) */
    WCHAR   szName[32];     /* display name */
    WCHAR   szInfo[64];     /* description/tooltip/status bar string */
    WCHAR   szHelpFile[128];/* path to help file to use */
} NEWCPLINFOW, *LPNEWCPLINFOW;",16,inc\cpl_core.hpp,LPNEWCPLINFOW,,false,72,LPNEWCPLINFOW,10
444263,TYPE_DECL,tagNEWCPLINFOA,,,typedef NEWCPLINFOA NEWCPLINFO;,21,inc\cpl_core.hpp,NEWCPLINFO,,false,77,NEWCPLINFO,11
444264,TYPE_DECL,tagNEWCPLINFOA*,,,typedef LPNEWCPLINFOA LPNEWCPLINFO;,23,inc\cpl_core.hpp,LPNEWCPLINFO,,false,78,LPNEWCPLINFO,12
444285,TYPE_DECL,,inc\til.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\til.hpp,inc\til.hpp:<global>,,false,1,<global>,10
444338,TYPE_DECL,,inc\til\at.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\til\at.hpp,inc\til\at.hpp:<global>,,false,1,<global>,1
444354,TYPE_DECL,,inc\til\atomic.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\til\atomic.hpp,inc\til\atomic.hpp:<global>,,false,1,<global>,1
444405,TYPE_DECL,,inc\til\bit.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\til\bit.hpp,inc\til\bit.hpp:<global>,,false,1,<global>,1
444431,TYPE_DECL,,inc\til\bitmap.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\til\bitmap.hpp,inc\til\bitmap.hpp:<global>,,false,1,<global>,2
444436,TYPE_DECL,til.details._bitmap_const_iterator<Allocator>,,,"class _bitmap_const_iterator
        {
        public:
            using iterator_category = std::input_iterator_tag;
            using value_type = const til::rect;
            using difference_type = ptrdiff_t;
            using pointer = const til::rect*;
            using reference = const til::rect&;

            _bitmap_const_iterator(const dynamic_bitset<unsigned long long, Allocator>& values, til::rect rc, ptrdiff_t pos) :
                _values(values),
                _rc(rc),
                _pos(pos),
                _end(rc.size().area())
            {
                _calculateArea();
            }

            _bitmap_const_iterator& operator++()
            {
                _pos = _nextPos;
                _calculateArea();
                return (*this);
            }

            _bitmap_const_iterator operator++(int)
            {
                const auto prev = *this;
                ++*this;
                return prev;
            }

            constexpr b...",9,inc\til\bitmap.hpp,til.details._bitmap_const_iterator,,false,17,_bitmap_const_iterator,1
444437,TYPE_DECL,ANY,,,using iterator_category = std::input_iterator_tag;,13,inc\til\bitmap.hpp,iterator_category,,false,20,iterator_category,1
444438,TYPE_DECL,ANY,,,using value_type = const til::rect;,13,inc\til\bitmap.hpp,value_type,,false,21,value_type,2
444439,TYPE_DECL,ptrdiff_t,,,using difference_type = ptrdiff_t;,13,inc\til\bitmap.hpp,difference_type,,false,22,difference_type,3
444440,TYPE_DECL,ANY,,,using pointer = const til::rect*;,13,inc\til\bitmap.hpp,pointer,,false,23,pointer,4
444441,TYPE_DECL,ANY,,,using reference = const til::rect&;,13,inc\til\bitmap.hpp,reference,,false,24,reference,5
444650,TYPE_DECL,til.details.bitmap<Allocator>,,,"class bitmap
        {
        public:
            using allocator_type = Allocator;
            using const_iterator = details::_bitmap_const_iterator<allocator_type>;

        private:
            using run_allocator_type = typename std::allocator_traits<allocator_type>::template rebind_alloc<til::rect>;

        public:
            explicit bitmap(const allocator_type& allocator) noexcept :
                _alloc{ allocator },
                _sz{},
                _rc{},
                _bits{ _alloc },
                _runs{ _alloc }
            {
            }

            bitmap() noexcept :
                bitmap(allocator_type{})
            {
            }

            bitmap(til::size sz) :
                bitmap(sz, false, allocator_type{})
            {
            }

            bitmap(til::size sz, const allocator_type& allocator) :
                bitmap(sz, false, allocator)
            {
            }

            bitmap(til::size sz, bool fill, const allocator_typ...",9,inc\til\bitmap.hpp,til.details.bitmap,,false,137,bitmap,2
444651,TYPE_DECL,Allocator,,,using allocator_type = Allocator;,13,inc\til\bitmap.hpp,allocator_type,,false,140,allocator_type,1
444652,TYPE_DECL,ANY,,,using const_iterator = details::_bitmap_const_iterator<allocator_type>;,13,inc\til\bitmap.hpp,const_iterator,,false,141,const_iterator,2
444653,TYPE_DECL,ANY,,,using run_allocator_type = typename std::allocator_traits<allocator_type>::template rebind_alloc<til::rect>;,13,inc\til\bitmap.hpp,run_allocator_type,,false,144,run_allocator_type,3
445411,TYPE_DECL,,,,friend class ::BitmapTests,13,inc\til\bitmap.hpp,til.details.bitmap.BitmapTests,,false,546,BitmapTests,39
445412,TYPE_DECL,ANY,,,using bitmap = ::til::details::bitmap<>;,5,inc\til\bitmap.hpp,bitmap,,false,552,bitmap,2
445414,TYPE_DECL,ANY,,,using bitmap = ::til::details::bitmap<std::pmr::polymorphic_allocator<unsigned long long>>;,9,inc\til\bitmap.hpp,bitmap,,false,556,bitmap,1
445419,TYPE_DECL,,inc\til\bytes.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\til\bytes.hpp,inc\til\bytes.hpp:<global>,,false,1,<global>,2
445460,TYPE_DECL,ANY,,,using TargetType = typename Target::value_type;,9,inc\til\bytes.hpp,TargetType,,false,30,TargetType,1
445501,TYPE_DECL,ANY,,,using TargetType = typename Target::value_type;,9,inc\til\bytes.hpp,TargetType,,false,46,TargetType,1
445553,TYPE_DECL,,inc\til\coalesce.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\til\coalesce.hpp,inc\til\coalesce.hpp:<global>,,false,1,<global>,1
445634,TYPE_DECL,,inc\til\color.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\til\color.hpp,inc\til\color.hpp:<global>,,false,1,<global>,1
445638,TYPE_DECL,,,,"struct color
    {
        // Clang (10) has no trouble optimizing the COLORREF conversion operator, below, to a
        // simple 32-bit load with mask (!) even though it's a series of bit shifts across
        // multiple struct members.
        // CL (19.24) doesn't make the same optimization decision, and it emits three 8-bit loads
        // and some shifting.
        // In any case, the optimization only applies at -O2 (clang) and above.
        // Here, we leverage the spec-legality of using unions for type conversions and the
        // overlap of four uint8_ts and a uint32_t to make the conversion very obvious to
        // both compilers.
#pragma warning(push)
        // CL will complain about the both nameless and anonymous struct.
#pragma warning(disable : 4201)
        union
        {
            struct
            {
#if defined(__BYTE_ORDER__) && __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__ // Clang, GCC
                uint8_t a, b, g, r;
#else
                uint8_t r, g,...",5,inc\til\color.hpp,til.color,,false,14,color,1
445639,TYPE_DECL,,,,"union
        {
            struct
            {
#if defined(__BYTE_ORDER__) && __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__ // Clang, GCC
                uint8_t a, b, g, r;
#else
                uint8_t r, g, b, a;
#endif
            };
            uint32_t abgr;
        }",9,inc\til\color.hpp,til.color.anonymous_composite_type_0,,false,28,til.color.anonymous_composite_type_0,1
445640,TYPE_DECL,,,,"struct
            {
#if defined(__BYTE_ORDER__) && __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__ // Clang, GCC
                uint8_t a, b, g, r;
#else
                uint8_t r, g, b, a;
#endif
            }",13,inc\til\color.hpp,til.color.anonymous_composite_type_2.anonymous_composite_type_1,,false,30,til.color.anonymous_composite_type_2.anonymous_composite_type_1,1
445960,TYPE_DECL,,inc\til\enumset.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\til\enumset.hpp,inc\til\enumset.hpp:<global>,,false,1,<global>,1
445964,TYPE_DECL,"til.enumset<T,UnderlyingType>",,,"class enumset
    {
        static_assert(std::is_unsigned_v<UnderlyingType>);

    public:
        // Method Description:
        // - Constructs a new bitset with the given list of positions set to true.
        TIL_ENUMSET_VARARG
        constexpr enumset(Args... positions) noexcept :
            _data{ to_underlying(positions...) }
        {
        }

        // Method Description:
        // - Returns the underlying bit positions as a copy.
        constexpr UnderlyingType bits() const noexcept
        {
            return _data;
        }

        // Method Description:
        // - Returns the value of the bit at the given position.
        //   Throws std::out_of_range if it is not a valid position
        //   in the bitset.
        constexpr bool test(const T pos) const noexcept
        {
            const auto mask = to_underlying(pos);
            return (_data & mask) != 0;
        }

        // Method Description:
        // - Returns true if any of the bits are set t...",5,inc\til\enumset.hpp,til.enumset,,false,22,enumset,1
446148,TYPE_DECL,,,,"class env
    {
    private:
#ifdef UNIT_TESTING
        friend class ::EnvTests;
#endif

        std::map<std::wstring, std::wstring, til::wstring_case_insensitive_compare> _envMap{};

        // We make copies of the environment variable names to ensure they are null terminated.
        void get(wil::zwstring_view variable)
        {
            if (auto value = wil::TryGetEnvironmentVariableW<std::wstring>(variable.c_str()); !value.empty())
            {
                save_to_map(std::wstring{ variable }, std::move(value));
            }
        }

        void get_program_files()
        {
            wil::unique_hkey key;
            if (RegOpenKeyExW(HKEY_LOCAL_MACHINE, til::details::vars::reg::program_files_root.data(), 0, KEY_READ, &key) == ERROR_SUCCESS)
            {
                for (auto& [keyName, varName] : til::details::vars::program_files_map)
                {
                    auto value = til::details::wil_env::RegQueryValueExW<std::wstring, 256>(key.get(),...",5,inc\til\env.hpp,til.env,,false,157,env,2
446156,TYPE_DECL,,inc\til\env.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\til\env.hpp,inc\til\env.hpp:<global>,,false,1,<global>,4
446354,TYPE_DECL,,,,friend class ::EnvTests,9,inc\til\env.hpp,til.env.EnvTests,,false,161,EnvTests,1
447407,TYPE_DECL,,inc\til\flat_set.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\til\flat_set.hpp,inc\til\flat_set.hpp:<global>,,false,1,<global>,1
447421,TYPE_DECL,"til.linear_flat_set<T,size_t=2,size_t=1>",,,"struct linear_flat_set
    {
        static_assert(LoadFactor >= 2);
        static_assert(GrowthExponent >= 1);

        linear_flat_set() = default;

        linear_flat_set(const linear_flat_set&) = delete;
        linear_flat_set& operator=(const linear_flat_set&) = delete;

        linear_flat_set(linear_flat_set&& other) noexcept :
            _map{ std::move(other._map) },
            _capacity{ std::exchange(other._capacity, 0) },
            _load{ std::exchange(other._load, 0) },
            _shift{ std::exchange(other._shift, initialShift) },
            _mask{ std::exchange(other._mask, 0) }
        {
        }

        linear_flat_set& operator=(linear_flat_set&& other) noexcept
        {
            _map = std::move(other._map);
            _capacity = std::exchange(other._capacity, 0);
            _load = std::exchange(other._load, 0);
            _shift = std::exchange(other._shift, initialShift);
            _mask = std::exchange(other._mask, 0);
            return ...",5,inc\til\flat_set.hpp,til.linear_flat_set,,false,40,linear_flat_set,2
447807,TYPE_DECL,,inc\til\generational.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\til\generational.hpp,inc\til\generational.hpp:<global>,,false,1,<global>,1
447811,TYPE_DECL,,,,"struct generation_t
    {
        auto operator<=>(const generation_t&) const = default;

        constexpr void bump() noexcept
        {
            _value++;
        }

        uint32_t _value = 0;
    }",5,inc\til\generational.hpp,til.generation_t,,false,8,generation_t,1
447827,TYPE_DECL,til.generational<T>,,,"struct generational
    {
        generational() = default;
        explicit constexpr generational(auto&&... args) :
            _value{ std::forward<decltype(args)>(args)... } {}
        explicit constexpr generational(generation_t generation, auto&&... args) :
            _generation{ generation },
            _value{ std::forward<decltype(args)>(args)... } {}

        constexpr bool operator==(const generational& rhs) const noexcept { return generation() == rhs.generation(); }
        constexpr bool operator!=(const generational& rhs) const noexcept { return generation() != rhs.generation(); }

        constexpr generation_t generation() const noexcept
        {
            return _generation;
        }

        [[nodiscard]] constexpr const T* operator->() const noexcept
        {
            return &_value;
        }

        [[nodiscard]] constexpr const T& operator*() const noexcept
        {
            return _value;
        }

        [[nodiscard]] constexpr T* write() no...",5,inc\til\generational.hpp,til.generational,,false,32,generational,2
447908,TYPE_DECL,,inc\til\hash.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\til\hash.hpp,inc\til\hash.hpp:<global>,,false,1,<global>,1
447912,TYPE_DECL,til.hash_trait<T>,,,struct hash_trait,5,inc\til\hash.hpp,til.hash_trait,,false,29,hash_trait,1
447913,TYPE_DECL,,,,"struct hasher
    {
        constexpr hasher() = default;
        explicit constexpr hasher(size_t state) noexcept :
            _hash{ state } {}

        template<typename T>
        hasher& write(const T& v) noexcept
        {
            hash_trait<T>{}(*this, v);
            return *this;
        }

        template<typename T, typename = std::enable_if_t<std::has_unique_object_representations_v<T>>>
        hasher& write(const T* data, size_t count) noexcept
        {
            return write(static_cast<const void*>(data), sizeof(T) * count);
        }

        hasher& write(const void* data, size_t len) noexcept
        {
            _hash = _wyhash(data, len, _hash);
            return *this;
        }

        constexpr size_t finalize() const noexcept
        {
            return _hash;
        }

    private:
#if defined(TIL_HASH_32BIT)

        static uint32_t _wyr24(const uint8_t* p, uint32_t k) noexcept
        {
            return static_cast<uint32_t>(p[0]) << 16 | ...",5,inc\til\hash.hpp,til.hasher,,false,31,hasher,2
448310,TYPE_DECL,"til.details.conditionally_enabled_hash_trait<T,bool>",,,"struct conditionally_enabled_hash_trait
        {
            void operator()(hasher& h, const T& v) const noexcept
            {
                h.write(static_cast<const void*>(&v), sizeof(T));
            }
        }",9,inc\til\hash.hpp,til.details.conditionally_enabled_hash_trait,,false,212,conditionally_enabled_hash_trait,1
448327,TYPE_DECL,"til.details.conditionally_enabled_hash_trait<T,false><T>",,,"struct conditionally_enabled_hash_trait<T, false>
        {
            conditionally_enabled_hash_trait() = delete;
            conditionally_enabled_hash_trait(const conditionally_enabled_hash_trait&) = delete;
            conditionally_enabled_hash_trait(conditionally_enabled_hash_trait&&) = delete;
            conditionally_enabled_hash_trait& operator=(const conditionally_enabled_hash_trait&) = delete;
            conditionally_enabled_hash_trait& operator=(conditionally_enabled_hash_trait&&) = delete;
        }",9,inc\til\hash.hpp,"til.details.conditionally_enabled_hash_trait<T,false>",,false,221,"conditionally_enabled_hash_trait<T,false>",2
448352,TYPE_DECL,til.hash_trait<T>,,,"struct hash_trait : details::conditionally_enabled_hash_trait<T, std::has_unique_object_representations_v<T>>
    {
    }",5,inc\til\hash.hpp,til.hash_trait,"details.conditionally_enabled_hash_trait<T, std.has_unique_object_representations_v<T>>",false,232,hash_trait,4
448353,TYPE_DECL,til.hash_trait<float><>,,,"struct hash_trait<float>
    {
        void operator()(hasher& h, float v) const noexcept
        {
            v = v == 0.0f ? 0.0f : v; // map -0 to 0
            h.write(static_cast<const void*>(&v), sizeof(v));
        }
    }",5,inc\til\hash.hpp,til.hash_trait<float>,,false,237,hash_trait<float>,5
448378,TYPE_DECL,til.hash_trait<double><>,,,"struct hash_trait<double>
    {
        void operator()(hasher& h, double v) const noexcept
        {
            v = v == 0.0 ? 0.0 : v; // map -0 to 0
            h.write(static_cast<const void*>(&v), sizeof(v));
        }
    }",5,inc\til\hash.hpp,til.hash_trait<double>,,false,247,hash_trait<double>,6
448403,TYPE_DECL,"til.hash_trait<std.basic_string<T,CharTraits,Allocator>><T,CharTraits,Allocator>",,,"struct hash_trait<std::basic_string<T, CharTraits, Allocator>>
    {
        void operator()(hasher& h, const std::basic_string<T, CharTraits, Allocator>& v) const noexcept
        {
            h.write(v.data(), v.size());
        }
    }",5,inc\til\hash.hpp,"til.hash_trait<std.basic_string<T,CharTraits,Allocator>>",,false,257,"hash_trait<std::basic_string<T,CharTraits,Allocator>>",7
448422,TYPE_DECL,"til.hash_trait<std.basic_string_view<T,CharTraits>><T,CharTraits>",,,"struct hash_trait<std::basic_string_view<T, CharTraits>>
    {
        void operator()(hasher& h, const std::basic_string_view<T, CharTraits>& v) const noexcept
        {
            h.write(v.data(), v.size());
        }
    }",5,inc\til\hash.hpp,"til.hash_trait<std.basic_string_view<T,CharTraits>>",,false,266,"hash_trait<std::basic_string_view<T,CharTraits>>",8
448479,TYPE_DECL,,inc\til\latch.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\til\latch.hpp,inc\til\latch.hpp:<global>,,false,1,<global>,2
448483,TYPE_DECL,,,,"class latch
    {
    public:
        [[nodiscard]] static constexpr ptrdiff_t max() noexcept
        {
            return std::numeric_limits<ptrdiff_t>::max();
        }

        constexpr explicit latch(const ptrdiff_t expected) noexcept :
            counter{ expected }
        {
            assert(expected >= 0);
        }

        latch(const latch&) = delete;
        latch& operator=(const latch&) = delete;

        void count_down(const ptrdiff_t n = 1) noexcept
        {
            assert(n >= 0);

            const auto old = counter.fetch_sub(n, std::memory_order_release);
            if (old == n)
            {
                WakeByAddressAll(&counter);
                return;
            }

            assert(old > n);
        }

        [[nodiscard]] bool try_wait() const noexcept
        {
            return counter.load(std::memory_order_acquire) == 0;
        }

        void wait() const noexcept
        {
            while (true)
            {
                aut...",5,inc\til\latch.hpp,til.latch,,false,15,latch,1
448647,TYPE_DECL,,inc\til\math.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\til\math.hpp,inc\til\math.hpp:<global>,,false,1,<global>,1
448680,TYPE_DECL,,,,"struct ceiling_t
            {
                template<typename O, typename T>
                static constexpr O cast(T val)
                {
                    if constexpr (std::is_floating_point_v<T>)
                    {
                        return narrow_float<O, T>(std::ceil(val));
                    }
                    else
                    {
                        return gsl::narrow<O>(val);
                    }
                }
            }",13,inc\til\math.hpp,til.math.details.ceiling_t,,false,27,ceiling_t,2
448708,TYPE_DECL,,,,"struct flooring_t
            {
                template<typename O, typename T>
                static constexpr O cast(T val)
                {
                    if constexpr (std::is_floating_point_v<T>)
                    {
                        return narrow_float<O, T>(std::floor(val));
                    }
                    else
                    {
                        return gsl::narrow<O>(val);
                    }
                }
            }",13,inc\til\math.hpp,til.math.details.flooring_t,,false,43,flooring_t,3
448736,TYPE_DECL,,,,"struct rounding_t
            {
                template<typename O, typename T>
                static constexpr O cast(T val)
                {
                    if constexpr (std::is_floating_point_v<T>)
                    {
                        return narrow_float<O, T>(std::round(val));
                    }
                    else
                    {
                        return gsl::narrow<O>(val);
                    }
                }
            }",13,inc\til\math.hpp,til.math.details.rounding_t,,false,59,rounding_t,4
448808,TYPE_DECL,,inc\til\mutex.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\til\mutex.hpp,inc\til\mutex.hpp:<global>,,false,1,<global>,1
448813,TYPE_DECL,"til.details.shared_mutex_guard<T,Lock>",,,"class shared_mutex_guard
        {
        public:
#pragma warning(suppress : 26447) // The function is declared 'noexcept' but calls function 'shared_mutex>()' which may throw exceptions (f.6).)
            shared_mutex_guard(T& data, std::shared_mutex& mutex) noexcept :
                _data{ data },
                _lock{ mutex }
            {
            }

            shared_mutex_guard(const shared_mutex_guard&) = delete;
            shared_mutex_guard& operator=(const shared_mutex_guard&) = delete;

            shared_mutex_guard(shared_mutex_guard&&) = default;
            shared_mutex_guard& operator=(shared_mutex_guard&&) = default;

            [[nodiscard]] constexpr T* operator->() const noexcept
            {
                return &_data;
            }

            [[nodiscard]] constexpr T& operator*() const& noexcept
            {
                return _data;
            }

            [[nodiscard]] constexpr T&& operator*() const&& noexcept
            {
         ...",9,inc\til\mutex.hpp,til.details.shared_mutex_guard,,false,9,shared_mutex_guard,1
448865,TYPE_DECL,til.shared_mutex<T>,,,"class shared_mutex
    {
    public:
        // An exclusive, read/write reference to a til::shared_mutex's underlying data.
        // If you drop the guard the mutex is unlocked.
        using guard = details::shared_mutex_guard<T, std::unique_lock<std::shared_mutex>>;

        // A shared, read-only reference to a til::shared_mutex's underlying data.
        // If you drop the shared_guard the mutex is unlocked.
        using shared_guard = details::shared_mutex_guard<const T, std::shared_lock<std::shared_mutex>>;

        shared_mutex() = default;

        template<typename... Args>
        shared_mutex(Args&&... args) :
            _data{ std::forward<Args>(args)... }
        {
        }

        // Acquire an exclusive, read/write reference to T.
        // For instance:
        //   .lock()->foo = bar;
        [[nodiscard]] guard lock() const noexcept
        {
            return { _data, _mutex };
        }

        // Acquire a shared, read-only reference to T.
        // F...",5,inc\til\mutex.hpp,til.shared_mutex,,false,70,shared_mutex,2
448866,TYPE_DECL,ANY,,,"using guard = details::shared_mutex_guard<T, std::unique_lock<std::shared_mutex>>;",9,inc\til\mutex.hpp,guard,,false,75,guard,1
448867,TYPE_DECL,ANY,,,"using shared_guard = details::shared_mutex_guard<const T, std::shared_lock<std::shared_mutex>>;",9,inc\til\mutex.hpp,shared_guard,,false,79,shared_guard,2
448898,TYPE_DECL,,inc\til\operators.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\til\operators.hpp,inc\til\operators.hpp:<global>,,false,1,<global>,1
449048,TYPE_DECL,,inc\til\pmr.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\til\pmr.hpp,inc\til\pmr.hpp:<global>,,false,1,<global>,1
449066,TYPE_DECL,,inc\til\point.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\til\point.hpp,inc\til\point.hpp:<global>,,false,1,<global>,1
449070,TYPE_DECL,int32_t,,,using CoordType = int32_t;,5,inc\til\point.hpp,CoordType,,false,8,CoordType,1
449100,TYPE_DECL,,,,"struct point
    {
        CoordType x = 0;
        CoordType y = 0;

        constexpr point() noexcept = default;

        constexpr point(CoordType x, CoordType y) noexcept :
            x{ x }, y{ y }
        {
        }

        // This template will convert to point from floating-point args;
        // a math type is required. If you _don't_ provide one, you're going to
        // get a compile-time error about ""cannot convert from initializer-list to til::point""
        template<typename TilMath, typename T>
        constexpr point(TilMath, const T x, const T y) :
            x{ TilMath::template cast<CoordType>(x) }, y{ TilMath::template cast<CoordType>(y) }
        {
        }

        constexpr bool operator==(const point rhs) const noexcept
        {
            // `__builtin_memcmp` isn't an official standard, but it's the
            // only way at the time of writing to get a constexpr `memcmp`.
            return __builtin_memcmp(this, &rhs, sizeof(rhs)) == 0;
       ...",5,inc\til\point.hpp,til.point,,false,26,point,7
449658,TYPE_DECL,,,,"struct point_span
    {
        til::point start;
        til::point end;
    }",5,inc\til\point.hpp,til.point_span,,false,275,point_span,11
449665,TYPE_DECL,,inc\til\rand.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\til\rand.hpp,inc\til\rand.hpp:<global>,,false,1,<global>,2
449671,TYPE_DECL,,,,"struct RtlGenRandomLoader
        {
            RtlGenRandomLoader() noexcept :
                // The documentation states:
                //   This function has no associated import library. This function is available
                //   as a resource named SystemFunction036 in Advapi32.dll. You must use the
                //   LoadLibrary and GetProcAddress functions to dynamically link to Advapi32.dll.
                //
                // There's two downsides to using advapi32.dll however:
                // * The actual implementation resides in cryptbase.dll and...
                // * In older versions of Windows (7 and older) advapi32.dll didn't use forwarding to
                //   cryptbase, instead it was using LoadLibrary()/GetProcAddress() on every call.
                // * advapi32.dll doesn't exist on MinWin, cryptbase.dll however does.
                module{ LoadLibraryExW(L""cryptbase.dll"", nullptr, LOAD_LIBRARY_SEARCH_SYSTEM32) },
                proc{ reint...",9,inc\til\rand.hpp,til.details.RtlGenRandomLoader,,false,12,RtlGenRandomLoader,2
449726,TYPE_DECL,,inc\til\rect.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\til\rect.hpp,inc\til\rect.hpp:<global>,,false,1,<global>,7
449730,TYPE_DECL,,,,"struct inclusive_rect
    {
        CoordType left = 0;
        CoordType top = 0;
        CoordType right = 0;
        CoordType bottom = 0;

        constexpr bool operator==(const inclusive_rect& rhs) const noexcept
        {
            return __builtin_memcmp(this, &rhs, sizeof(rhs)) == 0;
        }

        constexpr bool operator!=(const inclusive_rect& rhs) const noexcept
        {
            return __builtin_memcmp(this, &rhs, sizeof(rhs)) != 0;
        }

        explicit constexpr operator bool() const noexcept
        {
            return (left >= 0) & (top >= 0) &
                   (right >= left) & (bottom >= top);
        }
    }",5,inc\til\rect.hpp,til.inclusive_rect,,false,15,inclusive_rect,1
449882,TYPE_DECL,,,,"class _rectangle_const_iterator
        {
        public:
            constexpr _rectangle_const_iterator(point topLeft, point bottomRight) :
                _topLeft{ topLeft },
                _bottomRight{ bottomRight },
                _current{ topLeft }
            {
            }

            constexpr _rectangle_const_iterator(point topLeft, point bottomRight, point start) :
                _topLeft{ topLeft },
                _bottomRight{ bottomRight },
                _current{ start }
            {
            }

            _rectangle_const_iterator& operator++()
            {
                const auto nextX = details::extract(::base::CheckAdd(_current.x, 1));

                if (nextX >= _bottomRight.x)
                {
                    const auto nextY = details::extract(::base::CheckAdd(_current.y, 1));
                    // Note for the standard Left-to-Right, Top-to-Bottom walk,
                    // the end position is one cell below the bottom left.
     ...",9,inc\til\rect.hpp,til.details._rectangle_const_iterator,,false,73,_rectangle_const_iterator,1
450005,TYPE_DECL,,,,"struct rect
    {
        using const_iterator = details::_rectangle_const_iterator;

        CoordType left = 0;
        CoordType top = 0;
        CoordType right = 0;
        CoordType bottom = 0;

        constexpr rect() noexcept = default;

        constexpr rect(CoordType left, CoordType top, CoordType right, CoordType bottom) noexcept :
            left{ left }, top{ top }, right{ right }, bottom{ bottom }
        {
        }

        // This template will convert to point from floating-point args;
        // a math type is required. If you _don't_ provide one, you're going to
        // get a compile-time error about ""cannot convert from initializer-list to til::point""
        template<typename TilMath, typename T>
        constexpr rect(TilMath, T left, T top, T right, T bottom) :
            left{ TilMath::template cast<CoordType>(left) },
            top{ TilMath::template cast<CoordType>(top) },
            right{ TilMath::template cast<CoordType>(right) },
            ...",5,inc\til\rect.hpp,til.rect,,false,144,rect,6
450006,TYPE_DECL,ANY,,,using const_iterator = details::_rectangle_const_iterator;,9,inc\til\rect.hpp,const_iterator,,false,146,const_iterator,1
451195,TYPE_DECL,,inc\til\replace.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\til\replace.hpp,inc\til\replace.hpp:<global>,,false,1,<global>,1
451200,TYPE_DECL,til.details.view_type_oracle<T>,,,"struct view_type_oracle
        {
        }",9,inc\til\replace.hpp,til.details.view_type_oracle,,false,11,view_type_oracle,1
451201,TYPE_DECL,til.details.view_type_oracle<std.string><>,,,"struct view_type_oracle<std::string>
        {
            using type = std::string_view;
        }",9,inc\til\replace.hpp,til.details.view_type_oracle<std.string>,,false,16,view_type_oracle<std::string>,2
451202,TYPE_DECL,ANY,,,using type = std::string_view;,13,inc\til\replace.hpp,type,,false,18,type,1
451203,TYPE_DECL,til.details.view_type_oracle<std.wstring><>,,,"struct view_type_oracle<std::wstring>
        {
            using type = std::wstring_view;
        }",9,inc\til\replace.hpp,til.details.view_type_oracle<std.wstring>,,false,22,view_type_oracle<std::wstring>,3
451204,TYPE_DECL,ANY,,,using type = std::wstring_view;,13,inc\til\replace.hpp,type,,false,24,type,1
451265,TYPE_DECL,,inc\til\rle.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\til\rle.hpp,inc\til\rle.hpp:<global>,,false,1,<global>,2
451270,TYPE_DECL,"til.details.rle_iterator<T,S,ParentIt>",,,"class rle_iterator
        {
        public:
            using iterator_category = std::random_access_iterator_tag;
            using value_type = T;
            using pointer = T*;
            using reference = T&;
            using size_type = S;
            using difference_type = typename ParentIt::difference_type;

            // TODO GH#10135: Enable checked iterators for _ITERATOR_DEBUG_LEVEL != 0.
            explicit rle_iterator(ParentIt&& it) noexcept :
                _it{ std::forward<ParentIt>(it) },
                _pos{ 0 }
            {
            }

            [[nodiscard]] reference operator*() const noexcept
            {
                return _it->value;
            }

            [[nodiscard]] pointer operator->() const noexcept
            {
                return &operator*();
            }

            rle_iterator& operator++() noexcept
            {
                ++_pos;
                if (_pos == _it->length)
                {
                    ++...",9,inc\til\rle.hpp,til.details.rle_iterator,,false,17,rle_iterator,1
451271,TYPE_DECL,ANY,,,using iterator_category = std::random_access_iterator_tag;,13,inc\til\rle.hpp,iterator_category,,false,20,iterator_category,1
451272,TYPE_DECL,T,,,using value_type = T;,13,inc\til\rle.hpp,value_type,,false,21,value_type,2
451273,TYPE_DECL,T*,,,using pointer = T*;,13,inc\til\rle.hpp,pointer,,false,22,pointer,3
451274,TYPE_DECL,T &,,,using reference = T&;,13,inc\til\rle.hpp,reference,,false,23,reference,4
451275,TYPE_DECL,S,,,using size_type = S;,13,inc\til\rle.hpp,size_type,,false,24,size_type,5
451276,TYPE_DECL,ANY,,,using difference_type = typename ParentIt::difference_type;,13,inc\til\rle.hpp,difference_type,,false,25,difference_type,6
451668,TYPE_DECL,"til.rle_pair<T,S>",,,"struct rle_pair
    {
        using value_type = T;
        using size_type = S;

        rle_pair() = default;

        rle_pair(const rle_pair&) = default;
        rle_pair& operator=(const rle_pair&) = default;

        rle_pair(rle_pair&&) = default;
        rle_pair& operator=(rle_pair&&) = default;

        constexpr rle_pair(const T& value, const S& length) noexcept(std::is_nothrow_copy_constructible_v<T>&& std::is_nothrow_copy_constructible_v<S>) :
            value(value), length(length)
        {
        }

        constexpr rle_pair(T&& value, S&& length) noexcept(std::is_nothrow_constructible_v<T>&& std::is_nothrow_constructible_v<S>) :
            value(std::forward<T>(value)), length(std::forward<S>(length))
        {
        }

        constexpr void swap(rle_pair& other) noexcept(std::is_nothrow_swappable_v<T>&& std::is_nothrow_swappable_v<S>)
        {
            if (this != std::addressof(other))
            {
                std::swap(value, other.value);
       ...",5,inc\til\rle.hpp,til.rle_pair,,false,243,rle_pair,2
451669,TYPE_DECL,T,,,using value_type = T;,9,inc\til\rle.hpp,value_type,,false,245,value_type,1
451670,TYPE_DECL,S,,,using size_type = S;,9,inc\til\rle.hpp,size_type,,false,246,size_type,2
451782,TYPE_DECL,"til.basic_rle<T,S,Container>",,,"class basic_rle
    {
    public:
        using value_type = T;
        using allocator_type = typename Container::allocator_type;
        using pointer = typename Container::pointer;
        using const_pointer = typename Container::const_pointer;
        using reference = T&;
        using const_reference = const T&;
        using size_type = S;
        using difference_type = S;

        using const_iterator = details::rle_iterator<const T, S, typename Container::const_iterator>;
        using const_reverse_iterator = std::reverse_iterator<const_iterator>;

        using rle_type = rle_pair<value_type, size_type>;
        using container = Container;

        // We don't check anywhere whether a size_type value is negative.
        // Having signed integers would break that.
        static_assert(std::is_unsigned_v<size_type>, ""the run length S must be unsigned"");
        static_assert(std::is_same_v<rle_type, typename Container::value_type>, ""the value type of the Container must...",5,inc\til\rle.hpp,til.basic_rle,,false,292,basic_rle,5
451783,TYPE_DECL,T,,,using value_type = T;,9,inc\til\rle.hpp,value_type,,false,295,value_type,1
451784,TYPE_DECL,ANY,,,using allocator_type = typename Container::allocator_type;,9,inc\til\rle.hpp,allocator_type,,false,296,allocator_type,2
451785,TYPE_DECL,ANY,,,using pointer = typename Container::pointer;,9,inc\til\rle.hpp,pointer,,false,297,pointer,3
451786,TYPE_DECL,ANY,,,using const_pointer = typename Container::const_pointer;,9,inc\til\rle.hpp,const_pointer,,false,298,const_pointer,4
451787,TYPE_DECL,T &,,,using reference = T&;,9,inc\til\rle.hpp,reference,,false,299,reference,5
451788,TYPE_DECL,T &,,,using const_reference = const T&;,9,inc\til\rle.hpp,const_reference,,false,300,const_reference,6
451789,TYPE_DECL,S,,,using size_type = S;,9,inc\til\rle.hpp,size_type,,false,301,size_type,7
451790,TYPE_DECL,S,,,using difference_type = S;,9,inc\til\rle.hpp,difference_type,,false,302,difference_type,8
451791,TYPE_DECL,ANY,,,"using const_iterator = details::rle_iterator<const T, S, typename Container::const_iterator>;",9,inc\til\rle.hpp,const_iterator,,false,304,const_iterator,9
451792,TYPE_DECL,ANY,,,using const_reverse_iterator = std::reverse_iterator<const_iterator>;,9,inc\til\rle.hpp,const_reverse_iterator,,false,305,const_reverse_iterator,10
451793,TYPE_DECL,"rle_pair<value_type, size_type>",,,"using rle_type = rle_pair<value_type, size_type>;",9,inc\til\rle.hpp,rle_type,,false,307,rle_type,11
451794,TYPE_DECL,Container,,,using container = Container;,9,inc\til\rle.hpp,container,,false,308,container,12
452326,TYPE_DECL,til.basic_rle.rle_scanner<It>,,,"struct rle_scanner
        {
            explicit rle_scanner(It begin, It end) noexcept :
                it(std::move(begin)), end(std::move(end)) {}

            std::pair<It, size_type> scan(size_type index) noexcept
            {
                run_pos = 0;

                for (; it != end; ++it)
                {
                    const size_type new_total = total + it->length;
                    if (new_total > index)
                    {
                        run_pos = index - total;
                        break;
                    }

                    total = new_total;
                }

                return { it, run_pos };
            }

        private:
            It it;
            const It end;
            size_type run_pos = 0;
            size_type total = 0;
        }",9,inc\til\rle.hpp,til.basic_rle.rle_scanner,,false,623,rle_scanner,46
452920,TYPE_DECL,,,,friend class ::RunLengthEncodingTests,9,inc\til\rle.hpp,til.basic_rle.RunLengthEncodingTests,,false,1030,RunLengthEncodingTests,53
452940,TYPE_DECL,ANY,,,"using rle = basic_rle<T, S, std::vector<rle_pair<T, S>>>;",5,inc\til\rle.hpp,rle,,false,1038,rle,6
452941,TYPE_DECL,ANY,,,"using small_rle = basic_rle<T, S, til::small_vector<rle_pair<T, S>, N>>;",5,inc\til\rle.hpp,small_rle,,false,1041,small_rle,7
452946,TYPE_DECL,,inc\til\size.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\til\size.hpp,inc\til\size.hpp:<global>,,false,1,<global>,2
452950,TYPE_DECL,,,,"struct size
    {
        constexpr size() noexcept = default;

        constexpr size(CoordType width, CoordType height) noexcept :
            width{ width }, height{ height }
        {
        }

        // This template will convert to size from floating-point args;
        // a math type is required. If you _don't_ provide one, you're going to
        // get a compile-time error about ""cannot convert from initializer-list to til::size""
        template<typename TilMath, typename T>
        constexpr size(TilMath, const T width, const T height) :
            width{ TilMath::template cast<CoordType>(width) }, height{ TilMath::template cast<CoordType>(height) }
        {
        }

        constexpr bool operator==(const size rhs) const noexcept
        {
            // `__builtin_memcmp` isn't an official standard, but it's the
            // only way at the time of writing to get a constexpr `memcmp`.
            return __builtin_memcmp(this, &rhs, sizeof(rhs)) == 0;
        }

...",5,inc\til\size.hpp,til.size,,false,10,size,1
453345,TYPE_DECL,"til.small_vector<T,size_t>",,,"class small_vector
    {
    public:
        static_assert(N != 0, ""A small_vector without a small buffer isn't very useful"");
        static_assert(std::is_nothrow_move_assignable_v<T>, ""_generic_insert doesn't guard against exceptions"");
        static_assert(std::is_nothrow_move_constructible_v<T>, ""_grow/_generic_insert don't guard against exceptions"");

        using value_type = T;
        using allocator_type = std::allocator<T>;
        using pointer = T*;
        using const_pointer = const T*;
        using reference = T&;
        using const_reference = const T&;
        using size_type = size_t;
        using difference_type = ptrdiff_t;

        using iterator = small_vector_iterator<T>;
        using const_iterator = small_vector_const_iterator<T>;
        using reverse_iterator = std::reverse_iterator<iterator>;
        using const_reverse_iterator = std::reverse_iterator<const_iterator>;

        small_vector() noexcept :
            _data{ &_buffer[0] },
           ...",5,inc\til\small_vector.hpp,til.small_vector,,false,317,small_vector,3
453426,TYPE_DECL,,inc\til\small_vector.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\til\small_vector.hpp,inc\til\small_vector.hpp:<global>,,false,1,<global>,1
453430,TYPE_DECL,til.small_vector_const_iterator<T>,,,"struct small_vector_const_iterator
    {
        using iterator_concept = std::contiguous_iterator_tag;
        using iterator_category = std::random_access_iterator_tag;
        using value_type = T;
        using difference_type = std::ptrdiff_t;
        using pointer = const T*;
        using reference = const T&;

        small_vector_const_iterator() = default;

#if _ITERATOR_DEBUG_LEVEL == 0
        constexpr small_vector_const_iterator(pointer ptr) :
            _ptr{ ptr }
        {
        }
#else // _ITERATOR_DEBUG_LEVEL == 0
        constexpr small_vector_const_iterator(pointer ptr, pointer begin, pointer end) :
            _ptr{ ptr },
            _begin{ begin },
            _end{ end }
        {
        }
#endif // _ITERATOR_DEBUG_LEVEL == 0

        [[nodiscard]] constexpr reference operator*() const noexcept
        {
#if _ITERATOR_DEBUG_LEVEL >= 1
            _STL_VERIFY(_begin, ""cannot dereference value-initialized iterator"");
            _STL_VERIFY(_ptr < _end, ""...",5,inc\til\small_vector.hpp,til.small_vector_const_iterator,,false,26,small_vector_const_iterator,1
453431,TYPE_DECL,ANY,,,using iterator_concept = std::contiguous_iterator_tag;,9,inc\til\small_vector.hpp,iterator_concept,,false,28,iterator_concept,1
453432,TYPE_DECL,ANY,,,using iterator_category = std::random_access_iterator_tag;,9,inc\til\small_vector.hpp,iterator_category,,false,29,iterator_category,2
453433,TYPE_DECL,T,,,using value_type = T;,9,inc\til\small_vector.hpp,value_type,,false,30,value_type,3
453434,TYPE_DECL,ANY,,,using difference_type = std::ptrdiff_t;,9,inc\til\small_vector.hpp,difference_type,,false,31,difference_type,4
453435,TYPE_DECL,T,,,using pointer = const T*;,9,inc\til\small_vector.hpp,pointer,,false,32,pointer,5
453436,TYPE_DECL,T &,,,using reference = const T&;,9,inc\til\small_vector.hpp,reference,,false,33,reference,6
453625,TYPE_DECL,small_vector_const_iterator,,,using _Prevent_inheriting_unwrap = small_vector_const_iterator;,9,inc\til\small_vector.hpp,_Prevent_inheriting_unwrap,,false,194,_Prevent_inheriting_unwrap,26
453662,TYPE_DECL,til.small_vector_iterator<T>,,,"struct small_vector_iterator : small_vector_const_iterator<T>
    {
        using base = small_vector_const_iterator<T>;

        using iterator_concept = std::contiguous_iterator_tag;
        using iterator_category = std::random_access_iterator_tag;
        using value_type = T;
        using difference_type = std::ptrdiff_t;
        using pointer = T*;
        using reference = T&;

        using base::base;

        [[nodiscard]] constexpr reference operator*() const noexcept
        {
#pragma warning(suppress : 26492) // Don't use const_cast to cast away const or volatile (type.3).
            return const_cast<reference>(base::operator*());
        }

        [[nodiscard]] constexpr pointer operator->() const noexcept
        {
#pragma warning(suppress : 26492) // Don't use const_cast to cast away const or volatile (type.3).
            return const_cast<pointer>(base::operator->());
        }

        constexpr small_vector_iterator& operator++() noexcept
        {
          ...",5,inc\til\small_vector.hpp,til.small_vector_iterator,small_vector_const_iterator<T>,false,217,small_vector_iterator,2
453663,TYPE_DECL,small_vector_const_iterator<T>,,,using base = small_vector_const_iterator<T>;,9,inc\til\small_vector.hpp,base,,false,219,base,1
453664,TYPE_DECL,ANY,,,using iterator_concept = std::contiguous_iterator_tag;,9,inc\til\small_vector.hpp,iterator_concept,,false,221,iterator_concept,2
453665,TYPE_DECL,ANY,,,using iterator_category = std::random_access_iterator_tag;,9,inc\til\small_vector.hpp,iterator_category,,false,222,iterator_category,3
453666,TYPE_DECL,T,,,using value_type = T;,9,inc\til\small_vector.hpp,value_type,,false,223,value_type,4
453667,TYPE_DECL,ANY,,,using difference_type = std::ptrdiff_t;,9,inc\til\small_vector.hpp,difference_type,,false,224,difference_type,5
453668,TYPE_DECL,T*,,,using pointer = T*;,9,inc\til\small_vector.hpp,pointer,,false,225,pointer,6
453669,TYPE_DECL,T &,,,using reference = T&;,9,inc\til\small_vector.hpp,reference,,false,226,reference,7
453826,TYPE_DECL,small_vector_iterator,,,using _Prevent_inheriting_unwrap = small_vector_iterator;,9,inc\til\small_vector.hpp,_Prevent_inheriting_unwrap,,false,307,_Prevent_inheriting_unwrap,20
453838,TYPE_DECL,T,,,using value_type = T;,9,inc\til\small_vector.hpp,value_type,,false,324,value_type,1
453839,TYPE_DECL,ANY,,,using allocator_type = std::allocator<T>;,9,inc\til\small_vector.hpp,allocator_type,,false,325,allocator_type,2
453840,TYPE_DECL,T*,,,using pointer = T*;,9,inc\til\small_vector.hpp,pointer,,false,326,pointer,3
453841,TYPE_DECL,T,,,using const_pointer = const T*;,9,inc\til\small_vector.hpp,const_pointer,,false,327,const_pointer,4
453842,TYPE_DECL,T &,,,using reference = T&;,9,inc\til\small_vector.hpp,reference,,false,328,reference,5
453843,TYPE_DECL,T &,,,using const_reference = const T&;,9,inc\til\small_vector.hpp,const_reference,,false,329,const_reference,6
453844,TYPE_DECL,size_t,,,using size_type = size_t;,9,inc\til\small_vector.hpp,size_type,,false,330,size_type,7
453845,TYPE_DECL,ptrdiff_t,,,using difference_type = ptrdiff_t;,9,inc\til\small_vector.hpp,difference_type,,false,331,difference_type,8
453846,TYPE_DECL,small_vector_iterator<T>,,,using iterator = small_vector_iterator<T>;,9,inc\til\small_vector.hpp,iterator,,false,333,iterator,9
453847,TYPE_DECL,small_vector_const_iterator<T>,,,using const_iterator = small_vector_const_iterator<T>;,9,inc\til\small_vector.hpp,const_iterator,,false,334,const_iterator,10
453848,TYPE_DECL,ANY,,,using reverse_iterator = std::reverse_iterator<iterator>;,9,inc\til\small_vector.hpp,reverse_iterator,,false,335,reverse_iterator,11
453849,TYPE_DECL,ANY,,,using const_reverse_iterator = std::reverse_iterator<const_iterator>;,9,inc\til\small_vector.hpp,const_reverse_iterator,,false,336,const_reverse_iterator,12
455035,TYPE_DECL,,inc\til\some.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\til\some.hpp,inc\til\some.hpp:<global>,,false,1,<global>,2
455039,TYPE_DECL,"til.some<T,size_t>",,,"class some
    {
    private:
        std::array<T, N> _array;
        size_t _used;

#ifdef UNIT_TESTING
        friend class SomeTests;
#endif

    public:
        using value_type = T;
        using size_type = size_t;
        using difference_type = ptrdiff_t;
        using pointer = T*;
        using const_pointer = const T*;
        using reference = T&;
        using const_reference = const T&;

        using iterator = typename decltype(_array)::iterator;
        using const_iterator = typename decltype(_array)::const_iterator;

        using reverse_iterator = typename decltype(_array)::reverse_iterator;
        using const_reverse_iterator = typename decltype(_array)::const_reverse_iterator;

        constexpr some() noexcept :
            _array{},
            _used{ 0 }
        {
        }

        constexpr some(std::initializer_list<T> init)
        {
            if (init.size() > N)
            {
                _invalidArg();
            }

            std::copy(init...",5,inc\til\some.hpp,til.some,,false,11,some,1
455042,TYPE_DECL,,,,friend class SomeTests,9,inc\til\some.hpp,til.some.SomeTests,,false,18,SomeTests,3
455043,TYPE_DECL,T,,,using value_type = T;,9,inc\til\some.hpp,value_type,,false,22,value_type,4
455044,TYPE_DECL,size_t,,,using size_type = size_t;,9,inc\til\some.hpp,size_type,,false,23,size_type,5
455045,TYPE_DECL,ptrdiff_t,,,using difference_type = ptrdiff_t;,9,inc\til\some.hpp,difference_type,,false,24,difference_type,6
455046,TYPE_DECL,T*,,,using pointer = T*;,9,inc\til\some.hpp,pointer,,false,25,pointer,7
455047,TYPE_DECL,T,,,using const_pointer = const T*;,9,inc\til\some.hpp,const_pointer,,false,26,const_pointer,8
455048,TYPE_DECL,T &,,,using reference = T&;,9,inc\til\some.hpp,reference,,false,27,reference,9
455049,TYPE_DECL,T &,,,using const_reference = const T&;,9,inc\til\some.hpp,const_reference,,false,28,const_reference,10
455050,TYPE_DECL,ANY,,,using iterator = typename decltype(_array)::iterator;,9,inc\til\some.hpp,iterator,,false,30,iterator,11
455051,TYPE_DECL,ANY,,,using const_iterator = typename decltype(_array)::const_iterator;,9,inc\til\some.hpp,const_iterator,,false,31,const_iterator,12
455052,TYPE_DECL,ANY,,,using reverse_iterator = typename decltype(_array)::reverse_iterator;,9,inc\til\some.hpp,reverse_iterator,,false,33,reverse_iterator,13
455053,TYPE_DECL,ANY,,,using const_reverse_iterator = typename decltype(_array)::const_reverse_iterator;,9,inc\til\some.hpp,const_reverse_iterator,,false,34,const_reverse_iterator,14
455450,TYPE_DECL,,,,"struct atomic_size_type
        {
            size_type load(std::memory_order order) const noexcept
            {
                return _value.load(order);
            }

            void store(size_type desired, std::memory_order order) noexcept
            {
#if _TIL_SPSC_DETAIL_POSITION_IMPL_FALLBACK
                // We must use a lock here to prevent us from modifying the value
                // in between wait() reading the value and the thread being suspended.
                std::lock_guard<std::mutex> lock{ _m };
#endif
                _value.store(desired, order);
            }

            void wait(size_type old, [[maybe_unused]] std::memory_order order) const noexcept
            {
#if _TIL_SPSC_DETAIL_POSITION_IMPL_WIN
#pragma warning(suppress : 26492) // Don't use const_cast to cast away const or volatile
                WaitOnAddress(const_cast<std::atomic<size_type>*>(&_value), &old, sizeof(_value), INFINITE);
#elif _TIL_SPSC_DETAIL_POSITION_IMPL_LINUX
         ...",9,inc\til\spsc.hpp,til.spsc.details.atomic_size_type,,false,51,atomic_size_type,10
455452,TYPE_DECL,,inc\til\spsc.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\til\spsc.hpp,inc\til\spsc.hpp:<global>,,false,1,<global>,1
455457,TYPE_DECL,uint32_t,,,using size_type = uint32_t;,5,inc\til\spsc.hpp,size_type,,false,23,size_type,1
455506,TYPE_DECL,,,,"struct block_initially_policy
        {
            using _spsc_policy = int;
            static constexpr bool _block_forever = false;
        }",9,inc\til\spsc.hpp,til.spsc.details.block_initially_policy,,false,31,block_initially_policy,7
455507,TYPE_DECL,int,,,using _spsc_policy = int;,13,inc\til\spsc.hpp,_spsc_policy,,false,33,_spsc_policy,1
455516,TYPE_DECL,,,,"struct block_forever_policy
        {
            using _spsc_policy = int;
            static constexpr bool _block_forever = true;
        }",9,inc\til\spsc.hpp,til.spsc.details.block_forever_policy,,false,37,block_forever_policy,8
455517,TYPE_DECL,int,,,using _spsc_policy = int;,13,inc\til\spsc.hpp,_spsc_policy,,false,39,_spsc_policy,1
455526,TYPE_DECL,ANY,,,using enable_if_wait_policy_t = typename std::remove_reference_t<WaitPolicy>::_spsc_policy;,9,inc\til\spsc.hpp,enable_if_wait_policy_t,,false,44,enable_if_wait_policy_t,9
455673,TYPE_DECL,,,,"struct acquisition
        {
            // The index range [begin, end) is the range of slots in the array returned by
            // arc<T>::data() that may be written to / read from respectively.
            // If a range has been successfully acquired ""end > begin"" is true. end thus can't be 0.
            size_type begin;
            size_type end;

            // Upon release() of an acquisition, next is the value that's written to the consumer/producer position.
            // It's basically the same as end, but with the revolution flag mixed in.
            // If end is equal to capacity, next will be 0 (mixed with the next revolution flag).
            size_type next;

            // If the other side of the queue hasn't been destroyed yet, alive will be true.
            bool alive;

            constexpr acquisition(size_type begin, size_type end, size_type next, bool alive) :
                begin(begin),
                end(end),
                next(next),
            ...",9,inc\til\spsc.hpp,til.spsc.details.acquisition,,false,140,acquisition,13
455686,TYPE_DECL,til.spsc.details.arc<T>,,,"struct arc
        {
            explicit arc(size_type capacity) noexcept :
                _data(alloc_raw_memory<T>(static_cast<size_t>(capacity) * sizeof(T))),
                _capacity(capacity)
            {
            }

            ~arc()
            {
                auto beg = _consumer.load(std::memory_order_acquire);
                auto end = _producer.load(std::memory_order_acquire);
                auto differentRevolution = ((beg ^ end) & revolution_flag) != 0;

                beg &= position_mask;
                end &= position_mask;

                // The producer position will always be ahead of the consumer, but since we're dealing
                // with a ring buffer the producer may be wrapped around the end of the buffer.
                // We thus need to deal with 3 potential cases:
                // * No valid data.
                //   If both positions including their revolution bits are identical.
                // * Valid data in the middle of th...",9,inc\til\spsc.hpp,til.spsc.details.arc,,false,211,arc,14
456051,TYPE_DECL,til.spsc.producer<T>,,,"struct producer
    {
        explicit producer(details::arc<T>* arc) noexcept :
            _arc(arc) {}

        producer<T>(const producer<T>&) = delete;
        producer<T>& operator=(const producer<T>&) = delete;

        producer(producer<T>&& other) noexcept
        {
            drop();
            _arc = std::exchange(other._arc, nullptr);
        }

        producer<T>& operator=(producer<T>&& other) noexcept
        {
            drop();
            _arc = std::exchange(other._arc, nullptr);
            return *this;
        }

        ~producer()
        {
            drop();
        }

        // emplace constructs an item in-place at the end of the queue.
        // It returns true, if the item was successfully placed within the queue.
        // The return value will be false, if the consumer is gone.
        template<typename... Args>
        bool emplace(Args&&... args) const
        {
            auto acquisition = _arc->producer_acquire(1, true);
            if (!...",5,inc\til\spsc.hpp,til.spsc.producer,,false,410,producer,7
456341,TYPE_DECL,til.spsc.consumer<T>,,,"struct consumer
    {
        explicit consumer(details::arc<T>* arc) noexcept :
            _arc(arc) {}

        consumer<T>(const consumer<T>&) = delete;
        consumer<T>& operator=(const consumer<T>&) = delete;

        consumer(consumer<T>&& other) noexcept
        {
            drop();
            _arc = std::exchange(other._arc, nullptr);
        }

        consumer<T>& operator=(consumer<T>&& other) noexcept
        {
            drop();
            _arc = std::exchange(other._arc, nullptr);
            return *this;
        }

        ~consumer()
        {
            drop();
        }

        // pop returns the next item in the queue, or std::nullopt if the producer is gone.
        std::optional<T> pop() const
        {
            auto acquisition = _arc->consumer_acquire(1, true);
            if (!acquisition.end)
            {
                return std::nullopt;
            }

            auto data = _arc->data();
            auto begin = data + acquisition.begin;...",5,inc\til\spsc.hpp,til.spsc.consumer,,false,529,consumer,8
456645,TYPE_DECL,"til.static_map<K,V,size_t,SortedInput>",,,"class static_map
    {
    public:
        using const_iterator = typename std::array<std::pair<K, V>, N>::const_iterator;

        template<typename... Args>
        constexpr explicit static_map(Args&&... args) noexcept :
            _array{ { std::forward<Args>(args)... } }
        {
            static_assert(sizeof...(Args) == N);
            if constexpr (!SortedInput::value)
            {
                std::sort(_array.begin(), _array.end());
            }
        }

        [[nodiscard]] constexpr const_iterator find(const auto& key) const noexcept
        {
            const auto iter = std::partition_point(_array.begin(), _array.end(), [&](const auto& p) {
                return p.first < key;
            });

            if (iter == _array.end() || key != iter->first)
            {
                return _array.end();
            }

            return iter;
        }

        [[nodiscard]] constexpr const_iterator end() const noexcept
        {
            return _array....",5,inc\til\static_map.hpp,til.static_map,,false,31,static_map,2
456647,TYPE_DECL,,inc\til\static_map.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\til\static_map.hpp,inc\til\static_map.hpp:<global>,,false,1,<global>,1
456652,TYPE_DECL,,,,"struct unsorted_input_t : public std::false_type
        {
        }",9,inc\til\static_map.hpp,til.details.unsorted_input_t,std.false_type,false,21,unsorted_input_t,1
456653,TYPE_DECL,,,,"struct presorted_input_t : public std::true_type
        {
        }",9,inc\til\static_map.hpp,til.details.presorted_input_t,std.true_type,false,25,presorted_input_t,2
456654,TYPE_DECL,ANY,,,"using const_iterator = typename std::array<std::pair<K, V>, N>::const_iterator;",9,inc\til\static_map.hpp,const_iterator,,false,34,const_iterator,1
456768,TYPE_DECL,"til.presorted_static_map<K,V,size_t>",,,"class presorted_static_map : public static_map<K, V, N, details::presorted_input_t>
    {
    public:
        template<typename... Args>
        constexpr explicit presorted_static_map(Args&&... args) noexcept :
            static_map<K, V, N, details::presorted_input_t>{ std::forward<Args>(args)... }
        {
        }
    }",5,inc\til\static_map.hpp,til.presorted_static_map,"static_map<K, V, N, details.presorted_input_t>",false,88,presorted_static_map,3
456802,TYPE_DECL,,inc\til\string.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\til\string.hpp,inc\til\string.hpp:<global>,,false,1,<global>,1
457527,TYPE_DECL,ANY,,,"using view_type = std::basic_string_view<T, Traits>;",9,inc\til\string.hpp,view_type,,false,320,view_type,1
457639,TYPE_DECL,,,,"struct wstring_case_insensitive_compare
    {
        [[nodiscard]] bool operator()(const std::wstring& lhs, const std::wstring& rhs) const noexcept
        {
            return compare_string_ordinal(lhs, rhs) == CSTR_LESS_THAN;
        }
    }",5,inc\til\string.hpp,til.wstring_case_insensitive_compare,,false,370,wstring_case_insensitive_compare,41
457717,TYPE_DECL,,inc\til\throttled_func.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\til\throttled_func.hpp,inc\til\throttled_func.hpp:<global>,,false,1,<global>,1
457722,TYPE_DECL,til.details.throttled_func_storage<Args>,,,"class throttled_func_storage
        {
        public:
            template<typename... MakeArgs>
            bool emplace(MakeArgs&&... args)
            {
                std::unique_lock guard{ _lock };
                const bool hadValue = _pendingRunArgs.has_value();
                _pendingRunArgs.emplace(std::forward<MakeArgs>(args)...);
                return hadValue;
            }

            template<typename F>
            void modify_pending(F f)
            {
                std::unique_lock guard{ _lock };
                if (_pendingRunArgs)
                {
                    std::apply(f, *_pendingRunArgs);
                }
            }

            std::tuple<Args...> take()
            {
                std::unique_lock guard{ _lock };
                auto pendingRunArgs = std::move(*_pendingRunArgs);
                _pendingRunArgs.reset();
                return pendingRunArgs;
            }

            explicit operator bool() const
            {
       ...",9,inc\til\throttled_func.hpp,til.details.throttled_func_storage,,false,11,throttled_func_storage,1
457813,TYPE_DECL,til.details.throttled_func_storage<><>,,,"class throttled_func_storage<>
        {
        public:
            bool emplace()
            {
                return _isPending.exchange(true, std::memory_order_relaxed);
            }

            std::tuple<> take()
            {
                reset();
                return {};
            }

            void reset()
            {
                _isPending.store(false, std::memory_order_relaxed);
            }

            explicit operator bool() const
            {
                return _isPending.load(std::memory_order_relaxed);
            }

        private:
            std::atomic<bool> _isPending;
        }",9,inc\til\throttled_func.hpp,til.details.throttled_func_storage<>,,false,55,throttled_func_storage<>,2
457858,TYPE_DECL,"til.throttled_func<bool,Args>",,,"class throttled_func
    {
    public:
        using filetime_duration = std::chrono::duration<int64_t, std::ratio<1, 10000000>>;
        using function = std::function<void(Args...)>;

        // Throttles invocations to the given `func` to not occur more often than `delay`.
        //
        // If this is a:
        // * throttled_func_leading: `func` will be invoked immediately and
        //   further invocations prevented until `delay` time has passed.
        // * throttled_func_trailing: On the first invocation a timer of `delay` time will
        //   be started. After the timer has expired `func` will be invoked just once.
        //
        // After `func` was invoked the state is reset and this cycle is repeated again.
        throttled_func(filetime_duration delay, function func) :
            _func{ std::move(func) },
            _timer{ _createTimer() }
        {
            const auto d = -delay.count();
            if (d >= 0)
            {
                throw std...",5,inc\til\throttled_func.hpp,til.throttled_func,,false,85,throttled_func,2
457859,TYPE_DECL,ANY,,,"using filetime_duration = std::chrono::duration<int64_t, std::ratio<1, 10000000>>;",9,inc\til\throttled_func.hpp,filetime_duration,,false,88,filetime_duration,1
457860,TYPE_DECL,ANY,,,using function = std::function<void(Args...)>;,9,inc\til\throttled_func.hpp,function,,false,89,function,2
458002,TYPE_DECL,"throttled_func<false, Args...>",,,"using throttled_func_trailing = throttled_func<false, Args...>;",5,inc\til\throttled_func.hpp,throttled_func_trailing,,false,204,throttled_func_trailing,3
458003,TYPE_DECL,throttled_func<true>,,,using throttled_func_leading = throttled_func<true>;,5,inc\til\throttled_func.hpp,throttled_func_leading,,false,205,throttled_func_leading,4
458008,TYPE_DECL,,inc\til\ticket_lock.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\til\ticket_lock.hpp,inc\til\ticket_lock.hpp:<global>,,false,1,<global>,2
458012,TYPE_DECL,,,,"struct ticket_lock
    {
        void lock() noexcept
        {
            const auto ticket = _next_ticket.fetch_add(1, std::memory_order_relaxed);

            for (;;)
            {
                const auto current = _now_serving.load(std::memory_order_acquire);
                if (current == ticket)
                {
                    break;
                }

                til::atomic_wait(_now_serving, current);
            }
        }

        void unlock() noexcept
        {
            _now_serving.fetch_add(1, std::memory_order_release);
            til::atomic_notify_all(_now_serving);
        }

    private:
        // You may be inclined to add alignas(std::hardware_destructive_interference_size)
        // here to force the two atomics on separate cache lines, but I suggest to carefully
        // benchmark such a change. Since this ticket_lock is primarily used to synchronize
        // exactly 2 threads, it actually helps us that these atomic are on the same c...",5,inc\til\ticket_lock.hpp,til.ticket_lock,,false,20,ticket_lock,1
458084,TYPE_DECL,,,,"struct recursive_ticket_lock
    {
        struct recursive_ticket_lock_suspension
        {
            constexpr recursive_ticket_lock_suspension(recursive_ticket_lock& lock, uint32_t owner, uint32_t recursion) noexcept :
                _lock{ lock },
                _owner{ owner },
                _recursion{ recursion }
            {
            }

            // When this class is destroyed it restores the recursive_ticket_lock state.
            // This of course only works if the lock wasn't moved to another thread or something.
            recursive_ticket_lock_suspension(const recursive_ticket_lock_suspension&) = delete;
            recursive_ticket_lock_suspension& operator=(const recursive_ticket_lock_suspension&) = delete;
            recursive_ticket_lock_suspension(recursive_ticket_lock_suspension&&) = delete;
            recursive_ticket_lock_suspension& operator=(recursive_ticket_lock_suspension&&) = delete;

            ~recursive_ticket_lock_suspension()
        ...",5,inc\til\ticket_lock.hpp,til.recursive_ticket_lock,,false,57,recursive_ticket_lock,2
458085,TYPE_DECL,,,,"struct recursive_ticket_lock_suspension
        {
            constexpr recursive_ticket_lock_suspension(recursive_ticket_lock& lock, uint32_t owner, uint32_t recursion) noexcept :
                _lock{ lock },
                _owner{ owner },
                _recursion{ recursion }
            {
            }

            // When this class is destroyed it restores the recursive_ticket_lock state.
            // This of course only works if the lock wasn't moved to another thread or something.
            recursive_ticket_lock_suspension(const recursive_ticket_lock_suspension&) = delete;
            recursive_ticket_lock_suspension& operator=(const recursive_ticket_lock_suspension&) = delete;
            recursive_ticket_lock_suspension(recursive_ticket_lock_suspension&&) = delete;
            recursive_ticket_lock_suspension& operator=(recursive_ticket_lock_suspension&&) = delete;

            ~recursive_ticket_lock_suspension()
            {
                if (_owner)
         ...",9,inc\til\ticket_lock.hpp,til.recursive_ticket_lock.recursive_ticket_lock_suspension,,false,59,recursive_ticket_lock_suspension,1
458154,TYPE_DECL,,,,friend struct recursive_ticket_lock,13,inc\til\ticket_lock.hpp,til.recursive_ticket_lock.recursive_ticket_lock_suspension.recursive_ticket_lock,,false,91,recursive_ticket_lock,7
458312,TYPE_DECL,ANY,,,using recursive_ticket_lock_suspension = recursive_ticket_lock::recursive_ticket_lock_suspension;,5,inc\til\ticket_lock.hpp,recursive_ticket_lock_suspension,,false,155,recursive_ticket_lock_suspension,3
458315,TYPE_DECL,,inc\til\type_traits.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\til\type_traits.hpp,inc\til\type_traits.hpp:<global>,,false,1,<global>,1
458320,TYPE_DECL,til.details.is_contiguous_view<T>,,,"struct is_contiguous_view : std::false_type
        {
        }",9,inc\til\type_traits.hpp,til.details.is_contiguous_view,std.false_type,false,11,is_contiguous_view,1
458321,TYPE_DECL,"til.details.is_contiguous_view<std.span<U,E>><U,std.size_t>",,,"struct is_contiguous_view<std::span<U, E>> : std::true_type
        {
        }",9,inc\til\type_traits.hpp,"til.details.is_contiguous_view<std.span<U,E>>",std.true_type,false,15,"is_contiguous_view<std::span<U,E>>",2
458322,TYPE_DECL,"til.details.is_contiguous_view<std.basic_string_view<U,V>><U,V>",,,"struct is_contiguous_view<std::basic_string_view<U, V>> : std::true_type
        {
        }",9,inc\til\type_traits.hpp,"til.details.is_contiguous_view<std.basic_string_view<U,V>>",std.true_type,false,19,"is_contiguous_view<std::basic_string_view<U,V>>",3
458323,TYPE_DECL,til.details.is_byte<T>,,,"struct is_byte : std::false_type
        {
        }",9,inc\til\type_traits.hpp,til.details.is_byte,std.false_type,false,24,is_byte,4
458324,TYPE_DECL,til.details.is_byte<char><>,,,"struct is_byte<char> : std::true_type
        {
        }",9,inc\til\type_traits.hpp,til.details.is_byte<char>,std.true_type,false,28,is_byte<char>,5
458325,TYPE_DECL,til.details.is_byte<std.byte><>,,,"struct is_byte<std::byte> : std::true_type
        {
        }",9,inc\til\type_traits.hpp,til.details.is_byte<std.byte>,std.true_type,false,32,is_byte<std::byte>,6
458359,TYPE_DECL,,inc\til\u8u16convert.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\til\u8u16convert.hpp,inc\til\u8u16convert.hpp:<global>,,false,1,<global>,1
458363,TYPE_DECL,,,,"struct u8state
    {
        char partials[4];
        uint8_t have{};
        uint8_t want{};

        constexpr void reset() noexcept
        {
            *this = {};
        }
    }",5,inc\til\u8u16convert.hpp,til.u8state,,false,27,u8state,1
458386,TYPE_DECL,,,,"struct u16state
    {
        wchar_t partials[2]{};

        constexpr void reset() noexcept
        {
            *this = {};
        }
    }",5,inc\til\u8u16convert.hpp,til.u16state,,false,40,u16state,2
458498,TYPE_DECL,,inc\til\unicode.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\til\unicode.hpp,inc\til\unicode.hpp:<global>,,false,1,<global>,1
458705,TYPE_DECL,,,,"struct utf16_iterator
    {
        struct sentinel
        {
        };

        struct iterator
        {
            using iterator_category = std::forward_iterator_tag;
            using value_type = std::wstring_view;
            using reference = value_type&;
            using pointer = value_type*;
            using difference_type = std::ptrdiff_t;

            explicit constexpr iterator(utf16_iterator& p) noexcept :
                _iter{ p }
            {
            }

            const value_type& operator*() const noexcept
            {
                return _iter.value();
            }

            iterator& operator++() noexcept
            {
                _iter._advance = true;
                return *this;
            }

            bool operator!=(const sentinel&) const noexcept
            {
                return _iter.valid();
            }

        private:
            utf16_iterator& _iter;
        };

        explicit constexpr utf16_iterator(std::wstring...",5,inc\til\unicode.hpp,til.utf16_iterator,,false,90,utf16_iterator,8
458706,TYPE_DECL,,,,"struct sentinel
        {
        }",9,inc\til\unicode.hpp,til.utf16_iterator.sentinel,,false,92,sentinel,1
458707,TYPE_DECL,,,,"struct iterator
        {
            using iterator_category = std::forward_iterator_tag;
            using value_type = std::wstring_view;
            using reference = value_type&;
            using pointer = value_type*;
            using difference_type = std::ptrdiff_t;

            explicit constexpr iterator(utf16_iterator& p) noexcept :
                _iter{ p }
            {
            }

            const value_type& operator*() const noexcept
            {
                return _iter.value();
            }

            iterator& operator++() noexcept
            {
                _iter._advance = true;
                return *this;
            }

            bool operator!=(const sentinel&) const noexcept
            {
                return _iter.valid();
            }

        private:
            utf16_iterator& _iter;
        }",9,inc\til\unicode.hpp,til.utf16_iterator.iterator,,false,96,iterator,2
458708,TYPE_DECL,ANY,,,using iterator_category = std::forward_iterator_tag;,13,inc\til\unicode.hpp,iterator_category,,false,98,iterator_category,1
458709,TYPE_DECL,ANY,,,using value_type = std::wstring_view;,13,inc\til\unicode.hpp,value_type,,false,99,value_type,2
458710,TYPE_DECL,value_type &,,,using reference = value_type&;,13,inc\til\unicode.hpp,reference,,false,100,reference,3
458711,TYPE_DECL,value_type*,,,using pointer = value_type*;,13,inc\til\unicode.hpp,pointer,,false,101,pointer,4
458712,TYPE_DECL,ANY,,,using difference_type = std::ptrdiff_t;,13,inc\til\unicode.hpp,difference_type,,false,102,difference_type,5
458863,TYPE_DECL,,inc\til\winrt.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\til\winrt.hpp,inc\til\winrt.hpp:<global>,,false,1,<global>,1
458867,TYPE_DECL,til.property<T>,,,"struct property
    {
        explicit constexpr property(auto&&... args) :
            _value{ std::forward<decltype(args)>(args)... } {}

        property& operator=(const property& other) = default;

        T operator()() const noexcept
        {
            return _value;
        }
        void operator()(auto&& arg)
        {
            _value = std::forward<decltype(arg)>(arg);
        }
        explicit operator bool() const noexcept
        {
#ifdef WINRT_Windows_Foundation_H
            if constexpr (std::is_same_v<T, winrt::hstring>)
            {
                return !_value.empty();
            }
            else
#endif
            {
                return _value;
            }
        }
        bool operator==(const property& other) const noexcept
        {
            return _value == other._value;
        }
        bool operator!=(const property& other) const noexcept
        {
            return _value != other._value;
        }
        bool operator==(const T& o...",5,inc\til\winrt.hpp,til.property,,false,9,property,1
458946,TYPE_DECL,,inc\unicode.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\unicode.hpp,inc\unicode.hpp:<global>,,false,1,<global>,1
459055,TYPE_DECL,,inc\winrtTaefTemplates.hpp:<global>,NAMESPACE_BLOCK,<global>,1,inc\winrtTaefTemplates.hpp,inc\winrtTaefTemplates.hpp:<global>,,false,1,<global>,1
459060,TYPE_DECL,WEX.TestExecution.VerifyOutputTraits<winrt.hstring><>,,,"class VerifyOutputTraits<winrt::hstring>
    {
    public:
        static WEX::Common::NoThrowString ToString(const winrt::hstring& hstr)
        {
            return WEX::Common::NoThrowString().Format(L""%s"", hstr.c_str());
        }
    }",5,inc\winrtTaefTemplates.hpp,WEX.TestExecution.VerifyOutputTraits<winrt.hstring>,,false,42,VerifyOutputTraits<winrt::hstring>,1
459089,TYPE_DECL,,interactivity\base\ApiDetector.cpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\base\ApiDetector.cpp,interactivity\base\ApiDetector.cpp:<global>,,false,1,<global>,4
459102,TYPE_DECL,,interactivity\base\ApiDetector.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\base\ApiDetector.hpp,interactivity\base\ApiDetector.hpp:<global>,,false,1,<global>,2
459108,TYPE_DECL,,,,"enum class ApiLevel
    {
        Win32,
        OneCore
    }",5,interactivity\base\ApiDetector.hpp,Microsoft.Console.Interactivity.ApiLevel,,false,10,ApiLevel,1
459111,TYPE_DECL,,,,"class ApiDetector final
    {
    public:
        [[nodiscard]] static NTSTATUS DetectNtUserWindow(_Out_ ApiLevel* level);

    private:
        [[nodiscard]] static NTSTATUS DetectApiSupport(_In_ LPCWSTR lpLibrary, _In_ LPCSTR lpApi, _Out_ ApiLevel* level);
        [[nodiscard]] static NTSTATUS TryLoadWellKnownLibrary(_In_ LPCWSTR library, _Outptr_result_nullonfailure_ HMODULE* module);
        [[nodiscard]] static NTSTATUS TryLocateProcedure(_In_ HMODULE hModule, _In_ LPCSTR lpProcedure);
        static void SetLevelAndFreeIfNecessary(_In_ NTSTATUS status, _In_ HMODULE hModule, _Out_ ApiLevel* level);
        [[nodiscard]] static NTSTATUS TryLoadWellKnownLibrary(_In_ LPCWSTR lpLibrary,
                                                              _In_ DWORD dwLoaderFlags,
                                                              _Outptr_result_nullonfailure_ HMODULE* phModule);
    }",5,interactivity\base\ApiDetector.hpp,Microsoft.Console.Interactivity.ApiDetector,,false,16,ApiDetector,2
459124,TYPE_DECL,,interactivity\base\EventSynthesis.cpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\base\EventSynthesis.cpp,interactivity\base\EventSynthesis.cpp:<global>,,false,1,<global>,3
459631,TYPE_DECL,,interactivity\base\HostSignalInputThread.cpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\base\HostSignalInputThread.cpp,interactivity\base\HostSignalInputThread.cpp:<global>,,false,1,<global>,5
459947,TYPE_DECL,,interactivity\base\HostSignalInputThread.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\base\HostSignalInputThread.hpp,interactivity\base\HostSignalInputThread.hpp:<global>,,false,1,<global>,1
459952,TYPE_DECL,,,,"class HostSignalInputThread final
    {
    public:
        HostSignalInputThread(wil::unique_hfile&& hPipe);
        ~HostSignalInputThread();

        [[nodiscard]] HRESULT Start() noexcept;
        static DWORD WINAPI StaticThreadProc(LPVOID lpParameter);

        // Prevent copying and assignment.
        HostSignalInputThread(const HostSignalInputThread&) = delete;
        HostSignalInputThread& operator=(const HostSignalInputThread&) = delete;

    private:
        template<typename T>
        T _ReceiveTypedPacket();
        [[nodiscard]] HRESULT _InputThread();

        bool _GetData(std::span<std::byte> buffer);
        bool _AdvanceReader(DWORD byteCount);
        void _Shutdown();

        DWORD _dwThreadId;
        wil::unique_hfile _hFile;
        wil::unique_handle _hThread;
    }",5,interactivity\base\HostSignalInputThread.hpp,Microsoft.Console.HostSignalInputThread,,false,22,HostSignalInputThread,1
460036,TYPE_DECL,,interactivity\base\InteractivityFactory.cpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\base\InteractivityFactory.cpp,interactivity\base\InteractivityFactory.cpp:<global>,,false,1,<global>,17
460229,TYPE_DECL,,interactivity\base\InteractivityFactory.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\base\InteractivityFactory.hpp,interactivity\base\InteractivityFactory.hpp:<global>,,false,1,<global>,6
460235,TYPE_DECL,,,,"class InteractivityFactory final : public IInteractivityFactory
    {
    public:
        [[nodiscard]] NTSTATUS CreateConsoleControl(_Inout_ std::unique_ptr<IConsoleControl>& control);
        [[nodiscard]] NTSTATUS CreateConsoleInputThread(_Inout_ std::unique_ptr<IConsoleInputThread>& thread);

        [[nodiscard]] NTSTATUS CreateHighDpiApi(_Inout_ std::unique_ptr<IHighDpiApi>& api);
        [[nodiscard]] NTSTATUS CreateWindowMetrics(_Inout_ std::unique_ptr<IWindowMetrics>& metrics);
        [[nodiscard]] NTSTATUS CreateAccessibilityNotifier(_Inout_ std::unique_ptr<IAccessibilityNotifier>& notifier);
        [[nodiscard]] NTSTATUS CreateSystemConfigurationProvider(_Inout_ std::unique_ptr<ISystemConfigurationProvider>& provider);

        [[nodiscard]] NTSTATUS CreatePseudoWindow(HWND& hwnd, const HWND owner);

        // Wndproc
        [[nodiscard]] static LRESULT CALLBACK s_PseudoWindowProc(_In_ HWND hwnd,
                                                                 _In_ UI...",5,interactivity\base\InteractivityFactory.hpp,Microsoft.Console.Interactivity.InteractivityFactory,IInteractivityFactory,false,19,InteractivityFactory,1
460275,TYPE_DECL,,interactivity\base\PseudoConsoleWindowAccessibilityProvider.cpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\base\PseudoConsoleWindowAccessibilityProvider.cpp,interactivity\base\PseudoConsoleWindowAccessibilityProvider.cpp:<global>,,false,1,<global>,3
460299,TYPE_DECL,,interactivity\base\PseudoConsoleWindowAccessibilityProvider.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\base\PseudoConsoleWindowAccessibilityProvider.hpp,interactivity\base\PseudoConsoleWindowAccessibilityProvider.hpp:<global>,,false,1,<global>,2
460305,TYPE_DECL,,,,"class PseudoConsoleWindowAccessibilityProvider final :
        public WRL::RuntimeClass<WRL::RuntimeClassFlags<WRL::ClassicCom | WRL::InhibitFtmBase>, IRawElementProviderSimple>
    {
    public:
        PseudoConsoleWindowAccessibilityProvider() = default;
        ~PseudoConsoleWindowAccessibilityProvider() = default;
        HRESULT RuntimeClassInitialize(HWND pseudoConsoleHwnd) noexcept;

        PseudoConsoleWindowAccessibilityProvider(const PseudoConsoleWindowAccessibilityProvider&) = delete;
        PseudoConsoleWindowAccessibilityProvider(PseudoConsoleWindowAccessibilityProvider&&) = delete;
        PseudoConsoleWindowAccessibilityProvider& operator=(const PseudoConsoleWindowAccessibilityProvider&) = delete;
        PseudoConsoleWindowAccessibilityProvider& operator=(PseudoConsoleWindowAccessibilityProvider&&) = delete;

        // IRawElementProviderSimple methods
        IFACEMETHODIMP get_ProviderOptions(_Out_ ProviderOptions* pOptions) override;
        IFACEMETHODIMP Get...",5,interactivity\base\PseudoConsoleWindowAccessibilityProvider.hpp,Microsoft.Console.Interactivity.PseudoConsoleWindowAccessibilityProvider,"WRL.RuntimeClass<WRL.RuntimeClassFlags<WRL.ClassicCom | WRL.InhibitFtmBase>, IRawElementProviderSimple>",false,10,PseudoConsoleWindowAccessibilityProvider,1
460352,TYPE_DECL,,interactivity\base\RemoteConsoleControl.cpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\base\RemoteConsoleControl.cpp,interactivity\base\RemoteConsoleControl.cpp:<global>,,false,1,<global>,4
460443,TYPE_DECL,,interactivity\base\RemoteConsoleControl.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\base\RemoteConsoleControl.hpp,interactivity\base\RemoteConsoleControl.hpp:<global>,,false,1,<global>,3
460449,TYPE_DECL,,,,"class RemoteConsoleControl final : public IConsoleControl
    {
    public:
        RemoteConsoleControl(HANDLE signalPipe);

        // IConsoleControl Members
        [[nodiscard]] NTSTATUS NotifyConsoleApplication(_In_ DWORD dwProcessId);
        [[nodiscard]] NTSTATUS SetForeground(_In_ HANDLE hProcess, _In_ BOOL fForeground);
        [[nodiscard]] NTSTATUS EndTask(_In_ DWORD dwProcessId, _In_ DWORD dwEventType, _In_ ULONG ulCtrlFlags);
        [[nodiscard]] NTSTATUS SetWindowOwner(HWND hwnd, DWORD processId, DWORD threadId);

    private:
        wil::unique_handle _pipe;

        Win32::ConsoleControl _control;
    }",5,interactivity\base\RemoteConsoleControl.hpp,Microsoft.Console.Interactivity.RemoteConsoleControl,IConsoleControl,false,21,RemoteConsoleControl,1
460479,TYPE_DECL,,interactivity\base\ServiceLocator.cpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\base\ServiceLocator.cpp,interactivity\base\ServiceLocator.cpp:<global>,,false,1,<global>,6
460932,TYPE_DECL,,interactivity\base\VtApiRedirection.cpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\base\VtApiRedirection.cpp,interactivity\base\VtApiRedirection.cpp:<global>,,false,1,<global>,4
460942,TYPE_DECL,,interactivity\base\precomp.cpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\base\precomp.cpp,interactivity\base\precomp.cpp:<global>,,false,1,<global>,2
460951,TYPE_DECL,,interactivity\base\precomp.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\base\precomp.hpp,interactivity\base\precomp.hpp:<global>,,false,1,<global>,3
460956,TYPE_DECL,,interactivity\inc\EventSynthesis.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\inc\EventSynthesis.hpp,interactivity\inc\EventSynthesis.hpp:<global>,,false,1,<global>,1
460985,TYPE_DECL,,interactivity\inc\IAccessibilityNotifier.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\inc\IAccessibilityNotifier.hpp,interactivity\inc\IAccessibilityNotifier.hpp:<global>,,false,1,<global>,1
460991,TYPE_DECL,,,,"class IAccessibilityNotifier
    {
    public:
        enum class ConsoleCaretEventFlags
        {
            CaretInvisible,
            CaretSelection,
            CaretVisible
        };

        virtual ~IAccessibilityNotifier() = default;

        virtual void NotifyConsoleCaretEvent(_In_ const til::rect& rectangle) = 0;
        virtual void NotifyConsoleCaretEvent(_In_ ConsoleCaretEventFlags flags, _In_ LONG position) = 0;
        virtual void NotifyConsoleUpdateScrollEvent(_In_ LONG x, _In_ LONG y) = 0;
        virtual void NotifyConsoleUpdateSimpleEvent(_In_ LONG start, _In_ LONG charAndAttribute) = 0;
        virtual void NotifyConsoleUpdateRegionEvent(_In_ LONG startXY, _In_ LONG endXY) = 0;
        virtual void NotifyConsoleLayoutEvent() = 0;
        virtual void NotifyConsoleStartApplicationEvent(_In_ DWORD processId) = 0;
        virtual void NotifyConsoleEndApplicationEvent(_In_ DWORD processId) = 0;
    }",5,interactivity\inc\IAccessibilityNotifier.hpp,Microsoft.Console.Interactivity.IAccessibilityNotifier,,false,20,IAccessibilityNotifier,1
460992,TYPE_DECL,,,,"enum class ConsoleCaretEventFlags
        {
            CaretInvisible,
            CaretSelection,
            CaretVisible
        }",9,interactivity\inc\IAccessibilityNotifier.hpp,Microsoft.Console.Interactivity.IAccessibilityNotifier.ConsoleCaretEventFlags,,false,23,ConsoleCaretEventFlags,1
461013,TYPE_DECL,,interactivity\inc\IConsoleControl.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\inc\IConsoleControl.hpp,interactivity\inc\IConsoleControl.hpp:<global>,,false,1,<global>,1
461019,TYPE_DECL,,,,"class IConsoleControl
    {
    public:
        virtual ~IConsoleControl() = default;
        [[nodiscard]] virtual NTSTATUS NotifyConsoleApplication(DWORD dwProcessId) = 0;
        [[nodiscard]] virtual NTSTATUS SetForeground(HANDLE hProcess, BOOL fForeground) = 0;
        [[nodiscard]] virtual NTSTATUS EndTask(DWORD dwProcessId, DWORD dwEventType, ULONG ulCtrlFlags) = 0;
        [[nodiscard]] virtual NTSTATUS SetWindowOwner(HWND hwnd, DWORD processId, DWORD threadId) = 0;
    }",5,interactivity\inc\IConsoleControl.hpp,Microsoft.Console.Interactivity.IConsoleControl,,false,20,IConsoleControl,1
461051,TYPE_DECL,,interactivity\inc\IConsoleInputThread.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\inc\IConsoleInputThread.hpp,interactivity\inc\IConsoleInputThread.hpp:<global>,,false,1,<global>,1
461057,TYPE_DECL,,,,"class IConsoleInputThread
    {
    public:
        virtual ~IConsoleInputThread() = default;
        virtual HANDLE Start() = 0;

        HANDLE GetHandle() noexcept { return _hThread; }
        DWORD GetThreadId() noexcept { return _dwThreadId; }

    protected:
        // Prevent accidental copies.
        IConsoleInputThread(const IConsoleInputThread&) = delete;
        IConsoleInputThread& operator=(const IConsoleInputThread&) = delete;

        // .ctor
        IConsoleInputThread() noexcept :
            _hThread(nullptr),
            _dwThreadId(gsl::narrow_cast<DWORD>(-1)) {}

        // Protected Variables
        HANDLE _hThread;
        DWORD _dwThreadId;
    }",5,interactivity\inc\IConsoleInputThread.hpp,Microsoft.Console.Interactivity.IConsoleInputThread,,false,20,IConsoleInputThread,1
461096,TYPE_DECL,,interactivity\inc\IConsoleWindow.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\inc\IConsoleWindow.hpp,interactivity\inc\IConsoleWindow.hpp:<global>,,false,1,<global>,1
461099,TYPE_DECL,int,,,typedef int EVENTID;,13,interactivity\inc\IConsoleWindow.hpp,EVENTID,,false,19,EVENTID,1
461103,TYPE_DECL,,,,"class IConsoleWindow
    {
    public:
        virtual ~IConsoleWindow() = default;

        virtual bool IsInFullscreen() const = 0;

        virtual void SetIsFullscreen(const bool fFullscreenEnabled) = 0;

        virtual void ChangeViewport(const til::inclusive_rect& NewWindow) = 0;

        virtual void CaptureMouse() = 0;
        virtual BOOL ReleaseMouse() = 0;

        virtual HWND GetWindowHandle() const = 0;

        // Pass null.
        virtual void SetOwner() = 0;

        virtual BOOL GetCursorPosition(_Out_ til::point* lpPoint) = 0;
        virtual BOOL GetClientRectangle(_Out_ til::rect* lpRect) = 0;
        virtual BOOL MapRect(_Inout_ til::rect* lpRect) = 0;
        virtual BOOL ConvertScreenToClient(_Inout_ til::point* lpPoint) = 0;

        virtual BOOL SendNotifyBeep() const = 0;

        virtual BOOL PostUpdateScrollBars() const = 0;

        virtual BOOL PostUpdateWindowSize() const = 0;

        virtual void UpdateWindowSize(const til::size coordSizeInChars) ...",5,interactivity\inc\IConsoleWindow.hpp,Microsoft.Console.Types.IConsoleWindow,,false,23,IConsoleWindow,1
461186,TYPE_DECL,,interactivity\inc\IHighDpiApi.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\inc\IHighDpiApi.hpp,interactivity\inc\IHighDpiApi.hpp:<global>,,false,1,<global>,1
461192,TYPE_DECL,,,,"class IHighDpiApi
    {
    public:
        virtual BOOL SetProcessDpiAwarenessContext() = 0;
        [[nodiscard]] virtual HRESULT SetProcessPerMonitorDpiAwareness() = 0;

        virtual ~IHighDpiApi() = default;
    }",5,interactivity\inc\IHighDpiApi.hpp,Microsoft.Console.Interactivity.IHighDpiApi,,false,19,IHighDpiApi,1
461221,TYPE_DECL,,interactivity\inc\IInteractivityFactory.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\inc\IInteractivityFactory.hpp,interactivity\inc\IInteractivityFactory.hpp:<global>,,false,1,<global>,8
461227,TYPE_DECL,,,,"class IInteractivityFactory
    {
    public:
        virtual ~IInteractivityFactory() = default;
        [[nodiscard]] virtual NTSTATUS CreateConsoleControl(_Inout_ std::unique_ptr<IConsoleControl>& control) = 0;
        [[nodiscard]] virtual NTSTATUS CreateConsoleInputThread(_Inout_ std::unique_ptr<IConsoleInputThread>& thread) = 0;

        [[nodiscard]] virtual NTSTATUS CreateHighDpiApi(_Inout_ std::unique_ptr<IHighDpiApi>& api) = 0;
        [[nodiscard]] virtual NTSTATUS CreateWindowMetrics(_Inout_ std::unique_ptr<IWindowMetrics>& metrics) = 0;
        [[nodiscard]] virtual NTSTATUS CreateAccessibilityNotifier(_Inout_ std::unique_ptr<IAccessibilityNotifier>& notifier) = 0;
        [[nodiscard]] virtual NTSTATUS CreateSystemConfigurationProvider(_Inout_ std::unique_ptr<ISystemConfigurationProvider>& provider) = 0;

        [[nodiscard]] virtual NTSTATUS CreatePseudoWindow(HWND& hwnd, const HWND owner) = 0;
    }",5,interactivity\inc\IInteractivityFactory.hpp,Microsoft.Console.Interactivity.IInteractivityFactory,,false,31,IInteractivityFactory,1
461246,TYPE_DECL,,interactivity\inc\ISystemConfigurationProvider.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\inc\ISystemConfigurationProvider.hpp,interactivity\inc\ISystemConfigurationProvider.hpp:<global>,,false,1,<global>,1
461249,TYPE_DECL,,,,class Settings,1,interactivity\inc\ISystemConfigurationProvider.hpp,Settings,,false,18,Settings,1
461253,TYPE_DECL,,,,"struct IconInfo
    {
        std::wstring path;
        int index = 0;
    }",5,interactivity\inc\ISystemConfigurationProvider.hpp,Microsoft.Console.Interactivity.IconInfo,,false,22,IconInfo,1
461263,TYPE_DECL,,,,"class ISystemConfigurationProvider
    {
    public:
        virtual ~ISystemConfigurationProvider() = default;

        virtual bool IsCaretBlinkingEnabled() = 0;

        virtual UINT GetCaretBlinkTime() = 0;
        virtual int GetNumberOfMouseButtons() = 0;
        virtual ULONG GetCursorWidth() = 0;
        virtual ULONG GetNumberOfWheelScrollLines() = 0;
        virtual ULONG GetNumberOfWheelScrollCharacters() = 0;

        virtual void GetSettingsFromLink(_Inout_ Settings* pLinkSettings,
                                         _Inout_updates_bytes_(*pdwTitleLength) LPWSTR pwszTitle,
                                         _Inout_ PDWORD pdwTitleLength,
                                         _In_ PCWSTR pwszCurrDir,
                                         _In_ PCWSTR pwszAppName,
                                         _Inout_opt_ IconInfo* iconInfo) = 0;
    }",5,interactivity\inc\ISystemConfigurationProvider.hpp,Microsoft.Console.Interactivity.ISystemConfigurationProvider,,false,28,ISystemConfigurationProvider,2
461295,TYPE_DECL,,interactivity\inc\IWindowMetrics.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\inc\IWindowMetrics.hpp,interactivity\inc\IWindowMetrics.hpp:<global>,,false,1,<global>,1
461301,TYPE_DECL,,,,"class IWindowMetrics
    {
    public:
        virtual ~IWindowMetrics() = default;
        virtual til::rect GetMinClientRectInPixels() = 0;
        virtual til::rect GetMaxClientRectInPixels() = 0;
    }",5,interactivity\inc\IWindowMetrics.hpp,Microsoft.Console.Interactivity.IWindowMetrics,,false,20,IWindowMetrics,1
461316,TYPE_DECL,,interactivity\inc\Module.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\inc\Module.hpp,interactivity\inc\Module.hpp:<global>,,false,1,<global>,1
461322,TYPE_DECL,,,,"enum class Module
    {
        AccessibilityNotifier,
        ConsoleControl,
        ConsoleInputThread,
        ConsoleWindowMetrics,
        HighDpiApi,
        SystemConfigurationProvider
    }",5,interactivity\inc\Module.hpp,Microsoft.Console.Interactivity.Module,,false,20,Module,1
461339,TYPE_DECL,,interactivity\inc\ServiceLocator.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\inc\ServiceLocator.hpp,interactivity\inc\ServiceLocator.hpp:<global>,,false,1,<global>,5
461345,TYPE_DECL,,,,"class ServiceLocator final
    {
    public:
        static void SetOneCoreTeardownFunction(void (*pfn)()) noexcept;

        [[noreturn]] static void RundownAndExit(const HRESULT hr);

        // N.B.: Location methods without corresponding creation methods
        //       automatically create the singleton object on demand.
        //       In case the on-demand creation fails, the return value
        //       is nullptr and a message is logged.

        [[nodiscard]] static HRESULT CreateAccessibilityNotifier();
        static IAccessibilityNotifier* LocateAccessibilityNotifier();

        [[nodiscard]] static NTSTATUS SetConsoleControlInstance(_In_ std::unique_ptr<IConsoleControl>&& control);
        static IConsoleControl* LocateConsoleControl();
        template<typename T>
        static T* LocateConsoleControl()
        {
            return static_cast<T*>(LocateConsoleControl());
        }

        [[nodiscard]] static NTSTATUS CreateConsoleInputThread(_Outptr_result_null...",5,interactivity\inc\ServiceLocator.hpp,Microsoft.Console.Interactivity.ServiceLocator,,false,30,ServiceLocator,1
461474,TYPE_DECL,,interactivity\inc\VtApiRedirection.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\inc\VtApiRedirection.hpp,interactivity\inc\VtApiRedirection.hpp:<global>,,false,1,<global>,1
461486,TYPE_DECL,,interactivity\onecore\AccessibilityNotifier.cpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\onecore\AccessibilityNotifier.cpp,interactivity\onecore\AccessibilityNotifier.cpp:<global>,,false,1,<global>,3
461532,TYPE_DECL,,interactivity\onecore\AccessibilityNotifier.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\onecore\AccessibilityNotifier.hpp,interactivity\onecore\AccessibilityNotifier.hpp:<global>,,false,1,<global>,2
461539,TYPE_DECL,,,,"class AccessibilityNotifier : public IAccessibilityNotifier
    {
    public:
        void NotifyConsoleCaretEvent(_In_ const til::rect& rectangle) noexcept override;
        void NotifyConsoleCaretEvent(_In_ ConsoleCaretEventFlags flags, _In_ LONG position) noexcept override;
        void NotifyConsoleUpdateScrollEvent(_In_ LONG x, _In_ LONG y) noexcept override;
        void NotifyConsoleUpdateSimpleEvent(_In_ LONG start, _In_ LONG charAndAttribute) noexcept override;
        void NotifyConsoleUpdateRegionEvent(_In_ LONG startXY, _In_ LONG endXY) noexcept override;
        void NotifyConsoleLayoutEvent() noexcept override;
        void NotifyConsoleStartApplicationEvent(_In_ DWORD processId) noexcept override;
        void NotifyConsoleEndApplicationEvent(_In_ DWORD processId) noexcept override;
    }",5,interactivity\onecore\AccessibilityNotifier.hpp,Microsoft.Console.Interactivity.OneCore.AccessibilityNotifier,IAccessibilityNotifier,false,23,AccessibilityNotifier,1
461561,TYPE_DECL,,interactivity\onecore\BgfxEngine.cpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\onecore\BgfxEngine.cpp,interactivity\onecore\BgfxEngine.cpp:<global>,,false,1,<global>,5
461843,TYPE_DECL,,interactivity\onecore\BgfxEngine.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\onecore\BgfxEngine.hpp,interactivity\onecore\BgfxEngine.hpp:<global>,,false,1,<global>,2
461849,TYPE_DECL,,,,"class BgfxEngine final : public RenderEngineBase
    {
    public:
        BgfxEngine(PVOID SharedViewBase, LONG DisplayHeight, LONG DisplayWidth, LONG FontWidth, LONG FontHeight) noexcept;

        // IRenderEngine Members
        [[nodiscard]] HRESULT Invalidate(const til::rect* psrRegion) noexcept override;
        [[nodiscard]] HRESULT InvalidateCursor(const til::rect* psrRegion) noexcept override;
        [[nodiscard]] HRESULT InvalidateSystem(const til::rect* prcDirtyClient) noexcept override;
        [[nodiscard]] HRESULT InvalidateSelection(const std::vector<til::rect>& rectangles) noexcept override;
        [[nodiscard]] HRESULT InvalidateScroll(const til::point* pcoordDelta) noexcept override;
        [[nodiscard]] HRESULT InvalidateAll() noexcept override;
        [[nodiscard]] HRESULT PrepareForTeardown(_Out_ bool* const pForcePaint) noexcept override;

        [[nodiscard]] HRESULT StartPaint() noexcept override;
        [[nodiscard]] HRESULT EndPaint() noexcept overrid...",5,interactivity\onecore\BgfxEngine.hpp,Microsoft.Console.Render.BgfxEngine,RenderEngineBase,false,29,BgfxEngine,1
461995,TYPE_DECL,,interactivity\onecore\ConIoSrvComm.cpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\onecore\ConIoSrvComm.cpp,interactivity\onecore\ConIoSrvComm.cpp:<global>,,false,1,<global>,8
463093,TYPE_DECL,,interactivity\onecore\ConIoSrvComm.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\onecore\ConIoSrvComm.hpp,interactivity\onecore\ConIoSrvComm.hpp:<global>,,false,1,<global>,5
463100,TYPE_DECL,,,,"class ConIoSrvComm final
    {
    public:
        ConIoSrvComm() noexcept;
        ~ConIoSrvComm();

        static ConIoSrvComm* GetConIoSrvComm();

        [[nodiscard]] NTSTATUS Connect();
        VOID ServiceInputPipe();

        [[nodiscard]] NTSTATUS RequestGetDisplaySize(_Inout_ PCD_IO_DISPLAY_SIZE pCdDisplaySize) const;
        [[nodiscard]] NTSTATUS RequestGetFontSize(_Inout_ PCD_IO_FONT_SIZE pCdFontSize) const;
        [[nodiscard]] NTSTATUS RequestSetCursor(_In_ const CD_IO_CURSOR_INFORMATION* const pCdCursorInformation) const;
        [[nodiscard]] NTSTATUS RequestUpdateDisplay(_In_ til::CoordType RowIndex) const;

        [[nodiscard]] NTSTATUS RequestMapVirtualKey(_In_ UINT uCode, _In_ UINT uMapType, _Out_ UINT* puReturnValue);
        [[nodiscard]] NTSTATUS RequestVkKeyScan(_In_ WCHAR wCharacter, _Out_ SHORT* psReturnValue);
        [[nodiscard]] NTSTATUS RequestGetKeyState(_In_ int iVirtualKey, _Out_ SHORT* psReturnValue);
        [[nodiscard]] USHORT GetDisplayMode...",5,interactivity\onecore\ConIoSrvComm.hpp,Microsoft.Console.Interactivity.OneCore.ConIoSrvComm,,false,28,ConIoSrvComm,1
463209,TYPE_DECL,,interactivity\onecore\ConsoleControl.cpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\onecore\ConsoleControl.cpp,interactivity\onecore\ConsoleControl.cpp:<global>,,false,1,<global>,5
463241,TYPE_DECL,,interactivity\onecore\ConsoleControl.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\onecore\ConsoleControl.hpp,interactivity\onecore\ConsoleControl.hpp:<global>,,false,1,<global>,2
463248,TYPE_DECL,,,,"class ConsoleControl : public IConsoleControl
    {
    public:
        // IConsoleControl Members
        [[nodiscard]] NTSTATUS NotifyConsoleApplication(_In_ DWORD dwProcessId) noexcept override;
        [[nodiscard]] NTSTATUS SetForeground(_In_ HANDLE hProcess, _In_ BOOL fForeground) noexcept override;
        [[nodiscard]] NTSTATUS EndTask(_In_ DWORD dwProcessId, _In_ DWORD dwEventType, _In_ ULONG ulCtrlFlags) override;
        [[nodiscard]] NTSTATUS SetWindowOwner(HWND hwnd, DWORD processId, DWORD threadId) noexcept override;
    }",5,interactivity\onecore\ConsoleControl.hpp,Microsoft.Console.Interactivity.OneCore.ConsoleControl,IConsoleControl,false,23,ConsoleControl,1
463275,TYPE_DECL,,interactivity\onecore\ConsoleInputThread.cpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\onecore\ConsoleInputThread.cpp,interactivity\onecore\ConsoleInputThread.cpp:<global>,,false,1,<global>,8
463475,TYPE_DECL,,interactivity\onecore\ConsoleInputThread.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\onecore\ConsoleInputThread.hpp,interactivity\onecore\ConsoleInputThread.hpp:<global>,,false,1,<global>,3
463482,TYPE_DECL,,,,"class ConsoleInputThread : public IConsoleInputThread
    {
    public:
        HANDLE Start() noexcept override;
    }",5,interactivity\onecore\ConsoleInputThread.hpp,Microsoft.Console.Interactivity.OneCore.ConsoleInputThread,IConsoleInputThread,false,24,ConsoleInputThread,1
463497,TYPE_DECL,,interactivity\onecore\ConsoleWindow.cpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\onecore\ConsoleWindow.cpp,interactivity\onecore\ConsoleWindow.cpp:<global>,,false,1,<global>,5
463700,TYPE_DECL,,interactivity\onecore\ConsoleWindow.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\onecore\ConsoleWindow.hpp,interactivity\onecore\ConsoleWindow.hpp:<global>,,false,1,<global>,2
463707,TYPE_DECL,,,,"class ConsoleWindow : public Microsoft::Console::Types::IConsoleWindow
    {
    public:
        // Inherited via IConsoleWindow
        bool IsInFullscreen() const noexcept override;
        void SetIsFullscreen(const bool fFullscreenEnabled) noexcept override;
        void ChangeViewport(const til::inclusive_rect& NewWindow) override;

        void CaptureMouse() noexcept override;
        BOOL ReleaseMouse() noexcept override;

        HWND GetWindowHandle() const noexcept override;

        void SetOwner() noexcept override;

        BOOL GetCursorPosition(til::point* lpPoint) noexcept override;
        BOOL GetClientRectangle(til::rect* lpRect) noexcept override;
        BOOL MapRect(_Inout_ til::rect* lpRect) noexcept override;
        BOOL ConvertScreenToClient(til::point* lpPoint) noexcept override;

        BOOL SendNotifyBeep() const noexcept override;

        BOOL PostUpdateScrollBars() const noexcept override;
        BOOL PostUpdateWindowSize() const noexcept override;...",5,interactivity\onecore\ConsoleWindow.hpp,Microsoft.Console.Interactivity.OneCore.ConsoleWindow,Microsoft.Console.Types.IConsoleWindow,false,23,ConsoleWindow,1
463802,TYPE_DECL,,interactivity\onecore\SystemConfigurationProvider.cpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\onecore\SystemConfigurationProvider.cpp,interactivity\onecore\SystemConfigurationProvider.cpp:<global>,,false,1,<global>,3
463854,TYPE_DECL,,interactivity\onecore\SystemConfigurationProvider.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\onecore\SystemConfigurationProvider.hpp,interactivity\onecore\SystemConfigurationProvider.hpp:<global>,,false,1,<global>,2
463857,TYPE_DECL,,,,class InputTests,1,interactivity\onecore\SystemConfigurationProvider.hpp,InputTests,,false,21,InputTests,1
463862,TYPE_DECL,,,,"class SystemConfigurationProvider : public ISystemConfigurationProvider
    {
    public:
        bool IsCaretBlinkingEnabled() noexcept override;

        UINT GetCaretBlinkTime() noexcept override;
        int GetNumberOfMouseButtons() noexcept override;
        ULONG GetCursorWidth() noexcept override;
        ULONG GetNumberOfWheelScrollLines() noexcept override;
        ULONG GetNumberOfWheelScrollCharacters() noexcept override;

        void GetSettingsFromLink(_Inout_ Settings* pLinkSettings,
                                 _Inout_updates_bytes_(*pdwTitleLength) LPWSTR pwszTitle,
                                 _Inout_ PDWORD pdwTitleLength,
                                 _In_ PCWSTR pwszCurrDir,
                                 _In_ PCWSTR pwszAppName,
                                 _Inout_opt_ IconInfo* iconInfo) override;

    private:
        static constexpr UINT s_DefaultCaretBlinkTime = 530; // milliseconds
        static constexpr bool s_DefaultIsCaretBlinkingEn...",5,interactivity\onecore\SystemConfigurationProvider.hpp,Microsoft.Console.Interactivity.OneCore.SystemConfigurationProvider,ISystemConfigurationProvider,false,25,SystemConfigurationProvider,1
463894,TYPE_DECL,,,,friend class ::InputTests,9,interactivity\onecore\SystemConfigurationProvider.hpp,Microsoft.Console.Interactivity.OneCore.SystemConfigurationProvider.InputTests,,false,51,InputTests,14
463929,TYPE_DECL,,interactivity\onecore\WindowMetrics.cpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\onecore\WindowMetrics.cpp,interactivity\onecore\WindowMetrics.cpp:<global>,,false,1,<global>,6
464139,TYPE_DECL,,interactivity\onecore\WindowMetrics.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\onecore\WindowMetrics.hpp,interactivity\onecore\WindowMetrics.hpp:<global>,,false,1,<global>,2
464146,TYPE_DECL,,,,"class WindowMetrics : public IWindowMetrics
    {
    public:
        til::rect GetMinClientRectInPixels() override;
        til::rect GetMaxClientRectInPixels() override;
    }",5,interactivity\onecore\WindowMetrics.hpp,Microsoft.Console.Interactivity.OneCore.WindowMetrics,IWindowMetrics,false,23,WindowMetrics,1
464159,TYPE_DECL,,interactivity\onecore\precomp.cpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\onecore\precomp.cpp,interactivity\onecore\precomp.cpp:<global>,,false,1,<global>,2
464180,TYPE_DECL,,interactivity\onecore\precomp.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\onecore\precomp.hpp,interactivity\onecore\precomp.hpp:<global>,,false,1,<global>,9
464193,TYPE_DECL,,interactivity\win32\AccessibilityNotifier.cpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\win32\AccessibilityNotifier.cpp,interactivity\win32\AccessibilityNotifier.cpp:<global>,,false,1,<global>,5
464231,TYPE_DECL,,interactivity\win32\AccessibilityNotifier.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\win32\AccessibilityNotifier.hpp,interactivity\win32\AccessibilityNotifier.hpp:<global>,,false,1,<global>,3
464238,TYPE_DECL,,,,"class AccessibilityNotifier final : public IAccessibilityNotifier
    {
    public:
        ~AccessibilityNotifier() = default;

        void NotifyConsoleCaretEvent(_In_ const til::rect& rectangle);
        void NotifyConsoleCaretEvent(_In_ ConsoleCaretEventFlags flags, _In_ LONG position);
        void NotifyConsoleUpdateScrollEvent(_In_ LONG x, _In_ LONG y);
        void NotifyConsoleUpdateSimpleEvent(_In_ LONG start, _In_ LONG charAndAttribute);
        void NotifyConsoleUpdateRegionEvent(_In_ LONG startXY, _In_ LONG endXY);
        void NotifyConsoleLayoutEvent();
        void NotifyConsoleStartApplicationEvent(_In_ DWORD processId);
        void NotifyConsoleEndApplicationEvent(_In_ DWORD processId);
    }",5,interactivity\win32\AccessibilityNotifier.hpp,Microsoft.Console.Interactivity.Win32.AccessibilityNotifier,IAccessibilityNotifier,false,25,AccessibilityNotifier,1
464268,TYPE_DECL,,interactivity\win32\Clipboard.cpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\win32\Clipboard.cpp,interactivity\win32\Clipboard.cpp:<global>,,false,1,<global>,12
464714,TYPE_DECL,,interactivity\win32\ConsoleControl.cpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\win32\ConsoleControl.cpp,interactivity\win32\ConsoleControl.cpp:<global>,,false,1,<global>,5
464783,TYPE_DECL,,interactivity\win32\ConsoleControl.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\win32\ConsoleControl.hpp,interactivity\win32\ConsoleControl.hpp:<global>,,false,1,<global>,2
464790,TYPE_DECL,,,,"class ConsoleControl final : public IConsoleControl
    {
    public:
        enum ControlType
        {
            ConsoleSetVDMCursorBounds,
            ConsoleNotifyConsoleApplication,
            ConsoleFullscreenSwitch,
            ConsoleSetCaretInfo,
            ConsoleSetReserveKeys,
            ConsoleSetForeground,
            ConsoleSetWindowOwner,
            ConsoleEndTask,
        };

        // IConsoleControl Members
        [[nodiscard]] NTSTATUS NotifyConsoleApplication(_In_ DWORD dwProcessId);
        [[nodiscard]] NTSTATUS SetForeground(_In_ HANDLE hProcess, _In_ BOOL fForeground);
        [[nodiscard]] NTSTATUS EndTask(_In_ DWORD dwProcessId, _In_ DWORD dwEventType, _In_ ULONG ulCtrlFlags);
        [[nodiscard]] NTSTATUS SetWindowOwner(HWND hwnd, DWORD processId, DWORD threadId) noexcept override;

        // Public Members
        [[nodiscard]] NTSTATUS Control(_In_ ConsoleControl::ControlType ConsoleCommand,
                                       _In_reads_by...",5,interactivity\win32\ConsoleControl.hpp,Microsoft.Console.Interactivity.Win32.ConsoleControl,IConsoleControl,false,32,ConsoleControl,1
464791,TYPE_DECL,,,,"enum ControlType
        {
            ConsoleSetVDMCursorBounds,
            ConsoleNotifyConsoleApplication,
            ConsoleFullscreenSwitch,
            ConsoleSetCaretInfo,
            ConsoleSetReserveKeys,
            ConsoleSetForeground,
            ConsoleSetWindowOwner,
            ConsoleEndTask,
        }",9,interactivity\win32\ConsoleControl.hpp,Microsoft.Console.Interactivity.Win32.ConsoleControl.ControlType,,false,35,ControlType,1
464830,TYPE_DECL,,interactivity\win32\ConsoleInputThread.cpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\win32\ConsoleInputThread.cpp,interactivity\win32\ConsoleInputThread.cpp:<global>,,false,1,<global>,4
464878,TYPE_DECL,,interactivity\win32\ConsoleInputThread.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\win32\ConsoleInputThread.hpp,interactivity\win32\ConsoleInputThread.hpp:<global>,,false,1,<global>,3
464885,TYPE_DECL,,,,"class ConsoleInputThread final : public IConsoleInputThread
    {
    public:
        ~ConsoleInputThread() = default;
        HANDLE Start();
    }",5,interactivity\win32\ConsoleInputThread.hpp,Microsoft.Console.Interactivity.Win32.ConsoleInputThread,IConsoleInputThread,false,21,ConsoleInputThread,1
464896,TYPE_DECL,,interactivity\win32\CustomWindowMessages.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\win32\CustomWindowMessages.hpp,interactivity\win32\CustomWindowMessages.hpp:<global>,,false,1,<global>,1
464909,TYPE_DECL,,interactivity\win32\SystemConfigurationProvider.cpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\win32\SystemConfigurationProvider.cpp,interactivity\win32\SystemConfigurationProvider.cpp:<global>,,false,1,<global>,5
464991,TYPE_DECL,,interactivity\win32\SystemConfigurationProvider.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\win32\SystemConfigurationProvider.hpp,interactivity\win32\SystemConfigurationProvider.hpp:<global>,,false,1,<global>,3
464998,TYPE_DECL,,,,"class SystemConfigurationProvider final : public ISystemConfigurationProvider
    {
    public:
        ~SystemConfigurationProvider() = default;

        bool IsCaretBlinkingEnabled();

        UINT GetCaretBlinkTime();
        int GetNumberOfMouseButtons();
        ULONG GetCursorWidth() override;
        ULONG GetNumberOfWheelScrollLines();
        ULONG GetNumberOfWheelScrollCharacters();

        void GetSettingsFromLink(_Inout_ Settings* pLinkSettings,
                                 _Inout_updates_bytes_(*pdwTitleLength) LPWSTR pwszTitle,
                                 _Inout_ PDWORD pdwTitleLength,
                                 _In_ PCWSTR pwszCurrDir,
                                 _In_ PCWSTR pwszAppName,
                                 _Inout_opt_ IconInfo* iconInfo);

    private:
        static const ULONG s_DefaultCursorWidth = 1;
    }",5,interactivity\win32\SystemConfigurationProvider.hpp,Microsoft.Console.Interactivity.Win32.SystemConfigurationProvider,ISystemConfigurationProvider,false,23,SystemConfigurationProvider,1
465044,TYPE_DECL,,interactivity\win32\WindowIme.cpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\win32\WindowIme.cpp,interactivity\win32\WindowIme.cpp:<global>,,false,1,<global>,4
465225,TYPE_DECL,,interactivity\win32\WindowMetrics.cpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\win32\WindowMetrics.cpp,interactivity\win32\WindowMetrics.cpp:<global>,,false,1,<global>,5
465284,TYPE_DECL,,interactivity\win32\WindowMetrics.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\win32\WindowMetrics.hpp,interactivity\win32\WindowMetrics.hpp:<global>,,false,1,<global>,2
465291,TYPE_DECL,,,,"class WindowMetrics final : public IWindowMetrics
    {
    public:
        // IWindowMetrics Members
        ~WindowMetrics() = default;
        til::rect GetMinClientRectInPixels();
        til::rect GetMaxClientRectInPixels();

        // Public Members
        til::rect GetMaxWindowRectInPixels();
        til::rect GetMaxWindowRectInPixels(const til::rect* const prcSuggested, _Out_opt_ UINT* pDpiSuggested);

        BOOL AdjustWindowRectEx(_Inout_ til::rect* prc,
                                const DWORD dwStyle,
                                const BOOL fMenu,
                                const DWORD dwExStyle);
        BOOL AdjustWindowRectEx(_Inout_ til::rect* prc,
                                const DWORD dwStyle,
                                const BOOL fMenu,
                                const DWORD dwExStyle,
                                const int iDpi);

        void ConvertClientRectToWindowRect(_Inout_ til::rect* const prc);
        void ConvertWindowRe...",5,interactivity\win32\WindowMetrics.hpp,Microsoft.Console.Interactivity.Win32.WindowMetrics,IWindowMetrics,false,19,WindowMetrics,1
465313,TYPE_DECL,,,,"enum ConvertRectangle
        {
            CLIENT_TO_WINDOW,
            WINDOW_TO_CLIENT
        }",9,interactivity\win32\WindowMetrics.hpp,Microsoft.Console.Interactivity.Win32.WindowMetrics.ConvertRectangle,,false,45,ConvertRectangle,10
465324,TYPE_DECL,,interactivity\win32\clipboard.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\win32\clipboard.hpp,interactivity\win32\clipboard.hpp:<global>,,false,1,<global>,3
465331,TYPE_DECL,,,,"class Clipboard
    {
    public:
        static Clipboard& Instance();

        void Copy(_In_ const bool fAlsoCopyFormatting = false);
        void StringPaste(_In_reads_(cchData) PCWCHAR pwchData,
                         const size_t cchData);
        void Paste();

    private:
        using unique_close_clipboard_call = wil::unique_call<decltype(::CloseClipboard), &::CloseClipboard>;
        static unique_close_clipboard_call _openClipboard(HWND hwnd);
        static void _copyToClipboard(UINT format, const void* src, size_t bytes);
        static void _copyToClipboardRegisteredFormat(const wchar_t* format, const void* src, size_t bytes);

        InputEventQueue TextToKeyEvents(_In_reads_(cchData) const wchar_t* const pData,
                                        const size_t cchData,
                                        const bool bracketedPaste = false);

        void StoreSelectionToClipboard(_In_ const bool fAlsoCopyFormatting);

        bool FilterCharacterOnPaste(_I...",5,interactivity\win32\clipboard.hpp,Microsoft.Console.Interactivity.Win32.Clipboard,,false,27,Clipboard,1
465342,TYPE_DECL,ANY,,,"using unique_close_clipboard_call = wil::unique_call<decltype(::CloseClipboard), &::CloseClipboard>;",9,interactivity\win32\clipboard.hpp,unique_close_clipboard_call,,false,38,unique_close_clipboard_call,5
465365,TYPE_DECL,,,,friend class ClipboardTests,9,interactivity\win32\clipboard.hpp,Microsoft.Console.Interactivity.Win32.Clipboard.ClipboardTests,,false,52,ClipboardTests,12
465372,TYPE_DECL,,interactivity\win32\consoleKeyInfo.cpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\win32\consoleKeyInfo.cpp,interactivity\win32\consoleKeyInfo.cpp:<global>,,false,1,<global>,3
465375,TYPE_DECL,CONSOLE_KEY_INFO,,,"typedef struct _CONSOLE_KEY_INFO
{
    HWND hWnd;
    WORD wVirtualKeyCode;
    WORD wVirtualScanCode;
}",1,interactivity\win32\consoleKeyInfo.cpp,_CONSOLE_KEY_INFO,,false,16,_CONSOLE_KEY_INFO,1
465379,TYPE_DECL,_CONSOLE_KEY_INFO,,,"typedef struct _CONSOLE_KEY_INFO
{
    HWND hWnd;
    WORD wVirtualKeyCode;
    WORD wVirtualScanCode;
} CONSOLE_KEY_INFO, *PCONSOLE_KEY_INFO;",3,interactivity\win32\consoleKeyInfo.cpp,CONSOLE_KEY_INFO,,false,21,CONSOLE_KEY_INFO,2
465380,TYPE_DECL,_CONSOLE_KEY_INFO*,,,"typedef struct _CONSOLE_KEY_INFO
{
    HWND hWnd;
    WORD wVirtualKeyCode;
    WORD wVirtualScanCode;
} CONSOLE_KEY_INFO, *PCONSOLE_KEY_INFO;",21,interactivity\win32\consoleKeyInfo.cpp,PCONSOLE_KEY_INFO,,false,21,PCONSOLE_KEY_INFO,3
465427,TYPE_DECL,,interactivity\win32\consoleKeyInfo.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\win32\consoleKeyInfo.hpp,interactivity\win32\consoleKeyInfo.hpp:<global>,,false,1,<global>,1
465444,TYPE_DECL,,interactivity\win32\find.cpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\win32\find.cpp,interactivity\win32\find.cpp:<global>,,false,1,<global>,9
465726,TYPE_DECL,,interactivity\win32\find.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\win32\find.hpp,interactivity\win32\find.hpp:<global>,,false,1,<global>,1
465743,TYPE_DECL,,interactivity\win32\icon.cpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\win32\icon.cpp,interactivity\win32\icon.cpp:<global>,,false,1,<global>,5
465952,TYPE_DECL,,interactivity\win32\icon.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\win32\icon.hpp,interactivity\win32\icon.hpp:<global>,,false,1,<global>,1
465988,TYPE_DECL,,interactivity\win32\menu.cpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\win32\menu.cpp,interactivity\win32\menu.cpp:<global>,,false,1,<global>,14
467886,TYPE_DECL,,interactivity\win32\menu.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\win32\menu.hpp,interactivity\win32\menu.hpp:<global>,,false,1,<global>,3
467898,TYPE_DECL,,interactivity\win32\precomp.cpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\win32\precomp.cpp,interactivity\win32\precomp.cpp:<global>,,false,1,<global>,2
467905,TYPE_DECL,,interactivity\win32\precomp.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\win32\precomp.hpp,interactivity\win32\precomp.hpp:<global>,,false,1,<global>,2
467910,TYPE_DECL,,interactivity\win32\resource.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\win32\resource.hpp,interactivity\win32\resource.hpp:<global>,,false,1,<global>,1
467921,TYPE_DECL,,interactivity\win32\screenInfoUiaProvider.cpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\win32\screenInfoUiaProvider.cpp,interactivity\win32\screenInfoUiaProvider.cpp:<global>,,false,1,<global>,4
467962,TYPE_DECL,,interactivity\win32\screenInfoUiaProvider.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\win32\screenInfoUiaProvider.hpp,interactivity\win32\screenInfoUiaProvider.hpp:<global>,,false,1,<global>,5
467969,TYPE_DECL,,,,class WindowUiaProvider,5,interactivity\win32\screenInfoUiaProvider.hpp,Microsoft.Console.Interactivity.Win32.WindowUiaProvider,,false,30,WindowUiaProvider,1
467970,TYPE_DECL,,,,"class ScreenInfoUiaProvider final : public Microsoft::Console::Types::ScreenInfoUiaProviderBase
    {
    public:
        ScreenInfoUiaProvider() = default;
        HRESULT RuntimeClassInitialize(_In_ Render::IRenderData* pData,
                                       _In_ WindowUiaProvider* const pUiaParent);

        // IRawElementProviderFragment methods
        IFACEMETHODIMP Navigate(_In_ NavigateDirection direction,
                                _COM_Outptr_result_maybenull_ IRawElementProviderFragment** ppProvider) override;
        IFACEMETHODIMP get_BoundingRectangle(_Out_ UiaRect* pRect) override;
        IFACEMETHODIMP get_FragmentRoot(_COM_Outptr_result_maybenull_ IRawElementProviderFragmentRoot** ppProvider) override;

        HWND GetWindowHandle() const;
        void ChangeViewport(const til::inclusive_rect& NewWindow) override;

    protected:
        HRESULT GetSelectionRange(_In_ IRawElementProviderSimple* pProvider, const std::wstring_view wordDelimiters, _COM_Ou...",5,interactivity\win32\screenInfoUiaProvider.hpp,Microsoft.Console.Interactivity.Win32.ScreenInfoUiaProvider,Microsoft.Console.Types.ScreenInfoUiaProviderBase,false,32,ScreenInfoUiaProvider,2
468004,TYPE_DECL,,interactivity\win32\uiaTextRange.cpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\win32\uiaTextRange.cpp,interactivity\win32\uiaTextRange.cpp:<global>,,false,1,<global>,5
468066,TYPE_DECL,,interactivity\win32\uiaTextRange.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\win32\uiaTextRange.hpp,interactivity\win32\uiaTextRange.hpp:<global>,,false,1,<global>,3
468073,TYPE_DECL,,,,"class UiaTextRange final : public Microsoft::Console::Types::UiaTextRangeBase
    {
    public:
        UiaTextRange() = default;

        // degenerate range
        HRESULT RuntimeClassInitialize(_In_ Render::IRenderData* pData,
                                       _In_ IRawElementProviderSimple* const pProvider,
                                       _In_ const std::wstring_view wordDelimiters = DefaultWordDelimiter) noexcept override;

        // degenerate range at cursor position
        HRESULT RuntimeClassInitialize(_In_ Render::IRenderData* pData,
                                       _In_ IRawElementProviderSimple* const pProvider,
                                       const Cursor& cursor,
                                       _In_ const std::wstring_view wordDelimiters = DefaultWordDelimiter) noexcept override;

        // specific endpoint range
        HRESULT RuntimeClassInitialize(_In_ Render::IRenderData* pData,
                                       _In_ IRawE...",5,interactivity\win32\uiaTextRange.hpp,Microsoft.Console.Interactivity.Win32.UiaTextRange,Microsoft.Console.Types.UiaTextRangeBase,false,24,UiaTextRange,1
468102,TYPE_DECL,,,,friend class ::UiaTextRangeTests,9,interactivity\win32\uiaTextRange.hpp,Microsoft.Console.Interactivity.Win32.UiaTextRange.UiaTextRangeTests,,false,66,UiaTextRangeTests,11
468105,TYPE_DECL,,interactivity\win32\ut_interactivity_win32\GeneratedUiaTextRangeMovementTests.g.cpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\win32\ut_interactivity_win32\GeneratedUiaTextRangeMovementTests.g.cpp,interactivity\win32\ut_interactivity_win32\GeneratedUiaTextRangeMovementTests.g.cpp:<global>,,false,1,<global>,1
468909,TYPE_DECL,,,,"struct GeneratedMovementTestInput
{
    TextUnit unit;
    int moveAmount;
    til::point start;
    til::point end;
}",1,interactivity\win32\ut_interactivity_win32\GeneratedUiaTextRangeMovementTests.g.cpp,GeneratedMovementTestInput,,false,109,GeneratedMovementTestInput,203
468914,TYPE_DECL,,,,"struct GeneratedMovementTestExpected
{
    int moveAmount;
    til::point start;
    til::point end;
}",1,interactivity\win32\ut_interactivity_win32\GeneratedUiaTextRangeMovementTests.g.cpp,GeneratedMovementTestExpected,,false,116,GeneratedMovementTestExpected,204
468918,TYPE_DECL,,,,"struct GeneratedMovementTest
{
    std::wstring_view name;
    GeneratedMovementTestInput input;
    GeneratedMovementTestExpected expected;
    bool skip;
}",1,interactivity\win32\ut_interactivity_win32\GeneratedUiaTextRangeMovementTests.g.cpp,GeneratedMovementTest,,false,122,GeneratedMovementTest,205
475014,TYPE_DECL,,interactivity\win32\ut_interactivity_win32\UiaTextRangeTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\win32\ut_interactivity_win32\UiaTextRangeTests.cpp,interactivity\win32\ut_interactivity_win32\UiaTextRangeTests.cpp:<global>,,false,1,<global>,11
475248,TYPE_DECL,,,,"struct ArrayIndexTaefAdapterRow : public Microsoft::WRL::RuntimeClass<Microsoft::WRL::RuntimeClassFlags<Microsoft::WRL::ClassicCom | Microsoft::WRL::InhibitFtmBase>, IDataRow>
    {
        HRESULT RuntimeClassInitialize(const size_t index)
        {
            _index = index;
            return S_OK;
        }

        STDMETHODIMP GetTestData(BSTR /*pszName*/, SAFEARRAY** ppData) override
        {
            const auto indexString{ wil::str_printf<std::wstring>(L""%zu"", _index) };
            auto safeArray{ SafeArrayCreateVector(VT_BSTR, 0, 1) };
            LONG index{ 0 };
            auto indexBstr{ wil::make_bstr(indexString.c_str()) };
            (void)SafeArrayPutElement(safeArray, &index, indexBstr.release());
            *ppData = safeArray;
            return S_OK;
        }

        STDMETHODIMP GetMetadataNames(SAFEARRAY** ppMetadataNames) override
        {
            *ppMetadataNames = nullptr;
            return S_FALSE;
        }

        STDMETHODIMP GetMetada...",5,interactivity\win32\ut_interactivity_win32\UiaTextRangeTests.cpp,anonymous_namespace_1.ArrayIndexTaefAdapterRow,"Microsoft.WRL.RuntimeClass<Microsoft.WRL.RuntimeClassFlags<Microsoft.WRL.ClassicCom | Microsoft.WRL.InhibitFtmBase>, IDataRow>",false,115,ArrayIndexTaefAdapterRow,1
475371,TYPE_DECL,,,,"struct ArrayIndexTaefAdapterSource : public Microsoft::WRL::RuntimeClass<Microsoft::WRL::RuntimeClassFlags<Microsoft::WRL::ClassicCom | Microsoft::WRL::InhibitFtmBase>, IDataSource>
    {
        STDMETHODIMP Advance(IDataRow** ppDataRow) override
        {
            if (_index < s_movementTests.size())
            {
                Microsoft::WRL::MakeAndInitialize<ArrayIndexTaefAdapterRow>(ppDataRow, _index++);
            }
            else
            {
                *ppDataRow = nullptr;
            }
            return S_OK;
        }

        STDMETHODIMP Reset() override
        {
            _index = 0;
            return S_OK;
        }

        STDMETHODIMP GetTestDataNames(SAFEARRAY** names) override
        {
            auto safeArray{ SafeArrayCreateVector(VT_BSTR, 0, 1) };
            LONG index{ 0 };
            auto dataNameBstr{ wil::make_bstr(L""index"") };
            (void)SafeArrayPutElement(safeArray, &index, dataNameBstr.release());
            *names = sa...",5,interactivity\win32\ut_interactivity_win32\UiaTextRangeTests.cpp,anonymous_namespace_7.ArrayIndexTaefAdapterSource,"Microsoft.WRL.RuntimeClass<Microsoft.WRL.RuntimeClassFlags<Microsoft.WRL.ClassicCom | Microsoft.WRL.InhibitFtmBase>, IDataSource>",false,156,ArrayIndexTaefAdapterSource,2
475501,TYPE_DECL,,,,"class DummyElementProvider final : public ScreenInfoUiaProviderBase
{
public:
    IFACEMETHODIMP Navigate(_In_ NavigateDirection /*direction*/,
                            _COM_Outptr_result_maybenull_ IRawElementProviderFragment** /*ppProvider*/) override
    {
        return E_NOTIMPL;
    }

    IFACEMETHODIMP get_BoundingRectangle(_Out_ UiaRect* /*pRect*/) override
    {
        return E_NOTIMPL;
    }

    IFACEMETHODIMP get_FragmentRoot(_COM_Outptr_result_maybenull_ IRawElementProviderFragmentRoot** /*ppProvider*/) override
    {
        return E_NOTIMPL;
    }

    void ChangeViewport(const til::inclusive_rect& /*NewWindow*/)
    {
        return;
    }

    HRESULT GetSelectionRange(_In_ IRawElementProviderSimple* /*pProvider*/, const std::wstring_view /*wordDelimiters*/, _COM_Outptr_result_maybenull_ Microsoft::Console::Types::UiaTextRangeBase** /*ppUtr*/) override
    {
        return E_NOTIMPL;
    }

    // degenerate range
    HRESULT CreateTextRange(_In_ IRawElementPro...",1,interactivity\win32\ut_interactivity_win32\UiaTextRangeTests.cpp,DummyElementProvider,ScreenInfoUiaProviderBase,false,211,DummyElementProvider,5
475628,TYPE_DECL,,,,"struct TextUnitBoundaries
        {
            til::point start;
            til::point end;
        }",9,interactivity\win32\ut_interactivity_win32\UiaTextRangeTests.cpp,TextUnitBoundaries,,false,529,TextUnitBoundaries,63
476934,TYPE_DECL,,,,"struct TestInput
        {
            TextUnit unit;
            int moveAmt;
            til::point start;
            til::point end;
        }",9,interactivity\win32\ut_interactivity_win32\UiaTextRangeTests.cpp,TestInput,,false,1873,TestInput,284
476939,TYPE_DECL,,,,"struct TestOutput
        {
            int moveAmt;
            til::point start;
            til::point end;
        }",9,interactivity\win32\ut_interactivity_win32\UiaTextRangeTests.cpp,TestOutput,,false,1881,TestOutput,285
476943,TYPE_DECL,,,,"struct MyTest
        {
            std::wstring name;
            TestInput input;
            TestOutput output;
        }",9,interactivity\win32\ut_interactivity_win32\UiaTextRangeTests.cpp,MyTest,,false,1888,MyTest,286
477078,TYPE_DECL,,interactivity\win32\window.cpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\win32\window.cpp,interactivity\win32\window.cpp:<global>,,false,1,<global>,26
479093,TYPE_DECL,,interactivity\win32\window.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\win32\window.hpp,interactivity\win32\window.hpp:<global>,,false,1,<global>,2
479100,TYPE_DECL,,,,class AtlasEngine,5,interactivity\win32\window.hpp,Microsoft.Console.Render.Atlas.AtlasEngine,,false,21,AtlasEngine,1
479104,TYPE_DECL,ANY,,,using AtlasEngine = Atlas::AtlasEngine;,5,interactivity\win32\window.hpp,AtlasEngine,,false,26,AtlasEngine,1
479105,TYPE_DECL,,,,class DxEngine,5,interactivity\win32\window.hpp,Microsoft.Console.Render.DxEngine,,false,27,DxEngine,2
479106,TYPE_DECL,,,,class GdiEngine,5,interactivity\win32\window.hpp,Microsoft.Console.Render.GdiEngine,,false,28,GdiEngine,3
479111,TYPE_DECL,,,,class WindowUiaProvider,5,interactivity\win32\window.hpp,Microsoft.Console.Interactivity.Win32.WindowUiaProvider,,false,33,WindowUiaProvider,1
479112,TYPE_DECL,,,,"class Window final : public Microsoft::Console::Types::IConsoleWindow
    {
    public:
        [[nodiscard]] static NTSTATUS CreateInstance(_In_ Settings* const pSettings,
                                                     _In_ SCREEN_INFORMATION* const pScreen);

        [[nodiscard]] NTSTATUS ActivateAndShow(const WORD wShowWindow);

        ~Window();

        til::rect GetWindowRect() const noexcept;
        HWND GetWindowHandle() const;
        SCREEN_INFORMATION& GetScreenInfo();
        const SCREEN_INFORMATION& GetScreenInfo() const;

        BYTE GetWindowOpacity() const;
        void SetWindowOpacity(const BYTE bOpacity);
        void ApplyWindowOpacity() const;
        void ChangeWindowOpacity(const short sOpacityDelta);

        bool IsInMaximized() const;

        bool IsInFullscreen() const;
        void SetIsFullscreen(const bool fFullscreenEnabled);
        void ToggleFullscreen();

        void ChangeViewport(const til::inclusive_rect& NewWindow);

        void V...",5,interactivity\win32\window.hpp,Microsoft.Console.Interactivity.Win32.Window,Microsoft.Console.Types.IConsoleWindow,false,35,Window,2
479370,TYPE_DECL,,interactivity\win32\windowUiaProvider.cpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\win32\windowUiaProvider.cpp,interactivity\win32\windowUiaProvider.cpp:<global>,,false,1,<global>,7
479453,TYPE_DECL,,interactivity\win32\windowUiaProvider.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\win32\windowUiaProvider.hpp,interactivity\win32\windowUiaProvider.hpp:<global>,,false,1,<global>,5
479459,TYPE_DECL,,,,class IConsoleWindow,5,interactivity\win32\windowUiaProvider.hpp,Microsoft.Console.Types.IConsoleWindow,,false,31,IConsoleWindow,1
479464,TYPE_DECL,,,,"class WindowUiaProvider final :
        public WRL::RuntimeClass<WRL::RuntimeClassFlags<WRL::ClassicCom | WRL::InhibitFtmBase>, IRawElementProviderSimple, IRawElementProviderFragment, IRawElementProviderFragmentRoot>
    {
    public:
        WindowUiaProvider() = default;
        ~WindowUiaProvider() = default;
        HRESULT RuntimeClassInitialize(Microsoft::Console::Types::IConsoleWindow* baseWindow) noexcept;

        WindowUiaProvider(const WindowUiaProvider&) = delete;
        WindowUiaProvider(WindowUiaProvider&&) = delete;
        WindowUiaProvider& operator=(const WindowUiaProvider&) = delete;
        WindowUiaProvider& operator=(WindowUiaProvider&&) = delete;

    public:
        [[nodiscard]] virtual HRESULT Signal(_In_ EVENTID id);
        [[nodiscard]] virtual HRESULT SetTextAreaFocus();

        // IRawElementProviderSimple methods
        IFACEMETHODIMP get_ProviderOptions(_Out_ ProviderOptions* pOptions) override;
        IFACEMETHODIMP GetPatternProvider(_In_ PATTE...",5,interactivity\win32\windowUiaProvider.hpp,Microsoft.Console.Interactivity.Win32.WindowUiaProvider,"WRL.RuntimeClass<WRL.RuntimeClassFlags<WRL.ClassicCom | WRL.InhibitFtmBase>, IRawElementProviderSimple, IRawElementProviderFragment, IRawElementProviderFragmentRoot>",false,36,WindowUiaProvider,1
479551,TYPE_DECL,,,,"enum class ApiCall
        {
            Create,
            Signal,
            AddRef,
            Release,
            QueryInterface,
            GetProviderOptions,
            GetPatternProvider,
            GetPropertyValue,
            GetHostRawElementProvider,
            Navigate,
            GetRuntimeId,
            GetBoundingRectangle,
            GetEmbeddedFragmentRoots,
            SetFocus,
            GetFragmentRoot,
            ElementProviderFromPoint,
            GetFocus
        }",9,interactivity\win32\windowUiaProvider.hpp,Microsoft.Console.Interactivity.Win32.WindowUiaProviderTracing.ApiCall,,false,106,ApiCall,1
479569,TYPE_DECL,,,,"struct IApiMsg
        {
        }",9,interactivity\win32\windowUiaProvider.hpp,Microsoft.Console.Interactivity.Win32.WindowUiaProviderTracing.IApiMsg,,false,127,IApiMsg,2
479570,TYPE_DECL,,,,"struct ApiMessageSignal : public IApiMsg
        {
            EVENTID Signal;
        }",9,interactivity\win32\windowUiaProvider.hpp,Microsoft.Console.Interactivity.Win32.WindowUiaProviderTracing.ApiMessageSignal,IApiMsg,false,131,ApiMessageSignal,3
479572,TYPE_DECL,,,,"struct ApiMsgNavigate : public IApiMsg
        {
            NavigateDirection Direction;
        }",9,interactivity\win32\windowUiaProvider.hpp,Microsoft.Console.Interactivity.Win32.WindowUiaProviderTracing.ApiMsgNavigate,IApiMsg,false,136,ApiMsgNavigate,4
479580,TYPE_DECL,,interactivity\win32\windowdpiapi.cpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\win32\windowdpiapi.cpp,interactivity\win32\windowdpiapi.cpp:<global>,,false,1,<global>,3
479720,TYPE_DECL,,interactivity\win32\windowdpiapi.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\win32\windowdpiapi.hpp,interactivity\win32\windowdpiapi.hpp:<global>,,false,1,<global>,2
479724,TYPE_DECL,DPI_AWARENESS,,,"typedef enum DPI_AWARENESS
{
    DPI_AWARENESS_INVALID = -1,
    DPI_AWARENESS_UNAWARE = 0,
    DPI_AWARENESS_SYSTEM_AWARE = 1,
    DPI_AWARENESS_PER_MONITOR_AWARE = 2
}",1,interactivity\win32\windowdpiapi.hpp,DPI_AWARENESS,,false,26,DPI_AWARENESS,2
479746,TYPE_DECL,DPI_AWARENESS,,,"typedef enum DPI_AWARENESS
{
    DPI_AWARENESS_INVALID = -1,
    DPI_AWARENESS_UNAWARE = 0,
    DPI_AWARENESS_SYSTEM_AWARE = 1,
    DPI_AWARENESS_PER_MONITOR_AWARE = 2
} DPI_AWARENESS;",3,interactivity\win32\windowdpiapi.hpp,DPI_AWARENESS,,false,32,DPI_AWARENESS,3
479751,TYPE_DECL,,,,"class WindowDpiApi final : public IHighDpiApi
    {
    public:
        // IHighDpi Interface
        BOOL SetProcessDpiAwarenessContext();
        [[nodiscard]] HRESULT SetProcessPerMonitorDpiAwareness();

        // Module-internal Functions
        BOOL SetProcessDpiAwarenessContext(_In_ DPI_AWARENESS_CONTEXT dpiContext);
        BOOL AdjustWindowRectExForDpi(_Inout_ LPRECT const lpRect,
                                      const DWORD dwStyle,
                                      const BOOL bMenu,
                                      const DWORD dwExStyle,
                                      const UINT dpi);

        int GetDpiForWindow(const HWND hwnd);
        int GetSystemMetricsForDpi(const int nIndex,
                                   const UINT dpi);

#ifdef CON_DPIAPI_INDIRECT
        WindowDpiApi();
#endif
        ~WindowDpiApi();

    private:
        HMODULE _hUser32;
    }",5,interactivity\win32\windowdpiapi.hpp,Microsoft.Console.Interactivity.Win32.WindowDpiApi,IHighDpiApi,false,48,WindowDpiApi,1
479786,TYPE_DECL,,interactivity\win32\windowime.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\win32\windowime.hpp,interactivity\win32\windowime.hpp:<global>,,false,1,<global>,2
479827,TYPE_DECL,,interactivity\win32\windowio.cpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\win32\windowio.cpp,interactivity\win32\windowio.cpp:<global>,,false,1,<global>,15
481060,TYPE_DECL,,interactivity\win32\windowio.hpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\win32\windowio.hpp,interactivity\win32\windowio.hpp:<global>,,false,1,<global>,3
481132,TYPE_DECL,,interactivity\win32\windowproc.cpp:<global>,NAMESPACE_BLOCK,<global>,1,interactivity\win32\windowproc.cpp,interactivity\win32\windowproc.cpp:<global>,,false,1,<global>,26
481475,TYPE_DECL,,internal\precomp.cpp:<global>,NAMESPACE_BLOCK,<global>,1,internal\precomp.cpp,internal\precomp.cpp:<global>,,false,1,<global>,2
481484,TYPE_DECL,,internal\precomp.hpp:<global>,NAMESPACE_BLOCK,<global>,1,internal\precomp.hpp,internal\precomp.hpp:<global>,,false,1,<global>,3
481493,TYPE_DECL,,internal\stubs.cpp:<global>,NAMESPACE_BLOCK,<global>,1,internal\stubs.cpp,internal\stubs.cpp:<global>,,false,1,<global>,3
481531,TYPE_DECL,,propsheet\ColorControl.cpp:<global>,NAMESPACE_BLOCK,<global>,1,propsheet\ColorControl.cpp,propsheet\ColorControl.cpp:<global>,,false,1,<global>,3
481651,TYPE_DECL,,propsheet\ColorControl.hpp:<global>,NAMESPACE_BLOCK,<global>,1,propsheet\ColorControl.hpp,propsheet\ColorControl.hpp:<global>,,false,1,<global>,1
481670,TYPE_DECL,,propsheet\ColorsPage.cpp:<global>,NAMESPACE_BLOCK,<global>,1,propsheet\ColorsPage.cpp,propsheet\ColorsPage.cpp:<global>,,false,1,<global>,4
482651,TYPE_DECL,,propsheet\ColorsPage.hpp:<global>,NAMESPACE_BLOCK,<global>,1,propsheet\ColorsPage.hpp,propsheet\ColorsPage.hpp:<global>,,false,1,<global>,1
482676,TYPE_DECL,,propsheet\LayoutPage.cpp:<global>,NAMESPACE_BLOCK,<global>,1,propsheet\LayoutPage.cpp,propsheet\LayoutPage.cpp:<global>,,false,1,<global>,2
483325,TYPE_DECL,,propsheet\LayoutPage.hpp:<global>,NAMESPACE_BLOCK,<global>,1,propsheet\LayoutPage.hpp,propsheet\LayoutPage.hpp:<global>,,false,1,<global>,1
483342,TYPE_DECL,,propsheet\OptionsPage.cpp:<global>,NAMESPACE_BLOCK,<global>,1,propsheet\OptionsPage.cpp,propsheet\OptionsPage.cpp:<global>,,false,1,<global>,2
484214,TYPE_DECL,,propsheet\OptionsPage.hpp:<global>,NAMESPACE_BLOCK,<global>,1,propsheet\OptionsPage.hpp,propsheet\OptionsPage.hpp:<global>,,false,1,<global>,1
484248,TYPE_DECL,,propsheet\PropSheetHandler.cpp:<global>,NAMESPACE_BLOCK,<global>,1,propsheet\PropSheetHandler.cpp,propsheet\PropSheetHandler.cpp:<global>,,false,1,<global>,8
484252,TYPE_DECL,,,,"class __declspec(uuid(""D2942F8E-478E-41D3-870A-35A16238F4EE"")) ConsolePropertySheetHandler final : public RuntimeClass<RuntimeClassFlags<ClassicCom>, IShellExtInit, IShellPropSheetExt, IPersist, FtmBase>
{
public:
    HRESULT RuntimeClassInitialize()
    {
        return S_OK;
    }

    // IPersist
    STDMETHODIMP GetClassID(_Out_ CLSID* clsid) override
    {
        *clsid = __uuidof(this);
        return S_OK;
    }

    // IShellExtInit
    // Shell QI's for IShellExtInit and calls Initialize first. If we return a succeeding HRESULT, the shell will QI for
    // IShellPropSheetExt and call AddPages. A failing HRESULT causes the shell to skip us.
    STDMETHODIMP Initialize(_In_ PCIDLIST_ABSOLUTE /*pidlFolder*/, _In_ IDataObject* pdtobj, _In_ HKEY /*hkeyProgID*/)
    {
        WCHAR szLinkFileName[MAX_PATH];
        auto hr = _ShouldAddPropertySheet(pdtobj, szLinkFileName, ARRAYSIZE(szLinkFileName));
        if (SUCCEEDED(hr))
        {
            hr = InitializeConsoleState() ...",1,propsheet\PropSheetHandler.cpp,ConsolePropertySheetHandler,"RuntimeClass<RuntimeClassFlags<ClassicCom>, IShellExtInit, IShellPropSheetExt, IPersist, FtmBase>",false,21,ConsolePropertySheetHandler,2
484297,TYPE_DECL,,propsheet\TerminalPropsheetPage.cpp:<global>,NAMESPACE_BLOCK,<global>,1,propsheet\TerminalPropsheetPage.cpp,propsheet\TerminalPropsheetPage.cpp:<global>,,false,1,<global>,8
485763,TYPE_DECL,,propsheet\TerminalPropsheetPage.hpp:<global>,NAMESPACE_BLOCK,<global>,1,propsheet\TerminalPropsheetPage.hpp,propsheet\TerminalPropsheetPage.hpp:<global>,,false,1,<global>,1
485781,TYPE_DECL,,propsheet\console.cpp:<global>,NAMESPACE_BLOCK,<global>,1,propsheet\console.cpp,propsheet\console.cpp:<global>,,false,1,<global>,3
487051,TYPE_DECL,,propsheet\console.hpp:<global>,NAMESPACE_BLOCK,<global>,1,propsheet\console.hpp,propsheet\console.hpp:<global>,,false,1,<global>,7
487237,TYPE_DECL,,propsheet\dbcs.cpp:<global>,NAMESPACE_BLOCK,<global>,1,propsheet\dbcs.cpp,propsheet\dbcs.cpp:<global>,,false,1,<global>,3
487555,TYPE_DECL,,propsheet\dialogs.hpp:<global>,NAMESPACE_BLOCK,<global>,1,propsheet\dialogs.hpp,propsheet\dialogs.hpp:<global>,,false,1,<global>,1
487564,TYPE_DECL,,propsheet\dll.cpp:<global>,NAMESPACE_BLOCK,<global>,1,propsheet\dll.cpp,propsheet\dll.cpp:<global>,,false,1,<global>,3
487591,TYPE_DECL,,propsheet\font.hpp:<global>,NAMESPACE_BLOCK,<global>,1,propsheet\font.hpp,propsheet\font.hpp:<global>,,false,1,<global>,1
487594,TYPE_DECL,FONT_INFO,,,"typedef struct _FONT_INFO
{
    HFONT hFont;
    COORD Size; // font size obtained
    COORD SizeWant; // 0;0 if Raster font
    LONG Weight;
    LPTSTR FaceName;
    BYTE Family;
    BYTE tmCharSet;
}",1,propsheet\font.hpp,_FONT_INFO,,false,52,_FONT_INFO,1
487602,TYPE_DECL,_FONT_INFO,,,"typedef struct _FONT_INFO
{
    HFONT hFont;
    COORD Size; // font size obtained
    COORD SizeWant; // 0;0 if Raster font
    LONG Weight;
    LPTSTR FaceName;
    BYTE Family;
    BYTE tmCharSet;
} FONT_INFO, *PFONT_INFO;",3,propsheet\font.hpp,FONT_INFO,,false,61,FONT_INFO,2
487603,TYPE_DECL,_FONT_INFO*,,,"typedef struct _FONT_INFO
{
    HFONT hFont;
    COORD Size; // font size obtained
    COORD SizeWant; // 0;0 if Raster font
    LONG Weight;
    LPTSTR FaceName;
    BYTE Family;
    BYTE tmCharSet;
} FONT_INFO, *PFONT_INFO;",14,propsheet\font.hpp,PFONT_INFO,,false,61,PFONT_INFO,3
487604,TYPE_DECL,FACENODE,,,"typedef struct tagFACENODE
{
    struct tagFACENODE* pNext;
    DWORD dwFlag;
    TCHAR atch[];
}",1,propsheet\font.hpp,tagFACENODE,,false,66,tagFACENODE,4
487605,TYPE_DECL,pNext,,,struct tagFACENODE,5,propsheet\font.hpp,tagFACENODE.tagFACENODE,,false,68,tagFACENODE,1
487614,TYPE_DECL,tagFACENODE,,,"typedef struct tagFACENODE
{
    struct tagFACENODE* pNext;
    DWORD dwFlag;
    TCHAR atch[];
} FACENODE, *PFACENODE;",3,propsheet\font.hpp,FACENODE,,false,71,FACENODE,5
487615,TYPE_DECL,tagFACENODE*,,,"typedef struct tagFACENODE
{
    struct tagFACENODE* pNext;
    DWORD dwFlag;
    TCHAR atch[];
} FACENODE, *PFACENODE;",13,propsheet\font.hpp,PFACENODE,,false,71,PFACENODE,6
487642,TYPE_DECL,,propsheet\fontdlg.cpp:<global>,NAMESPACE_BLOCK,<global>,1,propsheet\fontdlg.cpp,propsheet\fontdlg.cpp:<global>,,false,1,<global>,3
489246,TYPE_DECL,,propsheet\fontdlg.hpp:<global>,NAMESPACE_BLOCK,<global>,1,propsheet\fontdlg.hpp,propsheet\fontdlg.hpp:<global>,,false,1,<global>,1
489253,TYPE_DECL,,propsheet\globals.cpp:<global>,NAMESPACE_BLOCK,<global>,1,propsheet\globals.cpp,propsheet\globals.cpp:<global>,,false,1,<global>,2
489359,TYPE_DECL,,propsheet\globals.hpp:<global>,NAMESPACE_BLOCK,<global>,1,propsheet\globals.hpp,propsheet\globals.hpp:<global>,,false,1,<global>,3
489406,TYPE_DECL,,propsheet\init.cpp:<global>,NAMESPACE_BLOCK,<global>,1,propsheet\init.cpp,propsheet\init.cpp:<global>,,false,1,<global>,3
489619,TYPE_DECL,,propsheet\menu.hpp:<global>,NAMESPACE_BLOCK,<global>,1,propsheet\menu.hpp,propsheet\menu.hpp:<global>,,false,1,<global>,1
489630,TYPE_DECL,,propsheet\misc.cpp:<global>,NAMESPACE_BLOCK,<global>,1,propsheet\misc.cpp,propsheet\misc.cpp:<global>,,false,1,<global>,4
489667,TYPE_DECL,FONTENUMDATA,,,"typedef struct _FONTENUMDATA
{
    HDC hDC;
    BOOL bFindFaces;
    ULONG ulFE;
    __field_ecount_opt(nTTPoints) PSHORT pTTPoints;
    UINT nTTPoints;
}",1,propsheet\misc.cpp,_FONTENUMDATA,,false,78,_FONTENUMDATA,5
489673,TYPE_DECL,_FONTENUMDATA,,,"typedef struct _FONTENUMDATA
{
    HDC hDC;
    BOOL bFindFaces;
    ULONG ulFE;
    __field_ecount_opt(nTTPoints) PSHORT pTTPoints;
    UINT nTTPoints;
} FONTENUMDATA, *PFONTENUMDATA;",3,propsheet\misc.cpp,FONTENUMDATA,,false,85,FONTENUMDATA,6
489674,TYPE_DECL,_FONTENUMDATA*,,,"typedef struct _FONTENUMDATA
{
    HDC hDC;
    BOOL bFindFaces;
    ULONG ulFE;
    __field_ecount_opt(nTTPoints) PSHORT pTTPoints;
    UINT nTTPoints;
} FONTENUMDATA, *PFONTENUMDATA;",17,propsheet\misc.cpp,PFONTENUMDATA,,false,85,PFONTENUMDATA,7
491130,TYPE_DECL,,propsheet\precomp.cpp:<global>,NAMESPACE_BLOCK,<global>,1,propsheet\precomp.cpp,propsheet\precomp.cpp:<global>,,false,1,<global>,2
491177,TYPE_DECL,,propsheet\precomp.hpp:<global>,NAMESPACE_BLOCK,<global>,1,propsheet\precomp.hpp,propsheet\precomp.hpp:<global>,,false,1,<global>,22
491184,TYPE_DECL,,propsheet\preview.cpp:<global>,NAMESPACE_BLOCK,<global>,1,propsheet\preview.cpp,propsheet\preview.cpp:<global>,,false,1,<global>,2
492562,TYPE_DECL,,propsheet\registry.cpp:<global>,NAMESPACE_BLOCK,<global>,1,propsheet\registry.cpp,propsheet\registry.cpp:<global>,,false,1,<global>,6
493337,TYPE_DECL,,propsheet\util.cpp:<global>,NAMESPACE_BLOCK,<global>,1,propsheet\util.cpp,propsheet\util.cpp:<global>,,false,1,<global>,3
493449,TYPE_DECL,,propslib\DelegationConfig.cpp:<global>,NAMESPACE_BLOCK,<global>,1,propslib\DelegationConfig.cpp,propslib\DelegationConfig.cpp:<global>,,false,1,<global>,11
494083,TYPE_DECL,,propslib\DelegationConfig.hpp:<global>,NAMESPACE_BLOCK,<global>,1,propslib\DelegationConfig.hpp,propslib\DelegationConfig.hpp:<global>,,false,1,<global>,1
494086,TYPE_DECL,,,,"class DelegationConfig
{
public:
    enum class DelegationPairKind : uint32_t
    {
        Undecided,
        Default,
        Conhost,
        Custom,
    };

    struct DelegationPair
    {
        // state contains a ""pre parsed"" idea of what console/terminal mean.
        // This might help make some code more readable.
        // If either are CLSID_Default, state will be Default.
        // If either are CLSID_Conhost, state will be Conhost.
        // Otherwise it'll be Custom.
        DelegationPairKind kind = DelegationPairKind::Undecided;
        CLSID console{};
        CLSID terminal{};

        constexpr bool IsUndecided() const noexcept { return kind == DelegationPairKind::Undecided; }
        constexpr bool IsDefault() const noexcept { return kind == DelegationPairKind::Default; }
        constexpr bool IsConhost() const noexcept { return kind == DelegationPairKind::Conhost; }
        constexpr bool IsCustom() const noexcept { return kind == DelegationPairKind::Custo...",1,propslib\DelegationConfig.hpp,DelegationConfig,,false,18,DelegationConfig,1
494087,TYPE_DECL,,,,"enum class DelegationPairKind : uint32_t
    {
        Undecided,
        Default,
        Conhost,
        Custom,
    }",5,propslib\DelegationConfig.hpp,DelegationConfig.DelegationPairKind,,false,21,DelegationPairKind,1
494092,TYPE_DECL,,,,"struct DelegationPair
    {
        // state contains a ""pre parsed"" idea of what console/terminal mean.
        // This might help make some code more readable.
        // If either are CLSID_Default, state will be Default.
        // If either are CLSID_Conhost, state will be Conhost.
        // Otherwise it'll be Custom.
        DelegationPairKind kind = DelegationPairKind::Undecided;
        CLSID console{};
        CLSID terminal{};

        constexpr bool IsUndecided() const noexcept { return kind == DelegationPairKind::Undecided; }
        constexpr bool IsDefault() const noexcept { return kind == DelegationPairKind::Default; }
        constexpr bool IsConhost() const noexcept { return kind == DelegationPairKind::Conhost; }
        constexpr bool IsCustom() const noexcept { return kind == DelegationPairKind::Custom; }

        constexpr bool operator==(const DelegationPair& other) const noexcept
        {
            static_assert(std::has_unique_object_representations_v<Dele...",5,propslib\DelegationConfig.hpp,DelegationConfig.DelegationPair,,false,29,DelegationPair,2
494170,TYPE_DECL,,,,"struct PkgVersion
    {
        unsigned short major = 0;
        unsigned short minor = 0;
        unsigned short build = 0;
        unsigned short revision = 0;

        constexpr bool operator==(const PkgVersion& other) const noexcept
        {
            static_assert(std::has_unique_object_representations_v<PkgVersion>);
            return __builtin_memcmp(this, &other, sizeof(*this)) == 0;
        }
    }",5,propslib\DelegationConfig.hpp,DelegationConfig.PkgVersion,,false,52,PkgVersion,3
494210,TYPE_DECL,,,,"struct PackageInfo
    {
        std::wstring name;
        std::wstring author;
        std::wstring pfn;
        std::wstring logo;
        PkgVersion version;

        bool IsFromSamePackage(const PackageInfo& other) const noexcept
        {
            return name == other.name &&
                   author == other.author &&
                   pfn == other.pfn &&
                   version == other.version;
        }
    }",5,propslib\DelegationConfig.hpp,DelegationConfig.PackageInfo,,false,66,PackageInfo,4
494245,TYPE_DECL,,,,"struct DelegationBase
    {
        CLSID clsid{};
        PackageInfo info;
    }",5,propslib\DelegationConfig.hpp,DelegationConfig.DelegationBase,,false,83,DelegationBase,5
494255,TYPE_DECL,,,,"struct DelegationPackage
    {
        DelegationPair pair;
        PackageInfo info;

        bool operator==(const DelegationPackage& other) const noexcept
        {
            return pair == other.pair;
        }
    }",5,propslib\DelegationConfig.hpp,DelegationConfig.DelegationPackage,,false,89,DelegationPackage,6
494421,TYPE_DECL,,propslib\RegistrySerialization.cpp:<global>,NAMESPACE_BLOCK,<global>,1,propslib\RegistrySerialization.cpp,propslib\RegistrySerialization.cpp:<global>,,false,1,<global>,3
494900,TYPE_DECL,,propslib\RegistrySerialization.hpp:<global>,NAMESPACE_BLOCK,<global>,1,propslib\RegistrySerialization.hpp,propslib\RegistrySerialization.hpp:<global>,,false,1,<global>,1
494903,TYPE_DECL,,,,class Settings,1,propslib\RegistrySerialization.hpp,Settings,,false,23,Settings,1
494904,TYPE_DECL,,,,"class RegistrySerialization
{
public:
    // The following registry methods remain public for DBCS and EUDC lookups.
    [[nodiscard]] static NTSTATUS s_OpenKey(_In_opt_ HKEY const hKey, _In_ PCWSTR const pwszSubKey, _Out_ HKEY* const phResult);

    [[nodiscard]] static NTSTATUS s_QueryValue(const HKEY hKey,
                                               _In_ PCWSTR const pwszValueName,
                                               const DWORD cbValueLength,
                                               const DWORD regType,
                                               _Out_writes_bytes_(cbValueLength) BYTE* const pbData,
                                               _Out_opt_ _Out_range_(0, cbValueLength) DWORD* const pcbDataLength);

    [[nodiscard]] static NTSTATUS s_EnumValue(const HKEY hKey,
                                              const DWORD dwIndex,
                                              const DWORD cbValueLength,
                                           ...",1,propslib\RegistrySerialization.hpp,RegistrySerialization,,false,25,RegistrySerialization,2
494914,TYPE_DECL,,,,"enum _RegPropertyType
    {
        Boolean,
        Dword,
        Word,
        Byte,
        Coordinate,
        String,
    }",5,propslib\RegistrySerialization.hpp,RegistrySerialization._RegPropertyType,,false,69,_RegPropertyType,10
494926,TYPE_DECL,RegPropertyMap,,,"typedef struct _RegPropertyMap
    {
        _RegPropertyType propertyType;
        PCWSTR pwszValueName;
        DWORD dwFieldOffset;
        size_t cbFieldSize;
    }",5,propslib\RegistrySerialization.hpp,RegistrySerialization._RegPropertyMap,,false,81,_RegPropertyMap,12
494931,TYPE_DECL,ANY,,,"typedef struct _RegPropertyMap
    {
        _RegPropertyType propertyType;
        PCWSTR pwszValueName;
        DWORD dwFieldOffset;
        size_t cbFieldSize;
    } RegPropertyMap;",7,propslib\RegistrySerialization.hpp,RegPropertyMap,,false,87,RegPropertyMap,13
494956,TYPE_DECL,,propslib\ShortcutSerialization.cpp:<global>,NAMESPACE_BLOCK,<global>,1,propslib\ShortcutSerialization.cpp,propslib\ShortcutSerialization.cpp:<global>,,false,1,<global>,6
494977,TYPE_DECL,,propslib\ShortcutSerialization.hpp:<global>,NAMESPACE_BLOCK,<global>,1,propslib\ShortcutSerialization.hpp,propslib\ShortcutSerialization.hpp:<global>,,false,1,<global>,1
494980,TYPE_DECL,,,,"class ShortcutSerialization
{
public:
    [[nodiscard]] static NTSTATUS s_SetLinkValues(_In_ PCONSOLE_STATE_INFO pStateInfo, const BOOL fEastAsianSystem, const BOOL fForceV2, const bool writeTerminalSettings);
    [[nodiscard]] static NTSTATUS s_GetLinkConsoleProperties(_Inout_ PCONSOLE_STATE_INFO pStateInfo);
    [[nodiscard]] static NTSTATUS s_GetLinkValues(_Inout_ PCONSOLE_STATE_INFO pStateInfo,
                                                  _Out_ BOOL* const pfReadConsoleProperties,
                                                  _Out_writes_opt_(cchShortcutTitle) PWSTR pwszShortcutTitle,
                                                  const size_t cchShortcutTitle,
                                                  _Out_writes_opt_(cchLinkTarget) PWSTR pwszLinkTarget,
                                                  const size_t cchLinkTarget,
                                                  _Out_writes_opt_(cchIconLocation) PWSTR pwszIconLocation,
                     ...",1,propslib\ShortcutSerialization.hpp,ShortcutSerialization,,false,24,ShortcutSerialization,1
495005,TYPE_DECL,,propslib\TrueTypeFontList.cpp:<global>,NAMESPACE_BLOCK,<global>,1,propslib\TrueTypeFontList.cpp,propslib\TrueTypeFontList.cpp:<global>,,false,1,<global>,4
495232,TYPE_DECL,,propslib\TrueTypeFontList.hpp:<global>,NAMESPACE_BLOCK,<global>,1,propslib\TrueTypeFontList.hpp,propslib\TrueTypeFontList.hpp:<global>,,false,1,<global>,1
495235,TYPE_DECL,,,,"class TrueTypeFontList
{
public:
    static SINGLE_LIST_ENTRY s_ttFontList;

    [[nodiscard]] static NTSTATUS s_Initialize();
    [[nodiscard]] static NTSTATUS s_Destroy();

    static LPTTFONTLIST s_SearchByName(_In_opt_ LPCWSTR pwszFace,
                                       _In_ BOOL fCodePage,
                                       _In_ UINT CodePage);

    [[nodiscard]] static NTSTATUS s_SearchByCodePage(const UINT uiCodePage,
                                                     _Out_writes_(cchFaceName) PWSTR pwszFaceName,
                                                     const size_t cchFaceName);
}",1,propslib\TrueTypeFontList.hpp,TrueTypeFontList,,false,18,TrueTypeFontList,1
495255,TYPE_DECL,,propslib\conpropsp.hpp:<global>,NAMESPACE_BLOCK,<global>,1,propslib\conpropsp.hpp,propslib\conpropsp.hpp:<global>,,false,1,<global>,4
495262,TYPE_DECL,,propslib\precomp.cpp:<global>,NAMESPACE_BLOCK,<global>,1,propslib\precomp.cpp,propslib\precomp.cpp:<global>,,false,1,<global>,2
495291,TYPE_DECL,,propslib\precomp.hpp:<global>,NAMESPACE_BLOCK,<global>,1,propslib\precomp.hpp,propslib\precomp.hpp:<global>,,false,1,<global>,13
495308,TYPE_DECL,,renderer\atlas\AtlasEngine.api.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\atlas\AtlasEngine.api.cpp,renderer\atlas\AtlasEngine.api.cpp:<global>,,false,1,<global>,5
497733,TYPE_DECL,,renderer\atlas\AtlasEngine.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\atlas\AtlasEngine.cpp,renderer\atlas\AtlasEngine.cpp:<global>,,false,1,<global>,6
500039,TYPE_DECL,,renderer\atlas\AtlasEngine.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\atlas\AtlasEngine.hpp,renderer\atlas\AtlasEngine.hpp:<global>,,false,1,<global>,5
500046,TYPE_DECL,,,,struct TextAnalysisSinkResult,5,renderer\atlas\AtlasEngine.hpp,Microsoft.Console.Render.Atlas.TextAnalysisSinkResult,,false,14,TextAnalysisSinkResult,1
500047,TYPE_DECL,,,,"class AtlasEngine final : public IRenderEngine
    {
    public:
        explicit AtlasEngine();

        AtlasEngine(const AtlasEngine&) = delete;
        AtlasEngine& operator=(const AtlasEngine&) = delete;

        // IRenderEngine
        [[nodiscard]] HRESULT StartPaint() noexcept override;
        [[nodiscard]] HRESULT EndPaint() noexcept override;
        [[nodiscard]] bool RequiresContinuousRedraw() noexcept override;
        void WaitUntilCanRender() noexcept override;
        [[nodiscard]] HRESULT Present() noexcept override;
        [[nodiscard]] HRESULT PrepareForTeardown(_Out_ bool* pForcePaint) noexcept override;
        [[nodiscard]] HRESULT ScrollFrame() noexcept override;
        [[nodiscard]] HRESULT Invalidate(const til::rect* psrRegion) noexcept override;
        [[nodiscard]] HRESULT InvalidateCursor(const til::rect* psrRegion) noexcept override;
        [[nodiscard]] HRESULT InvalidateSystem(const til::rect* prcDirtyClient) noexcept override;
        [[nodiscar...",5,renderer\atlas\AtlasEngine.hpp,Microsoft.Console.Render.Atlas.AtlasEngine,IRenderEngine,false,16,AtlasEngine,2
500414,TYPE_DECL,_api,,,"struct ApiState
        {
            GenerationalSettings s = DirtyGenerationalSettings();

            // This structure is loosely sorted in chunks from ""very often accessed together""
            // to seldom accessed and/or usually not together.

            bool invalidatedTitle = false;
            // These two are redundant with TargetSettings/MiscellaneousSettings, but that's because _resolveTransparencySettings()
            // turns the given settings into potentially different actual settings (which are then written into the Settings).
            bool enableTransparentBackground = false;
            AntialiasingMode antialiasingMode = DefaultAntialiasingMode;

            std::vector<wchar_t> bufferLine;
            std::vector<u16> bufferLineColumn;

            std::wstring userLocaleName;

            std::array<Buffer<DWRITE_FONT_AXIS_VALUE>, 4> textFormatAxes;
            std::vector<TextAnalysisSinkResult> analysisResults;
            Buffer<u16> clusterMap;
      ...",9,renderer\atlas\AtlasEngine.hpp,Microsoft.Console.Render.Atlas.AtlasEngine.ApiState,,false,119,ApiState,85
500538,TYPE_DECL,ANY,,,using AtlasEngine = Atlas::AtlasEngine;,5,renderer\atlas\AtlasEngine.hpp,AtlasEngine,,false,173,AtlasEngine,1
500549,TYPE_DECL,,renderer\atlas\AtlasEngine.r.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\atlas\AtlasEngine.r.cpp,renderer\atlas\AtlasEngine.r.cpp:<global>,,false,1,<global>,5
501892,TYPE_DECL,,renderer\atlas\Backend.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\atlas\Backend.cpp,renderer\atlas\Backend.cpp:<global>,,false,1,<global>,3
502216,TYPE_DECL,,renderer\atlas\Backend.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\atlas\Backend.hpp,renderer\atlas\Backend.hpp:<global>,,false,1,<global>,2
502588,TYPE_DECL,,renderer\atlas\BackendD2D.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\atlas\BackendD2D.cpp,renderer\atlas\BackendD2D.cpp:<global>,,false,1,<global>,5
504909,TYPE_DECL,,renderer\atlas\BackendD2D.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\atlas\BackendD2D.hpp,renderer\atlas\BackendD2D.hpp:<global>,,false,1,<global>,3
504916,TYPE_DECL,,,,"struct BackendD2D : IBackend
    {
        void ReleaseResources() noexcept override;
        void Render(RenderingPayload& payload) override;
        bool RequiresContinuousRedraw() noexcept override;

    private:
        ATLAS_ATTR_COLD void _handleSettingsUpdate(const RenderingPayload& p);
        void _drawBackground(const RenderingPayload& p) noexcept;
        void _drawText(RenderingPayload& p);
        ATLAS_ATTR_COLD f32 _drawTextPrepareLineRendition(const RenderingPayload& p, const ShapedRow* row, f32 baselineY) const noexcept;
        ATLAS_ATTR_COLD void _drawTextResetLineRendition(const ShapedRow* row) const noexcept;
        ATLAS_ATTR_COLD f32r _getGlyphRunDesignBounds(const DWRITE_GLYPH_RUN& glyphRun, f32 baselineX, f32 baselineY);
        ATLAS_ATTR_COLD void _drawGridlineRow(const RenderingPayload& p, const ShapedRow* row, u16 y);
        void _drawCursorPart1(const RenderingPayload& p);
        void _drawCursorPart2(const RenderingPayload& p);
        static void ...",5,renderer\atlas\BackendD2D.hpp,Microsoft.Console.Render.Atlas.BackendD2D,IBackend,false,12,BackendD2D,1
505080,TYPE_DECL,,renderer\atlas\BackendD3D.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\atlas\BackendD3D.cpp,renderer\atlas\BackendD3D.cpp:<global>,,false,1,<global>,11
505296,TYPE_DECL,hash<u16><>,,,"struct std::hash<u16>
{
    constexpr size_t operator()(u16 key) const noexcept
    {
        return til::flat_set_hash_integer(key);
    }
}",1,renderer\atlas\BackendD3D.cpp,hash<u16>,,false,46,hash<u16>,2
505308,TYPE_DECL,hash<BackendD3D.AtlasGlyphEntry><>,,,"struct std::hash<BackendD3D::AtlasGlyphEntry>
{
    constexpr size_t operator()(u16 key) const noexcept
    {
        return til::flat_set_hash_integer(key);
    }

    constexpr size_t operator()(const BackendD3D::AtlasGlyphEntry& slot) const noexcept
    {
        return til::flat_set_hash_integer(slot.glyphIndex);
    }
}",1,renderer\atlas\BackendD3D.cpp,hash<BackendD3D.AtlasGlyphEntry>,,false,55,hash<BackendD3D::AtlasGlyphEntry>,3
505333,TYPE_DECL,hash<BackendD3D.AtlasFontFaceEntry><>,,,"struct std::hash<BackendD3D::AtlasFontFaceEntry>
{
    using T = BackendD3D::AtlasFontFaceEntry;

    size_t operator()(const BackendD3D::AtlasFontFaceKey& key) const noexcept
    {
        return til::flat_set_hash_integer(std::bit_cast<uintptr_t>(key.fontFace) | static_cast<u8>(key.lineRendition));
    }

    size_t operator()(const BackendD3D::AtlasFontFaceEntry& slot) const noexcept
    {
        const auto& inner = *slot.inner;
        return til::flat_set_hash_integer(std::bit_cast<uintptr_t>(inner.fontFace.get()) | static_cast<u8>(inner.lineRendition));
    }
}",1,renderer\atlas\BackendD3D.cpp,hash<BackendD3D.AtlasFontFaceEntry>,,false,69,hash<BackendD3D::AtlasFontFaceEntry>,4
505334,TYPE_DECL,ANY,,,using T = BackendD3D::AtlasFontFaceEntry;,5,renderer\atlas\BackendD3D.cpp,T,,false,71,T,1
510960,TYPE_DECL,,renderer\atlas\BackendD3D.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\atlas\BackendD3D.hpp,renderer\atlas\BackendD3D.hpp:<global>,,false,1,<global>,5
510967,TYPE_DECL,,,,"struct BackendD3D : IBackend
    {
        BackendD3D(const RenderingPayload& p);

        void ReleaseResources() noexcept override;
        void Render(RenderingPayload& payload) override;
        bool RequiresContinuousRedraw() noexcept override;

        // NOTE: D3D constant buffers sizes must be a multiple of 16 bytes.
        struct alignas(16) VSConstBuffer
        {
            // WARNING: Modify this carefully after understanding how HLSL struct packing works. The gist is:
            // * Minimum alignment is 4 bytes
            // * Members cannot straddle 16 byte boundaries
            //   This means a structure like {u32; u32; u32; u32x2} would require
            //   padding so that it is {u32; u32; u32; <4 byte padding>; u32x2}.
            // * bool will probably not work the way you want it to,
            //   because HLSL uses 32-bit bools and C++ doesn't.
            alignas(sizeof(f32x2)) f32x2 positionScale;
#pragma warning(suppress : 4324) // 'VSConstBuffer...",5,renderer\atlas\BackendD3D.hpp,Microsoft.Console.Render.Atlas.BackendD3D,IBackend,false,14,BackendD3D,1
510986,TYPE_DECL,,,,"struct alignas(16) VSConstBuffer
        {
            // WARNING: Modify this carefully after understanding how HLSL struct packing works. The gist is:
            // * Minimum alignment is 4 bytes
            // * Members cannot straddle 16 byte boundaries
            //   This means a structure like {u32; u32; u32; u32x2} would require
            //   padding so that it is {u32; u32; u32; <4 byte padding>; u32x2}.
            // * bool will probably not work the way you want it to,
            //   because HLSL uses 32-bit bools and C++ doesn't.
            alignas(sizeof(f32x2)) f32x2 positionScale;
#pragma warning(suppress : 4324) // 'VSConstBuffer': structure was padded due to alignment specifier
        }",9,renderer\atlas\BackendD3D.hpp,Microsoft.Console.Render.Atlas.BackendD3D.VSConstBuffer,,false,23,VSConstBuffer,5
510988,TYPE_DECL,,,,"struct alignas(16) PSConstBuffer
        {
            alignas(sizeof(f32x4)) f32x4 backgroundColor;
            alignas(sizeof(f32x2)) f32x2 backgroundCellSize;
            alignas(sizeof(f32x2)) f32x2 backgroundCellCount;
            alignas(sizeof(f32x4)) f32 gammaRatios[4]{};
            alignas(sizeof(f32)) f32 enhancedContrast = 0;
            alignas(sizeof(f32)) f32 underlineWidth = 0;
            alignas(sizeof(f32)) f32 curlyLinePeakHeight = 0;
            alignas(sizeof(f32)) f32 curlyLineWaveFreq = 0;
            alignas(sizeof(f32)) f32 curlyLineCellOffset = 0;
#pragma warning(suppress : 4324) // 'PSConstBuffer': structure was padded due to alignment specifier
        }",9,renderer\atlas\BackendD3D.hpp,Microsoft.Console.Render.Atlas.BackendD3D.PSConstBuffer,,false,37,PSConstBuffer,6
511020,TYPE_DECL,,,,"struct alignas(16) CustomConstBuffer
        {
            alignas(sizeof(f32)) f32 time = 0;
            alignas(sizeof(f32)) f32 scale = 0;
            alignas(sizeof(f32x2)) f32x2 resolution;
            alignas(sizeof(f32x4)) f32x4 background;
#pragma warning(suppress : 4324) // 'CustomConstBuffer': structure was padded due to alignment specifier
        }",9,renderer\atlas\BackendD3D.hpp,Microsoft.Console.Render.Atlas.BackendD3D.CustomConstBuffer,,false,52,CustomConstBuffer,7
511035,TYPE_DECL,,,,"enum class ShadingType : u16
        {
            Default = 0,
            Background = 0,

            // This block of values will be used for the TextDrawingFirst/Last range and need to stay together.
            // This is used to quickly check if an instance is related to a ""text drawing primitive"".
            TextGrayscale = 1,
            TextClearType = 2,
            TextPassthrough = 3,
            DottedLine = 4,
            DashedLine = 5,
            CurlyLine = 6,
            // All items starting here will be drawing as a solid RGBA color
            SolidLine = 7,

            Cursor = 8,
            Selection = 9,

            TextDrawingFirst = TextGrayscale,
            TextDrawingLast = SolidLine,
        }",9,renderer\atlas\BackendD3D.hpp,Microsoft.Console.Render.Atlas.BackendD3D.ShadingType,,false,61,ShadingType,8
511092,TYPE_DECL,,,,"struct QuadInstance
        {
            // `position` might clip outside of the bounds of the viewport and so it needs to be a
            // signed coordinate. i16x2 is used as the size of the instance buffer made the largest
            // impact on performance and power draw. If (when?) displays with >32k resolution make their
            // appearance in the future, this should be changed to f32x2. But if you do so, please change
            // all other occurrences of i16x2 positions/offsets throughout the class to keep it consistent.
            alignas(u16) ShadingType shadingType;
            alignas(u16) u8x2 renditionScale;
            alignas(u32) i16x2 position;
            alignas(u32) u16x2 size;
            alignas(u32) u16x2 texcoord;
            alignas(u32) u32 color;
        }",9,renderer\atlas\BackendD3D.hpp,Microsoft.Console.Render.Atlas.BackendD3D.QuadInstance,,false,86,QuadInstance,9
511099,TYPE_DECL,,,,"struct alignas(u32) AtlasGlyphEntryData
        {
            ShadingType shadingType;
            u16 overlapSplit;
            i16x2 offset;
            u16x2 size;
            u16x2 texcoord;
        }",9,renderer\atlas\BackendD3D.hpp,Microsoft.Console.Render.Atlas.BackendD3D.AtlasGlyphEntryData,,false,101,AtlasGlyphEntryData,10
511105,TYPE_DECL,,,,"struct AtlasGlyphEntry
        {
            u16 glyphIndex;
            // All data in QuadInstance is u32-aligned anyways, so this simultaneously serves as padding.
            u16 _occupied;

            AtlasGlyphEntryData data;

            constexpr bool operator==(u16 key) const noexcept
            {
                return glyphIndex == key;
            }

            constexpr operator bool() const noexcept
            {
                return _occupied != 0;
            }

            constexpr AtlasGlyphEntry& operator=(u16 key) noexcept
            {
                glyphIndex = key;
                _occupied = 1;
                return *this;
            }
        }",9,renderer\atlas\BackendD3D.hpp,Microsoft.Console.Render.Atlas.BackendD3D.AtlasGlyphEntry,,false,112,AtlasGlyphEntry,11
511140,TYPE_DECL,,,,"struct AtlasFontFaceKey
        {
            IDWriteFontFace2* fontFace;
            LineRendition lineRendition;
        }",9,renderer\atlas\BackendD3D.hpp,Microsoft.Console.Render.Atlas.BackendD3D.AtlasFontFaceKey,,false,139,AtlasFontFaceKey,12
511143,TYPE_DECL,,,,"struct AtlasFontFaceEntryInner
        {
            // BODGY: At the time of writing IDWriteFontFallback::MapCharacters returns the same IDWriteFontFace instance
            // for the same font face variant as long as someone is holding a reference to the instance (see ActiveFaceCache).
            // This allows us to hash the value of the pointer as if it was uniquely identifying the font face variant.
            wil::com_ptr<IDWriteFontFace2> fontFace;
            LineRendition lineRendition = LineRendition::SingleWidth;

            til::linear_flat_set<AtlasGlyphEntry> glyphs;
            // boxGlyphs gets an increased growth rate of 2^2 = 4x, because presumably fonts either contain very
            // few or almost all of the box glyphs. This reduces the cost of _initializeFontFaceEntry quite a bit.
            til::linear_flat_set<u16, 2, 2> boxGlyphs;
        }",9,renderer\atlas\BackendD3D.hpp,Microsoft.Console.Render.Atlas.BackendD3D.AtlasFontFaceEntryInner,,false,145,AtlasFontFaceEntryInner,13
511157,TYPE_DECL,,,,"struct AtlasFontFaceEntry
        {
            // This being a heap allocated allows us to insert into `glyphs` in `_splitDoubleHeightGlyph`
            // (which might resize the hashmap!), while the caller `_drawText` is holding onto `glyphs`.
            // If it wasn't heap allocated, all pointers into `linear_flat_set` would be invalidated.
            std::unique_ptr<AtlasFontFaceEntryInner> inner;

            bool operator==(const AtlasFontFaceKey& key) const noexcept
            {
                const auto& i = *inner;
                return i.fontFace.get() == key.fontFace && i.lineRendition == key.lineRendition;
            }

            operator bool() const noexcept
            {
                return static_cast<bool>(inner);
            }

            AtlasFontFaceEntry& operator=(const AtlasFontFaceKey& key)
            {
                inner = std::make_unique<AtlasFontFaceEntryInner>();
                auto& i = *inner;
                i.fontFace = key.fontFac...",9,renderer\atlas\BackendD3D.hpp,Microsoft.Console.Render.Atlas.BackendD3D.AtlasFontFaceEntry,,false,159,AtlasFontFaceEntry,14
511229,TYPE_DECL,,,,"struct CursorRect
        {
            i16x2 position;
            u16x2 size;
            u32 background;
            u32 foreground;
        }",9,renderer\atlas\BackendD3D.hpp,Microsoft.Console.Render.Atlas.BackendD3D.CursorRect,,false,188,CursorRect,15
511557,TYPE_DECL,,renderer\atlas\DWriteTextAnalysis.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\atlas\DWriteTextAnalysis.cpp,renderer\atlas\DWriteTextAnalysis.cpp:<global>,,false,1,<global>,3
511808,TYPE_DECL,,renderer\atlas\DWriteTextAnalysis.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\atlas\DWriteTextAnalysis.hpp,renderer\atlas\DWriteTextAnalysis.hpp:<global>,,false,1,<global>,2
511815,TYPE_DECL,,,,"struct TextAnalysisSource final : IDWriteTextAnalysisSource
    {
        TextAnalysisSource(const wchar_t* locale, const wchar_t* text, const UINT32 textLength) noexcept;
#ifndef NDEBUG
        ~TextAnalysisSource();
#endif

        ULONG __stdcall AddRef() noexcept override;
        ULONG __stdcall Release() noexcept override;
        HRESULT __stdcall QueryInterface(const IID& riid, void** ppvObject) noexcept override;
        HRESULT __stdcall GetTextAtPosition(UINT32 textPosition, const WCHAR** textString, UINT32* textLength) noexcept override;
        HRESULT __stdcall GetTextBeforePosition(UINT32 textPosition, const WCHAR** textString, UINT32* textLength) noexcept override;
        DWRITE_READING_DIRECTION __stdcall GetParagraphReadingDirection() noexcept override;
        HRESULT __stdcall GetLocaleName(UINT32 textPosition, UINT32* textLength, const WCHAR** localeName) noexcept override;
        HRESULT __stdcall GetNumberSubstitution(UINT32 textPosition, UINT32* textLength,...",5,renderer\atlas\DWriteTextAnalysis.hpp,Microsoft.Console.Render.Atlas.TextAnalysisSource,IDWriteTextAnalysisSource,false,10,TextAnalysisSource,1
511884,TYPE_DECL,,,,"struct TextAnalysisSink final : IDWriteTextAnalysisSink
    {
        TextAnalysisSink(std::vector<TextAnalysisSinkResult>& results) noexcept;
#ifndef NDEBUG
        ~TextAnalysisSink();
#endif

        ULONG __stdcall AddRef() noexcept override;
        ULONG __stdcall Release() noexcept override;
        HRESULT __stdcall QueryInterface(const IID& riid, void** ppvObject) noexcept override;
        HRESULT __stdcall SetScriptAnalysis(UINT32 textPosition, UINT32 textLength, const DWRITE_SCRIPT_ANALYSIS* scriptAnalysis) noexcept override;
        HRESULT __stdcall SetLineBreakpoints(UINT32 textPosition, UINT32 textLength, const DWRITE_LINE_BREAKPOINT* lineBreakpoints) noexcept override;
        HRESULT __stdcall SetBidiLevel(UINT32 textPosition, UINT32 textLength, UINT8 explicitLevel, UINT8 resolvedLevel) noexcept override;
        HRESULT __stdcall SetNumberSubstitution(UINT32 textPosition, UINT32 textLength, IDWriteNumberSubstitution* numberSubstitution) noexcept override;

    pri...",5,renderer\atlas\DWriteTextAnalysis.hpp,Microsoft.Console.Render.Atlas.TextAnalysisSink,IDWriteTextAnalysisSink,false,35,TextAnalysisSink,2
511948,TYPE_DECL,,renderer\atlas\colorbrewer.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\atlas\colorbrewer.hpp,renderer\atlas\colorbrewer.hpp:<global>,,false,1,<global>,1
511975,TYPE_DECL,,renderer\atlas\common.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\atlas\common.hpp,renderer\atlas\common.hpp:<global>,,false,1,<global>,3
511982,TYPE_DECL,Microsoft.Console.Render.Atlas.vec2<T>,,,"struct vec2
    {
        // These members aren't zero-initialized to make these trivial types,
        // and allow the compiler to quickly memset() allocations, etc.
        T x;
        T y;

        ATLAS_POD_OPS(vec2)
    }",5,renderer\atlas\common.hpp,Microsoft.Console.Render.Atlas.vec2,,false,57,vec2,1
512010,TYPE_DECL,Microsoft.Console.Render.Atlas.vec4<T>,,,"struct vec4
    {
        // These members aren't zero-initialized to make these trivial types,
        // and allow the compiler to quickly memset() allocations, etc.
        T x;
        T y;
        T z;
        T w;

        ATLAS_POD_OPS(vec4)
    }",5,renderer\atlas\common.hpp,Microsoft.Console.Render.Atlas.vec4,,false,68,vec4,2
512040,TYPE_DECL,Microsoft.Console.Render.Atlas.rect<T>,,,"struct rect
    {
        // These members aren't zero-initialized to make these trivial types,
        // and allow the compiler to quickly memset() allocations, etc.
        T left;
        T top;
        T right;
        T bottom;

        ATLAS_POD_OPS(rect)

        constexpr bool empty() const noexcept
        {
            return left >= right || top >= bottom;
        }

        constexpr bool non_empty() const noexcept
        {
            return left < right && top < bottom;
        }
    }",5,renderer\atlas\common.hpp,Microsoft.Console.Render.Atlas.rect,,false,81,rect,3
512094,TYPE_DECL,Microsoft.Console.Render.Atlas.range<T>,,,"struct range
    {
        T start;
        T end;

        ATLAS_POD_OPS(range)

        constexpr bool empty() const noexcept
        {
            return start >= end;
        }

        constexpr bool non_empty() const noexcept
        {
            return start < end;
        }

        constexpr bool contains(T v) const noexcept
        {
            return v >= start && v < end;
        }
    }",5,renderer\atlas\common.hpp,Microsoft.Console.Render.Atlas.range,,false,104,range,4
512151,TYPE_DECL,uint8_t,,,using u8 = uint8_t;,5,renderer\atlas\common.hpp,u8,,false,127,u8,5
512152,TYPE_DECL,vec2<u8>,,,using u8x2 = vec2<u8>;,5,renderer\atlas\common.hpp,u8x2,,false,128,u8x2,6
512153,TYPE_DECL,uint16_t,,,using u16 = uint16_t;,5,renderer\atlas\common.hpp,u16,,false,130,u16,7
512154,TYPE_DECL,vec2<u16>,,,using u16x2 = vec2<u16>;,5,renderer\atlas\common.hpp,u16x2,,false,131,u16x2,8
512155,TYPE_DECL,rect<u16>,,,using u16r = rect<u16>;,5,renderer\atlas\common.hpp,u16r,,false,132,u16r,9
512156,TYPE_DECL,int16_t,,,using i16 = int16_t;,5,renderer\atlas\common.hpp,i16,,false,134,i16,10
512157,TYPE_DECL,vec2<i16>,,,using i16x2 = vec2<i16>;,5,renderer\atlas\common.hpp,i16x2,,false,135,i16x2,11
512158,TYPE_DECL,vec4<i16>,,,using i16x4 = vec4<i16>;,5,renderer\atlas\common.hpp,i16x4,,false,136,i16x4,12
512159,TYPE_DECL,rect<i16>,,,using i16r = rect<i16>;,5,renderer\atlas\common.hpp,i16r,,false,137,i16r,13
512160,TYPE_DECL,uint32_t,,,using u32 = uint32_t;,5,renderer\atlas\common.hpp,u32,,false,139,u32,14
512161,TYPE_DECL,vec2<u32>,,,using u32x2 = vec2<u32>;,5,renderer\atlas\common.hpp,u32x2,,false,140,u32x2,15
512162,TYPE_DECL,vec4<u32>,,,using u32x4 = vec4<u32>;,5,renderer\atlas\common.hpp,u32x4,,false,141,u32x4,16
512163,TYPE_DECL,rect<u32>,,,using u32r = rect<u32>;,5,renderer\atlas\common.hpp,u32r,,false,142,u32r,17
512164,TYPE_DECL,int32_t,,,using i32 = int32_t;,5,renderer\atlas\common.hpp,i32,,false,144,i32,18
512165,TYPE_DECL,vec2<i32>,,,using i32x2 = vec2<i32>;,5,renderer\atlas\common.hpp,i32x2,,false,145,i32x2,19
512166,TYPE_DECL,vec4<i32>,,,using i32x4 = vec4<i32>;,5,renderer\atlas\common.hpp,i32x4,,false,146,i32x4,20
512167,TYPE_DECL,rect<i32>,,,using i32r = rect<i32>;,5,renderer\atlas\common.hpp,i32r,,false,147,i32r,21
512168,TYPE_DECL,float,,,using f32 = float;,5,renderer\atlas\common.hpp,f32,,false,149,f32,22
512169,TYPE_DECL,vec2<f32>,,,using f32x2 = vec2<f32>;,5,renderer\atlas\common.hpp,f32x2,,false,150,f32x2,23
512170,TYPE_DECL,vec4<f32>,,,using f32x4 = vec4<f32>;,5,renderer\atlas\common.hpp,f32x4,,false,151,f32x4,24
512171,TYPE_DECL,rect<f32>,,,using f32r = rect<f32>;,5,renderer\atlas\common.hpp,f32r,,false,152,f32r,25
512172,TYPE_DECL,"Microsoft.Console.Render.Atlas.Buffer<T,size_t=alignof(T)>",,,"struct Buffer
    {
        constexpr Buffer() noexcept = default;

        explicit Buffer(size_t size) :
            _data{ allocate(size) },
            _size{ size }
        {
            std::uninitialized_default_construct_n(_data, size);
        }

        Buffer(const T* data, size_t size) :
            _data{ allocate(size) },
            _size{ size }
        {
            // Changing the constructor arguments to accept std::span might
            // be a good future extension, but not to improve security here.
            // You can trivially construct std::span's from invalid ranges.
            // Until then the raw-pointer style is more practical.
#pragma warning(suppress : 26459) // You called an STL function '...' with a raw pointer parameter at position '...' that may be unsafe [...].
            std::uninitialized_copy_n(data, size, _data);
        }

        ~Buffer()
        {
            destroy();
        }

        Buffer(const Buffer& other) = delete;
       ...",5,renderer\atlas\common.hpp,Microsoft.Console.Render.Atlas.Buffer,,false,161,Buffer,26
512422,TYPE_DECL,,,,"struct TextAnalysisSinkResult
    {
        uint32_t textPosition;
        uint32_t textLength;
        DWRITE_SCRIPT_ANALYSIS analysis;
    }",5,renderer\atlas\common.hpp,Microsoft.Console.Render.Atlas.TextAnalysisSinkResult,,false,307,TextAnalysisSinkResult,27
512426,TYPE_DECL,,,,"struct TargetSettings
    {
        HWND hwnd = nullptr;
        bool useAlpha = false;
        bool useSoftwareRendering = false;
    }",5,renderer\atlas\common.hpp,Microsoft.Console.Render.Atlas.TargetSettings,,false,314,TargetSettings,28
512443,TYPE_DECL,,,,"enum class AntialiasingMode : u8
    {
        ClearType = D2D1_TEXT_ANTIALIAS_MODE_CLEARTYPE,
        Grayscale = D2D1_TEXT_ANTIALIAS_MODE_GRAYSCALE,
        Aliased = D2D1_TEXT_ANTIALIAS_MODE_ALIASED,
    }",5,renderer\atlas\common.hpp,Microsoft.Console.Render.Atlas.AntialiasingMode,,false,321,AntialiasingMode,29
512466,TYPE_DECL,,,,"struct FontDecorationPosition
    {
        u16 position = 0;
        u16 height = 0;
    }",5,renderer\atlas\common.hpp,Microsoft.Console.Render.Atlas.FontDecorationPosition,,false,330,FontDecorationPosition,32
512479,TYPE_DECL,,,,"struct FontSettings
    {
        wil::com_ptr<IDWriteFontCollection> fontCollection;
        wil::com_ptr<IDWriteFontFamily> fontFamily;
        std::wstring fontName;
        std::vector<DWRITE_FONT_FEATURE> fontFeatures;
        std::vector<DWRITE_FONT_AXIS_VALUE> fontAxisValues;
        f32 fontSize = 0;
        u16x2 cellSize;
        u16 fontWeight = 0;
        u16 advanceWidth = 0;
        u16 baseline = 0;
        u16 descender = 0;
        u16 thinLineWidth = 0;

        FontDecorationPosition gridTop;
        FontDecorationPosition gridBottom;
        FontDecorationPosition gridLeft;
        FontDecorationPosition gridRight;

        FontDecorationPosition underline;
        FontDecorationPosition strikethrough;
        FontDecorationPosition doubleUnderline[2];
        FontDecorationPosition overline;

        u16 dpi = 96;
        AntialiasingMode antialiasingMode = DefaultAntialiasingMode;

        std::vector<uint16_t> softFontPattern;
        til::size softFontCellSiz...",5,renderer\atlas\common.hpp,Microsoft.Console.Render.Atlas.FontSettings,,false,336,FontSettings,33
512534,TYPE_DECL,,,,"struct CursorSettings
    {
        ATLAS_POD_OPS(CursorSettings)

        u32 cursorColor = 0xffffffff;
        u16 cursorType = 0;
        u16 heightPercentage = 20;
    }",5,renderer\atlas\common.hpp,Microsoft.Console.Render.Atlas.CursorSettings,,false,368,CursorSettings,34
512576,TYPE_DECL,,,,"struct MiscellaneousSettings
    {
        u32 backgroundColor = 0;
        u32 selectionColor = 0x7fffffff;
        std::wstring customPixelShaderPath;
        bool useRetroTerminalEffect = false;
    }",5,renderer\atlas\common.hpp,Microsoft.Console.Render.Atlas.MiscellaneousSettings,,false,377,MiscellaneousSettings,35
512594,TYPE_DECL,,,,"struct Settings
    {
        til::generational<TargetSettings> target;
        til::generational<FontSettings> font;
        til::generational<CursorSettings> cursor;
        til::generational<MiscellaneousSettings> misc;
        // Size of the viewport / swap chain in pixel.
        u16x2 targetSize{ 1, 1 };
        // Size of the portion of the text buffer that we're drawing on the screen.
        u16x2 viewportCellCount{ 1, 1 };
        // The position of the viewport inside the text buffer (in cells).
        u16x2 viewportOffset{ 0, 0 };
    }",5,renderer\atlas\common.hpp,Microsoft.Console.Render.Atlas.Settings,,false,385,Settings,36
512621,TYPE_DECL,ANY,,,using GenerationalSettings = til::generational<Settings>;,5,renderer\atlas\common.hpp,GenerationalSettings,,false,399,GenerationalSettings,37
512652,TYPE_DECL,,,,"enum class FontRelevantAttributes : u8
    {
        None = 0,
        Bold = 0b01,
        Italic = 0b10,
    }",5,renderer\atlas\common.hpp,Microsoft.Console.Render.Atlas.FontRelevantAttributes,,false,412,FontRelevantAttributes,39
512762,TYPE_DECL,,,,"struct FontMapping
    {
        wil::com_ptr<IDWriteFontFace2> fontFace;
        u32 glyphsFrom = 0;
        u32 glyphsTo = 0;
    }",5,renderer\atlas\common.hpp,Microsoft.Console.Render.Atlas.FontMapping,,false,420,FontMapping,47
512776,TYPE_DECL,,,,"struct GridLineRange
    {
        GridLineSet lines;
        u32 gridlineColor = 0;
        u32 underlineColor = 0;
        u16 from = 0;
        u16 to = 0;
    }",5,renderer\atlas\common.hpp,Microsoft.Console.Render.Atlas.GridLineRange,,false,427,GridLineRange,48
512798,TYPE_DECL,,,,"struct ShapedRow
    {
        void Clear(u16 y, u16 cellHeight) noexcept
        {
            mappings.clear();
            glyphIndices.clear();
            glyphAdvances.clear();
            glyphOffsets.clear();
            colors.clear();
            gridLineRanges.clear();
            lineRendition = LineRendition::SingleWidth;
            selectionFrom = 0;
            selectionTo = 0;
            dirtyTop = y * cellHeight;
            dirtyBottom = dirtyTop + cellHeight;
        }

        std::vector<FontMapping> mappings;
        std::vector<u16> glyphIndices;
        std::vector<f32> glyphAdvances; // same size as glyphIndices
        std::vector<DWRITE_GLYPH_OFFSET> glyphOffsets; // same size as glyphIndices
        std::vector<u32> colors; // same size as glyphIndices
        std::vector<GridLineRange> gridLineRanges;
        LineRendition lineRendition = LineRendition::SingleWidth;
        u16 selectionFrom = 0;
        u16 selectionTo = 0;
        til::CoordType dirt...",5,renderer\atlas\common.hpp,Microsoft.Console.Render.Atlas.ShapedRow,,false,436,ShapedRow,49
512882,TYPE_DECL,,,,"struct RenderingPayload
    {
        //// Parameters which are constant across backends.
        wil::com_ptr<ID2D1Factory> d2dFactory;
        wil::com_ptr<IDWriteFactory2> dwriteFactory;
        wil::com_ptr<IDWriteFactory4> dwriteFactory4; // optional, might be nullptr
        wil::com_ptr<IDWriteFontFallback> systemFontFallback;
        wil::com_ptr<IDWriteFontFallback1> systemFontFallback1; // optional, might be nullptr
        wil::com_ptr<IDWriteTextAnalyzer1> textAnalyzer;
        std::function<void(HRESULT)> warningCallback;
        std::function<void(HANDLE)> swapChainChangedCallback;

        //// Parameters which are constant for the existence of the backend.
        struct
        {
            wil::com_ptr<IDXGIFactory2> factory;
            wil::com_ptr<IDXGIAdapter1> adapter;
            LUID adapterLuid{};
            UINT adapterFlags = 0;
        } dxgi;
        struct
        {
            wil::com_ptr<IDXGISwapChain2> swapChain;
            wil::unique_handle h...",5,renderer\atlas\common.hpp,Microsoft.Console.Render.Atlas.RenderingPayload,,false,466,RenderingPayload,50
512891,TYPE_DECL,dxgi,,,"struct
        {
            wil::com_ptr<IDXGIFactory2> factory;
            wil::com_ptr<IDXGIAdapter1> adapter;
            LUID adapterLuid{};
            UINT adapterFlags = 0;
        }",9,renderer\atlas\common.hpp,Microsoft.Console.Render.Atlas.RenderingPayload.dxgi,,false,479,Microsoft.Console.Render.Atlas.RenderingPayload.dxgi,9
512907,TYPE_DECL,swapChain,,,"struct
        {
            wil::com_ptr<IDXGISwapChain2> swapChain;
            wil::unique_handle handle;
            wil::unique_handle frameLatencyWaitableObject;
            til::generation_t generation;
            til::generation_t targetGeneration;
            til::generation_t fontGeneration;
            u16x2 targetSize{};
            bool waitForPresentation = false;
        }",9,renderer\atlas\common.hpp,Microsoft.Console.Render.Atlas.RenderingPayload.swapChain,,false,486,Microsoft.Console.Render.Atlas.RenderingPayload.swapChain,11
512978,TYPE_DECL,,,,"struct IBackend
    {
        virtual ~IBackend() = default;
        virtual void ReleaseResources() noexcept = 0;
        virtual void Render(RenderingPayload& payload) = 0;
        virtual bool RequiresContinuousRedraw() noexcept = 0;
    }",5,renderer\atlas\common.hpp,Microsoft.Console.Render.Atlas.IBackend,,false,558,IBackend,51
513002,TYPE_DECL,,renderer\atlas\dwrite.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\atlas\dwrite.cpp,renderer\atlas\dwrite.cpp:<global>,,false,1,<global>,3
513533,TYPE_DECL,,renderer\atlas\dwrite.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\atlas\dwrite.hpp,renderer\atlas\dwrite.hpp:<global>,,false,1,<global>,2
513566,TYPE_DECL,,renderer\atlas\pch.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\atlas\pch.cpp,renderer\atlas\pch.cpp:<global>,,false,1,<global>,2
513631,TYPE_DECL,,renderer\atlas\pch.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\atlas\pch.hpp,renderer\atlas\pch.hpp:<global>,,false,1,<global>,31
513640,TYPE_DECL,,renderer\atlas\stb_rect_pack.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\atlas\stb_rect_pack.cpp,renderer\atlas\stb_rect_pack.cpp:<global>,,false,1,<global>,3
513647,TYPE_DECL,,renderer\atlas\wic.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\atlas\wic.hpp,renderer\atlas\wic.hpp:<global>,,false,1,<global>,2
513947,TYPE_DECL,,renderer\base\CSSLengthPercentage.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\base\CSSLengthPercentage.cpp,renderer\base\CSSLengthPercentage.cpp:<global>,,false,1,<global>,3
514109,TYPE_DECL,,renderer\base\FontCache.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\base\FontCache.hpp,renderer\base\FontCache.hpp:<global>,,false,1,<global>,2
514410,TYPE_DECL,,renderer\base\FontInfoBase.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\base\FontInfoBase.cpp,renderer\base\FontInfoBase.cpp:<global>,,false,1,<global>,3
514617,TYPE_DECL,,renderer\base\FontInfoDesired.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\base\FontInfoDesired.cpp,renderer\base\FontInfoDesired.cpp:<global>,,false,1,<global>,3
514735,TYPE_DECL,,renderer\base\FontResource.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\base\FontResource.cpp,renderer\base\FontResource.cpp:<global>,,false,1,<global>,3
514810,TYPE_DECL,,,,"struct GLYPHENTRY
    {
        WORD geWidth;
        DWORD geOffset;
    }",5,renderer\base\FontResource.cpp,anonymous_namespace_1.GLYPHENTRY,,false,29,GLYPHENTRY,15
514813,TYPE_DECL,,,,"struct FONTINFO
    {
        WORD dfVersion;
        DWORD dfSize;
        CHAR dfCopyright[60];
        WORD dfType;
        WORD dfPoints;
        WORD dfVertRes;
        WORD dfHorizRes;
        WORD dfAscent;
        WORD dfInternalLeading;
        WORD dfExternalLeading;
        BYTE dfItalic;
        BYTE dfUnderline;
        BYTE dfStrikeOut;
        WORD dfWeight;
        BYTE dfCharSet;
        WORD dfPixWidth;
        WORD dfPixHeight;
        BYTE dfPitchAndFamily;
        WORD dfAvgWidth;
        WORD dfMaxWidth;
        BYTE dfFirstChar;
        BYTE dfLastChar;
        BYTE dfDefaultChar;
        BYTE dfBreakChar;
        WORD dfWidthBytes;
        DWORD dfDevice;
        DWORD dfFace;
        DWORD dfBitsPointer;
        DWORD dfBitsOffset;
        BYTE dfReserved;
        DWORD dfFlags;
        WORD dfAspace;
        WORD dfBspace;
        WORD dfCspace;
        DWORD dfColorPointer;
        DWORD dfReserved1[4];
        GLYPHENTRY dfCharTable[CHAR_COUNT];
        C...",5,renderer\base\FontResource.cpp,anonymous_namespace_2.FONTINFO,,false,35,FONTINFO,16
515469,TYPE_DECL,,renderer\base\RenderEngineBase.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\base\RenderEngineBase.cpp,renderer\base\RenderEngineBase.cpp:<global>,,false,1,<global>,3
515578,TYPE_DECL,,renderer\base\RenderSettings.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\base\RenderSettings.cpp,renderer\base\RenderSettings.cpp:<global>,,false,1,<global>,6
516094,TYPE_DECL,,renderer\base\fontinfo.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\base\fontinfo.cpp,renderer\base\fontinfo.cpp:<global>,,false,1,<global>,3
516231,TYPE_DECL,,renderer\base\precomp.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\base\precomp.cpp,renderer\base\precomp.cpp:<global>,,false,1,<global>,2
516246,TYPE_DECL,,renderer\base\precomp.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\base\precomp.hpp,renderer\base\precomp.hpp:<global>,,false,1,<global>,6
516255,TYPE_DECL,,renderer\base\renderer.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\base\renderer.cpp,renderer\base\renderer.cpp:<global>,,false,1,<global>,3
516258,TYPE_DECL,ANY,,,"using PointTree = interval_tree::IntervalTree<til::point, size_t>;",1,renderer\base\renderer.cpp,PointTree,,false,12,PointTree,1
517759,TYPE_DECL,,renderer\base\renderer.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\base\renderer.hpp,renderer\base\renderer.hpp:<global>,,false,1,<global>,5
517765,TYPE_DECL,,,,"class Renderer
    {
    public:
        Renderer(const RenderSettings& renderSettings,
                 IRenderData* pData,
                 _In_reads_(cEngines) IRenderEngine** const pEngine,
                 const size_t cEngines,
                 std::unique_ptr<RenderThread> thread);

        ~Renderer();

        [[nodiscard]] HRESULT PaintFrame();

        void NotifyPaintFrame() noexcept;
        void TriggerSystemRedraw(const til::rect* const prcDirtyClient);
        void TriggerRedraw(const Microsoft::Console::Types::Viewport& region);
        void TriggerRedraw(const til::point* const pcoord);
        void TriggerRedrawCursor(const til::point* const pcoord);
        void TriggerRedrawAll(const bool backgroundChanged = false, const bool frameChanged = false);
        void TriggerTeardown() noexcept;

        void TriggerSelection();
        void TriggerScroll();
        void TriggerScroll(const til::point* const pcoordDelta);

        void TriggerFlush(const bool circling)...",5,renderer\base\renderer.hpp,Microsoft.Console.Render.Renderer,,false,36,Renderer,1
517971,TYPE_DECL,,,,friend class ConptyOutputTests,9,renderer\base\renderer.hpp,Microsoft.Console.Render.Renderer.ConptyOutputTests,,false,137,ConptyOutputTests,69
517972,TYPE_DECL,,,,friend class TerminalCoreUnitTests::ConptyRoundtripTests,9,renderer\base\renderer.hpp,Microsoft.Console.Render.Renderer.ConptyRoundtripTests,,false,138,ConptyRoundtripTests,70
518006,TYPE_DECL,,renderer\base\thread.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\base\thread.cpp,renderer\base\thread.cpp:<global>,,false,1,<global>,4
518311,TYPE_DECL,,renderer\base\thread.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\base\thread.hpp,renderer\base\thread.hpp:<global>,,false,1,<global>,1
518317,TYPE_DECL,,,,class Renderer,5,renderer\base\thread.hpp,Microsoft.Console.Render.Renderer,,false,19,Renderer,1
518318,TYPE_DECL,,,,"class RenderThread
    {
    public:
        RenderThread();
        ~RenderThread();

        [[nodiscard]] HRESULT Initialize(Renderer* const pRendererParent) noexcept;

        void NotifyPaint() noexcept;
        void EnablePainting() noexcept;
        void DisablePainting() noexcept;
        void WaitForPaintCompletionAndDisable(const DWORD dwTimeoutMs) noexcept;

    private:
        static DWORD WINAPI s_ThreadProc(_In_ LPVOID lpParameter);
        DWORD WINAPI _ThreadProc();

        HANDLE _hThread;
        HANDLE _hEvent;

        HANDLE _hPaintEnabledEvent;
        HANDLE _hPaintCompletedEvent;

        Renderer* _pRenderer; // Non-ownership pointer

        bool _fKeepRunning;
        std::atomic<bool> _fNextFrameRequested;
        std::atomic<bool> _fWaiting;
    }",5,renderer\base\thread.hpp,Microsoft.Console.Render.RenderThread,,false,21,RenderThread,2
518369,TYPE_DECL,,renderer\dx\BoxDrawingEffect.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\dx\BoxDrawingEffect.cpp,renderer\dx\BoxDrawingEffect.cpp:<global>,,false,1,<global>,3
518417,TYPE_DECL,,renderer\dx\BoxDrawingEffect.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\dx\BoxDrawingEffect.hpp,renderer\dx\BoxDrawingEffect.hpp:<global>,,false,1,<global>,5
518423,TYPE_DECL,,,,"class BoxDrawingEffect : public ::Microsoft::WRL::RuntimeClass<::Microsoft::WRL::RuntimeClassFlags<::Microsoft::WRL::ClassicCom | ::Microsoft::WRL::InhibitFtmBase>, IBoxDrawingEffect>
    {
    public:
        BoxDrawingEffect() noexcept;
        HRESULT RuntimeClassInitialize(float verticalScale, float verticalTranslate, float horizontalScale, float horizontalTranslate) noexcept;

        [[nodiscard]] HRESULT STDMETHODCALLTYPE GetScale(BoxScale* scale) noexcept override;

    protected:
    private:
        BoxScale _scale;
#ifdef UNIT_TESTING
    public:
        friend class BoxDrawingEffectTests;
#endif
    }",5,renderer\dx\BoxDrawingEffect.hpp,Microsoft.Console.Render.BoxDrawingEffect,"Microsoft.WRL.RuntimeClass<.Microsoft.WRL.RuntimeClassFlags<.Microsoft.WRL.ClassicCom | .Microsoft.WRL.InhibitFtmBase>, IBoxDrawingEffect>",false,14,BoxDrawingEffect,1
518438,TYPE_DECL,,,,friend class BoxDrawingEffectTests,9,renderer\dx\BoxDrawingEffect.hpp,Microsoft.Console.Render.BoxDrawingEffect.BoxDrawingEffectTests,,false,27,BoxDrawingEffectTests,5
518450,TYPE_DECL,,renderer\dx\CustomTextLayout.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\dx\CustomTextLayout.cpp,renderer\dx\CustomTextLayout.cpp:<global>,,false,1,<global>,8
518955,TYPE_DECL,,renderer\dx\CustomTextLayout.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\dx\CustomTextLayout.hpp,renderer\dx\CustomTextLayout.hpp:<global>,,false,1,<global>,9
518961,TYPE_DECL,,,,"class CustomTextLayout : public ::Microsoft::WRL::RuntimeClass<::Microsoft::WRL::RuntimeClassFlags<::Microsoft::WRL::ClassicCom | ::Microsoft::WRL::InhibitFtmBase>, IDWriteTextAnalysisSource, IDWriteTextAnalysisSink>
    {
    public:
        // Based on the Windows 7 SDK sample at https://github.com/pauldotknopf/WindowsSDK7-Samples/tree/master/multimedia/DirectWrite/CustomLayout

        CustomTextLayout(const gsl::not_null<DxFontRenderData*> fontRenderData);

        [[nodiscard]] HRESULT STDMETHODCALLTYPE AppendClusters(const std::span<const ::Microsoft::Console::Render::Cluster> clusters);

        [[nodiscard]] HRESULT STDMETHODCALLTYPE Reset() noexcept;

        [[nodiscard]] HRESULT STDMETHODCALLTYPE GetColumns(_Out_ UINT32* columns);

        // IDWriteTextLayout methods (but we don't actually want to implement them all, so just this one matching the existing interface)
        [[nodiscard]] HRESULT STDMETHODCALLTYPE Draw(_In_opt_ void* clientDrawingContext,
                ...",5,renderer\dx\CustomTextLayout.hpp,Microsoft.Console.Render.CustomTextLayout,"Microsoft.WRL.RuntimeClass<.Microsoft.WRL.RuntimeClassFlags<.Microsoft.WRL.ClassicCom | .Microsoft.WRL.InhibitFtmBase>, IDWriteTextAnalysisSource, IDWriteTextAnalysisSink>",false,19,CustomTextLayout,1
518980,TYPE_DECL,,,,"struct Run
        {
            Run() noexcept :
                textStart(),
                textLength(),
                glyphStart(),
                glyphCount(),
                bidiLevel(),
                script(),
                isNumberSubstituted(),
                isSideways(),
                fontFace{ nullptr },
                fontScale{ 1.0 },
                drawingEffect{ nullptr }
            {
            }

            UINT32 textStart; // starting text position of this run
            UINT32 textLength; // number of contiguous code units covered
            UINT32 glyphStart; // starting glyph in the glyphs array
            UINT32 glyphCount; // number of glyphs associated with this run of text
            DWRITE_SCRIPT_ANALYSIS script;
            UINT8 bidiLevel;
            bool isNumberSubstituted;
            bool isSideways;
            ::Microsoft::WRL::ComPtr<IDWriteFontFace1> fontFace;
            FLOAT fontScale;
            ::Microsoft::WRL::ComPt...",9,renderer\dx\CustomTextLayout.hpp,Microsoft.Console.Render.CustomTextLayout.Run,,false,70,Run,15
519019,TYPE_DECL,,,,"struct LinkedRun : Run
        {
            LinkedRun() noexcept :
                nextRunIndex(0)
            {
            }

            UINT32 nextRunIndex; // index of next run
        }",9,renderer\dx\CustomTextLayout.hpp,Microsoft.Console.Render.CustomTextLayout.LinkedRun,Run,false,112,LinkedRun,16
519105,TYPE_DECL,,,,"struct ScaleCorrection
        {
            UINT32 textIndex;
            UINT32 textLength;
            float scale;
        }",9,renderer\dx\CustomTextLayout.hpp,Microsoft.Console.Render.CustomTextLayout.ScaleCorrection,,false,199,ScaleCorrection,54
519114,TYPE_DECL,,,,friend class CustomTextLayoutTests,9,renderer\dx\CustomTextLayout.hpp,Microsoft.Console.Render.CustomTextLayout.CustomTextLayoutTests,,false,213,CustomTextLayoutTests,57
519129,TYPE_DECL,,renderer\dx\CustomTextRenderer.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\dx\CustomTextRenderer.cpp,renderer\dx\CustomTextRenderer.cpp:<global>,,false,1,<global>,7
519313,TYPE_DECL,,renderer\dx\CustomTextRenderer.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\dx\CustomTextRenderer.hpp,renderer\dx\CustomTextRenderer.hpp:<global>,,false,1,<global>,4
519319,TYPE_DECL,,,,"struct DrawingContext
    {
        DrawingContext(ID2D1RenderTarget* renderTarget,
                       ID2D1SolidColorBrush* foregroundBrush,
                       ID2D1SolidColorBrush* backgroundBrush,
                       bool forceGrayscaleAA,
                       IDWriteFactory* dwriteFactory,
                       const DWRITE_LINE_SPACING spacing,
                       const D2D_SIZE_F cellSize,
                       const D2D_SIZE_F targetSize,
                       const std::optional<CursorOptions>& cursorInfo,
                       const D2D1_DRAW_TEXT_OPTIONS options = D2D1_DRAW_TEXT_OPTIONS_NONE) noexcept :
            renderTarget(renderTarget),
            foregroundBrush(foregroundBrush),
            backgroundBrush(backgroundBrush),
            useBoldFont(false),
            useItalicFont(false),
            forceGrayscaleAA(forceGrayscaleAA),
            dwriteFactory(dwriteFactory),
            spacing(spacing),
            cellSize(cellSize),
      ...",5,renderer\dx\CustomTextRenderer.hpp,Microsoft.Console.Render.DrawingContext,,false,12,DrawingContext,1
519348,TYPE_DECL,,,,"enum class CursorPaintType
    {
        Fill,
        Outline
    }",5,renderer\dx\CustomTextRenderer.hpp,Microsoft.Console.Render.CursorPaintType,,false,58,CursorPaintType,2
519363,TYPE_DECL,,,,"class CustomTextRenderer : public ::Microsoft::WRL::RuntimeClass<::Microsoft::WRL::RuntimeClassFlags<::Microsoft::WRL::ClassicCom | ::Microsoft::WRL::InhibitFtmBase>, IDWriteTextRenderer>
    {
    public:
        // http://www.charlespetzold.com/blog/2014/01/Character-Formatting-Extensions-with-DirectWrite.html
        // https://docs.microsoft.com/en-us/windows/desktop/DirectWrite/how-to-implement-a-custom-text-renderer

        // IDWritePixelSnapping methods
        [[nodiscard]] HRESULT STDMETHODCALLTYPE IsPixelSnappingDisabled(void* clientDrawingContext,
                                                                        _Out_ BOOL* isDisabled) noexcept override;

        [[nodiscard]] HRESULT STDMETHODCALLTYPE GetPixelsPerDip(void* clientDrawingContext,
                                                                _Out_ FLOAT* pixelsPerDip) noexcept override;

        [[nodiscard]] HRESULT STDMETHODCALLTYPE GetCurrentTransform(void* clientDrawingContext,
               ...",5,renderer\dx\CustomTextRenderer.hpp,Microsoft.Console.Render.CustomTextRenderer,"Microsoft.WRL.RuntimeClass<.Microsoft.WRL.RuntimeClassFlags<.Microsoft.WRL.ClassicCom | .Microsoft.WRL.InhibitFtmBase>, IDWriteTextRenderer>",false,68,CustomTextRenderer,9
519408,TYPE_DECL,,renderer\dx\DxFontInfo.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\dx\DxFontInfo.cpp,renderer\dx\DxFontInfo.cpp:<global>,,false,1,<global>,6
519925,TYPE_DECL,,renderer\dx\DxFontInfo.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\dx\DxFontInfo.hpp,renderer\dx\DxFontInfo.hpp:<global>,,false,1,<global>,5
519931,TYPE_DECL,,,,"class DxFontInfo
    {
    public:
        DxFontInfo(IDWriteFactory1* dwriteFactory);

        DxFontInfo(
            IDWriteFactory1* dwriteFactory,
            std::wstring_view familyName,
            DWRITE_FONT_WEIGHT weight,
            DWRITE_FONT_STYLE style,
            DWRITE_FONT_STRETCH stretch);

        bool operator==(const DxFontInfo& other) const noexcept;

        std::wstring_view GetFamilyName() const noexcept;
        void SetFamilyName(const std::wstring_view familyName);

        DWRITE_FONT_WEIGHT GetWeight() const noexcept;
        void SetWeight(const DWRITE_FONT_WEIGHT weight) noexcept;

        DWRITE_FONT_STYLE GetStyle() const noexcept;
        void SetStyle(const DWRITE_FONT_STYLE style) noexcept;

        DWRITE_FONT_STRETCH GetStretch() const noexcept;
        void SetStretch(const DWRITE_FONT_STRETCH stretch) noexcept;

        bool GetFallback() const noexcept;
        IDWriteFontCollection* GetFontCollection() const noexcept;

        void SetFr...",5,renderer\dx\DxFontInfo.hpp,Microsoft.Console.Render.DxFontInfo,,false,13,DxFontInfo,1
520033,TYPE_DECL,,renderer\dx\DxFontRenderData.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\dx\DxFontRenderData.cpp,renderer\dx\DxFontRenderData.cpp:<global>,,false,1,<global>,4
521650,TYPE_DECL,,renderer\dx\DxFontRenderData.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\dx\DxFontRenderData.hpp,renderer\dx\DxFontRenderData.hpp:<global>,,false,1,<global>,9
521656,TYPE_DECL,,,,"enum class AxisTagPresence : BYTE
    {
        None = 0x00,
        Weight = 0x01,
        Width = 0x02,
        Italic = 0x04,
        Slant = 0x08,
    }",5,renderer\dx\DxFontRenderData.hpp,Microsoft.Console.Render.AxisTagPresence,,false,19,AxisTagPresence,1
521682,TYPE_DECL,,,,"class DxFontRenderData
    {
    public:
        struct LineMetrics
        {
            float gridlineWidth;
            float underlineOffset;
            float underlineOffset2;
            float underlineWidth;
            float strikethroughOffset;
            float strikethroughWidth;
        };

        DxFontRenderData(::Microsoft::WRL::ComPtr<IDWriteFactory1> dwriteFactory);

        // DirectWrite text analyzer from the factory
        [[nodiscard]] Microsoft::WRL::ComPtr<IDWriteTextAnalyzer1> Analyzer();

        [[nodiscard]] Microsoft::WRL::ComPtr<IDWriteFontFallback> SystemFontFallback();

        // A locale that can be used on construction of assorted DX objects that want to know one.
        [[nodiscard]] std::wstring UserLocaleName();

        [[nodiscard]] til::size GlyphCell() noexcept;
        [[nodiscard]] LineMetrics GetLineMetrics() noexcept;

        // The weight of default font
        [[nodiscard]] DWRITE_FONT_WEIGHT DefaultFontWeight() noexcept;

      ...",5,renderer\dx\DxFontRenderData.hpp,Microsoft.Console.Render.DxFontRenderData,,false,29,DxFontRenderData,3
521683,TYPE_DECL,,,,"struct LineMetrics
        {
            float gridlineWidth;
            float underlineOffset;
            float underlineOffset2;
            float underlineWidth;
            float strikethroughOffset;
            float strikethroughWidth;
        }",9,renderer\dx\DxFontRenderData.hpp,Microsoft.Console.Render.DxFontRenderData.LineMetrics,,false,32,LineMetrics,1
521792,TYPE_DECL,uint32_t,,,using FontAttributeMapKey = uint32_t;,9,renderer\dx\DxFontRenderData.hpp,FontAttributeMapKey,,false,101,FontAttributeMapKey,24
521910,TYPE_DECL,,renderer\dx\DxRenderer.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\dx\DxRenderer.cpp,renderer\dx\DxRenderer.cpp:<global>,,false,1,<global>,14
521919,TYPE_DECL,_screenQuadVertices,,,"struct ShaderInput
{
    XMFLOAT3 pos;
    XMFLOAT2 tex;
} const",1,renderer\dx\DxRenderer.cpp,ShaderInput,,false,36,ShaderInput,4
523586,TYPE_DECL,,renderer\dx\DxRenderer.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\dx\DxRenderer.hpp,renderer\dx\DxRenderer.hpp:<global>,,false,1,<global>,23
523593,TYPE_DECL,,,,"class DxEngine final : public RenderEngineBase
    {
    public:
        DxEngine();
        ~DxEngine();
        DxEngine(const DxEngine&) = default;
        DxEngine(DxEngine&&) = default;
        DxEngine& operator=(const DxEngine&) = default;
        DxEngine& operator=(DxEngine&&) = default;

        // Used to release device resources so that another instance of
        // conhost can render to the screen (i.e. only one DirectX
        // application may control the screen at a time.)
        [[nodiscard]] HRESULT Enable() noexcept override;
        [[nodiscard]] HRESULT Disable() noexcept;

        [[nodiscard]] HRESULT SetHwnd(const HWND hwnd) noexcept override;

        [[nodiscard]] HRESULT SetWindowSize(const til::size pixels) noexcept override;

        void SetCallback(std::function<void(const HANDLE)> pfn) noexcept override;
        void SetWarningCallback(std::function<void(const HRESULT)> pfn) noexcept override;

        bool GetRetroTerminalEffect() const noexcept o...",5,renderer\dx\DxRenderer.hpp,Microsoft.Console.Render.DxEngine,RenderEngineBase,false,40,DxEngine,1
523877,TYPE_DECL,,,,"enum class SwapChainMode
        {
            ForHwnd,
            ForComposition
        }",9,renderer\dx\DxRenderer.hpp,Microsoft.Console.Render.DxEngine.SwapChainMode,,false,148,SwapChainMode,60
523956,TYPE_DECL,_pixelShaderSettings,,,"struct
        {
            // Note: This can be seen as API endpoint towards user provided pixel shaders.
            //  Changes here can break existing pixel shaders so be careful with changing datatypes
            //  and order of parameters
            float Time;
            float Scale;
            DirectX::XMFLOAT2 Resolution;
            DirectX::XMFLOAT4 Background;
#pragma warning(suppress : 4324) // structure was padded due to __declspec(align())
        }",31,renderer\dx\DxRenderer.hpp,Microsoft.Console.Render.DxEngine._pixelShaderSettings,,false,273,Microsoft.Console.Render.DxEngine._pixelShaderSettings,137
524058,TYPE_DECL,,renderer\dx\DxSoftFont.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\dx\DxSoftFont.cpp,renderer\dx\DxSoftFont.cpp:<global>,,false,1,<global>,5
524950,TYPE_DECL,,renderer\dx\DxSoftFont.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\dx\DxSoftFont.hpp,renderer\dx\DxSoftFont.hpp:<global>,,false,1,<global>,6
524956,TYPE_DECL,,,,struct DrawingContext,5,renderer\dx\DxSoftFont.hpp,Microsoft.Console.Render.DrawingContext,,false,15,DrawingContext,1
524957,TYPE_DECL,,,,"class DxSoftFont
    {
    public:
        void SetFont(const std::span<const uint16_t> bitPattern,
                     const til::size sourceSize,
                     const til::size targetSize,
                     const size_t centeringHint);
        HRESULT SetTargetSize(const til::size targetSize);
        HRESULT SetAntialiasing(const bool antialiased);
        HRESULT SetColor(const D2D1_COLOR_F& color);
        HRESULT Draw(const DrawingContext& drawingContext,
                     const std::span<const Cluster> clusters,
                     const float originX,
                     const float originY);
        void Reset();

    private:
        static constexpr auto ANTIALIASED_INTERPOLATION = D2D1_SCALE_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC;
        static constexpr auto ALIASED_INTERPOLATION = D2D1_SCALE_INTERPOLATION_MODE_NEAREST_NEIGHBOR;

        HRESULT _createResources(gsl::not_null<ID2D1DeviceContext*> d2dContext);
        D2D1_VECTOR_2F _scaleForTargetSize() c...",5,renderer\dx\DxSoftFont.hpp,Microsoft.Console.Render.DxSoftFont,,false,17,DxSoftFont,2
525049,TYPE_DECL,,renderer\dx\ScreenPixelShader.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\dx\ScreenPixelShader.hpp,renderer\dx\ScreenPixelShader.hpp:<global>,,false,1,<global>,1
525059,TYPE_DECL,,renderer\dx\ScreenVertexShader.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\dx\ScreenVertexShader.hpp,renderer\dx\ScreenVertexShader.hpp:<global>,,false,1,<global>,1
525070,TYPE_DECL,,renderer\dx\precomp.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\dx\precomp.cpp,renderer\dx\precomp.cpp:<global>,,false,1,<global>,2
525121,TYPE_DECL,,renderer\dx\precomp.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\dx\precomp.hpp,renderer\dx\precomp.hpp:<global>,,false,1,<global>,24
525134,TYPE_DECL,,renderer\dx\ut_dx\CustomTextLayoutTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\dx\ut_dx\CustomTextLayoutTests.cpp,renderer\dx\ut_dx\CustomTextLayoutTests.cpp:<global>,,false,1,<global>,5
525337,TYPE_DECL,,renderer\gdi\gdirenderer.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\gdi\gdirenderer.hpp,renderer\gdi\gdirenderer.hpp:<global>,,false,1,<global>,3
525343,TYPE_DECL,,,,"class GdiEngine final : public RenderEngineBase
    {
    public:
        GdiEngine();
        ~GdiEngine() override;

        [[nodiscard]] HRESULT SetHwnd(const HWND hwnd) noexcept;

        [[nodiscard]] HRESULT InvalidateSelection(const std::vector<til::rect>& rectangles) noexcept override;
        [[nodiscard]] HRESULT InvalidateScroll(const til::point* const pcoordDelta) noexcept override;
        [[nodiscard]] HRESULT InvalidateSystem(const til::rect* const prcDirtyClient) noexcept override;
        [[nodiscard]] HRESULT Invalidate(const til::rect* const psrRegion) noexcept override;
        [[nodiscard]] HRESULT InvalidateCursor(const til::rect* const psrRegion) noexcept override;
        [[nodiscard]] HRESULT InvalidateAll() noexcept override;
        [[nodiscard]] HRESULT PrepareForTeardown(_Out_ bool* const pForcePaint) noexcept override;

        [[nodiscard]] HRESULT StartPaint() noexcept override;
        [[nodiscard]] HRESULT EndPaint() noexcept override;
        [[no...",5,renderer\gdi\gdirenderer.hpp,Microsoft.Console.Render.GdiEngine,RenderEngineBase,false,22,GdiEngine,1
525513,TYPE_DECL,,,,"struct LineMetrics
        {
            int gridlineWidth;
            int thinLineWidth;
            int underlineCenter;
            int underlineWidth;
            int doubleUnderlinePosTop;
            int doubleUnderlinePosBottom;
            int strikethroughOffset;
            int strikethroughWidth;
            int curlyLineCenter;
            int curlyLinePeriod;
            int curlyLineControlPointOffset;
        }",9,renderer\gdi\gdirenderer.hpp,Microsoft.Console.Render.GdiEngine.LineMetrics,,false,116,LineMetrics,51
525541,TYPE_DECL,,,,"enum class FontType : uint8_t
        {
            Undefined,
            Default,
            Italic,
            Soft
        }",9,renderer\gdi\gdirenderer.hpp,Microsoft.Console.Render.GdiEngine.FontType,,false,148,FontType,64
525702,TYPE_DECL,,renderer\gdi\invalidate.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\gdi\invalidate.cpp,renderer\gdi\invalidate.cpp:<global>,,false,1,<global>,4
525981,TYPE_DECL,,renderer\gdi\math.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\gdi\math.cpp,renderer\gdi\math.cpp:<global>,,false,1,<global>,3
526101,TYPE_DECL,,renderer\gdi\paint.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\gdi\paint.cpp,renderer\gdi\paint.cpp:<global>,,false,1,<global>,5
527500,TYPE_DECL,,renderer\gdi\precomp.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\gdi\precomp.cpp,renderer\gdi\precomp.cpp:<global>,,false,1,<global>,2
527519,TYPE_DECL,,renderer\gdi\precomp.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\gdi\precomp.hpp,renderer\gdi\precomp.hpp:<global>,,false,1,<global>,8
527534,TYPE_DECL,,renderer\gdi\state.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\gdi\state.cpp,renderer\gdi\state.cpp:<global>,,false,1,<global>,6
528126,TYPE_DECL,,renderer\gdi\tool\main.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\gdi\tool\main.cpp,renderer\gdi\tool\main.cpp:<global>,,false,1,<global>,5
528181,TYPE_DECL,,renderer\inc\CSSLengthPercentage.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\inc\CSSLengthPercentage.hpp,renderer\inc\CSSLengthPercentage.hpp:<global>,,false,1,<global>,1
528184,TYPE_DECL,,,,"struct CSSLengthPercentage
{
    enum class ReferenceFrame : uint8_t
    {
        // This indicates the object is empty/unset.
        // No need to call Resolve().
        None,
        // Call Resolve() with factor set to the target DPI (e.g. 96 for DIP).
        // Returns an absolute length value scaled by that DPI.
        Absolute,
        // Call Resolve() with factor set to the font size
        // in an arbitrary DPI. Returns a value relative to it.
        FontSize,
        // Call Resolve() with factor set to the ""0"" glyph advance width
        // in an arbitrary DPI. Returns a value relative to it.
        AdvanceWidth,
    };

    static CSSLengthPercentage FromString(const wchar_t* str);

    float Resolve(float fallback, float dpi, float fontSize, float advanceWidth) const noexcept;

private:
    float _value = 0;
    ReferenceFrame _referenceFrame = ReferenceFrame::None;
}",1,renderer\inc\CSSLengthPercentage.hpp,CSSLengthPercentage,,false,6,CSSLengthPercentage,1
528185,TYPE_DECL,,,,"enum class ReferenceFrame : uint8_t
    {
        // This indicates the object is empty/unset.
        // No need to call Resolve().
        None,
        // Call Resolve() with factor set to the target DPI (e.g. 96 for DIP).
        // Returns an absolute length value scaled by that DPI.
        Absolute,
        // Call Resolve() with factor set to the font size
        // in an arbitrary DPI. Returns a value relative to it.
        FontSize,
        // Call Resolve() with factor set to the ""0"" glyph advance width
        // in an arbitrary DPI. Returns a value relative to it.
        AdvanceWidth,
    }",5,renderer\inc\CSSLengthPercentage.hpp,CSSLengthPercentage.ReferenceFrame,,false,8,ReferenceFrame,1
528221,TYPE_DECL,,renderer\inc\Cluster.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\inc\Cluster.hpp,renderer\inc\Cluster.hpp:<global>,,false,1,<global>,2
528227,TYPE_DECL,,,,"class Cluster
    {
    public:
        constexpr Cluster() noexcept = default;
        constexpr Cluster(const std::wstring_view text, const til::CoordType columns) noexcept :
            _text{ text },
            _columns{ columns }
        {
        }

        // Provides the embedded text as a single character
        // This might replace the string with the replacement character if it doesn't fit as one wchar_t.
        constexpr wchar_t GetTextAsSingle() const noexcept
        {
            if (_text.size() == 1)
            {
                return til::at(_text, 0);
            }
            else
            {
                return UNICODE_REPLACEMENT;
            }
        }

        // Provides the string of wchar_ts for this cluster.
        constexpr std::wstring_view GetText() const noexcept
        {
            return _text;
        }

        // Gets the number of columns in the grid that this character should consume
        // visually when rendered onto a line....",5,renderer\inc\Cluster.hpp,Microsoft.Console.Render.Cluster,,false,23,Cluster,1
528288,TYPE_DECL,,renderer\inc\CursorOptions.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\inc\CursorOptions.hpp,renderer\inc\CursorOptions.hpp:<global>,,false,1,<global>,3
528294,TYPE_DECL,,,,"struct CursorOptions
    {
        // Character cell in the grid to draw at
        // This is relative to the top of the viewport, not the buffer
        til::point coordCursor;

        // Left offset of the viewport, which may alter the horizontal position
        til::CoordType viewportLeft;

        // Line rendition of the current row, which can affect the cursor width
        LineRendition lineRendition;

        // For an underscore type _ cursor, how tall it should be as a % of cell height
        ULONG ulCursorHeightPercent;

        // For a vertical bar type | cursor, how many pixels wide it should be per ease of access preferences
        ULONG cursorPixelWidth;

        // Whether to draw the cursor 2 cells wide (+X from the coordinate given)
        bool fIsDoubleWidth;

        // Chooses a special cursor type like a full box, a vertical bar, etc.
        CursorType cursorType;

        // Specifies to use the color below instead of the default color
        bool fUs...",5,renderer\inc\CursorOptions.hpp,Microsoft.Console.Render.CursorOptions,,false,22,CursorOptions,1
528309,TYPE_DECL,,renderer\inc\DummyRenderer.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\inc\DummyRenderer.hpp,renderer\inc\DummyRenderer.hpp:<global>,,false,1,<global>,2
528312,TYPE_DECL,,,,"class DummyRenderer final : public Microsoft::Console::Render::Renderer
{
public:
    DummyRenderer(Microsoft::Console::Render::IRenderData* pData = nullptr) :
        Microsoft::Console::Render::Renderer(_renderSettings, pData, nullptr, 0, nullptr) {}

    Microsoft::Console::Render::RenderSettings _renderSettings;
}",1,renderer\inc\DummyRenderer.hpp,DummyRenderer,Microsoft.Console.Render.Renderer,false,17,DummyRenderer,1
528323,TYPE_DECL,,renderer\inc\FontInfo.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\inc\FontInfo.hpp,renderer\inc\FontInfo.hpp:<global>,,false,1,<global>,2
528326,TYPE_DECL,,,,"class FontInfo : public FontInfoBase
{
public:
    FontInfo(const std::wstring_view& faceName,
             const unsigned char family,
             const unsigned int weight,
             const til::size coordSize,
             const unsigned int codePage,
             const bool fSetDefaultRasterFont = false) noexcept;

    bool operator==(const FontInfo& other) noexcept;

    til::size GetSize() const noexcept;
    til::size GetUnscaledSize() const noexcept;
    void SetFromEngine(const std::wstring_view& faceName,
                       const unsigned char family,
                       const unsigned int weight,
                       const bool fSetDefaultRasterFont,
                       const til::size coordSize,
                       const til::size coordSizeUnscaled) noexcept;
    bool GetFallback() const noexcept;
    void SetFallback(const bool didFallback) noexcept;
    void ValidateFont() noexcept;

private:
    void _ValidateCoordSize() noexcept;

    til::size _coo...",1,renderer\inc\FontInfo.hpp,FontInfo,FontInfoBase,false,28,FontInfo,1
528384,TYPE_DECL,,renderer\inc\FontInfoBase.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\inc\FontInfoBase.hpp,renderer\inc\FontInfoBase.hpp:<global>,,false,1,<global>,2
528397,TYPE_DECL,,,,"class FontInfoBase
{
public:
    FontInfoBase(const std::wstring_view& faceName,
                 const unsigned char family,
                 const unsigned int weight,
                 const bool fSetDefaultRasterFont,
                 const unsigned int uiCodePage) noexcept;

    bool operator==(const FontInfoBase& other) noexcept;

    unsigned char GetFamily() const noexcept;
    unsigned int GetWeight() const noexcept;
    const std::wstring& GetFaceName() const noexcept;
    unsigned int GetCodePage() const noexcept;
    void FillLegacyNameBuffer(wchar_t (&buffer)[LF_FACESIZE]) const noexcept;
    bool IsTrueTypeFont() const noexcept;
    void SetFromEngine(const std::wstring_view& faceName,
                       const unsigned char family,
                       const unsigned int weight,
                       const bool fSetDefaultRasterFont) noexcept;
    bool WasDefaultRasterSetFromEngine() const noexcept;
    void ValidateFont() noexcept;

    static Microsoft::Console...",1,renderer\inc\FontInfoBase.hpp,FontInfoBase,,false,26,FontInfoBase,5
528472,TYPE_DECL,,renderer\inc\FontInfoDesired.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\inc\FontInfoDesired.hpp,renderer\inc\FontInfoDesired.hpp:<global>,,false,1,<global>,4
528475,TYPE_DECL,,,,"class FontInfoDesired : public FontInfoBase
{
public:
    FontInfoDesired(const std::wstring_view& faceName,
                    const unsigned char family,
                    const unsigned int weight,
                    const float fontSize,
                    const unsigned int uiCodePage) noexcept;
    FontInfoDesired(const FontInfo& fiFont) noexcept;

    bool operator==(const FontInfoDesired& other) = delete;

    void SetCellSize(const CSSLengthPercentage& cellWidth, const CSSLengthPercentage& cellHeight) noexcept;

    const CSSLengthPercentage& GetCellWidth() const noexcept;
    const CSSLengthPercentage& GetCellHeight() const noexcept;
    float GetFontSize() const noexcept;
    til::size GetEngineSize() const noexcept;
    bool IsDefaultRasterFont() const noexcept;

private:
    til::size _coordSizeDesired;
    float _fontSize;
    CSSLengthPercentage _cellWidth;
    CSSLengthPercentage _cellHeight;
}",1,renderer\inc\FontInfoDesired.hpp,FontInfoDesired,FontInfoBase,false,25,FontInfoDesired,1
528527,TYPE_DECL,,renderer\inc\FontResource.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\inc\FontResource.hpp,renderer\inc\FontResource.hpp:<global>,,false,1,<global>,1
528531,TYPE_DECL,ANY,,,"typedef unique_any<HANDLE, decltype(&::RemoveFontMemResourceEx), ::RemoveFontMemResourceEx> unique_hfontresource;",97,renderer\inc\FontResource.hpp,unique_hfontresource,,false,16,unique_hfontresource,1
528535,TYPE_DECL,,,,"class FontResource
    {
    public:
        FontResource(const std::span<const uint16_t> bitPattern,
                     const til::size sourceSize,
                     const til::size targetSize,
                     const size_t centeringHint);
        FontResource() = default;
        ~FontResource() = default;
        FontResource& operator=(FontResource&&) = default;
        void SetTargetSize(const til::size targetSize);
        operator HFONT();

    private:
        void _regenerateFont();
        void _resizeBitPattern(std::span<byte> targetBuffer);

        std::vector<uint16_t> _bitPattern;
        til::size _sourceSize;
        til::size _targetSize;
        size_t _centeringHint{ 0 };
        wil::unique_hfontresource _resourceHandle;
        wil::unique_hfont _fontHandle;
    }",5,renderer\inc\FontResource.hpp,Microsoft.Console.Render.FontResource,,false,21,FontResource,1
528591,TYPE_DECL,,renderer\inc\IFontDefaultList.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\inc\IFontDefaultList.hpp,renderer\inc\IFontDefaultList.hpp:<global>,,false,1,<global>,1
528597,TYPE_DECL,,,,"class IFontDefaultList
    {
    public:
        [[nodiscard]] virtual HRESULT RetrieveDefaultFontNameForCodepage(const unsigned int codepage,
                                                                         std::wstring& outFaceName) = 0;
    }",5,renderer\inc\IFontDefaultList.hpp,Microsoft.Console.Render.IFontDefaultList,,false,18,IFontDefaultList,1
528610,TYPE_DECL,,renderer\inc\IRenderData.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\inc\IRenderData.hpp,renderer\inc\IRenderData.hpp:<global>,,false,1,<global>,3
528613,TYPE_DECL,,,,class Cursor,1,renderer\inc\IRenderData.hpp,Cursor,,false,20,Cursor,1
528617,TYPE_DECL,,,,"struct RenderOverlay final
    {
        // This is where the data is stored
        const TextBuffer& buffer;

        // This is where the top left of the stored buffer should be overlaid on the screen
        // (relative to the current visible viewport)
        const til::point origin;

        // This is the area of the buffer that is actually used for overlay.
        // Anything outside of this is considered empty by the overlay and shouldn't be used
        // for painting purposes.
        const Microsoft::Console::Types::Viewport region;
    }",5,renderer\inc\IRenderData.hpp,Microsoft.Console.Render.RenderOverlay,,false,24,RenderOverlay,1
528621,TYPE_DECL,,,,"class IRenderData
    {
    public:
        virtual ~IRenderData() = default;

        // This block used to be IBaseData.
        virtual Microsoft::Console::Types::Viewport GetViewport() noexcept = 0;
        virtual til::point GetTextBufferEndPosition() const noexcept = 0;
        virtual const TextBuffer& GetTextBuffer() const noexcept = 0;
        virtual const FontInfo& GetFontInfo() const noexcept = 0;
        virtual std::vector<Microsoft::Console::Types::Viewport> GetSelectionRects() noexcept = 0;
        virtual void LockConsole() noexcept = 0;
        virtual void UnlockConsole() noexcept = 0;

        // This block used to be the original IRenderData.
        virtual til::point GetCursorPosition() const noexcept = 0;
        virtual bool IsCursorVisible() const noexcept = 0;
        virtual bool IsCursorOn() const noexcept = 0;
        virtual ULONG GetCursorHeight() const noexcept = 0;
        virtual CursorType GetCursorStyle() const noexcept = 0;
        virtual ULONG...",5,renderer\inc\IRenderData.hpp,Microsoft.Console.Render.IRenderData,,false,39,IRenderData,2
528760,TYPE_DECL,,renderer\inc\IRenderEngine.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\inc\IRenderEngine.hpp,renderer\inc\IRenderEngine.hpp:<global>,,false,1,<global>,8
528766,TYPE_DECL,,,,"struct RenderFrameInfo
    {
        std::optional<CursorOptions> cursorInfo;
    }",5,renderer\inc\IRenderEngine.hpp,Microsoft.Console.Render.RenderFrameInfo,,false,30,RenderFrameInfo,1
528768,TYPE_DECL,,,,"enum class GridLines
    {
        None,
        Top,
        Bottom,
        Left,
        Right,
        Underline,
        DoubleUnderline,
        CurlyUnderline,
        DottedUnderline,
        DashedUnderline,
        Strikethrough,
        HyperlinkUnderline
    }",5,renderer\inc\IRenderEngine.hpp,Microsoft.Console.Render.GridLines,,false,35,GridLines,2
528781,TYPE_DECL,ANY,,,using GridLineSet = til::enumset<GridLines>;,5,renderer\inc\IRenderEngine.hpp,GridLineSet,,false,50,GridLineSet,3
528782,TYPE_DECL,,,,"class __declspec(novtable) IRenderEngine
    {
    public:
#pragma warning(suppress : 26432) // If you define or delete any default operation in the type '...', define or delete them all (c.21).
        virtual ~IRenderEngine() = default;

        [[nodiscard]] virtual HRESULT StartPaint() noexcept = 0;
        [[nodiscard]] virtual HRESULT EndPaint() noexcept = 0;
        [[nodiscard]] virtual bool RequiresContinuousRedraw() noexcept = 0;
        virtual void WaitUntilCanRender() noexcept = 0;
        [[nodiscard]] virtual HRESULT Present() noexcept = 0;
        [[nodiscard]] virtual HRESULT PrepareForTeardown(_Out_ bool* pForcePaint) noexcept = 0;
        [[nodiscard]] virtual HRESULT ScrollFrame() noexcept = 0;
        [[nodiscard]] virtual HRESULT Invalidate(const til::rect* psrRegion) noexcept = 0;
        [[nodiscard]] virtual HRESULT InvalidateCursor(const til::rect* psrRegion) noexcept = 0;
        [[nodiscard]] virtual HRESULT InvalidateSystem(const til::rect* prcDirtyClien...",5,renderer\inc\IRenderEngine.hpp,Microsoft.Console.Render.IRenderEngine,,false,52,IRenderEngine,4
529065,TYPE_DECL,,renderer\inc\RenderEngineBase.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\inc\RenderEngineBase.hpp,renderer\inc\RenderEngineBase.hpp:<global>,,false,1,<global>,2
529071,TYPE_DECL,,,,"class RenderEngineBase : public IRenderEngine
    {
    public:
        [[nodiscard]] HRESULT InvalidateTitle(const std::wstring_view proposedTitle) noexcept override;

        [[nodiscard]] HRESULT UpdateTitle(const std::wstring_view newTitle) noexcept override;

        [[nodiscard]] HRESULT NotifyNewText(const std::wstring_view newText) noexcept override;

        [[nodiscard]] HRESULT UpdateSoftFont(const std::span<const uint16_t> bitPattern,
                                             const til::size cellSize,
                                             const size_t centeringHint) noexcept override;

        [[nodiscard]] HRESULT PrepareRenderInfo(const RenderFrameInfo& info) noexcept override;

        [[nodiscard]] HRESULT ResetLineTransform() noexcept override;
        [[nodiscard]] HRESULT PrepareLineTransform(const LineRendition lineRendition,
                                                   const til::CoordType targetRow,
                                              ...",5,renderer\inc\RenderEngineBase.hpp,Microsoft.Console.Render.RenderEngineBase,IRenderEngine,false,24,RenderEngineBase,1
529137,TYPE_DECL,,renderer\inc\RenderSettings.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\inc\RenderSettings.hpp,renderer\inc\RenderSettings.hpp:<global>,,false,1,<global>,2
529143,TYPE_DECL,,,,"class RenderSettings
    {
    public:
        enum class Mode : size_t
        {
            BlinkAllowed,
            IndexedDistinguishableColors,
            AlwaysDistinguishableColors,
            IntenseIsBold,
            IntenseIsBright,
            ScreenReversed
        };

        RenderSettings() noexcept;
        void SetRenderMode(const Mode mode, const bool enabled) noexcept;
        bool GetRenderMode(const Mode mode) const noexcept;
        const std::array<COLORREF, TextColor::TABLE_SIZE>& GetColorTable() const noexcept;
        void ResetColorTable() noexcept;
        void SetColorTableEntry(const size_t tableIndex, const COLORREF color);
        COLORREF GetColorTableEntry(const size_t tableIndex) const;
        void SetColorAlias(const ColorAlias alias, const size_t tableIndex, const COLORREF color);
        COLORREF GetColorAlias(const ColorAlias alias) const;
        void SetColorAliasIndex(const ColorAlias alias, const size_t tableIndex) noexcept;
        si...",5,renderer\inc\RenderSettings.hpp,Microsoft.Console.Render.RenderSettings,,false,18,RenderSettings,1
529144,TYPE_DECL,,,,"enum class Mode : size_t
        {
            BlinkAllowed,
            IndexedDistinguishableColors,
            AlwaysDistinguishableColors,
            IntenseIsBold,
            IntenseIsBright,
            ScreenReversed
        }",9,renderer\inc\RenderSettings.hpp,Microsoft.Console.Render.RenderSettings.Mode,,false,21,Mode,1
529262,TYPE_DECL,,renderer\uia\UiaRenderer.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\uia\UiaRenderer.cpp,renderer\uia\UiaRenderer.cpp:<global>,,false,1,<global>,3
529576,TYPE_DECL,,renderer\uia\UiaRenderer.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\uia\UiaRenderer.hpp,renderer\uia\UiaRenderer.hpp:<global>,,false,1,<global>,4
529582,TYPE_DECL,,,,"class UiaEngine final : public RenderEngineBase
    {
    public:
        UiaEngine(Microsoft::Console::Types::IUiaEventDispatcher* dispatcher);

        // Only one UiaEngine may present information at a time.
        // This ensures that an automation client isn't overwhelmed
        // by events when there are multiple TermControls
        [[nodiscard]] HRESULT Enable() noexcept override;
        [[nodiscard]] HRESULT Disable() noexcept;

        // IRenderEngine Members
        [[nodiscard]] HRESULT StartPaint() noexcept override;
        [[nodiscard]] HRESULT EndPaint() noexcept override;
        void WaitUntilCanRender() noexcept override;
        [[nodiscard]] HRESULT Present() noexcept override;
        [[nodiscard]] HRESULT PrepareForTeardown(_Out_ bool* const pForcePaint) noexcept override;
        [[nodiscard]] HRESULT ScrollFrame() noexcept override;
        [[nodiscard]] HRESULT Invalidate(const til::rect* const psrRegion) noexcept override;
        [[nodiscard]] HRESUL...",5,renderer\uia\UiaRenderer.hpp,Microsoft.Console.Render.UiaEngine,RenderEngineBase,false,25,UiaEngine,1
529729,TYPE_DECL,,renderer\uia\precomp.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\uia\precomp.cpp,renderer\uia\precomp.cpp:<global>,,false,1,<global>,2
529738,TYPE_DECL,,renderer\uia\precomp.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\uia\precomp.hpp,renderer\uia\precomp.hpp:<global>,,false,1,<global>,3
529751,TYPE_DECL,,renderer\vt\VtSequences.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\vt\VtSequences.cpp,renderer\vt\VtSequences.cpp:<global>,,false,1,<global>,5
530311,TYPE_DECL,,renderer\vt\Xterm256Engine.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\vt\Xterm256Engine.cpp,renderer\vt\Xterm256Engine.cpp:<global>,,false,1,<global>,3
530714,TYPE_DECL,,renderer\vt\Xterm256Engine.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\vt\Xterm256Engine.hpp,renderer\vt\Xterm256Engine.hpp:<global>,,false,1,<global>,2
530717,TYPE_DECL,,,,class VtApiRoutines,1,renderer\vt\Xterm256Engine.hpp,VtApiRoutines,,false,21,VtApiRoutines,1
530721,TYPE_DECL,,,,"class Xterm256Engine : public XtermEngine
    {
    public:
        Xterm256Engine(_In_ wil::unique_hfile hPipe,
                       const Microsoft::Console::Types::Viewport initialViewport);

        virtual ~Xterm256Engine() override = default;

        [[nodiscard]] HRESULT UpdateDrawingBrushes(const TextAttribute& textAttributes,
                                                   const RenderSettings& renderSettings,
                                                   const gsl::not_null<IRenderData*> pData,
                                                   const bool usingSoftFont,
                                                   const bool isSettingDefaultBrushes) noexcept override;

        [[nodiscard]] HRESULT ManuallyClearScrollback() noexcept override;

        friend class ::VtApiRoutines;

    private:
        [[nodiscard]] HRESULT _UpdateExtendedAttrs(const TextAttribute& textAttributes) noexcept;
        [[nodiscard]] HRESULT _UpdateHyperlinkAttr(const TextAttri...",5,renderer\vt\Xterm256Engine.hpp,Microsoft.Console.Render.Xterm256Engine,XtermEngine,false,25,Xterm256Engine,1
530740,TYPE_DECL,,,,friend class ::VtApiRoutines,9,renderer\vt\Xterm256Engine.hpp,Microsoft.Console.Render.Xterm256Engine.VtApiRoutines,,false,41,VtApiRoutines,5
530752,TYPE_DECL,,,,friend class VtRendererTest,9,renderer\vt\Xterm256Engine.hpp,Microsoft.Console.Render.Xterm256Engine.VtRendererTest,,false,49,VtRendererTest,8
530753,TYPE_DECL,,,,friend class ConptyOutputTests,9,renderer\vt\Xterm256Engine.hpp,Microsoft.Console.Render.Xterm256Engine.ConptyOutputTests,,false,50,ConptyOutputTests,9
530762,TYPE_DECL,,renderer\vt\XtermEngine.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\vt\XtermEngine.cpp,renderer\vt\XtermEngine.cpp:<global>,,false,1,<global>,4
531414,TYPE_DECL,,renderer\vt\XtermEngine.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\vt\XtermEngine.hpp,renderer\vt\XtermEngine.hpp:<global>,,false,1,<global>,2
531420,TYPE_DECL,,,,"class XtermEngine : public VtEngine
    {
    public:
        XtermEngine(_In_ wil::unique_hfile hPipe,
                    const Microsoft::Console::Types::Viewport initialViewport,
                    const bool fUseAsciiOnly);

        virtual ~XtermEngine() override = default;

        [[nodiscard]] HRESULT StartPaint() noexcept override;
        [[nodiscard]] HRESULT EndPaint() noexcept override;

        [[nodiscard]] HRESULT PaintCursor(const CursorOptions& options) noexcept override;

        [[nodiscard]] virtual HRESULT UpdateDrawingBrushes(const TextAttribute& textAttributes,
                                                           const RenderSettings& renderSettings,
                                                           const gsl::not_null<IRenderData*> pData,
                                                           const bool usingSoftFont,
                                                           const bool isSettingDefaultBrushes) noexcept override;
       ...",5,renderer\vt\XtermEngine.hpp,Microsoft.Console.Render.XtermEngine,VtEngine,false,27,XtermEngine,1
531475,TYPE_DECL,,,,"enum class Tribool : uint8_t
        {
            False = 0,
            True,
            Invalid,
        }",9,renderer\vt\XtermEngine.hpp,Microsoft.Console.Render.XtermEngine.Tribool,,false,61,Tribool,12
531500,TYPE_DECL,,,,friend class VtRendererTest,9,renderer\vt\XtermEngine.hpp,Microsoft.Console.Render.XtermEngine.VtRendererTest,,false,78,VtRendererTest,19
531501,TYPE_DECL,,,,friend class ConptyOutputTests,9,renderer\vt\XtermEngine.hpp,Microsoft.Console.Render.XtermEngine.ConptyOutputTests,,false,79,ConptyOutputTests,20
531508,TYPE_DECL,,renderer\vt\invalidate.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\vt\invalidate.cpp,renderer\vt\invalidate.cpp:<global>,,false,1,<global>,3
531563,TYPE_DECL,,renderer\vt\math.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\vt\math.cpp,renderer\vt\math.cpp:<global>,,false,1,<global>,3
531652,TYPE_DECL,,renderer\vt\paint.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\vt\paint.cpp,renderer\vt\paint.cpp:<global>,,false,1,<global>,5
532767,TYPE_DECL,,renderer\vt\precomp.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\vt\precomp.cpp,renderer\vt\precomp.cpp:<global>,,false,1,<global>,2
532784,TYPE_DECL,,renderer\vt\precomp.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\vt\precomp.hpp,renderer\vt\precomp.hpp:<global>,,false,1,<global>,7
532801,TYPE_DECL,,renderer\vt\state.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\vt\state.cpp,renderer\vt\state.cpp:<global>,,false,1,<global>,7
533258,TYPE_DECL,,renderer\vt\tracing.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\vt\tracing.cpp,renderer\vt\tracing.cpp:<global>,,false,1,<global>,4
533942,TYPE_DECL,,renderer\vt\tracing.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\vt\tracing.hpp,renderer\vt\tracing.hpp:<global>,,false,1,<global>,7
533949,TYPE_DECL,,,,"class RenderTracing final
    {
    public:
        RenderTracing();
        ~RenderTracing();
        void TraceStringFill(const size_t n, const char c) const;
        void TraceString(const std::string_view& str) const;
        void TraceInvalidate(const til::rect& view) const;
        void TraceLastText(const til::point lastText) const;
        void TraceScrollFrame(const til::point scrollDelta) const;
        void TraceMoveCursor(const til::point lastText, const til::point cursor) const;
        void TraceSetWrapped(const til::CoordType wrappedRow) const;
        void TraceClearWrapped() const;
        void TraceWrapped() const;
        void TracePaintCursor(const til::point coordCursor) const;
        void TraceInvalidateAll(const til::rect& view) const;
        void TraceTriggerCircling(const bool newFrame) const;
        void TraceInvalidateScroll(const til::point scroll) const;
        void TraceStartPaint(const bool quickReturn,
                             const til::pmr::...",5,renderer\vt\tracing.hpp,Microsoft.Console.VirtualTerminal.RenderTracing,,false,24,RenderTracing,1
534049,TYPE_DECL,,renderer\vt\vtrenderer.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\vt\vtrenderer.hpp,renderer\vt\vtrenderer.hpp:<global>,,false,1,<global>,6
534055,TYPE_DECL,,,,class VtIo,5,renderer\vt\vtrenderer.hpp,Microsoft.Console.VirtualTerminal.VtIo,,false,35,VtIo,1
534059,TYPE_DECL,,,,"class VtEngine : public RenderEngineBase
    {
    public:
        // See _PaintUtf8BufferLine for explanation of this value.
        static const size_t ERASE_CHARACTER_STRING_LENGTH = 8;
        static const til::point INVALID_COORDS;

        VtEngine(_In_ wil::unique_hfile hPipe,
                 const Microsoft::Console::Types::Viewport initialViewport);

        // IRenderEngine
        [[nodiscard]] HRESULT StartPaint() noexcept override;
        [[nodiscard]] HRESULT EndPaint() noexcept override;
        [[nodiscard]] HRESULT Present() noexcept override;
        [[nodiscard]] HRESULT PrepareForTeardown(_Out_ bool* pForcePaint) noexcept override;
        [[nodiscard]] HRESULT Invalidate(const til::rect* psrRegion) noexcept override;
        [[nodiscard]] HRESULT InvalidateCursor(const til::rect* psrRegion) noexcept override;
        [[nodiscard]] HRESULT InvalidateSystem(const til::rect* prcDirtyClient) noexcept override;
        [[nodiscard]] HRESULT InvalidateSelection(cons...",5,renderer\vt\vtrenderer.hpp,Microsoft.Console.Render.VtEngine,RenderEngineBase,false,40,VtEngine,1
534539,TYPE_DECL,,,,friend class VtRendererTest,9,renderer\vt\vtrenderer.hpp,Microsoft.Console.Render.VtEngine.VtRendererTest,,false,238,VtRendererTest,135
534540,TYPE_DECL,,,,friend class ConptyOutputTests,9,renderer\vt\vtrenderer.hpp,Microsoft.Console.Render.VtEngine.ConptyOutputTests,,false,239,ConptyOutputTests,136
534541,TYPE_DECL,,,,friend class ScreenBufferTests,9,renderer\vt\vtrenderer.hpp,Microsoft.Console.Render.VtEngine.ScreenBufferTests,,false,240,ScreenBufferTests,137
534542,TYPE_DECL,,,,friend class TerminalCoreUnitTests::ConptyRoundtripTests,9,renderer\vt\vtrenderer.hpp,Microsoft.Console.Render.VtEngine.ConptyRoundtripTests,,false,241,ConptyRoundtripTests,138
534587,TYPE_DECL,,renderer\wddmcon\WddmConRenderer.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\wddmcon\WddmConRenderer.cpp,renderer\wddmcon\WddmConRenderer.cpp:<global>,,false,1,<global>,4
535200,TYPE_DECL,,renderer\wddmcon\WddmConRenderer.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\wddmcon\WddmConRenderer.hpp,renderer\wddmcon\WddmConRenderer.hpp:<global>,,false,1,<global>,2
535206,TYPE_DECL,,,,"class WddmConEngine final : public RenderEngineBase
    {
    public:
        WddmConEngine() noexcept;
        ~WddmConEngine() override;

        [[nodiscard]] HRESULT Initialize();
        bool IsInitialized() noexcept;

        // Used to release device resources so that another instance of
        // conhost can render to the screen (i.e. only one DirectX
        // application may control the screen at a time.)
        [[nodiscard]] HRESULT Enable() noexcept override;
        [[nodiscard]] HRESULT Disable() noexcept;

        til::rect GetDisplaySize() noexcept;

        // IRenderEngine Members
        [[nodiscard]] HRESULT Invalidate(const til::rect* const psrRegion) noexcept override;
        [[nodiscard]] HRESULT InvalidateCursor(const til::rect* const psrRegion) noexcept override;
        [[nodiscard]] HRESULT InvalidateSystem(const til::rect* const prcDirtyClient) noexcept override;
        [[nodiscard]] HRESULT InvalidateSelection(const std::vector<til::rect>& rectangle...",5,renderer\wddmcon\WddmConRenderer.hpp,Microsoft.Console.Render.WddmConEngine,RenderEngineBase,false,10,WddmConEngine,1
535365,TYPE_DECL,,renderer\wddmcon\main.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\wddmcon\main.hpp,renderer\wddmcon\main.hpp:<global>,,false,1,<global>,1
535395,TYPE_DECL,,renderer\wddmcon\oss_shim.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\wddmcon\oss_shim.hpp,renderer\wddmcon\oss_shim.hpp:<global>,,false,1,<global>,3
535404,TYPE_DECL,,renderer\wddmcon\precomp.cpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\wddmcon\precomp.cpp,renderer\wddmcon\precomp.cpp:<global>,,false,1,<global>,2
535437,TYPE_DECL,,renderer\wddmcon\precomp.hpp:<global>,NAMESPACE_BLOCK,<global>,1,renderer\wddmcon\precomp.hpp,renderer\wddmcon\precomp.hpp:<global>,,false,1,<global>,15
535458,TYPE_DECL,,server\ApiDispatchers.cpp:<global>,NAMESPACE_BLOCK,<global>,1,server\ApiDispatchers.cpp,server\ApiDispatchers.cpp:<global>,,false,1,<global>,9
535553,TYPE_DECL,,server\ApiDispatchers.hpp:<global>,NAMESPACE_BLOCK,<global>,1,server\ApiDispatchers.hpp,server\ApiDispatchers.hpp:<global>,,false,1,<global>,3
535627,TYPE_DECL,,server\ApiDispatchersInternal.cpp:<global>,NAMESPACE_BLOCK,<global>,1,server\ApiDispatchersInternal.cpp,server\ApiDispatchersInternal.cpp:<global>,,false,1,<global>,9
535644,TYPE_DECL,,server\ApiMessage.cpp:<global>,NAMESPACE_BLOCK,<global>,1,server\ApiMessage.cpp,server\ApiMessage.cpp:<global>,,false,1,<global>,5
535932,TYPE_DECL,,server\ApiMessage.hpp:<global>,NAMESPACE_BLOCK,<global>,1,server\ApiMessage.hpp,server\ApiMessage.hpp:<global>,,false,1,<global>,4
535935,TYPE_DECL,,,,class ConsoleProcessHandle,1,server\ApiMessage.hpp,ConsoleProcessHandle,,false,25,ConsoleProcessHandle,1
535936,TYPE_DECL,,,,class ConsoleHandleData,1,server\ApiMessage.hpp,ConsoleHandleData,,false,26,ConsoleHandleData,2
535937,TYPE_DECL,,,,class IDeviceComm,1,server\ApiMessage.hpp,IDeviceComm,,false,28,IDeviceComm,3
535938,TYPE_DECL,CONSOLE_API_MSG,,,"typedef struct _CONSOLE_API_MSG
{
    _CONSOLE_API_MSG();

    _CONSOLE_API_MSG(_CONSOLE_API_MSG&&) = delete;
    _CONSOLE_API_MSG& operator=(_CONSOLE_API_MSG&&) = delete;

    _CONSOLE_API_MSG(const _CONSOLE_API_MSG& other);
    _CONSOLE_API_MSG& operator=(const _CONSOLE_API_MSG&);

    ConsoleProcessHandle* GetProcessHandle() const;
    ConsoleHandleData* GetObjectHandle() const;

    [[nodiscard]] HRESULT ReadMessageInput(const ULONG cbOffset, _Out_writes_bytes_(cbSize) PVOID pvBuffer, const ULONG cbSize);
    [[nodiscard]] HRESULT GetOutputBuffer(_Outptr_result_bytebuffer_(*pcbSize) void** const ppvBuffer, _Out_ ULONG* const pcbSize);
    [[nodiscard]] HRESULT GetInputBuffer(_Outptr_result_bytebuffer_(*pcbSize) void** const ppvBuffer, _Out_ ULONG* const pcbSize);

    [[nodiscard]] HRESULT ReleaseMessageBuffers();

    void SetReplyStatus(const NTSTATUS Status);
    void SetReplyInformation(const ULONG_PTR pInformation);

    // DO NOT PUT ACCESS SPECIFIERS HERE.
    // The tail...",1,server\ApiMessage.hpp,_CONSOLE_API_MSG,,false,30,_CONSOLE_API_MSG,4
535985,TYPE_DECL,,,,"union
    {
        struct
        {
            CD_CREATE_OBJECT_INFORMATION CreateObject;
            CONSOLE_CREATESCREENBUFFER_MSG CreateScreenBuffer;
        };
        struct
        {
            CONSOLE_MSG_HEADER msgHeader;
            union
            {
                CONSOLE_MSG_BODY_L1 consoleMsgL1;
                CONSOLE_MSG_BODY_L2 consoleMsgL2;
                CONSOLE_MSG_BODY_L3 consoleMsgL3;
            } u;
        };
    }",5,server\ApiMessage.hpp,_CONSOLE_API_MSG.anonymous_composite_type_0,,false,69,_CONSOLE_API_MSG.anonymous_composite_type_0,19
535986,TYPE_DECL,,,,"struct
        {
            CD_CREATE_OBJECT_INFORMATION CreateObject;
            CONSOLE_CREATESCREENBUFFER_MSG CreateScreenBuffer;
        }",9,server\ApiMessage.hpp,_CONSOLE_API_MSG.anonymous_composite_type_2.anonymous_composite_type_1,,false,71,_CONSOLE_API_MSG.anonymous_composite_type_2.anonymous_composite_type_1,1
535989,TYPE_DECL,,,,"struct
        {
            CONSOLE_MSG_HEADER msgHeader;
            union
            {
                CONSOLE_MSG_BODY_L1 consoleMsgL1;
                CONSOLE_MSG_BODY_L2 consoleMsgL2;
                CONSOLE_MSG_BODY_L3 consoleMsgL3;
            } u;
        }",9,server\ApiMessage.hpp,_CONSOLE_API_MSG.anonymous_composite_type_4.anonymous_composite_type_3,,false,76,_CONSOLE_API_MSG.anonymous_composite_type_4.anonymous_composite_type_3,2
535991,TYPE_DECL,u,,,"union
            {
                CONSOLE_MSG_BODY_L1 consoleMsgL1;
                CONSOLE_MSG_BODY_L2 consoleMsgL2;
                CONSOLE_MSG_BODY_L3 consoleMsgL3;
            }",13,server\ApiMessage.hpp,_CONSOLE_API_MSG.anonymous_composite_type_6.anonymous_composite_type_5.u,,false,79,_CONSOLE_API_MSG.anonymous_composite_type_6.anonymous_composite_type_5.u,2
536014,TYPE_DECL,_CONSOLE_API_MSG,,,"typedef struct _CONSOLE_API_MSG
{
    _CONSOLE_API_MSG();

    _CONSOLE_API_MSG(_CONSOLE_API_MSG&&) = delete;
    _CONSOLE_API_MSG& operator=(_CONSOLE_API_MSG&&) = delete;

    _CONSOLE_API_MSG(const _CONSOLE_API_MSG& other);
    _CONSOLE_API_MSG& operator=(const _CONSOLE_API_MSG&);

    ConsoleProcessHandle* GetProcessHandle() const;
    ConsoleHandleData* GetObjectHandle() const;

    [[nodiscard]] HRESULT ReadMessageInput(const ULONG cbOffset, _Out_writes_bytes_(cbSize) PVOID pvBuffer, const ULONG cbSize);
    [[nodiscard]] HRESULT GetOutputBuffer(_Outptr_result_bytebuffer_(*pcbSize) void** const ppvBuffer, _Out_ ULONG* const pcbSize);
    [[nodiscard]] HRESULT GetInputBuffer(_Outptr_result_bytebuffer_(*pcbSize) void** const ppvBuffer, _Out_ ULONG* const pcbSize);

    [[nodiscard]] HRESULT ReleaseMessageBuffers();

    void SetReplyStatus(const NTSTATUS Status);
    void SetReplyInformation(const ULONG_PTR pInformation);

    // DO NOT PUT ACCESS SPECIFIERS HERE.
    // The tail...",3,server\ApiMessage.hpp,CONSOLE_API_MSG,,false,93,CONSOLE_API_MSG,5
536015,TYPE_DECL,_CONSOLE_API_MSG*,,,"typedef struct _CONSOLE_API_MSG
{
    _CONSOLE_API_MSG();

    _CONSOLE_API_MSG(_CONSOLE_API_MSG&&) = delete;
    _CONSOLE_API_MSG& operator=(_CONSOLE_API_MSG&&) = delete;

    _CONSOLE_API_MSG(const _CONSOLE_API_MSG& other);
    _CONSOLE_API_MSG& operator=(const _CONSOLE_API_MSG&);

    ConsoleProcessHandle* GetProcessHandle() const;
    ConsoleHandleData* GetObjectHandle() const;

    [[nodiscard]] HRESULT ReadMessageInput(const ULONG cbOffset, _Out_writes_bytes_(cbSize) PVOID pvBuffer, const ULONG cbSize);
    [[nodiscard]] HRESULT GetOutputBuffer(_Outptr_result_bytebuffer_(*pcbSize) void** const ppvBuffer, _Out_ ULONG* const pcbSize);
    [[nodiscard]] HRESULT GetInputBuffer(_Outptr_result_bytebuffer_(*pcbSize) void** const ppvBuffer, _Out_ ULONG* const pcbSize);

    [[nodiscard]] HRESULT ReleaseMessageBuffers();

    void SetReplyStatus(const NTSTATUS Status);
    void SetReplyInformation(const ULONG_PTR pInformation);

    // DO NOT PUT ACCESS SPECIFIERS HERE.
    // The tail...",20,server\ApiMessage.hpp,PCONSOLE_API_MSG,,false,93,PCONSOLE_API_MSG,6
536016,TYPE_DECL,_CONSOLE_API_MSG*const,,,"typedef struct _CONSOLE_API_MSG
{
    _CONSOLE_API_MSG();

    _CONSOLE_API_MSG(_CONSOLE_API_MSG&&) = delete;
    _CONSOLE_API_MSG& operator=(_CONSOLE_API_MSG&&) = delete;

    _CONSOLE_API_MSG(const _CONSOLE_API_MSG& other);
    _CONSOLE_API_MSG& operator=(const _CONSOLE_API_MSG&);

    ConsoleProcessHandle* GetProcessHandle() const;
    ConsoleHandleData* GetObjectHandle() const;

    [[nodiscard]] HRESULT ReadMessageInput(const ULONG cbOffset, _Out_writes_bytes_(cbSize) PVOID pvBuffer, const ULONG cbSize);
    [[nodiscard]] HRESULT GetOutputBuffer(_Outptr_result_bytebuffer_(*pcbSize) void** const ppvBuffer, _Out_ ULONG* const pcbSize);
    [[nodiscard]] HRESULT GetInputBuffer(_Outptr_result_bytebuffer_(*pcbSize) void** const ppvBuffer, _Out_ ULONG* const pcbSize);

    [[nodiscard]] HRESULT ReleaseMessageBuffers();

    void SetReplyStatus(const NTSTATUS Status);
    void SetReplyInformation(const ULONG_PTR pInformation);

    // DO NOT PUT ACCESS SPECIFIERS HERE.
    // The tail...",39,server\ApiMessage.hpp,PCCONSOLE_API_MSG,,false,93,PCCONSOLE_API_MSG,7
536023,TYPE_DECL,,server\ApiMessageState.cpp:<global>,NAMESPACE_BLOCK,<global>,1,server\ApiMessageState.cpp,server\ApiMessageState.cpp:<global>,,false,1,<global>,3
536028,TYPE_DECL,,server\ApiMessageState.hpp:<global>,NAMESPACE_BLOCK,<global>,1,server\ApiMessageState.hpp,server\ApiMessageState.hpp:<global>,,false,1,<global>,1
536031,TYPE_DECL,CONSOLE_API_STATE,,,"typedef struct _CONSOLE_API_STATE
{
    ULONG WriteOffset;
    ULONG ReadOffset;
    ULONG InputBufferSize;
    ULONG OutputBufferSize;
    PVOID InputBuffer;
    PVOID OutputBuffer;
}",1,server\ApiMessageState.hpp,_CONSOLE_API_STATE,,false,20,_CONSOLE_API_STATE,1
536038,TYPE_DECL,_CONSOLE_API_STATE,,,"typedef struct _CONSOLE_API_STATE
{
    ULONG WriteOffset;
    ULONG ReadOffset;
    ULONG InputBufferSize;
    ULONG OutputBufferSize;
    PVOID InputBuffer;
    PVOID OutputBuffer;
} CONSOLE_API_STATE, *PCONSOLE_API_STATE, * const PCCONSOLE_API_STATE;",3,server\ApiMessageState.hpp,CONSOLE_API_STATE,,false,28,CONSOLE_API_STATE,2
536039,TYPE_DECL,_CONSOLE_API_STATE*,,,"typedef struct _CONSOLE_API_STATE
{
    ULONG WriteOffset;
    ULONG ReadOffset;
    ULONG InputBufferSize;
    ULONG OutputBufferSize;
    PVOID InputBuffer;
    PVOID OutputBuffer;
} CONSOLE_API_STATE, *PCONSOLE_API_STATE, * const PCCONSOLE_API_STATE;",22,server\ApiMessageState.hpp,PCONSOLE_API_STATE,,false,28,PCONSOLE_API_STATE,3
536040,TYPE_DECL,_CONSOLE_API_STATE*const,,,"typedef struct _CONSOLE_API_STATE
{
    ULONG WriteOffset;
    ULONG ReadOffset;
    ULONG InputBufferSize;
    ULONG OutputBufferSize;
    PVOID InputBuffer;
    PVOID OutputBuffer;
} CONSOLE_API_STATE, *PCONSOLE_API_STATE, * const PCCONSOLE_API_STATE;",43,server\ApiMessageState.hpp,PCCONSOLE_API_STATE,,false,28,PCCONSOLE_API_STATE,4
536051,TYPE_DECL,,server\ApiSorter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,server\ApiSorter.cpp,server\ApiSorter.cpp:<global>,,false,1,<global>,5
536054,TYPE_DECL,CONSOLE_API_DESCRIPTOR,,,"typedef struct _CONSOLE_API_DESCRIPTOR
{
    PCONSOLE_API_ROUTINE Routine;
    ULONG RequiredSize;
    PCSTR TraceName;
}",1,server\ApiSorter.cpp,_CONSOLE_API_DESCRIPTOR,,false,30,_CONSOLE_API_DESCRIPTOR,1
536058,TYPE_DECL,_CONSOLE_API_DESCRIPTOR,,,"typedef struct _CONSOLE_API_DESCRIPTOR
{
    PCONSOLE_API_ROUTINE Routine;
    ULONG RequiredSize;
    PCSTR TraceName;
} CONSOLE_API_DESCRIPTOR, *PCONSOLE_API_DESCRIPTOR;",3,server\ApiSorter.cpp,CONSOLE_API_DESCRIPTOR,,false,35,CONSOLE_API_DESCRIPTOR,2
536059,TYPE_DECL,_CONSOLE_API_DESCRIPTOR*,,,"typedef struct _CONSOLE_API_DESCRIPTOR
{
    PCONSOLE_API_ROUTINE Routine;
    ULONG RequiredSize;
    PCSTR TraceName;
} CONSOLE_API_DESCRIPTOR, *PCONSOLE_API_DESCRIPTOR;",27,server\ApiSorter.cpp,PCONSOLE_API_DESCRIPTOR,,false,35,PCONSOLE_API_DESCRIPTOR,3
536060,TYPE_DECL,CONSOLE_API_LAYER_DESCRIPTOR,,,"typedef struct _CONSOLE_API_LAYER_DESCRIPTOR
{
    const CONSOLE_API_DESCRIPTOR* Descriptor;
    ULONG Count;
}",1,server\ApiSorter.cpp,_CONSOLE_API_LAYER_DESCRIPTOR,,false,37,_CONSOLE_API_LAYER_DESCRIPTOR,4
536063,TYPE_DECL,_CONSOLE_API_LAYER_DESCRIPTOR,,,"typedef struct _CONSOLE_API_LAYER_DESCRIPTOR
{
    const CONSOLE_API_DESCRIPTOR* Descriptor;
    ULONG Count;
} CONSOLE_API_LAYER_DESCRIPTOR, *PCONSOLE_API_LAYER_DESCRIPTOR;",3,server\ApiSorter.cpp,CONSOLE_API_LAYER_DESCRIPTOR,,false,41,CONSOLE_API_LAYER_DESCRIPTOR,5
536064,TYPE_DECL,_CONSOLE_API_LAYER_DESCRIPTOR*,,,"typedef struct _CONSOLE_API_LAYER_DESCRIPTOR
{
    const CONSOLE_API_DESCRIPTOR* Descriptor;
    ULONG Count;
} CONSOLE_API_LAYER_DESCRIPTOR, *PCONSOLE_API_LAYER_DESCRIPTOR;",33,server\ApiSorter.cpp,PCONSOLE_API_LAYER_DESCRIPTOR,,false,41,PCONSOLE_API_LAYER_DESCRIPTOR,6
536634,TYPE_DECL,,server\ApiSorter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,server\ApiSorter.hpp,server\ApiSorter.hpp:<global>,,false,1,<global>,2
536638,TYPE_DECL,,,,"class ApiSorter
{
public:
    // Routine Description:
    // - This routine validates a user IO and dispatches it to the appropriate worker routine.
    // Arguments:
    // - Message - Supplies the message representing the user IO.
    // Return Value:
    // - A pointer to the reply message, if this message is to be completed inline; nullptr if this message will pend now and complete later.
    static PCONSOLE_API_MSG ConsoleDispatchRequest(_Inout_ PCONSOLE_API_MSG Message);
}",1,server\ApiSorter.hpp,ApiSorter,,false,34,ApiSorter,2
536646,TYPE_DECL,,server\ConDrvDeviceComm.cpp:<global>,NAMESPACE_BLOCK,<global>,1,server\ConDrvDeviceComm.cpp,server\ConDrvDeviceComm.cpp:<global>,,false,1,<global>,3
536696,TYPE_DECL,,server\ConDrvDeviceComm.hpp:<global>,NAMESPACE_BLOCK,<global>,1,server\ConDrvDeviceComm.hpp,server\ConDrvDeviceComm.hpp:<global>,,false,1,<global>,3
536699,TYPE_DECL,,,,"class ConDrvDeviceComm : public IDeviceComm
{
public:
    ConDrvDeviceComm(_In_ HANDLE Server);
    ~ConDrvDeviceComm();

    [[nodiscard]] HRESULT SetServerInformation(_In_ CD_IO_SERVER_INFORMATION* const pServerInfo) const override;
    [[nodiscard]] HRESULT ReadIo(_In_opt_ PCONSOLE_API_MSG const pReplyMsg,
                                 _Out_ CONSOLE_API_MSG* const pMessage) const override;
    [[nodiscard]] HRESULT CompleteIo(_In_ CD_IO_COMPLETE* const pCompletion) const override;

    [[nodiscard]] HRESULT ReadInput(_In_ CD_IO_OPERATION* const pIoOperation) const override;
    [[nodiscard]] HRESULT WriteOutput(_In_ CD_IO_OPERATION* const pIoOperation) const override;

    [[nodiscard]] HRESULT AllowUIAccess() const override;

    [[nodiscard]] ULONG_PTR PutHandle(const void*) override;
    [[nodiscard]] void* GetHandle(ULONG_PTR) const override;

    [[nodiscard]] HRESULT GetServerHandle(_Out_ HANDLE* pHandle) const override;

private:
    [[nodiscard]] HRESULT _CallIoctl(_In...",1,server\ConDrvDeviceComm.hpp,ConDrvDeviceComm,IDeviceComm,false,24,ConDrvDeviceComm,1
536733,TYPE_DECL,,server\ConsoleShimPolicy.cpp:<global>,NAMESPACE_BLOCK,<global>,1,server\ConsoleShimPolicy.cpp,server\ConsoleShimPolicy.cpp:<global>,,false,1,<global>,3
536762,TYPE_DECL,,server\ConsoleShimPolicy.hpp:<global>,NAMESPACE_BLOCK,<global>,1,server\ConsoleShimPolicy.hpp,server\ConsoleShimPolicy.hpp:<global>,,false,1,<global>,1
536765,TYPE_DECL,,,,"class ConsoleShimPolicy
{
public:
    ConsoleShimPolicy(const HANDLE hProcess);
    bool IsCmdExe() const noexcept;
    bool IsPowershellExe() const noexcept;
    bool IsVtColorQuirkRequired() const noexcept;

private:
    bool _isCmd{ false };
    bool _isPowershell{ false };
    bool _requiresVtColorQuirk{ false };
}",1,server\ConsoleShimPolicy.hpp,ConsoleShimPolicy,,false,21,ConsoleShimPolicy,1
536806,TYPE_DECL,,server\DeviceComm.hpp:<global>,NAMESPACE_BLOCK,<global>,1,server\DeviceComm.hpp,server\DeviceComm.hpp:<global>,,false,1,<global>,2
536809,TYPE_DECL,,,,"class IDeviceComm
{
public:
    virtual ~IDeviceComm() = default;

    [[nodiscard]] virtual HRESULT SetServerInformation(_In_ CD_IO_SERVER_INFORMATION* const pServerInfo) const = 0;
    [[nodiscard]] virtual HRESULT ReadIo(_In_opt_ PCONSOLE_API_MSG const pReplyMsg,
                                         _Out_ CONSOLE_API_MSG* const pMessage) const = 0;
    [[nodiscard]] virtual HRESULT CompleteIo(_In_ CD_IO_COMPLETE* const pCompletion) const = 0;

    [[nodiscard]] virtual HRESULT ReadInput(_In_ CD_IO_OPERATION* const pIoOperation) const = 0;
    [[nodiscard]] virtual HRESULT WriteOutput(_In_ CD_IO_OPERATION* const pIoOperation) const = 0;

    [[nodiscard]] virtual HRESULT AllowUIAccess() const = 0;

    [[nodiscard]] virtual ULONG_PTR PutHandle(const void*) = 0;
    [[nodiscard]] virtual void* GetHandle(ULONG_PTR) const = 0;

    [[nodiscard]] virtual HRESULT GetServerHandle(_Out_ HANDLE* pHandle) const = 0;
}",1,server\DeviceComm.hpp,IDeviceComm,,false,21,IDeviceComm,1
536842,TYPE_DECL,,server\DeviceHandle.cpp:<global>,NAMESPACE_BLOCK,<global>,1,server\DeviceHandle.cpp,server\DeviceHandle.cpp:<global>,,false,1,<global>,4
536850,TYPE_DECL,,server\DeviceHandle.hpp:<global>,NAMESPACE_BLOCK,<global>,1,server\DeviceHandle.hpp,server\DeviceHandle.hpp:<global>,,false,1,<global>,1
536869,TYPE_DECL,,server\Entrypoints.cpp:<global>,NAMESPACE_BLOCK,<global>,1,server\Entrypoints.cpp,server\Entrypoints.cpp:<global>,,false,1,<global>,6
536885,TYPE_DECL,,server\Entrypoints.hpp:<global>,NAMESPACE_BLOCK,<global>,1,server\Entrypoints.hpp,server\Entrypoints.hpp:<global>,,false,1,<global>,1
536888,TYPE_DECL,,,,class ConsoleArguments,1,server\Entrypoints.hpp,ConsoleArguments,,false,19,ConsoleArguments,1
536909,TYPE_DECL,,server\IApiRoutines.hpp:<global>,NAMESPACE_BLOCK,<global>,1,server\IApiRoutines.hpp,server\IApiRoutines.hpp:<global>,,false,1,<global>,6
536912,TYPE_DECL,,,,class SCREEN_INFORMATION,1,server\IApiRoutines.hpp,SCREEN_INFORMATION,,false,22,SCREEN_INFORMATION,1
536913,TYPE_DECL,SCREEN_INFORMATION,,,typedef SCREEN_INFORMATION IConsoleOutputObject;,28,server\IApiRoutines.hpp,IConsoleOutputObject,,false,23,IConsoleOutputObject,2
536914,TYPE_DECL,,,,class InputBuffer,1,server\IApiRoutines.hpp,InputBuffer,,false,25,InputBuffer,3
536915,TYPE_DECL,InputBuffer,,,typedef InputBuffer IConsoleInputObject;,21,server\IApiRoutines.hpp,IConsoleInputObject,,false,26,IConsoleInputObject,4
536916,TYPE_DECL,,,,class INPUT_READ_HANDLE_DATA,1,server\IApiRoutines.hpp,INPUT_READ_HANDLE_DATA,,false,28,INPUT_READ_HANDLE_DATA,5
536917,TYPE_DECL,,,,"class IApiRoutines
{
public:
#pragma region ObjectManagement
    // TODO: 9115192 - We will need to make the objects via an interface eventually. This represents that idea.
    /*virtual HRESULT CreateInitialObjects(_Out_ IConsoleInputObject** const ppInputObject,
                                          _Out_ IConsoleOutputObject** const ppOutputObject);
*/

#pragma endregion

    virtual ~IApiRoutines() = default;

#pragma region L1
    virtual void GetConsoleInputCodePageImpl(ULONG& codepage) noexcept = 0;

    virtual void GetConsoleOutputCodePageImpl(ULONG& codepage) noexcept = 0;

    virtual void GetConsoleInputModeImpl(InputBuffer& context,
                                         ULONG& mode) noexcept = 0;

    virtual void GetConsoleOutputModeImpl(SCREEN_INFORMATION& context,
                                          ULONG& mode) noexcept = 0;

    [[nodiscard]] virtual HRESULT SetConsoleInputModeImpl(IConsoleInputObject& context,
                                         ...",1,server\IApiRoutines.hpp,IApiRoutines,,false,36,IApiRoutines,6
537459,TYPE_DECL,,server\IWaitRoutine.hpp:<global>,NAMESPACE_BLOCK,<global>,1,server\IWaitRoutine.hpp,server\IWaitRoutine.hpp:<global>,,false,1,<global>,2
537462,TYPE_DECL,,,,"enum class ReplyDataType
{
    Write = 1,
    Read = 2,
}",1,server\IWaitRoutine.hpp,ReplyDataType,,false,23,ReplyDataType,1
537475,TYPE_DECL,,,,"class IWaitRoutine
{
public:
    IWaitRoutine(ReplyDataType type) noexcept :
        _ReplyType(type)

    {
    }

    virtual ~IWaitRoutine() = default;

    IWaitRoutine(const IWaitRoutine&) = delete;
    IWaitRoutine(IWaitRoutine&&) = delete;
    IWaitRoutine& operator=(const IWaitRoutine&) & = delete;
    IWaitRoutine& operator=(IWaitRoutine&&) & = delete;

    virtual void MigrateUserBuffersOnTransitionToBackgroundWait(const void* oldBuffer, void* newBuffer) = 0;

    virtual bool Notify(const WaitTerminationReason TerminationReason,
                        const bool fIsUnicode,
                        _Out_ NTSTATUS* const pReplyStatus,
                        _Out_ size_t* const pNumBytes,
                        _Out_ DWORD* const pControlKeyState,
                        _Out_ void* const pOutputData) = 0;

    ReplyDataType GetReplyType() const noexcept
    {
        return _ReplyType;
    }

private:
    const ReplyDataType _ReplyType;
}",1,server\IWaitRoutine.hpp,IWaitRoutine,,false,29,IWaitRoutine,2
537547,TYPE_DECL,,server\IoDispatchers.cpp:<global>,NAMESPACE_BLOCK,<global>,1,server\IoDispatchers.cpp,server\IoDispatchers.cpp:<global>,,false,1,<global>,14
537971,TYPE_DECL,,server\IoDispatchers.hpp:<global>,NAMESPACE_BLOCK,<global>,1,server\IoDispatchers.hpp,server\IoDispatchers.hpp:<global>,,false,1,<global>,2
537974,TYPE_DECL,,,,"class IoDispatchers
{
public:
    // TODO: MSFT: 9115192 temp for now. going to ApiSorter and IoDispatchers
    static PCONSOLE_API_MSG ConsoleHandleConnectionRequest(_In_ PCONSOLE_API_MSG pReceiveMsg);
    static PCONSOLE_API_MSG ConsoleDispatchRequest(_In_ PCONSOLE_API_MSG pMessage);
    static PCONSOLE_API_MSG ConsoleCreateObject(_In_ PCONSOLE_API_MSG pMessage);
    static PCONSOLE_API_MSG ConsoleCloseObject(_In_ PCONSOLE_API_MSG pMessage);
    static PCONSOLE_API_MSG ConsoleClientDisconnectRoutine(_In_ PCONSOLE_API_MSG pMessage);
}",1,server\IoDispatchers.hpp,IoDispatchers,,false,22,IoDispatchers,1
537998,TYPE_DECL,,server\IoSorter.cpp:<global>,NAMESPACE_BLOCK,<global>,1,server\IoSorter.cpp,server\IoSorter.cpp:<global>,,false,1,<global>,9
538006,TYPE_DECL,,server\IoSorter.hpp:<global>,NAMESPACE_BLOCK,<global>,1,server\IoSorter.hpp,server\IoSorter.hpp:<global>,,false,1,<global>,2
538009,TYPE_DECL,,,,"class IoSorter
{
public:
    // TODO: MSFT: 9115192 - probably not void.
    static void ServiceIoOperation(_In_ CONSOLE_API_MSG* const pMsg,
                                   _Out_ CONSOLE_API_MSG** ReplyMsg);
}",1,server\IoSorter.hpp,IoSorter,,false,22,IoSorter,1
538013,TYPE_DECL,,server\IoThread.hpp:<global>,NAMESPACE_BLOCK,<global>,1,server\IoThread.hpp,server\IoThread.hpp:<global>,,false,1,<global>,1
538016,TYPE_DECL,,,,class ConsoleArguments,1,server\IoThread.hpp,ConsoleArguments,,false,6,ConsoleArguments,1
538034,TYPE_DECL,,server\ObjectHandle.cpp:<global>,NAMESPACE_BLOCK,<global>,1,server\ObjectHandle.cpp,server\ObjectHandle.cpp:<global>,,false,1,<global>,8
538267,TYPE_DECL,,server\ObjectHandle.hpp:<global>,NAMESPACE_BLOCK,<global>,1,server\ObjectHandle.hpp,server\ObjectHandle.hpp:<global>,,false,1,<global>,2
538270,TYPE_DECL,,,,class INPUT_READ_HANDLE_DATA,1,server\ObjectHandle.hpp,INPUT_READ_HANDLE_DATA,,false,21,INPUT_READ_HANDLE_DATA,1
538271,TYPE_DECL,,,,class InputBuffer,1,server\ObjectHandle.hpp,InputBuffer,,false,23,InputBuffer,2
538272,TYPE_DECL,,,,class SCREEN_INFORMATION,1,server\ObjectHandle.hpp,SCREEN_INFORMATION,,false,25,SCREEN_INFORMATION,3
538273,TYPE_DECL,,,,"class ConsoleHandleData final
{
public:
    ConsoleHandleData(const ACCESS_MASK amAccess,
                      const ULONG ulShareAccess);

    void Initialize(const ULONG ulHandleType,
                    PVOID const pvClientPointer);

    ~ConsoleHandleData();
    ConsoleHandleData(const ConsoleHandleData&) = delete;
    ConsoleHandleData(ConsoleHandleData&&) = delete;
    ConsoleHandleData& operator=(const ConsoleHandleData&) & = delete;
    ConsoleHandleData& operator=(ConsoleHandleData&&) & = delete;

    [[nodiscard]] HRESULT GetInputBuffer(const ACCESS_MASK amRequested,
                                         _Outptr_ InputBuffer** const ppInputBuffer) const;
    [[nodiscard]] HRESULT GetScreenBuffer(const ACCESS_MASK amRequested,
                                          _Outptr_ SCREEN_INFORMATION** const ppScreenInfo) const;

    [[nodiscard]] HRESULT GetWaitQueue(_Outptr_ ConsoleWaitQueue** const ppWaitQueue) const;

    INPUT_READ_HANDLE_DATA* GetClientInput() const;

...",1,server\ObjectHandle.hpp,ConsoleHandleData,,false,29,ConsoleHandleData,4
538339,TYPE_DECL,,,,"enum HandleType
    {
        NotReady = 0x0,
        Input = 0x1,
        Output = 0x2
    }",5,server\ObjectHandle.hpp,ConsoleHandleData.HandleType,,false,64,HandleType,17
538388,TYPE_DECL,,server\ObjectHeader.cpp:<global>,NAMESPACE_BLOCK,<global>,1,server\ObjectHeader.cpp,server\ObjectHeader.cpp:<global>,,false,1,<global>,5
538433,TYPE_DECL,,server\ObjectHeader.hpp:<global>,NAMESPACE_BLOCK,<global>,1,server\ObjectHeader.hpp,server\ObjectHeader.hpp:<global>,,false,1,<global>,2
538436,TYPE_DECL,,,,"class ConsoleObjectHeader
{
public:
    ConsoleObjectHeader();

    // NOTE: This class must have a virtual method for the stored ""this"" pointers to match what we're actually looking for.
    // If there is no virtual method, we may have the ""this"" pointer be offset by 8 from the actual object that inherits ConsoleObjectHeader.
    virtual ~ConsoleObjectHeader() = default;

    [[nodiscard]] HRESULT AllocateIoHandle(const ConsoleHandleData::HandleType ulHandleType,
                                           const ACCESS_MASK amDesired,
                                           const ULONG ulShareMode,
                                           std::unique_ptr<ConsoleHandleData>& out);

    [[nodiscard]] HRESULT FreeIoHandle(_In_ ConsoleHandleData* const pFree);

    bool HasAnyOpenHandles() const;

    // TODO: MSFT 9355013 come up with a better solution than this. http://osgvsowi/9355013
    // It's currently a ""load bearing"" piece because things like the renderer expect there to ...",1,server\ObjectHeader.hpp,ConsoleObjectHeader,,false,22,ConsoleObjectHeader,1
538467,TYPE_DECL,,,,friend class ObjectTests,5,server\ObjectHeader.hpp,ConsoleObjectHeader.ObjectTests,,false,52,ObjectTests,12
538478,TYPE_DECL,,server\ProcessHandle.cpp:<global>,NAMESPACE_BLOCK,<global>,1,server\ProcessHandle.cpp,server\ProcessHandle.cpp:<global>,,false,1,<global>,5
538631,TYPE_DECL,,server\ProcessHandle.hpp:<global>,NAMESPACE_BLOCK,<global>,1,server\ProcessHandle.hpp,server\ProcessHandle.hpp:<global>,,false,1,<global>,7
538634,TYPE_DECL,,,,"class ConsoleProcessHandle
{
public:
    ConsoleProcessHandle(const DWORD dwProcessId,
                         const DWORD dwThreadId,
                         const ULONG ulProcessGroupId);
    ~ConsoleProcessHandle() = default;
    ConsoleProcessHandle(const ConsoleProcessHandle&) = delete;
    ConsoleProcessHandle(ConsoleProcessHandle&&) = delete;
    ConsoleProcessHandle& operator=(const ConsoleProcessHandle&) & = delete;
    ConsoleProcessHandle& operator=(ConsoleProcessHandle&&) & = delete;

    const std::unique_ptr<ConsoleWaitQueue> pWaitBlockQueue;
    std::unique_ptr<ConsoleHandleData> pInputHandle;
    std::unique_ptr<ConsoleHandleData> pOutputHandle;

    bool fRootProcess;

    DWORD const dwProcessId;
    DWORD const dwThreadId;

    const ConsoleProcessPolicy GetPolicy() const;
    const ConsoleShimPolicy GetShimPolicy() const;

    const HANDLE GetRawHandle() const;

    CD_CONNECTION_INFORMATION GetConnectionInformation(IDeviceComm* deviceComm) const;

    const FI...",1,server\ProcessHandle.hpp,ConsoleProcessHandle,,false,28,ConsoleProcessHandle,1
538699,TYPE_DECL,,,,friend class ConsoleProcessList,5,server\ProcessHandle.hpp,ConsoleProcessHandle.ConsoleProcessList,,false,68,ConsoleProcessList,24
538710,TYPE_DECL,,server\ProcessList.cpp:<global>,NAMESPACE_BLOCK,<global>,1,server\ProcessList.cpp,server\ProcessList.cpp:<global>,,false,1,<global>,5
538882,TYPE_DECL,,server\ProcessList.hpp:<global>,NAMESPACE_BLOCK,<global>,1,server\ProcessList.hpp,server\ProcessList.hpp:<global>,,false,1,<global>,2
538885,TYPE_DECL,,,,"struct ConsoleProcessTerminationRecord
{
    // Unfortunately the reason for this was lost in time, but presumably a process
    // handle is held so that we can refer to a process via PID (dwProcessID) without
    // holding the console lock and fearing that the PID might get reused by the OS.
    wil::unique_handle hProcess;
    DWORD dwProcessID;
    ULONG ulTerminateCount;
}",1,server\ProcessList.hpp,ConsoleProcessTerminationRecord,,false,24,ConsoleProcessTerminationRecord,1
538889,TYPE_DECL,,,,"class ConsoleProcessList
{
public:
    [[nodiscard]] HRESULT AllocProcessData(const DWORD dwProcessId,
                                           const DWORD dwThreadId,
                                           const ULONG ulProcessGroupId,
                                           _Outptr_opt_ ConsoleProcessHandle** const ppProcessData);

    void FreeProcessData(_In_ ConsoleProcessHandle* const ProcessData);

    ConsoleProcessHandle* FindProcessInList(const DWORD dwProcessId) const;
    ConsoleProcessHandle* FindProcessByGroupId(_In_ ULONG ulProcessGroupId) const;
    ConsoleProcessHandle* GetRootProcess() const;
    ConsoleProcessHandle* GetOldestProcess() const;

    [[nodiscard]] HRESULT GetTerminationRecordsByGroupId(const DWORD dwLimitingProcessId,
                                                         const bool fCtrlClose,
                                                         std::vector<ConsoleProcessTerminationRecord>& termRecords) const;

    [[nodiscard]] HRESU...",1,server\ProcessList.hpp,ConsoleProcessList,,false,34,ConsoleProcessList,2
538938,TYPE_DECL,,server\ProcessPolicy.cpp:<global>,NAMESPACE_BLOCK,<global>,1,server\ProcessPolicy.cpp,server\ProcessPolicy.cpp:<global>,,false,1,<global>,4
539041,TYPE_DECL,,server\ProcessPolicy.hpp:<global>,NAMESPACE_BLOCK,<global>,1,server\ProcessPolicy.hpp,server\ProcessPolicy.hpp:<global>,,false,1,<global>,1
539044,TYPE_DECL,,,,"class ConsoleProcessPolicy
{
public:
    ~ConsoleProcessPolicy();

    static ConsoleProcessPolicy s_CreateInstance(const HANDLE hProcess);

    bool CanReadOutputBuffer() const;
    bool CanWriteInputBuffer() const;

private:
    ConsoleProcessPolicy(const bool fCanReadOutputBuffer,
                         const bool fCanWriteInputBuffer);

    const bool _fCanReadOutputBuffer;
    const bool _fCanWriteInputBuffer;
}",1,server\ProcessPolicy.hpp,ConsoleProcessPolicy,,false,19,ConsoleProcessPolicy,1
539086,TYPE_DECL,,server\WaitBlock.cpp:<global>,NAMESPACE_BLOCK,<global>,1,server\WaitBlock.cpp,server\WaitBlock.cpp:<global>,,false,1,<global>,8
539474,TYPE_DECL,,server\WaitBlock.hpp:<global>,NAMESPACE_BLOCK,<global>,1,server\WaitBlock.hpp,server\WaitBlock.hpp:<global>,,false,1,<global>,5
539477,TYPE_DECL,,,,class ConsoleWaitQueue,1,server\WaitBlock.hpp,ConsoleWaitQueue,,false,26,ConsoleWaitQueue,1
539478,TYPE_DECL,,,,"class ConsoleWaitBlock
{
public:
    ~ConsoleWaitBlock();

    bool Notify(const WaitTerminationReason TerminationReason);

    [[nodiscard]] static HRESULT s_CreateWait(_Inout_ CONSOLE_API_MSG* const pWaitReplymessage,
                                              _In_ IWaitRoutine* const pWaiter);

private:
    ConsoleWaitBlock(_In_ ConsoleWaitQueue* const pProcessQueue,
                     _In_ ConsoleWaitQueue* const pObjectQueue,
                     const CONSOLE_API_MSG* const pWaitReplyMessage,
                     _In_ IWaitRoutine* const pWaiter);

    ConsoleWaitQueue* const _pProcessQueue;
    std::_List_const_iterator<std::_List_val<std::_List_simple_types<ConsoleWaitBlock*>>> _itProcessQueue;

    ConsoleWaitQueue* const _pObjectQueue;
    std::_List_const_iterator<std::_List_val<std::_List_simple_types<ConsoleWaitBlock*>>> _itObjectQueue;

    CONSOLE_API_MSG _WaitReplyMessage;

    IWaitRoutine* const _pWaiter;
}",1,server\WaitBlock.hpp,ConsoleWaitBlock,,false,28,ConsoleWaitBlock,2
539508,TYPE_DECL,,server\WaitQueue.cpp:<global>,NAMESPACE_BLOCK,<global>,1,server\WaitQueue.cpp,server\WaitQueue.cpp:<global>,,false,1,<global>,6
539617,TYPE_DECL,,server\WaitQueue.hpp:<global>,NAMESPACE_BLOCK,<global>,1,server\WaitQueue.hpp,server\WaitQueue.hpp:<global>,,false,1,<global>,6
539620,TYPE_DECL,,,,"class ConsoleWaitQueue
{
public:
    ConsoleWaitQueue();

    ~ConsoleWaitQueue();

    bool NotifyWaiters(const bool fNotifyAll);

    bool NotifyWaiters(const bool fNotifyAll,
                       const WaitTerminationReason TerminationReason);

    [[nodiscard]] static HRESULT s_CreateWait(_Inout_ CONSOLE_API_MSG* const pWaitReplyMessage,
                                              _In_ IWaitRoutine* const pWaiter);

private:
    bool _NotifyBlock(_In_ ConsoleWaitBlock* pWaitBlock,
                      const WaitTerminationReason TerminationReason);

    std::list<ConsoleWaitBlock*> _blocks;

    friend class ConsoleWaitBlock; // Blocks live in multiple queues so we let them manage the lifetime.
}",1,server\WaitQueue.hpp,ConsoleWaitQueue,,false,28,ConsoleWaitQueue,1
539643,TYPE_DECL,,,,friend class ConsoleWaitBlock,5,server\WaitQueue.hpp,ConsoleWaitQueue.ConsoleWaitBlock,,false,49,ConsoleWaitBlock,8
539646,TYPE_DECL,,server\WaitTerminationReason.hpp:<global>,NAMESPACE_BLOCK,<global>,1,server\WaitTerminationReason.hpp,server\WaitTerminationReason.hpp:<global>,,false,1,<global>,1
539649,TYPE_DECL,,,,"enum class WaitTerminationReason
{
    NoReason = 0x0,
    CtrlC = 0x1,
    CtrlBreak = 0x2,
    ThreadDying = 0x4,
    HandleClosing = 0x8
}",1,server\WaitTerminationReason.hpp,WaitTerminationReason,,false,20,WaitTerminationReason,1
539681,TYPE_DECL,,server\WinNTControl.cpp:<global>,NAMESPACE_BLOCK,<global>,1,server\WinNTControl.cpp,server\WinNTControl.cpp:<global>,,false,1,<global>,3
539698,TYPE_DECL,,server\WinNTControl.hpp:<global>,NAMESPACE_BLOCK,<global>,1,server\WinNTControl.hpp,server\WinNTControl.hpp:<global>,,false,1,<global>,1
539701,TYPE_DECL,,,,"class WinNTControl
{
public:
    [[nodiscard]] static NTSTATUS NtOpenFile(_Out_ PHANDLE FileHandle,
                                             _In_ ACCESS_MASK DesiredAccess,
                                             _In_ POBJECT_ATTRIBUTES ObjectAttributes,
                                             _Out_ PIO_STATUS_BLOCK IoStatusBlock,
                                             _In_ ULONG ShareAccess,
                                             _In_ ULONG OpenOptions);

private:
    WinNTControl();

    WinNTControl(const WinNTControl&) = delete;
    void operator=(const WinNTControl&) = delete;

    static WinNTControl& GetInstance();

    wil::unique_hmodule const _NtDllDll;

    typedef NTSTATUS(NTAPI* PfnNtOpenFile)(PHANDLE, ACCESS_MASK, POBJECT_ATTRIBUTES, PIO_STATUS_BLOCK, ULONG, ULONG);
    const PfnNtOpenFile _NtOpenFile;
}",1,server\WinNTControl.hpp,WinNTControl,,false,19,WinNTControl,1
539728,TYPE_DECL,,server\precomp.cpp:<global>,NAMESPACE_BLOCK,<global>,1,server\precomp.cpp,server\precomp.cpp:<global>,,false,1,<global>,2
539757,TYPE_DECL,,server\precomp.hpp:<global>,NAMESPACE_BLOCK,<global>,1,server\precomp.hpp,server\precomp.hpp:<global>,,false,1,<global>,13
539771,TYPE_DECL,,server\winbasep.hpp:<global>,NAMESPACE_BLOCK,<global>,1,server\winbasep.hpp,server\winbasep.hpp:<global>,,false,1,<global>,1
539776,TYPE_DECL,,terminal\adapter\DispatchTypes.hpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\adapter\DispatchTypes.hpp,terminal\adapter\DispatchTypes.hpp:<global>,,false,1,<global>,1
539782,TYPE_DECL,int32_t,,,using VTInt = int32_t;,5,terminal\adapter\DispatchTypes.hpp,VTInt,,false,8,VTInt,1
539783,TYPE_DECL,,,,"union VTID
    {
    public:
        VTID() = default;

        template<size_t Length>
        constexpr VTID(const char (&s)[Length]) :
            _value{ _FromString(s) }
        {
        }

        constexpr VTID(const uint64_t value) :
            _value{ value & 0x00FFFFFFFFFFFFFF }
        {
        }

        constexpr operator uint64_t() const
        {
            return _value;
        }

        constexpr const std::string_view ToString() const
        {
            return &_string[0];
        }

        constexpr char operator[](const size_t offset) const
        {
            return SubSequence(offset)._value & 0xFF;
        }

        constexpr VTID SubSequence(const size_t offset) const
        {
            return _value >> (CHAR_BIT * offset);
        }

    private:
        template<size_t Length>
        static constexpr uint64_t _FromString(const char (&s)[Length])
        {
            static_assert(Length <= sizeof(_value));
            uint64_t value = 0;
 ...",5,terminal\adapter\DispatchTypes.hpp,Microsoft.Console.VirtualTerminal.VTID,,false,10,VTID,2
539901,TYPE_DECL,,,,"class VTIDBuilder
    {
    public:
        void Clear() noexcept
        {
            _idAccumulator = 0;
            _idShift = 0;
        }

        void AddIntermediate(const wchar_t intermediateChar) noexcept
        {
            if (_idShift + CHAR_BIT * 2 >= sizeof(_idAccumulator) * CHAR_BIT)
            {
                // If there is not enough space in the accumulator to add
                // the intermediate and still have room left for the final
                // and null terminator, then we reset the accumulator to zero.
                // This will result in an id with all zero intermediates,
                // which shouldn't match anything.
                _idAccumulator = 0;
            }
            else
            {
                // Otherwise we shift the intermediate so as to add it to the
                // accumulator in the next available space, and then increment
                // the shift by 8 bits in preparation for the next character.
           ...",5,terminal\adapter\DispatchTypes.hpp,Microsoft.Console.VirtualTerminal.VTIDBuilder,,false,67,VTIDBuilder,3
539969,TYPE_DECL,,,,"class VTParameter
    {
    public:
        constexpr VTParameter() noexcept :
            _value{ -1 }
        {
        }

        constexpr VTParameter(const VTInt rhs) noexcept :
            _value{ rhs }
        {
        }

        constexpr bool has_value() const noexcept
        {
            // A negative value indicates that the parameter was omitted.
            return _value >= 0;
        }

        constexpr VTInt value() const noexcept
        {
            return _value;
        }

        constexpr VTInt value_or(VTInt defaultValue) const noexcept
        {
            // A negative value indicates that the parameter was omitted.
            return _value < 0 ? defaultValue : _value;
        }

        template<typename T, typename = std::enable_if_t<std::is_enum_v<T>>>
        constexpr operator T() const noexcept
        {
            // For most selective parameters, omitted values will default to 0.
            return static_cast<T>(value_or(0));
        }

     ...",5,terminal\adapter\DispatchTypes.hpp,Microsoft.Console.VirtualTerminal.VTParameter,,false,107,VTParameter,4
540026,TYPE_DECL,,,,"class VTSubParameters
    {
    public:
        constexpr VTSubParameters() noexcept
        {
        }

        constexpr VTSubParameters(const std::span<const VTParameter> subParams) noexcept :
            _subParams{ subParams }
        {
        }

        constexpr VTParameter at(const size_t index) const noexcept
        {
            // If the index is out of range, we return a sub parameter with no value.
            return index < _subParams.size() ? til::at(_subParams, index) : defaultParameter;
        }

        VTSubParameters subspan(const size_t offset, const size_t count) const noexcept
        {
            const auto subParamsSpan = _subParams.subspan(offset, count);
            return { subParamsSpan };
        }

        bool empty() const noexcept
        {
            return _subParams.empty();
        }

        size_t size() const noexcept
        {
            return _subParams.size();
        }

        constexpr operator std::span<const VTParameter>() con...",5,terminal\adapter\DispatchTypes.hpp,Microsoft.Console.VirtualTerminal.VTSubParameters,,false,155,VTSubParameters,5
540105,TYPE_DECL,,,,"class VTParameters
    {
    public:
        constexpr VTParameters() noexcept
        {
        }

        constexpr VTParameters(const VTParameter* paramsPtr, const size_t paramsCount) noexcept :
            _params{ paramsPtr, paramsCount },
            _subParams{},
            _subParamRanges{}
        {
        }

        constexpr VTParameters(const std::span<const VTParameter> params,
                               const std::span<const VTParameter> subParams,
                               const std::span<const std::pair<BYTE, BYTE>> subParamRanges) noexcept :
            _params{ params },
            _subParams{ subParams },
            _subParamRanges{ subParamRanges }
        {
        }

        constexpr VTParameter at(const size_t index) const noexcept
        {
            // If the index is out of range, we return a parameter with no value.
            return index < _params.size() ? til::at(_params, index) : defaultParameter;
        }

        constexpr bool empt...",5,terminal\adapter\DispatchTypes.hpp,Microsoft.Console.VirtualTerminal.VTParameters,,false,200,VTParameters,6
540346,TYPE_DECL,Microsoft.Console.VirtualTerminal.FlaggedEnumValue<VTInt>,,,"class FlaggedEnumValue
    {
    public:
        static constexpr VTInt mask{ Flag };

        constexpr FlaggedEnumValue(const VTInt value) :
            _value{ value }
        {
        }

        constexpr FlaggedEnumValue(const VTParameter& value) :
            _value{ value }
        {
        }

        template<typename T, typename = std::enable_if_t<std::is_enum_v<T>>>
        constexpr operator T() const noexcept
        {
            return static_cast<T>(_value | mask);
        }

        constexpr operator VTInt() const noexcept
        {
            return _value | mask;
        }

    private:
        VTInt _value;
    }",5,terminal\adapter\DispatchTypes.hpp,Microsoft.Console.VirtualTerminal.FlaggedEnumValue,,false,324,FlaggedEnumValue,7
540389,TYPE_DECL,,,,"enum class ColorItem : VTInt
    {
        NormalText = 1,
        WindowFrame = 2,
    }",5,terminal\adapter\DispatchTypes.hpp,Microsoft.Console.VirtualTerminal.DispatchTypes.ColorItem,,false,357,ColorItem,1
540402,TYPE_DECL,,,,"enum class ColorModel : VTInt
    {
        HLS = 1,
        RGB = 2,
    }",5,terminal\adapter\DispatchTypes.hpp,Microsoft.Console.VirtualTerminal.DispatchTypes.ColorModel,,false,363,ColorModel,2
540415,TYPE_DECL,,,,"enum class EraseType : VTInt
    {
        ToEnd = 0,
        FromBeginning = 1,
        All = 2,
        Scrollback = 3
    }",5,terminal\adapter\DispatchTypes.hpp,Microsoft.Console.VirtualTerminal.DispatchTypes.EraseType,,false,369,EraseType,3
540436,TYPE_DECL,,,,"enum class ChangeExtent : VTInt
    {
        Default = 0,
        Stream = 1,
        Rectangle = 2
    }",5,terminal\adapter\DispatchTypes.hpp,Microsoft.Console.VirtualTerminal.DispatchTypes.ChangeExtent,,false,377,ChangeExtent,4
540453,TYPE_DECL,,,,"enum class TaskbarState : VTInt
    {
        Clear = 0,
        Set = 1,
        Error = 2,
        Indeterminate = 3,
        Paused = 4
    }",5,terminal\adapter\DispatchTypes.hpp,Microsoft.Console.VirtualTerminal.DispatchTypes.TaskbarState,,false,384,TaskbarState,5
540478,TYPE_DECL,,,,"enum GraphicsOptions : VTInt
    {
        Off = 0,
        Intense = 1,
        // The 2 and 5 entries here are for BOTH the extended graphics options,
        // as well as the Faint/Blink options.
        RGBColorOrFaint = 2, // 2 is also Faint, decreased intensity (ISO 6429).
        Italics = 3,
        Underline = 4, // same for extended underline styles `SGR 4:x`.
        BlinkOrXterm256Index = 5, // 5 is also Blink.
        RapidBlink = 6,
        Negative = 7,
        Invisible = 8,
        CrossedOut = 9,
        DoublyUnderlined = 21,
        NotIntenseOrFaint = 22,
        NotItalics = 23,
        NoUnderline = 24,
        Steady = 25, // _not_ blink
        Positive = 27, // _not_ inverse
        Visible = 28, // _not_ invisible
        NotCrossedOut = 29,
        ForegroundBlack = 30,
        ForegroundRed = 31,
        ForegroundGreen = 32,
        ForegroundYellow = 33,
        ForegroundBlue = 34,
        ForegroundMagenta = 35,
        ForegroundCyan = 36,
        ...",5,terminal\adapter\DispatchTypes.hpp,Microsoft.Console.VirtualTerminal.DispatchTypes.GraphicsOptions,,false,393,GraphicsOptions,6
540715,TYPE_DECL,,,,"enum LogicalAttributeOptions : VTInt
    {
        Default = 0,
        Protected = 1,
        Unprotected = 2
    }",5,terminal\adapter\DispatchTypes.hpp,Microsoft.Console.VirtualTerminal.DispatchTypes.LogicalAttributeOptions,,false,457,LogicalAttributeOptions,7
540732,TYPE_DECL,,,,"enum class SgrSaveRestoreStackOptions : VTInt
    {
        All = 0,
        Intense = 1,
        Faintness = 2,
        Italics = 3,
        Underline = 4,
        Blink = 5,
        Negative = 7,
        Invisible = 8,
        CrossedOut = 9,
        DoublyUnderlined = 21,
        SaveForegroundColor = 30,
        SaveBackgroundColor = 31,
        Max = SaveBackgroundColor
    }",5,terminal\adapter\DispatchTypes.hpp,Microsoft.Console.VirtualTerminal.DispatchTypes.SgrSaveRestoreStackOptions,,false,481,SgrSaveRestoreStackOptions,8
540789,TYPE_DECL,FlaggedEnumValue<0x00000000>,,,using ANSIStandardStatus = FlaggedEnumValue<0x00000000>;,5,terminal\adapter\DispatchTypes.hpp,ANSIStandardStatus,,false,498,ANSIStandardStatus,9
540790,TYPE_DECL,FlaggedEnumValue<0x01000000>,,,using DECPrivateStatus = FlaggedEnumValue<0x01000000>;,5,terminal\adapter\DispatchTypes.hpp,DECPrivateStatus,,false,499,DECPrivateStatus,10
540791,TYPE_DECL,,,,"enum class StatusType : VTInt
    {
        OperatingStatus = ANSIStandardStatus(5),
        CursorPositionReport = ANSIStandardStatus(6),
        ExtendedCursorPositionReport = DECPrivateStatus(6),
        PrinterStatus = DECPrivateStatus(15),
        UserDefinedKeys = DECPrivateStatus(25),
        KeyboardStatus = DECPrivateStatus(26),
        LocatorStatus = DECPrivateStatus(55),
        LocatorIdentity = DECPrivateStatus(56),
        MacroSpaceReport = DECPrivateStatus(62),
        MemoryChecksum = DECPrivateStatus(63),
        DataIntegrity = DECPrivateStatus(75),
        MultipleSessionStatus = DECPrivateStatus(85),
    }",5,terminal\adapter\DispatchTypes.hpp,Microsoft.Console.VirtualTerminal.DispatchTypes.StatusType,,false,501,StatusType,11
540856,TYPE_DECL,FlaggedEnumValue<0x00000000>,,,using ANSIStandardMode = FlaggedEnumValue<0x00000000>;,5,terminal\adapter\DispatchTypes.hpp,ANSIStandardMode,,false,517,ANSIStandardMode,12
540857,TYPE_DECL,FlaggedEnumValue<0x01000000>,,,using DECPrivateMode = FlaggedEnumValue<0x01000000>;,5,terminal\adapter\DispatchTypes.hpp,DECPrivateMode,,false,518,DECPrivateMode,13
540858,TYPE_DECL,,,,"enum ModeParams : VTInt
    {
        IRM_InsertReplaceMode = ANSIStandardMode(4),
        LNM_LineFeedNewLineMode = ANSIStandardMode(20),
        DECCKM_CursorKeysMode = DECPrivateMode(1),
        DECANM_AnsiMode = DECPrivateMode(2),
        DECCOLM_SetNumberOfColumns = DECPrivateMode(3),
        DECSCNM_ScreenMode = DECPrivateMode(5),
        DECOM_OriginMode = DECPrivateMode(6),
        DECAWM_AutoWrapMode = DECPrivateMode(7),
        DECARM_AutoRepeatMode = DECPrivateMode(8),
        ATT610_StartCursorBlink = DECPrivateMode(12),
        DECTCEM_TextCursorEnableMode = DECPrivateMode(25),
        XTERM_EnableDECCOLMSupport = DECPrivateMode(40),
        DECNKM_NumericKeypadMode = DECPrivateMode(66),
        DECBKM_BackarrowKeyMode = DECPrivateMode(67),
        DECLRMM_LeftRightMarginMode = DECPrivateMode(69),
        DECECM_EraseColorMode = DECPrivateMode(117),
        VT200_MOUSE_MODE = DECPrivateMode(1000),
        BUTTON_EVENT_MOUSE_MODE = DECPrivateMode(1002),
        ANY_EVENT...",5,terminal\adapter\DispatchTypes.hpp,Microsoft.Console.VirtualTerminal.DispatchTypes.ModeParams,,false,520,ModeParams,14
540993,TYPE_DECL,,,,"enum CharacterSets : uint64_t
    {
        DecSpecialGraphics = VTID(""0""),
        ASCII = VTID(""B"")
    }",5,terminal\adapter\DispatchTypes.hpp,Microsoft.Console.VirtualTerminal.DispatchTypes.CharacterSets,,false,550,CharacterSets,15
541008,TYPE_DECL,,,,"enum CodingSystem : uint64_t
    {
        ISO2022 = VTID(""@""),
        UTF8 = VTID(""G"")
    }",5,terminal\adapter\DispatchTypes.hpp,Microsoft.Console.VirtualTerminal.DispatchTypes.CodingSystem,,false,556,CodingSystem,16
541023,TYPE_DECL,,,,"enum TabClearType : VTInt
    {
        ClearCurrentColumn = 0,
        ClearAllColumns = 3
    }",5,terminal\adapter\DispatchTypes.hpp,Microsoft.Console.VirtualTerminal.DispatchTypes.TabClearType,,false,562,TabClearType,17
541036,TYPE_DECL,,,,"enum TabSetType : VTInt
    {
        SetEvery8Columns = 5
    }",5,terminal\adapter\DispatchTypes.hpp,Microsoft.Console.VirtualTerminal.DispatchTypes.TabSetType,,false,568,TabSetType,18
541045,TYPE_DECL,,,,"enum WindowManipulationType : VTInt
    {
        Invalid = 0,
        DeIconifyWindow = 1,
        IconifyWindow = 2,
        RefreshWindow = 7,
        ResizeWindowInCharacters = 8,
        ReportTextSizeInCharacters = 18
    }",5,terminal\adapter\DispatchTypes.hpp,Microsoft.Console.VirtualTerminal.DispatchTypes.WindowManipulationType,,false,573,WindowManipulationType,19
541074,TYPE_DECL,,,,"enum class CursorStyle : VTInt
    {
        UserDefault = 0, // Implemented as ""restore cursor to user default"".
        BlinkingBlock = 1,
        SteadyBlock = 2,
        BlinkingUnderline = 3,
        SteadyUnderline = 4,
        BlinkingBar = 5,
        SteadyBar = 6
    }",5,terminal\adapter\DispatchTypes.hpp,Microsoft.Console.VirtualTerminal.DispatchTypes.CursorStyle,,false,583,CursorStyle,20
541107,TYPE_DECL,,,,"enum class ReportingPermission : VTInt
    {
        Unsolicited = 0,
        Solicited = 1
    }",5,terminal\adapter\DispatchTypes.hpp,Microsoft.Console.VirtualTerminal.DispatchTypes.ReportingPermission,,false,594,ReportingPermission,21
541120,TYPE_DECL,,,,"enum class LineFeedType : VTInt
    {
        WithReturn,
        WithoutReturn,
        DependsOnMode
    }",5,terminal\adapter\DispatchTypes.hpp,Microsoft.Console.VirtualTerminal.DispatchTypes.LineFeedType,,false,600,LineFeedType,22
541124,TYPE_DECL,,,,"enum class DrcsEraseControl : VTInt
    {
        AllChars = 0,
        ReloadedChars = 1,
        AllRenditions = 2
    }",5,terminal\adapter\DispatchTypes.hpp,Microsoft.Console.VirtualTerminal.DispatchTypes.DrcsEraseControl,,false,607,DrcsEraseControl,23
541141,TYPE_DECL,,,,"enum class DrcsCellMatrix : VTInt
    {
        Default = 0,
        Invalid = 1,
        Size5x10 = 2,
        Size6x10 = 3,
        Size7x10 = 4
    }",5,terminal\adapter\DispatchTypes.hpp,Microsoft.Console.VirtualTerminal.DispatchTypes.DrcsCellMatrix,,false,614,DrcsCellMatrix,24
541166,TYPE_DECL,,,,"enum class DrcsFontSet : VTInt
    {
        Default = 0,
        Size80x24 = 1,
        Size132x24 = 2,
        Size80x36 = 11,
        Size132x36 = 12,
        Size80x48 = 21,
        Size132x48 = 22
    }",5,terminal\adapter\DispatchTypes.hpp,Microsoft.Console.VirtualTerminal.DispatchTypes.DrcsFontSet,,false,623,DrcsFontSet,25
541199,TYPE_DECL,,,,"enum class DrcsFontUsage : VTInt
    {
        Default = 0,
        Text = 1,
        FullCell = 2
    }",5,terminal\adapter\DispatchTypes.hpp,Microsoft.Console.VirtualTerminal.DispatchTypes.DrcsFontUsage,,false,634,DrcsFontUsage,26
541216,TYPE_DECL,,,,"enum class DrcsCharsetSize : VTInt
    {
        Size94 = 0,
        Size96 = 1
    }",5,terminal\adapter\DispatchTypes.hpp,Microsoft.Console.VirtualTerminal.DispatchTypes.DrcsCharsetSize,,false,641,DrcsCharsetSize,27
541229,TYPE_DECL,,,,"enum class MacroDeleteControl : VTInt
    {
        DeleteId = 0,
        DeleteAll = 1
    }",5,terminal\adapter\DispatchTypes.hpp,Microsoft.Console.VirtualTerminal.DispatchTypes.MacroDeleteControl,,false,647,MacroDeleteControl,28
541242,TYPE_DECL,,,,"enum class MacroEncoding : VTInt
    {
        Text = 0,
        HexPair = 1
    }",5,terminal\adapter\DispatchTypes.hpp,Microsoft.Console.VirtualTerminal.DispatchTypes.MacroEncoding,,false,653,MacroEncoding,29
541255,TYPE_DECL,,,,"enum class ReportFormat : VTInt
    {
        TerminalStateReport = 1,
        ColorTableReport = 2
    }",5,terminal\adapter\DispatchTypes.hpp,Microsoft.Console.VirtualTerminal.DispatchTypes.ReportFormat,,false,659,ReportFormat,30
541268,TYPE_DECL,,,,"enum class PresentationReportFormat : VTInt
    {
        CursorInformationReport = 1,
        TabulationStopReport = 2
    }",5,terminal\adapter\DispatchTypes.hpp,Microsoft.Console.VirtualTerminal.DispatchTypes.PresentationReportFormat,,false,665,PresentationReportFormat,31
541333,TYPE_DECL,,terminal\adapter\FontBuffer.cpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\adapter\FontBuffer.cpp,terminal\adapter\FontBuffer.cpp:<global>,,false,1,<global>,3
542632,TYPE_DECL,,terminal\adapter\FontBuffer.hpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\adapter\FontBuffer.hpp,terminal\adapter\FontBuffer.hpp:<global>,,false,1,<global>,2
542638,TYPE_DECL,,,,"class FontBuffer
    {
    public:
        FontBuffer() noexcept;
        ~FontBuffer() = default;
        bool SetEraseControl(const DispatchTypes::DrcsEraseControl eraseControl) noexcept;
        bool SetAttributes(const DispatchTypes::DrcsCellMatrix cellMatrix,
                           const VTParameter cellHeight,
                           const DispatchTypes::DrcsFontSet fontSet,
                           const DispatchTypes::DrcsFontUsage fontUsage) noexcept;
        bool SetStartChar(const VTParameter startChar,
                          const DispatchTypes::DrcsCharsetSize charsetSize) noexcept;
        void AddSixelData(const wchar_t ch);
        bool FinalizeSixelData();

        std::span<const uint16_t> GetBitPattern() const noexcept;
        til::size GetCellSize() const noexcept;
        size_t GetTextCenteringHint() const noexcept;
        VTID GetDesignation() const noexcept;

    private:
        static constexpr VTInt MAX_WIDTH = 16;
        static constexpr VT...",5,terminal\adapter\FontBuffer.hpp,Microsoft.Console.VirtualTerminal.FontBuffer,,false,18,FontBuffer,1
542766,TYPE_DECL,ANY,,,"using buffer_type = std::array<uint16_t, MAX_HEIGHT * MAX_CHARS>;",9,terminal\adapter\FontBuffer.hpp,buffer_type,,false,88,buffer_type,55
542799,TYPE_DECL,,terminal\adapter\IInteractDispatch.hpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\adapter\IInteractDispatch.hpp,terminal\adapter\IInteractDispatch.hpp:<global>,,false,1,<global>,3
542805,TYPE_DECL,,,,"class IInteractDispatch
    {
    public:
#pragma warning(push)
#pragma warning(disable : 26432) // suppress rule of 5 violation on interface because tampering with this is fraught with peril
        virtual ~IInteractDispatch() = default;
#pragma warning(pop)

        virtual bool WriteInput(const std::span<const INPUT_RECORD>& inputEvents) = 0;

        virtual bool WriteCtrlKey(const INPUT_RECORD& event) = 0;

        virtual bool WriteString(const std::wstring_view string) = 0;

        virtual bool WindowManipulation(const DispatchTypes::WindowManipulationType function,
                                        const VTParameter parameter1,
                                        const VTParameter parameter2) = 0;

        virtual bool MoveCursor(const VTInt row,
                                const VTInt col) = 0;

        virtual bool IsVtInputEnabled() const = 0;

        virtual bool FocusChanged(const bool focused) const = 0;
    }",5,terminal\adapter\IInteractDispatch.hpp,Microsoft.Console.VirtualTerminal.IInteractDispatch,,false,23,IInteractDispatch,1
542853,TYPE_DECL,,terminal\adapter\ITermDispatch.hpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\adapter\ITermDispatch.hpp,terminal\adapter\ITermDispatch.hpp:<global>,,false,1,<global>,3
542859,TYPE_DECL,,,,class ITermDispatch,5,terminal\adapter\ITermDispatch.hpp,Microsoft.Console.VirtualTerminal.ITermDispatch,,false,20,ITermDispatch,1
542860,TYPE_DECL,,,,"class Microsoft::Console::VirtualTerminal::ITermDispatch
{
public:
    using StringHandler = std::function<bool(const wchar_t)>;

#pragma warning(push)
#pragma warning(disable : 26432) // suppress rule of 5 violation on interface because tampering with this is fraught with peril
    virtual ~ITermDispatch() = 0;

    virtual void Print(const wchar_t wchPrintable) = 0;
    virtual void PrintString(const std::wstring_view string) = 0;

    virtual bool CursorUp(const VTInt distance) = 0; // CUU
    virtual bool CursorDown(const VTInt distance) = 0; // CUD
    virtual bool CursorForward(const VTInt distance) = 0; // CUF
    virtual bool CursorBackward(const VTInt distance) = 0; // CUB, BS
    virtual bool CursorNextLine(const VTInt distance) = 0; // CNL
    virtual bool CursorPrevLine(const VTInt distance) = 0; // CPL
    virtual bool CursorHorizontalPositionAbsolute(const VTInt column) = 0; // HPA, CHA
    virtual bool VerticalLinePositionAbsolute(const VTInt line) = 0; // VPA
    vir...",1,terminal\adapter\ITermDispatch.hpp,ITermDispatch,,false,23,ITermDispatch,2
542861,TYPE_DECL,ANY,,,using StringHandler = std::function<bool(const wchar_t)>;,5,terminal\adapter\ITermDispatch.hpp,StringHandler,,false,26,StringHandler,1
543409,TYPE_DECL,,terminal\adapter\ITerminalApi.hpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\adapter\ITerminalApi.hpp,terminal\adapter\ITerminalApi.hpp:<global>,,false,1,<global>,8
543415,TYPE_DECL,,,,"class ITerminalApi
    {
        using RenderSettings = Microsoft::Console::Render::RenderSettings;

    public:
        virtual ~ITerminalApi() = default;
        ITerminalApi() = default;
        ITerminalApi(const ITerminalApi&) = delete;
        ITerminalApi(ITerminalApi&&) = delete;
        ITerminalApi& operator=(const ITerminalApi&) = delete;
        ITerminalApi& operator=(ITerminalApi&&) = delete;

        virtual void ReturnResponse(const std::wstring_view response) = 0;

        virtual StateMachine& GetStateMachine() = 0;
        virtual TextBuffer& GetTextBuffer() = 0;
        virtual til::rect GetViewport() const = 0;
        virtual void SetViewportPosition(const til::point position) = 0;

        virtual bool IsVtInputEnabled() const = 0;

        virtual void SetTextAttributes(const TextAttribute& attrs) = 0;

        enum class Mode : size_t
        {
            AutoWrap,
            LineFeed,
            BracketedPaste
        };

        virtual void SetSystemMo...",5,terminal\adapter\ITerminalApi.hpp,Microsoft.Console.VirtualTerminal.ITerminalApi,,false,28,ITerminalApi,1
543416,TYPE_DECL,ANY,,,using RenderSettings = Microsoft::Console::Render::RenderSettings;,9,terminal\adapter\ITerminalApi.hpp,RenderSettings,,false,30,RenderSettings,1
543476,TYPE_DECL,,,,"enum class Mode : size_t
        {
            AutoWrap,
            LineFeed,
            BracketedPaste
        }",9,terminal\adapter\ITerminalApi.hpp,Microsoft.Console.VirtualTerminal.ITerminalApi.Mode,,false,51,Mode,15
543608,TYPE_DECL,,terminal\adapter\InteractDispatch.cpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\adapter\InteractDispatch.cpp,terminal\adapter\InteractDispatch.cpp:<global>,,false,1,<global>,7
544009,TYPE_DECL,,terminal\adapter\InteractDispatch.hpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\adapter\InteractDispatch.hpp,terminal\adapter\InteractDispatch.hpp:<global>,,false,1,<global>,4
544015,TYPE_DECL,,,,"class InteractDispatch : public IInteractDispatch
    {
    public:
        InteractDispatch();

        bool WriteInput(const std::span<const INPUT_RECORD>& inputEvents) override;
        bool WriteCtrlKey(const INPUT_RECORD& event) override;
        bool WriteString(const std::wstring_view string) override;
        bool WindowManipulation(const DispatchTypes::WindowManipulationType function,
                                const VTParameter parameter1,
                                const VTParameter parameter2) override; // DTTERM_WindowManipulation
        bool MoveCursor(const VTInt row, const VTInt col) override;

        bool IsVtInputEnabled() const override;

        bool FocusChanged(const bool focused) const override;

    private:
        ConhostInternalGetSet _api;
    }",5,terminal\adapter\InteractDispatch.hpp,Microsoft.Console.VirtualTerminal.InteractDispatch,IInteractDispatch,false,23,InteractDispatch,1
544073,TYPE_DECL,,terminal\adapter\MacroBuffer.cpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\adapter\MacroBuffer.cpp,terminal\adapter\MacroBuffer.cpp:<global>,,false,1,<global>,5
544673,TYPE_DECL,,terminal\adapter\MacroBuffer.hpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\adapter\MacroBuffer.hpp,terminal\adapter\MacroBuffer.hpp:<global>,,false,1,<global>,5
544679,TYPE_DECL,,,,class StateMachine,5,terminal\adapter\MacroBuffer.hpp,Microsoft.Console.VirtualTerminal.StateMachine,,false,26,StateMachine,1
544680,TYPE_DECL,,,,"class MacroBuffer
    {
    public:
        // The original DEC terminals only supported 6K of memory, which is
        // probably a bit low for modern usage. But we also don't want to make
        // this value too large, otherwise it could be used in a denial-of-
        // service attack. So for now this is probably a sufficient limit, but
        // we may need to increase it in the future if we intend to support
        // macros containing sixel sequences.
        static constexpr size_t MAX_SPACE = 0x40000;

        MacroBuffer() = default;
        ~MacroBuffer() = default;

        size_t GetSpaceAvailable() const noexcept;
        uint16_t CalculateChecksum() const noexcept;
        void InvokeMacro(const size_t macroId, StateMachine& stateMachine);
        void ClearMacrosIfInUse();
        bool InitParser(const size_t macroId, const DispatchTypes::MacroDeleteControl deleteControl, const DispatchTypes::MacroEncoding encoding);
        bool ParseDefinition(const wchar_t ch...",5,terminal\adapter\MacroBuffer.hpp,Microsoft.Console.VirtualTerminal.MacroBuffer,,false,28,MacroBuffer,2
544743,TYPE_DECL,,,,"enum class State
        {
            ExpectingText,
            ExpectingHexDigit,
            ExpectingSecondHexDigit,
            ExpectingRepeatCount
        }",9,terminal\adapter\MacroBuffer.hpp,Microsoft.Console.VirtualTerminal.MacroBuffer.State,,false,56,State,15
544758,TYPE_DECL,,,,friend class AdapterTest,9,terminal\adapter\MacroBuffer.hpp,Microsoft.Console.VirtualTerminal.MacroBuffer.AdapterTest,,false,76,AdapterTest,26
544823,TYPE_DECL,,terminal\adapter\adaptDispatch.cpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\adapter\adaptDispatch.cpp,terminal\adapter\adaptDispatch.cpp:<global>,,false,1,<global>,9
557354,TYPE_DECL,,terminal\adapter\adaptDispatch.hpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\adapter\adaptDispatch.hpp,terminal\adapter\adaptDispatch.hpp:<global>,,false,1,<global>,8
557360,TYPE_DECL,,,,"class AdaptDispatch : public ITermDispatch
    {
        using Renderer = Microsoft::Console::Render::Renderer;
        using RenderSettings = Microsoft::Console::Render::RenderSettings;

    public:
        AdaptDispatch(ITerminalApi& api, Renderer& renderer, RenderSettings& renderSettings, TerminalInput& terminalInput);

        void Print(const wchar_t wchPrintable) override;
        void PrintString(const std::wstring_view string) override;

        bool CursorUp(const VTInt distance) override; // CUU
        bool CursorDown(const VTInt distance) override; // CUD
        bool CursorForward(const VTInt distance) override; // CUF
        bool CursorBackward(const VTInt distance) override; // CUB, BS
        bool CursorNextLine(const VTInt distance) override; // CNL
        bool CursorPrevLine(const VTInt distance) override; // CPL
        bool CursorHorizontalPositionAbsolute(const VTInt column) override; // HPA, CHA
        bool VerticalLinePositionAbsolute(const VTInt line) over...",5,terminal\adapter\adaptDispatch.hpp,Microsoft.Console.VirtualTerminal.AdaptDispatch,ITermDispatch,false,32,AdaptDispatch,1
557361,TYPE_DECL,ANY,,,using Renderer = Microsoft::Console::Render::Renderer;,9,terminal\adapter\adaptDispatch.hpp,Renderer,,false,34,Renderer,1
557362,TYPE_DECL,ANY,,,using RenderSettings = Microsoft::Console::Render::RenderSettings;,9,terminal\adapter\adaptDispatch.hpp,RenderSettings,,false,35,RenderSettings,2
557894,TYPE_DECL,,,,"enum class Mode
        {
            InsertReplace,
            Origin,
            Column,
            AllowDECCOLM,
            AllowDECSLRM,
            EraseColor,
            RectangularChangeExtent
        }",9,terminal\adapter\adaptDispatch.hpp,Microsoft.Console.VirtualTerminal.AdaptDispatch.Mode,,false,169,Mode,102
557902,TYPE_DECL,,,,"enum class ScrollDirection
        {
            Up,
            Down
        }",9,terminal\adapter\adaptDispatch.hpp,Microsoft.Console.VirtualTerminal.AdaptDispatch.ScrollDirection,,false,179,ScrollDirection,103
557905,TYPE_DECL,,,,"struct CursorState
        {
            VTInt Row = 1;
            VTInt Column = 1;
            bool IsDelayedEOLWrap = false;
            bool IsOriginModeRelative = false;
            TextAttribute Attributes = {};
            TerminalOutput TermOutput = {};
            bool C1ControlsAccepted = false;
            unsigned int CodePage = 0;
        }",9,terminal\adapter\adaptDispatch.hpp,Microsoft.Console.VirtualTerminal.AdaptDispatch.CursorState,,false,184,CursorState,104
557942,TYPE_DECL,,,,"struct Offset
        {
            VTInt Value;
            bool IsAbsolute;
            // VT origin is at 1,1 so we need to subtract 1 from absolute positions.
            static constexpr Offset Absolute(const VTInt value) { return { value - 1, true }; };
            static constexpr Offset Forward(const VTInt value) { return { value, false }; };
            static constexpr Offset Backward(const VTInt value) { return { -value, false }; };
            static constexpr Offset Unchanged() { return Forward(0); };
        }",9,terminal\adapter\adaptDispatch.hpp,Microsoft.Console.VirtualTerminal.AdaptDispatch.Offset,,false,195,Offset,105
557970,TYPE_DECL,,,,"struct ChangeOps
        {
            CharacterAttributes andAttrMask = CharacterAttributes::All;
            CharacterAttributes xorAttrMask = CharacterAttributes::Normal;
            std::optional<TextColor> foreground;
            std::optional<TextColor> background;
            std::optional<TextColor> underlineColor;
        }",9,terminal\adapter\adaptDispatch.hpp,Microsoft.Console.VirtualTerminal.AdaptDispatch.ChangeOps,,false,205,ChangeOps,106
558283,TYPE_DECL,,,,friend class AdapterTest,9,terminal\adapter\adaptDispatch.hpp,Microsoft.Console.VirtualTerminal.AdaptDispatch.AdapterTest,,false,317,AdapterTest,174
558329,TYPE_DECL,,terminal\adapter\adaptDispatchGraphics.cpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\adapter\adaptDispatchGraphics.cpp,terminal\adapter\adaptDispatchGraphics.cpp:<global>,,false,1,<global>,5
559521,TYPE_DECL,,terminal\adapter\charsets.hpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\adapter\charsets.hpp,terminal\adapter\charsets.hpp:<global>,,false,1,<global>,1
559527,TYPE_DECL,"Microsoft.Console.VirtualTerminal.CharSet<wchar_t,size_t>",,,"class CharSet
    {
    public:
        constexpr CharSet(const std::initializer_list<std::pair<wchar_t, wchar_t>> replacements)
        {
            for (auto i = L'\0'; i < _translationTable.size(); i++)
                _translationTable.at(i) = BaseChar + i;
            for (auto replacement : replacements)
                _translationTable.at(replacement.first - BaseChar) = replacement.second;
        }
        constexpr operator const std::wstring_view() const
        {
            return { _translationTable.data(), _translationTable.size() };
        }
        constexpr bool operator==(const std::wstring_view rhs) const
        {
            return _translationTable.data() == rhs.data();
        }

    private:
        std::array<wchar_t, Size> _translationTable = {};
    }",5,terminal\adapter\charsets.hpp,Microsoft.Console.VirtualTerminal.CharSet,,false,17,CharSet,1
559610,TYPE_DECL,ANY,,,"typedef CharSet<L'\x20', 95> AsciiBasedCharSet;",34,terminal\adapter\charsets.hpp,AsciiBasedCharSet,,false,51,AsciiBasedCharSet,3
559611,TYPE_DECL,ANY,,,"typedef CharSet<L'\xa0', 95> Latin1BasedCharSet94;",34,terminal\adapter\charsets.hpp,Latin1BasedCharSet94,,false,52,Latin1BasedCharSet94,4
559612,TYPE_DECL,ANY,,,"typedef CharSet<L'\xa0', 96> Latin1BasedCharSet96;",34,terminal\adapter\charsets.hpp,Latin1BasedCharSet96,,false,53,Latin1BasedCharSet96,5
562381,TYPE_DECL,,terminal\adapter\precomp.cpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\adapter\precomp.cpp,terminal\adapter\precomp.cpp:<global>,,false,1,<global>,2
562400,TYPE_DECL,,terminal\adapter\precomp.hpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\adapter\precomp.hpp,terminal\adapter\precomp.hpp:<global>,,false,1,<global>,8
562409,TYPE_DECL,,terminal\adapter\telemetry.cpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\adapter\telemetry.cpp,terminal\adapter\telemetry.cpp:<global>,,false,1,<global>,3
562422,TYPE_DECL,,terminal\adapter\telemetry.hpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\adapter\telemetry.hpp,terminal\adapter\telemetry.hpp:<global>,,false,1,<global>,5
562430,TYPE_DECL,,terminal\adapter\termDispatch.hpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\adapter\termDispatch.hpp,terminal\adapter\termDispatch.hpp:<global>,,false,1,<global>,2
562436,TYPE_DECL,,,,class TermDispatch,5,terminal\adapter\termDispatch.hpp,Microsoft.Console.VirtualTerminal.TermDispatch,,false,17,TermDispatch,1
562437,TYPE_DECL,,,,"class Microsoft::Console::VirtualTerminal::TermDispatch : public Microsoft::Console::VirtualTerminal::ITermDispatch
{
public:
    void Print(const wchar_t wchPrintable) override = 0;
    void PrintString(const std::wstring_view string) override = 0;

    bool CursorUp(const VTInt /*distance*/) override { return false; } // CUU
    bool CursorDown(const VTInt /*distance*/) override { return false; } // CUD
    bool CursorForward(const VTInt /*distance*/) override { return false; } // CUF
    bool CursorBackward(const VTInt /*distance*/) override { return false; } // CUB, BS
    bool CursorNextLine(const VTInt /*distance*/) override { return false; } // CNL
    bool CursorPrevLine(const VTInt /*distance*/) override { return false; } // CPL
    bool CursorHorizontalPositionAbsolute(const VTInt /*column*/) override { return false; } // HPA, CHA
    bool VerticalLinePositionAbsolute(const VTInt /*line*/) override { return false; } // VPA
    bool HorizontalPositionRelative(const VTInt /*...",1,terminal\adapter\termDispatch.hpp,TermDispatch,Microsoft.Console.VirtualTerminal.ITermDispatch,false,22,TermDispatch,2
563163,TYPE_DECL,,terminal\adapter\terminalOutput.cpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\adapter\terminalOutput.cpp,terminal\adapter\terminalOutput.cpp:<global>,,false,1,<global>,5
563965,TYPE_DECL,,terminal\adapter\terminalOutput.hpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\adapter\terminalOutput.hpp,terminal\adapter\terminalOutput.hpp:<global>,,false,1,<global>,2
563978,TYPE_DECL,,terminal\adapter\tracing.cpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\adapter\tracing.cpp,terminal\adapter\tracing.cpp:<global>,,false,1,<global>,3
563985,TYPE_DECL,,terminal\adapter\tracing.hpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\adapter\tracing.hpp,terminal\adapter\tracing.hpp:<global>,,false,1,<global>,2
563996,TYPE_DECL,,terminal\adapter\ut_adapter\MouseInputTest.cpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\adapter\ut_adapter\MouseInputTest.cpp,terminal\adapter\ut_adapter\MouseInputTest.cpp:<global>,,false,1,<global>,4
564002,TYPE_DECL,,,,class MouseInputTest,13,terminal\adapter\ut_adapter\MouseInputTest.cpp,Microsoft.Console.VirtualTerminal.MouseInputTest,,false,19,MouseInputTest,1
564515,TYPE_DECL,,terminal\adapter\ut_adapter\WexHelpers.hpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\adapter\ut_adapter\WexHelpers.hpp,terminal\adapter\ut_adapter\WexHelpers.hpp:<global>,,false,1,<global>,1
564520,TYPE_DECL,WEX.TestExecution.VerifyOutputTraits<til.inclusive_rect><>,,,"class VerifyOutputTraits<til::inclusive_rect>
        {
        public:
            static WEX::Common::NoThrowString ToString(const til::inclusive_rect& sr)
            {
                return WEX::Common::NoThrowString().Format(L""(L:%d, R:%d, T:%d, B:%d)"", sr.left, sr.right, sr.top, sr.bottom);
            }
        }",9,terminal\adapter\ut_adapter\WexHelpers.hpp,WEX.TestExecution.VerifyOutputTraits<til.inclusive_rect>,,false,9,VerifyOutputTraits<til::inclusive_rect>,1
564549,TYPE_DECL,"WEX.TestExecution.VerifyCompareTraits<til.inclusive_rect,til.inclusive_rect><>",,,"class VerifyCompareTraits<til::inclusive_rect, til::inclusive_rect>
        {
        public:
            static bool AreEqual(const til::inclusive_rect& expected, const til::inclusive_rect& actual)
            {
                return expected.left == actual.left &&
                       expected.right == actual.right &&
                       expected.top == actual.top &&
                       expected.bottom == actual.bottom;
            }

            static bool AreSame(const til::inclusive_rect& expected, const til::inclusive_rect& actual)
            {
                return &expected == &actual;
            }

            static bool IsLessThan(const til::inclusive_rect& /*expectedLess*/, const til::inclusive_rect& /*expectedGreater*/)
            {
                VERIFY_FAIL(L""Less than is invalid for til::inclusive_rect comparisons."");
                return false;
            }

            static bool IsGreaterThan(const til::inclusive_rect& /*expectedGreater*/, const...",9,terminal\adapter\ut_adapter\WexHelpers.hpp,"WEX.TestExecution.VerifyCompareTraits<til.inclusive_rect,til.inclusive_rect>",,false,19,"VerifyCompareTraits<til::inclusive_rect,til::inclusive_rect>",2
564649,TYPE_DECL,WEX.TestExecution.VerifyOutputTraits<til.point><>,,,"class VerifyOutputTraits<til::point>
        {
        public:
            static WEX::Common::NoThrowString ToString(const til::point coord)
            {
                return WEX::Common::NoThrowString().Format(L""(X:%d, Y:%d)"", coord.x, coord.y);
            }
        }",9,terminal\adapter\ut_adapter\WexHelpers.hpp,WEX.TestExecution.VerifyOutputTraits<til.point>,,false,54,VerifyOutputTraits<til::point>,3
564672,TYPE_DECL,"WEX.TestExecution.VerifyCompareTraits<til.point,til.point><>",,,"class VerifyCompareTraits<til::point, til::point>
        {
        public:
            static bool AreEqual(expected, const til::point actual)
            {
                return expected == actual;
            }

            static bool AreSame(const til::point expected, const til::point actual)
            {
                return &expected == &actual;
            }

            static bool IsLessThan(const til::point expectedLess, const til::point expectedGreater)
            {
                // less is on a line above greater (Y values less than)
                return (expectedLess.y < expectedGreater.y) ||
                       // or on the same lines and less is left of greater (X values less than)
                       ((expectedLess.y == expectedGreater.y) && (expectedLess.x < expectedGreater.x));
            }

            static bool IsGreaterThan(const til::point expectedGreater, const til::point expectedLess)
            {
                // greater is on a line be...",9,terminal\adapter\ut_adapter\WexHelpers.hpp,"WEX.TestExecution.VerifyCompareTraits<til.point,til.point>",,false,64,"VerifyCompareTraits<til::point,til::point>",4
564772,TYPE_DECL,WEX.TestExecution.VerifyOutputTraits<CONSOLE_CURSOR_INFO><>,,,"class VerifyOutputTraits<CONSOLE_CURSOR_INFO>
        {
        public:
            static WEX::Common::NoThrowString ToString(const CONSOLE_CURSOR_INFO& cci)
            {
                return WEX::Common::NoThrowString().Format(L""(Vis:%s, Size:%d)"", cci.bVisible ? L""True"" : L""False"", cci.dwSize);
            }
        }",9,terminal\adapter\ut_adapter\WexHelpers.hpp,WEX.TestExecution.VerifyOutputTraits<CONSOLE_CURSOR_INFO>,,false,100,VerifyOutputTraits<CONSOLE_CURSOR_INFO>,5
564798,TYPE_DECL,"WEX.TestExecution.VerifyCompareTraits<CONSOLE_CURSOR_INFO,CONSOLE_CURSOR_INFO><>",,,"class VerifyCompareTraits<CONSOLE_CURSOR_INFO, CONSOLE_CURSOR_INFO>
        {
        public:
            static bool AreEqual(const CONSOLE_CURSOR_INFO& expected, const CONSOLE_CURSOR_INFO& actual)
            {
                return expected.bVisible == actual.bVisible &&
                       expected.dwSize == actual.dwSize;
            }

            static bool AreSame(const CONSOLE_CURSOR_INFO& expected, const CONSOLE_CURSOR_INFO& actual)
            {
                return &expected == &actual;
            }

            static bool IsLessThan(const CONSOLE_CURSOR_INFO& /*expectedLess*/, const CONSOLE_CURSOR_INFO& /*expectedGreater*/)
            {
                VERIFY_FAIL(L""Less than is invalid for CONSOLE_CURSOR_INFO comparisons."");
                return false;
            }

            static bool IsGreaterThan(const CONSOLE_CURSOR_INFO& /*expectedGreater*/,
                                      const CONSOLE_CURSOR_INFO& /*expectedLess*/)
            {
          ...",9,terminal\adapter\ut_adapter\WexHelpers.hpp,"WEX.TestExecution.VerifyCompareTraits<CONSOLE_CURSOR_INFO,CONSOLE_CURSOR_INFO>",,false,110,"VerifyCompareTraits<CONSOLE_CURSOR_INFO,CONSOLE_CURSOR_INFO>",6
564870,TYPE_DECL,WEX.TestExecution.VerifyOutputTraits<CONSOLE_SCREEN_BUFFER_INFOEX><>,,,"class VerifyOutputTraits<CONSOLE_SCREEN_BUFFER_INFOEX>
        {
        public:
            static WEX::Common::NoThrowString ToString(const CONSOLE_SCREEN_BUFFER_INFOEX& sbiex)
            {
                return WEX::Common::NoThrowString().Format(L""(Full:%s Attrs:0x%x PopupAttrs:0x%x CursorPos:%s Size:%s MaxSize:%s Viewport:%s)\r\nColors:\r\n(0:0x%x)\r\n(1:0x%x)\r\n(2:0x%x)\r\n(3:0x%x)\r\n(4:0x%x)\r\n(5:0x%x)\r\n(6:0x%x)\r\n(7:0x%x)\r\n(8:0x%x)\r\n(9:0x%x)\r\n(A:0x%x)\r\n(B:0x%x)\r\n(C:0x%x)\r\n(D:0x%x)\r\n(E:0x%x)\r\n(F:0x%x)\r\n"",
                                                           sbiex.bFullscreenSupported ? L""True"" : L""False"",
                                                           sbiex.wAttributes,
                                                           sbiex.wPopupAttributes,
                                                           VerifyOutputTraits<til::point>::ToString(sbiex.dwCursorPosition).ToCStrWithFallbackTo(L""Fail""),
                             ...",9,terminal\adapter\ut_adapter\WexHelpers.hpp,WEX.TestExecution.VerifyOutputTraits<CONSOLE_SCREEN_BUFFER_INFOEX>,,false,144,VerifyOutputTraits<CONSOLE_SCREEN_BUFFER_INFOEX>,7
565047,TYPE_DECL,"WEX.TestExecution.VerifyCompareTraits<CONSOLE_SCREEN_BUFFER_INFOEX,CONSOLE_SCREEN_BUFFER_INFOEX><>",,,"class VerifyCompareTraits<CONSOLE_SCREEN_BUFFER_INFOEX, CONSOLE_SCREEN_BUFFER_INFOEX>
        {
        public:
            static bool AreEqual(const CONSOLE_SCREEN_BUFFER_INFOEX& expected, const CONSOLE_SCREEN_BUFFER_INFOEX& actual)
            {
                return expected.bFullscreenSupported == actual.bFullscreenSupported &&
                       expected.wAttributes == actual.wAttributes &&
                       expected.wPopupAttributes == actual.wPopupAttributes &&
                       VerifyCompareTraits<til::point>::AreEqual(expected.dwCursorPosition, actual.dwCursorPosition) &&
                       VerifyCompareTraits<til::point>::AreEqual(expected.dwSize, actual.dwSize) &&
                       VerifyCompareTraits<til::point>::AreEqual(expected.dwMaximumWindowSize, actual.dwMaximumWindowSize) &&
                       VerifyCompareTraits<til::inclusive_rect>::AreEqual(expected.srWindow, actual.srWindow) &&
                       expected.ColorTable[0] == actua...",9,terminal\adapter\ut_adapter\WexHelpers.hpp,"WEX.TestExecution.VerifyCompareTraits<CONSOLE_SCREEN_BUFFER_INFOEX,CONSOLE_SCREEN_BUFFER_INFOEX>",,false,177,"VerifyCompareTraits<CONSOLE_SCREEN_BUFFER_INFOEX,CONSOLE_SCREEN_BUFFER_INFOEX>",8
565577,TYPE_DECL,WEX.TestExecution.VerifyOutputTraits<INPUT_RECORD><>,,,"class VerifyOutputTraits<INPUT_RECORD>
        {
        public:
            static WEX::Common::NoThrowString ToString(const INPUT_RECORD& ir)
            {
                SetVerifyOutput verifySettings(VerifyOutputSettings::LogOnlyFailures);
                WCHAR szBuf[1024];
                VERIFY_SUCCEEDED(StringCchCopy(szBuf, ARRAYSIZE(szBuf), L""(ev: ""));
                switch (ir.EventType)
                {
                case FOCUS_EVENT:
                {
                    WCHAR szFocus[512];
                    VERIFY_SUCCEEDED(StringCchPrintf(szFocus,
                                                     ARRAYSIZE(szFocus),
                                                     L""FOCUS set: %s)"",
                                                     ir.Event.FocusEvent.bSetFocus ? L""T"" : L""F""));
                    VERIFY_SUCCEEDED(StringCchCat(szBuf, ARRAYSIZE(szBuf), szFocus));
                    break;
                }

                case KEY_EVENT:
              ...",9,terminal\adapter\ut_adapter\WexHelpers.hpp,WEX.TestExecution.VerifyOutputTraits<INPUT_RECORD>,,false,255,VerifyOutputTraits<INPUT_RECORD>,9
565824,TYPE_DECL,"WEX.TestExecution.VerifyCompareTraits<INPUT_RECORD,INPUT_RECORD><>",,,"class VerifyCompareTraits<INPUT_RECORD, INPUT_RECORD>
        {
        public:
            static bool AreEqual(const INPUT_RECORD& expected, const INPUT_RECORD& actual)
            {
                bool fEqual = false;
                if (expected.EventType == actual.EventType)
                {
                    switch (expected.EventType)
                    {
                    case FOCUS_EVENT:
                    {
                        fEqual = expected.Event.FocusEvent.bSetFocus == actual.Event.FocusEvent.bSetFocus;
                        break;
                    }

                    case KEY_EVENT:
                    {
                        fEqual = (expected.Event.KeyEvent.bKeyDown == actual.Event.KeyEvent.bKeyDown &&
                                  expected.Event.KeyEvent.wRepeatCount == actual.Event.KeyEvent.wRepeatCount &&
                                  expected.Event.KeyEvent.wVirtualKeyCode == actual.Event.KeyEvent.wVirtualKeyCode &&
              ...",9,terminal\adapter\ut_adapter\WexHelpers.hpp,"WEX.TestExecution.VerifyCompareTraits<INPUT_RECORD,INPUT_RECORD>",,false,340,"VerifyCompareTraits<INPUT_RECORD,INPUT_RECORD>",10
566192,TYPE_DECL,,,,"class TestGetSet final : public ITerminalApi
{
public:
    void ReturnResponse(const std::wstring_view response) override
    {
        Log::Comment(L""ReturnResponse MOCK called..."");

        THROW_HR_IF(E_FAIL, !_returnResponseResult);

        if (_retainResponse)
        {
            _response += response;
        }
        else
        {
            _response = response;
        }
    }

    StateMachine& GetStateMachine() override
    {
        return *_stateMachine;
    }

    TextBuffer& GetTextBuffer() override
    {
        return *_textBuffer.get();
    }

    til::rect GetViewport() const override
    {
        return { _viewport.left, _viewport.top, _viewport.right, _viewport.bottom };
    }

    void SetViewportPosition(const til::point /*position*/) override
    {
        Log::Comment(L""SetViewportPosition MOCK called..."");
    }

    bool IsVtInputEnabled() const override
    {
        return false;
    }

    void SetTextAttributes(const TextAttribute& attrs)
    {...",1,terminal\adapter\ut_adapter\adapterTest.cpp,TestGetSet,ITerminalApi,false,60,TestGetSet,6
566212,TYPE_DECL,,terminal\adapter\ut_adapter\adapterTest.cpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\adapter\ut_adapter\adapterTest.cpp,terminal\adapter\ut_adapter\adapterTest.cpp:<global>,,false,1,<global>,7
566542,TYPE_DECL,,,,class AdapterTest,13,terminal\adapter\ut_adapter\adapterTest.cpp,Microsoft.Console.VirtualTerminal.AdapterTest,,false,22,AdapterTest,1
566543,TYPE_DECL,,,,class ConAdapterTestGetSet,13,terminal\adapter\ut_adapter\adapterTest.cpp,Microsoft.Console.VirtualTerminal.ConAdapterTestGetSet,,false,23,ConAdapterTestGetSet,2
566544,TYPE_DECL,,,,"enum class CursorY
{
    TOP,
    BOTTOM,
    YCENTER
}",1,terminal\adapter\ut_adapter\adapterTest.cpp,CursorY,,false,28,CursorY,2
566548,TYPE_DECL,,,,"enum class CursorX
{
    LEFT,
    RIGHT,
    XCENTER
}",1,terminal\adapter\ut_adapter\adapterTest.cpp,CursorX,,false,35,CursorX,3
566552,TYPE_DECL,,,,"enum class CursorDirection : Microsoft::Console::VirtualTerminal::VTInt
{
    UP = 0,
    DOWN = 1,
    RIGHT = 2,
    LEFT = 3,
    NEXTLINE = 4,
    PREVLINE = 5
}",1,terminal\adapter\ut_adapter\adapterTest.cpp,CursorDirection,,false,42,CursorDirection,4
566581,TYPE_DECL,,,,"enum class AbsolutePosition : Microsoft::Console::VirtualTerminal::VTInt
{
    CursorHorizontal = 0,
    VerticalLine = 1,
}",1,terminal\adapter\ut_adapter\adapterTest.cpp,AbsolutePosition,,false,52,AbsolutePosition,5
569126,TYPE_DECL,ANY,,,using FontSet = DispatchTypes::DrcsFontSet;,9,terminal\adapter\ut_adapter\adapterTest.cpp,FontSet,,false,2787,FontSet,1430
569127,TYPE_DECL,ANY,,,using FontUsage = DispatchTypes::DrcsFontUsage;,9,terminal\adapter\ut_adapter\adapterTest.cpp,FontUsage,,false,2788,FontUsage,1431
569782,TYPE_DECL,,terminal\adapter\ut_adapter\inputTest.cpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\adapter\ut_adapter\inputTest.cpp,terminal\adapter\ut_adapter\inputTest.cpp:<global>,,false,1,<global>,5
569788,TYPE_DECL,,,,class InputTest,13,terminal\adapter\ut_adapter\inputTest.cpp,Microsoft.Console.VirtualTerminal.InputTest,,false,20,InputTest,1
569789,TYPE_DECL,,,,"class Microsoft::Console::VirtualTerminal::InputTest
{
public:
    TEST_CLASS(InputTest);

    TEST_METHOD(TerminalInputTests);
    TEST_METHOD(TestFocusEvents);
    TEST_METHOD(TerminalInputModifierKeyTests);
    TEST_METHOD(TerminalInputNullKeyTests);
    TEST_METHOD(DifferentModifiersTest);
    TEST_METHOD(CtrlNumTest);
    TEST_METHOD(BackarrowKeyModeTest);
    TEST_METHOD(AutoRepeatModeTest);

    wchar_t GetModifierChar(const bool fShift, const bool fAlt, const bool fCtrl)
    {
        return L'1' + (fShift ? 1 : 0) + (fAlt ? 2 : 0) + (fCtrl ? 4 : 0);
    }

    bool ControlAndAltPressed(unsigned int uiKeystate)
    {
        return WI_IsAnyFlagSet(uiKeystate, LEFT_CTRL_PRESSED | RIGHT_CTRL_PRESSED) && WI_IsAnyFlagSet(uiKeystate, LEFT_ALT_PRESSED | RIGHT_ALT_PRESSED);
    }

    bool ControlOrAltPressed(unsigned int uiKeystate)
    {
        return WI_IsAnyFlagSet(uiKeystate, LEFT_CTRL_PRESSED | RIGHT_CTRL_PRESSED | LEFT_ALT_PRESSED | RIGHT_ALT_PRESSED);
    }

    bool Contr...",1,terminal\adapter\ut_adapter\inputTest.cpp,InputTest,,false,26,InputTest,2
572383,TYPE_DECL,,terminal\input\mouseInput.cpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\input\mouseInput.cpp,terminal\input\mouseInput.cpp:<global>,,false,1,<global>,5
573333,TYPE_DECL,,terminal\input\mouseInputState.cpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\input\mouseInputState.cpp,terminal\input\mouseInputState.cpp:<global>,,false,1,<global>,4
573358,TYPE_DECL,,terminal\input\precomp.cpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\input\precomp.cpp,terminal\input\precomp.cpp:<global>,,false,1,<global>,2
573367,TYPE_DECL,,terminal\input\precomp.hpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\input\precomp.hpp,terminal\input\precomp.hpp:<global>,,false,1,<global>,3
573384,TYPE_DECL,,terminal\input\terminalInput.cpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\input\terminalInput.cpp,terminal\input\terminalInput.cpp:<global>,,false,1,<global>,7
573387,TYPE_DECL,,,,"struct TermKeyMap
{
    const WORD vkey;
    const std::wstring_view sequence;
    const DWORD modifiers;

    constexpr TermKeyMap(WORD vkey, std::wstring_view sequence) noexcept :
        TermKeyMap(vkey, 0, sequence)
    {
    }

    constexpr TermKeyMap(const WORD vkey, const DWORD modifiers, std::wstring_view sequence) noexcept :
        vkey(vkey),
        sequence(sequence),
        modifiers(modifiers)
    {
    }
}",1,terminal\input\terminalInput.cpp,TermKeyMap,,false,15,TermKeyMap,1
575145,TYPE_DECL,,terminal\input\terminalInput.hpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\input\terminalInput.hpp,terminal\input\terminalInput.hpp:<global>,,false,1,<global>,1
575151,TYPE_DECL,,,,"class TerminalInput final
    {
    public:
        using StringType = std::wstring;
        using OutputType = std::optional<StringType>;

        struct MouseButtonState
        {
            bool isLeftButtonDown;
            bool isMiddleButtonDown;
            bool isRightButtonDown;
        };

        [[nodiscard]] static OutputType MakeUnhandled() noexcept;
        [[nodiscard]] static OutputType MakeOutput(const std::wstring_view& str);
        [[nodiscard]] OutputType HandleKey(const INPUT_RECORD& pInEvent);
        [[nodiscard]] OutputType HandleFocus(bool focused) const;
        [[nodiscard]] OutputType HandleMouse(til::point position, unsigned int button, short modifierKeyState, short delta, MouseButtonState state);

        enum class Mode : size_t
        {
            LineFeed,
            Ansi,
            AutoRepeat,
            Keypad,
            CursorKey,
            BackarrowKey,
            Win32,

            Utf8MouseEncoding,
            SgrMouseEncoding,
...",5,terminal\input\terminalInput.hpp,Microsoft.Console.VirtualTerminal.TerminalInput,,false,8,TerminalInput,1
575152,TYPE_DECL,ANY,,,using StringType = std::wstring;,9,terminal\input\terminalInput.hpp,StringType,,false,11,StringType,1
575153,TYPE_DECL,ANY,,,using OutputType = std::optional<StringType>;,9,terminal\input\terminalInput.hpp,OutputType,,false,12,OutputType,2
575154,TYPE_DECL,,,,"struct MouseButtonState
        {
            bool isLeftButtonDown;
            bool isMiddleButtonDown;
            bool isRightButtonDown;
        }",9,terminal\input\terminalInput.hpp,Microsoft.Console.VirtualTerminal.TerminalInput.MouseButtonState,,false,14,MouseButtonState,3
575186,TYPE_DECL,,,,"enum class Mode : size_t
        {
            LineFeed,
            Ansi,
            AutoRepeat,
            Keypad,
            CursorKey,
            BackarrowKey,
            Win32,

            Utf8MouseEncoding,
            SgrMouseEncoding,

            DefaultMouseTracking,
            ButtonEventMouseTracking,
            AnyEventMouseTracking,

            FocusEvent,

            AlternateScroll
        }",9,terminal\input\terminalInput.hpp,Microsoft.Console.VirtualTerminal.TerminalInput.Mode,,false,27,Mode,9
575263,TYPE_DECL,,,,"struct MouseInputState
        {
            bool inAlternateBuffer{ false };
            til::point lastPos{ -1, -1 };
            unsigned int lastButton{ 0 };
            int accumulatedDelta{ 0 };
        }",9,terminal\input\terminalInput.hpp,Microsoft.Console.VirtualTerminal.TerminalInput.MouseInputState,,false,83,MouseInputState,26
575351,TYPE_DECL,,terminal\parser\IStateMachineEngine.hpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\parser\IStateMachineEngine.hpp,terminal\parser\IStateMachineEngine.hpp:<global>,,false,1,<global>,2
575357,TYPE_DECL,,,,"class IStateMachineEngine
    {
    public:
        using StringHandler = std::function<bool(const wchar_t)>;

        virtual ~IStateMachineEngine() = 0;
        IStateMachineEngine(const IStateMachineEngine&) = default;
        IStateMachineEngine(IStateMachineEngine&&) = default;
        IStateMachineEngine& operator=(const IStateMachineEngine&) = default;
        IStateMachineEngine& operator=(IStateMachineEngine&&) = default;

        virtual bool EncounteredWin32InputModeSequence() const noexcept = 0;

        virtual bool ActionExecute(const wchar_t wch) = 0;
        virtual bool ActionExecuteFromEscape(const wchar_t wch) = 0;
        virtual bool ActionPrint(const wchar_t wch) = 0;
        virtual bool ActionPrintString(const std::wstring_view string) = 0;

        virtual bool ActionPassThroughString(const std::wstring_view string) = 0;

        virtual bool ActionEscDispatch(const VTID id) = 0;
        virtual bool ActionVt52EscDispatch(const VTID id, const VTParameters pa...",5,terminal\parser\IStateMachineEngine.hpp,Microsoft.Console.VirtualTerminal.IStateMachineEngine,,false,20,IStateMachineEngine,1
575358,TYPE_DECL,ANY,,,using StringHandler = std::function<bool(const wchar_t)>;,9,terminal\parser\IStateMachineEngine.hpp,StringHandler,,false,23,StringHandler,1
575478,TYPE_DECL,,terminal\parser\InputStateMachineEngine.cpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\parser\InputStateMachineEngine.cpp,terminal\parser\InputStateMachineEngine.cpp:<global>,,false,1,<global>,7
575481,TYPE_DECL,,,,"struct CsiToVkey
{
    CsiActionCodes action;
    short vkey;
}",1,terminal\parser\InputStateMachineEngine.cpp,CsiToVkey,,false,15,CsiToVkey,1
575560,TYPE_DECL,,,,"struct GenericToVkey
{
    GenericKeyIdentifiers identifier;
    short vkey;
}",1,terminal\parser\InputStateMachineEngine.cpp,GenericToVkey,,false,39,GenericToVkey,5
575663,TYPE_DECL,,,,"struct Ss3ToVkey
{
    Ss3ActionCodes action;
    short vkey;
}",1,terminal\parser\InputStateMachineEngine.cpp,Ss3ToVkey,,false,67,Ss3ToVkey,9
577727,TYPE_DECL,,terminal\parser\InputStateMachineEngine.hpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\parser\InputStateMachineEngine.hpp,terminal\parser\InputStateMachineEngine.hpp:<global>,,false,1,<global>,5
577769,TYPE_DECL,,,,"enum CsiActionCodes : uint64_t
    {
        ArrowUp = VTID(""A""),
        ArrowDown = VTID(""B""),
        ArrowRight = VTID(""C""),
        ArrowLeft = VTID(""D""),
        Home = VTID(""H""),
        End = VTID(""F""),
        FocusIn = VTID(""I""),
        FocusOut = VTID(""O""),
        MouseDown = VTID(""<M""),
        MouseUp = VTID(""<m""),
        Generic = VTID(""~""), // Used for a whole bunch of possible keys
        CSI_F1 = VTID(""P""),
        CSI_F2 = VTID(""Q""),
        CSI_F3 = VTID(""R""), // Both F3 and DSR are on R.
        // DSR_DeviceStatusReportResponse = VTID(""R""),
        CSI_F4 = VTID(""S""),
        DTTERM_WindowManipulation = VTID(""t""),
        CursorBackTab = VTID(""Z""),
        Win32KeyboardInput = VTID(""_"")
    }",5,terminal\parser\InputStateMachineEngine.hpp,Microsoft.Console.VirtualTerminal.CsiActionCodes,,false,52,CsiActionCodes,19
577864,TYPE_DECL,,,,"enum CsiMouseButtonCodes : unsigned short
    {
        Left = 0,
        Middle = 1,
        Right = 2,
        Released = 3,
        ScrollForward = 4,
        ScrollBack = 5,
    }",5,terminal\parser\InputStateMachineEngine.hpp,Microsoft.Console.VirtualTerminal.CsiMouseButtonCodes,,false,75,CsiMouseButtonCodes,20
577897,TYPE_DECL,,,,"enum CsiMouseModifierCodes : unsigned short
    {
        Shift = 4,
        Meta = 8,
        Ctrl = 16,
        Drag = 32,
    }",5,terminal\parser\InputStateMachineEngine.hpp,Microsoft.Console.VirtualTerminal.CsiMouseModifierCodes,,false,87,CsiMouseModifierCodes,23
577918,TYPE_DECL,,,,"enum class GenericKeyIdentifiers : size_t
    {
        GenericHome = 1,
        Insert = 2,
        Delete = 3,
        GenericEnd = 4,
        Prior = 5, //PgUp
        Next = 6, //PgDn
        F5 = 15,
        F6 = 17,
        F7 = 18,
        F8 = 19,
        F9 = 20,
        F10 = 21,
        F11 = 23,
        F12 = 24,
    }",5,terminal\parser\InputStateMachineEngine.hpp,Microsoft.Console.VirtualTerminal.GenericKeyIdentifiers,,false,96,GenericKeyIdentifiers,24
577979,TYPE_DECL,,,,"enum class Ss3ActionCodes : wchar_t
    {
        ArrowUp = L'A',
        ArrowDown = L'B',
        ArrowRight = L'C',
        ArrowLeft = L'D',
        Home = L'H',
        End = L'F',
        SS3_F1 = L'P',
        SS3_F2 = L'Q',
        SS3_F3 = L'R',
        SS3_F4 = L'S',
    }",5,terminal\parser\InputStateMachineEngine.hpp,Microsoft.Console.VirtualTerminal.Ss3ActionCodes,,false,114,Ss3ActionCodes,25
578024,TYPE_DECL,,,,"class InputStateMachineEngine : public IStateMachineEngine
    {
    public:
        InputStateMachineEngine(std::unique_ptr<IInteractDispatch> pDispatch);
        InputStateMachineEngine(std::unique_ptr<IInteractDispatch> pDispatch,
                                const bool lookingForDSR);

        bool EncounteredWin32InputModeSequence() const noexcept override;
        void SetLookingForDSR(const bool looking) noexcept;

        bool ActionExecute(const wchar_t wch) override;
        bool ActionExecuteFromEscape(const wchar_t wch) override;

        bool ActionPrint(const wchar_t wch) override;

        bool ActionPrintString(const std::wstring_view string) override;

        bool ActionPassThroughString(const std::wstring_view string) override;

        bool ActionEscDispatch(const VTID id) override;

        bool ActionVt52EscDispatch(const VTID id, const VTParameters parameters) noexcept override;

        bool ActionCsiDispatch(const VTID id, const VTParameters parameters) o...",5,terminal\parser\InputStateMachineEngine.hpp,Microsoft.Console.VirtualTerminal.InputStateMachineEngine,IStateMachineEngine,false,128,InputStateMachineEngine,26
578237,TYPE_DECL,,,,friend class InputEngineTest,9,terminal\parser\InputStateMachineEngine.hpp,Microsoft.Console.VirtualTerminal.InputStateMachineEngine.InputEngineTest,,false,217,InputEngineTest,45
578270,TYPE_DECL,,terminal\parser\OutputStateMachineEngine.cpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\parser\OutputStateMachineEngine.cpp,terminal\parser\OutputStateMachineEngine.cpp:<global>,,false,1,<global>,8
581777,TYPE_DECL,,terminal\parser\OutputStateMachineEngine.hpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\parser\OutputStateMachineEngine.hpp,terminal\parser\OutputStateMachineEngine.hpp:<global>,,false,1,<global>,4
581783,TYPE_DECL,,,,class VtEngine,5,terminal\parser\OutputStateMachineEngine.hpp,Microsoft.Console.Render.VtEngine,,false,20,VtEngine,1
581787,TYPE_DECL,,,,"class OutputStateMachineEngine : public IStateMachineEngine
    {
    public:
        static constexpr size_t MAX_URL_LENGTH = 2 * 1048576; // 2MB, like iTerm2

        OutputStateMachineEngine(std::unique_ptr<ITermDispatch> pDispatch);

        bool EncounteredWin32InputModeSequence() const noexcept override;

        bool ActionExecute(const wchar_t wch) override;
        bool ActionExecuteFromEscape(const wchar_t wch) override;

        bool ActionPrint(const wchar_t wch) override;

        bool ActionPrintString(const std::wstring_view string) override;

        bool ActionPassThroughString(const std::wstring_view string) override;

        bool ActionEscDispatch(const VTID id) override;

        bool ActionVt52EscDispatch(const VTID id, const VTParameters parameters) override;

        bool ActionCsiDispatch(const VTID id, const VTParameters parameters) override;

        StringHandler ActionDcsDispatch(const VTID id, const VTParameters parameters) override;

        bool Actio...",5,terminal\parser\OutputStateMachineEngine.hpp,Microsoft.Console.VirtualTerminal.OutputStateMachineEngine,IStateMachineEngine,false,25,OutputStateMachineEngine,1
581881,TYPE_DECL,,,,"enum EscActionCodes : uint64_t
        {
            DECBI_BackIndex = VTID(""6""),
            DECSC_CursorSave = VTID(""7""),
            DECRC_CursorRestore = VTID(""8""),
            DECFI_ForwardIndex = VTID(""9""),
            DECKPAM_KeypadApplicationMode = VTID(""=""),
            DECKPNM_KeypadNumericMode = VTID("">""),
            IND_Index = VTID(""D""),
            NEL_NextLine = VTID(""E""),
            HTS_HorizontalTabSet = VTID(""H""),
            RI_ReverseLineFeed = VTID(""M""),
            SS2_SingleShift = VTID(""N""),
            SS3_SingleShift = VTID(""O""),
            DECID_IdentifyDevice = VTID(""Z""),
            ST_StringTerminator = VTID(""\\""),
            RIS_ResetToInitialState = VTID(""c""),
            LS2_LockingShift = VTID(""n""),
            LS3_LockingShift = VTID(""o""),
            LS1R_LockingShift = VTID(""~""),
            LS2R_LockingShift = VTID(""}""),
            LS3R_LockingShift = VTID(""|""),
            DECAC1_AcceptC1Controls = VTID("" 7""),
            DECDHL_DoubleHeig...",9,terminal\parser\OutputStateMachineEngine.hpp,Microsoft.Console.VirtualTerminal.OutputStateMachineEngine.EscActionCodes,,false,73,EscActionCodes,23
582016,TYPE_DECL,,,,"enum CsiActionCodes : uint64_t
        {
            ICH_InsertCharacter = VTID(""@""),
            CUU_CursorUp = VTID(""A""),
            CUD_CursorDown = VTID(""B""),
            CUF_CursorForward = VTID(""C""),
            CUB_CursorBackward = VTID(""D""),
            CNL_CursorNextLine = VTID(""E""),
            CPL_CursorPrevLine = VTID(""F""),
            CHA_CursorHorizontalAbsolute = VTID(""G""),
            CUP_CursorPosition = VTID(""H""),
            CHT_CursorForwardTab = VTID(""I""),
            ED_EraseDisplay = VTID(""J""),
            DECSED_SelectiveEraseDisplay = VTID(""?J""),
            EL_EraseLine = VTID(""K""),
            DECSEL_SelectiveEraseLine = VTID(""?K""),
            IL_InsertLine = VTID(""L""),
            DL_DeleteLine = VTID(""M""),
            DCH_DeleteCharacter = VTID(""P""),
            SU_ScrollUp = VTID(""S""),
            SD_ScrollDown = VTID(""T""),
            DECST8C_SetTabEvery8Columns = VTID(""?W""),
            ECH_EraseCharacters = VTID(""X""),
            CBT_CursorBackTab ...",9,terminal\parser\OutputStateMachineEngine.hpp,Microsoft.Console.VirtualTerminal.OutputStateMachineEngine.CsiActionCodes,,false,103,CsiActionCodes,24
582361,TYPE_DECL,,,,"enum DcsActionCodes : uint64_t
        {
            DECDLD_DownloadDRCS = VTID(""{""),
            DECDMAC_DefineMacro = VTID(""!z""),
            DECRSTS_RestoreTerminalState = VTID(""$p""),
            DECRQSS_RequestSetting = VTID(""$q""),
            DECRSPS_RestorePresentationState = VTID(""$t""),
        }",9,terminal\parser\OutputStateMachineEngine.hpp,Microsoft.Console.VirtualTerminal.OutputStateMachineEngine.DcsActionCodes,,false,175,DcsActionCodes,25
582391,TYPE_DECL,,,,"enum Vt52ActionCodes : uint64_t
        {
            CursorUp = VTID(""A""),
            CursorDown = VTID(""B""),
            CursorRight = VTID(""C""),
            CursorLeft = VTID(""D""),
            EnterGraphicsMode = VTID(""F""),
            ExitGraphicsMode = VTID(""G""),
            CursorToHome = VTID(""H""),
            ReverseLineFeed = VTID(""I""),
            EraseToEndOfScreen = VTID(""J""),
            EraseToEndOfLine = VTID(""K""),
            DirectCursorAddress = VTID(""Y""),
            Identify = VTID(""Z""),
            EnterAlternateKeypadMode = VTID(""=""),
            ExitAlternateKeypadMode = VTID("">""),
            ExitVt52Mode = VTID(""<"")
        }",9,terminal\parser\OutputStateMachineEngine.hpp,Microsoft.Console.VirtualTerminal.OutputStateMachineEngine.Vt52ActionCodes,,false,184,Vt52ActionCodes,26
582471,TYPE_DECL,,,,"enum OscActionCodes : unsigned int
        {
            SetIconAndWindowTitle = 0,
            SetWindowIcon = 1,
            SetWindowTitle = 2,
            SetWindowProperty = 3, // Not implemented
            SetColor = 4,
            Hyperlink = 8,
            ConEmuAction = 9,
            SetForegroundColor = 10,
            SetBackgroundColor = 11,
            SetCursorColor = 12,
            SetClipboard = 52,
            ResetForegroundColor = 110, // Not implemented
            ResetBackgroundColor = 111, // Not implemented
            ResetCursorColor = 112,
            FinalTermAction = 133,
            VsCodeAction = 633,
            ITerm2Action = 1337,
        }",9,terminal\parser\OutputStateMachineEngine.hpp,Microsoft.Console.VirtualTerminal.OutputStateMachineEngine.OscActionCodes,,false,203,OscActionCodes,27
582603,TYPE_DECL,,terminal\parser\ascii.hpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\parser\ascii.hpp,terminal\parser\ascii.hpp:<global>,,false,1,<global>,1
582609,TYPE_DECL,,,,"enum AsciiChars : wchar_t
    {
        NUL = 0x0, // Null
        SOH = 0x1, // Start of Heading
        STX = 0x2, // Start of Text
        ETX = 0x3, // End of Text
        EOT = 0x4, // End of Transmission
        ENQ = 0x5, // Enquiry
        ACK = 0x6, // Acknowledge
        BEL = 0x7, // Bell
        BS = 0x8, // Backspace
        TAB = 0x9, // Horizontal Tab
        LF = 0xA, // Line Feed (new line)
        VT = 0xB, // Vertical Tab
        FF = 0xC, // Form Feed (new page)
        CR = 0xD, // Carriage Return
        SO = 0xE, // Shift Out
        SI = 0xF, // Shift In
        DLE = 0x10, // Data Link Escape
        DC1 = 0x11, // Device Control 1
        DC2 = 0x12, // Device Control 2
        DC3 = 0x13, // Device Control 3
        DC4 = 0x14, // Device Control 4
        NAK = 0x15, // Negative Acknowledge
        SYN = 0x16, // Synchronous Idle
        ETB = 0x17, // End of Transmission Block
        CAN = 0x18, // Cancel
        EM = 0x19, // End of Medium
        SUB =...",5,terminal\parser\ascii.hpp,Microsoft.Console.VirtualTerminal.AsciiChars,,false,8,AsciiChars,1
582784,TYPE_DECL,,terminal\parser\base64.cpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\parser\base64.cpp,terminal\parser\base64.cpp:<global>,,false,1,<global>,3
583206,TYPE_DECL,,terminal\parser\base64.hpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\parser\base64.hpp,terminal\parser\base64.hpp:<global>,,false,1,<global>,1
583212,TYPE_DECL,,,,"class Base64
    {
    public:
        static HRESULT Decode(const std::wstring_view& src, std::wstring& dst) noexcept;
    }",5,terminal\parser\base64.hpp,Microsoft.Console.VirtualTerminal.Base64,,false,16,Base64,1
583233,TYPE_DECL,,terminal\parser\ft_fuzzer\VTCommandFuzzer.cpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\parser\ft_fuzzer\VTCommandFuzzer.cpp,terminal\parser\ft_fuzzer\VTCommandFuzzer.cpp:<global>,,false,1,<global>,5
585765,TYPE_DECL,"fuzz.CFuzzString<_Alloc,_Type,_Args>",,,"class CFuzzString : public CFuzzType<_Type*, _Args...>
    {
    public:
        CFuzzString(
            __in_ecount(cfte) const _fuzz_type_entry<_Type*, _Args...>* rgfte,
            __in ULONG cfte,
            __in _Type* psz,
            __in _Args... args) :
            CFuzzType<_Type, _Args...>(rgfte, cfte, psz, std::forward<_Args>(args)...)
        {
            OnFuzzedValueFromMap();
        }

        virtual ~CFuzzString()
        {
            FreeFuzzedString();
        }

        // Provide operator overloading to allow this class to be
        // initialized across function calls that would allocate
        // a string.  It is assumed that if initialization occurs
        // via this method and then reallocation occurs, it will
        // be necessary to transfer ownership of who frees the
        // appropriate buffer.
        //   For example:
        //      __untrusted_lpwstr pwsz =
        //          __untrusted_lpwstr_init<LPWSTR>(FUZZ_MAP(...), nullptr);
   ...",5,terminal\parser\ft_fuzzer\fuzzing_directed.hpp,fuzz.CFuzzString,"CFuzzType<_Type*, _Args...>",false,929,CFuzzString,17
585781,TYPE_DECL,,terminal\parser\ft_fuzzer\fuzzing_directed.hpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\parser\ft_fuzzer\fuzzing_directed.hpp,terminal\parser\ft_fuzzer\fuzzing_directed.hpp:<global>,,false,1,<global>,8
585785,TYPE_DECL,variadic.index<int...>,,,"struct index
    {
    }",5,terminal\parser\ft_fuzzer\fuzzing_directed.hpp,variadic.index,,false,37,index,1
585786,TYPE_DECL,"variadic.gen_seq<int,int...>",,,"struct gen_seq : gen_seq<N - 1, N - 1, Is...>
    {
    }",5,terminal\parser\ft_fuzzer\fuzzing_directed.hpp,variadic.gen_seq,"gen_seq<N - 1, N - 1, Is...>",false,42,gen_seq,2
585787,TYPE_DECL,"variadic.gen_seq<0,Is...><int...>",,,"struct gen_seq<0, Is...> : index<Is...>
    {
    }",5,terminal\parser\ft_fuzzer\fuzzing_directed.hpp,"variadic.gen_seq<0,Is...>",index<Is...>,false,47,"gen_seq<0,Is...>",3
585789,TYPE_DECL,,,,"enum _FuzzTraits : unsigned int
    {
        // Default behavior is to not throw exceptions
        TRAIT_DEFAULT = 0x0,

        // In the event that the fuzz map percentages add up to more than
        // 100% during constructor initialization, an exception of type
        // CFuzzRangeException is thrown.
        TRAIT_THROW_ON_INIT_FAILURE = 0x1,

        // For classes that could realloc a buffer in order to grow or
        // shrink the size of the fuzzed result, this results in having
        // two different buffers that need to be freed.  To make the calling
        // code work correctly, we can use the flag below to transfer the
        // allocation ownership such that the calling code frees the correct
        // buffer and our fuzz classes frees the other buffer.
        //   Example:
        //     DWORD cbSize = 0;
        //     __untrusted_array_size(BYTE, DWORD) cbSizeUntrusted =
        //        __untrusted_array_size_init(BYTE, DWORD)(cbSize);
        //     _...",5,terminal\parser\ft_fuzzer\fuzzing_directed.hpp,fuzz._FuzzTraits,,false,57,_FuzzTraits,1
585810,TYPE_DECL,ANY,,,typedef UINT FuzzTraits;,18,terminal\parser\ft_fuzzer\fuzzing_directed.hpp,FuzzTraits,,false,96,FuzzTraits,2
585811,TYPE_DECL,,,,"struct _range
    {
        int iHigh;
        int iLow;
    }",5,terminal\parser\ft_fuzzer\fuzzing_directed.hpp,fuzz._range,,false,108,_range,3
585814,TYPE_DECL,"fuzz._fuzz_type_entry<_Type,_Args>",,,"struct _fuzz_type_entry
    {
        unsigned int uiPercentage;
        std::function<_Type(_Type, _Args...)> pfnFuzz;
        std::function<void(_Type)> pfnDealloc;
    }",5,terminal\parser\ft_fuzzer\fuzzing_directed.hpp,fuzz._fuzz_type_entry,,false,140,_fuzz_type_entry,4
585818,TYPE_DECL,"fuzz._range_fuzz_type_entry<_Type,_Args>",,,"struct _range_fuzz_type_entry
    {
        _fuzz_type_entry<_Type, _Args...> fte;
        _range range;
    }",5,terminal\parser\ft_fuzzer\fuzzing_directed.hpp,fuzz._range_fuzz_type_entry,,false,152,_range_fuzz_type_entry,5
585821,TYPE_DECL,"fuzz._fuzz_array_entry<_Type1,_Type2,_Args>",,,"struct _fuzz_array_entry
    {
        unsigned int uiPercentage;
        std::function<_Type1*(_Type1*, _Type2&, _Args...)> pfnFuzz;
        std::function<void(_Type1*)> pfnDealloc;
    }",5,terminal\parser\ft_fuzzer\fuzzing_directed.hpp,fuzz._fuzz_array_entry,,false,189,_fuzz_array_entry,6
585825,TYPE_DECL,"fuzz._range_fuzz_array_entry<_Type1,_Type2,_Args>",,,"struct _range_fuzz_array_entry
    {
        _fuzz_array_entry<_Type1, _Type2, _Args...> fae;
        _range range;
    }",5,terminal\parser\ft_fuzzer\fuzzing_directed.hpp,fuzz._range_fuzz_array_entry,,false,200,_range_fuzz_array_entry,7
585828,TYPE_DECL,,,,"class CFuzzRangeException
    {
    public:
        CFuzzRangeException() = default;
        virtual ~CFuzzRangeException() = default;
    }",5,terminal\parser\ft_fuzzer\fuzzing_directed.hpp,fuzz.CFuzzRangeException,,false,215,CFuzzRangeException,8
585837,TYPE_DECL,,,,"class CFuzzChance
    {
    public:
// Will collide with min() and max() macros, so we need to jump through hoops
// to correctly use std::numeric_limits<_Type>::min() and std::numeric_limits<_Type>::max()
#ifdef min
#define __min_collision__
#undef min
#endif

#ifdef max
#define __max_collision__
#undef max
#endif
        template<class _Type>
        static _Type GetRandom() throw()
        {
            return GetRandom<_Type>(std::numeric_limits<_Type>::min(), std::numeric_limits<_Type>::max());
        }

        template<class _Type>
        static _Type GetRandom(__in _Type tCap) throw()
        {
            return GetRandom<_Type>(std::numeric_limits<_Type>::min(), --tCap);
        }

        template<class _Type>
        static _Type GetRandom(__in _Type tMin, __in _Type tMax)
        {
            if constexpr (std::is_same_v<_Type, BYTE>)
            {
                // uniform_int_distribution only works with _Is_IntType types, which do not
                // currently...",5,terminal\parser\ft_fuzzer\fuzzing_directed.hpp,fuzz.CFuzzChance,,false,227,CFuzzChance,9
585887,TYPE_DECL,,,,"class CFuzzBase
    {
    protected:
        CFuzzBase() :
            m_fFuzzed(FALSE),
            m_iPercentageTotal(100){};
        virtual ~CFuzzBase() = default;

        // Converts a percentage into a valid range.  Note that riTotal
        // is a reference value, which allows for a running total to be
        // decremented as fuzz map percentages are mapped to valid ranges.
        void ConvertPercentageToRange(__in unsigned int iPercentage,
                                      __inout int& riTotal,
                                      __deref_out _range* pr) const
        {
            pr->iHigh = riTotal;
            pr->iLow = riTotal - iPercentage;
            riTotal -= iPercentage;
        }

    protected:
        BOOL m_fFuzzed;
        int m_iPercentageTotal;
        FuzzTraits m_traits{ TRAIT_DEFAULT };
    }",5,terminal\parser\ft_fuzzer\fuzzing_directed.hpp,fuzz.CFuzzBase,,false,314,CFuzzBase,11
585908,TYPE_DECL,"fuzz.CFuzzArraySize<_Type1,_Type2,_Args>",,,class CFuzzArraySize,5,terminal\parser\ft_fuzzer\fuzzing_directed.hpp,fuzz.CFuzzArraySize,,false,341,CFuzzArraySize,12
585909,TYPE_DECL,"fuzz.CFuzzArray<_Alloc,_Type1,_Type2,_Args>",,,"class CFuzzArray : public CFuzzBase
    {
    public:
        friend class CFuzzArraySize<_Type1, _Type2, _Args...>;

        // Creates a CFuzzArray instance that wraps a buffer specified by
        // rg, together with its size (note that this is the number of elements
        // not necessarily the byte count).  cElems is a reference so it must
        // point to a valid variable.  In this constructor, it is valid for
        // the fuzz map to be a null pointer, but it is expected that a fuzz
        // map will be provided at a later time via SetFuzzArrayMap or
        // AddFuzzArrayEntry.
        //
        // If CFuzzArray is initialized with rg == nullptr, this usage case
        // is designed to leverage the & operator overload to have CFuzzArray
        // initialized to a valid buffer.  In this scenario, if reallocation
        // is being used by the fuzz map and reallocation occurs, this class
        // implements logic to transfer the fuzzed allocation to the calli...",5,terminal\parser\ft_fuzzer\fuzzing_directed.hpp,fuzz.CFuzzArray,CFuzzBase,false,356,CFuzzArray,13
585910,TYPE_DECL,,,,"friend class CFuzzArraySize<_Type1, _Type2, _Args...>",9,terminal\parser\ft_fuzzer\fuzzing_directed.hpp,"fuzz.CFuzzArray.CFuzzArraySize<_Type1,_Type2,_Args...>",,false,359,"CFuzzArraySize<_Type1,_Type2,_Args...>",1
586169,TYPE_DECL,"fuzz.CFuzzArraySize<_Type1,_Type2,_Args>",,,"class CFuzzArraySize
    {
    public:
        friend class CFuzzArray<__FUZZING_ALLOCATOR, _Type1, _Type2, _Args...>;

        CFuzzArraySize(__inout _Type2& cElems) :
            m_pcElems(&cElems),
            m_pfa(nullptr)
        {
        }

        virtual ~CFuzzArraySize() {}

        __inline operator _Type2() throw()
        {
            if (m_pfa)
            {
                m_pfa->GetValueFromMap();
            }

            return *m_pcElems;
        }

        __inline _Type2* operator&() throw()
        {
            return m_pcElems;
        }

        __inline const _Type2* operator&() const throw()
        {
            return m_pcElems;
        }

        __inline void Pair(__in CFuzzArray<__FUZZING_ALLOCATOR, _Type1, _Type2, _Args...>& rfa)
        {
            m_pfa = rfa.Reference();
        }

    private:
        CFuzzArray<__FUZZING_ALLOCATOR, _Type1, _Type2, _Args...>* m_pfa;
        _Type2* m_pcElems;

        CFuzzArraySize<_Type1, _Type2, _Args...>...",5,terminal\parser\ft_fuzzer\fuzzing_directed.hpp,fuzz.CFuzzArraySize,,false,645,CFuzzArraySize,14
586170,TYPE_DECL,,,,"friend class CFuzzArray<__FUZZING_ALLOCATOR, _Type1, _Type2, _Args...>",9,terminal\parser\ft_fuzzer\fuzzing_directed.hpp,"fuzz.CFuzzArraySize.CFuzzArray<fuzz.CFuzzCRTAllocator,_Type1,_Type2,_Args...>",,false,648,"CFuzzArray<fuzz::CFuzzCRTAllocator,_Type1,_Type2,_Args...>",1
586211,TYPE_DECL,"fuzz.CFuzzType<_Type,_Args>",,,"class CFuzzType : public CFuzzBase
    {
    public:
        // Creates an instance of CFuzzType, initializing the value to
        // the value specified in t.  Note that providing a fuzz map
        // is optional, but then expected to be provided via SetFuzzTypeMap
        // or AddFuzzTypeEntry if fuzzing is to be applied.
        CFuzzType(
            __in_ecount(cfte) const _fuzz_type_entry<_Type, _Args...>* rgfte,
            __in ULONG cfte,
            __in _Type t,
            __in _Args&&... args) :
            m_t(t),
            m_tInit(t),
            m_tArgs(std::forward<_Args>(args)...)
        {
            m_pfnOnFuzzedValueFromMap = [](_Type t, std::function<void(_Type)>) { return t; };
            HRESULT hr = SetFuzzTypeMap(rgfte, cfte);

            // Since constructors cannot return error values, the
            // TRAIT_THROW_ON_INIT_FAILURE trait allows for an exception
            // to be thrown in the event that this class was not initialized
          ...",5,terminal\parser\ft_fuzzer\fuzzing_directed.hpp,fuzz.CFuzzType,CFuzzBase,false,699,CFuzzType,15
586361,TYPE_DECL,"fuzz.CFuzzTypePtr<_Type,_Args>",,,"class CFuzzTypePtr : public CFuzzType<_Type, _Args...>
    {
    public:
        // Note that _Type is expected to be a pointer type (thus making
        // the operator override of -> make sense).  It is the callers
        // responsibility to set the type appropriately.
        CFuzzTypePtr(
            __in_ecount(cfte) const _fuzz_type_entry<_Type>* rgfte,
            __in ULONG cfte,
            __in _Type pt,
            __in _Args&&... args) :
            CFuzzType<_Type, _Args...>(rgfte, cfte, pt, std::forward<_Args>(args)...)
        {
        }

        virtual ~CFuzzTypePtr() {}

        _Type operator->() const throw()
        {
            return (this->m_fFuzzed) ? this->m_t : CFuzzType<_Type, _Args...>::m_tInit;
        }

        // This operator makes it possible to invoke the fuzzing map
        // by calling this class like a parameterless function.  This is
        // used to support the __make_untrusted call below.  Note that once
        // the fuzzing map is ...",5,terminal\parser\ft_fuzzer\fuzzing_directed.hpp,fuzz.CFuzzTypePtr,"CFuzzType<_Type, _Args...>",false,885,CFuzzTypePtr,16
586469,TYPE_DECL,"fuzz.CFuzzFlags<_Type,_Args>",,,"class CFuzzFlags : public CFuzzType<_Type, _Args...>
    {
    public:
        CFuzzFlags(
            __in_ecount(cfte) const _fuzz_type_entry<_Type>* rgfte,
            __in ULONG cfte,
            __in _Type flags,
            __in _Args&&... args) :
            CFuzzType<_Type, _Args...>(rgfte, cfte, flags, std::forward<_Args>(args)...)
        {
        }

        virtual ~CFuzzFlags()
        {
        }

    protected:
        __inline virtual _Type GetValueFromMap()
        {
            if (!this->m_fFuzzed)
            {
                this->m_t = 0;
                this->m_fFuzzed = TRUE;
                for (auto& r : this->m_map)
                {
                    // Generate a new random value during each map entry
                    // and use it to evaluate if each individual fuzz map
                    // entry should be applied.
                    auto wRandom = CFuzzChance::GetRandom<WORD>(100);

                    // Translate percentages to allow for eac...",5,terminal\parser\ft_fuzzer\fuzzing_directed.hpp,fuzz.CFuzzFlags,"CFuzzType<_Type, _Args...>",false,1057,CFuzzFlags,18
586578,TYPE_DECL,,terminal\parser\ft_fuzzer\fuzzing_logic.hpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\parser\ft_fuzzer\fuzzing_logic.hpp,terminal\parser\ft_fuzzer\fuzzing_logic.hpp:<global>,,false,1,<global>,4
586583,TYPE_DECL,,terminal\parser\ft_fuzzer\memallocator.hpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\parser\ft_fuzzer\memallocator.hpp,terminal\parser\ft_fuzzer\memallocator.hpp:<global>,,false,1,<global>,1
586587,TYPE_DECL,,,,"struct CFuzzCRTAllocator
    {
        _Ret_maybenull_ _Post_writable_byte_size_(nBytes) static void* Reallocate(
            _In_ void* p,
            _In_ size_t nBytes) throw()
        {
            return realloc(p, nBytes);
        }

        _Ret_maybenull_ _Post_writable_byte_size_(nBytes) static void* Allocate(_In_ size_t nBytes) throw()
        {
            return malloc(nBytes);
        }

        static void Free(_In_ void* p) throw()
        {
            free(p);
        }
    }",5,terminal\parser\ft_fuzzer\memallocator.hpp,fuzz.CFuzzCRTAllocator,,false,11,CFuzzCRTAllocator,1
586602,TYPE_DECL,,terminal\parser\ft_fuzzer\stdafx.cpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\parser\ft_fuzzer\stdafx.cpp,terminal\parser\ft_fuzzer\stdafx.cpp:<global>,,false,1,<global>,2
586615,TYPE_DECL,,terminal\parser\ft_fuzzer\stdafx.hpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\parser\ft_fuzzer\stdafx.hpp,terminal\parser\ft_fuzzer\stdafx.hpp:<global>,,false,1,<global>,5
586620,TYPE_DECL,,terminal\parser\ft_fuzzer\string_helper.hpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\parser\ft_fuzzer\string_helper.hpp,terminal\parser\ft_fuzzer\string_helper.hpp:<global>,,false,1,<global>,1
586632,TYPE_DECL,,terminal\parser\ft_fuzzwrapper\echoDispatch.cpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\parser\ft_fuzzwrapper\echoDispatch.cpp,terminal\parser\ft_fuzzwrapper\echoDispatch.cpp:<global>,,false,1,<global>,3
586666,TYPE_DECL,,terminal\parser\ft_fuzzwrapper\echoDispatch.hpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\parser\ft_fuzzwrapper\echoDispatch.hpp,terminal\parser\ft_fuzzwrapper\echoDispatch.hpp:<global>,,false,1,<global>,2
586672,TYPE_DECL,,,,"class EchoDispatch : public TermDispatch
            {
            public:
                void Print(const wchar_t wchPrintable) override;
                void PrintString(const std::wstring_view string) override;
            }",13,terminal\parser\ft_fuzzwrapper\echoDispatch.hpp,Microsoft.Console.VirtualTerminal.EchoDispatch,TermDispatch,false,12,EchoDispatch,1
586693,TYPE_DECL,,terminal\parser\ft_fuzzwrapper\main.cpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\parser\ft_fuzzwrapper\main.cpp,terminal\parser\ft_fuzzwrapper\main.cpp:<global>,,false,1,<global>,5
586894,TYPE_DECL,,terminal\parser\ft_fuzzwrapper\precomp.cpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\parser\ft_fuzzwrapper\precomp.cpp,terminal\parser\ft_fuzzwrapper\precomp.cpp:<global>,,false,1,<global>,2
586907,TYPE_DECL,,terminal\parser\ft_fuzzwrapper\precomp.hpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\parser\ft_fuzzwrapper\precomp.hpp,terminal\parser\ft_fuzzwrapper\precomp.hpp:<global>,,false,1,<global>,5
586914,TYPE_DECL,,terminal\parser\precomp.cpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\parser\precomp.cpp,terminal\parser\precomp.cpp:<global>,,false,1,<global>,2
586931,TYPE_DECL,,terminal\parser\precomp.hpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\parser\precomp.hpp,terminal\parser\precomp.hpp:<global>,,false,1,<global>,7
586947,TYPE_DECL,,terminal\parser\stateMachine.cpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\parser\stateMachine.cpp,terminal\parser\stateMachine.cpp:<global>,,false,1,<global>,4
589808,TYPE_DECL,,terminal\parser\stateMachine.hpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\parser\stateMachine.hpp,terminal\parser\stateMachine.hpp:<global>,,false,1,<global>,4
589832,TYPE_DECL,,,,"class StateMachine final
    {
#ifdef UNIT_TESTING
        friend class OutputEngineTest;
        friend class InputEngineTest;
#endif

    public:
        template<typename T>
        StateMachine(std::unique_ptr<T> engine) :
            StateMachine(std::move(engine), std::is_same_v<T, class InputStateMachineEngine>)
        {
        }
        StateMachine(std::unique_ptr<IStateMachineEngine> engine, const bool isEngineForInput);

        enum class Mode : size_t
        {
            AcceptC1,
            AlwaysAcceptC1,
            Ansi,
        };

        void SetParserMode(const Mode mode, const bool enabled) noexcept;
        bool GetParserMode(const Mode mode) const noexcept;

        void ProcessCharacter(const wchar_t wch);
        void ProcessString(const std::wstring_view string);
        bool IsProcessingLastCharacter() const noexcept;

        void OnCsiComplete(const std::function<void()> callback);

        void ResetState() noexcept;

        bool FlushToTerminal(...",5,terminal\parser\stateMachine.hpp,Microsoft.Console.VirtualTerminal.StateMachine,,false,40,StateMachine,8
589833,TYPE_DECL,,,,friend class OutputEngineTest,9,terminal\parser\stateMachine.hpp,Microsoft.Console.VirtualTerminal.StateMachine.OutputEngineTest,,false,43,OutputEngineTest,1
589834,TYPE_DECL,,,,friend class InputEngineTest,9,terminal\parser\stateMachine.hpp,Microsoft.Console.VirtualTerminal.StateMachine.InputEngineTest,,false,44,InputEngineTest,2
589846,TYPE_DECL,,,,"enum class Mode : size_t
        {
            AcceptC1,
            AlwaysAcceptC1,
            Ansi,
        }",9,terminal\parser\stateMachine.hpp,Microsoft.Console.VirtualTerminal.StateMachine.Mode,,false,55,Mode,5
589892,TYPE_DECL,,,,"class ShutdownException : public wil::ResultException
        {
        public:
            ShutdownException() noexcept :
                ResultException(E_ABORT) {}
        }",9,terminal\parser\stateMachine.hpp,Microsoft.Console.VirtualTerminal.StateMachine.ShutdownException,wil.ResultException,false,78,ShutdownException,15
590178,TYPE_DECL,,,,"enum class VTStates
        {
            Ground,
            Escape,
            EscapeIntermediate,
            CsiEntry,
            CsiIntermediate,
            CsiIgnore,
            CsiParam,
            CsiSubParam,
            OscParam,
            OscString,
            OscTermination,
            Ss3Entry,
            Ss3Param,
            Vt52Param,
            DcsEntry,
            DcsIgnore,
            DcsIntermediate,
            DcsParam,
            DcsPassThrough,
            SosPmApcString
        }",9,terminal\parser\stateMachine.hpp,Microsoft.Console.VirtualTerminal.StateMachine.VTStates,,false,155,VTStates,77
590249,TYPE_DECL,,terminal\parser\tracing.cpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\parser\tracing.cpp,terminal\parser\tracing.cpp:<global>,,false,1,<global>,3
590509,TYPE_DECL,,terminal\parser\tracing.hpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\parser\tracing.hpp,terminal\parser\tracing.hpp:<global>,,false,1,<global>,3
590529,TYPE_DECL,,terminal\parser\ut_parser\Base64Test.cpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\parser\ut_parser\Base64Test.cpp,terminal\parser\ut_parser\Base64Test.cpp:<global>,,false,1,<global>,6
590535,TYPE_DECL,,,,class Base64Test,13,terminal\parser\ut_parser\Base64Test.cpp,Microsoft.Console.VirtualTerminal.Base64Test,,false,22,Base64Test,1
590591,TYPE_DECL,,terminal\parser\ut_parser\InputEngineTest.cpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\parser\ut_parser\InputEngineTest.cpp,terminal\parser\ut_parser\InputEngineTest.cpp:<global>,,false,1,<global>,16
590628,TYPE_DECL,,,,class InputEngineTest,13,terminal\parser\ut_parser\InputEngineTest.cpp,Microsoft.Console.VirtualTerminal.InputEngineTest,,false,33,InputEngineTest,1
590629,TYPE_DECL,,,,class TestInteractDispatch,13,terminal\parser\ut_parser\InputEngineTest.cpp,Microsoft.Console.VirtualTerminal.TestInteractDispatch,,false,34,TestInteractDispatch,2
590709,TYPE_DECL,,,,"class TestState
{
public:
    TestState() :
        vExpectedInput{},
        _stateMachine{ nullptr },
        _expectedToCallWindowManipulation{ false },
        _expectSendCtrlC{ false },
        _expectCursorPosition{ false },
        _expectedCursor{ -1, -1 },
        _expectedWindowManipulation{ DispatchTypes::WindowManipulationType::Invalid }
    {
    }

    void RoundtripTerminalInputCallback(_In_ const std::span<const INPUT_RECORD>& inputRecords)
    {
        // Take all the characters out of the input records here, and put them into
        //  the input state machine.
        std::wstring vtseq = L"""";
        for (auto& inRec : inputRecords)
        {
            VERIFY_ARE_EQUAL(KEY_EVENT, inRec.EventType);
            if (inRec.Event.KeyEvent.bKeyDown)
            {
                vtseq += &inRec.Event.KeyEvent.uChar.UnicodeChar;
            }
        }
        Log::Comment(
            NoThrowString().Format(L""\tvtseq: \""%s\""(%zu)"", vtseq.c_str(), vtseq.length()));
...",1,terminal\parser\ut_parser\InputEngineTest.cpp,TestState,,false,64,TestState,6
591148,TYPE_DECL,,,,friend class TestInteractDispatch,5,terminal\parser\ut_parser\InputEngineTest.cpp,TestInteractDispatch,,false,278,TestInteractDispatch,36
591229,TYPE_DECL,,,,"class Microsoft::Console::VirtualTerminal::TestInteractDispatch final : public IInteractDispatch
{
public:
    TestInteractDispatch(_In_ std::function<void(const std::span<const INPUT_RECORD>&)> pfn,
                         _In_ TestState* testState);
    virtual bool WriteInput(_In_ const std::span<const INPUT_RECORD>& inputEvents) override;

    virtual bool WriteCtrlKey(const INPUT_RECORD& event) override;
    virtual bool WindowManipulation(const DispatchTypes::WindowManipulationType function,
                                    const VTParameter parameter1,
                                    const VTParameter parameter2) override; // DTTERM_WindowManipulation
    virtual bool WriteString(const std::wstring_view string) override;

    virtual bool MoveCursor(const VTInt row,
                            const VTInt col) override;

    virtual bool IsVtInputEnabled() const override;

    virtual bool FocusChanged(const bool focused) const override;

private:
    std::function<vo...",1,terminal\parser\ut_parser\InputEngineTest.cpp,TestInteractDispatch,IInteractDispatch,false,314,TestInteractDispatch,39
596918,TYPE_DECL,,terminal\parser\ut_parser\OutputEngineTest.cpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\parser\ut_parser\OutputEngineTest.cpp,terminal\parser\ut_parser\OutputEngineTest.cpp:<global>,,false,1,<global>,7
596924,TYPE_DECL,,,,class OutputEngineTest,13,terminal\parser\ut_parser\OutputEngineTest.cpp,Microsoft.Console.VirtualTerminal.OutputEngineTest,,false,25,OutputEngineTest,1
596925,TYPE_DECL,,,,"class DummyDispatch final : public TermDispatch
{
public:
    virtual void Print(const wchar_t /*wchPrintable*/) override
    {
    }

    virtual void PrintString(const std::wstring_view /*string*/) override
    {
    }
}",1,terminal\parser\ut_parser\OutputEngineTest.cpp,DummyDispatch,TermDispatch,false,36,DummyDispatch,2
598148,TYPE_DECL,,,,"class StatefulDispatch final : public TermDispatch
{
public:
    virtual void Print(const wchar_t wchPrintable) override
    {
        _printString += wchPrintable;
    }

    virtual void PrintString(const std::wstring_view string) override
    {
        _printString += string;
    }

    StatefulDispatch() :
        _cursorDistance{ 0 },
        _line{ 0 },
        _column{ 0 },
        _cursorUp{ false },
        _cursorDown{ false },
        _cursorBackward{ false },
        _cursorForward{ false },
        _cursorNextLine{ false },
        _cursorPreviousLine{ false },
        _cursorHorizontalPositionAbsolute{ false },
        _verticalLinePositionAbsolute{ false },
        _horizontalPositionRelative{ false },
        _verticalPositionRelative{ false },
        _cursorPosition{ false },
        _cursorSave{ false },
        _cursorLoad{ false },
        _eraseDisplay{ false },
        _eraseLine{ false },
        _insertCharacter{ false },
        _deleteCharacter{ false },
 ...",1,terminal\parser\ut_parser\OutputEngineTest.cpp,StatefulDispatch,TermDispatch,false,1106,StatefulDispatch,696
598792,TYPE_DECL,,,,"class StateMachineExternalTest final
{
    TEST_CLASS(StateMachineExternalTest);

    TEST_METHOD_SETUP(SetupState)
    {
        return true;
    }",1,terminal\parser\ut_parser\OutputEngineTest.cpp,StateMachineExternalTest,,false,1543,StateMachineExternalTest,697
600862,TYPE_DECL,,,,"class Microsoft::Console::VirtualTerminal::TestStateMachineEngine : public IStateMachineEngine
{
public:
    void ResetTestState()
    {
        printed.clear();
        passedThrough.clear();
        executed.clear();
        csiId = 0;
        csiParams.clear();
        dcsId = 0;
        dcsParams.clear();
        dcsDataString.clear();
    }

    bool EncounteredWin32InputModeSequence() const noexcept override
    {
        return false;
    }

    bool ActionExecute(const wchar_t wch) override
    {
        executed += wch;
        return true;
    };

    bool ActionExecuteFromEscape(const wchar_t /* wch */) override { return true; };
    bool ActionPrint(const wchar_t /* wch */) override { return true; };
    bool ActionPrintString(const std::wstring_view string) override
    {
        printed += string;
        return true;
    };

    bool ActionPassThroughString(const std::wstring_view string) override
    {
        passedThrough += string;
        return true;
    };

   ...",1,terminal\parser\ut_parser\StateMachineTest.cpp,TestStateMachineEngine,IStateMachineEngine,false,28,TestStateMachineEngine,2
600872,TYPE_DECL,,terminal\parser\ut_parser\StateMachineTest.cpp:<global>,NAMESPACE_BLOCK,<global>,1,terminal\parser\ut_parser\StateMachineTest.cpp,terminal\parser\ut_parser\StateMachineTest.cpp:<global>,,false,1,<global>,5
600878,TYPE_DECL,,,,class StateMachineTest,13,terminal\parser\ut_parser\StateMachineTest.cpp,Microsoft.Console.VirtualTerminal.StateMachineTest,,false,20,StateMachineTest,1
600879,TYPE_DECL,,,,class TestStateMachineEngine,13,terminal\parser\ut_parser\StateMachineTest.cpp,Microsoft.Console.VirtualTerminal.TestStateMachineEngine,,false,21,TestStateMachineEngine,2
601917,TYPE_DECL,,til\precomp.cpp:<global>,NAMESPACE_BLOCK,<global>,1,til\precomp.cpp,til\precomp.cpp:<global>,,false,1,<global>,2
601932,TYPE_DECL,,til\precomp.hpp:<global>,NAMESPACE_BLOCK,<global>,1,til\precomp.hpp,til\precomp.hpp:<global>,,false,1,<global>,6
601938,TYPE_DECL,,,,"struct Rect
            {
                FLOAT X;
                FLOAT Y;
                FLOAT Width;
                FLOAT Height;
            }",13,til\precomp.hpp,winrt.Windows.Foundation.Rect,,false,45,Rect,1
601943,TYPE_DECL,,,,"struct Point
            {
                FLOAT X;
                FLOAT Y;
            }",13,til\precomp.hpp,winrt.Windows.Foundation.Point,,false,53,Point,2
601946,TYPE_DECL,,,,"struct Size
            {
                FLOAT Width;
                FLOAT Height;
            }",13,til\precomp.hpp,winrt.Windows.Foundation.Size,,false,59,Size,3
601955,TYPE_DECL,,til\ut_til\BaseTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,til\ut_til\BaseTests.cpp,til\ut_til\BaseTests.cpp:<global>,,false,1,<global>,3
601958,TYPE_DECL,,,,"class BaseTests
{
    TEST_CLASS(BaseTests);

    TEST_METHOD(ManageVector)
    {
        constexpr auto shrinkThreshold = 0.5f;

        std::vector<int> foo;
        foo.reserve(20);

        Log::Comment(L""Expand vector."");
        til::manage_vector(foo, 30, shrinkThreshold);
        VERIFY_ARE_EQUAL(30u, foo.capacity());

        Log::Comment(L""Try shrink but by not enough for threshold."");
        til::manage_vector(foo, 18, shrinkThreshold);
        VERIFY_ARE_EQUAL(30u, foo.capacity());

        Log::Comment(L""Shrink because it is meeting threshold."");
        til::manage_vector(foo, 15, shrinkThreshold);
        VERIFY_ARE_EQUAL(15u, foo.capacity());
    }",1,til\ut_til\BaseTests.cpp,BaseTests,,false,13,BaseTests,1
601980,TYPE_DECL,,til\ut_til\BitmapTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,til\ut_til\BitmapTests.cpp,til\ut_til\BitmapTests.cpp:<global>,,false,1,<global>,3
602606,TYPE_DECL,,til\ut_til\CoalesceTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,til\ut_til\CoalesceTests.cpp,til\ut_til\CoalesceTests.cpp:<global>,,false,1,<global>,3
602609,TYPE_DECL,,,,"class CoalesceTests
{
    TEST_CLASS(CoalesceTests);

    TEST_METHOD(CoalesceFirstValue);
    TEST_METHOD(CoalesceMiddleValue);
    TEST_METHOD(CoalesceDefaultValue);

    TEST_METHOD(CoalesceOrNotFirstValue);
    TEST_METHOD(CoalesceOrNotMiddleValue);
    TEST_METHOD(CoalesceOrNotDefaultValue);
    TEST_METHOD(CoalesceOrNotDefaultIsNullopt);
}",1,til\ut_til\CoalesceTests.cpp,CoalesceTests,,false,11,CoalesceTests,1
602900,TYPE_DECL,,til\ut_til\ColorTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,til\ut_til\ColorTests.cpp,til\ut_til\ColorTests.cpp:<global>,,false,1,<global>,3
602940,TYPE_DECL,Quad_rgba<T>,,,"struct Quad_rgba
    {
        T r, g, b, a;
    }",5,til\ut_til\ColorTests.cpp,Quad_rgba,,false,55,Quad_rgba,5
602945,TYPE_DECL,Quad_RGBA<T>,,,"struct Quad_RGBA
    {
        T R, G, B, A;
    }",5,til\ut_til\ColorTests.cpp,Quad_RGBA,,false,61,Quad_RGBA,6
603070,TYPE_DECL,,til\ut_til\EnumSetTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,til\ut_til\EnumSetTests.cpp,til\ut_til\EnumSetTests.cpp:<global>,,false,1,<global>,3
603289,TYPE_DECL,,til\ut_til\EnvTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,til\ut_til\EnvTests.cpp,til\ut_til\EnvTests.cpp:<global>,,false,1,<global>,3
603457,TYPE_DECL,,til\ut_til\FlatSetTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,til\ut_til\FlatSetTests.cpp,til\ut_til\FlatSetTests.cpp:<global>,,false,1,<global>,3
603460,TYPE_DECL,,,,"struct Data
{
    static constexpr auto emptyMarker = std::numeric_limits<size_t>::max();

    constexpr operator bool() const noexcept
    {
        return value != emptyMarker;
    }

    constexpr bool operator==(int key) const noexcept
    {
        return value == static_cast<size_t>(key);
    }

    constexpr Data& operator=(int key) noexcept
    {
        value = static_cast<size_t>(key);
        return *this;
    }

    size_t value = emptyMarker;
}",1,til\ut_til\FlatSetTests.cpp,Data,,false,12,Data,1
603515,TYPE_DECL,,,,"class FlatSetTests
{
    TEST_CLASS(FlatSetTests);

    TEST_METHOD(Basic)
    {
        til::linear_flat_set<Data> set;

        // This simultaneously demonstrates how the class can't just do ""heterogeneous lookups""
        // like STL does, but also insert items with a different type.
        const auto [entry1, inserted1] = set.insert(123);
        VERIFY_IS_TRUE(inserted1);

        const auto [entry2, inserted2] = set.insert(123);
        VERIFY_IS_FALSE(inserted2);

        VERIFY_ARE_EQUAL(&entry1, &entry2);
        VERIFY_ARE_EQUAL(123u, entry2.value);
    }",1,til\ut_til\FlatSetTests.cpp,FlatSetTests,,false,49,FlatSetTests,3
603536,TYPE_DECL,,til\ut_til\GenerationalTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,til\ut_til\GenerationalTests.cpp,til\ut_til\GenerationalTests.cpp:<global>,,false,1,<global>,3
603539,TYPE_DECL,,,,"struct Data
{
    int value = 0;
}",1,til\ut_til\GenerationalTests.cpp,Data,,false,12,Data,1
603548,TYPE_DECL,,,,"class GenerationalTests
{
    TEST_CLASS(GenerationalTests);

    TEST_METHOD(Basic)
    {
        til::generational<Data> src;
        til::generational<Data> dst;

        // Reads via -> and *, just like std::optional, etc.
        VERIFY_ARE_EQUAL(0, src->value);
        VERIFY_ARE_EQUAL(0, (*src).value);

        // Writes via .write()->
        src.write()->value = 123;
        // ...which makes them not compare as equal.
        VERIFY_ARE_NOT_EQUAL(dst, src);

        // Synchronize the two objects by copying them
        dst = src;
        // ...which results in both being considered equal again
        VERIFY_ARE_EQUAL(dst, src);
        // ...and all values are copied over.
        VERIFY_ARE_EQUAL(123, dst->value);
    }",1,til\ut_til\GenerationalTests.cpp,GenerationalTests,,false,17,GenerationalTests,2
603567,TYPE_DECL,,til\ut_til\HashTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,til\ut_til\HashTests.cpp,til\ut_til\HashTests.cpp:<global>,,false,1,<global>,3
603570,TYPE_DECL,,,,"class HashTests
{
    TEST_CLASS(HashTests);

    TEST_METHOD(TestVectors)
    {
        struct Test
        {
            std::string_view input;
            size_t seed;
            uint64_t expected64;
            uint32_t expected32;
        };

        static constexpr std::array tests{
            Test{ """", 0, 0x42bc986dc5eec4d3, 0xa45f982f },
            Test{ ""a"", 1, 0x84508dc903c31551, 0x09021114 },
            Test{ ""abc"", 2, 0x0bc54887cfc9ecb1, 0xfe40215d },
            Test{ ""message digest"", 3, 0x6e2ff3298208a67c, 0x6e0fb730 },
            Test{ ""abcdefghijklmnopqrstuvwxyz"", 4, 0x9a64e42e897195b9, 0x9435b8c2 },
            Test{ ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"", 5, 0x9199383239c32554, 0xccf9734c },
            Test{ ""12345678901234567890123456789012345678901234567890123456789012345678901234567890"", 6, 0x7c1ccf6bba30f5a5, 0x9fa5ef6e },
        };

        for (const auto& t : tests)
        {
            const auto actual = til::hasher{ t....",1,til\ut_til\HashTests.cpp,HashTests,,false,12,HashTests,1
603632,TYPE_DECL,,til\ut_til\MathTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,til\ut_til\MathTests.cpp,til\ut_til\MathTests.cpp:<global>,,false,1,<global>,3
603709,TYPE_DECL,,til\ut_til\OperatorTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,til\ut_til\OperatorTests.cpp,til\ut_til\OperatorTests.cpp:<global>,,false,1,<global>,3
603905,TYPE_DECL,,til\ut_til\PointTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,til\ut_til\PointTests.cpp,til\ut_til\PointTests.cpp:<global>,,false,1,<global>,3
604136,TYPE_DECL,,til\ut_til\RectangleTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,til\ut_til\RectangleTests.cpp,til\ut_til\RectangleTests.cpp:<global>,,false,1,<global>,2
605270,TYPE_DECL,,til\ut_til\ReplaceTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,til\ut_til\ReplaceTests.cpp,til\ut_til\ReplaceTests.cpp:<global>,,false,1,<global>,3
605273,TYPE_DECL,,,,"class ReplaceTests
{
    TEST_CLASS(ReplaceTests);

    TEST_METHOD(ReplaceStrings);
    TEST_METHOD(ReplaceStringAndViews);
    TEST_METHOD(ReplaceStringsInplace);
    TEST_METHOD(ReplaceStringAndViewsInplace);

    TEST_METHOD(ReplaceWstrings);
    TEST_METHOD(ReplaceWstringAndViews);
    TEST_METHOD(ReplaceWstringsInplace);
    TEST_METHOD(ReplaceWstringAndViewsInplace);

    // There are explicitly no winrt::hstring tests here, because it's capital-H
    // hard to get the winrt hstring header included in this project without
    // pulling in all of the winrt machinery.
}",1,til\ut_til\ReplaceTests.cpp,ReplaceTests,,false,11,ReplaceTests,1
605627,TYPE_DECL,,til\ut_til\RunLengthEncodingTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,til\ut_til\RunLengthEncodingTests.cpp,til\ut_til\RunLengthEncodingTests.cpp:<global>,,false,1,<global>,4
605632,TYPE_DECL,"WEX.TestExecution.VerifyCompareTraits<std.string_view,til.basic_rle<T,S,Container>><T,S,Container>",,,"class VerifyCompareTraits<::std::string_view, ::til::basic_rle<T, S, Container>>
    {
        using rle_vector = ::til::basic_rle<T, S, Container>;
        using value_type = typename rle_vector::value_type;

    public:
        static bool AreEqual(const ::std::string_view& expected, const rle_vector& actual) noexcept
        {
            auto it = expected.data();
            const auto end = it + expected.size();
            size_t expected_size = 0;

            for (const auto& run : actual.runs())
            {
                const auto actual_value = run.value;
                const auto length = run.length;

                if (length == 0)
                {
                    return false;
                }

                for (size_t i = 0; i < length; ++it)
                {
                    if (it == end)
                    {
                        return false;
                    }

                    const auto ch = *it;

                    if (ch == '|' &...",5,til\ut_til\RunLengthEncodingTests.cpp,"WEX.TestExecution.VerifyCompareTraits<std.string_view,til.basic_rle<T,S,Container>>",,false,17,"VerifyCompareTraits<std::string_view,til::basic_rle<T,S,Container>>",1
605633,TYPE_DECL,ANY,,,"using rle_vector = ::til::basic_rle<T, S, Container>;",9,til\ut_til\RunLengthEncodingTests.cpp,rle_vector,,false,19,rle_vector,1
605634,TYPE_DECL,ANY,,,using value_type = typename rle_vector::value_type;,9,til\ut_til\RunLengthEncodingTests.cpp,value_type,,false,20,value_type,2
606160,TYPE_DECL,,til\ut_til\SPSCTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,til\ut_til\SPSCTests.cpp,til\ut_til\SPSCTests.cpp:<global>,,false,1,<global>,4
606228,TYPE_DECL,,,,"struct drop_indicator
{
    explicit drop_indicator(int& counter) noexcept :
        _counter(&counter) {}

    drop_indicator(const drop_indicator&) = delete;
    drop_indicator& operator=(const drop_indicator&) = delete;

    drop_indicator(drop_indicator&& other) noexcept
    {
        _counter = std::exchange(other._counter, nullptr);
    }

    drop_indicator& operator=(drop_indicator&& other) noexcept
    {
        _counter = std::exchange(other._counter, nullptr);
    }

    ~drop_indicator()
    {
        if (_counter)
        {
            ++*_counter;
        }
    }

private:
    int* _counter = nullptr;
}",1,til\ut_til\SPSCTests.cpp,drop_indicator,,false,13,drop_indicator,1
606305,TYPE_DECL,,,,"class SPSCTests
{
    BEGIN_TEST_CLASS(SPSCTests)
        TEST_CLASS_PROPERTY(L""TestTimeout"", L""0:0:10"") // 10s timeout
    END_TEST_CLASS()

    TEST_METHOD(SmokeTest);
    TEST_METHOD(DropEmptyTest);
    TEST_METHOD(DropSameRevolutionTest);
    TEST_METHOD(DropDifferentRevolutionTest);
    TEST_METHOD(IntegrationTest);
}",1,til\ut_til\SPSCTests.cpp,SPSCTests,,false,49,SPSCTests,3
606833,TYPE_DECL,,til\ut_til\SizeTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,til\ut_til\SizeTests.cpp,til\ut_til\SizeTests.cpp:<global>,,false,1,<global>,3
607076,TYPE_DECL,,til\ut_til\SmallVectorTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,til\ut_til\SmallVectorTests.cpp,til\ut_til\SmallVectorTests.cpp:<global>,,false,1,<global>,3
607079,TYPE_DECL,,,,"struct Copyable_int
{
    Copyable_int(int v = 0) noexcept :
        val(v)
    {
    }

    Copyable_int(const Copyable_int& x) noexcept :
        val(x.val)
    {
    }

    Copyable_int& operator=(const Copyable_int& x) noexcept
    {
        val = x.val;
        return *this;
    }

    Copyable_int(Copyable_int&& right) noexcept :
        val(right.val)
    {
        right.val = -1;
    }

    Copyable_int& operator=(Copyable_int&& right) noexcept
    {
        if (this != &right)
        {
            val = right.val;
            right.val = -1;
        }
        return *this;
    }

    bool operator==(const Copyable_int& x) const
    {
        return val == x.val;
    }

    int val;
}",1,til\ut_til\SmallVectorTests.cpp,Copyable_int,,false,17,Copyable_int,1
607151,TYPE_DECL,,,,"struct Movable_int : Copyable_int
{
    Movable_int(int v = 0) noexcept :
        Copyable_int(v)
    {
    }

    Movable_int(int v1, int v2) noexcept :
        Copyable_int(v2 + (v1 << 4))
    {
    }

    Movable_int(int v1, int v2, int v3) noexcept :
        Copyable_int(v3 + (v2 << 4) + (v1 << 8))
    {
    }

    Movable_int(int v1, int v2, int v3, int v4) noexcept :
        Copyable_int(v4 + (v3 << 4) + (v2 << 8) + (v1 << 12))
    {
    }

    Movable_int(int v1, int v2, int v3, int v4, int v5) noexcept :
        Copyable_int(v5 + (v4 << 4) + (v3 << 8) + (v2 << 12) + (v1 << 16))
    {
    }

    Movable_int(const Movable_int&) = delete;
    Movable_int& operator=(const Movable_int&) = delete;

    Movable_int(Movable_int&& right) noexcept :
        Copyable_int(right.val)
    {
        right.val = -1;
    }

    Movable_int& operator=(Movable_int&& right) noexcept
    {
        if (this != &right)
        {
            val = right.val;
            right.val = -1;
        }
  ...",1,til\ut_til\SmallVectorTests.cpp,Movable_int,Copyable_int,false,59,Movable_int,2
607320,TYPE_DECL,,til\ut_til\SomeTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,til\ut_til\SomeTests.cpp,til\ut_til\SomeTests.cpp:<global>,,false,1,<global>,2
607670,TYPE_DECL,,til\ut_til\StaticMapTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,til\ut_til\StaticMapTests.cpp,til\ut_til\StaticMapTests.cpp:<global>,,false,1,<global>,3
607789,TYPE_DECL,,til\ut_til\UnicodeTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,til\ut_til\UnicodeTests.cpp,til\ut_til\UnicodeTests.cpp:<global>,,false,1,<global>,4
607929,TYPE_DECL,,til\ut_til\mutex.cpp:<global>,NAMESPACE_BLOCK,<global>,1,til\ut_til\mutex.cpp,til\ut_til\mutex.cpp:<global>,,false,1,<global>,3
607932,TYPE_DECL,,,,"class MutexTests
{
    BEGIN_TEST_CLASS(MutexTests)
        TEST_CLASS_PROPERTY(L""TestTimeout"", L""0:0:10"") // 10s timeout
    END_TEST_CLASS()

    TEST_METHOD(Basic)
    {
        struct TestData
        {
            int foo;
            int bar;
        };

        const til::shared_mutex<TestData> mutex{ TestData{ 1, 2 } };

        {
            auto lock = mutex.lock();
            *lock = TestData{ 3, 4 };
            lock->foo = 5;
        }

        {
            auto lock1 = mutex.lock_shared();
            auto lock2 = mutex.lock_shared();

            VERIFY_ARE_EQUAL(5, lock1->foo);
            VERIFY_ARE_EQUAL(4, lock2->bar);
        }

        // This is here just to ensure that the prior
        // .lock_shared() properly unlocked the mutex.
        auto lock = mutex.lock();
    }
}",1,til\ut_til\mutex.cpp,MutexTests,,false,12,MutexTests,1
607940,TYPE_DECL,,til\ut_til\string.cpp:<global>,NAMESPACE_BLOCK,<global>,1,til\ut_til\string.cpp,til\ut_til\string.cpp:<global>,,false,1,<global>,2
608076,TYPE_DECL,,til\ut_til\throttled_func.cpp:<global>,NAMESPACE_BLOCK,<global>,1,til\ut_til\throttled_func.cpp,til\ut_til\throttled_func.cpp:<global>,,false,1,<global>,4
608079,TYPE_DECL,,,,"class ThrottledFuncTests
{
    BEGIN_TEST_CLASS(ThrottledFuncTests)
        TEST_CLASS_PROPERTY(L""TestTimeout"", L""0:0:10"") // 10s timeout
    END_TEST_CLASS()

    TEST_METHOD(Basic)
    {
        using namespace std::chrono_literals;
        using throttled_func = til::throttled_func_trailing<bool>;

        til::latch latch{ 2 };

        std::unique_ptr<throttled_func> tf;
        tf = std::make_unique<throttled_func>(10ms, [&](bool reschedule) {
            latch.count_down();

            // This will ensure that the callback is called even if we
            // invoke the throttled_func from inside the callback itself.
            if (reschedule)
            {
                tf->operator()(false);
            }
        });
        // This will ensure that the throttled_func invokes the callback in general.
        tf->operator()(true);

        latch.wait();
    }
}",1,til\ut_til\throttled_func.cpp,ThrottledFuncTests,,false,13,ThrottledFuncTests,1
608089,TYPE_DECL,,til\ut_til\u8u16convertTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,til\ut_til\u8u16convertTests.cpp,til\ut_til\u8u16convertTests.cpp:<global>,,false,1,<global>,3
608092,TYPE_DECL,,,,"class Utf8Utf16ConvertTests
{
    TEST_CLASS(Utf8Utf16ConvertTests);

    TEST_METHOD(TestU8ToU16);
    TEST_METHOD(TestU16ToU8);
    TEST_METHOD(TestU8ToU16Partials);
    TEST_METHOD(TestU16ToU8Partials);
    TEST_METHOD(TestU8ToU16OneByOne);
}",1,til\ut_til\u8u16convertTests.cpp,Utf8Utf16ConvertTests,,false,11,Utf8Utf16ConvertTests,1
608558,TYPE_DECL,,tools\ConsoleMonitor\main.cpp:<global>,NAMESPACE_BLOCK,<global>,1,tools\ConsoleMonitor\main.cpp,tools\ConsoleMonitor\main.cpp:<global>,,false,1,<global>,3
609226,TYPE_DECL,,tools\ConsoleMonitor\pch.cpp:<global>,NAMESPACE_BLOCK,<global>,1,tools\ConsoleMonitor\pch.cpp,tools\ConsoleMonitor\pch.cpp:<global>,,false,1,<global>,2
609237,TYPE_DECL,,tools\ConsoleMonitor\pch.hpp:<global>,NAMESPACE_BLOCK,<global>,1,tools\ConsoleMonitor\pch.hpp,tools\ConsoleMonitor\pch.hpp:<global>,,false,1,<global>,4
609248,TYPE_DECL,,tools\MonarchPeasantSample\AppState.cpp:<global>,NAMESPACE_BLOCK,<global>,1,tools\MonarchPeasantSample\AppState.cpp,tools\MonarchPeasantSample\AppState.cpp:<global>,,false,1,<global>,4
609496,TYPE_DECL,,tools\MonarchPeasantSample\AppState.hpp:<global>,NAMESPACE_BLOCK,<global>,1,tools\MonarchPeasantSample\AppState.hpp,tools\MonarchPeasantSample\AppState.hpp:<global>,,false,1,<global>,4
609499,TYPE_DECL,,,,"class AppState
{
public:
    bool areWeTheKing(const bool logPIDs = false);
    void initializeState();

    static winrt::MonarchPeasantSample::Monarch instantiateMonarch();

    void createMonarch();
    bool processCommandline();
    void remindKingWhoTheyAre(const winrt::MonarchPeasantSample::IPeasant& peasant);

    HANDLE hInput{ INVALID_HANDLE_VALUE };
    HANDLE hOutput{ INVALID_HANDLE_VALUE };
    winrt::MonarchPeasantSample::IPeasant peasant{ nullptr };
    winrt::MonarchPeasantSample::Monarch monarch{ nullptr };
    std::vector<winrt::hstring> args;

private:
    void _setupConsole();
    int _appLoop();

    winrt::MonarchPeasantSample::IPeasant _createOurPeasant();
}",1,tools\MonarchPeasantSample\AppState.hpp,AppState,,false,6,AppState,1
609581,TYPE_DECL,,tools\MonarchPeasantSample\MonarchMain.cpp:<global>,NAMESPACE_BLOCK,<global>,1,tools\MonarchPeasantSample\MonarchMain.cpp,tools\MonarchPeasantSample\MonarchMain.cpp:<global>,,false,1,<global>,4
609673,TYPE_DECL,,tools\MonarchPeasantSample\PeasantMain.cpp:<global>,NAMESPACE_BLOCK,<global>,1,tools\MonarchPeasantSample\PeasantMain.cpp,tools\MonarchPeasantSample\PeasantMain.cpp:<global>,,false,1,<global>,4
609931,TYPE_DECL,,tools\MonarchPeasantSample\SampleMonarch.cpp:<global>,NAMESPACE_BLOCK,<global>,1,tools\MonarchPeasantSample\SampleMonarch.cpp,tools\MonarchPeasantSample\SampleMonarch.cpp:<global>,,false,1,<global>,5
610335,TYPE_DECL,,tools\MonarchPeasantSample\SampleMonarch.hpp:<global>,NAMESPACE_BLOCK,<global>,1,tools\MonarchPeasantSample\SampleMonarch.hpp,tools\MonarchPeasantSample\SampleMonarch.hpp:<global>,,false,1,<global>,3
610354,TYPE_DECL,,,,"enum class WindowingBehavior : uint64_t
{
    UseNew = 0,
    UseExisting = 1,
}",1,tools\MonarchPeasantSample\SampleMonarch.hpp,WindowingBehavior,,false,14,WindowingBehavior,3
610370,TYPE_DECL,,,,"struct Monarch : public MonarchT<Monarch>
    {
        Monarch();
        ~Monarch();

        uint64_t GetPID();

        uint64_t AddPeasant(winrt::MonarchPeasantSample::IPeasant peasant);

        void SetSelfID(const uint64_t selfID);

        bool ProposeCommandline(array_view<const winrt::hstring> args, winrt::hstring cwd);
        void ToggleWindowingBehavior();

    private:
        uint64_t _nextPeasantID{ 1 };
        uint64_t _thisPeasantID{ 0 };
        uint64_t _mostRecentPeasant{ 0 };
        WindowingBehavior _windowingBehavior{ WindowingBehavior::UseNew };
        std::unordered_map<uint64_t, winrt::MonarchPeasantSample::IPeasant> _peasants;

        winrt::MonarchPeasantSample::IPeasant _getPeasant(uint64_t peasantID);
        void _setMostRecentPeasant(const uint64_t peasantID);

        void _peasantWindowActivated(const winrt::Windows::Foundation::IInspectable& sender,
                                     const winrt::Windows::Foundation::IInspectable& args);
    }",5,tools\MonarchPeasantSample\SampleMonarch.hpp,winrt.MonarchPeasantSample.implementation.Monarch,MonarchT<Monarch>,false,22,Monarch,1
610460,TYPE_DECL,,tools\MonarchPeasantSample\SamplePeasant.cpp:<global>,NAMESPACE_BLOCK,<global>,1,tools\MonarchPeasantSample\SamplePeasant.cpp,tools\MonarchPeasantSample\SamplePeasant.cpp:<global>,,false,1,<global>,5
610540,TYPE_DECL,,tools\MonarchPeasantSample\SamplePeasant.hpp:<global>,NAMESPACE_BLOCK,<global>,1,tools\MonarchPeasantSample\SamplePeasant.hpp,tools\MonarchPeasantSample\SamplePeasant.hpp:<global>,,false,1,<global>,2
610546,TYPE_DECL,,,,"struct Peasant : public PeasantT<Peasant>
    {
        Peasant();

        void AssignID(uint64_t id);
        uint64_t GetID();
        uint64_t GetPID();

        bool ExecuteCommandline(winrt::array_view<const winrt::hstring> args, winrt::hstring currentDirectory);

        void raiseActivatedEvent();

        TYPED_EVENT(WindowActivated, winrt::Windows::Foundation::IInspectable, winrt::Windows::Foundation::IInspectable);

    private:
        uint64_t _id{ 0 };
    }",5,tools\MonarchPeasantSample\SamplePeasant.hpp,winrt.MonarchPeasantSample.implementation.Peasant,PeasantT<Peasant>,false,7,Peasant,1
610598,TYPE_DECL,,tools\MonarchPeasantSample\main.cpp:<global>,NAMESPACE_BLOCK,<global>,1,tools\MonarchPeasantSample\main.cpp,tools\MonarchPeasantSample\main.cpp:<global>,,false,1,<global>,4
610613,TYPE_DECL,,,,"struct MonarchFactory : implements<MonarchFactory, IClassFactory>
{
    MonarchFactory() = default;

    HRESULT __stdcall CreateInstance(IUnknown* outer, GUID const& iid, void** result) noexcept final
    {
        *result = nullptr;
        if (outer)
        {
            return CLASS_E_NOAGGREGATION;
        }

        if (!g_weak)
        {
            // Create a new Monarch instance
            auto strong = make_self<MonarchPeasantSample::implementation::Monarch>();

            g_weak = (*strong).get_weak();
            return strong.as(iid, result);
        }
        else
        {
            // We already instantiated one Monarch, let's just return that one!
            auto strong = g_weak.get();
            return strong.as(iid, result);
        }
    }

    HRESULT __stdcall LockServer(BOOL) noexcept final
    {
        return S_OK;
    }
}",1,tools\MonarchPeasantSample\main.cpp,MonarchFactory,"implements<MonarchFactory, IClassFactory>",false,22,MonarchFactory,3
610883,TYPE_DECL,,tools\MonarchPeasantSample\pch.cpp:<global>,NAMESPACE_BLOCK,<global>,1,tools\MonarchPeasantSample\pch.cpp,tools\MonarchPeasantSample\pch.cpp:<global>,,false,1,<global>,2
610904,TYPE_DECL,,tools\MonarchPeasantSample\pch.hpp:<global>,NAMESPACE_BLOCK,<global>,1,tools\MonarchPeasantSample\pch.hpp,tools\MonarchPeasantSample\pch.hpp:<global>,,false,1,<global>,9
610918,TYPE_DECL,,tools\RenderingTests\main.cpp:<global>,NAMESPACE_BLOCK,<global>,1,tools\RenderingTests\main.cpp,tools\RenderingTests\main.cpp:<global>,,false,1,<global>,6
610955,TYPE_DECL,anonymous_namespace_2.detail.scope_guard<F>,,,"class scope_guard
        {
        public:
            scope_guard(F f) noexcept :
                func(std::move(f))
            {
            }

            ~scope_guard()
            {
                func();
            }

            scope_guard(const scope_guard&) = delete;
            scope_guard(scope_guard&& rhs) = delete;
            scope_guard& operator=(const scope_guard&) = delete;
            scope_guard& operator=(scope_guard&&) = delete;

        private:
            F func;
        }",9,tools\RenderingTests\main.cpp,anonymous_namespace_2.detail.scope_guard,,false,49,scope_guard,1
610987,TYPE_DECL,,,,"enum class scope_guard_helper
        {
        }",9,tools\RenderingTests\main.cpp,anonymous_namespace_9.detail.scope_guard_helper,,false,71,scope_guard_helper,2
611162,TYPE_DECL,,tools\U8U16Test\U8U16Test.cpp:<global>,NAMESPACE_BLOCK,<global>,1,tools\U8U16Test\U8U16Test.cpp,tools\U8U16Test\U8U16Test.cpp:<global>,,false,1,<global>,2
613737,TYPE_DECL,,tools\U8U16Test\U8U16Test.hpp:<global>,NAMESPACE_BLOCK,<global>,1,tools\U8U16Test\U8U16Test.hpp,tools\U8U16Test\U8U16Test.hpp:<global>,,false,1,<global>,8
613740,TYPE_DECL,,,,"class u8state final
{
public:
    u8state() noexcept;
    [[nodiscard]] HRESULT operator()(const std::string_view in, std::string_view& out) noexcept;
    void reset() noexcept;

private:
    enum _Utf8BitMasks : BYTE
    {
        IsAsciiByte = 0b0'0000000, // Any byte representing an ASCII character has the MSB set to 0
        MaskAsciiByte = 0b1'0000000, // Bit mask to be used in a bitwise AND operation to find out whether or not a byte match the IsAsciiByte pattern
        IsContinuationByte = 0b10'000000, // Continuation bytes of any UTF-8 non-ASCII character have the MSB set to 1 and the adjacent bit set to 0
        MaskContinuationByte = 0b11'000000, // Bit mask to be used in a bitwise AND operation to find out whether or not a byte match the IsContinuationByte pattern
        IsLeadByteTwoByteSequence = 0b110'00000, // A lead byte that indicates a UTF-8 non-ASCII character consisting of two bytes has the two highest bits set to 1 and the adjacent bit set to 0
        MaskL...",1,tools\U8U16Test\U8U16Test.hpp,u8state,,false,20,u8state,1
613755,TYPE_DECL,,,,"enum _Utf8BitMasks : BYTE
    {
        IsAsciiByte = 0b0'0000000, // Any byte representing an ASCII character has the MSB set to 0
        MaskAsciiByte = 0b1'0000000, // Bit mask to be used in a bitwise AND operation to find out whether or not a byte match the IsAsciiByte pattern
        IsContinuationByte = 0b10'000000, // Continuation bytes of any UTF-8 non-ASCII character have the MSB set to 1 and the adjacent bit set to 0
        MaskContinuationByte = 0b11'000000, // Bit mask to be used in a bitwise AND operation to find out whether or not a byte match the IsContinuationByte pattern
        IsLeadByteTwoByteSequence = 0b110'00000, // A lead byte that indicates a UTF-8 non-ASCII character consisting of two bytes has the two highest bits set to 1 and the adjacent bit set to 0
        MaskLeadByteTwoByteSequence = 0b111'00000, // Bit mask to be used in a bitwise AND operation to find out whether or not a lead byte match the IsLeadByteTwoByteSequence pattern
        IsLeadByteThr...",5,tools\U8U16Test\U8U16Test.hpp,u8state._Utf8BitMasks,,false,28,_Utf8BitMasks,4
613838,TYPE_DECL,,,,"class u16state final
{
public:
    u16state() noexcept;
    [[nodiscard]] HRESULT operator()(const std::wstring_view in, std::wstring_view& out) noexcept;
    void reset() noexcept;

private:
    std::wstring _buffer16;
    wchar_t _highSurrogate{}; // UTF-16 high surrogate that has to be cached
    size_t _cached{}; // 1 if a high surrogate has been cached, 0 otherwise
}",1,tools\U8U16Test\U8U16Test.hpp,u16state,,false,63,u16state,2
613952,TYPE_DECL,,tools\U8U16Test\main.cpp:<global>,NAMESPACE_BLOCK,<global>,1,tools\U8U16Test\main.cpp,tools\U8U16Test\main.cpp:<global>,,false,1,<global>,8
616539,TYPE_DECL,,tools\benchcat\crt.cpp:<global>,NAMESPACE_BLOCK,<global>,1,tools\benchcat\crt.cpp,tools\benchcat\crt.cpp:<global>,,false,1,<global>,2
616556,TYPE_DECL,,tools\benchcat\main.cpp:<global>,NAMESPACE_BLOCK,<global>,1,tools\benchcat\main.cpp,tools\benchcat\main.cpp:<global>,,false,1,<global>,7
616560,TYPE_DECL,,,,"class oneseq_dxsm_64_32
    {
        using xtype = uint32_t;
        using itype = uint64_t;

        itype state_;

        static constexpr uint64_t multiplier() noexcept
        {
            return 6364136223846793005ULL;
        }

        static constexpr uint64_t increment() noexcept
        {
            return 1442695040888963407ULL;
        }

        static constexpr itype bump(itype state) noexcept
        {
            return state * multiplier() + increment();
        }

        constexpr itype base_generate0() noexcept
        {
            itype old_state = state_;
            state_ = bump(state_);
            return old_state;
        }

    public:
        explicit constexpr oneseq_dxsm_64_32(itype state = 0xcafef00dd15ea5e5ULL) noexcept :
            state_(bump(state + increment()))
        {
        }

        constexpr xtype operator()() noexcept
        {
            constexpr auto xtypebits = uint8_t(sizeof(xtype) * 8);
            constexpr auto itypebits ...",5,tools\benchcat\main.cpp,pcg_engines.oneseq_dxsm_64_32,,false,42,oneseq_dxsm_64_32,1
616561,TYPE_DECL,uint32_t,,,using xtype = uint32_t;,9,tools\benchcat\main.cpp,xtype,,false,44,xtype,1
616562,TYPE_DECL,uint64_t,,,using itype = uint64_t;,9,tools\benchcat\main.cpp,itype,,false,45,itype,2
617054,TYPE_DECL,,,,"struct FormatResult
{
    LONGLONG integral;
    LONGLONG fractional;
    const char* suffix;
}",1,tools\benchcat\main.cpp,FormatResult,,false,253,FormatResult,13
617247,TYPE_DECL,,,,"enum class VtMode
{
    Off,
    On,
    Italic,
    Color
}",1,tools\benchcat\main.cpp,VtMode,,false,320,VtMode,17
618306,TYPE_DECL,,tools\buffersize\main.cpp:<global>,NAMESPACE_BLOCK,<global>,1,tools\buffersize\main.cpp,tools\buffersize\main.cpp:<global>,,false,1,<global>,15
618607,TYPE_DECL,,tools\closetest\closetest.cpp:<global>,NAMESPACE_BLOCK,<global>,1,tools\closetest\closetest.cpp,tools\closetest\closetest.cpp:<global>,,false,1,<global>,16
618711,TYPE_DECL,,,,"struct PipeHandles
{
    HANDLE rh;
    HANDLE wh;
}",1,tools\closetest\closetest.cpp,PipeHandles,,false,221,PipeHandles,13
620504,TYPE_DECL,,tools\echokey\main.cpp:<global>,NAMESPACE_BLOCK,<global>,1,tools\echokey\main.cpp,tools\echokey\main.cpp:<global>,,false,1,<global>,8
621587,TYPE_DECL,,tools\fontlist\main.cpp:<global>,NAMESPACE_BLOCK,<global>,1,tools\fontlist\main.cpp,tools\fontlist\main.cpp:<global>,,false,1,<global>,4
621743,TYPE_DECL,,tools\integrity\exeuwp\consoleuwp.cpp:<global>,NAMESPACE_BLOCK,<global>,1,tools\integrity\exeuwp\consoleuwp.cpp,tools\integrity\exeuwp\consoleuwp.cpp:<global>,,false,1,<global>,7
621753,TYPE_DECL,,tools\integrity\exewin32\main.cpp:<global>,NAMESPACE_BLOCK,<global>,1,tools\integrity\exewin32\main.cpp,tools\integrity\exewin32\main.cpp:<global>,,false,1,<global>,3
621781,TYPE_DECL,,tools\integrity\lib\util.cpp:<global>,NAMESPACE_BLOCK,<global>,1,tools\integrity\lib\util.cpp,tools\integrity\lib\util.cpp:<global>,,false,1,<global>,8
621948,TYPE_DECL,,tools\integrity\lib\util.hpp:<global>,NAMESPACE_BLOCK,<global>,1,tools\integrity\lib\util.hpp,tools\integrity\lib\util.hpp:<global>,,false,1,<global>,1
621959,TYPE_DECL,,tools\lnkd\main.cpp:<global>,NAMESPACE_BLOCK,<global>,1,tools\lnkd\main.cpp,tools\lnkd\main.cpp:<global>,,false,1,<global>,2
622061,TYPE_DECL,,tools\lnkd\precomp.hpp:<global>,NAMESPACE_BLOCK,<global>,1,tools\lnkd\precomp.hpp,tools\lnkd\precomp.hpp:<global>,,false,1,<global>,15
622068,TYPE_DECL,,tools\nihilist\main.cpp:<global>,NAMESPACE_BLOCK,<global>,1,tools\nihilist\main.cpp,tools\nihilist\main.cpp:<global>,,false,1,<global>,2
622091,TYPE_DECL,,tools\pixels\main.cpp:<global>,NAMESPACE_BLOCK,<global>,1,tools\pixels\main.cpp,tools\pixels\main.cpp:<global>,,false,1,<global>,3
623266,TYPE_DECL,,tools\pixels\precomp.hpp:<global>,NAMESPACE_BLOCK,<global>,1,tools\pixels\precomp.hpp,tools\pixels\precomp.hpp:<global>,,false,1,<global>,21
623273,TYPE_DECL,,tools\scratch\main.cpp:<global>,NAMESPACE_BLOCK,<global>,1,tools\scratch\main.cpp,tools\scratch\main.cpp:<global>,,false,1,<global>,2
623308,TYPE_DECL,,tools\vtpipeterm\VtConsole.cpp:<global>,NAMESPACE_BLOCK,<global>,1,tools\vtpipeterm\VtConsole.cpp,tools\vtpipeterm\VtConsole.cpp:<global>,,false,1,<global>,12
624015,TYPE_DECL,,tools\vtpipeterm\VtConsole.hpp:<global>,NAMESPACE_BLOCK,<global>,1,tools\vtpipeterm\VtConsole.hpp,tools\vtpipeterm\VtConsole.hpp:<global>,,false,1,<global>,5
624024,TYPE_DECL,,,,"class VtConsole
{
public:
    VtConsole(const PipeReadCallback pfnReadCallback, const bool fHeadless, const bool fUseConpty, const COORD initialSize);
    void spawn();
    void spawn(const std::wstring& command);

    HANDLE inPipe();
    HANDLE outPipe();

    static const DWORD sInPipeOpenMode = PIPE_ACCESS_DUPLEX;
    static const DWORD sOutPipeOpenMode = PIPE_ACCESS_INBOUND;

    static const DWORD sInPipeMode = PIPE_TYPE_BYTE | PIPE_READMODE_BYTE | PIPE_WAIT;
    static const DWORD sOutPipeMode = PIPE_TYPE_BYTE | PIPE_READMODE_BYTE | PIPE_WAIT;

    void activate();
    void deactivate();

    void signalWindow(unsigned short sx, unsigned short sy);

    static DWORD WINAPI StaticOutputThreadProc(LPVOID lpParameter);

    bool WriteInput(std::string& seq);

    bool Repaint();
    bool Resize(const unsigned short rows, const unsigned short cols);

private:
    COORD _lastDimensions;

    PROCESS_INFORMATION _piPty;
    PROCESS_INFORMATION _piClient;

    HANDLE _outPipe = INVA...",1,tools\vtpipeterm\VtConsole.hpp,VtConsole,,false,25,VtConsole,2
624185,TYPE_DECL,,tools\vtpipeterm\main.cpp:<global>,NAMESPACE_BLOCK,<global>,1,tools\vtpipeterm\main.cpp,tools\vtpipeterm\main.cpp:<global>,,false,1,<global>,16
625663,TYPE_DECL,,tsf\ConsoleTSF.cpp:<global>,NAMESPACE_BLOCK,<global>,1,tsf\ConsoleTSF.cpp,tsf\ConsoleTSF.cpp:<global>,,false,1,<global>,4
626810,TYPE_DECL,,tsf\ConsoleTSF.hpp:<global>,NAMESPACE_BLOCK,<global>,1,tsf\ConsoleTSF.hpp,tsf\ConsoleTSF.hpp:<global>,,false,1,<global>,1
626813,TYPE_DECL,,,,class CConversionArea,1,tsf\ConsoleTSF.hpp,CConversionArea,,false,24,CConversionArea,1
626814,TYPE_DECL,,,,"class CConsoleTSF final :
    public ITfContextOwner,
    public ITfContextOwnerCompositionSink,
    public ITfInputProcessorProfileActivationSink,
    public ITfUIElementSink,
    public ITfCleanupContextSink,
    public ITfTextEditSink
{
public:
    CConsoleTSF(HWND hwndConsole,
                GetSuggestionWindowPos pfnPosition,
                GetTextBoxAreaPos pfnTextArea) :
        _hwndConsole(hwndConsole),
        _pfnPosition(pfnPosition),
        _pfnTextArea(pfnTextArea),
        _cRef(1),
        _tid()
    {
    }

    virtual ~CConsoleTSF() = default;
    [[nodiscard]] HRESULT Initialize();
    void Uninitialize();

public:
    // IUnknown methods
    STDMETHODIMP QueryInterface(REFIID riid, void** ppvObj);
    STDMETHODIMP_(ULONG)
    AddRef(void);
    STDMETHODIMP_(ULONG)
    Release(void);

    // ITfContextOwner
    STDMETHODIMP GetACPFromPoint(const POINT*, DWORD, LONG* pCP)
    {
        if (pCP)
        {
            *pCP = 0;
        }

        return S_OK;
   ...",1,tsf\ConsoleTSF.hpp,CConsoleTSF,ITfContextOwner;ITfContextOwnerCompositionSink;ITfInputProcessorProfileActivationSink;ITfUIElementSink;ITfCleanupContextSink;ITfTextEditSink,false,26,CConsoleTSF,2
627198,TYPE_DECL,,tsf\TfCatUtil.cpp:<global>,NAMESPACE_BLOCK,<global>,1,tsf\TfCatUtil.cpp,tsf\TfCatUtil.cpp:<global>,,false,1,<global>,3
627239,TYPE_DECL,,tsf\TfCatUtil.hpp:<global>,NAMESPACE_BLOCK,<global>,1,tsf\TfCatUtil.hpp,tsf\TfCatUtil.hpp:<global>,,false,1,<global>,1
627242,TYPE_DECL,,,,"class CicCategoryMgr
{
public:
    CicCategoryMgr();
    virtual ~CicCategoryMgr();

public:
    [[nodiscard]] HRESULT GetGUIDFromGUIDATOM(TfGuidAtom guidatom, GUID* pguid);
    [[nodiscard]] HRESULT InitCategoryInstance();

    inline ITfCategoryMgr* GetCategoryMgr() { return m_pcat.get(); }

private:
    wil::com_ptr_nothrow<ITfCategoryMgr> m_pcat;
}",1,tsf\TfCatUtil.hpp,CicCategoryMgr,,false,24,CicCategoryMgr,1
627281,TYPE_DECL,,tsf\TfConvArea.cpp:<global>,NAMESPACE_BLOCK,<global>,1,tsf\TfConvArea.cpp,tsf\TfConvArea.cpp:<global>,,false,1,<global>,5
627497,TYPE_DECL,,tsf\TfConvArea.hpp:<global>,NAMESPACE_BLOCK,<global>,1,tsf\TfConvArea.hpp,tsf\TfConvArea.hpp:<global>,,false,1,<global>,1
627500,TYPE_DECL,,,,"class CConversionArea
{
public:
    [[nodiscard]] HRESULT DrawComposition(const std::wstring_view CompStr,
                                          const std::vector<TF_DISPLAYATTRIBUTE>& DisplayAttributes,
                                          const DWORD CompCursorPos = -1);

    [[nodiscard]] HRESULT ClearComposition();

    [[nodiscard]] HRESULT DrawResult(const std::wstring_view ResultStr);

private:
    [[nodiscard]] std::vector<BYTE> _DisplayAttributesToEncodedAttributes(const std::vector<TF_DISPLAYATTRIBUTE>& DisplayAttributes,
                                                                          const DWORD CompCursorPos);
}",1,tsf\TfConvArea.hpp,CConversionArea,,false,30,CConversionArea,1
627525,TYPE_DECL,,tsf\TfCtxtComp.hpp:<global>,NAMESPACE_BLOCK,<global>,1,tsf\TfCtxtComp.hpp,tsf\TfCtxtComp.hpp:<global>,,false,1,<global>,1
627528,TYPE_DECL,,,,"class CCompCursorPos
{
public:
    CCompCursorPos()
    {
        m_CursorPosition = 0;
    }

    void SetCursorPosition(DWORD CursorPosition)
    {
        m_CursorPosition = CursorPosition;
    }

    DWORD GetCursorPosition() { return m_CursorPosition; }

private:
    DWORD m_CursorPosition;
}",1,tsf\TfCtxtComp.hpp,CCompCursorPos,,false,27,CCompCursorPos,1
627557,TYPE_DECL,,tsf\TfDispAttr.cpp:<global>,NAMESPACE_BLOCK,<global>,1,tsf\TfDispAttr.cpp,tsf\TfDispAttr.cpp:<global>,,false,1,<global>,3
627775,TYPE_DECL,,tsf\TfDispAttr.hpp:<global>,NAMESPACE_BLOCK,<global>,1,tsf\TfDispAttr.hpp,tsf\TfDispAttr.hpp:<global>,,false,1,<global>,1
627778,TYPE_DECL,,,,"class CicDisplayAttributeMgr
{
public:
    CicDisplayAttributeMgr();
    virtual ~CicDisplayAttributeMgr();

public:
    [[nodiscard]] HRESULT GetDisplayAttributeTrackPropertyRange(TfEditCookie ec,
                                                                ITfContext* pic,
                                                                ITfRange* pRange,
                                                                ITfReadOnlyProperty** ppProp,
                                                                IEnumTfRanges** ppEnum,
                                                                ULONG* pulNumProp);
    [[nodiscard]] HRESULT GetDisplayAttributeData(ITfCategoryMgr* pcat,
                                                  TfEditCookie ec,
                                                  ITfReadOnlyProperty* pProp,
                                                  ITfRange* pRange,
                                                  TF_DISPLAYATTRIBUTE* pda,
         ...",1,tsf\TfDispAttr.hpp,CicDisplayAttributeMgr,,false,24,CicDisplayAttributeMgr,1
627836,TYPE_DECL,,tsf\TfEditSession.cpp:<global>,NAMESPACE_BLOCK,<global>,1,tsf\TfEditSession.cpp,tsf\TfEditSession.cpp:<global>,,false,1,<global>,6
629852,TYPE_DECL,,tsf\TfEditSession.hpp:<global>,NAMESPACE_BLOCK,<global>,1,tsf\TfEditSession.hpp,tsf\TfEditSession.hpp:<global>,,false,1,<global>,1
629855,TYPE_DECL,,,,class CicCategoryMgr,1,tsf\TfEditSession.hpp,CicCategoryMgr,,false,24,CicCategoryMgr,1
629856,TYPE_DECL,,,,class CicDisplayAttributeMgr,1,tsf\TfEditSession.hpp,CicDisplayAttributeMgr,,false,25,CicDisplayAttributeMgr,2
629873,TYPE_DECL,,,,"class CEditSessionObject : public ITfEditSession
{
public:
    CEditSessionObject() :
        m_cRef(1) {}
    virtual ~CEditSessionObject() = default;

public:
    //
    // IUnknown methods
    //
    STDMETHODIMP QueryInterface(REFIID riid, void** ppvObj);
    STDMETHODIMP_(ULONG)
    AddRef(void);
    STDMETHODIMP_(ULONG)
    Release(void);

    //
    // ITfEditSession method
    //
    STDMETHODIMP DoEditSession(TfEditCookie ec)
    {
        auto hr = _DoEditSession(ec);
        Release(); // Release reference count for asynchronous edit session.
        return hr;
    }

    //
    // ImmIfSessionObject methods
    //
protected:
    [[nodiscard]] virtual HRESULT _DoEditSession(TfEditCookie ec) = 0;

    //
    // EditSession methods.
    //
public:
    [[nodiscard]] static HRESULT GetAllTextRange(TfEditCookie ec,
                                                 ITfContext* ic,
                                                 ITfRange** range,
                                ...",1,tsf\TfEditSession.hpp,CEditSessionObject,ITfEditSession,false,41,CEditSessionObject,5
630002,TYPE_DECL,,,,"class CEditSessionCompositionComplete : public CEditSessionObject
{
public:
    CEditSessionCompositionComplete() = default;

    [[nodiscard]] HRESULT _DoEditSession(TfEditCookie ec)
    {
        return CompComplete(ec);
    }

    [[nodiscard]] HRESULT CompComplete(TfEditCookie ec);
}",1,tsf\TfEditSession.hpp,CEditSessionCompositionComplete,CEditSessionObject,false,150,CEditSessionCompositionComplete,6
630020,TYPE_DECL,,,,"class CEditSessionCompositionCleanup : public CEditSessionObject
{
public:
    CEditSessionCompositionCleanup() = default;

    [[nodiscard]] HRESULT _DoEditSession(TfEditCookie ec)
    {
        return EmptyCompositionRange(ec);
    }

    [[nodiscard]] HRESULT EmptyCompositionRange(TfEditCookie ec);
}",1,tsf\TfEditSession.hpp,CEditSessionCompositionCleanup,CEditSessionObject,false,169,CEditSessionCompositionCleanup,7
630038,TYPE_DECL,,,,"class CEditSessionUpdateCompositionString : public CEditSessionObject
{
public:
    CEditSessionUpdateCompositionString() = default;

    [[nodiscard]] HRESULT _DoEditSession(TfEditCookie ec)
    {
        return UpdateCompositionString(ec);
    }

    [[nodiscard]] HRESULT UpdateCompositionString(TfEditCookie ec);

private:
    [[nodiscard]] HRESULT _IsInterimSelection(TfEditCookie ec, ITfRange** pInterimRange, BOOL* pfInterim);

    [[nodiscard]] HRESULT _MakeCompositionString(TfEditCookie ec,
                                                 ITfRange* FullTextRange,
                                                 BOOL bInWriteSession,
                                                 CicCategoryMgr* pCicCatMgr,
                                                 CicDisplayAttributeMgr* pCicDispAttr);

    [[nodiscard]] HRESULT _MakeInterimString(TfEditCookie ec,
                                             ITfRange* FullTextRange,
                                             ITfRange...",1,tsf\TfEditSession.hpp,CEditSessionUpdateCompositionString,CEditSessionObject,false,188,CEditSessionUpdateCompositionString,8
630097,TYPE_DECL,,tsf\TfTxtevCb.cpp:<global>,NAMESPACE_BLOCK,<global>,1,tsf\TfTxtevCb.cpp,tsf\TfTxtevCb.cpp:<global>,,false,1,<global>,4
630434,TYPE_DECL,,tsf\contsf.cpp:<global>,NAMESPACE_BLOCK,<global>,1,tsf\contsf.cpp,tsf\contsf.cpp:<global>,,false,1,<global>,2
630528,TYPE_DECL,,tsf\globals.hpp:<global>,NAMESPACE_BLOCK,<global>,1,tsf\globals.hpp,tsf\globals.hpp:<global>,,false,1,<global>,1
630535,TYPE_DECL,,tsf\precomp.cpp:<global>,NAMESPACE_BLOCK,<global>,1,tsf\precomp.cpp,tsf\precomp.cpp:<global>,,false,1,<global>,2
630574,TYPE_DECL,,tsf\precomp.hpp:<global>,NAMESPACE_BLOCK,<global>,1,tsf\precomp.hpp,tsf\precomp.hpp:<global>,,false,1,<global>,18
630583,TYPE_DECL,,types\CodepointWidthDetector.cpp:<global>,NAMESPACE_BLOCK,<global>,1,types\CodepointWidthDetector.cpp,types\CodepointWidthDetector.cpp:<global>,,false,1,<global>,3
630587,TYPE_DECL,,,,"struct UnicodeRange final
    {
        char32_t lowerBound;
        char32_t upperBound : 31;
        char32_t isAmbiguous : 1;
    }",5,types\CodepointWidthDetector.cpp,anonymous_namespace_1.UnicodeRange,,false,10,UnicodeRange,1
632319,TYPE_DECL,,types\ColorFix.cpp:<global>,NAMESPACE_BLOCK,<global>,1,types\ColorFix.cpp,types\ColorFix.cpp:<global>,,false,1,<global>,3
632645,TYPE_DECL,,,,"struct Lab
    {
        float l;
        float a;
        float b;
    }",5,types\ColorFix.cpp,oklab.Lab,,false,90,Lab,1
632649,TYPE_DECL,,,,"struct RGB
    {
        float r;
        float g;
        float b;
    }",5,types\ColorFix.cpp,oklab.RGB,,false,97,RGB,2
633108,TYPE_DECL,,types\GlyphWidth.cpp:<global>,NAMESPACE_BLOCK,<global>,1,types\GlyphWidth.cpp,types\GlyphWidth.cpp:<global>,,false,1,<global>,4
633165,TYPE_DECL,,types\IControlAccessibilityInfo.hpp:<global>,NAMESPACE_BLOCK,<global>,1,types\IControlAccessibilityInfo.hpp,types\IControlAccessibilityInfo.hpp:<global>,,false,1,<global>,2
633171,TYPE_DECL,,,,"class IControlAccessibilityInfo
    {
    public:
        virtual ~IControlAccessibilityInfo() = 0;

        virtual til::size GetFontSize() const noexcept = 0;
        virtual til::rect GetBounds() const noexcept = 0;
        virtual til::rect GetPadding() const noexcept = 0;
        virtual double GetScaleFactor() const noexcept = 0;
        virtual void ChangeViewport(const til::inclusive_rect& NewWindow) = 0;
        virtual HRESULT GetHostUiaProvider(IRawElementProviderSimple** provider) = 0;

    protected:
        IControlAccessibilityInfo() = default;
        IControlAccessibilityInfo(const IControlAccessibilityInfo&) = default;
        IControlAccessibilityInfo(IControlAccessibilityInfo&&) = default;
        IControlAccessibilityInfo& operator=(const IControlAccessibilityInfo&) = default;
        IControlAccessibilityInfo& operator=(IControlAccessibilityInfo&&) = default;
    }",5,types\IControlAccessibilityInfo.hpp,Microsoft.Console.Types.IControlAccessibilityInfo,,false,22,IControlAccessibilityInfo,1
633232,TYPE_DECL,,types\IUiaEventDispatcher.hpp:<global>,NAMESPACE_BLOCK,<global>,1,types\IUiaEventDispatcher.hpp,types\IUiaEventDispatcher.hpp:<global>,,false,1,<global>,1
633238,TYPE_DECL,,,,"class IUiaEventDispatcher
    {
    public:
        virtual ~IUiaEventDispatcher() = default;
        virtual void SignalSelectionChanged() = 0;
        virtual void SignalTextChanged() = 0;
        virtual void SignalCursorChanged() = 0;
        virtual void NotifyNewOutput(std::wstring_view newOutput) = 0;
    }",5,types\IUiaEventDispatcher.hpp,Microsoft.Console.Types.IUiaEventDispatcher,,false,20,IUiaEventDispatcher,1
633262,TYPE_DECL,,types\IUiaTraceable.hpp:<global>,NAMESPACE_BLOCK,<global>,1,types\IUiaTraceable.hpp,types\IUiaTraceable.hpp:<global>,,false,1,<global>,1
633268,TYPE_DECL,long long unsigned,,,using IdType = unsigned long long;,5,types\IUiaTraceable.hpp,IdType,,false,19,IdType,1
633273,TYPE_DECL,,,,"class IUiaTraceable
    {
    public:
        IdType GetId() const noexcept
        {
            return _id;
        }

        // Routine Description:
        // - assigns an ID to the IUiaTraceable object if it doesn't have one
        // Arguments:
        // - id - the id value that we are trying to assign
        // Return Value:
        // - true if the assignment was successful, false otherwise (it already has an id).
        bool AssignId(IdType id) noexcept
        {
            if (_id == InvalidId)
            {
                _id = id;
                return true;
            }
            else
            {
                return false;
            }
        }

    private:
        // used to debug objects passed back and forth
        // between the provider and the client
        IdType _id{};
    }",5,types\IUiaTraceable.hpp,Microsoft.Console.Types.IUiaTraceable,,false,22,IUiaTraceable,4
633315,TYPE_DECL,,types\ScreenInfoUiaProviderBase.cpp:<global>,NAMESPACE_BLOCK,<global>,1,types\ScreenInfoUiaProviderBase.cpp,types\ScreenInfoUiaProviderBase.cpp:<global>,,false,1,<global>,4
633464,TYPE_DECL,,types\ScreenInfoUiaProviderBase.hpp:<global>,NAMESPACE_BLOCK,<global>,1,types\ScreenInfoUiaProviderBase.hpp,types\ScreenInfoUiaProviderBase.hpp:<global>,,false,1,<global>,7
633470,TYPE_DECL,,,,class Viewport,5,types\ScreenInfoUiaProviderBase.hpp,Microsoft.Console.Types.Viewport,,false,35,Viewport,1
633471,TYPE_DECL,,,,"class ScreenInfoUiaProviderBase :
        public WRL::RuntimeClass<WRL::RuntimeClassFlags<WRL::ClassicCom | WRL::InhibitFtmBase>, IRawElementProviderSimple, IRawElementProviderFragment, ITextProvider>,
        public IUiaTraceable
    {
    public:
        virtual HRESULT RuntimeClassInitialize(_In_ Render::IRenderData* pData, _In_ std::wstring_view wordDelimiters = UiaTextRangeBase::DefaultWordDelimiter) noexcept;

        ScreenInfoUiaProviderBase(const ScreenInfoUiaProviderBase&) = delete;
        ScreenInfoUiaProviderBase(ScreenInfoUiaProviderBase&&) = delete;
        ScreenInfoUiaProviderBase& operator=(const ScreenInfoUiaProviderBase&) = delete;
        ScreenInfoUiaProviderBase& operator=(ScreenInfoUiaProviderBase&&) = delete;
        ~ScreenInfoUiaProviderBase() = default;

        [[nodiscard]] HRESULT Signal(_In_ EVENTID id);
        virtual void ChangeViewport(const til::inclusive_rect& NewWindow) = 0;

        // IRawElementProviderSimple methods
        IFACEMETHODIMP g...",5,types\ScreenInfoUiaProviderBase.hpp,Microsoft.Console.Types.ScreenInfoUiaProviderBase,"WRL.RuntimeClass<WRL.RuntimeClassFlags<WRL.ClassicCom | WRL.InhibitFtmBase>, IRawElementProviderSimple, IRawElementProviderFragment, ITextProvider>;IUiaTraceable",false,37,ScreenInfoUiaProviderBase,2
633574,TYPE_DECL,,types\TermControlUiaProvider.cpp:<global>,NAMESPACE_BLOCK,<global>,1,types\TermControlUiaProvider.cpp,types\TermControlUiaProvider.cpp:<global>,,false,1,<global>,3
633635,TYPE_DECL,,types\TermControlUiaProvider.hpp:<global>,NAMESPACE_BLOCK,<global>,1,types\TermControlUiaProvider.hpp,types\TermControlUiaProvider.hpp:<global>,,false,1,<global>,5
633640,TYPE_DECL,,,,"class TermControlUiaProvider : public Microsoft::Console::Types::ScreenInfoUiaProviderBase
    {
    public:
        TermControlUiaProvider() = default;
        HRESULT RuntimeClassInitialize(_In_ Console::Render::IRenderData* const renderData,
                                       _In_ ::Microsoft::Console::Types::IControlAccessibilityInfo* controlInfo) noexcept;

        // IRawElementProviderSimple methods
        IFACEMETHODIMP GetPropertyValue(_In_ PROPERTYID idProp,
                                        _Out_ VARIANT* pVariant) noexcept override;

        // IRawElementProviderFragment methods
        IFACEMETHODIMP Navigate(_In_ NavigateDirection direction,
                                _COM_Outptr_result_maybenull_ IRawElementProviderFragment** ppProvider) noexcept override;
        IFACEMETHODIMP get_HostRawElementProvider(IRawElementProviderSimple** ppProvider) noexcept override;
        IFACEMETHODIMP get_BoundingRectangle(_Out_ UiaRect* pRect) noexcept override;
   ...",5,types\TermControlUiaProvider.hpp,Microsoft.Terminal.TermControlUiaProvider,Microsoft.Console.Types.ScreenInfoUiaProviderBase,false,28,TermControlUiaProvider,1
633715,TYPE_DECL,,types\TermControlUiaTextRange.cpp:<global>,NAMESPACE_BLOCK,<global>,1,types\TermControlUiaTextRange.cpp,types\TermControlUiaTextRange.cpp:<global>,,false,1,<global>,4
633924,TYPE_DECL,,types\TermControlUiaTextRange.hpp:<global>,NAMESPACE_BLOCK,<global>,1,types\TermControlUiaTextRange.hpp,types\TermControlUiaTextRange.hpp:<global>,,false,1,<global>,3
633929,TYPE_DECL,,,,"class TermControlUiaTextRange final : public Microsoft::Console::Types::UiaTextRangeBase
    {
    public:
        TermControlUiaTextRange() = default;

        // degenerate range
        HRESULT RuntimeClassInitialize(_In_ Console::Render::IRenderData* pData,
                                       _In_ IRawElementProviderSimple* const pProvider,
                                       _In_ const std::wstring_view wordDelimiters = DefaultWordDelimiter) noexcept override;

        // degenerate range at cursor position
        HRESULT RuntimeClassInitialize(_In_ Console::Render::IRenderData* pData,
                                       _In_ IRawElementProviderSimple* const pProvider,
                                       const Cursor& cursor,
                                       const std::wstring_view wordDelimiters = DefaultWordDelimiter) noexcept override;

        // specific endpoint range
        HRESULT RuntimeClassInitialize(_In_ Console::Render::IRenderData* pData,
     ...",5,types\TermControlUiaTextRange.hpp,Microsoft.Terminal.TermControlUiaTextRange,Microsoft.Console.Types.UiaTextRangeBase,false,24,TermControlUiaTextRange,1
633964,TYPE_DECL,,types\ThemeUtils.cpp:<global>,NAMESPACE_BLOCK,<global>,1,types\ThemeUtils.cpp,types\ThemeUtils.cpp:<global>,,false,1,<global>,3
633986,TYPE_DECL,,types\UiaTextRangeBase.cpp:<global>,NAMESPACE_BLOCK,<global>,1,types\UiaTextRangeBase.cpp,types\UiaTextRangeBase.cpp:<global>,,false,1,<global>,4
635129,TYPE_DECL,,types\UiaTextRangeBase.hpp:<global>,NAMESPACE_BLOCK,<global>,1,types\UiaTextRangeBase.hpp,types\UiaTextRangeBase.hpp:<global>,,false,1,<global>,5
635135,TYPE_DECL,,,,"class UiaTextRangeBase : public WRL::RuntimeClass<WRL::RuntimeClassFlags<WRL::ClassicCom | WRL::InhibitFtmBase>, ITextRangeProvider>, public IUiaTraceable
    {
    protected:
        // indicates which direction a movement operation
        // is going
        enum class MovementDirection
        {
            Forward,
            Backward
        };

    public:
        // The default word delimiter for UiaTextRanges
        static constexpr std::wstring_view DefaultWordDelimiter{ &UNICODE_SPACE, 1 };

        // degenerate range
        virtual HRESULT RuntimeClassInitialize(_In_ Render::IRenderData* pData,
                                               _In_ IRawElementProviderSimple* const pProvider,
                                               _In_ std::wstring_view wordDelimiters = DefaultWordDelimiter) noexcept;

        // degenerate range at cursor position
        virtual HRESULT RuntimeClassInitialize(_In_ Render::IRenderData* pData,
                                    ...",5,types\UiaTextRangeBase.hpp,Microsoft.Console.Types.UiaTextRangeBase,"WRL.RuntimeClass<WRL.RuntimeClassFlags<WRL.ClassicCom | WRL.InhibitFtmBase>, ITextRangeProvider>;IUiaTraceable",false,33,UiaTextRangeBase,1
635136,TYPE_DECL,,,,"enum class MovementDirection
        {
            Forward,
            Backward
        }",9,types\UiaTextRangeBase.hpp,Microsoft.Console.Types.UiaTextRangeBase.MovementDirection,,false,38,MovementDirection,1
635297,TYPE_DECL,,,,friend class ::UiaTextRangeTests,9,types\UiaTextRangeBase.hpp,Microsoft.Console.Types.UiaTextRangeBase.UiaTextRangeTests,,false,186,UiaTextRangeTests,60
635298,TYPE_DECL,,,,friend class UiaTracing,9,types\UiaTextRangeBase.hpp,Microsoft.Console.Types.UiaTextRangeBase.UiaTracing,,false,188,UiaTracing,61
635346,TYPE_DECL,,types\UiaTracing.cpp:<global>,NAMESPACE_BLOCK,<global>,1,types\UiaTracing.cpp,types\UiaTracing.cpp:<global>,,false,1,<global>,3
637143,TYPE_DECL,,types\UiaTracing.hpp:<global>,NAMESPACE_BLOCK,<global>,1,types\UiaTracing.hpp,types\UiaTracing.hpp:<global>,,false,1,<global>,5
637150,TYPE_DECL,,,,"class UiaTracing final
    {
    public:
        enum class AttributeType
        {
            Standard,
            Mixed,
            Unsupported,
            Error
        };

        class TextRange final
        {
        public:
            static void Constructor(UiaTextRangeBase& result) noexcept;
            static void Clone(const UiaTextRangeBase& base, UiaTextRangeBase& result) noexcept;
            static void Compare(const UiaTextRangeBase& base, const UiaTextRangeBase& other, bool result) noexcept;
            static void CompareEndpoints(const UiaTextRangeBase& base, const TextPatternRangeEndpoint endpoint, const UiaTextRangeBase& other, TextPatternRangeEndpoint otherEndpoint, int result) noexcept;
            static void ExpandToEnclosingUnit(TextUnit unit, const UiaTextRangeBase& result) noexcept;
            static void FindAttribute(const UiaTextRangeBase& base, TEXTATTRIBUTEID attributeId, VARIANT val, BOOL searchBackwards, const UiaTextRangeBase& result, Attri...",5,types\UiaTracing.hpp,Microsoft.Console.Types.UiaTracing,,false,29,UiaTracing,1
637151,TYPE_DECL,,,,"enum class AttributeType
        {
            Standard,
            Mixed,
            Unsupported,
            Error
        }",9,types\UiaTracing.hpp,Microsoft.Console.Types.UiaTracing.AttributeType,,false,32,AttributeType,1
637156,TYPE_DECL,,,,"class TextRange final
        {
        public:
            static void Constructor(UiaTextRangeBase& result) noexcept;
            static void Clone(const UiaTextRangeBase& base, UiaTextRangeBase& result) noexcept;
            static void Compare(const UiaTextRangeBase& base, const UiaTextRangeBase& other, bool result) noexcept;
            static void CompareEndpoints(const UiaTextRangeBase& base, const TextPatternRangeEndpoint endpoint, const UiaTextRangeBase& other, TextPatternRangeEndpoint otherEndpoint, int result) noexcept;
            static void ExpandToEnclosingUnit(TextUnit unit, const UiaTextRangeBase& result) noexcept;
            static void FindAttribute(const UiaTextRangeBase& base, TEXTATTRIBUTEID attributeId, VARIANT val, BOOL searchBackwards, const UiaTextRangeBase& result, AttributeType attrType = AttributeType::Standard) noexcept;
            static void FindText(const UiaTextRangeBase& base, const std::wstring_view& text, bool searchBackward, bool ignoreCase, c...",9,types\UiaTracing.hpp,Microsoft.Console.Types.UiaTracing.TextRange,,false,40,TextRange,2
637285,TYPE_DECL,,,,"class TextProvider final
        {
        public:
            static void Constructor(ScreenInfoUiaProviderBase& result) noexcept;
            static void get_ProviderOptions(const ScreenInfoUiaProviderBase& base, ProviderOptions options) noexcept;
            static void GetPatternProvider(const ScreenInfoUiaProviderBase& base, PATTERNID patternId) noexcept;
            static void GetPropertyValue(const ScreenInfoUiaProviderBase& base, PROPERTYID propertyId) noexcept;
            static void get_HostRawElementProvider(const ScreenInfoUiaProviderBase& base) noexcept;
            static void GetRuntimeId(const ScreenInfoUiaProviderBase& base) noexcept;
            static void GetEmbeddedFragmentRoots(const ScreenInfoUiaProviderBase& base) noexcept;
            static void SetFocus(const ScreenInfoUiaProviderBase& base) noexcept;
            static void GetSelection(const ScreenInfoUiaProviderBase& base, const UiaTextRangeBase& result) noexcept;
            static void GetVisibleRan...",9,types\UiaTracing.hpp,Microsoft.Console.Types.UiaTracing.TextProvider,,false,64,TextProvider,3
637366,TYPE_DECL,,,,"class Signal final
        {
        public:
            static void SelectionChanged() noexcept;
            static void TextChanged() noexcept;
            static void CursorChanged() noexcept;
        }",9,types\UiaTracing.hpp,Microsoft.Console.Types.UiaTracing.Signal,,false,83,Signal,4
637464,TYPE_DECL,,types\colorTable.cpp:<global>,NAMESPACE_BLOCK,<global>,1,types\colorTable.cpp,types\colorTable.cpp:<global>,,false,1,<global>,4
638990,TYPE_DECL,,types\convert.cpp:<global>,NAMESPACE_BLOCK,<global>,1,types\convert.cpp,types\convert.cpp:<global>,,false,1,<global>,4
639267,TYPE_DECL,,types\inc\CodepointWidthDetector.hpp:<global>,NAMESPACE_BLOCK,<global>,1,types\inc\CodepointWidthDetector.hpp,types\inc\CodepointWidthDetector.hpp:<global>,,false,1,<global>,2
639270,TYPE_DECL,,,,"class CodepointWidthDetector final
{
public:
    CodepointWidth GetWidth(const std::wstring_view& glyph) noexcept;
    bool IsWide(const std::wstring_view& glyph) noexcept;
    void SetFallbackMethod(std::function<bool(const std::wstring_view&)> pfnFallback) noexcept;
    void NotifyFontChanged() noexcept;

#ifdef UNIT_TESTING
    friend class CodepointWidthDetectorTests;
#endif

private:
    uint8_t _lookupGlyphWidth(char32_t codepoint, const std::wstring_view& glyph) noexcept;
    uint8_t _checkFallbackViaCache(char32_t codepoint, const std::wstring_view& glyph) noexcept;

    std::unordered_map<char32_t, uint8_t> _fallbackCache;
    std::function<bool(const std::wstring_view&)> _pfnFallbackMethod;
}",1,types\inc\CodepointWidthDetector.hpp,CodepointWidthDetector,,false,19,CodepointWidthDetector,1
639290,TYPE_DECL,,,,friend class CodepointWidthDetectorTests,5,types\inc\CodepointWidthDetector.hpp,CodepointWidthDetector.CodepointWidthDetectorTests,,false,28,CodepointWidthDetectorTests,5
639307,TYPE_DECL,,types\inc\ColorFix.hpp:<global>,NAMESPACE_BLOCK,<global>,1,types\inc\ColorFix.hpp,types\inc\ColorFix.hpp:<global>,,false,1,<global>,1
639326,TYPE_DECL,,types\inc\GlyphWidth.hpp:<global>,NAMESPACE_BLOCK,<global>,1,types\inc\GlyphWidth.hpp,types\inc\GlyphWidth.hpp:<global>,,false,1,<global>,4
639352,TYPE_DECL,,types\inc\IInputEvent.hpp:<global>,NAMESPACE_BLOCK,<global>,1,types\inc\IInputEvent.hpp,types\inc\IInputEvent.hpp:<global>,,false,1,<global>,2
639355,TYPE_DECL,ANY,,,"using InputEventQueue = til::small_vector<INPUT_RECORD, 16>;",1,types\inc\IInputEvent.hpp,InputEventQueue,,false,12,InputEventQueue,1
639560,TYPE_DECL,,types\inc\ThemeUtils.hpp:<global>,NAMESPACE_BLOCK,<global>,1,types\inc\ThemeUtils.hpp,types\inc\ThemeUtils.hpp:<global>,,false,1,<global>,2
639574,TYPE_DECL,,types\inc\User32Utils.hpp:<global>,NAMESPACE_BLOCK,<global>,1,types\inc\User32Utils.hpp,types\inc\User32Utils.hpp:<global>,,false,1,<global>,1
639607,TYPE_DECL,,types\inc\colorTable.hpp:<global>,NAMESPACE_BLOCK,<global>,1,types\inc\colorTable.hpp,types\inc\colorTable.hpp:<global>,,false,1,<global>,1
639633,TYPE_DECL,,types\inc\convert.hpp:<global>,NAMESPACE_BLOCK,<global>,1,types\inc\convert.hpp,types\inc\convert.hpp:<global>,,false,1,<global>,3
639636,TYPE_DECL,,,,"enum class CodepointWidth : BYTE
{
    Ambiguous = 0, // could be narrow or wide depending on the current codepage and font
    Narrow,
    Wide,
}",1,types\inc\convert.hpp,CodepointWidth,,false,20,CodepointWidth,1
639678,TYPE_DECL,,types\inc\sgrStack.hpp:<global>,NAMESPACE_BLOCK,<global>,1,types\inc\sgrStack.hpp,types\inc\sgrStack.hpp:<global>,,false,1,<global>,4
639684,TYPE_DECL,,,,"class SgrStack
    {
    public:
        SgrStack() noexcept;

        // Method Description:
        // - Saves the specified text attributes onto an internal stack.
        // Arguments:
        // - currentAttributes - The attributes to save onto the stack.
        // - options - If none supplied, the full attributes are saved. Else only the
        //   specified parts of currentAttributes are saved.
        // Return Value:
        // - <none>
        void Push(const TextAttribute& currentAttributes,
                  const VTParameters options) noexcept;

        // Method Description:
        // - Restores text attributes by removing from the top of the internal stack,
        //   combining them with the supplied currentAttributes, if appropriate.
        // Arguments:
        // - currentAttributes - The current text attributes. If only a portion of
        //   attributes were saved on the internal stack, then those attributes will be
        //   combined with the current...",5,types\inc\sgrStack.hpp,Microsoft.Console.VirtualTerminal.SgrStack,,false,22,SgrStack,1
639701,TYPE_DECL,ANY,,,typedef til::enumset<DispatchTypes::SgrSaveRestoreStackOptions> AttrBitset;,73,types\inc\sgrStack.hpp,AttrBitset,,false,54,AttrBitset,5
639709,TYPE_DECL,,,,"struct SavedSgrAttributes
        {
            TextAttribute TextAttributes;
            AttrBitset ValidParts; // flags that indicate which parts of TextAttributes are meaningful
        }",9,types\inc\sgrStack.hpp,Microsoft.Console.VirtualTerminal.SgrStack.SavedSgrAttributes,,false,60,SavedSgrAttributes,7
639724,TYPE_DECL,,types\inc\utils.hpp:<global>,NAMESPACE_BLOCK,<global>,1,types\inc\utils.hpp,types\inc\utils.hpp:<global>,,false,1,<global>,1
639834,TYPE_DECL,,,,"enum FilterOption
    {
        None = 0,
        // Convert CR+LF and LF-only line endings to CR-only.
        CarriageReturnNewline = 1u << 0,
        // For security reasons, remove most control characters.
        ControlCodes = 1u << 1,
    }",5,types\inc\utils.hpp,Microsoft.Console.Utils.FilterOption,,false,57,FilterOption,16
639995,TYPE_DECL,,types\inc\viewport.hpp:<global>,NAMESPACE_BLOCK,<global>,1,types\inc\viewport.hpp,types\inc\viewport.hpp:<global>,,false,1,<global>,1
640001,TYPE_DECL,,,,class Viewport,5,types\inc\viewport.hpp,Microsoft.Console.Types.Viewport,,false,18,Viewport,1
640002,TYPE_DECL,ANY,,,"using SomeViewports = til::some<Viewport, 4>;",5,types\inc\viewport.hpp,SomeViewports,,false,20,SomeViewports,2
640003,TYPE_DECL,,,,"class Viewport final
    {
    public:
        Viewport() = default;

        static Viewport Empty() noexcept;

        static Viewport FromInclusive(const til::inclusive_rect& sr) noexcept;
        static Viewport FromExclusive(const til::rect& sr) noexcept;

        static Viewport FromDimensions(const til::point origin,
                                       const til::CoordType width,
                                       const til::CoordType height) noexcept;

        static Viewport FromDimensions(const til::point origin,
                                       const til::size dimensions) noexcept;

        static Viewport FromDimensions(const til::size dimensions) noexcept;

        static Viewport FromCoord(const til::point origin) noexcept;

        til::CoordType Left() const noexcept;
        til::CoordType RightInclusive() const noexcept;
        til::CoordType RightExclusive() const noexcept;
        til::CoordType Top() const noexcept;
        til::CoordType BottomInc...",5,types\inc\viewport.hpp,Microsoft.Console.Types.Viewport,,false,22,Viewport,3
640153,TYPE_DECL,,,,"enum class XWalk
        {
            LeftToRight,
            RightToLeft
        }",9,types\inc\viewport.hpp,Microsoft.Console.Types.Viewport.XWalk,,false,70,XWalk,32
640156,TYPE_DECL,,,,"enum class YWalk
        {
            TopToBottom,
            BottomToTop
        }",9,types\inc\viewport.hpp,Microsoft.Console.Types.Viewport.YWalk,,false,76,YWalk,33
640159,TYPE_DECL,,,,"struct WalkDir final
        {
            const XWalk x;
            const YWalk y;
        }",9,types\inc\viewport.hpp,Microsoft.Console.Types.Viewport.WalkDir,,false,82,WalkDir,34
640271,TYPE_DECL,,,,friend class ViewportTests,9,types\inc\viewport.hpp,Microsoft.Console.Types.Viewport.ViewportTests,,false,134,ViewportTests,59
640289,TYPE_DECL,,types\precomp.cpp:<global>,NAMESPACE_BLOCK,<global>,1,types\precomp.cpp,types\precomp.cpp:<global>,,false,1,<global>,2
640322,TYPE_DECL,,types\precomp.hpp:<global>,NAMESPACE_BLOCK,<global>,1,types\precomp.hpp,types\precomp.hpp:<global>,,false,1,<global>,15
640331,TYPE_DECL,,types\sgrStack.cpp:<global>,NAMESPACE_BLOCK,<global>,1,types\sgrStack.cpp,types\sgrStack.cpp:<global>,,false,1,<global>,3
640832,TYPE_DECL,,types\ut_types\UtilsTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,types\ut_types\UtilsTests.cpp,types\ut_types\UtilsTests.cpp:<global>,,false,1,<global>,7
640848,TYPE_DECL,,,,"class UtilsTests
{
    TEST_CLASS(UtilsTests);

    TEST_METHOD(TestClampToShortMax);
    TEST_METHOD(TestGuidToString);
    TEST_METHOD(TestSplitString);
    TEST_METHOD(TestFilterStringForPaste);
    TEST_METHOD(TestStringToUint);
    TEST_METHOD(TestColorFromXTermColor);

#if !__INSIDE_WINDOWS
    TEST_METHOD(TestMangleWSLPaths);
#endif

    TEST_METHOD(TestTrimTrailingWhitespace);
    TEST_METHOD(TestDontTrimTrailingWhitespace);

    TEST_METHOD(TestEvaluateStartingDirectory);

    void _VerifyXTermColorResult(const std::wstring_view wstr, DWORD colorValue);
    void _VerifyXTermColorInvalid(const std::wstring_view wstr);
}",1,types\ut_types\UtilsTests.cpp,UtilsTests,,false,18,UtilsTests,1
642345,TYPE_DECL,,types\ut_types\UuidTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,types\ut_types\UuidTests.cpp,types\ut_types\UuidTests.cpp:<global>,,false,1,<global>,5
642414,TYPE_DECL,,types\utils.cpp:<global>,NAMESPACE_BLOCK,<global>,1,types\utils.cpp,types\utils.cpp:<global>,,false,1,<global>,6
644652,TYPE_DECL,,types\viewport.cpp:<global>,NAMESPACE_BLOCK,<global>,1,types\viewport.cpp,types\viewport.cpp:<global>,,false,1,<global>,3
645896,TYPE_DECL,,winconpty\device.hpp:<global>,NAMESPACE_BLOCK,<global>,1,winconpty\device.hpp,winconpty\device.hpp:<global>,,false,1,<global>,2
645940,TYPE_DECL,,winconpty\ft_pty\ConPtyTests.cpp:<global>,NAMESPACE_BLOCK,<global>,1,winconpty\ft_pty\ConPtyTests.cpp,winconpty\ft_pty\ConPtyTests.cpp:<global>,,false,1,<global>,4
646000,TYPE_DECL,ANY,,,"using unique_hpcon = wil::unique_any<HPCON, decltype(&::ClosePseudoConsole), ::ClosePseudoConsole>;",1,winconpty\ft_pty\ConPtyTests.cpp,unique_hpcon,,false,14,unique_hpcon,1
646001,TYPE_DECL,,,,"struct InOut
{
    wil::unique_handle in;
    wil::unique_handle out;
}",1,winconpty\ft_pty\ConPtyTests.cpp,InOut,,false,16,InOut,2
646004,TYPE_DECL,,,,"struct Pipes
{
    InOut our;
    InOut conpty;
}",1,winconpty\ft_pty\ConPtyTests.cpp,Pipes,,false,22,Pipes,3
646093,TYPE_DECL,,,,"struct PTY
{
    unique_hpcon hpcon;
    InOut pipes;
}",1,winconpty\ft_pty\ConPtyTests.cpp,PTY,,false,44,PTY,5
646192,TYPE_DECL,,,,"class ConPtyTests
{
    BEGIN_TEST_CLASS(ConPtyTests)
        TEST_CLASS_PROPERTY(L""TestTimeout"", L""0:0:15"") // 15s timeout
    END_TEST_CLASS()

    const COORD defaultSize = { 80, 30 };
    TEST_METHOD(CreateConPtyNoPipes);
    TEST_METHOD(CreateConPtyBadSize);
    TEST_METHOD(GoodCreate);
    TEST_METHOD(GoodCreateMultiple);
    TEST_METHOD(SurvivesOnBreakOutput);
    TEST_METHOD(DiesOnClose);
    TEST_METHOD(ReleasePseudoConsole);
}",1,winconpty\ft_pty\ConPtyTests.cpp,ConPtyTests,,false,90,ConPtyTests,9
647073,TYPE_DECL,,winconpty\ft_pty\precomp.cpp:<global>,NAMESPACE_BLOCK,<global>,1,winconpty\ft_pty\precomp.cpp,winconpty\ft_pty\precomp.cpp:<global>,,false,1,<global>,2
647084,TYPE_DECL,,winconpty\ft_pty\precomp.hpp:<global>,NAMESPACE_BLOCK,<global>,1,winconpty\ft_pty\precomp.hpp,winconpty\ft_pty\precomp.hpp:<global>,,false,1,<global>,4
647091,TYPE_DECL,,winconpty\precomp.cpp:<global>,NAMESPACE_BLOCK,<global>,1,winconpty\precomp.cpp,winconpty\precomp.cpp:<global>,,false,1,<global>,2
647110,TYPE_DECL,,winconpty\precomp.hpp:<global>,NAMESPACE_BLOCK,<global>,1,winconpty\precomp.hpp,winconpty\precomp.hpp:<global>,,false,1,<global>,8
647243,TYPE_DECL,,winconpty\winconpty.cpp:<global>,NAMESPACE_BLOCK,<global>,1,winconpty\winconpty.cpp,winconpty\winconpty.cpp:<global>,,false,1,<global>,9
647339,TYPE_DECL,,winconpty\winconpty.hpp:<global>,NAMESPACE_BLOCK,<global>,1,winconpty\winconpty.hpp,winconpty\winconpty.hpp:<global>,,false,1,<global>,2
647342,TYPE_DECL,PseudoConsole,,,"typedef struct _PseudoConsole
{
    // hSignal is a anonymous pipe used for out of band communication with conhost.
    // It's used to send the various PTY_SIGNAL_* messages.
    HANDLE hSignal;
    // The ""server handle"" in conhost represents the console IPC ""pipe"" over which all console
    // messages, all client connect and disconnect events, API calls, text output, etc. flow.
    // The full type of this handle is \Device\ConDrv\Server and is implemented in
    // /minkernel/console/condrv/server.c. If you inspect conhost's handles it'll show up
    // as a handle of name \Device\ConDrv, because that's the namespace of these handles.
    //
    // hPtyReference is derived from that handle (= a child), is named \Reference and is implemented
    // in /minkernel/console/condrv/reference.c. While conhost is the sole owner and user of the
    // ""server handle"", the ""reference handle"" is what console processes actually inherit in order
    // to communicate with the console server...",1,winconpty\winconpty.hpp,_PseudoConsole,,false,11,_PseudoConsole,1
647346,TYPE_DECL,_PseudoConsole,,,"typedef struct _PseudoConsole
{
    // hSignal is a anonymous pipe used for out of band communication with conhost.
    // It's used to send the various PTY_SIGNAL_* messages.
    HANDLE hSignal;
    // The ""server handle"" in conhost represents the console IPC ""pipe"" over which all console
    // messages, all client connect and disconnect events, API calls, text output, etc. flow.
    // The full type of this handle is \Device\ConDrv\Server and is implemented in
    // /minkernel/console/condrv/server.c. If you inspect conhost's handles it'll show up
    // as a handle of name \Device\ConDrv, because that's the namespace of these handles.
    //
    // hPtyReference is derived from that handle (= a child), is named \Reference and is implemented
    // in /minkernel/console/condrv/reference.c. While conhost is the sole owner and user of the
    // ""server handle"", the ""reference handle"" is what console processes actually inherit in order
    // to communicate with the console server...",3,winconpty\winconpty.hpp,PseudoConsole,,false,41,PseudoConsole,2
651626,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,&,,<includes>,&,,true,,&,-1
651627,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,&&,,<includes>,&&,,true,,&&,-1
651628,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ACCESS_MASK,,<includes>,ACCESS_MASK,,true,,ACCESS_MASK,-1
651629,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ACTCTXW,,<includes>,ACTCTXW,,true,,ACTCTXW,-1
651630,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ALPC_MESSAGE_ATTRIBUTES,,<includes>,ALPC_MESSAGE_ATTRIBUTES,,true,,ALPC_MESSAGE_ATTRIBUTES,-1
651631,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ALPC_MESSAGE_HANDLE_INFORMATION,,<includes>,ALPC_MESSAGE_HANDLE_INFORMATION,,true,,ALPC_MESSAGE_HANDLE_INFORMATION,-1
651632,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ALPC_PORT_ATTRIBUTES,,<includes>,ALPC_PORT_ATTRIBUTES,,true,,ALPC_PORT_ATTRIBUTES,-1
651633,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ANY,,<includes>,ANY,,true,,ANY,-1
651634,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ANY*,,<includes>,ANY*,,true,,ANY*,-1
651635,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,APIENTRY,,<includes>,APIENTRY,,true,,APIENTRY,-1
651636,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,APPBARDATA,,<includes>,APPBARDATA,,true,,APPBARDATA,-1
651637,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ARRAYSIZE,,<includes>,ARRAYSIZE,,true,,ARRAYSIZE,-1
651638,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ATOM,,<includes>,ATOM,,true,,ATOM,-1
651639,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AboutDialog,,<includes>,AboutDialog,,true,,AboutDialog,-1
651640,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AboutDialogT<AboutDialog>,,<includes>,AboutDialogT<AboutDialog>,,true,,AboutDialogT<AboutDialog>,-1
651641,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AccessibilityView,,<includes>,AccessibilityView,,true,,AccessibilityView,-1
651642,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AcrylicBackgroundSource,,<includes>,AcrylicBackgroundSource,,true,,AcrylicBackgroundSource,-1
651643,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ActionAndArgs,,<includes>,ActionAndArgs,,true,,ActionAndArgs,-1
651644,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ActionAndArgsT<ActionAndArgs>,,<includes>,ActionAndArgsT<ActionAndArgs>,,true,,ActionAndArgsT<ActionAndArgs>,-1
651645,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ActionEventArgs,,<includes>,ActionEventArgs,,true,,ActionEventArgs,-1
651646,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ActionEventArgsT<ActionEventArgs>,,<includes>,ActionEventArgsT<ActionEventArgs>,,true,,ActionEventArgsT<ActionEventArgs>,-1
651647,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ActionMap,,<includes>,ActionMap,,true,,ActionMap,-1
651648,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ActionMapT<ActionMap>,,<includes>,ActionMapT<ActionMap>,,true,,ActionMapT<ActionMap>,-1
651649,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"ActionPaletteItemT<ActionPaletteItem, PaletteItem>",,<includes>,"ActionPaletteItemT<ActionPaletteItem, PaletteItem>",,true,,"ActionPaletteItemT<ActionPaletteItem, PaletteItem>",-1
651650,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Actions,,<includes>,Actions,,true,,Actions,-1
651651,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ActionsPageNavigationStateT<ActionsPageNavigationState>,,<includes>,ActionsPageNavigationStateT<ActionsPageNavigationState>,,true,,ActionsPageNavigationStateT<ActionsPageNavigationState>,-1
651652,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ActionsT<Actions>,,<includes>,ActionsT<Actions>,,true,,ActionsT<Actions>,-1
651653,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AdaptDispatch,,<includes>,AdaptDispatch,,true,,AdaptDispatch,-1
651654,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AdaptDispatch*,,<includes>,AdaptDispatch*,,true,,AdaptDispatch*,-1
651655,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AdapterTest,,<includes>,AdapterTest,,true,,AdapterTest,-1
651656,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AddMarkArgs,,<includes>,AddMarkArgs,,true,,AddMarkArgs,-1
651657,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AddMarkArgsT<AddMarkArgs>,,<includes>,AddMarkArgsT<AddMarkArgs>,,true,,AddMarkArgsT<AddMarkArgs>,-1
651658,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AddProfilePageNavigationStateT<AddProfilePageNavigationState>,,<includes>,AddProfilePageNavigationStateT<AddProfilePageNavigationState>,,true,,AddProfilePageNavigationStateT<AddProfilePageNavigationState>,-1
651659,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AddProfileT<AddProfile>,,<includes>,AddProfileT<AddProfile>,,true,,AddProfileT<AddProfile>,-1
651660,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AdjustFontSizeArgs,,<includes>,AdjustFontSizeArgs,,true,,AdjustFontSizeArgs,-1
651661,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AdjustFontSizeArgsT<AdjustFontSizeArgs>,,<includes>,AdjustFontSizeArgsT<AdjustFontSizeArgs>,,true,,AdjustFontSizeArgsT<AdjustFontSizeArgs>,-1
651662,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AdjustOpacityArgs,,<includes>,AdjustOpacityArgs,,true,,AdjustOpacityArgs,-1
651663,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AdjustOpacityArgsT<AdjustOpacityArgs>,,<includes>,AdjustOpacityArgsT<AdjustOpacityArgs>,,true,,AdjustOpacityArgsT<AdjustOpacityArgs>,-1
651664,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AdjustTextMode,,<includes>,AdjustTextMode,,true,,AdjustTextMode,-1
651665,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Allocator,,<includes>,Allocator,,true,,Allocator,-1
651666,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Animation,,<includes>,Animation,,true,,Animation,-1
651667,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AntialiasingMode,,<includes>,AntialiasingMode,,true,,AntialiasingMode,-1
651668,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ApiCall,,<includes>,ApiCall,,true,,ApiCall,-1
651669,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ApiDetector,,<includes>,ApiDetector,,true,,ApiDetector,-1
651670,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ApiLevel,,<includes>,ApiLevel,,true,,ApiLevel,-1
651671,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ApiRoutinesTests,,<includes>,ApiRoutinesTests,,true,,ApiRoutinesTests,-1
651672,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ApiState,,<includes>,ApiState,,true,,ApiState,-1
651673,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,App,,<includes>,App,,true,,App,-1
651674,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AppBarButton,,<includes>,AppBarButton,,true,,AppBarButton,-1
651675,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AppHost*,,<includes>,AppHost*,,true,,AppHost*,-1
651676,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AppKeyBindings,,<includes>,AppKeyBindings,,true,,AppKeyBindings,-1
651677,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AppKeyBindingsT<AppKeyBindings>,,<includes>,AppKeyBindingsT<AppKeyBindings>,,true,,AppKeyBindingsT<AppKeyBindings>,-1
651678,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AppLogic,,<includes>,AppLogic,,true,,AppLogic,-1
651679,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AppLogic*,,<includes>,AppLogic*,,true,,AppLogic*,-1
651680,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AppLogicT<AppLogic>,,<includes>,AppLogicT<AppLogic>,,true,,AppLogicT<AppLogic>,-1
651681,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AppT2<App>,,<includes>,AppT2<App>,,true,,AppT2<App>,-1
651682,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,App>,,<includes>,"AppT<App, implementation.App>",,true,,App>,-1
651683,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IXamlMetadataProvider>,,<includes>,"App_base<D, .winrt.Windows.UI.Xaml.Markup.IXamlMetadataProvider>",,true,,IXamlMetadataProvider>,-1
651684,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,>,,<includes>,"App_baseWithProvider<D, I...>",,true,,>,-1
651685,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AppearanceConfig,,<includes>,AppearanceConfig,,true,,AppearanceConfig,-1
651686,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AppearanceConfig*,,<includes>,AppearanceConfig*,,true,,AppearanceConfig*,-1
651687,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AppearanceConfigT<AppearanceConfig>,,<includes>,AppearanceConfigT<AppearanceConfig>,,true,,AppearanceConfigT<AppearanceConfig>,-1
651688,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AppearanceViewModel,,<includes>,AppearanceViewModel,,true,,AppearanceViewModel,-1
651689,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AppearanceViewModelT<AppearanceViewModel>,,<includes>,AppearanceViewModelT<AppearanceViewModel>,,true,,AppearanceViewModelT<AppearanceViewModel>,-1
651690,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Appearances,,<includes>,Appearances,,true,,Appearances,-1
651691,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AppearancesT<Appearances>,,<includes>,AppearancesT<Appearances>,,true,,AppearancesT<Appearances>,-1
651692,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Application,,<includes>,Application,,true,,Application,-1
651693,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ApplicationHighContrastAdjustment,,<includes>,ApplicationHighContrastAdjustment,,true,,ApplicationHighContrastAdjustment,-1
651694,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ApplicationLanguages,,<includes>,ApplicationLanguages,,true,,ApplicationLanguages,-1
651695,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ApplicationModel,,<includes>,ApplicationModel,,true,,ApplicationModel,-1
651696,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ApplicationState,,<includes>,ApplicationState,,true,,ApplicationState,-1
651697,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ApplicationStateT<ApplicationState>,,<includes>,ApplicationStateT<ApplicationState>,,true,,ApplicationStateT<ApplicationState>,-1
651698,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Args,,<includes>,Args,,true,,Args,-1
651699,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ArrayIndexTaefAdapterRow,,<includes>,ArrayIndexTaefAdapterRow,,true,,ArrayIndexTaefAdapterRow,-1
651700,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ArrayIndexTaefAdapterSource,,<includes>,ArrayIndexTaefAdapterSource,,true,,ArrayIndexTaefAdapterSource,-1
651701,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AsciiChars,,<includes>,AsciiChars,,true,,AsciiChars,-1
651702,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AtlasFontFaceEntry,,<includes>,AtlasFontFaceEntry,,true,,AtlasFontFaceEntry,-1
651703,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AtlasFontFaceEntryInner,,<includes>,AtlasFontFaceEntryInner,,true,,AtlasFontFaceEntryInner,-1
651704,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AtlasFontFaceKey,,<includes>,AtlasFontFaceKey,,true,,AtlasFontFaceKey,-1
651705,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AtlasGlyphEntry,,<includes>,AtlasGlyphEntry,,true,,AtlasGlyphEntry,-1
651706,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AtlasGlyphEntryData,,<includes>,AtlasGlyphEntryData,,true,,AtlasGlyphEntryData,-1
651707,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AttachRequestT<AttachRequest>,,<includes>,AttachRequestT<AttachRequest>,,true,,AttachRequestT<AttachRequest>,-1
651708,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AttributeType,,<includes>,AttributeType,,true,,AttributeType,-1
651709,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Automation,,<includes>,Automation,,true,,Automation,-1
651710,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AutomationControlType,,<includes>,AutomationControlType,,true,,AutomationControlType,-1
651711,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AutomationLiveSetting,,<includes>,AutomationLiveSetting,,true,,AutomationLiveSetting,-1
651712,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AutomationNotificationKind,,<includes>,AutomationNotificationKind,,true,,AutomationNotificationKind,-1
651713,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AutomationNotificationProcessing,,<includes>,AutomationNotificationProcessing,,true,,AutomationNotificationProcessing,-1
651714,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AutomationOrientation,,<includes>,AutomationOrientation,,true,,AutomationOrientation,-1
651715,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AutomationPeer,,<includes>,AutomationPeer,,true,,AutomationPeer,-1
651716,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AutomationProperties,,<includes>,AutomationProperties,,true,,AutomationProperties,-1
651717,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AxisTagPresence,,<includes>,AxisTagPresence,,true,,AxisTagPresence,-1
651718,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AzureConnection,,<includes>,AzureConnection,,true,,AzureConnection,-1
651719,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AzureConnectionT<AzureConnection>,,<includes>,AzureConnectionT<AzureConnection>,,true,,AzureConnectionT<AzureConnection>,-1
651720,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AzureException,,<includes>,AzureException,,true,,AzureException,-1
651721,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AzureState,,<includes>,AzureState,,true,,AzureState,-1
651722,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,BASIC_FACTORY,,<includes>,BASIC_FACTORY,,true,,BASIC_FACTORY,-1
651723,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,BEGIN_TEST_CLASS,,<includes>,BEGIN_TEST_CLASS,,true,,BEGIN_TEST_CLASS,-1
651724,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,BEGIN_TEST_METHOD,,<includes>,BEGIN_TEST_METHOD,,true,,BEGIN_TEST_METHOD,-1
651725,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,BITMAP,,<includes>,BITMAP,,true,,BITMAP,-1
651726,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,BOOL,,<includes>,BOOL,,true,,BOOL,-1
651727,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,BOOL*,,<includes>,BOOL*,,true,,BOOL*,-1
651728,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,BOOLEAN,,<includes>,BOOLEAN,,true,,BOOLEAN,-1
651729,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,BP_PAINTPARAMS,,<includes>,BP_PAINTPARAMS,,true,,BP_PAINTPARAMS,-1
651730,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,BSTR,,<includes>,BSTR,,true,,BSTR,-1
651731,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,BSTR*,,<includes>,BSTR*,,true,,BSTR*,-1
651732,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,BYTE,,<includes>,BYTE,,true,,BYTE,-1
651733,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,BYTE*,,<includes>,BYTE*,,true,,BYTE*,-1
651734,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,BYTE[256],,<includes>,BYTE[256],,true,,BYTE[256],-1
651735,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,BYTE[2],,<includes>,BYTE[2],,true,,BYTE[2],-1
651736,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,BYTE[4],,<includes>,BYTE[4],,true,,BYTE[4],-1
651737,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,BackendD2D,,<includes>,BackendD2D,,true,,BackendD2D,-1
651738,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,BackendD3D,,<includes>,BackendD3D,,true,,BackendD3D,-1
651739,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Base64,,<includes>,Base64,,true,,Base64,-1
651740,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Base64Test,,<includes>,Base64Test,,true,,Base64Test,-1
651741,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,BaseWindow<IslandWindow>,,<includes>,BaseWindow<IslandWindow>,,true,,BaseWindow<IslandWindow>,-1
651742,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,BaseWindow<T>,,<includes>,BaseWindow<T>,,true,,BaseWindow<T>,-1
651743,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Baton,,<includes>,Baton,,true,,Baton,-1
651744,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,BellStyle,,<includes>,BellStyle,,true,,BellStyle,-1
651745,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,BgfxEngine,,<includes>,BgfxEngine,,true,,BgfxEngine,-1
651746,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,BitmapAlphaMode,,<includes>,BitmapAlphaMode,,true,,BitmapAlphaMode,-1
651747,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,BitmapPixelFormat,,<includes>,BitmapPixelFormat,,true,,BitmapPixelFormat,-1
651748,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,BitmapTests,,<includes>,BitmapTests,,true,,BitmapTests,-1
651749,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,BoxDrawingEffect,,<includes>,BoxDrawingEffect,,true,,BoxDrawingEffect,-1
651750,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,BoxScale,,<includes>,BoxScale,,true,,BoxScale,-1
651751,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,BreadcrumbSubPage,,<includes>,BreadcrumbSubPage,,true,,BreadcrumbSubPage,-1
651752,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,BreadcrumbT<Breadcrumb>,,<includes>,BreadcrumbT<Breadcrumb>,,true,,BreadcrumbT<Breadcrumb>,-1
651753,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Brush,,<includes>,Brush,,true,,Brush,-1
651754,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Buffer,,<includes>,Buffer,,true,,Buffer,-1
651755,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Buffer<DWRITE_GLYPH_METRICS>,,<includes>,Buffer<DWRITE_GLYPH_METRICS>,,true,,Buffer<DWRITE_GLYPH_METRICS>,-1
651756,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Buffer<DWRITE_GLYPH_OFFSET>,,<includes>,Buffer<DWRITE_GLYPH_OFFSET>,,true,,Buffer<DWRITE_GLYPH_OFFSET>,-1
651757,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Buffer<DWRITE_SHAPING_GLYPH_PROPERTIES>,,<includes>,Buffer<DWRITE_SHAPING_GLYPH_PROPERTIES>,,true,,Buffer<DWRITE_SHAPING_GLYPH_PROPERTIES>,-1
651758,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Buffer<DWRITE_SHAPING_TEXT_PROPERTIES>,,<includes>,Buffer<DWRITE_SHAPING_TEXT_PROPERTIES>,,true,,Buffer<DWRITE_SHAPING_TEXT_PROPERTIES>,-1
651759,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"Buffer<QuadInstance,32>",,<includes>,"Buffer<QuadInstance,32>",,true,,"Buffer<QuadInstance,32>",-1
651760,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Buffer<ShapedRow*>,,<includes>,Buffer<ShapedRow*>,,true,,Buffer<ShapedRow*>,-1
651761,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Buffer<ShapedRow>,,<includes>,Buffer<ShapedRow>,,true,,Buffer<ShapedRow>,-1
651762,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Buffer<f32>,,<includes>,Buffer<f32>,,true,,Buffer<f32>,-1
651763,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Buffer<stbrp_node>,,<includes>,Buffer<stbrp_node>,,true,,Buffer<stbrp_node>,-1
651764,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Buffer<u16>,,<includes>,Buffer<u16>,,true,,Buffer<u16>,-1
651765,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"Buffer<u32,32>",,<includes>,"Buffer<u32,32>",,true,,"Buffer<u32,32>",-1
651766,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Buffer<u32>,,<includes>,Buffer<u32>,,true,,Buffer<u32>,-1
651767,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,BufferState,,<includes>,BufferState,,true,,BufferState,-1
651768,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,BuildStartupState,,<includes>,BuildStartupState,,true,,BuildStartupState,-1
651769,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Button,,<includes>,Button,,true,,Button,-1
651770,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CALLBACK,,<includes>,CALLBACK,,true,,CALLBACK,-1
651771,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CConsoleTSF*,,<includes>,CConsoleTSF*,,true,,CConsoleTSF*,-1
651772,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CConversionArea*,,<includes>,CConversionArea*,,true,,CConversionArea*,-1
651773,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CD_CONNECTION_INFORMATION,,<includes>,CD_CONNECTION_INFORMATION,,true,,CD_CONNECTION_INFORMATION,-1
651774,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CD_CREATE_OBJECT_INFORMATION,,<includes>,CD_CREATE_OBJECT_INFORMATION,,true,,CD_CREATE_OBJECT_INFORMATION,-1
651775,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CD_IO_CHARACTER,,<includes>,CD_IO_CHARACTER,,true,,CD_IO_CHARACTER,-1
651776,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CD_IO_COMPLETE,,<includes>,CD_IO_COMPLETE,,true,,CD_IO_COMPLETE,-1
651777,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CD_IO_COMPLETE*,,<includes>,CD_IO_COMPLETE*,,true,,CD_IO_COMPLETE*,-1
651778,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CD_IO_DESCRIPTOR,,<includes>,CD_IO_DESCRIPTOR,,true,,CD_IO_DESCRIPTOR,-1
651779,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CD_IO_DISPLAY_SIZE,,<includes>,CD_IO_DISPLAY_SIZE,,true,,CD_IO_DISPLAY_SIZE,-1
651780,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CD_IO_FONT_SIZE,,<includes>,CD_IO_FONT_SIZE,,true,,CD_IO_FONT_SIZE,-1
651781,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CD_IO_OPERATION,,<includes>,CD_IO_OPERATION,,true,,CD_IO_OPERATION,-1
651782,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CD_IO_OPERATION*,,<includes>,CD_IO_OPERATION*,,true,,CD_IO_OPERATION*,-1
651783,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CD_IO_ROW_INFORMATION,,<includes>,CD_IO_ROW_INFORMATION,,true,,CD_IO_ROW_INFORMATION,-1
651784,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CD_IO_SERVER_INFORMATION*,,<includes>,CD_IO_SERVER_INFORMATION*,,true,,CD_IO_SERVER_INFORMATION*,-1
651785,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CEditSessionObject*,,<includes>,CEditSessionObject*,,true,,CEditSessionObject*,-1
651786,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,>,,<includes>,"CFuzzArray<fuzz.CFuzzCRTAllocator,_Type1,_Type2,_Args...>",,true,,>,-1
651787,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,>,,<includes>,"CFuzzArraySize<_Type1,_Type2,_Args...>",,true,,>,-1
651788,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,>*,,<includes>,"CFuzzArraySize<_Type1,_Type2,_Args...>*",,true,,>*,-1
651789,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CFuzzBase,,<includes>,CFuzzBase,,true,,CFuzzBase,-1
651790,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CFuzzChance,,<includes>,CFuzzChance,,true,,CFuzzChance,-1
651791,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CFuzzType,,<includes>,CFuzzType,,true,,CFuzzType,-1
651792,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CFuzzType<DWORD>,,<includes>,CFuzzType<DWORD>,,true,,CFuzzType<DWORD>,-1
651793,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,>,,<includes>,"CFuzzType<_Type*, _Args...>",,true,,>,-1
651794,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,>,,<includes>,"CFuzzType<_Type, _Args...>",,true,,>,-1
651795,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CHAR,,<includes>,CHAR,,true,,CHAR,-1
651796,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CHARSETINFO,,<includes>,CHARSETINFO,,true,,CHARSETINFO,-1
651797,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CHAR[128],,<includes>,CHAR[128],,true,,CHAR[128],-1
651798,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CHAR[32],,<includes>,CHAR[32],,true,,CHAR[32],-1
651799,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CHAR[60],,<includes>,CHAR[60],,true,,CHAR[60],-1
651800,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CHAR[64],,<includes>,CHAR[64],,true,,CHAR[64],-1
651801,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CHAR[],,<includes>,CHAR[],,true,,CHAR[],-1
651802,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CHAR_INFO,,<includes>,CHAR_INFO,,true,,CHAR_INFO,-1
651803,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CHAR_INFO*,,<includes>,CHAR_INFO*,,true,,CHAR_INFO*,-1
651804,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CHAR_INFO[],,<includes>,CHAR_INFO[],,true,,CHAR_INFO[],-1
651805,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CIS_ALPC_PORT_NAME,,<includes>,CIS_ALPC_PORT_NAME,,true,,CIS_ALPC_PORT_NAME,-1
651806,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CIS_EVENT,,<includes>,CIS_EVENT,,true,,CIS_EVENT,-1
651807,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CIS_EVENT*,,<includes>,CIS_EVENT*,,true,,CIS_EVENT*,-1
651808,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CIS_MSG,,<includes>,CIS_MSG,,true,,CIS_MSG,-1
651809,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CLI,,<includes>,CLI,,true,,CLI,-1
651810,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CLSID,,<includes>,CLSID,,true,,CLSID,-1
651811,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,COLORREF,,<includes>,COLORREF,,true,,COLORREF,-1
651812,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,COLORREF[16],,<includes>,COLORREF[16],,true,,COLORREF[16],-1
651813,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_ADDALIAS_MSG,,<includes>,CONSOLE_ADDALIAS_MSG,,true,,CONSOLE_ADDALIAS_MSG,-1
651814,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_API_DESCRIPTOR*,,<includes>,CONSOLE_API_DESCRIPTOR*,,true,,CONSOLE_API_DESCRIPTOR*,-1
651815,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_API_MSG*,,<includes>,CONSOLE_API_MSG*,,true,,CONSOLE_API_MSG*,-1
651816,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_CHAR_TYPE_MSG,,<includes>,CONSOLE_CHAR_TYPE_MSG,,true,,CONSOLE_CHAR_TYPE_MSG,-1
651817,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_CREATESCREENBUFFER_MSG,,<includes>,CONSOLE_CREATESCREENBUFFER_MSG,,true,,CONSOLE_CREATESCREENBUFFER_MSG,-1
651818,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_CTRLEVENT_MSG,,<includes>,CONSOLE_CTRLEVENT_MSG,,true,,CONSOLE_CTRLEVENT_MSG,-1
651819,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_CURRENTFONT_MSG,,<includes>,CONSOLE_CURRENTFONT_MSG,,true,,CONSOLE_CURRENTFONT_MSG,-1
651820,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_CURSOR_INFO,,<includes>,CONSOLE_CURSOR_INFO,,true,,CONSOLE_CURSOR_INFO,-1
651821,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_CURSOR_MODE_MSG,,<includes>,CONSOLE_CURSOR_MODE_MSG,,true,,CONSOLE_CURSOR_MODE_MSG,-1
651822,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_EXPUNGECOMMANDHISTORY_MSG,,<includes>,CONSOLE_EXPUNGECOMMANDHISTORY_MSG,,true,,CONSOLE_EXPUNGECOMMANDHISTORY_MSG,-1
651823,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_FILLCONSOLEOUTPUT_MSG,,<includes>,CONSOLE_FILLCONSOLEOUTPUT_MSG,,true,,CONSOLE_FILLCONSOLEOUTPUT_MSG,-1
651824,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_FONT_INFO,,<includes>,CONSOLE_FONT_INFO,,true,,CONSOLE_FONT_INFO,-1
651825,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_FONT_INFOEX,,<includes>,CONSOLE_FONT_INFOEX,,true,,CONSOLE_FONT_INFOEX,-1
651826,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_GETALIASESLENGTH_MSG,,<includes>,CONSOLE_GETALIASESLENGTH_MSG,,true,,CONSOLE_GETALIASESLENGTH_MSG,-1
651827,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_GETALIASES_MSG,,<includes>,CONSOLE_GETALIASES_MSG,,true,,CONSOLE_GETALIASES_MSG,-1
651828,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_GETALIASEXESLENGTH_MSG,,<includes>,CONSOLE_GETALIASEXESLENGTH_MSG,,true,,CONSOLE_GETALIASEXESLENGTH_MSG,-1
651829,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_GETALIASEXES_MSG,,<includes>,CONSOLE_GETALIASEXES_MSG,,true,,CONSOLE_GETALIASEXES_MSG,-1
651830,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_GETALIAS_MSG,,<includes>,CONSOLE_GETALIAS_MSG,,true,,CONSOLE_GETALIAS_MSG,-1
651831,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_GETCOMMANDHISTORYLENGTH_MSG,,<includes>,CONSOLE_GETCOMMANDHISTORYLENGTH_MSG,,true,,CONSOLE_GETCOMMANDHISTORYLENGTH_MSG,-1
651832,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_GETCOMMANDHISTORY_MSG,,<includes>,CONSOLE_GETCOMMANDHISTORY_MSG,,true,,CONSOLE_GETCOMMANDHISTORY_MSG,-1
651833,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_GETCONSOLEINPUT_MSG,,<includes>,CONSOLE_GETCONSOLEINPUT_MSG,,true,,CONSOLE_GETCONSOLEINPUT_MSG,-1
651834,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_GETCONSOLEPROCESSLIST_MSG,,<includes>,CONSOLE_GETCONSOLEPROCESSLIST_MSG,,true,,CONSOLE_GETCONSOLEPROCESSLIST_MSG,-1
651835,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_GETCONSOLEWINDOW_MSG,,<includes>,CONSOLE_GETCONSOLEWINDOW_MSG,,true,,CONSOLE_GETCONSOLEWINDOW_MSG,-1
651836,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_GETCP_MSG,,<includes>,CONSOLE_GETCP_MSG,,true,,CONSOLE_GETCP_MSG,-1
651837,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_GETCURSORINFO_MSG,,<includes>,CONSOLE_GETCURSORINFO_MSG,,true,,CONSOLE_GETCURSORINFO_MSG,-1
651838,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_GETDISPLAYMODE_MSG,,<includes>,CONSOLE_GETDISPLAYMODE_MSG,,true,,CONSOLE_GETDISPLAYMODE_MSG,-1
651839,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_GETFONTINFO_MSG,,<includes>,CONSOLE_GETFONTINFO_MSG,,true,,CONSOLE_GETFONTINFO_MSG,-1
651840,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_GETFONTSIZE_MSG,,<includes>,CONSOLE_GETFONTSIZE_MSG,,true,,CONSOLE_GETFONTSIZE_MSG,-1
651841,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_GETHARDWARESTATE_MSG,,<includes>,CONSOLE_GETHARDWARESTATE_MSG,,true,,CONSOLE_GETHARDWARESTATE_MSG,-1
651842,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_GETKEYBOARDLAYOUTNAME_MSG,,<includes>,CONSOLE_GETKEYBOARDLAYOUTNAME_MSG,,true,,CONSOLE_GETKEYBOARDLAYOUTNAME_MSG,-1
651843,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_GETLARGESTWINDOWSIZE_MSG,,<includes>,CONSOLE_GETLARGESTWINDOWSIZE_MSG,,true,,CONSOLE_GETLARGESTWINDOWSIZE_MSG,-1
651844,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_GETMOUSEINFO_MSG,,<includes>,CONSOLE_GETMOUSEINFO_MSG,,true,,CONSOLE_GETMOUSEINFO_MSG,-1
651845,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_GETNUMBEROFFONTS_MSG,,<includes>,CONSOLE_GETNUMBEROFFONTS_MSG,,true,,CONSOLE_GETNUMBEROFFONTS_MSG,-1
651846,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_GETNUMBEROFINPUTEVENTS_MSG,,<includes>,CONSOLE_GETNUMBEROFINPUTEVENTS_MSG,,true,,CONSOLE_GETNUMBEROFINPUTEVENTS_MSG,-1
651847,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_GETSELECTIONINFO_MSG,,<includes>,CONSOLE_GETSELECTIONINFO_MSG,,true,,CONSOLE_GETSELECTIONINFO_MSG,-1
651848,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_GETTITLE_MSG,,<includes>,CONSOLE_GETTITLE_MSG,,true,,CONSOLE_GETTITLE_MSG,-1
651849,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_HISTORY_INFO,,<includes>,CONSOLE_HISTORY_INFO,,true,,CONSOLE_HISTORY_INFO,-1
651850,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_HISTORY_MSG,,<includes>,CONSOLE_HISTORY_MSG,,true,,CONSOLE_HISTORY_MSG,-1
651851,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_INVALIDATERECT_MSG,,<includes>,CONSOLE_INVALIDATERECT_MSG,,true,,CONSOLE_INVALIDATERECT_MSG,-1
651852,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_LANGID_MSG,,<includes>,CONSOLE_LANGID_MSG,,true,,CONSOLE_LANGID_MSG,-1
651853,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_LOCAL_EUDC_MSG,,<includes>,CONSOLE_LOCAL_EUDC_MSG,,true,,CONSOLE_LOCAL_EUDC_MSG,-1
651854,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_MAPBITMAP_MSG,,<includes>,CONSOLE_MAPBITMAP_MSG,,true,,CONSOLE_MAPBITMAP_MSG,-1
651855,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_MENUCONTROL_MSG,,<includes>,CONSOLE_MENUCONTROL_MSG,,true,,CONSOLE_MENUCONTROL_MSG,-1
651856,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_MODE_MSG,,<includes>,CONSOLE_MODE_MSG,,true,,CONSOLE_MODE_MSG,-1
651857,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_MSG_BODY_L1,,<includes>,CONSOLE_MSG_BODY_L1,,true,,CONSOLE_MSG_BODY_L1,-1
651858,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_MSG_BODY_L2,,<includes>,CONSOLE_MSG_BODY_L2,,true,,CONSOLE_MSG_BODY_L2,-1
651859,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_MSG_BODY_L3,,<includes>,CONSOLE_MSG_BODY_L3,,true,,CONSOLE_MSG_BODY_L3,-1
651860,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_MSG_HEADER,,<includes>,CONSOLE_MSG_HEADER,,true,,CONSOLE_MSG_HEADER,-1
651861,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_NLS_MODE_MSG,,<includes>,CONSOLE_NLS_MODE_MSG,,true,,CONSOLE_NLS_MODE_MSG,-1
651862,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_PORTABLE_ATTACH_MSG,,<includes>,CONSOLE_PORTABLE_ATTACH_MSG,,true,,CONSOLE_PORTABLE_ATTACH_MSG,-1
651863,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_READCONSOLEOUTPUTSTRING_MSG,,<includes>,CONSOLE_READCONSOLEOUTPUTSTRING_MSG,,true,,CONSOLE_READCONSOLEOUTPUTSTRING_MSG,-1
651864,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_READCONSOLEOUTPUT_MSG,,<includes>,CONSOLE_READCONSOLEOUTPUT_MSG,,true,,CONSOLE_READCONSOLEOUTPUT_MSG,-1
651865,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_READCONSOLE_MSG,,<includes>,CONSOLE_READCONSOLE_MSG,,true,,CONSOLE_READCONSOLE_MSG,-1
651866,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_REGISTEROS2_MSG,,<includes>,CONSOLE_REGISTEROS2_MSG,,true,,CONSOLE_REGISTEROS2_MSG,-1
651867,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_REGISTERVDM_MSG,,<includes>,CONSOLE_REGISTERVDM_MSG,,true,,CONSOLE_REGISTERVDM_MSG,-1
651868,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_SCREENBUFFERINFO_MSG,,<includes>,CONSOLE_SCREENBUFFERINFO_MSG,,true,,CONSOLE_SCREENBUFFERINFO_MSG,-1
651869,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_SCREEN_BUFFER_INFO,,<includes>,CONSOLE_SCREEN_BUFFER_INFO,,true,,CONSOLE_SCREEN_BUFFER_INFO,-1
651870,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_SCREEN_BUFFER_INFOEX,,<includes>,CONSOLE_SCREEN_BUFFER_INFOEX,,true,,CONSOLE_SCREEN_BUFFER_INFOEX,-1
651871,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_SCROLLSCREENBUFFER_MSG,,<includes>,CONSOLE_SCROLLSCREENBUFFER_MSG,,true,,CONSOLE_SCROLLSCREENBUFFER_MSG,-1
651872,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_SELECTION_INFO,,<includes>,CONSOLE_SELECTION_INFO,,true,,CONSOLE_SELECTION_INFO,-1
651873,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_SETCP_MSG,,<includes>,CONSOLE_SETCP_MSG,,true,,CONSOLE_SETCP_MSG,-1
651874,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_SETCURSORINFO_MSG,,<includes>,CONSOLE_SETCURSORINFO_MSG,,true,,CONSOLE_SETCURSORINFO_MSG,-1
651875,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_SETCURSORPOSITION_MSG,,<includes>,CONSOLE_SETCURSORPOSITION_MSG,,true,,CONSOLE_SETCURSORPOSITION_MSG,-1
651876,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_SETCURSOR_MSG,,<includes>,CONSOLE_SETCURSOR_MSG,,true,,CONSOLE_SETCURSOR_MSG,-1
651877,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_SETDISPLAYMODE_MSG,,<includes>,CONSOLE_SETDISPLAYMODE_MSG,,true,,CONSOLE_SETDISPLAYMODE_MSG,-1
651878,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_SETFONT_MSG,,<includes>,CONSOLE_SETFONT_MSG,,true,,CONSOLE_SETFONT_MSG,-1
651879,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_SETHARDWARESTATE_MSG,,<includes>,CONSOLE_SETHARDWARESTATE_MSG,,true,,CONSOLE_SETHARDWARESTATE_MSG,-1
651880,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_SETICON_MSG,,<includes>,CONSOLE_SETICON_MSG,,true,,CONSOLE_SETICON_MSG,-1
651881,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_SETKEYSHORTCUTS_MSG,,<includes>,CONSOLE_SETKEYSHORTCUTS_MSG,,true,,CONSOLE_SETKEYSHORTCUTS_MSG,-1
651882,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_SETMENUCLOSE_MSG,,<includes>,CONSOLE_SETMENUCLOSE_MSG,,true,,CONSOLE_SETMENUCLOSE_MSG,-1
651883,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_SETNUMBEROFCOMMANDS_MSG,,<includes>,CONSOLE_SETNUMBEROFCOMMANDS_MSG,,true,,CONSOLE_SETNUMBEROFCOMMANDS_MSG,-1
651884,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_SETOS2OEMFORMAT_MSG,,<includes>,CONSOLE_SETOS2OEMFORMAT_MSG,,true,,CONSOLE_SETOS2OEMFORMAT_MSG,-1
651885,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_SETPALETTE_MSG,,<includes>,CONSOLE_SETPALETTE_MSG,,true,,CONSOLE_SETPALETTE_MSG,-1
651886,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_SETSCREENBUFFERSIZE_MSG,,<includes>,CONSOLE_SETSCREENBUFFERSIZE_MSG,,true,,CONSOLE_SETSCREENBUFFERSIZE_MSG,-1
651887,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_SETTEXTATTRIBUTE_MSG,,<includes>,CONSOLE_SETTEXTATTRIBUTE_MSG,,true,,CONSOLE_SETTEXTATTRIBUTE_MSG,-1
651888,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_SETTITLE_MSG,,<includes>,CONSOLE_SETTITLE_MSG,,true,,CONSOLE_SETTITLE_MSG,-1
651889,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_SETWINDOWINFO_MSG,,<includes>,CONSOLE_SETWINDOWINFO_MSG,,true,,CONSOLE_SETWINDOWINFO_MSG,-1
651890,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_SHOWCURSOR_MSG,,<includes>,CONSOLE_SHOWCURSOR_MSG,,true,,CONSOLE_SHOWCURSOR_MSG,-1
651891,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_STATE_INFO,,<includes>,CONSOLE_STATE_INFO,,true,,CONSOLE_STATE_INFO,-1
651892,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_STATE_INFO*,,<includes>,CONSOLE_STATE_INFO*,,true,,CONSOLE_STATE_INFO*,-1
651893,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_VDM_MSG,,<includes>,CONSOLE_VDM_MSG,,true,,CONSOLE_VDM_MSG,-1
651894,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_WRITECONSOLEINPUT_MSG,,<includes>,CONSOLE_WRITECONSOLEINPUT_MSG,,true,,CONSOLE_WRITECONSOLEINPUT_MSG,-1
651895,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_WRITECONSOLEOUTPUTSTRING_MSG,,<includes>,CONSOLE_WRITECONSOLEOUTPUTSTRING_MSG,,true,,CONSOLE_WRITECONSOLEOUTPUTSTRING_MSG,-1
651896,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_WRITECONSOLEOUTPUT_MSG,,<includes>,CONSOLE_WRITECONSOLEOUTPUT_MSG,,true,,CONSOLE_WRITECONSOLEOUTPUT_MSG,-1
651897,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CONSOLE_WRITECONSOLE_MSG,,<includes>,CONSOLE_WRITECONSOLE_MSG,,true,,CONSOLE_WRITECONSOLE_MSG,-1
651898,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,COOKED_READ_DATA*,,<includes>,COOKED_READ_DATA*,,true,,COOKED_READ_DATA*,-1
651899,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,COORD,,<includes>,COORD,,true,,COORD,-1
651900,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,COORD*,,<includes>,COORD*,,true,,COORD*,-1
651901,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CPINFO,,<includes>,CPINFO,,true,,CPINFO,-1
651902,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CPINFO*,,<includes>,CPINFO*,,true,,CPINFO*,-1
651903,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CPINFOEX,,<includes>,CPINFOEX,,true,,CPINFOEX,-1
651904,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CanGetWidths,,<includes>,CanGetWidths,,true,,CanGetWidths,-1
651905,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CaptionButton,,<includes>,CaptionButton,,true,,CaptionButton,-1
651906,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CascadiaSettings,,<includes>,CascadiaSettings,,true,,CascadiaSettings,-1
651907,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CascadiaSettingsT<CascadiaSettings>,,<includes>,CascadiaSettingsT<CascadiaSettings>,,true,,CascadiaSettingsT<CascadiaSettings>,-1
651908,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ChangeExtent,,<includes>,ChangeExtent,,true,,ChangeExtent,-1
651909,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ChangeOps,,<includes>,ChangeOps,,true,,ChangeOps,-1
651910,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CharSentEventArgsT<CharSentEventArgs>,,<includes>,CharSentEventArgsT<CharSentEventArgs>,,true,,CharSentEventArgsT<CharSentEventArgs>,-1
651911,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"CharSet<BaseChar,Size>",,<includes>,"CharSet<BaseChar,Size>",,true,,"CharSet<BaseChar,Size>",-1
651912,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CharacterFillLimited,,<includes>,CharacterFillLimited,,true,,CharacterFillLimited,-1
651913,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CharacterSets,,<includes>,CharacterSets,,true,,CharacterSets,-1
651914,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CicCategoryMgr*,,<includes>,CicCategoryMgr*,,true,,CicCategoryMgr*,-1
651915,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CicCategoryMgr**,,<includes>,CicCategoryMgr**,,true,,CicCategoryMgr**,-1
651916,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CicDisplayAttributeMgr*,,<includes>,CicDisplayAttributeMgr*,,true,,CicDisplayAttributeMgr*,-1
651917,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CicDisplayAttributeMgr**,,<includes>,CicDisplayAttributeMgr**,,true,,CicDisplayAttributeMgr**,-1
651918,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ClassCleanup,,<includes>,ClassCleanup,,true,,ClassCleanup,-1
651919,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CleanupMethods,,<includes>,CleanupMethods,,true,,CleanupMethods,-1
651920,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ClearBufferArgs,,<includes>,ClearBufferArgs,,true,,ClearBufferArgs,-1
651921,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ClearBufferArgsT<ClearBufferArgs>,,<includes>,ClearBufferArgsT<ClearBufferArgs>,,true,,ClearBufferArgsT<ClearBufferArgs>,-1
651922,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ClearBufferType,,<includes>,ClearBufferType,,true,,ClearBufferType,-1
651923,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Clipboard,,<includes>,Clipboard,,true,,Clipboard,-1
651924,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ClipboardTests,,<includes>,ClipboardTests,,true,,ClipboardTests,-1
651925,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CloseOnExitMode,,<includes>,CloseOnExitMode,,true,,CloseOnExitMode,-1
651926,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CloseOtherTabsArgs,,<includes>,CloseOtherTabsArgs,,true,,CloseOtherTabsArgs,-1
651927,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CloseOtherTabsArgsT<CloseOtherTabsArgs>,,<includes>,CloseOtherTabsArgsT<CloseOtherTabsArgs>,,true,,CloseOtherTabsArgsT<CloseOtherTabsArgs>,-1
651928,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CloseTabArgs,,<includes>,CloseTabArgs,,true,,CloseTabArgs,-1
651929,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CloseTabArgsT<CloseTabArgs>,,<includes>,CloseTabArgsT<CloseTabArgs>,,true,,CloseTabArgsT<CloseTabArgs>,-1
651930,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CloseTabsAfterArgs,,<includes>,CloseTabsAfterArgs,,true,,CloseTabsAfterArgs,-1
651931,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CloseTabsAfterArgsT<CloseTabsAfterArgs>,,<includes>,CloseTabsAfterArgsT<CloseTabsAfterArgs>,,true,,CloseTabsAfterArgsT<CloseTabsAfterArgs>,-1
651932,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CoCreatableClass,,<includes>,CoCreatableClass,,true,,CoCreatableClass,-1
651933,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CodepointWidthDetectorTests,,<includes>,CodepointWidthDetectorTests,,true,,CodepointWidthDetectorTests,-1
651934,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CodingSystem,,<includes>,CodingSystem,,true,,CodingSystem,-1
651935,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CollectionChange,,<includes>,CollectionChange,,true,,CollectionChange,-1
651936,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Collections,,<includes>,Collections,,true,,Collections,-1
651937,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Color,,<includes>,Color,,true,,Color,-1
651938,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ColorHelper,,<includes>,ColorHelper,,true,,ColorHelper,-1
651939,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ColorItem,,<includes>,ColorItem,,true,,ColorItem,-1
651940,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ColorModel,,<includes>,ColorModel,,true,,ColorModel,-1
651941,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ColorPickupFlyoutT<ColorPickupFlyout>,,<includes>,ColorPickupFlyoutT<ColorPickupFlyout>,,true,,ColorPickupFlyoutT<ColorPickupFlyout>,-1
651942,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ColorScheme,,<includes>,ColorScheme,,true,,ColorScheme,-1
651943,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ColorSchemeT<ColorScheme>,,<includes>,ColorSchemeT<ColorScheme>,,true,,ColorSchemeT<ColorScheme>,-1
651944,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ColorSchemeViewModel,,<includes>,ColorSchemeViewModel,,true,,ColorSchemeViewModel,-1
651945,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ColorSchemeViewModelT<ColorSchemeViewModel>,,<includes>,ColorSchemeViewModelT<ColorSchemeViewModel>,,true,,ColorSchemeViewModelT<ColorSchemeViewModel>,-1
651946,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ColorSchemes,,<includes>,ColorSchemes,,true,,ColorSchemes,-1
651947,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ColorSchemesPageViewModel,,<includes>,ColorSchemesPageViewModel,,true,,ColorSchemesPageViewModel,-1
651948,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ColorSchemesPageViewModelT<ColorSchemesPageViewModel>,,<includes>,ColorSchemesPageViewModelT<ColorSchemesPageViewModel>,,true,,ColorSchemesPageViewModelT<ColorSchemesPageViewModel>,-1
651949,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ColorSchemesT<ColorSchemes>,,<includes>,ColorSchemesT<ColorSchemes>,,true,,ColorSchemesT<ColorSchemes>,-1
651950,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ColorSelectionArgs,,<includes>,ColorSelectionArgs,,true,,ColorSelectionArgs,-1
651951,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ColorSelectionArgsT<ColorSelectionArgs>,,<includes>,ColorSelectionArgsT<ColorSelectionArgs>,,true,,ColorSelectionArgsT<ColorSelectionArgs>,-1
651952,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ColorTable,,<includes>,ColorTable,,true,,ColorTable,-1
651953,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ColorTableEntry,,<includes>,ColorTableEntry,,true,,ColorTableEntry,-1
651954,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ColorTableEntryT<ColorTableEntry>,,<includes>,ColorTableEntryT<ColorTableEntry>,,true,,ColorTableEntryT<ColorTableEntry>,-1
651955,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ColorTests,,<includes>,ColorTests,,true,,ColorTests,-1
651956,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Colors,,<includes>,Colors,,true,,Colors,-1
651957,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ComPtr<IAsyncOperation<IPropertySet*>>,,<includes>,ComPtr<IAsyncOperation<IPropertySet*>>,,true,,ComPtr<IAsyncOperation<IPropertySet*>>,-1
651958,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ComPtr<IAsyncOperation<IVectorView<AppExtension*>*>>,,<includes>,ComPtr<IAsyncOperation<IVectorView<AppExtension*>*>>,,true,,ComPtr<IAsyncOperation<IVectorView<AppExtension*>*>>,-1
651959,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ComPtr<IBoxDrawingEffect>,,<includes>,ComPtr<IBoxDrawingEffect>,,true,,ComPtr<IBoxDrawingEffect>,-1
651960,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ComPtr<ID3DBlob>,,<includes>,ComPtr<ID3DBlob>,,true,,ComPtr<ID3DBlob>,-1
651961,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ComPtr<IDWriteFontFace1>,,<includes>,ComPtr<IDWriteFontFace1>,,true,,ComPtr<IDWriteFontFace1>,-1
651962,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ComPtr<IDWriteFontFallback>,,<includes>,ComPtr<IDWriteFontFallback>,,true,,ComPtr<IDWriteFontFallback>,-1
651963,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ComPtr<IDWriteTextAnalyzer1>,,<includes>,ComPtr<IDWriteTextAnalyzer1>,,true,,ComPtr<IDWriteTextAnalyzer1>,-1
651964,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ComPtr<IDWriteTextFormat>,,<includes>,ComPtr<IDWriteTextFormat>,,true,,ComPtr<IDWriteTextFormat>,-1
651965,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"ComPtr<IMap<HSTRING,IInspectable*>>",,<includes>,"ComPtr<IMap<HSTRING,IInspectable*>>",,true,,"ComPtr<IMap<HSTRING,IInspectable*>>",-1
651966,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ComPtr<IVectorView<AppExtension*>>,,<includes>,ComPtr<IVectorView<AppExtension*>>,,true,,ComPtr<IVectorView<AppExtension*>>,-1
651967,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Command,,<includes>,Command,,true,,Command,-1
651968,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Command*,,<includes>,Command*,,true,,Command*,-1
651969,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CommandHistory*,,<includes>,CommandHistory*,,true,,CommandHistory*,-1
651970,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CommandHistoryContext,,<includes>,CommandHistoryContext,,true,,CommandHistoryContext,-1
651971,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CommandHistoryContextT<CommandHistoryContext>,,<includes>,CommandHistoryContextT<CommandHistoryContext>,,true,,CommandHistoryContextT<CommandHistoryContext>,-1
651972,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"CommandLinePaletteItemT<CommandLinePaletteItem, PaletteItem>",,<includes>,"CommandLinePaletteItemT<CommandLinePaletteItem, PaletteItem>",,true,,"CommandLinePaletteItemT<CommandLinePaletteItem, PaletteItem>",-1
651973,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CommandPalette,,<includes>,CommandPalette,,true,,CommandPalette,-1
651974,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CommandPaletteLaunchMode,,<includes>,CommandPaletteLaunchMode,,true,,CommandPaletteLaunchMode,-1
651975,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CommandPaletteMode,,<includes>,CommandPaletteMode,,true,,CommandPaletteMode,-1
651976,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CommandPaletteT<CommandPalette>,,<includes>,CommandPaletteT<CommandPalette>,,true,,CommandPaletteT<CommandPalette>,-1
651977,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CommandT<Command>,,<includes>,CommandT<Command>,,true,,CommandT<Command>,-1
651978,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Commandline*,,<includes>,Commandline*,,true,,Commandline*,-1
651979,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CommandlineArgs,,<includes>,CommandlineArgs,,true,,CommandlineArgs,-1
651980,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CommandlineArgsT<CommandlineArgs>,,<includes>,CommandlineArgsT<CommandlineArgs>,,true,,CommandlineArgsT<CommandlineArgs>,-1
651981,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CompletionsChangedEventArgs,,<includes>,CompletionsChangedEventArgs,,true,,CompletionsChangedEventArgs,-1
651982,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CompletionsChangedEventArgsT<CompletionsChangedEventArgs>,,<includes>,CompletionsChangedEventArgsT<CompletionsChangedEventArgs>,,true,,CompletionsChangedEventArgsT<CompletionsChangedEventArgs>,-1
651983,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ConIoSrvComm,,<includes>,ConIoSrvComm,,true,,ConIoSrvComm,-1
651984,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ConIoSrvComm*,,<includes>,ConIoSrvComm*,,true,,ConIoSrvComm*,-1
651985,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ConnectionInformation,,<includes>,ConnectionInformation,,true,,ConnectionInformation,-1
651986,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ConnectionInformationT<ConnectionInformation>,,<includes>,ConnectionInformationT<ConnectionInformation>,,true,,ConnectionInformationT<ConnectionInformation>,-1
651987,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ConnectionState,,<includes>,ConnectionState,,true,,ConnectionState,-1
651988,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ConnectionStateHolder<AzureConnection>,,<includes>,ConnectionStateHolder<AzureConnection>,,true,,ConnectionStateHolder<AzureConnection>,-1
651989,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ConnectionStateHolder<ConptyConnection>,,<includes>,ConnectionStateHolder<ConptyConnection>,,true,,ConnectionStateHolder<ConptyConnection>,-1
651990,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ConptyConnection,,<includes>,ConptyConnection,,true,,ConptyConnection,-1
651991,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ConptyConnectionT<ConptyConnection>,,<includes>,ConptyConnectionT<ConptyConnection>,,true,,ConptyConnectionT<ConptyConnection>,-1
651992,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ConptyOutputTests,,<includes>,ConptyOutputTests,,true,,ConptyOutputTests,-1
651993,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ConptyRoundtripTests,,<includes>,ConptyRoundtripTests,,true,,ConptyRoundtripTests,-1
651994,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Console,,<includes>,Console,,true,,Console,-1
651995,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ConsoleArguments*,,<includes>,ConsoleArguments*,,true,,ConsoleArguments*,-1
651996,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ConsoleCaretEventFlags,,<includes>,ConsoleCaretEventFlags,,true,,ConsoleCaretEventFlags,-1
651997,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ConsoleControl,,<includes>,ConsoleControl,,true,,ConsoleControl,-1
651998,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ConsoleHandleData*,,<includes>,ConsoleHandleData*,,true,,ConsoleHandleData*,-1
651999,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ConsoleInputThread,,<includes>,ConsoleInputThread,,true,,ConsoleInputThread,-1
652000,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ConsoleProcessHandle*,,<includes>,ConsoleProcessHandle*,,true,,ConsoleProcessHandle*,-1
652001,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ConsoleWaitQueue*,,<includes>,ConsoleWaitQueue*,,true,,ConsoleWaitQueue*,-1
652002,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ConsoleWindow,,<includes>,ConsoleWindow,,true,,ConsoleWindow,-1
652003,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ConstructWithInitializerList,,<includes>,ConstructWithInitializerList,,true,,ConstructWithInitializerList,-1
652004,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Container,,<includes>,Container,,true,,Container,-1
652005,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ContentDialogButton,,<includes>,ContentDialogButton,,true,,ContentDialogButton,-1
652006,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ContentDialogPlacement,,<includes>,ContentDialogPlacement,,true,,ContentDialogPlacement,-1
652007,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ContentManager,,<includes>,ContentManager,,true,,ContentManager,-1
652008,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ContentManagerT<ContentManager>,,<includes>,ContentManagerT<ContentManager>,,true,,ContentManagerT<ContentManager>,-1
652009,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ContextMenuRequestedEventArgsT<ContextMenuRequestedEventArgs>,,<includes>,ContextMenuRequestedEventArgsT<ContextMenuRequestedEventArgs>,,true,,ContextMenuRequestedEventArgsT<ContextMenuRequestedEventArgs>,-1
652010,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Control,,<includes>,Control,,true,,Control,-1
652011,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ControlAppearance,,<includes>,ControlAppearance,,true,,ControlAppearance,-1
652012,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ControlCore,,<includes>,ControlCore,,true,,ControlCore,-1
652013,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"ControlCoreT<ControlCore, ControlCore>",,<includes>,"ControlCoreT<ControlCore, ControlCore>",,true,,"ControlCoreT<ControlCore, ControlCore>",-1
652014,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ControlCoreT<ControlCore>,,<includes>,ControlCoreT<ControlCore>,,true,,ControlCoreT<ControlCore>,-1
652015,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ControlCoreTests,,<includes>,ControlCoreTests,,true,,ControlCoreTests,-1
652016,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ControlEventTokens,,<includes>,ControlEventTokens,,true,,ControlEventTokens,-1
652017,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ControlInteractivity,,<includes>,ControlInteractivity,,true,,ControlInteractivity,-1
652018,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"ControlInteractivityT<ControlInteractivity, ControlInteractivity>",,<includes>,"ControlInteractivityT<ControlInteractivity, ControlInteractivity>",,true,,"ControlInteractivityT<ControlInteractivity, ControlInteractivity>",-1
652019,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ControlInteractivityT<ControlInteractivity>,,<includes>,ControlInteractivityT<ControlInteractivity>,,true,,ControlInteractivityT<ControlInteractivity>,-1
652020,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ControlInteractivityTests,,<includes>,ControlInteractivityTests,,true,,ControlInteractivityTests,-1
652021,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ControlSettings,,<includes>,ControlSettings,,true,,ControlSettings,-1
652022,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ControlType,,<includes>,ControlType,,true,,ControlType,-1
652023,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Controls,,<includes>,Controls,,true,,Controls,-1
652024,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ConvergedAlignment,,<includes>,ConvergedAlignment,,true,,ConvergedAlignment,-1
652025,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ConversionAreaInfo*,,<includes>,ConversionAreaInfo*,,true,,ConversionAreaInfo*,-1
652026,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ConversionTrait,,<includes>,ConversionTrait,,true,,ConversionTrait,-1
652027,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ConversionTrait<StructWithConverterSpecialization><>,,<includes>,ConversionTrait<StructWithConverterSpecialization><>,,true,,ConversionTrait<StructWithConverterSpecialization><>,-1
652028,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ConversionTrait<T>,,<includes>,ConversionTrait<T>,,true,,ConversionTrait<T>,-1
652029,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ConversionTrait<hstring_like><>,,<includes>,ConversionTrait<hstring_like><>,,true,,ConversionTrait<hstring_like><>,-1
652030,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,KeyChord><>,,<includes>,ConversionTrait<winrt.Microsoft.Terminal.Control.KeyChord><>,,true,,KeyChord><>,-1
652031,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ConvertFromColorRef,,<includes>,ConvertFromColorRef,,true,,ConvertFromColorRef,-1
652032,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ConvertSimpleUtf8Test,,<includes>,ConvertSimpleUtf8Test,,true,,ConvertSimpleUtf8Test,-1
652033,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Converter,,<includes>,Converter,,true,,Converter,-1
652034,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Converters,,<includes>,Converters,,true,,Converters,-1
652035,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ConvertersT<Converters>,,<includes>,ConvertersT<Converters>,,true,,ConvertersT<Converters>,-1
652036,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CopyFormat,,<includes>,CopyFormat,,true,,CopyFormat,-1
652037,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CopyTextArgs,,<includes>,CopyTextArgs,,true,,CopyTextArgs,-1
652038,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CopyTextArgsT<CopyTextArgs>,,<includes>,CopyTextArgsT<CopyTextArgs>,,true,,CopyTextArgsT<CopyTextArgs>,-1
652039,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CopyTextFrom,,<includes>,CopyTextFrom,,true,,CopyTextFrom,-1
652040,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CopyToClipboardEventArgs,,<includes>,CopyToClipboardEventArgs,,true,,CopyToClipboardEventArgs,-1
652041,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CopyToClipboardEventArgsT<CopyToClipboardEventArgs>,,<includes>,CopyToClipboardEventArgsT<CopyToClipboardEventArgs>,,true,,CopyToClipboardEventArgsT<CopyToClipboardEventArgs>,-1
652042,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Copyable_int*,,<includes>,Copyable_int*,,true,,Copyable_int*,-1
652043,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Core,,<includes>,Core,,true,,Core,-1
652044,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CoreApplication,,<includes>,CoreApplication,,true,,CoreApplication,-1
652045,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CoreDispatcherPriority,,<includes>,CoreDispatcherPriority,,true,,CoreDispatcherPriority,-1
652046,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CoreTextCompositionCompletedEventArgs,,<includes>,CoreTextCompositionCompletedEventArgs,,true,,CoreTextCompositionCompletedEventArgs,-1
652047,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CoreTextCompositionStartedEventArgs,,<includes>,CoreTextCompositionStartedEventArgs,,true,,CoreTextCompositionStartedEventArgs,-1
652048,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CoreTextEditContext,,<includes>,CoreTextEditContext,,true,,CoreTextEditContext,-1
652049,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CoreTextFormatUpdatingEventArgs,,<includes>,CoreTextFormatUpdatingEventArgs,,true,,CoreTextFormatUpdatingEventArgs,-1
652050,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CoreTextLayoutRequestedEventArgs,,<includes>,CoreTextLayoutRequestedEventArgs,,true,,CoreTextLayoutRequestedEventArgs,-1
652051,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CoreTextSelectionRequestedEventArgs,,<includes>,CoreTextSelectionRequestedEventArgs,,true,,CoreTextSelectionRequestedEventArgs,-1
652052,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CoreTextSelectionUpdatingEventArgs,,<includes>,CoreTextSelectionUpdatingEventArgs,,true,,CoreTextSelectionUpdatingEventArgs,-1
652053,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CoreTextTextRequestedEventArgs,,<includes>,CoreTextTextRequestedEventArgs,,true,,CoreTextTextRequestedEventArgs,-1
652054,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CoreTextTextUpdatingEventArgs,,<includes>,CoreTextTextUpdatingEventArgs,,true,,CoreTextTextUpdatingEventArgs,-1
652055,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CoreVirtualKeyStates,,<includes>,CoreVirtualKeyStates,,true,,CoreVirtualKeyStates,-1
652056,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CoreWindow,,<includes>,CoreWindow,,true,,CoreWindow,-1
652057,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CsiActionCodes,,<includes>,CsiActionCodes,,true,,CsiActionCodes,-1
652058,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CsiMouseButtonCodes,,<includes>,CsiMouseButtonCodes,,true,,CsiMouseButtonCodes,-1
652059,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CsiMouseModifierCodes,,<includes>,CsiMouseModifierCodes,,true,,CsiMouseModifierCodes,-1
652060,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CursorBlinker,,<includes>,CursorBlinker,,true,,CursorBlinker,-1
652061,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CursorDisplayState,,<includes>,CursorDisplayState,,true,,CursorDisplayState,-1
652062,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CursorMoveFunc,,<includes>,CursorMoveFunc,,true,,CursorMoveFunc,-1
652063,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CursorOptions,,<includes>,CursorOptions,,true,,CursorOptions,-1
652064,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CursorPositionEventArgs,,<includes>,CursorPositionEventArgs,,true,,CursorPositionEventArgs,-1
652065,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CursorPositionEventArgsT<CursorPositionEventArgs>,,<includes>,CursorPositionEventArgsT<CursorPositionEventArgs>,,true,,CursorPositionEventArgsT<CursorPositionEventArgs>,-1
652066,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CursorRect,,<includes>,CursorRect,,true,,CursorRect,-1
652067,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CursorSettings,,<includes>,CursorSettings,,true,,CursorSettings,-1
652068,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CursorStyle,,<includes>,CursorStyle,,true,,CursorStyle,-1
652069,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CustomTextLayout,,<includes>,CustomTextLayout,,true,,CustomTextLayout,-1
652070,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CustomTextLayoutTests,,<includes>,CustomTextLayoutTests,,true,,CustomTextLayoutTests,-1
652071,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CustomTextRenderer,,<includes>,CustomTextRenderer,,true,,CustomTextRenderer,-1
652072,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,D2D1,,<includes>,D2D1,,true,,D2D1,-1
652073,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,D2D1_ALPHA_MODE,,<includes>,D2D1_ALPHA_MODE,,true,,D2D1_ALPHA_MODE,-1
652074,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,D2D1_BITMAP_PROPERTIES,,<includes>,D2D1_BITMAP_PROPERTIES,,true,,D2D1_BITMAP_PROPERTIES,-1
652075,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,D2D1_COLOR_F,,<includes>,D2D1_COLOR_F,,true,,D2D1_COLOR_F,-1
652076,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,D2D1_DRAW_TEXT_OPTIONS,,<includes>,D2D1_DRAW_TEXT_OPTIONS,,true,,D2D1_DRAW_TEXT_OPTIONS,-1
652077,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,D2D1_MATRIX_3X2_F,,<includes>,D2D1_MATRIX_3X2_F,,true,,D2D1_MATRIX_3X2_F,-1
652078,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,D2D1_POINT_2F,,<includes>,D2D1_POINT_2F,,true,,D2D1_POINT_2F,-1
652079,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,D2D1_RECT_F,,<includes>,D2D1_RECT_F,,true,,D2D1_RECT_F,-1
652080,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,D2D1_SCALE_INTERPOLATION_MODE,,<includes>,D2D1_SCALE_INTERPOLATION_MODE,,true,,D2D1_SCALE_INTERPOLATION_MODE,-1
652081,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,D2D1_SIZE_F,,<includes>,D2D1_SIZE_F,,true,,D2D1_SIZE_F,-1
652082,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,D2D1_SIZE_U,,<includes>,D2D1_SIZE_U,,true,,D2D1_SIZE_U,-1
652083,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,D2D1_STROKE_STYLE_PROPERTIES,,<includes>,D2D1_STROKE_STYLE_PROPERTIES,,true,,D2D1_STROKE_STYLE_PROPERTIES,-1
652084,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,D2D1_TEXT_ANTIALIAS_MODE,,<includes>,D2D1_TEXT_ANTIALIAS_MODE,,true,,D2D1_TEXT_ANTIALIAS_MODE,-1
652085,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,D2D1_VECTOR_2F,,<includes>,D2D1_VECTOR_2F,,true,,D2D1_VECTOR_2F,-1
652086,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,D2D_POINT_2F,,<includes>,D2D_POINT_2F,,true,,D2D_POINT_2F,-1
652087,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,D2D_SIZE_F,,<includes>,D2D_SIZE_F,,true,,D2D_SIZE_F,-1
652088,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,D3D11_BUFFER_DESC,,<includes>,D3D11_BUFFER_DESC,,true,,D3D11_BUFFER_DESC,-1
652089,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS,,<includes>,D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS,,true,,D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS,-1
652090,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,D3D11_INPUT_ELEMENT_DESC[2],,<includes>,D3D11_INPUT_ELEMENT_DESC[2],,true,,D3D11_INPUT_ELEMENT_DESC[2],-1
652091,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,D3D11_MAPPED_SUBRESOURCE,,<includes>,D3D11_MAPPED_SUBRESOURCE,,true,,D3D11_MAPPED_SUBRESOURCE,-1
652092,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,D3D11_SAMPLER_DESC,,<includes>,D3D11_SAMPLER_DESC,,true,,D3D11_SAMPLER_DESC,-1
652093,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,D3D11_SHADER_VARIABLE_DESC,,<includes>,D3D11_SHADER_VARIABLE_DESC,,true,,D3D11_SHADER_VARIABLE_DESC,-1
652094,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,D3D11_SUBRESOURCE_DATA,,<includes>,D3D11_SUBRESOURCE_DATA,,true,,D3D11_SUBRESOURCE_DATA,-1
652095,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,D3D11_TEXTURE2D_DESC,,<includes>,D3D11_TEXTURE2D_DESC,,true,,D3D11_TEXTURE2D_DESC,-1
652096,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,D3D11_VIEWPORT,,<includes>,D3D11_VIEWPORT,,true,,D3D11_VIEWPORT,-1
652097,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,D3D_FEATURE_LEVEL,,<includes>,D3D_FEATURE_LEVEL,,true,,D3D_FEATURE_LEVEL,-1
652098,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DECLARE_HANDLE,,<includes>,DECLARE_HANDLE,,true,,DECLARE_HANDLE,-1
652099,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DEFINE_ENUM_FLAG_OPERATORS,,<includes>,DEFINE_ENUM_FLAG_OPERATORS,,true,,DEFINE_ENUM_FLAG_OPERATORS,-1
652100,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DWORD,,<includes>,DWORD,,true,,DWORD,-1
652101,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DWORDLONG,,<includes>,DWORDLONG,,true,,DWORDLONG,-1
652102,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DWORD[2],,<includes>,DWORD[2],,true,,DWORD[2],-1
652103,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DWORD[4],,<includes>,DWORD[4],,true,,DWORD[4],-1
652104,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DWORD[5],,<includes>,DWORD[5],,true,,DWORD[5],-1
652105,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DWORD_PTR[2],,<includes>,DWORD_PTR[2],,true,,DWORD_PTR[2],-1
652106,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DWRITE_COLOR_GLYPH_RUN1,,<includes>,DWRITE_COLOR_GLYPH_RUN1,,true,,DWRITE_COLOR_GLYPH_RUN1,-1
652107,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DWRITE_COLOR_GLYPH_RUN1*,,<includes>,DWRITE_COLOR_GLYPH_RUN1*,,true,,DWRITE_COLOR_GLYPH_RUN1*,-1
652108,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DWRITE_FLOW_DIRECTION,,<includes>,DWRITE_FLOW_DIRECTION,,true,,DWRITE_FLOW_DIRECTION,-1
652109,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DWRITE_FONT_METRICS,,<includes>,DWRITE_FONT_METRICS,,true,,DWRITE_FONT_METRICS,-1
652110,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DWRITE_FONT_METRICS1,,<includes>,DWRITE_FONT_METRICS1,,true,,DWRITE_FONT_METRICS1,-1
652111,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DWRITE_FONT_STRETCH,,<includes>,DWRITE_FONT_STRETCH,,true,,DWRITE_FONT_STRETCH,-1
652112,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DWRITE_FONT_STYLE,,<includes>,DWRITE_FONT_STYLE,,true,,DWRITE_FONT_STYLE,-1
652113,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DWRITE_FONT_WEIGHT,,<includes>,DWRITE_FONT_WEIGHT,,true,,DWRITE_FONT_WEIGHT,-1
652114,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DWRITE_GLYPH_METRICS,,<includes>,DWRITE_GLYPH_METRICS,,true,,DWRITE_GLYPH_METRICS,-1
652115,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DWRITE_GLYPH_RUN,,<includes>,DWRITE_GLYPH_RUN,,true,,DWRITE_GLYPH_RUN,-1
652116,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DWRITE_GLYPH_RUN*,,<includes>,DWRITE_GLYPH_RUN*,,true,,DWRITE_GLYPH_RUN*,-1
652117,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DWRITE_LINE_BREAKPOINT*,,<includes>,DWRITE_LINE_BREAKPOINT*,,true,,DWRITE_LINE_BREAKPOINT*,-1
652118,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DWRITE_LINE_SPACING,,<includes>,DWRITE_LINE_SPACING,,true,,DWRITE_LINE_SPACING,-1
652119,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DWRITE_MATRIX*,,<includes>,DWRITE_MATRIX*,,true,,DWRITE_MATRIX*,-1
652120,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DWRITE_READING_DIRECTION,,<includes>,DWRITE_READING_DIRECTION,,true,,DWRITE_READING_DIRECTION,-1
652121,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DWRITE_SCRIPT_ANALYSIS,,<includes>,DWRITE_SCRIPT_ANALYSIS,,true,,DWRITE_SCRIPT_ANALYSIS,-1
652122,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DWRITE_SCRIPT_ANALYSIS*,,<includes>,DWRITE_SCRIPT_ANALYSIS*,,true,,DWRITE_SCRIPT_ANALYSIS*,-1
652123,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DWRITE_TYPOGRAPHIC_FEATURES,,<includes>,DWRITE_TYPOGRAPHIC_FEATURES,,true,,DWRITE_TYPOGRAPHIC_FEATURES,-1
652124,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DWRITE_TYPOGRAPHIC_FEATURES*,,<includes>,DWRITE_TYPOGRAPHIC_FEATURES*,,true,,DWRITE_TYPOGRAPHIC_FEATURES*,-1
652125,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DXGI_ADAPTER_DESC1,,<includes>,DXGI_ADAPTER_DESC1,,true,,DXGI_ADAPTER_DESC1,-1
652126,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DXGI_ALPHA_MODE,,<includes>,DXGI_ALPHA_MODE,,true,,DXGI_ALPHA_MODE,-1
652127,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DXGI_PRESENT_PARAMETERS,,<includes>,DXGI_PRESENT_PARAMETERS,,true,,DXGI_PRESENT_PARAMETERS,-1
652128,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DXGI_RGBA,,<includes>,DXGI_RGBA,,true,,DXGI_RGBA,-1
652129,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DXGI_SWAP_CHAIN_DESC1,,<includes>,DXGI_SWAP_CHAIN_DESC1,,true,,DXGI_SWAP_CHAIN_DESC1,-1
652130,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DXGI_SWAP_CHAIN_FLAG,,<includes>,DXGI_SWAP_CHAIN_FLAG,,true,,DXGI_SWAP_CHAIN_FLAG,-1
652131,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Data*,,<includes>,Data*,,true,,Data*,-1
652132,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DataTemplate,,<includes>,DataTemplate,,true,,DataTemplate,-1
652133,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DbcsWriteRead,,<includes>,DbcsWriteRead,,true,,DbcsWriteRead,-1
652134,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DebugInputTapConnection,,<includes>,DebugInputTapConnection,,true,,DebugInputTapConnection,-1
652135,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DebugTapConnection,,<includes>,DebugTapConnection,,true,,DebugTapConnection,-1
652136,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DecodeUTF8,,<includes>,DecodeUTF8,,true,,DecodeUTF8,-1
652137,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DefaultOutOfProcModuleWithRegistrationFlag<int>,,<includes>,DefaultOutOfProcModuleWithRegistrationFlag<int>,,true,,DefaultOutOfProcModuleWithRegistrationFlag<int>,-1
652138,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DefaultTerminal,,<includes>,DefaultTerminal,,true,,DefaultTerminal,-1
652139,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DefaultTerminalT<DefaultTerminal>,,<includes>,DefaultTerminalT<DefaultTerminal>,,true,,DefaultTerminalT<DefaultTerminal>,-1
652140,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DelegationPackage,,<includes>,DelegationPackage,,true,,DelegationPackage,-1
652141,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DelegationPair,,<includes>,DelegationPair,,true,,DelegationPair,-1
652142,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DelegationPairKind,,<includes>,DelegationPairKind,,true,,DelegationPairKind,-1
652143,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DeleteProfileEventArgsT<DeleteProfileEventArgs>,,<includes>,DeleteProfileEventArgsT<DeleteProfileEventArgs>,,true,,DeleteProfileEventArgsT<DeleteProfileEventArgs>,-1
652144,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DependencyObject,,<includes>,DependencyObject,,true,,DependencyObject,-1
652145,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DependencyProperty,,<includes>,DependencyProperty,,true,,DependencyProperty,-1
652146,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DependencyPropertyChangedEventArgs,,<includes>,DependencyPropertyChangedEventArgs,,true,,DependencyPropertyChangedEventArgs,-1
652147,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DeserializationError,,<includes>,DeserializationError,,true,,DeserializationError,-1
652148,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DesktopBehavior,,<includes>,DesktopBehavior,,true,,DesktopBehavior,-1
652149,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Detail,,<includes>,Detail,,true,,Detail,-1
652150,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Devices,,<includes>,Devices,,true,,Devices,-1
652151,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Diff,,<includes>,Diff,,true,,Diff,-1
652152,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DisableVerifyExceptions,,<includes>,DisableVerifyExceptions,,true,,DisableVerifyExceptions,-1
652153,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DispatchTypes,,<includes>,DispatchTypes,,true,,DispatchTypes,-1
652154,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DispatcherQueue,,<includes>,DispatcherQueue,,true,,DispatcherQueue,-1
652155,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DispatcherQueueController,,<includes>,DispatcherQueueController,,true,,DispatcherQueueController,-1
652156,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DispatcherQueuePriority,,<includes>,DispatcherQueuePriority,,true,,DispatcherQueuePriority,-1
652157,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DispatcherTimer,,<includes>,DispatcherTimer,,true,,DispatcherTimer,-1
652158,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Documents,,<includes>,Documents,,true,,Documents,-1
652159,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DragDropModifiers,,<includes>,DragDropModifiers,,true,,DragDropModifiers,-1
652160,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DragEventArgs,,<includes>,DragEventArgs,,true,,DragEventArgs,-1
652161,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DrawingContext,,<includes>,DrawingContext,,true,,DrawingContext,-1
652162,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DrawingContext*,,<includes>,DrawingContext*,,true,,DrawingContext*,-1
652163,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DrcsCellMatrix,,<includes>,DrcsCellMatrix,,true,,DrcsCellMatrix,-1
652164,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DrcsCharsetSize,,<includes>,DrcsCharsetSize,,true,,DrcsCharsetSize,-1
652165,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DrcsEraseControl,,<includes>,DrcsEraseControl,,true,,DrcsEraseControl,-1
652166,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DrcsFontSet,,<includes>,DrcsFontSet,,true,,DrcsFontSet,-1
652167,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DrcsFontUsage,,<includes>,DrcsFontUsage,,true,,DrcsFontUsage,-1
652168,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Duration,,<includes>,Duration,,true,,Duration,-1
652169,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DxEngine,,<includes>,DxEngine,,true,,DxEngine,-1
652170,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DxFontInfo,,<includes>,DxFontInfo,,true,,DxFontInfo,-1
652171,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DxFontRenderData,,<includes>,DxFontRenderData,,true,,DxFontRenderData,-1
652172,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DxFontRenderData*,,<includes>,DxFontRenderData*,,true,,DxFontRenderData*,-1
652173,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DxSoftFont,,<includes>,DxSoftFont,,true,,DxSoftFont,-1
652174,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ENUMLOGFONT*,,<includes>,ENUMLOGFONT*,,true,,ENUMLOGFONT*,-1
652175,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,EXPCMDFLAGS*,,<includes>,EXPCMDFLAGS*,,true,,EXPCMDFLAGS*,-1
652176,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,EXPCMDSTATE*,,<includes>,EXPCMDSTATE*,,true,,EXPCMDSTATE*,-1
652177,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,EchoConnectionT<EchoConnection>,,<includes>,EchoConnectionT<EchoConnection>,,true,,EchoConnectionT<EchoConnection>,-1
652178,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,EditColorSchemeT<EditColorScheme>,,<includes>,EditColorSchemeT<EditColorScheme>,,true,,EditColorSchemeT<EditColorScheme>,-1
652179,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Editor,,<includes>,Editor,,true,,Editor,-1
652180,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ElementFactoryGetArgs,,<includes>,ElementFactoryGetArgs,,true,,ElementFactoryGetArgs,-1
652181,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ElementTheme,,<includes>,ElementTheme,,true,,ElementTheme,-1
652182,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,EmptyStringVisibilityConverterT<EmptyStringVisibilityConverter>,,<includes>,EmptyStringVisibilityConverterT<EmptyStringVisibilityConverter>,,true,,EmptyStringVisibilityConverterT<EmptyStringVisibilityConverter>,-1
652183,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,EnumEntryT<EnumEntry>,,<includes>,EnumEntryT<EnumEntry>,,true,,EnumEntryT<EnumEntry>,-1
652184,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"EnumMapper<T, TBase>",,<includes>,"EnumMapper<T, TBase>",,true,,"EnumMapper<T, TBase>",-1
652185,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,EnumMappings,,<includes>,EnumMappings,,true,,EnumMappings,-1
652186,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,EnumMappingsT<EnumMappings>,,<includes>,EnumMappingsT<EnumMappings>,,true,,EnumMappingsT<EnumMappings>,-1
652187,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,EnumSetTests,,<includes>,EnumSetTests,,true,,EnumSetTests,-1
652188,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,EnvTests,,<includes>,EnvTests,,true,,EnvTests,-1
652189,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Equality,,<includes>,Equality,,true,,Equality,-1
652190,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,EraseType,,<includes>,EraseType,,true,,EraseType,-1
652191,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ErrorReporting,,<includes>,ErrorReporting,,true,,ErrorReporting,-1
652192,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Event,,<includes>,Event,,true,,Event,-1
652193,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ExecuteCommandlineArgs,,<includes>,ExecuteCommandlineArgs,,true,,ExecuteCommandlineArgs,-1
652194,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ExecuteCommandlineArgsT<ExecuteCommandlineArgs>,,<includes>,ExecuteCommandlineArgsT<ExecuteCommandlineArgs>,,true,,ExecuteCommandlineArgsT<ExecuteCommandlineArgs>,-1
652195,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ExitProcess,,<includes>,ExitProcess,,true,,ExitProcess,-1
652196,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ExitThread,,<includes>,ExitThread,,true,,ExitThread,-1
652197,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ExportBufferArgs,,<includes>,ExportBufferArgs,,true,,ExportBufferArgs,-1
652198,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ExportBufferArgsT<ExportBufferArgs>,,<includes>,ExportBufferArgsT<ExportBufferArgs>,,true,,ExportBufferArgsT<ExportBufferArgs>,-1
652199,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,F,,<includes>,F,,true,,F,-1
652200,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FAIL_FAST_HR,,<includes>,FAIL_FAST_HR,,true,,FAIL_FAST_HR,-1
652201,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FILE*,,<includes>,FILE*,,true,,FILE*,-1
652202,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FILETIME,,<includes>,FILETIME,,true,,FILETIME,-1
652203,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FILETIME*,,<includes>,FILETIME*,,true,,FILETIME*,-1
652204,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FLOAT,,<includes>,FLOAT,,true,,FLOAT,-1
652205,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FONTINFO,,<includes>,FONTINFO,,true,,FONTINFO,-1
652206,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FORCEINLINE,,<includes>,FORCEINLINE,,true,,FORCEINLINE,-1
652207,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FileSource,,<includes>,FileSource,,true,,FileSource,-1
652208,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FillOutputTests,,<includes>,FillOutputTests,,true,,FillOutputTests,-1
652209,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FilterOption,,<includes>,FilterOption,,true,,FilterOption,-1
652210,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FilteredCommand,,<includes>,FilteredCommand,,true,,FilteredCommand,-1
652211,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FilteredCommandT<FilteredCommand>,,<includes>,FilteredCommandT<FilteredCommand>,,true,,FilteredCommandT<FilteredCommand>,-1
652212,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FindMatchArgs,,<includes>,FindMatchArgs,,true,,FindMatchArgs,-1
652213,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FindMatchArgsT<FindMatchArgs>,,<includes>,FindMatchArgsT<FindMatchArgs>,,true,,FindMatchArgsT<FindMatchArgs>,-1
652214,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FindMatchDirection,,<includes>,FindMatchDirection,,true,,FindMatchDirection,-1
652215,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FindTargetWindowArgsT<FindTargetWindowArgs>,,<includes>,FindTargetWindowArgsT<FindTargetWindowArgs>,,true,,FindTargetWindowArgsT<FindTargetWindowArgs>,-1
652216,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FindTargetWindowResult,,<includes>,FindTargetWindowResult,,true,,FindTargetWindowResult,-1
652217,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FindTargetWindowResultT<FindTargetWindowResult>,,<includes>,FindTargetWindowResultT<FindTargetWindowResult>,,true,,FindTargetWindowResultT<FindTargetWindowResult>,-1
652218,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FirstWindowPreference,,<includes>,FirstWindowPreference,,true,,FirstWindowPreference,-1
652219,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"FlagMapper<T, TBase>",,<includes>,"FlagMapper<T, TBase>",,true,,"FlagMapper<T, TBase>",-1
652220,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FlaggedEnumValue<0x00000000>,,<includes>,FlaggedEnumValue<0x00000000>,,true,,FlaggedEnumValue<0x00000000>,-1
652221,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FlaggedEnumValue<0x01000000>,,<includes>,FlaggedEnumValue<0x01000000>,,true,,FlaggedEnumValue<0x01000000>,-1
652222,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Flooring,,<includes>,Flooring,,true,,Flooring,-1
652223,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FlushConsoleInputBuffer,,<includes>,FlushConsoleInputBuffer,,true,,FlushConsoleInputBuffer,-1
652224,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Flyout,,<includes>,Flyout,,true,,Flyout,-1
652225,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FlyoutBase,,<includes>,FlyoutBase,,true,,FlyoutBase,-1
652226,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FlyoutPlacementMode,,<includes>,FlyoutPlacementMode,,true,,FlyoutPlacementMode,-1
652227,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FlyoutShowMode,,<includes>,FlyoutShowMode,,true,,FlyoutShowMode,-1
652228,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FocusDirection,,<includes>,FocusDirection,,true,,FocusDirection,-1
652229,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FocusManager,,<includes>,FocusManager,,true,,FocusManager,-1
652230,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FocusPaneArgs,,<includes>,FocusPaneArgs,,true,,FocusPaneArgs,-1
652231,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FocusPaneArgsT<FocusPaneArgs>,,<includes>,FocusPaneArgsT<FocusPaneArgs>,,true,,FocusPaneArgsT<FocusPaneArgs>,-1
652232,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FocusState,,<includes>,FocusState,,true,,FocusState,-1
652233,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FolderChangeEvents,,<includes>,FolderChangeEvents,,true,,FolderChangeEvents,-1
652234,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"FolderEntryT<FolderEntry, NewTabMenuEntry>",,<includes>,"FolderEntryT<FolderEntry, NewTabMenuEntry>",,true,,"FolderEntryT<FolderEntry, NewTabMenuEntry>",-1
652235,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Font,,<includes>,Font,,true,,Font,-1
652236,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FontBuffer,,<includes>,FontBuffer,,true,,FontBuffer,-1
652237,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FontConfig,,<includes>,FontConfig,,true,,FontConfig,-1
652238,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FontConfig*,,<includes>,FontConfig*,,true,,FontConfig*,-1
652239,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FontConfigT<FontConfig>,,<includes>,FontConfigT<FontConfig>,,true,,FontConfigT<FontConfig>,-1
652240,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FontDecorationPosition,,<includes>,FontDecorationPosition,,true,,FontDecorationPosition,-1
652241,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FontIcon,,<includes>,FontIcon,,true,,FontIcon,-1
652242,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FontInfo*,,<includes>,FontInfo*,,true,,FontInfo*,-1
652243,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FontInfoEventArgs,,<includes>,FontInfoEventArgs,,true,,FontInfoEventArgs,-1
652244,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FontInfoEventArgsT<FontInfoEventArgs>,,<includes>,FontInfoEventArgsT<FontInfoEventArgs>,,true,,FontInfoEventArgsT<FontInfoEventArgs>,-1
652245,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FontRelevantAttributes,,<includes>,FontRelevantAttributes,,true,,FontRelevantAttributes,-1
652246,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FontResource,,<includes>,FontResource,,true,,FontResource,-1
652247,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FontSettings*,,<includes>,FontSettings*,,true,,FontSettings*,-1
652248,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FontSizeChangedArgsT<FontSizeChangedArgs>,,<includes>,FontSizeChangedArgsT<FontSizeChangedArgs>,,true,,FontSizeChangedArgsT<FontSizeChangedArgs>,-1
652249,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FontStyle,,<includes>,FontStyle,,true,,FontStyle,-1
652250,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FontT<Font>,,<includes>,FontT<Font>,,true,,FontT<Font>,-1
652251,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FontType,,<includes>,FontType,,true,,FontType,-1
652252,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FontWeight,,<includes>,FontWeight,,true,,FontWeight,-1
652253,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ForceV2States,,<includes>,ForceV2States,,true,,ForceV2States,-1
652254,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FoundResultsArgsT<FoundResultsArgs>,,<includes>,FoundResultsArgsT<FoundResultsArgs>,,true,,FoundResultsArgsT<FoundResultsArgs>,-1
652255,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Foundation,,<includes>,Foundation,,true,,Foundation,-1
652256,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Frame,,<includes>,Frame,,true,,Frame,-1
652257,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FrameworkElement,,<includes>,FrameworkElement,,true,,FrameworkElement,-1
652258,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FrameworkElementAutomationPeer,,<includes>,FrameworkElementAutomationPeer,,true,,FrameworkElementAutomationPeer,-1
652259,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FreeLibrary,,<includes>,FreeLibrary,,true,,FreeLibrary,-1
652260,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,From,,<includes>,From,,true,,From,-1
652261,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FwdIt,,<includes>,FwdIt,,true,,FwdIt,-1
652262,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,GLYPHENTRY[96],,<includes>,GLYPHENTRY[96],,true,,GLYPHENTRY[96],-1
652263,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,GUID,,<includes>,GUID,,true,,GUID,-1
652264,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,GUID*,,<includes>,GUID*,,true,,GUID*,-1
652265,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,GUID**,,<includes>,GUID**,,true,,GUID**,-1
652266,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,GdiEngine,,<includes>,GdiEngine,,true,,GdiEngine,-1
652267,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Generate,,<includes>,Generate,,true,,Generate,-1
652268,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,GenericKeyIdentifiers,,<includes>,GenericKeyIdentifiers,,true,,GenericKeyIdentifiers,-1
652269,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,GetStockBrush,,<includes>,GetStockBrush,,true,,GetStockBrush,-1
652270,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,GetSuggestionWindowPos,,<includes>,GetSuggestionWindowPos,,true,,GetSuggestionWindowPos,-1
652271,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,GetTextBoxAreaPos,,<includes>,GetTextBoxAreaPos,,true,,GetTextBoxAreaPos,-1
652272,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,GetVirtualDesktopIds,,<includes>,GetVirtualDesktopIds,,true,,GetVirtualDesktopIds,-1
652273,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,GetWindowLayoutArgsT<GetWindowLayoutArgs>,,<includes>,GetWindowLayoutArgsT<GetWindowLayoutArgs>,,true,,GetWindowLayoutArgsT<GetWindowLayoutArgs>,-1
652274,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,GlobalAppSettings,,<includes>,GlobalAppSettings,,true,,GlobalAppSettings,-1
652275,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,GlobalAppSettingsT<GlobalAppSettings>,,<includes>,GlobalAppSettingsT<GlobalAppSettings>,,true,,GlobalAppSettingsT<GlobalAppSettings>,-1
652276,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,GlobalAppearanceT<GlobalAppearance>,,<includes>,GlobalAppearanceT<GlobalAppearance>,,true,,GlobalAppearanceT<GlobalAppearance>,-1
652277,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,GlobalAppearanceViewModel,,<includes>,GlobalAppearanceViewModel,,true,,GlobalAppearanceViewModel,-1
652278,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,GlobalAppearanceViewModelT<GlobalAppearanceViewModel>,,<includes>,GlobalAppearanceViewModelT<GlobalAppearanceViewModel>,,true,,GlobalAppearanceViewModelT<GlobalAppearanceViewModel>,-1
652279,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,GlobalSummonArgs,,<includes>,GlobalSummonArgs,,true,,GlobalSummonArgs,-1
652280,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,GlobalSummonArgsT<GlobalSummonArgs>,,<includes>,GlobalSummonArgsT<GlobalSummonArgs>,,true,,GlobalSummonArgsT<GlobalSummonArgs>,-1
652281,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Globalization,,<includes>,Globalization,,true,,Globalization,-1
652282,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Globals & (),,<includes>,Globals & (),,true,,Globals & (),-1
652283,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,GraphicsOptions,,<includes>,GraphicsOptions,,true,,GraphicsOptions,-1
652284,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Grid,,<includes>,Grid,,true,,Grid,-1
652285,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,GridLineRange,,<includes>,GridLineRange,,true,,GridLineRange,-1
652286,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,GridUnitType,,<includes>,GridUnitType,,true,,GridUnitType,-1
652287,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HANDLE,,<includes>,HANDLE,,true,,HANDLE,-1
652288,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HANDLE*,,<includes>,HANDLE*,,true,,HANDLE*,-1
652289,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HANDLE[2],,<includes>,HANDLE[2],,true,,HANDLE[2],-1
652290,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HBITMAP,,<includes>,HBITMAP,,true,,HBITMAP,-1
652291,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HBRUSH,,<includes>,HBRUSH,,true,,HBRUSH,-1
652292,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HDC,,<includes>,HDC,,true,,HDC,-1
652293,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HFONT,,<includes>,HFONT,,true,,HFONT,-1
652294,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HGLOBAL,,<includes>,HGLOBAL,,true,,HGLOBAL,-1
652295,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HHOOK,,<includes>,HHOOK,,true,,HHOOK,-1
652296,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HICON,,<includes>,HICON,,true,,HICON,-1
652297,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HIGHCONTRASTW,,<includes>,HIGHCONTRASTW,,true,,HIGHCONTRASTW,-1
652298,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HINSTANCE,,<includes>,HINSTANCE,,true,,HINSTANCE,-1
652299,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HKEY,,<includes>,HKEY,,true,,HKEY,-1
652300,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HKL,,<includes>,HKL,,true,,HKL,-1
652301,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HMENU,,<includes>,HMENU,,true,,HMENU,-1
652302,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HMODULE,,<includes>,HMODULE,,true,,HMODULE,-1
652303,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HMONITOR,,<includes>,HMONITOR,,true,,HMONITOR,-1
652304,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HPCON,,<includes>,HPCON,,true,,HPCON,-1
652305,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HPCON*,,<includes>,HPCON*,,true,,HPCON*,-1
652306,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HRESULT,,<includes>,HRESULT,,true,,HRESULT,-1
652307,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"HRESULT(*)(HANDLE,HANDLE,HANDLE,HANDLE,HANDLE,HANDLE,TERMINAL_STARTUP_INFO)",,<includes>,"HRESULT(*)(HANDLE,HANDLE,HANDLE,HANDLE,HANDLE,HANDLE,TERMINAL_STARTUP_INFO)",,true,,"HRESULT(*)(HANDLE,HANDLE,HANDLE,HANDLE,HANDLE,HANDLE,TERMINAL_STARTUP_INFO)",-1
652308,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HRSRC,,<includes>,HRSRC,,true,,HRSRC,-1
652309,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HSL,,<includes>,HSL,,true,,HSL,-1
652310,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HString,,<includes>,HString,,true,,HString,-1
652311,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HWND,,<includes>,HWND,,true,,HWND,-1
652312,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HWND*,,<includes>,HWND*,,true,,HWND*,-1
652313,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HandleCtrlEvent,,<includes>,HandleCtrlEvent,,true,,HandleCtrlEvent,-1
652314,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HandleType,,<includes>,HandleType,,true,,HandleType,-1
652315,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HasScrollViewer<Actions>,,<includes>,HasScrollViewer<Actions>,,true,,HasScrollViewer<Actions>,-1
652316,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HasScrollViewer<AddProfile>,,<includes>,HasScrollViewer<AddProfile>,,true,,HasScrollViewer<AddProfile>,-1
652317,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HasScrollViewer<ColorSchemes>,,<includes>,HasScrollViewer<ColorSchemes>,,true,,HasScrollViewer<ColorSchemes>,-1
652318,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HasScrollViewer<EditColorScheme>,,<includes>,HasScrollViewer<EditColorScheme>,,true,,HasScrollViewer<EditColorScheme>,-1
652319,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HasScrollViewer<GlobalAppearance>,,<includes>,HasScrollViewer<GlobalAppearance>,,true,,HasScrollViewer<GlobalAppearance>,-1
652320,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HasScrollViewer<Interaction>,,<includes>,HasScrollViewer<Interaction>,,true,,HasScrollViewer<Interaction>,-1
652321,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HasScrollViewer<Launch>,,<includes>,HasScrollViewer<Launch>,,true,,HasScrollViewer<Launch>,-1
652322,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HasScrollViewer<Profiles_Advanced>,,<includes>,HasScrollViewer<Profiles_Advanced>,,true,,HasScrollViewer<Profiles_Advanced>,-1
652323,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HasScrollViewer<Profiles_Appearance>,,<includes>,HasScrollViewer<Profiles_Appearance>,,true,,HasScrollViewer<Profiles_Appearance>,-1
652324,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HasScrollViewer<Profiles_Base>,,<includes>,HasScrollViewer<Profiles_Base>,,true,,HasScrollViewer<Profiles_Base>,-1
652325,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HasScrollViewer<Rendering>,,<includes>,HasScrollViewer<Rendering>,,true,,HasScrollViewer<Rendering>,-1
652326,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HasScrollViewer<T>,,<includes>,HasScrollViewer<T>,,true,,HasScrollViewer<T>,-1
652327,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Helper,,<includes>,Helper,,true,,Helper,-1
652328,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HighlightedText,,<includes>,HighlightedText,,true,,HighlightedText,-1
652329,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HighlightedTextControl,,<includes>,HighlightedTextControl,,true,,HighlightedTextControl,-1
652330,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HighlightedTextControlT<HighlightedTextControl>,,<includes>,HighlightedTextControlT<HighlightedTextControl>,,true,,HighlightedTextControlT<HighlightedTextControl>,-1
652331,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HighlightedTextSegmentT<HighlightedTextSegment>,,<includes>,HighlightedTextSegmentT<HighlightedTextSegment>,,true,,HighlightedTextSegmentT<HighlightedTextSegment>,-1
652332,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HighlightedTextT<HighlightedText>,,<includes>,HighlightedTextT<HighlightedText>,,true,,HighlightedTextT<HighlightedText>,-1
652333,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HistoryTests,,<includes>,HistoryTests,,true,,HistoryTests,-1
652334,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HorizontalAlignment,,<includes>,HorizontalAlignment,,true,,HorizontalAlignment,-1
652335,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HostSignalInputThread,,<includes>,HostSignalInputThread,,true,,HostSignalInputThread,-1
652336,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HostSignalPacket,,<includes>,HostSignalPacket,,true,,HostSignalPacket,-1
652337,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HostSignals,,<includes>,HostSignals,,true,,HostSignals,-1
652338,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Hosting,,<includes>,Hosting,,true,,Hosting,-1
652339,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HttpMethod,,<includes>,HttpMethod,,true,,HttpMethod,-1
652340,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HwndTerminal*,,<includes>,HwndTerminal*,,true,,HwndTerminal*,-1
652341,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HwndTerminalAutomationPeer*,,<includes>,HwndTerminalAutomationPeer*,,true,,HwndTerminalAutomationPeer*,-1
652342,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IAccessibilityNotifier,,<includes>,IAccessibilityNotifier,,true,,IAccessibilityNotifier,-1
652343,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IAccessibilityNotifier*,,<includes>,IAccessibilityNotifier*,,true,,IAccessibilityNotifier*,-1
652344,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IActionArgs,,<includes>,IActionArgs,,true,,IActionArgs,-1
652345,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IActionMapView,,<includes>,IActionMapView,,true,,IActionMapView,-1
652346,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IApiMsg,,<includes>,IApiMsg,,true,,IApiMsg,-1
652347,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IApiRoutines*,,<includes>,IApiRoutines*,,true,,IApiRoutines*,-1
652348,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IAppearanceConfig,,<includes>,IAppearanceConfig,,true,,IAppearanceConfig,-1
652349,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IAsyncAction,,<includes>,IAsyncAction,,true,,IAsyncAction,-1
652350,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IAsyncOperation<ContentDialogResult>,,<includes>,IAsyncOperation<ContentDialogResult>,,true,,IAsyncOperation<ContentDialogResult>,-1
652351,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IAsyncOperation<bool>,,<includes>,IAsyncOperation<bool>,,true,,IAsyncOperation<bool>,-1
652352,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,hstring>,,<includes>,IAsyncOperation<winrt.hstring>,,true,,hstring>,-1
652353,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IBackend,,<includes>,IBackend,,true,,IBackend,-1
652354,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IBindCtx*,,<includes>,IBindCtx*,,true,,IBindCtx*,-1
652355,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IConsoleControl,,<includes>,IConsoleControl,,true,,IConsoleControl,-1
652356,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IConsoleControl*,,<includes>,IConsoleControl*,,true,,IConsoleControl*,-1
652357,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IConsoleInputThread,,<includes>,IConsoleInputThread,,true,,IConsoleInputThread,-1
652358,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IConsoleInputThread*,,<includes>,IConsoleInputThread*,,true,,IConsoleInputThread*,-1
652359,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IConsoleWindow,,<includes>,IConsoleWindow,,true,,IConsoleWindow,-1
652360,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IConsoleWindow*,,<includes>,IConsoleWindow*,,true,,IConsoleWindow*,-1
652361,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IControlAccessibilityInfo,,<includes>,IControlAccessibilityInfo,,true,,IControlAccessibilityInfo,-1
652362,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IControlAppearance,,<includes>,IControlAppearance,,true,,IControlAppearance,-1
652363,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IControlSettings,,<includes>,IControlSettings,,true,,IControlSettings,-1
652364,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ICoreAppearance,,<includes>,ICoreAppearance,,true,,ICoreAppearance,-1
652365,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ICoreSettings,,<includes>,ICoreSettings,,true,,ICoreSettings,-1
652366,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ID2D1Brush*,,<includes>,ID2D1Brush*,,true,,ID2D1Brush*,-1
652367,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ID2D1DeviceContext*,,<includes>,ID2D1DeviceContext*,,true,,ID2D1DeviceContext*,-1
652368,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ID2D1DeviceContext4*,,<includes>,ID2D1DeviceContext4*,,true,,ID2D1DeviceContext4*,-1
652369,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ID2D1RenderTarget*,,<includes>,ID2D1RenderTarget*,,true,,ID2D1RenderTarget*,-1
652370,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ID2D1SolidColorBrush,,<includes>,ID2D1SolidColorBrush,,true,,ID2D1SolidColorBrush,-1
652371,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ID2D1SolidColorBrush*,,<includes>,ID2D1SolidColorBrush*,,true,,ID2D1SolidColorBrush*,-1
652372,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ID2D1StrokeStyle*,,<includes>,ID2D1StrokeStyle*,,true,,ID2D1StrokeStyle*,-1
652373,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ID3D11Buffer ** [2],,<includes>,ID3D11Buffer ** [2],,true,,ID3D11Buffer ** [2],-1
652374,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ID3D11Buffer**[2],,<includes>,ID3D11Buffer**[2],,true,,ID3D11Buffer**[2],-1
652375,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ID3D11DeviceContext*,,<includes>,ID3D11DeviceContext*,,true,,ID3D11DeviceContext*,-1
652376,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ID3D11Resource*,,<includes>,ID3D11Resource*,,true,,ID3D11Resource*,-1
652377,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ID3D11ShaderReflectionConstantBuffer*,,<includes>,ID3D11ShaderReflectionConstantBuffer*,,true,,ID3D11ShaderReflectionConstantBuffer*,-1
652378,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ID3D11ShaderReflectionVariable*,,<includes>,ID3D11ShaderReflectionVariable*,,true,,ID3D11ShaderReflectionVariable*,-1
652379,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ID3D11ShaderResourceView ** [2],,<includes>,ID3D11ShaderResourceView ** [2],,true,,ID3D11ShaderResourceView ** [2],-1
652380,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ID3D11ShaderResourceView**[2],,<includes>,ID3D11ShaderResourceView**[2],,true,,ID3D11ShaderResourceView**[2],-1
652381,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IDWriteColorGlyphRunEnumerator1*,,<includes>,IDWriteColorGlyphRunEnumerator1*,,true,,IDWriteColorGlyphRunEnumerator1*,-1
652382,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IDWriteFactory*,,<includes>,IDWriteFactory*,,true,,IDWriteFactory*,-1
652383,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IDWriteFactory1*,,<includes>,IDWriteFactory1*,,true,,IDWriteFactory1*,-1
652384,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IDWriteFactory4*,,<includes>,IDWriteFactory4*,,true,,IDWriteFactory4*,-1
652385,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IDWriteFontCollection,,<includes>,IDWriteFontCollection,,true,,IDWriteFontCollection,-1
652386,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IDWriteFontCollection*,,<includes>,IDWriteFontCollection*,,true,,IDWriteFontCollection*,-1
652387,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IDWriteFontFace1*,,<includes>,IDWriteFontFace1*,,true,,IDWriteFontFace1*,-1
652388,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IDWriteFontFace2*,,<includes>,IDWriteFontFace2*,,true,,IDWriteFontFace2*,-1
652389,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IDWriteFontFace2**,,<includes>,IDWriteFontFace2**,,true,,IDWriteFontFace2**,-1
652390,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IDWriteFontFamily*,,<includes>,IDWriteFontFamily*,,true,,IDWriteFontFamily*,-1
652391,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IDWriteInlineObject*,,<includes>,IDWriteInlineObject*,,true,,IDWriteInlineObject*,-1
652392,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IDWriteNumberSubstitution*,,<includes>,IDWriteNumberSubstitution*,,true,,IDWriteNumberSubstitution*,-1
652393,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IDWriteNumberSubstitution**,,<includes>,IDWriteNumberSubstitution**,,true,,IDWriteNumberSubstitution**,-1
652394,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IDWriteRenderingParams1**,,<includes>,IDWriteRenderingParams1**,,true,,IDWriteRenderingParams1**,-1
652395,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IDWriteTextAnalysisSink,,<includes>,IDWriteTextAnalysisSink,,true,,IDWriteTextAnalysisSink,-1
652396,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IDWriteTextAnalysisSource,,<includes>,IDWriteTextAnalysisSource,,true,,IDWriteTextAnalysisSource,-1
652397,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IDWriteTextFormat*,,<includes>,IDWriteTextFormat*,,true,,IDWriteTextFormat*,-1
652398,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IDWriteTextFormat3*,,<includes>,IDWriteTextFormat3*,,true,,IDWriteTextFormat3*,-1
652399,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IDataRow**,,<includes>,IDataRow**,,true,,IDataRow**,-1
652400,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IDataSource**,,<includes>,IDataSource**,,true,,IDataSource**,-1
652401,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IDeviceComm*,,<includes>,IDeviceComm*,,true,,IDeviceComm*,-1
652402,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IDialogPresenter,,<includes>,IDialogPresenter,,true,,IDialogPresenter,-1
652403,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IDynamicProfileGenerator,,<includes>,IDynamicProfileGenerator,,true,,IDynamicProfileGenerator,-1
652404,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IEnumExplorerCommand**,,<includes>,IEnumExplorerCommand**,,true,,IEnumExplorerCommand**,-1
652405,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IEnumTfRanges**,,<includes>,IEnumTfRanges**,,true,,IEnumTfRanges**,-1
652406,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IFACEMETHOD,,<includes>,IFACEMETHOD,,true,,IFACEMETHOD,-1
652407,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IFACEMETHODIMP,,<includes>,IFACEMETHODIMP,,true,,IFACEMETHODIMP,-1
652408,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IHighDpiApi,,<includes>,IHighDpiApi,,true,,IHighDpiApi,-1
652409,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IHighDpiApi*,,<includes>,IHighDpiApi*,,true,,IHighDpiApi*,-1
652410,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IHostedInWindow,,<includes>,IHostedInWindow,,true,,IHostedInWindow,-1
652411,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IID,,<includes>,IID,,true,,IID,-1
652412,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IID[2],,<includes>,IID[2],,true,,IID[2],-1
652413,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IInheritable<ActionMap>,,<includes>,IInheritable<ActionMap>,,true,,IInheritable<ActionMap>,-1
652414,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IInheritable<AppearanceConfig>,,<includes>,IInheritable<AppearanceConfig>,,true,,IInheritable<AppearanceConfig>,-1
652415,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IInheritable<FontConfig>,,<includes>,IInheritable<FontConfig>,,true,,IInheritable<FontConfig>,-1
652416,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IInheritable<GlobalAppSettings>,,<includes>,IInheritable<GlobalAppSettings>,,true,,IInheritable<GlobalAppSettings>,-1
652417,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IInheritable<Profile>,,<includes>,IInheritable<Profile>,,true,,IInheritable<Profile>,-1
652418,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IInheritable<TerminalSettings>,,<includes>,IInheritable<TerminalSettings>,,true,,IInheritable<TerminalSettings>,-1
652419,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IInteractDispatch,,<includes>,IInteractDispatch,,true,,IInteractDispatch,-1
652420,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IInteractivityFactory,,<includes>,IInteractivityFactory,,true,,IInteractivityFactory,-1
652421,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IKeyBindings,,<includes>,IKeyBindings,,true,,IKeyBindings,-1
652422,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IMAGE_DOS_HEADER,,<includes>,IMAGE_DOS_HEADER,,true,,IMAGE_DOS_HEADER,-1
652423,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CopyFormat>,,<includes>,"IMap<winrt.hstring,Microsoft.Terminal.Control.CopyFormat>",,true,,CopyFormat>,-1
652424,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ScrollbarState>,,<includes>,"IMap<winrt.hstring,Microsoft.Terminal.Control.ScrollbarState>",,true,,ScrollbarState>,-1
652425,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TextAntialiasingMode>,,<includes>,"IMap<winrt.hstring,Microsoft.Terminal.Control.TextAntialiasingMode>",,true,,TextAntialiasingMode>,-1
652426,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AdjustTextMode>,,<includes>,"IMap<winrt.hstring,Microsoft.Terminal.Core.AdjustTextMode>",,true,,AdjustTextMode>,-1
652427,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CursorStyle>,,<includes>,"IMap<winrt.hstring,Microsoft.Terminal.Core.CursorStyle>",,true,,CursorStyle>,-1
652428,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MatchMode>,,<includes>,"IMap<winrt.hstring,Microsoft.Terminal.Core.MatchMode>",,true,,MatchMode>,-1
652429,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IntenseStyle>,,<includes>,"IMap<winrt.hstring,Microsoft.Terminal.Settings.Model.IntenseStyle>",,true,,IntenseStyle>,-1
652430,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CloseOnExitMode>,,<includes>,"IMap<winrt.hstring,Model.CloseOnExitMode>",,true,,CloseOnExitMode>,-1
652431,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FirstWindowPreference>,,<includes>,"IMap<winrt.hstring,Model.FirstWindowPreference>",,true,,FirstWindowPreference>,-1
652432,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LaunchMode>,,<includes>,"IMap<winrt.hstring,Model.LaunchMode>",,true,,LaunchMode>,-1
652433,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,NewTabPosition>,,<includes>,"IMap<winrt.hstring,Model.NewTabPosition>",,true,,NewTabPosition>,-1
652434,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TabSwitcherMode>,,<includes>,"IMap<winrt.hstring,Model.TabSwitcherMode>",,true,,TabSwitcherMode>,-1
652435,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WindowingMode>,,<includes>,"IMap<winrt.hstring,Model.WindowingMode>",,true,,WindowingMode>,-1
652436,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Stretch>,,<includes>,"IMap<winrt.hstring,Windows.UI.Xaml.Media.Stretch>",,true,,Stretch>,-1
652437,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"hstring,uint16_t>",,<includes>,"IMap<winrt.hstring,uint16_t>",,true,,"hstring,uint16_t>",-1
652438,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TabViewWidthMode>,,<includes>,"IMap<winrt.hstring,winrt.Microsoft.UI.Xaml.Controls.TabViewWidthMode>",,true,,TabViewWidthMode>,-1
652439,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ElementTheme>,,<includes>,"IMap<winrt.hstring,winrt.Windows.UI.Xaml.ElementTheme>",,true,,ElementTheme>,-1
652440,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Command>,,<includes>,"IMapView<Control.KeyChord,Model.Command>",,true,,Command>,-1
652441,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Command>,,<includes>,"IMapView<Microsoft.Terminal.Control.KeyChord,Microsoft.Terminal.Settings.Model.Command>",,true,,Command>,-1
652442,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ActionAndArgs>,,<includes>,"IMapView<hstring,Model.ActionAndArgs>",,true,,ActionAndArgs>,-1
652443,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Command>,,<includes>,"IMapView<hstring,Model.Command>",,true,,Command>,-1
652444,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Command>,,<includes>,"IMapView<winrt.hstring,Model.Command>",,true,,Command>,-1
652445,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ColorScheme>,,<includes>,"IMapView<winrt.hstring,winrt.Microsoft.Terminal.Settings.Model.ColorScheme>",,true,,ColorScheme>,-1
652446,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Theme>,,<includes>,"IMapView<winrt.hstring,winrt.Microsoft.Terminal.Settings.Model.Theme>",,true,,Theme>,-1
652447,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,INITCOMMONCONTROLSEX,,<includes>,INITCOMMONCONTROLSEX,,true,,INITCOMMONCONTROLSEX,-1
652448,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,INPUT_KEY_INFO*,,<includes>,INPUT_KEY_INFO*,,true,,INPUT_KEY_INFO*,-1
652449,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,INPUT_READ_HANDLE_DATA*,,<includes>,INPUT_READ_HANDLE_DATA*,,true,,INPUT_READ_HANDLE_DATA*,-1
652450,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,INPUT_RECORD,,<includes>,INPUT_RECORD,,true,,INPUT_RECORD,-1
652451,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,INPUT_RECORD*,,<includes>,INPUT_RECORD*,,true,,INPUT_RECORD*,-1
652452,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,INPUT_RECORD[10],,<includes>,INPUT_RECORD[10],,true,,INPUT_RECORD[10],-1
652453,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,INPUT_RECORD[12],,<includes>,INPUT_RECORD[12],,true,,INPUT_RECORD[12],-1
652454,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,INPUT_RECORD[20],,<includes>,INPUT_RECORD[20],,true,,INPUT_RECORD[20],-1
652455,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,INPUT_RECORD[256],,<includes>,INPUT_RECORD[256],,true,,INPUT_RECORD[256],-1
652456,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,INPUT_RECORD[2],,<includes>,INPUT_RECORD[2],,true,,INPUT_RECORD[2],-1
652457,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,INPUT_RECORD[3],,<includes>,INPUT_RECORD[3],,true,,INPUT_RECORD[3],-1
652458,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,INPUT_RECORD[5],,<includes>,INPUT_RECORD[5],,true,,INPUT_RECORD[5],-1
652459,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,INPUT_RECORD[64],,<includes>,INPUT_RECORD[64],,true,,INPUT_RECORD[64],-1
652460,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,INT,,<includes>,INT,,true,,INT,-1
652461,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,INT32,,<includes>,INT32,,true,,INT32,-1
652462,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,INT_PTR,,<includes>,INT_PTR,,true,,INT_PTR,-1
652463,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IO_STATUS_BLOCK,,<includes>,IO_STATUS_BLOCK,,true,,IO_STATUS_BLOCK,-1
652464,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IObjectCollection*,,<includes>,IObjectCollection*,,true,,IObjectCollection*,-1
652465,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Font>,,<includes>,IObservableVector<Editor.Font>,,true,,Font>,-1
652466,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IObservableVector<IInspectable>,,<includes>,IObservableVector<IInspectable>,,true,,IObservableVector<IInspectable>,-1
652467,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DefaultTerminal>,,<includes>,IObservableVector<Model.DefaultTerminal>,,true,,DefaultTerminal>,-1
652468,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Profile>,,<includes>,IObservableVector<Model.Profile>,,true,,Profile>,-1
652469,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IObservableVector<hstring>,,<includes>,IObservableVector<hstring>,,true,,IObservableVector<hstring>,-1
652470,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,EnumEntry>,,<includes>,IObservableVector<winrt.Microsoft.Terminal.Settings.Editor.EnumEntry>,,true,,EnumEntry>,-1
652471,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FilteredCommand>,,<includes>,IObservableVector<winrt.TerminalApp.FilteredCommand>,,true,,FilteredCommand>,-1
652472,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,hstring>,,<includes>,IObservableVector<winrt.hstring>,,true,,hstring>,-1
652473,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IPeasant,,<includes>,IPeasant,,true,,IPeasant,-1
652474,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IRawElementProviderFragment*,,<includes>,IRawElementProviderFragment*,,true,,IRawElementProviderFragment*,-1
652475,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IRawElementProviderSimple,,<includes>,IRawElementProviderSimple,,true,,IRawElementProviderSimple,-1
652476,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IRawElementProviderSimple*,,<includes>,IRawElementProviderSimple*,,true,,IRawElementProviderSimple*,-1
652477,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IRawElementProviderSimple**,,<includes>,IRawElementProviderSimple**,,true,,IRawElementProviderSimple**,-1
652478,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CopyFormat>,,<includes>,IReference<Control.CopyFormat>,,true,,CopyFormat>,-1
652479,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IReference<CopyFormat>,,<includes>,IReference<CopyFormat>,,true,,IReference<CopyFormat>,-1
652480,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Point>,,<includes>,IReference<Core.Point>,,true,,Point>,-1
652481,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Color>,,<includes>,IReference<Microsoft.Terminal.Core.Color>,,true,,Color>,-1
652482,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SettingsLoadErrors>,,<includes>,IReference<Model.SettingsLoadErrors>,,true,,SettingsLoadErrors>,-1
652483,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IReference<T>,,<includes>,IReference<T>,,true,,IReference<T>,-1
652484,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IReference<TabSwitcherMode>,,<includes>,IReference<TabSwitcherMode>,,true,,IReference<TabSwitcherMode>,-1
652485,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Color>,,<includes>,IReference<Windows.UI.Color>,,true,,Color>,-1
652486,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IReference<bool>,,<includes>,IReference<bool>,,true,,IReference<bool>,-1
652487,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IReference<int32_t>,,<includes>,IReference<int32_t>,,true,,IReference<int32_t>,-1
652488,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IReference<uint32_t>,,<includes>,IReference<uint32_t>,,true,,IReference<uint32_t>,-1
652489,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Color>,,<includes>,IReference<winrt.Microsoft.Terminal.Core.Color>,,true,,Color>,-1
652490,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Color>,,<includes>,IReference<winrt.Windows.UI.Color>,,true,,Color>,-1
652491,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IRenderData,,<includes>,IRenderData,,true,,IRenderData,-1
652492,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IRenderData*,,<includes>,IRenderData*,,true,,IRenderData*,-1
652493,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IRenderEngine,,<includes>,IRenderEngine,,true,,IRenderEngine,-1
652494,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IRenderEngine*,,<includes>,IRenderEngine*,,true,,IRenderEngine*,-1
652495,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ISetupConfiguration2*,,<includes>,ISetupConfiguration2*,,true,,ISetupConfiguration2*,-1
652496,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ISetupInstance*,,<includes>,ISetupInstance*,,true,,ISetupInstance*,-1
652497,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ISetupPropertyStore*,,<includes>,ISetupPropertyStore*,,true,,ISetupPropertyStore*,-1
652498,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IShellItem**,,<includes>,IShellItem**,,true,,IShellItem**,-1
652499,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IShellItemArray*,,<includes>,IShellItemArray*,,true,,IShellItemArray*,-1
652500,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IStateMachineEngine,,<includes>,IStateMachineEngine,,true,,IStateMachineEngine,-1
652501,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ISystemConfigurationProvider,,<includes>,ISystemConfigurationProvider,,true,,ISystemConfigurationProvider,-1
652502,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ISystemConfigurationProvider*,,<includes>,ISystemConfigurationProvider*,,true,,ISystemConfigurationProvider*,-1
652503,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ITerminalApi,,<includes>,ITerminalApi,,true,,ITerminalApi,-1
652504,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ITerminalConnection,,<includes>,ITerminalConnection,,true,,ITerminalConnection,-1
652505,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ITerminalInput,,<includes>,ITerminalInput,,true,,ITerminalInput,-1
652506,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ITextRangeProvider,,<includes>,ITextRangeProvider,,true,,ITextRangeProvider,-1
652507,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ITextRangeProvider*,,<includes>,ITextRangeProvider*,,true,,ITextRangeProvider*,-1
652508,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ITfCategoryMgr,,<includes>,ITfCategoryMgr,,true,,ITfCategoryMgr,-1
652509,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ITfCategoryMgr*,,<includes>,ITfCategoryMgr*,,true,,ITfCategoryMgr*,-1
652510,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ITfCleanupContextSink,,<includes>,ITfCleanupContextSink,,true,,ITfCleanupContextSink,-1
652511,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ITfCompositionView*,,<includes>,ITfCompositionView*,,true,,ITfCompositionView*,-1
652512,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ITfContext,,<includes>,ITfContext,,true,,ITfContext,-1
652513,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ITfContext*,,<includes>,ITfContext*,,true,,ITfContext*,-1
652514,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ITfContextOwner,,<includes>,ITfContextOwner,,true,,ITfContextOwner,-1
652515,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ITfContextOwnerCompositionSink,,<includes>,ITfContextOwnerCompositionSink,,true,,ITfContextOwnerCompositionSink,-1
652516,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ITfDisplayAttributeMgr,,<includes>,ITfDisplayAttributeMgr,,true,,ITfDisplayAttributeMgr,-1
652517,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ITfEditRecord*,,<includes>,ITfEditRecord*,,true,,ITfEditRecord*,-1
652518,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ITfEditSession,,<includes>,ITfEditSession,,true,,ITfEditSession,-1
652519,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ITfInputProcessorProfileActivationSink,,<includes>,ITfInputProcessorProfileActivationSink,,true,,ITfInputProcessorProfileActivationSink,-1
652520,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ITfRange*,,<includes>,ITfRange*,,true,,ITfRange*,-1
652521,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ITfRange**,,<includes>,ITfRange**,,true,,ITfRange**,-1
652522,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ITfReadOnlyProperty*,,<includes>,ITfReadOnlyProperty*,,true,,ITfReadOnlyProperty*,-1
652523,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ITfReadOnlyProperty**,,<includes>,ITfReadOnlyProperty**,,true,,ITfReadOnlyProperty**,-1
652524,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ITfTextEditSink,,<includes>,ITfTextEditSink,,true,,ITfTextEditSink,-1
652525,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ITfUIElementSink,,<includes>,ITfUIElementSink,,true,,ITfUIElementSink,-1
652526,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IUIElement,,<includes>,IUIElement,,true,,IUIElement,-1
652527,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IUiaEventDispatcher*,,<includes>,IUiaEventDispatcher*,,true,,IUiaEventDispatcher*,-1
652528,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IUiaTraceable,,<includes>,IUiaTraceable,,true,,IUiaTraceable,-1
652529,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IUnknown*,,<includes>,IUnknown*,,true,,IUnknown*,-1
652530,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IVector<Command>,,<includes>,IVector<Command>,,true,,IVector<Command>,-1
652531,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ScrollMark>,,<includes>,IVector<Control.ScrollMark>,,true,,ScrollMark>,-1
652532,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ActionAndArgs>,,<includes>,IVector<Model.ActionAndArgs>,,true,,ActionAndArgs>,-1
652533,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Command>,,<includes>,IVector<Model.Command>,,true,,Command>,-1
652534,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,NewTabMenuEntry>,,<includes>,IVector<Model.NewTabMenuEntry>,,true,,NewTabMenuEntry>,-1
652535,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WindowLayout>,,<includes>,IVector<Model.WindowLayout>,,true,,WindowLayout>,-1
652536,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IVector<NewTabMenuEntry>,,<includes>,IVector<NewTabMenuEntry>,,true,,IVector<NewTabMenuEntry>,-1
652537,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IVector<NewTabMenuEntryModel>,,<includes>,IVector<NewTabMenuEntryModel>,,true,,IVector<NewTabMenuEntryModel>,-1
652538,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ActionAndArgs>,,<includes>,IVector<Settings.Model.ActionAndArgs>,,true,,ActionAndArgs>,-1
652539,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FilteredCommand>,,<includes>,IVector<TerminalApp.FilteredCommand>,,true,,FilteredCommand>,-1
652540,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IVector<hstring>,,<includes>,IVector<hstring>,,true,,IVector<hstring>,-1
652541,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IVector<int32_t>,,<includes>,IVector<int32_t>,,true,,IVector<int32_t>,-1
652542,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,InfoBarMessage>,,<includes>,IVector<winrt.Microsoft.Terminal.Settings.Model.InfoBarMessage>,,true,,InfoBarMessage>,-1
652543,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FilteredCommand>,,<includes>,IVector<winrt.TerminalApp.FilteredCommand>,,true,,FilteredCommand>,-1
652544,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,hstring>,,<includes>,IVector<winrt.hstring>,,true,,hstring>,-1
652545,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SettingsLoadWarnings>,,<includes>,IVectorView<Model.SettingsLoadWarnings>,,true,,SettingsLoadWarnings>,-1
652546,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IVectorView<PeasantInfo>,,<includes>,IVectorView<PeasantInfo>,,true,,IVectorView<PeasantInfo>,-1
652547,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PeasantInfo>,,<includes>,IVectorView<Remoting.PeasantInfo>,,true,,PeasantInfo>,-1
652548,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PeasantInfo>,,<includes>,IVectorView<winrt.Microsoft.Terminal.Remoting.PeasantInfo>,,true,,PeasantInfo>,-1
652549,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IWICImagingFactory*,,<includes>,IWICImagingFactory*,,true,,IWICImagingFactory*,-1
652550,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IWaitRoutine*,,<includes>,IWaitRoutine*,,true,,IWaitRoutine*,-1
652551,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IWindowMetrics,,<includes>,IWindowMetrics,,true,,IWindowMetrics,-1
652552,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IWindowMetrics*,,<includes>,IWindowMetrics*,,true,,IWindowMetrics*,-1
652553,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Icon,,<includes>,Icon,,true,,Icon,-1
652554,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IconElement,,<includes>,IconElement,,true,,IconElement,-1
652555,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IconPathConverterT<IconPathConverter>,,<includes>,IconPathConverterT<IconPathConverter>,,true,,IconPathConverterT<IconPathConverter>,-1
652556,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IconSource,,<includes>,IconSource,,true,,IconSource,-1
652557,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IconStyle,,<includes>,IconStyle,,true,,IconStyle,-1
652558,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,InIt,,<includes>,InIt,,true,,InIt,-1
652559,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IncrementNumberRounder,,<includes>,IncrementNumberRounder,,true,,IncrementNumberRounder,-1
652560,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,InfoBarMessage,,<includes>,InfoBarMessage,,true,,InfoBarMessage,-1
652561,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,InitialPosX,,<includes>,InitialPosX,,true,,InitialPosX,-1
652562,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,InitialPosition,,<includes>,InitialPosition,,true,,InitialPosition,-1
652563,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,InitializeReason,,<includes>,InitializeReason,,true,,InitializeReason,-1
652564,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Input,,<includes>,Input,,true,,Input,-1
652565,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,InputBuffer*,,<includes>,InputBuffer*,,true,,InputBuffer*,-1
652566,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,InputBufferTests,,<includes>,InputBufferTests,,true,,InputBufferTests,-1
652567,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,InputEngineTest,,<includes>,InputEngineTest,,true,,InputEngineTest,-1
652568,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,InputIt,,<includes>,InputIt,,true,,InputIt,-1
652569,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,InputMode,,<includes>,InputMode,,true,,InputMode,-1
652570,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,InputStateMachineEngine,,<includes>,InputStateMachineEngine,,true,,InputStateMachineEngine,-1
652571,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,InsertTrivialType,,<includes>,InsertTrivialType,,true,,InsertTrivialType,-1
652572,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IntegrityTest*,,<includes>,IntegrityTest*,,true,,IntegrityTest*,-1
652573,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IntenseStyle,,<includes>,IntenseStyle,,true,,IntenseStyle,-1
652574,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,InteractDispatch,,<includes>,InteractDispatch,,true,,InteractDispatch,-1
652575,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,InteractionT<Interaction>,,<includes>,InteractionT<Interaction>,,true,,InteractionT<Interaction>,-1
652576,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,InteractionViewModel,,<includes>,InteractionViewModel,,true,,InteractionViewModel,-1
652577,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,InteractionViewModelT<InteractionViewModel>,,<includes>,InteractionViewModelT<InteractionViewModel>,,true,,InteractionViewModelT<InteractionViewModel>,-1
652578,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Interactivity,,<includes>,Interactivity,,true,,Interactivity,-1
652579,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,InteractivityAutomationPeer,,<includes>,InteractivityAutomationPeer,,true,,InteractivityAutomationPeer,-1
652580,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,InteractivityAutomationPeerT<InteractivityAutomationPeer>,,<includes>,InteractivityAutomationPeerT<InteractivityAutomationPeer>,,true,,InteractivityAutomationPeerT<InteractivityAutomationPeer>,-1
652581,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,InteractivityFactory,,<includes>,InteractivityFactory,,true,,InteractivityFactory,-1
652582,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Internal,,<includes>,Internal,,true,,Internal,-1
652583,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IslandWindow*,,<includes>,IslandWindow*,,true,,IslandWindow*,-1
652584,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,It,,<includes>,It,,true,,It,-1
652585,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,JOBOBJECT_EXTENDED_LIMIT_INFORMATION,,<includes>,JOBOBJECT_EXTENDED_LIMIT_INFORMATION,,true,,JOBOBJECT_EXTENDED_LIMIT_INFORMATION,-1
652586,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Json,,<includes>,Json,,true,,Json,-1
652587,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,JsonObject,,<includes>,JsonObject,,true,,JsonObject,-1
652588,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,JsonSettings,,<includes>,JsonSettings,,true,,JsonSettings,-1
652589,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,JsonUtils,,<includes>,JsonUtils,,true,,JsonUtils,-1
652590,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,JsonValue,,<includes>,JsonValue,,true,,JsonValue,-1
652591,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,JsonValueType,,<includes>,JsonValueType,,true,,JsonValueType,-1
652592,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,K,,<includes>,K,,true,,K,-1
652593,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,KEY_EVENT_RECORD,,<includes>,KEY_EVENT_RECORD,,true,,KEY_EVENT_RECORD,-1
652594,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,KeyBindingViewModel,,<includes>,KeyBindingViewModel,,true,,KeyBindingViewModel,-1
652595,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,KeyBindingViewModelT<KeyBindingViewModel>,,<includes>,KeyBindingViewModelT<KeyBindingViewModel>,,true,,KeyBindingViewModelT<KeyBindingViewModel>,-1
652596,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,KeyChord,,<includes>,KeyChord,,true,,KeyChord,-1
652597,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,KeyChordListener,,<includes>,KeyChordListener,,true,,KeyChordListener,-1
652598,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,KeyChordListenerT<KeyChordListener>,,<includes>,KeyChordListenerT<KeyChordListener>,,true,,KeyChordListenerT<KeyChordListener>,-1
652599,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,KeyChordSerialization,,<includes>,KeyChordSerialization,,true,,KeyChordSerialization,-1
652600,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,KeyChordT<KeyChord>,,<includes>,KeyChordT<KeyChord>,,true,,KeyChordT<KeyChord>,-1
652601,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,KeyRoutedEventArgs,,<includes>,KeyRoutedEventArgs,,true,,KeyRoutedEventArgs,-1
652602,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,KeySelectionEventResult,,<includes>,KeySelectionEventResult,,true,,KeySelectionEventResult,-1
652603,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,KeySentEventArgsT<KeySentEventArgs>,,<includes>,KeySentEventArgsT<KeySentEventArgs>,,true,,KeySentEventArgsT<KeySentEventArgs>,-1
652604,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LANGID,,<includes>,LANGID,,true,,LANGID,-1
652605,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LARGE_INTEGER,,<includes>,LARGE_INTEGER,,true,,LARGE_INTEGER,-1
652606,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LOGFONT,,<includes>,LOGFONT,,true,,LOGFONT,-1
652607,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LOGFONTA,,<includes>,LOGFONTA,,true,,LOGFONTA,-1
652608,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LOGFONTW,,<includes>,LOGFONTW,,true,,LOGFONTW,-1
652609,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LOG_HR,,<includes>,LOG_HR,,true,,LOG_HR,-1
652610,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LOG_IF_NTSTATUS_FAILED,,<includes>,LOG_IF_NTSTATUS_FAILED,,true,,LOG_IF_NTSTATUS_FAILED,-1
652611,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LONG,,<includes>,LONG,,true,,LONG,-1
652612,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LONG*,,<includes>,LONG*,,true,,LONG*,-1
652613,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LONGLONG,,<includes>,LONGLONG,,true,,LONGLONG,-1
652614,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LONG_PTR,,<includes>,LONG_PTR,,true,,LONG_PTR,-1
652615,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LPARAM,,<includes>,LPARAM,,true,,LPARAM,-1
652616,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LPCTSTR,,<includes>,LPCTSTR,,true,,LPCTSTR,-1
652617,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LPCWSTR,,<includes>,LPCWSTR,,true,,LPCWSTR,-1
652618,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LPDRAWITEMSTRUCT,,<includes>,LPDRAWITEMSTRUCT,,true,,LPDRAWITEMSTRUCT,-1
652619,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LPPROC_THREAD_ATTRIBUTE_LIST,,<includes>,LPPROC_THREAD_ATTRIBUTE_LIST,,true,,LPPROC_THREAD_ATTRIBUTE_LIST,-1
652620,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LPRECT,,<includes>,LPRECT,,true,,LPRECT,-1
652621,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LPTSTR,,<includes>,LPTSTR,,true,,LPTSTR,-1
652622,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LPTTFONTLIST,,<includes>,LPTTFONTLIST,,true,,LPTTFONTLIST,-1
652623,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LPVOID,,<includes>,LPVOID,,true,,LPVOID,-1
652624,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LPWCH,,<includes>,LPWCH,,true,,LPWCH,-1
652625,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LPWSTR,,<includes>,LPWSTR,,true,,LPWSTR,-1
652626,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LPWSTR*,,<includes>,LPWSTR*,,true,,LPWSTR*,-1
652627,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LRESULT,,<includes>,LRESULT,,true,,LRESULT,-1
652628,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LRESULT*,,<includes>,LRESULT*,,true,,LRESULT*,-1
652629,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LUID,,<includes>,LUID,,true,,LUID,-1
652630,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Lab,,<includes>,Lab,,true,,Lab,-1
652631,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LanguageProfileNotifier,,<includes>,LanguageProfileNotifier,,true,,LanguageProfileNotifier,-1
652632,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LastTabClosedEventArgsT<LastTabClosedEventArgs>,,<includes>,LastTabClosedEventArgsT<LastTabClosedEventArgs>,,true,,LastTabClosedEventArgsT<LastTabClosedEventArgs>,-1
652633,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LaunchActivatedEventArgs,,<includes>,LaunchActivatedEventArgs,,true,,LaunchActivatedEventArgs,-1
652634,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LaunchMode,,<includes>,LaunchMode,,true,,LaunchMode,-1
652635,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LaunchPosition,,<includes>,LaunchPosition,,true,,LaunchPosition,-1
652636,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LaunchT<Launch>,,<includes>,LaunchT<Launch>,,true,,LaunchT<Launch>,-1
652637,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LaunchViewModel,,<includes>,LaunchViewModel,,true,,LaunchViewModel,-1
652638,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LaunchViewModelT<LaunchViewModel>,,<includes>,LaunchViewModelT<LaunchViewModel>,,true,,LaunchViewModelT<LaunchViewModel>,-1
652639,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LayoutSizeNode,,<includes>,LayoutSizeNode,,true,,LayoutSizeNode,-1
652640,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LineFeedType,,<includes>,LineFeedType,,true,,LineFeedType,-1
652641,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LineHeight,,<includes>,LineHeight,,true,,LineHeight,-1
652642,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LineMetrics,,<includes>,LineMetrics,,true,,LineMetrics,-1
652643,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LinkedRun,,<includes>,LinkedRun,,true,,LinkedRun,-1
652644,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LocalMemNativeString,,<includes>,LocalMemNativeString,,true,,LocalMemNativeString,-1
652645,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Lock,,<includes>,Lock,,true,,Lock,-1
652646,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LockingShift,,<includes>,LockingShift,,true,,LockingShift,-1
652647,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LockingShiftRight,,<includes>,LockingShiftRight,,true,,LockingShiftRight,-1
652648,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Log,,<includes>,Log,,true,,Log,-1
652649,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Logging,,<includes>,Logging,,true,,Logging,-1
652650,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LogicalAttributeOptions,,<includes>,LogicalAttributeOptions,,true,,LogicalAttributeOptions,-1
652651,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MARGINS,,<includes>,MARGINS,,true,,MARGINS,-1
652652,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MENUINFO,,<includes>,MENUINFO,,true,,MENUINFO,-1
652653,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MENUITEMINFO,,<includes>,MENUITEMINFO,,true,,MENUITEMINFO,-1
652654,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MENUITEMINFOW,,<includes>,MENUITEMINFOW,,true,,MENUITEMINFOW,-1
652655,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MODULE_CLEANUP,,<includes>,MODULE_CLEANUP,,true,,MODULE_CLEANUP,-1
652656,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MONITORINFO,,<includes>,MONITORINFO,,true,,MONITORINFO,-1
652657,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MONITORINFOEXW,,<includes>,MONITORINFOEXW,,true,,MONITORINFOEXW,-1
652658,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MOUSE_EVENT_PARAMS,,<includes>,MOUSE_EVENT_PARAMS,,true,,MOUSE_EVENT_PARAMS,-1
652659,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MSG,,<includes>,MSG,,true,,MSG,-1
652660,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MacroBuffer,,<includes>,MacroBuffer,,true,,MacroBuffer,-1
652661,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MacroDeleteControl,,<includes>,MacroDeleteControl,,true,,MacroDeleteControl,-1
652662,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MacroEncoding,,<includes>,MacroEncoding,,true,,MacroEncoding,-1
652663,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MainPage,,<includes>,MainPage,,true,,MainPage,-1
652664,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MainPageT<MainPage>,,<includes>,MainPageT<MainPage>,,true,,MainPageT<MainPage>,-1
652665,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MakeArgs,,<includes>,MakeArgs,,true,,MakeArgs,-1
652666,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MatchMode,,<includes>,MatchMode,,true,,MatchMode,-1
652667,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MatchOptions,,<includes>,MatchOptions,,true,,MatchOptions,-1
652668,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"MatchProfilesEntryT<MatchProfilesEntry, ProfileCollectionEntry>",,<includes>,"MatchProfilesEntryT<MatchProfilesEntry, ProfileCollectionEntry>",,true,,"MatchProfilesEntryT<MatchProfilesEntry, ProfileCollectionEntry>",-1
652669,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MathTests,,<includes>,MathTests,,true,,MathTests,-1
652670,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Matrix3x2F,,<includes>,Matrix3x2F,,true,,Matrix3x2F,-1
652671,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Media,,<includes>,Media,,true,,Media,-1
652672,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MediaSource,,<includes>,MediaSource,,true,,MediaSource,-1
652673,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Menu,,<includes>,Menu,,true,,Menu,-1
652674,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Menu*,,<includes>,Menu*,,true,,Menu*,-1
652675,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MenuFlyout,,<includes>,MenuFlyout,,true,,MenuFlyout,-1
652676,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MenuFlyoutItem,,<includes>,MenuFlyoutItem,,true,,MenuFlyoutItem,-1
652677,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MenuFlyoutSubItem,,<includes>,MenuFlyoutSubItem,,true,,MenuFlyoutSubItem,-1
652678,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MethodCleanup,,<includes>,MethodCleanup,,true,,MethodCleanup,-1
652679,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MethodSetup,,<includes>,MethodSetup,,true,,MethodSetup,-1
652680,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Microsoft,,<includes>,Microsoft,,true,,Microsoft,-1
652681,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"Buffer<T,size_t=alignof(T)>",,<includes>,"Microsoft.Console.Render.Atlas.Buffer<T,size_t=alignof(T)>",,true,,"Buffer<T,size_t=alignof(T)>",-1
652682,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,range<T>,,<includes>,Microsoft.Console.Render.Atlas.range<T>,,true,,range<T>,-1
652683,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,rect<T>,,<includes>,Microsoft.Console.Render.Atlas.rect<T>,,true,,rect<T>,-1
652684,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,u16,,<includes>,Microsoft.Console.Render.Atlas.u16,,true,,u16,-1
652685,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,vec2<T>,,<includes>,Microsoft.Console.Render.Atlas.vec2<T>,,true,,vec2<T>,-1
652686,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,vec4<T>,,<includes>,Microsoft.Console.Render.Atlas.vec4<T>,,true,,vec4<T>,-1
652687,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IdType,,<includes>,Microsoft.Console.Types.IdType,,true,,IdType,-1
652688,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"CharSet<wchar_t,size_t>",,<includes>,"Microsoft.Console.VirtualTerminal.CharSet<wchar_t,size_t>",,true,,"CharSet<wchar_t,size_t>",-1
652689,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FlaggedEnumValue<VTInt>,,<includes>,Microsoft.Console.VirtualTerminal.FlaggedEnumValue<VTInt>,,true,,FlaggedEnumValue<VTInt>,-1
652690,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ConversionTrait<ActionAndArgs><>,,<includes>,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<ActionAndArgs><>,,true,,ConversionTrait<ActionAndArgs><>,-1
652691,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ConversionTrait<GUID><>,,<includes>,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<GUID><>,,true,,ConversionTrait<GUID><>,-1
652692,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ConversionTrait<NewTabMenuEntry><>,,<includes>,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<NewTabMenuEntry><>,,true,,ConversionTrait<NewTabMenuEntry><>,-1
652693,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ConversionTrait<T>,,<includes>,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<T>,,true,,ConversionTrait<T>,-1
652694,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ConversionTrait<WindowLayout><>,,<includes>,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<WindowLayout><>,,true,,ConversionTrait<WindowLayout><>,-1
652695,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ConversionTrait<bool><>,,<includes>,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<bool><>,,true,,ConversionTrait<bool><>,-1
652696,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ConversionTrait<double><>,,<includes>,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<double><>,,true,,ConversionTrait<double><>,-1
652697,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ConversionTrait<float><>,,<includes>,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<float><>,,true,,ConversionTrait<float><>,-1
652698,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ConversionTrait<int><>,,<includes>,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<int><>,,true,,ConversionTrait<int><>,-1
652699,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,optional<T>><T>,,<includes>,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<std.optional<T>><T>,,true,,optional<T>><T>,-1
652700,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,string><>,,<includes>,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<std.string><>,,true,,string><>,-1
652701,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"string,T>><T>",,<includes>,"Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<std.unordered_map<std.string,T>><T>",,true,,"string,T>><T>",-1
652702,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,unordered_set<T>><T>,,<includes>,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<std.unordered_set<T>><T>,,true,,unordered_set<T>><T>,-1
652703,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,vector<T>><T>,,<includes>,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<std.vector<T>><T>,,true,,vector<T>><T>,-1
652704,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wstring><>,,<includes>,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<std.wstring><>,,true,,wstring><>,-1
652705,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,color><>,,<includes>,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<til.color><>,,true,,color><>,-1
652706,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ConversionTrait<uint64_t><>,,<includes>,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<uint64_t><>,,true,,ConversionTrait<uint64_t><>,-1
652707,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ConversionTrait<unsigned int><>,,<includes>,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<unsigned int><>,,true,,ConversionTrait<unsigned int><>,-1
652708,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ThemePair><>,,<includes>,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<winrt.Microsoft.Terminal.Settings.Model.ThemePair><>,,true,,ThemePair><>,-1
652709,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,guid><>,,<includes>,Microsoft.Terminal.Settings.Model.JsonUtils.ConversionTrait<winrt.guid><>,,true,,guid><>,-1
652710,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"EnumMapper<T,TBase>",,<includes>,"Microsoft.Terminal.Settings.Model.JsonUtils.EnumMapper<T,TBase>",,true,,"EnumMapper<T,TBase>",-1
652711,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"FlagMapper<T,TBase>",,<includes>,"Microsoft.Terminal.Settings.Model.JsonUtils.FlagMapper<T,TBase>",,true,,"FlagMapper<T,TBase>",-1
652712,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,OptionOracle<T>,,<includes>,Microsoft.Terminal.Settings.Model.JsonUtils.OptionOracle<T>,,true,,OptionOracle<T>,-1
652713,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,optional<T>><T>,,<includes>,Microsoft.Terminal.Settings.Model.JsonUtils.OptionOracle<std.optional<T>><T>,,true,,optional<T>><T>,-1
652714,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IReference<T>><T>,,<includes>,Microsoft.Terminal.Settings.Model.JsonUtils.OptionOracle<winrt.Windows.Foundation.IReference<T>><T>,,true,,IReference<T>><T>,-1
652715,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"OptionalConverter<T,TDelegatedConverter,TOpt>",,<includes>,"Microsoft.Terminal.Settings.Model.JsonUtils.OptionalConverter<T,TDelegatedConverter,TOpt>",,true,,"OptionalConverter<T,TDelegatedConverter,TOpt>",-1
652716,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PermissiveStringConverter<T>,,<includes>,Microsoft.Terminal.Settings.Model.JsonUtils.PermissiveStringConverter<T>,,true,,PermissiveStringConverter<T>,-1
652717,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wstring><>,,<includes>,Microsoft.Terminal.Settings.Model.JsonUtils.PermissiveStringConverter<std.wstring><>,,true,,wstring><>,-1
652718,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"OutOfProc, ModuleT>",,<includes>,"Microsoft.WRL.Module<Microsoft.WRL.ModuleType.OutOfProc, ModuleT>",,true,,"OutOfProc, ModuleT>",-1
652719,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"InhibitFtmBase>, IBoxDrawingEffect>",,<includes>,"Microsoft.WRL.RuntimeClass<.Microsoft.WRL.RuntimeClassFlags<.Microsoft.WRL.ClassicCom | .Microsoft.WRL.InhibitFtmBase>, IBoxDrawingEffect>",,true,,"InhibitFtmBase>, IBoxDrawingEffect>",-1
652720,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"InhibitFtmBase>, IDWriteTextAnalysisSource, IDWriteTextAnalysisSink>",,<includes>,"Microsoft.WRL.RuntimeClass<.Microsoft.WRL.RuntimeClassFlags<.Microsoft.WRL.ClassicCom | .Microsoft.WRL.InhibitFtmBase>, IDWriteTextAnalysisSource, IDWriteTextAnalysisSink>",,true,,"InhibitFtmBase>, IDWriteTextAnalysisSource, IDWriteTextAnalysisSink>",-1
652721,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"InhibitFtmBase>, IDWriteTextRenderer>",,<includes>,"Microsoft.WRL.RuntimeClass<.Microsoft.WRL.RuntimeClassFlags<.Microsoft.WRL.ClassicCom | .Microsoft.WRL.InhibitFtmBase>, IDWriteTextRenderer>",,true,,"InhibitFtmBase>, IDWriteTextRenderer>",-1
652722,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"InhibitFtmBase>, IDataRow>",,<includes>,"Microsoft.WRL.RuntimeClass<Microsoft.WRL.RuntimeClassFlags<Microsoft.WRL.ClassicCom | Microsoft.WRL.InhibitFtmBase>, IDataRow>",,true,,"InhibitFtmBase>, IDataRow>",-1
652723,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"InhibitFtmBase>, IDataSource>",,<includes>,"Microsoft.WRL.RuntimeClass<Microsoft.WRL.RuntimeClassFlags<Microsoft.WRL.ClassicCom | Microsoft.WRL.InhibitFtmBase>, IDataSource>",,true,,"InhibitFtmBase>, IDataSource>",-1
652724,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"ClassicCom>, ITerminalHandoff2>",,<includes>,"Microsoft.WRL.RuntimeClass<Microsoft.WRL.RuntimeClassFlags<Microsoft.WRL.RuntimeClassType.ClassicCom>, ITerminalHandoff2>",,true,,"ClassicCom>, ITerminalHandoff2>",-1
652725,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MinMaxCloseControl,,<includes>,MinMaxCloseControl,,true,,MinMaxCloseControl,-1
652726,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MinMaxCloseControlT<MinMaxCloseControl>,,<includes>,MinMaxCloseControlT<MinMaxCloseControl>,,true,,MinMaxCloseControlT<MinMaxCloseControl>,-1
652727,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MockControlSettings,,<includes>,MockControlSettings,,true,,MockControlSettings,-1
652728,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MockDesktopManager,,<includes>,MockDesktopManager,,true,,MockDesktopManager,-1
652729,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MockScrollRenderEngine,,<includes>,MockScrollRenderEngine,,true,,MockScrollRenderEngine,-1
652730,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MockTermSettings,,<includes>,MockTermSettings,,true,,MockTermSettings,-1
652731,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Mode,,<includes>,Mode,,true,,Mode,-1
652732,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ModeParams,,<includes>,ModeParams,,true,,ModeParams,-1
652733,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Model,,<includes>,Model,,true,,Model,-1
652734,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ModifyKeyBindingEventArgsT<ModifyKeyBindingEventArgs>,,<includes>,ModifyKeyBindingEventArgsT<ModifyKeyBindingEventArgs>,,true,,ModifyKeyBindingEventArgsT<ModifyKeyBindingEventArgs>,-1
652735,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Monarch,,<includes>,Monarch,,true,,Monarch,-1
652736,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MonarchPeasantSample,,<includes>,MonarchPeasantSample,,true,,MonarchPeasantSample,-1
652737,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MonarchT<Monarch>,,<includes>,MonarchT<Monarch>,,true,,MonarchT<Monarch>,-1
652738,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MonitorBehavior,,<includes>,MonitorBehavior,,true,,MonitorBehavior,-1
652739,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MouseButtonState,,<includes>,MouseButtonState,,true,,MouseButtonState,-1
652740,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MouseInputState,,<includes>,MouseInputState,,true,,MouseInputState,-1
652741,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MouseInputTest,,<includes>,MouseInputTest,,true,,MouseInputTest,-1
652742,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Movable_int*,,<includes>,Movable_int*,,true,,Movable_int*,-1
652743,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MoveFocusArgs,,<includes>,MoveFocusArgs,,true,,MoveFocusArgs,-1
652744,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MoveFocusArgsT<MoveFocusArgs>,,<includes>,MoveFocusArgsT<MoveFocusArgs>,,true,,MoveFocusArgsT<MoveFocusArgs>,-1
652745,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MovePaneArgs,,<includes>,MovePaneArgs,,true,,MovePaneArgs,-1
652746,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MovePaneArgsT<MovePaneArgs>,,<includes>,MovePaneArgsT<MovePaneArgs>,,true,,MovePaneArgsT<MovePaneArgs>,-1
652747,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MoveTabArgs,,<includes>,MoveTabArgs,,true,,MoveTabArgs,-1
652748,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MoveTabArgsT<MoveTabArgs>,,<includes>,MoveTabArgsT<MoveTabArgs>,,true,,MoveTabArgsT<MoveTabArgs>,-1
652749,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MoveTabDirection,,<includes>,MoveTabDirection,,true,,MoveTabDirection,-1
652750,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MultibyteInputData[6],,<includes>,MultibyteInputData[6],,true,,MultibyteInputData[6],-1
652751,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MultipleActionsArgsT<MultipleActionsArgs>,,<includes>,MultipleActionsArgsT<MultipleActionsArgs>,,true,,MultipleActionsArgsT<MultipleActionsArgs>,-1
652752,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,NEWTEXTMETRIC*,,<includes>,NEWTEXTMETRIC*,,true,,NEWTEXTMETRIC*,-1
652753,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,NOTIFYICONDATA,,<includes>,NOTIFYICONDATA,,true,,NOTIFYICONDATA,-1
652754,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,NTSTATUS,,<includes>,NTSTATUS,,true,,NTSTATUS,-1
652755,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,NavigateDirection,,<includes>,NavigateDirection,,true,,NavigateDirection,-1
652756,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,NavigateToProfileArgsT<NavigateToProfileArgs>,,<includes>,NavigateToProfileArgsT<NavigateToProfileArgs>,,true,,NavigateToProfileArgsT<NavigateToProfileArgs>,-1
652757,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,NavigationEventArgs,,<includes>,NavigationEventArgs,,true,,NavigationEventArgs,-1
652758,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,NavigationViewItem,,<includes>,NavigationViewItem,,true,,NavigationViewItem,-1
652759,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,NewConnectionHandler,,<includes>,NewConnectionHandler,,true,,NewConnectionHandler,-1
652760,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,NewPaneSubcommand,,<includes>,NewPaneSubcommand,,true,,NewPaneSubcommand,-1
652761,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,NewTabArgs,,<includes>,NewTabArgs,,true,,NewTabArgs,-1
652762,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,NewTabArgsT<NewTabArgs>,,<includes>,NewTabArgsT<NewTabArgs>,,true,,NewTabArgsT<NewTabArgs>,-1
652763,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,NewTabMenuEntry,,<includes>,NewTabMenuEntry,,true,,NewTabMenuEntry,-1
652764,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,NewTabMenuEntryT<NewTabMenuEntry>,,<includes>,NewTabMenuEntryT<NewTabMenuEntry>,,true,,NewTabMenuEntryT<NewTabMenuEntry>,-1
652765,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,NewTabPosition,,<includes>,NewTabPosition,,true,,NewTabPosition,-1
652766,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,NewTerminalArgs,,<includes>,NewTerminalArgs,,true,,NewTerminalArgs,-1
652767,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,NewTerminalArgsT<NewTerminalArgs>,,<includes>,NewTerminalArgsT<NewTerminalArgs>,,true,,NewTerminalArgsT<NewTerminalArgs>,-1
652768,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,NewTerminalSubcommand,,<includes>,NewTerminalSubcommand,,true,,NewTerminalSubcommand,-1
652769,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,NewWindowArgsT<NewWindowArgs>,,<includes>,NewWindowArgsT<NewWindowArgs>,,true,,NewWindowArgsT<NewWindowArgs>,-1
652770,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,NextTabArgs,,<includes>,NextTabArgs,,true,,NextTabArgs,-1
652771,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,NextTabArgsT<NextTabArgs>,,<includes>,NextTabArgsT<NextTabArgs>,,true,,NextTabArgsT<NextTabArgs>,-1
652772,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,NoThrowString,,<includes>,NoThrowString,,true,,NoThrowString,-1
652773,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,NonClientIslandWindow*,,<includes>,NonClientIslandWindow*,,true,,NonClientIslandWindow*,-1
652774,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,NonLocalizable,,<includes>,NonLocalizable,,true,,NonLocalizable,-1
652775,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,NoticeEventArgs,,<includes>,NoticeEventArgs,,true,,NoticeEventArgs,-1
652776,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,NoticeEventArgsT<NoticeEventArgs>,,<includes>,NoticeEventArgsT<NoticeEventArgs>,,true,,NoticeEventArgsT<NoticeEventArgs>,-1
652777,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,NoticeLevel,,<includes>,NoticeLevel,,true,,NoticeLevel,-1
652778,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,NtPrivApi,,<includes>,NtPrivApi,,true,,NtPrivApi,-1
652779,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Color>,,<includes>,NullableSetting<Microsoft.Terminal.Core.Color>,,true,,Color>,-1
652780,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,O,,<includes>,O,,true,,O,-1
652781,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,OBJECT_ATTRIBUTES,,<includes>,OBJECT_ATTRIBUTES,,true,,OBJECT_ATTRIBUTES,-1
652782,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,OLECHAR*,,<includes>,OLECHAR*,,true,,OLECHAR*,-1
652783,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,OSVERSIONINFOEXW,,<includes>,OSVERSIONINFOEXW,,true,,OSVERSIONINFOEXW,-1
652784,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ObjectTests,,<includes>,ObjectTests,,true,,ObjectTests,-1
652785,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Offset,,<includes>,Offset,,true,,Offset,-1
652786,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,OneCore,,<includes>,OneCore,,true,,OneCore,-1
652787,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,OneCoreDelay,,<includes>,OneCoreDelay,,true,,OneCoreDelay,-1
652788,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Op,,<includes>,Op,,true,,Op,-1
652789,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,OpenHyperlinkEventArgs,,<includes>,OpenHyperlinkEventArgs,,true,,OpenHyperlinkEventArgs,-1
652790,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,OpenHyperlinkEventArgsT<OpenHyperlinkEventArgs>,,<includes>,OpenHyperlinkEventArgsT<OpenHyperlinkEventArgs>,,true,,OpenHyperlinkEventArgsT<OpenHyperlinkEventArgs>,-1
652791,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,OpenSettingsArgs,,<includes>,OpenSettingsArgs,,true,,OpenSettingsArgs,-1
652792,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,OpenSettingsArgsT<OpenSettingsArgs>,,<includes>,OpenSettingsArgsT<OpenSettingsArgs>,,true,,OpenSettingsArgsT<OpenSettingsArgs>,-1
652793,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,OpenTerminalHere*,,<includes>,OpenTerminalHere*,,true,,OpenTerminalHere*,-1
652794,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,OperatorTests,,<includes>,OperatorTests,,true,,OperatorTests,-1
652795,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,OptionOracle,,<includes>,OptionOracle,,true,,OptionOracle,-1
652796,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,OptionOracle<TOpt>,,<includes>,OptionOracle<TOpt>,,true,,OptionOracle<TOpt>,-1
652797,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,OptionalColor,,<includes>,OptionalColor,,true,,OptionalColor,-1
652798,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,optional<T>>,,<includes>,"OptionalConverter<T, ConversionTrait<T>, std.optional<T>>",,true,,optional<T>>,-1
652799,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,OriginTag,,<includes>,OriginTag,,true,,OriginTag,-1
652800,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,OutIt,,<includes>,OutIt,,true,,OutIt,-1
652801,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"OutOfProcModuleWithRegistrationFlag<RegClsType, DefaultOutOfProcModuleWithRegistrationFlag<RegClsType>>",,<includes>,"OutOfProcModuleWithRegistrationFlag<RegClsType, DefaultOutOfProcModuleWithRegistrationFlag<RegClsType>>",,true,,"OutOfProcModuleWithRegistrationFlag<RegClsType, DefaultOutOfProcModuleWithRegistrationFlag<RegClsType>>",-1
652802,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"OutOfProcModuleWithRegistrationFlag<int,ModuleT>",,<includes>,"OutOfProcModuleWithRegistrationFlag<int,ModuleT>",,true,,"OutOfProcModuleWithRegistrationFlag<int,ModuleT>",-1
652803,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,OutputCell*,,<includes>,OutputCell*,,true,,OutputCell*,-1
652804,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,OutputCellIterator*,,<includes>,OutputCellIterator*,,true,,OutputCellIterator*,-1
652805,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,OutputCellIteratorTests,,<includes>,OutputCellIteratorTests,,true,,OutputCellIteratorTests,-1
652806,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,OutputCellView &,,<includes>,OutputCellView &,,true,,OutputCellView &,-1
652807,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,OutputCellView*,,<includes>,OutputCellView*,,true,,OutputCellView*,-1
652808,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,OutputEngineTest,,<includes>,OutputEngineTest,,true,,OutputEngineTest,-1
652809,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,OutputIt,,<includes>,OutputIt,,true,,OutputIt,-1
652810,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,OutputStateMachineEngine,,<includes>,OutputStateMachineEngine,,true,,OutputStateMachineEngine,-1
652811,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PAINTSTRUCT,,<includes>,PAINTSTRUCT,,true,,PAINTSTRUCT,-1
652812,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PAINTSTRUCT*,,<includes>,PAINTSTRUCT*,,true,,PAINTSTRUCT*,-1
652813,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PATTERNID,,<includes>,PATTERNID,,true,,PATTERNID,-1
652814,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PCCONSOLE_PORTABLE_ATTACH_MSG,,<includes>,PCCONSOLE_PORTABLE_ATTACH_MSG,,true,,PCCONSOLE_PORTABLE_ATTACH_MSG,-1
652815,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PCD_IO_ROW_INFORMATION,,<includes>,PCD_IO_ROW_INFORMATION,,true,,PCD_IO_ROW_INFORMATION,-1
652816,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PCD_IO_ROW_INFORMATION*,,<includes>,PCD_IO_ROW_INFORMATION*,,true,,PCD_IO_ROW_INFORMATION*,-1
652817,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PCIS_MSG,,<includes>,PCIS_MSG,,true,,PCIS_MSG,-1
652818,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PCONSOLE_API_ROUTINE,,<includes>,PCONSOLE_API_ROUTINE,,true,,PCONSOLE_API_ROUTINE,-1
652819,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PCONSOLE_STATE_INFO,,<includes>,PCONSOLE_STATE_INFO,,true,,PCONSOLE_STATE_INFO,-1
652820,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PCSTR,,<includes>,PCSTR,,true,,PCSTR,-1
652821,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PCWCHAR,,<includes>,PCWCHAR,,true,,PCWCHAR,-1
652822,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PCWSTR,,<includes>,PCWSTR,,true,,PCWSTR,-1
652823,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PCWSTR[7],,<includes>,PCWSTR[7],,true,,PCWSTR[7],-1
652824,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PHANDLE,,<includes>,PHANDLE,,true,,PHANDLE,-1
652825,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,POINT,,<includes>,POINT,,true,,POINT,-1
652826,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,POINT*,,<includes>,POINT*,,true,,POINT*,-1
652827,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,POLYTEXTW,,<includes>,POLYTEXTW,,true,,POLYTEXTW,-1
652828,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,POLYTEXTW[80],,<includes>,POLYTEXTW[80],,true,,POLYTEXTW[80],-1
652829,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PORT_MESSAGE,,<includes>,PORT_MESSAGE,,true,,PORT_MESSAGE,-1
652830,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PROCESS_INFORMATION,,<includes>,PROCESS_INFORMATION,,true,,PROCESS_INFORMATION,-1
652831,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PROCESS_INFORMATION*,,<includes>,PROCESS_INFORMATION*,,true,,PROCESS_INFORMATION*,-1
652832,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PROPERTYID,,<includes>,PROPERTYID,,true,,PROPERTYID,-1
652833,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PROPVARIANT,,<includes>,PROPVARIANT,,true,,PROPVARIANT,-1
652834,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PSConstBuffer,,<includes>,PSConstBuffer,,true,,PSConstBuffer,-1
652835,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PSHNOTIFY*,,<includes>,PSHNOTIFY*,,true,,PSHNOTIFY*,-1
652836,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PSID,,<includes>,PSID,,true,,PSID,-1
652837,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PTP_CALLBACK_INSTANCE,,<includes>,PTP_CALLBACK_INSTANCE,,true,,PTP_CALLBACK_INSTANCE,-1
652838,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PTP_TIMER,,<includes>,PTP_TIMER,,true,,PTP_TIMER,-1
652839,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PVOID,,<includes>,PVOID,,true,,PVOID,-1
652840,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PWCHAR,,<includes>,PWCHAR,,true,,PWCHAR,-1
652841,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PWSTR,,<includes>,PWSTR,,true,,PWSTR,-1
652842,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Package,,<includes>,Package,,true,,Package,-1
652843,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PackageInfo,,<includes>,PackageInfo,,true,,PackageInfo,-1
652844,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PackageUpdateAvailability,,<includes>,PackageUpdateAvailability,,true,,PackageUpdateAvailability,-1
652845,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PackageVersion,,<includes>,PackageVersion,,true,,PackageVersion,-1
652846,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Padding,,<includes>,Padding,,true,,Padding,-1
652847,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PaletteItemT<PaletteItem>,,<includes>,PaletteItemT<PaletteItem>,,true,,PaletteItemT<PaletteItem>,-1
652848,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PaletteItemTemplateSelector,,<includes>,PaletteItemTemplateSelector,,true,,PaletteItemTemplateSelector,-1
652849,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PaletteItemTemplateSelectorT<PaletteItemTemplateSelector>,,<includes>,PaletteItemTemplateSelectorT<PaletteItemTemplateSelector>,,true,,PaletteItemTemplateSelectorT<PaletteItemTemplateSelector>,-1
652850,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Pane*,,<includes>,Pane*,,true,,Pane*,-1
652851,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PaneNeighborSearch,,<includes>,PaneNeighborSearch,,true,,PaneNeighborSearch,-1
652852,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PanePoint,,<includes>,PanePoint,,true,,PanePoint,-1
652853,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Panel,,<includes>,Panel,,true,,Panel,-1
652854,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ParentIt,,<includes>,ParentIt,,true,,ParentIt,-1
652855,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ParseCommandlineResult,,<includes>,ParseCommandlineResult,,true,,ParseCommandlineResult,-1
652856,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ParsedSettings,,<includes>,ParsedSettings,,true,,ParsedSettings,-1
652857,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ParserTracing,,<includes>,ParserTracing,,true,,ParserTracing,-1
652858,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PasswordCredential,,<includes>,PasswordCredential,,true,,PasswordCredential,-1
652859,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PasswordVault,,<includes>,PasswordVault,,true,,PasswordVault,-1
652860,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PasteFromClipboardEventArgs,,<includes>,PasteFromClipboardEventArgs,,true,,PasteFromClipboardEventArgs,-1
652861,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PasteFromClipboardEventArgsT<PasteFromClipboardEventArgs>,,<includes>,PasteFromClipboardEventArgsT<PasteFromClipboardEventArgs>,,true,,PasteFromClipboardEventArgsT<PasteFromClipboardEventArgs>,-1
652862,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PatternInterface,,<includes>,PatternInterface,,true,,PatternInterface,-1
652863,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Peasant,,<includes>,Peasant,,true,,Peasant,-1
652864,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PeasantT<Peasant>,,<includes>,PeasantT<Peasant>,,true,,PeasantT<Peasant>,-1
652865,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Peers,,<includes>,Peers,,true,,Peers,-1
652866,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PfnGetDpiForWindow,,<includes>,PfnGetDpiForWindow,,true,,PfnGetDpiForWindow,-1
652867,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PfnGetDpiMetrics,,<includes>,PfnGetDpiMetrics,,true,,PfnGetDpiMetrics,-1
652868,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PfnNtOpenFile,,<includes>,PfnNtOpenFile,,true,,PfnNtOpenFile,-1
652869,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PipeReadCallback,,<includes>,PipeReadCallback,,true,,PipeReadCallback,-1
652870,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PkgVersion,,<includes>,PkgVersion,,true,,PkgVersion,-1
652871,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Playback,,<includes>,Playback,,true,,Playback,-1
652872,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Point,,<includes>,Point,,true,,Point,-1
652873,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PointSubSize,,<includes>,PointSubSize,,true,,PointSubSize,-1
652874,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PointTests,,<includes>,PointTests,,true,,PointTests,-1
652875,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PointerDeviceType,,<includes>,PointerDeviceType,,true,,PointerDeviceType,-1
652876,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PointerUpdateKind,,<includes>,PointerUpdateKind,,true,,PointerUpdateKind,-1
652877,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Popup,,<includes>,Popup,,true,,Popup,-1
652878,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PopupKind,,<includes>,PopupKind,,true,,PopupKind,-1
652879,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PositionInformation*,,<includes>,PositionInformation*,,true,,PositionInformation*,-1
652880,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PowerShellFlags,,<includes>,PowerShellFlags,,true,,PowerShellFlags,-1
652881,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PowerShellInstance,,<includes>,PowerShellInstance,,true,,PowerShellInstance,-1
652882,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PrepPattern,,<includes>,PrepPattern,,true,,PrepPattern,-1
652883,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PresentationReportFormat,,<includes>,PresentationReportFormat,,true,,PresentationReportFormat,-1
652884,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PrevTabArgs,,<includes>,PrevTabArgs,,true,,PrevTabArgs,-1
652885,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PrevTabArgsT<PrevTabArgs>,,<includes>,PrevTabArgsT<PrevTabArgs>,,true,,PrevTabArgsT<PrevTabArgs>,-1
652886,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PreviewConnection,,<includes>,PreviewConnection,,true,,PreviewConnection,-1
652887,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Primitives,,<includes>,Primitives,,true,,Primitives,-1
652888,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ProcessPolicy,,<includes>,ProcessPolicy,,true,,ProcessPolicy,-1
652889,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Profile,,<includes>,Profile,,true,,Profile,-1
652890,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"ProfileCollectionEntryT<ProfileCollectionEntry, NewTabMenuEntry>",,<includes>,"ProfileCollectionEntryT<ProfileCollectionEntry, NewTabMenuEntry>",,true,,"ProfileCollectionEntryT<ProfileCollectionEntry, NewTabMenuEntry>",-1
652891,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"ProfileEntryT<ProfileEntry, NewTabMenuEntry>",,<includes>,"ProfileEntryT<ProfileEntry, NewTabMenuEntry>",,true,,"ProfileEntryT<ProfileEntry, NewTabMenuEntry>",-1
652892,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ProfileSubPage,,<includes>,ProfileSubPage,,true,,ProfileSubPage,-1
652893,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ProfileT<Profile>,,<includes>,ProfileT<Profile>,,true,,ProfileT<Profile>,-1
652894,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ProfileViewModel,,<includes>,ProfileViewModel,,true,,ProfileViewModel,-1
652895,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ProfileViewModelT<ProfileViewModel>,,<includes>,ProfileViewModelT<ProfileViewModel>,,true,,ProfileViewModelT<ProfileViewModel>,-1
652896,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Profiles_Advanced,,<includes>,Profiles_Advanced,,true,,Profiles_Advanced,-1
652897,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Profiles_AdvancedT<Profiles_Advanced>,,<includes>,Profiles_AdvancedT<Profiles_Advanced>,,true,,Profiles_AdvancedT<Profiles_Advanced>,-1
652898,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Profiles_Appearance,,<includes>,Profiles_Appearance,,true,,Profiles_Appearance,-1
652899,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Profiles_AppearanceT<Profiles_Appearance>,,<includes>,Profiles_AppearanceT<Profiles_Appearance>,,true,,Profiles_AppearanceT<Profiles_Appearance>,-1
652900,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Profiles_Base,,<includes>,Profiles_Base,,true,,Profiles_Base,-1
652901,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Profiles_BaseT<Profiles_Base>,,<includes>,Profiles_BaseT<Profiles_Base>,,true,,Profiles_BaseT<Profiles_Base>,-1
652902,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PromptState,,<includes>,PromptState,,true,,PromptState,-1
652903,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PropertyChangedEventArgs,,<includes>,PropertyChangedEventArgs,,true,,PropertyChangedEventArgs,-1
652904,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PropertyType,,<includes>,PropertyType,,true,,PropertyType,-1
652905,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PropertyValue,,<includes>,PropertyValue,,true,,PropertyValue,-1
652906,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ProposeCommandlineResult,,<includes>,ProposeCommandlineResult,,true,,ProposeCommandlineResult,-1
652907,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ProposeCommandlineResultT<ProposeCommandlineResult>,,<includes>,ProposeCommandlineResultT<ProposeCommandlineResult>,,true,,ProposeCommandlineResultT<ProposeCommandlineResult>,-1
652908,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ProviderOptions,,<includes>,ProviderOptions,,true,,ProviderOptions,-1
652909,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PseudoConsoleWindowAccessibilityProvider,,<includes>,PseudoConsoleWindowAccessibilityProvider,,true,,PseudoConsoleWindowAccessibilityProvider,-1
652910,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PtySignalInputThread,,<includes>,PtySignalInputThread,,true,,PtySignalInputThread,-1
652911,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,QuadInstance,,<includes>,QuadInstance,,true,,QuadInstance,-1
652912,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Quad_RGBA<T>,,<includes>,Quad_RGBA<T>,,true,,Quad_RGBA<T>,-1
652913,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Quad_RGBA<float>,,<includes>,Quad_RGBA<float>,,true,,Quad_RGBA<float>,-1
652914,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Quad_RGBA<int>,,<includes>,Quad_RGBA<int>,,true,,Quad_RGBA<int>,-1
652915,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Quad_rgba<T>,,<includes>,Quad_rgba<T>,,true,,Quad_rgba<T>,-1
652916,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,QuitAllRequestedArgsT<QuitAllRequestedArgs>,,<includes>,QuitAllRequestedArgsT<QuitAllRequestedArgs>,,true,,QuitAllRequestedArgsT<QuitAllRequestedArgs>,-1
652917,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,RECT,,<includes>,RECT,,true,,RECT,-1
652918,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,RECT*,,<includes>,RECT*,,true,,RECT*,-1
652919,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,REFCLSID,,<includes>,REFCLSID,,true,,REFCLSID,-1
652920,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,REFGUID,,<includes>,REFGUID,,true,,REFGUID,-1
652921,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,REFIID,,<includes>,REFIID,,true,,REFIID,-1
652922,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,RETURN_IF_FAILED,,<includes>,RETURN_IF_FAILED,,true,,RETURN_IF_FAILED,-1
652923,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,RETURN_IF_WIN32_BOOL_FALSE,,<includes>,RETURN_IF_WIN32_BOOL_FALSE,,true,,RETURN_IF_WIN32_BOOL_FALSE,-1
652924,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,RETURN_WIN32,,<includes>,RETURN_WIN32,,true,,RETURN_WIN32,-1
652925,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,RGB,,<includes>,RGB,,true,,RGB,-1
652926,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ROW*,,<includes>,ROW*,,true,,ROW*,-1
652927,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,RawConstruct,,<includes>,RawConstruct,,true,,RawConstruct,-1
652928,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ReadingMode,,<includes>,ReadingMode,,true,,ReadingMode,-1
652929,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Rect,,<includes>,Rect,,true,,Rect,-1
652930,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,RectOp,,<includes>,RectOp,,true,,RectOp,-1
652931,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,RectangleTests,,<includes>,RectangleTests,,true,,RectangleTests,-1
652932,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ReferenceFrame,,<includes>,ReferenceFrame,,true,,ReferenceFrame,-1
652933,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"RemainingProfilesEntryT<RemainingProfilesEntry, ProfileCollectionEntry>",,<includes>,"RemainingProfilesEntryT<RemainingProfilesEntry, ProfileCollectionEntry>",,true,,"RemainingProfilesEntryT<RemainingProfilesEntry, ProfileCollectionEntry>",-1
652934,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,RemoteConsoleControl,,<includes>,RemoteConsoleControl,,true,,RemoteConsoleControl,-1
652935,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Remoting,,<includes>,Remoting,,true,,Remoting,-1
652936,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,RenameRequestArgsT<RenameRequestArgs>,,<includes>,RenameRequestArgsT<RenameRequestArgs>,,true,,RenameRequestArgsT<RenameRequestArgs>,-1
652937,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,RenameTabArgs,,<includes>,RenameTabArgs,,true,,RenameTabArgs,-1
652938,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,RenameTabArgsT<RenameTabArgs>,,<includes>,RenameTabArgsT<RenameTabArgs>,,true,,RenameTabArgsT<RenameTabArgs>,-1
652939,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,RenameWindowArgs,,<includes>,RenameWindowArgs,,true,,RenameWindowArgs,-1
652940,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,RenameWindowArgsT<RenameWindowArgs>,,<includes>,RenameWindowArgsT<RenameWindowArgs>,,true,,RenameWindowArgsT<RenameWindowArgs>,-1
652941,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,RenameWindowRequestedArgsT<RenameWindowRequestedArgs>,,<includes>,RenameWindowRequestedArgsT<RenameWindowRequestedArgs>,,true,,RenameWindowRequestedArgsT<RenameWindowRequestedArgs>,-1
652942,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Render,,<includes>,Render,,true,,Render,-1
652943,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,RenderEngineBase,,<includes>,RenderEngineBase,,true,,RenderEngineBase,-1
652944,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,RenderFrameInfo,,<includes>,RenderFrameInfo,,true,,RenderFrameInfo,-1
652945,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,RenderOverlay,,<includes>,RenderOverlay,,true,,RenderOverlay,-1
652946,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,RenderThread,,<includes>,RenderThread,,true,,RenderThread,-1
652947,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Renderer*,,<includes>,Renderer*,,true,,Renderer*,-1
652948,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,RendererWarningArgsT<RendererWarningArgs>,,<includes>,RendererWarningArgsT<RendererWarningArgs>,,true,,RendererWarningArgsT<RendererWarningArgs>,-1
652949,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,RenderingPayload,,<includes>,RenderingPayload,,true,,RenderingPayload,-1
652950,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,RenderingT<Rendering>,,<includes>,RenderingT<Rendering>,,true,,RenderingT<Rendering>,-1
652951,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,RenderingViewModel,,<includes>,RenderingViewModel,,true,,RenderingViewModel,-1
652952,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,RenderingViewModelT<RenderingViewModel>,,<includes>,RenderingViewModelT<RenderingViewModel>,,true,,RenderingViewModelT<RenderingViewModel>,-1
652953,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ReportFormat,,<includes>,ReportFormat,,true,,ReportFormat,-1
652954,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ReportingPermission,,<includes>,ReportingPermission,,true,,ReportingPermission,-1
652955,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,RequestMoveContentArgsT<RequestMoveContentArgs>,,<includes>,RequestMoveContentArgsT<RequestMoveContentArgs>,,true,,RequestMoveContentArgsT<RequestMoveContentArgs>,-1
652956,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,RequestReceiveContentArgsT<RequestReceiveContentArgs>,,<includes>,RequestReceiveContentArgsT<RequestReceiveContentArgs>,,true,,RequestReceiveContentArgsT<RequestReceiveContentArgs>,-1
652957,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ResizeDirection,,<includes>,ResizeDirection,,true,,ResizeDirection,-1
652958,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ResizePaneArgs,,<includes>,ResizePaneArgs,,true,,ResizePaneArgs,-1
652959,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ResizePaneArgsT<ResizePaneArgs>,,<includes>,ResizePaneArgsT<ResizePaneArgs>,,true,,ResizePaneArgsT<ResizePaneArgs>,-1
652960,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ResizeWindowData,,<includes>,ResizeWindowData,,true,,ResizeWindowData,-1
652961,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ResourceDictionary,,<includes>,ResourceDictionary,,true,,ResourceDictionary,-1
652962,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ResourceMap,,<includes>,ResourceMap,,true,,ResourceMap,-1
652963,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Result,,<includes>,Result,,true,,Result,-1
652964,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Revokers,,<includes>,Revokers,,true,,Revokers,-1
652965,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,RoutedEventArgs,,<includes>,RoutedEventArgs,,true,,RoutedEventArgs,-1
652966,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,RtlGenRandom,,<includes>,RtlGenRandom,,true,,RtlGenRandom,-1
652967,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,RtlGenRandomLoader,,<includes>,RtlGenRandomLoader,,true,,RtlGenRandomLoader,-1
652968,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Run,,<includes>,Run,,true,,Run,-1
652969,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,RunLengthEncodingTests,,<includes>,RunLengthEncodingTests,,true,,RunLengthEncodingTests,-1
652970,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"RuntimeClass<RuntimeClassFlags<ClassicCom | InhibitFtmBase>, IExplorerCommand, IObjectWithSite>",,<includes>,"RuntimeClass<RuntimeClassFlags<ClassicCom | InhibitFtmBase>, IExplorerCommand, IObjectWithSite>",,true,,"RuntimeClass<RuntimeClassFlags<ClassicCom | InhibitFtmBase>, IExplorerCommand, IObjectWithSite>",-1
652971,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"RuntimeClass<RuntimeClassFlags<ClassicCom>, IConsoleHandoff, IDefaultTerminalMarker>",,<includes>,"RuntimeClass<RuntimeClassFlags<ClassicCom>, IConsoleHandoff, IDefaultTerminalMarker>",,true,,"RuntimeClass<RuntimeClassFlags<ClassicCom>, IConsoleHandoff, IDefaultTerminalMarker>",-1
652972,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"RuntimeClass<RuntimeClassFlags<ClassicCom>, IShellExtInit, IShellPropSheetExt, IPersist, FtmBase>",,<includes>,"RuntimeClass<RuntimeClassFlags<ClassicCom>, IShellExtInit, IShellPropSheetExt, IPersist, FtmBase>",,true,,"RuntimeClass<RuntimeClassFlags<ClassicCom>, IShellExtInit, IShellPropSheetExt, IPersist, FtmBase>",-1
652973,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,S,,<includes>,S,,true,,S,-1
652974,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SAFEARRAY,,<includes>,SAFEARRAY,,true,,SAFEARRAY,-1
652975,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SAFEARRAY*,,<includes>,SAFEARRAY*,,true,,SAFEARRAY*,-1
652976,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SAFEARRAY**,,<includes>,SAFEARRAY**,,true,,SAFEARRAY**,-1
652977,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SCREEN_INFORMATION*,,<includes>,SCREEN_INFORMATION*,,true,,SCREEN_INFORMATION*,-1
652978,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SCRIPT_STATE,,<includes>,SCRIPT_STATE,,true,,SCRIPT_STATE,-1
652979,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SCRIPT_STRING_ANALYSIS,,<includes>,SCRIPT_STRING_ANALYSIS,,true,,SCRIPT_STRING_ANALYSIS,-1
652980,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SCROLLINFO,,<includes>,SCROLLINFO,,true,,SCROLLINFO,-1
652981,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SECURITY_ATTRIBUTES,,<includes>,SECURITY_ATTRIBUTES,,true,,SECURITY_ATTRIBUTES,-1
652982,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SECURITY_QUALITY_OF_SERVICE,,<includes>,SECURITY_QUALITY_OF_SERVICE,,true,,SECURITY_QUALITY_OF_SERVICE,-1
652983,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SERVICE_STATUS,,<includes>,SERVICE_STATUS,,true,,SERVICE_STATUS,-1
652984,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SFGAOF,,<includes>,SFGAOF,,true,,SFGAOF,-1
652985,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SGR_PARAMS,,<includes>,SGR_PARAMS,,true,,SGR_PARAMS,-1
652986,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SHELLEXECUTEINFOW,,<includes>,SHELLEXECUTEINFOW,,true,,SHELLEXECUTEINFOW,-1
652987,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SHORT,,<includes>,SHORT,,true,,SHORT,-1
652988,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SHORT[12],,<includes>,SHORT[12],,true,,SHORT[12],-1
652989,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SHORT[14],,<includes>,SHORT[14],,true,,SHORT[14],-1
652990,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SINGLE_LIST_ENTRY,,<includes>,SINGLE_LIST_ENTRY,,true,,SINGLE_LIST_ENTRY,-1
652991,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SIZE,,<includes>,SIZE,,true,,SIZE,-1
652992,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SIZE_T,,<includes>,SIZE_T,,true,,SIZE_T,-1
652993,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SMALL_RECT,,<includes>,SMALL_RECT,,true,,SMALL_RECT,-1
652994,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SMALL_RECT*,,<includes>,SMALL_RECT*,,true,,SMALL_RECT*,-1
652995,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,STARTUPINFO,,<includes>,STARTUPINFO,,true,,STARTUPINFO,-1
652996,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,STARTUPINFOEX,,<includes>,STARTUPINFOEX,,true,,STARTUPINFOEX,-1
652997,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,STARTUPINFOEXW,,<includes>,STARTUPINFOEXW,,true,,STARTUPINFOEXW,-1
652998,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,STARTUPINFOW,,<includes>,STARTUPINFOW,,true,,STARTUPINFOW,-1
652999,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,STDAPI,,<includes>,STDAPI,,true,,STDAPI,-1
653000,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,STDAPI_,,<includes>,STDAPI_,,true,,STDAPI_,-1
653001,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,STDMETHODIMP,,<includes>,STDMETHODIMP,,true,,STDMETHODIMP,-1
653002,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,STDMETHODIMP_,,<includes>,STDMETHODIMP_,,true,,STDMETHODIMP_,-1
653003,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Scheme,,<includes>,Scheme,,true,,Scheme,-1
653004,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ScreenBufferTests,,<includes>,ScreenBufferTests,,true,,ScreenBufferTests,-1
653005,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ScreenInfoUiaProvider,,<includes>,ScreenInfoUiaProvider,,true,,ScreenInfoUiaProvider,-1
653006,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ScreenInfoUiaProviderBase,,<includes>,ScreenInfoUiaProviderBase,,true,,ScreenInfoUiaProviderBase,-1
653007,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ScrollBarState,,<includes>,ScrollBarState,,true,,ScrollBarState,-1
653008,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ScrollBarUpdate,,<includes>,ScrollBarUpdate,,true,,ScrollBarUpdate,-1
653009,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ScrollBarVisualStateManager,,<includes>,ScrollBarVisualStateManager,,true,,ScrollBarVisualStateManager,-1
653010,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ScrollBarVisualStateManager>,,<includes>,"ScrollBarVisualStateManagerT<ScrollBarVisualStateManager, implementation.ScrollBarVisualStateManager>",,true,,ScrollBarVisualStateManager>,-1
653011,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ScrollBarVisualStateManagerT<ScrollBarVisualStateManager>,,<includes>,ScrollBarVisualStateManagerT<ScrollBarVisualStateManager>,,true,,ScrollBarVisualStateManagerT<ScrollBarVisualStateManager>,-1
653012,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ScrollDirection,,<includes>,ScrollDirection,,true,,ScrollDirection,-1
653013,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ScrollDownArgs,,<includes>,ScrollDownArgs,,true,,ScrollDownArgs,-1
653014,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ScrollDownArgsT<ScrollDownArgs>,,<includes>,ScrollDownArgsT<ScrollDownArgs>,,true,,ScrollDownArgsT<ScrollDownArgs>,-1
653015,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ScrollPositionChangedArgsT<ScrollPositionChangedArgs>,,<includes>,ScrollPositionChangedArgsT<ScrollPositionChangedArgs>,,true,,ScrollPositionChangedArgsT<ScrollPositionChangedArgs>,-1
653016,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ScrollTest,,<includes>,ScrollTest,,true,,ScrollTest,-1
653017,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ScrollToMarkArgs,,<includes>,ScrollToMarkArgs,,true,,ScrollToMarkArgs,-1
653018,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ScrollToMarkArgsT<ScrollToMarkArgs>,,<includes>,ScrollToMarkArgsT<ScrollToMarkArgs>,,true,,ScrollToMarkArgsT<ScrollToMarkArgs>,-1
653019,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ScrollToMarkDirection,,<includes>,ScrollToMarkDirection,,true,,ScrollToMarkDirection,-1
653020,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ScrollType,,<includes>,ScrollType,,true,,ScrollType,-1
653021,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ScrollUpArgs,,<includes>,ScrollUpArgs,,true,,ScrollUpArgs,-1
653022,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ScrollUpArgsT<ScrollUpArgs>,,<includes>,ScrollUpArgsT<ScrollUpArgs>,,true,,ScrollUpArgsT<ScrollUpArgs>,-1
653023,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ScrollbarState,,<includes>,ScrollbarState,,true,,ScrollbarState,-1
653024,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ScrollingIndicatorMode,,<includes>,ScrollingIndicatorMode,,true,,ScrollingIndicatorMode,-1
653025,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SearchBoxControl,,<includes>,SearchBoxControl,,true,,SearchBoxControl,-1
653026,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SearchBoxControlT<SearchBoxControl>,,<includes>,SearchBoxControlT<SearchBoxControl>,,true,,SearchBoxControlT<SearchBoxControl>,-1
653027,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SearchDirection,,<includes>,SearchDirection,,true,,SearchDirection,-1
653028,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SearchForTextArgs,,<includes>,SearchForTextArgs,,true,,SearchForTextArgs,-1
653029,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SearchForTextArgsT<SearchForTextArgs>,,<includes>,SearchForTextArgsT<SearchForTextArgs>,,true,,SearchForTextArgsT<SearchForTextArgs>,-1
653030,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SearchTests,,<includes>,SearchTests,,true,,SearchTests,-1
653031,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SelectArea,,<includes>,SelectArea,,true,,SelectArea,-1
653032,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SelectCommandArgs,,<includes>,SelectCommandArgs,,true,,SelectCommandArgs,-1
653033,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SelectCommandArgsT<SelectCommandArgs>,,<includes>,SelectCommandArgsT<SelectCommandArgs>,,true,,SelectCommandArgsT<SelectCommandArgs>,-1
653034,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SelectOutputArgs,,<includes>,SelectOutputArgs,,true,,SelectOutputArgs,-1
653035,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SelectOutputArgsT<SelectOutputArgs>,,<includes>,SelectOutputArgsT<SelectOutputArgs>,,true,,SelectOutputArgsT<SelectOutputArgs>,-1
653036,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SelectOutputDirection,,<includes>,SelectOutputDirection,,true,,SelectOutputDirection,-1
653037,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Selection & (),,<includes>,Selection & (),,true,,Selection & (),-1
653038,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SelectionChangedEventArgs,,<includes>,SelectionChangedEventArgs,,true,,SelectionChangedEventArgs,-1
653039,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SelectionColor,,<includes>,SelectionColor,,true,,SelectionColor,-1
653040,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"SelectionColorT<SelectionColor, SelectionColor>",,<includes>,"SelectionColorT<SelectionColor, SelectionColor>",,true,,"SelectionColorT<SelectionColor, SelectionColor>",-1
653041,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SelectionColorT<SelectionColor>,,<includes>,SelectionColorT<SelectionColor>,,true,,SelectionColorT<SelectionColor>,-1
653042,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SelectionData,,<includes>,SelectionData,,true,,SelectionData,-1
653043,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SelectionDirection,,<includes>,SelectionDirection,,true,,SelectionDirection,-1
653044,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SelectionEndpoint,,<includes>,SelectionEndpoint,,true,,SelectionEndpoint,-1
653045,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SelectionExpansion,,<includes>,SelectionExpansion,,true,,SelectionExpansion,-1
653046,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SelectionInputTests,,<includes>,SelectionInputTests,,true,,SelectionInputTests,-1
653047,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SelectionInteractionMode,,<includes>,SelectionInteractionMode,,true,,SelectionInteractionMode,-1
653048,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SelectionTest,,<includes>,SelectionTest,,true,,SelectionTest,-1
653049,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SelectionTests,,<includes>,SelectionTests,,true,,SelectionTests,-1
653050,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SendInputArgs,,<includes>,SendInputArgs,,true,,SendInputArgs,-1
653051,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SendInputArgsT<SendInputArgs>,,<includes>,SendInputArgsT<SendInputArgs>,,true,,SendInputArgsT<SendInputArgs>,-1
653052,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"SeparatorEntryT<SeparatorEntry, NewTabMenuEntry>",,<includes>,"SeparatorEntryT<SeparatorEntry, NewTabMenuEntry>",,true,,"SeparatorEntryT<SeparatorEntry, NewTabMenuEntry>",-1
653053,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ServiceLocator,,<includes>,ServiceLocator,,true,,ServiceLocator,-1
653054,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Services,,<includes>,Services,,true,,Services,-1
653055,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SetColorSchemeArgs,,<includes>,SetColorSchemeArgs,,true,,SetColorSchemeArgs,-1
653056,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SetColorSchemeArgsT<SetColorSchemeArgs>,,<includes>,SetColorSchemeArgsT<SetColorSchemeArgs>,,true,,SetColorSchemeArgsT<SetColorSchemeArgs>,-1
653057,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SetConsoleCPInfo,,<includes>,SetConsoleCPInfo,,true,,SetConsoleCPInfo,-1
653058,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SetConsoleOutputCP,,<includes>,SetConsoleOutputCP,,true,,SetConsoleOutputCP,-1
653059,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SetFocusModeArgs,,<includes>,SetFocusModeArgs,,true,,SetFocusModeArgs,-1
653060,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SetFocusModeArgsT<SetFocusModeArgs>,,<includes>,SetFocusModeArgsT<SetFocusModeArgs>,,true,,SetFocusModeArgsT<SetFocusModeArgs>,-1
653061,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SetFullScreenArgs,,<includes>,SetFullScreenArgs,,true,,SetFullScreenArgs,-1
653062,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SetFullScreenArgsT<SetFullScreenArgs>,,<includes>,SetFullScreenArgsT<SetFullScreenArgs>,,true,,SetFullScreenArgsT<SetFullScreenArgs>,-1
653063,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SetLastError,,<includes>,SetLastError,,true,,SetLastError,-1
653064,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SetMaximizedArgs,,<includes>,SetMaximizedArgs,,true,,SetMaximizedArgs,-1
653065,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SetMaximizedArgsT<SetMaximizedArgs>,,<includes>,SetMaximizedArgsT<SetMaximizedArgs>,,true,,SetMaximizedArgsT<SetMaximizedArgs>,-1
653066,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SetParentData,,<includes>,SetParentData,,true,,SetParentData,-1
653067,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SetProcessDpiAwareness,,<includes>,SetProcessDpiAwareness,,true,,SetProcessDpiAwareness,-1
653068,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SetResetFlipMethods,,<includes>,SetResetFlipMethods,,true,,SetResetFlipMethods,-1
653069,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SetTabColorArgs,,<includes>,SetTabColorArgs,,true,,SetTabColorArgs,-1
653070,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SetTabColorArgsT<SetTabColorArgs>,,<includes>,SetTabColorArgsT<SetTabColorArgs>,,true,,SetTabColorArgsT<SetTabColorArgs>,-1
653071,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SetVerifyOutput,,<includes>,SetVerifyOutput,,true,,SetVerifyOutput,-1
653072,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SettingContainer,,<includes>,SettingContainer,,true,,SettingContainer,-1
653073,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SettingContainerT<SettingContainer>,,<includes>,SettingContainerT<SettingContainer>,,true,,SettingContainerT<SettingContainer>,-1
653074,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Settings*,,<includes>,Settings*,,true,,Settings*,-1
653075,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SettingsLoadErrors,,<includes>,SettingsLoadErrors,,true,,SettingsLoadErrors,-1
653076,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SettingsLoadEventArgsT<SettingsLoadEventArgs>,,<includes>,SettingsLoadEventArgsT<SettingsLoadEventArgs>,,true,,SettingsLoadEventArgsT<SettingsLoadEventArgs>,-1
653077,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SettingsLoadWarnings,,<includes>,SettingsLoadWarnings,,true,,SettingsLoadWarnings,-1
653078,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SettingsLoader,,<includes>,SettingsLoader,,true,,SettingsLoader,-1
653079,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SettingsTab,,<includes>,SettingsTab,,true,,SettingsTab,-1
653080,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"SettingsTabT<SettingsTab, TabBase>",,<includes>,"SettingsTabT<SettingsTab, TabBase>",,true,,"SettingsTabT<SettingsTab, TabBase>",-1
653081,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SettingsTarget,,<includes>,SettingsTarget,,true,,SettingsTarget,-1
653082,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SettingsTests,,<includes>,SettingsTests,,true,,SettingsTests,-1
653083,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SgrSaveRestoreStackOptions,,<includes>,SgrSaveRestoreStackOptions,,true,,SgrSaveRestoreStackOptions,-1
653084,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SgrStack,,<includes>,SgrStack,,true,,SgrStack,-1
653085,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ShaderInput[4],,<includes>,ShaderInput[4],,true,,ShaderInput[4],-1
653086,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ShadingType,,<includes>,ShadingType,,true,,ShadingType,-1
653087,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ShapedRow,,<includes>,ShapedRow,,true,,ShapedRow,-1
653088,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ShapedRow*,,<includes>,ShapedRow*,,true,,ShapedRow*,-1
653089,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ShortcutAction,,<includes>,ShortcutAction,,true,,ShortcutAction,-1
653090,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ShortcutActionDispatch,,<includes>,ShortcutActionDispatch,,true,,ShortcutActionDispatch,-1
653091,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ShortcutActionDispatchT<ShortcutActionDispatch>,,<includes>,ShortcutActionDispatchT<ShortcutActionDispatch>,,true,,ShortcutActionDispatchT<ShortcutActionDispatch>,-1
653092,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ShowHideData,,<includes>,ShowHideData,,true,,ShowHideData,-1
653093,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ShowWindowArgsT<ShowWindowArgs>,,<includes>,ShowWindowArgsT<ShowWindowArgs>,,true,,ShowWindowArgsT<ShowWindowArgs>,-1
653094,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Signal,,<includes>,Signal,,true,,Signal,-1
653095,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Size,,<includes>,Size,,true,,Size,-1
653096,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SizeChangedEventArgs,,<includes>,SizeChangedEventArgs,,true,,SizeChangedEventArgs,-1
653097,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SizeConstruct,,<includes>,SizeConstruct,,true,,SizeConstruct,-1
653098,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SizeTests,,<includes>,SizeTests,,true,,SizeTests,-1
653099,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Sleep,,<includes>,Sleep,,true,,Sleep,-1
653100,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SmallVectorTests,,<includes>,SmallVectorTests,,true,,SmallVectorTests,-1
653101,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SnapChildrenSizeResult,,<includes>,SnapChildrenSizeResult,,true,,SnapChildrenSizeResult,-1
653102,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SnapSizeResult,,<includes>,SnapSizeResult,,true,,SnapSizeResult,-1
653103,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SoftwareBitmap,,<includes>,SoftwareBitmap,,true,,SoftwareBitmap,-1
653104,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SoftwareBitmapSource,,<includes>,SoftwareBitmapSource,,true,,SoftwareBitmapSource,-1
653105,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SolidColorBrush,,<includes>,SolidColorBrush,,true,,SolidColorBrush,-1
653106,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SomeTests,,<includes>,SomeTests,,true,,SomeTests,-1
653107,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Source,,<includes>,Source,,true,,Source,-1
653108,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SplitCurrentRunIncludingGlyphs,,<includes>,SplitCurrentRunIncludingGlyphs,,true,,SplitCurrentRunIncludingGlyphs,-1
653109,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SplitDirection,,<includes>,SplitDirection,,true,,SplitDirection,-1
653110,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SplitPaneArgs,,<includes>,SplitPaneArgs,,true,,SplitPaneArgs,-1
653111,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SplitPaneArgsT<SplitPaneArgs>,,<includes>,SplitPaneArgsT<SplitPaneArgs>,,true,,SplitPaneArgsT<SplitPaneArgs>,-1
653112,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SplitType,,<includes>,SplitType,,true,,SplitType,-1
653113,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Ss3ActionCodes,,<includes>,Ss3ActionCodes,,true,,Ss3ActionCodes,-1
653114,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,StackPanel,,<includes>,StackPanel,,true,,StackPanel,-1
653115,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,StartupInfoFromDefTerm,,<includes>,StartupInfoFromDefTerm,,true,,StartupInfoFromDefTerm,-1
653116,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,StartupState,,<includes>,StartupState,,true,,StartupState,-1
653117,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,StashedDragData,,<includes>,StashedDragData,,true,,StashedDragData,-1
653118,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,State,,<includes>,State,,true,,State,-1
653119,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,StateMachine,,<includes>,StateMachine,,true,,StateMachine,-1
653120,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,StateMachine*,,<includes>,StateMachine*,,true,,StateMachine*,-1
653121,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,StateMachineTest,,<includes>,StateMachineTest,,true,,StateMachineTest,-1
653122,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,StatefulDispatch*,,<includes>,StatefulDispatch*,,true,,StatefulDispatch*,-1
653123,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,StaticMapTests,,<includes>,StaticMapTests,,true,,StaticMapTests,-1
653124,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,StaticValue,,<includes>,StaticValue,,true,,StaticValue,-1
653125,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,StatusType,,<includes>,StatusType,,true,,StatusType,-1
653126,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Store,,<includes>,Store,,true,,Store,-1
653127,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,StoreContext,,<includes>,StoreContext,,true,,StoreContext,-1
653128,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Stretch,,<includes>,Stretch,,true,,Stretch,-1
653129,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,String,,<includes>,String,,true,,String,-1
653130,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,StringSentEventArgsT<StringSentEventArgs>,,<includes>,StringSentEventArgsT<StringSentEventArgs>,,true,,StringSentEventArgsT<StringSentEventArgs>,-1
653131,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,StringTests,,<includes>,StringTests,,true,,StringTests,-1
653132,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SuggestionsArgs,,<includes>,SuggestionsArgs,,true,,SuggestionsArgs,-1
653133,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SuggestionsArgsT<SuggestionsArgs>,,<includes>,SuggestionsArgsT<SuggestionsArgs>,,true,,SuggestionsArgsT<SuggestionsArgs>,-1
653134,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SuggestionsControl,,<includes>,SuggestionsControl,,true,,SuggestionsControl,-1
653135,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SuggestionsControlT<SuggestionsControl>,,<includes>,SuggestionsControlT<SuggestionsControl>,,true,,SuggestionsControlT<SuggestionsControl>,-1
653136,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SuggestionsDirection,,<includes>,SuggestionsDirection,,true,,SuggestionsDirection,-1
653137,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SuggestionsMode,,<includes>,SuggestionsMode,,true,,SuggestionsMode,-1
653138,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SuggestionsSource,,<includes>,SuggestionsSource,,true,,SuggestionsSource,-1
653139,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SummonWindowBehavior,,<includes>,SummonWindowBehavior,,true,,SummonWindowBehavior,-1
653140,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SummonWindowBehaviorT<SummonWindowBehavior>,,<includes>,SummonWindowBehaviorT<SummonWindowBehavior>,,true,,SummonWindowBehaviorT<SummonWindowBehavior>,-1
653141,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SummonWindowSelectionArgsT<SummonWindowSelectionArgs>,,<includes>,SummonWindowSelectionArgsT<SummonWindowSelectionArgs>,,true,,SummonWindowSelectionArgsT<SummonWindowSelectionArgs>,-1
653142,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SupportedTextSelection,,<includes>,SupportedTextSelection,,true,,SupportedTextSelection,-1
653143,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SuspendThread,,<includes>,SuspendThread,,true,,SuspendThread,-1
653144,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SwapChainMode,,<includes>,SwapChainMode,,true,,SwapChainMode,-1
653145,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SwapPaneArgs,,<includes>,SwapPaneArgs,,true,,SwapPaneArgs,-1
653146,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SwapPaneArgsT<SwapPaneArgs>,,<includes>,SwapPaneArgsT<SwapPaneArgs>,,true,,SwapPaneArgsT<SwapPaneArgs>,-1
653147,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SwitchToTabArgs,,<includes>,SwitchToTabArgs,,true,,SwitchToTabArgs,-1
653148,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SwitchToTabArgsT<SwitchToTabArgs>,,<includes>,SwitchToTabArgsT<SwitchToTabArgs>,,true,,SwitchToTabArgsT<SwitchToTabArgs>,-1
653149,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Symbol,,<includes>,Symbol,,true,,Symbol,-1
653150,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,System,,<includes>,System,,true,,System,-1
653151,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SystemConfigurationProvider,,<includes>,SystemConfigurationProvider,,true,,SystemConfigurationProvider,-1
653152,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SystemMenuChangeAction,,<includes>,SystemMenuChangeAction,,true,,SystemMenuChangeAction,-1
653153,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SystemMenuChangeArgsT<SystemMenuChangeArgs>,,<includes>,SystemMenuChangeArgsT<SystemMenuChangeArgs>,,true,,SystemMenuChangeArgsT<SystemMenuChangeArgs>,-1
653154,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SystemMenuItemHandler,,<includes>,SystemMenuItemHandler,,true,,SystemMenuItemHandler,-1
653155,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,T &,,<includes>,T &,,true,,T &,-1
653156,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,T*,,<includes>,T*,,true,,T*,-1
653157,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,T**,,<includes>,T**,,true,,T**,-1
653158,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TBase,,<includes>,TBase,,true,,TBase,-1
653159,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TCHAR,,<includes>,TCHAR,,true,,TCHAR,-1
653160,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TCHAR[5],,<includes>,TCHAR[5],,true,,TCHAR[5],-1
653161,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TCHAR[],,<includes>,TCHAR[],,true,,TCHAR[],-1
653162,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TDelegatedConverter,,<includes>,TDelegatedConverter,,true,,TDelegatedConverter,-1
653163,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TERMINAL_STARTUP_INFO,,<includes>,TERMINAL_STARTUP_INFO,,true,,TERMINAL_STARTUP_INFO,-1
653164,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TEST_CLASS,,<includes>,TEST_CLASS,,true,,TEST_CLASS,-1
653165,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TEST_CLASS_CLEANUP,,<includes>,TEST_CLASS_CLEANUP,,true,,TEST_CLASS_CLEANUP,-1
653166,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TEST_CLASS_SETUP,,<includes>,TEST_CLASS_SETUP,,true,,TEST_CLASS_SETUP,-1
653167,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TEST_METHOD,,<includes>,TEST_METHOD,,true,,TEST_METHOD,-1
653168,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TEST_METHOD_CLEANUP,,<includes>,TEST_METHOD_CLEANUP,,true,,TEST_METHOD_CLEANUP,-1
653169,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TEST_METHOD_SETUP,,<includes>,TEST_METHOD_SETUP,,true,,TEST_METHOD_SETUP,-1
653170,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TEXTATTRIBUTEID,,<includes>,TEXTATTRIBUTEID,,true,,TEXTATTRIBUTEID,-1
653171,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TEXTMETRIC,,<includes>,TEXTMETRIC,,true,,TEXTMETRIC,-1
653172,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TEXTMETRICW,,<includes>,TEXTMETRICW,,true,,TEXTMETRICW,-1
653173,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TExpected,,<includes>,TExpected,,true,,TExpected,-1
653174,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TF_DISPLAYATTRIBUTE,,<includes>,TF_DISPLAYATTRIBUTE,,true,,TF_DISPLAYATTRIBUTE,-1
653175,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TF_DISPLAYATTRIBUTE*,,<includes>,TF_DISPLAYATTRIBUTE*,,true,,TF_DISPLAYATTRIBUTE*,-1
653176,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TF_HALTCOND,,<includes>,TF_HALTCOND,,true,,TF_HALTCOND,-1
653177,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TF_HALTCOND*,,<includes>,TF_HALTCOND*,,true,,TF_HALTCOND*,-1
653178,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TF_INPUTPROCESSORPROFILE,,<includes>,TF_INPUTPROCESSORPROFILE,,true,,TF_INPUTPROCESSORPROFILE,-1
653179,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TF_PROPERTYVAL,,<includes>,TF_PROPERTYVAL,,true,,TF_PROPERTYVAL,-1
653180,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TF_SELECTION,,<includes>,TF_SELECTION,,true,,TF_SELECTION,-1
653181,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TF_STATUS*,,<includes>,TF_STATUS*,,true,,TF_STATUS*,-1
653182,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TFunction,,<includes>,TFunction,,true,,TFunction,-1
653183,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,THROW_HR,,<includes>,THROW_HR,,true,,THROW_HR,-1
653184,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,THROW_IF_FAILED,,<includes>,THROW_IF_FAILED,,true,,THROW_IF_FAILED,-1
653185,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TIconSource,,<includes>,TIconSource,,true,,TIconSource,-1
653186,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TJson,,<includes>,TJson,,true,,TJson,-1
653187,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TLambda,,<includes>,TLambda,,true,,TLambda,-1
653188,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TOKEN_PRIVILEGES,,<includes>,TOKEN_PRIVILEGES,,true,,TOKEN_PRIVILEGES,-1
653189,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TOOLINFO,,<includes>,TOOLINFO,,true,,TOOLINFO,-1
653190,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TOpt,,<includes>,TOpt,,true,,TOpt,-1
653191,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TOther,,<includes>,TOther,,true,,TOther,-1
653192,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TRACELOGGING_DECLARE_PROVIDER,,<includes>,TRACELOGGING_DECLARE_PROVIDER,,true,,TRACELOGGING_DECLARE_PROVIDER,-1
653193,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TRACKMOUSEEVENT,,<includes>,TRACKMOUSEEVENT,,true,,TRACKMOUSEEVENT,-1
653194,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TRAIT_TRANSFER_ALLOCATION,,<includes>,TRAIT_TRANSFER_ALLOCATION,,true,,TRAIT_TRANSFER_ALLOCATION,-1
653195,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TSFInputControl,,<includes>,TSFInputControl,,true,,TSFInputControl,-1
653196,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TSFInputControlT<TSFInputControl>,,<includes>,TSFInputControlT<TSFInputControl>,,true,,TSFInputControlT<TSFInputControl>,-1
653197,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TTFONTLIST,,<includes>,TTFONTLIST,,true,,TTFONTLIST,-1
653198,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TTask,,<includes>,TTask,,true,,TTask,-1
653199,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TabBase,,<includes>,TabBase,,true,,TabBase,-1
653200,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TabBaseT<TabBase>,,<includes>,TabBaseT<TabBase>,,true,,TabBaseT<TabBase>,-1
653201,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TabClearType,,<includes>,TabClearType,,true,,TabClearType,-1
653202,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TabCloseButtonVisibility,,<includes>,TabCloseButtonVisibility,,true,,TabCloseButtonVisibility,-1
653203,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TabHeaderControl,,<includes>,TabHeaderControl,,true,,TabHeaderControl,-1
653204,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TabHeaderControlT<TabHeaderControl>,,<includes>,TabHeaderControlT<TabHeaderControl>,,true,,TabHeaderControlT<TabHeaderControl>,-1
653205,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TabPaletteItem,,<includes>,TabPaletteItem,,true,,TabPaletteItem,-1
653206,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"TabPaletteItemT<TabPaletteItem, PaletteItem>",,<includes>,"TabPaletteItemT<TabPaletteItem, PaletteItem>",,true,,"TabPaletteItemT<TabPaletteItem, PaletteItem>",-1
653207,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TabRowControlT<TabRowControl>,,<includes>,TabRowControlT<TabRowControl>,,true,,TabRowControlT<TabRowControl>,-1
653208,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TabRowThemeT<TabRowTheme>,,<includes>,TabRowThemeT<TabRowTheme>,,true,,TabRowThemeT<TabRowTheme>,-1
653209,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TabSetType,,<includes>,TabSetType,,true,,TabSetType,-1
653210,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TabSwitcherMode,,<includes>,TabSwitcherMode,,true,,TabSwitcherMode,-1
653211,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TabTests,,<includes>,TabTests,,true,,TabTests,-1
653212,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TabThemeT<TabTheme>,,<includes>,TabThemeT<TabTheme>,,true,,TabThemeT<TabTheme>,-1
653213,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TabViewCloseButtonOverlayMode,,<includes>,TabViewCloseButtonOverlayMode,,true,,TabViewCloseButtonOverlayMode,-1
653214,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TabViewWidthMode,,<includes>,TabViewWidthMode,,true,,TabViewWidthMode,-1
653215,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TappedRoutedEventArgs,,<includes>,TappedRoutedEventArgs,,true,,TappedRoutedEventArgs,-1
653216,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Target,,<includes>,Target,,true,,Target,-1
653217,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TaskbarState,,<includes>,TaskbarState,,true,,TaskbarState,-1
653218,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TaskbarStateT<TaskbarState>,,<includes>,TaskbarStateT<TaskbarState>,,true,,TaskbarStateT<TaskbarState>,-1
653219,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Telemetry & (),,<includes>,Telemetry & (),,true,,Telemetry & (),-1
653220,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Tenant,,<includes>,Tenant,,true,,Tenant,-1
653221,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TermControl,,<includes>,TermControl,,true,,TermControl,-1
653222,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TermControlAutomationPeer,,<includes>,TermControlAutomationPeer,,true,,TermControlAutomationPeer,-1
653223,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TermControlAutomationPeerT<TermControlAutomationPeer>,,<includes>,TermControlAutomationPeerT<TermControlAutomationPeer>,,true,,TermControlAutomationPeerT<TermControlAutomationPeer>,-1
653224,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"TermControlT<TermControl, TermControl>",,<includes>,"TermControlT<TermControl, TermControl>",,true,,"TermControlT<TermControl, TermControl>",-1
653225,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TermControlT<TermControl>,,<includes>,TermControlT<TermControl>,,true,,TermControlT<TermControl>,-1
653226,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TermControlUiaProvider,,<includes>,TermControlUiaProvider,,true,,TermControlUiaProvider,-1
653227,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TermControlUiaTextRange,,<includes>,TermControlUiaTextRange,,true,,TermControlUiaTextRange,-1
653228,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TerminalApp,,<includes>,TerminalApp,,true,,TerminalApp,-1
653229,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TerminalBufferTests,,<includes>,TerminalBufferTests,,true,,TerminalBufferTests,-1
653230,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TerminalConnection,,<includes>,TerminalConnection,,true,,TerminalConnection,-1
653231,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TerminalCoreUnitTests,,<includes>,TerminalCoreUnitTests,,true,,TerminalCoreUnitTests,-1
653232,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TerminalInput,,<includes>,TerminalInput,,true,,TerminalInput,-1
653233,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TerminalOutput,,<includes>,TerminalOutput,,true,,TerminalOutput,-1
653234,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TerminalOutputHandler,,<includes>,TerminalOutputHandler,,true,,TerminalOutputHandler,-1
653235,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TerminalPage,,<includes>,TerminalPage,,true,,TerminalPage,-1
653236,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TerminalPageT<TerminalPage>,,<includes>,TerminalPageT<TerminalPage>,,true,,TerminalPageT<TerminalPage>,-1
653237,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TerminalSettings,,<includes>,TerminalSettings,,true,,TerminalSettings,-1
653238,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TerminalSettingsCreateResult,,<includes>,TerminalSettingsCreateResult,,true,,TerminalSettingsCreateResult,-1
653239,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TerminalSettingsCreateResultT<TerminalSettingsCreateResult>,,<includes>,TerminalSettingsCreateResultT<TerminalSettingsCreateResult>,,true,,TerminalSettingsCreateResultT<TerminalSettingsCreateResult>,-1
653240,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TerminalSettingsT<TerminalSettings>,,<includes>,TerminalSettingsT<TerminalSettings>,,true,,TerminalSettingsT<TerminalSettings>,-1
653241,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TerminalSettingsTests,,<includes>,TerminalSettingsTests,,true,,TerminalSettingsTests,-1
653242,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TerminalTab,,<includes>,TerminalTab,,true,,TerminalTab,-1
653243,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TerminalTabStatus,,<includes>,TerminalTabStatus,,true,,TerminalTabStatus,-1
653244,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TerminalTabStatusT<TerminalTabStatus>,,<includes>,TerminalTabStatusT<TerminalTabStatus>,,true,,TerminalTabStatusT<TerminalTabStatus>,-1
653245,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"TerminalTabT<TerminalTab, TabBase>",,<includes>,"TerminalTabT<TerminalTab, TabBase>",,true,,"TerminalTabT<TerminalTab, TabBase>",-1
653246,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TerminalWindow,,<includes>,TerminalWindow,,true,,TerminalWindow,-1
653247,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"TerminalWindowT<TerminalWindow, IInitializeWithWindow>",,<includes>,"TerminalWindowT<TerminalWindow, IInitializeWithWindow>",,true,,"TerminalWindowT<TerminalWindow, IInitializeWithWindow>",-1
653248,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TestBuffer,,<includes>,TestBuffer,,true,,TestBuffer,-1
653249,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TestCase[15],,<includes>,TestCase[15],,true,,TestCase[15],-1
653250,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TestData,,<includes>,TestData,,true,,TestData,-1
653251,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TestDummyMarker,,<includes>,TestDummyMarker,,true,,TestDummyMarker,-1
653252,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TestEscapeImmediatePath,,<includes>,TestEscapeImmediatePath,,true,,TestEscapeImmediatePath,-1
653253,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TestExecution,,<includes>,TestExecution,,true,,TestExecution,-1
653254,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TestResults,,<includes>,TestResults,,true,,TestResults,-1
653255,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TestState*,,<includes>,TestState*,,true,,TestState*,-1
653256,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TestTranslateConsoleTitle,,<includes>,TestTranslateConsoleTitle,,true,,TestTranslateConsoleTitle,-1
653257,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TestV5UuidU16String,,<includes>,TestV5UuidU16String,,true,,TestV5UuidU16String,-1
653258,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Text,,<includes>,Text,,true,,Text,-1
653259,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TextAlignment,,<includes>,TextAlignment,,true,,TextAlignment,-1
653260,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TextAnalysisSink,,<includes>,TextAnalysisSink,,true,,TextAnalysisSink,-1
653261,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TextAnalysisSource,,<includes>,TextAnalysisSource,,true,,TextAnalysisSource,-1
653262,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TextAndColor,,<includes>,TextAndColor,,true,,TextAndColor,-1
653263,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TextAntialiasingMode,,<includes>,TextAntialiasingMode,,true,,TextAntialiasingMode,-1
653264,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TextAttribute (TextAttribute &),,<includes>,TextAttribute (TextAttribute &),,true,,TextAttribute (TextAttribute &),-1
653265,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VerifyOutputTraits<TextAttribute>,,<includes>,TextAttribute.VerifyOutputTraits<TextAttribute>,,true,,VerifyOutputTraits<TextAttribute>,-1
653266,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TextBlock,,<includes>,TextBlock,,true,,TextBlock,-1
653267,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TextBufferCellIterator*,,<includes>,TextBufferCellIterator*,,true,,TextBufferCellIterator*,-1
653268,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TextBufferIteratorTests,,<includes>,TextBufferIteratorTests,,true,,TextBufferIteratorTests,-1
653269,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TextBufferTests,,<includes>,TextBufferTests,,true,,TextBufferTests,-1
653270,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VerifyOutputTraits<TextColor>,,<includes>,TextColor.VerifyOutputTraits<TextColor>,,true,,VerifyOutputTraits<TextColor>,-1
653271,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TextPatternRangeEndpoint,,<includes>,TextPatternRangeEndpoint,,true,,TextPatternRangeEndpoint,-1
653272,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TextProvider,,<includes>,TextProvider,,true,,TextProvider,-1
653273,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TextRange,,<includes>,TextRange,,true,,TextRange,-1
653274,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TextUnit,,<includes>,TextUnit,,true,,TextUnit,-1
653275,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TextWrapping,,<includes>,TextWrapping,,true,,TextWrapping,-1
653276,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TfClientId,,<includes>,TfClientId,,true,,TfClientId,-1
653277,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TfEditCookie,,<includes>,TfEditCookie,,true,,TfEditCookie,-1
653278,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TfGuidAtom,,<includes>,TfGuidAtom,,true,,TfGuidAtom,-1
653279,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TfGuidAtom*,,<includes>,TfGuidAtom*,,true,,TfGuidAtom*,-1
653280,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Theme,,<includes>,Theme,,true,,Theme,-1
653281,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ThemeColor,,<includes>,ThemeColor,,true,,ThemeColor,-1
653282,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ThemeColorT<ThemeColor>,,<includes>,ThemeColorT<ThemeColor>,,true,,ThemeColorT<ThemeColor>,-1
653283,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ThemeColorType,,<includes>,ThemeColorType,,true,,ThemeColorType,-1
653284,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ThemePair,,<includes>,ThemePair,,true,,ThemePair,-1
653285,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ThemePairT<ThemePair>,,<includes>,ThemePairT<ThemePair>,,true,,ThemePairT<ThemePair>,-1
653286,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ThemeT<Theme>,,<includes>,ThemeT<Theme>,,true,,ThemeT<Theme>,-1
653287,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Thickness,,<includes>,Thickness,,true,,Thickness,-1
653288,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ThicknessHelper,,<includes>,ThicknessHelper,,true,,ThicknessHelper,-1
653289,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"ThrottledFunc<bool,Args>",,<includes>,"ThrottledFunc<bool,Args>",,true,,"ThrottledFunc<bool,Args>",-1
653290,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,>,,<includes>,"ThrottledFunc<false, Args...>",,true,,>,-1
653291,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ThrottledFunc<true>,,<includes>,ThrottledFunc<true>,,true,,ThrottledFunc<true>,-1
653292,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TilMath,,<includes>,TilMath,,true,,TilMath,-1
653293,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TimeSpan,,<includes>,TimeSpan,,true,,TimeSpan,-1
653294,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Timeline,,<includes>,Timeline,,true,,Timeline,-1
653295,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TitleChangedEventArgsT<TitleChangedEventArgs>,,<includes>,TitleChangedEventArgsT<TitleChangedEventArgs>,,true,,TitleChangedEventArgsT<TitleChangedEventArgs>,-1
653296,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TitlebarControl,,<includes>,TitlebarControl,,true,,TitlebarControl,-1
653297,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TitlebarControlT<TitlebarControl>,,<includes>,TitlebarControlT<TitlebarControl>,,true,,TitlebarControlT<TitlebarControl>,-1
653298,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,To,,<includes>,To,,true,,To,-1
653299,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ToggleCommandPaletteArgs,,<includes>,ToggleCommandPaletteArgs,,true,,ToggleCommandPaletteArgs,-1
653300,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ToggleCommandPaletteArgsT<ToggleCommandPaletteArgs>,,<includes>,ToggleCommandPaletteArgsT<ToggleCommandPaletteArgs>,,true,,ToggleCommandPaletteArgsT<ToggleCommandPaletteArgs>,-1
653301,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ToolTipService,,<includes>,ToolTipService,,true,,ToolTipService,-1
653302,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TraceLoggingActivity<g_hConhostV2EventTraceProvider>,,<includes>,TraceLoggingActivity<g_hConhostV2EventTraceProvider>,,true,,TraceLoggingActivity<g_hConhostV2EventTraceProvider>,-1
653303,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TraceLoggingHProvider,,<includes>,TraceLoggingHProvider,,true,,TraceLoggingHProvider,-1
653304,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TransparencyChangedEventArgsT<TransparencyChangedEventArgs>,,<includes>,TransparencyChangedEventArgsT<TransparencyChangedEventArgs>,,true,,TransparencyChangedEventArgsT<TransparencyChangedEventArgs>,-1
653305,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Tribool,,<includes>,Tribool,,true,,Tribool,-1
653306,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Ts,,<includes>,Ts,,true,,Ts,-1
653307,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TurnOffModifierKeys,,<includes>,TurnOffModifierKeys,,true,,TurnOffModifierKeys,-1
653308,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"TypedEventHandler<ITerminalConnection,IInspectable>",,<includes>,"TypedEventHandler<ITerminalConnection,IInspectable>",,true,,"TypedEventHandler<ITerminalConnection,IInspectable>",-1
653309,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Types,,<includes>,Types,,true,,Types,-1
653310,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,U,,<includes>,U,,true,,U,-1
653311,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,UErrorCode,,<includes>,UErrorCode,,true,,UErrorCode,-1
653312,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,UErrorCode*,,<includes>,UErrorCode*,,true,,UErrorCode*,-1
653313,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,UI,,<includes>,UI,,true,,UI,-1
653314,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,UIColorType,,<includes>,UIColorType,,true,,UIColorType,-1
653315,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,UIElement,,<includes>,UIElement,,true,,UIElement,-1
653316,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,UINT,,<includes>,UINT,,true,,UINT,-1
653317,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,UINT16,,<includes>,UINT16,,true,,UINT16,-1
653318,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,UINT32,,<includes>,UINT32,,true,,UINT32,-1
653319,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,UINT32*,,<includes>,UINT32*,,true,,UINT32*,-1
653320,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,UINT8,,<includes>,UINT8,,true,,UINT8,-1
653321,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ULARGE_INTEGER,,<includes>,ULARGE_INTEGER,,true,,ULARGE_INTEGER,-1
653322,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ULONG,,<includes>,ULONG,,true,,ULONG,-1
653323,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ULONG*,,<includes>,ULONG*,,true,,ULONG*,-1
653324,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ULONG_PTR,,<includes>,ULONG_PTR,,true,,ULONG_PTR,-1
653325,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,UNICODE_STRING,,<includes>,UNICODE_STRING,,true,,UNICODE_STRING,-1
653326,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,UP,,<includes>,UP,,true,,UP,-1
653327,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,URegularExpression*,,<includes>,URegularExpression*,,true,,URegularExpression*,-1
653328,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,USEROBJECTFLAGS,,<includes>,USEROBJECTFLAGS,,true,,USEROBJECTFLAGS,-1
653329,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,USHORT,,<includes>,USHORT,,true,,USHORT,-1
653330,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,UText,,<includes>,UText,,true,,UText,-1
653331,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,UText*,,<includes>,UText*,,true,,UText*,-1
653332,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,UiaEngine,,<includes>,UiaEngine,,true,,UiaEngine,-1
653333,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,UiaGetReservedNotSupportedValue,,<includes>,UiaGetReservedNotSupportedValue,,true,,UiaGetReservedNotSupportedValue,-1
653334,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,UiaPoint,,<includes>,UiaPoint,,true,,UiaPoint,-1
653335,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,UiaRect,,<includes>,UiaRect,,true,,UiaRect,-1
653336,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,UiaTextRange,,<includes>,UiaTextRange,,true,,UiaTextRange,-1
653337,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,UiaTextRangeBase,,<includes>,UiaTextRangeBase,,true,,UiaTextRangeBase,-1
653338,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,UiaTextRangeTests,,<includes>,UiaTextRangeTests,,true,,UiaTextRangeTests,-1
653339,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,UiaTracing,,<includes>,UiaTracing,,true,,UiaTracing,-1
653340,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,UnderlyingType,,<includes>,UnderlyingType,,true,,UnderlyingType,-1
653341,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,UnicodeEncoding,,<includes>,UnicodeEncoding,,true,,UnicodeEncoding,-1
653342,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,UnicodeMode,,<includes>,UnicodeMode,,true,,UnicodeMode,-1
653343,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,UnicodeRange,,<includes>,UnicodeRange,,true,,UnicodeRange,-1
653344,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,UnicodeTests,,<includes>,UnicodeTests,,true,,UnicodeTests,-1
653345,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Unsorted,,<includes>,Unsorted,,true,,Unsorted,-1
653346,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,UpdateSelectionMarkersEventArgsT<UpdateSelectionMarkersEventArgs>,,<includes>,UpdateSelectionMarkersEventArgsT<UpdateSelectionMarkersEventArgs>,,true,,UpdateSelectionMarkersEventArgsT<UpdateSelectionMarkersEventArgs>,-1
653347,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Uri,,<includes>,Uri,,true,,Uri,-1
653348,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Utf8ModeTests,,<includes>,Utf8ModeTests,,true,,Utf8ModeTests,-1
653349,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Utf8ToWideCharParserTests,,<includes>,Utf8ToWideCharParserTests,,true,,Utf8ToWideCharParserTests,-1
653350,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,UuidTests,,<includes>,UuidTests,,true,,UuidTests,-1
653351,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,V,,<includes>,V,,true,,V,-1
653352,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VARIANT,,<includes>,VARIANT,,true,,VARIANT,-1
653353,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VARIANT*,,<includes>,VARIANT*,,true,,VARIANT*,-1
653354,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VERIFY_IS_FALSE,,<includes>,VERIFY_IS_FALSE,,true,,VERIFY_IS_FALSE,-1
653355,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VERIFY_IS_NOT_NULL,,<includes>,VERIFY_IS_NOT_NULL,,true,,VERIFY_IS_NOT_NULL,-1
653356,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VERIFY_IS_NULL,,<includes>,VERIFY_IS_NULL,,true,,VERIFY_IS_NULL,-1
653357,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VERIFY_IS_TRUE,,<includes>,VERIFY_IS_TRUE,,true,,VERIFY_IS_TRUE,-1
653358,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VERIFY_SUCCEEDED,,<includes>,VERIFY_SUCCEEDED,,true,,VERIFY_SUCCEEDED,-1
653359,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VERIFY_WIN32_BOOL_FAILED,,<includes>,VERIFY_WIN32_BOOL_FAILED,,true,,VERIFY_WIN32_BOOL_FAILED,-1
653360,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VOID,,<includes>,VOID,,true,,VOID,-1
653361,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VSConstBuffer,,<includes>,VSConstBuffer,,true,,VSConstBuffer,-1
653362,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VTID,,<includes>,VTID,,true,,VTID,-1
653363,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VTIDBuilder,,<includes>,VTIDBuilder,,true,,VTIDBuilder,-1
653364,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VTParameter,,<includes>,VTParameter,,true,,VTParameter,-1
653365,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VTParameter*,,<includes>,VTParameter*,,true,,VTParameter*,-1
653366,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VTParameters,,<includes>,VTParameters,,true,,VTParameters,-1
653367,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VTStates,,<includes>,VTStates,,true,,VTStates,-1
653368,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VTSubParameters,,<includes>,VTSubParameters,,true,,VTSubParameters,-1
653369,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Value,,<includes>,Value,,true,,Value,-1
653370,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ValueSet,,<includes>,ValueSet,,true,,ValueSet,-1
653371,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VerifyOutputSettings,,<includes>,VerifyOutputSettings,,true,,VerifyOutputSettings,-1
653372,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VerifyOutputTraits<wchar_t><>,,<includes>,VerifyOutputTraits<wchar_t><>,,true,,VerifyOutputTraits<wchar_t><>,-1
653373,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VerticalAlignment,,<includes>,VerticalAlignment,,true,,VerticalAlignment,-1
653374,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ViewManagement,,<includes>,ViewManagement,,true,,ViewManagement,-1
653375,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ViewModelHelper<AppearanceViewModel>,,<includes>,ViewModelHelper<AppearanceViewModel>,,true,,ViewModelHelper<AppearanceViewModel>,-1
653376,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ViewModelHelper<ColorSchemeViewModel>,,<includes>,ViewModelHelper<ColorSchemeViewModel>,,true,,ViewModelHelper<ColorSchemeViewModel>,-1
653377,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ViewModelHelper<ColorSchemesPageViewModel>,,<includes>,ViewModelHelper<ColorSchemesPageViewModel>,,true,,ViewModelHelper<ColorSchemesPageViewModel>,-1
653378,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ViewModelHelper<GlobalAppearanceViewModel>,,<includes>,ViewModelHelper<GlobalAppearanceViewModel>,,true,,ViewModelHelper<GlobalAppearanceViewModel>,-1
653379,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ViewModelHelper<InteractionViewModel>,,<includes>,ViewModelHelper<InteractionViewModel>,,true,,ViewModelHelper<InteractionViewModel>,-1
653380,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ViewModelHelper<KeyBindingViewModel>,,<includes>,ViewModelHelper<KeyBindingViewModel>,,true,,ViewModelHelper<KeyBindingViewModel>,-1
653381,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ViewModelHelper<LaunchViewModel>,,<includes>,ViewModelHelper<LaunchViewModel>,,true,,ViewModelHelper<LaunchViewModel>,-1
653382,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ViewModelHelper<ProfileViewModel>,,<includes>,ViewModelHelper<ProfileViewModel>,,true,,ViewModelHelper<ProfileViewModel>,-1
653383,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ViewModelHelper<RenderingViewModel>,,<includes>,ViewModelHelper<RenderingViewModel>,,true,,ViewModelHelper<RenderingViewModel>,-1
653384,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ViewModelHelper<T>,,<includes>,ViewModelHelper<T>,,true,,ViewModelHelper<T>,-1
653385,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Viewport,,<includes>,Viewport,,true,,Viewport,-1
653386,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Viewport*,,<includes>,Viewport*,,true,,Viewport*,-1
653387,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VirtualDesktopUtils,,<includes>,VirtualDesktopUtils,,true,,VirtualDesktopUtils,-1
653388,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VirtualKey,,<includes>,VirtualKey,,true,,VirtualKey,-1
653389,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Visibility,,<includes>,Visibility,,true,,Visibility,-1
653390,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VisualBellLight,,<includes>,VisualBellLight,,true,,VisualBellLight,-1
653391,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VisualBellLightT<VisualBellLight>,,<includes>,VisualBellLightT<VisualBellLight>,,true,,VisualBellLightT<VisualBellLight>,-1
653392,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IVisualStudioProfileGenerator,,<includes>,VisualStudioGenerator.IVisualStudioProfileGenerator,,true,,IVisualStudioProfileGenerator,-1
653393,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VisualTreeHelper,,<includes>,VisualTreeHelper,,true,,VisualTreeHelper,-1
653394,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VsDevCmdGenerator,,<includes>,VsDevCmdGenerator,,true,,VsDevCmdGenerator,-1
653395,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VsDevShellGenerator,,<includes>,VsDevShellGenerator,,true,,VsDevShellGenerator,-1
653396,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VsSetupInstance,,<includes>,VsSetupInstance,,true,,VsSetupInstance,-1
653397,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VtConsole*,,<includes>,VtConsole*,,true,,VtConsole*,-1
653398,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VtEngine,,<includes>,VtEngine,,true,,VtEngine,-1
653399,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VtEngine*,,<includes>,VtEngine*,,true,,VtEngine*,-1
653400,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VtInputThread,,<includes>,VtInputThread,,true,,VtInputThread,-1
653401,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VtIo,,<includes>,VtIo,,true,,VtIo,-1
653402,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VtRendererTest,,<includes>,VtRendererTest,,true,,VtRendererTest,-1
653403,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WCHAR,,<includes>,WCHAR,,true,,WCHAR,-1
653404,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WCHAR*,,<includes>,WCHAR*,,true,,WCHAR*,-1
653405,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WCHAR**,,<includes>,WCHAR**,,true,,WCHAR**,-1
653406,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WCHAR[1 4 103 9 10004 97 103 6273 1 65 1],,<includes>,WCHAR[1 4 103 9 10004 97 103 6273 1 65 1],,true,,WCHAR[1 4 103 9 10004 97 103 6273 1 65 1],-1
653407,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WCHAR[1 4 103 9 10004 97 103 6273 100 65 100],,<includes>,WCHAR[1 4 103 9 10004 97 103 6273 100 65 100],,true,,WCHAR[1 4 103 9 10004 97 103 6273 100 65 100],-1
653408,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WCHAR[1 4 103 9 10004 97 103 6273 30 65 30],,<includes>,WCHAR[1 4 103 9 10004 97 103 6273 30 65 30],,true,,WCHAR[1 4 103 9 10004 97 103 6273 30 65 30],-1
653409,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WCHAR[1000],,<includes>,WCHAR[1000],,true,,WCHAR[1000],-1
653410,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WCHAR[1024],,<includes>,WCHAR[1024],,true,,WCHAR[1024],-1
653411,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WCHAR[128],,<includes>,WCHAR[128],,true,,WCHAR[128],-1
653412,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WCHAR[13],,<includes>,WCHAR[13],,true,,WCHAR[13],-1
653413,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WCHAR[1410391000497103627310065100],,<includes>,WCHAR[1410391000497103627310065100],,true,,WCHAR[1410391000497103627310065100],-1
653414,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WCHAR[141039100049710362731651],,<includes>,WCHAR[141039100049710362731651],,true,,WCHAR[141039100049710362731651],-1
653415,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WCHAR[14103910004971036273306530],,<includes>,WCHAR[14103910004971036273306530],,true,,WCHAR[14103910004971036273306530],-1
653416,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WCHAR[14],,<includes>,WCHAR[14],,true,,WCHAR[14],-1
653417,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WCHAR[256],,<includes>,WCHAR[256],,true,,WCHAR[256],-1
653418,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WCHAR[257],,<includes>,WCHAR[257],,true,,WCHAR[257],-1
653419,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WCHAR[25],,<includes>,WCHAR[25],,true,,WCHAR[25],-1
653420,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WCHAR[2],,<includes>,WCHAR[2],,true,,WCHAR[2],-1
653421,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WCHAR[31],,<includes>,WCHAR[31],,true,,WCHAR[31],-1
653422,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WCHAR[32],,<includes>,WCHAR[32],,true,,WCHAR[32],-1
653423,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WCHAR[4],,<includes>,WCHAR[4],,true,,WCHAR[4],-1
653424,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WCHAR[512],,<includes>,WCHAR[512],,true,,WCHAR[512],-1
653425,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WCHAR[60],,<includes>,WCHAR[60],,true,,WCHAR[60],-1
653426,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WCHAR[64],,<includes>,WCHAR[64],,true,,WCHAR[64],-1
653427,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WCHAR[70],,<includes>,WCHAR[70],,true,,WCHAR[70],-1
653428,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WCHAR[80],,<includes>,WCHAR[80],,true,,WCHAR[80],-1
653429,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WCHAR[90],,<includes>,WCHAR[90],,true,,WCHAR[90],-1
653430,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WCHAR[],,<includes>,WCHAR[],,true,,WCHAR[],-1
653431,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WCHAR[]*,,<includes>,WCHAR[]*,,true,,WCHAR[]*,-1
653432,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WDJ,,<includes>,WDJ,,true,,WDJ,-1
653433,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WEX,,<includes>,WEX,,true,,WEX,-1
653434,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"VerifyCompareTraits<CHAR_INFO,CHAR_INFO><>",,<includes>,"WEX.TestExecution.VerifyCompareTraits<CHAR_INFO,CHAR_INFO><>",,true,,"VerifyCompareTraits<CHAR_INFO,CHAR_INFO><>",-1
653435,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"VerifyCompareTraits<CONSOLE_CURSOR_INFO,CONSOLE_CURSOR_INFO><>",,<includes>,"WEX.TestExecution.VerifyCompareTraits<CONSOLE_CURSOR_INFO,CONSOLE_CURSOR_INFO><>",,true,,"VerifyCompareTraits<CONSOLE_CURSOR_INFO,CONSOLE_CURSOR_INFO><>",-1
653436,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"VerifyCompareTraits<CONSOLE_FONT_INFO,CONSOLE_FONT_INFO><>",,<includes>,"WEX.TestExecution.VerifyCompareTraits<CONSOLE_FONT_INFO,CONSOLE_FONT_INFO><>",,true,,"VerifyCompareTraits<CONSOLE_FONT_INFO,CONSOLE_FONT_INFO><>",-1
653437,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"VerifyCompareTraits<CONSOLE_FONT_INFOEX,CONSOLE_FONT_INFOEX><>",,<includes>,"WEX.TestExecution.VerifyCompareTraits<CONSOLE_FONT_INFOEX,CONSOLE_FONT_INFOEX><>",,true,,"VerifyCompareTraits<CONSOLE_FONT_INFOEX,CONSOLE_FONT_INFOEX><>",-1
653438,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"VerifyCompareTraits<CONSOLE_SCREEN_BUFFER_INFOEX,CONSOLE_SCREEN_BUFFER_INFOEX><>",,<includes>,"WEX.TestExecution.VerifyCompareTraits<CONSOLE_SCREEN_BUFFER_INFOEX,CONSOLE_SCREEN_BUFFER_INFOEX><>",,true,,"VerifyCompareTraits<CONSOLE_SCREEN_BUFFER_INFOEX,CONSOLE_SCREEN_BUFFER_INFOEX><>",-1
653439,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"VerifyCompareTraits<COORD,COORD><>",,<includes>,"WEX.TestExecution.VerifyCompareTraits<COORD,COORD><>",,true,,"VerifyCompareTraits<COORD,COORD><>",-1
653440,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"VerifyCompareTraits<INPUT_RECORD,INPUT_RECORD><>",,<includes>,"WEX.TestExecution.VerifyCompareTraits<INPUT_RECORD,INPUT_RECORD><>",,true,,"VerifyCompareTraits<INPUT_RECORD,INPUT_RECORD><>",-1
653441,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"VerifyCompareTraits<SMALL_RECT,SMALL_RECT><>",,<includes>,"WEX.TestExecution.VerifyCompareTraits<SMALL_RECT,SMALL_RECT><>",,true,,"VerifyCompareTraits<SMALL_RECT,SMALL_RECT><>",-1
653442,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"VerifyCompareTraits<double,double><>",,<includes>,"WEX.TestExecution.VerifyCompareTraits<double,double><>",,true,,"VerifyCompareTraits<double,double><>",-1
653443,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"VerifyCompareTraits<float,float><>",,<includes>,"WEX.TestExecution.VerifyCompareTraits<float,float><>",,true,,"VerifyCompareTraits<float,float><>",-1
653444,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,basic_string_view<Elem>><Elem>,,<includes>,"WEX.TestExecution.VerifyCompareTraits<std.basic_string_view<Elem>,std.basic_string_view<Elem>><Elem>",,true,,basic_string_view<Elem>><Elem>,-1
653445,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"basic_rle<T,S,Container>><T,S,Container>",,<includes>,"WEX.TestExecution.VerifyCompareTraits<std.string_view,til.basic_rle<T,S,Container>><T,S,Container>",,true,,"basic_rle<T,S,Container>><T,S,Container>",-1
653446,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,inclusive_rect><>,,<includes>,"WEX.TestExecution.VerifyCompareTraits<til.inclusive_rect,til.inclusive_rect><>",,true,,inclusive_rect><>,-1
653447,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,point><>,,<includes>,"WEX.TestExecution.VerifyCompareTraits<til.point,til.point><>",,true,,point><>,-1
653448,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VerifyOutputTraits<CHAR_INFO><>,,<includes>,WEX.TestExecution.VerifyOutputTraits<CHAR_INFO><>,,true,,VerifyOutputTraits<CHAR_INFO><>,-1
653449,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VerifyOutputTraits<CONSOLE_CURSOR_INFO><>,,<includes>,WEX.TestExecution.VerifyOutputTraits<CONSOLE_CURSOR_INFO><>,,true,,VerifyOutputTraits<CONSOLE_CURSOR_INFO><>,-1
653450,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VerifyOutputTraits<CONSOLE_FONT_INFO><>,,<includes>,WEX.TestExecution.VerifyOutputTraits<CONSOLE_FONT_INFO><>,,true,,VerifyOutputTraits<CONSOLE_FONT_INFO><>,-1
653451,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VerifyOutputTraits<CONSOLE_FONT_INFOEX><>,,<includes>,WEX.TestExecution.VerifyOutputTraits<CONSOLE_FONT_INFOEX><>,,true,,VerifyOutputTraits<CONSOLE_FONT_INFOEX><>,-1
653452,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VerifyOutputTraits<CONSOLE_SCREEN_BUFFER_INFOEX><>,,<includes>,WEX.TestExecution.VerifyOutputTraits<CONSOLE_SCREEN_BUFFER_INFOEX><>,,true,,VerifyOutputTraits<CONSOLE_SCREEN_BUFFER_INFOEX><>,-1
653453,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VerifyOutputTraits<COORD><>,,<includes>,WEX.TestExecution.VerifyOutputTraits<COORD><>,,true,,VerifyOutputTraits<COORD><>,-1
653454,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VerifyOutputTraits<INPUT_RECORD><>,,<includes>,WEX.TestExecution.VerifyOutputTraits<INPUT_RECORD><>,,true,,VerifyOutputTraits<INPUT_RECORD><>,-1
653455,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VerifyOutputTraits<SMALL_RECT><>,,<includes>,WEX.TestExecution.VerifyOutputTraits<SMALL_RECT><>,,true,,VerifyOutputTraits<SMALL_RECT><>,-1
653456,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,string_view><>,,<includes>,WEX.TestExecution.VerifyOutputTraits<std.string_view><>,,true,,string_view><>,-1
653457,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wstring_view><>,,<includes>,WEX.TestExecution.VerifyOutputTraits<std.wstring_view><>,,true,,wstring_view><>,-1
653458,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,inclusive_rect><>,,<includes>,WEX.TestExecution.VerifyOutputTraits<til.inclusive_rect><>,,true,,inclusive_rect><>,-1
653459,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,point><>,,<includes>,WEX.TestExecution.VerifyOutputTraits<til.point><>,,true,,point><>,-1
653460,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,hstring><>,,<includes>,WEX.TestExecution.VerifyOutputTraits<winrt.hstring><>,,true,,hstring><>,-1
653461,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WINAPI,,<includes>,WINAPI,,true,,WINAPI,-1
653462,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WINDOWINFO,,<includes>,WINDOWINFO,,true,,WINDOWINFO,-1
653463,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WINDOWPLACEMENT,,<includes>,WINDOWPLACEMENT,,true,,WINDOWPLACEMENT,-1
653464,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WINDOW_BUFFER_SIZE_RECORD,,<includes>,WINDOW_BUFFER_SIZE_RECORD,,true,,WINDOW_BUFFER_SIZE_RECORD,-1
653465,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WINHTTP_WEB_SOCKET_BUFFER_TYPE,,<includes>,WINHTTP_WEB_SOCKET_BUFFER_TYPE,,true,,WINHTTP_WEB_SOCKET_BUFFER_TYPE,-1
653466,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WNDCLASS,,<includes>,WNDCLASS,,true,,WNDCLASS,-1
653467,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WNDCLASSEX,,<includes>,WNDCLASSEX,,true,,WNDCLASSEX,-1
653468,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WNDCLASSEXW,,<includes>,WNDCLASSEXW,,true,,WNDCLASSEXW,-1
653469,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WNDCLASSW,,<includes>,WNDCLASSW,,true,,WNDCLASSW,-1
653470,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WORD,,<includes>,WORD,,true,,WORD,-1
653471,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WORD[32],,<includes>,WORD[32],,true,,WORD[32],-1
653472,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WORD[4],,<includes>,WORD[4],,true,,WORD[4],-1
653473,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WORD[500],,<includes>,WORD[500],,true,,WORD[500],-1
653474,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WORD[5],,<includes>,WORD[5],,true,,WORD[5],-1
653475,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WPARAM,,<includes>,WPARAM,,true,,WPARAM,-1
653476,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WRL,,<includes>,WRL,,true,,WRL,-1
653477,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"InhibitFtmBase>, IRawElementProviderSimple, IRawElementProviderFragment, IRawElementProviderFragmentRoot>",,<includes>,"WRL.RuntimeClass<WRL.RuntimeClassFlags<WRL.ClassicCom | WRL.InhibitFtmBase>, IRawElementProviderSimple, IRawElementProviderFragment, IRawElementProviderFragmentRoot>",,true,,"InhibitFtmBase>, IRawElementProviderSimple, IRawElementProviderFragment, IRawElementProviderFragmentRoot>",-1
653478,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"InhibitFtmBase>, IRawElementProviderSimple, IRawElementProviderFragment, ITextProvider>",,<includes>,"WRL.RuntimeClass<WRL.RuntimeClassFlags<WRL.ClassicCom | WRL.InhibitFtmBase>, IRawElementProviderSimple, IRawElementProviderFragment, ITextProvider>",,true,,"InhibitFtmBase>, IRawElementProviderSimple, IRawElementProviderFragment, ITextProvider>",-1
653479,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"InhibitFtmBase>, IRawElementProviderSimple>",,<includes>,"WRL.RuntimeClass<WRL.RuntimeClassFlags<WRL.ClassicCom | WRL.InhibitFtmBase>, IRawElementProviderSimple>",,true,,"InhibitFtmBase>, IRawElementProviderSimple>",-1
653480,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"InhibitFtmBase>, ITextRangeProvider>",,<includes>,"WRL.RuntimeClass<WRL.RuntimeClassFlags<WRL.ClassicCom | WRL.InhibitFtmBase>, ITextRangeProvider>",,true,,"InhibitFtmBase>, ITextRangeProvider>",-1
653481,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WUX,,<includes>,WUX,,true,,WUX,-1
653482,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WWH,,<includes>,WWH,,true,,WWH,-1
653483,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WaitPolicy,,<includes>,WaitPolicy,,true,,WaitPolicy,-1
653484,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WalkDir,,<includes>,WalkDir,,true,,WalkDir,-1
653485,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WddmConEngine,,<includes>,WddmConEngine,,true,,WddmConEngine,-1
653486,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Window,,<includes>,Window,,true,,Window,-1
653487,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WindowActivatedArgs,,<includes>,WindowActivatedArgs,,true,,WindowActivatedArgs,-1
653488,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WindowActivatedArgsT<WindowActivatedArgs>,,<includes>,WindowActivatedArgsT<WindowActivatedArgs>,,true,,WindowActivatedArgsT<WindowActivatedArgs>,-1
653489,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WindowDpiApi,,<includes>,WindowDpiApi,,true,,WindowDpiApi,-1
653490,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WindowEmperor*,,<includes>,WindowEmperor*,,true,,WindowEmperor*,-1
653491,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WindowInitializedState,,<includes>,WindowInitializedState,,true,,WindowInitializedState,-1
653492,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WindowLayout,,<includes>,WindowLayout,,true,,WindowLayout,-1
653493,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WindowLayoutT<WindowLayout>,,<includes>,WindowLayoutT<WindowLayout>,,true,,WindowLayoutT<WindowLayout>,-1
653494,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WindowManager,,<includes>,WindowManager,,true,,WindowManager,-1
653495,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WindowManagerT<WindowManager>,,<includes>,WindowManagerT<WindowManager>,,true,,WindowManagerT<WindowManager>,-1
653496,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WindowManipulationType,,<includes>,WindowManipulationType,,true,,WindowManipulationType,-1
653497,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WindowMetrics,,<includes>,WindowMetrics,,true,,WindowMetrics,-1
653498,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WindowProperties,,<includes>,WindowProperties,,true,,WindowProperties,-1
653499,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WindowPropertiesT<WindowProperties>,,<includes>,WindowPropertiesT<WindowProperties>,,true,,WindowPropertiesT<WindowProperties>,-1
653500,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WindowRequestedArgs,,<includes>,WindowRequestedArgs,,true,,WindowRequestedArgs,-1
653501,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WindowRequestedArgsT<WindowRequestedArgs>,,<includes>,WindowRequestedArgsT<WindowRequestedArgs>,,true,,WindowRequestedArgsT<WindowRequestedArgs>,-1
653502,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WindowRevokers,,<includes>,WindowRevokers,,true,,WindowRevokers,-1
653503,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WindowThemeT<WindowTheme>,,<includes>,WindowThemeT<WindowTheme>,,true,,WindowThemeT<WindowTheme>,-1
653504,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WindowUiaProvider,,<includes>,WindowUiaProvider,,true,,WindowUiaProvider,-1
653505,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WindowUiaProvider*,,<includes>,WindowUiaProvider*,,true,,WindowUiaProvider*,-1
653506,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WindowVisualState,,<includes>,WindowVisualState,,true,,WindowVisualState,-1
653507,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WindowingMode,,<includes>,WindowingMode,,true,,WindowingMode,-1
653508,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Windows,,<includes>,Windows,,true,,Windows,-1
653509,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WindowsXamlManager,,<includes>,WindowsXamlManager,,true,,WindowsXamlManager,-1
653510,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WriteHelper,,<includes>,WriteHelper,,true,,WriteHelper,-1
653511,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WriteMode,,<includes>,WriteMode,,true,,WriteMode,-1
653512,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WriteNarrowGlyphUnicode,,<includes>,WriteNarrowGlyphUnicode,,true,,WriteNarrowGlyphUnicode,-1
653513,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,XFORM,,<includes>,XFORM,,true,,XFORM,-1
653514,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,XMFLOAT2,,<includes>,XMFLOAT2,,true,,XMFLOAT2,-1
653515,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,XMFLOAT3,,<includes>,XMFLOAT3,,true,,XMFLOAT3,-1
653516,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,XWalk,,<includes>,XWalk,,true,,XWalk,-1
653517,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Xaml,,<includes>,Xaml,,true,,Xaml,-1
653518,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,XamlAutomation,,<includes>,XamlAutomation,,true,,XamlAutomation,-1
653519,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,XamlUiaTextRange,,<includes>,XamlUiaTextRange,,true,,XamlUiaTextRange,-1
653520,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Xterm256Engine,,<includes>,Xterm256Engine,,true,,Xterm256Engine,-1
653521,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,XtermEngine,,<includes>,XtermEngine,,true,,XtermEngine,-1
653522,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,YWalk,,<includes>,YWalk,,true,,YWalk,-1
653523,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,[2],,<includes>,[2],,true,,[2],-1
653524,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_Alloc,,<includes>,_Alloc,,true,,_Alloc,-1
653525,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_CONSOLEENDTASK*,,<includes>,_CONSOLEENDTASK*,,true,,_CONSOLEENDTASK*,-1
653526,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_CONSOLESETFOREGROUND*,,<includes>,_CONSOLESETFOREGROUND*,,true,,_CONSOLESETFOREGROUND*,-1
653527,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_CONSOLEWINDOWOWNER*,,<includes>,_CONSOLEWINDOWOWNER*,,true,,_CONSOLEWINDOWOWNER*,-1
653528,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_CONSOLE_API_CONNECTINFO*,,<includes>,_CONSOLE_API_CONNECTINFO*,,true,,_CONSOLE_API_CONNECTINFO*,-1
653529,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_CONSOLE_API_DESCRIPTOR*,,<includes>,_CONSOLE_API_DESCRIPTOR*,,true,,_CONSOLE_API_DESCRIPTOR*,-1
653530,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_CONSOLE_API_DESCRIPTOR[10],,<includes>,_CONSOLE_API_DESCRIPTOR[10],,true,,_CONSOLE_API_DESCRIPTOR[10],-1
653531,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_CONSOLE_API_DESCRIPTOR[22],,<includes>,_CONSOLE_API_DESCRIPTOR[22],,true,,_CONSOLE_API_DESCRIPTOR[22],-1
653532,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_CONSOLE_API_DESCRIPTOR[45],,<includes>,_CONSOLE_API_DESCRIPTOR[45],,true,,_CONSOLE_API_DESCRIPTOR[45],-1
653533,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_CONSOLE_API_LAYER_DESCRIPTOR*,,<includes>,_CONSOLE_API_LAYER_DESCRIPTOR*,,true,,_CONSOLE_API_LAYER_DESCRIPTOR*,-1
653534,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_CONSOLE_API_LAYER_DESCRIPTOR[3],,<includes>,_CONSOLE_API_LAYER_DESCRIPTOR[3],,true,,_CONSOLE_API_LAYER_DESCRIPTOR[3],-1
653535,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_CONSOLE_API_MSG*,,<includes>,_CONSOLE_API_MSG*,,true,,_CONSOLE_API_MSG*,-1
653536,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_CONSOLE_API_MSG*const,,<includes>,_CONSOLE_API_MSG*const,,true,,_CONSOLE_API_MSG*const,-1
653537,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_CONSOLE_API_STATE*,,<includes>,_CONSOLE_API_STATE*,,true,,_CONSOLE_API_STATE*,-1
653538,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_CONSOLE_API_STATE*const,,<includes>,_CONSOLE_API_STATE*const,,true,,_CONSOLE_API_STATE*const,-1
653539,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_CONSOLE_CARET_INFO*,,<includes>,_CONSOLE_CARET_INFO*,,true,,_CONSOLE_CARET_INFO*,-1
653540,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_CONSOLE_KEY_INFO*,,<includes>,_CONSOLE_KEY_INFO*,,true,,_CONSOLE_KEY_INFO*,-1
653541,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_CONSOLE_KEY_INFO[32],,<includes>,_CONSOLE_KEY_INFO[32],,true,,_CONSOLE_KEY_INFO[32],-1
653542,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_CONSOLE_PROCESS_INFO*,,<includes>,_CONSOLE_PROCESS_INFO*,,true,,_CONSOLE_PROCESS_INFO*,-1
653543,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_Check_return_,,<includes>,_Check_return_,,true,,_Check_return_,-1
653544,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_FILE_FS_DEVICE_INFORMATION*,,<includes>,_FILE_FS_DEVICE_INFORMATION*,,true,,_FILE_FS_DEVICE_INFORMATION*,-1
653545,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_FONTENUMDATA*,,<includes>,_FONTENUMDATA*,,true,,_FONTENUMDATA*,-1
653546,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_FONT_INFO*,,<includes>,_FONT_INFO*,,true,,_FONT_INFO*,-1
653547,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_FreeIconFromReference,,<includes>,_FreeIconFromReference,,true,,_FreeIconFromReference,-1
653548,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_In_,,<includes>,_In_,,true,,_In_,-1
653549,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_LostFocusHandlers,,<includes>,_LostFocusHandlers,,true,,_LostFocusHandlers,-1
653550,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_OnMaximizeOrRestore,,<includes>,_OnMaximizeOrRestore,,true,,_OnMaximizeOrRestore,-1
653551,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_RTL_CONSTANT_STRING_remove_const_template_class<size_t>,,<includes>,_RTL_CONSTANT_STRING_remove_const_template_class<size_t>,,true,,_RTL_CONSTANT_STRING_remove_const_template_class<size_t>,-1
653552,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_RTL_CONSTANT_STRING_remove_const_template_class<sizeof(WCHAR)><>,,<includes>,_RTL_CONSTANT_STRING_remove_const_template_class<sizeof(WCHAR)><>,,true,,_RTL_CONSTANT_STRING_remove_const_template_class<sizeof(WCHAR)><>,-1
653553,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_RTL_CONSTANT_STRING_remove_const_template_class<sizeof(char)><>,,<includes>,_RTL_CONSTANT_STRING_remove_const_template_class<sizeof(char)><>,,true,,_RTL_CONSTANT_STRING_remove_const_template_class<sizeof(char)><>,-1
653554,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_RegPropertyType,,<includes>,_RegPropertyType,,true,,_RegPropertyType,-1
653555,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_RemoveTabs,,<includes>,_RemoveTabs,,true,,_RemoveTabs,-1
653556,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_ReplacePercentWithCRLF,,<includes>,_ReplacePercentWithCRLF,,true,,_ReplacePercentWithCRLF,-1
653557,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_RestartTerminalRequestedHandlers,,<includes>,_RestartTerminalRequestedHandlers,,true,,_RestartTerminalRequestedHandlers,-1
653558,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_Ret_maybenull_,,<includes>,_Ret_maybenull_,,true,,_Ret_maybenull_,-1
653559,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_State,,<includes>,_State,,true,,_State,-1
653560,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_TerminalTheme*,,<includes>,_TerminalTheme*,,true,,_TerminalTheme*,-1
653561,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_Type,,<includes>,_Type,,true,,_Type,-1
653562,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_Type*,,<includes>,_Type*,,true,,_Type*,-1
653563,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_Type1,,<includes>,_Type1,,true,,_Type1,-1
653564,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_Type1*,,<includes>,_Type1*,,true,,_Type1*,-1
653565,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_Type2,,<includes>,_Type2,,true,,_Type2,-1
653566,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_Type2*,,<includes>,_Type2*,,true,,_Type2*,-1
653567,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_Type[_cElems],,<includes>,_Type[_cElems],,true,,_Type[_cElems],-1
653568,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_UpdateFont,,<includes>,_UpdateFont,,true,,_UpdateFont,-1
653569,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,__kernel_entry,,<includes>,__kernel_entry,,true,,__kernel_entry,-1
653570,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_api,,<includes>,_api,,true,,_api,-1
653571,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_bitmap_const_iterator,,<includes>,_bitmap_const_iterator,,true,,_bitmap_const_iterator,-1
653572,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_buildArgsFromCommandline,,<includes>,_buildArgsFromCommandline,,true,,_buildArgsFromCommandline,-1
653573,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_callbacks,,<includes>,_callbacks,,true,,_callbacks,-1
653574,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_clearOldMruEntries,,<includes>,_clearOldMruEntries,,true,,_clearOldMruEntries,-1
653575,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_controlEvents,,<includes>,_controlEvents,,true,,_controlEvents,-1
653576,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_drawTextResetLineRendition,,<includes>,_drawTextResetLineRendition,,true,,_drawTextResetLineRendition,-1
653577,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,>,,<includes>,"_fuzz_array_entry<_Type1,_Type2,_Args...>",,true,,>,-1
653578,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,>,,<includes>,"_fuzz_type_entry<_Type,_Args...>",,true,,>,-1
653579,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_pixelShaderSettings,,<includes>,_pixelShaderSettings,,true,,_pixelShaderSettings,-1
653580,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_range,,<includes>,_range,,true,,_range,-1
653581,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_rectangle_const_iterator,,<includes>,_rectangle_const_iterator,,true,,_rectangle_const_iterator,-1
653582,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_revokers,,<includes>,_revokers,,true,,_revokers,-1
653583,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_screenQuadVertices,,<includes>,_screenQuadVertices,,true,,_screenQuadVertices,-1
653584,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_startupInfo,,<includes>,_startupInfo,,true,,_startupInfo,-1
653585,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_stashed,,<includes>,_stashed,,true,,_stashed,-1
653586,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_throttledUpdateScrollbar,,<includes>,_throttledUpdateScrollbar,,true,,_throttledUpdateScrollbar,-1
653587,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_windowCallbacks,,<includes>,_windowCallbacks,,true,,_windowCallbacks,-1
653588,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,acquisition,,<includes>,acquisition,,true,,acquisition,-1
653589,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,actual,,<includes>,actual,,true,,actual,-1
653590,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,alias,,<includes>,alias,,true,,alias,-1
653591,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,scope_guard<F>,,<includes>,anonymous_namespace_2.detail.scope_guard<F>,,true,,scope_guard<F>,-1
653592,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,>,,<includes>,anonymous_type_12anonymous_type_11detail.scope_guard<.>,,true,,>,-1
653593,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,>,,<includes>,anonymous_type_14anonymous_type_13detail.scope_guard<.>,,true,,>,-1
653594,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,apartment_type,,<includes>,apartment_type,,true,,apartment_type,-1
653595,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TABLE_SIZE>,,<includes>,"array<COLORREF,TextColor.TABLE_SIZE>",,true,,TABLE_SIZE>,-1
653596,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"array<TextColor,16>",,<includes>,"array<TextColor,16>",,true,,"array<TextColor,16>",-1
653597,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MAX_HEIGHT>,,<includes>,"array<uint16_t,FontBuffer.MAX_HEIGHT>",,true,,MAX_HEIGHT>,-1
653598,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"Color,COLOR_TABLE_SIZE>",,<includes>,"array<winrt.Microsoft.Terminal.Core.Color,COLOR_TABLE_SIZE>",,true,,"Color,COLOR_TABLE_SIZE>",-1
653599,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,atomic_size_type,,<includes>,atomic_size_type,,true,,atomic_size_type,-1
653600,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,auto,,<includes>,auto,,true,,auto,-1
653601,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,auto*,,<includes>,auto*,,true,,auto*,-1
653602,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,auto;,,<includes>,auto;,,true,,auto;,-1
653603,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,badSource,,<includes>,badSource,,true,,badSource,-1
653604,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,basic_rle,,<includes>,basic_rle,,true,,basic_rle,-1
653605,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"basic_string_view<T,Traits>",,<includes>,"basic_string_view<T,Traits>",,true,,"basic_string_view<T,Traits>",-1
653606,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,bitmap<allocator_type>,,<includes>,bitmap<allocator_type>,,true,,bitmap<allocator_type>,-1
653607,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,bool,,<includes>,bool,,true,,bool,-1
653608,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,bool (),,<includes>,bool (),,true,,bool (),-1
653609,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,bool (FontInfoBase &),,<includes>,bool (FontInfoBase &),,true,,bool (FontInfoBase &),-1
653610,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,bool*,,<includes>,bool*,,true,,bool*,-1
653611,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,boolean,,<includes>,boolean,,true,,boolean,-1
653612,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,byte,,<includes>,byte,,true,,byte,-1
653613,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,byte[4],,<includes>,byte[4],,true,,byte[4],-1
653614,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char,,<includes>,char,,true,,char,-1
653615,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char*,,<includes>,char*,,true,,char*,-1
653616,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char**,,<includes>,char**,,true,,char**,-1
653617,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char32_t,,<includes>,char32_t,,true,,char32_t,-1
653618,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[1002],,<includes>,char[1002],,true,,char[1002],-1
653619,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[1006],,<includes>,char[1006],,true,,char[1006],-1
653620,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[1016],,<includes>,char[1016],,true,,char[1016],-1
653621,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[101],,<includes>,char[101],,true,,char[101],-1
653622,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[1024],,<includes>,char[1024],,true,,char[1024],-1
653623,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[103],,<includes>,char[103],,true,,char[103],-1
653624,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[1048],,<includes>,char[1048],,true,,char[1048],-1
653625,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[104],,<includes>,char[104],,true,,char[104],-1
653626,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[107],,<includes>,char[107],,true,,char[107],-1
653627,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[1091],,<includes>,char[1091],,true,,char[1091],-1
653628,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[1096],,<includes>,char[1096],,true,,char[1096],-1
653629,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[10],,<includes>,char[10],,true,,char[10],-1
653630,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[114],,<includes>,char[114],,true,,char[114],-1
653631,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[1157],,<includes>,char[1157],,true,,char[1157],-1
653632,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[118],,<includes>,char[118],,true,,char[118],-1
653633,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[11],,<includes>,char[11],,true,,char[11],-1
653634,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[121],,<includes>,char[121],,true,,char[121],-1
653635,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[124],,<includes>,char[124],,true,,char[124],-1
653636,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[1269],,<includes>,char[1269],,true,,char[1269],-1
653637,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[1280],,<includes>,char[1280],,true,,char[1280],-1
653638,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[128],,<includes>,char[128],,true,,char[128],-1
653639,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[12],,<includes>,char[12],,true,,char[12],-1
653640,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[1318],,<includes>,char[1318],,true,,char[1318],-1
653641,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[131],,<includes>,char[131],,true,,char[131],-1
653642,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[133],,<includes>,char[133],,true,,char[133],-1
653643,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[1378],,<includes>,char[1378],,true,,char[1378],-1
653644,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[137],,<includes>,char[137],,true,,char[137],-1
653645,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[139],,<includes>,char[139],,true,,char[139],-1
653646,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[13],,<includes>,char[13],,true,,char[13],-1
653647,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[141],,<includes>,char[141],,true,,char[141],-1
653648,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[143],,<includes>,char[143],,true,,char[143],-1
653649,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[1466],,<includes>,char[1466],,true,,char[1466],-1
653650,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[147],,<includes>,char[147],,true,,char[147],-1
653651,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[1488],,<includes>,char[1488],,true,,char[1488],-1
653652,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[14],,<includes>,char[14],,true,,char[14],-1
653653,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[1556],,<includes>,char[1556],,true,,char[1556],-1
653654,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[157],,<includes>,char[157],,true,,char[157],-1
653655,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[15],,<includes>,char[15],,true,,char[15],-1
653656,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[161],,<includes>,char[161],,true,,char[161],-1
653657,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[164],,<includes>,char[164],,true,,char[164],-1
653658,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[167],,<includes>,char[167],,true,,char[167],-1
653659,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[16],,<includes>,char[16],,true,,char[16],-1
653660,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[174],,<includes>,char[174],,true,,char[174],-1
653661,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[179],,<includes>,char[179],,true,,char[179],-1
653662,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[17],,<includes>,char[17],,true,,char[17],-1
653663,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[1841],,<includes>,char[1841],,true,,char[1841],-1
653664,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[184],,<includes>,char[184],,true,,char[184],-1
653665,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[189],,<includes>,char[189],,true,,char[189],-1
653666,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[18],,<includes>,char[18],,true,,char[18],-1
653667,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[190],,<includes>,char[190],,true,,char[190],-1
653668,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[197],,<includes>,char[197],,true,,char[197],-1
653669,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[1995],,<includes>,char[1995],,true,,char[1995],-1
653670,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[19],,<includes>,char[19],,true,,char[19],-1
653671,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[1],,<includes>,char[1],,true,,char[1],-1
653672,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[200],,<includes>,char[200],,true,,char[200],-1
653673,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[2080],,<includes>,char[2080],,true,,char[2080],-1
653674,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[209],,<includes>,char[209],,true,,char[209],-1
653675,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[20],,<includes>,char[20],,true,,char[20],-1
653676,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[2118],,<includes>,char[2118],,true,,char[2118],-1
653677,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[211],,<includes>,char[211],,true,,char[211],-1
653678,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[215],,<includes>,char[215],,true,,char[215],-1
653679,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[218],,<includes>,char[218],,true,,char[218],-1
653680,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[21],,<includes>,char[21],,true,,char[21],-1
653681,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[227],,<includes>,char[227],,true,,char[227],-1
653682,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[22],,<includes>,char[22],,true,,char[22],-1
653683,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[2354],,<includes>,char[2354],,true,,char[2354],-1
653684,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[23],,<includes>,char[23],,true,,char[23],-1
653685,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[247],,<includes>,char[247],,true,,char[247],-1
653686,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[2499],,<includes>,char[2499],,true,,char[2499],-1
653687,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[24],,<includes>,char[24],,true,,char[24],-1
653688,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[250],,<includes>,char[250],,true,,char[250],-1
653689,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[253],,<includes>,char[253],,true,,char[253],-1
653690,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[255],,<includes>,char[255],,true,,char[255],-1
653691,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[256],,<includes>,char[256],,true,,char[256],-1
653692,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[2584],,<includes>,char[2584],,true,,char[2584],-1
653693,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[25],,<includes>,char[25],,true,,char[25],-1
653694,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[263],,<includes>,char[263],,true,,char[263],-1
653695,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[264],,<includes>,char[264],,true,,char[264],-1
653696,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[265],,<includes>,char[265],,true,,char[265],-1
653697,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[26],,<includes>,char[26],,true,,char[26],-1
653698,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[274],,<includes>,char[274],,true,,char[274],-1
653699,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[276],,<includes>,char[276],,true,,char[276],-1
653700,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[27],,<includes>,char[27],,true,,char[27],-1
653701,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[288],,<includes>,char[288],,true,,char[288],-1
653702,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[289],,<includes>,char[289],,true,,char[289],-1
653703,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[28],,<includes>,char[28],,true,,char[28],-1
653704,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[292],,<includes>,char[292],,true,,char[292],-1
653705,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[294],,<includes>,char[294],,true,,char[294],-1
653706,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[295],,<includes>,char[295],,true,,char[295],-1
653707,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[297],,<includes>,char[297],,true,,char[297],-1
653708,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[29],,<includes>,char[29],,true,,char[29],-1
653709,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[2],,<includes>,char[2],,true,,char[2],-1
653710,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[303],,<includes>,char[303],,true,,char[303],-1
653711,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[30],,<includes>,char[30],,true,,char[30],-1
653712,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[311],,<includes>,char[311],,true,,char[311],-1
653713,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[31],,<includes>,char[31],,true,,char[31],-1
653714,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[32],,<includes>,char[32],,true,,char[32],-1
653715,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[333],,<includes>,char[333],,true,,char[333],-1
653716,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[338],,<includes>,char[338],,true,,char[338],-1
653717,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[33],,<includes>,char[33],,true,,char[33],-1
653718,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[34],,<includes>,char[34],,true,,char[34],-1
653719,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[352],,<includes>,char[352],,true,,char[352],-1
653720,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[354],,<includes>,char[354],,true,,char[354],-1
653721,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[356],,<includes>,char[356],,true,,char[356],-1
653722,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[35],,<includes>,char[35],,true,,char[35],-1
653723,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[360],,<includes>,char[360],,true,,char[360],-1
653724,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[367],,<includes>,char[367],,true,,char[367],-1
653725,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[36],,<includes>,char[36],,true,,char[36],-1
653726,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[370],,<includes>,char[370],,true,,char[370],-1
653727,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[37],,<includes>,char[37],,true,,char[37],-1
653728,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[38],,<includes>,char[38],,true,,char[38],-1
653729,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[392],,<includes>,char[392],,true,,char[392],-1
653730,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[398],,<includes>,char[398],,true,,char[398],-1
653731,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[39],,<includes>,char[39],,true,,char[39],-1
653732,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[3],,<includes>,char[3],,true,,char[3],-1
653733,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[403],,<includes>,char[403],,true,,char[403],-1
653734,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[4096],,<includes>,char[4096],,true,,char[4096],-1
653735,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[40],,<includes>,char[40],,true,,char[40],-1
653736,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[41],,<includes>,char[41],,true,,char[41],-1
653737,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[428],,<includes>,char[428],,true,,char[428],-1
653738,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[42],,<includes>,char[42],,true,,char[42],-1
653739,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[43],,<includes>,char[43],,true,,char[43],-1
653740,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[446],,<includes>,char[446],,true,,char[446],-1
653741,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[44],,<includes>,char[44],,true,,char[44],-1
653742,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[452],,<includes>,char[452],,true,,char[452],-1
653743,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[457],,<includes>,char[457],,true,,char[457],-1
653744,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[45],,<includes>,char[45],,true,,char[45],-1
653745,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[465],,<includes>,char[465],,true,,char[465],-1
653746,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[46],,<includes>,char[46],,true,,char[46],-1
653747,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[475],,<includes>,char[475],,true,,char[475],-1
653748,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[47],,<includes>,char[47],,true,,char[47],-1
653749,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[482],,<includes>,char[482],,true,,char[482],-1
653750,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[483],,<includes>,char[483],,true,,char[483],-1
653751,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[48],,<includes>,char[48],,true,,char[48],-1
653752,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[496],,<includes>,char[496],,true,,char[496],-1
653753,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[49],,<includes>,char[49],,true,,char[49],-1
653754,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[4],,<includes>,char[4],,true,,char[4],-1
653755,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[502],,<includes>,char[502],,true,,char[502],-1
653756,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[504],,<includes>,char[504],,true,,char[504],-1
653757,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[50],,<includes>,char[50],,true,,char[50],-1
653758,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[510],,<includes>,char[510],,true,,char[510],-1
653759,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[51],,<includes>,char[51],,true,,char[51],-1
653760,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[52],,<includes>,char[52],,true,,char[52],-1
653761,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[535],,<includes>,char[535],,true,,char[535],-1
653762,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[53],,<includes>,char[53],,true,,char[53],-1
653763,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[540],,<includes>,char[540],,true,,char[540],-1
653764,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[54],,<includes>,char[54],,true,,char[54],-1
653765,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[5531],,<includes>,char[5531],,true,,char[5531],-1
653766,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[55],,<includes>,char[55],,true,,char[55],-1
653767,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[562],,<includes>,char[562],,true,,char[562],-1
653768,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[56],,<includes>,char[56],,true,,char[56],-1
653769,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[575],,<includes>,char[575],,true,,char[575],-1
653770,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[57],,<includes>,char[57],,true,,char[57],-1
653771,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[584],,<includes>,char[584],,true,,char[584],-1
653772,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[58],,<includes>,char[58],,true,,char[58],-1
653773,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[59],,<includes>,char[59],,true,,char[59],-1
653774,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[5],,<includes>,char[5],,true,,char[5],-1
653775,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[60],,<includes>,char[60],,true,,char[60],-1
653776,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[61],,<includes>,char[61],,true,,char[61],-1
653777,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[625],,<includes>,char[625],,true,,char[625],-1
653778,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[62],,<includes>,char[62],,true,,char[62],-1
653779,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[631],,<includes>,char[631],,true,,char[631],-1
653780,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[636],,<includes>,char[636],,true,,char[636],-1
653781,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[63],,<includes>,char[63],,true,,char[63],-1
653782,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[64],,<includes>,char[64],,true,,char[64],-1
653783,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[654],,<includes>,char[654],,true,,char[654],-1
653784,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[65],,<includes>,char[65],,true,,char[65],-1
653785,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[667],,<includes>,char[667],,true,,char[667],-1
653786,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[669],,<includes>,char[669],,true,,char[669],-1
653787,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[66],,<includes>,char[66],,true,,char[66],-1
653788,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[676],,<includes>,char[676],,true,,char[676],-1
653789,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[67],,<includes>,char[67],,true,,char[67],-1
653790,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[68],,<includes>,char[68],,true,,char[68],-1
653791,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[69],,<includes>,char[69],,true,,char[69],-1
653792,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[6],,<includes>,char[6],,true,,char[6],-1
653793,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[70],,<includes>,char[70],,true,,char[70],-1
653794,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[71],,<includes>,char[71],,true,,char[71],-1
653795,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[725],,<includes>,char[725],,true,,char[725],-1
653796,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[726],,<includes>,char[726],,true,,char[726],-1
653797,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[72],,<includes>,char[72],,true,,char[72],-1
653798,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[738],,<includes>,char[738],,true,,char[738],-1
653799,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[73],,<includes>,char[73],,true,,char[73],-1
653800,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[74],,<includes>,char[74],,true,,char[74],-1
653801,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[75],,<includes>,char[75],,true,,char[75],-1
653802,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[767],,<includes>,char[767],,true,,char[767],-1
653803,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[77],,<includes>,char[77],,true,,char[77],-1
653804,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[785],,<includes>,char[785],,true,,char[785],-1
653805,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[793],,<includes>,char[793],,true,,char[793],-1
653806,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[79],,<includes>,char[79],,true,,char[79],-1
653807,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[7],,<includes>,char[7],,true,,char[7],-1
653808,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[80],,<includes>,char[80],,true,,char[80],-1
653809,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[81],,<includes>,char[81],,true,,char[81],-1
653810,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[823],,<includes>,char[823],,true,,char[823],-1
653811,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[82],,<includes>,char[82],,true,,char[82],-1
653812,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[835],,<includes>,char[835],,true,,char[835],-1
653813,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[83],,<includes>,char[83],,true,,char[83],-1
653814,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[840],,<includes>,char[840],,true,,char[840],-1
653815,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[845],,<includes>,char[845],,true,,char[845],-1
653816,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[847],,<includes>,char[847],,true,,char[847],-1
653817,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[85],,<includes>,char[85],,true,,char[85],-1
653818,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[866],,<includes>,char[866],,true,,char[866],-1
653819,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[869],,<includes>,char[869],,true,,char[869],-1
653820,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[86],,<includes>,char[86],,true,,char[86],-1
653821,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[87],,<includes>,char[87],,true,,char[87],-1
653822,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[88],,<includes>,char[88],,true,,char[88],-1
653823,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[8],,<includes>,char[8],,true,,char[8],-1
653824,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[91],,<includes>,char[91],,true,,char[91],-1
653825,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[93],,<includes>,char[93],,true,,char[93],-1
653826,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[94],,<includes>,char[94],,true,,char[94],-1
653827,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[953],,<includes>,char[953],,true,,char[953],-1
653828,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[96],,<includes>,char[96],,true,,char[96],-1
653829,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[970],,<includes>,char[970],,true,,char[970],-1
653830,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[9],,<includes>,char[9],,true,,char[9],-1
653831,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[Length],,<includes>,char[Length],,true,,char[Length],-1
653832,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,char[],,<includes>,char[],,true,,char[],-1
653833,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,chrono,,<includes>,chrono,,true,,chrono,-1
653834,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,closeToolTipForButton,,<includes>,closeToolTipForButton,,true,,closeToolTipForButton,-1
653835,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,co_await,,<includes>,co_await,,true,,co_await,-1
653836,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,co_return,,<includes>,co_return,,true,,co_return,-1
653837,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,color,,<includes>,color,,true,,color,-1
653838,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IRawElementProviderSimple>,,<includes>,com_array<XamlAutomation.IRawElementProviderSimple>,,true,,IRawElementProviderSimple>,-1
653839,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ITextRangeProvider>,,<includes>,com_array<XamlAutomation.ITextRangeProvider>,,true,,ITextRangeProvider>,-1
653840,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,com_array<double>,,<includes>,com_array<double>,,true,,com_array<double>,-1
653841,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Color>,,<includes>,com_array<winrt.Microsoft.Terminal.Core.Color>,,true,,Color>,-1
653842,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,XmlnsDefinition>,,<includes>,com_array<winrt.Windows.UI.Xaml.Markup.XmlnsDefinition>,,true,,XmlnsDefinition>,-1
653843,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,hstring>,,<includes>,com_array<winrt.hstring>,,true,,hstring>,-1
653844,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,com_ptr<ActionAndArgs>,,<includes>,com_ptr<ActionAndArgs>,,true,,com_ptr<ActionAndArgs>,-1
653845,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,com_ptr<ActionMap>,,<includes>,com_ptr<ActionMap>,,true,,com_ptr<ActionMap>,-1
653846,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,com_ptr<AppearanceConfig>,,<includes>,com_ptr<AppearanceConfig>,,true,,com_ptr<AppearanceConfig>,-1
653847,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,com_ptr<ColorScheme>,,<includes>,com_ptr<ColorScheme>,,true,,com_ptr<ColorScheme>,-1
653848,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,com_ptr<Command>,,<includes>,com_ptr<Command>,,true,,com_ptr<Command>,-1
653849,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ControlCore>,,<includes>,com_ptr<Control.implementation.ControlCore>,,true,,ControlCore>,-1
653850,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,com_ptr<ControlAppearance>,,<includes>,com_ptr<ControlAppearance>,,true,,com_ptr<ControlAppearance>,-1
653851,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,com_ptr<FontConfig>,,<includes>,com_ptr<FontConfig>,,true,,com_ptr<FontConfig>,-1
653852,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,com_ptr<GlobalAppSettings>,,<includes>,com_ptr<GlobalAppSettings>,,true,,com_ptr<GlobalAppSettings>,-1
653853,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,com_ptr<IDWriteColorGlyphRunEnumerator1>,,<includes>,com_ptr<IDWriteColorGlyphRunEnumerator1>,,true,,com_ptr<IDWriteColorGlyphRunEnumerator1>,-1
653854,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,com_ptr<IDWriteFontCollection>,,<includes>,com_ptr<IDWriteFontCollection>,,true,,com_ptr<IDWriteFontCollection>,-1
653855,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,com_ptr<IShellLinkW>,,<includes>,com_ptr<IShellLinkW>,,true,,com_ptr<IShellLinkW>,-1
653856,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,com_ptr<KeyBindingViewModel>,,<includes>,com_ptr<KeyBindingViewModel>,,true,,com_ptr<KeyBindingViewModel>,-1
653857,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,com_ptr<NewTabMenuEntry>,,<includes>,com_ptr<NewTabMenuEntry>,,true,,com_ptr<NewTabMenuEntry>,-1
653858,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,com_ptr<Profile>,,<includes>,com_ptr<Profile>,,true,,com_ptr<Profile>,-1
653859,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,com_ptr<T>,,<includes>,com_ptr<T>,,true,,com_ptr<T>,-1
653860,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,com_ptr<TabRowTheme>,,<includes>,com_ptr<TabRowTheme>,,true,,com_ptr<TabRowTheme>,-1
653861,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,com_ptr<TabTheme>,,<includes>,com_ptr<TabTheme>,,true,,com_ptr<TabTheme>,-1
653862,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,com_ptr<TerminalTab>,,<includes>,com_ptr<TerminalTab>,,true,,com_ptr<TerminalTab>,-1
653863,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,com_ptr<Theme>,,<includes>,com_ptr<Theme>,,true,,com_ptr<Theme>,-1
653864,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,com_ptr<ThemePair>,,<includes>,com_ptr<ThemePair>,,true,,com_ptr<ThemePair>,-1
653865,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,com_ptr<WindowTheme>,,<includes>,com_ptr<WindowTheme>,,true,,com_ptr<WindowTheme>,-1
653866,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,com_ptr<XamlMetaDataProvider>,,<includes>,com_ptr<XamlMetaDataProvider>,,true,,com_ptr<XamlMetaDataProvider>,-1
653867,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CascadiaSettings>,,<includes>,com_ptr<implementation.CascadiaSettings>,,true,,CascadiaSettings>,-1
653868,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Profile>,,<includes>,com_ptr<implementation.Profile>,,true,,Profile>,-1
653869,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TerminalSettings>,,<includes>,com_ptr<implementation.TerminalSettings>,,true,,TerminalSettings>,-1
653870,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Profile>,,<includes>,com_ptr<winrt.Microsoft.Terminal.Settings.Model.implementation.Profile>,,true,,Profile>,-1
653871,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TerminalPage>,,<includes>,com_ptr<winrt.TerminalApp.implementation.TerminalPage>,,true,,TerminalPage>,-1
653872,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,commandList,,<includes>,commandList,,true,,commandList,-1
653873,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,commandNumber,,<includes>,commandNumber,,true,,commandNumber,-1
653874,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,concept,,<includes>,concept,,true,,concept,-1
653875,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,conditionally_enabled_hash_trait,,<includes>,conditionally_enabled_hash_trait,,true,,conditionally_enabled_hash_trait,-1
653876,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,const bool,,<includes>,const bool,,true,,const bool,-1
653877,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,const char*,,<includes>,const char*,,true,,const char*,-1
653878,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,const wchar_t*,,<includes>,const wchar_t*,,true,,const wchar_t*,-1
653879,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,const[20],,<includes>,const[20],,true,,const[20],-1
653880,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,const[36],,<includes>,const[36],,true,,const[36],-1
653881,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,constinit,,<includes>,constinit,,true,,constinit,-1
653882,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,consumer<T>,,<includes>,consumer<T>,,true,,consumer<T>,-1
653883,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,custom_shader_ps,,<includes>,custom_shader_ps,,true,,custom_shader_ps,-1
653884,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,custom_shader_vs,,<includes>,custom_shader_vs,,true,,custom_shader_vs,-1
653885,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,data,,<includes>,data,,true,,data,-1
653886,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,decay_t<T>,,<includes>,decay_t<T>,,true,,decay_t<T>,-1
653887,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,decltype,,<includes>,decltype,,true,,decltype,-1
653888,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,decltype(Down),,<includes>,decltype(Down),,true,,decltype(Down),-1
653889,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,decltype(Left),,<includes>,decltype(Left),,true,,decltype(Left),-1
653890,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,decltype(Right),,<includes>,decltype(Right),,true,,decltype(Right),-1
653891,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,decltype(Up),,<includes>,decltype(Up),,true,,decltype(Up),-1
653892,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,decltype(arrayValue),,<includes>,decltype(arrayValue),,true,,decltype(arrayValue),-1
653893,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,decltype(m_tInit),,<includes>,decltype(m_tInit),,true,,decltype(m_tInit),-1
653894,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,decltype(mappings),,<includes>,decltype(mappings),,true,,decltype(mappings),-1
653895,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,decltype(npos),,<includes>,decltype(npos),,true,,decltype(npos),-1
653896,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,decltype(value),,<includes>,decltype(value),,true,,decltype(value),-1
653897,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wstring>,,<includes>,deque<std.wstring>,,true,,wstring>,-1
653898,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,detail,,<includes>,detail,,true,,detail,-1
653899,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,details,,<includes>,details,,true,,details,-1
653900,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,has_unique_object_representations_v<T>>,,<includes>,"details.conditionally_enabled_hash_trait<T, std.has_unique_object_representations_v<T>>",,true,,has_unique_object_representations_v<T>>,-1
653901,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,double,,<includes>,double,,true,,double,-1
653902,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,double*,,<includes>,double*,,true,,double*,-1
653903,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,dxgi,,<includes>,dxgi,,true,,dxgi,-1
653904,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"dynamic_bitset<unsigned long long,Allocator>",,<includes>,"dynamic_bitset<unsigned long long,Allocator>",,true,,"dynamic_bitset<unsigned long long,Allocator>",-1
653905,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"dynamic_bitset<unsigned long long,allocator_type>",,<includes>,"dynamic_bitset<unsigned long long,allocator_type>",,true,,"dynamic_bitset<unsigned long long,allocator_type>",-1
653906,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,endian,,<includes>,endian,,true,,endian,-1
653907,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,enumset,,<includes>,enumset,,true,,enumset,-1
653908,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,env,,<includes>,env,,true,,env,-1
653909,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,event_token,,<includes>,event_token,,true,,event_token,-1
653910,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,exe,,<includes>,exe,,true,,exe,-1
653911,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,exeName,,<includes>,exeName,,true,,exeName,-1
653912,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,exit,,<includes>,exit,,true,,exit,-1
653913,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,expected,,<includes>,expected,,true,,expected,-1
653914,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,explicit,,<includes>,explicit,,true,,explicit,-1
653915,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,extern WCHAR[],,<includes>,extern WCHAR[],,true,,extern WCHAR[],-1
653916,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,filesystem,,<includes>,filesystem,,true,,filesystem,-1
653917,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,filetime,,<includes>,filetime,,true,,filetime,-1
653918,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,fire_and_forget,,<includes>,fire_and_forget,,true,,fire_and_forget,-1
653919,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,float,,<includes>,float,,true,,float,-1
653920,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,float*,,<includes>,float*,,true,,float*,-1
653921,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,float[13][4],,<includes>,float[13][4],,true,,float[13][4],-1
653922,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,float[256],,<includes>,float[256],,true,,float[256],-1
653923,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,float[4],,<includes>,float[4],,true,,float[4],-1
653924,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,fmt,,<includes>,fmt,,true,,fmt,-1
653925,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"wstring_view, wchar_t>",,<includes>,"fmt.formatter<fmt.wstring_view, wchar_t>",,true,,"wstring_view, wchar_t>",-1
653926,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,formatter,,<includes>,formatter,,true,,formatter,-1
653927,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"hstring,wchar_t><>",,<includes>,"formatter<winrt.hstring,wchar_t><>",,true,,"hstring,wchar_t><>",-1
653928,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,friend bool,,<includes>,friend bool,,true,,friend bool,-1
653929,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,future_status,,<includes>,future_status,,true,,future_status,-1
653930,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"CFuzzArray<_Alloc,_Type1,_Type2,_Args>",,<includes>,"fuzz.CFuzzArray<_Alloc,_Type1,_Type2,_Args>",,true,,"CFuzzArray<_Alloc,_Type1,_Type2,_Args>",-1
653931,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"CFuzzArraySize<_Type1,_Type2,_Args>",,<includes>,"fuzz.CFuzzArraySize<_Type1,_Type2,_Args>",,true,,"CFuzzArraySize<_Type1,_Type2,_Args>",-1
653932,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"CFuzzFlags<_Type,_Args>",,<includes>,"fuzz.CFuzzFlags<_Type,_Args>",,true,,"CFuzzFlags<_Type,_Args>",-1
653933,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"CFuzzString<_Alloc,_Type,_Args>",,<includes>,"fuzz.CFuzzString<_Alloc,_Type,_Args>",,true,,"CFuzzString<_Alloc,_Type,_Args>",-1
653934,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"CFuzzType<_Type,_Args>",,<includes>,"fuzz.CFuzzType<_Type,_Args>",,true,,"CFuzzType<_Type,_Args>",-1
653935,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"CFuzzTypePtr<_Type,_Args>",,<includes>,"fuzz.CFuzzTypePtr<_Type,_Args>",,true,,"CFuzzTypePtr<_Type,_Args>",-1
653936,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"_fuzz_array_entry<_Type1,_Type2,_Args>",,<includes>,"fuzz._fuzz_array_entry<_Type1,_Type2,_Args>",,true,,"_fuzz_array_entry<_Type1,_Type2,_Args>",-1
653937,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"_fuzz_type_entry<_Type,_Args>",,<includes>,"fuzz._fuzz_type_entry<_Type,_Args>",,true,,"_fuzz_type_entry<_Type,_Args>",-1
653938,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"_range_fuzz_array_entry<_Type1,_Type2,_Args>",,<includes>,"fuzz._range_fuzz_array_entry<_Type1,_Type2,_Args>",,true,,"_range_fuzz_array_entry<_Type1,_Type2,_Args>",-1
653939,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"_range_fuzz_type_entry<_Type,_Args>",,<includes>,"fuzz._range_fuzz_type_entry<_Type,_Args>",,true,,"_range_fuzz_type_entry<_Type,_Args>",-1
653940,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,>,,<includes>,"gen_seq<N - 1, N - 1, Is...>",,true,,>,-1
653941,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,generation_t,,<includes>,generation_t,,true,,generation_t,-1
653942,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,generational,,<includes>,generational,,true,,generational,-1
653943,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,gsl,,<includes>,gsl,,true,,gsl,-1
653944,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,guid,,<includes>,guid,,true,,guid,-1
653945,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AtlasFontFaceEntry><>,,<includes>,hash<BackendD3D.AtlasFontFaceEntry><>,,true,,AtlasFontFaceEntry><>,-1
653946,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AtlasGlyphEntry><>,,<includes>,hash<BackendD3D.AtlasGlyphEntry><>,,true,,AtlasGlyphEntry><>,-1
653947,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,hash<u16><>,,<includes>,hash<u16><>,,true,,hash<u16><>,-1
653948,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SelectionColor><>,,<includes>,hash_trait<winrt.Microsoft.Terminal.Control.SelectionColor><>,,true,,SelectionColor><>,-1
653949,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,NewTerminalArgs><>,,<includes>,hash_trait<winrt.Microsoft.Terminal.Settings.Model.NewTerminalArgs><>,,true,,NewTerminalArgs><>,-1
653950,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,hasher,,<includes>,hasher,,true,,hasher,-1
653951,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,high_resolution_clock,,<includes>,high_resolution_clock,,true,,high_resolution_clock,-1
653952,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,hstring,,<includes>,hstring,,true,,hstring,-1
653953,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,i32r[9],,<includes>,i32r[9],,true,,i32r[9],-1
653954,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,implementation,,<includes>,implementation,,true,,implementation,-1
653955,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IMonarch>,,<includes>,"implements<DeadMonarch, winrt.Microsoft.Terminal.Remoting.IMonarch>",,true,,IMonarch>,-1
653956,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IPeasant>,,<includes>,"implements<DeadPeasant, winrt.Microsoft.Terminal.Remoting.IPeasant>",,true,,IPeasant>,-1
653957,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"implements<MockDesktopManager, IVirtualDesktopManager>",,<includes>,"implements<MockDesktopManager, IVirtualDesktopManager>",,true,,"implements<MockDesktopManager, IVirtualDesktopManager>",-1
653958,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"implements<MonarchFactory, IClassFactory>",,<includes>,"implements<MonarchFactory, IClassFactory>",,true,,"implements<MonarchFactory, IClassFactory>",-1
653959,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,inclusive_rect,,<includes>,inclusive_rect,,true,,inclusive_rect,-1
653960,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,>,,<includes>,index<Is...>,,true,,>,-1
653961,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,int,,<includes>,int,,true,,int,-1
653962,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,int (int),,<includes>,int (int),,true,,int (int),-1
653963,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,int (short int),,<includes>,int (short int),,true,,int (short int),-1
653964,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,int*,,<includes>,int*,,true,,int*,-1
653965,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,int16_t,,<includes>,int16_t,,true,,int16_t,-1
653966,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,int32_t,,<includes>,int32_t,,true,,int32_t,-1
653967,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,int64_t,,<includes>,int64_t,,true,,int64_t,-1
653968,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,latch,,<includes>,latch,,true,,latch,-1
653969,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,lineCountActual,,<includes>,lineCountActual,,true,,lineCountActual,-1
653970,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,linear_flat_set,,<includes>,linear_flat_set,,true,,linear_flat_set,-1
653971,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CoordType>,,<includes>,list<til.CoordType>,,true,,CoordType>,-1
653972,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,long,,<includes>,long,,true,,long,-1
653973,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,long int,,<includes>,long int,,true,,long int,-1
653974,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,long long unsigned,,<includes>,long long unsigned,,true,,long long unsigned,-1
653975,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,long unsigned,,<includes>,long unsigned,,true,,long unsigned,-1
653976,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,math,,<includes>,math,,true,,math,-1
653977,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,memory_resource,,<includes>,memory_resource,,true,,memory_resource,-1
653978,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,mutable bool,,<includes>,mutable bool,,true,,mutable bool,-1
653979,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,nBytes,,<includes>,nBytes,,true,,nBytes,-1
653980,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,numeric_limits,,<includes>,numeric_limits,,true,,numeric_limits,-1
653981,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,oklab,,<includes>,oklab,,true,,oklab,-1
653982,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,oneseq_dxsm_64_32,,<includes>,oneseq_dxsm_64_32,,true,,oneseq_dxsm_64_32,-1
653983,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,optional<CloseOnExitMode>,,<includes>,optional<CloseOnExitMode>,,true,,optional<CloseOnExitMode>,-1
653984,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,optional<ConvergedAlignment>,,<includes>,optional<ConvergedAlignment>,,true,,optional<ConvergedAlignment>,-1
653985,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AdjustTextMode>,,<includes>,optional<Core.AdjustTextMode>,,true,,AdjustTextMode>,-1
653986,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CursorStyle>,,<includes>,optional<Core.CursorStyle>,,true,,CursorStyle>,-1
653987,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,optional<CursorOptions>,,<includes>,optional<CursorOptions>,,true,,optional<CursorOptions>,-1
653988,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,optional<IEnvironmentVariableMap>,,<includes>,optional<IEnvironmentVariableMap>,,true,,optional<IEnvironmentVariableMap>,-1
653989,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,optional<IFontAxesMap>,,<includes>,optional<IFontAxesMap>,,true,,optional<IFontAxesMap>,-1
653990,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,optional<IFontFeatureMap>,,<includes>,optional<IFontFeatureMap>,,true,,optional<IFontFeatureMap>,-1
653991,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IKeyBindings>,,<includes>,optional<Microsoft.Terminal.Control.IKeyBindings>,,true,,IKeyBindings>,-1
653992,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ScrollbarState>,,<includes>,optional<Microsoft.Terminal.Control.ScrollbarState>,,true,,ScrollbarState>,-1
653993,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TextAntialiasingMode>,,<includes>,optional<Microsoft.Terminal.Control.TextAntialiasingMode>,,true,,TextAntialiasingMode>,-1
653994,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,AdjustTextMode>,,<includes>,optional<Microsoft.Terminal.Core.AdjustTextMode>,,true,,AdjustTextMode>,-1
653995,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CursorStyle>,,<includes>,optional<Microsoft.Terminal.Core.CursorStyle>,,true,,CursorStyle>,-1
653996,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,BellStyle>,,<includes>,optional<Model.BellStyle>,,true,,BellStyle>,-1
653997,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ColorScheme>,,<includes>,optional<Model.ColorScheme>,,true,,ColorScheme>,-1
653998,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Command>,,<includes>,optional<Model.Command>,,true,,Command>,-1
653999,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FirstWindowPreference>,,<includes>,optional<Model.FirstWindowPreference>,,true,,FirstWindowPreference>,-1
654000,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IAppearanceConfig>,,<includes>,optional<Model.IAppearanceConfig>,,true,,IAppearanceConfig>,-1
654001,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IntenseStyle>,,<includes>,optional<Model.IntenseStyle>,,true,,IntenseStyle>,-1
654002,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LaunchMode>,,<includes>,optional<Model.LaunchMode>,,true,,LaunchMode>,-1
654003,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LaunchPosition>,,<includes>,optional<Model.LaunchPosition>,,true,,LaunchPosition>,-1
654004,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,NewTabPosition>,,<includes>,optional<Model.NewTabPosition>,,true,,NewTabPosition>,-1
654005,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TabSwitcherMode>,,<includes>,optional<Model.TabSwitcherMode>,,true,,TabSwitcherMode>,-1
654006,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ThemePair>,,<includes>,optional<Model.ThemePair>,,true,,ThemePair>,-1
654007,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,WindowingMode>,,<includes>,optional<Model.WindowingMode>,,true,,WindowingMode>,-1
654008,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,interval>,,<includes>,optional<PointTree.interval>,,true,,interval>,-1
654009,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,optional<SplitDirection>,,<includes>,optional<SplitDirection>,,true,,optional<SplitDirection>,-1
654010,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,optional<T>,,<includes>,optional<T>,,true,,optional<T>,-1
654011,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FilteredCommand>,,<includes>,optional<TerminalApp.FilteredCommand>,,true,,FilteredCommand>,-1
654012,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,hstring>>,,<includes>,optional<Windows.Foundation.Collections.IVector<winrt.hstring>>,,true,,hstring>>,-1
654013,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Color>>,,<includes>,optional<Windows.Foundation.IReference<Microsoft.Terminal.Core.Color>>,,true,,Color>>,-1
654014,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,optional<bool>,,<includes>,optional<bool>,,true,,optional<bool>,-1
654015,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,optional<const TermKeyMap>,,<includes>,optional<const TermKeyMap>,,true,,optional<const TermKeyMap>,-1
654016,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,optional<double>,,<includes>,optional<double>,,true,,optional<double>,-1
654017,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,optional<float>,,<includes>,optional<float>,,true,,optional<float>,-1
654018,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,optional<guid>,,<includes>,optional<guid>,,true,,optional<guid>,-1
654019,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,optional<hstring>,,<includes>,optional<hstring>,,true,,optional<hstring>,-1
654020,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,optional<int32_t>,,<includes>,optional<int32_t>,,true,,optional<int32_t>,-1
654021,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,optional<int>,,<includes>,optional<int>,,true,,optional<int>,-1
654022,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,optional<SplitDirection>>,,<includes>,optional<std.optional<SplitDirection>>,,true,,optional<SplitDirection>>,-1
654023,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,string>,,<includes>,optional<std.string>,,true,,string>,-1
654024,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wstring>,,<includes>,optional<std.wstring>,,true,,wstring>,-1
654025,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wstring_view>,,<includes>,optional<std.wstring_view>,,true,,wstring_view>,-1
654026,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,color>,,<includes>,optional<til.color>,,true,,color>,-1
654027,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,point>,,<includes>,optional<til.point>,,true,,point>,-1
654028,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,size>,,<includes>,optional<til.size>,,true,,size>,-1
654029,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,optional<uint32_t>,,<includes>,optional<uint32_t>,,true,,optional<uint32_t>,-1
654030,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CopyFormat>,,<includes>,optional<winrt.Microsoft.Terminal.Control.CopyFormat>,,true,,CopyFormat>,-1
654031,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LaunchMode>,,<includes>,optional<winrt.Microsoft.Terminal.Settings.Model.LaunchMode>,,true,,LaunchMode>,-1
654032,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,LaunchPosition>,,<includes>,optional<winrt.Microsoft.Terminal.Settings.Model.LaunchPosition>,,true,,LaunchPosition>,-1
654033,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,TabViewWidthMode>,,<includes>,optional<winrt.Microsoft.UI.Xaml.Controls.TabViewWidthMode>,,true,,TabViewWidthMode>,-1
654034,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,NewTabMenuEntry>>,,<includes>,optional<winrt.Windows.Foundation.Collections.IVector<Model.NewTabMenuEntry>>,,true,,NewTabMenuEntry>>,-1
654035,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,hstring>>,,<includes>,optional<winrt.Windows.Foundation.Collections.IVector<winrt.hstring>>,,true,,hstring>>,-1
654036,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Color>,,<includes>,optional<winrt.Windows.UI.Color>,,true,,Color>,-1
654037,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FontWeight>,,<includes>,optional<winrt.Windows.UI.Text.FontWeight>,,true,,FontWeight>,-1
654038,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,HorizontalAlignment>,,<includes>,optional<winrt.Windows.UI.Xaml.HorizontalAlignment>,,true,,HorizontalAlignment>,-1
654039,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Stretch>,,<includes>,optional<winrt.Windows.UI.Xaml.Media.Stretch>,,true,,Stretch>,-1
654040,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VerticalAlignment>,,<includes>,optional<winrt.Windows.UI.Xaml.VerticalAlignment>,,true,,VerticalAlignment>,-1
654041,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,hstring>,,<includes>,optional<winrt.hstring>,,true,,hstring>,-1
654042,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,outT,,<includes>,outT,,true,,outT,-1
654043,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,pNext,,<includes>,pNext,,true,,pNext,-1
654044,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"pair<COLORREF,COLORREF>",,<includes>,"pair<COLORREF,COLORREF>",,true,,"pair<COLORREF,COLORREF>",-1
654045,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"pair<It,size_type>",,<includes>,"pair<It,size_type>",,true,,"pair<It,size_type>",-1
654046,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,PanePoint>,,<includes>,"pair<Pane.PanePoint,Pane.PanePoint>",,true,,PanePoint>,-1
654047,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"pair<T&,bool>",,<includes>,"pair<T&,bool>",,true,,"pair<T&,bool>",-1
654048,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"pair<float,float>",,<includes>,"pair<float,float>",,true,,"pair<float,float>",-1
654049,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"pair<int,int>",,<includes>,"pair<int,int>",,true,,"pair<int,int>",-1
654050,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"pair<producer<T>,consumer<T>>",,<includes>,"pair<producer<T>,consumer<T>>",,true,,"pair<producer<T>,consumer<T>>",-1
654051,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"pair<size_t,bool>",,<includes>,"pair<size_t,bool>",,true,,"pair<size_t,bool>",-1
654052,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"pair<size_t,size_t>",,<includes>,"pair<size_t,size_t>",,true,,"pair<size_t,size_t>",-1
654053,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,shared_ptr<Pane>>,,<includes>,"pair<std.shared_ptr<Pane>,std.shared_ptr<Pane>>",,true,,shared_ptr<Pane>>,-1
654054,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,DefaultTerminal>,,<includes>,"pair<std.vector<Model.DefaultTerminal>,Model.DefaultTerminal>",,true,,DefaultTerminal>,-1
654055,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,point>,,<includes>,"pair<til.point,til.point>",,true,,point>,-1
654056,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,pane,,<includes>,pane,,true,,pane,-1
654057,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,path,,<includes>,path,,true,,path,-1
654058,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,placeholders,,<includes>,placeholders,,true,,placeholders,-1
654059,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,pmr,,<includes>,pmr,,true,,pmr,-1
654060,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,point,,<includes>,point,,true,,point,-1
654061,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,point_span,,<includes>,point_span,,true,,point_span,-1
654062,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,producer<T>,,<includes>,producer<T>,,true,,producer<T>,-1
654063,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,property,,<includes>,property,,true,,property,-1
654064,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ptrdiff_t,,<includes>,ptrdiff_t,,true,,ptrdiff_t,-1
654065,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,range,,<includes>,range,,true,,range,-1
654066,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,range<u16>,,<includes>,range<u16>,,true,,range<u16>,-1
654067,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ranges,,<includes>,ranges,,true,,ranges,-1
654068,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,rect,,<includes>,rect,,true,,rect,-1
654069,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,rect<f32>,,<includes>,rect<f32>,,true,,rect<f32>,-1
654070,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,rect<i16>,,<includes>,rect<i16>,,true,,rect<i16>,-1
654071,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,rect<i32>,,<includes>,rect<i32>,,true,,rect<i32>,-1
654072,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,rect<u16>,,<includes>,rect<u16>,,true,,rect<u16>,-1
654073,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,rect<u32>,,<includes>,rect<u32>,,true,,rect<u32>,-1
654074,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,recursive_ticket_lock,,<includes>,recursive_ticket_lock,,true,,recursive_ticket_lock,-1
654075,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,reg,,<includes>,reg,,true,,reg,-1
654076,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,requires,,<includes>,requires,,true,,requires,-1
654077,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,rgci,,<includes>,rgci,,true,,rgci,-1
654078,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,rle_iterator,,<includes>,rle_iterator,,true,,rle_iterator,-1
654079,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,rle_pair,,<includes>,rle_pair,,true,,rle_pair,-1
654080,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"rle_pair<T,S>",,<includes>,"rle_pair<T,S>",,true,,"rle_pair<T,S>",-1
654081,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"rle_pair<value_type, size_type>",,<includes>,"rle_pair<value_type, size_type>",,true,,"rle_pair<value_type, size_type>",-1
654082,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,rle_scanner,,<includes>,rle_scanner,,true,,rle_scanner,-1
654083,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,sa,,<includes>,sa,,true,,sa,-1
654084,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,scope_guard,,<includes>,scope_guard,,true,,scope_guard,-1
654085,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,scope_guard<F>,,<includes>,scope_guard<F>,,true,,scope_guard<F>,-1
654086,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,scope_guard_helper,,<includes>,scope_guard_helper,,true,,scope_guard_helper,-1
654087,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,sentinel,,<includes>,sentinel,,true,,sentinel,-1
654088,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,shader_ps,,<includes>,shader_ps,,true,,shader_ps,-1
654089,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,shader_vs,,<includes>,shader_vs,,true,,shader_vs,-1
654090,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,shared_mutex_guard,,<includes>,shared_mutex_guard,,true,,shared_mutex_guard,-1
654091,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,shared_ptr<Pane>,,<includes>,shared_ptr<Pane>,,true,,shared_ptr<Pane>,-1
654092,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,short,,<includes>,short,,true,,short,-1
654093,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"short int (long int, short int)",,<includes>,"short int (long int, short int)",,true,,"short int (long int, short int)",-1
654094,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,short unsigned,,<includes>,short unsigned,,true,,short unsigned,-1
654095,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,size,,<includes>,size,,true,,size,-1
654096,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,size_t,,<includes>,size_t,,true,,size_t,-1
654097,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,size_t*,,<includes>,size_t*,,true,,size_t*,-1
654098,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,size_t[100],,<includes>,size_t[100],,true,,size_t[100],-1
654099,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"small_rle<TextAttribute,uint16_t,1>",,<includes>,"small_rle<TextAttribute,uint16_t,1>",,true,,"small_rle<TextAttribute,uint16_t,1>",-1
654100,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,small_vector,,<includes>,small_vector,,true,,small_vector,-1
654101,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,small_vector_const_iterator,,<includes>,small_vector_const_iterator,,true,,small_vector_const_iterator,-1
654102,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,small_vector_const_iterator<T>,,<includes>,small_vector_const_iterator<T>,,true,,small_vector_const_iterator<T>,-1
654103,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,small_vector_iterator,,<includes>,small_vector_iterator,,true,,small_vector_iterator,-1
654104,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,small_vector_iterator<T>,,<includes>,small_vector_iterator<T>,,true,,small_vector_iterator<T>,-1
654105,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,some,,<includes>,some,,true,,some,-1
654106,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"some<rect,4>",,<includes>,"some<rect,4>",,true,,"some<rect,4>",-1
654107,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,source,,<includes>,source,,true,,source,-1
654108,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,span<OutputCell>,,<includes>,span<OutputCell>,,true,,span<OutputCell>,-1
654109,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,span<T>,,<includes>,span<T>,,true,,span<T>,-1
654110,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,span<const TermKeyMap>,,<includes>,span<const TermKeyMap>,,true,,span<const TermKeyMap>,-1
654111,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,color>,,<includes>,span<const til.color>,,true,,color>,-1
654112,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,rect>,,<includes>,span<const til.rect>,,true,,rect>,-1
654113,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,span<const uint16_t>,,<includes>,span<const uint16_t>,,true,,span<const uint16_t>,-1
654114,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,com_ptr<Profile>>,,<includes>,span<const winrt.com_ptr<Profile>>,,true,,com_ptr<Profile>>,-1
654115,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Color>,,<includes>,span<winrt.Microsoft.Terminal.Core.Color>,,true,,Color>,-1
654116,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,spsc,,<includes>,spsc,,true,,spsc,-1
654117,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,starts_with,,<includes>,starts_with,,true,,starts_with,-1
654118,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,static BYTE[4],,<includes>,static BYTE[4],,true,,static BYTE[4],-1
654119,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,static PCWSTR[7],,<includes>,static PCWSTR[7],,true,,static PCWSTR[7],-1
654120,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,presorted_input_t>,,<includes>,"static_map<K, V, N, details.presorted_input_t>",,true,,presorted_input_t>,-1
654121,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,stbrp_context,,<includes>,stbrp_context,,true,,stbrp_context,-1
654122,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,std,,<includes>,std,,true,,std,-1
654123,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,enable_shared_from_this<AppHost>,,<includes>,std.enable_shared_from_this<AppHost>,,true,,enable_shared_from_this<AppHost>,-1
654124,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,enable_shared_from_this<Pane>,,<includes>,std.enable_shared_from_this<Pane>,,true,,enable_shared_from_this<Pane>,-1
654125,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,>>,,<includes>,"std.enable_shared_from_this<ThrottledFunc<leading, Args...>>",,true,,>>,-1
654126,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,enable_shared_from_this<Toast>,,<includes>,std.enable_shared_from_this<Toast>,,true,,enable_shared_from_this<Toast>,-1
654127,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,enable_shared_from_this<WindowEmperor>,,<includes>,std.enable_shared_from_this<WindowEmperor>,,true,,enable_shared_from_this<WindowEmperor>,-1
654128,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,enable_shared_from_this<WindowThread>,,<includes>,std.enable_shared_from_this<WindowThread>,,true,,enable_shared_from_this<WindowThread>,-1
654129,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,exception,,<includes>,std.exception,,true,,exception,-1
654130,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,false_type,,<includes>,std.false_type,,true,,false_type,-1
654131,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,runtime_error,,<includes>,std.runtime_error,,true,,runtime_error,-1
654132,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,true_type,,<includes>,std.true_type,,true,,true_type,-1
654133,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,steady_clock,,<includes>,steady_clock,,true,,steady_clock,-1
654134,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,string,,<includes>,string,,true,,string,-1
654135,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,string_type,,<includes>,string_type,,true,,string_type,-1
654136,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,string_view,,<includes>,string_view,,true,,string_view,-1
654137,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,struct,,<includes>,struct,,true,,struct,-1
654138,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,swapChain,,<includes>,swapChain,,true,,swapChain,-1
654139,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,system_clock,,<includes>,system_clock,,true,,system_clock,-1
654140,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,tagCPLINFO*,,<includes>,tagCPLINFO*,,true,,tagCPLINFO*,-1
654141,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,tagFACENODE*,,<includes>,tagFACENODE*,,true,,tagFACENODE*,-1
654142,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,tagNEWCPLINFOA*,,<includes>,tagNEWCPLINFOA*,,true,,tagNEWCPLINFOA*,-1
654143,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,tagNEWCPLINFOW*,,<includes>,tagNEWCPLINFOW*,,true,,tagNEWCPLINFOW*,-1
654144,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,target,,<includes>,target,,true,,target,-1
654145,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,this_thread,,<includes>,this_thread,,true,,this_thread,-1
654146,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,throttled_func,,<includes>,throttled_func,,true,,throttled_func,-1
654147,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,>,,<includes>,"throttled_func<false, Args...>",,true,,>,-1
654148,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,throttled_func<true>,,<includes>,throttled_func<true>,,true,,throttled_func<true>,-1
654149,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,throttled_func_storage <>,,<includes>,throttled_func_storage <>,,true,,throttled_func_storage <>,-1
654150,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ticket_lock,,<includes>,ticket_lock,,true,,ticket_lock,-1
654151,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,til,,<includes>,til,,true,,til,-1
654152,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CoordType,,<includes>,til.CoordType,,true,,CoordType,-1
654153,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,CoordType[2],,<includes>,til.CoordType[2],,true,,CoordType[2],-1
654154,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,rle_scanner<It>,,<includes>,til.basic_rle.rle_scanner<It>,,true,,rle_scanner<It>,-1
654155,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,size_type,,<includes>,til.basic_rle.size_type,,true,,size_type,-1
654156,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"basic_rle<T,S,Container>",,<includes>,"til.basic_rle<T,S,Container>",,true,,"basic_rle<T,S,Container>",-1
654157,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,_bitmap_const_iterator<Allocator>,,<includes>,til.details._bitmap_const_iterator<Allocator>,,true,,_bitmap_const_iterator<Allocator>,-1
654158,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,bitmap<Allocator>,,<includes>,til.details.bitmap<Allocator>,,true,,bitmap<Allocator>,-1
654159,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"conditionally_enabled_hash_trait<T,bool>",,<includes>,"til.details.conditionally_enabled_hash_trait<T,bool>",,true,,"conditionally_enabled_hash_trait<T,bool>",-1
654160,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"conditionally_enabled_hash_trait<T,false><T>",,<includes>,"til.details.conditionally_enabled_hash_trait<T,false><T>",,true,,"conditionally_enabled_hash_trait<T,false><T>",-1
654161,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,is_byte<T>,,<includes>,til.details.is_byte<T>,,true,,is_byte<T>,-1
654162,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,is_byte<char><>,,<includes>,til.details.is_byte<char><>,,true,,is_byte<char><>,-1
654163,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,byte><>,,<includes>,til.details.is_byte<std.byte><>,,true,,byte><>,-1
654164,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,is_contiguous_view<T>,,<includes>,til.details.is_contiguous_view<T>,,true,,is_contiguous_view<T>,-1
654165,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"basic_string_view<U,V>><U,V>",,<includes>,"til.details.is_contiguous_view<std.basic_string_view<U,V>><U,V>",,true,,"basic_string_view<U,V>><U,V>",-1
654166,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,size_t>,,<includes>,"til.details.is_contiguous_view<std.span<U,E>><U,std.size_t>",,true,,size_t>,-1
654167,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"rle_iterator<T,S,ParentIt>",,<includes>,"til.details.rle_iterator<T,S,ParentIt>",,true,,"rle_iterator<T,S,ParentIt>",-1
654168,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"shared_mutex_guard<T,Lock>",,<includes>,"til.details.shared_mutex_guard<T,Lock>",,true,,"shared_mutex_guard<T,Lock>",-1
654169,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,throttled_func_storage<><>,,<includes>,til.details.throttled_func_storage<><>,,true,,throttled_func_storage<><>,-1
654170,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,throttled_func_storage<Args>,,<includes>,til.details.throttled_func_storage<Args>,,true,,throttled_func_storage<Args>,-1
654171,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,view_type_oracle<T>,,<includes>,til.details.view_type_oracle<T>,,true,,view_type_oracle<T>,-1
654172,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,string><>,,<includes>,til.details.view_type_oracle<std.string><>,,true,,string><>,-1
654173,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wstring><>,,<includes>,til.details.view_type_oracle<std.wstring><>,,true,,wstring><>,-1
654174,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"enumset<T,UnderlyingType>",,<includes>,"til.enumset<T,UnderlyingType>",,true,,"enumset<T,UnderlyingType>",-1
654175,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,generational<T>,,<includes>,til.generational<T>,,true,,generational<T>,-1
654176,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,hash_trait<T>,,<includes>,til.hash_trait<T>,,true,,hash_trait<T>,-1
654177,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,hash_trait<double><>,,<includes>,til.hash_trait<double><>,,true,,hash_trait<double><>,-1
654178,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,hash_trait<float><>,,<includes>,til.hash_trait<float><>,,true,,hash_trait<float><>,-1
654179,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"basic_string<T,CharTraits,Allocator>><T,CharTraits,Allocator>",,<includes>,"til.hash_trait<std.basic_string<T,CharTraits,Allocator>><T,CharTraits,Allocator>",,true,,"basic_string<T,CharTraits,Allocator>><T,CharTraits,Allocator>",-1
654180,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"basic_string_view<T,CharTraits>><T,CharTraits>",,<includes>,"til.hash_trait<std.basic_string_view<T,CharTraits>><T,CharTraits>",,true,,"basic_string_view<T,CharTraits>><T,CharTraits>",-1
654181,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IReference<T>><T>,,<includes>,til.hash_trait<winrt.Windows.Foundation.IReference<T>><T>,,true,,IReference<T>><T>,-1
654182,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,hstring><>,,<includes>,til.hash_trait<winrt.hstring><>,,true,,hstring><>,-1
654183,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"linear_flat_set<T,size_t=2,size_t=1>",,<includes>,"til.linear_flat_set<T,size_t=2,size_t=1>",,true,,"linear_flat_set<T,size_t=2,size_t=1>",-1
654184,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"presorted_static_map<K,V,size_t>",,<includes>,"til.presorted_static_map<K,V,size_t>",,true,,"presorted_static_map<K,V,size_t>",-1
654185,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,property<T>,,<includes>,til.property<T>,,true,,property<T>,-1
654186,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,size_type,,<includes>,til.rle_pair.size_type,,true,,size_type,-1
654187,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,value_type,,<includes>,til.rle_pair.value_type,,true,,value_type,-1
654188,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"rle_pair<T,S>",,<includes>,"til.rle_pair<T,S>",,true,,"rle_pair<T,S>",-1
654189,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,shared_mutex<T>,,<includes>,til.shared_mutex<T>,,true,,shared_mutex<T>,-1
654190,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"small_vector<T,size_t>",,<includes>,"til.small_vector<T,size_t>",,true,,"small_vector<T,size_t>",-1
654191,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,pointer,,<includes>,til.small_vector_const_iterator.pointer,,true,,pointer,-1
654192,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,small_vector_const_iterator<T>,,<includes>,til.small_vector_const_iterator<T>,,true,,small_vector_const_iterator<T>,-1
654193,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,small_vector_iterator<T>,,<includes>,til.small_vector_iterator<T>,,true,,small_vector_iterator<T>,-1
654194,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"some<T,size_t>",,<includes>,"til.some<T,size_t>",,true,,"some<T,size_t>",-1
654195,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,consumer<T>,,<includes>,til.spsc.consumer<T>,,true,,consumer<T>,-1
654196,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,arc<T>,,<includes>,til.spsc.details.arc<T>,,true,,arc<T>,-1
654197,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,producer<T>,,<includes>,til.spsc.producer<T>,,true,,producer<T>,-1
654198,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"static_map<K,V,size_t,SortedInput>",,<includes>,"til.static_map<K,V,size_t,SortedInput>",,true,,"static_map<K,V,size_t,SortedInput>",-1
654199,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"throttled_func<bool,Args>",,<includes>,"til.throttled_func<bool,Args>",,true,,"throttled_func<bool,Args>",-1
654200,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,time_t,,<includes>,time_t,,true,,time_t,-1
654201,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,tuple<>,,<includes>,tuple<>,,true,,tuple<>,-1
654202,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,>,,<includes>,tuple<Args...>,,true,,>,-1
654203,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"tuple<ITerminalConnection,ITerminalConnection>",,<includes>,"tuple<ITerminalConnection,ITerminalConnection>",,true,,"tuple<ITerminalConnection,ITerminalConnection>",-1
654204,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"tuple<TextBuffer*,TextBuffer*>",,<includes>,"tuple<TextBuffer*,TextBuffer*>",,true,,"tuple<TextBuffer*,TextBuffer*>",-1
654205,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"tuple<VTInt,VTInt,VTInt>",,<includes>,"tuple<VTInt,VTInt,VTInt>",,true,,"tuple<VTInt,VTInt,VTInt>",-1
654206,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VerticalAlignment>,,<includes>,"tuple<Windows.UI.Xaml.HorizontalAlignment,Windows.UI.Xaml.VerticalAlignment>",,true,,VerticalAlignment>,-1
654207,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wstring>,,<includes>,"tuple<std.wstring,std.wstring>",,true,,wstring>,-1
654208,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ControlInteractivity>>,,<includes>,"tuple<winrt.com_ptr<Control.implementation.ControlCore>,winrt.com_ptr<Control.implementation.ControlInteractivity>>",,true,,ControlInteractivity>>,-1
654209,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,com_ptr<MockConnection>>,,<includes>,"tuple<winrt.com_ptr<MockControlSettings>,winrt.com_ptr<MockConnection>>",,true,,com_ptr<MockConnection>>,-1
654210,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,u,,<includes>,u,,true,,u,-1
654211,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,u32*,,<includes>,u32*,,true,,u32*,-1
654212,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,uint16_t,,<includes>,uint16_t,,true,,uint16_t,-1
654213,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,uint16_t*,,<includes>,uint16_t*,,true,,uint16_t*,-1
654214,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,uint32_t,,<includes>,uint32_t,,true,,uint32_t,-1
654215,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,uint32_t*,,<includes>,uint32_t*,,true,,uint32_t*,-1
654216,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,uint64_t,,<includes>,uint64_t,,true,,uint64_t,-1
654217,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,uint8_t,,<includes>,uint8_t,,true,,uint8_t,-1
654218,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,uint8_t*,,<includes>,uint8_t*,,true,,uint8_t*,-1
654219,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,uint_fast16_t,,<includes>,uint_fast16_t,,true,,uint_fast16_t,-1
654220,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,uint_fast32_t,,<includes>,uint_fast32_t,,true,,uint_fast32_t,-1
654221,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,uint_fast8_t,,<includes>,uint_fast8_t,,true,,uint_fast8_t,-1
654222,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,uninitialized_t,,<includes>,uninitialized_t,,true,,uninitialized_t,-1
654223,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,union,,<includes>,union,,true,,union,-1
654224,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,unique_hkey,,<includes>,unique_hkey,,true,,unique_hkey,-1
654225,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,recursive_ticket_lock>,,<includes>,unique_lock<til.recursive_ticket_lock>,,true,,recursive_ticket_lock>,-1
654226,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,unique_process_heap_string,,<includes>,unique_process_heap_string,,true,,unique_process_heap_string,-1
654227,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,unique_ptr<IslandWindow>,,<includes>,unique_ptr<IslandWindow>,,true,,unique_ptr<IslandWindow>,-1
654228,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,unique_ptr<TextBuffer>,,<includes>,unique_ptr<TextBuffer>,,true,,unique_ptr<TextBuffer>,-1
654229,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,unique_ptr<wchar_t[]>,,<includes>,unique_ptr<wchar_t[]>,,true,,unique_ptr<wchar_t[]>,-1
654230,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,unique_threadpool_timer,,<includes>,unique_threadpool_timer,,true,,unique_threadpool_timer,-1
654231,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"string,T>",,<includes>,"unordered_map<std.string,T>",,true,,"string,T>",-1
654232,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,unordered_set<T>,,<includes>,unordered_set<T>,,true,,unordered_set<T>,-1
654233,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,guid>,,<includes>,unordered_set<winrt.guid>,,true,,guid>,-1
654234,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,unsigned,,<includes>,unsigned,,true,,unsigned,-1
654235,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,unsigned char,,<includes>,unsigned char,,true,,unsigned char,-1
654236,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,unsigned char[16],,<includes>,unsigned char[16],,true,,unsigned char[16],-1
654237,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,unsigned char[24],,<includes>,unsigned char[24],,true,,unsigned char[24],-1
654238,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,unsigned char[25],,<includes>,unsigned char[25],,true,,unsigned char[25],-1
654239,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,unsigned char[2],,<includes>,unsigned char[2],,true,,unsigned char[2],-1
654240,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,unsigned char[3],,<includes>,unsigned char[3],,true,,unsigned char[3],-1
654241,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,unsigned char[4],,<includes>,unsigned char[4],,true,,unsigned char[4],-1
654242,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,unsigned char[6],,<includes>,unsigned char[6],,true,,unsigned char[6],-1
654243,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,unsigned char[9],,<includes>,unsigned char[9],,true,,unsigned char[9],-1
654244,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,unsigned int,,<includes>,unsigned int,,true,,unsigned int,-1
654245,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,unsigned int[100],,<includes>,unsigned int[100],,true,,unsigned int[100],-1
654246,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,unsigned int[58],,<includes>,unsigned int[58],,true,,unsigned int[58],-1
654247,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,unsigned long,,<includes>,unsigned long,,true,,unsigned long,-1
654248,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,unsigned long long,,<includes>,unsigned long long,,true,,unsigned long long,-1
654249,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,unsigned longint,,<includes>,unsigned longint,,true,,unsigned longint,-1
654250,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,unsigned longlongint,,<includes>,unsigned longlongint,,true,,unsigned longlongint,-1
654251,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,unsigned short,,<includes>,unsigned short,,true,,unsigned short,-1
654252,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,unsigned shortint,,<includes>,unsigned shortint,,true,,unsigned shortint,-1
654253,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,unsigned shortint[3],,<includes>,unsigned shortint[3],,true,,unsigned shortint[3],-1
654254,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,utf16_iterator,,<includes>,utf16_iterator,,true,,utf16_iterator,-1
654255,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,va_list,,<includes>,va_list,,true,,va_list,-1
654256,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,value_type &,,<includes>,value_type &,,true,,value_type &,-1
654257,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,value_type*,,<includes>,value_type*,,true,,value_type*,-1
654258,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,>,,<includes>,"variadic.gen_seq<0,Is...><int...>",,true,,>,-1
654259,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,>,,<includes>,"variadic.gen_seq<int,int...>",,true,,>,-1
654260,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,>,,<includes>,variadic.index<int...>,,true,,>,-1
654261,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,vars,,<includes>,vars,,true,,vars,-1
654262,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,vec2,,<includes>,vec2,,true,,vec2,-1
654263,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,vec2<T>,,<includes>,vec2<T>,,true,,vec2<T>,-1
654264,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,vec2<f32>,,<includes>,vec2<f32>,,true,,vec2<f32>,-1
654265,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,vec2<i16>,,<includes>,vec2<i16>,,true,,vec2<i16>,-1
654266,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,vec2<i32>,,<includes>,vec2<i32>,,true,,vec2<i32>,-1
654267,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,vec2<u16>,,<includes>,vec2<u16>,,true,,vec2<u16>,-1
654268,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,vec2<u32>,,<includes>,vec2<u32>,,true,,vec2<u32>,-1
654269,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,vec2<u8>,,<includes>,vec2<u8>,,true,,vec2<u8>,-1
654270,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,vec4,,<includes>,vec4,,true,,vec4,-1
654271,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,vec4<f32>,,<includes>,vec4<f32>,,true,,vec4<f32>,-1
654272,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,vec4<i16>,,<includes>,vec4<i16>,,true,,vec4<i16>,-1
654273,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,vec4<i32>,,<includes>,vec4<i32>,,true,,vec4<i32>,-1
654274,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,vec4<u32>,,<includes>,vec4<u32>,,true,,vec4<u32>,-1
654275,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,vector<ActionAndArgs>,,<includes>,vector<ActionAndArgs>,,true,,vector<ActionAndArgs>,-1
654276,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,vector<BYTE>,,<includes>,vector<BYTE>,,true,,vector<BYTE>,-1
654277,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,vector<CHAR_INFO>,,<includes>,vector<CHAR_INFO>,,true,,vector<CHAR_INFO>,-1
654278,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,vector<Commandline>,,<includes>,vector<Commandline>,,true,,vector<Commandline>,-1
654279,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,KeyChord>,,<includes>,vector<Control.KeyChord>,,true,,KeyChord>,-1
654280,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,vector<DWORD>,,<includes>,vector<DWORD>,,true,,vector<DWORD>,-1
654281,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,vector<DWRITE_FONT_AXIS_VALUE>,,<includes>,vector<DWRITE_FONT_AXIS_VALUE>,,true,,vector<DWRITE_FONT_AXIS_VALUE>,-1
654282,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,vector<DWRITE_FONT_FEATURE>,,<includes>,vector<DWRITE_FONT_FEATURE>,,true,,vector<DWRITE_FONT_FEATURE>,-1
654283,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,RenderOverlay>,,<includes>,vector<Microsoft.Console.Render.RenderOverlay>,,true,,RenderOverlay>,-1
654284,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Viewport>,,<includes>,vector<Microsoft.Console.Types.Viewport>,,true,,Viewport>,-1
654285,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,Command>,,<includes>,vector<Model.Command>,,true,,Command>,-1
654286,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,vector<OutputCell>,,<includes>,vector<OutputCell>,,true,,vector<OutputCell>,-1
654287,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,vector<PowerShellInstance>,,<includes>,vector<PowerShellInstance>,,true,,vector<PowerShellInstance>,-1
654288,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,vector<RenderOverlay>,,<includes>,vector<RenderOverlay>,,true,,vector<RenderOverlay>,-1
654289,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,vector<ScrollMark>,,<includes>,vector<ScrollMark>,,true,,vector<ScrollMark>,-1
654290,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,vector<SettingsLoadWarnings>,,<includes>,vector<SettingsLoadWarnings>,,true,,vector<SettingsLoadWarnings>,-1
654291,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,vector<T>,,<includes>,vector<T>,,true,,vector<T>,-1
654292,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,vector<Viewport>,,<includes>,vector<Viewport>,,true,,vector<Viewport>,-1
654293,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,VsSetupInstance>,,<includes>,vector<VsSetupConfiguration.VsSetupInstance>,,true,,VsSetupInstance>,-1
654294,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,vector<WORD>,,<includes>,vector<WORD>,,true,,vector<WORD>,-1
654295,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,MenuFlyoutItemBase>,,<includes>,vector<WUX.Controls.MenuFlyoutItemBase>,,true,,MenuFlyoutItemBase>,-1
654296,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,vector<com_ptr<T>>,,<includes>,vector<com_ptr<T>>,,true,,vector<com_ptr<T>>,-1
654297,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,vector<size_t>,,<includes>,vector<size_t>,,true,,vector<size_t>,-1
654298,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,string>,,<includes>,vector<std.string>,,true,,string>,-1
654299,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wstring>,,<includes>,vector<std.wstring>,,true,,wstring>,-1
654300,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wstring_view>,,<includes>,vector<std.wstring_view>,,true,,wstring_view>,-1
654301,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,inclusive_rect>,,<includes>,vector<til.inclusive_rect>,,true,,inclusive_rect>,-1
654302,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,point_span>,,<includes>,vector<til.point_span>,,true,,point_span>,-1
654303,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,rect>,,<includes>,vector<til.rect>,,true,,rect>,-1
654304,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,vector<uint16_t>,,<includes>,vector<uint16_t>,,true,,vector<uint16_t>,-1
654305,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,com_ptr<T>>,,<includes>,vector<wil.com_ptr<T>>,,true,,com_ptr<T>>,-1
654306,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,SettingsLoadWarnings>,,<includes>,vector<winrt.Microsoft.Terminal.Settings.Model.SettingsLoadWarnings>,,true,,SettingsLoadWarnings>,-1
654307,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FilteredCommand>,,<includes>,vector<winrt.TerminalApp.FilteredCommand>,,true,,FilteredCommand>,-1
654308,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,virtual,,<includes>,virtual,,true,,virtual,-1
654309,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,void,,<includes>,void,,true,,void,-1
654310,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,void (),,<includes>,void (),,true,,void (),-1
654311,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,void (bool),,<includes>,void (bool),,true,,void (bool),-1
654312,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"void (bool, double)",,<includes>,"void (bool, double)",,true,,"void (bool, double)",-1
654313,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,void(*)(),,<includes>,void(*)(),,true,,void(*)(),-1
654314,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,void(void(*)()),,<includes>,void(void(*)()),,true,,void(void(*)()),-1
654315,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,void*,,<includes>,void*,,true,,void*,-1
654316,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,void**,,<includes>,void**,,true,,void**,-1
654317,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t,,<includes>,wchar_t,,true,,wchar_t,-1
654318,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t*,,<includes>,wchar_t*,,true,,wchar_t*,-1
654319,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t**,,<includes>,wchar_t**,,true,,wchar_t**,-1
654320,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[100],,<includes>,wchar_t[100],,true,,wchar_t[100],-1
654321,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[101],,<includes>,wchar_t[101],,true,,wchar_t[101],-1
654322,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[1028],,<includes>,wchar_t[1028],,true,,wchar_t[1028],-1
654323,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[102],,<includes>,wchar_t[102],,true,,wchar_t[102],-1
654324,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[1030],,<includes>,wchar_t[1030],,true,,wchar_t[1030],-1
654325,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[103],,<includes>,wchar_t[103],,true,,wchar_t[103],-1
654326,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[104],,<includes>,wchar_t[104],,true,,wchar_t[104],-1
654327,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[105],,<includes>,wchar_t[105],,true,,wchar_t[105],-1
654328,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[106],,<includes>,wchar_t[106],,true,,wchar_t[106],-1
654329,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[107],,<includes>,wchar_t[107],,true,,wchar_t[107],-1
654330,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[108],,<includes>,wchar_t[108],,true,,wchar_t[108],-1
654331,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[109],,<includes>,wchar_t[109],,true,,wchar_t[109],-1
654332,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[10],,<includes>,wchar_t[10],,true,,wchar_t[10],-1
654333,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[110],,<includes>,wchar_t[110],,true,,wchar_t[110],-1
654334,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[111],,<includes>,wchar_t[111],,true,,wchar_t[111],-1
654335,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[112],,<includes>,wchar_t[112],,true,,wchar_t[112],-1
654336,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[1139],,<includes>,wchar_t[1139],,true,,wchar_t[1139],-1
654337,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[113],,<includes>,wchar_t[113],,true,,wchar_t[113],-1
654338,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[114],,<includes>,wchar_t[114],,true,,wchar_t[114],-1
654339,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[117],,<includes>,wchar_t[117],,true,,wchar_t[117],-1
654340,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[118],,<includes>,wchar_t[118],,true,,wchar_t[118],-1
654341,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[119],,<includes>,wchar_t[119],,true,,wchar_t[119],-1
654342,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[11],,<includes>,wchar_t[11],,true,,wchar_t[11],-1
654343,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[120],,<includes>,wchar_t[120],,true,,wchar_t[120],-1
654344,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[121],,<includes>,wchar_t[121],,true,,wchar_t[121],-1
654345,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[122],,<includes>,wchar_t[122],,true,,wchar_t[122],-1
654346,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[123],,<includes>,wchar_t[123],,true,,wchar_t[123],-1
654347,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[124],,<includes>,wchar_t[124],,true,,wchar_t[124],-1
654348,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[125],,<includes>,wchar_t[125],,true,,wchar_t[125],-1
654349,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[127],,<includes>,wchar_t[127],,true,,wchar_t[127],-1
654350,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[12],,<includes>,wchar_t[12],,true,,wchar_t[12],-1
654351,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[130],,<includes>,wchar_t[130],,true,,wchar_t[130],-1
654352,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[131],,<includes>,wchar_t[131],,true,,wchar_t[131],-1
654353,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[1321],,<includes>,wchar_t[1321],,true,,wchar_t[1321],-1
654354,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[132],,<includes>,wchar_t[132],,true,,wchar_t[132],-1
654355,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[1336],,<includes>,wchar_t[1336],,true,,wchar_t[1336],-1
654356,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[133],,<includes>,wchar_t[133],,true,,wchar_t[133],-1
654357,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[134],,<includes>,wchar_t[134],,true,,wchar_t[134],-1
654358,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[135],,<includes>,wchar_t[135],,true,,wchar_t[135],-1
654359,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[136],,<includes>,wchar_t[136],,true,,wchar_t[136],-1
654360,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[137],,<includes>,wchar_t[137],,true,,wchar_t[137],-1
654361,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[138],,<includes>,wchar_t[138],,true,,wchar_t[138],-1
654362,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[139],,<includes>,wchar_t[139],,true,,wchar_t[139],-1
654363,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[13],,<includes>,wchar_t[13],,true,,wchar_t[13],-1
654364,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[140],,<includes>,wchar_t[140],,true,,wchar_t[140],-1
654365,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[141],,<includes>,wchar_t[141],,true,,wchar_t[141],-1
654366,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[142],,<includes>,wchar_t[142],,true,,wchar_t[142],-1
654367,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[143],,<includes>,wchar_t[143],,true,,wchar_t[143],-1
654368,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[147],,<includes>,wchar_t[147],,true,,wchar_t[147],-1
654369,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[149],,<includes>,wchar_t[149],,true,,wchar_t[149],-1
654370,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[14],,<includes>,wchar_t[14],,true,,wchar_t[14],-1
654371,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[151],,<includes>,wchar_t[151],,true,,wchar_t[151],-1
654372,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[1528],,<includes>,wchar_t[1528],,true,,wchar_t[1528],-1
654373,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[1558],,<includes>,wchar_t[1558],,true,,wchar_t[1558],-1
654374,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[156],,<includes>,wchar_t[156],,true,,wchar_t[156],-1
654375,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[158],,<includes>,wchar_t[158],,true,,wchar_t[158],-1
654376,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[159],,<includes>,wchar_t[159],,true,,wchar_t[159],-1
654377,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[15],,<includes>,wchar_t[15],,true,,wchar_t[15],-1
654378,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[162],,<includes>,wchar_t[162],,true,,wchar_t[162],-1
654379,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[166],,<includes>,wchar_t[166],,true,,wchar_t[166],-1
654380,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[16],,<includes>,wchar_t[16],,true,,wchar_t[16],-1
654381,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[17],,<includes>,wchar_t[17],,true,,wchar_t[17],-1
654382,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[1819],,<includes>,wchar_t[1819],,true,,wchar_t[1819],-1
654383,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[182],,<includes>,wchar_t[182],,true,,wchar_t[182],-1
654384,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[184],,<includes>,wchar_t[184],,true,,wchar_t[184],-1
654385,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[189],,<includes>,wchar_t[189],,true,,wchar_t[189],-1
654386,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[18],,<includes>,wchar_t[18],,true,,wchar_t[18],-1
654387,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[190],,<includes>,wchar_t[190],,true,,wchar_t[190],-1
654388,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[19],,<includes>,wchar_t[19],,true,,wchar_t[19],-1
654389,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[1],,<includes>,wchar_t[1],,true,,wchar_t[1],-1
654390,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[204],,<includes>,wchar_t[204],,true,,wchar_t[204],-1
654391,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[206],,<includes>,wchar_t[206],,true,,wchar_t[206],-1
654392,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[20],,<includes>,wchar_t[20],,true,,wchar_t[20],-1
654393,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[214],,<includes>,wchar_t[214],,true,,wchar_t[214],-1
654394,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[215],,<includes>,wchar_t[215],,true,,wchar_t[215],-1
654395,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[216],,<includes>,wchar_t[216],,true,,wchar_t[216],-1
654396,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[21],,<includes>,wchar_t[21],,true,,wchar_t[21],-1
654397,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[220],,<includes>,wchar_t[220],,true,,wchar_t[220],-1
654398,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[223],,<includes>,wchar_t[223],,true,,wchar_t[223],-1
654399,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[224],,<includes>,wchar_t[224],,true,,wchar_t[224],-1
654400,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[22],,<includes>,wchar_t[22],,true,,wchar_t[22],-1
654401,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[231],,<includes>,wchar_t[231],,true,,wchar_t[231],-1
654402,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[236],,<includes>,wchar_t[236],,true,,wchar_t[236],-1
654403,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[238],,<includes>,wchar_t[238],,true,,wchar_t[238],-1
654404,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[23],,<includes>,wchar_t[23],,true,,wchar_t[23],-1
654405,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[246],,<includes>,wchar_t[246],,true,,wchar_t[246],-1
654406,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[247],,<includes>,wchar_t[247],,true,,wchar_t[247],-1
654407,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[24],,<includes>,wchar_t[24],,true,,wchar_t[24],-1
654408,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[252],,<includes>,wchar_t[252],,true,,wchar_t[252],-1
654409,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[256],,<includes>,wchar_t[256],,true,,wchar_t[256],-1
654410,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[25],,<includes>,wchar_t[25],,true,,wchar_t[25],-1
654411,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[26],,<includes>,wchar_t[26],,true,,wchar_t[26],-1
654412,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[27],,<includes>,wchar_t[27],,true,,wchar_t[27],-1
654413,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[28],,<includes>,wchar_t[28],,true,,wchar_t[28],-1
654414,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[295],,<includes>,wchar_t[295],,true,,wchar_t[295],-1
654415,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[29],,<includes>,wchar_t[29],,true,,wchar_t[29],-1
654416,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[2],,<includes>,wchar_t[2],,true,,wchar_t[2],-1
654417,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[305],,<includes>,wchar_t[305],,true,,wchar_t[305],-1
654418,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[30],,<includes>,wchar_t[30],,true,,wchar_t[30],-1
654419,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[319],,<includes>,wchar_t[319],,true,,wchar_t[319],-1
654420,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[31],,<includes>,wchar_t[31],,true,,wchar_t[31],-1
654421,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[320],,<includes>,wchar_t[320],,true,,wchar_t[320],-1
654422,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[32],,<includes>,wchar_t[32],,true,,wchar_t[32],-1
654423,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[33],,<includes>,wchar_t[33],,true,,wchar_t[33],-1
654424,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[34],,<includes>,wchar_t[34],,true,,wchar_t[34],-1
654425,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[35],,<includes>,wchar_t[35],,true,,wchar_t[35],-1
654426,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[36],,<includes>,wchar_t[36],,true,,wchar_t[36],-1
654427,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[3762],,<includes>,wchar_t[3762],,true,,wchar_t[3762],-1
654428,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[37],,<includes>,wchar_t[37],,true,,wchar_t[37],-1
654429,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[3843],,<includes>,wchar_t[3843],,true,,wchar_t[3843],-1
654430,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[384],,<includes>,wchar_t[384],,true,,wchar_t[384],-1
654431,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[38],,<includes>,wchar_t[38],,true,,wchar_t[38],-1
654432,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[39],,<includes>,wchar_t[39],,true,,wchar_t[39],-1
654433,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[3],,<includes>,wchar_t[3],,true,,wchar_t[3],-1
654434,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[40],,<includes>,wchar_t[40],,true,,wchar_t[40],-1
654435,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[41],,<includes>,wchar_t[41],,true,,wchar_t[41],-1
654436,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[42],,<includes>,wchar_t[42],,true,,wchar_t[42],-1
654437,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[43],,<includes>,wchar_t[43],,true,,wchar_t[43],-1
654438,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[44],,<includes>,wchar_t[44],,true,,wchar_t[44],-1
654439,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[45],,<includes>,wchar_t[45],,true,,wchar_t[45],-1
654440,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[46],,<includes>,wchar_t[46],,true,,wchar_t[46],-1
654441,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[47],,<includes>,wchar_t[47],,true,,wchar_t[47],-1
654442,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[48],,<includes>,wchar_t[48],,true,,wchar_t[48],-1
654443,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[49],,<includes>,wchar_t[49],,true,,wchar_t[49],-1
654444,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[4],,<includes>,wchar_t[4],,true,,wchar_t[4],-1
654445,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[504],,<includes>,wchar_t[504],,true,,wchar_t[504],-1
654446,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[50],,<includes>,wchar_t[50],,true,,wchar_t[50],-1
654447,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[51],,<includes>,wchar_t[51],,true,,wchar_t[51],-1
654448,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[52],,<includes>,wchar_t[52],,true,,wchar_t[52],-1
654449,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[53],,<includes>,wchar_t[53],,true,,wchar_t[53],-1
654450,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[54],,<includes>,wchar_t[54],,true,,wchar_t[54],-1
654451,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[55],,<includes>,wchar_t[55],,true,,wchar_t[55],-1
654452,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[56],,<includes>,wchar_t[56],,true,,wchar_t[56],-1
654453,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[57],,<includes>,wchar_t[57],,true,,wchar_t[57],-1
654454,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[58],,<includes>,wchar_t[58],,true,,wchar_t[58],-1
654455,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[59],,<includes>,wchar_t[59],,true,,wchar_t[59],-1
654456,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[5],,<includes>,wchar_t[5],,true,,wchar_t[5],-1
654457,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[60],,<includes>,wchar_t[60],,true,,wchar_t[60],-1
654458,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[61],,<includes>,wchar_t[61],,true,,wchar_t[61],-1
654459,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[62],,<includes>,wchar_t[62],,true,,wchar_t[62],-1
654460,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[63],,<includes>,wchar_t[63],,true,,wchar_t[63],-1
654461,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[64],,<includes>,wchar_t[64],,true,,wchar_t[64],-1
654462,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[65],,<includes>,wchar_t[65],,true,,wchar_t[65],-1
654463,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[66],,<includes>,wchar_t[66],,true,,wchar_t[66],-1
654464,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[67],,<includes>,wchar_t[67],,true,,wchar_t[67],-1
654465,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[68],,<includes>,wchar_t[68],,true,,wchar_t[68],-1
654466,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[69],,<includes>,wchar_t[69],,true,,wchar_t[69],-1
654467,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[6],,<includes>,wchar_t[6],,true,,wchar_t[6],-1
654468,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[70],,<includes>,wchar_t[70],,true,,wchar_t[70],-1
654469,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[71],,<includes>,wchar_t[71],,true,,wchar_t[71],-1
654470,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[72],,<includes>,wchar_t[72],,true,,wchar_t[72],-1
654471,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[73],,<includes>,wchar_t[73],,true,,wchar_t[73],-1
654472,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[742],,<includes>,wchar_t[742],,true,,wchar_t[742],-1
654473,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[74],,<includes>,wchar_t[74],,true,,wchar_t[74],-1
654474,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[75],,<includes>,wchar_t[75],,true,,wchar_t[75],-1
654475,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[76],,<includes>,wchar_t[76],,true,,wchar_t[76],-1
654476,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[77],,<includes>,wchar_t[77],,true,,wchar_t[77],-1
654477,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[78],,<includes>,wchar_t[78],,true,,wchar_t[78],-1
654478,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[79],,<includes>,wchar_t[79],,true,,wchar_t[79],-1
654479,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[7],,<includes>,wchar_t[7],,true,,wchar_t[7],-1
654480,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[80],,<includes>,wchar_t[80],,true,,wchar_t[80],-1
654481,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[81],,<includes>,wchar_t[81],,true,,wchar_t[81],-1
654482,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[82],,<includes>,wchar_t[82],,true,,wchar_t[82],-1
654483,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[83],,<includes>,wchar_t[83],,true,,wchar_t[83],-1
654484,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[84],,<includes>,wchar_t[84],,true,,wchar_t[84],-1
654485,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[85],,<includes>,wchar_t[85],,true,,wchar_t[85],-1
654486,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[86],,<includes>,wchar_t[86],,true,,wchar_t[86],-1
654487,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[87],,<includes>,wchar_t[87],,true,,wchar_t[87],-1
654488,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[88],,<includes>,wchar_t[88],,true,,wchar_t[88],-1
654489,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[89],,<includes>,wchar_t[89],,true,,wchar_t[89],-1
654490,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[8],,<includes>,wchar_t[8],,true,,wchar_t[8],-1
654491,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[90],,<includes>,wchar_t[90],,true,,wchar_t[90],-1
654492,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[91],,<includes>,wchar_t[91],,true,,wchar_t[91],-1
654493,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[92],,<includes>,wchar_t[92],,true,,wchar_t[92],-1
654494,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[93],,<includes>,wchar_t[93],,true,,wchar_t[93],-1
654495,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[94],,<includes>,wchar_t[94],,true,,wchar_t[94],-1
654496,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[95],,<includes>,wchar_t[95],,true,,wchar_t[95],-1
654497,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[964],,<includes>,wchar_t[964],,true,,wchar_t[964],-1
654498,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[96],,<includes>,wchar_t[96],,true,,wchar_t[96],-1
654499,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[97],,<includes>,wchar_t[97],,true,,wchar_t[97],-1
654500,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[98],,<includes>,wchar_t[98],,true,,wchar_t[98],-1
654501,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[99],,<includes>,wchar_t[99],,true,,wchar_t[99],-1
654502,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[9],,<includes>,wchar_t[9],,true,,wchar_t[9],-1
654503,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[LF_FACESIZE],,<includes>,wchar_t[LF_FACESIZE],,true,,wchar_t[LF_FACESIZE],-1
654504,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[],,<includes>,wchar_t[],,true,,wchar_t[],-1
654505,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wchar_t[]*,,<includes>,wchar_t[]*,,true,,wchar_t[]*,-1
654506,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,weak_ref<TerminalTab>,,<includes>,weak_ref<TerminalTab>,,true,,weak_ref<TerminalTab>,-1
654507,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wil,,<includes>,wil,,true,,wil,-1
654508,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ResultException,,<includes>,wil.ResultException,,true,,ResultException,-1
654509,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wil_env,,<includes>,wil_env,,true,,wil_env,-1
654510,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,winrt,,<includes>,winrt,,true,,winrt,-1
654511,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,EnumEntryComparator<T>,,<includes>,winrt.Microsoft.Terminal.Settings.Editor.implementation.EnumEntryComparator<T>,,true,,EnumEntryComparator<T>,-1
654512,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,EnumEntryReverseComparator<T>,,<includes>,winrt.Microsoft.Terminal.Settings.Editor.implementation.EnumEntryReverseComparator<T>,,true,,EnumEntryReverseComparator<T>,-1
654513,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,BitmapIconSource<TIconSource>,,<includes>,winrt.Microsoft.Terminal.Settings.Model.implementation.BitmapIconSource<TIconSource>,,true,,BitmapIconSource<TIconSource>,-1
654514,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IconSource><>,,<includes>,winrt.Microsoft.Terminal.Settings.Model.implementation.BitmapIconSource<winrt.Microsoft.UI.Xaml.Controls.IconSource><>,,true,,IconSource><>,-1
654515,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IconSource><>,,<includes>,winrt.Microsoft.Terminal.Settings.Model.implementation.BitmapIconSource<winrt.Windows.UI.Xaml.Controls.IconSource><>,,true,,IconSource><>,-1
654516,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,FontIconSource<TIconSource>,,<includes>,winrt.Microsoft.Terminal.Settings.Model.implementation.FontIconSource<TIconSource>,,true,,FontIconSource<TIconSource>,-1
654517,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IconSource><>,,<includes>,winrt.Microsoft.Terminal.Settings.Model.implementation.FontIconSource<winrt.Microsoft.UI.Xaml.Controls.IconSource><>,,true,,IconSource><>,-1
654518,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IconSource><>,,<includes>,winrt.Microsoft.Terminal.Settings.Model.implementation.FontIconSource<winrt.Windows.UI.Xaml.Controls.IconSource><>,,true,,IconSource><>,-1
654519,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IInheritable<T>,,<includes>,winrt.Microsoft.Terminal.Settings.Model.implementation.IInheritable<T>,,true,,IInheritable<T>,-1
654520,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ConnectionStateHolder<T>,,<includes>,winrt.Microsoft.Terminal.TerminalConnection.implementation.ConnectionStateHolder<T>,,true,,ConnectionStateHolder<T>,-1
654521,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"App_baseWithProvider<D,I>",,<includes>,"winrt.TerminalApp.implementation.App_baseWithProvider<D,I>",,true,,"App_baseWithProvider<D,I>",-1
654522,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IReference<T>,,<includes>,winrt.Windows.Foundation.IReference<T>,,true,,IReference<T>,-1
654523,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,hstring[8],,<includes>,winrt.hstring[8],,true,,hstring[8],-1
654524,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IControlAppearance>,,<includes>,"winrt.implements<ControlAppearance, Microsoft.Terminal.Core.ICoreAppearance, Microsoft.Terminal.Control.IControlAppearance>",,true,,IControlAppearance>,-1
654525,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ICoreAppearance>,,<includes>,"winrt.implements<ControlSettings, Microsoft.Terminal.Control.IControlSettings, Microsoft.Terminal.Control.IControlAppearance, Microsoft.Terminal.Core.ICoreSettings, Microsoft.Terminal.Core.ICoreAppearance>",,true,,ICoreAppearance>,-1
654526,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"implements<DebugInputTapConnection, ITerminalConnection>",,<includes>,"winrt.implements<DebugInputTapConnection, ITerminalConnection>",,true,,"implements<DebugInputTapConnection, ITerminalConnection>",-1
654527,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ITerminalConnection>,,<includes>,"winrt.implements<DebugTapConnection, winrt.Microsoft.Terminal.TerminalConnection.ITerminalConnection>",,true,,ITerminalConnection>,-1
654528,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"implements<LanguageProfileNotifier, ITfInputProcessorProfileActivationSink>",,<includes>,"winrt.implements<LanguageProfileNotifier, ITfInputProcessorProfileActivationSink>",,true,,"implements<LanguageProfileNotifier, ITfInputProcessorProfileActivationSink>",-1
654529,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ITerminalConnection>,,<includes>,"winrt.implements<MockConnection, winrt.Microsoft.Terminal.TerminalConnection.ITerminalConnection>",,true,,ITerminalConnection>,-1
654530,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IControlAppearance>,,<includes>,"winrt.implements<MockControlSettings, winrt.Microsoft.Terminal.Core.ICoreSettings, winrt.Microsoft.Terminal.Control.IControlSettings, winrt.Microsoft.Terminal.Core.ICoreAppearance, winrt.Microsoft.Terminal.Control.IControlAppearance>",,true,,IControlAppearance>,-1
654531,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,"implements<MockTermSettings, ICoreSettings, ICoreAppearance>",,<includes>,"winrt.implements<MockTermSettings, ICoreSettings, ICoreAppearance>",,true,,"implements<MockTermSettings, ICoreSettings, ICoreAppearance>",-1
654532,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,IClassFactory>,,<includes>,"winrt.implements<MonarchFactory, .IClassFactory>",,true,,IClassFactory>,-1
654533,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ITerminalConnection>,,<includes>,"winrt.implements<PreviewConnection, winrt.Microsoft.Terminal.TerminalConnection.ITerminalConnection>",,true,,ITerminalConnection>,-1
654534,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,ITextRangeProvider>,,<includes>,"winrt.implements<XamlUiaTextRange, Windows.UI.Xaml.Automation.Provider.ITextRangeProvider>",,true,,ITextRangeProvider>,-1
654535,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wstring,,<includes>,wstring,,true,,wstring,-1
654536,TYPE_DECL,,<includes>:<global>,NAMESPACE_BLOCK,wstring_view,,<includes>,wstring_view,,true,,wstring_view,-1
