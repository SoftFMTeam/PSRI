,Id,Name,NodeType,Fullname,Signature,Filename,Code,LineNumber,LineNumberEnd,ColumnNumber,ColumnNumberEnd,LineOfCode,NumberOfOperators,SetOfOperators,NumberOfOperands,SetOfOperands,FanIn,FanOut,McCabe,AccCyc,ConCf,ConDf,ConZc,ConRf,ConVal,Parma,ParmaIn,ParmaOut,RetType
0,311304,add_asymmetric_quantize_inputs,1,opencv_tflite.LSTMOptionsBuilder.add_asymmetric_quantize_inputs,void opencv_tflite.LSTMOptionsBuilder.add_asymmetric_quantize_inputs (bool),misc\tflite\schema_generated.hpp,"void add_asymmetric_quantize_inputs(bool asymmetric_quantize_inputs) {
    fbb_.AddElement<uint8_t>(LSTMOptions::VT_ASYMMETRIC_QUANTIZE_INPUTS, static_cast<uint8_t>(asymmetric_quantize_inputs), 0);
  }",4272.0,4274.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
1,360459,get_axis_size,1,cv.dnn.cuda4dnn.csl.TensorSpan.get_axis_size,size_type cv.dnn.cuda4dnn.csl.TensorSpan.get_axis_size (int),src\cuda4dnn\csl\tensor.hpp,"size_type get_axis_size(int axis) const noexcept {
            axis = clamp_axis(axis, rank());
            CV_Assert(axis >= 0 && axis < rank());
            return shape[axis];
        }",506.0,510.0,9.0,9.0,5.0,5,5,6,2,0,1,1,1,0,0,,0,1,2,1,1,size_type
2,16408,_InternalParse,1,opencv_caffe.FillerParameter._InternalParse,"const char* opencv_caffe.FillerParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* FillerParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string type = 1 [default = ""constant""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, ""opencv_caffe.FillerParameter.type"");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float value = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)...",7217.0,7325.0,1.0,10.0,109.0,94,14,102,19,0,14,24,34,1,7,,0,8,4,2,2,const char*
3,311324,LSTMOptionsBuilder,1,opencv_tflite.LSTMOptionsBuilder.LSTMOptionsBuilder,ANY opencv_tflite.LSTMOptionsBuilder.LSTMOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit LSTMOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",4275.0,4278.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
4,360481,size_range,1,cv.dnn.cuda4dnn.csl.TensorSpan.size_range,"size_type cv.dnn.cuda4dnn.csl.TensorSpan.size_range (size_type,size_type)",src\cuda4dnn\csl\tensor.hpp,"size_type size_range(size_type axis_start, size_type axis_end) const noexcept {
            CV_Assert(!empty());
            CV_Assert(axis_start <= axis_end);
            CV_Assert(axis_end <= rank());
            auto start = std::begin(shape) + axis_start;
            auto end = std::begin(shape) + axis_end;
            return std::accumulate(start, end, 1, std::multiplies<size_type>());
        }",526.0,533.0,9.0,9.0,8.0,11,5,15,6,0,2,1,1,0,0,,0,2,4,2,2,size_type
5,311335,Finish,1,opencv_tflite.LSTMOptionsBuilder.Finish,Offset<LSTMOptions> opencv_tflite.LSTMOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<LSTMOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LSTMOptions>(end);
    return o;
  }",4279.0,4283.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<LSTMOptions>
6,98356,_InternalParse,1,opencv_caffe.V0LayerParameter._InternalParse,"const char* opencv_caffe.V0LayerParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* V0LayerParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, ""opencv_caffe.V0LayerParameter.name"");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = :...",31136.0,31539.0,1.0,10.0,404.0,363,16,388,38,0,53,93,151,1,1,,0,53,4,2,2,const char*
7,245826,GetCachedSize,1,opencv_onnx.TensorProto_Segment.GetCachedSize,int opencv_onnx.TensorProto_Segment.GetCachedSize (),misc\onnx\opencv-onnx.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },2056.0,2056.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
8,376910,do_nms_sort,1,cv.dnn.cuda4dnn.RegionOp.do_nms_sort,"void cv.dnn.cuda4dnn.RegionOp.do_nms_sort (float*,int,float,float)",src\cuda4dnn\primitives\region.hpp,"void do_nms_sort(float *detections, int total, float score_thresh, float nms_thresh)
        {
            std::vector<Rect2d> boxes(total);
            std::vector<float> scores(total);

            for (int i = 0; i < total; ++i)
            {
                Rect2d &b = boxes[i];
                int box_index = i * (classes + 4 + 1);
                b.width = detections[box_index + 2];
                b.height = detections[box_index + 3];
                b.x = detections[box_index + 0] - b.width / 2;
                b.y = detections[box_index + 1] - b.height / 2;
            }

            std::vector<int> indices;
            for (int k = 0; k < classes; ++k)
            {
                for (int i = 0; i < total; ++i)
                {
                    int box_index = i * (classes + 4 + 1);
                    int class_index = box_index + 5;
                    scores[i] = detections[class_index + k];
                    detections[class_index + k] = 0;
                }
 ...",135.0,168.0,9.0,9.0,34.0,66,9,68,16,0,4,5,7,1,0,,0,4,8,4,4,void
9,114767,GetCachedSize,1,opencv_caffe.NormalizeBBoxParameter.GetCachedSize,int opencv_caffe.NormalizeBBoxParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },1979.0,1979.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
10,360530,shape_as_vector,1,cv.dnn.cuda4dnn.csl.TensorSpan.shape_as_vector,vector<size_type> cv.dnn.cuda4dnn.csl.TensorSpan.shape_as_vector (),src\cuda4dnn\csl\tensor.hpp,"std::vector<size_type> shape_as_vector() const {
            CV_Assert(!empty());
            return std::vector<size_type>(std::begin(shape), std::end(shape));
        }",542.0,545.0,9.0,9.0,4.0,8,6,6,3,0,2,1,1,0,0,,0,2,0,0,0,vector<size_type>
11,131156,GetCachedSize,1,opencv_caffe.ConvolutionParameter.GetCachedSize,int opencv_caffe.ConvolutionParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },8768.0,8768.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
12,278612,descriptor,1,opencv_tensorflow.GraphDef.descriptor,Descriptor opencv_tensorflow.GraphDef.descriptor (),misc\tensorflow\graph.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",113.0,115.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
13,426072,SliceLayerImpl,1,cv.dnn.SliceLayerImpl.SliceLayerImpl,ANY cv.dnn.SliceLayerImpl.SliceLayerImpl (LayerParams),src\layers\slice_layer.cpp,"SliceLayerImpl(const LayerParams& params)
    {
        setParamsFrom(params);
        hasSteps = false;
        axis = params.get<int>(""axis"", 1);
        num_split = params.get<int>(""num_split"", 0);
        hasDynamicShapes = params.get<bool>(""has_dynamic_shapes"", false);
        shapesInitialized = !hasDynamicShapes;

        if (params.has(""slice_point""))
        {
            CV_Assert(!params.has(""begin"") && !params.has(""size"") && !params.has(""end""));
            const DictValue &indicesValue = params.get(""slice_point"");
            int size = axis > 0 ? axis + 1 : 1;
            sliceRanges.resize(indicesValue.size() + 1,
                               std::vector<Range>(size, Range::all()));
            int prevSlice = 0;
            for (int i = 0; i < indicesValue.size(); ++i)
            {
                sliceRanges[i][size - 1].start = prevSlice;
                sliceRanges[i][size - 1].end = indicesValue.get<int>(i);
                prevSlice = sliceRanges[i][size - 1]...",148.0,223.0,5.0,5.0,76.0,58,12,45,13,0,4,3,4,0,0,,0,4,2,1,1,ANY
14,278618,GetDescriptor,1,opencv_tensorflow.GraphDef.GetDescriptor,Descriptor opencv_tensorflow.GraphDef.GetDescriptor (),misc\tensorflow\graph.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",116.0,118.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
15,147550,descriptor,1,opencv_caffe.ScaleParameter.descriptor,Descriptor opencv_caffe.ScaleParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",15730.0,15732.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
16,147556,GetDescriptor,1,opencv_caffe.ScaleParameter.GetDescriptor,Descriptor opencv_caffe.ScaleParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",15733.0,15735.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
17,278629,GetReflection,1,opencv_tensorflow.GraphDef.GetReflection,Reflection opencv_tensorflow.GraphDef.GetReflection (),misc\tensorflow\graph.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",119.0,121.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
18,360556,get,1,cv.dnn.cuda4dnn.csl.TensorSpan.get,pointer cv.dnn.cuda4dnn.csl.TensorSpan.get (),src\cuda4dnn\csl\tensor.hpp,pointer get() const noexcept { return ptr; },548.0,548.0,9.0,52.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,pointer
19,311405,fbb_,3,opencv_tflite.UnidirectionalSequenceLSTMOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
20,311406,start_,3,opencv_tflite.UnidirectionalSequenceLSTMOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
21,82031,ByteSizeLong,1,opencv_caffe.ScaleParameter.ByteSizeLong,size_t opencv_caffe.ScaleParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t ScaleParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.ScaleParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .opencv_caffe.FillerParameter filler = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *filler_);
    }

    // optional .opencv_caffe.FillerParameter bias_filler = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bias_filler_);
    }

    // optional bool bias_term = 4 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 axis = 1 [default = 1];
    if (cached...",26404.0,26445.0,1.0,1.0,42.0,36,10,32,9,0,4,7,12,0,0,,0,4,0,0,0,size_t
22,278640,default_instance,1,opencv_tensorflow.GraphDef.default_instance,GraphDef opencv_tensorflow.GraphDef.default_instance (),misc\tensorflow\graph.pb.hpp,"static const GraphDef& default_instance() {
    return *internal_default_instance();
  }",122.0,124.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,GraphDef
23,147567,GetReflection,1,opencv_caffe.ScaleParameter.GetReflection,Reflection opencv_caffe.ScaleParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",15736.0,15738.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
24,360562,clear,1,cv.dnn.cuda4dnn.csl.TensorSpan.clear,void cv.dnn.cuda4dnn.csl.TensorSpan.clear (),src\cuda4dnn\csl\tensor.hpp,"void clear() noexcept {
            CV_Assert(!empty());
            ptr = nullptr;
            shape.clear();
        }",557.0,561.0,9.0,9.0,5.0,3,3,2,2,0,2,1,1,0,0,,0,2,0,0,0,void
25,311407,add_fused_activation_function,1,opencv_tflite.UnidirectionalSequenceLSTMOptionsBuilder.add_fused_activation_function,void opencv_tflite.UnidirectionalSequenceLSTMOptionsBuilder.add_fused_activation_function (ANY),misc\tflite\schema_generated.hpp,"void add_fused_activation_function(opencv_tflite::ActivationFunctionType fused_activation_function) {
    fbb_.AddElement<int8_t>(UnidirectionalSequenceLSTMOptions::VT_FUSED_ACTIVATION_FUNCTION, static_cast<int8_t>(fused_activation_function), 0);
  }",4346.0,4348.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
26,278647,internal_default_instance,1,opencv_tensorflow.GraphDef.internal_default_instance,GraphDef opencv_tensorflow.GraphDef.internal_default_instance (),misc\tensorflow\graph.pb.hpp,"static inline const GraphDef* internal_default_instance() {
    return reinterpret_cast<const GraphDef*>(
               &_GraphDef_default_instance_);
  }",125.0,128.0,3.0,3.0,4.0,2,2,1,1,3,0,1,1,0,0,,0,0,0,0,0,GraphDef
27,147578,default_instance,1,opencv_caffe.ScaleParameter.default_instance,ScaleParameter opencv_caffe.ScaleParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const ScaleParameter& default_instance() {
    return *internal_default_instance();
  }",15739.0,15741.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,ScaleParameter
28,262271,InternalSwap,1,opencv_tensorflow.AttrValue.InternalSwap,void opencv_tensorflow.AttrValue.InternalSwap (AttrValue*),misc\tensorflow\attr_value.pb.cc,"void AttrValue::InternalSwap(AttrValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}",1217.0,1222.0,1.0,1.0,6.0,7,4,6,4,0,4,1,1,0,0,,0,4,2,1,1,void
29,360576,reshape,1,cv.dnn.cuda4dnn.csl.TensorSpan.reshape,"type cv.dnn.cuda4dnn.csl.TensorSpan.reshape<ForwardItr> (ForwardItr,ForwardItr)",src\cuda4dnn\csl\tensor.hpp,"void reshape(Sizes... new_sizes_) {
            static_assert(sizeof...(Sizes) <= CSL_MAX_TENSOR_RANK, ""unsupported tensor rank"");
            static_assert(sizeof...(Sizes) > 0, ""no sizes provided"");
            std::array<std::int64_t, sizeof...(Sizes)> new_sizes = { static_cast<std::int64_t>(new_sizes_)... };
            reshape(std::begin(new_sizes), std::end(new_sizes));
        }",629.0,634.0,9.0,46.0,6.0,33,8,48,9,0,5,6,7,0,0,,0,5,2,1,1,void
30,147585,internal_default_instance,1,opencv_caffe.ScaleParameter.internal_default_instance,ScaleParameter opencv_caffe.ScaleParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const ScaleParameter* internal_default_instance() {
    return reinterpret_cast<const ScaleParameter*>(
               &_ScaleParameter_default_instance_);
  }",15742.0,15745.0,3.0,3.0,4.0,2,2,1,1,3,0,1,1,0,0,,0,0,0,0,0,ScaleParameter
31,311427,add_cell_clip,1,opencv_tflite.UnidirectionalSequenceLSTMOptionsBuilder.add_cell_clip,void opencv_tflite.UnidirectionalSequenceLSTMOptionsBuilder.add_cell_clip (float),misc\tflite\schema_generated.hpp,"void add_cell_clip(float cell_clip) {
    fbb_.AddElement<float>(UnidirectionalSequenceLSTMOptions::VT_CELL_CLIP, cell_clip, 0.0f);
  }",4349.0,4351.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
32,311441,add_proj_clip,1,opencv_tflite.UnidirectionalSequenceLSTMOptionsBuilder.add_proj_clip,void opencv_tflite.UnidirectionalSequenceLSTMOptionsBuilder.add_proj_clip (float),misc\tflite\schema_generated.hpp,"void add_proj_clip(float proj_clip) {
    fbb_.AddElement<float>(UnidirectionalSequenceLSTMOptions::VT_PROJ_CLIP, proj_clip, 0.0f);
  }",4352.0,4354.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
33,65683,_InternalSerialize,1,opencv_caffe.ImageDataParameter._InternalSerialize,"uint8_t opencv_caffe.ImageDataParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* ImageDataParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.ImageDataParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      ""opencv_caffe.ImageDataParameter.source"");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_source(), target);
  }

  // optional float scale = 2 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal...",21377.0,21474.0,1.0,1.0,98.0,132,8,127,10,0,1,14,14,0,0,,0,1,4,2,2,uint8_t
34,262298,GetMetadata,1,opencv_tensorflow.AttrValue.GetMetadata,Metadata opencv_tensorflow.AttrValue.GetMetadata (),misc\tensorflow\attr_value.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata AttrValue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_attr_5fvalue_2eproto_getter, &descriptor_table_attr_5fvalue_2eproto_once,
      file_level_metadata_attr_5fvalue_2eproto[1]);
}",1224.0,1228.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
35,311455,add_time_major,1,opencv_tflite.UnidirectionalSequenceLSTMOptionsBuilder.add_time_major,void opencv_tflite.UnidirectionalSequenceLSTMOptionsBuilder.add_time_major (bool),misc\tflite\schema_generated.hpp,"void add_time_major(bool time_major) {
    fbb_.AddElement<uint8_t>(UnidirectionalSequenceLSTMOptions::VT_TIME_MAJOR, static_cast<uint8_t>(time_major), 0);
  }",4355.0,4357.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
36,311475,add_asymmetric_quantize_inputs,1,opencv_tflite.UnidirectionalSequenceLSTMOptionsBuilder.add_asymmetric_quantize_inputs,void opencv_tflite.UnidirectionalSequenceLSTMOptionsBuilder.add_asymmetric_quantize_inputs (bool),misc\tflite\schema_generated.hpp,"void add_asymmetric_quantize_inputs(bool asymmetric_quantize_inputs) {
    fbb_.AddElement<uint8_t>(UnidirectionalSequenceLSTMOptions::VT_ASYMMETRIC_QUANTIZE_INPUTS, static_cast<uint8_t>(asymmetric_quantize_inputs), 0);
  }",4358.0,4360.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
37,185,arrayInt,1,cv.dnn.DictValue.arrayInt,"DictValue cv.dnn.DictValue.arrayInt<TypeIter> (TypeIter,int)",include\opencv2\dnn\dnn.inl.hpp,"DictValue DictValue::arrayInt(TypeIter begin, int size)
{
    DictValue res(Param::INT, new AutoBuffer<int64, 1>(size));
    for (int j = 0; j < size; begin++, j++)
        (*res.pi)[j] = *begin;
    return res;
}",52.0,58.0,1.0,1.0,7.0,4,4,7,5,3,0,2,2,0,0,,0,0,4,2,2,DictValue
38,262332,GetMetadata,1,opencv_tensorflow.NameAttrList_AttrEntry_DoNotUse.GetMetadata,Metadata opencv_tensorflow.NameAttrList_AttrEntry_DoNotUse.GetMetadata (),misc\tensorflow\attr_value.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata NameAttrList_AttrEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_attr_5fvalue_2eproto_getter, &descriptor_table_attr_5fvalue_2eproto_once,
      file_level_metadata_attr_5fvalue_2eproto[2]);
}",1238.0,1242.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
39,311495,add_diagonal_recurrent_tensors,1,opencv_tflite.UnidirectionalSequenceLSTMOptionsBuilder.add_diagonal_recurrent_tensors,void opencv_tflite.UnidirectionalSequenceLSTMOptionsBuilder.add_diagonal_recurrent_tensors (bool),misc\tflite\schema_generated.hpp,"void add_diagonal_recurrent_tensors(bool diagonal_recurrent_tensors) {
    fbb_.AddElement<uint8_t>(UnidirectionalSequenceLSTMOptions::VT_DIAGONAL_RECURRENT_TENSORS, static_cast<uint8_t>(diagonal_recurrent_tensors), 0);
  }",4361.0,4363.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
40,245962,_has_bits_,3,opencv_onnx.TensorProto_Segment._has_bits_,,misc\onnx\opencv-onnx.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
41,245963,_cached_size_,3,opencv_onnx.TensorProto_Segment._cached_size_,,misc\onnx\opencv-onnx.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
42,245964,begin_,3,opencv_onnx.TensorProto_Segment.begin_,,misc\onnx\opencv-onnx.pb.hpp,begin_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
43,245965,end_,3,opencv_onnx.TensorProto_Segment.end_,,misc\onnx\opencv-onnx.pb.hpp,end_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
44,311515,UnidirectionalSequenceLSTMOptionsBuilder,1,opencv_tflite.UnidirectionalSequenceLSTMOptionsBuilder.UnidirectionalSequenceLSTMOptionsBuilder,ANY opencv_tflite.UnidirectionalSequenceLSTMOptionsBuilder.UnidirectionalSequenceLSTMOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit UnidirectionalSequenceLSTMOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",4364.0,4367.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
45,344284,val_,3,opencv_test.Conv1DParamID.val_,,perf\perf_convolution1d.cpp,val_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
46,344290,operator int,1,opencv_test.Conv1DParamID.operator int,ANY opencv_test.Conv1DParamID.operator int (),perf\perf_convolution1d.cpp,operator int() const { return val_; },37.0,37.0,5.0,41.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,ANY
47,311526,Finish,1,opencv_tflite.UnidirectionalSequenceLSTMOptionsBuilder.Finish,Offset<UnidirectionalSequenceLSTMOptions> opencv_tflite.UnidirectionalSequenceLSTMOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<UnidirectionalSequenceLSTMOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UnidirectionalSequenceLSTMOptions>(end);
    return o;
  }",4368.0,4372.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<UnidirectionalSequenceLSTMOptions>
48,442605,useFirstAvailable,1,cv.dnn.ocl4dnn.OCL4DNNConvSpatial<float>.useFirstAvailable,"void cv.dnn.ocl4dnn.OCL4DNNConvSpatial<float>.useFirstAvailable<> (UMat,UMat,UMat,UMat,int32_t,UMat)",src\ocl4dnn\src\ocl4dnn_conv_spatial.cpp,"void OCL4DNNConvSpatial<float>::useFirstAvailable(const UMat &bottom,
                                                  UMat &top,
                                                  const UMat &weight,
                                                  const UMat &bias,
                                                  int32_t numImages,
                                                  UMat &verifyTop)
{
    std::vector< cv::Ptr<tunerParam> > tunerItems;
    generateTunerItems(tunerItems);
    tunerItems.push_back(makePtr<tunerParam>(KERNEL_TYPE_BASIC, 1, 1, 1));

    for (int i = 0; i < tunerItems.size(); i++)
    {
        if (createConvolutionKernel(tunerItems[i]->kernelType,
                                    tunerItems[i]->blockWidth,
                                    tunerItems[i]->blockHeight,
                                    tunerItems[i]->blockDepth))
        {
            CV_Assert(!kernelQueue.empty());  // basic kernel must be available
            int kernelIdx = k...",1571.0,1631.0,1.0,1.0,61.0,64,14,71,27,0,2,12,32,0,0,,0,2,12,6,6,void
49,278772,GetCachedSize,1,opencv_tensorflow.GraphDef.GetCachedSize,int opencv_tensorflow.GraphDef.GetCachedSize (),misc\tensorflow\graph.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },173.0,173.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
50,147710,GetCachedSize,1,opencv_caffe.ScaleParameter.GetCachedSize,int opencv_caffe.ScaleParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },15790.0,15790.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
51,82181,MergeFrom,1,opencv_caffe.ScaleParameter.MergeFrom,void opencv_caffe.ScaleParameter.MergeFrom (ScaleParameter),misc\caffe\opencv-caffe.pb.cc,"void ScaleParameter::MergeFrom(const ScaleParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.ScaleParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_filler()->::opencv_caffe::FillerParameter::MergeFrom(from._internal_filler());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_bias_filler()->::opencv_caffe::FillerParameter::MergeFrom(from._internal_bias_filler());
    }
    if (cached_has_bits & 0x00000004u) {
      bias_term_ = from.bias_term_;
    }
    if (cached_has_bits & 0x00000008u) {
      axis_ = from.axis_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_axes_ = from.num_axes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._interna...",26460.0,26486.0,1.0,1.0,27.0,28,9,24,8,1,10,7,12,0,2,,0,8,2,1,1,void
52,262419,SharedCtor,1,opencv_tensorflow.NameAttrList.SharedCtor,void opencv_tensorflow.NameAttrList.SharedCtor (),misc\tensorflow\attr_value.pb.cc,"inline void NameAttrList::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}",1275.0,1280.0,1.0,1.0,6.0,4,2,3,3,0,1,1,1,0,0,,0,1,0,0,0,void
53,377116,stream,3,cv.dnn.cuda4dnn.RegionOp.stream,,src\cuda4dnn\primitives\region.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
54,377117,biasTensor,3,cv.dnn.cuda4dnn.RegionOp.biasTensor,,src\cuda4dnn\primitives\region.hpp,biasTensor,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
55,377118,classes,3,cv.dnn.cuda4dnn.RegionOp.classes,,src\cuda4dnn\primitives\region.hpp,classes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
56,377119,boxes_per_cell,3,cv.dnn.cuda4dnn.RegionOp.boxes_per_cell,,src\cuda4dnn\primitives\region.hpp,boxes_per_cell,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
57,377120,width_norm,3,cv.dnn.cuda4dnn.RegionOp.width_norm,,src\cuda4dnn\primitives\region.hpp,width_norm,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
58,377121,height_norm,3,cv.dnn.cuda4dnn.RegionOp.height_norm,,src\cuda4dnn\primitives\region.hpp,height_norm,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
59,377122,scale_x_y,3,cv.dnn.cuda4dnn.RegionOp.scale_x_y,,src\cuda4dnn\primitives\region.hpp,scale_x_y,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
60,377123,squash_type,3,cv.dnn.cuda4dnn.RegionOp.squash_type,,src\cuda4dnn\primitives\region.hpp,squash_type,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
61,377124,object_prob_cutoff,3,cv.dnn.cuda4dnn.RegionOp.object_prob_cutoff,,src\cuda4dnn\primitives\region.hpp,object_prob_cutoff,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
62,377125,class_prob_cutoff,3,cv.dnn.cuda4dnn.RegionOp.class_prob_cutoff,,src\cuda4dnn\primitives\region.hpp,class_prob_cutoff,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
63,377126,nms_iou_threshold,3,cv.dnn.cuda4dnn.RegionOp.nms_iou_threshold,,src\cuda4dnn\primitives\region.hpp,nms_iou_threshold,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
64,377127,new_coords,3,cv.dnn.cuda4dnn.RegionOp.new_coords,,src\cuda4dnn\primitives\region.hpp,new_coords,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
65,114987,_has_bits_,3,opencv_caffe.NormalizeBBoxParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
66,114988,_cached_size_,3,opencv_caffe.NormalizeBBoxParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
67,114989,scale_filler_,3,opencv_caffe.NormalizeBBoxParameter.scale_filler_,,misc\caffe\opencv-caffe.pb.hpp,* scale_filler_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
68,114990,across_spatial_,3,opencv_caffe.NormalizeBBoxParameter.across_spatial_,,misc\caffe\opencv-caffe.pb.hpp,across_spatial_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
69,114991,channel_shared_,3,opencv_caffe.NormalizeBBoxParameter.channel_shared_,,misc\caffe\opencv-caffe.pb.hpp,channel_shared_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
70,114992,eps_,3,opencv_caffe.NormalizeBBoxParameter.eps_,,misc\caffe\opencv-caffe.pb.hpp,eps_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
71,262449,SharedDtor,1,opencv_tensorflow.NameAttrList.SharedDtor,void opencv_tensorflow.NameAttrList.SharedDtor (),misc\tensorflow\attr_value.pb.cc,"inline void NameAttrList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}",1289.0,1292.0,1.0,1.0,4.0,5,3,3,3,0,1,1,1,0,0,,0,1,0,0,0,void
72,311602,fbb_,3,opencv_tflite.BidirectionalSequenceLSTMOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
73,311603,start_,3,opencv_tflite.BidirectionalSequenceLSTMOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
74,311604,add_fused_activation_function,1,opencv_tflite.BidirectionalSequenceLSTMOptionsBuilder.add_fused_activation_function,void opencv_tflite.BidirectionalSequenceLSTMOptionsBuilder.add_fused_activation_function (ANY),misc\tflite\schema_generated.hpp,"void add_fused_activation_function(opencv_tflite::ActivationFunctionType fused_activation_function) {
    fbb_.AddElement<int8_t>(BidirectionalSequenceLSTMOptions::VT_FUSED_ACTIVATION_FUNCTION, static_cast<int8_t>(fused_activation_function), 0);
  }",4437.0,4439.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
75,33076,SetCachedSize,1,opencv_caffe.LayerParameter.SetCachedSize,void opencv_caffe.LayerParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void LayerParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",11788.0,11790.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
76,246071,descriptor,1,opencv_onnx.TensorProto.descriptor,Descriptor opencv_onnx.TensorProto.descriptor (),misc\onnx\opencv-onnx.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",2169.0,2171.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
77,246077,GetDescriptor,1,opencv_onnx.TensorProto.GetDescriptor,Descriptor opencv_onnx.TensorProto.GetDescriptor (),misc\onnx\opencv-onnx.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",2172.0,2174.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
78,33086,Clear,1,opencv_caffe.LayerParameter.Clear,void opencv_caffe.LayerParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void LayerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.LayerParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bottom_.Clear();
  top_.Clear();
  loss_weight_.Clear();
  param_.Clear();
  blobs_.Clear();
  include_.Clear();
  exclude_.Clear();
  propagate_down_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(transform_param_ != nullptr);
      transform_param_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(loss_param_ != nullptr);
      loss_param_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(accuracy_param_ != nullptr);
      accuracy_par...",11792.0,12047.0,1.0,1.0,256.0,190,7,190,68,0,122,64,120,0,0,,0,122,0,0,0,void
79,377156,forward,1,cv.dnn.cuda4dnn.ReorgOp.forward,"void cv.dnn.cuda4dnn.ReorgOp.forward (ANY,ANY,ANY)",src\cuda4dnn\primitives\reorg.hpp,"void forward(
            const std::vector<cv::Ptr<BackendWrapper>>& inputs,
            const std::vector<cv::Ptr<BackendWrapper>>& outputs,
            csl::Workspace& workspace) override
        {
            CV_Assert(inputs.size() == 1 && outputs.size() == 1);

            auto input_wrapper = inputs[0].dynamicCast<wrapper_type>();
            auto input = input_wrapper->getView();

            auto output_wrapper = outputs[0].dynamicCast<wrapper_type>();
            auto output = output_wrapper->getSpan();

            const std::size_t permute_input_shape[] = {
               input.get_axis_size(0),
               input.get_axis_size(1) * input.get_axis_size(2) / (stride * stride),
               stride,
               input.get_axis_size(3),
               stride
            };

            constexpr std::size_t order[] = { 0, 2, 4, 1, 3 };

            const std::size_t permute_output_shape[] = {
                permute_input_shape[order[0]],
                permute_input_...",28.0,66.0,9.0,9.0,39.0,50,9,51,13,0,5,1,1,0,0,,0,5,6,3,3,void
80,262468,ArenaDtor,1,opencv_tensorflow.NameAttrList.ArenaDtor,void opencv_tensorflow.NameAttrList.ArenaDtor (void*),misc\tensorflow\attr_value.pb.cc,"void NameAttrList::ArenaDtor(void* object) {
  NameAttrList* _this = reinterpret_cast< NameAttrList* >(object);
  (void)_this;
  _this->attr_. ~MapField();
}",1294.0,1298.0,1.0,1.0,5.0,5,4,4,2,0,1,1,1,0,0,,0,1,2,1,1,void
81,246088,GetReflection,1,opencv_onnx.TensorProto.GetReflection,Reflection opencv_onnx.TensorProto.GetReflection (),misc\onnx\opencv-onnx.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",2175.0,2177.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
82,311624,add_cell_clip,1,opencv_tflite.BidirectionalSequenceLSTMOptionsBuilder.add_cell_clip,void opencv_tflite.BidirectionalSequenceLSTMOptionsBuilder.add_cell_clip (float),misc\tflite\schema_generated.hpp,"void add_cell_clip(float cell_clip) {
    fbb_.AddElement<float>(BidirectionalSequenceLSTMOptions::VT_CELL_CLIP, cell_clip, 0.0f);
  }",4440.0,4442.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
83,246099,default_instance,1,opencv_onnx.TensorProto.default_instance,TensorProto opencv_onnx.TensorProto.default_instance (),misc\onnx\opencv-onnx.pb.hpp,"static const TensorProto& default_instance() {
    return *internal_default_instance();
  }",2178.0,2180.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,TensorProto
84,311638,add_proj_clip,1,opencv_tflite.BidirectionalSequenceLSTMOptionsBuilder.add_proj_clip,void opencv_tflite.BidirectionalSequenceLSTMOptionsBuilder.add_proj_clip (float),misc\tflite\schema_generated.hpp,"void add_proj_clip(float proj_clip) {
    fbb_.AddElement<float>(BidirectionalSequenceLSTMOptions::VT_PROJ_CLIP, proj_clip, 0.0f);
  }",4443.0,4445.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
85,246106,internal_default_instance,1,opencv_onnx.TensorProto.internal_default_instance,TensorProto opencv_onnx.TensorProto.internal_default_instance (),misc\onnx\opencv-onnx.pb.hpp,"static inline const TensorProto* internal_default_instance() {
    return reinterpret_cast<const TensorProto*>(
               &_TensorProto_default_instance_);
  }",2181.0,2184.0,3.0,3.0,4.0,2,2,1,1,2,0,1,1,0,0,,0,0,0,0,0,TensorProto
86,311652,add_merge_outputs,1,opencv_tflite.BidirectionalSequenceLSTMOptionsBuilder.add_merge_outputs,void opencv_tflite.BidirectionalSequenceLSTMOptionsBuilder.add_merge_outputs (bool),misc\tflite\schema_generated.hpp,"void add_merge_outputs(bool merge_outputs) {
    fbb_.AddElement<uint8_t>(BidirectionalSequenceLSTMOptions::VT_MERGE_OUTPUTS, static_cast<uint8_t>(merge_outputs), 0);
  }",4446.0,4448.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
87,262507,SetCachedSize,1,opencv_tensorflow.NameAttrList.SetCachedSize,void opencv_tensorflow.NameAttrList.SetCachedSize (int),misc\tensorflow\attr_value.pb.cc,"void NameAttrList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",1304.0,1306.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
88,262517,Clear,1,opencv_tensorflow.NameAttrList.Clear,void opencv_tensorflow.NameAttrList.Clear (),misc\tensorflow\attr_value.pb.cc,"void NameAttrList::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_tensorflow.NameAttrList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attr_.Clear();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",1308.0,1317.0,1.0,1.0,10.0,5,3,5,4,0,2,1,1,0,0,,0,2,0,0,0,void
89,311672,add_time_major,1,opencv_tflite.BidirectionalSequenceLSTMOptionsBuilder.add_time_major,void opencv_tflite.BidirectionalSequenceLSTMOptionsBuilder.add_time_major (bool),misc\tflite\schema_generated.hpp,"void add_time_major(bool time_major) {
    fbb_.AddElement<uint8_t>(BidirectionalSequenceLSTMOptions::VT_TIME_MAJOR, static_cast<uint8_t>(time_major), 1);
  }",4449.0,4451.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
90,360827,squeeze,1,cv.dnn.cuda4dnn.csl.TensorSpan.squeeze,void cv.dnn.cuda4dnn.csl.TensorSpan.squeeze (),src\cuda4dnn\csl\tensor.hpp,"void squeeze(int axis) {
            CV_Assert(!empty());
            CV_Assert(rank() >= 2);
            axis = clamp_axis(axis, rank());
            CV_Assert(axis >= 0 && axis < rank());
            shape.erase(std::begin(shape) + axis);
        }",680.0,686.0,9.0,9.0,7.0,9,5,10,3,0,4,1,1,0,0,,0,4,2,1,1,void
91,82302,InternalSwap,1,opencv_caffe.ScaleParameter.InternalSwap,void opencv_caffe.ScaleParameter.InternalSwap (ScaleParameter*),misc\caffe\opencv-caffe.pb.cc,"void ScaleParameter::InternalSwap(ScaleParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScaleParameter, bias_term_)
      + sizeof(ScaleParameter::bias_term_)
      - PROTOBUF_FIELD_OFFSET(ScaleParameter, filler_)>(
          reinterpret_cast<char*>(&filler_),
          reinterpret_cast<char*>(&other->filler_));
  swap(axis_, other->axis_);
  swap(num_axes_, other->num_axes_);
}",26499.0,26511.0,1.0,1.0,13.0,23,12,17,10,0,11,1,1,0,0,,0,11,2,1,1,void
92,295303,MergeFrom,1,opencv_tensorflow.TensorProto.MergeFrom,void opencv_tensorflow.TensorProto.MergeFrom (TensorProto),misc\tensorflow\tensor.pb.cc,"void TensorProto::MergeFrom(const TensorProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_tensorflow.TensorProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  float_val_.MergeFrom(from.float_val_);
  double_val_.MergeFrom(from.double_val_);
  int_val_.MergeFrom(from.int_val_);
  string_val_.MergeFrom(from.string_val_);
  scomplex_val_.MergeFrom(from.scomplex_val_);
  int64_val_.MergeFrom(from.int64_val_);
  bool_val_.MergeFrom(from.bool_val_);
  dcomplex_val_.MergeFrom(from.dcomplex_val_);
  half_val_.MergeFrom(from.half_val_);
  if (!from._internal_tensor_content().empty()) {
    _internal_set_tensor_content(from._internal_tensor_content());
  }
  if (from._internal_has_tensor_shape()) {
    _internal_mutable_tensor_shape()->::opencv_tensorflow::TensorShapeProto::MergeFrom(from._internal_tensor_shape());
  }
  if (from._internal_dtype() != 0) {
    _internal_set_dtype(from._internal_dtype());
  }
  if ...",668.0,696.0,1.0,1.0,29.0,39,9,32,13,1,19,5,5,0,1,,0,18,2,1,1,void
93,311692,add_asymmetric_quantize_inputs,1,opencv_tflite.BidirectionalSequenceLSTMOptionsBuilder.add_asymmetric_quantize_inputs,void opencv_tflite.BidirectionalSequenceLSTMOptionsBuilder.add_asymmetric_quantize_inputs (bool),misc\tflite\schema_generated.hpp,"void add_asymmetric_quantize_inputs(bool asymmetric_quantize_inputs) {
    fbb_.AddElement<uint8_t>(BidirectionalSequenceLSTMOptions::VT_ASYMMETRIC_QUANTIZE_INPUTS, static_cast<uint8_t>(asymmetric_quantize_inputs), 0);
  }",4452.0,4454.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
94,262540,_InternalParse,1,opencv_tensorflow.NameAttrList._InternalParse,"const char* opencv_tensorflow.NameAttrList._InternalParse (char*,ANY*)",misc\tensorflow\attr_value.pb.cc,"const char* NameAttrList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, ""opencv_tensorflow.NameAttrList.name""));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .opencv_tensorflow.AttrValue> attr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&attr...",1319.0,1369.0,1.0,10.0,51.0,43,15,49,9,0,1,14,21,0,0,,0,1,4,2,2,const char*
95,115098,descriptor,1,opencv_caffe.PriorBoxParameter.descriptor,Descriptor opencv_caffe.PriorBoxParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",2127.0,2129.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
96,311712,BidirectionalSequenceLSTMOptionsBuilder,1,opencv_tflite.BidirectionalSequenceLSTMOptionsBuilder.BidirectionalSequenceLSTMOptionsBuilder,ANY opencv_tflite.BidirectionalSequenceLSTMOptionsBuilder.BidirectionalSequenceLSTMOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit BidirectionalSequenceLSTMOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",4455.0,4458.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
97,115104,GetDescriptor,1,opencv_caffe.PriorBoxParameter.GetDescriptor,Descriptor opencv_caffe.PriorBoxParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",2130.0,2132.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
98,311723,Finish,1,opencv_tflite.BidirectionalSequenceLSTMOptionsBuilder.Finish,Offset<BidirectionalSequenceLSTMOptions> opencv_tflite.BidirectionalSequenceLSTMOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<BidirectionalSequenceLSTMOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<BidirectionalSequenceLSTMOptions>(end);
    return o;
  }",4459.0,4463.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<BidirectionalSequenceLSTMOptions>
99,115115,GetReflection,1,opencv_caffe.PriorBoxParameter.GetReflection,Reflection opencv_caffe.PriorBoxParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",2133.0,2135.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
100,16813,_InternalSerialize,1,opencv_caffe.FillerParameter._InternalSerialize,"uint8_t opencv_caffe.FillerParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* FillerParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.FillerParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1 [default = ""constant""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      ""opencv_caffe.FillerParameter.type"");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // optional float value = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_inte...",7327.0,7393.0,1.0,1.0,67.0,86,8,89,10,0,1,10,10,0,0,,0,1,4,2,2,uint8_t
101,115126,default_instance,1,opencv_caffe.PriorBoxParameter.default_instance,PriorBoxParameter opencv_caffe.PriorBoxParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const PriorBoxParameter& default_instance() {
    return *internal_default_instance();
  }",2136.0,2138.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,PriorBoxParameter
102,115133,internal_default_instance,1,opencv_caffe.PriorBoxParameter.internal_default_instance,PriorBoxParameter opencv_caffe.PriorBoxParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const PriorBoxParameter* internal_default_instance() {
    return reinterpret_cast<const PriorBoxParameter*>(
               &_PriorBoxParameter_default_instance_);
  }",2139.0,2142.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,PriorBoxParameter
103,82365,GetMetadata,1,opencv_caffe.ScaleParameter.GetMetadata,Metadata opencv_caffe.ScaleParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata ScaleParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[55]);
}",26513.0,26517.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
104,360903,squeeze_to,1,cv.dnn.cuda4dnn.csl.TensorSpan.squeeze_to,void cv.dnn.cuda4dnn.csl.TensorSpan.squeeze_to (int),src\cuda4dnn\csl\tensor.hpp,"void squeeze_to(int r) {
            CV_Assert(!empty());
            CV_Assert(rank() >= r);
            CV_Assert(std::all_of(std::begin(shape), std::end(shape) - r, [](size_type x){ return x == 1; }));
            std::copy(std::end(shape) - r, std::end(shape), std::begin(shape));
            shape.resize(r);
        }",700.0,706.0,9.0,9.0,7.0,12,4,17,3,0,6,1,1,0,0,,0,6,2,1,1,void
105,246231,GetCachedSize,1,opencv_onnx.TensorProto.GetCachedSize,int opencv_onnx.TensorProto.GetCachedSize (),misc\onnx\opencv-onnx.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },2229.0,2229.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
106,127095,inner_product_param_,3,opencv_caffe.LayerParameter.inner_product_param_,,misc\caffe\opencv-caffe.pb.hpp,* inner_product_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
107,279016,node_,3,opencv_tensorflow.GraphDef.node_,,misc\tensorflow\graph.pb.hpp,node_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
108,279017,library_,3,opencv_tensorflow.GraphDef.library_,,misc\tensorflow\graph.pb.hpp,* library_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,14,0,1,1,0,0,,0,0,0,0,0,
109,279018,versions_,3,opencv_tensorflow.GraphDef.versions_,,misc\tensorflow\graph.pb.hpp,* versions_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
110,279019,version_,3,opencv_tensorflow.GraphDef.version_,,misc\tensorflow\graph.pb.hpp,version_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
111,279020,_cached_size_,3,opencv_tensorflow.GraphDef._cached_size_,,misc\tensorflow\graph.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
112,229872,_InternalSerialize,1,opencv_onnx.ModelProto._InternalSerialize,"uint8_t opencv_onnx.ModelProto._InternalSerialize (uint8_t*,ANY*)",misc\onnx\opencv-onnx.pb.cc,"uint8_t* ModelProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_onnx.ModelProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 ir_version = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_ir_version(), target);
  }

  // optional string producer_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_producer_name().data(), static_cast<int>(this->_internal_producer_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      ""opencv_onnx.ModelProto.producer_name"");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pr...",2563.0,2652.0,1.0,1.0,90.0,123,8,113,13,0,2,11,11,0,1,,0,2,4,2,2,uint8_t
113,377332,stream,3,cv.dnn.cuda4dnn.ReorgOp.stream,,src\cuda4dnn\primitives\reorg.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
114,377333,stride,3,cv.dnn.cuda4dnn.ReorgOp.stride,,src\cuda4dnn\primitives\reorg.hpp,stride,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
115,311799,fbb_,3,opencv_tflite.ResizeBilinearOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
116,311800,start_,3,opencv_tflite.ResizeBilinearOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
117,311801,add_align_corners,1,opencv_tflite.ResizeBilinearOptionsBuilder.add_align_corners,void opencv_tflite.ResizeBilinearOptionsBuilder.add_align_corners (bool),misc\tflite\schema_generated.hpp,"void add_align_corners(bool align_corners) {
    fbb_.AddElement<uint8_t>(ResizeBilinearOptions::VT_ALIGN_CORNERS, static_cast<uint8_t>(align_corners), 0);
  }",4508.0,4510.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
118,82430,SharedCtor,1,opencv_caffe.SigmoidParameter.SharedCtor,void opencv_caffe.SigmoidParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void SigmoidParameter::SharedCtor() {
engine_ = 0;
}",26546.0,26548.0,1.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,void
119,360959,unsqueeze,1,cv.dnn.cuda4dnn.csl.TensorSpan.unsqueeze,void cv.dnn.cuda4dnn.csl.TensorSpan.unsqueeze (int),src\cuda4dnn\csl\tensor.hpp,"void unsqueeze(int axis = 0) {
            CV_Assert(!empty());
            CV_Assert(rank() < CSL_MAX_TENSOR_RANK);
            axis = clamp_axis(axis, rank());
            CV_Assert(axis >= 0 && axis < rank());
            shape.insert(std::begin(shape) + axis, 1);
        }",718.0,724.0,9.0,31.0,7.0,9,7,8,3,0,2,1,1,0,0,,0,2,2,1,1,void
120,147980,_has_bits_,3,opencv_caffe.ScaleParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
121,311821,add_half_pixel_centers,1,opencv_tflite.ResizeBilinearOptionsBuilder.add_half_pixel_centers,void opencv_tflite.ResizeBilinearOptionsBuilder.add_half_pixel_centers (bool),misc\tflite\schema_generated.hpp,"void add_half_pixel_centers(bool half_pixel_centers) {
    fbb_.AddElement<uint8_t>(ResizeBilinearOptions::VT_HALF_PIXEL_CENTERS, static_cast<uint8_t>(half_pixel_centers), 0);
  }",4511.0,4513.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
122,147982,filler_,3,opencv_caffe.ScaleParameter.filler_,,misc\caffe\opencv-caffe.pb.hpp,* filler_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
123,147983,bias_filler_,3,opencv_caffe.ScaleParameter.bias_filler_,,misc\caffe\opencv-caffe.pb.hpp,* bias_filler_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
124,147984,bias_term_,3,opencv_caffe.ScaleParameter.bias_term_,,misc\caffe\opencv-caffe.pb.hpp,bias_term_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
125,147985,axis_,3,opencv_caffe.ScaleParameter.axis_,,misc\caffe\opencv-caffe.pb.hpp,axis_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
126,147986,num_axes_,3,opencv_caffe.ScaleParameter.num_axes_,,misc\caffe\opencv-caffe.pb.hpp,num_axes_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
127,377359,forward,1,cv.dnn.cuda4dnn.ReshapeOp.forward,"void cv.dnn.cuda4dnn.ReshapeOp.forward (ANY,ANY,ANY)",src\cuda4dnn\primitives\reshape.hpp,"void forward(
            const std::vector<cv::Ptr<BackendWrapper>>& inputs,
            const std::vector<cv::Ptr<BackendWrapper>>& outputs,
            csl::Workspace& workspace) override
        {
            /* sometimes the output shape is passed as extra inputs; hence, >= instead of == */
            CV_Assert(inputs.size() >= outputs.size());

            for (int i = 0; i < outputs.size(); i++)
            {
                auto input_wrapper = inputs[i].dynamicCast<wrapper_type>();
                auto input = input_wrapper->getView();

                auto output_wrapper = outputs[i].dynamicCast<wrapper_type>();
                auto output = output_wrapper->getSpan();

                if (input.get() != output.get())
                {
                    while (input.rank() < output.rank())
                        input.unsqueeze();

                    while (output.rank() < input.rank())
                        output.unsqueeze();

                    input.reshape_as(o...",25.0,53.0,9.0,9.0,29.0,28,7,28,10,0,1,5,10,0,0,,0,1,6,3,3,void
128,147981,_cached_size_,3,opencv_caffe.ScaleParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
129,311841,ResizeBilinearOptionsBuilder,1,opencv_tflite.ResizeBilinearOptionsBuilder.ResizeBilinearOptionsBuilder,ANY opencv_tflite.ResizeBilinearOptionsBuilder.ResizeBilinearOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit ResizeBilinearOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",4514.0,4517.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
130,360998,subspan,1,cv.dnn.cuda4dnn.csl.TensorSpan.subspan,"type cv.dnn.cuda4dnn.csl.TensorSpan.subspan<ForwardItr> (size_type,ForwardItr,ForwardItr)",src\cuda4dnn\csl\tensor.hpp,"TensorSpan subspan(size_type offset, Sizes... new_sizes_) const {
            static_assert(sizeof...(Sizes) <= CSL_MAX_TENSOR_RANK, ""required rank exceeds maximum supported rank"");
            static_assert(sizeof...(Sizes) > 0, ""no sizes provided"");
            std::array<std::int64_t, sizeof...(Sizes)> new_sizes = { static_cast<std::int64_t>(new_sizes_)... };
            return subspan(offset, std::begin(new_sizes), std::end(new_sizes));
        }",770.0,775.0,9.0,46.0,6.0,20,8,32,11,0,3,3,3,0,0,,0,3,4,2,2,TensorSpan
131,311852,Finish,1,opencv_tflite.ResizeBilinearOptionsBuilder.Finish,Offset<ResizeBilinearOptions> opencv_tflite.ResizeBilinearOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<ResizeBilinearOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ResizeBilinearOptions>(end);
    return o;
  }",4518.0,4522.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<ResizeBilinearOptions>
132,295469,InternalSwap,1,opencv_tensorflow.TensorProto.InternalSwap,void opencv_tensorflow.TensorProto.InternalSwap (TensorProto*),misc\tensorflow\tensor.pb.cc,"void TensorProto::InternalSwap(TensorProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  float_val_.InternalSwap(&other->float_val_);
  double_val_.InternalSwap(&other->double_val_);
  int_val_.InternalSwap(&other->int_val_);
  string_val_.InternalSwap(&other->string_val_);
  scomplex_val_.InternalSwap(&other->scomplex_val_);
  int64_val_.InternalSwap(&other->int64_val_);
  bool_val_.InternalSwap(&other->bool_val_);
  dcomplex_val_.InternalSwap(&other->dcomplex_val_);
  half_val_.InternalSwap(&other->half_val_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tensor_content_, lhs_arena,
      &other->tensor_content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TensorProto, version_number_)
      +...",709.0,734.0,1.0,1.0,26.0,57,12,41,20,0,25,1,1,0,0,,0,25,2,1,1,void
133,82479,SetCachedSize,1,opencv_caffe.SigmoidParameter.SetCachedSize,void opencv_caffe.SigmoidParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void SigmoidParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",26567.0,26569.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
134,442934,setupConvolution,1,cv.dnn.ocl4dnn.OCL4DNNConvSpatial<float>.setupConvolution,"void cv.dnn.ocl4dnn.OCL4DNNConvSpatial<float>.setupConvolution<> (UMat,UMat,UMat,UMat,int32_t,UMat)",src\ocl4dnn\src\ocl4dnn_conv_spatial.cpp,"void OCL4DNNConvSpatial<float>::setupConvolution(const UMat &bottom,
                                                 UMat &top,
                                                 const UMat &weight,
                                                 const UMat &bias,
                                                 int32_t numImages,
                                                 UMat &verifyTop)
{
    std::vector< cv::Ptr<tunerParam> > tunerItems;

    generateTunerItems(tunerItems);
    for (int i = 0; i < tunerItems.size(); i++)
        createConvolutionKernel(tunerItems[i]->kernelType,
                                tunerItems[i]->blockWidth,
                                tunerItems[i]->blockHeight,
                                tunerItems[i]->blockDepth);

    const size_t testCount = testAllKernels();
    for (int32_t x = 0; x < kernelQueue.size(); x++)
    {
        kernelConfig* config = kernelQueue[x];
        config->executionTime = timedConvolve(bottom, top, weight, b...",1654.0,1780.0,1.0,1.0,127.0,160,16,143,44,0,16,19,35,0,0,,0,16,12,6,6,void
135,82489,Clear,1,opencv_caffe.SigmoidParameter.Clear,void opencv_caffe.SigmoidParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void SigmoidParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.SigmoidParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  engine_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",26571.0,26580.0,1.0,1.0,10.0,5,3,5,4,0,2,1,1,0,0,,0,2,0,0,0,void
136,115258,GetCachedSize,1,opencv_caffe.PriorBoxParameter.GetCachedSize,int opencv_caffe.PriorBoxParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },2187.0,2187.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
137,82511,_InternalParse,1,opencv_caffe.SigmoidParameter._InternalParse,"const char* opencv_caffe.SigmoidParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* SigmoidParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .opencv_caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::opencv_caffe::SigmoidParameter_Engine_IsValid(val))) {
            _internal_set_engine(static_cast<::opencv_caffe::SigmoidParameter_Engine>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
...",26582.0,26624.0,1.0,10.0,43.0,31,12,35,10,0,2,10,13,1,1,,0,2,4,2,2,const char*
138,66134,ByteSizeLong,1,opencv_caffe.ImageDataParameter.ByteSizeLong,size_t opencv_caffe.ImageDataParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t ImageDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.ImageDataParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string source = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source());
    }

    // optional string mean_file = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mean_file());
    }

    // optional string root_folder = 12 [default = """"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
         ...",21476.0,21556.0,1.0,1.0,81.0,71,9,57,7,0,2,15,27,0,0,,0,2,0,0,0,size_t
139,311904,fbb_,3,opencv_tflite.ResizeNearestNeighborOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
140,311905,start_,3,opencv_tflite.ResizeNearestNeighborOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
141,311906,add_align_corners,1,opencv_tflite.ResizeNearestNeighborOptionsBuilder.add_align_corners,void opencv_tflite.ResizeNearestNeighborOptionsBuilder.add_align_corners (bool),misc\tflite\schema_generated.hpp,"void add_align_corners(bool align_corners) {
    fbb_.AddElement<uint8_t>(ResizeNearestNeighborOptions::VT_ALIGN_CORNERS, static_cast<uint8_t>(align_corners), 0);
  }",4559.0,4561.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
142,311926,add_half_pixel_centers,1,opencv_tflite.ResizeNearestNeighborOptionsBuilder.add_half_pixel_centers,void opencv_tflite.ResizeNearestNeighborOptionsBuilder.add_half_pixel_centers (bool),misc\tflite\schema_generated.hpp,"void add_half_pixel_centers(bool half_pixel_centers) {
    fbb_.AddElement<uint8_t>(ResizeNearestNeighborOptions::VT_HALF_PIXEL_CENTERS, static_cast<uint8_t>(half_pixel_centers), 0);
  }",4562.0,4564.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
143,148092,descriptor,1,opencv_caffe.SigmoidParameter.descriptor,Descriptor opencv_caffe.SigmoidParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",15958.0,15960.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
144,279168,descriptor,1,opencv_tensorflow.NodeDef.descriptor,Descriptor opencv_tensorflow.NodeDef.descriptor (),misc\tensorflow\graph.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",344.0,346.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
145,148098,GetDescriptor,1,opencv_caffe.SigmoidParameter.GetDescriptor,Descriptor opencv_caffe.SigmoidParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",15961.0,15963.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
146,377476,stream,3,cv.dnn.cuda4dnn.ReshapeOp.stream,,src\cuda4dnn\primitives\reshape.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
147,279174,GetDescriptor,1,opencv_tensorflow.NodeDef.GetDescriptor,Descriptor opencv_tensorflow.NodeDef.GetDescriptor (),misc\tensorflow\graph.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",347.0,349.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
148,377478,<lambda>0,1,cv.dnn.cuda4dnn.ResizeOp.forward.<lambda>0,"ANY cv.dnn.cuda4dnn.ResizeOp.forward.<lambda>0 (ANY,ANY)",src\cuda4dnn\primitives\resize.hpp,"[this](std::size_t input_size, std::size_t output_size) {
                return (align_corners && output_size > 1) ?
                            static_cast<float>(input_size - 1) / (output_size - 1) :
                            static_cast<float>(input_size) / output_size;
            }",56.0,60.0,40.0,13.0,5.0,9,6,6,3,0,1,1,1,0,0,,0,1,4,2,2,ANY
149,311946,ResizeNearestNeighborOptionsBuilder,1,opencv_tflite.ResizeNearestNeighborOptionsBuilder.ResizeNearestNeighborOptionsBuilder,ANY opencv_tflite.ResizeNearestNeighborOptionsBuilder.ResizeNearestNeighborOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit ResizeNearestNeighborOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",4565.0,4568.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
150,148109,GetReflection,1,opencv_caffe.SigmoidParameter.GetReflection,Reflection opencv_caffe.SigmoidParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",15964.0,15966.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
151,279185,GetReflection,1,opencv_tensorflow.NodeDef.GetReflection,Reflection opencv_tensorflow.NodeDef.GetReflection (),misc\tensorflow\graph.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",350.0,352.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
152,311957,Finish,1,opencv_tflite.ResizeNearestNeighborOptionsBuilder.Finish,Offset<ResizeNearestNeighborOptions> opencv_tflite.ResizeNearestNeighborOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<ResizeNearestNeighborOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ResizeNearestNeighborOptions>(end);
    return o;
  }",4569.0,4573.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<ResizeNearestNeighborOptions>
153,148120,default_instance,1,opencv_caffe.SigmoidParameter.default_instance,SigmoidParameter opencv_caffe.SigmoidParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const SigmoidParameter& default_instance() {
    return *internal_default_instance();
  }",15967.0,15969.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,SigmoidParameter
154,279196,default_instance,1,opencv_tensorflow.NodeDef.default_instance,NodeDef opencv_tensorflow.NodeDef.default_instance (),misc\tensorflow\graph.pb.hpp,"static const NodeDef& default_instance() {
    return *internal_default_instance();
  }",353.0,355.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,NodeDef
155,49821,_InternalSerialize,1,opencv_caffe.ConvolutionParameter._InternalSerialize,"uint8_t opencv_caffe.ConvolutionParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* ConvolutionParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.ConvolutionParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_output = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_output(), target);
  }

  // optional bool bias_term = 2 [default = true];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_bias_term(), target);
  }

  // repeated uint32 pad = 3;
  for (int i = 0, n = this->_internal_pad_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPAC...",16593.0,16719.0,1.0,1.0,127.0,171,8,198,13,0,3,20,20,0,2,,0,3,4,2,2,uint8_t
156,148127,internal_default_instance,1,opencv_caffe.SigmoidParameter.internal_default_instance,SigmoidParameter opencv_caffe.SigmoidParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const SigmoidParameter* internal_default_instance() {
    return reinterpret_cast<const SigmoidParameter*>(
               &_SigmoidParameter_default_instance_);
  }",15970.0,15973.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,SigmoidParameter
157,279203,internal_default_instance,1,opencv_tensorflow.NodeDef.internal_default_instance,NodeDef opencv_tensorflow.NodeDef.internal_default_instance (),misc\tensorflow\graph.pb.hpp,"static inline const NodeDef* internal_default_instance() {
    return reinterpret_cast<const NodeDef*>(
               &_NodeDef_default_instance_);
  }",356.0,359.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,NodeDef
158,377523,NEAREST_NEIGHBOUR,3,cv.dnn.cuda4dnn.InterpolationType.NEAREST_NEIGHBOUR,,src\cuda4dnn\primitives\resize.hpp,NEAREST_NEIGHBOUR,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
159,361139,Span,1,cv.dnn.cuda4dnn.csl.TensorSpan.operator cv.dnn.cuda4dnn.csl.Span<#0>,ANY cv.dnn.cuda4dnn.csl.TensorSpan.operator cv.dnn.cuda4dnn.csl.Span<#0> (),src\cuda4dnn\csl\tensor.hpp,"operator Span<T>() noexcept { return Span<T>(ptr, size()); }",777.0,777.0,9.0,68.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,ANY
160,377526,type,3,cv.dnn.cuda4dnn.ResizeConfiguration.type,,src\cuda4dnn\primitives\resize.hpp,type,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
161,377527,align_corners,3,cv.dnn.cuda4dnn.ResizeConfiguration.align_corners,,src\cuda4dnn\primitives\resize.hpp,align_corners,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
162,377528,half_pixel_centers,3,cv.dnn.cuda4dnn.ResizeConfiguration.half_pixel_centers,,src\cuda4dnn\primitives\resize.hpp,half_pixel_centers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
163,377530,ResizeOp,1,cv.dnn.cuda4dnn.ResizeOp.ResizeOp,"ANY cv.dnn.cuda4dnn.ResizeOp.ResizeOp (ANY,ResizeConfiguration)",src\cuda4dnn\primitives\resize.hpp,"ResizeOp(csl::Stream stream_, const ResizeConfiguration& config)
            : stream(std::move(stream_))
        {
            type = config.type;
            align_corners = config.align_corners;
            half_pixel_centers = config.half_pixel_centers;
        }",34.0,40.0,9.0,9.0,7.0,6,2,6,4,0,6,1,1,0,0,,0,6,4,2,2,ANY
164,361147,Span,1,cv.dnn.cuda4dnn.csl.TensorSpan.operator cv.dnn.cuda4dnn.csl.Span<const #0>,ANY cv.dnn.cuda4dnn.csl.TensorSpan.operator cv.dnn.cuda4dnn.csl.Span<const #0> (),src\cuda4dnn\csl\tensor.hpp,"operator View<T>() const noexcept { return View<T>(ptr, size()); }",778.0,778.0,9.0,74.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,ANY
165,361155,swap,1,cv.dnn.cuda4dnn.csl.TensorSpan.swap,"void cv.dnn.cuda4dnn.csl.TensorSpan.swap (TensorSpan,TensorSpan)",src\cuda4dnn\csl\tensor.hpp,"friend void swap(TensorSpan& lhs, TensorSpan& rhs) noexcept {
            using std::swap;
            swap(lhs.ptr, rhs.ptr);
            swap(lhs.shape, rhs.shape);
        }",780.0,784.0,9.0,9.0,5.0,4,1,4,2,0,4,1,1,0,0,,0,4,4,2,2,void
166,295619,GetMetadata,1,opencv_tensorflow.TensorProto.GetMetadata,Metadata opencv_tensorflow.TensorProto.GetMetadata (),misc\tensorflow\tensor.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata TensorProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tensor_2eproto_getter, &descriptor_table_tensor_2eproto_once,
      file_level_metadata_tensor_2eproto[0]);
}",736.0,740.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
167,312009,fbb_,3,opencv_tflite.CallOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
168,312010,start_,3,opencv_tflite.CallOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
169,312011,add_subgraph,1,opencv_tflite.CallOptionsBuilder.add_subgraph,void opencv_tflite.CallOptionsBuilder.add_subgraph (uint32_t),misc\tflite\schema_generated.hpp,"void add_subgraph(uint32_t subgraph) {
    fbb_.AddElement<uint32_t>(CallOptions::VT_SUBGRAPH, subgraph, 0);
  }",4605.0,4607.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
170,426699,flip,1,cv.dnn.SliceLayerImpl.flip,void cv.dnn.SliceLayerImpl.flip (Mat),src\layers\slice_layer.cpp,"void flip(Mat& output) // break if 1d tensor?
    {
        for (int i = 0; i < neg_step_dims.size(); ++i)
                cv::flipND(output, output, neg_step_dims[i]);
    }",844.0,848.0,5.0,5.0,5.0,3,3,3,2,0,1,2,2,1,0,,0,1,2,1,1,void
171,377551,forward,1,cv.dnn.cuda4dnn.ResizeOp.forward,"void cv.dnn.cuda4dnn.ResizeOp.forward (ANY,ANY,ANY)",src\cuda4dnn\primitives\resize.hpp,"void forward(
            const std::vector<cv::Ptr<BackendWrapper>>& inputs,
            const std::vector<cv::Ptr<BackendWrapper>>& outputs,
            csl::Workspace& workspace) override
        {
            // sometimes the target shape is taken from the second input; we don't use it however
            CV_Assert((inputs.size() == 1 || inputs.size() == 2) && outputs.size() == 1);

            auto input_wrapper = inputs[0].dynamicCast<wrapper_type>();
            auto input = input_wrapper->getView();

            auto output_wrapper = outputs[0].dynamicCast<wrapper_type>();
            auto output = output_wrapper->getSpan();

            const auto compute_scale = [this](std::size_t input_size, std::size_t output_size) {
                return (align_corners && output_size > 1) ?
                            static_cast<float>(input_size - 1) / (output_size - 1) :
                            static_cast<float>(input_size) / output_size;
            };

            auto out_he...",42.0,71.0,9.0,9.0,30.0,36,8,36,19,0,5,2,2,2,0,,0,5,6,3,3,void
172,17110,ByteSizeLong,1,opencv_caffe.FillerParameter.ByteSizeLong,size_t opencv_caffe.FillerParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t FillerParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.FillerParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string type = 1 [default = ""constant""];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

    // optional float value = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float min = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float mean = 5 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional .opencv_caffe.FillerParameter....",7395.0,7450.0,1.0,1.0,56.0,42,9,33,7,0,2,10,18,0,0,,0,2,0,0,0,size_t
173,361175,shape,3,cv.dnn.cuda4dnn.csl.TensorSpan.shape,,src\cuda4dnn\csl\tensor.hpp,shape,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,30,0,1,1,0,0,,0,0,0,0,0,
174,361176,ptr,3,cv.dnn.cuda4dnn.csl.TensorSpan.ptr,,src\cuda4dnn\csl\tensor.hpp,ptr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
175,312029,CallOptionsBuilder,1,opencv_tflite.CallOptionsBuilder.CallOptionsBuilder,ANY opencv_tflite.CallOptionsBuilder.CallOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit CallOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",4608.0,4611.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
176,312040,Finish,1,opencv_tflite.CallOptionsBuilder.Finish,Offset<CallOptions> opencv_tflite.CallOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<CallOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CallOptions>(end);
    return o;
  }",4612.0,4616.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<CallOptions>
177,426729,hasDynamicShapes,3,cv.dnn.SliceLayerImpl.hasDynamicShapes,,src\layers\slice_layer.cpp,hasDynamicShapes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
178,426728,neg_step_dims,3,cv.dnn.SliceLayerImpl.neg_step_dims,,src\layers\slice_layer.cpp,neg_step_dims,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
179,426731,hasSteps,3,cv.dnn.SliceLayerImpl.hasSteps,,src\layers\slice_layer.cpp,hasSteps,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
180,426730,shapesInitialized,3,cv.dnn.SliceLayerImpl.shapesInitialized,,src\layers\slice_layer.cpp,shapesInitialized,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
181,82666,_InternalSerialize,1,opencv_caffe.SigmoidParameter._InternalSerialize,"uint8_t opencv_caffe.SigmoidParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* SigmoidParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.SigmoidParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .opencv_caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_engine(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_arr...",26626.0,26646.0,1.0,1.0,21.0,23,8,25,10,0,1,3,3,0,0,,0,1,4,2,2,uint8_t
182,312086,fbb_,3,opencv_tflite.PadOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
183,312087,start_,3,opencv_tflite.PadOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
184,312088,PadOptionsBuilder,1,opencv_tflite.PadOptionsBuilder.PadOptionsBuilder,ANY opencv_tflite.PadOptionsBuilder.PadOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit PadOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",4639.0,4642.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
185,148252,GetCachedSize,1,opencv_caffe.SigmoidParameter.GetCachedSize,int opencv_caffe.SigmoidParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },16018.0,16018.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
186,279328,GetCachedSize,1,opencv_tensorflow.NodeDef.GetCachedSize,int opencv_tensorflow.NodeDef.GetCachedSize (),misc\tensorflow\graph.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },404.0,404.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
187,312099,Finish,1,opencv_tflite.PadOptionsBuilder.Finish,Offset<PadOptions> opencv_tflite.PadOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<PadOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PadOptions>(end);
    return o;
  }",4643.0,4647.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<PadOptions>
188,82746,ByteSizeLong,1,opencv_caffe.SigmoidParameter.ByteSizeLong,size_t opencv_caffe.SigmoidParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t SigmoidParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.SigmoidParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .opencv_caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_engine());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}",26648.0,26664.0,1.0,1.0,17.0,13,9,12,7,0,2,2,2,0,0,,0,2,0,0,0,size_t
189,312139,fbb_,3,opencv_tflite.PadV2OptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
190,312140,start_,3,opencv_tflite.PadV2OptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
191,312141,PadV2OptionsBuilder,1,opencv_tflite.PadV2OptionsBuilder.PadV2OptionsBuilder,ANY opencv_tflite.PadV2OptionsBuilder.PadV2OptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit PadV2OptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",4668.0,4671.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
192,312152,Finish,1,opencv_tflite.PadV2OptionsBuilder.Finish,Offset<PadV2Options> opencv_tflite.PadV2OptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<PadV2Options> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PadV2Options>(end);
    return o;
  }",4672.0,4676.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<PadV2Options>
193,66401,MergeFrom,1,opencv_caffe.ImageDataParameter.MergeFrom,void opencv_caffe.ImageDataParameter.MergeFrom (ImageDataParameter),misc\caffe\opencv-caffe.pb.cc,"void ImageDataParameter::MergeFrom(const ImageDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.ImageDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_source(from._internal_source());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_mean_file(from._internal_mean_file());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_root_folder(from._internal_root_folder());
    }
    if (cached_has_bits & 0x00000008u) {
      crop_size_ = from.crop_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      rand_skip_ = from.rand_skip_;
    }
    if (cached_has_bits & 0x00000020u) {
      shuffle_ = from.shuffle_;
    }
    if (cached_has_bits & 0x00000040u) {
      mirror_ = from.mirror_;
    }
    if (cached_has_bits & ...",21571.0,21621.0,1.0,1.0,51.0,48,8,47,14,2,21,15,27,0,0,,0,21,2,1,1,void
194,377700,stream,3,cv.dnn.cuda4dnn.ResizeOp.stream,,src\cuda4dnn\primitives\resize.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
195,377701,type,3,cv.dnn.cuda4dnn.ResizeOp.type,,src\cuda4dnn\primitives\resize.hpp,type,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
196,377702,align_corners,3,cv.dnn.cuda4dnn.ResizeOp.align_corners,,src\cuda4dnn\primitives\resize.hpp,align_corners,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
197,377703,half_pixel_centers,3,cv.dnn.cuda4dnn.ResizeOp.half_pixel_centers,,src\cuda4dnn\primitives\resize.hpp,half_pixel_centers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
198,263029,ByteSizeLong,1,opencv_tensorflow.NameAttrList.ByteSizeLong,size_t opencv_tensorflow.NameAttrList.ByteSizeLong (),misc\tensorflow\attr_value.pb.cc,"size_t NameAttrList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_tensorflow.NameAttrList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .opencv_tensorflow.AttrValue> attr = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attr_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::opencv_tensorflow::AttrValue >::const_iterator
      it = this->_internal_attr().begin();
      it != this->_internal_attr().end(); ++it) {
    total_size += NameAttrList_AttrEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}",1437.0,1462.0,1.0,1.0,26.0,29,10,19,9,0,1,3,3,0,0,,0,1,0,0,0,size_t
199,361334,empty,1,cv.dnn.cuda4dnn.csl.TensorView.empty,bool cv.dnn.cuda4dnn.csl.TensorView.empty (),src\cuda4dnn\csl\tensor.hpp,bool empty() const noexcept { return shape.size() == 0; },848.0,848.0,9.0,65.0,1.0,2,2,1,1,0,1,1,1,0,0,,0,1,0,0,0,bool
200,312192,fbb_,3,opencv_tflite.ReshapeOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
201,377728,forward,1,cv.dnn.cuda4dnn.ROIPoolingOp.forward,"void cv.dnn.cuda4dnn.ROIPoolingOp.forward (ANY,ANY,ANY)",src\cuda4dnn\primitives\roi_pooling.hpp,"void forward(
            const std::vector<cv::Ptr<BackendWrapper>>& inputs,
            const std::vector<cv::Ptr<BackendWrapper>>& outputs,
            csl::Workspace& workspace) override
        {
            CV_Assert(inputs.size() == 2 && outputs.size() == 1);

            auto input_wrapper = inputs[0].dynamicCast<wrapper_type>();
            auto input = input_wrapper->getView();

            auto rois_wrapper = inputs[1].dynamicCast<wrapper_type>();
            auto rois = rois_wrapper->getView();

            auto output_wrapper = outputs[0].dynamicCast<wrapper_type>();
            auto output = output_wrapper->getSpan();

            kernels::roi_pooling<T>(stream, output, input, rois, spatial_scale);
        }",26.0,43.0,9.0,9.0,18.0,21,6,20,11,0,2,1,1,0,0,,0,2,6,3,3,void
202,361345,size,1,cv.dnn.cuda4dnn.csl.TensorView.size,size_type cv.dnn.cuda4dnn.csl.TensorView.size (),src\cuda4dnn\csl\tensor.hpp,"size_type size() const noexcept {
            CV_Assert(!empty());
            return std::accumulate(std::begin(shape), std::end(shape), 1, std::multiplies<size_type>());
        }",855.0,858.0,9.0,9.0,4.0,5,2,6,2,0,2,1,1,0,0,,0,2,0,0,0,size_type
203,312193,start_,3,opencv_tflite.ReshapeOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
204,312194,add_new_shape,1,opencv_tflite.ReshapeOptionsBuilder.add_new_shape,void opencv_tflite.ReshapeOptionsBuilder.add_new_shape (ANY),misc\tflite\schema_generated.hpp,"void add_new_shape(::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> new_shape) {
    fbb_.AddOffset(ReshapeOptions::VT_NEW_SHAPE, new_shape);
  }",4705.0,4707.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
205,17285,MergeFrom,1,opencv_caffe.FillerParameter.MergeFrom,void opencv_caffe.FillerParameter.MergeFrom (FillerParameter),misc\caffe\opencv-caffe.pb.cc,"void FillerParameter::MergeFrom(const FillerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.FillerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_ = from.min_;
    }
    if (cached_has_bits & 0x00000008u) {
      mean_ = from.mean_;
    }
    if (cached_has_bits & 0x00000010u) {
      variance_norm_ = from.variance_norm_;
    }
    if (cached_has_bits & 0x00000020u) {
      sparse_ = from.sparse_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_ = from.max_;
    }
    if (cached_has_bits & 0x00000080u) {
      std_ = from.std_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _int...",7465.0,7500.0,1.0,1.0,36.0,36,8,34,12,15,16,10,18,0,0,,0,16,2,1,1,void
206,295814,GetDescriptor,1,opencv_tensorflow.TensorProto.GetDescriptor,Descriptor opencv_tensorflow.TensorProto.GetDescriptor (),misc\tensorflow\tensor.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",104.0,106.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
207,295808,descriptor,1,opencv_tensorflow.TensorProto.descriptor,Descriptor opencv_tensorflow.TensorProto.descriptor (),misc\tensorflow\tensor.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",101.0,103.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
208,82826,MergeFrom,1,opencv_caffe.SigmoidParameter.MergeFrom,void opencv_caffe.SigmoidParameter.MergeFrom (SigmoidParameter),misc\caffe\opencv-caffe.pb.cc,"void SigmoidParameter::MergeFrom(const SigmoidParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.SigmoidParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_engine()) {
    _internal_set_engine(from._internal_engine());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",26679.0,26689.0,1.0,1.0,11.0,10,6,8,4,2,0,2,2,0,0,,0,0,2,1,1,void
209,312207,ReshapeOptionsBuilder,1,opencv_tflite.ReshapeOptionsBuilder.ReshapeOptionsBuilder,ANY opencv_tflite.ReshapeOptionsBuilder.ReshapeOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit ReshapeOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",4708.0,4711.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
210,295825,GetReflection,1,opencv_tensorflow.TensorProto.GetReflection,Reflection opencv_tensorflow.TensorProto.GetReflection (),misc\tensorflow\tensor.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",107.0,109.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
211,426902,addReference,1,cv.dnn.detail.BlobManager.addReference,void cv.dnn.detail.BlobManager.addReference (LayerPin),src\legacy_backend.hpp,"void addReference(const LayerPin& lp)
    {
        std::map<LayerPin, int>::iterator it = refCounter.find(lp);
        if (it == refCounter.end())
            refCounter[lp] = 1;
        else
            it->second += 1;
    }",113.0,120.0,5.0,5.0,8.0,6,4,7,3,0,3,2,2,1,0,,0,3,2,1,1,void
212,312218,Finish,1,opencv_tflite.ReshapeOptionsBuilder.Finish,Offset<ReshapeOptions> opencv_tflite.ReshapeOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<ReshapeOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ReshapeOptions>(end);
    return o;
  }",4712.0,4716.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<ReshapeOptions>
213,230298,ByteSizeLong,1,opencv_onnx.ModelProto.ByteSizeLong,size_t opencv_onnx.ModelProto.ByteSizeLong (),misc\onnx\opencv-onnx.pb.cc,"size_t ModelProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_onnx.ModelProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opencv_onnx.OperatorSetIdProto opset_import = 8;
  total_size += 1UL * this->_internal_opset_import_size();
  for (const auto& msg : this->opset_import_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .opencv_onnx.StringStringEntryProto metadata_props = 14;
  total_size += 1UL * this->_internal_metadata_props_size();
  for (const auto& msg : this->metadata_props_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string producer_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 ...",2654.0,2725.0,1.0,1.0,72.0,70,11,56,9,0,5,11,18,2,0,,0,5,0,0,0,size_t
214,361372,rank,1,cv.dnn.cuda4dnn.csl.TensorView.rank,size_type cv.dnn.cuda4dnn.csl.TensorView.rank (),src\cuda4dnn\csl\tensor.hpp,"size_type rank() const noexcept {
            CV_Assert(!empty());
            return shape.size();
        }",865.0,868.0,9.0,9.0,4.0,2,2,1,1,0,1,1,1,0,0,,0,1,0,0,0,size_type
215,295836,default_instance,1,opencv_tensorflow.TensorProto.default_instance,TensorProto opencv_tensorflow.TensorProto.default_instance (),misc\tensorflow\tensor.pb.hpp,"static const TensorProto& default_instance() {
    return *internal_default_instance();
  }",110.0,112.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,TensorProto
216,295843,internal_default_instance,1,opencv_tensorflow.TensorProto.internal_default_instance,TensorProto opencv_tensorflow.TensorProto.internal_default_instance (),misc\tensorflow\tensor.pb.hpp,"static inline const TensorProto* internal_default_instance() {
    return reinterpret_cast<const TensorProto*>(
               &_TensorProto_default_instance_);
  }",113.0,116.0,3.0,3.0,4.0,2,2,1,1,2,0,1,1,0,0,,0,0,0,0,0,TensorProto
217,361384,get_axis_size,1,cv.dnn.cuda4dnn.csl.TensorView.get_axis_size,size_type cv.dnn.cuda4dnn.csl.TensorView.get_axis_size (int),src\cuda4dnn\csl\tensor.hpp,"size_type get_axis_size(int axis) const noexcept {
            axis = clamp_axis(axis, rank());
            CV_Assert(axis >= 0 && axis < rank());
            return shape[axis];
        }",884.0,888.0,9.0,9.0,5.0,5,5,6,2,0,1,1,1,0,0,,0,1,2,1,1,size_type
218,312242,CreateReshapeOptions,1,opencv_tflite.CreateReshapeOptions,"Offset<ReshapeOptions> opencv_tflite.CreateReshapeOptions (ANY,ANY)",misc\tflite\schema_generated.hpp,"inline ::flatbuffers::Offset<ReshapeOptions> CreateReshapeOptions(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> new_shape = 0) {
  ReshapeOptionsBuilder builder_(_fbb);
  builder_.add_new_shape(new_shape);
  return builder_.Finish();
}",4719.0,4725.0,1.0,1.0,7.0,2,1,4,3,1,0,1,1,0,0,,0,0,4,2,2,Offset<ReshapeOptions>
219,132020,_has_bits_,3,opencv_caffe.ConvolutionParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
220,132021,_cached_size_,3,opencv_caffe.ConvolutionParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
221,132022,pad_,3,opencv_caffe.ConvolutionParameter.pad_,,misc\caffe\opencv-caffe.pb.hpp,pad_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
222,132023,kernel_size_,3,opencv_caffe.ConvolutionParameter.kernel_size_,,misc\caffe\opencv-caffe.pb.hpp,kernel_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
223,132024,stride_,3,opencv_caffe.ConvolutionParameter.stride_,,misc\caffe\opencv-caffe.pb.hpp,stride_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
224,132025,dilation_,3,opencv_caffe.ConvolutionParameter.dilation_,,misc\caffe\opencv-caffe.pb.hpp,dilation_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
225,132026,weight_filler_,3,opencv_caffe.ConvolutionParameter.weight_filler_,,misc\caffe\opencv-caffe.pb.hpp,* weight_filler_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
226,132027,bias_filler_,3,opencv_caffe.ConvolutionParameter.bias_filler_,,misc\caffe\opencv-caffe.pb.hpp,* bias_filler_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
227,132028,num_output_,3,opencv_caffe.ConvolutionParameter.num_output_,,misc\caffe\opencv-caffe.pb.hpp,num_output_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
228,132029,pad_h_,3,opencv_caffe.ConvolutionParameter.pad_h_,,misc\caffe\opencv-caffe.pb.hpp,pad_h_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
229,148412,engine_,3,opencv_caffe.SigmoidParameter.engine_,,misc\caffe\opencv-caffe.pb.hpp,engine_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
230,132030,pad_w_,3,opencv_caffe.ConvolutionParameter.pad_w_,,misc\caffe\opencv-caffe.pb.hpp,pad_w_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
231,132031,kernel_h_,3,opencv_caffe.ConvolutionParameter.kernel_h_,,misc\caffe\opencv-caffe.pb.hpp,kernel_h_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
232,132033,stride_h_,3,opencv_caffe.ConvolutionParameter.stride_h_,,misc\caffe\opencv-caffe.pb.hpp,stride_h_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
233,148411,_cached_size_,3,opencv_caffe.SigmoidParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
234,132035,engine_,3,opencv_caffe.ConvolutionParameter.engine_,,misc\caffe\opencv-caffe.pb.hpp,engine_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
235,132034,stride_w_,3,opencv_caffe.ConvolutionParameter.stride_w_,,misc\caffe\opencv-caffe.pb.hpp,stride_w_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
236,132032,kernel_w_,3,opencv_caffe.ConvolutionParameter.kernel_w_,,misc\caffe\opencv-caffe.pb.hpp,kernel_w_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
237,132036,force_nd_im2col_,3,opencv_caffe.ConvolutionParameter.force_nd_im2col_,,misc\caffe\opencv-caffe.pb.hpp,force_nd_im2col_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
238,132037,axis_,3,opencv_caffe.ConvolutionParameter.axis_,,misc\caffe\opencv-caffe.pb.hpp,axis_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
239,132038,bias_term_,3,opencv_caffe.ConvolutionParameter.bias_term_,,misc\caffe\opencv-caffe.pb.hpp,bias_term_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
240,132039,group_,3,opencv_caffe.ConvolutionParameter.group_,,misc\caffe\opencv-caffe.pb.hpp,group_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
241,312261,CreateReshapeOptionsDirect,1,opencv_tflite.CreateReshapeOptionsDirect,"Offset<ReshapeOptions> opencv_tflite.CreateReshapeOptionsDirect (ANY,ANY*)",misc\tflite\schema_generated.hpp,"inline ::flatbuffers::Offset<ReshapeOptions> CreateReshapeOptionsDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int32_t> *new_shape = nullptr) {
  auto new_shape__ = new_shape ? _fbb.CreateVector<int32_t>(*new_shape) : 0;
  return opencv_tflite::CreateReshapeOptions(
      _fbb,
      new_shape__);
}",4727.0,4734.0,1.0,1.0,8.0,7,6,8,5,0,1,1,1,0,1,,0,0,4,2,2,Offset<ReshapeOptions>
242,82885,InternalSwap,1,opencv_caffe.SigmoidParameter.InternalSwap,void opencv_caffe.SigmoidParameter.InternalSwap (SigmoidParameter*),misc\caffe\opencv-caffe.pb.cc,"void SigmoidParameter::InternalSwap(SigmoidParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(engine_, other->engine_);
}",26702.0,26707.0,1.0,1.0,6.0,7,4,6,4,0,4,1,1,0,0,,0,4,2,1,1,void
243,377806,stream,3,cv.dnn.cuda4dnn.ROIPoolingOp.stream,,src\cuda4dnn\primitives\roi_pooling.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
244,377807,spatial_scale,3,cv.dnn.cuda4dnn.ROIPoolingOp.spatial_scale,,src\cuda4dnn\primitives\roi_pooling.hpp,spatial_scale,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
245,426959,numReferences,1,cv.dnn.detail.BlobManager.numReferences,int cv.dnn.detail.BlobManager.numReferences (LayerPin),src\legacy_backend.hpp,"int numReferences(const LayerPin& lp)
    {
        std::map<LayerPin, LayerPin>::const_iterator mapIt = reuseMap.find(lp);
        CV_Assert(mapIt != reuseMap.end());
        LayerPin memHost = mapIt->second;

        std::map<LayerPin, int>::const_iterator refIt = refCounter.find(memHost);
        CV_Assert(refIt != refCounter.end());
        return refIt->second;
    }",132.0,141.0,5.0,5.0,10.0,11,4,13,6,0,4,1,1,0,0,,0,4,2,1,1,int
246,377809,<lambda>0,1,cv.dnn.cuda4dnn.ScaleShiftOp.forward.<lambda>0,ANY cv.dnn.cuda4dnn.ScaleShiftOp.forward.<lambda>0 (),src\cuda4dnn\primitives\scale_shift.hpp,"[&] {
                if (num_parameters == 1) {
                    return static_cast<int>(axis + 1);
                }
                for (int endAxis = axis + 1; endAxis <= input.rank(); endAxis++) {
                    if (input.size_range(axis, endAxis) == mid_size)
                        return endAxis;
                }
                CV_Assert(0 /* failed to find a broadcast config */);
            }",130.0,139.0,34.0,13.0,10.0,9,6,11,5,1,3,4,5,1,0,,0,3,0,0,0,ANY
247,82912,GetMetadata,1,opencv_caffe.SigmoidParameter.GetMetadata,Metadata opencv_caffe.SigmoidParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata SigmoidParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[56]);
}",26709.0,26713.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
248,312291,fbb_,3,opencv_tflite.SpaceToBatchNDOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
249,312292,start_,3,opencv_tflite.SpaceToBatchNDOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
250,312293,SpaceToBatchNDOptionsBuilder,1,opencv_tflite.SpaceToBatchNDOptionsBuilder.SpaceToBatchNDOptionsBuilder,ANY opencv_tflite.SpaceToBatchNDOptionsBuilder.SpaceToBatchNDOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit SpaceToBatchNDOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",4748.0,4751.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
251,361455,shape_as_vector,1,cv.dnn.cuda4dnn.csl.TensorView.shape_as_vector,vector<size_type> cv.dnn.cuda4dnn.csl.TensorView.shape_as_vector (),src\cuda4dnn\csl\tensor.hpp,"std::vector<size_type> shape_as_vector() const {
            CV_Assert(!empty());
            return std::vector<size_type>(std::begin(shape), std::end(shape));
        }",920.0,923.0,9.0,9.0,4.0,8,6,6,3,0,2,1,1,0,0,,0,2,0,0,0,vector<size_type>
252,312304,Finish,1,opencv_tflite.SpaceToBatchNDOptionsBuilder.Finish,Offset<SpaceToBatchNDOptions> opencv_tflite.SpaceToBatchNDOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<SpaceToBatchNDOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SpaceToBatchNDOptions>(end);
    return o;
  }",4752.0,4756.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<SpaceToBatchNDOptions>
253,263161,MergeFrom,1,opencv_tensorflow.NameAttrList.MergeFrom,void opencv_tensorflow.NameAttrList.MergeFrom (NameAttrList),misc\tensorflow\attr_value.pb.cc,"void NameAttrList::MergeFrom(const NameAttrList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_tensorflow.NameAttrList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  attr_.MergeFrom(from.attr_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",1477.0,1488.0,1.0,1.0,12.0,14,7,10,5,1,2,2,2,0,0,,0,2,2,1,1,void
254,427004,reuse,1,cv.dnn.detail.BlobManager.reuse,"void cv.dnn.detail.BlobManager.reuse (LayerPin,LayerPin)",src\legacy_backend.hpp,"void reuse(const LayerPin& host, const LayerPin& user)
    {
        CV_Assert(reuseMap.find(user) == reuseMap.end());
        CV_Assert(reuseMap.find(host) != reuseMap.end());
        LayerPin memHost = reuseMap[host];
        reuseMap[user] = memHost;
        if (refCounter.find(memHost) != refCounter.end())
        {
            std::map<LayerPin, int>::iterator userRefIt = refCounter.find(user);
            if (userRefIt != refCounter.end())
            {
                refCounter[memHost] += userRefIt->second;
                refCounter.erase(userRefIt);
            }
            else
                refCounter[memHost] += 1;
        }
    }",144.0,161.0,5.0,5.0,18.0,21,7,25,6,0,12,3,4,3,0,,0,12,4,2,2,void
255,82943,set_has_slice_dim,1,opencv_caffe._Internal.set_has_slice_dim,void opencv_caffe._Internal.set_has_slice_dim (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_slice_dim(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }",26723.0,26725.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
256,361481,get,1,cv.dnn.cuda4dnn.csl.TensorView.get,const_pointer cv.dnn.cuda4dnn.csl.TensorView.get (),src\cuda4dnn\csl\tensor.hpp,const_pointer get() const noexcept { return ptr; },926.0,926.0,9.0,58.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,const_pointer
257,361487,reshape,1,cv.dnn.cuda4dnn.csl.TensorView.reshape,"type cv.dnn.cuda4dnn.csl.TensorView.reshape<ForwardItr> (ForwardItr,ForwardItr)",src\cuda4dnn\csl\tensor.hpp,"void reshape(Sizes... new_sizes_) {
            static_assert(sizeof...(Sizes) <= CSL_MAX_TENSOR_RANK, ""required rank exceeds maximum supported rank"");
            static_assert(sizeof...(Sizes) > 0, ""no sizes provided"");
            std::array<std::int64_t, sizeof...(Sizes)> new_sizes = { static_cast<std::int64_t>(new_sizes_)... };
            reshape(std::begin(new_sizes), std::end(new_sizes));
        }",994.0,999.0,9.0,46.0,6.0,33,8,48,9,0,5,6,7,0,0,,0,5,2,1,1,void
258,17430,InternalSwap,1,opencv_caffe.FillerParameter.InternalSwap,void opencv_caffe.FillerParameter.InternalSwap (FillerParameter*),misc\caffe\opencv-caffe.pb.cc,"void FillerParameter::InternalSwap(FillerParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      nullptr,
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FillerParameter, variance_norm_)
      + sizeof(FillerParameter::variance_norm_)
      - PROTOBUF_FIELD_OFFSET(FillerParameter, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
  swap(sparse_, other->sparse_);
  swap(max_, other->max_);
  swap(std_, other->std_);
}",7513.0,7533.0,1.0,1.0,21.0,33,13,29,15,0,15,1,1,0,0,,0,15,2,1,1,void
259,312344,fbb_,3,opencv_tflite.BatchToSpaceNDOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
260,312345,start_,3,opencv_tflite.BatchToSpaceNDOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
261,312346,BatchToSpaceNDOptionsBuilder,1,opencv_tflite.BatchToSpaceNDOptionsBuilder.BatchToSpaceNDOptionsBuilder,ANY opencv_tflite.BatchToSpaceNDOptionsBuilder.BatchToSpaceNDOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit BatchToSpaceNDOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",4777.0,4780.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
262,345114,val_,3,opencv_test.Conv3DParamID.val_,,perf\perf_convolution3d.cpp,val_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
263,377886,scaleMode,3,cv.dnn.cuda4dnn.ScaleShiftConfiguration.scaleMode,,src\cuda4dnn\primitives\scale_shift.hpp,scaleMode,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
264,377887,shiftMode,3,cv.dnn.cuda4dnn.ScaleShiftConfiguration.shiftMode,,src\cuda4dnn\primitives\scale_shift.hpp,shiftMode,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
265,295968,GetCachedSize,1,opencv_tensorflow.TensorProto.GetCachedSize,int opencv_tensorflow.TensorProto.GetCachedSize (),misc\tensorflow\tensor.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },161.0,161.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
266,345120,operator int,1,opencv_test.Conv3DParamID.operator int,ANY opencv_test.Conv3DParamID.operator int (),perf\perf_convolution3d.cpp,operator int() const { return val_; },51.0,51.0,5.0,41.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,ANY
267,377890,ScaleShiftOp,1,cv.dnn.cuda4dnn.ScaleShiftOp.ScaleShiftOp,"ANY cv.dnn.cuda4dnn.ScaleShiftOp.ScaleShiftOp (ANY,ScaleShiftConfiguration,ANY,ANY)",src\cuda4dnn\primitives\scale_shift.hpp,"ScaleShiftOp(csl::Stream stream_, const ScaleShiftConfiguration& config, const cv::Mat& weights, const cv::Mat& bias)
            : stream(std::move(stream_)), axis{ config.axis }
        {
            scaleMode = config.scaleMode;
            if (scaleMode == ScaleShiftConfiguration::OpMode::TRAINABLE)
            {
                CV_Assert(!weights.empty());
                weightsTensor = csl::makeTensorHeader<T>(weights);
                csl::copyMatToTensor<T>(weights, weightsTensor, stream);
            }

            shiftMode = config.shiftMode;
            if (shiftMode == ScaleShiftConfiguration::OpMode::TRAINABLE)
            {
                CV_Assert(!bias.empty());
                biasTensor = csl::makeTensorHeader<T>(bias);
                csl::copyMatToTensor<T>(bias, biasTensor, stream);
            }

            CV_Assert(scaleMode != ScaleShiftConfiguration::OpMode::NONE ||
                      shiftMode != ScaleShiftConfiguration::OpMode::NONE);

            ...",40.0,67.0,9.0,9.0,28.0,48,11,44,14,0,16,4,4,4,0,,0,16,8,4,4,ANY
268,66596,InternalSwap,1,opencv_caffe.ImageDataParameter.InternalSwap,void opencv_caffe.ImageDataParameter.InternalSwap (ImageDataParameter*),misc\caffe\opencv-caffe.pb.cc,"void ImageDataParameter::InternalSwap(ImageDataParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &source_, lhs_arena,
      &other->source_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mean_file_, lhs_arena,
      &other->mean_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &root_folder_, lhs_arena,
      &other->root_folder_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET...",21634.0,21664.0,1.0,1.0,31.0,54,13,49,17,0,19,1,1,0,0,,0,19,2,1,1,void
269,312357,Finish,1,opencv_tflite.BatchToSpaceNDOptionsBuilder.Finish,Offset<BatchToSpaceNDOptions> opencv_tflite.BatchToSpaceNDOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<BatchToSpaceNDOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<BatchToSpaceNDOptions>(end);
    return o;
  }",4781.0,4785.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<BatchToSpaceNDOptions>
270,148536,descriptor,1,opencv_caffe.SliceParameter.descriptor,Descriptor opencv_caffe.SliceParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",16148.0,16150.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
271,148542,GetDescriptor,1,opencv_caffe.SliceParameter.GetDescriptor,Descriptor opencv_caffe.SliceParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",16151.0,16153.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
272,263231,InternalSwap,1,opencv_tensorflow.NameAttrList.InternalSwap,void opencv_tensorflow.NameAttrList.InternalSwap (NameAttrList*),misc\tensorflow\attr_value.pb.cc,"void NameAttrList::InternalSwap(NameAttrList* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  attr_.InternalSwap(&other->attr_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}",1501.0,1512.0,1.0,1.0,12.0,18,4,16,9,0,4,1,1,0,0,,0,4,2,1,1,void
273,83007,SharedCtor,1,opencv_caffe.SliceParameter.SharedCtor,void opencv_caffe.SliceParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void SliceParameter::SharedCtor() {
slice_dim_ = 1u;
axis_ = 1;
}",26749.0,26752.0,1.0,1.0,4.0,2,1,2,2,0,2,1,1,0,0,,0,2,0,0,0,void
274,132163,descriptor,1,opencv_caffe.CropParameter.descriptor,Descriptor opencv_caffe.CropParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",9199.0,9201.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
275,148553,GetReflection,1,opencv_caffe.SliceParameter.GetReflection,Reflection opencv_caffe.SliceParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",16154.0,16156.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
276,132169,GetDescriptor,1,opencv_caffe.CropParameter.GetDescriptor,Descriptor opencv_caffe.CropParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",9202.0,9204.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
277,312397,fbb_,3,opencv_tflite.SkipGramOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
278,312398,start_,3,opencv_tflite.SkipGramOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
279,312399,add_ngram_size,1,opencv_tflite.SkipGramOptionsBuilder.add_ngram_size,void opencv_tflite.SkipGramOptionsBuilder.add_ngram_size (int32_t),misc\tflite\schema_generated.hpp,"void add_ngram_size(int32_t ngram_size) {
    fbb_.AddElement<int32_t>(SkipGramOptions::VT_NGRAM_SIZE, ngram_size, 0);
  }",4823.0,4825.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
280,279633,input_,3,opencv_tensorflow.NodeDef.input_,,misc\tensorflow\graph.pb.hpp,input_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
281,427090,releaseReference,1,cv.dnn.detail.BlobManager.releaseReference,void cv.dnn.detail.BlobManager.releaseReference (LayerPin),src\legacy_backend.hpp,"void releaseReference(const LayerPin& lp)
    {
        std::map<LayerPin, LayerPin>::const_iterator mapIt = reuseMap.find(lp);
        CV_Assert(mapIt != reuseMap.end());

        std::map<LayerPin, int>::iterator refIt = refCounter.find(mapIt->second);
        CV_Assert(refIt != refCounter.end());
        CV_Assert(refIt->second > 0);
        refIt->second -= 1;
    }",164.0,173.0,5.0,5.0,10.0,13,6,12,5,0,4,1,1,0,0,,0,4,2,1,1,void
282,279635,name_,3,opencv_tensorflow.NodeDef.name_,,misc\tensorflow\graph.pb.hpp,name_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
283,279636,op_,3,opencv_tensorflow.NodeDef.op_,,misc\tensorflow\graph.pb.hpp,op_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
284,279634,attr_,3,opencv_tensorflow.NodeDef.attr_,,misc\tensorflow\graph.pb.hpp,attr_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
285,279637,device_,3,opencv_tensorflow.NodeDef.device_,,misc\tensorflow\graph.pb.hpp,device_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
286,148564,default_instance,1,opencv_caffe.SliceParameter.default_instance,SliceParameter opencv_caffe.SliceParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const SliceParameter& default_instance() {
    return *internal_default_instance();
  }",16157.0,16159.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,SliceParameter
287,279638,_cached_size_,3,opencv_tensorflow.NodeDef._cached_size_,,misc\tensorflow\graph.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
288,132180,GetReflection,1,opencv_caffe.CropParameter.GetReflection,Reflection opencv_caffe.CropParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",9205.0,9207.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
289,148571,internal_default_instance,1,opencv_caffe.SliceParameter.internal_default_instance,SliceParameter opencv_caffe.SliceParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const SliceParameter* internal_default_instance() {
    return reinterpret_cast<const SliceParameter*>(
               &_SliceParameter_default_instance_);
  }",16160.0,16163.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,SliceParameter
290,132191,default_instance,1,opencv_caffe.CropParameter.default_instance,CropParameter opencv_caffe.CropParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const CropParameter& default_instance() {
    return *internal_default_instance();
  }",9208.0,9210.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,CropParameter
291,312417,add_max_skip_size,1,opencv_tflite.SkipGramOptionsBuilder.add_max_skip_size,void opencv_tflite.SkipGramOptionsBuilder.add_max_skip_size (int32_t),misc\tflite\schema_generated.hpp,"void add_max_skip_size(int32_t max_skip_size) {
    fbb_.AddElement<int32_t>(SkipGramOptions::VT_MAX_SKIP_SIZE, max_skip_size, 0);
  }",4826.0,4828.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
292,132198,internal_default_instance,1,opencv_caffe.CropParameter.internal_default_instance,CropParameter opencv_caffe.CropParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const CropParameter* internal_default_instance() {
    return reinterpret_cast<const CropParameter*>(
               &_CropParameter_default_instance_);
  }",9211.0,9214.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,CropParameter
293,33905,_InternalParse,1,opencv_caffe.LayerParameter._InternalParse,"const char* opencv_caffe.LayerParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* LayerParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, ""opencv_caffe.LayerParameter.name"");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::PRO...",12049.0,12663.0,1.0,10.0,615.0,430,16,500,10,0,1,162,277,1,1,,0,1,4,2,2,const char*
294,83059,SetCachedSize,1,opencv_caffe.SliceParameter.SetCachedSize,void opencv_caffe.SliceParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void SliceParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",26771.0,26773.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
295,312435,add_include_all_ngrams,1,opencv_tflite.SkipGramOptionsBuilder.add_include_all_ngrams,void opencv_tflite.SkipGramOptionsBuilder.add_include_all_ngrams (bool),misc\tflite\schema_generated.hpp,"void add_include_all_ngrams(bool include_all_ngrams) {
    fbb_.AddElement<uint8_t>(SkipGramOptions::VT_INCLUDE_ALL_NGRAMS, static_cast<uint8_t>(include_all_ngrams), 0);
  }",4829.0,4831.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
296,263286,GetMetadata,1,opencv_tensorflow.NameAttrList.GetMetadata,Metadata opencv_tensorflow.NameAttrList.GetMetadata (),misc\tensorflow\attr_value.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata NameAttrList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_attr_5fvalue_2eproto_getter, &descriptor_table_attr_5fvalue_2eproto_once,
      file_level_metadata_attr_5fvalue_2eproto[3]);
}",1514.0,1518.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
297,17526,GetMetadata,1,opencv_caffe.FillerParameter.GetMetadata,Metadata opencv_caffe.FillerParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata FillerParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[8]);
}",7535.0,7539.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
298,83069,Clear,1,opencv_caffe.SliceParameter.Clear,void opencv_caffe.SliceParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void SliceParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.SliceParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slice_point_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    slice_dim_ = 1u;
    axis_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",26775.0,26789.0,1.0,1.0,15.0,10,5,10,6,0,5,2,2,0,0,,0,5,0,0,0,void
299,312455,SkipGramOptionsBuilder,1,opencv_tflite.SkipGramOptionsBuilder.SkipGramOptionsBuilder,ANY opencv_tflite.SkipGramOptionsBuilder.SkipGramOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit SkipGramOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",4832.0,4835.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
300,312466,Finish,1,opencv_tflite.SkipGramOptionsBuilder.Finish,Offset<SkipGramOptions> opencv_tflite.SkipGramOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<SkipGramOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SkipGramOptions>(end);
    return o;
  }",4836.0,4840.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<SkipGramOptions>
301,17557,set_has_force_backward,1,opencv_caffe._Internal.set_has_force_backward,void opencv_caffe._Internal.set_has_force_backward (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_force_backward(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }",7549.0,7551.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
302,230553,MergeFrom,1,opencv_onnx.ModelProto.MergeFrom,void opencv_onnx.ModelProto.MergeFrom (ModelProto),misc\onnx\opencv-onnx.pb.cc,"void ModelProto::MergeFrom(const ModelProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_onnx.ModelProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  opset_import_.MergeFrom(from.opset_import_);
  metadata_props_.MergeFrom(from.metadata_props_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_producer_name(from._internal_producer_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_producer_version(from._internal_producer_version());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_domain(from._internal_domain());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_doc_string(from._internal_doc_string());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_graph()->::opencv_onnx::GraphProto::MergeFrom(from._internal_graph());
    }
    if ...",2740.0,2774.0,1.0,1.0,35.0,34,9,31,9,0,11,9,16,0,1,,0,10,2,1,1,void
303,427162,reuseOrCreate,1,cv.dnn.detail.BlobManager.reuseOrCreate,"void cv.dnn.detail.BlobManager.reuseOrCreate (MatShape,LayerPin,Mat,int)",src\legacy_backend.hpp,"void reuseOrCreate(const MatShape& shape, const LayerPin& lp, Mat& dst, const int& dtype)
    {
        if (!getParam_DNN_DISABLE_MEMORY_OPTIMIZATIONS())
        {
            Mat bestBlob;
            LayerPin bestBlobPin;

            std::map<LayerPin, Mat>::const_iterator hostIt;
            std::map<LayerPin, int>::const_iterator refIt;

            const int targetTotal = total(shape);
            int bestBlobTotal = INT_MAX;

            for (hostIt = memHosts.begin(); hostIt != memHosts.end(); ++hostIt)
            {
                refIt = refCounter.find(hostIt->first);
                // Use only blobs that had references before because if not,
                // it might be used as output.
                if (refIt != refCounter.end() && refIt->second == 0)
                {
                    const Mat& unusedBlob = hostIt->second;
                    if (unusedBlob.total() >= targetTotal && unusedBlob.total() < bestBlobTotal && unusedBlob.type() == dtype)
            ...",183.0,226.0,5.0,5.0,44.0,37,9,40,14,0,4,6,13,2,0,,0,4,8,4,4,void
304,378018,forward,1,cv.dnn.cuda4dnn.ScaleShiftOp.forward,"void cv.dnn.cuda4dnn.ScaleShiftOp.forward (ANY,ANY,ANY)",src\cuda4dnn\primitives\scale_shift.hpp,"void forward(
            const std::vector<cv::Ptr<BackendWrapper>>& inputs,
            const std::vector<cv::Ptr<BackendWrapper>>& outputs,
            csl::Workspace& workspace) override
        {
            CV_Assert(outputs.size() == 1);

            auto input_wrapper = inputs[0].dynamicCast<wrapper_type>();
            auto input = input_wrapper->getView();

            auto output_wrapper = outputs[0].dynamicCast<wrapper_type>();
            auto output = output_wrapper->getSpan();

            /* number of batches in the weights/bias
             * trainable mode: same for all batches
             * untrainable mode: could be different for different batch samples
             */
            std::size_t parameter_batch_size = 1;

            csl::TensorView<T> weights;
            if (scaleMode == ScaleShiftConfiguration::OpMode::TRAINABLE)
            {
                CV_Assert(!weightsTensor.empty());
                weights = csl::TensorView<T>(weightsTensor);
        ...",69.0,149.0,9.0,9.0,81.0,57,10,51,22,0,8,5,5,2,0,,0,8,6,3,3,void
305,83108,_InternalParse,1,opencv_caffe.SliceParameter._InternalParse,"const char* opencv_caffe.SliceParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* SliceParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 slice_dim = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_slice_dim(&has_bits);
          slice_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 slice_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_slice_point(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr)...",26791.0,26854.0,1.0,10.0,64.0,54,16,56,11,0,5,16,24,0,2,,0,3,4,2,2,const char*
306,127238,descriptor,1,opencv_caffe.TransformationParameter.descriptor,Descriptor opencv_caffe.TransformationParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",7106.0,7108.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
307,17584,set_has_debug_info,1,opencv_caffe._Internal.set_has_debug_info,void opencv_caffe._Internal.set_has_debug_info (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_debug_info(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }",25035.0,25037.0,3.0,3.0,3.0,2,2,1,1,2,0,1,1,0,0,,0,0,2,1,1,void
308,66744,GetMetadata,1,opencv_caffe.ImageDataParameter.GetMetadata,Metadata opencv_caffe.ImageDataParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata ImageDataParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[39]);
}",21666.0,21670.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
309,17595,state,1,opencv_caffe.NetParameter._Internal.state,NetState opencv_caffe.NetParameter._Internal.state (NetParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::NetState&
NetParameter::_Internal::state(const NetParameter* msg) {
  return *msg->state_;
}",7561.0,7564.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,NetState
310,312524,fbb_,3,opencv_tflite.SpaceToDepthOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
311,312525,start_,3,opencv_tflite.SpaceToDepthOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
312,312526,add_block_size,1,opencv_tflite.SpaceToDepthOptionsBuilder.add_block_size,void opencv_tflite.SpaceToDepthOptionsBuilder.add_block_size (int32_t),misc\tflite\schema_generated.hpp,"void add_block_size(int32_t block_size) {
    fbb_.AddElement<int32_t>(SpaceToDepthOptions::VT_BLOCK_SIZE, block_size, 0);
  }",4874.0,4876.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
313,148696,GetCachedSize,1,opencv_caffe.SliceParameter.GetCachedSize,int opencv_caffe.SliceParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },16208.0,16208.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
314,312544,SpaceToDepthOptionsBuilder,1,opencv_tflite.SpaceToDepthOptionsBuilder.SpaceToDepthOptionsBuilder,ANY opencv_tflite.SpaceToDepthOptionsBuilder.SpaceToDepthOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit SpaceToDepthOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",4877.0,4880.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
315,132323,GetCachedSize,1,opencv_caffe.CropParameter.GetCachedSize,int opencv_caffe.CropParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },9259.0,9259.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
316,312555,Finish,1,opencv_tflite.SpaceToDepthOptionsBuilder.Finish,Offset<SpaceToDepthOptions> opencv_tflite.SpaceToDepthOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<SpaceToDepthOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SpaceToDepthOptions>(end);
    return o;
  }",4881.0,4885.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<SpaceToDepthOptions>
317,247030,_has_bits_,3,opencv_onnx.TensorProto._has_bits_,,misc\onnx\opencv-onnx.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
318,247031,_cached_size_,3,opencv_onnx.TensorProto._cached_size_,,misc\onnx\opencv-onnx.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
319,247032,dims_,3,opencv_onnx.TensorProto.dims_,,misc\onnx\opencv-onnx.pb.hpp,dims_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
320,247033,float_data_,3,opencv_onnx.TensorProto.float_data_,,misc\onnx\opencv-onnx.pb.hpp,float_data_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
321,247034,int32_data_,3,opencv_onnx.TensorProto.int32_data_,,misc\onnx\opencv-onnx.pb.hpp,int32_data_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
322,247035,_int32_data_cached_byte_size_,3,opencv_onnx.TensorProto._int32_data_cached_byte_size_,,misc\onnx\opencv-onnx.pb.hpp,_int32_data_cached_byte_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
323,247036,string_data_,3,opencv_onnx.TensorProto.string_data_,,misc\onnx\opencv-onnx.pb.hpp,string_data_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
324,247037,int64_data_,3,opencv_onnx.TensorProto.int64_data_,,misc\onnx\opencv-onnx.pb.hpp,int64_data_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
325,247038,_int64_data_cached_byte_size_,3,opencv_onnx.TensorProto._int64_data_cached_byte_size_,,misc\onnx\opencv-onnx.pb.hpp,_int64_data_cached_byte_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
326,247039,double_data_,3,opencv_onnx.TensorProto.double_data_,,misc\onnx\opencv-onnx.pb.hpp,double_data_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
327,247040,uint64_data_,3,opencv_onnx.TensorProto.uint64_data_,,misc\onnx\opencv-onnx.pb.hpp,uint64_data_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
328,247041,_uint64_data_cached_byte_size_,3,opencv_onnx.TensorProto._uint64_data_cached_byte_size_,,misc\onnx\opencv-onnx.pb.hpp,_uint64_data_cached_byte_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
329,247042,name_,3,opencv_onnx.TensorProto.name_,,misc\onnx\opencv-onnx.pb.hpp,name_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
330,247043,raw_data_,3,opencv_onnx.TensorProto.raw_data_,,misc\onnx\opencv-onnx.pb.hpp,raw_data_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
331,247044,doc_string_,3,opencv_onnx.TensorProto.doc_string_,,misc\onnx\opencv-onnx.pb.hpp,doc_string_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
332,247045,segment_,3,opencv_onnx.TensorProto.segment_,,misc\onnx\opencv-onnx.pb.hpp,* segment_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
333,247046,data_type_,3,opencv_onnx.TensorProto.data_type_,,misc\onnx\opencv-onnx.pb.hpp,data_type_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
334,50441,ByteSizeLong,1,opencv_caffe.ConvolutionParameter.ByteSizeLong,size_t opencv_caffe.ConvolutionParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t ConvolutionParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.ConvolutionParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 pad = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->pad_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_pad_size());
    total_size += data_size;
  }

  // repeated uint32 kernel_size = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->kernel_size_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_kernel_size_size());
    total_size += data_size;
  }

  // repeated uint32 stride = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat...",16721.0,16848.0,1.0,1.0,128.0,134,11,111,10,0,8,17,31,0,0,,0,8,0,0,0,size_t
335,361738,squeeze,1,cv.dnn.cuda4dnn.csl.TensorView.squeeze,void cv.dnn.cuda4dnn.csl.TensorView.squeeze (),src\cuda4dnn\csl\tensor.hpp,"void squeeze(int axis) {
            CV_Assert(!empty());
            CV_Assert(rank() >= 2);
            axis = clamp_axis(axis, rank());
            CV_Assert(axis >= 0 && axis < rank());
            shape.erase(std::begin(shape) + axis);
        }",1045.0,1051.0,9.0,9.0,7.0,9,5,10,3,0,4,1,1,0,0,,0,4,2,1,1,void
336,66832,SharedCtor,1,opencv_caffe.InfogainLossParameter.SharedCtor,void opencv_caffe.InfogainLossParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void InfogainLossParameter::SharedCtor() {
source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}",21706.0,21711.0,1.0,1.0,6.0,4,2,3,3,0,1,1,1,0,0,,0,1,0,0,0,void
337,312601,fbb_,3,opencv_tflite.DepthToSpaceOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
338,312602,start_,3,opencv_tflite.DepthToSpaceOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
339,312603,add_block_size,1,opencv_tflite.DepthToSpaceOptionsBuilder.add_block_size,void opencv_tflite.DepthToSpaceOptionsBuilder.add_block_size (int32_t),misc\tflite\schema_generated.hpp,"void add_block_size(int32_t block_size) {
    fbb_.AddElement<int32_t>(DepthToSpaceOptions::VT_BLOCK_SIZE, block_size, 0);
  }",4915.0,4917.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
340,17705,SharedCtor,1,opencv_caffe.NetParameter.SharedCtor,void opencv_caffe.NetParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void NetParameter::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&debug_info_) -
    reinterpret_cast<char*>(&state_)) + sizeof(debug_info_));
}",7607.0,7616.0,1.0,1.0,10.0,20,6,7,5,0,5,1,1,0,0,,0,5,0,0,0,void
341,427308,allocateBlobsForLayer,1,cv.dnn.detail.BlobManager.allocateBlobsForLayer,"void cv.dnn.detail.BlobManager.allocateBlobsForLayer (LayerData,LayerShapes,ANY)",src\legacy_backend.hpp,"void allocateBlobsForLayer(LayerData& ld, const LayerShapes& layerShapes,
            std::vector<LayerPin>& pinsForInternalBlobs)
    {
        CV_TRACE_FUNCTION();

        pinsForInternalBlobs.clear();

        std::vector<Mat>&outputBlobs = ld.outputBlobs,
        &internalBlobs = ld.internals;

        const ShapesVec &outShapes = layerShapes.out,
                        internalShapes = layerShapes.internal;

        outputBlobs.resize(std::max((size_t)1, outShapes.size()));  // layer produce at least one output blob
        internalBlobs.resize(internalShapes.size());

        CV_Assert(ld.requiredOutputs.size() <= outShapes.size());

        // Check that layer could work in-place.
        bool inPlace = false;
        if (layerShapes.supportInPlace)
        {
            if (ld.inputBlobs.size() == 1)
            {
                // Get number of references to the input memory.
                int numRef = numReferences(ld.inputBlobsId[0]);
                // If current la...",228.0,304.0,5.0,5.0,77.0,87,12,81,18,0,15,11,19,2,0,,0,15,6,3,3,void
342,312621,DepthToSpaceOptionsBuilder,1,opencv_tflite.DepthToSpaceOptionsBuilder.DepthToSpaceOptionsBuilder,ANY opencv_tflite.DepthToSpaceOptionsBuilder.DepthToSpaceOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit DepthToSpaceOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",4918.0,4921.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
343,66862,SharedDtor,1,opencv_caffe.InfogainLossParameter.SharedDtor,void opencv_caffe.InfogainLossParameter.SharedDtor (),misc\caffe\opencv-caffe.pb.cc,"inline void InfogainLossParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}",21720.0,21723.0,1.0,1.0,4.0,5,3,3,3,0,1,1,1,0,0,,0,1,0,0,0,void
344,230705,InternalSwap,1,opencv_onnx.ModelProto.InternalSwap,void opencv_onnx.ModelProto.InternalSwap (ModelProto*),misc\onnx\opencv-onnx.pb.cc,"void ModelProto::InternalSwap(ModelProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  opset_import_.InternalSwap(&other->opset_import_);
  metadata_props_.InternalSwap(&other->metadata_props_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &producer_name_, lhs_arena,
      &other->producer_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &producer_version_, lhs_arena,
      &other->producer_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &domain_, lhs_arena,...",2787.0,2821.0,1.0,1.0,35.0,66,13,56,17,0,19,1,1,0,0,,0,19,2,1,1,void
345,312632,Finish,1,opencv_tflite.DepthToSpaceOptionsBuilder.Finish,Offset<DepthToSpaceOptions> opencv_tflite.DepthToSpaceOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<DepthToSpaceOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DepthToSpaceOptions>(end);
    return o;
  }",4922.0,4926.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<DepthToSpaceOptions>
346,66900,SetCachedSize,1,opencv_caffe.InfogainLossParameter.SetCachedSize,void opencv_caffe.InfogainLossParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void InfogainLossParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",21731.0,21733.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
347,361814,squeeze_to,1,cv.dnn.cuda4dnn.csl.TensorView.squeeze_to,void cv.dnn.cuda4dnn.csl.TensorView.squeeze_to (int),src\cuda4dnn\csl\tensor.hpp,"void squeeze_to(int r) {
            CV_Assert(!empty());
            CV_Assert(rank() >= r);
            CV_Assert(std::all_of(std::begin(shape), std::end(shape) - r, [](size_type x){ return x == 1; }));
            std::copy(std::end(shape) - r, std::end(shape), std::begin(shape));
            shape.resize(r);
        }",1065.0,1071.0,9.0,9.0,7.0,12,4,17,3,0,6,1,1,0,0,,0,6,2,1,1,void
348,66910,Clear,1,opencv_caffe.InfogainLossParameter.Clear,void opencv_caffe.InfogainLossParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void InfogainLossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.InfogainLossParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    source_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",21735.0,21747.0,1.0,1.0,13.0,8,5,8,4,0,3,2,2,0,0,,0,3,0,0,0,void
349,312678,fbb_,3,opencv_tflite.SubOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
350,312679,start_,3,opencv_tflite.SubOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
351,312680,add_fused_activation_function,1,opencv_tflite.SubOptionsBuilder.add_fused_activation_function,void opencv_tflite.SubOptionsBuilder.add_fused_activation_function (ANY),misc\tflite\schema_generated.hpp,"void add_fused_activation_function(opencv_tflite::ActivationFunctionType fused_activation_function) {
    fbb_.AddElement<int8_t>(SubOptions::VT_FUSED_ACTIVATION_FUNCTION, static_cast<int8_t>(fused_activation_function), 0);
  }",4961.0,4963.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
352,17768,SharedDtor,1,opencv_caffe.NetParameter.SharedDtor,void opencv_caffe.NetParameter.SharedDtor (),misc\caffe\opencv-caffe.pb.cc,"inline void NetParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete state_;
}",7625.0,7629.0,1.0,1.0,5.0,7,5,4,4,0,3,2,2,1,0,,0,3,0,0,0,void
353,312700,add_pot_scale_int16,1,opencv_tflite.SubOptionsBuilder.add_pot_scale_int16,void opencv_tflite.SubOptionsBuilder.add_pot_scale_int16 (bool),misc\tflite\schema_generated.hpp,"void add_pot_scale_int16(bool pot_scale_int16) {
    fbb_.AddElement<uint8_t>(SubOptions::VT_POT_SCALE_INT16, static_cast<uint8_t>(pot_scale_int16), 1);
  }",4964.0,4966.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
354,66943,_InternalParse,1,opencv_caffe.InfogainLossParameter._InternalParse,"const char* opencv_caffe.InfogainLossParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* InfogainLossParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, ""opencv_caffe.InfogainLossParameter.source"");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(pt...",21749.0,21790.0,1.0,10.0,42.0,31,12,38,9,0,1,9,9,0,0,,0,1,4,2,2,const char*
355,263552,descriptor,1,opencv_tensorflow.AttrValue_ListValue.descriptor,Descriptor opencv_tensorflow.AttrValue_ListValue.descriptor (),misc\tensorflow\attr_value.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",117.0,119.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
356,132483,_has_bits_,3,opencv_caffe.CropParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
357,132484,_cached_size_,3,opencv_caffe.CropParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
358,132485,offset_,3,opencv_caffe.CropParameter.offset_,,misc\caffe\opencv-caffe.pb.hpp,offset_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
359,263558,GetDescriptor,1,opencv_tensorflow.AttrValue_ListValue.GetDescriptor,Descriptor opencv_tensorflow.AttrValue_ListValue.GetDescriptor (),misc\tensorflow\attr_value.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",120.0,122.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
360,132486,axis_,3,opencv_caffe.CropParameter.axis_,,misc\caffe\opencv-caffe.pb.hpp,axis_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
361,1417,type,3,cv.dnn.details._LayerStaticRegisterer.type,,include\opencv2\dnn\layer.details.hpp,type,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
362,1418,_LayerStaticRegisterer,1,cv.dnn.details._LayerStaticRegisterer._LayerStaticRegisterer,"ANY cv.dnn.details._LayerStaticRegisterer._LayerStaticRegisterer (String,ANY)",include\opencv2\dnn\layer.details.hpp,"_LayerStaticRegisterer(const String &layerType, LayerFactory::Constructor layerConstructor)
    {
        this->type = layerType;
        LayerFactory::registerLayer(layerType, layerConstructor);
    }",62.0,66.0,5.0,5.0,5.0,3,3,4,3,0,1,1,1,0,0,,0,1,4,2,2,ANY
363,361870,unsqueeze,1,cv.dnn.cuda4dnn.csl.TensorView.unsqueeze,void cv.dnn.cuda4dnn.csl.TensorView.unsqueeze (int),src\cuda4dnn\csl\tensor.hpp,"void unsqueeze(int axis = 0) {
            CV_Assert(!empty());
            CV_Assert(rank() < CSL_MAX_TENSOR_RANK);
            axis = clamp_axis(axis, rank());
            CV_Assert(axis >= 0 && axis < rank());
            shape.insert(std::begin(shape) + axis, 1);
        }",1083.0,1089.0,9.0,31.0,7.0,9,7,8,3,0,2,1,1,0,0,,0,2,2,1,1,void
364,312720,SubOptionsBuilder,1,opencv_tflite.SubOptionsBuilder.SubOptionsBuilder,ANY opencv_tflite.SubOptionsBuilder.SubOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit SubOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",4967.0,4970.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
365,263569,GetReflection,1,opencv_tensorflow.AttrValue_ListValue.GetReflection,Reflection opencv_tensorflow.AttrValue_ListValue.GetReflection (),misc\tensorflow\attr_value.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",123.0,125.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
366,17813,SetCachedSize,1,opencv_caffe.NetParameter.SetCachedSize,void opencv_caffe.NetParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void NetParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",7637.0,7639.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
367,148890,_has_bits_,3,opencv_caffe.SliceParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
368,312731,Finish,1,opencv_tflite.SubOptionsBuilder.Finish,Offset<SubOptions> opencv_tflite.SubOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<SubOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SubOptions>(end);
    return o;
  }",4971.0,4975.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<SubOptions>
369,148892,slice_point_,3,opencv_caffe.SliceParameter.slice_point_,,misc\caffe\opencv-caffe.pb.hpp,slice_point_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
370,148893,slice_dim_,3,opencv_caffe.SliceParameter.slice_dim_,,misc\caffe\opencv-caffe.pb.hpp,slice_dim_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
371,148891,_cached_size_,3,opencv_caffe.SliceParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
372,17823,Clear,1,opencv_caffe.NetParameter.Clear,void opencv_caffe.NetParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void NetParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.NetParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layers_.Clear();
  input_.Clear();
  input_dim_.Clear();
  input_shape_.Clear();
  layer_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(state_ != nullptr);
      state_->Clear();
    }
  }
  ::memset(&force_backward_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&debug_info_) -
      reinterpret_cast<char*>(&force_backward_)) + sizeof(debug_info_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",7641.0,7667.0,1.0,1.0,27.0,27,11,21,12,0,14,4,6,0,0,,0,14,0,0,0,void
373,263580,default_instance,1,opencv_tensorflow.AttrValue_ListValue.default_instance,AttrValue_ListValue opencv_tensorflow.AttrValue_ListValue.default_instance (),misc\tensorflow\attr_value.pb.hpp,"static const AttrValue_ListValue& default_instance() {
    return *internal_default_instance();
  }",126.0,128.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,AttrValue_ListValue
374,148894,axis_,3,opencv_caffe.SliceParameter.axis_,,misc\caffe\opencv-caffe.pb.hpp,axis_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
375,1435,~_LayerStaticRegisterer,1,cv.dnn.details._LayerStaticRegisterer.~_LayerStaticRegisterer,ANY cv.dnn.details._LayerStaticRegisterer.~_LayerStaticRegisterer (),include\opencv2\dnn\layer.details.hpp,"~_LayerStaticRegisterer()
    {
        LayerFactory::unregisterLayer(type);
    }",68.0,71.0,5.0,5.0,4.0,1,1,2,2,0,1,1,1,0,0,,0,1,0,0,0,ANY
376,263587,internal_default_instance,1,opencv_tensorflow.AttrValue_ListValue.internal_default_instance,AttrValue_ListValue opencv_tensorflow.AttrValue_ListValue.internal_default_instance (),misc\tensorflow\attr_value.pb.hpp,"static inline const AttrValue_ListValue* internal_default_instance() {
    return reinterpret_cast<const AttrValue_ListValue*>(
               &_AttrValue_ListValue_default_instance_);
  }",129.0,132.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,AttrValue_ListValue
377,247209,descriptor,1,opencv_onnx.TensorShapeProto_Dimension.descriptor,Descriptor opencv_onnx.TensorShapeProto_Dimension.descriptor (),misc\onnx\opencv-onnx.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",2640.0,2642.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
378,83371,_InternalSerialize,1,opencv_caffe.SliceParameter._InternalSerialize,"uint8_t opencv_caffe.SliceParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* SliceParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.SliceParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 slice_dim = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_slice_dim(), target);
  }

  // repeated uint32 slice_point = 2;
  for (int i = 0, n = this->_internal_slice_point_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_slice_point(i), target);
  }

  // optional int32 axis = 3 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PRO...",26856.0,26887.0,1.0,1.0,32.0,42,8,47,12,0,1,5,5,0,0,,0,1,4,2,2,uint8_t
379,247215,GetDescriptor,1,opencv_onnx.TensorShapeProto_Dimension.GetDescriptor,Descriptor opencv_onnx.TensorShapeProto_Dimension.GetDescriptor (),misc\onnx\opencv-onnx.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",2643.0,2645.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
380,361909,subview,1,cv.dnn.cuda4dnn.csl.TensorView.subview,"type cv.dnn.cuda4dnn.csl.TensorView.subview<ForwardItr> (size_type,ForwardItr,ForwardItr)",src\cuda4dnn\csl\tensor.hpp,"TensorView subview(size_type offset, Sizes... new_sizes_) const {
            static_assert(sizeof...(Sizes) <= CSL_MAX_TENSOR_RANK, ""required rank exceeds maximum supported rank"");
            static_assert(sizeof...(Sizes) > 0, ""no sizes provided"");
            std::array<std::int64_t, sizeof...(Sizes)> new_sizes = { static_cast<std::int64_t>(new_sizes_)... };
            return subview(offset, std::begin(new_sizes), std::end(new_sizes));
        }",1138.0,1143.0,9.0,46.0,6.0,20,8,32,11,0,3,3,3,0,0,,0,3,4,2,2,TensorView
381,116151,_has_bits_,3,opencv_caffe.PriorBoxParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
382,116152,_cached_size_,3,opencv_caffe.PriorBoxParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
383,116153,min_size_,3,opencv_caffe.PriorBoxParameter.min_size_,,misc\caffe\opencv-caffe.pb.hpp,min_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
384,116154,max_size_,3,opencv_caffe.PriorBoxParameter.max_size_,,misc\caffe\opencv-caffe.pb.hpp,max_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
385,116155,aspect_ratio_,3,opencv_caffe.PriorBoxParameter.aspect_ratio_,,misc\caffe\opencv-caffe.pb.hpp,aspect_ratio_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
386,116156,variance_,3,opencv_caffe.PriorBoxParameter.variance_,,misc\caffe\opencv-caffe.pb.hpp,variance_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
387,116157,offset_h_,3,opencv_caffe.PriorBoxParameter.offset_h_,,misc\caffe\opencv-caffe.pb.hpp,offset_h_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
388,116158,offset_w_,3,opencv_caffe.PriorBoxParameter.offset_w_,,misc\caffe\opencv-caffe.pb.hpp,offset_w_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
389,116159,width_,3,opencv_caffe.PriorBoxParameter.width_,,misc\caffe\opencv-caffe.pb.hpp,width_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
390,116160,height_,3,opencv_caffe.PriorBoxParameter.height_,,misc\caffe\opencv-caffe.pb.hpp,height_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
391,116161,img_size_,3,opencv_caffe.PriorBoxParameter.img_size_,,misc\caffe\opencv-caffe.pb.hpp,img_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
392,116162,img_h_,3,opencv_caffe.PriorBoxParameter.img_h_,,misc\caffe\opencv-caffe.pb.hpp,img_h_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
393,116163,img_w_,3,opencv_caffe.PriorBoxParameter.img_w_,,misc\caffe\opencv-caffe.pb.hpp,img_w_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
394,116164,step_,3,opencv_caffe.PriorBoxParameter.step_,,misc\caffe\opencv-caffe.pb.hpp,step_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
395,116165,step_h_,3,opencv_caffe.PriorBoxParameter.step_h_,,misc\caffe\opencv-caffe.pb.hpp,step_h_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
396,116166,step_w_,3,opencv_caffe.PriorBoxParameter.step_w_,,misc\caffe\opencv-caffe.pb.hpp,step_w_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
397,116167,flip_,3,opencv_caffe.PriorBoxParameter.flip_,,misc\caffe\opencv-caffe.pb.hpp,flip_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
398,116168,clip_,3,opencv_caffe.PriorBoxParameter.clip_,,misc\caffe\opencv-caffe.pb.hpp,clip_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
399,345545,einsumInpShapes,3,opencv_test.EinsumParams.einsumInpShapes,,perf\perf_einsum.cpp,einsumInpShapes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
400,345546,EinsumParams,1,opencv_test.EinsumParams.EinsumParams,"ANY opencv_test.EinsumParams.EinsumParams (ANY,ANY)",perf\perf_einsum.cpp,"EinsumParams(std::string equation_, std::vector<MatShape> einsumInpShapes_ = std::vector<MatShape>())
    {
        inputSize = einsumInpShapes_.size();
        equation = equation_;
        einsumInpShapes = einsumInpShapes_;
    }",14.0,19.0,5.0,5.0,6.0,4,2,6,5,0,3,1,1,0,0,,0,3,4,2,2,ANY
401,345544,equation,3,opencv_test.EinsumParams.equation,,perf\perf_einsum.cpp,equation,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
402,116169,offset_,3,opencv_caffe.PriorBoxParameter.offset_,,misc\caffe\opencv-caffe.pb.hpp,offset_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
403,247245,kDimValue,3,opencv_onnx.TensorShapeProto_Dimension.ValueCase.kDimValue,,misc\onnx\opencv-onnx.pb.hpp,kDimValue = 1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
404,247246,kDimParam,3,opencv_onnx.TensorShapeProto_Dimension.ValueCase.kDimParam,,misc\onnx\opencv-onnx.pb.hpp,kDimParam = 2,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
405,312783,fbb_,3,opencv_tflite.DivOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
406,247247,VALUE_NOT_SET,3,opencv_onnx.TensorShapeProto_Dimension.ValueCase.VALUE_NOT_SET,,misc\onnx\opencv-onnx.pb.hpp,VALUE_NOT_SET = 0,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
407,312784,start_,3,opencv_tflite.DivOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
408,312785,add_fused_activation_function,1,opencv_tflite.DivOptionsBuilder.add_fused_activation_function,void opencv_tflite.DivOptionsBuilder.add_fused_activation_function (ANY),misc\tflite\schema_generated.hpp,"void add_fused_activation_function(opencv_tflite::ActivationFunctionType fused_activation_function) {
    fbb_.AddElement<int8_t>(DivOptions::VT_FUSED_ACTIVATION_FUNCTION, static_cast<int8_t>(fused_activation_function), 0);
  }",5007.0,5009.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
409,230877,GetMetadata,1,opencv_onnx.ModelProto.GetMetadata,Metadata opencv_onnx.ModelProto.GetMetadata (),misc\onnx\opencv-onnx.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata ModelProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2donnx_2eproto_getter, &descriptor_table_opencv_2donnx_2eproto_once,
      file_level_metadata_opencv_2donnx_2eproto[3]);
}",2823.0,2827.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
410,378334,stream,3,cv.dnn.cuda4dnn.ScaleShiftOp.stream,,src\cuda4dnn\primitives\scale_shift.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
411,378335,weightsTensor,3,cv.dnn.cuda4dnn.ScaleShiftOp.weightsTensor,,src\cuda4dnn\primitives\scale_shift.hpp,weightsTensor,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
412,378336,biasTensor,3,cv.dnn.cuda4dnn.ScaleShiftOp.biasTensor,,src\cuda4dnn\primitives\scale_shift.hpp,biasTensor,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
413,378337,axis,3,cv.dnn.cuda4dnn.ScaleShiftOp.axis,,src\cuda4dnn\primitives\scale_shift.hpp,axis,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
414,378338,scaleMode,3,cv.dnn.cuda4dnn.ScaleShiftOp.scaleMode,,src\cuda4dnn\primitives\scale_shift.hpp,scaleMode,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
415,378339,shiftMode,3,cv.dnn.cuda4dnn.ScaleShiftOp.shiftMode,,src\cuda4dnn\primitives\scale_shift.hpp,shiftMode,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
416,247261,internal_default_instance,1,opencv_onnx.TensorShapeProto_Dimension.internal_default_instance,TensorShapeProto_Dimension opencv_onnx.TensorShapeProto_Dimension.internal_default_instance (),misc\onnx\opencv-onnx.pb.hpp,"static inline const TensorShapeProto_Dimension* internal_default_instance() {
    return reinterpret_cast<const TensorShapeProto_Dimension*>(
               &_TensorShapeProto_Dimension_default_instance_);
  }",2658.0,2661.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,TensorShapeProto_Dimension
417,312805,DivOptionsBuilder,1,opencv_tflite.DivOptionsBuilder.DivOptionsBuilder,ANY opencv_tflite.DivOptionsBuilder.DivOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit DivOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",5010.0,5013.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
418,312816,Finish,1,opencv_tflite.DivOptionsBuilder.Finish,Offset<DivOptions> opencv_tflite.DivOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<DivOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DivOptions>(end);
    return o;
  }",5014.0,5018.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<DivOptions>
419,132592,descriptor,1,opencv_caffe.DataParameter.descriptor,Descriptor opencv_caffe.DataParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",9381.0,9383.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
420,132598,GetDescriptor,1,opencv_caffe.DataParameter.GetDescriptor,Descriptor opencv_caffe.DataParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",9384.0,9386.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
421,17915,_InternalParse,1,opencv_caffe.NetParameter._InternalParse,"const char* opencv_caffe.NetParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* NetParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, ""opencv_caffe.NetParameter.name"");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .opencv_caffe.V1LayerParameter layers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr...",7669.0,7808.0,1.0,10.0,140.0,124,16,134,12,0,5,40,78,0,2,,0,3,4,2,2,const char*
422,132609,GetReflection,1,opencv_caffe.DataParameter.GetReflection,Reflection opencv_caffe.DataParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",9387.0,9389.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
423,378369,forward,1,cv.dnn.cuda4dnn.ShortcutOp.forward,"void cv.dnn.cuda4dnn.ShortcutOp.forward (ANY,ANY,ANY)",src\cuda4dnn\primitives\shortcut.hpp,"void forward(
            const std::vector<cv::Ptr<BackendWrapper>>& inputs,
            const std::vector<cv::Ptr<BackendWrapper>>& outputs,
            csl::Workspace& workspace) override
        {
            CV_Assert(outputs.size() == 1);

            auto output_wrapper = outputs[0].dynamicCast<wrapper_type>();
            auto output = output_wrapper->getSpan();

            auto input_wrapper = inputs[0].dynamicCast<wrapper_type>();
            auto input = input_wrapper->getView();

            /* output shape is determined by the input shape */
            CV_Assert(is_shape_same(output, input));

            for (int i = 1; i < inputs.size(); i++)
            {
                auto from_wrapper = inputs[i].dynamicCast<wrapper_type>();
                auto from = from_wrapper->getView();

                CV_Assert(output.rank() == from.rank());
                for (int i = 0; i < output.rank(); i++) {
                    if (i != 1) {
                        CV_Assert(fro...",29.0,68.0,9.0,9.0,40.0,32,7,35,11,0,1,5,9,0,0,,0,1,6,3,3,void
424,149000,descriptor,1,opencv_caffe.SoftmaxParameter.descriptor,Descriptor opencv_caffe.SoftmaxParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",16345.0,16347.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
425,132620,default_instance,1,opencv_caffe.DataParameter.default_instance,DataParameter opencv_caffe.DataParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const DataParameter& default_instance() {
    return *internal_default_instance();
  }",9390.0,9392.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,DataParameter
426,149006,GetDescriptor,1,opencv_caffe.SoftmaxParameter.GetDescriptor,Descriptor opencv_caffe.SoftmaxParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",16348.0,16350.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
427,67087,_InternalSerialize,1,opencv_caffe.InfogainLossParameter._InternalSerialize,"uint8_t opencv_caffe.InfogainLossParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* InfogainLossParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.InfogainLossParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      ""opencv_caffe.InfogainLossParameter.source"");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_source(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<...",21792.0,21815.0,1.0,1.0,24.0,30,8,26,9,0,1,3,3,0,0,,0,1,4,2,2,uint8_t
428,132627,internal_default_instance,1,opencv_caffe.DataParameter.internal_default_instance,DataParameter opencv_caffe.DataParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const DataParameter* internal_default_instance() {
    return reinterpret_cast<const DataParameter*>(
               &_DataParameter_default_instance_);
  }",9393.0,9396.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,DataParameter
429,149017,GetReflection,1,opencv_caffe.SoftmaxParameter.GetReflection,Reflection opencv_caffe.SoftmaxParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",16351.0,16353.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
430,394778,lid,3,cv.dnn.detail.LayerPin.lid,,src\layer_internals.hpp,lid,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
431,394779,oid,3,cv.dnn.detail.LayerPin.oid,,src\layer_internals.hpp,oid,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
432,312862,fbb_,3,opencv_tflite.TopKV2OptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
433,312863,start_,3,opencv_tflite.TopKV2OptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
434,312864,TopKV2OptionsBuilder,1,opencv_tflite.TopKV2OptionsBuilder.TopKV2OptionsBuilder,ANY opencv_tflite.TopKV2OptionsBuilder.TopKV2OptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit TopKV2OptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",5041.0,5044.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
435,263712,GetCachedSize,1,opencv_tensorflow.AttrValue_ListValue.GetCachedSize,int opencv_tensorflow.AttrValue_ListValue.GetCachedSize (),misc\tensorflow\attr_value.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },177.0,177.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
436,394786,valid,1,cv.dnn.detail.LayerPin.valid,bool cv.dnn.detail.LayerPin.valid (),src\layer_internals.hpp,"bool valid() const
    {
        return (lid >= 0 && oid >= 0);
    }",22.0,25.0,5.0,5.0,4.0,3,2,2,2,0,2,1,1,0,0,,0,2,0,0,0,bool
437,149028,default_instance,1,opencv_caffe.SoftmaxParameter.default_instance,SoftmaxParameter opencv_caffe.SoftmaxParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const SoftmaxParameter& default_instance() {
    return *internal_default_instance();
  }",16354.0,16356.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,SoftmaxParameter
438,312875,Finish,1,opencv_tflite.TopKV2OptionsBuilder.Finish,Offset<TopKV2Options> opencv_tflite.TopKV2OptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<TopKV2Options> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TopKV2Options>(end);
    return o;
  }",5045.0,5049.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<TopKV2Options>
439,149035,internal_default_instance,1,opencv_caffe.SoftmaxParameter.internal_default_instance,SoftmaxParameter opencv_caffe.SoftmaxParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const SoftmaxParameter* internal_default_instance() {
    return reinterpret_cast<const SoftmaxParameter*>(
               &_SoftmaxParameter_default_instance_);
  }",16357.0,16360.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,SoftmaxParameter
440,394798,equal,1,cv.dnn.detail.LayerPin.equal,bool cv.dnn.detail.LayerPin.equal (LayerPin),src\layer_internals.hpp,"bool equal(const LayerPin& r) const
    {
        return (lid == r.lid && oid == r.oid);
    }",27.0,30.0,5.0,5.0,4.0,5,3,4,3,0,4,1,1,0,0,,0,4,2,1,1,bool
441,394815,operator <,1,cv.dnn.detail.LayerPin.operator <,bool cv.dnn.detail.LayerPin.operator < (LayerPin),src\layer_internals.hpp,"bool operator<(const LayerPin& r) const
    {
        return lid < r.lid || (lid == r.lid && oid < r.oid);
    }",32.0,35.0,5.0,5.0,4.0,8,5,6,3,0,6,1,1,0,0,,0,6,2,1,1,bool
442,116290,descriptor,1,opencv_caffe.DetectionOutputParameter.descriptor,Descriptor opencv_caffe.DetectionOutputParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",2627.0,2629.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
443,83522,ByteSizeLong,1,opencv_caffe.SliceParameter.ByteSizeLong,size_t opencv_caffe.SliceParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t SliceParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.SliceParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 slice_point = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->slice_point_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_slice_point_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 slice_dim = 1 [default = 1];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_slice_dim());
    }

    // optional int32 axis = 3 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROT...",26889.0,26920.0,1.0,1.0,32.0,30,9,27,8,0,3,4,6,0,0,,0,3,0,0,0,size_t
444,362050,Span,1,cv.dnn.cuda4dnn.csl.TensorView.operator cv.dnn.cuda4dnn.csl.Span<const #0>,ANY cv.dnn.cuda4dnn.csl.TensorView.operator cv.dnn.cuda4dnn.csl.Span<const #0> (),src\cuda4dnn\csl\tensor.hpp,"operator View<T>() const noexcept { return View<T>(ptr, size()); }",1145.0,1145.0,9.0,74.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,ANY
445,116296,GetDescriptor,1,opencv_caffe.DetectionOutputParameter.GetDescriptor,Descriptor opencv_caffe.DetectionOutputParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",2630.0,2632.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
446,362058,swap,1,cv.dnn.cuda4dnn.csl.TensorView.swap,"void cv.dnn.cuda4dnn.csl.TensorView.swap (TensorView,TensorView)",src\cuda4dnn\csl\tensor.hpp,"friend void swap(TensorView& lhs, TensorView& rhs) noexcept {
            using std::swap;
            swap(lhs.ptr, rhs.ptr);
            swap(lhs.shape, rhs.shape);
        }",1147.0,1151.0,9.0,9.0,5.0,4,1,4,2,0,4,1,1,0,0,,0,4,4,2,2,void
447,312915,fbb_,3,opencv_tflite.EmbeddingLookupSparseOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
448,312916,start_,3,opencv_tflite.EmbeddingLookupSparseOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
449,312917,add_combiner,1,opencv_tflite.EmbeddingLookupSparseOptionsBuilder.add_combiner,void opencv_tflite.EmbeddingLookupSparseOptionsBuilder.add_combiner (ANY),misc\tflite\schema_generated.hpp,"void add_combiner(opencv_tflite::CombinerType combiner) {
    fbb_.AddElement<int8_t>(EmbeddingLookupSparseOptions::VT_COMBINER, static_cast<int8_t>(combiner), 0);
  }",5077.0,5079.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
450,394838,operator ==,1,cv.dnn.detail.LayerPin.operator ==,bool cv.dnn.detail.LayerPin.operator == (LayerPin),src\layer_internals.hpp,"bool operator==(const LayerPin& r) const
    {
        return lid == r.lid && oid == r.oid;
    }",37.0,40.0,5.0,5.0,4.0,5,3,4,3,0,4,1,1,0,0,,0,4,2,1,1,bool
451,116307,GetReflection,1,opencv_caffe.DetectionOutputParameter.GetReflection,Reflection opencv_caffe.DetectionOutputParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",2633.0,2635.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
452,247386,GetCachedSize,1,opencv_onnx.TensorShapeProto_Dimension.GetCachedSize,int opencv_onnx.TensorShapeProto_Dimension.GetCachedSize (),misc\onnx\opencv-onnx.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },2706.0,2706.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
453,231004,SharedCtor,1,opencv_onnx.StringStringEntryProto.SharedCtor,void opencv_onnx.StringStringEntryProto.SharedCtor (),misc\onnx\opencv-onnx.pb.cc,"inline void StringStringEntryProto::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}",2874.0,2883.0,1.0,1.0,10.0,8,2,6,4,0,2,1,1,0,0,,0,2,0,0,0,void
454,362078,shape,3,cv.dnn.cuda4dnn.csl.TensorView.shape,,src\cuda4dnn\csl\tensor.hpp,shape,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,29,0,1,1,0,0,,0,0,0,0,0,
455,362079,ptr,3,cv.dnn.cuda4dnn.csl.TensorView.ptr,,src\cuda4dnn\csl\tensor.hpp,ptr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
456,116318,default_instance,1,opencv_caffe.DetectionOutputParameter.default_instance,DetectionOutputParameter opencv_caffe.DetectionOutputParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const DetectionOutputParameter& default_instance() {
    return *internal_default_instance();
  }",2636.0,2638.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,DetectionOutputParameter
457,116325,internal_default_instance,1,opencv_caffe.DetectionOutputParameter.internal_default_instance,DetectionOutputParameter opencv_caffe.DetectionOutputParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const DetectionOutputParameter* internal_default_instance() {
    return reinterpret_cast<const DetectionOutputParameter*>(
               &_DetectionOutputParameter_default_instance_);
  }",2639.0,2642.0,3.0,3.0,4.0,2,2,1,1,3,0,1,1,0,0,,0,0,0,0,0,DetectionOutputParameter
458,312937,EmbeddingLookupSparseOptionsBuilder,1,opencv_tflite.EmbeddingLookupSparseOptionsBuilder.EmbeddingLookupSparseOptionsBuilder,ANY opencv_tflite.EmbeddingLookupSparseOptionsBuilder.EmbeddingLookupSparseOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit EmbeddingLookupSparseOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",5080.0,5083.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
459,67188,ByteSizeLong,1,opencv_caffe.InfogainLossParameter.ByteSizeLong,size_t opencv_caffe.InfogainLossParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t InfogainLossParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.InfogainLossParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string source = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}",21817.0,21834.0,1.0,1.0,18.0,13,9,12,7,0,2,2,2,0,0,,0,2,0,0,0,size_t
460,312948,Finish,1,opencv_tflite.EmbeddingLookupSparseOptionsBuilder.Finish,Offset<EmbeddingLookupSparseOptions> opencv_tflite.EmbeddingLookupSparseOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<EmbeddingLookupSparseOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<EmbeddingLookupSparseOptions>(end);
    return o;
  }",5084.0,5088.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<EmbeddingLookupSparseOptions>
461,427646,reset,1,cv.dnn.detail.BlobManager.reset,void cv.dnn.detail.BlobManager.reset (),src\legacy_backend.hpp,"void reset()
    {
        CV_TRACE_FUNCTION();

        refCounter.clear();
        reuseMap.clear();
        memHosts.clear();
    }",307.0,314.0,5.0,5.0,8.0,3,1,3,3,0,3,1,1,0,0,,0,3,0,0,0,void
462,394880,id,3,cv.dnn.detail.LayerData.id,,src\layer_internals.hpp,id,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
463,231045,SharedDtor,1,opencv_onnx.StringStringEntryProto.SharedDtor,void opencv_onnx.StringStringEntryProto.SharedDtor (),misc\onnx\opencv-onnx.pb.cc,"inline void StringStringEntryProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}",2892.0,2896.0,1.0,1.0,5.0,9,3,6,4,0,2,1,1,0,0,,0,2,0,0,0,void
464,394885,inputBlobsId,3,cv.dnn.detail.LayerData.inputBlobsId,,src\layer_internals.hpp,inputBlobsId,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
465,394887,requiredOutputs,3,cv.dnn.detail.LayerData.requiredOutputs,,src\layer_internals.hpp,requiredOutputs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
466,394889,outputBlobsWrappers,3,cv.dnn.detail.LayerData.outputBlobsWrappers,,src\layer_internals.hpp,outputBlobsWrappers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
467,394890,inputBlobsWrappers,3,cv.dnn.detail.LayerData.inputBlobsWrappers,,src\layer_internals.hpp,inputBlobsWrappers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
468,394891,internalBlobsWrappers,3,cv.dnn.detail.LayerData.internalBlobsWrappers,,src\layer_internals.hpp,internalBlobsWrappers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
469,394893,layerInstance,3,cv.dnn.detail.LayerData.layerInstance,,src\layer_internals.hpp,layerInstance,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
470,394894,outputBlobs,3,cv.dnn.detail.LayerData.outputBlobs,,src\layer_internals.hpp,outputBlobs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
471,427663,addHost,1,cv.dnn.detail.BlobManager.addHost,"void cv.dnn.detail.BlobManager.addHost (LayerPin,Mat)",src\legacy_backend.hpp,"void addHost(const LayerPin& lp, const Mat& mat)
    {
        CV_Assert(memHosts.find(lp) == memHosts.end());
        reuseMap[lp] = lp;
        memHosts[lp] = mat;
    }",318.0,323.0,5.0,5.0,6.0,7,4,9,4,0,4,1,1,0,0,,0,4,4,2,2,void
472,394896,internals,3,cv.dnn.detail.LayerData.internals,,src\layer_internals.hpp,internals,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
473,394897,backendNodes,3,cv.dnn.detail.LayerData.backendNodes,,src\layer_internals.hpp,backendNodes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
474,394898,skip,3,cv.dnn.detail.LayerData.skip,,src\layer_internals.hpp,skip,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
475,394899,flag,3,cv.dnn.detail.LayerData.flag,,src\layer_internals.hpp,flag,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
476,394900,resetAllocation,1,cv.dnn.detail.LayerData.resetAllocation,void cv.dnn.detail.LayerData.resetAllocation (),src\layer_internals.hpp,"void resetAllocation()
    {
        if (id == 0)
            return;  // skip ""input"" layer (assertion in Net::Impl::allocateLayers)

        layerInstance.release();
        outputBlobs.clear();
        inputBlobs.clear();
        internals.clear();

        outputBlobsWrappers.clear();
        inputBlobsWrappers.clear();
        internalBlobsWrappers.clear();

        backendNodes.clear();

        skip = false;
        flag = 0;

#ifdef HAVE_CUDA
        cudaD2HBackgroundTransfers.clear();
#endif
    }",100.0,122.0,5.0,5.0,23.0,11,3,11,11,0,11,2,2,1,0,,0,11,0,0,0,void
477,394895,inputBlobs,3,cv.dnn.detail.LayerData.inputBlobs,,src\layer_internals.hpp,inputBlobs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
478,132752,GetCachedSize,1,opencv_caffe.DataParameter.GetCachedSize,int opencv_caffe.DataParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },9441.0,9441.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
479,378515,stream,3,cv.dnn.cuda4dnn.ShortcutOp.stream,,src\cuda4dnn\primitives\shortcut.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
480,312994,fbb_,3,opencv_tflite.GatherOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
481,312995,start_,3,opencv_tflite.GatherOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
482,312996,add_axis,1,opencv_tflite.GatherOptionsBuilder.add_axis,void opencv_tflite.GatherOptionsBuilder.add_axis (int32_t),misc\tflite\schema_generated.hpp,"void add_axis(int32_t axis) {
    fbb_.AddElement<int32_t>(GatherOptions::VT_AXIS, axis, 0);
  }",5123.0,5125.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
483,149160,GetCachedSize,1,opencv_caffe.SoftmaxParameter.GetCachedSize,int opencv_caffe.SoftmaxParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },16405.0,16405.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
484,427690,refCounter,3,cv.dnn.detail.BlobManager.refCounter,,src\legacy_backend.hpp,refCounter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,16,0,1,1,0,0,,0,0,0,0,0,
485,427691,reuseMap,3,cv.dnn.detail.BlobManager.reuseMap,,src\legacy_backend.hpp,reuseMap,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,12,0,1,1,0,0,,0,0,0,0,0,
486,100010,_InternalSerialize,1,opencv_caffe.V0LayerParameter._InternalSerialize,"uint8_t opencv_caffe.V0LayerParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* V0LayerParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.V0LayerParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      ""opencv_caffe.V0LayerParameter.name"");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
     ...",31541.0,31813.0,1.0,1.0,273.0,368,8,386,13,0,6,40,40,0,3,,0,6,4,2,2,uint8_t
487,427692,memHosts,3,cv.dnn.detail.BlobManager.memHosts,,src\legacy_backend.hpp,memHosts,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
488,378546,forward,1,cv.dnn.cuda4dnn.ShuffleChannelOp.forward,"void cv.dnn.cuda4dnn.ShuffleChannelOp.forward (ANY,ANY,ANY)",src\cuda4dnn\primitives\shuffle_channel.hpp,"void forward(
            const std::vector<cv::Ptr<BackendWrapper>>& inputs,
            const std::vector<cv::Ptr<BackendWrapper>>& outputs,
            csl::Workspace& workspace) override
        {
            CV_Assert(inputs.size() == 1 && outputs.size() == 1);

            auto input_wrapper = inputs[0].dynamicCast<wrapper_type>();
            auto input = input_wrapper->getView();

            auto output_wrapper = outputs[0].dynamicCast<wrapper_type>();
            auto output = output_wrapper->getSpan();

            if (group == 1) {
                /* permute is redundant; check else branch to know why */
                if (input.get() != output.get()) {
                    input.reshape_as(output);
                    csl::tensor_ops::copy(stream, output, input);
                }
            } else {
                const std::size_t permute_input_shape[] = {
                   input.get_axis_size(0),
                   group,
                   input.get_axis_size(1) ...",30.0,70.0,9.0,9.0,41.0,22,7,20,10,0,2,3,4,1,0,,0,2,6,3,3,void
489,313014,add_batch_dims,1,opencv_tflite.GatherOptionsBuilder.add_batch_dims,void opencv_tflite.GatherOptionsBuilder.add_batch_dims (int32_t),misc\tflite\schema_generated.hpp,"void add_batch_dims(int32_t batch_dims) {
    fbb_.AddElement<int32_t>(GatherOptions::VT_BATCH_DIMS, batch_dims, 0);
  }",5126.0,5128.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
490,231094,SetCachedSize,1,opencv_onnx.StringStringEntryProto.SetCachedSize,void opencv_onnx.StringStringEntryProto.SetCachedSize (int),misc\onnx\opencv-onnx.pb.cc,"void StringStringEntryProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",2904.0,2906.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
491,444094,OCL4DNNInnerProduct,1,cv.dnn.ocl4dnn.OCL4DNNInnerProduct<Dtype>.OCL4DNNInnerProduct,ANY cv.dnn.ocl4dnn.OCL4DNNInnerProduct<Dtype>.OCL4DNNInnerProduct<Dtype> (OCL4DNNInnerProductConfig),src\ocl4dnn\src\ocl4dnn_inner_product.cpp,"OCL4DNNInnerProduct<Dtype>::OCL4DNNInnerProduct(OCL4DNNInnerProductConfig config)
{
    bias_term_  = config.bias_term;
    transpose_  = config.transpose;
    N_ = num_output_ = config.num_output;
    M_ = config.M;
    K_ = config.K;
    phase_test_ = config.phase_test;
    image_copied_ = false;
    use_half_ = config.use_half;
}",50.0,60.0,1.0,1.0,11.0,16,2,16,10,0,7,1,1,0,0,,0,7,2,1,1,ANY
492,231104,Clear,1,opencv_onnx.StringStringEntryProto.Clear,void opencv_onnx.StringStringEntryProto.Clear (),misc\onnx\opencv-onnx.pb.cc,"void StringStringEntryProto::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_onnx.StringStringEntryProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",2908.0,2925.0,1.0,1.0,18.0,11,5,11,5,0,4,4,6,0,0,,0,4,0,0,0,void
493,67268,MergeFrom,1,opencv_caffe.InfogainLossParameter.MergeFrom,void opencv_caffe.InfogainLossParameter.MergeFrom (InfogainLossParameter),misc\caffe\opencv-caffe.pb.cc,"void InfogainLossParameter::MergeFrom(const InfogainLossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.InfogainLossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_source()) {
    _internal_set_source(from._internal_source());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",21849.0,21859.0,1.0,1.0,11.0,10,6,8,4,2,0,2,2,0,0,,0,0,2,1,1,void
494,394949,DataLayer,1,cv.dnn.detail.DataLayer.DataLayer,ANY cv.dnn.detail.DataLayer.DataLayer (),src\layer_internals.hpp,"DataLayer()
        : Layer()
    {
        skip = false;
    }",129.0,133.0,5.0,5.0,5.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,ANY
495,83656,MergeFrom,1,opencv_caffe.SliceParameter.MergeFrom,void opencv_caffe.SliceParameter.MergeFrom (SliceParameter),misc\caffe\opencv-caffe.pb.cc,"void SliceParameter::MergeFrom(const SliceParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.SliceParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  slice_point_.MergeFrom(from.slice_point_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      slice_dim_ = from.slice_dim_;
    }
    if (cached_has_bits & 0x00000002u) {
      axis_ = from.axis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",26935.0,26953.0,1.0,1.0,19.0,21,8,19,8,2,8,4,6,0,0,,0,8,2,1,1,void
496,313032,GatherOptionsBuilder,1,opencv_tflite.GatherOptionsBuilder.GatherOptionsBuilder,ANY opencv_tflite.GatherOptionsBuilder.GatherOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit GatherOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",5129.0,5132.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
497,50890,MergeFrom,1,opencv_caffe.ConvolutionParameter.MergeFrom,void opencv_caffe.ConvolutionParameter.MergeFrom (ConvolutionParameter),misc\caffe\opencv-caffe.pb.cc,"void ConvolutionParameter::MergeFrom(const ConvolutionParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.ConvolutionParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  pad_.MergeFrom(from.pad_);
  kernel_size_.MergeFrom(from.kernel_size_);
  stride_.MergeFrom(from.stride_);
  dilation_.MergeFrom(from.dilation_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_weight_filler()->::opencv_caffe::FillerParameter::MergeFrom(from._internal_weight_filler());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_bias_filler()->::opencv_caffe::FillerParameter::MergeFrom(from._internal_bias_filler());
    }
    if (cached_has_bits & 0x00000004u) {
      num_output_ = from.num_output_;
    }
    if (cached_has_bits & 0x00000008u) {
      pad_h_ = from.pad_h_;
    }
    if (cached_has_bits & ...",16863.0,16923.0,1.0,1.0,61.0,65,9,62,21,2,37,17,31,0,2,,0,35,2,1,1,void
498,313043,Finish,1,opencv_tflite.GatherOptionsBuilder.Finish,Offset<GatherOptions> opencv_tflite.GatherOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<GatherOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GatherOptions>(end);
    return o;
  }",5133.0,5137.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<GatherOptions>
499,116450,GetCachedSize,1,opencv_caffe.DetectionOutputParameter.GetCachedSize,int opencv_caffe.DetectionOutputParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },2687.0,2687.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
500,394979,setNames,1,cv.dnn.detail.DataLayer.setNames,void cv.dnn.detail.DataLayer.setNames (ANY),src\layer_internals.hpp,"void setNames(const std::vector<String>& names)
    {
        outNames.assign(names.begin(), names.end());
        shapes.clear();
        shapes.resize(outNames.size());
    }",286.0,291.0,5.0,5.0,6.0,6,1,6,3,0,4,1,1,0,0,,0,4,2,1,1,void
501,231151,_InternalParse,1,opencv_onnx.StringStringEntryProto._InternalParse,"const char* opencv_onnx.StringStringEntryProto._InternalParse (char*,ANY*)",misc\onnx\opencv-onnx.pb.cc,"const char* StringStringEntryProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, ""opencv_onnx.StringStringEntryProto.key"");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _...",2927.0,2980.0,1.0,10.0,54.0,40,12,51,9,0,1,11,12,0,0,,0,1,4,2,2,const char*
502,247541,_internal_has_dim_param,1,opencv_onnx.TensorShapeProto_Dimension._internal_has_dim_param,bool opencv_onnx.TensorShapeProto_Dimension._internal_has_dim_param (),misc\onnx\opencv-onnx.pb.hpp,"inline bool TensorShapeProto_Dimension::_internal_has_dim_param() const {
  return value_case() == kDimParam;
}",6822.0,6824.0,1.0,1.0,3.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,bool
503,67327,InternalSwap,1,opencv_caffe.InfogainLossParameter.InternalSwap,void opencv_caffe.InfogainLossParameter.InternalSwap (InfogainLossParameter*),misc\caffe\opencv-caffe.pb.cc,"void InfogainLossParameter::InternalSwap(InfogainLossParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &source_, lhs_arena,
      &other->source_, rhs_arena
  );
}",21872.0,21883.0,1.0,1.0,12.0,18,5,16,9,0,4,1,1,0,0,,0,4,2,1,1,void
504,395008,setInputShape,1,cv.dnn.detail.DataLayer.setInputShape,"void cv.dnn.detail.DataLayer.setInputShape (String,MatShape)",src\layer_internals.hpp,"void setInputShape(const String& tgtName, const MatShape& shape)
    {
        std::vector<String>::const_iterator it = std::find(outNames.begin(), outNames.end(), tgtName);
        CV_Check(tgtName, it != outNames.end(), ""Unknown input"");
        int idx = (int)(it - outNames.begin());

        CV_Assert(idx < (int)shapes.size());
        CV_Check(tgtName, shapes[idx].empty(), ""Input shape redefinition is not allowed"");
        shapes[idx] = shape;
    }",293.0,302.0,5.0,5.0,10.0,17,7,19,7,0,7,1,1,0,0,,0,7,4,2,2,void
505,313095,fbb_,3,opencv_tflite.TransposeOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
506,313096,start_,3,opencv_tflite.TransposeOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
507,313097,TransposeOptionsBuilder,1,opencv_tflite.TransposeOptionsBuilder.TransposeOptionsBuilder,ANY opencv_tflite.TransposeOptionsBuilder.TransposeOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit TransposeOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",5162.0,5165.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
508,345542,inputSize,3,opencv_test.EinsumParams.inputSize,,perf\perf_einsum.cpp,inputSize,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
509,313108,Finish,1,opencv_tflite.TransposeOptionsBuilder.Finish,Offset<TransposeOptions> opencv_tflite.TransposeOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<TransposeOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TransposeOptions>(end);
    return o;
  }",5166.0,5170.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<TransposeOptions>
510,296725,float_val_,3,opencv_tensorflow.TensorProto.float_val_,,misc\tensorflow\tensor.pb.hpp,float_val_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
511,296726,double_val_,3,opencv_tensorflow.TensorProto.double_val_,,misc\tensorflow\tensor.pb.hpp,double_val_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
512,296727,int_val_,3,opencv_tensorflow.TensorProto.int_val_,,misc\tensorflow\tensor.pb.hpp,int_val_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
513,296728,_int_val_cached_byte_size_,3,opencv_tensorflow.TensorProto._int_val_cached_byte_size_,,misc\tensorflow\tensor.pb.hpp,_int_val_cached_byte_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
514,296729,string_val_,3,opencv_tensorflow.TensorProto.string_val_,,misc\tensorflow\tensor.pb.hpp,string_val_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
515,296730,scomplex_val_,3,opencv_tensorflow.TensorProto.scomplex_val_,,misc\tensorflow\tensor.pb.hpp,scomplex_val_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
516,296731,int64_val_,3,opencv_tensorflow.TensorProto.int64_val_,,misc\tensorflow\tensor.pb.hpp,int64_val_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
517,296732,_int64_val_cached_byte_size_,3,opencv_tensorflow.TensorProto._int64_val_cached_byte_size_,,misc\tensorflow\tensor.pb.hpp,_int64_val_cached_byte_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
518,296733,bool_val_,3,opencv_tensorflow.TensorProto.bool_val_,,misc\tensorflow\tensor.pb.hpp,bool_val_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
519,296734,dcomplex_val_,3,opencv_tensorflow.TensorProto.dcomplex_val_,,misc\tensorflow\tensor.pb.hpp,dcomplex_val_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
520,296735,half_val_,3,opencv_tensorflow.TensorProto.half_val_,,misc\tensorflow\tensor.pb.hpp,half_val_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
521,296736,_half_val_cached_byte_size_,3,opencv_tensorflow.TensorProto._half_val_cached_byte_size_,,misc\tensorflow\tensor.pb.hpp,_half_val_cached_byte_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
522,296737,tensor_content_,3,opencv_tensorflow.TensorProto.tensor_content_,,misc\tensorflow\tensor.pb.hpp,tensor_content_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
523,296738,tensor_shape_,3,opencv_tensorflow.TensorProto.tensor_shape_,,misc\tensorflow\tensor.pb.hpp,* tensor_shape_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,14,0,1,1,0,0,,0,0,0,0,0,
524,296739,dtype_,3,opencv_tensorflow.TensorProto.dtype_,,misc\tensorflow\tensor.pb.hpp,dtype_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
525,296740,version_number_,3,opencv_tensorflow.TensorProto.version_number_,,misc\tensorflow\tensor.pb.hpp,version_number_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
526,296741,_cached_size_,3,opencv_tensorflow.TensorProto._cached_size_,,misc\tensorflow\tensor.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
527,83748,InternalSwap,1,opencv_caffe.SliceParameter.InternalSwap,void opencv_caffe.SliceParameter.InternalSwap (SliceParameter*),misc\caffe\opencv-caffe.pb.cc,"void SliceParameter::InternalSwap(SliceParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  slice_point_.InternalSwap(&other->slice_point_);
  swap(slice_dim_, other->slice_dim_);
  swap(axis_, other->axis_);
}",26966.0,26973.0,1.0,1.0,8.0,11,4,10,6,0,8,1,1,0,0,,0,8,2,1,1,void
528,427818,net,3,cv.dnn.Impl.net,,src\model.cpp,net,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,11,0,1,1,0,0,,0,0,0,0,0,
529,427819,size,3,cv.dnn.Impl.size,,src\model.cpp,size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
530,427820,mean,3,cv.dnn.Impl.mean,,src\model.cpp,mean,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
531,427821,scale,3,cv.dnn.Impl.scale,,src\model.cpp,scale = Scalar::all(1.0),-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
532,427822,swapRB,3,cv.dnn.Impl.swapRB,,src\model.cpp,swapRB = false,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
533,427823,crop,3,cv.dnn.Impl.crop,,src\model.cpp,crop = false,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
534,247595,set_has_dim_param,1,opencv_onnx.TensorShapeProto_Dimension.set_has_dim_param,void opencv_onnx.TensorShapeProto_Dimension.set_has_dim_param (),misc\onnx\opencv-onnx.pb.hpp,"inline void TensorShapeProto_Dimension::set_has_dim_param() {
  _oneof_case_[0] = kDimParam;
}",6828.0,6830.0,1.0,1.0,3.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,void
535,427825,outNames,3,cv.dnn.Impl.outNames,,src\model.cpp,outNames,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
536,67383,GetMetadata,1,opencv_caffe.InfogainLossParameter.GetMetadata,Metadata opencv_caffe.InfogainLossParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata InfogainLossParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[40]);
}",21885.0,21889.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
537,247610,_has_bits_,3,opencv_onnx.TensorShapeProto_Dimension._has_bits_,,misc\onnx\opencv-onnx.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
538,247611,_cached_size_,3,opencv_onnx.TensorShapeProto_Dimension._cached_size_,,misc\onnx\opencv-onnx.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
539,247612,denotation_,3,opencv_onnx.TensorShapeProto_Dimension.denotation_,,misc\onnx\opencv-onnx.pb.hpp,denotation_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
540,313149,start_,3,opencv_tflite.ExpOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
541,313150,ExpOptionsBuilder,1,opencv_tflite.ExpOptionsBuilder.ExpOptionsBuilder,ANY opencv_tflite.ExpOptionsBuilder.ExpOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit ExpOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",5191.0,5194.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
542,313148,fbb_,3,opencv_tflite.ExpOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
543,427844,getNetwork,1,cv.dnn.Impl.getNetwork,Net cv.dnn.Impl.getNetwork (),src\model.cpp,virtual Net& getNetwork() const { return const_cast<Net&>(net); },36.0,36.0,5.0,69.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,Net
544,247621,value_,3,opencv_onnx.TensorShapeProto_Dimension.value_,,misc\onnx\opencv-onnx.pb.hpp,value_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
545,247622,_oneof_case_,3,opencv_onnx.TensorShapeProto_Dimension._oneof_case_,,misc\onnx\opencv-onnx.pb.hpp,_oneof_case_[1],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
546,247620,dim_param_,3,opencv_onnx.TensorShapeProto_Dimension.ValueUnion.dim_param_,,misc\onnx\opencv-onnx.pb.hpp,dim_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
547,313161,Finish,1,opencv_tflite.ExpOptionsBuilder.Finish,Offset<ExpOptions> opencv_tflite.ExpOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<ExpOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ExpOptions>(end);
    return o;
  }",5195.0,5199.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<ExpOptions>
548,427852,setPreferableBackend,1,cv.dnn.Impl.setPreferableBackend,void cv.dnn.Impl.setPreferableBackend (Backend),src\model.cpp,virtual void setPreferableBackend(Backend backendId) { net.setPreferableBackend(backendId); },38.0,38.0,5.0,97.0,1.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
549,83788,GetMetadata,1,opencv_caffe.SliceParameter.GetMetadata,Metadata opencv_caffe.SliceParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata SliceParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[57]);
}",26975.0,26979.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
550,395091,outNames,3,cv.dnn.detail.DataLayer.outNames,,src\layer_internals.hpp,outNames,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
551,395092,shapes,3,cv.dnn.detail.DataLayer.shapes,,src\layer_internals.hpp,shapes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
552,427862,setPreferableTarget,1,cv.dnn.Impl.setPreferableTarget,void cv.dnn.Impl.setPreferableTarget (Target),src\model.cpp,virtual void setPreferableTarget(Target targetId) { net.setPreferableTarget(targetId); },39.0,39.0,5.0,92.0,1.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
553,395096,skip,3,cv.dnn.detail.DataLayer.skip,,src\layer_internals.hpp,skip,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
554,427872,enableWinograd,1,cv.dnn.Impl.enableWinograd,void cv.dnn.Impl.enableWinograd (bool),src\model.cpp,virtual void enableWinograd(bool useWinograd) { net.enableWinograd(useWinograd); },40.0,40.0,5.0,86.0,1.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
555,149352,_has_bits_,3,opencv_caffe.SoftmaxParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
556,149353,_cached_size_,3,opencv_caffe.SoftmaxParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
557,427882,initNet,1,cv.dnn.Impl.initNet,void cv.dnn.Impl.initNet (Net),src\model.cpp,"virtual
    void initNet(const Net& network)
    {
        CV_TRACE_FUNCTION();
        net = network;

        outNames = net.getUnconnectedOutLayersNames();
        std::vector<MatShape> inLayerShapes;
        std::vector<MatShape> outLayerShapes;
        net.getLayerShapes(MatShape(), 0, inLayerShapes, outLayerShapes);
        if (!inLayerShapes.empty() && inLayerShapes[0].size() == 4)
            size = Size(inLayerShapes[0][3], inLayerShapes[0][2]);
        else
            size = Size();
    }",42.0,56.0,5.0,5.0,15.0,21,8,18,8,0,5,2,2,0,0,,0,5,2,1,1,void
558,149355,axis_,3,opencv_caffe.SoftmaxParameter.axis_,,misc\caffe\opencv-caffe.pb.hpp,axis_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
559,149354,engine_,3,opencv_caffe.SoftmaxParameter.engine_,,misc\caffe\opencv-caffe.pb.hpp,engine_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
560,313201,fbb_,3,opencv_tflite.CosOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
561,313202,start_,3,opencv_tflite.CosOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
562,313203,CosOptionsBuilder,1,opencv_tflite.CosOptionsBuilder.CosOptionsBuilder,ANY opencv_tflite.CosOptionsBuilder.CosOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit CosOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",5220.0,5223.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
563,378737,stream,3,cv.dnn.cuda4dnn.ShuffleChannelOp.stream,,src\cuda4dnn\primitives\shuffle_channel.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
564,378738,group,3,cv.dnn.cuda4dnn.ShuffleChannelOp.group,,src\cuda4dnn\primitives\shuffle_channel.hpp,group,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
565,313214,Finish,1,opencv_tflite.CosOptionsBuilder.Finish,Offset<CosOptions> opencv_tflite.CosOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<CosOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CosOptions>(end);
    return o;
  }",5224.0,5228.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<CosOptions>
566,67468,set_has_transpose,1,opencv_caffe._Internal.set_has_transpose,void opencv_caffe._Internal.set_has_transpose (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_transpose(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }",21913.0,21915.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
567,378773,forward,1,cv.dnn.cuda4dnn.SliceOp.forward,"void cv.dnn.cuda4dnn.SliceOp.forward (ANY,ANY,ANY)",src\cuda4dnn\primitives\slice.hpp,"void forward(
            const std::vector<cv::Ptr<BackendWrapper>>& inputs,
            const std::vector<cv::Ptr<BackendWrapper>>& outputs,
            csl::Workspace& workspace) override
        {
            /* sometimes the output shape is passed in the form of a second input tensor
             * it's only required for initialization and not here
             */
            CV_Assert(inputs.size() == 1 || inputs.size() == 2);

            auto input_wrapper = inputs[0].dynamicCast<wrapper_type>();
            auto input = input_wrapper->getView();

            CV_Assert(offsets.size() == outputs.size());

            for (int i = 0; i < outputs.size(); ++i)
            {
                auto output_wrapper = outputs[i].dynamicCast<wrapper_type>();
                auto output = output_wrapper->getSpan();

                kernels::slice<T>(stream, output, input, offsets[i]);
            }
        }",35.0,57.0,9.0,9.0,23.0,23,7,22,10,0,3,2,2,0,0,,0,3,6,3,3,void
568,67479,weight_filler,1,opencv_caffe.InnerProductParameter._Internal.weight_filler,FillerParameter opencv_caffe.InnerProductParameter._Internal.weight_filler (InnerProductParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::FillerParameter&
InnerProductParameter::_Internal::weight_filler(const InnerProductParameter* msg) {
  return *msg->weight_filler_;
}",21918.0,21921.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,FillerParameter
569,444314,OCL4DNNLRN,1,cv.dnn.ocl4dnn.OCL4DNNLRN<Dtype>.OCL4DNNLRN,ANY cv.dnn.ocl4dnn.OCL4DNNLRN<Dtype>.OCL4DNNLRN<Dtype> (OCL4DNNLRNConfig),src\ocl4dnn\src\ocl4dnn_lrn.cpp,"OCL4DNNLRN<Dtype>::OCL4DNNLRN(OCL4DNNLRNConfig config)
{
    lrn_type_ = config.lrn_type;
    phase_test_ = config.phase_test;
    size_ = config.local_size;
    CHECK_EQ(size_ % 2, 1)<< ""LRN only supports odd values for local_size"";
    alpha_ = config.alpha;
    beta_ = config.beta;
    k_ = config.k;
    norm_by_size_ = config.norm_by_size;
    num_ = config.batch_size;
    channels_ = config.channels;
    height_ = config.height;
    width_ = config.width;
    use_half_ = config.use_half;
}",50.0,65.0,1.0,4.0,16.0,27,4,27,15,0,12,2,2,0,0,,0,12,2,1,1,ANY
570,67489,bias_filler,1,opencv_caffe.InnerProductParameter._Internal.bias_filler,FillerParameter opencv_caffe.InnerProductParameter._Internal.bias_filler (InnerProductParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::FillerParameter&
InnerProductParameter::_Internal::bias_filler(const InnerProductParameter* msg) {
  return *msg->bias_filler_;
}",21922.0,21925.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,FillerParameter
571,313254,fbb_,3,opencv_tflite.ReducerOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
572,313255,start_,3,opencv_tflite.ReducerOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
573,313256,add_keep_dims,1,opencv_tflite.ReducerOptionsBuilder.add_keep_dims,void opencv_tflite.ReducerOptionsBuilder.add_keep_dims (bool),misc\tflite\schema_generated.hpp,"void add_keep_dims(bool keep_dims) {
    fbb_.AddElement<uint8_t>(ReducerOptions::VT_KEEP_DIMS, static_cast<uint8_t>(keep_dims), 0);
  }",5256.0,5258.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
574,83883,SharedCtor,1,opencv_caffe.SoftmaxParameter.SharedCtor,void opencv_caffe.SoftmaxParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void SoftmaxParameter::SharedCtor() {
engine_ = 0;
axis_ = 1;
}",27013.0,27016.0,1.0,1.0,4.0,2,1,2,2,0,2,1,1,0,0,,0,2,0,0,0,void
575,231341,_InternalSerialize,1,opencv_onnx.StringStringEntryProto._InternalSerialize,"uint8_t opencv_onnx.StringStringEntryProto._InternalSerialize (uint8_t*,ANY*)",misc\onnx\opencv-onnx.pb.cc,"uint8_t* StringStringEntryProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_onnx.StringStringEntryProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      ""opencv_onnx.StringStringEntryProto.key"");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().le...",2982.0,3015.0,1.0,1.0,34.0,45,8,36,9,0,1,4,4,0,0,,0,1,4,2,2,uint8_t
576,427953,setInputParams,1,cv.dnn.Impl.setInputParams,"void cv.dnn.Impl.setInputParams (double,Size,Scalar,bool,bool)",src\model.cpp,"void setInputParams(double scale_, const Size& size_, const Scalar& mean_,
                        bool swapRB_, bool crop_)
    {
        size = size_;
        mean = mean_;
        scale = Scalar::all(scale_);
        crop = crop_;
        swapRB = swapRB_;
    }",59.0,67.0,5.0,5.0,9.0,6,2,11,11,0,5,1,1,0,0,,0,5,10,5,5,void
577,247730,descriptor,1,opencv_onnx.TensorShapeProto.descriptor,Descriptor opencv_onnx.TensorShapeProto.descriptor (),misc\onnx\opencv-onnx.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",2857.0,2859.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
578,247736,GetDescriptor,1,opencv_onnx.TensorShapeProto.GetDescriptor,Descriptor opencv_onnx.TensorShapeProto.GetDescriptor (),misc\onnx\opencv-onnx.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",2860.0,2862.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
579,313276,ReducerOptionsBuilder,1,opencv_tflite.ReducerOptionsBuilder.ReducerOptionsBuilder,ANY opencv_tflite.ReducerOptionsBuilder.ReducerOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit ReducerOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",5259.0,5262.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
580,51139,InternalSwap,1,opencv_caffe.ConvolutionParameter.InternalSwap,void opencv_caffe.ConvolutionParameter.InternalSwap (ConvolutionParameter*),misc\caffe\opencv-caffe.pb.cc,"void ConvolutionParameter::InternalSwap(ConvolutionParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pad_.InternalSwap(&other->pad_);
  kernel_size_.InternalSwap(&other->kernel_size_);
  stride_.InternalSwap(&other->stride_);
  dilation_.InternalSwap(&other->dilation_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConvolutionParameter, force_nd_im2col_)
      + sizeof(ConvolutionParameter::force_nd_im2col_)
      - PROTOBUF_FIELD_OFFSET(ConvolutionParameter, weight_filler_)>(
          reinterpret_cast<char*>(&weight_filler_),
          reinterpret_cast<char*>(&other->weight_filler_));
  swap(axis_, other->axis_);
  swap(bias_term_, other->bias_term_);
  swap(group_, other->group_);
}",16936.0,16953.0,1.0,1.0,18.0,36,12,27,15,0,21,1,1,0,0,,0,21,2,1,1,void
581,247747,GetReflection,1,opencv_onnx.TensorShapeProto.GetReflection,Reflection opencv_onnx.TensorShapeProto.GetReflection (),misc\onnx\opencv-onnx.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",2863.0,2865.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
582,313287,Finish,1,opencv_tflite.ReducerOptionsBuilder.Finish,Offset<ReducerOptions> opencv_tflite.ReducerOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<ReducerOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ReducerOptions>(end);
    return o;
  }",5263.0,5267.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<ReducerOptions>
583,427981,setInputSize,1,cv.dnn.Impl.setInputSize,void cv.dnn.Impl.setInputSize (Size),src\model.cpp,"void setInputSize(const Size& size_)
    {
        size = size_;
    }",69.0,72.0,5.0,5.0,4.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
584,247758,default_instance,1,opencv_onnx.TensorShapeProto.default_instance,TensorShapeProto opencv_onnx.TensorShapeProto.default_instance (),misc\onnx\opencv-onnx.pb.hpp,"static const TensorShapeProto& default_instance() {
    return *internal_default_instance();
  }",2866.0,2868.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,TensorShapeProto
585,247765,internal_default_instance,1,opencv_onnx.TensorShapeProto.internal_default_instance,TensorShapeProto opencv_onnx.TensorShapeProto.internal_default_instance (),misc\onnx\opencv-onnx.pb.hpp,"static inline const TensorShapeProto* internal_default_instance() {
    return reinterpret_cast<const TensorShapeProto*>(
               &_TensorShapeProto_default_instance_);
  }",2869.0,2872.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,TensorShapeProto
586,427989,setInputMean,1,cv.dnn.Impl.setInputMean,void cv.dnn.Impl.setInputMean (Scalar),src\model.cpp,"void setInputMean(const Scalar& mean_)
    {
        mean = mean_;
    }",74.0,77.0,5.0,5.0,4.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
587,427997,setInputScale,1,cv.dnn.Impl.setInputScale,void cv.dnn.Impl.setInputScale (Scalar),src\model.cpp,"void setInputScale(const Scalar& scale_)
    {
        scale = scale_;
    }",79.0,82.0,5.0,5.0,4.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
588,83935,SetCachedSize,1,opencv_caffe.SoftmaxParameter.SetCachedSize,void opencv_caffe.SoftmaxParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void SoftmaxParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",27035.0,27037.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
589,346084,val_,3,opencv_test.GemmParamId.val_,,perf\perf_gemm.cpp,val_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
590,428005,setInputCrop,1,cv.dnn.Impl.setInputCrop,void cv.dnn.Impl.setInputCrop (bool),src\model.cpp,"void setInputCrop(bool crop_)
    {
        crop = crop_;
    }",84.0,87.0,5.0,5.0,4.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
591,149479,descriptor,1,opencv_caffe.TanHParameter.descriptor,Descriptor opencv_caffe.TanHParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",16550.0,16552.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
592,83945,Clear,1,opencv_caffe.SoftmaxParameter.Clear,void opencv_caffe.SoftmaxParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void SoftmaxParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.SoftmaxParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    engine_ = 0;
    axis_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",27039.0,27052.0,1.0,1.0,14.0,9,5,9,5,0,4,2,2,0,0,,0,4,0,0,0,void
593,346090,operator int,1,opencv_test.GemmParamId.operator int,ANY opencv_test.GemmParamId.operator int (),perf\perf_gemm.cpp,operator int() const { return val_; },96.0,96.0,5.0,41.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,ANY
594,378861,stream,3,cv.dnn.cuda4dnn.SliceOp.stream,,src\cuda4dnn\primitives\slice.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
595,149485,GetDescriptor,1,opencv_caffe.TanHParameter.GetDescriptor,Descriptor opencv_caffe.TanHParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",16553.0,16555.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
596,428013,setInputSwapRB,1,cv.dnn.Impl.setInputSwapRB,void cv.dnn.Impl.setInputSwapRB (bool),src\model.cpp,"void setInputSwapRB(bool swapRB_)
    {
        swapRB = swapRB_;
    }",89.0,92.0,5.0,5.0,4.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
597,378862,offsets,3,cv.dnn.cuda4dnn.SliceOp.offsets,,src\cuda4dnn\primitives\slice.hpp,offsets,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
598,428021,processFrame,1,cv.dnn.Impl.processFrame,"void cv.dnn.Impl.processFrame (InputArray,OutputArrayOfArrays)",src\model.cpp,"void processFrame(InputArray frame, OutputArrayOfArrays outs)
    {
        CV_TRACE_FUNCTION();
        if (size.empty())
            CV_Error(Error::StsBadSize, ""Input size not specified"");

        Image2BlobParams param;
        param.scalefactor = scale;
        param.size = size;
        param.mean = mean;
        param.swapRB = swapRB;
        if (crop)
        {
            param.paddingmode = DNN_PMODE_CROP_CENTER;
        }
        Mat blob = dnn::blobFromImageWithParams(frame, param); // [1, 10, 10, 4]

        net.setInput(blob);

        // Faster-RCNN or R-FCN
        if (net.getLayer(0)->outputNameToIndex(""im_info"") != -1)
        {
            Mat imInfo(Matx13f(size.height, size.width, 1.6f));
            net.setInput(imInfo, ""im_info"");
        }

        net.forward(outs, outNames);
    }",95.0,122.0,5.0,5.0,28.0,23,5,27,15,0,13,4,4,3,0,,0,13,4,2,2,void
599,313334,start_,3,opencv_tflite.SqueezeOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
600,313335,add_squeeze_dims,1,opencv_tflite.SqueezeOptionsBuilder.add_squeeze_dims,void opencv_tflite.SqueezeOptionsBuilder.add_squeeze_dims (ANY),misc\tflite\schema_generated.hpp,"void add_squeeze_dims(::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> squeeze_dims) {
    fbb_.AddOffset(SqueezeOptions::VT_SQUEEZE_DIMS, squeeze_dims);
  }",5298.0,5300.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
601,264184,s_,3,opencv_tensorflow.AttrValue_ListValue.s_,,misc\tensorflow\attr_value.pb.hpp,s_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
602,264185,i_,3,opencv_tensorflow.AttrValue_ListValue.i_,,misc\tensorflow\attr_value.pb.hpp,i_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
603,264186,_i_cached_byte_size_,3,opencv_tensorflow.AttrValue_ListValue._i_cached_byte_size_,,misc\tensorflow\attr_value.pb.hpp,_i_cached_byte_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
604,149496,GetReflection,1,opencv_caffe.TanHParameter.GetReflection,Reflection opencv_caffe.TanHParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",16556.0,16558.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
605,264188,b_,3,opencv_tensorflow.AttrValue_ListValue.b_,,misc\tensorflow\attr_value.pb.hpp,b_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
606,264189,type_,3,opencv_tensorflow.AttrValue_ListValue.type_,,misc\tensorflow\attr_value.pb.hpp,type_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
607,264187,f_,3,opencv_tensorflow.AttrValue_ListValue.f_,,misc\tensorflow\attr_value.pb.hpp,f_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
608,264190,_type_cached_byte_size_,3,opencv_tensorflow.AttrValue_ListValue._type_cached_byte_size_,,misc\tensorflow\attr_value.pb.hpp,_type_cached_byte_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
609,264192,tensor_,3,opencv_tensorflow.AttrValue_ListValue.tensor_,,misc\tensorflow\attr_value.pb.hpp,tensor_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
610,264193,_cached_size_,3,opencv_tensorflow.AttrValue_ListValue._cached_size_,,misc\tensorflow\attr_value.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
611,264191,shape_,3,opencv_tensorflow.AttrValue_ListValue.shape_,,misc\tensorflow\attr_value.pb.hpp,shape_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
612,149507,default_instance,1,opencv_caffe.TanHParameter.default_instance,TanHParameter opencv_caffe.TanHParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const TanHParameter& default_instance() {
    return *internal_default_instance();
  }",16559.0,16561.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,TanHParameter
613,313348,SqueezeOptionsBuilder,1,opencv_tflite.SqueezeOptionsBuilder.SqueezeOptionsBuilder,ANY opencv_tflite.SqueezeOptionsBuilder.SqueezeOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit SqueezeOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",5301.0,5304.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
614,67590,SharedCtor,1,opencv_caffe.InnerProductParameter.SharedCtor,void opencv_caffe.InnerProductParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void InnerProductParameter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&weight_filler_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&transpose_) -
    reinterpret_cast<char*>(&weight_filler_)) + sizeof(transpose_));
bias_term_ = true;
axis_ = 1;
}",21955.0,21962.0,1.0,1.0,8.0,18,7,6,4,0,6,1,1,0,0,,0,6,0,0,0,void
615,378890,forward,1,cv.dnn.cuda4dnn.SoftmaxOp.forward,"void cv.dnn.cuda4dnn.SoftmaxOp.forward (ANY,ANY,ANY)",src\cuda4dnn\primitives\softmax.hpp,"void forward(
            const std::vector<cv::Ptr<BackendWrapper>>& inputs,
            const std::vector<cv::Ptr<BackendWrapper>>& outputs,
            csl::Workspace& workspace) override
        {
            for (int i = 0; i < inputs.size(); i++)
            {
                auto input_wrapper = inputs[i].dynamicCast<wrapper_type>();
                auto input = input_wrapper->getView();

                auto output_wrapper = outputs[i].dynamicCast<wrapper_type>();
                auto output = output_wrapper->getSpan();

                csl::tensor_ops::softmax<T>(cudnnHandle, output, input, channel_axis, log);
            }
        }",28.0,43.0,9.0,9.0,16.0,15,5,20,12,0,3,2,2,0,0,,0,3,6,3,3,void
616,149514,internal_default_instance,1,opencv_caffe.TanHParameter.internal_default_instance,TanHParameter opencv_caffe.TanHParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const TanHParameter* internal_default_instance() {
    return reinterpret_cast<const TanHParameter*>(
               &_TanHParameter_default_instance_);
  }",16562.0,16565.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,TanHParameter
617,83980,_InternalParse,1,opencv_caffe.SoftmaxParameter._InternalParse,"const char* opencv_caffe.SoftmaxParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* SoftmaxParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .opencv_caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::opencv_caffe::SoftmaxParameter_Engine_IsValid(val))) {
            _internal_set_engine(static_cast<::opencv_caffe::SoftmaxParameter_Engine>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
...",27054.0,27105.0,1.0,10.0,52.0,40,12,44,12,0,4,12,16,1,2,,0,3,4,2,2,const char*
618,313359,Finish,1,opencv_tflite.SqueezeOptionsBuilder.Finish,Offset<SqueezeOptions> opencv_tflite.SqueezeOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<SqueezeOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SqueezeOptions>(end);
    return o;
  }",5305.0,5309.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<SqueezeOptions>
619,346148,val_,3,opencv_test.MatMulParamId.val_,,perf\perf_gemm.cpp,val_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
620,51239,GetMetadata,1,opencv_caffe.ConvolutionParameter.GetMetadata,Metadata opencv_caffe.ConvolutionParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata ConvolutionParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[24]);
}",16955.0,16959.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
621,313383,CreateSqueezeOptions,1,opencv_tflite.CreateSqueezeOptions,"Offset<SqueezeOptions> opencv_tflite.CreateSqueezeOptions (ANY,ANY)",misc\tflite\schema_generated.hpp,"inline ::flatbuffers::Offset<SqueezeOptions> CreateSqueezeOptions(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> squeeze_dims = 0) {
  SqueezeOptionsBuilder builder_(_fbb);
  builder_.add_squeeze_dims(squeeze_dims);
  return builder_.Finish();
}",5312.0,5318.0,1.0,1.0,7.0,2,1,4,3,1,0,1,1,0,0,,0,0,4,2,2,Offset<SqueezeOptions>
622,346154,operator int,1,opencv_test.MatMulParamId.operator int,ANY opencv_test.MatMulParamId.operator int (),perf\perf_gemm.cpp,operator int() const { return val_; },112.0,112.0,5.0,41.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,ANY
623,444466,crossChannelForward,1,cv.dnn.ocl4dnn.OCL4DNNLRN<Dtype>.crossChannelForward,"bool cv.dnn.ocl4dnn.OCL4DNNLRN<Dtype>.crossChannelForward<Dtype> (UMat,UMat)",src\ocl4dnn\src\ocl4dnn_lrn.cpp,"bool OCL4DNNLRN<Dtype>::crossChannelForward(const UMat& bottom, UMat& top)
{
    CHECK_EQ(phase_test_, true) << ""Only support forward inference."";

    cl_uint argIdx = 0;
    int32_t n_threads = num_ * height_ * width_;
    size_t global_work_size_[1] = {(size_t)n_threads};
    String opts = clOptionSupport(""-cl-no-subgroup-ifp"") ? "" -cl-no-subgroup-ifp "" : """";
    opts += format(""-D Dtype=%s"", (use_half_) ? ""half"" : ""float"");
    ocl::Kernel oclk_lrn_fill;
    String kname = format(""lrn_full_no_scale_%s"", (use_half_) ? ""half"" : ""float"");
    if (!oclk_lrn_fill.create(kname.c_str(), ocl::dnn::ocl4dnn_lrn_oclsrc, opts))
        return false;

    oclk_lrn_fill.set(argIdx++, n_threads);
    oclk_lrn_fill.set(argIdx++, ocl::KernelArg::PtrReadOnly(bottom));
    oclk_lrn_fill.set(argIdx++, num_);
    oclk_lrn_fill.set(argIdx++, channels_);
    oclk_lrn_fill.set(argIdx++, height_);
    oclk_lrn_fill.set(argIdx++, width_);
    oclk_lrn_fill.set(argIdx++, size_);
    int size_norm_factor =...",90.0,118.0,1.0,4.0,29.0,51,12,64,26,0,1,3,3,0,1,,0,1,4,2,2,bool
624,313402,CreateSqueezeOptionsDirect,1,opencv_tflite.CreateSqueezeOptionsDirect,"Offset<SqueezeOptions> opencv_tflite.CreateSqueezeOptionsDirect (ANY,ANY*)",misc\tflite\schema_generated.hpp,"inline ::flatbuffers::Offset<SqueezeOptions> CreateSqueezeOptionsDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int32_t> *squeeze_dims = nullptr) {
  auto squeeze_dims__ = squeeze_dims ? _fbb.CreateVector<int32_t>(*squeeze_dims) : 0;
  return opencv_tflite::CreateSqueezeOptions(
      _fbb,
      squeeze_dims__);
}",5320.0,5327.0,1.0,1.0,8.0,7,6,8,5,0,1,1,1,0,1,,0,0,4,2,2,Offset<SqueezeOptions>
625,67648,SharedDtor,1,opencv_caffe.InnerProductParameter.SharedDtor,void opencv_caffe.InnerProductParameter.SharedDtor (),misc\caffe\opencv-caffe.pb.cc,"inline void InnerProductParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete weight_filler_;
  if (this != internal_default_instance()) delete bias_filler_;
}",21971.0,21975.0,1.0,1.0,5.0,5,3,2,2,0,4,3,3,2,0,,0,4,0,0,0,void
626,18498,_InternalSerialize,1,opencv_caffe.NetParameter._InternalSerialize,"uint8_t opencv_caffe.NetParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* NetParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.NetParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      ""opencv_caffe.NetParameter.name"");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .opencv_caffe.V1LayerParameter layers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_layers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal...",7810.0,7893.0,1.0,1.0,84.0,118,8,128,14,0,2,11,11,0,1,,0,2,4,2,2,uint8_t
627,231491,ByteSizeLong,1,opencv_onnx.StringStringEntryProto.ByteSizeLong,size_t opencv_onnx.StringStringEntryProto.ByteSizeLong (),misc\onnx\opencv-onnx.pb.cc,"size_t StringStringEntryProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_onnx.StringStringEntryProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}",3017.0,3043.0,1.0,1.0,27.0,21,9,18,7,0,2,4,6,0,0,,0,2,0,0,0,size_t
628,378955,cudnnHandle,3,cv.dnn.cuda4dnn.SoftmaxOp.cudnnHandle,,src\cuda4dnn\primitives\softmax.hpp,cudnnHandle,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
629,378956,channel_axis,3,cv.dnn.cuda4dnn.SoftmaxOp.channel_axis,,src\cuda4dnn\primitives\softmax.hpp,channel_axis,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
630,378957,log,3,cv.dnn.cuda4dnn.SoftmaxOp.log,,src\cuda4dnn\primitives\softmax.hpp,log,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
631,264272,descriptor,1,opencv_tensorflow.AttrValue.descriptor,Descriptor opencv_tensorflow.AttrValue.descriptor (),misc\tensorflow\attr_value.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",411.0,413.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
632,247890,GetCachedSize,1,opencv_onnx.TensorShapeProto.GetCachedSize,int opencv_onnx.TensorShapeProto.GetCachedSize (),misc\onnx\opencv-onnx.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },2917.0,2917.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
633,264278,GetDescriptor,1,opencv_tensorflow.AttrValue.GetDescriptor,Descriptor opencv_tensorflow.AttrValue.GetDescriptor (),misc\tensorflow\attr_value.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",414.0,416.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
634,313432,fbb_,3,opencv_tflite.SplitOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
635,313433,start_,3,opencv_tflite.SplitOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
636,313434,add_num_splits,1,opencv_tflite.SplitOptionsBuilder.add_num_splits,void opencv_tflite.SplitOptionsBuilder.add_num_splits (int32_t),misc\tflite\schema_generated.hpp,"void add_num_splits(int32_t num_splits) {
    fbb_.AddElement<int32_t>(SplitOptions::VT_NUM_SPLITS, num_splits, 0);
  }",5348.0,5350.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
637,264289,GetReflection,1,opencv_tensorflow.AttrValue.GetReflection,Reflection opencv_tensorflow.AttrValue.GetReflection (),misc\tensorflow\attr_value.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",417.0,419.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
638,378983,forward,1,cv.dnn.cuda4dnn.SplitOp.forward,"void cv.dnn.cuda4dnn.SplitOp.forward (ANY,ANY,ANY)",src\cuda4dnn\primitives\split.hpp,"void forward(
            const std::vector<cv::Ptr<BackendWrapper>>& inputs,
            const std::vector<cv::Ptr<BackendWrapper>>& outputs,
            csl::Workspace& workspace) override
        {
            CV_Assert(inputs.size() == 1);

            auto input_wrapper = inputs[0].dynamicCast<wrapper_type>();
            auto input = input_wrapper->getView();

            for (int i = 0; i < outputs.size(); i++)
            {
                auto output_wrapper = outputs[i].dynamicCast<wrapper_type>();
                auto output = output_wrapper->getSpan();

                csl::tensor_ops::copy<T>(stream, output, input);
            }
        }",29.0,46.0,9.0,9.0,18.0,17,6,18,10,0,1,2,2,0,0,,0,1,6,3,3,void
639,51304,SharedCtor,1,opencv_caffe.CropParameter.SharedCtor,void opencv_caffe.CropParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void CropParameter::SharedCtor() {
axis_ = 2;
}",16990.0,16992.0,1.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,void
640,67689,SetCachedSize,1,opencv_caffe.InnerProductParameter.SetCachedSize,void opencv_caffe.InnerProductParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void InnerProductParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",21983.0,21985.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
641,313452,SplitOptionsBuilder,1,opencv_tflite.SplitOptionsBuilder.SplitOptionsBuilder,ANY opencv_tflite.SplitOptionsBuilder.SplitOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit SplitOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",5351.0,5354.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
642,264300,default_instance,1,opencv_tensorflow.AttrValue.default_instance,AttrValue opencv_tensorflow.AttrValue.default_instance (),misc\tensorflow\attr_value.pb.hpp,"static const AttrValue& default_instance() {
    return *internal_default_instance();
  }",420.0,422.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,AttrValue
643,67699,Clear,1,opencv_caffe.InnerProductParameter.Clear,void opencv_caffe.InnerProductParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void InnerProductParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.InnerProductParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(weight_filler_ != nullptr);
      weight_filler_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bias_filler_ != nullptr);
      bias_filler_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&num_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&transpose_) -
        reinterpret_cast<char*>(&num_output_)) + sizeof(transpose_));
    bias_term_ = true;
    axis_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",21987.0,22013.0,1.0,1.0,27.0,26,11,20,9,0,12,5,7,0,0,,0,12,0,0,0,void
644,264308,kS,3,opencv_tensorflow.AttrValue.ValueCase.kS,,misc\tensorflow\attr_value.pb.hpp,kS = 2,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
645,264309,kI,3,opencv_tensorflow.AttrValue.ValueCase.kI,,misc\tensorflow\attr_value.pb.hpp,kI = 3,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
646,264310,kF,3,opencv_tensorflow.AttrValue.ValueCase.kF,,misc\tensorflow\attr_value.pb.hpp,kF = 4,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
647,264311,kB,3,opencv_tensorflow.AttrValue.ValueCase.kB,,misc\tensorflow\attr_value.pb.hpp,kB = 5,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
648,264312,kType,3,opencv_tensorflow.AttrValue.ValueCase.kType,,misc\tensorflow\attr_value.pb.hpp,kType = 6,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
649,264313,kShape,3,opencv_tensorflow.AttrValue.ValueCase.kShape,,misc\tensorflow\attr_value.pb.hpp,kShape = 7,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
650,264314,kTensor,3,opencv_tensorflow.AttrValue.ValueCase.kTensor,,misc\tensorflow\attr_value.pb.hpp,kTensor = 8,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
651,313463,Finish,1,opencv_tflite.SplitOptionsBuilder.Finish,Offset<SplitOptions> opencv_tflite.SplitOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<SplitOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SplitOptions>(end);
    return o;
  }",5355.0,5359.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<SplitOptions>
652,264315,kList,3,opencv_tensorflow.AttrValue.ValueCase.kList,,misc\tensorflow\attr_value.pb.hpp,kList = 1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
653,264317,kPlaceholder,3,opencv_tensorflow.AttrValue.ValueCase.kPlaceholder,,misc\tensorflow\attr_value.pb.hpp,kPlaceholder = 9,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
654,133245,_has_bits_,3,opencv_caffe.DataParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
655,133247,source_,3,opencv_caffe.DataParameter.source_,,misc\caffe\opencv-caffe.pb.hpp,source_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
656,133248,mean_file_,3,opencv_caffe.DataParameter.mean_file_,,misc\caffe\opencv-caffe.pb.hpp,mean_file_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
657,133249,batch_size_,3,opencv_caffe.DataParameter.batch_size_,,misc\caffe\opencv-caffe.pb.hpp,batch_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
658,133246,_cached_size_,3,opencv_caffe.DataParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
659,133251,rand_skip_,3,opencv_caffe.DataParameter.rand_skip_,,misc\caffe\opencv-caffe.pb.hpp,rand_skip_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
660,133252,mirror_,3,opencv_caffe.DataParameter.mirror_,,misc\caffe\opencv-caffe.pb.hpp,mirror_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
661,133253,force_encoded_color_,3,opencv_caffe.DataParameter.force_encoded_color_,,misc\caffe\opencv-caffe.pb.hpp,force_encoded_color_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
662,133254,backend_,3,opencv_caffe.DataParameter.backend_,,misc\caffe\opencv-caffe.pb.hpp,backend_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
663,133255,scale_,3,opencv_caffe.DataParameter.scale_,,misc\caffe\opencv-caffe.pb.hpp,scale_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
664,133256,prefetch_,3,opencv_caffe.DataParameter.prefetch_,,misc\caffe\opencv-caffe.pb.hpp,prefetch_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
665,133250,crop_size_,3,opencv_caffe.DataParameter.crop_size_,,misc\caffe\opencv-caffe.pb.hpp,crop_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
666,149639,GetCachedSize,1,opencv_caffe.TanHParameter.GetCachedSize,int opencv_caffe.TanHParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },16610.0,16610.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
667,51353,SetCachedSize,1,opencv_caffe.CropParameter.SetCachedSize,void opencv_caffe.CropParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void CropParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",17011.0,17013.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
668,51363,Clear,1,opencv_caffe.CropParameter.Clear,void opencv_caffe.CropParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void CropParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.CropParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  offset_.Clear();
  axis_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",17015.0,17025.0,1.0,1.0,11.0,6,3,6,5,0,3,1,1,0,0,,0,3,0,0,0,void
669,264356,internal_default_instance,1,opencv_tensorflow.AttrValue.internal_default_instance,AttrValue opencv_tensorflow.AttrValue.internal_default_instance (),misc\tensorflow\attr_value.pb.hpp,"static inline const AttrValue* internal_default_instance() {
    return reinterpret_cast<const AttrValue*>(
               &_AttrValue_default_instance_);
  }",437.0,440.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,AttrValue
670,313509,fbb_,3,opencv_tflite.SplitVOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
671,313510,start_,3,opencv_tflite.SplitVOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
672,313511,add_num_splits,1,opencv_tflite.SplitVOptionsBuilder.add_num_splits,void opencv_tflite.SplitVOptionsBuilder.add_num_splits (int32_t),misc\tflite\schema_generated.hpp,"void add_num_splits(int32_t num_splits) {
    fbb_.AddElement<int32_t>(SplitVOptions::VT_NUM_SPLITS, num_splits, 0);
  }",5389.0,5391.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
673,379053,stream,3,cv.dnn.cuda4dnn.SplitOp.stream,,src\cuda4dnn\primitives\split.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
674,231597,MergeFrom,1,opencv_onnx.StringStringEntryProto.MergeFrom,void opencv_onnx.StringStringEntryProto.MergeFrom (StringStringEntryProto),misc\onnx\opencv-onnx.pb.cc,"void StringStringEntryProto::MergeFrom(const StringStringEntryProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_onnx.StringStringEntryProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",3058.0,3074.0,1.0,1.0,17.0,16,8,13,4,0,1,4,6,0,0,,0,1,2,1,1,void
675,313529,SplitVOptionsBuilder,1,opencv_tflite.SplitVOptionsBuilder.SplitVOptionsBuilder,ANY opencv_tflite.SplitVOptionsBuilder.SplitVOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit SplitVOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",5392.0,5395.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
676,116924,_has_bits_,3,opencv_caffe.DetectionOutputParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
677,51389,_InternalParse,1,opencv_caffe.CropParameter._InternalParse,"const char* opencv_caffe.CropParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* CropParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 axis = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_axis(&has_bits);
          axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_offset(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->Dat...",17027.0,17081.0,1.0,10.0,55.0,45,16,47,10,0,3,14,21,0,1,,0,2,4,2,2,const char*
678,116926,nms_param_,3,opencv_caffe.DetectionOutputParameter.nms_param_,,misc\caffe\opencv-caffe.pb.hpp,* nms_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
679,116927,save_output_param_,3,opencv_caffe.DetectionOutputParameter.save_output_param_,,misc\caffe\opencv-caffe.pb.hpp,* save_output_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
680,116925,_cached_size_,3,opencv_caffe.DetectionOutputParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
681,116929,background_label_id_,3,opencv_caffe.DetectionOutputParameter.background_label_id_,,misc\caffe\opencv-caffe.pb.hpp,background_label_id_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
682,116928,num_classes_,3,opencv_caffe.DetectionOutputParameter.num_classes_,,misc\caffe\opencv-caffe.pb.hpp,num_classes_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
683,116931,variance_encoded_in_target_,3,opencv_caffe.DetectionOutputParameter.variance_encoded_in_target_,,misc\caffe\opencv-caffe.pb.hpp,variance_encoded_in_target_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
684,116932,clip_,3,opencv_caffe.DetectionOutputParameter.clip_,,misc\caffe\opencv-caffe.pb.hpp,clip_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
685,116933,keep_top_k_,3,opencv_caffe.DetectionOutputParameter.keep_top_k_,,misc\caffe\opencv-caffe.pb.hpp,keep_top_k_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
686,248006,dim_,3,opencv_onnx.TensorShapeProto.dim_,,misc\onnx\opencv-onnx.pb.hpp,dim_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
687,116935,share_location_,3,opencv_caffe.DetectionOutputParameter.share_location_,,misc\caffe\opencv-caffe.pb.hpp,share_location_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
688,116936,normalized_bbox_,3,opencv_caffe.DetectionOutputParameter.normalized_bbox_,,misc\caffe\opencv-caffe.pb.hpp,normalized_bbox_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
689,116934,code_type_,3,opencv_caffe.DetectionOutputParameter.code_type_,,misc\caffe\opencv-caffe.pb.hpp,code_type_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
690,67786,_InternalParse,1,opencv_caffe.InnerProductParameter._InternalParse,"const char* opencv_caffe.InnerProductParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* InnerProductParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 num_output = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_num_output(&has_bits);
          num_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool bias_term = 2 [default = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_bias_term(&has_bits);
          bias_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } els...",22015.0,22096.0,1.0,10.0,82.0,68,12,73,13,0,9,19,24,0,4,,0,5,4,2,2,const char*
691,248007,_cached_size_,3,opencv_onnx.TensorShapeProto._cached_size_,,misc\onnx\opencv-onnx.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
692,313540,Finish,1,opencv_tflite.SplitVOptionsBuilder.Finish,Offset<SplitVOptions> opencv_tflite.SplitVOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<SplitVOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SplitVOptions>(end);
    return o;
  }",5396.0,5400.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<SplitVOptions>
693,84174,_InternalSerialize,1,opencv_caffe.SoftmaxParameter._InternalSerialize,"uint8_t opencv_caffe.SoftmaxParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* SoftmaxParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.SoftmaxParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .opencv_caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_engine(), target);
  }

  // optional int32 axis = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_axis(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::Inte...",27107.0,27133.0,1.0,1.0,27.0,31,8,34,10,0,1,4,4,0,0,,0,1,4,2,2,uint8_t
694,379098,kernel_size,3,cv.dnn.cuda4dnn.TransposeConvolutionConfiguration.kernel_size,,src\cuda4dnn\primitives\transpose_convolution.hpp,kernel_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
695,379099,dilations,3,cv.dnn.cuda4dnn.TransposeConvolutionConfiguration.dilations,,src\cuda4dnn\primitives\transpose_convolution.hpp,dilations,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
696,379100,strides,3,cv.dnn.cuda4dnn.TransposeConvolutionConfiguration.strides,,src\cuda4dnn\primitives\transpose_convolution.hpp,strides,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
697,379105,padMode,3,cv.dnn.cuda4dnn.TransposeConvolutionConfiguration.padMode,,src\cuda4dnn\primitives\transpose_convolution.hpp,padMode,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
698,379106,pads_begin,3,cv.dnn.cuda4dnn.TransposeConvolutionConfiguration.pads_begin,,src\cuda4dnn\primitives\transpose_convolution.hpp,pads_begin,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
699,379107,pads_end,3,cv.dnn.cuda4dnn.TransposeConvolutionConfiguration.pads_end,,src\cuda4dnn\primitives\transpose_convolution.hpp,pads_end,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
700,379108,input_shape,3,cv.dnn.cuda4dnn.TransposeConvolutionConfiguration.input_shape,,src\cuda4dnn\primitives\transpose_convolution.hpp,input_shape,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
701,379109,output_shape,3,cv.dnn.cuda4dnn.TransposeConvolutionConfiguration.output_shape,,src\cuda4dnn\primitives\transpose_convolution.hpp,output_shape,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
702,379110,groups,3,cv.dnn.cuda4dnn.TransposeConvolutionConfiguration.groups,,src\cuda4dnn\primitives\transpose_convolution.hpp,groups,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
703,379112,TransposeConvolutionOp,1,cv.dnn.cuda4dnn.TransposeConvolutionOp.TransposeConvolutionOp,"ANY cv.dnn.cuda4dnn.TransposeConvolutionOp.TransposeConvolutionOp (ANY,ANY,TransposeConvolutionConfiguration,Mat,Mat)",src\cuda4dnn\primitives\transpose_convolution.hpp,"TransposeConvolutionOp(csl::Stream stream_, csl::cudnn::Handle handle, const TransposeConvolutionConfiguration& config, const Mat& filters, const Mat& bias)
            : stream(std::move(stream_)), cudnnHandle(std::move(handle))
        {
            /* we make use of backward pass of convolution to perform forward pass of transpose convolution
             * hence, we must setup configuration for the convolution operation and perform backward pass
             */
            const auto& kernel_size = config.kernel_size;
            const auto& dilations = config.dilations;
            const auto& strides = config.strides;

            const auto convolution_order = kernel_size.size();
            CV_Assert(convolution_order >= 1);

            CV_Assert(convolution_order == dilations.size());
            CV_Assert(convolution_order == strides.size());

            const auto& input_shape = config.input_shape;
            const auto& output_shape = config.output_shape;
            ...",59.0,193.0,9.0,9.0,135.0,184,17,189,40,0,20,8,10,1,0,,0,20,10,5,5,ANY
704,395497,fusedWeights,3,cv.dnn.BaseConvolutionLayerImpl.fusedWeights,,src\layers\convolution_layer.cpp,fusedWeights,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
705,395498,fusedBias,3,cv.dnn.BaseConvolutionLayerImpl.fusedBias,,src\layers\convolution_layer.cpp,fusedBias,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
706,395501,BaseConvolutionLayerImpl,1,cv.dnn.BaseConvolutionLayerImpl.BaseConvolutionLayerImpl,ANY cv.dnn.BaseConvolutionLayerImpl.BaseConvolutionLayerImpl (LayerParams),src\layers\convolution_layer.cpp,"BaseConvolutionLayerImpl(const LayerParams &params)
    {
        setParamsFrom(params);
        getConvolutionKernelParams(params, kernel_size, pads_begin, pads_end, strides, dilations,
                                   padMode, adjust_pads, useWinograd);

        numOutput = params.get<int>(""num_output"");
        int ngroups = params.get<int>(""group"", 1);
#ifdef HAVE_WEBNN
        groups = ngroups;
#endif
        CV_Assert(numOutput % ngroups == 0);

        if (kernel_size.size() == 2) {
            kernel = Size(kernel_size[1], kernel_size[0]);
            stride = Size(strides[1], strides[0]);
            pad = Size(pads_begin[1], pads_begin[0]);
            dilation = Size(dilations[1], dilations[0]);

            adjustPad.height = adjust_pads[0];
            adjustPad.width = adjust_pads[1];
        }

        for (int i = 0; i < adjust_pads.size(); i++) {
            CV_Assert(adjust_pads[i] < strides[i]);
        }

        fusedWeights = false;
        fusedBias = false;...",87.0,116.0,5.0,5.0,30.0,34,6,42,19,0,2,3,3,0,0,,0,2,2,1,1,ANY
707,313586,fbb_,3,opencv_tflite.StridedSliceOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
708,313587,start_,3,opencv_tflite.StridedSliceOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
709,313588,add_begin_mask,1,opencv_tflite.StridedSliceOptionsBuilder.add_begin_mask,void opencv_tflite.StridedSliceOptionsBuilder.add_begin_mask (int32_t),misc\tflite\schema_generated.hpp,"void add_begin_mask(int32_t begin_mask) {
    fbb_.AddElement<int32_t>(StridedSliceOptions::VT_BEGIN_MASK, begin_mask, 0);
  }",5450.0,5452.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
710,231677,InternalSwap,1,opencv_onnx.StringStringEntryProto.InternalSwap,void opencv_onnx.StringStringEntryProto.InternalSwap (StringStringEntryProto*),misc\onnx\opencv-onnx.pb.cc,"void StringStringEntryProto::InternalSwap(StringStringEntryProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}",3087.0,3103.0,1.0,1.0,17.0,27,5,25,10,0,6,1,1,0,0,,0,6,2,1,1,void
711,133377,descriptor,1,opencv_caffe.NonMaximumSuppressionParameter.descriptor,Descriptor opencv_caffe.NonMaximumSuppressionParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",9714.0,9716.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
712,313606,add_end_mask,1,opencv_tflite.StridedSliceOptionsBuilder.add_end_mask,void opencv_tflite.StridedSliceOptionsBuilder.add_end_mask (int32_t),misc\tflite\schema_generated.hpp,"void add_end_mask(int32_t end_mask) {
    fbb_.AddElement<int32_t>(StridedSliceOptions::VT_END_MASK, end_mask, 0);
  }",5453.0,5455.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
713,133383,GetDescriptor,1,opencv_caffe.NonMaximumSuppressionParameter.GetDescriptor,Descriptor opencv_caffe.NonMaximumSuppressionParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",9717.0,9719.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
714,133394,GetReflection,1,opencv_caffe.NonMaximumSuppressionParameter.GetReflection,Reflection opencv_caffe.NonMaximumSuppressionParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",9720.0,9722.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
715,444692,OCL4DNNPool,1,cv.dnn.ocl4dnn.OCL4DNNPool<Dtype>.OCL4DNNPool,ANY cv.dnn.ocl4dnn.OCL4DNNPool<Dtype>.OCL4DNNPool<Dtype> (OCL4DNNPoolConfig),src\ocl4dnn\src\ocl4dnn_pool.cpp,"OCL4DNNPool<Dtype>::OCL4DNNPool(OCL4DNNPoolConfig config)
{
    int dims = config.in_shape.size();
    int spatial_dims = config.in_shape.size()-2;

    channels_ = config.channels;
    pool_method_ = config.pool_method;
    avePoolPaddedArea = config.avePoolPaddedArea;
    computeMaxIdx = config.computeMaxIdx;
    use_half = config.use_half;
    kernel_shape_.push_back(config.kernel.height);
    kernel_shape_.push_back(config.kernel.width);
    stride_.push_back(config.stride.height);
    stride_.push_back(config.stride.width);

    for (int i = 0; i < spatial_dims; ++i)
    {
        im_in_shape_.push_back(config.in_shape[dims - spatial_dims + i]);
        im_out_shape_.push_back(config.out_shape[dims - spatial_dims + i]);
    }

    kernel_h_ = kernel_shape_[0];
    kernel_w_ = kernel_shape_[1];
    stride_h_ = stride_[0];
    stride_w_ = stride_[1];
    pad_t_ = config.pad_t;
    pad_l_ = config.pad_l;
    pad_r_ = config.pad_r;
    pad_b_ = config.pad_b;
    height_ = spatial_d...",51.0,90.0,1.0,1.0,40.0,77,9,68,26,0,19,3,3,1,0,,0,19,2,1,1,ANY
716,280855,file_level_metadata_op_5fdef_2eproto,2,misc\tensorflow\op_def.pb.cc.file_level_metadata_op_5fdef_2eproto,,misc\tensorflow\op_def.pb.cc,static ::PROTOBUF_NAMESPACE_ID::Metadata[5] file_level_metadata_op_5fdef_2eproto,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
717,313624,add_ellipsis_mask,1,opencv_tflite.StridedSliceOptionsBuilder.add_ellipsis_mask,void opencv_tflite.StridedSliceOptionsBuilder.add_ellipsis_mask (int32_t),misc\tflite\schema_generated.hpp,"void add_ellipsis_mask(int32_t ellipsis_mask) {
    fbb_.AddElement<int32_t>(StridedSliceOptions::VT_ELLIPSIS_MASK, ellipsis_mask, 0);
  }",5456.0,5458.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
718,133405,default_instance,1,opencv_caffe.NonMaximumSuppressionParameter.default_instance,NonMaximumSuppressionParameter opencv_caffe.NonMaximumSuppressionParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const NonMaximumSuppressionParameter& default_instance() {
    return *internal_default_instance();
  }",9723.0,9725.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,NonMaximumSuppressionParameter
719,264481,GetCachedSize,1,opencv_tensorflow.AttrValue.GetCachedSize,int opencv_tensorflow.AttrValue.GetCachedSize (),misc\tensorflow\attr_value.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },485.0,485.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
720,133412,internal_default_instance,1,opencv_caffe.NonMaximumSuppressionParameter.internal_default_instance,NonMaximumSuppressionParameter opencv_caffe.NonMaximumSuppressionParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const NonMaximumSuppressionParameter* internal_default_instance() {
    return reinterpret_cast<const NonMaximumSuppressionParameter*>(
               &_NonMaximumSuppressionParameter_default_instance_);
  }",9726.0,9729.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,NonMaximumSuppressionParameter
721,149797,_has_bits_,3,opencv_caffe.TanHParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
722,149798,_cached_size_,3,opencv_caffe.TanHParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
723,149799,engine_,3,opencv_caffe.TanHParameter.engine_,,misc\caffe\opencv-caffe.pb.hpp,engine_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
724,313642,add_new_axis_mask,1,opencv_tflite.StridedSliceOptionsBuilder.add_new_axis_mask,void opencv_tflite.StridedSliceOptionsBuilder.add_new_axis_mask (int32_t),misc\tflite\schema_generated.hpp,"void add_new_axis_mask(int32_t new_axis_mask) {
    fbb_.AddElement<int32_t>(StridedSliceOptions::VT_NEW_AXIS_MASK, new_axis_mask, 0);
  }",5459.0,5461.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
725,248113,descriptor,1,opencv_onnx.TypeProto_Tensor.descriptor,Descriptor opencv_onnx.TypeProto_Tensor.descriptor (),misc\onnx\opencv-onnx.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",3021.0,3023.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
726,117042,descriptor,1,opencv_caffe.Datum.descriptor,Descriptor opencv_caffe.Datum.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",2945.0,2947.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
727,428340,setEnableSoftmaxPostProcessing,1,cv.dnn.ClassificationModel_Impl.setEnableSoftmaxPostProcessing,void cv.dnn.ClassificationModel_Impl.setEnableSoftmaxPostProcessing (bool),src\model.cpp,"void setEnableSoftmaxPostProcessing(bool enable)
    {
        applySoftmax = enable;
    }",229.0,232.0,5.0,5.0,4.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
728,248119,GetDescriptor,1,opencv_onnx.TypeProto_Tensor.GetDescriptor,Descriptor opencv_onnx.TypeProto_Tensor.GetDescriptor (),misc\onnx\opencv-onnx.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",3024.0,3026.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
729,117048,GetDescriptor,1,opencv_caffe.Datum.GetDescriptor,Descriptor opencv_caffe.Datum.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",2948.0,2950.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
730,84282,ByteSizeLong,1,opencv_caffe.SoftmaxParameter.ByteSizeLong,size_t opencv_caffe.SoftmaxParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t SoftmaxParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.SoftmaxParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .opencv_caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_engine());
    }

    // optional int32 axis = 2 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_axis());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}",27135.0,27158.0,1.0,1.0,24.0,20,9,18,7,0,2,4,6,0,0,,0,2,0,0,0,size_t
731,428348,getEnableSoftmaxPostProcessing,1,cv.dnn.ClassificationModel_Impl.getEnableSoftmaxPostProcessing,bool cv.dnn.ClassificationModel_Impl.getEnableSoftmaxPostProcessing (),src\model.cpp,"bool getEnableSoftmaxPostProcessing() const
    {
        return applySoftmax;
    }",234.0,237.0,5.0,5.0,4.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,bool
732,313660,add_shrink_axis_mask,1,opencv_tflite.StridedSliceOptionsBuilder.add_shrink_axis_mask,void opencv_tflite.StridedSliceOptionsBuilder.add_shrink_axis_mask (int32_t),misc\tflite\schema_generated.hpp,"void add_shrink_axis_mask(int32_t shrink_axis_mask) {
    fbb_.AddElement<int32_t>(StridedSliceOptions::VT_SHRINK_AXIS_MASK, shrink_axis_mask, 0);
  }",5462.0,5464.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
733,248130,GetReflection,1,opencv_onnx.TypeProto_Tensor.GetReflection,Reflection opencv_onnx.TypeProto_Tensor.GetReflection (),misc\onnx\opencv-onnx.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",3027.0,3029.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
734,117059,GetReflection,1,opencv_caffe.Datum.GetReflection,Reflection opencv_caffe.Datum.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",2951.0,2953.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
735,231756,GetMetadata,1,opencv_onnx.StringStringEntryProto.GetMetadata,Metadata opencv_onnx.StringStringEntryProto.GetMetadata (),misc\onnx\opencv-onnx.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata StringStringEntryProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2donnx_2eproto_getter, &descriptor_table_opencv_2donnx_2eproto_once,
      file_level_metadata_opencv_2donnx_2eproto[4]);
}",3105.0,3109.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
736,248141,default_instance,1,opencv_onnx.TypeProto_Tensor.default_instance,TypeProto_Tensor opencv_onnx.TypeProto_Tensor.default_instance (),misc\onnx\opencv-onnx.pb.hpp,"static const TypeProto_Tensor& default_instance() {
    return *internal_default_instance();
  }",3030.0,3032.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,TypeProto_Tensor
737,313678,StridedSliceOptionsBuilder,1,opencv_tflite.StridedSliceOptionsBuilder.StridedSliceOptionsBuilder,ANY opencv_tflite.StridedSliceOptionsBuilder.StridedSliceOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit StridedSliceOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",5465.0,5468.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
738,117070,default_instance,1,opencv_caffe.Datum.default_instance,Datum opencv_caffe.Datum.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const Datum& default_instance() {
    return *internal_default_instance();
  }",2954.0,2956.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,Datum
739,280915,descriptor_table_op_5fdef_2eproto_once,2,misc\tensorflow\op_def.pb.cc.descriptor_table_op_5fdef_2eproto_once,,misc\tensorflow\op_def.pb.cc,ANY descriptor_table_op_5fdef_2eproto_once,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
740,280916,descriptor_table_op_5fdef_2eproto,2,misc\tensorflow\op_def.pb.cc.descriptor_table_op_5fdef_2eproto,,misc\tensorflow\op_def.pb.cc,ANY descriptor_table_op_5fdef_2eproto,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
741,117077,internal_default_instance,1,opencv_caffe.Datum.internal_default_instance,Datum opencv_caffe.Datum.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const Datum* internal_default_instance() {
    return reinterpret_cast<const Datum*>(
               &_Datum_default_instance_);
  }",2957.0,2960.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,Datum
742,248148,internal_default_instance,1,opencv_onnx.TypeProto_Tensor.internal_default_instance,TypeProto_Tensor opencv_onnx.TypeProto_Tensor.internal_default_instance (),misc\onnx\opencv-onnx.pb.hpp,"static inline const TypeProto_Tensor* internal_default_instance() {
    return reinterpret_cast<const TypeProto_Tensor*>(
               &_TypeProto_Tensor_default_instance_);
  }",3033.0,3036.0,3.0,3.0,4.0,2,2,1,1,2,0,1,1,0,0,,0,0,0,0,0,TypeProto_Tensor
743,313689,Finish,1,opencv_tflite.StridedSliceOptionsBuilder.Finish,Offset<StridedSliceOptions> opencv_tflite.StridedSliceOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<StridedSliceOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<StridedSliceOptions>(end);
    return o;
  }",5469.0,5473.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<StridedSliceOptions>
744,280939,descriptor_table_op_5fdef_2eproto_getter,1,descriptor_table_op_5fdef_2eproto_getter,DescriptorTable descriptor_table_op_5fdef_2eproto_getter (),misc\tensorflow\op_def.pb.cc,"const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_op_5fdef_2eproto_getter() {
  return &descriptor_table_op_5fdef_2eproto;
}",223.0,225.0,25.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,DescriptorTable
745,264590,_internal_has_s,1,opencv_tensorflow.AttrValue._internal_has_s,bool opencv_tensorflow.AttrValue._internal_has_s (),misc\tensorflow\attr_value.pb.hpp,"inline bool AttrValue::_internal_has_s() const {
  return value_case() == kS;
}",1279.0,1281.0,1.0,1.0,3.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,bool
746,51613,_InternalSerialize,1,opencv_caffe.CropParameter._InternalSerialize,"uint8_t opencv_caffe.CropParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* CropParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.CropParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 axis = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_axis(), target);
  }

  // repeated uint32 offset = 2;
  for (int i = 0, n = this->_internal_offset_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_offset(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray...",17083.0,17108.0,1.0,1.0,26.0,34,8,38,12,0,1,4,4,0,0,,0,1,4,2,2,uint8_t
747,313759,fbb_,3,opencv_tflite.LogSoftmaxOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
748,313760,start_,3,opencv_tflite.LogSoftmaxOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
749,133537,GetCachedSize,1,opencv_caffe.NonMaximumSuppressionParameter.GetCachedSize,int opencv_caffe.NonMaximumSuppressionParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },9774.0,9774.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
750,313761,LogSoftmaxOptionsBuilder,1,opencv_tflite.LogSoftmaxOptionsBuilder.LogSoftmaxOptionsBuilder,ANY opencv_tflite.LogSoftmaxOptionsBuilder.LogSoftmaxOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit LogSoftmaxOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",5504.0,5507.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
751,149923,descriptor,1,opencv_caffe.TileParameter.descriptor,Descriptor opencv_caffe.TileParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",16740.0,16742.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
752,84386,MergeFrom,1,opencv_caffe.SoftmaxParameter.MergeFrom,void opencv_caffe.SoftmaxParameter.MergeFrom (SoftmaxParameter),misc\caffe\opencv-caffe.pb.cc,"void SoftmaxParameter::MergeFrom(const SoftmaxParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.SoftmaxParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      engine_ = from.engine_;
    }
    if (cached_has_bits & 0x00000002u) {
      axis_ = from.axis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",27173.0,27190.0,1.0,1.0,18.0,19,8,17,7,2,6,4,6,0,0,,0,6,2,1,1,void
753,149929,GetDescriptor,1,opencv_caffe.TileParameter.GetDescriptor,Descriptor opencv_caffe.TileParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",16743.0,16745.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
754,313772,Finish,1,opencv_tflite.LogSoftmaxOptionsBuilder.Finish,Offset<LogSoftmaxOptions> opencv_tflite.LogSoftmaxOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<LogSoftmaxOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LogSoftmaxOptions>(end);
    return o;
  }",5508.0,5512.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<LogSoftmaxOptions>
755,149940,GetReflection,1,opencv_caffe.TileParameter.GetReflection,Reflection opencv_caffe.TileParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",16746.0,16748.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
756,428471,applySoftmax,3,cv.dnn.ClassificationModel_Impl.applySoftmax,,src\model.cpp,applySoftmax = false,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
757,149951,default_instance,1,opencv_caffe.TileParameter.default_instance,TileParameter opencv_caffe.TileParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const TileParameter& default_instance() {
    return *internal_default_instance();
  }",16749.0,16751.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,TileParameter
758,149958,internal_default_instance,1,opencv_caffe.TileParameter.internal_default_instance,TileParameter opencv_caffe.TileParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const TileParameter* internal_default_instance() {
    return reinterpret_cast<const TileParameter*>(
               &_TileParameter_default_instance_);
  }",16752.0,16755.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,TileParameter
759,231883,SharedCtor,1,opencv_onnx.GraphProto.SharedCtor,void opencv_onnx.GraphProto.SharedCtor (),misc\onnx\opencv-onnx.pb.cc,"inline void GraphProto::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
doc_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  doc_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}",3166.0,3175.0,1.0,1.0,10.0,8,2,6,4,0,2,1,1,0,0,,0,2,0,0,0,void
760,248273,GetCachedSize,1,opencv_onnx.TypeProto_Tensor.GetCachedSize,int opencv_onnx.TypeProto_Tensor.GetCachedSize (),misc\onnx\opencv-onnx.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },3081.0,3081.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
761,117202,GetCachedSize,1,opencv_caffe.Datum.GetCachedSize,int opencv_caffe.Datum.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },3005.0,3005.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
762,313812,fbb_,3,opencv_tflite.CastOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
763,313813,start_,3,opencv_tflite.CastOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
764,313814,add_in_data_type,1,opencv_tflite.CastOptionsBuilder.add_in_data_type,void opencv_tflite.CastOptionsBuilder.add_in_data_type (ANY),misc\tflite\schema_generated.hpp,"void add_in_data_type(opencv_tflite::TensorType in_data_type) {
    fbb_.AddElement<int8_t>(CastOptions::VT_IN_DATA_TYPE, static_cast<int8_t>(in_data_type), 0);
  }",5545.0,5547.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
765,313834,add_out_data_type,1,opencv_tflite.CastOptionsBuilder.add_out_data_type,void opencv_tflite.CastOptionsBuilder.add_out_data_type (ANY),misc\tflite\schema_generated.hpp,"void add_out_data_type(opencv_tflite::TensorType out_data_type) {
    fbb_.AddElement<int8_t>(CastOptions::VT_OUT_DATA_TYPE, static_cast<int8_t>(out_data_type), 0);
  }",5548.0,5550.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
766,18928,ByteSizeLong,1,opencv_caffe.NetParameter.ByteSizeLong,size_t opencv_caffe.NetParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t NetParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.NetParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opencv_caffe.V1LayerParameter layers = 2;
  total_size += 1UL * this->_internal_layers_size();
  for (const auto& msg : this->layers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string input = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(input_.size());
  for (int i = 0, n = input_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      input_.Get(i));
  }

  // repeated int32 input_dim = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->input_dim_);
    total_size += 1 *
                  ::PR...",7895.0,7969.0,1.0,1.0,75.0,76,12,65,13,0,10,10,14,3,0,,0,10,0,0,0,size_t
767,231924,SharedDtor,1,opencv_onnx.GraphProto.SharedDtor,void opencv_onnx.GraphProto.SharedDtor (),misc\onnx\opencv-onnx.pb.cc,"inline void GraphProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doc_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}",3184.0,3188.0,1.0,1.0,5.0,9,3,6,4,0,2,1,1,0,0,,0,2,0,0,0,void
768,84471,InternalSwap,1,opencv_caffe.SoftmaxParameter.InternalSwap,void opencv_caffe.SoftmaxParameter.InternalSwap (SoftmaxParameter*),misc\caffe\opencv-caffe.pb.cc,"void SoftmaxParameter::InternalSwap(SoftmaxParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(engine_, other->engine_);
  swap(axis_, other->axis_);
}",27203.0,27209.0,1.0,1.0,7.0,8,4,8,5,0,6,1,1,0,0,,0,6,2,1,1,void
769,313854,CastOptionsBuilder,1,opencv_tflite.CastOptionsBuilder.CastOptionsBuilder,ANY opencv_tflite.CastOptionsBuilder.CastOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit CastOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",5551.0,5554.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
770,68102,_InternalSerialize,1,opencv_caffe.InnerProductParameter._InternalSerialize,"uint8_t opencv_caffe.InnerProductParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* InnerProductParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.InnerProductParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_output = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_output(), target);
  }

  // optional bool bias_term = 2 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_bias_term(), target);
  }

  // optional .opencv_caffe.FillerParameter weight_filler = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBU...",22098.0,22151.0,1.0,1.0,54.0,63,8,74,11,0,3,8,8,0,2,,0,3,4,2,2,uint8_t
771,313865,Finish,1,opencv_tflite.CastOptionsBuilder.Finish,Offset<CastOptions> opencv_tflite.CastOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<CastOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CastOptions>(end);
    return o;
  }",5555.0,5559.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<CastOptions>
772,84503,GetMetadata,1,opencv_caffe.SoftmaxParameter.GetMetadata,Metadata opencv_caffe.SoftmaxParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata SoftmaxParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[58]);
}",27211.0,27215.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
773,51736,ByteSizeLong,1,opencv_caffe.CropParameter.ByteSizeLong,size_t opencv_caffe.CropParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t CropParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.CropParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 offset = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->offset_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_offset_size());
    total_size += data_size;
  }

  // optional int32 axis = 1 [default = 2];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_axis());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}",17110.0,17134.0,1.0,1.0,25.0,23,9,21,8,0,3,2,2,0,0,,0,3,0,0,0,size_t
774,231973,SetCachedSize,1,opencv_onnx.GraphProto.SetCachedSize,void opencv_onnx.GraphProto.SetCachedSize (int),misc\onnx\opencv-onnx.pb.cc,"void GraphProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",3196.0,3198.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
775,231983,Clear,1,opencv_onnx.GraphProto.Clear,void opencv_onnx.GraphProto.Clear (),misc\onnx\opencv-onnx.pb.cc,"void GraphProto::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_onnx.GraphProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_.Clear();
  initializer_.Clear();
  input_.Clear();
  output_.Clear();
  value_info_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      doc_string_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",3200.0,3222.0,1.0,1.0,23.0,16,5,16,10,0,9,4,6,0,0,,0,9,0,0,0,void
776,313917,fbb_,3,opencv_tflite.DequantizeOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
777,313918,start_,3,opencv_tflite.DequantizeOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
778,313919,DequantizeOptionsBuilder,1,opencv_tflite.DequantizeOptionsBuilder.DequantizeOptionsBuilder,ANY opencv_tflite.DequantizeOptionsBuilder.DequantizeOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit DequantizeOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",5584.0,5587.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
779,150083,GetCachedSize,1,opencv_caffe.TileParameter.GetCachedSize,int opencv_caffe.TileParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },16800.0,16800.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
780,313930,Finish,1,opencv_tflite.DequantizeOptionsBuilder.Finish,Offset<DequantizeOptions> opencv_tflite.DequantizeOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<DequantizeOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DequantizeOptions>(end);
    return o;
  }",5588.0,5592.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<DequantizeOptions>
781,133707,_has_bits_,3,opencv_caffe.NonMaximumSuppressionParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
782,156833,batchsize_,3,opencv_caffe.V0LayerParameter.batchsize_,,misc\caffe\opencv-caffe.pb.hpp,batchsize_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
783,133709,top_k_,3,opencv_caffe.NonMaximumSuppressionParameter.top_k_,,misc\caffe\opencv-caffe.pb.hpp,top_k_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
784,281166,SharedCtor,1,opencv_tensorflow.OpDef_ArgDef.SharedCtor,void opencv_tensorflow.OpDef_ArgDef.SharedCtor (),misc\tensorflow\op_def.pb.cc,"inline void OpDef_ArgDef::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_attr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  type_attr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
number_attr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEm...",295.0,320.0,1.0,1.0,26.0,36,6,19,9,0,9,1,1,0,0,,0,9,0,0,0,void
785,133711,eta_,3,opencv_caffe.NonMaximumSuppressionParameter.eta_,,misc\caffe\opencv-caffe.pb.hpp,eta_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
786,156834,cropsize_,3,opencv_caffe.V0LayerParameter.cropsize_,,misc\caffe\opencv-caffe.pb.hpp,cropsize_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
787,133710,nms_threshold_,3,opencv_caffe.NonMaximumSuppressionParameter.nms_threshold_,,misc\caffe\opencv-caffe.pb.hpp,nms_threshold_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
788,133708,_cached_size_,3,opencv_caffe.NonMaximumSuppressionParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
789,84568,SharedCtor,1,opencv_caffe.TanHParameter.SharedCtor,void opencv_caffe.TanHParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void TanHParameter::SharedCtor() {
engine_ = 0;
}",27244.0,27246.0,1.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,void
790,248425,_has_bits_,3,opencv_onnx.TypeProto_Tensor._has_bits_,,misc\onnx\opencv-onnx.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
791,248426,_cached_size_,3,opencv_onnx.TypeProto_Tensor._cached_size_,,misc\onnx\opencv-onnx.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
792,248427,shape_,3,opencv_onnx.TypeProto_Tensor.shape_,,misc\onnx\opencv-onnx.pb.hpp,* shape_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
793,248428,elem_type_,3,opencv_onnx.TypeProto_Tensor.elem_type_,,misc\onnx\opencv-onnx.pb.hpp,elem_type_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
794,313970,fbb_,3,opencv_tflite.MaximumMinimumOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
795,232050,_InternalParse,1,opencv_onnx.GraphProto._InternalParse,"const char* opencv_onnx.GraphProto._InternalParse (char*,ANY*)",misc\onnx\opencv-onnx.pb.cc,"const char* GraphProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .opencv_onnx.NodeProto node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_node(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PR...",3224.0,3342.0,1.0,12.0,119.0,105,16,116,9,0,1,36,72,0,0,,0,1,4,2,2,const char*
796,313972,MaximumMinimumOptionsBuilder,1,opencv_tflite.MaximumMinimumOptionsBuilder.MaximumMinimumOptionsBuilder,ANY opencv_tflite.MaximumMinimumOptionsBuilder.MaximumMinimumOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit MaximumMinimumOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",5613.0,5616.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
797,313971,start_,3,opencv_tflite.MaximumMinimumOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
798,156841,new_channels_,3,opencv_caffe.V0LayerParameter.new_channels_,,misc\caffe\opencv-caffe.pb.hpp,new_channels_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
799,156843,concat_dim_,3,opencv_caffe.V0LayerParameter.concat_dim_,,misc\caffe\opencv-caffe.pb.hpp,concat_dim_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
800,313983,Finish,1,opencv_tflite.MaximumMinimumOptionsBuilder.Finish,Offset<MaximumMinimumOptions> opencv_tflite.MaximumMinimumOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<MaximumMinimumOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MaximumMinimumOptions>(end);
    return o;
  }",5617.0,5621.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<MaximumMinimumOptions>
801,51846,MergeFrom,1,opencv_caffe.CropParameter.MergeFrom,void opencv_caffe.CropParameter.MergeFrom (CropParameter),misc\caffe\opencv-caffe.pb.cc,"void CropParameter::MergeFrom(const CropParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.CropParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  offset_.MergeFrom(from.offset_);
  if (from._internal_has_axis()) {
    _internal_set_axis(from._internal_axis());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",17149.0,17160.0,1.0,1.0,12.0,12,6,10,5,1,2,2,2,0,0,,0,2,2,1,1,void
802,84617,SetCachedSize,1,opencv_caffe.TanHParameter.SetCachedSize,void opencv_caffe.TanHParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void TanHParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",27265.0,27267.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
803,156846,stride_,3,opencv_caffe.V0LayerParameter.stride_,,misc\caffe\opencv-caffe.pb.hpp,stride_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
804,84627,Clear,1,opencv_caffe.TanHParameter.Clear,void opencv_caffe.TanHParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void TanHParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.TanHParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  engine_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",27269.0,27278.0,1.0,1.0,10.0,5,3,5,4,0,2,1,1,0,0,,0,2,0,0,0,void
805,363158,get_workspace_size,1,cv.dnn.cuda4dnn.csl.Convolution.get_workspace_size,size_t cv.dnn.cuda4dnn.csl.Convolution.get_workspace_size (),src\cuda4dnn\csl\tensor_ops.hpp,"std::size_t get_workspace_size() const noexcept {
            return algo.get_workspace_size();
        }",262.0,264.0,9.0,9.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,size_t
806,363167,convolve,1,cv.dnn.cuda4dnn.csl.Convolution.convolve,"void cv.dnn.cuda4dnn.csl.Convolution.convolve (TensorSpan<T>,TensorView<T>,TensorView<T>,WorkspaceInstance)",src\cuda4dnn\csl\tensor_ops.hpp,"void convolve(TensorSpan<T> output, TensorView<T> input, TensorView<T> filters, WorkspaceInstance scratchpad) {
            cudnn::convolve<T>(
                cudnnHandle,
                convDesc, algo, scratchpad,
                filterDesc, filters.get(),
                inputTensorDesc, input.get(),
                1.0, 0.0, outputTensorDesc, output.get()
            );
        }",266.0,274.0,9.0,9.0,9.0,4,1,11,11,0,6,1,1,0,0,,0,6,8,4,4,void
807,314023,fbb_,3,opencv_tflite.TileOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
808,314024,start_,3,opencv_tflite.TileOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
809,84649,_InternalParse,1,opencv_caffe.TanHParameter._InternalParse,"const char* opencv_caffe.TanHParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* TanHParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .opencv_caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::opencv_caffe::TanHParameter_Engine_IsValid(val))) {
            _internal_set_engine(static_cast<::opencv_caffe::TanHParameter_Engine>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      defaul...",27280.0,27322.0,1.0,10.0,43.0,31,12,35,10,0,2,10,13,1,1,,0,2,4,2,2,const char*
810,314025,TileOptionsBuilder,1,opencv_tflite.TileOptionsBuilder.TileOptionsBuilder,ANY opencv_tflite.TileOptionsBuilder.TileOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit TileOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",5642.0,5645.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
811,264316,kFunc,3,opencv_tensorflow.AttrValue.ValueCase.kFunc,,misc\tensorflow\attr_value.pb.hpp,kFunc = 10,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
812,314036,Finish,1,opencv_tflite.TileOptionsBuilder.Finish,Offset<TileOptions> opencv_tflite.TileOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<TileOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TileOptions>(end);
    return o;
  }",5646.0,5650.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<TileOptions>
813,281273,SharedDtor,1,opencv_tensorflow.OpDef_ArgDef.SharedDtor,void opencv_tensorflow.OpDef_ArgDef.SharedDtor (),misc\tensorflow\op_def.pb.cc,"inline void OpDef_ArgDef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_attr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  number_attr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_list_attr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}",329.0,336.0,1.0,1.0,8.0,21,3,15,7,0,5,1,1,0,0,,0,5,0,0,0,void
814,264318,VALUE_NOT_SET,3,opencv_tensorflow.AttrValue.ValueCase.VALUE_NOT_SET,,misc\tensorflow\attr_value.pb.hpp,VALUE_NOT_SET = 0,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
815,133817,descriptor,1,opencv_caffe.SaveOutputParameter.descriptor,Descriptor opencv_caffe.SaveOutputParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",9902.0,9904.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
816,133823,GetDescriptor,1,opencv_caffe.SaveOutputParameter.GetDescriptor,Descriptor opencv_caffe.SaveOutputParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",9905.0,9907.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
817,363200,convolve_with_bias_activation,1,cv.dnn.cuda4dnn.csl.Convolution.convolve_with_bias_activation,"void cv.dnn.cuda4dnn.csl.Convolution.convolve_with_bias_activation (TensorSpan<T>,TensorView<T>,TensorView<T>,TensorView<T>,WorkspaceInstance)",src\cuda4dnn\csl\tensor_ops.hpp,"void convolve_with_bias_activation(TensorSpan<T> output, TensorView<T> input, TensorView<T> filters, TensorView<T> bias, WorkspaceInstance scratchpad) {
            cudnn::convolve_with_bias_activation<T>(
                cudnnHandle,
                1.0, convDesc, algo, scratchpad,
                filterDesc, filters.get(),
                inputTensorDesc, input.get(),
                biasTensorDesc, bias.get(),
                activationDesc,
                outputTensorDesc, output.get()
            );
        }",276.0,286.0,9.0,9.0,11.0,5,1,14,14,0,8,1,1,0,0,,0,8,10,5,5,void
818,51912,InternalSwap,1,opencv_caffe.CropParameter.InternalSwap,void opencv_caffe.CropParameter.InternalSwap (CropParameter*),misc\caffe\opencv-caffe.pb.cc,"void CropParameter::InternalSwap(CropParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  offset_.InternalSwap(&other->offset_);
  swap(axis_, other->axis_);
}",17173.0,17179.0,1.0,1.0,7.0,10,4,8,5,0,6,1,1,0,0,,0,6,2,1,1,void
819,133834,GetReflection,1,opencv_caffe.SaveOutputParameter.GetReflection,Reflection opencv_caffe.SaveOutputParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",9908.0,9910.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
820,150219,_has_bits_,3,opencv_caffe.TileParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
821,150220,_cached_size_,3,opencv_caffe.TileParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
822,150221,tiles_,3,opencv_caffe.TileParameter.tiles_,,misc\caffe\opencv-caffe.pb.hpp,tiles_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
823,150222,axis_,3,opencv_caffe.TileParameter.axis_,,misc\caffe\opencv-caffe.pb.hpp,axis_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
824,133845,default_instance,1,opencv_caffe.SaveOutputParameter.default_instance,SaveOutputParameter opencv_caffe.SaveOutputParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const SaveOutputParameter& default_instance() {
    return *internal_default_instance();
  }",9911.0,9913.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,SaveOutputParameter
825,248534,descriptor,1,opencv_onnx.TypeProto.descriptor,Descriptor opencv_onnx.TypeProto.descriptor (),misc\onnx\opencv-onnx.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",3199.0,3201.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
826,248540,GetDescriptor,1,opencv_onnx.TypeProto.GetDescriptor,Descriptor opencv_onnx.TypeProto.GetDescriptor (),misc\onnx\opencv-onnx.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",3202.0,3204.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
827,133852,internal_default_instance,1,opencv_caffe.SaveOutputParameter.internal_default_instance,SaveOutputParameter opencv_caffe.SaveOutputParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const SaveOutputParameter* internal_default_instance() {
    return reinterpret_cast<const SaveOutputParameter*>(
               &_SaveOutputParameter_default_instance_);
  }",9914.0,9917.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,SaveOutputParameter
828,314076,fbb_,3,opencv_tflite.ArgMaxOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
829,314077,start_,3,opencv_tflite.ArgMaxOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
830,314078,add_output_type,1,opencv_tflite.ArgMaxOptionsBuilder.add_output_type,void opencv_tflite.ArgMaxOptionsBuilder.add_output_type (ANY),misc\tflite\schema_generated.hpp,"void add_output_type(opencv_tflite::TensorType output_type) {
    fbb_.AddElement<int8_t>(ArgMaxOptions::VT_OUTPUT_TYPE, static_cast<int8_t>(output_type), 0);
  }",5678.0,5680.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
831,68326,ByteSizeLong,1,opencv_caffe.InnerProductParameter.ByteSizeLong,size_t opencv_caffe.InnerProductParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t InnerProductParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.InnerProductParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .opencv_caffe.FillerParameter weight_filler = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *weight_filler_);
    }

    // optional .opencv_caffe.FillerParameter bias_filler = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bias_filler_);
    }

    // optional uint32 num_output = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size...",22153.0,22199.0,1.0,1.0,47.0,39,10,34,9,0,4,8,14,0,0,,0,4,0,0,0,size_t
832,363239,convolve_with_bias_eltwise_activation,1,cv.dnn.cuda4dnn.csl.Convolution.convolve_with_bias_eltwise_activation,"void cv.dnn.cuda4dnn.csl.Convolution.convolve_with_bias_eltwise_activation (TensorSpan<T>,TensorView<T>,TensorView<T>,TensorView<T>,TensorView<T>,WorkspaceInstance)",src\cuda4dnn\csl\tensor_ops.hpp,"void convolve_with_bias_eltwise_activation(TensorSpan<T> output, TensorView<T> input, TensorView<T> filters, TensorView<T> bias, TensorView<T> eltwise, WorkspaceInstance scratchpad) {
            cudnn::convolve_with_bias_eltwise_activation<T>(
                cudnnHandle,
                1.0, convDesc, algo, scratchpad,
                filterDesc, filters.get(),
                inputTensorDesc, input.get(),
                biasTensorDesc, bias.get(),
                1.0, eltwiseTensorDesc, eltwise.get(),
                activationDesc,
                outputTensorDesc, output.get()
            );
        }",288.0,299.0,9.0,9.0,12.0,6,1,16,16,0,9,1,1,0,0,,0,9,12,6,6,void
833,248551,GetReflection,1,opencv_onnx.TypeProto.GetReflection,Reflection opencv_onnx.TypeProto.GetReflection (),misc\onnx\opencv-onnx.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",3205.0,3207.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
834,264939,_internal_has_placeholder,1,opencv_tensorflow.AttrValue._internal_has_placeholder,bool opencv_tensorflow.AttrValue._internal_has_placeholder (),misc\tensorflow\attr_value.pb.hpp,"inline bool AttrValue::_internal_has_placeholder() const {
  return value_case() == kPlaceholder;
}",1793.0,1795.0,1.0,1.0,3.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,bool
835,51947,GetMetadata,1,opencv_caffe.CropParameter.GetMetadata,Metadata opencv_caffe.CropParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata CropParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[25]);
}",17181.0,17185.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
836,248562,default_instance,1,opencv_onnx.TypeProto.default_instance,TypeProto opencv_onnx.TypeProto.default_instance (),misc\onnx\opencv-onnx.pb.hpp,"static const TypeProto& default_instance() {
    return *internal_default_instance();
  }",3208.0,3210.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,TypeProto
837,314098,ArgMaxOptionsBuilder,1,opencv_tflite.ArgMaxOptionsBuilder.ArgMaxOptionsBuilder,ANY opencv_tflite.ArgMaxOptionsBuilder.ArgMaxOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit ArgMaxOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",5681.0,5684.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
838,248570,kTensorType,3,opencv_onnx.TypeProto.ValueCase.kTensorType,,misc\onnx\opencv-onnx.pb.hpp,kTensorType = 1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
839,248571,VALUE_NOT_SET,3,opencv_onnx.TypeProto.ValueCase.VALUE_NOT_SET,,misc\onnx\opencv-onnx.pb.hpp,VALUE_NOT_SET = 0,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
840,314109,Finish,1,opencv_tflite.ArgMaxOptionsBuilder.Finish,Offset<ArgMaxOptions> opencv_tflite.ArgMaxOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<ArgMaxOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ArgMaxOptions>(end);
    return o;
  }",5685.0,5689.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<ArgMaxOptions>
841,248582,internal_default_instance,1,opencv_onnx.TypeProto.internal_default_instance,TypeProto opencv_onnx.TypeProto.internal_default_instance (),misc\onnx\opencv-onnx.pb.hpp,"static inline const TypeProto* internal_default_instance() {
    return reinterpret_cast<const TypeProto*>(
               &_TypeProto_default_instance_);
  }",3216.0,3219.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,TypeProto
842,19207,MergeFrom,1,opencv_caffe.NetParameter.MergeFrom,void opencv_caffe.NetParameter.MergeFrom (NetParameter),misc\caffe\opencv-caffe.pb.cc,"void NetParameter::MergeFrom(const NetParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.NetParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  layers_.MergeFrom(from.layers_);
  input_.MergeFrom(from.input_);
  input_dim_.MergeFrom(from.input_dim_);
  input_shape_.MergeFrom(from.input_shape_);
  layer_.MergeFrom(from.layer_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_state()->::opencv_caffe::NetState::MergeFrom(from._internal_state());
    }
    if (cached_has_bits & 0x00000004u) {
      force_backward_ = from.force_backward_;
    }
    if (cached_has_bits & 0x00000008u) {
      debug_info_ = from.debug_info_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROT...",7984.0,8012.0,1.0,1.0,29.0,34,9,31,12,2,17,6,10,0,1,,0,16,2,1,1,void
843,51978,set_has_batch_size,1,opencv_caffe._Internal.set_has_batch_size,void opencv_caffe._Internal.set_has_batch_size (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_batch_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }",27847.0,27849.0,3.0,3.0,3.0,2,2,1,1,5,0,1,1,0,0,,0,0,2,1,1,void
844,281355,SetCachedSize,1,opencv_tensorflow.OpDef_ArgDef.SetCachedSize,void opencv_tensorflow.OpDef_ArgDef.SetCachedSize (int),misc\tensorflow\op_def.pb.cc,"void OpDef_ArgDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",344.0,346.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
845,281365,Clear,1,opencv_tensorflow.OpDef_ArgDef.Clear,void opencv_tensorflow.OpDef_ArgDef.Clear (),misc\tensorflow\op_def.pb.cc,"void OpDef_ArgDef::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_tensorflow.OpDef.ArgDef)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  description_.ClearToEmpty();
  type_attr_.ClearToEmpty();
  number_attr_.ClearToEmpty();
  type_list_attr_.ClearToEmpty();
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_ref_) -
      reinterpret_cast<char*>(&type_)) + sizeof(is_ref_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",348.0,363.0,1.0,1.0,16.0,18,7,12,9,0,9,1,1,0,0,,0,9,0,0,0,void
846,363286,inputTensorDesc,3,cv.dnn.cuda4dnn.csl.Convolution.inputTensorDesc,,src\cuda4dnn\csl\tensor_ops.hpp,inputTensorDesc,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
847,363287,outputTensorDesc,3,cv.dnn.cuda4dnn.csl.Convolution.outputTensorDesc,,src\cuda4dnn\csl\tensor_ops.hpp,outputTensorDesc,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
848,51989,set_has_rand_skip,1,opencv_caffe._Internal.set_has_rand_skip,void opencv_caffe._Internal.set_has_rand_skip (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_rand_skip(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }",30867.0,30869.0,3.0,3.0,3.0,2,2,1,1,2,0,1,1,0,0,,0,0,2,1,1,void
849,363289,convDesc,3,cv.dnn.cuda4dnn.csl.Convolution.convDesc,,src\cuda4dnn\csl\tensor_ops.hpp,convDesc,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
850,363290,algo,3,cv.dnn.cuda4dnn.csl.Convolution.algo,,src\cuda4dnn\csl\tensor_ops.hpp,algo,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
851,363291,biasTensorDesc,3,cv.dnn.cuda4dnn.csl.Convolution.biasTensorDesc,,src\cuda4dnn\csl\tensor_ops.hpp,biasTensorDesc,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
852,363285,cudnnHandle,3,cv.dnn.cuda4dnn.csl.Convolution.cudnnHandle,,src\cuda4dnn\csl\tensor_ops.hpp,cudnnHandle,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
853,363293,activationDesc,3,cv.dnn.cuda4dnn.csl.Convolution.activationDesc,,src\cuda4dnn\csl\tensor_ops.hpp,activationDesc,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
854,363288,filterDesc,3,cv.dnn.cuda4dnn.csl.Convolution.filterDesc,,src\cuda4dnn\csl\tensor_ops.hpp,filterDesc,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
855,363292,eltwiseTensorDesc,3,cv.dnn.cuda4dnn.csl.Convolution.eltwiseTensorDesc,,src\cuda4dnn\csl\tensor_ops.hpp,eltwiseTensorDesc,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
856,264989,set_has_s,1,opencv_tensorflow.AttrValue.set_has_s,void opencv_tensorflow.AttrValue.set_has_s (),misc\tensorflow\attr_value.pb.hpp,"inline void AttrValue::set_has_s() {
  _oneof_case_[0] = kS;
}",1285.0,1287.0,1.0,1.0,3.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,void
857,314155,fbb_,3,opencv_tflite.ArgMinOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
858,117547,_has_bits_,3,opencv_caffe.Datum._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
859,117549,float_data_,3,opencv_caffe.Datum.float_data_,,misc\caffe\opencv-caffe.pb.hpp,float_data_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
860,314156,start_,3,opencv_tflite.ArgMinOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
861,117551,channels_,3,opencv_caffe.Datum.channels_,,misc\caffe\opencv-caffe.pb.hpp,channels_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
862,117548,_cached_size_,3,opencv_caffe.Datum._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
863,117550,data_,3,opencv_caffe.Datum.data_,,misc\caffe\opencv-caffe.pb.hpp,data_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
864,117552,height_,3,opencv_caffe.Datum.height_,,misc\caffe\opencv-caffe.pb.hpp,height_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
865,117555,encoded_,3,opencv_caffe.Datum.encoded_,,misc\caffe\opencv-caffe.pb.hpp,encoded_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
866,314157,add_output_type,1,opencv_tflite.ArgMinOptionsBuilder.add_output_type,void opencv_tflite.ArgMinOptionsBuilder.add_output_type (ANY),misc\tflite\schema_generated.hpp,"void add_output_type(opencv_tflite::TensorType output_type) {
    fbb_.AddElement<int8_t>(ArgMinOptions::VT_OUTPUT_TYPE, static_cast<int8_t>(output_type), 0);
  }",5719.0,5721.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
867,117553,width_,3,opencv_caffe.Datum.width_,,misc\caffe\opencv-caffe.pb.hpp,width_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
868,117554,label_,3,opencv_caffe.Datum.label_,,misc\caffe\opencv-caffe.pb.hpp,label_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
869,150328,descriptor,1,opencv_caffe.ThresholdParameter.descriptor,Descriptor opencv_caffe.ThresholdParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",16913.0,16915.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
870,150334,GetDescriptor,1,opencv_caffe.ThresholdParameter.GetDescriptor,Descriptor opencv_caffe.ThresholdParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",16916.0,16918.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
871,314177,ArgMinOptionsBuilder,1,opencv_tflite.ArgMinOptionsBuilder.ArgMinOptionsBuilder,ANY opencv_tflite.ArgMinOptionsBuilder.ArgMinOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit ArgMinOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",5722.0,5725.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
872,265025,set_has_placeholder,1,opencv_tensorflow.AttrValue.set_has_placeholder,void opencv_tensorflow.AttrValue.set_has_placeholder (),misc\tensorflow\attr_value.pb.hpp,"inline void AttrValue::set_has_placeholder() {
  _oneof_case_[0] = kPlaceholder;
}",1799.0,1801.0,1.0,1.0,3.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,void
873,84804,_InternalSerialize,1,opencv_caffe.TanHParameter._InternalSerialize,"uint8_t opencv_caffe.TanHParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* TanHParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.TanHParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .opencv_caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_engine(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:op...",27324.0,27344.0,1.0,1.0,21.0,23,8,25,10,0,1,3,3,0,0,,0,1,4,2,2,uint8_t
874,150345,GetReflection,1,opencv_caffe.ThresholdParameter.GetReflection,Reflection opencv_caffe.ThresholdParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",16919.0,16921.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
875,314188,Finish,1,opencv_tflite.ArgMinOptionsBuilder.Finish,Offset<ArgMinOptions> opencv_tflite.ArgMinOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<ArgMinOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ArgMinOptions>(end);
    return o;
  }",5726.0,5730.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<ArgMinOptions>
876,281421,_InternalParse,1,opencv_tensorflow.OpDef_ArgDef._InternalParse,"const char* opencv_tensorflow.OpDef_ArgDef._InternalParse (char*,ANY*)",misc\tensorflow\op_def.pb.cc,"const char* OpDef_ArgDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, ""opencv_tensorflow.OpDef.ArgDef.name""));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringPar...",365.0,459.0,1.0,10.0,95.0,84,11,102,14,0,1,21,27,0,0,,0,1,4,2,2,const char*
877,445267,OCL4DNNSoftmax,1,cv.dnn.ocl4dnn.OCL4DNNSoftmax<Dtype>.OCL4DNNSoftmax,ANY cv.dnn.ocl4dnn.OCL4DNNSoftmax<Dtype>.OCL4DNNSoftmax<Dtype> (OCL4DNNSoftmaxConfig),src\ocl4dnn\src\ocl4dnn_softmax.cpp,"OCL4DNNSoftmax<Dtype>::OCL4DNNSoftmax(OCL4DNNSoftmaxConfig config)
{
    softmax_axis_ = config.axis;
    channels_ = config.channels;
    log_softmax_ = config.logsoftmax;
    use_half_ = config.use_half;

    inner_num_ = 1;
    outer_num_ = 1;
    count_ = 1;
    int32_t scale_sz = 1;
    for (int32_t i = softmax_axis_ + 1; i < config.in_shape.size(); i++)
        inner_num_ *= config.in_shape[i];
    use_slm_ = (config.in_shape[softmax_axis_] * inner_num_ + inner_num_ * 17) <= 8192;
    for (int32_t i = 0; i < softmax_axis_; i++)
        outer_num_ *= config.in_shape[i];
    count_ = inner_num_ + outer_num_;

    std::vector<int32_t> scale_dims = config.in_shape;
    scale_dims[softmax_axis_] = use_slm_ ? 1 : 17;
    for (int32_t i = 0; i < scale_dims.size(); i++)
        scale_sz *= scale_dims[i];

    scale_data_.create(1, scale_sz, CV_32FC1);
}",50.0,74.0,1.0,1.0,25.0,40,9,40,16,0,7,4,4,1,0,,0,7,2,1,1,ANY
878,150356,default_instance,1,opencv_caffe.ThresholdParameter.default_instance,ThresholdParameter opencv_caffe.ThresholdParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const ThresholdParameter& default_instance() {
    return *internal_default_instance();
  }",16922.0,16924.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,ThresholdParameter
879,265046,s_,3,opencv_tensorflow.AttrValue.ValueUnion.s_,,misc\tensorflow\attr_value.pb.hpp,s_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
880,52055,set_has_force_encoded_color,1,opencv_caffe._Internal.set_has_force_encoded_color,void opencv_caffe._Internal.set_has_force_encoded_color (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_force_encoded_color(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }",17216.0,17218.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
881,133977,GetCachedSize,1,opencv_caffe.SaveOutputParameter.GetCachedSize,int opencv_caffe.SaveOutputParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },9962.0,9962.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
882,265051,shape_,3,opencv_tensorflow.AttrValue.ValueUnion.shape_,,misc\tensorflow\attr_value.pb.hpp,* shape_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
883,265052,tensor_,3,opencv_tensorflow.AttrValue.ValueUnion.tensor_,,misc\tensorflow\attr_value.pb.hpp,* tensor_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
884,265053,list_,3,opencv_tensorflow.AttrValue.ValueUnion.list_,,misc\tensorflow\attr_value.pb.hpp,* list_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
885,265054,func_,3,opencv_tensorflow.AttrValue.ValueUnion.func_,,misc\tensorflow\attr_value.pb.hpp,* func_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
886,150363,internal_default_instance,1,opencv_caffe.ThresholdParameter.internal_default_instance,ThresholdParameter opencv_caffe.ThresholdParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const ThresholdParameter* internal_default_instance() {
    return reinterpret_cast<const ThresholdParameter*>(
               &_ThresholdParameter_default_instance_);
  }",16925.0,16928.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,ThresholdParameter
887,265056,value_,3,opencv_tensorflow.AttrValue.value_,,misc\tensorflow\attr_value.pb.hpp,value_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,22,0,1,1,0,0,,0,0,0,0,0,
888,265057,_cached_size_,3,opencv_tensorflow.AttrValue._cached_size_,,misc\tensorflow\attr_value.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
889,265058,_oneof_case_,3,opencv_tensorflow.AttrValue._oneof_case_,,misc\tensorflow\attr_value.pb.hpp,_oneof_case_[1],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
890,52066,set_has_prefetch,1,opencv_caffe._Internal.set_has_prefetch,void opencv_caffe._Internal.set_has_prefetch (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_prefetch(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }",17219.0,17221.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
891,265055,placeholder_,3,opencv_tensorflow.AttrValue.ValueUnion.placeholder_,,misc\tensorflow\attr_value.pb.hpp,placeholder_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
892,314234,fbb_,3,opencv_tflite.GreaterOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
893,314235,start_,3,opencv_tflite.GreaterOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
894,314236,GreaterOptionsBuilder,1,opencv_tflite.GreaterOptionsBuilder.GreaterOptionsBuilder,ANY opencv_tflite.GreaterOptionsBuilder.GreaterOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit GreaterOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",5753.0,5756.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
895,248707,GetCachedSize,1,opencv_onnx.TypeProto.GetCachedSize,int opencv_onnx.TypeProto.GetCachedSize (),misc\onnx\opencv-onnx.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },3264.0,3264.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
896,68486,MergeFrom,1,opencv_caffe.InnerProductParameter.MergeFrom,void opencv_caffe.InnerProductParameter.MergeFrom (InnerProductParameter),misc\caffe\opencv-caffe.pb.cc,"void InnerProductParameter::MergeFrom(const InnerProductParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.InnerProductParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_weight_filler()->::opencv_caffe::FillerParameter::MergeFrom(from._internal_weight_filler());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_bias_filler()->::opencv_caffe::FillerParameter::MergeFrom(from._internal_bias_filler());
    }
    if (cached_has_bits & 0x00000004u) {
      num_output_ = from.num_output_;
    }
    if (cached_has_bits & 0x00000008u) {
      transpose_ = from.transpose_;
    }
    if (cached_has_bits & 0x00000010u) {
      bias_term_ = from.bias_term_;
    }
    if (cached_has_bits & 0x00000020u) {
      axis_ = from.axis_;
    }
    _ha...",22214.0,22243.0,1.0,1.0,30.0,31,9,27,9,2,12,8,14,0,2,,0,10,2,1,1,void
897,314247,Finish,1,opencv_tflite.GreaterOptionsBuilder.Finish,Offset<GreaterOptions> opencv_tflite.GreaterOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<GreaterOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GreaterOptions>(end);
    return o;
  }",5757.0,5761.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<GreaterOptions>
898,19344,IsInitialized,1,opencv_caffe.NetParameter.IsInitialized,bool opencv_caffe.NetParameter.IsInitialized (),misc\caffe\opencv-caffe.pb.cc,"bool NetParameter::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(layer_))
    return false;
  return true;
}",8021.0,8025.0,1.0,1.0,5.0,3,2,3,3,0,1,2,2,1,0,,0,1,0,0,0,bool
899,379795,forward,1,cv.dnn.cuda4dnn.TransposeConvolutionOp.forward,"void cv.dnn.cuda4dnn.TransposeConvolutionOp.forward (ANY,ANY,ANY)",src\cuda4dnn\primitives\transpose_convolution.hpp,"void forward(
            const std::vector<cv::Ptr<BackendWrapper>>& inputs,
            const std::vector<cv::Ptr<BackendWrapper>>& outputs,
            csl::Workspace& workspace) override
        {
            CV_Assert(inputs.size() == 1 && outputs.size() == 1);

            auto input_wrapper = inputs[0].dynamicCast<wrapper_type>();
            auto input = input_wrapper->getView();

            auto output_wrapper = outputs[0].dynamicCast<wrapper_type>();
            auto output = output_wrapper->getSpan();

            csl::WorkspaceAllocator allocator(workspace);
            convoluter.transpose_convolve(output, input, filtersTensor, allocator.get_instance());
            if (!biasTensor.empty())
            {
                std::size_t inner_size = total(output_wrapper->getShape(), 2, -1);
                kernels::biasN<T>(stream, output, output, inner_size, biasTensor);
            }
        }",195.0,215.0,9.0,9.0,21.0,23,8,25,14,0,5,2,2,1,0,,0,5,6,3,3,void
900,84884,ByteSizeLong,1,opencv_caffe.TanHParameter.ByteSizeLong,size_t opencv_caffe.TanHParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t TanHParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.TanHParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .opencv_caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_engine());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}",27346.0,27362.0,1.0,1.0,17.0,13,9,12,7,0,2,2,2,0,0,,0,2,0,0,0,size_t
901,363413,get_workspace_size,1,cv.dnn.cuda4dnn.csl.TransposeConvolution.get_workspace_size,size_t cv.dnn.cuda4dnn.csl.TransposeConvolution.get_workspace_size (),src\cuda4dnn\csl\tensor_ops.hpp,"std::size_t get_workspace_size() const noexcept {
            return algo.get_workspace_size();
        }",361.0,363.0,9.0,9.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,size_t
902,117661,descriptor,1,opencv_caffe.FillerParameter.descriptor,Descriptor opencv_caffe.FillerParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",3207.0,3209.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
903,363422,transpose_convolve,1,cv.dnn.cuda4dnn.csl.TransposeConvolution.transpose_convolve,"void cv.dnn.cuda4dnn.csl.TransposeConvolution.transpose_convolve (TensorSpan<T>,TensorView<T>,TensorView<T>,WorkspaceInstance)",src\cuda4dnn\csl\tensor_ops.hpp,"void transpose_convolve(TensorSpan<T> output, TensorView<T> input, TensorView<T> filters, WorkspaceInstance scratchpad) {
            cudnn::transpose_convolve<T>(
                cudnnHandle,
                convDesc, algo, scratchpad,
                filterDesc, filters.get(),
                convOutputTensorDesc, input.get(),
                1.0, 0.0, convInputTensorDesc, output.get()
            );
        }",365.0,373.0,9.0,9.0,9.0,4,1,11,11,0,6,1,1,0,0,,0,6,8,4,4,void
904,19362,InternalSwap,1,opencv_caffe.NetParameter.InternalSwap,void opencv_caffe.NetParameter.InternalSwap (NetParameter*),misc\caffe\opencv-caffe.pb.cc,"void NetParameter::InternalSwap(NetParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  layers_.InternalSwap(&other->layers_);
  input_.InternalSwap(&other->input_);
  input_dim_.InternalSwap(&other->input_dim_);
  input_shape_.InternalSwap(&other->input_shape_);
  layer_.InternalSwap(&other->layer_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetParameter, debug_info_)
      + sizeof(NetParameter::debug_info_)
      - PROTOBUF_FIELD_OFFSET(NetParameter, state_)>(
          reinterpret_cast<char*>(&state_),
          reinterpret_cast<char*>(&other->state_));
}",8027.0,8049.0,1.0,1.0,23.0,48,13,35,17,0,19,1,1,0,0,,0,19,2,1,1,void
905,117667,GetDescriptor,1,opencv_caffe.FillerParameter.GetDescriptor,Descriptor opencv_caffe.FillerParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",3210.0,3212.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
906,117678,GetReflection,1,opencv_caffe.FillerParameter.GetReflection,Reflection opencv_caffe.FillerParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",3213.0,3215.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
907,314287,fbb_,3,opencv_tflite.GreaterEqualOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
908,314288,start_,3,opencv_tflite.GreaterEqualOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
909,314289,GreaterEqualOptionsBuilder,1,opencv_tflite.GreaterEqualOptionsBuilder.GreaterEqualOptionsBuilder,ANY opencv_tflite.GreaterEqualOptionsBuilder.GreaterEqualOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit GreaterEqualOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",5782.0,5785.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
910,101295,ByteSizeLong,1,opencv_caffe.V0LayerParameter.ByteSizeLong,size_t opencv_caffe.V0LayerParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t V0LayerParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.V0LayerParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opencv_caffe.BlobProto blobs = 50;
  total_size += 2UL * this->_internal_blobs_size();
  for (const auto& msg : this->blobs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float blobs_lr = 51;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_blobs_lr_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_blobs_lr_size());
    total_size += data_size;
  }

  // repeated float weight_decay = 52;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_weight_decay_size());
    size_t data_size = 4UL ...",31815.0,32071.0,1.0,1.0,257.0,238,11,181,13,0,7,42,77,1,0,,0,7,0,0,0,size_t
911,117689,default_instance,1,opencv_caffe.FillerParameter.default_instance,FillerParameter opencv_caffe.FillerParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const FillerParameter& default_instance() {
    return *internal_default_instance();
  }",3216.0,3218.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,FillerParameter
912,314300,Finish,1,opencv_tflite.GreaterEqualOptionsBuilder.Finish,Offset<GreaterEqualOptions> opencv_tflite.GreaterEqualOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<GreaterEqualOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GreaterEqualOptions>(end);
    return o;
  }",5786.0,5790.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<GreaterEqualOptions>
913,363455,cudnnHandle,3,cv.dnn.cuda4dnn.csl.TransposeConvolution.cudnnHandle,,src\cuda4dnn\csl\tensor_ops.hpp,cudnnHandle,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
914,363456,convInputTensorDesc,3,cv.dnn.cuda4dnn.csl.TransposeConvolution.convInputTensorDesc,,src\cuda4dnn\csl\tensor_ops.hpp,convInputTensorDesc,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
915,363457,convOutputTensorDesc,3,cv.dnn.cuda4dnn.csl.TransposeConvolution.convOutputTensorDesc,,src\cuda4dnn\csl\tensor_ops.hpp,convOutputTensorDesc,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
916,363458,filterDesc,3,cv.dnn.cuda4dnn.csl.TransposeConvolution.filterDesc,,src\cuda4dnn\csl\tensor_ops.hpp,filterDesc,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
917,363459,convDesc,3,cv.dnn.cuda4dnn.csl.TransposeConvolution.convDesc,,src\cuda4dnn\csl\tensor_ops.hpp,convDesc,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
918,363460,algo,3,cv.dnn.cuda4dnn.csl.TransposeConvolution.algo,,src\cuda4dnn\csl\tensor_ops.hpp,algo,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
919,117696,internal_default_instance,1,opencv_caffe.FillerParameter.internal_default_instance,FillerParameter opencv_caffe.FillerParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const FillerParameter* internal_default_instance() {
    return reinterpret_cast<const FillerParameter*>(
               &_FillerParameter_default_instance_);
  }",3219.0,3222.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,FillerParameter
920,150488,GetCachedSize,1,opencv_caffe.ThresholdParameter.GetCachedSize,int opencv_caffe.ThresholdParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },16973.0,16973.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
921,52186,SharedCtor,1,opencv_caffe.DataParameter.SharedCtor,void opencv_caffe.DataParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void DataParameter::SharedCtor() {
source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mean_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mean_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&batch_size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&backend_) -
    reinterpret_cast<char*>(&batch_size_)) + sizeof(backend_));
scale_ = 1;
prefetch_ = 4u;
}",17259.0,17274.0,1.0,1.0,16.0,26,7,12,8,0,8,1,1,0,0,,0,8,0,0,0,void
922,84964,MergeFrom,1,opencv_caffe.TanHParameter.MergeFrom,void opencv_caffe.TanHParameter.MergeFrom (TanHParameter),misc\caffe\opencv-caffe.pb.cc,"void TanHParameter::MergeFrom(const TanHParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.TanHParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_engine()) {
    _internal_set_engine(from._internal_engine());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",27377.0,27387.0,1.0,1.0,11.0,10,6,8,4,2,0,2,2,0,0,,0,0,2,1,1,void
923,314340,fbb_,3,opencv_tflite.LessOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
924,314342,LessOptionsBuilder,1,opencv_tflite.LessOptionsBuilder.LessOptionsBuilder,ANY opencv_tflite.LessOptionsBuilder.LessOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit LessOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",5811.0,5814.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
925,314341,start_,3,opencv_tflite.LessOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
926,445421,Forward,1,cv.dnn.ocl4dnn.OCL4DNNSoftmax<Dtype>.Forward,"bool cv.dnn.ocl4dnn.OCL4DNNSoftmax<Dtype>.Forward<Dtype> (UMat,UMat)",src\ocl4dnn\src\ocl4dnn_softmax.cpp,"bool OCL4DNNSoftmax<Dtype>::Forward(const UMat& bottom, UMat& top)
{
    bool ret = false;
    bool intel_subgroup = ocl::Device::getDefault().intelSubgroupsSupport();
    if (intel_subgroup && inner_num_ < 128)
    {
        String opts = clOptionSupport(""-cl-no-subgroup-ifp"") ? "" -cl-no-subgroup-ifp "" : """";
        String kname;
        ocl::Kernel oclk_softmax_forward_kernel;

        if (log_softmax_) opts += "" -DLOG_SOFTMAX "";
        if (use_slm_)
            kname = ""softmax_forward_slm"";
        else
            kname = ""softmax_forward"";

        kname += format(""%s"", (use_half_) ? ""_half"" : ""_float"");
        opts += format("" -D Dtype=%s -D DTYPE_MAX=%s"", (use_half_) ? ""half"" : ""float"",
                       (use_half_) ? ""HALF_MAX"" : ""FLT_MAX"");
        if (!oclk_softmax_forward_kernel.create(kname.c_str(), ocl::dnn::softmax_loss_oclsrc, opts))
            return false;

        size_t global_size[] = { 256, (size_t)outer_num_, 1 };
        size_t local_size[] = { 256, 1...",83.0,133.0,1.0,1.0,51.0,61,12,71,23,0,1,6,10,0,1,,0,1,4,2,2,bool
927,314353,Finish,1,opencv_tflite.LessOptionsBuilder.Finish,Offset<LessOptions> opencv_tflite.LessOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<LessOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LessOptions>(end);
    return o;
  }",5815.0,5819.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<LessOptions>
928,379889,get_workspace_memory_in_bytes,1,cv.dnn.cuda4dnn.TransposeConvolutionOp.get_workspace_memory_in_bytes,size_t cv.dnn.cuda4dnn.TransposeConvolutionOp.get_workspace_memory_in_bytes (),src\cuda4dnn\primitives\transpose_convolution.hpp,std::size_t get_workspace_memory_in_bytes() const noexcept override { return scratch_mem_in_bytes; },217.0,217.0,9.0,108.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,size_t
929,379895,stream,3,cv.dnn.cuda4dnn.TransposeConvolutionOp.stream,,src\cuda4dnn\primitives\transpose_convolution.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
930,379896,cudnnHandle,3,cv.dnn.cuda4dnn.TransposeConvolutionOp.cudnnHandle,,src\cuda4dnn\primitives\transpose_convolution.hpp,cudnnHandle,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
931,265208,descriptor,1,opencv_tensorflow.NameAttrList.descriptor,Descriptor opencv_tensorflow.NameAttrList.descriptor (),misc\tensorflow\attr_value.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",788.0,790.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
932,379897,filtersTensor,3,cv.dnn.cuda4dnn.TransposeConvolutionOp.filtersTensor,,src\cuda4dnn\primitives\transpose_convolution.hpp,filtersTensor,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
933,379898,biasTensor,3,cv.dnn.cuda4dnn.TransposeConvolutionOp.biasTensor,,src\cuda4dnn\primitives\transpose_convolution.hpp,biasTensor,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
934,429050,setNmsAcrossClasses,1,cv.dnn.DetectionModel_Impl.setNmsAcrossClasses,void cv.dnn.DetectionModel_Impl.setNmsAcrossClasses (bool),src\model.cpp,"void setNmsAcrossClasses(bool value) {
        nmsAcrossClasses = value;
    }",436.0,438.0,5.0,5.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
935,379899,convoluter,3,cv.dnn.cuda4dnn.TransposeConvolutionOp.convoluter,,src\cuda4dnn\primitives\transpose_convolution.hpp,convoluter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
936,265214,GetDescriptor,1,opencv_tensorflow.NameAttrList.GetDescriptor,Descriptor opencv_tensorflow.NameAttrList.GetDescriptor (),misc\tensorflow\attr_value.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",791.0,793.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
937,379900,scratch_mem_in_bytes,3,cv.dnn.cuda4dnn.TransposeConvolutionOp.scratch_mem_in_bytes,,src\cuda4dnn\primitives\transpose_convolution.hpp,scratch_mem_in_bytes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
938,429058,getNmsAcrossClasses,1,cv.dnn.DetectionModel_Impl.getNmsAcrossClasses,bool cv.dnn.DetectionModel_Impl.getNmsAcrossClasses (),src\model.cpp,"bool getNmsAcrossClasses() {
        return nmsAcrossClasses;
    }",440.0,442.0,5.0,5.0,3.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,bool
939,429064,nmsAcrossClasses,3,cv.dnn.DetectionModel_Impl.nmsAcrossClasses,,src\model.cpp,nmsAcrossClasses = false,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
940,68617,InternalSwap,1,opencv_caffe.InnerProductParameter.InternalSwap,void opencv_caffe.InnerProductParameter.InternalSwap (InnerProductParameter*),misc\caffe\opencv-caffe.pb.cc,"void InnerProductParameter::InternalSwap(InnerProductParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InnerProductParameter, transpose_)
      + sizeof(InnerProductParameter::transpose_)
      - PROTOBUF_FIELD_OFFSET(InnerProductParameter, weight_filler_)>(
          reinterpret_cast<char*>(&weight_filler_),
          reinterpret_cast<char*>(&other->weight_filler_));
  swap(bias_term_, other->bias_term_);
  swap(axis_, other->axis_);
}",22256.0,22268.0,1.0,1.0,13.0,23,12,17,10,0,11,1,1,0,0,,0,11,2,1,1,void
941,265225,GetReflection,1,opencv_tensorflow.NameAttrList.GetReflection,Reflection opencv_tensorflow.NameAttrList.GetReflection (),misc\tensorflow\attr_value.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",794.0,796.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
942,363536,pool,1,cv.dnn.cuda4dnn.csl.Pooling.pool,"void cv.dnn.cuda4dnn.csl.Pooling.pool (TensorView<T>,TensorSpan<T>)",src\cuda4dnn\csl\tensor_ops.hpp,"void pool(TensorView<T> input, TensorSpan<T> output) {
            cudnn::pool<T>(
                cudnnHandle,
                poolingDesc,
                inputTensorDesc, input.get(),
                1.0, 0.0, outputTensorDesc, output.get()
            );
        }",419.0,426.0,9.0,9.0,8.0,3,1,7,7,0,4,1,1,0,0,,0,4,4,2,2,void
943,265236,default_instance,1,opencv_tensorflow.NameAttrList.default_instance,NameAttrList opencv_tensorflow.NameAttrList.default_instance (),misc\tensorflow\attr_value.pb.hpp,"static const NameAttrList& default_instance() {
    return *internal_default_instance();
  }",797.0,799.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,NameAttrList
944,314393,fbb_,3,opencv_tflite.LessEqualOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
945,314394,start_,3,opencv_tflite.LessEqualOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
946,314395,LessEqualOptionsBuilder,1,opencv_tflite.LessEqualOptionsBuilder.LessEqualOptionsBuilder,ANY opencv_tflite.LessEqualOptionsBuilder.LessEqualOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit LessEqualOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",5840.0,5843.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
947,265243,internal_default_instance,1,opencv_tensorflow.NameAttrList.internal_default_instance,NameAttrList opencv_tensorflow.NameAttrList.internal_default_instance (),misc\tensorflow\attr_value.pb.hpp,"static inline const NameAttrList* internal_default_instance() {
    return reinterpret_cast<const NameAttrList*>(
               &_NameAttrList_default_instance_);
  }",800.0,803.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,NameAttrList
948,85023,InternalSwap,1,opencv_caffe.TanHParameter.InternalSwap,void opencv_caffe.TanHParameter.InternalSwap (TanHParameter*),misc\caffe\opencv-caffe.pb.cc,"void TanHParameter::InternalSwap(TanHParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(engine_, other->engine_);
}",27400.0,27405.0,1.0,1.0,6.0,7,4,6,4,0,4,1,1,0,0,,0,4,2,1,1,void
949,19489,GetMetadata,1,opencv_caffe.NetParameter.GetMetadata,Metadata opencv_caffe.NetParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata NetParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[9]);
}",8051.0,8055.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
950,314406,Finish,1,opencv_tflite.LessEqualOptionsBuilder.Finish,Offset<LessEqualOptions> opencv_tflite.LessEqualOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<LessEqualOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LessEqualOptions>(end);
    return o;
  }",5844.0,5848.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<LessEqualOptions>
951,363560,cudnnHandle,3,cv.dnn.cuda4dnn.csl.Pooling.cudnnHandle,,src\cuda4dnn\csl\tensor_ops.hpp,cudnnHandle,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
952,363561,inputTensorDesc,3,cv.dnn.cuda4dnn.csl.Pooling.inputTensorDesc,,src\cuda4dnn\csl\tensor_ops.hpp,inputTensorDesc,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
953,52266,SharedDtor,1,opencv_caffe.DataParameter.SharedDtor,void opencv_caffe.DataParameter.SharedDtor (),misc\caffe\opencv-caffe.pb.cc,"inline void DataParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mean_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}",17283.0,17287.0,1.0,1.0,5.0,9,3,6,4,0,2,1,1,0,0,,0,2,0,0,0,void
954,363563,poolingDesc,3,cv.dnn.cuda4dnn.csl.Pooling.poolingDesc,,src\cuda4dnn\csl\tensor_ops.hpp,poolingDesc,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
955,363562,outputTensorDesc,3,cv.dnn.cuda4dnn.csl.Pooling.outputTensorDesc,,src\cuda4dnn\csl\tensor_ops.hpp,outputTensorDesc,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
956,379950,begin,1,cv.dnn.cuda4dnn.csl.device.array.begin,iterator cv.dnn.cuda4dnn.csl.device.array.begin (),src\cuda\array.hpp,const_iterator begin() const noexcept { return ptr; },37.0,37.0,29.0,81.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,const_iterator
957,379957,end,1,cv.dnn.cuda4dnn.csl.device.array.end,iterator cv.dnn.cuda4dnn.csl.device.array.end (),src\cuda\array.hpp,const_iterator end() const noexcept { return ptr + N; },38.0,38.0,29.0,83.0,1.0,1,1,2,2,0,1,1,1,0,0,,0,1,0,0,0,const_iterator
958,85050,GetMetadata,1,opencv_caffe.TanHParameter.GetMetadata,Metadata opencv_caffe.TanHParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata TanHParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[59]);
}",27407.0,27411.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
959,117821,GetCachedSize,1,opencv_caffe.FillerParameter.GetCachedSize,int opencv_caffe.FillerParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },3267.0,3267.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
960,150590,_has_bits_,3,opencv_caffe.ThresholdParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
961,150591,_cached_size_,3,opencv_caffe.ThresholdParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
962,150592,threshold_,3,opencv_caffe.ThresholdParameter.threshold_,,misc\caffe\opencv-caffe.pb.hpp,threshold_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
963,248895,_has_bits_,3,opencv_onnx.TypeProto._has_bits_,,misc\onnx\opencv-onnx.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
964,248897,denotation_,3,opencv_onnx.TypeProto.denotation_,,misc\onnx\opencv-onnx.pb.hpp,denotation_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
965,248896,_cached_size_,3,opencv_onnx.TypeProto._cached_size_,,misc\onnx\opencv-onnx.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
966,68680,GetMetadata,1,opencv_caffe.InnerProductParameter.GetMetadata,Metadata opencv_caffe.InnerProductParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata InnerProductParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[41]);
}",22270.0,22274.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
967,248905,value_,3,opencv_onnx.TypeProto.value_,,misc\onnx\opencv-onnx.pb.hpp,value_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
968,248906,_oneof_case_,3,opencv_onnx.TypeProto._oneof_case_,,misc\onnx\opencv-onnx.pb.hpp,_oneof_case_[1],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
969,248904,tensor_type_,3,opencv_onnx.TypeProto.ValueUnion.tensor_type_,,misc\onnx\opencv-onnx.pb.hpp,* tensor_type_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
970,232525,_InternalSerialize,1,opencv_onnx.GraphProto._InternalSerialize,"uint8_t opencv_onnx.GraphProto._InternalSerialize (uint8_t*,ANY*)",misc\onnx\opencv-onnx.pb.cc,"uint8_t* GraphProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_onnx.GraphProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opencv_onnx.NodeProto node = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_node_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_node(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      ""opencv_onnx.GraphProto.name"");
    target = stream...",3344.0,3417.0,1.0,1.0,74.0,105,8,106,12,0,1,9,9,0,0,,0,1,4,2,2,uint8_t
971,379982,cbegin,1,cv.dnn.cuda4dnn.csl.device.array.cbegin,const_iterator cv.dnn.cuda4dnn.csl.device.array.cbegin (),src\cuda\array.hpp,const_iterator cbegin() const noexcept { return ptr; },40.0,40.0,29.0,82.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,const_iterator
972,314447,start_,3,opencv_tflite.NegOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
973,314448,NegOptionsBuilder,1,opencv_tflite.NegOptionsBuilder.NegOptionsBuilder,ANY opencv_tflite.NegOptionsBuilder.NegOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit NegOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",5869.0,5872.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
974,314446,fbb_,3,opencv_tflite.NegOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
975,379989,cend,1,cv.dnn.cuda4dnn.csl.device.array.cend,const_iterator cv.dnn.cuda4dnn.csl.device.array.cend (),src\cuda\array.hpp,const_iterator cend() const noexcept { return ptr + N; },41.0,41.0,29.0,84.0,1.0,1,1,2,2,0,1,1,1,0,0,,0,1,0,0,0,const_iterator
976,85081,set_has_tiles,1,opencv_caffe._Internal.set_has_tiles,void opencv_caffe._Internal.set_has_tiles (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_tiles(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }",27421.0,27423.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
977,52315,SetCachedSize,1,opencv_caffe.DataParameter.SetCachedSize,void opencv_caffe.DataParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void DataParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",17295.0,17297.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
978,314459,Finish,1,opencv_tflite.NegOptionsBuilder.Finish,Offset<NegOptions> opencv_tflite.NegOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<NegOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<NegOptions>(end);
    return o;
  }",5873.0,5877.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<NegOptions>
979,379998,rbegin,1,cv.dnn.cuda4dnn.csl.device.array.rbegin,reverse_iterator cv.dnn.cuda4dnn.csl.device.array.rbegin (),src\cuda\array.hpp,const_reverse_iterator rbegin() const noexcept { return ptr + N; },45.0,45.0,29.0,94.0,1.0,1,1,2,2,0,1,1,1,0,0,,0,1,0,0,0,const_reverse_iterator
980,363617,normalize,1,cv.dnn.cuda4dnn.csl.LRN.normalize,"void cv.dnn.cuda4dnn.csl.LRN.normalize (TensorView<T>,TensorSpan<T>,WorkspaceInstance)",src\cuda4dnn\csl\tensor_ops.hpp,"void normalize(TensorView<T> input, TensorSpan<T> output, WorkspaceInstance workspace) {
            cudnn::LRNForward<T>(
                cudnnHandle,
                lrnDesc,
                TensorDescriptor(input.shape_as_vector()), input.get(),
                1.0, 0.0, TensorDescriptor(output.shape_as_vector()), output.get(),
                workspace
            );
        }",453.0,461.0,9.0,9.0,9.0,5,1,8,6,0,2,1,1,0,0,,0,2,6,3,3,void
981,429155,decodeType,3,cv.dnn.TextRecognitionModel_Impl.decodeType,,src\model.cpp,decodeType,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
982,429156,vocabulary,3,cv.dnn.TextRecognitionModel_Impl.vocabulary,,src\model.cpp,vocabulary,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
983,52325,Clear,1,opencv_caffe.DataParameter.Clear,void opencv_caffe.DataParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void DataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.DataParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      source_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      mean_file_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&batch_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&backend_) -
        reinterpret_cast<char*>(&batch_size_)) + sizeof(backend_));
  }
  if (cached_has_bits & 0x00000300u) {
    scale_ = 1;
    prefetch_ = 4u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",17299.0,17325.0,1.0,1.0,27.0,25,9,19,9,0,10,6,8,0,0,,0,10,0,0,0,void
984,429158,vocPruneSize,3,cv.dnn.TextRecognitionModel_Impl.vocPruneSize,,src\model.cpp,vocPruneSize = 0,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
985,380007,rend,1,cv.dnn.cuda4dnn.csl.device.array.rend,reverse_iterator cv.dnn.cuda4dnn.csl.device.array.rend (),src\cuda\array.hpp,const_reverse_iterator rend() const noexcept { return ptr; },46.0,46.0,29.0,88.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,const_reverse_iterator
986,429157,beamSize,3,cv.dnn.TextRecognitionModel_Impl.beamSize,,src\model.cpp,beamSize = 10,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
987,429172,setVocabulary,1,cv.dnn.TextRecognitionModel_Impl.setVocabulary,void cv.dnn.TextRecognitionModel_Impl.setVocabulary (ANY),src\model.cpp,"inline
    void setVocabulary(const std::vector<std::string>& inputVoc)
    {
        vocabulary = inputVoc;
    }",659.0,663.0,5.0,5.0,5.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
988,429180,setDecodeType,1,cv.dnn.TextRecognitionModel_Impl.setDecodeType,void cv.dnn.TextRecognitionModel_Impl.setDecodeType (ANY),src\model.cpp,"inline
    void setDecodeType(const std::string& type)
    {
        decodeType = type;
    }",665.0,669.0,5.0,5.0,5.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
989,380030,crbegin,1,cv.dnn.cuda4dnn.csl.device.array.crbegin,const_reverse_iterator cv.dnn.cuda4dnn.csl.device.array.crbegin (),src\cuda\array.hpp,const_reverse_iterator crbegin() const noexcept { return ptr + N; },48.0,48.0,29.0,95.0,1.0,1,1,2,2,0,1,1,1,0,0,,0,1,0,0,0,const_reverse_iterator
990,363651,cudnnHandle,3,cv.dnn.cuda4dnn.csl.LRN.cudnnHandle,,src\cuda4dnn\csl\tensor_ops.hpp,cudnnHandle,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
991,314499,fbb_,3,opencv_tflite.SelectOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
992,363652,lrnDesc,3,cv.dnn.cuda4dnn.csl.LRN.lrnDesc,,src\cuda4dnn\csl\tensor_ops.hpp,lrnDesc,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
993,314501,SelectOptionsBuilder,1,opencv_tflite.SelectOptionsBuilder.SelectOptionsBuilder,ANY opencv_tflite.SelectOptionsBuilder.SelectOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit SelectOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",5898.0,5901.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
994,314500,start_,3,opencv_tflite.SelectOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
995,429188,setDecodeOptsCTCPrefixBeamSearch,1,cv.dnn.TextRecognitionModel_Impl.setDecodeOptsCTCPrefixBeamSearch,"void cv.dnn.TextRecognitionModel_Impl.setDecodeOptsCTCPrefixBeamSearch (int,int)",src\model.cpp,"inline
    void setDecodeOptsCTCPrefixBeamSearch(int beam, int vocPrune)
    {
        beamSize = beam;
        vocPruneSize = vocPrune;
    }",671.0,676.0,5.0,5.0,6.0,2,1,4,4,0,2,1,1,0,0,,0,2,4,2,2,void
996,380039,crend,1,cv.dnn.cuda4dnn.csl.device.array.crend,const_reverse_iterator cv.dnn.cuda4dnn.csl.device.array.crend (),src\cuda\array.hpp,const_reverse_iterator crend() const noexcept { return ptr; },49.0,49.0,29.0,89.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,const_reverse_iterator
997,380047,operator [],1,cv.dnn.cuda4dnn.csl.device.array.operator [],reference cv.dnn.cuda4dnn.csl.device.array.operator [] (int),src\cuda\array.hpp,const_reference operator[](int idx) const { return ptr[idx]; },57.0,57.0,29.0,90.0,1.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,const_reference
998,429200,decode,1,cv.dnn.TextRecognitionModel_Impl.decode,string cv.dnn.TextRecognitionModel_Impl.decode (Mat),src\model.cpp,"virtual
    std::string decode(const Mat& prediction)
    {
        CV_TRACE_FUNCTION();
        CV_Assert(!prediction.empty());
        if (decodeType.empty())
            CV_Error(Error::StsBadArg, ""TextRecognitionModel: decodeType is not specified"");
        if (vocabulary.empty())
            CV_Error(Error::StsBadArg, ""TextRecognitionModel: vocabulary is not specified"");

        std::string decodeSeq;
        if (decodeType == ""CTC-greedy"") {
            decodeSeq = ctcGreedyDecode(prediction);
        } else if (decodeType == ""CTC-prefix-beam-search"") {
            decodeSeq = ctcPrefixBeamSearchDecode(prediction);
        } else if (decodeType.length() == 0) {
            CV_Error(Error::StsBadArg, ""Please set decodeType"");
        } else {
            CV_Error_(Error::StsBadArg, (""Unsupported decodeType: %s"", decodeType.c_str()));
        }

        return decodeSeq;
    }",678.0,700.0,5.0,5.0,23.0,8,4,9,5,0,3,4,4,3,0,,0,3,2,1,1,string
999,314512,Finish,1,opencv_tflite.SelectOptionsBuilder.Finish,Offset<SelectOptions> opencv_tflite.SelectOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<SelectOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SelectOptions>(end);
    return o;
  }",5902.0,5906.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<SelectOptions>
1000,265368,GetCachedSize,1,opencv_tensorflow.NameAttrList.GetCachedSize,int opencv_tensorflow.NameAttrList.GetCachedSize (),misc\tensorflow\attr_value.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },848.0,848.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
1001,85145,SharedCtor,1,opencv_caffe.TileParameter.SharedCtor,void opencv_caffe.TileParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void TileParameter::SharedCtor() {
tiles_ = 0;
axis_ = 1;
}",27445.0,27448.0,1.0,1.0,4.0,2,1,2,2,0,2,1,1,0,0,,0,2,0,0,0,void
1002,380067,front,1,cv.dnn.cuda4dnn.csl.device.array.front,reference cv.dnn.cuda4dnn.csl.device.array.front (),src\cuda\array.hpp,const_reference front() const { return ptr[0]; },60.0,60.0,29.0,76.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,const_reference
1003,68774,SetCachedSize,1,opencv_caffe.InputParameter.SetCachedSize,void opencv_caffe.InputParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void InputParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",22319.0,22321.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
1004,150698,descriptor,1,opencv_caffe.WindowDataParameter.descriptor,Descriptor opencv_caffe.WindowDataParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",17071.0,17073.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
1005,150704,GetDescriptor,1,opencv_caffe.WindowDataParameter.GetDescriptor,Descriptor opencv_caffe.WindowDataParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",17074.0,17076.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
1006,68784,Clear,1,opencv_caffe.InputParameter.Clear,void opencv_caffe.InputParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void InputParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.InputParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shape_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",22323.0,22331.0,1.0,1.0,9.0,4,3,4,3,0,1,1,1,0,0,,0,1,0,0,0,void
1007,363699,transform,1,cv.dnn.cuda4dnn.csl.TensorTransform.transform,"void cv.dnn.cuda4dnn.csl.TensorTransform.transform (TensorView<T>,TensorSpan<T>)",src\cuda4dnn\csl\tensor_ops.hpp,"void transform(TensorView<T> input, TensorSpan<T> output) {
            cudnn::transform<T>(
                cudnnHandle,
                transDesc,
                TensorDescriptor(input.shape_as_vector()), input.get(),
                TensorDescriptor(output.shape_as_vector()), output.get()
            );
        }",487.0,494.0,9.0,9.0,8.0,5,1,7,5,0,2,1,1,0,0,,0,2,4,2,2,void
1008,134324,_has_bits_,3,opencv_caffe.SaveOutputParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
1009,134325,_cached_size_,3,opencv_caffe.SaveOutputParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1010,249014,descriptor,1,opencv_onnx.OperatorSetIdProto.descriptor,Descriptor opencv_onnx.OperatorSetIdProto.descriptor (),misc\onnx\opencv-onnx.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",3401.0,3403.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
1011,134327,output_name_prefix_,3,opencv_caffe.SaveOutputParameter.output_name_prefix_,,misc\caffe\opencv-caffe.pb.hpp,output_name_prefix_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1012,314552,fbb_,3,opencv_tflite.SliceOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1013,52409,_InternalParse,1,opencv_caffe.DataParameter._InternalParse,"const char* opencv_caffe.DataParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* DataParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, ""opencv_caffe.DataParameter.source"");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float scale = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Intern...",17327.0,17456.0,1.0,10.0,130.0,112,14,124,20,0,16,28,40,1,8,,0,9,4,2,2,const char*
1014,134329,label_map_file_,3,opencv_caffe.SaveOutputParameter.label_map_file_,,misc\caffe\opencv-caffe.pb.hpp,label_map_file_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1015,134331,num_test_image_,3,opencv_caffe.SaveOutputParameter.num_test_image_,,misc\caffe\opencv-caffe.pb.hpp,num_test_image_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
1016,249020,GetDescriptor,1,opencv_onnx.OperatorSetIdProto.GetDescriptor,Descriptor opencv_onnx.OperatorSetIdProto.GetDescriptor (),misc\onnx\opencv-onnx.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",3404.0,3406.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
1017,314553,start_,3,opencv_tflite.SliceOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1018,298174,file_level_metadata_tensor_5fshape_2eproto,2,misc\tensorflow\tensor_shape.pb.cc.file_level_metadata_tensor_5fshape_2eproto,,misc\tensorflow\tensor_shape.pb.cc,static ::PROTOBUF_NAMESPACE_ID::Metadata[2] file_level_metadata_tensor_5fshape_2eproto,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1019,134328,output_format_,3,opencv_caffe.SaveOutputParameter.output_format_,,misc\caffe\opencv-caffe.pb.hpp,output_format_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1020,314554,SliceOptionsBuilder,1,opencv_tflite.SliceOptionsBuilder.SliceOptionsBuilder,ANY opencv_tflite.SliceOptionsBuilder.SliceOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit SliceOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",5927.0,5930.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1021,150715,GetReflection,1,opencv_caffe.WindowDataParameter.GetReflection,Reflection opencv_caffe.WindowDataParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",17077.0,17079.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
1022,134330,name_size_file_,3,opencv_caffe.SaveOutputParameter.name_size_file_,,misc\caffe\opencv-caffe.pb.hpp,name_size_file_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1023,314565,Finish,1,opencv_tflite.SliceOptionsBuilder.Finish,Offset<SliceOptions> opencv_tflite.SliceOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<SliceOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SliceOptions>(end);
    return o;
  }",5931.0,5935.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<SliceOptions>
1024,150726,default_instance,1,opencv_caffe.WindowDataParameter.default_instance,WindowDataParameter opencv_caffe.WindowDataParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const WindowDataParameter& default_instance() {
    return *internal_default_instance();
  }",17080.0,17082.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,WindowDataParameter
1025,249031,GetReflection,1,opencv_onnx.OperatorSetIdProto.GetReflection,Reflection opencv_onnx.OperatorSetIdProto.GetReflection (),misc\onnx\opencv-onnx.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",3407.0,3409.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
1026,380107,data,1,cv.dnn.cuda4dnn.csl.device.array.data,pointer cv.dnn.cuda4dnn.csl.device.array.data (),src\cuda\array.hpp,const_pointer data() const noexcept { return ptr; },66.0,66.0,29.0,79.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,const_pointer
1027,85197,SetCachedSize,1,opencv_caffe.TileParameter.SetCachedSize,void opencv_caffe.TileParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void TileParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",27467.0,27469.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
1028,150733,internal_default_instance,1,opencv_caffe.WindowDataParameter.internal_default_instance,WindowDataParameter opencv_caffe.WindowDataParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const WindowDataParameter* internal_default_instance() {
    return reinterpret_cast<const WindowDataParameter*>(
               &_WindowDataParameter_default_instance_);
  }",17083.0,17086.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,WindowDataParameter
1029,363729,cudnnHandle,3,cv.dnn.cuda4dnn.csl.TensorTransform.cudnnHandle,,src\cuda4dnn\csl\tensor_ops.hpp,cudnnHandle,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1030,249042,default_instance,1,opencv_onnx.OperatorSetIdProto.default_instance,OperatorSetIdProto opencv_onnx.OperatorSetIdProto.default_instance (),misc\onnx\opencv-onnx.pb.hpp,"static const OperatorSetIdProto& default_instance() {
    return *internal_default_instance();
  }",3410.0,3412.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,OperatorSetIdProto
1031,363730,transDesc,3,cv.dnn.cuda4dnn.csl.TensorTransform.transDesc,,src\cuda4dnn\csl\tensor_ops.hpp,transDesc,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1032,85207,Clear,1,opencv_caffe.TileParameter.Clear,void opencv_caffe.TileParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void TileParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.TileParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    tiles_ = 0;
    axis_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",27471.0,27484.0,1.0,1.0,14.0,9,5,9,5,0,4,2,2,0,0,,0,4,0,0,0,void
1033,380120,ptr,3,cv.dnn.cuda4dnn.csl.device.array.ptr,,src\cuda\array.hpp,ptr[N],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,12,0,1,1,0,0,,0,0,0,0,0,
1034,249049,internal_default_instance,1,opencv_onnx.OperatorSetIdProto.internal_default_instance,OperatorSetIdProto opencv_onnx.OperatorSetIdProto.internal_default_instance (),misc\onnx\opencv-onnx.pb.hpp,"static inline const OperatorSetIdProto* internal_default_instance() {
    return reinterpret_cast<const OperatorSetIdProto*>(
               &_OperatorSetIdProto_default_instance_);
  }",3413.0,3416.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,OperatorSetIdProto
1035,298204,descriptor_table_tensor_5fshape_2eproto_once,2,misc\tensorflow\tensor_shape.pb.cc.descriptor_table_tensor_5fshape_2eproto_once,,misc\tensorflow\tensor_shape.pb.cc,ANY descriptor_table_tensor_5fshape_2eproto_once,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1036,298205,descriptor_table_tensor_5fshape_2eproto,2,misc\tensorflow\tensor_shape.pb.cc.descriptor_table_tensor_5fshape_2eproto,,misc\tensorflow\tensor_shape.pb.cc,ANY descriptor_table_tensor_5fshape_2eproto,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1037,429285,ctcGreedyDecode,1,cv.dnn.TextRecognitionModel_Impl.ctcGreedyDecode,string cv.dnn.TextRecognitionModel_Impl.ctcGreedyDecode (Mat),src\model.cpp,"virtual
    std::string ctcGreedyDecode(const Mat& prediction)
    {
        std::string decodeSeq;
        CV_CheckEQ(prediction.dims, 3, """");
        CV_CheckType(prediction.type(), CV_32FC1, """");
        const int vocLength = (int)(vocabulary.size());
        CV_CheckLE(prediction.size[1], vocLength, """");
        bool ctcFlag = true;
        int lastLoc = 0;
        for (int i = 0; i < prediction.size[0]; i++)
        {
            const float* pred = prediction.ptr<float>(i);
            int maxLoc = 0;
            float maxScore = pred[0];
            for (int j = 1; j < vocLength + 1; j++)
            {
                float score = pred[j];
                if (maxScore < score)
                {
                    maxScore = score;
                    maxLoc = j;
                }
            }

            if (maxLoc > 0)
            {
                std::string currentChar = vocabulary.at(maxLoc - 1);
                if (maxLoc != lastLoc || ctcFlag)
                {
   ...",702.0,743.0,5.0,5.0,42.0,35,11,43,14,0,2,6,12,0,0,,0,2,2,1,1,string
1038,19689,set_has_power,1,opencv_caffe._Internal.set_has_power,void opencv_caffe._Internal.set_has_power (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_power(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }",24396.0,24398.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
1039,314605,fbb_,3,opencv_tflite.TransposeConvOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
1040,314606,start_,3,opencv_tflite.TransposeConvOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1041,314607,add_padding,1,opencv_tflite.TransposeConvOptionsBuilder.add_padding,void opencv_tflite.TransposeConvOptionsBuilder.add_padding (ANY),misc\tflite\schema_generated.hpp,"void add_padding(opencv_tflite::Padding padding) {
    fbb_.AddElement<int8_t>(TransposeConvOptions::VT_PADDING, static_cast<int8_t>(padding), 0);
  }",5978.0,5980.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
1042,298228,descriptor_table_tensor_5fshape_2eproto_getter,1,descriptor_table_tensor_5fshape_2eproto_getter,DescriptorTable descriptor_table_tensor_5fshape_2eproto_getter (),misc\tensorflow\tensor_shape.pb.cc,"const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_tensor_5fshape_2eproto_getter() {
  return &descriptor_table_tensor_5fshape_2eproto;
}",94.0,96.0,25.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,DescriptorTable
1043,85242,_InternalParse,1,opencv_caffe.TileParameter._InternalParse,"const char* opencv_caffe.TileParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* TileParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 axis = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_axis(&has_bits);
          axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tiles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tiles(&has_bits);
          tiles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        ...",27486.0,27533.0,1.0,10.0,48.0,40,12,43,11,0,5,11,12,0,2,,0,3,4,2,2,const char*
1044,314627,add_stride_w,1,opencv_tflite.TransposeConvOptionsBuilder.add_stride_w,void opencv_tflite.TransposeConvOptionsBuilder.add_stride_w (int32_t),misc\tflite\schema_generated.hpp,"void add_stride_w(int32_t stride_w) {
    fbb_.AddElement<int32_t>(TransposeConvOptions::VT_STRIDE_W, stride_w, 0);
  }",5981.0,5983.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
1045,314645,add_stride_h,1,opencv_tflite.TransposeConvOptionsBuilder.add_stride_h,void opencv_tflite.TransposeConvOptionsBuilder.add_stride_h (int32_t),misc\tflite\schema_generated.hpp,"void add_stride_h(int32_t stride_h) {
    fbb_.AddElement<int32_t>(TransposeConvOptions::VT_STRIDE_H, stride_h, 0);
  }",5984.0,5986.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
1046,265509,attr_,3,opencv_tensorflow.NameAttrList.attr_,,misc\tensorflow\attr_value.pb.hpp,attr_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
1047,134437,descriptor,1,opencv_caffe.DropoutParameter.descriptor,Descriptor opencv_caffe.DropoutParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",10160.0,10162.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
1048,265510,name_,3,opencv_tensorflow.NameAttrList.name_,,misc\tensorflow\attr_value.pb.hpp,name_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1049,314663,add_fused_activation_function,1,opencv_tflite.TransposeConvOptionsBuilder.add_fused_activation_function,void opencv_tflite.TransposeConvOptionsBuilder.add_fused_activation_function (ANY),misc\tflite\schema_generated.hpp,"void add_fused_activation_function(opencv_tflite::ActivationFunctionType fused_activation_function) {
    fbb_.AddElement<int8_t>(TransposeConvOptions::VT_FUSED_ACTIVATION_FUNCTION, static_cast<int8_t>(fused_activation_function), 0);
  }",5987.0,5989.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
1050,265511,_cached_size_,3,opencv_tensorflow.NameAttrList._cached_size_,,misc\tensorflow\attr_value.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1051,380197,operator ++,1,cv.dnn.cuda4dnn.csl.device.block_stride_range_generic.iterator.operator ++,iterator cv.dnn.cuda4dnn.csl.device.block_stride_range_generic.iterator.operator ++ (),src\cuda\block_stride_range.hpp,"iterator& operator++() {
            const index_type block_size = BLOCK_SIZE == 0 ? getBlockDim<dim>() : BLOCK_SIZE;
            pos += block_size;
            return *this;
        }",31.0,35.0,20.0,9.0,5.0,5,5,5,3,0,1,1,1,0,0,,0,1,0,0,0,iterator
1052,134443,GetDescriptor,1,opencv_caffe.DropoutParameter.GetDescriptor,Descriptor opencv_caffe.DropoutParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",10163.0,10165.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
1053,134454,GetReflection,1,opencv_caffe.DropoutParameter.GetReflection,Reflection opencv_caffe.DropoutParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",10166.0,10168.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
1054,380217,operator !=,1,cv.dnn.cuda4dnn.csl.device.block_stride_range_generic.iterator.operator !=,bool cv.dnn.cuda4dnn.csl.device.block_stride_range_generic.iterator.operator != (iterator),src\cuda\block_stride_range.hpp,"bool operator!=(const iterator& other) const {
            /* NOTE HACK
             * 'pos' can move in large steps (see operator++)
             * expansion of range for loop uses != as the loop conditioion
             * => operator!= must return false if 'pos' crosses the end
             */
            return pos < other.pos;
        }",37.0,44.0,20.0,9.0,8.0,2,2,2,2,0,1,1,1,0,0,,0,1,2,1,1,bool
1055,314683,TransposeConvOptionsBuilder,1,opencv_tflite.TransposeConvOptionsBuilder.TransposeConvOptionsBuilder,ANY opencv_tflite.TransposeConvOptionsBuilder.TransposeConvOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit TransposeConvOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",5990.0,5993.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1056,134465,default_instance,1,opencv_caffe.DropoutParameter.default_instance,DropoutParameter opencv_caffe.DropoutParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const DropoutParameter& default_instance() {
    return *internal_default_instance();
  }",10169.0,10171.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,DropoutParameter
1057,380228,pos,3,cv.dnn.cuda4dnn.csl.device.block_stride_range_generic.iterator.pos,,src\cuda\block_stride_range.hpp,pos,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1058,298308,SharedCtor,1,opencv_tensorflow.TensorShapeProto_Dim.SharedCtor,void opencv_tensorflow.TensorShapeProto_Dim.SharedCtor (),misc\tensorflow\tensor_shape.pb.cc,"inline void TensorShapeProto_Dim::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
size_ = int64_t{0};
}",132.0,138.0,1.0,1.0,7.0,6,4,4,4,0,2,1,1,0,0,,0,2,0,0,0,void
1059,380230,begin,1,cv.dnn.cuda4dnn.csl.device.block_stride_range_generic.begin,iterator cv.dnn.cuda4dnn.csl.device.block_stride_range_generic.begin (),src\cuda\block_stride_range.hpp,"iterator begin() const {
        return iterator(from + getThreadIdx<dim>());
    }",50.0,52.0,16.0,5.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,iterator
1060,314694,Finish,1,opencv_tflite.TransposeConvOptionsBuilder.Finish,Offset<TransposeConvOptions> opencv_tflite.TransposeConvOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<TransposeConvOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TransposeConvOptions>(end);
    return o;
  }",5994.0,5998.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<TransposeConvOptions>
1061,134472,internal_default_instance,1,opencv_caffe.DropoutParameter.internal_default_instance,DropoutParameter opencv_caffe.DropoutParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const DropoutParameter* internal_default_instance() {
    return reinterpret_cast<const DropoutParameter*>(
               &_DropoutParameter_default_instance_);
  }",10172.0,10175.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,DropoutParameter
1062,150858,GetCachedSize,1,opencv_caffe.WindowDataParameter.GetCachedSize,int opencv_caffe.WindowDataParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },17131.0,17131.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
1063,380240,end,1,cv.dnn.cuda4dnn.csl.device.block_stride_range_generic.end,iterator cv.dnn.cuda4dnn.csl.device.block_stride_range_generic.end (),src\cuda\block_stride_range.hpp,"iterator end() const {
        return iterator(to);
    }",54.0,56.0,16.0,5.0,3.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,iterator
1064,363858,inference,1,cv.dnn.cuda4dnn.csl.LSTM.inference,"void cv.dnn.cuda4dnn.csl.LSTM.inference (TensorView<T>,TensorSpan<T>,TensorSpan<T>,TensorView<T>,TensorView<T>,TensorView<T>,WorkspaceInstance)",src\cuda4dnn\csl\tensor_ops.hpp,"void inference(TensorView<T> input, TensorSpan<T> y_output, TensorSpan<T> yc_output, TensorView<T> filters,
                       TensorView<T> h0, TensorView<T> c0, WorkspaceInstance workspace)
        {
            cudnn::LSTMForward<T>(cudnnHandle, rnnDesc, filterDesc, filters.get(), inputDesc,
                                  input.get(), h0TensorDesc, h0.get(), c0TensorDesc, c0.get(),
                                  seqLength, outputDesc, y_output.get(), yc_output.get(), workspace);
        }",560.0,566.0,9.0,9.0,7.0,7,1,16,16,0,8,1,1,0,0,,0,8,14,7,7,void
1065,249174,GetCachedSize,1,opencv_onnx.OperatorSetIdProto.GetCachedSize,int opencv_onnx.OperatorSetIdProto.GetCachedSize (),misc\onnx\opencv-onnx.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },3461.0,3461.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
1066,380247,from,3,cv.dnn.cuda4dnn.csl.device.block_stride_range_generic.from,,src\cuda\block_stride_range.hpp,from,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1067,380248,to,3,cv.dnn.cuda4dnn.csl.device.block_stride_range_generic.to,,src\cuda\block_stride_range.hpp,to,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1068,298343,SharedDtor,1,opencv_tensorflow.TensorShapeProto_Dim.SharedDtor,void opencv_tensorflow.TensorShapeProto_Dim.SharedDtor (),misc\tensorflow\tensor_shape.pb.cc,"inline void TensorShapeProto_Dim::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}",147.0,150.0,1.0,1.0,4.0,5,3,3,3,0,1,1,1,0,0,,0,1,0,0,0,void
1069,429433,pB,3,cv.dnn.TextRecognitionModel_Impl.PrefixScore.pB,,src\model.cpp,pB,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
1070,429434,pNB,3,cv.dnn.TextRecognitionModel_Impl.PrefixScore.pNB,,src\model.cpp,pNB,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
1071,363906,get_workspace_memory_in_bytes,1,cv.dnn.cuda4dnn.csl.LSTM.get_workspace_memory_in_bytes,size_t cv.dnn.cuda4dnn.csl.LSTM.get_workspace_memory_in_bytes (),src\cuda4dnn\csl\tensor_ops.hpp,std::size_t get_workspace_memory_in_bytes() const noexcept { return scratch_mem_in_bytes; },568.0,568.0,9.0,99.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,size_t
1072,314758,fbb_,3,opencv_tflite.ExpandDimsOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1073,314759,start_,3,opencv_tflite.ExpandDimsOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1074,314760,ExpandDimsOptionsBuilder,1,opencv_tflite.ExpandDimsOptionsBuilder.ExpandDimsOptionsBuilder,ANY opencv_tflite.ExpandDimsOptionsBuilder.ExpandDimsOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit ExpandDimsOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",6027.0,6030.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1075,363913,scratch_mem_in_bytes,3,cv.dnn.cuda4dnn.csl.LSTM.scratch_mem_in_bytes,,src\cuda4dnn\csl\tensor_ops.hpp,scratch_mem_in_bytes{0},-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1076,363912,cudnnHandle,3,cv.dnn.cuda4dnn.csl.LSTM.cudnnHandle,,src\cuda4dnn\csl\tensor_ops.hpp,cudnnHandle,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1077,363915,rnnDesc,3,cv.dnn.cuda4dnn.csl.LSTM.rnnDesc,,src\cuda4dnn\csl\tensor_ops.hpp,rnnDesc,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1078,363914,seqLength,3,cv.dnn.cuda4dnn.csl.LSTM.seqLength,,src\cuda4dnn\csl\tensor_ops.hpp,seqLength,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1079,298381,SetCachedSize,1,opencv_tensorflow.TensorShapeProto_Dim.SetCachedSize,void opencv_tensorflow.TensorShapeProto_Dim.SetCachedSize (int),misc\tensorflow\tensor_shape.pb.cc,"void TensorShapeProto_Dim::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",158.0,160.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
1080,363918,h0TensorDesc,3,cv.dnn.cuda4dnn.csl.LSTM.h0TensorDesc,,src\cuda4dnn\csl\tensor_ops.hpp,h0TensorDesc,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1081,363919,c0TensorDesc,3,cv.dnn.cuda4dnn.csl.LSTM.c0TensorDesc,,src\cuda4dnn\csl\tensor_ops.hpp,c0TensorDesc,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1082,363920,inputDesc,3,cv.dnn.cuda4dnn.csl.LSTM.inputDesc,,src\cuda4dnn\csl\tensor_ops.hpp,inputDesc,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1083,363921,outputDesc,3,cv.dnn.cuda4dnn.csl.LSTM.outputDesc,,src\cuda4dnn\csl\tensor_ops.hpp,outputDesc,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1084,363917,filterDesc,3,cv.dnn.cuda4dnn.csl.LSTM.filterDesc,,src\cuda4dnn\csl\tensor_ops.hpp,filterDesc,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1085,314771,Finish,1,opencv_tflite.ExpandDimsOptionsBuilder.Finish,Offset<ExpandDimsOptions> opencv_tflite.ExpandDimsOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<ExpandDimsOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ExpandDimsOptions>(end);
    return o;
  }",6031.0,6035.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<ExpandDimsOptions>
1086,298391,Clear,1,opencv_tensorflow.TensorShapeProto_Dim.Clear,void opencv_tensorflow.TensorShapeProto_Dim.Clear (),misc\tensorflow\tensor_shape.pb.cc,"void TensorShapeProto_Dim::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_tensorflow.TensorShapeProto.Dim)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  size_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",162.0,171.0,1.0,1.0,10.0,6,4,5,4,0,2,1,1,0,0,,0,2,0,0,0,void
1087,85418,_InternalSerialize,1,opencv_caffe.TileParameter._InternalSerialize,"uint8_t opencv_caffe.TileParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* TileParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.TileParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 axis = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_axis(), target);
  }

  // optional int32 tiles = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_tiles(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unk...",27535.0,27560.0,1.0,1.0,26.0,31,8,34,10,0,1,4,4,0,0,,0,1,4,2,2,uint8_t
1088,298415,_InternalParse,1,opencv_tensorflow.TensorShapeProto_Dim._InternalParse,"const char* opencv_tensorflow.TensorShapeProto_Dim._InternalParse (char*,ANY*)",misc\tensorflow\tensor_shape.pb.cc,"const char* TensorShapeProto_Dim::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, ""opencv_tensorflow.TensorShapeProto.Dim.name""));
          CHK_(ptr);
        } else
          ...",173.0,218.0,1.0,10.0,46.0,36,11,42,9,0,1,11,12,0,0,,0,1,4,2,2,const char*
1089,363952,require,1,cv.dnn.cuda4dnn.csl.Workspace.require,void cv.dnn.cuda4dnn.csl.Workspace.require (ANY),src\cuda4dnn\csl\workspace.hpp,"void require(std::size_t bytes) {
            if (bytes > ptr.size())
                ptr.reset(bytes);
        }",28.0,31.0,9.0,9.0,4.0,3,2,4,2,0,2,2,2,1,0,,0,2,2,1,1,void
1090,69042,ByteSizeLong,1,opencv_caffe.InputParameter.ByteSizeLong,size_t opencv_caffe.InputParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t InputParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.InputParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opencv_caffe.BlobShape shape = 1;
  total_size += 1UL * this->_internal_shape_size();
  for (const auto& msg : this->shape_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}",22397.0,22413.0,1.0,1.0,17.0,12,7,11,7,0,2,2,2,1,0,,0,2,0,0,0,size_t
1091,314811,fbb_,3,opencv_tflite.SparseToDenseOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1092,314812,start_,3,opencv_tflite.SparseToDenseOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1093,314813,add_validate_indices,1,opencv_tflite.SparseToDenseOptionsBuilder.add_validate_indices,void opencv_tflite.SparseToDenseOptionsBuilder.add_validate_indices (bool),misc\tflite\schema_generated.hpp,"void add_validate_indices(bool validate_indices) {
    fbb_.AddElement<uint8_t>(SparseToDenseOptions::VT_VALIDATE_INDICES, static_cast<uint8_t>(validate_indices), 0);
  }",6063.0,6065.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
1094,363970,size,1,cv.dnn.cuda4dnn.csl.Workspace.size,size_t cv.dnn.cuda4dnn.csl.Workspace.size (),src\cuda4dnn\csl\workspace.hpp,"std::size_t size() const noexcept {
            return ptr.size();
        }",34.0,36.0,9.0,9.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,size_t
1095,19909,net_param,1,opencv_caffe.SolverParameter._Internal.net_param,NetParameter opencv_caffe.SolverParameter._Internal.net_param (SolverParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::NetParameter&
SolverParameter::_Internal::net_param(const SolverParameter* msg) {
  return *msg->net_param_;
}",8172.0,8175.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,NetParameter
1096,134597,GetCachedSize,1,opencv_caffe.DropoutParameter.GetCachedSize,int opencv_caffe.DropoutParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },10220.0,10220.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
1097,232905,ByteSizeLong,1,opencv_onnx.GraphProto.ByteSizeLong,size_t opencv_onnx.GraphProto.ByteSizeLong (),misc\onnx\opencv-onnx.pb.cc,"size_t GraphProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_onnx.GraphProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opencv_onnx.NodeProto node = 1;
  total_size += 1UL * this->_internal_node_size();
  for (const auto& msg : this->node_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .opencv_onnx.TensorProto initializer = 5;
  total_size += 1UL * this->_internal_initializer_size();
  for (const auto& msg : this->initializer_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .opencv_onnx.ValueInfoProto input = 11;
  total_size += 1UL * this->_internal_input_size();
  for (const auto& msg : this->input_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize...",3419.0,3480.0,1.0,1.0,62.0,61,10,48,8,0,7,9,11,5,0,,0,7,0,0,0,size_t
1098,363979,get,1,cv.dnn.cuda4dnn.csl.Workspace.get,DevicePtr<unsigned char> cv.dnn.cuda4dnn.csl.Workspace.get (),src\cuda4dnn\csl\workspace.hpp,"DevicePtr<unsigned char> get() {
            return ptr.get();
        }",39.0,41.0,9.0,9.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,DevicePtr<unsigned char>
1099,19919,train_net_param,1,opencv_caffe.SolverParameter._Internal.train_net_param,NetParameter opencv_caffe.SolverParameter._Internal.train_net_param (SolverParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::NetParameter&
SolverParameter::_Internal::train_net_param(const SolverParameter* msg) {
  return *msg->train_net_param_;
}",8176.0,8179.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,NetParameter
1100,314833,SparseToDenseOptionsBuilder,1,opencv_tflite.SparseToDenseOptionsBuilder.SparseToDenseOptionsBuilder,ANY opencv_tflite.SparseToDenseOptionsBuilder.SparseToDenseOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit SparseToDenseOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",6066.0,6069.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1101,363988,ptr,3,cv.dnn.cuda4dnn.csl.Workspace.ptr,,src\cuda4dnn\csl\workspace.hpp,ptr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
1102,118232,_has_bits_,3,opencv_caffe.FillerParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
1103,19929,train_state,1,opencv_caffe.SolverParameter._Internal.train_state,NetState opencv_caffe.SolverParameter._Internal.train_state (SolverParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::NetState&
SolverParameter::_Internal::train_state(const SolverParameter* msg) {
  return *msg->train_state_;
}",8180.0,8183.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,NetState
1104,118233,_cached_size_,3,opencv_caffe.FillerParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1105,118235,type_,3,opencv_caffe.FillerParameter.type_,,misc\caffe\opencv-caffe.pb.hpp,type_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1106,118236,value_,3,opencv_caffe.FillerParameter.value_,,misc\caffe\opencv-caffe.pb.hpp,value_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
1107,118237,min_,3,opencv_caffe.FillerParameter.min_,,misc\caffe\opencv-caffe.pb.hpp,min_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1108,118238,mean_,3,opencv_caffe.FillerParameter.mean_,,misc\caffe\opencv-caffe.pb.hpp,mean_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1109,118239,variance_norm_,3,opencv_caffe.FillerParameter.variance_norm_,,misc\caffe\opencv-caffe.pb.hpp,variance_norm_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
1110,118240,sparse_,3,opencv_caffe.FillerParameter.sparse_,,misc\caffe\opencv-caffe.pb.hpp,sparse_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
1111,118241,max_,3,opencv_caffe.FillerParameter.max_,,misc\caffe\opencv-caffe.pb.hpp,max_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
1112,118242,std_,3,opencv_caffe.FillerParameter.std_,,misc\caffe\opencv-caffe.pb.hpp,std_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
1113,314844,Finish,1,opencv_tflite.SparseToDenseOptionsBuilder.Finish,Offset<SparseToDenseOptions> opencv_tflite.SparseToDenseOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<SparseToDenseOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SparseToDenseOptions>(end);
    return o;
  }",6070.0,6074.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<SparseToDenseOptions>
1114,249325,_has_bits_,3,opencv_onnx.OperatorSetIdProto._has_bits_,,misc\onnx\opencv-onnx.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
1115,249326,_cached_size_,3,opencv_onnx.OperatorSetIdProto._cached_size_,,misc\onnx\opencv-onnx.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1116,249327,domain_,3,opencv_onnx.OperatorSetIdProto.domain_,,misc\onnx\opencv-onnx.pb.hpp,domain_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1117,249328,version_,3,opencv_onnx.OperatorSetIdProto.version_,,misc\onnx\opencv-onnx.pb.hpp,version_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
1118,364015,required_workspace_size,1,cv.dnn.cuda4dnn.csl.WorkspaceBuilder.required_workspace_size,size_t cv.dnn.cuda4dnn.csl.WorkspaceBuilder.required_workspace_size (),src\cuda4dnn\csl\workspace.hpp,std::size_t required_workspace_size() const noexcept { return max_size_in_bytes; },60.0,60.0,9.0,90.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,size_t
1119,364021,max_size_in_bytes,3,cv.dnn.cuda4dnn.csl.WorkspaceBuilder.max_size_in_bytes,,src\cuda4dnn\csl\workspace.hpp,max_size_in_bytes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1120,364023,get,1,cv.dnn.cuda4dnn.csl.WorkspaceInstance.get,DevicePtr<T> cv.dnn.cuda4dnn.csl.WorkspaceInstance.get<T> (),src\cuda4dnn\csl\workspace.hpp,"DevicePtr<T> get() const noexcept {
            return static_cast<DevicePtr<T>>(ptr);
        }",72.0,74.0,9.0,9.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,DevicePtr<T>
1121,364031,size_in_bytes,1,cv.dnn.cuda4dnn.csl.WorkspaceInstance.size_in_bytes,size_t cv.dnn.cuda4dnn.csl.WorkspaceInstance.size_in_bytes (),src\cuda4dnn\csl\workspace.hpp,"std::size_t size_in_bytes() const noexcept {
            return size_in_bytes_;
        }",77.0,79.0,9.0,9.0,3.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,size_t
1122,69121,MergeFrom,1,opencv_caffe.InputParameter.MergeFrom,void opencv_caffe.InputParameter.MergeFrom (InputParameter),misc\caffe\opencv-caffe.pb.cc,"void InputParameter::MergeFrom(const InputParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.InputParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  shape_.MergeFrom(from.shape_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",22428.0,22436.0,1.0,1.0,9.0,10,6,8,5,1,2,1,1,0,0,,0,2,2,1,1,void
1123,413188,size,1,cv.dnn.util.NormalizedBBox.size,float cv.dnn.util.NormalizedBBox.size (),src\layers\detection_output_layer.cpp,float size() const { return size_; },86.0,86.0,5.0,40.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,float
1124,36357,_InternalSerialize,1,opencv_caffe.LayerParameter._InternalSerialize,"uint8_t opencv_caffe.LayerParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* LayerParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.LayerParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      ""opencv_caffe.LayerParameter.name"");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PRO...",12665.0,13204.0,1.0,1.0,540.0,595,8,763,14,0,58,67,67,0,54,,0,58,4,2,2,uint8_t
1125,364037,get_span,1,cv.dnn.cuda4dnn.csl.WorkspaceInstance.get_span,Span<T> cv.dnn.cuda4dnn.csl.WorkspaceInstance.get_span<T> (ANY),src\cuda4dnn\csl\workspace.hpp,"Span<T> get_span(std::size_t count = 0) const {
            if (count == 0)
                count = size_in_bytes_ / sizeof(T);

            if (count * sizeof(T) > size_in_bytes_)
                CV_Error(Error::StsNoMem, ""memory not sufficient"");

            return Span<T>(static_cast<DevicePtr<T>>(ptr), count);
        }",83.0,91.0,9.0,9.0,9.0,9,8,10,5,0,3,3,3,1,0,,0,3,2,1,1,Span<T>
1126,147254,GetCachedSize,1,opencv_caffe.ReshapeParameter.GetCachedSize,int opencv_caffe.ReshapeParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },15597.0,15597.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
1127,313333,fbb_,3,opencv_tflite.SqueezeOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1128,413194,has_size,1,cv.dnn.util.NormalizedBBox.has_size,bool cv.dnn.util.NormalizedBBox.has_size (),src\layers\detection_output_layer.cpp,bool has_size() const { return has_size_; },88.0,88.0,5.0,47.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,bool
1129,314891,start_,3,opencv_tflite.EqualOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1130,314892,EqualOptionsBuilder,1,opencv_tflite.EqualOptionsBuilder.EqualOptionsBuilder,ANY opencv_tflite.EqualOptionsBuilder.EqualOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit EqualOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",6097.0,6100.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1131,314890,fbb_,3,opencv_tflite.EqualOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1132,413200,set_size,1,cv.dnn.util.NormalizedBBox.set_size,void cv.dnn.util.NormalizedBBox.set_size (float),src\layers\detection_output_layer.cpp,void set_size(float value) { size_ = value; has_size_ = true; },90.0,90.0,5.0,67.0,1.0,2,1,3,3,0,2,1,1,0,0,,0,2,2,1,1,void
1133,85526,ByteSizeLong,1,opencv_caffe.TileParameter.ByteSizeLong,size_t opencv_caffe.TileParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t TileParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.TileParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 tiles = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_tiles());
    }

    // optional int32 axis = 1 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_axis());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}",27562.0,27584.0,1.0,1.0,23.0,19,8,18,7,0,2,4,6,0,0,,0,2,0,0,0,size_t
1134,314903,Finish,1,opencv_tflite.EqualOptionsBuilder.Finish,Offset<EqualOptions> opencv_tflite.EqualOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<EqualOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<EqualOptions>(end);
    return o;
  }",6101.0,6105.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<EqualOptions>
1135,413211,clear_size,1,cv.dnn.util.NormalizedBBox.clear_size,void cv.dnn.util.NormalizedBBox.clear_size (),src\layers\detection_output_layer.cpp,void clear_size() { size_ = 0; has_size_ = false; },92.0,92.0,5.0,55.0,1.0,2,1,2,2,0,2,1,1,0,0,,0,2,0,0,0,void
1136,413221,has_size_,3,cv.dnn.util.NormalizedBBox.has_size_,,src\layers\detection_output_layer.cpp,has_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1137,413222,size_,3,cv.dnn.util.NormalizedBBox.size_,,src\layers\detection_output_layer.cpp,size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1138,364072,get_tensor_span,1,cv.dnn.cuda4dnn.csl.WorkspaceInstance.get_tensor_span,"TensorSpan<T> cv.dnn.cuda4dnn.csl.WorkspaceInstance.get_tensor_span<T,ForwardItr> (ForwardItr,ForwardItr)",src\cuda4dnn\csl\workspace.hpp,"TensorSpan<T> get_tensor_span(ForwardItr shape_begin, ForwardItr shape_end) const {
            using ItrValueType = typename std::iterator_traits<ForwardItr>::value_type;
            auto required_size = std::accumulate(shape_begin, shape_end, 1, std::multiplies<ItrValueType>());
            if (required_size * sizeof(T) > size_in_bytes_)
                CV_Error(Error::StsNoMem, ""memory not sufficient"");
            return TensorSpan<T>(static_cast<DevicePtr<T>>(ptr), shape_begin, shape_end);
        }",95.0,101.0,9.0,9.0,7.0,8,6,12,8,0,2,2,2,1,0,,0,2,4,2,2,TensorSpan<T>
1139,69176,InternalSwap,1,opencv_caffe.InputParameter.InternalSwap,void opencv_caffe.InputParameter.InternalSwap (InputParameter*),misc\caffe\opencv-caffe.pb.cc,"void InputParameter::InternalSwap(InputParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  shape_.InternalSwap(&other->shape_);
}",22449.0,22453.0,1.0,1.0,5.0,6,3,4,3,0,2,1,1,0,0,,0,2,2,1,1,void
1140,314943,fbb_,3,opencv_tflite.NotEqualOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1141,314944,start_,3,opencv_tflite.NotEqualOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1142,314945,NotEqualOptionsBuilder,1,opencv_tflite.NotEqualOptionsBuilder.NotEqualOptionsBuilder,ANY opencv_tflite.NotEqualOptionsBuilder.NotEqualOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit NotEqualOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",6126.0,6129.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1143,314956,Finish,1,opencv_tflite.NotEqualOptionsBuilder.Finish,Offset<NotEqualOptions> opencv_tflite.NotEqualOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<NotEqualOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<NotEqualOptions>(end);
    return o;
  }",6130.0,6134.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<NotEqualOptions>
1144,134733,_has_bits_,3,opencv_caffe.DropoutParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
1145,69197,GetMetadata,1,opencv_caffe.InputParameter.GetMetadata,Metadata opencv_caffe.InputParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata InputParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[42]);
}",22455.0,22459.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
1146,134735,dropout_ratio_,3,opencv_caffe.DropoutParameter.dropout_ratio_,,misc\caffe\opencv-caffe.pb.hpp,dropout_ratio_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
1147,134736,scale_train_,3,opencv_caffe.DropoutParameter.scale_train_,,misc\caffe\opencv-caffe.pb.hpp,scale_train_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
1148,364113,ptr,3,cv.dnn.cuda4dnn.csl.WorkspaceInstance.ptr,,src\cuda4dnn\csl\workspace.hpp,ptr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1149,134734,_cached_size_,3,opencv_caffe.DropoutParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1150,364114,size_in_bytes_,3,cv.dnn.cuda4dnn.csl.WorkspaceInstance.size_in_bytes_,,src\cuda4dnn\csl\workspace.hpp,size_in_bytes_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
1151,429658,ctcPrefixBeamSearchDecode,1,cv.dnn.TextRecognitionModel_Impl.ctcPrefixBeamSearchDecode,string cv.dnn.TextRecognitionModel_Impl.ctcPrefixBeamSearchDecode (Mat),src\model.cpp,"virtual
    std::string ctcPrefixBeamSearchDecode(const Mat& prediction) {
          // CTC prefix beam search decode.
          // For more detail, refer to:
          // https://distill.pub/2017/ctc/#inference
          // https://gist.github.com/awni/56369a90d03953e370f3964c826ed4b0i
          using Beam = std::vector<std::pair<std::vector<int>, PrefixScore>>;
          using BeamInDict = std::unordered_map<std::vector<int>, PrefixScore, PrefixHash>;

          CV_CheckType(prediction.type(), CV_32FC1, """");
          CV_CheckEQ(prediction.dims, 3, """");
          CV_CheckEQ(prediction.size[1], 1, """");
          CV_CheckEQ(prediction.size[2], (int)vocabulary.size() + 1, """");  // Length add 1 for ctc blank

          std::string decodeSeq;
          Beam beam = {std::make_pair(std::vector<int>(), PrefixScore(0.0, kNegativeInfinity))};
          for (int i = 0; i < prediction.size[0]; i++)
          {
              // Loop over time
              BeamInDict nextBeam;
              co...",821.0,894.0,5.0,5.0,74.0,88,14,89,24,0,16,8,16,0,0,,0,16,2,1,1,string
1152,118366,descriptor,1,opencv_caffe.NetParameter.descriptor,Descriptor opencv_caffe.NetParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",3508.0,3510.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
1153,3683,file_level_metadata_opencv_2dcaffe_2eproto,2,misc\caffe\opencv-caffe.pb.cc.file_level_metadata_opencv_2dcaffe_2eproto,,misc\caffe\opencv-caffe.pb.cc,static ::PROTOBUF_NAMESPACE_ID::Metadata[71] file_level_metadata_opencv_2dcaffe_2eproto,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,71,0,1,1,0,0,,0,0,0,0,0,
1154,118372,GetDescriptor,1,opencv_caffe.NetParameter.GetDescriptor,Descriptor opencv_caffe.NetParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",3511.0,3513.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
1155,3686,file_level_enum_descriptors_opencv_2dcaffe_2eproto,2,misc\caffe\opencv-caffe.pb.cc.file_level_enum_descriptors_opencv_2dcaffe_2eproto,,misc\caffe\opencv-caffe.pb.cc,ANY file_level_enum_descriptors_opencv_2dcaffe_2eproto,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,27,0,1,1,0,0,,0,0,0,0,0,
1156,118383,GetReflection,1,opencv_caffe.NetParameter.GetReflection,Reflection opencv_caffe.NetParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",3514.0,3516.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
1157,282225,ByteSizeLong,1,opencv_tensorflow.OpDef_ArgDef.ByteSizeLong,size_t opencv_tensorflow.OpDef_ArgDef.ByteSizeLong (),misc\tensorflow\op_def.pb.cc,"size_t OpDef_ArgDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_tensorflow.OpDef.ArgDef)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string type_attr = 4;
  if (!this->_internal_type_attr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type_attr());
  }

  // string number_attr = 5;
  if (!this->_internal_number_attr().empty()) {
    total_size += 1 +
      :...",538.0,593.0,1.0,1.0,56.0,61,9,30,6,0,1,8,8,0,0,,0,1,0,0,0,size_t
1158,314996,fbb_,3,opencv_tflite.ShapeOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1159,314997,start_,3,opencv_tflite.ShapeOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1160,314998,add_out_type,1,opencv_tflite.ShapeOptionsBuilder.add_out_type,void opencv_tflite.ShapeOptionsBuilder.add_out_type (ANY),misc\tflite\schema_generated.hpp,"void add_out_type(opencv_tflite::TensorType out_type) {
    fbb_.AddElement<int8_t>(ShapeOptions::VT_OUT_TYPE, static_cast<int8_t>(out_type), 0);
  }",6162.0,6164.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
1161,118394,default_instance,1,opencv_caffe.NetParameter.default_instance,NetParameter opencv_caffe.NetParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const NetParameter& default_instance() {
    return *internal_default_instance();
  }",3517.0,3519.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,NetParameter
1162,85628,MergeFrom,1,opencv_caffe.TileParameter.MergeFrom,void opencv_caffe.TileParameter.MergeFrom (TileParameter),misc\caffe\opencv-caffe.pb.cc,"void TileParameter::MergeFrom(const TileParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.TileParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      tiles_ = from.tiles_;
    }
    if (cached_has_bits & 0x00000002u) {
      axis_ = from.axis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",27599.0,27616.0,1.0,1.0,18.0,19,8,17,7,1,6,4,6,0,0,,0,6,2,1,1,void
1163,118401,internal_default_instance,1,opencv_caffe.NetParameter.internal_default_instance,NetParameter opencv_caffe.NetParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const NetParameter* internal_default_instance() {
    return reinterpret_cast<const NetParameter*>(
               &_NetParameter_default_instance_);
  }",3520.0,3523.0,3.0,3.0,4.0,2,2,1,1,2,0,1,1,0,0,,0,0,0,0,0,NetParameter
1164,315018,ShapeOptionsBuilder,1,opencv_tflite.ShapeOptionsBuilder.ShapeOptionsBuilder,ANY opencv_tflite.ShapeOptionsBuilder.ShapeOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit ShapeOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",6165.0,6168.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1165,315029,Finish,1,opencv_tflite.ShapeOptionsBuilder.Finish,Offset<ShapeOptions> opencv_tflite.ShapeOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<ShapeOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ShapeOptions>(end);
    return o;
  }",6169.0,6173.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<ShapeOptions>
1166,364201,accquire,1,cv.dnn.cuda4dnn.csl.WorkspaceAllocator.accquire,Span<T> cv.dnn.cuda4dnn.csl.WorkspaceAllocator.accquire<T> (ANY),src\cuda4dnn\csl\workspace.hpp,"Span<T> accquire(std::size_t count = 0) {
            auto ptr = current;

            if (count == 0)
                count = bytes_remaining / sizeof(T);

            auto blocks256 = (count * sizeof(T) + 255) / 256;
            if (bytes_remaining < blocks256 * 256)
                CV_Error(Error::StsNoMem, ""out of workspace memory"");

            bytes_remaining -= blocks256 * 256;
            current = static_cast<DevicePtr<std::int8_t>>(current) + blocks256 * 256;
            return Span<T>(static_cast<DevicePtr<T>>(ptr), count);
        }",145.0,158.0,9.0,9.0,14.0,20,10,19,7,0,6,3,3,1,0,,0,6,2,1,1,Span<T>
1167,233136,MergeFrom,1,opencv_onnx.GraphProto.MergeFrom,void opencv_onnx.GraphProto.MergeFrom (GraphProto),misc\onnx\opencv-onnx.pb.cc,"void GraphProto::MergeFrom(const GraphProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_onnx.GraphProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  node_.MergeFrom(from.node_);
  initializer_.MergeFrom(from.initializer_);
  input_.MergeFrom(from.input_);
  output_.MergeFrom(from.output_);
  value_info_.MergeFrom(from.value_info_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_doc_string(from._internal_doc_string());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",3495.0,3516.0,1.0,1.0,22.0,26,8,23,9,2,11,4,6,0,0,,0,11,2,1,1,void
1168,102071,MergeFrom,1,opencv_caffe.V0LayerParameter.MergeFrom,void opencv_caffe.V0LayerParameter.MergeFrom (V0LayerParameter),misc\caffe\opencv-caffe.pb.cc,"void V0LayerParameter::MergeFrom(const V0LayerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.V0LayerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  blobs_.MergeFrom(from.blobs_);
  blobs_lr_.MergeFrom(from.blobs_lr_);
  weight_decay_.MergeFrom(from.weight_decay_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_source(from._internal_source());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_meanfile(from._internal_meanfile());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_det_crop_mode(from._internal_det_crop_mode());
    }
    if (cached_has_bits & 0x00000020u) {
...",32086.0,32217.0,1.0,1.0,132.0,129,9,126,35,1,69,41,76,0,3,,0,66,2,1,1,void
1169,69303,SharedCtor,1,opencv_caffe.LogParameter.SharedCtor,void opencv_caffe.LogParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void LogParameter::SharedCtor() {
shift_ = 0;
base_ = -1;
scale_ = 1;
}",22496.0,22500.0,1.0,1.0,5.0,4,2,3,3,0,3,1,1,0,0,,0,3,0,0,0,void
1170,134842,descriptor,1,opencv_caffe.DummyDataParameter.descriptor,Descriptor opencv_caffe.DummyDataParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",10333.0,10335.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
1171,52923,_InternalSerialize,1,opencv_caffe.DataParameter._InternalSerialize,"uint8_t opencv_caffe.DataParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* DataParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.DataParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      ""opencv_caffe.DataParameter.source"");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_source(), target);
  }

  // optional float scale = 2 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_scale(), targe...",17458.0,17540.0,1.0,1.0,83.0,109,8,108,10,0,1,12,12,0,0,,0,1,4,2,2,uint8_t
1172,134848,GetDescriptor,1,opencv_caffe.DummyDataParameter.GetDescriptor,Descriptor opencv_caffe.DummyDataParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",10336.0,10338.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
1173,315075,fbb_,3,opencv_tflite.RankOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1174,315076,start_,3,opencv_tflite.RankOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1175,315077,RankOptionsBuilder,1,opencv_tflite.RankOptionsBuilder.RankOptionsBuilder,ANY opencv_tflite.RankOptionsBuilder.RankOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit RankOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",6196.0,6199.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1176,134859,GetReflection,1,opencv_caffe.DummyDataParameter.GetReflection,Reflection opencv_caffe.DummyDataParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",10339.0,10341.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
1177,315088,Finish,1,opencv_tflite.RankOptionsBuilder.Finish,Offset<RankOptions> opencv_tflite.RankOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<RankOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RankOptions>(end);
    return o;
  }",6200.0,6204.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<RankOptions>
1178,85713,InternalSwap,1,opencv_caffe.TileParameter.InternalSwap,void opencv_caffe.TileParameter.InternalSwap (TileParameter*),misc\caffe\opencv-caffe.pb.cc,"void TileParameter::InternalSwap(TileParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(tiles_, other->tiles_);
  swap(axis_, other->axis_);
}",27629.0,27635.0,1.0,1.0,7.0,8,4,8,5,0,6,1,1,0,0,,0,6,2,1,1,void
1179,134870,default_instance,1,opencv_caffe.DummyDataParameter.default_instance,DummyDataParameter opencv_caffe.DummyDataParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const DummyDataParameter& default_instance() {
    return *internal_default_instance();
  }",10342.0,10344.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,DummyDataParameter
1180,134877,internal_default_instance,1,opencv_caffe.DummyDataParameter.internal_default_instance,DummyDataParameter opencv_caffe.DummyDataParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const DummyDataParameter* internal_default_instance() {
    return reinterpret_cast<const DummyDataParameter*>(
               &_DummyDataParameter_default_instance_);
  }",10345.0,10348.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,DummyDataParameter
1181,298722,ByteSizeLong,1,opencv_tensorflow.TensorShapeProto_Dim.ByteSizeLong,size_t opencv_tensorflow.TensorShapeProto_Dim.ByteSizeLong (),misc\tensorflow\tensor_shape.pb.cc,"size_t TensorShapeProto_Dim::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_tensorflow.TensorShapeProto.Dim)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 size = 1;
  if (this->_internal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}",250.0,271.0,1.0,1.0,22.0,20,9,13,6,0,1,3,3,0,0,,0,1,0,0,0,size_t
1182,364264,current,3,cv.dnn.cuda4dnn.csl.WorkspaceAllocator.current,,src\cuda4dnn\csl\workspace.hpp,current,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1183,364265,bytes_remaining,3,cv.dnn.cuda4dnn.csl.WorkspaceAllocator.bytes_remaining,,src\cuda4dnn\csl\workspace.hpp,bytes_remaining,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1184,69359,SetCachedSize,1,opencv_caffe.LogParameter.SetCachedSize,void opencv_caffe.LogParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void LogParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",22519.0,22521.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
1185,85745,GetMetadata,1,opencv_caffe.TileParameter.GetMetadata,Metadata opencv_caffe.TileParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata TileParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[60]);
}",27637.0,27641.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
1186,371996,forward,1,cv.dnn.cuda4dnn.InstanceNormOp.forward,"void cv.dnn.cuda4dnn.InstanceNormOp.forward (ANY,ANY,ANY)",src\cuda4dnn\primitives\instance_norm.hpp,"void forward(const std::vector<cv::Ptr<BackendWrapper>>& inputs,
                     const std::vector<cv::Ptr<BackendWrapper>>& outputs,
                     csl::Workspace& workspace) override {
            auto input_wrapper = inputs[0].dynamicCast<wrapper_type>();
            auto scale_wrapper = inputs[1].dynamicCast<wrapper_type>();
            auto bias_wrapper = inputs[2].dynamicCast<wrapper_type>();

            auto input = input_wrapper->getView();
            auto scale = scale_wrapper->getView();
            auto bias = bias_wrapper->getView();

            auto output_wrapper = outputs[0].dynamicCast<wrapper_type>();
            auto output = output_wrapper->getSpan();

            auto C = input.get_axis_size(1);
            auto loops = input.size_range(0, 2);
            auto norm_size = input.size_range(2, input.rank());
            if (norm_size == 1) {
                kernels::fill<T>(stream, output, 0.f);
                return;
            } else {
           ...",39.0,72.0,9.0,9.0,34.0,29,5,27,15,0,1,2,2,0,0,,0,1,6,3,3,void
1187,315128,fbb_,3,opencv_tflite.PowOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1188,69369,Clear,1,opencv_caffe.LogParameter.Clear,void opencv_caffe.LogParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void LogParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.LogParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    shift_ = 0;
    base_ = -1;
    scale_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",22523.0,22537.0,1.0,1.0,15.0,11,6,10,6,0,5,2,2,0,0,,0,5,0,0,0,void
1189,315130,PowOptionsBuilder,1,opencv_tflite.PowOptionsBuilder.PowOptionsBuilder,ANY opencv_tflite.PowOptionsBuilder.PowOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit PowOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",6225.0,6228.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1190,315129,start_,3,opencv_tflite.PowOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1191,118526,GetCachedSize,1,opencv_caffe.NetParameter.GetCachedSize,int opencv_caffe.NetParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },3568.0,3568.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
1192,20225,SharedCtor,1,opencv_caffe.SolverParameter.SharedCtor,void opencv_caffe.SolverParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void SolverParameter::SharedCtor() {
train_net_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  train_net_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
lr_policy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  lr_policy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
snapshot_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  snapshot_prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
net_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::in...",8272.0,8306.0,1.0,1.0,35.0,48,9,29,21,0,21,1,1,0,0,,0,21,0,0,0,void
1193,85765,set_has_threshold,1,opencv_caffe._Internal.set_has_threshold,void opencv_caffe._Internal.set_has_threshold (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }",27648.0,27650.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
1194,315141,Finish,1,opencv_tflite.PowOptionsBuilder.Finish,Offset<PowOptions> opencv_tflite.PowOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<PowOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PowOptions>(end);
    return o;
  }",6229.0,6233.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<PowOptions>
1195,69408,_InternalParse,1,opencv_caffe.LogParameter._InternalParse,"const char* opencv_caffe.LogParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* LogParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float base = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_base(&has_bits);
          base_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float scale = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_scale(&has_bits);
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
   ...",22539.0,22595.0,1.0,6.0,57.0,49,14,52,13,0,7,13,15,0,3,,0,4,4,2,2,const char*
1196,233251,InternalSwap,1,opencv_onnx.GraphProto.InternalSwap,void opencv_onnx.GraphProto.InternalSwap (GraphProto*),misc\onnx\opencv-onnx.pb.cc,"void GraphProto::InternalSwap(GraphProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  node_.InternalSwap(&other->node_);
  initializer_.InternalSwap(&other->initializer_);
  input_.InternalSwap(&other->input_);
  output_.InternalSwap(&other->output_);
  value_info_.InternalSwap(&other->value_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &doc_string_, lhs_arena,
      &other->doc_string_, rhs_arena
  );
}",3529.0,3550.0,1.0,1.0,22.0,42,5,35,15,0,16,1,1,0,0,,0,16,2,1,1,void
1197,364323,empty,1,cv.dnn.cuda4dnn.cxx_utils.resizable_static_array.empty,bool cv.dnn.cuda4dnn.cxx_utils.resizable_static_array.empty (),src\cuda4dnn\cxx_utils\resizable_static_array.hpp,bool empty() const noexcept { return static_cast<bool>(size_); },35.0,35.0,9.0,72.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,bool
1198,364331,size,1,cv.dnn.cuda4dnn.cxx_utils.resizable_static_array.size,size_type cv.dnn.cuda4dnn.cxx_utils.resizable_static_array.size (),src\cuda4dnn\cxx_utils\resizable_static_array.hpp,size_type size() const noexcept { return size_; },36.0,36.0,9.0,57.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,size_type
1199,315181,fbb_,3,opencv_tflite.FakeQuantOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
1200,315182,start_,3,opencv_tflite.FakeQuantOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1201,315183,add_min,1,opencv_tflite.FakeQuantOptionsBuilder.add_min,void opencv_tflite.FakeQuantOptionsBuilder.add_min (float),misc\tflite\schema_generated.hpp,"void add_min(float min) {
    fbb_.AddElement<float>(FakeQuantOptions::VT_MIN, min, 0.0f);
  }",6276.0,6278.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
1202,85810,SharedCtor,1,opencv_caffe.ThresholdParameter.SharedCtor,void opencv_caffe.ThresholdParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void ThresholdParameter::SharedCtor() {
threshold_ = 0;
}",27670.0,27672.0,1.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,void
1203,364343,resize,1,cv.dnn.cuda4dnn.cxx_utils.resizable_static_array.resize,void cv.dnn.cuda4dnn.cxx_utils.resizable_static_array.resize (size_type),src\cuda4dnn\cxx_utils\resizable_static_array.hpp,"void resize(size_type sz) noexcept {
            assert(sz <= capacity());
            size_ = sz;
        }",39.0,42.0,9.0,9.0,4.0,2,2,3,2,0,1,1,1,0,0,,0,1,2,1,1,void
1204,315197,add_max,1,opencv_tflite.FakeQuantOptionsBuilder.add_max,void opencv_tflite.FakeQuantOptionsBuilder.add_max (float),misc\tflite\schema_generated.hpp,"void add_max(float max) {
    fbb_.AddElement<float>(FakeQuantOptions::VT_MAX, max, 0.0f);
  }",6279.0,6281.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
1205,364355,clear,1,cv.dnn.cuda4dnn.cxx_utils.resizable_static_array.clear,void cv.dnn.cuda4dnn.cxx_utils.resizable_static_array.clear (),src\cuda4dnn\cxx_utils\resizable_static_array.hpp,void clear() noexcept { size_ = 0; },44.0,44.0,9.0,44.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,void
1206,315211,add_num_bits,1,opencv_tflite.FakeQuantOptionsBuilder.add_num_bits,void opencv_tflite.FakeQuantOptionsBuilder.add_num_bits (int32_t),misc\tflite\schema_generated.hpp,"void add_num_bits(int32_t num_bits) {
    fbb_.AddElement<int32_t>(FakeQuantOptions::VT_NUM_BITS, num_bits, 0);
  }",6282.0,6284.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
1207,135002,GetCachedSize,1,opencv_caffe.DummyDataParameter.GetCachedSize,int opencv_caffe.DummyDataParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },10393.0,10393.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
1208,315229,add_narrow_range,1,opencv_tflite.FakeQuantOptionsBuilder.add_narrow_range,void opencv_tflite.FakeQuantOptionsBuilder.add_narrow_range (bool),misc\tflite\schema_generated.hpp,"void add_narrow_range(bool narrow_range) {
    fbb_.AddElement<uint8_t>(FakeQuantOptions::VT_NARROW_RANGE, static_cast<uint8_t>(narrow_range), 0);
  }",6285.0,6287.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
1209,364382,begin,1,cv.dnn.cuda4dnn.cxx_utils.resizable_static_array.begin,iterator cv.dnn.cuda4dnn.cxx_utils.resizable_static_array.begin (),src\cuda4dnn\cxx_utils\resizable_static_array.hpp,const_iterator begin() const noexcept { return arr.cbegin(); },55.0,55.0,9.0,70.0,1.0,1,1,2,2,0,1,1,1,0,0,,0,1,0,0,0,const_iterator
1210,85859,SetCachedSize,1,opencv_caffe.ThresholdParameter.SetCachedSize,void opencv_caffe.ThresholdParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void ThresholdParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",27691.0,27693.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
1211,364392,end,1,cv.dnn.cuda4dnn.cxx_utils.resizable_static_array.end,iterator cv.dnn.cuda4dnn.cxx_utils.resizable_static_array.end (),src\cuda4dnn\cxx_utils\resizable_static_array.hpp,const_iterator end() const noexcept { return arr.cbegin() + size(); },56.0,56.0,9.0,77.0,1.0,2,2,2,2,0,1,1,1,0,0,,0,1,0,0,0,const_iterator
1212,85869,Clear,1,opencv_caffe.ThresholdParameter.Clear,void opencv_caffe.ThresholdParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void ThresholdParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.ThresholdParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  threshold_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",27695.0,27704.0,1.0,1.0,10.0,5,3,5,4,0,2,1,1,0,0,,0,2,0,0,0,void
1213,315249,FakeQuantOptionsBuilder,1,opencv_tflite.FakeQuantOptionsBuilder.FakeQuantOptionsBuilder,ANY opencv_tflite.FakeQuantOptionsBuilder.FakeQuantOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit FakeQuantOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",6288.0,6291.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1214,315260,Finish,1,opencv_tflite.FakeQuantOptionsBuilder.Finish,Offset<FakeQuantOptions> opencv_tflite.FakeQuantOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<FakeQuantOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FakeQuantOptions>(end);
    return o;
  }",6292.0,6296.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<FakeQuantOptions>
1215,85891,_InternalParse,1,opencv_caffe.ThresholdParameter._InternalParse,"const char* opencv_caffe.ThresholdParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* ThresholdParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float threshold = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_threshold(&has_bits);
          threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_u...",27706.0,27744.0,1.0,6.0,39.0,31,14,34,11,0,3,9,9,0,1,,0,2,4,2,2,const char*
1216,151428,_has_bits_,3,opencv_caffe.WindowDataParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
1217,151429,_cached_size_,3,opencv_caffe.WindowDataParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1218,151430,source_,3,opencv_caffe.WindowDataParameter.source_,,misc\caffe\opencv-caffe.pb.hpp,source_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1219,151431,mean_file_,3,opencv_caffe.WindowDataParameter.mean_file_,,misc\caffe\opencv-caffe.pb.hpp,mean_file_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1220,364424,cbegin,1,cv.dnn.cuda4dnn.cxx_utils.resizable_static_array.cbegin,const_iterator cv.dnn.cuda4dnn.cxx_utils.resizable_static_array.cbegin (),src\cuda4dnn\cxx_utils\resizable_static_array.hpp,const_iterator cbegin() const noexcept { return arr.cbegin(); },58.0,58.0,9.0,71.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,const_iterator
1221,151433,crop_mode_,3,opencv_caffe.WindowDataParameter.crop_mode_,,misc\caffe\opencv-caffe.pb.hpp,crop_mode_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1222,151434,root_folder_,3,opencv_caffe.WindowDataParameter.root_folder_,,misc\caffe\opencv-caffe.pb.hpp,root_folder_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1223,151435,batch_size_,3,opencv_caffe.WindowDataParameter.batch_size_,,misc\caffe\opencv-caffe.pb.hpp,batch_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
1224,151436,crop_size_,3,opencv_caffe.WindowDataParameter.crop_size_,,misc\caffe\opencv-caffe.pb.hpp,crop_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1225,151437,mirror_,3,opencv_caffe.WindowDataParameter.mirror_,,misc\caffe\opencv-caffe.pb.hpp,mirror_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1226,151438,cache_images_,3,opencv_caffe.WindowDataParameter.cache_images_,,misc\caffe\opencv-caffe.pb.hpp,cache_images_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1227,151439,context_pad_,3,opencv_caffe.WindowDataParameter.context_pad_,,misc\caffe\opencv-caffe.pb.hpp,context_pad_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
1228,20368,SharedDtor,1,opencv_caffe.SolverParameter.SharedDtor,void opencv_caffe.SolverParameter.SharedDtor (),misc\caffe\opencv-caffe.pb.cc,"inline void SolverParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  train_net_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lr_policy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snapshot_prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  net_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regularization_type_.DestroyNoArena(nullptr);
  type_.DestroyNoArena(nullptr);
  if (this != internal_default_instance()) delete train_net_param_;
  if (this != internal_default_instance()) delete net_param_;
  if (this != internal_default_instance()) delete train_state_;
}",8315.0,8326.0,1.0,1.0,12.0,25,5,17,11,0,12,4,4,3,0,,0,12,0,0,0,void
1229,151441,fg_threshold_,3,opencv_caffe.WindowDataParameter.fg_threshold_,,misc\caffe\opencv-caffe.pb.hpp,fg_threshold_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
1230,151440,scale_,3,opencv_caffe.WindowDataParameter.scale_,,misc\caffe\opencv-caffe.pb.hpp,scale_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
1231,151443,fg_fraction_,3,opencv_caffe.WindowDataParameter.fg_fraction_,,misc\caffe\opencv-caffe.pb.hpp,fg_fraction_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
1232,298900,InternalSwap,1,opencv_tensorflow.TensorShapeProto_Dim.InternalSwap,void opencv_tensorflow.TensorShapeProto_Dim.InternalSwap (TensorShapeProto_Dim*),misc\tensorflow\tensor_shape.pb.cc,"void TensorShapeProto_Dim::InternalSwap(TensorShapeProto_Dim* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(size_, other->size_);
}",312.0,323.0,1.0,1.0,12.0,16,4,16,9,0,4,1,1,0,0,,0,4,2,1,1,void
1233,151442,bg_threshold_,3,opencv_caffe.WindowDataParameter.bg_threshold_,,misc\caffe\opencv-caffe.pb.hpp,bg_threshold_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
1234,364433,cend,1,cv.dnn.cuda4dnn.cxx_utils.resizable_static_array.cend,const_iterator cv.dnn.cuda4dnn.cxx_utils.resizable_static_array.cend (),src\cuda4dnn\cxx_utils\resizable_static_array.hpp,const_iterator cend() const noexcept { return arr.cbegin() + size(); },59.0,59.0,9.0,78.0,1.0,2,2,1,1,0,1,1,1,0,0,,0,1,0,0,0,const_iterator
1235,233370,GetMetadata,1,opencv_onnx.GraphProto.GetMetadata,Metadata opencv_onnx.GraphProto.GetMetadata (),misc\onnx\opencv-onnx.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata GraphProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2donnx_2eproto_getter, &descriptor_table_opencv_2donnx_2eproto_once,
      file_level_metadata_opencv_2donnx_2eproto[5]);
}",3552.0,3556.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
1236,364444,rbegin,1,cv.dnn.cuda4dnn.cxx_utils.resizable_static_array.rbegin,reverse_iterator cv.dnn.cuda4dnn.cxx_utils.resizable_static_array.rbegin (),src\cuda4dnn\cxx_utils\resizable_static_array.hpp,const_reverse_iterator rbegin() const noexcept { return arr.cbegin()+ size(); },64.0,64.0,9.0,87.0,1.0,2,2,2,2,0,1,1,1,0,0,,0,1,0,0,0,const_reverse_iterator
1237,364456,rend,1,cv.dnn.cuda4dnn.cxx_utils.resizable_static_array.rend,reverse_iterator cv.dnn.cuda4dnn.cxx_utils.resizable_static_array.rend (),src\cuda4dnn\cxx_utils\resizable_static_array.hpp,const_reverse_iterator rend() const noexcept { return arr.cbegin(); },65.0,65.0,9.0,77.0,1.0,1,1,2,2,0,1,1,1,0,0,,0,1,0,0,0,const_reverse_iterator
1238,233390,set_has_begin,1,opencv_onnx._Internal.set_has_begin,void opencv_onnx._Internal.set_has_begin (HasBits*),misc\onnx\opencv-onnx.pb.cc,"static void set_has_begin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }",3563.0,3565.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
1239,233401,set_has_end,1,opencv_onnx._Internal.set_has_end,void opencv_onnx._Internal.set_has_end (HasBits*),misc\onnx\opencv-onnx.pb.cc,"static void set_has_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }",3566.0,3568.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
1240,315324,fbb_,3,opencv_tflite.PackOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
1241,315325,start_,3,opencv_tflite.PackOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1242,315326,add_values_count,1,opencv_tflite.PackOptionsBuilder.add_values_count,void opencv_tflite.PackOptionsBuilder.add_values_count (int32_t),misc\tflite\schema_generated.hpp,"void add_values_count(int32_t values_count) {
    fbb_.AddElement<int32_t>(PackOptions::VT_VALUES_COUNT, values_count, 0);
  }",6337.0,6339.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
1243,364486,crbegin,1,cv.dnn.cuda4dnn.cxx_utils.resizable_static_array.crbegin,const_reverse_iterator cv.dnn.cuda4dnn.cxx_utils.resizable_static_array.crbegin (),src\cuda4dnn\cxx_utils\resizable_static_array.hpp,const_reverse_iterator crbegin() const noexcept { return arr.cbegin() + size(); },67.0,67.0,9.0,89.0,1.0,2,2,1,1,0,1,1,1,0,0,,0,1,0,0,0,const_reverse_iterator
1244,298952,GetMetadata,1,opencv_tensorflow.TensorShapeProto_Dim.GetMetadata,Metadata opencv_tensorflow.TensorShapeProto_Dim.GetMetadata (),misc\tensorflow\tensor_shape.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata TensorShapeProto_Dim::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tensor_5fshape_2eproto_getter, &descriptor_table_tensor_5fshape_2eproto_once,
      file_level_metadata_tensor_5fshape_2eproto[0]);
}",325.0,329.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
1245,315344,add_axis,1,opencv_tflite.PackOptionsBuilder.add_axis,void opencv_tflite.PackOptionsBuilder.add_axis (int32_t),misc\tflite\schema_generated.hpp,"void add_axis(int32_t axis) {
    fbb_.AddElement<int32_t>(PackOptions::VT_AXIS, axis, 0);
  }",6340.0,6342.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
1246,364497,crend,1,cv.dnn.cuda4dnn.cxx_utils.resizable_static_array.crend,const_reverse_iterator cv.dnn.cuda4dnn.cxx_utils.resizable_static_array.crend (),src\cuda4dnn\cxx_utils\resizable_static_array.hpp,const_reverse_iterator crend() const noexcept { return arr.cbegin(); },68.0,68.0,9.0,78.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,const_reverse_iterator
1247,364506,operator [],1,cv.dnn.cuda4dnn.cxx_utils.resizable_static_array.operator [],reference cv.dnn.cuda4dnn.cxx_utils.resizable_static_array.operator [] (size_type),src\cuda4dnn\cxx_utils\resizable_static_array.hpp,"const_reference operator[](size_type pos) const {
            assert(pos < size());
            return arr[pos];
        }",75.0,78.0,9.0,9.0,4.0,2,2,3,2,0,1,1,1,0,0,,0,1,2,1,1,const_reference
1248,315362,PackOptionsBuilder,1,opencv_tflite.PackOptionsBuilder.PackOptionsBuilder,ANY opencv_tflite.PackOptionsBuilder.PackOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit PackOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",6343.0,6346.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1249,282595,InternalSwap,1,opencv_tensorflow.OpDef_ArgDef.InternalSwap,void opencv_tensorflow.OpDef_ArgDef.InternalSwap (OpDef_ArgDef*),misc\tensorflow\op_def.pb.cc,"void OpDef_ArgDef::InternalSwap(OpDef_ArgDef* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_attr_, lhs_arena,
      &other->type_attr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInit...",649.0,685.0,1.0,1.0,37.0,66,12,59,15,0,15,1,1,0,0,,0,15,2,1,1,void
1250,69605,_InternalSerialize,1,opencv_caffe.LogParameter._InternalSerialize,"uint8_t opencv_caffe.LogParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* LogParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.LogParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float base = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_base(), target);
  }

  // optional float scale = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_scale(), target);
  }

  // optional float shift = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Wr...",22597.0,22628.0,1.0,1.0,32.0,39,8,43,10,0,1,5,5,0,0,,0,1,4,2,2,uint8_t
1251,315373,Finish,1,opencv_tflite.PackOptionsBuilder.Finish,Offset<PackOptions> opencv_tflite.PackOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<PackOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PackOptions>(end);
    return o;
  }",6347.0,6351.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<PackOptions>
1252,134326,output_directory_,3,opencv_caffe.SaveOutputParameter.output_directory_,,misc\caffe\opencv-caffe.pb.hpp,output_directory_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1253,20470,SetCachedSize,1,opencv_caffe.SolverParameter.SetCachedSize,void opencv_caffe.SolverParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void SolverParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",8334.0,8336.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
1254,233465,SharedCtor,1,opencv_onnx.TensorProto_Segment.SharedCtor,void opencv_onnx.TensorProto_Segment.SharedCtor (),misc\onnx\opencv-onnx.pb.cc,"inline void TensorProto_Segment::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&begin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&begin_)) + sizeof(end_));
}",3590.0,3595.0,1.0,1.0,6.0,16,6,4,2,0,4,1,1,0,0,,0,4,0,0,0,void
1255,151549,descriptor,1,opencv_caffe.SPPParameter.descriptor,Descriptor opencv_caffe.SPPParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",17430.0,17432.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
1256,299005,SharedCtor,1,opencv_tensorflow.TensorShapeProto.SharedCtor,void opencv_tensorflow.TensorShapeProto.SharedCtor (),misc\tensorflow\tensor_shape.pb.cc,"inline void TensorShapeProto::SharedCtor() {
unknown_rank_ = false;
}",355.0,357.0,1.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,void
1257,20480,Clear,1,opencv_caffe.SolverParameter.Clear,void opencv_caffe.SolverParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void SolverParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.SolverParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  test_net_.Clear();
  test_iter_.Clear();
  test_net_param_.Clear();
  test_state_.Clear();
  stepvalue_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      train_net_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      lr_policy_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      snapshot_prefix_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      net_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      regularization_type_.ClearToDefault(::opencv_caffe::SolverParameter::_i_give_permission_to_break_this_code_default_regularization_type_, GetArenaForAllocation());
   ...",8338.0,8410.0,1.0,1.0,73.0,77,13,62,34,0,39,15,23,0,0,,0,39,0,0,0,void
1258,151555,GetDescriptor,1,opencv_caffe.SPPParameter.GetDescriptor,Descriptor opencv_caffe.SPPParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",17433.0,17435.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
1259,86022,_InternalSerialize,1,opencv_caffe.ThresholdParameter._InternalSerialize,"uint8_t opencv_caffe.ThresholdParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* ThresholdParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.ThresholdParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float threshold = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_threshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencv_caffe.ThresholdParam...",27746.0,27765.0,1.0,1.0,20.0,23,8,25,10,0,1,3,3,0,0,,0,1,4,2,2,uint8_t
1260,151566,GetReflection,1,opencv_caffe.SPPParameter.GetReflection,Reflection opencv_caffe.SPPParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",17436.0,17438.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
1261,151577,default_instance,1,opencv_caffe.SPPParameter.default_instance,SPPParameter opencv_caffe.SPPParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const SPPParameter& default_instance() {
    return *internal_default_instance();
  }",17439.0,17441.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,SPPParameter
1262,4126,descriptor_table_opencv_2dcaffe_2eproto_once,2,misc\caffe\opencv-caffe.pb.cc.descriptor_table_opencv_2dcaffe_2eproto_once,,misc\caffe\opencv-caffe.pb.cc,ANY descriptor_table_opencv_2dcaffe_2eproto_once,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,71,0,1,1,0,0,,0,0,0,0,0,
1263,4127,descriptor_table_opencv_2dcaffe_2eproto,2,misc\caffe\opencv-caffe.pb.cc.descriptor_table_opencv_2dcaffe_2eproto,,misc\caffe\opencv-caffe.pb.cc,ANY descriptor_table_opencv_2dcaffe_2eproto,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,28,0,1,1,0,0,,0,0,0,0,0,
1264,151584,internal_default_instance,1,opencv_caffe.SPPParameter.internal_default_instance,SPPParameter opencv_caffe.SPPParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const SPPParameter* internal_default_instance() {
    return reinterpret_cast<const SPPParameter*>(
               &_SPPParameter_default_instance_);
  }",17442.0,17445.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,SPPParameter
1265,315425,fbb_,3,opencv_tflite.LogicalOrOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1266,315426,start_,3,opencv_tflite.LogicalOrOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1267,315427,LogicalOrOptionsBuilder,1,opencv_tflite.LogicalOrOptionsBuilder.LogicalOrOptionsBuilder,ANY opencv_tflite.LogicalOrOptionsBuilder.LogicalOrOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit LogicalOrOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",6376.0,6379.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1268,299054,SetCachedSize,1,opencv_tensorflow.TensorShapeProto.SetCachedSize,void opencv_tensorflow.TensorShapeProto.SetCachedSize (int),misc\tensorflow\tensor_shape.pb.cc,"void TensorShapeProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",376.0,378.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
1269,315438,Finish,1,opencv_tflite.LogicalOrOptionsBuilder.Finish,Offset<LogicalOrOptions> opencv_tflite.LogicalOrOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<LogicalOrOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LogicalOrOptions>(end);
    return o;
  }",6380.0,6384.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<LogicalOrOptions>
1270,53297,ByteSizeLong,1,opencv_caffe.DataParameter.ByteSizeLong,size_t opencv_caffe.DataParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t DataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.DataParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string source = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source());
    }

    // optional string mean_file = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mean_file());
    }

    // optional uint32 batch_size = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_batch_size());
    }

    ...",17542.0,17611.0,1.0,1.0,70.0,62,9,50,7,0,2,13,23,0,0,,0,2,0,0,0,size_t
1271,4150,descriptor_table_opencv_2dcaffe_2eproto_getter,1,descriptor_table_opencv_2dcaffe_2eproto_getter,DescriptorTable descriptor_table_opencv_2dcaffe_2eproto_getter (),misc\caffe\opencv-caffe.pb.cc,"const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_opencv_2dcaffe_2eproto_getter() {
  return &descriptor_table_opencv_2dcaffe_2eproto;
}",3352.0,3354.0,25.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,DescriptorTable
1272,299064,Clear,1,opencv_tensorflow.TensorShapeProto.Clear,void opencv_tensorflow.TensorShapeProto.Clear (),misc\tensorflow\tensor_shape.pb.cc,"void TensorShapeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_tensorflow.TensorShapeProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dim_.Clear();
  unknown_rank_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",380.0,389.0,1.0,1.0,10.0,5,3,5,4,0,2,1,1,0,0,,0,2,0,0,0,void
1273,364606,data,1,cv.dnn.cuda4dnn.cxx_utils.resizable_static_array.data,pointer cv.dnn.cuda4dnn.cxx_utils.resizable_static_array.data (),src\cuda4dnn\cxx_utils\resizable_static_array.hpp,const_pointer data() const noexcept { return arr.data(); },101.0,101.0,9.0,66.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,const_pointer
1274,4163,PriorBoxParameter_CodeType_descriptor,1,opencv_caffe.PriorBoxParameter_CodeType_descriptor,EnumDescriptor opencv_caffe.PriorBoxParameter_CodeType_descriptor (),misc\caffe\opencv-caffe.pb.cc,"const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PriorBoxParameter_CodeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_opencv_2dcaffe_2eproto);
  return file_level_enum_descriptors_opencv_2dcaffe_2eproto[0];
}",3359.0,3362.0,1.0,1.0,4.0,4,3,4,4,1,2,1,1,0,0,,0,2,0,0,0,EnumDescriptor
1275,233544,SetCachedSize,1,opencv_onnx.TensorProto_Segment.SetCachedSize,void opencv_onnx.TensorProto_Segment.SetCachedSize (int),misc\onnx\opencv-onnx.pb.cc,"void TensorProto_Segment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",3614.0,3616.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
1276,299086,_InternalParse,1,opencv_tensorflow.TensorShapeProto._InternalParse,"const char* opencv_tensorflow.TensorShapeProto._InternalParse (char*,ANY*)",misc\tensorflow\tensor_shape.pb.cc,"const char* TensorShapeProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .opencv_tensorflow.TensorShapeProto.Dim dim = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dim(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool unknown_rank = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          unknown_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
 ...",391.0,439.0,1.0,12.0,49.0,39,15,42,7,0,1,14,21,0,0,,0,1,4,2,2,const char*
1277,364624,size_,3,cv.dnn.cuda4dnn.cxx_utils.resizable_static_array.size_,,src\cuda4dnn\cxx_utils\resizable_static_array.hpp,size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
1278,364625,arr,3,cv.dnn.cuda4dnn.cxx_utils.resizable_static_array.arr,,src\cuda4dnn\cxx_utils\resizable_static_array.hpp,arr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
1279,233554,Clear,1,opencv_onnx.TensorProto_Segment.Clear,void opencv_onnx.TensorProto_Segment.Clear (),misc\onnx\opencv-onnx.pb.cc,"void TensorProto_Segment::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_onnx.TensorProto.Segment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&begin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&end_) -
        reinterpret_cast<char*>(&begin_)) + sizeof(end_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",3618.0,3632.0,1.0,1.0,15.0,17,9,11,5,0,6,2,2,0,0,,0,6,0,0,0,void
1280,4179,PriorBoxParameter_CodeType_IsValid,1,opencv_caffe.PriorBoxParameter_CodeType_IsValid,bool opencv_caffe.PriorBoxParameter_CodeType_IsValid (int),misc\caffe\opencv-caffe.pb.cc,"bool PriorBoxParameter_CodeType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}",3363.0,3371.0,1.0,1.0,9.0,0,0,1,1,1,0,2,2,0,0,,0,0,2,1,1,bool
1281,315478,fbb_,3,opencv_tflite.OneHotOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1282,315479,start_,3,opencv_tflite.OneHotOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1283,86102,ByteSizeLong,1,opencv_caffe.ThresholdParameter.ByteSizeLong,size_t opencv_caffe.ThresholdParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t ThresholdParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.ThresholdParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float threshold = 1 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}",27767.0,27782.0,1.0,1.0,16.0,9,7,9,4,0,2,2,2,0,0,,0,2,0,0,0,size_t
1284,315480,add_axis,1,opencv_tflite.OneHotOptionsBuilder.add_axis,void opencv_tflite.OneHotOptionsBuilder.add_axis (int32_t),misc\tflite\schema_generated.hpp,"void add_axis(int32_t axis) {
    fbb_.AddElement<int32_t>(OneHotOptions::VT_AXIS, axis, 0);
  }",6412.0,6414.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
1285,4201,FillerParameter_VarianceNorm_descriptor,1,opencv_caffe.FillerParameter_VarianceNorm_descriptor,EnumDescriptor opencv_caffe.FillerParameter_VarianceNorm_descriptor (),misc\caffe\opencv-caffe.pb.cc,"const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FillerParameter_VarianceNorm_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_opencv_2dcaffe_2eproto);
  return file_level_enum_descriptors_opencv_2dcaffe_2eproto[1];
}",3380.0,3383.0,1.0,1.0,4.0,4,3,4,4,1,2,1,1,0,0,,0,2,0,0,0,EnumDescriptor
1286,315498,OneHotOptionsBuilder,1,opencv_tflite.OneHotOptionsBuilder.OneHotOptionsBuilder,ANY opencv_tflite.OneHotOptionsBuilder.OneHotOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit OneHotOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",6415.0,6418.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1287,69741,ByteSizeLong,1,opencv_caffe.LogParameter.ByteSizeLong,size_t opencv_caffe.LogParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t LogParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.LogParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float shift = 3 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float base = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float scale = 2 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}",22630.0,22657.0,1.0,1.0,28.0,16,7,14,4,0,2,5,8,0,0,,0,2,0,0,0,size_t
1288,315509,Finish,1,opencv_tflite.OneHotOptionsBuilder.Finish,Offset<OneHotOptions> opencv_tflite.OneHotOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<OneHotOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<OneHotOptions>(end);
    return o;
  }",6419.0,6423.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<OneHotOptions>
1289,4217,FillerParameter_VarianceNorm_IsValid,1,opencv_caffe.FillerParameter_VarianceNorm_IsValid,bool opencv_caffe.FillerParameter_VarianceNorm_IsValid (int),misc\caffe\opencv-caffe.pb.cc,"bool FillerParameter_VarianceNorm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}",3384.0,3393.0,1.0,1.0,10.0,0,0,1,1,1,0,2,2,0,0,,0,0,2,1,1,bool
1290,233604,_InternalParse,1,opencv_onnx.TensorProto_Segment._InternalParse,"const char* opencv_onnx.TensorProto_Segment._InternalParse (char*,ANY*)",misc\onnx\opencv-onnx.pb.cc,"const char* TensorProto_Segment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 begin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_begin(&has_bits);
          begin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_end(&has_bits);
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
 ...",3634.0,3681.0,1.0,10.0,48.0,40,12,43,11,0,5,11,12,0,2,,0,3,4,2,2,const char*
1291,282765,GetMetadata,1,opencv_tensorflow.OpDef_ArgDef.GetMetadata,Metadata opencv_tensorflow.OpDef_ArgDef.GetMetadata (),misc\tensorflow\op_def.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata OpDef_ArgDef::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_op_5fdef_2eproto_getter, &descriptor_table_op_5fdef_2eproto_once,
      file_level_metadata_op_5fdef_2eproto[0]);
}",687.0,691.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
1292,4242,SolverParameter_SnapshotFormat_descriptor,1,opencv_caffe.SolverParameter_SnapshotFormat_descriptor,EnumDescriptor opencv_caffe.SolverParameter_SnapshotFormat_descriptor (),misc\caffe\opencv-caffe.pb.cc,"const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SolverParameter_SnapshotFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_opencv_2dcaffe_2eproto);
  return file_level_enum_descriptors_opencv_2dcaffe_2eproto[2];
}",3403.0,3406.0,1.0,1.0,4.0,4,3,4,4,1,2,1,1,0,0,,0,2,0,0,0,EnumDescriptor
1293,266387,_internal_set_s,1,opencv_tensorflow.AttrValue._internal_set_s,void opencv_tensorflow.AttrValue._internal_set_s (ANY),misc\tensorflow\attr_value.pb.hpp,"inline void AttrValue::_internal_set_s(const std::string& value) {
  if (!_internal_has_s()) {
    clear_value();
    set_has_s();
    value_.s_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.s_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}",1319.0,1326.0,1.0,1.0,8.0,9,4,5,4,0,2,2,2,1,0,,0,1,2,1,1,void
1294,86171,MergeFrom,1,opencv_caffe.ThresholdParameter.MergeFrom,void opencv_caffe.ThresholdParameter.MergeFrom (ThresholdParameter),misc\caffe\opencv-caffe.pb.cc,"void ThresholdParameter::MergeFrom(const ThresholdParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.ThresholdParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_threshold()) {
    _internal_set_threshold(from._internal_threshold());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",27797.0,27807.0,1.0,1.0,11.0,10,6,8,4,2,0,2,2,0,0,,0,0,2,1,1,void
1295,151709,GetCachedSize,1,opencv_caffe.SPPParameter.GetCachedSize,int opencv_caffe.SPPParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },17490.0,17490.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
1296,102558,InternalSwap,1,opencv_caffe.V0LayerParameter.InternalSwap,void opencv_caffe.V0LayerParameter.InternalSwap (V0LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"void V0LayerParameter::InternalSwap(V0LayerParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  blobs_.InternalSwap(&other->blobs_);
  blobs_lr_.InternalSwap(&other->blobs_lr_);
  weight_decay_.InternalSwap(&other->weight_decay_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringA...",32230.0,32284.0,1.0,1.0,55.0,91,13,93,32,0,51,1,1,0,0,,0,51,2,1,1,void
1297,4258,SolverParameter_SnapshotFormat_IsValid,1,opencv_caffe.SolverParameter_SnapshotFormat_IsValid,bool opencv_caffe.SolverParameter_SnapshotFormat_IsValid (int),misc\caffe\opencv-caffe.pb.cc,"bool SolverParameter_SnapshotFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}",3407.0,3415.0,1.0,1.0,9.0,0,0,1,1,1,0,2,2,0,0,,0,0,2,1,1,bool
1298,315555,fbb_,3,opencv_tflite.AbsOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1299,315556,start_,3,opencv_tflite.AbsOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1300,315557,AbsOptionsBuilder,1,opencv_tflite.AbsOptionsBuilder.AbsOptionsBuilder,ANY opencv_tflite.AbsOptionsBuilder.AbsOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit AbsOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",6446.0,6449.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1301,282794,default_value,1,opencv_tensorflow.OpDef_AttrDef._Internal.default_value,AttrValue opencv_tensorflow.OpDef_AttrDef._Internal.default_value (OpDef_AttrDef*),misc\tensorflow\op_def.pb.cc,"const ::opencv_tensorflow::AttrValue&
OpDef_AttrDef::_Internal::default_value(const OpDef_AttrDef* msg) {
  return *msg->default_value_;
}",701.0,704.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,AttrValue
1302,430253,confThreshold,3,cv.dnn.TextDetectionModel_EAST_Impl.confThreshold,,src\model.cpp,confThreshold,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1303,430254,nmsThreshold,3,cv.dnn.TextDetectionModel_EAST_Impl.nmsThreshold,,src\model.cpp,nmsThreshold,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1304,315568,Finish,1,opencv_tflite.AbsOptionsBuilder.Finish,Offset<AbsOptions> opencv_tflite.AbsOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<AbsOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AbsOptions>(end);
    return o;
  }",6450.0,6454.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<AbsOptions>
1305,282804,allowed_values,1,opencv_tensorflow.OpDef_AttrDef._Internal.allowed_values,AttrValue opencv_tensorflow.OpDef_AttrDef._Internal.allowed_values (OpDef_AttrDef*),misc\tensorflow\op_def.pb.cc,"const ::opencv_tensorflow::AttrValue&
OpDef_AttrDef::_Internal::allowed_values(const OpDef_AttrDef* msg) {
  return *msg->allowed_values_;
}",705.0,708.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,AttrValue
1306,4280,SolverParameter_SolverMode_descriptor,1,opencv_caffe.SolverParameter_SolverMode_descriptor,EnumDescriptor opencv_caffe.SolverParameter_SolverMode_descriptor (),misc\caffe\opencv-caffe.pb.cc,"const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SolverParameter_SolverMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_opencv_2dcaffe_2eproto);
  return file_level_enum_descriptors_opencv_2dcaffe_2eproto[3];
}",3424.0,3427.0,1.0,1.0,4.0,4,3,4,4,1,2,1,1,0,0,,0,2,0,0,0,EnumDescriptor
1307,430268,setConfidenceThreshold,1,cv.dnn.TextDetectionModel_EAST_Impl.setConfidenceThreshold,void cv.dnn.TextDetectionModel_EAST_Impl.setConfidenceThreshold (float),src\model.cpp,void setConfidenceThreshold(float confThreshold_) { confThreshold = confThreshold_; },1134.0,1134.0,5.0,89.0,1.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
1308,282814,clear_default_value,1,opencv_tensorflow.OpDef_AttrDef.clear_default_value,void opencv_tensorflow.OpDef_AttrDef.clear_default_value (),misc\tensorflow\op_def.pb.cc,"void OpDef_AttrDef::clear_default_value() {
  if (GetArenaForAllocation() == nullptr && default_value_ != nullptr) {
    delete default_value_;
  }
  default_value_ = nullptr;
}",709.0,714.0,1.0,1.0,6.0,5,5,3,1,0,3,2,2,1,0,,0,3,0,0,0,void
1309,430276,getConfidenceThreshold,1,cv.dnn.TextDetectionModel_EAST_Impl.getConfidenceThreshold,float cv.dnn.TextDetectionModel_EAST_Impl.getConfidenceThreshold (),src\model.cpp,float getConfidenceThreshold() const { return confThreshold; },1135.0,1135.0,5.0,66.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,float
1310,4296,SolverParameter_SolverMode_IsValid,1,opencv_caffe.SolverParameter_SolverMode_IsValid,bool opencv_caffe.SolverParameter_SolverMode_IsValid (int),misc\caffe\opencv-caffe.pb.cc,"bool SolverParameter_SolverMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}",3428.0,3436.0,1.0,1.0,9.0,0,0,1,1,1,0,2,2,0,0,,0,0,2,1,1,bool
1311,430282,setNMSThreshold,1,cv.dnn.TextDetectionModel_EAST_Impl.setNMSThreshold,void cv.dnn.TextDetectionModel_EAST_Impl.setNMSThreshold (float),src\model.cpp,void setNMSThreshold(float nmsThreshold_) { nmsThreshold = nmsThreshold_; },1137.0,1137.0,5.0,79.0,1.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
1312,69835,MergeFrom,1,opencv_caffe.LogParameter.MergeFrom,void opencv_caffe.LogParameter.MergeFrom (LogParameter),misc\caffe\opencv-caffe.pb.cc,"void LogParameter::MergeFrom(const LogParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.LogParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      shift_ = from.shift_;
    }
    if (cached_has_bits & 0x00000002u) {
      base_ = from.base_;
    }
    if (cached_has_bits & 0x00000004u) {
      scale_ = from.scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",22672.0,22692.0,1.0,1.0,21.0,22,8,20,8,1,8,5,8,0,0,,0,8,2,1,1,void
1313,282832,clear_allowed_values,1,opencv_tensorflow.OpDef_AttrDef.clear_allowed_values,void opencv_tensorflow.OpDef_AttrDef.clear_allowed_values (),misc\tensorflow\op_def.pb.cc,"void OpDef_AttrDef::clear_allowed_values() {
  if (GetArenaForAllocation() == nullptr && allowed_values_ != nullptr) {
    delete allowed_values_;
  }
  allowed_values_ = nullptr;
}",715.0,720.0,1.0,1.0,6.0,5,5,3,1,0,3,2,2,1,0,,0,3,0,0,0,void
1314,430290,getNMSThreshold,1,cv.dnn.TextDetectionModel_EAST_Impl.getNMSThreshold,float cv.dnn.TextDetectionModel_EAST_Impl.getNMSThreshold (),src\model.cpp,float getNMSThreshold() const { return nmsThreshold; },1138.0,1138.0,5.0,58.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,float
1315,86230,InternalSwap,1,opencv_caffe.ThresholdParameter.InternalSwap,void opencv_caffe.ThresholdParameter.InternalSwap (ThresholdParameter*),misc\caffe\opencv-caffe.pb.cc,"void ThresholdParameter::InternalSwap(ThresholdParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(threshold_, other->threshold_);
}",27820.0,27825.0,1.0,1.0,6.0,7,4,6,4,0,4,1,1,0,0,,0,4,2,1,1,void
1316,315608,fbb_,3,opencv_tflite.HardSwishOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1317,315609,start_,3,opencv_tflite.HardSwishOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1318,315610,HardSwishOptionsBuilder,1,opencv_tflite.HardSwishOptionsBuilder.HardSwishOptionsBuilder,ANY opencv_tflite.HardSwishOptionsBuilder.HardSwishOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit HardSwishOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",6475.0,6478.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1319,4318,SolverParameter_SolverType_descriptor,1,opencv_caffe.SolverParameter_SolverType_descriptor,EnumDescriptor opencv_caffe.SolverParameter_SolverType_descriptor (),misc\caffe\opencv-caffe.pb.cc,"const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SolverParameter_SolverType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_opencv_2dcaffe_2eproto);
  return file_level_enum_descriptors_opencv_2dcaffe_2eproto[4];
}",3445.0,3448.0,1.0,1.0,4.0,4,3,4,4,1,2,1,1,0,0,,0,2,0,0,0,EnumDescriptor
1320,135396,data_filler_,3,opencv_caffe.DummyDataParameter.data_filler_,,misc\caffe\opencv-caffe.pb.hpp,data_filler_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
1321,135397,num_,3,opencv_caffe.DummyDataParameter.num_,,misc\caffe\opencv-caffe.pb.hpp,num_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
1322,135398,channels_,3,opencv_caffe.DummyDataParameter.channels_,,misc\caffe\opencv-caffe.pb.hpp,channels_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
1323,135399,height_,3,opencv_caffe.DummyDataParameter.height_,,misc\caffe\opencv-caffe.pb.hpp,height_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
1324,135400,width_,3,opencv_caffe.DummyDataParameter.width_,,misc\caffe\opencv-caffe.pb.hpp,width_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
1325,135401,shape_,3,opencv_caffe.DummyDataParameter.shape_,,misc\caffe\opencv-caffe.pb.hpp,shape_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
1326,135402,_cached_size_,3,opencv_caffe.DummyDataParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1327,315621,Finish,1,opencv_tflite.HardSwishOptionsBuilder.Finish,Offset<HardSwishOptions> opencv_tflite.HardSwishOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<HardSwishOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<HardSwishOptions>(end);
    return o;
  }",6479.0,6483.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<HardSwishOptions>
1328,4334,SolverParameter_SolverType_IsValid,1,opencv_caffe.SolverParameter_SolverType_IsValid,bool opencv_caffe.SolverParameter_SolverType_IsValid (int),misc\caffe\opencv-caffe.pb.cc,"bool SolverParameter_SolverType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}",3449.0,3461.0,1.0,1.0,13.0,0,0,1,1,1,0,2,2,0,0,,0,0,2,1,1,bool
1329,86257,GetMetadata,1,opencv_caffe.ThresholdParameter.GetMetadata,Metadata opencv_caffe.ThresholdParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata ThresholdParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[61]);
}",27827.0,27831.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
1330,119042,_has_bits_,3,opencv_caffe.NetParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
1331,119043,_cached_size_,3,opencv_caffe.NetParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1332,20738,_InternalParse,1,opencv_caffe.SolverParameter._InternalParse,"const char* opencv_caffe.SolverParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* SolverParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string train_net = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_train_net();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, ""opencv_caffe.SolverParameter.train_net"");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string test_net = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ...",8412.0,8856.0,1.0,10.0,445.0,393,16,427,35,0,49,105,183,3,3,,0,49,4,2,2,const char*
1333,119045,input_,3,opencv_caffe.NetParameter.input_,,misc\caffe\opencv-caffe.pb.hpp,input_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
1334,119044,layers_,3,opencv_caffe.NetParameter.layers_,,misc\caffe\opencv-caffe.pb.hpp,layers_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
1335,119046,input_dim_,3,opencv_caffe.NetParameter.input_dim_,,misc\caffe\opencv-caffe.pb.hpp,input_dim_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
1336,119048,layer_,3,opencv_caffe.NetParameter.layer_,,misc\caffe\opencv-caffe.pb.hpp,layer_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
1337,119049,name_,3,opencv_caffe.NetParameter.name_,,misc\caffe\opencv-caffe.pb.hpp,name_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1338,119047,input_shape_,3,opencv_caffe.NetParameter.input_shape_,,misc\caffe\opencv-caffe.pb.hpp,input_shape_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
1339,119050,state_,3,opencv_caffe.NetParameter.state_,,misc\caffe\opencv-caffe.pb.hpp,* state_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
1340,119052,debug_info_,3,opencv_caffe.NetParameter.debug_info_,,misc\caffe\opencv-caffe.pb.hpp,debug_info_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
1341,315661,fbb_,3,opencv_tflite.LogicalAndOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1342,315662,start_,3,opencv_tflite.LogicalAndOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1343,315663,LogicalAndOptionsBuilder,1,opencv_tflite.LogicalAndOptionsBuilder.LogicalAndOptionsBuilder,ANY opencv_tflite.LogicalAndOptionsBuilder.LogicalAndOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit LogicalAndOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",6504.0,6507.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1344,4368,ParamSpec_DimCheckMode_descriptor,1,opencv_caffe.ParamSpec_DimCheckMode_descriptor,EnumDescriptor opencv_caffe.ParamSpec_DimCheckMode_descriptor (),misc\caffe\opencv-caffe.pb.cc,"const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParamSpec_DimCheckMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_opencv_2dcaffe_2eproto);
  return file_level_enum_descriptors_opencv_2dcaffe_2eproto[5];
}",3474.0,3477.0,1.0,1.0,4.0,4,3,4,4,1,2,1,1,0,0,,0,2,0,0,0,EnumDescriptor
1345,119051,force_backward_,3,opencv_caffe.NetParameter.force_backward_,,misc\caffe\opencv-caffe.pb.hpp,force_backward_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1346,315674,Finish,1,opencv_tflite.LogicalAndOptionsBuilder.Finish,Offset<LogicalAndOptions> opencv_tflite.LogicalAndOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<LogicalAndOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LogicalAndOptions>(end);
    return o;
  }",6508.0,6512.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<LogicalAndOptions>
1347,53535,MergeFrom,1,opencv_caffe.DataParameter.MergeFrom,void opencv_caffe.DataParameter.MergeFrom (DataParameter),misc\caffe\opencv-caffe.pb.cc,"void DataParameter::MergeFrom(const DataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.DataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_source(from._internal_source());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_mean_file(from._internal_mean_file());
    }
    if (cached_has_bits & 0x00000004u) {
      batch_size_ = from.batch_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      crop_size_ = from.crop_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      rand_skip_ = from.rand_skip_;
    }
    if (cached_has_bits & 0x00000020u) {
      mirror_ = from.mirror_;
    }
    if (cached_has_bits & 0x00000040u) {
      force_encoded_color_ = from.force_encoded_color_;
    }
    if (cached_has_bits & 0x00000080u) {
 ...",17626.0,17670.0,1.0,1.0,45.0,43,8,42,13,2,19,13,23,0,0,,0,19,2,1,1,void
1348,4384,ParamSpec_DimCheckMode_IsValid,1,opencv_caffe.ParamSpec_DimCheckMode_IsValid,bool opencv_caffe.ParamSpec_DimCheckMode_IsValid (int),misc\caffe\opencv-caffe.pb.cc,"bool ParamSpec_DimCheckMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}",3478.0,3486.0,1.0,1.0,9.0,0,0,1,1,1,0,2,2,0,0,,0,0,2,1,1,bool
1349,69930,InternalSwap,1,opencv_caffe.LogParameter.InternalSwap,void opencv_caffe.LogParameter.InternalSwap (LogParameter*),misc\caffe\opencv-caffe.pb.cc,"void LogParameter::InternalSwap(LogParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(shift_, other->shift_);
  swap(base_, other->base_);
  swap(scale_, other->scale_);
}",22705.0,22712.0,1.0,1.0,8.0,9,4,10,6,0,8,1,1,0,0,,0,8,2,1,1,void
1350,233780,_InternalSerialize,1,opencv_onnx.TensorProto_Segment._InternalSerialize,"uint8_t opencv_onnx.TensorProto_Segment._InternalSerialize (uint8_t*,ANY*)",misc\onnx\opencv-onnx.pb.cc,"uint8_t* TensorProto_Segment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_onnx.TensorProto.Segment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 begin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_begin(), target);
  }

  // optional int64 end = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_...",3683.0,3708.0,1.0,1.0,26.0,31,8,34,10,0,1,4,4,0,0,,0,1,4,2,2,uint8_t
1351,4406,LossParameter_NormalizationMode_descriptor,1,opencv_caffe.LossParameter_NormalizationMode_descriptor,EnumDescriptor opencv_caffe.LossParameter_NormalizationMode_descriptor (),misc\caffe\opencv-caffe.pb.cc,"const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LossParameter_NormalizationMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_opencv_2dcaffe_2eproto);
  return file_level_enum_descriptors_opencv_2dcaffe_2eproto[6];
}",3495.0,3498.0,1.0,1.0,4.0,4,3,4,4,1,2,1,1,0,0,,0,2,0,0,0,EnumDescriptor
1352,315714,fbb_,3,opencv_tflite.LogicalNotOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1353,315715,start_,3,opencv_tflite.LogicalNotOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1354,315716,LogicalNotOptionsBuilder,1,opencv_tflite.LogicalNotOptionsBuilder.LogicalNotOptionsBuilder,ANY opencv_tflite.LogicalNotOptionsBuilder.LogicalNotOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit LogicalNotOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",6533.0,6536.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1355,4422,LossParameter_NormalizationMode_IsValid,1,opencv_caffe.LossParameter_NormalizationMode_IsValid,bool opencv_caffe.LossParameter_NormalizationMode_IsValid (int),misc\caffe\opencv-caffe.pb.cc,"bool LossParameter_NormalizationMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}",3499.0,3509.0,1.0,1.0,11.0,0,0,1,1,1,0,2,2,0,0,,0,0,2,1,1,bool
1356,86343,set_has_fg_threshold,1,opencv_caffe._Internal.set_has_fg_threshold,void opencv_caffe._Internal.set_has_fg_threshold (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_fg_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }",27856.0,27858.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
1357,430409,binaryThreshold,3,cv.dnn.TextDetectionModel_DB_Impl.binaryThreshold,,src\model.cpp,binaryThreshold,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1358,430410,polygonThreshold,3,cv.dnn.TextDetectionModel_DB_Impl.polygonThreshold,,src\model.cpp,polygonThreshold,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1359,430411,unclipRatio,3,cv.dnn.TextDetectionModel_DB_Impl.unclipRatio,,src\model.cpp,unclipRatio,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1360,430412,maxCandidates,3,cv.dnn.TextDetectionModel_DB_Impl.maxCandidates,,src\model.cpp,maxCandidates,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1361,315727,Finish,1,opencv_tflite.LogicalNotOptionsBuilder.Finish,Offset<LogicalNotOptions> opencv_tflite.LogicalNotOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<LogicalNotOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LogicalNotOptions>(end);
    return o;
  }",6537.0,6541.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<LogicalNotOptions>
1362,69967,GetMetadata,1,opencv_caffe.LogParameter.GetMetadata,Metadata opencv_caffe.LogParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata LogParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[43]);
}",22714.0,22718.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
1363,86354,set_has_bg_threshold,1,opencv_caffe._Internal.set_has_bg_threshold,void opencv_caffe._Internal.set_has_bg_threshold (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_bg_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }",27859.0,27861.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
1364,135508,descriptor,1,opencv_caffe.EltwiseParameter.descriptor,Descriptor opencv_caffe.EltwiseParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",10611.0,10613.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
1365,135514,GetDescriptor,1,opencv_caffe.EltwiseParameter.GetDescriptor,Descriptor opencv_caffe.EltwiseParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",10614.0,10616.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
1366,430426,setBinaryThreshold,1,cv.dnn.TextDetectionModel_DB_Impl.setBinaryThreshold,void cv.dnn.TextDetectionModel_DB_Impl.setBinaryThreshold (float),src\model.cpp,void setBinaryThreshold(float binaryThreshold_) { binaryThreshold = binaryThreshold_; },1333.0,1333.0,5.0,91.0,1.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
1367,86365,set_has_fg_fraction,1,opencv_caffe._Internal.set_has_fg_fraction,void opencv_caffe._Internal.set_has_fg_fraction (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_fg_fraction(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }",27862.0,27864.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
1368,4450,ConvolutionParameter_Engine_descriptor,1,opencv_caffe.ConvolutionParameter_Engine_descriptor,EnumDescriptor opencv_caffe.ConvolutionParameter_Engine_descriptor (),misc\caffe\opencv-caffe.pb.cc,"const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConvolutionParameter_Engine_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_opencv_2dcaffe_2eproto);
  return file_level_enum_descriptors_opencv_2dcaffe_2eproto[7];
}",3520.0,3523.0,1.0,1.0,4.0,4,3,4,4,1,2,1,1,0,0,,0,2,0,0,0,EnumDescriptor
1369,430434,getBinaryThreshold,1,cv.dnn.TextDetectionModel_DB_Impl.getBinaryThreshold,float cv.dnn.TextDetectionModel_DB_Impl.getBinaryThreshold (),src\model.cpp,float getBinaryThreshold() const { return binaryThreshold; },1334.0,1334.0,5.0,64.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,float
1370,69987,set_has_local_size,1,opencv_caffe._Internal.set_has_local_size,void opencv_caffe._Internal.set_has_local_size (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_local_size(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }",30837.0,30839.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
1371,135525,GetReflection,1,opencv_caffe.EltwiseParameter.GetReflection,Reflection opencv_caffe.EltwiseParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",10617.0,10619.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
1372,430440,setPolygonThreshold,1,cv.dnn.TextDetectionModel_DB_Impl.setPolygonThreshold,void cv.dnn.TextDetectionModel_DB_Impl.setPolygonThreshold (float),src\model.cpp,void setPolygonThreshold(float polygonThreshold_) { polygonThreshold = polygonThreshold_; },1336.0,1336.0,5.0,95.0,1.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
1373,86376,set_has_context_pad,1,opencv_caffe._Internal.set_has_context_pad,void opencv_caffe._Internal.set_has_context_pad (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_context_pad(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }",27865.0,27867.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
1374,135536,default_instance,1,opencv_caffe.EltwiseParameter.default_instance,EltwiseParameter opencv_caffe.EltwiseParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const EltwiseParameter& default_instance() {
    return *internal_default_instance();
  }",10620.0,10622.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,EltwiseParameter
1375,430448,getPolygonThreshold,1,cv.dnn.TextDetectionModel_DB_Impl.getPolygonThreshold,float cv.dnn.TextDetectionModel_DB_Impl.getPolygonThreshold (),src\model.cpp,float getPolygonThreshold() const { return polygonThreshold; },1337.0,1337.0,5.0,66.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,float
1376,4466,ConvolutionParameter_Engine_IsValid,1,opencv_caffe.ConvolutionParameter_Engine_IsValid,bool opencv_caffe.ConvolutionParameter_Engine_IsValid (int),misc\caffe\opencv-caffe.pb.cc,"bool ConvolutionParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}",3524.0,3533.0,1.0,1.0,10.0,0,0,1,1,1,0,2,2,0,0,,0,0,2,1,1,bool
1377,430454,setUnclipRatio,1,cv.dnn.TextDetectionModel_DB_Impl.setUnclipRatio,void cv.dnn.TextDetectionModel_DB_Impl.setUnclipRatio (double),src\model.cpp,void setUnclipRatio(double unclipRatio_) { unclipRatio = unclipRatio_; },1339.0,1339.0,5.0,76.0,1.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
1378,315767,fbb_,3,opencv_tflite.UnpackOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
1379,119158,descriptor,1,opencv_caffe.SolverParameter.descriptor,Descriptor opencv_caffe.SolverParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",3831.0,3833.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
1380,315769,add_num,1,opencv_tflite.UnpackOptionsBuilder.add_num,void opencv_tflite.UnpackOptionsBuilder.add_num (int32_t),misc\tflite\schema_generated.hpp,"void add_num(int32_t num) {
    fbb_.AddElement<int32_t>(UnpackOptions::VT_NUM, num, 0);
  }",6574.0,6576.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
1381,135543,internal_default_instance,1,opencv_caffe.EltwiseParameter.internal_default_instance,EltwiseParameter opencv_caffe.EltwiseParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const EltwiseParameter* internal_default_instance() {
    return reinterpret_cast<const EltwiseParameter*>(
               &_EltwiseParameter_default_instance_);
  }",10623.0,10626.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,EltwiseParameter
1382,70009,set_has_beta,1,opencv_caffe._Internal.set_has_beta,void opencv_caffe._Internal.set_has_beta (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_beta(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }",30843.0,30845.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
1383,119164,GetDescriptor,1,opencv_caffe.SolverParameter.GetDescriptor,Descriptor opencv_caffe.SolverParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",3834.0,3836.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
1384,299389,ByteSizeLong,1,opencv_tensorflow.TensorShapeProto.ByteSizeLong,size_t opencv_tensorflow.TensorShapeProto.ByteSizeLong (),misc\tensorflow\tensor_shape.pb.cc,"size_t TensorShapeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_tensorflow.TensorShapeProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opencv_tensorflow.TensorShapeProto.Dim dim = 2;
  total_size += 1UL * this->_internal_dim_size();
  for (const auto& msg : this->dim_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool unknown_rank = 3;
  if (this->_internal_unknown_rank() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}",469.0,490.0,1.0,1.0,22.0,16,9,12,7,0,2,3,3,1,0,,0,2,0,0,0,size_t
1385,315768,start_,3,opencv_tflite.UnpackOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1386,430462,getUnclipRatio,1,cv.dnn.TextDetectionModel_DB_Impl.getUnclipRatio,double cv.dnn.TextDetectionModel_DB_Impl.getUnclipRatio (),src\model.cpp,double getUnclipRatio() const { return unclipRatio; },1340.0,1340.0,5.0,57.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,double
1387,86398,set_has_cache_images,1,opencv_caffe._Internal.set_has_cache_images,void opencv_caffe._Internal.set_has_cache_images (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_cache_images(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }",27871.0,27873.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
1388,430468,setMaxCandidates,1,cv.dnn.TextDetectionModel_DB_Impl.setMaxCandidates,void cv.dnn.TextDetectionModel_DB_Impl.setMaxCandidates (int),src\model.cpp,void setMaxCandidates(int maxCandidates_) { maxCandidates = maxCandidates_; },1342.0,1342.0,5.0,81.0,1.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
1389,119175,GetReflection,1,opencv_caffe.SolverParameter.GetReflection,Reflection opencv_caffe.SolverParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",3837.0,3839.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
1390,4491,DataParameter_DB_descriptor,1,opencv_caffe.DataParameter_DB_descriptor,EnumDescriptor opencv_caffe.DataParameter_DB_descriptor (),misc\caffe\opencv-caffe.pb.cc,"const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataParameter_DB_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_opencv_2dcaffe_2eproto);
  return file_level_enum_descriptors_opencv_2dcaffe_2eproto[8];
}",3543.0,3546.0,1.0,1.0,4.0,4,3,4,4,1,2,1,1,0,0,,0,2,0,0,0,EnumDescriptor
1391,430476,getMaxCandidates,1,cv.dnn.TextDetectionModel_DB_Impl.getMaxCandidates,int cv.dnn.TextDetectionModel_DB_Impl.getMaxCandidates (),src\model.cpp,int getMaxCandidates() const { return maxCandidates; },1343.0,1343.0,5.0,58.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
1392,315787,add_axis,1,opencv_tflite.UnpackOptionsBuilder.add_axis,void opencv_tflite.UnpackOptionsBuilder.add_axis (int32_t),misc\tflite\schema_generated.hpp,"void add_axis(int32_t axis) {
    fbb_.AddElement<int32_t>(UnpackOptions::VT_AXIS, axis, 0);
  }",6577.0,6579.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
1393,70031,set_has_k,1,opencv_caffe._Internal.set_has_k,void opencv_caffe._Internal.set_has_k (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_k(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }",30846.0,30848.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
1394,119186,default_instance,1,opencv_caffe.SolverParameter.default_instance,SolverParameter opencv_caffe.SolverParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const SolverParameter& default_instance() {
    return *internal_default_instance();
  }",3840.0,3842.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,SolverParameter
1395,119193,internal_default_instance,1,opencv_caffe.SolverParameter.internal_default_instance,SolverParameter opencv_caffe.SolverParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const SolverParameter* internal_default_instance() {
    return reinterpret_cast<const SolverParameter*>(
               &_SolverParameter_default_instance_);
  }",3843.0,3846.0,3.0,3.0,4.0,2,2,1,1,4,0,1,1,0,0,,0,0,0,0,0,SolverParameter
1396,4507,DataParameter_DB_IsValid,1,opencv_caffe.DataParameter_DB_IsValid,bool opencv_caffe.DataParameter_DB_IsValid (int),misc\caffe\opencv-caffe.pb.cc,"bool DataParameter_DB_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}",3547.0,3555.0,1.0,1.0,9.0,0,0,1,1,1,0,2,2,0,0,,0,0,2,1,1,bool
1397,283037,SharedCtor,1,opencv_tensorflow.OpDef_AttrDef.SharedCtor,void opencv_tensorflow.OpDef_AttrDef.SharedCtor (),misc\tensorflow\op_def.pb.cc,"inline void OpDef_AttrDef::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_ca...",773.0,790.0,1.0,1.0,18.0,28,6,13,7,0,7,1,1,0,0,,0,7,0,0,0,void
1398,315805,UnpackOptionsBuilder,1,opencv_tflite.UnpackOptionsBuilder.UnpackOptionsBuilder,ANY opencv_tflite.UnpackOptionsBuilder.UnpackOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit UnpackOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",6580.0,6583.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1399,233888,ByteSizeLong,1,opencv_onnx.TensorProto_Segment.ByteSizeLong,size_t opencv_onnx.TensorProto_Segment.ByteSizeLong (),misc\onnx\opencv-onnx.pb.cc,"size_t TensorProto_Segment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_onnx.TensorProto.Segment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 begin = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_begin());
    }

    // optional int64 end = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_end());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}",3710.0,3732.0,1.0,1.0,23.0,19,8,18,7,0,2,4,6,0,0,,0,2,0,0,0,size_t
1400,315816,Finish,1,opencv_tflite.UnpackOptionsBuilder.Finish,Offset<UnpackOptions> opencv_tflite.UnpackOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<UnpackOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UnpackOptions>(end);
    return o;
  }",6584.0,6588.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<UnpackOptions>
1401,102829,GetMetadata,1,opencv_caffe.V0LayerParameter.GetMetadata,Metadata opencv_caffe.V0LayerParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata V0LayerParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[65]);
}",32286.0,32290.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
1402,4529,EltwiseParameter_EltwiseOp_descriptor,1,opencv_caffe.EltwiseParameter_EltwiseOp_descriptor,EnumDescriptor opencv_caffe.EltwiseParameter_EltwiseOp_descriptor (),misc\caffe\opencv-caffe.pb.cc,"const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EltwiseParameter_EltwiseOp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_opencv_2dcaffe_2eproto);
  return file_level_enum_descriptors_opencv_2dcaffe_2eproto[9];
}",3564.0,3567.0,1.0,1.0,4.0,4,3,4,4,1,2,1,1,0,0,,0,2,0,0,0,EnumDescriptor
1403,151991,_has_bits_,3,opencv_caffe.SPPParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
1404,151992,_cached_size_,3,opencv_caffe.SPPParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1405,151993,pyramid_height_,3,opencv_caffe.SPPParameter.pyramid_height_,,misc\caffe\opencv-caffe.pb.hpp,pyramid_height_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
1406,151994,pool_,3,opencv_caffe.SPPParameter.pool_,,misc\caffe\opencv-caffe.pb.hpp,pool_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1407,151995,engine_,3,opencv_caffe.SPPParameter.engine_,,misc\caffe\opencv-caffe.pb.hpp,engine_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
1408,4545,EltwiseParameter_EltwiseOp_IsValid,1,opencv_caffe.EltwiseParameter_EltwiseOp_IsValid,bool opencv_caffe.EltwiseParameter_EltwiseOp_IsValid (int),misc\caffe\opencv-caffe.pb.cc,"bool EltwiseParameter_EltwiseOp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}",3568.0,3577.0,1.0,1.0,10.0,0,0,1,1,1,0,2,2,0,0,,0,0,2,1,1,bool
1409,53710,InternalSwap,1,opencv_caffe.DataParameter.InternalSwap,void opencv_caffe.DataParameter.InternalSwap (DataParameter*),misc\caffe\opencv-caffe.pb.cc,"void DataParameter::InternalSwap(DataParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &source_, lhs_arena,
      &other->source_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mean_file_, lhs_arena,
      &other->mean_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataParameter, backend_)
      + sizeof(DataParameter::backend_)
      - PROTOBUF_FIELD_OFFSET(DataParameter, batch_size_)>(
          reinterpret_cast<char*>(&batch_size_),
          reinterpret_cast<char*>(&other->batch_si...",17683.0,17707.0,1.0,1.0,25.0,44,13,38,15,0,15,1,1,0,0,,0,15,2,1,1,void
1410,299481,MergeFrom,1,opencv_tensorflow.TensorShapeProto.MergeFrom,void opencv_tensorflow.TensorShapeProto.MergeFrom (TensorShapeProto),misc\tensorflow\tensor_shape.pb.cc,"void TensorShapeProto::MergeFrom(const TensorShapeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_tensorflow.TensorShapeProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  dim_.MergeFrom(from.dim_);
  if (from._internal_unknown_rank() != 0) {
    _internal_set_unknown_rank(from._internal_unknown_rank());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",505.0,516.0,1.0,1.0,12.0,13,7,10,5,2,2,2,2,0,0,,0,2,2,1,1,void
1411,70106,SharedCtor,1,opencv_caffe.LRNParameter.SharedCtor,void opencv_caffe.LRNParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void LRNParameter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&norm_region_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&engine_) -
    reinterpret_cast<char*>(&norm_region_)) + sizeof(engine_));
local_size_ = 5u;
alpha_ = 1;
beta_ = 0.75f;
k_ = 1;
}",22764.0,22773.0,1.0,1.0,10.0,20,7,8,6,0,8,1,1,0,0,,0,8,0,0,0,void
1412,4570,HingeLossParameter_Norm_descriptor,1,opencv_caffe.HingeLossParameter_Norm_descriptor,EnumDescriptor opencv_caffe.HingeLossParameter_Norm_descriptor (),misc\caffe\opencv-caffe.pb.cc,"const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HingeLossParameter_Norm_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_opencv_2dcaffe_2eproto);
  return file_level_enum_descriptors_opencv_2dcaffe_2eproto[10];
}",3587.0,3590.0,1.0,1.0,4.0,4,3,4,4,1,2,1,1,0,0,,0,2,0,0,0,EnumDescriptor
1413,315868,fbb_,3,opencv_tflite.FloorDivOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1414,102876,filler,1,opencv_caffe.PReLUParameter._Internal.filler,FillerParameter opencv_caffe.PReLUParameter._Internal.filler (PReLUParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::FillerParameter&
PReLUParameter::_Internal::filler(const PReLUParameter* msg) {
  return *msg->filler_;
}",32306.0,32309.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,FillerParameter
1415,315869,start_,3,opencv_tflite.FloorDivOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1416,315870,FloorDivOptionsBuilder,1,opencv_tflite.FloorDivOptionsBuilder.FloorDivOptionsBuilder,ANY opencv_tflite.FloorDivOptionsBuilder.FloorDivOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit FloorDivOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",6613.0,6616.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1417,315881,Finish,1,opencv_tflite.FloorDivOptionsBuilder.Finish,Offset<FloorDivOptions> opencv_tflite.FloorDivOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<FloorDivOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FloorDivOptions>(end);
    return o;
  }",6617.0,6621.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<FloorDivOptions>
1418,4586,HingeLossParameter_Norm_IsValid,1,opencv_caffe.HingeLossParameter_Norm_IsValid,bool opencv_caffe.HingeLossParameter_Norm_IsValid (int),misc\caffe\opencv-caffe.pb.cc,"bool HingeLossParameter_Norm_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}",3591.0,3599.0,1.0,1.0,9.0,0,0,1,1,1,0,2,2,0,0,,0,0,2,1,1,bool
1419,283122,SharedDtor,1,opencv_tensorflow.OpDef_AttrDef.SharedDtor,void opencv_tensorflow.OpDef_AttrDef.SharedDtor (),misc\tensorflow\op_def.pb.cc,"inline void OpDef_AttrDef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete default_value_;
  if (this != internal_default_instance()) delete allowed_values_;
}",799.0,806.0,1.0,1.0,8.0,17,5,11,7,0,7,3,3,2,0,,0,7,0,0,0,void
1420,135668,GetCachedSize,1,opencv_caffe.EltwiseParameter.GetCachedSize,int opencv_caffe.EltwiseParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },10671.0,10671.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
1421,4608,LRNParameter_NormRegion_descriptor,1,opencv_caffe.LRNParameter_NormRegion_descriptor,EnumDescriptor opencv_caffe.LRNParameter_NormRegion_descriptor (),misc\caffe\opencv-caffe.pb.cc,"const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LRNParameter_NormRegion_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_opencv_2dcaffe_2eproto);
  return file_level_enum_descriptors_opencv_2dcaffe_2eproto[11];
}",3608.0,3611.0,1.0,1.0,4.0,4,3,4,4,1,2,1,1,0,0,,0,2,0,0,0,EnumDescriptor
1422,233990,MergeFrom,1,opencv_onnx.TensorProto_Segment.MergeFrom,void opencv_onnx.TensorProto_Segment.MergeFrom (TensorProto_Segment),misc\onnx\opencv-onnx.pb.cc,"void TensorProto_Segment::MergeFrom(const TensorProto_Segment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_onnx.TensorProto.Segment)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      begin_ = from.begin_;
    }
    if (cached_has_bits & 0x00000002u) {
      end_ = from.end_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",3747.0,3764.0,1.0,1.0,18.0,19,8,17,7,1,6,4,6,0,0,,0,6,2,1,1,void
1423,4624,LRNParameter_NormRegion_IsValid,1,opencv_caffe.LRNParameter_NormRegion_IsValid,bool opencv_caffe.LRNParameter_NormRegion_IsValid (int),misc\caffe\opencv-caffe.pb.cc,"bool LRNParameter_NormRegion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}",3612.0,3620.0,1.0,1.0,9.0,0,0,1,1,1,0,2,2,0,0,,0,0,2,1,1,bool
1424,315921,fbb_,3,opencv_tflite.SquareOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1425,315922,start_,3,opencv_tflite.SquareOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1426,315923,SquareOptionsBuilder,1,opencv_tflite.SquareOptionsBuilder.SquareOptionsBuilder,ANY opencv_tflite.SquareOptionsBuilder.SquareOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit SquareOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",6642.0,6645.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1427,119318,GetCachedSize,1,opencv_caffe.SolverParameter.GetCachedSize,int opencv_caffe.SolverParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },3891.0,3891.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
1428,102939,SharedCtor,1,opencv_caffe.PReLUParameter.SharedCtor,void opencv_caffe.PReLUParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void PReLUParameter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&filler_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&channel_shared_) -
    reinterpret_cast<char*>(&filler_)) + sizeof(channel_shared_));
}",32332.0,32337.0,1.0,1.0,6.0,16,6,4,2,0,4,1,1,0,0,,0,4,0,0,0,void
1429,299549,InternalSwap,1,opencv_tensorflow.TensorShapeProto.InternalSwap,void opencv_tensorflow.TensorShapeProto.InternalSwap (TensorShapeProto*),misc\tensorflow\tensor_shape.pb.cc,"void TensorShapeProto::InternalSwap(TensorShapeProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  dim_.InternalSwap(&other->dim_);
  swap(unknown_rank_, other->unknown_rank_);
}",529.0,534.0,1.0,1.0,6.0,7,3,6,4,0,4,1,1,0,0,,0,4,2,1,1,void
1430,315934,Finish,1,opencv_tflite.SquareOptionsBuilder.Finish,Offset<SquareOptions> opencv_tflite.SquareOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<SquareOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SquareOptions>(end);
    return o;
  }",6646.0,6650.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<SquareOptions>
1431,4646,LRNParameter_Engine_descriptor,1,opencv_caffe.LRNParameter_Engine_descriptor,EnumDescriptor opencv_caffe.LRNParameter_Engine_descriptor (),misc\caffe\opencv-caffe.pb.cc,"const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LRNParameter_Engine_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_opencv_2dcaffe_2eproto);
  return file_level_enum_descriptors_opencv_2dcaffe_2eproto[12];
}",3629.0,3632.0,1.0,1.0,4.0,4,3,4,4,1,2,1,1,0,0,,0,2,0,0,0,EnumDescriptor
1432,70197,SetCachedSize,1,opencv_caffe.LRNParameter.SetCachedSize,void opencv_caffe.LRNParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void LRNParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",22792.0,22794.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
1433,4662,LRNParameter_Engine_IsValid,1,opencv_caffe.LRNParameter_Engine_IsValid,bool opencv_caffe.LRNParameter_Engine_IsValid (int),misc\caffe\opencv-caffe.pb.cc,"bool LRNParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}",3633.0,3642.0,1.0,1.0,10.0,0,0,1,1,1,0,2,2,0,0,,0,0,2,1,1,bool
1434,299575,GetMetadata,1,opencv_tensorflow.TensorShapeProto.GetMetadata,Metadata opencv_tensorflow.TensorShapeProto.GetMetadata (),misc\tensorflow\tensor_shape.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata TensorShapeProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tensor_5fshape_2eproto_getter, &descriptor_table_tensor_5fshape_2eproto_once,
      file_level_metadata_tensor_5fshape_2eproto[1]);
}",536.0,540.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
1435,283196,SetCachedSize,1,opencv_tensorflow.OpDef_AttrDef.SetCachedSize,void opencv_tensorflow.OpDef_AttrDef.SetCachedSize (int),misc\tensorflow\op_def.pb.cc,"void OpDef_AttrDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",814.0,816.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
1436,86589,SharedCtor,1,opencv_caffe.WindowDataParameter.SharedCtor,void opencv_caffe.WindowDataParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void WindowDataParameter::SharedCtor() {
source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mean_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mean_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
crop_mode_.UnsafeSetDefault(nullptr);
root_folder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  root_folder_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_c...",27928.0,27950.0,1.0,1.0,23.0,33,7,18,12,0,12,1,1,0,0,,0,12,0,0,0,void
1437,70207,Clear,1,opencv_caffe.LRNParameter.Clear,void opencv_caffe.LRNParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void LRNParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.LRNParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&norm_region_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&engine_) -
        reinterpret_cast<char*>(&norm_region_)) + sizeof(engine_));
    local_size_ = 5u;
    alpha_ = 1;
    beta_ = 0.75f;
    k_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",22796.0,22814.0,1.0,1.0,19.0,21,9,15,9,0,10,2,2,0,0,,0,10,0,0,0,void
1438,315974,fbb_,3,opencv_tflite.ZerosLikeOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1439,53830,GetMetadata,1,opencv_caffe.DataParameter.GetMetadata,Metadata opencv_caffe.DataParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata DataParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[26]);
}",17709.0,17713.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
1440,315976,ZerosLikeOptionsBuilder,1,opencv_tflite.ZerosLikeOptionsBuilder.ZerosLikeOptionsBuilder,ANY opencv_tflite.ZerosLikeOptionsBuilder.ZerosLikeOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit ZerosLikeOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",6671.0,6674.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1441,283206,Clear,1,opencv_tensorflow.OpDef_AttrDef.Clear,void opencv_tensorflow.OpDef_AttrDef.Clear (),misc\tensorflow\op_def.pb.cc,"void OpDef_AttrDef::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_tensorflow.OpDef.AttrDef)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  type_.ClearToEmpty();
  description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && default_value_ != nullptr) {
    delete default_value_;
  }
  default_value_ = nullptr;
  if (GetArenaForAllocation() == nullptr && allowed_values_ != nullptr) {
    delete allowed_values_;
  }
  allowed_values_ = nullptr;
  ::memset(&minimum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_minimum_) -
      reinterpret_cast<char*>(&minimum_)) + sizeof(has_minimum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",818.0,839.0,1.0,1.0,22.0,26,11,16,9,0,13,3,3,2,0,,0,13,0,0,0,void
1442,315975,start_,3,opencv_tflite.ZerosLikeOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1443,152137,descriptor,1,opencv_caffe.V1LayerParameter.descriptor,Descriptor opencv_caffe.V1LayerParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",17682.0,17684.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
1444,102991,SharedDtor,1,opencv_caffe.PReLUParameter.SharedDtor,void opencv_caffe.PReLUParameter.SharedDtor (),misc\caffe\opencv-caffe.pb.cc,"inline void PReLUParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete filler_;
}",32346.0,32349.0,1.0,1.0,4.0,3,3,1,1,0,2,2,2,1,0,,0,2,0,0,0,void
1445,4687,PoolingParameter_PoolMethod_descriptor,1,opencv_caffe.PoolingParameter_PoolMethod_descriptor,EnumDescriptor opencv_caffe.PoolingParameter_PoolMethod_descriptor (),misc\caffe\opencv-caffe.pb.cc,"const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PoolingParameter_PoolMethod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_opencv_2dcaffe_2eproto);
  return file_level_enum_descriptors_opencv_2dcaffe_2eproto[13];
}",3652.0,3655.0,1.0,1.0,4.0,4,3,4,4,1,2,1,1,0,0,,0,2,0,0,0,EnumDescriptor
1446,152143,GetDescriptor,1,opencv_caffe.V1LayerParameter.GetDescriptor,Descriptor opencv_caffe.V1LayerParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",17685.0,17687.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
1447,315987,Finish,1,opencv_tflite.ZerosLikeOptionsBuilder.Finish,Offset<ZerosLikeOptions> opencv_tflite.ZerosLikeOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<ZerosLikeOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ZerosLikeOptions>(end);
    return o;
  }",6675.0,6679.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<ZerosLikeOptions>
1448,152154,GetReflection,1,opencv_caffe.V1LayerParameter.GetReflection,Reflection opencv_caffe.V1LayerParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",17688.0,17690.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
1449,234075,InternalSwap,1,opencv_onnx.TensorProto_Segment.InternalSwap,void opencv_onnx.TensorProto_Segment.InternalSwap (TensorProto_Segment*),misc\onnx\opencv-onnx.pb.cc,"void TensorProto_Segment::InternalSwap(TensorProto_Segment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TensorProto_Segment, end_)
      + sizeof(TensorProto_Segment::end_)
      - PROTOBUF_FIELD_OFFSET(TensorProto_Segment, begin_)>(
          reinterpret_cast<char*>(&begin_),
          reinterpret_cast<char*>(&other->begin_));
}",3777.0,3787.0,1.0,1.0,11.0,21,12,13,8,0,7,1,1,0,0,,0,7,2,1,1,void
1450,53850,set_has_nms_threshold,1,opencv_caffe._Internal.set_has_nms_threshold,void opencv_caffe._Internal.set_has_nms_threshold (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_nms_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }",17720.0,17722.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
1451,4703,PoolingParameter_PoolMethod_IsValid,1,opencv_caffe.PoolingParameter_PoolMethod_IsValid,bool opencv_caffe.PoolingParameter_PoolMethod_IsValid (int),misc\caffe\opencv-caffe.pb.cc,"bool PoolingParameter_PoolMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}",3656.0,3665.0,1.0,1.0,10.0,0,0,1,1,1,0,2,2,0,0,,0,0,2,1,1,bool
1452,152165,default_instance,1,opencv_caffe.V1LayerParameter.default_instance,V1LayerParameter opencv_caffe.V1LayerParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const V1LayerParameter& default_instance() {
    return *internal_default_instance();
  }",17691.0,17693.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,V1LayerParameter
1453,152172,internal_default_instance,1,opencv_caffe.V1LayerParameter.internal_default_instance,V1LayerParameter opencv_caffe.V1LayerParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const V1LayerParameter* internal_default_instance() {
    return reinterpret_cast<const V1LayerParameter*>(
               &_V1LayerParameter_default_instance_);
  }",17694.0,17697.0,3.0,3.0,4.0,2,2,1,1,32,0,1,1,0,0,,0,0,0,0,0,V1LayerParameter
1454,53872,set_has_eta,1,opencv_caffe._Internal.set_has_eta,void opencv_caffe._Internal.set_has_eta (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_eta(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }",17726.0,17728.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
1455,103025,SetCachedSize,1,opencv_caffe.PReLUParameter.SetCachedSize,void opencv_caffe.PReLUParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void PReLUParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",32357.0,32359.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
1456,4728,PoolingParameter_Engine_descriptor,1,opencv_caffe.PoolingParameter_Engine_descriptor,EnumDescriptor opencv_caffe.PoolingParameter_Engine_descriptor (),misc\caffe\opencv-caffe.pb.cc,"const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PoolingParameter_Engine_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_opencv_2dcaffe_2eproto);
  return file_level_enum_descriptors_opencv_2dcaffe_2eproto[14];
}",3675.0,3678.0,1.0,1.0,4.0,4,3,4,4,1,2,1,1,0,0,,0,2,0,0,0,EnumDescriptor
1457,103035,Clear,1,opencv_caffe.PReLUParameter.Clear,void opencv_caffe.PReLUParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void PReLUParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.PReLUParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(filler_ != nullptr);
    filler_->Clear();
  }
  channel_shared_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",32361.0,32375.0,1.0,1.0,15.0,10,7,10,5,0,5,2,2,0,0,,0,5,0,0,0,void
1458,316028,start_,3,opencv_tflite.FillOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1459,70269,_InternalParse,1,opencv_caffe.LRNParameter._InternalParse,"const char* opencv_caffe.LRNParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* LRNParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 local_size = 1 [default = 5];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_local_size(&has_bits);
          local_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float alpha = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_alpha(&has_bits);
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
    ...",22816.0,22907.0,1.0,10.0,92.0,76,14,81,16,0,11,21,32,2,6,,0,7,4,2,2,const char*
1460,316029,FillOptionsBuilder,1,opencv_tflite.FillOptionsBuilder.FillOptionsBuilder,ANY opencv_tflite.FillOptionsBuilder.FillOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit FillOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",6700.0,6703.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1461,316027,fbb_,3,opencv_tflite.FillOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1462,4744,PoolingParameter_Engine_IsValid,1,opencv_caffe.PoolingParameter_Engine_IsValid,bool opencv_caffe.PoolingParameter_Engine_IsValid (int),misc\caffe\opencv-caffe.pb.cc,"bool PoolingParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}",3679.0,3688.0,1.0,1.0,10.0,0,0,1,1,1,0,2,2,0,0,,0,0,2,1,1,bool
1463,316040,Finish,1,opencv_tflite.FillOptionsBuilder.Finish,Offset<FillOptions> opencv_tflite.FillOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<FillOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FillOptions>(end);
    return o;
  }",6704.0,6708.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<FillOptions>
1464,234128,GetMetadata,1,opencv_onnx.TensorProto_Segment.GetMetadata,Metadata opencv_onnx.TensorProto_Segment.GetMetadata (),misc\onnx\opencv-onnx.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata TensorProto_Segment::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2donnx_2eproto_getter, &descriptor_table_opencv_2donnx_2eproto_once,
      file_level_metadata_opencv_2donnx_2eproto[6]);
}",3789.0,3793.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
1465,283282,_InternalParse,1,opencv_tensorflow.OpDef_AttrDef._InternalParse,"const char* opencv_tensorflow.OpDef_AttrDef._InternalParse (char*,ANY*)",misc\tensorflow\op_def.pb.cc,"const char* OpDef_AttrDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, ""opencv_tensorflow.OpDef.AttrDef.name""));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr...",841.0,930.0,1.0,10.0,90.0,73,11,87,12,0,2,21,27,0,0,,0,2,4,2,2,const char*
1466,4769,ReductionParameter_ReductionOp_descriptor,1,opencv_caffe.ReductionParameter_ReductionOp_descriptor,EnumDescriptor opencv_caffe.ReductionParameter_ReductionOp_descriptor (),misc\caffe\opencv-caffe.pb.cc,"const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReductionParameter_ReductionOp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_opencv_2dcaffe_2eproto);
  return file_level_enum_descriptors_opencv_2dcaffe_2eproto[15];
}",3698.0,3701.0,1.0,1.0,4.0,4,3,4,4,1,2,1,1,0,0,,0,2,0,0,0,EnumDescriptor
1467,103075,_InternalParse,1,opencv_caffe.PReLUParameter._InternalParse,"const char* opencv_caffe.PReLUParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* PReLUParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .opencv_caffe.FillerParameter filler = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_filler(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool channel_shared = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_channel_shared(&has_bits);
          channel_shared_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
 ...",32377.0,32423.0,1.0,10.0,47.0,36,12,40,10,0,3,11,12,0,1,,0,2,4,2,2,const char*
1468,86691,SharedDtor,1,opencv_caffe.WindowDataParameter.SharedDtor,void opencv_caffe.WindowDataParameter.SharedDtor (),misc\caffe\opencv-caffe.pb.cc,"inline void WindowDataParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mean_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  crop_mode_.DestroyNoArena(nullptr);
  root_folder_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}",27959.0,27965.0,1.0,1.0,7.0,14,3,10,6,0,4,1,1,0,0,,0,4,0,0,0,void
1469,316080,fbb_,3,opencv_tflite.FloorModOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1470,316081,start_,3,opencv_tflite.FloorModOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1471,316082,FloorModOptionsBuilder,1,opencv_tflite.FloorModOptionsBuilder.FloorModOptionsBuilder,ANY opencv_tflite.FloorModOptionsBuilder.FloorModOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit FloorModOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",6729.0,6732.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1472,53936,SharedCtor,1,opencv_caffe.NonMaximumSuppressionParameter.SharedCtor,void opencv_caffe.NonMaximumSuppressionParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void NonMaximumSuppressionParameter::SharedCtor() {
top_k_ = 0;
nms_threshold_ = 0.3f;
eta_ = 1;
}",17750.0,17754.0,1.0,1.0,5.0,3,1,3,3,0,3,1,1,0,0,,0,3,0,0,0,void
1473,4785,ReductionParameter_ReductionOp_IsValid,1,opencv_caffe.ReductionParameter_ReductionOp_IsValid,bool opencv_caffe.ReductionParameter_ReductionOp_IsValid (int),misc\caffe\opencv-caffe.pb.cc,"bool ReductionParameter_ReductionOp_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}",3702.0,3712.0,1.0,1.0,11.0,0,0,1,1,1,0,2,2,0,0,,0,0,2,1,1,bool
1474,316093,Finish,1,opencv_tflite.FloorModOptionsBuilder.Finish,Offset<FloorModOptions> opencv_tflite.FloorModOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<FloorModOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FloorModOptions>(end);
    return o;
  }",6733.0,6737.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<FloorModOptions>
1475,4813,ReLUParameter_Engine_descriptor,1,opencv_caffe.ReLUParameter_Engine_descriptor,EnumDescriptor opencv_caffe.ReLUParameter_Engine_descriptor (),misc\caffe\opencv-caffe.pb.cc,"const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReLUParameter_Engine_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_opencv_2dcaffe_2eproto);
  return file_level_enum_descriptors_opencv_2dcaffe_2eproto[16];
}",3723.0,3726.0,1.0,1.0,4.0,4,3,4,4,1,2,1,1,0,0,,0,2,0,0,0,EnumDescriptor
1476,4829,ReLUParameter_Engine_IsValid,1,opencv_caffe.ReLUParameter_Engine_IsValid,bool opencv_caffe.ReLUParameter_Engine_IsValid (int),misc\caffe\opencv-caffe.pb.cc,"bool ReLUParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}",3727.0,3736.0,1.0,1.0,10.0,0,0,1,1,1,0,2,2,0,0,,0,0,2,1,1,bool
1477,234208,segment,1,opencv_onnx.TensorProto._Internal.segment,TensorProto_Segment opencv_onnx.TensorProto._Internal.segment (TensorProto*),misc\onnx\opencv-onnx.pb.cc,"const ::opencv_onnx::TensorProto_Segment&
TensorProto::_Internal::segment(const TensorProto* msg) {
  return *msg->segment_;
}",3818.0,3821.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,TensorProto_Segment
1478,86756,SetCachedSize,1,opencv_caffe.WindowDataParameter.SetCachedSize,void opencv_caffe.WindowDataParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void WindowDataParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",27973.0,27975.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
1479,316133,fbb_,3,opencv_tflite.RangeOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1480,316134,start_,3,opencv_tflite.RangeOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1481,53991,SetCachedSize,1,opencv_caffe.NonMaximumSuppressionParameter.SetCachedSize,void opencv_caffe.NonMaximumSuppressionParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void NonMaximumSuppressionParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",17773.0,17775.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
1482,316135,RangeOptionsBuilder,1,opencv_tflite.RangeOptionsBuilder.RangeOptionsBuilder,ANY opencv_tflite.RangeOptionsBuilder.RangeOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit RangeOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",6758.0,6761.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1483,152297,GetCachedSize,1,opencv_caffe.V1LayerParameter.GetCachedSize,int opencv_caffe.V1LayerParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },17742.0,17742.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
1484,86766,Clear,1,opencv_caffe.WindowDataParameter.Clear,void opencv_caffe.WindowDataParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void WindowDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.WindowDataParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      source_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      mean_file_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      crop_mode_.ClearToDefault(::opencv_caffe::WindowDataParameter::_i_give_permission_to_break_this_code_default_crop_mode_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000008u) {
      root_folder_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&batch_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cache_images_) -
        reinterpret_cast<char*>(&batch_size_)) + sizeof(cache_im...",27977.0,28012.0,1.0,1.0,36.0,34,9,28,16,0,15,8,12,0,0,,0,15,0,0,0,void
1485,135918,_has_bits_,3,opencv_caffe.EltwiseParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
1486,135920,coeff_,3,opencv_caffe.EltwiseParameter.coeff_,,misc\caffe\opencv-caffe.pb.hpp,coeff_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1487,54001,Clear,1,opencv_caffe.NonMaximumSuppressionParameter.Clear,void opencv_caffe.NonMaximumSuppressionParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void NonMaximumSuppressionParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.NonMaximumSuppressionParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    top_k_ = 0;
    nms_threshold_ = 0.3f;
    eta_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",17777.0,17791.0,1.0,1.0,15.0,10,5,10,6,0,5,2,2,0,0,,0,5,0,0,0,void
1488,135922,stable_prod_grad_,3,opencv_caffe.EltwiseParameter.stable_prod_grad_,,misc\caffe\opencv-caffe.pb.hpp,stable_prod_grad_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
1489,316146,Finish,1,opencv_tflite.RangeOptionsBuilder.Finish,Offset<RangeOptions> opencv_tflite.RangeOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<RangeOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RangeOptions>(end);
    return o;
  }",6762.0,6766.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<RangeOptions>
1490,135921,operation_,3,opencv_caffe.EltwiseParameter.operation_,,misc\caffe\opencv-caffe.pb.hpp,operation_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
1491,135919,_cached_size_,3,opencv_caffe.EltwiseParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1492,4854,SigmoidParameter_Engine_descriptor,1,opencv_caffe.SigmoidParameter_Engine_descriptor,EnumDescriptor opencv_caffe.SigmoidParameter_Engine_descriptor (),misc\caffe\opencv-caffe.pb.cc,"const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SigmoidParameter_Engine_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_opencv_2dcaffe_2eproto);
  return file_level_enum_descriptors_opencv_2dcaffe_2eproto[17];
}",3746.0,3749.0,1.0,1.0,4.0,4,3,4,4,1,2,1,1,0,0,,0,2,0,0,0,EnumDescriptor
1493,4870,SigmoidParameter_Engine_IsValid,1,opencv_caffe.SigmoidParameter_Engine_IsValid,bool opencv_caffe.SigmoidParameter_Engine_IsValid (int),misc\caffe\opencv-caffe.pb.cc,"bool SigmoidParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}",3750.0,3759.0,1.0,1.0,10.0,0,0,1,1,1,0,2,2,0,0,,0,0,2,1,1,bool
1494,299783,descriptor,1,opencv_tensorflow.TensorShapeProto_Dim.descriptor,Descriptor opencv_tensorflow.TensorShapeProto_Dim.descriptor (),misc\tensorflow\tensor_shape.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",103.0,105.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
1495,299789,GetDescriptor,1,opencv_tensorflow.TensorShapeProto_Dim.GetDescriptor,Descriptor opencv_tensorflow.TensorShapeProto_Dim.GetDescriptor (),misc\tensorflow\tensor_shape.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",106.0,108.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
1496,54039,_InternalParse,1,opencv_caffe.NonMaximumSuppressionParameter._InternalParse,"const char* opencv_caffe.NonMaximumSuppressionParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* NonMaximumSuppressionParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float nms_threshold = 1 [default = 0.3];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_nms_threshold(&has_bits);
          nms_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 top_k = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_top_k(&has_bits);
          top_k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          ...",17793.0,17849.0,1.0,10.0,57.0,49,14,52,13,0,7,13,15,0,3,,0,4,4,2,2,const char*
1497,299800,GetReflection,1,opencv_tensorflow.TensorShapeProto_Dim.GetReflection,Reflection opencv_tensorflow.TensorShapeProto_Dim.GetReflection (),misc\tensorflow\tensor_shape.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",109.0,111.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
1498,316186,fbb_,3,opencv_tflite.LeakyReluOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1499,316187,start_,3,opencv_tflite.LeakyReluOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1500,316188,add_alpha,1,opencv_tflite.LeakyReluOptionsBuilder.add_alpha,void opencv_tflite.LeakyReluOptionsBuilder.add_alpha (float),misc\tflite\schema_generated.hpp,"void add_alpha(float alpha) {
    fbb_.AddElement<float>(LeakyReluOptions::VT_ALPHA, alpha, 0.0f);
  }",6794.0,6796.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
1501,4895,SoftmaxParameter_Engine_descriptor,1,opencv_caffe.SoftmaxParameter_Engine_descriptor,EnumDescriptor opencv_caffe.SoftmaxParameter_Engine_descriptor (),misc\caffe\opencv-caffe.pb.cc,"const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SoftmaxParameter_Engine_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_opencv_2dcaffe_2eproto);
  return file_level_enum_descriptors_opencv_2dcaffe_2eproto[18];
}",3769.0,3772.0,1.0,1.0,4.0,4,3,4,4,1,2,1,1,0,0,,0,2,0,0,0,EnumDescriptor
1502,299811,default_instance,1,opencv_tensorflow.TensorShapeProto_Dim.default_instance,TensorShapeProto_Dim opencv_tensorflow.TensorShapeProto_Dim.default_instance (),misc\tensorflow\tensor_shape.pb.hpp,"static const TensorShapeProto_Dim& default_instance() {
    return *internal_default_instance();
  }",112.0,114.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,TensorShapeProto_Dim
1503,299818,internal_default_instance,1,opencv_tensorflow.TensorShapeProto_Dim.internal_default_instance,TensorShapeProto_Dim opencv_tensorflow.TensorShapeProto_Dim.internal_default_instance (),misc\tensorflow\tensor_shape.pb.hpp,"static inline const TensorShapeProto_Dim* internal_default_instance() {
    return reinterpret_cast<const TensorShapeProto_Dim*>(
               &_TensorShapeProto_Dim_default_instance_);
  }",115.0,118.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,TensorShapeProto_Dim
1504,316202,LeakyReluOptionsBuilder,1,opencv_tflite.LeakyReluOptionsBuilder.LeakyReluOptionsBuilder,ANY opencv_tflite.LeakyReluOptionsBuilder.LeakyReluOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit LeakyReluOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",6797.0,6800.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1505,4911,SoftmaxParameter_Engine_IsValid,1,opencv_caffe.SoftmaxParameter_Engine_IsValid,bool opencv_caffe.SoftmaxParameter_Engine_IsValid (int),misc\caffe\opencv-caffe.pb.cc,"bool SoftmaxParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}",3773.0,3782.0,1.0,1.0,10.0,0,0,1,1,1,0,2,2,0,0,,0,0,2,1,1,bool
1506,316213,Finish,1,opencv_tflite.LeakyReluOptionsBuilder.Finish,Offset<LeakyReluOptions> opencv_tflite.LeakyReluOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<LeakyReluOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LeakyReluOptions>(end);
    return o;
  }",6801.0,6805.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<LeakyReluOptions>
1507,348993,backend,3,opencv_test.DNNTestNetwork.backend,,perf\perf_net.cpp,backend,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
1508,348994,target,3,opencv_test.DNNTestNetwork.target,,perf\perf_net.cpp,target,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1509,348995,net,3,opencv_test.DNNTestNetwork.net,,perf\perf_net.cpp,net,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
1510,348996,DNNTestNetwork,1,opencv_test.DNNTestNetwork.DNNTestNetwork,ANY opencv_test.DNNTestNetwork.DNNTestNetwork (),perf\perf_net.cpp,"DNNTestNetwork()
    {
        backend = (dnn::Backend)(int)get<0>(GetParam());
        target = (dnn::Target)(int)get<1>(GetParam());
    }",25.0,29.0,5.0,5.0,5.0,10,4,4,3,0,2,1,1,0,0,,0,2,0,0,0,ANY
1511,4936,TanHParameter_Engine_descriptor,1,opencv_caffe.TanHParameter_Engine_descriptor,EnumDescriptor opencv_caffe.TanHParameter_Engine_descriptor (),misc\caffe\opencv-caffe.pb.cc,"const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TanHParameter_Engine_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_opencv_2dcaffe_2eproto);
  return file_level_enum_descriptors_opencv_2dcaffe_2eproto[19];
}",3792.0,3795.0,1.0,1.0,4.0,4,3,4,4,1,2,1,1,0,0,,0,2,0,0,0,EnumDescriptor
1512,103243,_InternalSerialize,1,opencv_caffe.PReLUParameter._InternalSerialize,"uint8_t opencv_caffe.PReLUParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* PReLUParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.PReLUParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .opencv_caffe.FillerParameter filler = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::filler(this), target, stream);
  }

  // optional bool channel_shared = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_channel_shared(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFo...",32425.0,32452.0,1.0,1.0,28.0,31,8,36,11,0,2,4,4,0,1,,0,2,4,2,2,uint8_t
1513,4952,TanHParameter_Engine_IsValid,1,opencv_caffe.TanHParameter_Engine_IsValid,bool opencv_caffe.TanHParameter_Engine_IsValid (int),misc\caffe\opencv-caffe.pb.cc,"bool TanHParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}",3796.0,3805.0,1.0,1.0,10.0,0,0,1,1,1,0,2,2,0,0,,0,0,2,1,1,bool
1514,349022,processNet,1,opencv_test.DNNTestNetwork.processNet,"void opencv_test.DNNTestNetwork.processNet (ANY,ANY,ANY,ANY,ANY)",perf\perf_net.cpp,"void processNet(std::string weights, std::string proto, std::string halide_scheduler,
                    Size inpSize, const std::string& outputLayer = """")
    {
        Mat input_data(inpSize, CV_32FC3);
        randu(input_data, 0.0f, 1.0f);
        Mat input = blobFromImage(input_data, 1.0, Size(), Scalar(), false);
        processNet(weights, proto, halide_scheduler, input, outputLayer);
    }",86.0,93.0,5.0,5.0,8.0,68,11,63,18,0,14,8,10,2,0,,0,14,10,5,5,void
1515,86883,_InternalParse,1,opencv_caffe.WindowDataParameter._InternalParse,"const char* opencv_caffe.WindowDataParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* WindowDataParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, ""opencv_caffe.WindowDataParameter.source"");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float scale = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
     ...",28014.0,28172.0,1.0,10.0,159.0,139,14,158,20,0,19,33,45,0,9,,0,10,4,2,2,const char*
1516,316260,start_,3,opencv_tflite.SquaredDifferenceOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1517,316261,SquaredDifferenceOptionsBuilder,1,opencv_tflite.SquaredDifferenceOptionsBuilder.SquaredDifferenceOptionsBuilder,ANY opencv_tflite.SquaredDifferenceOptionsBuilder.SquaredDifferenceOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit SquaredDifferenceOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",6828.0,6831.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1518,316259,fbb_,3,opencv_tflite.SquaredDifferenceOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1519,136046,descriptor,1,opencv_caffe.ELUParameter.descriptor,Descriptor opencv_caffe.ELUParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",10840.0,10842.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
1520,316272,Finish,1,opencv_tflite.SquaredDifferenceOptionsBuilder.Finish,Offset<SquaredDifferenceOptions> opencv_tflite.SquaredDifferenceOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<SquaredDifferenceOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SquaredDifferenceOptions>(end);
    return o;
  }",6832.0,6836.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<SquaredDifferenceOptions>
1521,4977,SPPParameter_PoolMethod_descriptor,1,opencv_caffe.SPPParameter_PoolMethod_descriptor,EnumDescriptor opencv_caffe.SPPParameter_PoolMethod_descriptor (),misc\caffe\opencv-caffe.pb.cc,"const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SPPParameter_PoolMethod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_opencv_2dcaffe_2eproto);
  return file_level_enum_descriptors_opencv_2dcaffe_2eproto[20];
}",3815.0,3818.0,1.0,1.0,4.0,4,3,4,4,1,2,1,1,0,0,,0,2,0,0,0,EnumDescriptor
1522,234355,SharedCtor,1,opencv_onnx.TensorProto.SharedCtor,void opencv_onnx.TensorProto.SharedCtor (),misc\onnx\opencv-onnx.pb.cc,"inline void TensorProto::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
raw_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  raw_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
doc_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  doc_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpre...",3882.0,3899.0,1.0,1.0,18.0,28,6,13,7,0,7,1,1,0,0,,0,7,0,0,0,void
1523,136052,GetDescriptor,1,opencv_caffe.ELUParameter.GetDescriptor,Descriptor opencv_caffe.ELUParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",10843.0,10845.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
1524,136063,GetReflection,1,opencv_caffe.ELUParameter.GetReflection,Reflection opencv_caffe.ELUParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",10846.0,10848.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
1525,4993,SPPParameter_PoolMethod_IsValid,1,opencv_caffe.SPPParameter_PoolMethod_IsValid,bool opencv_caffe.SPPParameter_PoolMethod_IsValid (int),misc\caffe\opencv-caffe.pb.cc,"bool SPPParameter_PoolMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}",3819.0,3828.0,1.0,1.0,10.0,0,0,1,1,1,0,2,2,0,0,,0,0,2,1,1,bool
1526,136074,default_instance,1,opencv_caffe.ELUParameter.default_instance,ELUParameter opencv_caffe.ELUParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const ELUParameter& default_instance() {
    return *internal_default_instance();
  }",10849.0,10851.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,ELUParameter
1527,136081,internal_default_instance,1,opencv_caffe.ELUParameter.internal_default_instance,ELUParameter opencv_caffe.ELUParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const ELUParameter* internal_default_instance() {
    return reinterpret_cast<const ELUParameter*>(
               &_ELUParameter_default_instance_);
  }",10852.0,10855.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,ELUParameter
1528,316312,fbb_,3,opencv_tflite.MirrorPadOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1529,316313,start_,3,opencv_tflite.MirrorPadOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1530,316314,add_mode,1,opencv_tflite.MirrorPadOptionsBuilder.add_mode,void opencv_tflite.MirrorPadOptionsBuilder.add_mode (ANY),misc\tflite\schema_generated.hpp,"void add_mode(opencv_tflite::MirrorPadMode mode) {
    fbb_.AddElement<int8_t>(MirrorPadOptions::VT_MODE, static_cast<int8_t>(mode), 0);
  }",6864.0,6866.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
1531,5018,SPPParameter_Engine_descriptor,1,opencv_caffe.SPPParameter_Engine_descriptor,EnumDescriptor opencv_caffe.SPPParameter_Engine_descriptor (),misc\caffe\opencv-caffe.pb.cc,"const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SPPParameter_Engine_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_opencv_2dcaffe_2eproto);
  return file_level_enum_descriptors_opencv_2dcaffe_2eproto[21];
}",3838.0,3841.0,1.0,1.0,4.0,4,3,4,4,1,2,1,1,0,0,,0,2,0,0,0,EnumDescriptor
1532,299943,GetCachedSize,1,opencv_tensorflow.TensorShapeProto_Dim.GetCachedSize,int opencv_tensorflow.TensorShapeProto_Dim.GetCachedSize (),misc\tensorflow\tensor_shape.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },163.0,163.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
1533,5034,SPPParameter_Engine_IsValid,1,opencv_caffe.SPPParameter_Engine_IsValid,bool opencv_caffe.SPPParameter_Engine_IsValid (int),misc\caffe\opencv-caffe.pb.cc,"bool SPPParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}",3842.0,3851.0,1.0,1.0,10.0,0,0,1,1,1,0,2,2,0,0,,0,0,2,1,1,bool
1534,316334,MirrorPadOptionsBuilder,1,opencv_tflite.MirrorPadOptionsBuilder.MirrorPadOptionsBuilder,ANY opencv_tflite.MirrorPadOptionsBuilder.MirrorPadOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit MirrorPadOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",6867.0,6870.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1535,316345,Finish,1,opencv_tflite.MirrorPadOptionsBuilder.Finish,Offset<MirrorPadOptions> opencv_tflite.MirrorPadOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<MirrorPadOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MirrorPadOptions>(end);
    return o;
  }",6871.0,6875.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<MirrorPadOptions>
1536,103353,ByteSizeLong,1,opencv_caffe.PReLUParameter.ByteSizeLong,size_t opencv_caffe.PReLUParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t PReLUParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.PReLUParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .opencv_caffe.FillerParameter filler = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *filler_);
    }

    // optional bool channel_shared = 2 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}",32454.0,32478.0,1.0,1.0,25.0,17,9,16,8,0,3,4,6,0,0,,0,3,0,0,0,size_t
1537,5059,V1LayerParameter_LayerType_descriptor,1,opencv_caffe.V1LayerParameter_LayerType_descriptor,EnumDescriptor opencv_caffe.V1LayerParameter_LayerType_descriptor (),misc\caffe\opencv-caffe.pb.cc,"const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* V1LayerParameter_LayerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_opencv_2dcaffe_2eproto);
  return file_level_enum_descriptors_opencv_2dcaffe_2eproto[22];
}",3861.0,3864.0,1.0,1.0,4.0,4,3,4,4,1,2,1,1,0,0,,0,2,0,0,0,EnumDescriptor
1538,234440,SharedDtor,1,opencv_onnx.TensorProto.SharedDtor,void opencv_onnx.TensorProto.SharedDtor (),misc\onnx\opencv-onnx.pb.cc,"inline void TensorProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  raw_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doc_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete segment_;
}",3908.0,3914.0,1.0,1.0,7.0,15,5,10,6,0,5,2,2,1,0,,0,5,0,0,0,void
1539,5075,V1LayerParameter_LayerType_IsValid,1,opencv_caffe.V1LayerParameter_LayerType_IsValid,bool opencv_caffe.V1LayerParameter_LayerType_IsValid (int),misc\caffe\opencv-caffe.pb.cc,"bool V1LayerParameter_LayerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
      return true;
    default:
      return false;
  }
}",3865.0,3911.0,1.0,1.0,47.0,0,0,1,1,1,0,2,2,0,0,,0,0,2,1,1,bool
1540,70619,_InternalSerialize,1,opencv_caffe.LRNParameter._InternalSerialize,"uint8_t opencv_caffe.LRNParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* LRNParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.LRNParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 local_size = 1 [default = 5];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_local_size(), target);
  }

  // optional float alpha = 2 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_alpha(), target);
  }

  // optional float beta = 3 [default = 0.75];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::Wir...",22909.0,22960.0,1.0,1.0,52.0,63,8,70,10,0,1,8,8,0,0,,0,1,4,2,2,uint8_t
1541,54242,_InternalSerialize,1,opencv_caffe.NonMaximumSuppressionParameter._InternalSerialize,"uint8_t opencv_caffe.NonMaximumSuppressionParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* NonMaximumSuppressionParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.NonMaximumSuppressionParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float nms_threshold = 1 [default = 0.3];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_nms_threshold(), target);
  }

  // optional int32 top_k = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_top_k(), target);
  }

  // optional float eta = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAM...",17851.0,17882.0,1.0,1.0,32.0,39,8,43,10,0,1,5,5,0,0,,0,1,4,2,2,uint8_t
1542,381927,operator ++,1,cv.dnn.cuda4dnn.csl.device.grid_stride_range_generic.iterator.operator ++,iterator cv.dnn.cuda4dnn.csl.device.grid_stride_range_generic.iterator.operator ++ (),src\cuda\grid_stride_range.hpp,"iterator& operator++() {
            pos += getGridDim<dim>() * static_cast<index_type>(getBlockDim<dim>());
            return *this;
        }",31.0,34.0,20.0,9.0,4.0,4,4,1,1,0,1,1,1,0,0,,0,1,0,0,0,iterator
1543,316391,fbb_,3,opencv_tflite.UniqueOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1544,316393,add_idx_out_type,1,opencv_tflite.UniqueOptionsBuilder.add_idx_out_type,void opencv_tflite.UniqueOptionsBuilder.add_idx_out_type (ANY),misc\tflite\schema_generated.hpp,"void add_idx_out_type(opencv_tflite::TensorType idx_out_type) {
    fbb_.AddElement<int8_t>(UniqueOptions::VT_IDX_OUT_TYPE, static_cast<int8_t>(idx_out_type), 2);
  }",6905.0,6907.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
1545,316392,start_,3,opencv_tflite.UniqueOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1546,381942,operator !=,1,cv.dnn.cuda4dnn.csl.device.grid_stride_range_generic.iterator.operator !=,bool cv.dnn.cuda4dnn.csl.device.grid_stride_range_generic.iterator.operator != (iterator),src\cuda\grid_stride_range.hpp,"bool operator!=(const iterator& other) const {
            /* NOTE HACK
                * 'pos' can move in large steps (see operator++)
                * expansion of range for loop uses != as the loop condition
                * => operator!= must return false if 'pos' crosses the end
                */
            return pos < other.pos;
        }",36.0,43.0,20.0,9.0,8.0,2,2,2,2,0,1,1,1,0,0,,0,1,2,1,1,bool
1547,316413,UniqueOptionsBuilder,1,opencv_tflite.UniqueOptionsBuilder.UniqueOptionsBuilder,ANY opencv_tflite.UniqueOptionsBuilder.UniqueOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit UniqueOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",6908.0,6911.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1548,381953,pos,3,cv.dnn.cuda4dnn.csl.device.grid_stride_range_generic.iterator.pos,,src\cuda\grid_stride_range.hpp,pos,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1549,381955,begin,1,cv.dnn.cuda4dnn.csl.device.grid_stride_range_generic.begin,iterator cv.dnn.cuda4dnn.csl.device.grid_stride_range_generic.begin (),src\cuda\grid_stride_range.hpp,"iterator begin() const {
        return iterator(from + getBlockDim<dim>() * getBlockIdx<dim>() + getThreadIdx<dim>());
    }",49.0,51.0,16.0,5.0,3.0,3,2,1,1,0,1,1,1,0,0,,0,1,0,0,0,iterator
1550,316424,Finish,1,opencv_tflite.UniqueOptionsBuilder.Finish,Offset<UniqueOptions> opencv_tflite.UniqueOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<UniqueOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UniqueOptions>(end);
    return o;
  }",6912.0,6916.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<UniqueOptions>
1551,283658,_InternalSerialize,1,opencv_tensorflow.OpDef_AttrDef._InternalSerialize,"uint8_t opencv_tensorflow.OpDef_AttrDef._InternalSerialize (uint8_t*,ANY*)",misc\tensorflow\op_def.pb.cc,"uint8_t* OpDef_AttrDef::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_tensorflow.OpDef.AttrDef)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      ""opencv_tensorflow.OpDef.AttrDef.name"");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERI...",932.0,1002.0,1.0,1.0,71.0,98,8,77,10,0,2,9,9,0,2,,0,2,4,2,2,uint8_t
1552,234507,SetCachedSize,1,opencv_onnx.TensorProto.SetCachedSize,void opencv_onnx.TensorProto.SetCachedSize (int),misc\onnx\opencv-onnx.pb.cc,"void TensorProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",3922.0,3924.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
1553,136206,GetCachedSize,1,opencv_caffe.ELUParameter.GetCachedSize,int opencv_caffe.ELUParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },10900.0,10900.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
1554,381969,end,1,cv.dnn.cuda4dnn.csl.device.grid_stride_range_generic.end,iterator cv.dnn.cuda4dnn.csl.device.grid_stride_range_generic.end (),src\cuda\grid_stride_range.hpp,"iterator end() const {
        return iterator(to);
    }",53.0,55.0,16.0,5.0,3.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,iterator
1555,234517,Clear,1,opencv_onnx.TensorProto.Clear,void opencv_onnx.TensorProto.Clear (),misc\onnx\opencv-onnx.pb.cc,"void TensorProto::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_onnx.TensorProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dims_.Clear();
  float_data_.Clear();
  int32_data_.Clear();
  string_data_.Clear();
  int64_data_.Clear();
  double_data_.Clear();
  uint64_data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      raw_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      doc_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(segment_ != nullptr);
      segment_->Clear();
    }
  }
  data_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",3926.0,3958.0,1.0,1.0,33.0,24,7,24,15,0,15,6,10,0,0,,0,15,0,0,0,void
1556,103446,MergeFrom,1,opencv_caffe.PReLUParameter.MergeFrom,void opencv_caffe.PReLUParameter.MergeFrom (PReLUParameter),misc\caffe\opencv-caffe.pb.cc,"void PReLUParameter::MergeFrom(const PReLUParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.PReLUParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_filler()->::opencv_caffe::FillerParameter::MergeFrom(from._internal_filler());
    }
    if (cached_has_bits & 0x00000002u) {
      channel_shared_ = from.channel_shared_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",32493.0,32510.0,1.0,1.0,18.0,19,9,16,6,1,5,4,6,0,1,,0,4,2,1,1,void
1557,381976,from,3,cv.dnn.cuda4dnn.csl.device.grid_stride_range_generic.from,,src\cuda\grid_stride_range.hpp,from,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1558,381977,to,3,cv.dnn.cuda4dnn.csl.device.grid_stride_range_generic.to,,src\cuda\grid_stride_range.hpp,to,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1559,300078,name_,3,opencv_tensorflow.TensorShapeProto_Dim.name_,,misc\tensorflow\tensor_shape.pb.hpp,name_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1560,300079,size_,3,opencv_tensorflow.TensorShapeProto_Dim.size_,,misc\tensorflow\tensor_shape.pb.hpp,size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1561,300080,_cached_size_,3,opencv_tensorflow.TensorShapeProto_Dim._cached_size_,,misc\tensorflow\tensor_shape.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1562,316470,fbb_,3,opencv_tflite.ReverseV2OptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1563,316471,start_,3,opencv_tflite.ReverseV2OptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1564,316472,ReverseV2OptionsBuilder,1,opencv_tflite.ReverseV2OptionsBuilder.ReverseV2OptionsBuilder,ANY opencv_tflite.ReverseV2OptionsBuilder.ReverseV2OptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit ReverseV2OptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",6939.0,6942.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1565,316483,Finish,1,opencv_tflite.ReverseV2OptionsBuilder.Finish,Offset<ReverseV2Options> opencv_tflite.ReverseV2OptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<ReverseV2Options> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ReverseV2Options>(end);
    return o;
  }",6943.0,6947.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<ReverseV2Options>
1566,5211,V1LayerParameter_DimCheckMode_descriptor,1,opencv_caffe.V1LayerParameter_DimCheckMode_descriptor,EnumDescriptor opencv_caffe.V1LayerParameter_DimCheckMode_descriptor (),misc\caffe\opencv-caffe.pb.cc,"const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* V1LayerParameter_DimCheckMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_opencv_2dcaffe_2eproto);
  return file_level_enum_descriptors_opencv_2dcaffe_2eproto[23];
}",3958.0,3961.0,1.0,1.0,4.0,4,3,4,4,1,2,1,1,0,0,,0,2,0,0,0,EnumDescriptor
1567,54378,ByteSizeLong,1,opencv_caffe.NonMaximumSuppressionParameter.ByteSizeLong,size_t opencv_caffe.NonMaximumSuppressionParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t NonMaximumSuppressionParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.NonMaximumSuppressionParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 top_k = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_top_k());
    }

    // optional float nms_threshold = 1 [default = 0.3];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float eta = 3 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}",17884.0,17911.0,1.0,1.0,28.0,19,9,17,7,0,2,5,8,0,0,,0,2,0,0,0,size_t
1568,316523,fbb_,3,opencv_tflite.AddNOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1569,316524,start_,3,opencv_tflite.AddNOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1570,316525,AddNOptionsBuilder,1,opencv_tflite.AddNOptionsBuilder.AddNOptionsBuilder,ANY opencv_tflite.AddNOptionsBuilder.AddNOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit AddNOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",6968.0,6971.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1571,103534,InternalSwap,1,opencv_caffe.PReLUParameter.InternalSwap,void opencv_caffe.PReLUParameter.InternalSwap (PReLUParameter*),misc\caffe\opencv-caffe.pb.cc,"void PReLUParameter::InternalSwap(PReLUParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PReLUParameter, channel_shared_)
      + sizeof(PReLUParameter::channel_shared_)
      - PROTOBUF_FIELD_OFFSET(PReLUParameter, filler_)>(
          reinterpret_cast<char*>(&filler_),
          reinterpret_cast<char*>(&other->filler_));
}",32523.0,32533.0,1.0,1.0,11.0,21,12,13,8,0,7,1,1,0,0,,0,7,2,1,1,void
1572,5227,V1LayerParameter_DimCheckMode_IsValid,1,opencv_caffe.V1LayerParameter_DimCheckMode_IsValid,bool opencv_caffe.V1LayerParameter_DimCheckMode_IsValid (int),misc\caffe\opencv-caffe.pb.cc,"bool V1LayerParameter_DimCheckMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}",3962.0,3970.0,1.0,1.0,9.0,0,0,1,1,1,0,2,2,0,0,,0,0,2,1,1,bool
1573,136308,_has_bits_,3,opencv_caffe.ELUParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
1574,136309,_cached_size_,3,opencv_caffe.ELUParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1575,136310,alpha_,3,opencv_caffe.ELUParameter.alpha_,,misc\caffe\opencv-caffe.pb.hpp,alpha_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1576,316536,Finish,1,opencv_tflite.AddNOptionsBuilder.Finish,Offset<AddNOptions> opencv_tflite.AddNOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<AddNOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AddNOptions>(end);
    return o;
  }",6972.0,6976.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<AddNOptions>
1577,234617,_InternalParse,1,opencv_onnx.TensorProto._InternalParse,"const char* opencv_onnx.TensorProto._InternalParse (char*,ANY*)",misc\onnx\opencv-onnx.pb.cc,"const char* TensorProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 dims = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_dims(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_dims(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
...",3960.0,4128.0,1.0,12.0,169.0,120,16,147,11,0,2,38,64,1,1,,0,2,4,2,2,const char*
1578,300159,descriptor,1,opencv_tensorflow.TensorShapeProto.descriptor,Descriptor opencv_tensorflow.TensorShapeProto.descriptor (),misc\tensorflow\tensor_shape.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",265.0,267.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
1579,5249,V0LayerParameter_PoolMethod_descriptor,1,opencv_caffe.V0LayerParameter_PoolMethod_descriptor,EnumDescriptor opencv_caffe.V0LayerParameter_PoolMethod_descriptor (),misc\caffe\opencv-caffe.pb.cc,"const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* V0LayerParameter_PoolMethod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_opencv_2dcaffe_2eproto);
  return file_level_enum_descriptors_opencv_2dcaffe_2eproto[24];
}",3979.0,3982.0,1.0,1.0,4.0,4,3,4,4,1,2,1,1,0,0,,0,2,0,0,0,EnumDescriptor
1580,300165,GetDescriptor,1,opencv_tensorflow.TensorShapeProto.GetDescriptor,Descriptor opencv_tensorflow.TensorShapeProto.GetDescriptor (),misc\tensorflow\tensor_shape.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",268.0,270.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
1581,300176,GetReflection,1,opencv_tensorflow.TensorShapeProto.GetReflection,Reflection opencv_tensorflow.TensorShapeProto.GetReflection (),misc\tensorflow\tensor_shape.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",271.0,273.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
1582,5265,V0LayerParameter_PoolMethod_IsValid,1,opencv_caffe.V0LayerParameter_PoolMethod_IsValid,bool opencv_caffe.V0LayerParameter_PoolMethod_IsValid (int),misc\caffe\opencv-caffe.pb.cc,"bool V0LayerParameter_PoolMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}",3983.0,3992.0,1.0,1.0,10.0,0,0,1,1,1,0,2,2,0,0,,0,0,2,1,1,bool
1583,300187,default_instance,1,opencv_tensorflow.TensorShapeProto.default_instance,TensorShapeProto opencv_tensorflow.TensorShapeProto.default_instance (),misc\tensorflow\tensor_shape.pb.hpp,"static const TensorShapeProto& default_instance() {
    return *internal_default_instance();
  }",274.0,276.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,TensorShapeProto
1584,316576,fbb_,3,opencv_tflite.GatherNdOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1585,316577,start_,3,opencv_tflite.GatherNdOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1586,316578,GatherNdOptionsBuilder,1,opencv_tflite.GatherNdOptionsBuilder.GatherNdOptionsBuilder,ANY opencv_tflite.GatherNdOptionsBuilder.GatherNdOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit GatherNdOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",6997.0,7000.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1587,103587,GetMetadata,1,opencv_caffe.PReLUParameter.GetMetadata,Metadata opencv_caffe.PReLUParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata PReLUParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[66]);
}",32535.0,32539.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
1588,300194,internal_default_instance,1,opencv_tensorflow.TensorShapeProto.internal_default_instance,TensorShapeProto opencv_tensorflow.TensorShapeProto.internal_default_instance (),misc\tensorflow\tensor_shape.pb.hpp,"static inline const TensorShapeProto* internal_default_instance() {
    return reinterpret_cast<const TensorShapeProto*>(
               &_TensorShapeProto_default_instance_);
  }",277.0,280.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,TensorShapeProto
1589,5290,Type_descriptor,1,opencv_caffe.Type_descriptor,EnumDescriptor opencv_caffe.Type_descriptor (),misc\caffe\opencv-caffe.pb.cc,"const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_opencv_2dcaffe_2eproto);
  return file_level_enum_descriptors_opencv_2dcaffe_2eproto[25];
}",4002.0,4005.0,1.0,1.0,4.0,4,3,4,4,1,2,1,1,0,0,,0,2,0,0,0,EnumDescriptor
1590,316589,Finish,1,opencv_tflite.GatherNdOptionsBuilder.Finish,Offset<GatherNdOptions> opencv_tflite.GatherNdOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<GatherNdOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GatherNdOptions>(end);
    return o;
  }",7001.0,7005.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<GatherNdOptions>
1591,70839,ByteSizeLong,1,opencv_caffe.LRNParameter.ByteSizeLong,size_t opencv_caffe.LRNParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t LRNParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.LRNParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .opencv_caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_norm_region());
    }

    // optional .opencv_caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_engine());
    }

    // optional uint32 local_size = 1 [default = 5];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAME...",22962.0,23006.0,1.0,1.0,45.0,36,9,29,7,0,2,8,14,0,0,,0,2,0,0,0,size_t
1592,103607,set_has_xmin,1,opencv_caffe._Internal.set_has_xmin,void opencv_caffe._Internal.set_has_xmin (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_xmin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }",32546.0,32548.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
1593,5306,Type_IsValid,1,opencv_caffe.Type_IsValid,bool opencv_caffe.Type_IsValid (int),misc\caffe\opencv-caffe.pb.cc,"bool Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}",4006.0,4017.0,1.0,1.0,12.0,0,0,1,1,1,0,2,2,0,0,,0,0,2,1,1,bool
1594,103618,set_has_ymin,1,opencv_caffe._Internal.set_has_ymin,void opencv_caffe._Internal.set_has_ymin (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_ymin(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }",32549.0,32551.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
1595,103629,set_has_xmax,1,opencv_caffe._Internal.set_has_xmax,void opencv_caffe._Internal.set_has_xmax (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_xmax(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }",32552.0,32554.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
1596,54481,MergeFrom,1,opencv_caffe.NonMaximumSuppressionParameter.MergeFrom,void opencv_caffe.NonMaximumSuppressionParameter.MergeFrom (NonMaximumSuppressionParameter),misc\caffe\opencv-caffe.pb.cc,"void NonMaximumSuppressionParameter::MergeFrom(const NonMaximumSuppressionParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.NonMaximumSuppressionParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      top_k_ = from.top_k_;
    }
    if (cached_has_bits & 0x00000002u) {
      nms_threshold_ = from.nms_threshold_;
    }
    if (cached_has_bits & 0x00000004u) {
      eta_ = from.eta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",17926.0,17946.0,1.0,1.0,21.0,22,8,20,8,1,8,5,8,0,0,,0,8,2,1,1,void
1597,5329,Phase_descriptor,1,opencv_caffe.Phase_descriptor,EnumDescriptor opencv_caffe.Phase_descriptor (),misc\caffe\opencv-caffe.pb.cc,"const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Phase_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_opencv_2dcaffe_2eproto);
  return file_level_enum_descriptors_opencv_2dcaffe_2eproto[26];
}",4019.0,4022.0,1.0,1.0,4.0,4,3,4,4,1,2,1,1,0,0,,0,2,0,0,0,EnumDescriptor
1598,316629,fbb_,3,opencv_tflite.WhereOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1599,316630,start_,3,opencv_tflite.WhereOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1600,316631,WhereOptionsBuilder,1,opencv_tflite.WhereOptionsBuilder.WhereOptionsBuilder,ANY opencv_tflite.WhereOptionsBuilder.WhereOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit WhereOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",7026.0,7029.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1601,103640,set_has_ymax,1,opencv_caffe._Internal.set_has_ymax,void opencv_caffe._Internal.set_has_ymax (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_ymax(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }",32555.0,32557.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
1602,136416,descriptor,1,opencv_caffe.EmbedParameter.descriptor,Descriptor opencv_caffe.EmbedParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",10998.0,11000.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
1603,5345,Phase_IsValid,1,opencv_caffe.Phase_IsValid,bool opencv_caffe.Phase_IsValid (int),misc\caffe\opencv-caffe.pb.cc,"bool Phase_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}",4023.0,4031.0,1.0,1.0,9.0,0,0,1,1,3,0,2,2,0,0,,0,0,2,1,1,bool
1604,316642,Finish,1,opencv_tflite.WhereOptionsBuilder.Finish,Offset<WhereOptions> opencv_tflite.WhereOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<WhereOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<WhereOptions>(end);
    return o;
  }",7030.0,7034.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<WhereOptions>
1605,136422,GetDescriptor,1,opencv_caffe.EmbedParameter.GetDescriptor,Descriptor opencv_caffe.EmbedParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",11001.0,11003.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
1606,103662,set_has_difficult,1,opencv_caffe._Internal.set_has_difficult,void opencv_caffe._Internal.set_has_difficult (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_difficult(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }",32561.0,32563.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
1607,136433,GetReflection,1,opencv_caffe.EmbedParameter.GetReflection,Reflection opencv_caffe.EmbedParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",11004.0,11006.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
1608,103673,set_has_score,1,opencv_caffe._Internal.set_has_score,void opencv_caffe._Internal.set_has_score (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }",32564.0,32566.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
1609,136444,default_instance,1,opencv_caffe.EmbedParameter.default_instance,EmbedParameter opencv_caffe.EmbedParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const EmbedParameter& default_instance() {
    return *internal_default_instance();
  }",11007.0,11009.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,EmbedParameter
1610,136451,internal_default_instance,1,opencv_caffe.EmbedParameter.internal_default_instance,EmbedParameter opencv_caffe.EmbedParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const EmbedParameter* internal_default_instance() {
    return reinterpret_cast<const EmbedParameter*>(
               &_EmbedParameter_default_instance_);
  }",11010.0,11013.0,3.0,3.0,4.0,2,2,1,1,3,0,1,1,0,0,,0,0,0,0,0,EmbedParameter
1611,103684,set_has_size,1,opencv_caffe._Internal.set_has_size,void opencv_caffe._Internal.set_has_size (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }",32567.0,32569.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
1612,316682,fbb_,3,opencv_tflite.ReverseSequenceOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
1613,316683,start_,3,opencv_tflite.ReverseSequenceOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1614,316684,add_seq_dim,1,opencv_tflite.ReverseSequenceOptionsBuilder.add_seq_dim,void opencv_tflite.ReverseSequenceOptionsBuilder.add_seq_dim (int32_t),misc\tflite\schema_generated.hpp,"void add_seq_dim(int32_t seq_dim) {
    fbb_.AddElement<int32_t>(ReverseSequenceOptions::VT_SEQ_DIM, seq_dim, 0);
  }",7067.0,7069.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
1615,316702,add_batch_dim,1,opencv_tflite.ReverseSequenceOptionsBuilder.add_batch_dim,void opencv_tflite.ReverseSequenceOptionsBuilder.add_batch_dim (int32_t),misc\tflite\schema_generated.hpp,"void add_batch_dim(int32_t batch_dim) {
    fbb_.AddElement<int32_t>(ReverseSequenceOptions::VT_BATCH_DIM, batch_dim, 0);
  }",7070.0,7072.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
1616,300319,GetCachedSize,1,opencv_tensorflow.TensorShapeProto.GetCachedSize,int opencv_tensorflow.TensorShapeProto.GetCachedSize (),misc\tensorflow\tensor_shape.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },325.0,325.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
1617,54576,InternalSwap,1,opencv_caffe.NonMaximumSuppressionParameter.InternalSwap,void opencv_caffe.NonMaximumSuppressionParameter.InternalSwap (NonMaximumSuppressionParameter*),misc\caffe\opencv-caffe.pb.cc,"void NonMaximumSuppressionParameter::InternalSwap(NonMaximumSuppressionParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(top_k_, other->top_k_);
  swap(nms_threshold_, other->nms_threshold_);
  swap(eta_, other->eta_);
}",17959.0,17966.0,1.0,1.0,8.0,9,4,10,6,0,8,1,1,0,0,,0,8,2,1,1,void
1618,316720,ReverseSequenceOptionsBuilder,1,opencv_tflite.ReverseSequenceOptionsBuilder.ReverseSequenceOptionsBuilder,ANY opencv_tflite.ReverseSequenceOptionsBuilder.ReverseSequenceOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit ReverseSequenceOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",7073.0,7076.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1619,316731,Finish,1,opencv_tflite.ReverseSequenceOptionsBuilder.Finish,Offset<ReverseSequenceOptions> opencv_tflite.ReverseSequenceOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<ReverseSequenceOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ReverseSequenceOptions>(end);
    return o;
  }",7077.0,7081.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<ReverseSequenceOptions>
1620,5438,SetCachedSize,1,opencv_caffe.BlobShape.SetCachedSize,void opencv_caffe.BlobShape.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void BlobShape::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",4077.0,4079.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
1621,103748,SharedCtor,1,opencv_caffe.NormalizedBBox.SharedCtor,void opencv_caffe.NormalizedBBox.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void NormalizedBBox::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&xmin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&xmin_)) + sizeof(size_));
}",32591.0,32596.0,1.0,1.0,6.0,16,6,4,2,0,4,1,1,0,0,,0,4,0,0,0,void
1622,5448,Clear,1,opencv_caffe.BlobShape.Clear,void opencv_caffe.BlobShape.Clear (),misc\caffe\opencv-caffe.pb.cc,"void BlobShape::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.BlobShape)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dim_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",4081.0,4089.0,1.0,1.0,9.0,4,3,4,3,0,1,1,1,0,0,,0,1,0,0,0,void
1623,70994,MergeFrom,1,opencv_caffe.LRNParameter.MergeFrom,void opencv_caffe.LRNParameter.MergeFrom (LRNParameter),misc\caffe\opencv-caffe.pb.cc,"void LRNParameter::MergeFrom(const LRNParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.LRNParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      norm_region_ = from.norm_region_;
    }
    if (cached_has_bits & 0x00000002u) {
      engine_ = from.engine_;
    }
    if (cached_has_bits & 0x00000004u) {
      local_size_ = from.local_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      alpha_ = from.alpha_;
    }
    if (cached_has_bits & 0x00000010u) {
      beta_ = from.beta_;
    }
    if (cached_has_bits & 0x00000020u) {
      k_ = from.k_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",23021.0,23050.0,1.0,1.0,30.0,31,8,29,11,2,14,8,14,0,0,,0,14,2,1,1,void
1624,54613,GetMetadata,1,opencv_caffe.NonMaximumSuppressionParameter.GetMetadata,Metadata opencv_caffe.NonMaximumSuppressionParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata NonMaximumSuppressionParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[27]);
}",17968.0,17972.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
1625,283991,ByteSizeLong,1,opencv_tensorflow.OpDef_AttrDef.ByteSizeLong,size_t opencv_tensorflow.OpDef_AttrDef.ByteSizeLong (),misc\tensorflow\op_def.pb.cc,"size_t OpDef_AttrDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_tensorflow.OpDef.AttrDef)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string description = 4;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .opencv_tensorflow.AttrValue default_value = 3;
  if (this->_internal_has_default_value()) {
    total_size += 1 +...",1004.0,1058.0,1.0,1.0,55.0,56,10,32,8,0,3,8,8,0,0,,0,3,0,0,0,size_t
1626,267622,_internal_set_placeholder,1,opencv_tensorflow.AttrValue._internal_set_placeholder,void opencv_tensorflow.AttrValue._internal_set_placeholder (ANY),misc\tensorflow\attr_value.pb.hpp,"inline void AttrValue::_internal_set_placeholder(const std::string& value) {
  if (!_internal_has_placeholder()) {
    clear_value();
    set_has_placeholder();
    value_.placeholder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.placeholder_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}",1833.0,1840.0,1.0,1.0,8.0,9,4,5,4,0,2,2,2,1,0,,0,1,2,1,1,void
1627,316783,fbb_,3,opencv_tflite.MatrixDiagOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1628,316784,start_,3,opencv_tflite.MatrixDiagOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1629,316785,MatrixDiagOptionsBuilder,1,opencv_tflite.MatrixDiagOptionsBuilder.MatrixDiagOptionsBuilder,ANY opencv_tflite.MatrixDiagOptionsBuilder.MatrixDiagOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit MatrixDiagOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",7106.0,7109.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1630,316796,Finish,1,opencv_tflite.MatrixDiagOptionsBuilder.Finish,Offset<MatrixDiagOptions> opencv_tflite.MatrixDiagOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<MatrixDiagOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MatrixDiagOptions>(end);
    return o;
  }",7110.0,7114.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<MatrixDiagOptions>
1631,136576,GetCachedSize,1,opencv_caffe.EmbedParameter.GetCachedSize,int opencv_caffe.EmbedParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },11058.0,11058.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
1632,103827,SetCachedSize,1,opencv_caffe.NormalizedBBox.SetCachedSize,void opencv_caffe.NormalizedBBox.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void NormalizedBBox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",32615.0,32617.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
1633,382360,net,3,cv.dnn.anonymous_namespace_1.DarknetImporter.net,,src\darknet\darknet_importer.cpp,net,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
1634,103837,Clear,1,opencv_caffe.NormalizedBBox.Clear,void opencv_caffe.NormalizedBBox.Clear (),misc\caffe\opencv-caffe.pb.cc,"void NormalizedBBox::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.NormalizedBBox)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&xmin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&size_) -
        reinterpret_cast<char*>(&xmin_)) + sizeof(size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",32619.0,32633.0,1.0,1.0,15.0,17,9,11,5,0,6,2,2,0,0,,0,6,0,0,0,void
1635,382365,DarknetImporter,1,cv.dnn.anonymous_namespace_3.DarknetImporter.DarknetImporter,"ANY cv.dnn.anonymous_namespace_3.DarknetImporter.DarknetImporter (ANY,ANY)",src\darknet\darknet_importer.cpp,"DarknetImporter(std::istream &cfgStream, std::istream &darknetModelStream)
    {
        CV_TRACE_FUNCTION();

        ReadNetParamsFromCfgStreamOrDie(cfgStream, &net);
        ReadNetParamsFromBinaryStreamOrDie(darknetModelStream, &net);
    }",73.0,79.0,5.0,5.0,7.0,2,1,4,3,0,2,1,1,0,0,,0,2,4,2,2,ANY
1636,54688,set_has_num_test_image,1,opencv_caffe._Internal.set_has_num_test_image,void opencv_caffe._Internal.set_has_num_test_image (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_num_test_image(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }",17994.0,17996.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
1637,316836,fbb_,3,opencv_tflite.QuantizeOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1638,316837,start_,3,opencv_tflite.QuantizeOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1639,316838,QuantizeOptionsBuilder,1,opencv_tflite.QuantizeOptionsBuilder.QuantizeOptionsBuilder,ANY opencv_tflite.QuantizeOptionsBuilder.QuantizeOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit QuantizeOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",7135.0,7138.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1640,382380,DarknetImporter,1,cv.dnn.anonymous_namespace_4.DarknetImporter.DarknetImporter,ANY cv.dnn.anonymous_namespace_4.DarknetImporter.DarknetImporter (ANY),src\darknet\darknet_importer.cpp,"DarknetImporter(std::istream &cfgStream)
    {
        CV_TRACE_FUNCTION();

        ReadNetParamsFromCfgStreamOrDie(cfgStream, &net);
    }",81.0,86.0,5.0,5.0,6.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,ANY
1641,300461,dim_,3,opencv_tensorflow.TensorShapeProto.dim_,,misc\tensorflow\tensor_shape.pb.hpp,dim_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
1642,300462,unknown_rank_,3,opencv_tensorflow.TensorShapeProto.unknown_rank_,,misc\tensorflow\tensor_shape.pb.hpp,unknown_rank_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1643,300463,_cached_size_,3,opencv_tensorflow.TensorShapeProto._cached_size_,,misc\tensorflow\tensor_shape.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1644,316849,Finish,1,opencv_tflite.QuantizeOptionsBuilder.Finish,Offset<QuantizeOptions> opencv_tflite.QuantizeOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<QuantizeOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<QuantizeOptions>(end);
    return o;
  }",7139.0,7143.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<QuantizeOptions>
1645,382400,outNum,3,cv.dnn.anonymous_namespace_5.DarknetImporter.BlobNote.outNum,,src\darknet\darknet_importer.cpp,outNum,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1646,382401,addedBlobs,3,cv.dnn.anonymous_namespace_1.DarknetImporter.addedBlobs,,src\darknet\darknet_importer.cpp,addedBlobs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,11,0,1,1,0,0,,0,0,0,0,0,
1647,382402,layerCounter,3,cv.dnn.anonymous_namespace_1.DarknetImporter.layerCounter,,src\darknet\darknet_importer.cpp,layerCounter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1648,382403,populateNet,1,cv.dnn.anonymous_namespace_7.DarknetImporter.populateNet,void cv.dnn.anonymous_namespace_7.DarknetImporter.populateNet (Net),src\darknet\darknet_importer.cpp,"void populateNet(Net dstNet)
    {
        CV_TRACE_FUNCTION();

        int layersSize = net.layer_size();
        layerCounter.clear();
        addedBlobs.clear();
        addedBlobs.reserve(layersSize + 1);

        //setup input layer names
        {
            std::vector<String> netInputs(net.input_size());
            for (int inNum = 0; inNum < net.input_size(); inNum++)
            {
                addedBlobs.push_back(BlobNote(net.input(inNum), 0, inNum));
                netInputs[inNum] = net.input(inNum);
            }
            dstNet.setInputsNames(netInputs);
        }

        for (int li = 0; li < layersSize; li++)
        {
            const darknet::LayerParameter &layer = net.layer(li);
            String name = layer.name();
            String type = layer.type();
            LayerParams layerParams = layer.getLayerParams();

            int repetitions = layerCounter[name]++;
            if (repetitions)
                name += cv::format(""_%d"", repetition...",100.0,142.0,5.0,5.0,43.0,43,8,53,18,0,13,6,9,2,0,,0,13,2,1,1,void
1649,87492,_InternalSerialize,1,opencv_caffe.WindowDataParameter._InternalSerialize,"uint8_t opencv_caffe.WindowDataParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* WindowDataParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.WindowDataParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      ""opencv_caffe.WindowDataParameter.source"");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_source(), target);
  }

  // optional float scale = 2 [default = 1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_inter...",28174.0,28281.0,1.0,1.0,108.0,147,8,137,10,0,1,15,15,0,0,,0,1,4,2,2,uint8_t
1650,103887,_InternalParse,1,opencv_caffe.NormalizedBBox._InternalParse,"const char* opencv_caffe.NormalizedBBox._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* NormalizedBBox::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float xmin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_xmin(&has_bits);
          xmin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float ymin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_ymin(&has_bits);
          ymin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto han...",32635.0,32736.0,1.0,10.0,102.0,94,14,97,18,0,17,23,30,0,8,,0,9,4,2,2,const char*
1651,71119,InternalSwap,1,opencv_caffe.LRNParameter.InternalSwap,void opencv_caffe.LRNParameter.InternalSwap (LRNParameter*),misc\caffe\opencv-caffe.pb.cc,"void LRNParameter::InternalSwap(LRNParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LRNParameter, engine_)
      + sizeof(LRNParameter::engine_)
      - PROTOBUF_FIELD_OFFSET(LRNParameter, norm_region_)>(
          reinterpret_cast<char*>(&norm_region_),
          reinterpret_cast<char*>(&other->norm_region_));
  swap(local_size_, other->local_size_);
  swap(alpha_, other->alpha_);
  swap(beta_, other->beta_);
  swap(k_, other->k_);
}",23063.0,23077.0,1.0,1.0,15.0,25,12,21,12,0,15,1,1,0,0,,0,15,2,1,1,void
1652,316889,fbb_,3,opencv_tflite.MatrixSetDiagOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1653,316890,start_,3,opencv_tflite.MatrixSetDiagOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1654,316891,MatrixSetDiagOptionsBuilder,1,opencv_tflite.MatrixSetDiagOptionsBuilder.MatrixSetDiagOptionsBuilder,ANY opencv_tflite.MatrixSetDiagOptionsBuilder.MatrixSetDiagOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit MatrixSetDiagOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",7164.0,7167.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1655,349666,file,3,cv.dnn.GLogWrapper.file,,src\caffe\glog_emulator.hpp,*file,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1656,349667,func,3,cv.dnn.GLogWrapper.func,,src\caffe\glog_emulator.hpp,*func,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1657,349669,cond_str,3,cv.dnn.GLogWrapper.cond_str,,src\caffe\glog_emulator.hpp,*cond_str,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1658,316902,Finish,1,opencv_tflite.MatrixSetDiagOptionsBuilder.Finish,Offset<MatrixSetDiagOptions> opencv_tflite.MatrixSetDiagOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<MatrixSetDiagOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MatrixSetDiagOptions>(end);
    return o;
  }",7168.0,7172.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<MatrixSetDiagOptions>
1659,349671,cond_status,3,cv.dnn.GLogWrapper.cond_status,,src\caffe\glog_emulator.hpp,cond_status,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1660,349672,exit_loop,3,cv.dnn.GLogWrapper.exit_loop,,src\caffe\glog_emulator.hpp,exit_loop,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1661,349673,sstream,3,cv.dnn.GLogWrapper.sstream,,src\caffe\glog_emulator.hpp,sstream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1662,349670,line,3,cv.dnn.GLogWrapper.line,,src\caffe\glog_emulator.hpp,line,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1663,5617,_InternalSerialize,1,opencv_caffe.BlobShape._InternalSerialize,"uint8_t opencv_caffe.BlobShape._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* BlobShape::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.BlobShape)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 dim = 1 [packed = true];
  {
    int byte_size = _dim_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_dim(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencv_caffe.BlobShape)
  return target;
}",4131.0,4152.0,1.0,1.0,22.0,19,6,22,11,0,1,3,3,0,0,,0,1,4,2,2,uint8_t
1664,349684,stream,1,cv.dnn.GLogWrapper.stream,iostream cv.dnn.GLogWrapper.stream (),src\caffe\glog_emulator.hpp,"std::iostream &stream()
    {
        return sstream;
    }",74.0,77.0,5.0,5.0,4.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,iostream
1665,349690,exit,1,cv.dnn.GLogWrapper.exit,bool cv.dnn.GLogWrapper.exit (),src\caffe\glog_emulator.hpp,"bool exit()
    {
        return exit_loop;
    }",79.0,82.0,5.0,5.0,4.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,bool
1666,349696,check,1,cv.dnn.GLogWrapper.check,void cv.dnn.GLogWrapper.check (),src\caffe\glog_emulator.hpp,"void check()
    {
        exit_loop = false;

        if (cond_str && !cond_status)
        {
            cv::error(cv::Error::StsError, ""FAILED: "" + String(cond_str) + "". "" + sstream.str(), func, file, line);
        }
        else if (!cond_str && strcmp(type, ""CHECK""))
        {
            #ifndef NDEBUG
            if (!std::strcmp(type, ""INFO""))
                std::cout << sstream.str() << std::endl;
            else
                std::cerr << sstream.str() << std::endl;
            #endif
        }
    }",84.0,101.0,5.0,5.0,18.0,10,5,11,9,0,8,2,2,2,0,,0,8,0,0,0,void
1667,316942,fbb_,3,opencv_tflite.IfOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
1668,316943,start_,3,opencv_tflite.IfOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1669,316944,add_then_subgraph_index,1,opencv_tflite.IfOptionsBuilder.add_then_subgraph_index,void opencv_tflite.IfOptionsBuilder.add_then_subgraph_index (int32_t),misc\tflite\schema_generated.hpp,"void add_then_subgraph_index(int32_t then_subgraph_index) {
    fbb_.AddElement<int32_t>(IfOptions::VT_THEN_SUBGRAPH_INDEX, then_subgraph_index, 0);
  }",7205.0,7207.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
1670,71192,GetMetadata,1,opencv_caffe.LRNParameter.GetMetadata,Metadata opencv_caffe.LRNParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata LRNParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[44]);
}",23079.0,23083.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
1671,316962,add_else_subgraph_index,1,opencv_tflite.IfOptionsBuilder.add_else_subgraph_index,void opencv_tflite.IfOptionsBuilder.add_else_subgraph_index (int32_t),misc\tflite\schema_generated.hpp,"void add_else_subgraph_index(int32_t else_subgraph_index) {
    fbb_.AddElement<int32_t>(IfOptions::VT_ELSE_SUBGRAPH_INDEX, else_subgraph_index, 0);
  }",7208.0,7210.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
1672,284198,MergeFrom,1,opencv_tensorflow.OpDef_AttrDef.MergeFrom,void opencv_tensorflow.OpDef_AttrDef.MergeFrom (OpDef_AttrDef),misc\tensorflow\op_def.pb.cc,"void OpDef_AttrDef::MergeFrom(const OpDef_AttrDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_tensorflow.OpDef.AttrDef)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (from._internal_has_default_value()) {
    _internal_mutable_default_value()->::opencv_tensorflow::AttrValue::MergeFrom(from._internal_default_value());
  }
  if (from._internal_has_allowed_values()) {
    _internal_mutable_allowed_values()->::opencv_tensorflow::AttrValue::MergeFrom(from._internal_allowed_values());
  }
  if (from._internal_minimum() != 0) {
    _internal_set_minimum(from._internal_minimum());
  }
  if (from._internal_has_minimum() !...",1073.0,1101.0,1.0,1.0,29.0,32,9,20,4,0,2,8,8,0,2,,0,0,2,1,1,void
1673,316980,IfOptionsBuilder,1,opencv_tflite.IfOptionsBuilder.IfOptionsBuilder,ANY opencv_tflite.IfOptionsBuilder.IfOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit IfOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",7211.0,7214.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1674,5690,ByteSizeLong,1,opencv_caffe.BlobShape.ByteSizeLong,size_t opencv_caffe.BlobShape.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t BlobShape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.BlobShape)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 dim = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->dim_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dim_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}",4154.0,4178.0,1.0,1.0,25.0,22,8,24,10,0,3,2,2,0,0,,0,3,0,0,0,size_t
1675,316991,Finish,1,opencv_tflite.IfOptionsBuilder.Finish,Offset<IfOptions> opencv_tflite.IfOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<IfOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<IfOptions>(end);
    return o;
  }",7215.0,7219.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<IfOptions>
1676,54873,SharedCtor,1,opencv_caffe.SaveOutputParameter.SharedCtor,void opencv_caffe.SaveOutputParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void SaveOutputParameter::SharedCtor() {
output_directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  output_directory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
output_name_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  output_name_prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
output_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  output_format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
label_map_file_.Un...",18056.0,18078.0,1.0,1.0,23.0,21,3,16,8,0,6,1,1,0,0,,0,6,0,0,0,void
1677,317043,fbb_,3,opencv_tflite.CallOnceOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1678,317044,start_,3,opencv_tflite.CallOnceOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1679,317045,add_init_subgraph_index,1,opencv_tflite.CallOnceOptionsBuilder.add_init_subgraph_index,void opencv_tflite.CallOnceOptionsBuilder.add_init_subgraph_index (int32_t),misc\tflite\schema_generated.hpp,"void add_init_subgraph_index(int32_t init_subgraph_index) {
    fbb_.AddElement<int32_t>(CallOnceOptions::VT_INIT_SUBGRAPH_INDEX, init_subgraph_index, 0);
  }",7251.0,7253.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
1680,317063,CallOnceOptionsBuilder,1,opencv_tflite.CallOnceOptionsBuilder.CallOnceOptionsBuilder,ANY opencv_tflite.CallOnceOptionsBuilder.CallOnceOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit CallOnceOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",7254.0,7257.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1681,382602,addOutput,1,cv.dnn.anonymous_namespace_10.DarknetImporter.addOutput,"void cv.dnn.anonymous_namespace_10.DarknetImporter.addOutput (ANY,int,int)",src\darknet\darknet_importer.cpp,"void addOutput(const darknet::LayerParameter &layer, int layerId, int outNum)
    {
        const std::string &name = layer.top(outNum);

        bool haveDups = false;
        for (int idx = (int)addedBlobs.size() - 1; idx >= 0; idx--)
        {
            if (addedBlobs[idx].name == name)
            {
                haveDups = true;
                break;
            }
        }

        if (haveDups)
        {
            bool isInplace = layer.bottom_size() > outNum && layer.bottom(outNum) == name;
            if (!isInplace)
                CV_Error(Error::StsBadArg, ""Duplicate blobs produced by multiple sources"");
        }

        addedBlobs.push_back(BlobNote(name, layerId, outNum));
    }",144.0,166.0,5.0,5.0,23.0,21,10,24,9,0,3,6,7,1,0,,0,3,6,3,3,void
1682,71309,SharedCtor,1,opencv_caffe.MemoryDataParameter.SharedCtor,void opencv_caffe.MemoryDataParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void MemoryDataParameter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&batch_size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&batch_size_)) + sizeof(width_));
}",23123.0,23128.0,1.0,1.0,6.0,16,6,4,2,0,4,1,1,0,0,,0,4,0,0,0,void
1683,136846,_has_bits_,3,opencv_caffe.EmbedParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
1684,136847,_cached_size_,3,opencv_caffe.EmbedParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1685,136848,weight_filler_,3,opencv_caffe.EmbedParameter.weight_filler_,,misc\caffe\opencv-caffe.pb.hpp,* weight_filler_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
1686,136849,bias_filler_,3,opencv_caffe.EmbedParameter.bias_filler_,,misc\caffe\opencv-caffe.pb.hpp,* bias_filler_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1687,136850,num_output_,3,opencv_caffe.EmbedParameter.num_output_,,misc\caffe\opencv-caffe.pb.hpp,num_output_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1688,317074,Finish,1,opencv_tflite.CallOnceOptionsBuilder.Finish,Offset<CallOnceOptions> opencv_tflite.CallOnceOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<CallOnceOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CallOnceOptions>(end);
    return o;
  }",7258.0,7262.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<CallOnceOptions>
1689,136852,bias_term_,3,opencv_caffe.EmbedParameter.bias_term_,,misc\caffe\opencv-caffe.pb.hpp,bias_term_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
1690,136851,input_dim_,3,opencv_caffe.EmbedParameter.input_dim_,,misc\caffe\opencv-caffe.pb.hpp,input_dim_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
1691,38564,ByteSizeLong,1,opencv_caffe.LayerParameter.ByteSizeLong,size_t opencv_caffe.LayerParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t LayerParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.LayerParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string bottom = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(bottom_.size());
  for (int i = 0, n = bottom_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      bottom_.Get(i));
  }

  // repeated string top = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(top_.size());
  for (int i = 0, n = top_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      top_.Get(i));
  }

  // repeated float loss_weight = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_loss_weight_size());
    size_t data_size = 4UL * count...",13206.0,13691.0,1.0,1.0,486.0,496,12,425,68,0,67,71,127,4,0,,0,67,0,0,0,size_t
1692,54950,SharedDtor,1,opencv_caffe.SaveOutputParameter.SharedDtor,void opencv_caffe.SaveOutputParameter.SharedDtor (),misc\caffe\opencv-caffe.pb.cc,"inline void SaveOutputParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  output_directory_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_name_prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_format_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_map_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_size_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}",18087.0,18094.0,1.0,1.0,8.0,21,3,15,7,0,5,1,1,0,0,,0,5,0,0,0,void
1693,5800,MergeFrom,1,opencv_caffe.BlobShape.MergeFrom,void opencv_caffe.BlobShape.MergeFrom (BlobShape),misc\caffe\opencv-caffe.pb.cc,"void BlobShape::MergeFrom(const BlobShape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.BlobShape)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  dim_.MergeFrom(from.dim_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",4193.0,4201.0,1.0,1.0,9.0,10,6,8,5,3,2,1,1,0,0,,0,2,2,1,1,void
1694,284345,InternalSwap,1,opencv_tensorflow.OpDef_AttrDef.InternalSwap,void opencv_tensorflow.OpDef_AttrDef.InternalSwap (OpDef_AttrDef*),misc\tensorflow\op_def.pb.cc,"void OpDef_AttrDef::InternalSwap(OpDef_AttrDef* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpDef_AttrDef, has_minimum_)
      + sizeof(OpDef_AttrDef::has_minim...",1114.0,1140.0,1.0,1.0,27.0,48,12,41,13,0,11,1,1,0,0,,0,11,2,1,1,void
1695,317120,fbb_,3,opencv_tflite.WhileOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
1696,317121,start_,3,opencv_tflite.WhileOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1697,317122,add_cond_subgraph_index,1,opencv_tflite.WhileOptionsBuilder.add_cond_subgraph_index,void opencv_tflite.WhileOptionsBuilder.add_cond_subgraph_index (int32_t),misc\tflite\schema_generated.hpp,"void add_cond_subgraph_index(int32_t cond_subgraph_index) {
    fbb_.AddElement<int32_t>(WhileOptions::VT_COND_SUBGRAPH_INDEX, cond_subgraph_index, 0);
  }",7297.0,7299.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
1698,144444,kernel_h_,3,opencv_caffe.PoolingParameter.kernel_h_,,misc\caffe\opencv-caffe.pb.hpp,kernel_h_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1699,317140,add_body_subgraph_index,1,opencv_tflite.WhileOptionsBuilder.add_body_subgraph_index,void opencv_tflite.WhileOptionsBuilder.add_body_subgraph_index (int32_t),misc\tflite\schema_generated.hpp,"void add_body_subgraph_index(int32_t body_subgraph_index) {
    fbb_.AddElement<int32_t>(WhileOptions::VT_BODY_SUBGRAPH_INDEX, body_subgraph_index, 0);
  }",7300.0,7302.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
1700,300757,file_level_enum_descriptors_types_2eproto,2,misc\tensorflow\types.pb.cc.file_level_enum_descriptors_types_2eproto,,misc\tensorflow\types.pb.cc,ANY file_level_enum_descriptors_types_2eproto,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1701,71388,SetCachedSize,1,opencv_caffe.MemoryDataParameter.SetCachedSize,void opencv_caffe.MemoryDataParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void MemoryDataParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",23147.0,23149.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
1702,5855,InternalSwap,1,opencv_caffe.BlobShape.InternalSwap,void opencv_caffe.BlobShape.InternalSwap (BlobShape*),misc\caffe\opencv-caffe.pb.cc,"void BlobShape::InternalSwap(BlobShape* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  dim_.InternalSwap(&other->dim_);
}",4214.0,4218.0,1.0,1.0,5.0,6,3,4,3,0,2,1,1,0,0,,0,2,2,1,1,void
1703,382690,addInput,1,cv.dnn.anonymous_namespace_11.DarknetImporter.addInput,"void cv.dnn.anonymous_namespace_11.DarknetImporter.addInput (ANY,int,int,Net,ANY)",src\darknet\darknet_importer.cpp,"void addInput(const std::string &name, int layerId, int inNum, Net &dstNet, std::string nn)
    {
        int idx;
        for (idx = (int)addedBlobs.size() - 1; idx >= 0; idx--)
        {
            if (addedBlobs[idx].name == name)
                break;
        }

        if (idx < 0)
        {
            CV_Error(Error::StsObjectNotFound, ""Can't find output blob \"""" + name + ""\"""");
            return;
        }

        dstNet.connect(addedBlobs[idx].layerId, addedBlobs[idx].outNum, layerId, inNum);
    }",168.0,184.0,5.0,5.0,17.0,17,9,16,7,0,4,5,5,1,0,,0,4,10,5,5,void
1704,71398,Clear,1,opencv_caffe.MemoryDataParameter.Clear,void opencv_caffe.MemoryDataParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void MemoryDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.MemoryDataParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&batch_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&width_) -
        reinterpret_cast<char*>(&batch_size_)) + sizeof(width_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",23151.0,23165.0,1.0,1.0,15.0,17,9,11,5,0,6,2,2,0,0,,0,6,0,0,0,void
1705,317158,WhileOptionsBuilder,1,opencv_tflite.WhileOptionsBuilder.WhileOptionsBuilder,ANY opencv_tflite.WhileOptionsBuilder.WhileOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit WhileOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",7303.0,7306.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1706,300778,descriptor_table_types_2eproto,2,misc\tensorflow\types.pb.cc.descriptor_table_types_2eproto,,misc\tensorflow\types.pb.cc,ANY descriptor_table_types_2eproto,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1707,317169,Finish,1,opencv_tflite.WhileOptionsBuilder.Finish,Offset<WhileOptions> opencv_tflite.WhileOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<WhileOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<WhileOptions>(end);
    return o;
  }",7307.0,7311.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<WhileOptions>
1708,5876,GetMetadata,1,opencv_caffe.BlobShape.GetMetadata,Metadata opencv_caffe.BlobShape.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata BlobShape::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[0]);
}",4220.0,4224.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
1709,55032,SetCachedSize,1,opencv_caffe.SaveOutputParameter.SetCachedSize,void opencv_caffe.SaveOutputParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void SaveOutputParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",18102.0,18104.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
1710,136958,descriptor,1,opencv_caffe.ExpParameter.descriptor,Descriptor opencv_caffe.ExpParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",11226.0,11228.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
1711,300801,descriptor_table_types_2eproto_getter,1,descriptor_table_types_2eproto_getter,DescriptorTable descriptor_table_types_2eproto_getter (),misc\tensorflow\types.pb.cc,"const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_types_2eproto_getter() {
  return &descriptor_table_types_2eproto;
}",55.0,57.0,25.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,DescriptorTable
1712,55042,Clear,1,opencv_caffe.SaveOutputParameter.Clear,void opencv_caffe.SaveOutputParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void SaveOutputParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.SaveOutputParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      output_directory_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      output_name_prefix_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      output_format_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      label_map_file_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      name_size_file_.ClearNonDefaultToEmpty();
    }
  }
  num_test_image_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",18106.0,18133.0,1.0,1.0,28.0,18,5,18,9,0,8,7,12,0,0,,0,8,0,0,0,void
1713,136964,GetDescriptor,1,opencv_caffe.ExpParameter.GetDescriptor,Descriptor opencv_caffe.ExpParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",11229.0,11231.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
1714,300814,DataType_descriptor,1,opencv_tensorflow.DataType_descriptor,EnumDescriptor opencv_tensorflow.DataType_descriptor (),misc\tensorflow\types.pb.cc,"const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_types_2eproto);
  return file_level_enum_descriptors_types_2eproto[0];
}",62.0,65.0,1.0,1.0,4.0,4,3,4,4,1,2,1,1,0,0,,0,2,0,0,0,EnumDescriptor
1715,136975,GetReflection,1,opencv_caffe.ExpParameter.GetReflection,Reflection opencv_caffe.ExpParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",11232.0,11234.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
1716,268054,file_level_metadata_function_2eproto,2,misc\tensorflow\function.pb.cc.file_level_metadata_function_2eproto,,misc\tensorflow\function.pb.cc,static ::PROTOBUF_NAMESPACE_ID::Metadata[5] file_level_metadata_function_2eproto,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1717,71448,_InternalParse,1,opencv_caffe.MemoryDataParameter._InternalParse,"const char* opencv_caffe.MemoryDataParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* MemoryDataParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 batch_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_batch_size(&has_bits);
          batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 channels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_channels(&has_bits);
          channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto han...",23167.0,23232.0,1.0,10.0,66.0,58,12,61,13,0,9,15,18,0,4,,0,5,4,2,2,const char*
1718,136986,default_instance,1,opencv_caffe.ExpParameter.default_instance,ExpParameter opencv_caffe.ExpParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const ExpParameter& default_instance() {
    return *internal_default_instance();
  }",11235.0,11237.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,ExpParameter
1719,136993,internal_default_instance,1,opencv_caffe.ExpParameter.internal_default_instance,ExpParameter opencv_caffe.ExpParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const ExpParameter* internal_default_instance() {
    return reinterpret_cast<const ExpParameter*>(
               &_ExpParameter_default_instance_);
  }",11238.0,11241.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,ExpParameter
1720,317221,fbb_,3,opencv_tflite.NonMaxSuppressionV4OptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1721,317222,start_,3,opencv_tflite.NonMaxSuppressionV4OptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1722,317223,NonMaxSuppressionV4OptionsBuilder,1,opencv_tflite.NonMaxSuppressionV4OptionsBuilder.NonMaxSuppressionV4OptionsBuilder,ANY opencv_tflite.NonMaxSuppressionV4OptionsBuilder.NonMaxSuppressionV4OptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit NonMaxSuppressionV4OptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",7336.0,7339.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1723,5934,set_has_num,1,opencv_caffe._Internal.set_has_num,void opencv_caffe._Internal.set_has_num (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_num(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }",4241.0,4243.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
1724,317234,Finish,1,opencv_tflite.NonMaxSuppressionV4OptionsBuilder.Finish,Offset<NonMaxSuppressionV4Options> opencv_tflite.NonMaxSuppressionV4OptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<NonMaxSuppressionV4Options> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<NonMaxSuppressionV4Options>(end);
    return o;
  }",7340.0,7344.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<NonMaxSuppressionV4Options>
1725,350003,~UniqueHandle,1,cv.dnn.cuda4dnn.csl.cublas.UniqueHandle.~UniqueHandle,ANY cv.dnn.cuda4dnn.csl.cublas.UniqueHandle.~UniqueHandle (),src\cuda4dnn\csl\cublas.hpp,"~UniqueHandle() noexcept {
            if (handle) {
                /* cublasDestroy won't throw if a valid handle is passed */
                CUDA4DNN_CHECK_CUBLAS(cublasDestroy(handle));
            }
        }",89.0,94.0,9.0,16.0,6.0,6,1,10,3,0,3,2,2,1,0,,0,3,0,0,0,ANY
1726,284469,GetMetadata,1,opencv_tensorflow.OpDef_AttrDef.GetMetadata,Metadata opencv_tensorflow.OpDef_AttrDef.GetMetadata (),misc\tensorflow\op_def.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata OpDef_AttrDef::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_op_5fdef_2eproto_getter, &descriptor_table_op_5fdef_2eproto_once,
      file_level_metadata_op_5fdef_2eproto[1]);
}",1142.0,1146.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
1727,5945,set_has_channels,1,opencv_caffe._Internal.set_has_channels,void opencv_caffe._Internal.set_has_channels (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_channels(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }",23093.0,23095.0,3.0,3.0,3.0,2,2,1,1,3,0,1,1,0,0,,0,0,2,1,1,void
1728,5956,set_has_height,1,opencv_caffe._Internal.set_has_height,void opencv_caffe._Internal.set_has_height (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }",23096.0,23098.0,3.0,3.0,3.0,2,2,1,1,3,0,1,1,0,0,,0,0,2,1,1,void
1729,104261,_InternalSerialize,1,opencv_caffe.NormalizedBBox._InternalSerialize,"uint8_t opencv_caffe.NormalizedBBox._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* NormalizedBBox::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.NormalizedBBox)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float xmin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_xmin(), target);
  }

  // optional float ymin = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_ymin(), target);
  }

  // optional float xmax = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_xmax(),...",32738.0,32799.0,1.0,1.0,62.0,79,8,88,10,0,1,10,10,0,0,,0,1,4,2,2,uint8_t
1730,284493,deprecation,1,opencv_tensorflow.OpDef._Internal.deprecation,OpDeprecation opencv_tensorflow.OpDef._Internal.deprecation (OpDef*),misc\tensorflow\op_def.pb.cc,"const ::opencv_tensorflow::OpDeprecation&
OpDef::_Internal::deprecation(const OpDef* msg) {
  return *msg->deprecation_;
}",1155.0,1158.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,OpDeprecation
1731,55119,_InternalParse,1,opencv_caffe.SaveOutputParameter._InternalParse,"const char* opencv_caffe.SaveOutputParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* SaveOutputParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string output_directory = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_output_directory();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, ""opencv_caffe.SaveOutputParameter.output_directory"");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string output_name_prefix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast...",18135.0,18233.0,1.0,10.0,99.0,76,12,99,11,0,3,19,24,0,1,,0,2,4,2,2,const char*
1732,5967,set_has_width,1,opencv_caffe._Internal.set_has_width,void opencv_caffe._Internal.set_has_width (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }",23099.0,23101.0,3.0,3.0,3.0,2,2,1,1,3,0,1,1,0,0,,0,0,2,1,1,void
1733,268114,descriptor_table_function_2eproto_once,2,misc\tensorflow\function.pb.cc.descriptor_table_function_2eproto_once,,misc\tensorflow\function.pb.cc,ANY descriptor_table_function_2eproto_once,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1734,268115,descriptor_table_function_2eproto,2,misc\tensorflow\function.pb.cc.descriptor_table_function_2eproto,,misc\tensorflow\function.pb.cc,ANY descriptor_table_function_2eproto,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1735,5978,shape,1,opencv_caffe.BlobProto._Internal.shape,BlobShape opencv_caffe.BlobProto._Internal.shape (BlobProto*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::BlobShape&
BlobProto::_Internal::shape(const BlobProto* msg) {
  return *msg->shape_;
}",4255.0,4258.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,BlobShape
1736,317275,start_,3,opencv_tflite.NonMaxSuppressionV5OptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1737,317276,NonMaxSuppressionV5OptionsBuilder,1,opencv_tflite.NonMaxSuppressionV5OptionsBuilder.NonMaxSuppressionV5OptionsBuilder,ANY opencv_tflite.NonMaxSuppressionV5OptionsBuilder.NonMaxSuppressionV5OptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit NonMaxSuppressionV5OptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",7365.0,7368.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1738,317274,fbb_,3,opencv_tflite.NonMaxSuppressionV5OptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1739,317287,Finish,1,opencv_tflite.NonMaxSuppressionV5OptionsBuilder.Finish,Offset<NonMaxSuppressionV5Options> opencv_tflite.NonMaxSuppressionV5OptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<NonMaxSuppressionV5Options> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<NonMaxSuppressionV5Options>(end);
    return o;
  }",7369.0,7373.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<NonMaxSuppressionV5Options>
1740,268138,descriptor_table_function_2eproto_getter,1,descriptor_table_function_2eproto_getter,DescriptorTable descriptor_table_function_2eproto_getter (),misc\tensorflow\function.pb.cc,"const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_function_2eproto_getter() {
  return &descriptor_table_function_2eproto;
}",183.0,185.0,25.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,DescriptorTable
1741,307298,CreateCustomQuantizationDirect,1,opencv_tflite.CreateCustomQuantizationDirect,"Offset<CustomQuantization> opencv_tflite.CreateCustomQuantizationDirect (ANY,ANY*)",misc\tflite\schema_generated.hpp,"inline ::flatbuffers::Offset<CustomQuantization> CreateCustomQuantizationDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *custom = nullptr) {
  if (custom) { _fbb.ForceVectorAlignment(custom->size(), sizeof(uint8_t), 16); }
  auto custom__ = custom ? _fbb.CreateVector<uint8_t>(*custom) : 0;
  return opencv_tflite::CreateCustomQuantization(
      _fbb,
      custom__);
}",2335.0,2343.0,1.0,1.0,9.0,10,8,12,5,0,1,2,2,0,1,,0,0,4,2,2,Offset<CustomQuantization>
1742,235377,_InternalSerialize,1,opencv_onnx.TensorProto._InternalSerialize,"uint8_t opencv_onnx.TensorProto._InternalSerialize (uint8_t*,ANY*)",misc\onnx\opencv-onnx.pb.cc,"uint8_t* TensorProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_onnx.TensorProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 dims = 1;
  for (int i = 0, n = this->_internal_dims_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_dims(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .opencv_onnx.TensorProto.DataType data_type = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_data_type(), target);
  }

  // optional .opencv_onnx.TensorProto.Segment segment = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = :...",4130.0,4233.0,1.0,1.0,104.0,110,8,113,19,0,5,14,14,0,1,,0,5,4,2,2,uint8_t
1743,350080,get,1,cv.dnn.cuda4dnn.csl.cublas.UniqueHandle.get,cublasHandle_t cv.dnn.cuda4dnn.csl.cublas.UniqueHandle.get (),src\cuda4dnn\csl\cublas.hpp,"cublasHandle_t get() const noexcept {
            CV_Assert(handle);
            return handle;
        }",109.0,112.0,9.0,9.0,4.0,0,0,2,1,0,2,1,1,0,0,,0,2,0,0,0,cublasHandle_t
1744,350088,operator bool,1,cv.dnn.cuda4dnn.csl.cublas.UniqueHandle.operator bool,ANY cv.dnn.cuda4dnn.csl.cublas.UniqueHandle.operator bool (),src\cuda4dnn\csl\cublas.hpp,explicit operator bool() const noexcept { return static_cast<bool>(handle); },115.0,115.0,9.0,85.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,ANY
1745,317327,fbb_,3,opencv_tflite.ScatterNdOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1746,317328,start_,3,opencv_tflite.ScatterNdOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1747,350097,handle,3,cv.dnn.cuda4dnn.csl.cublas.UniqueHandle.handle,,src\cuda4dnn\csl\cublas.hpp,handle,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
1748,317329,ScatterNdOptionsBuilder,1,opencv_tflite.ScatterNdOptionsBuilder.ScatterNdOptionsBuilder,ANY opencv_tflite.ScatterNdOptionsBuilder.ScatterNdOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit ScatterNdOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",7394.0,7397.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1749,317340,Finish,1,opencv_tflite.ScatterNdOptionsBuilder.Finish,Offset<ScatterNdOptions> opencv_tflite.ScatterNdOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<ScatterNdOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ScatterNdOptions>(end);
    return o;
  }",7398.0,7402.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<ScatterNdOptions>
1750,137118,GetCachedSize,1,opencv_caffe.ExpParameter.GetCachedSize,int opencv_caffe.ExpParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },11286.0,11286.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
1751,366506,calculate,1,cv.dnn.cuda4dnn.ReLUOp.calculate,"void cv.dnn.cuda4dnn.ReLUOp.calculate (ANY,ANY)",src\cuda4dnn\primitives\activation.hpp,"void calculate(csl::TensorSpan<T> output, csl::TensorView<T> input) const
        {
            kernels::relu<T>(stream, output, input, slope);
        }",51.0,54.0,9.0,9.0,4.0,1,1,5,5,0,2,1,1,0,0,,0,2,4,2,2,void
1752,350128,operator bool,1,cv.dnn.cuda4dnn.csl.cublas.Handle.operator bool,ANY cv.dnn.cuda4dnn.csl.cublas.Handle.operator bool (),src\cuda4dnn\csl\cublas.hpp,explicit operator bool() const noexcept { return static_cast<bool>(handle); },146.0,146.0,9.0,85.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,ANY
1753,350136,get,1,cv.dnn.cuda4dnn.csl.cublas.Handle.get,cublasHandle_t cv.dnn.cuda4dnn.csl.cublas.Handle.get (),src\cuda4dnn\csl\cublas.hpp,"cublasHandle_t get() const noexcept {
            CV_Assert(handle);
            return handle->get();
        }",149.0,152.0,9.0,9.0,4.0,1,1,2,1,0,2,1,1,0,0,,0,2,0,0,0,cublasHandle_t
1754,87992,ByteSizeLong,1,opencv_caffe.WindowDataParameter.ByteSizeLong,size_t opencv_caffe.WindowDataParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t WindowDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.WindowDataParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string source = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source());
    }

    // optional string mean_file = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mean_file());
    }

    // optional string crop_mode = 11 [default = ""warp""];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
     ...",28283.0,28370.0,1.0,1.0,88.0,72,9,56,7,0,2,16,29,0,0,,0,2,0,0,0,size_t
1755,366521,slope,3,cv.dnn.cuda4dnn.ReLUOp.slope,,src\cuda4dnn\primitives\activation.hpp,slope,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1756,366520,stream,3,cv.dnn.cuda4dnn.ReLUOp.stream,,src\cuda4dnn\primitives\activation.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1757,366530,calculate,1,cv.dnn.cuda4dnn.ClippedReLUOp.calculate,"void cv.dnn.cuda4dnn.ClippedReLUOp.calculate (ANY,ANY)",src\cuda4dnn\primitives\activation.hpp,"void calculate(csl::TensorSpan<T> output, csl::TensorView<T> input) const
        {
            kernels::clipped_relu<T>(stream, output, input, min, max);
        }",67.0,70.0,9.0,9.0,4.0,1,1,6,6,0,3,1,1,0,0,,0,3,4,2,2,void
1758,350147,handle,3,cv.dnn.cuda4dnn.csl.cublas.Handle.handle,,src\cuda4dnn\csl\cublas.hpp,handle,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1759,317380,fbb_,3,opencv_tflite.SelectV2OptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1760,317381,start_,3,opencv_tflite.SelectV2OptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1761,317382,SelectV2OptionsBuilder,1,opencv_tflite.SelectV2OptionsBuilder.SelectV2OptionsBuilder,ANY opencv_tflite.SelectV2OptionsBuilder.SelectV2OptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit SelectV2OptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",7423.0,7426.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1762,268227,SetCachedSize,1,opencv_tensorflow.FunctionDefLibrary.SetCachedSize,void opencv_tensorflow.FunctionDefLibrary.SetCachedSize (int),misc\tensorflow\function.pb.cc,"void FunctionDefLibrary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",236.0,238.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
1763,6088,SharedCtor,1,opencv_caffe.BlobProto.SharedCtor,void opencv_caffe.BlobProto.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void BlobProto::SharedCtor() {
raw_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  raw_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&shape_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&raw_data_type_) -
    reinterpret_cast<char*>(&shape_)) + sizeof(raw_data_type_));
}",4299.0,4308.0,1.0,1.0,10.0,20,6,7,5,0,5,1,1,0,0,,0,5,0,0,0,void
1764,268237,Clear,1,opencv_tensorflow.FunctionDefLibrary.Clear,void opencv_tensorflow.FunctionDefLibrary.Clear (),misc\tensorflow\function.pb.cc,"void FunctionDefLibrary::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_tensorflow.FunctionDefLibrary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  function_.Clear();
  gradient_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",240.0,249.0,1.0,1.0,10.0,5,3,5,4,0,2,1,1,0,0,,0,2,0,0,0,void
1765,317393,Finish,1,opencv_tflite.SelectV2OptionsBuilder.Finish,Offset<SelectV2Options> opencv_tflite.SelectV2OptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<SelectV2Options> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SelectV2Options>(end);
    return o;
  }",7427.0,7431.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<SelectV2Options>
1766,366546,min,3,cv.dnn.cuda4dnn.ClippedReLUOp.min,,src\cuda4dnn\primitives\activation.hpp,min,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1767,366547,max,3,cv.dnn.cuda4dnn.ClippedReLUOp.max,,src\cuda4dnn\primitives\activation.hpp,max,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1768,366545,stream,3,cv.dnn.cuda4dnn.ClippedReLUOp.stream,,src\cuda4dnn\primitives\activation.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1769,366549,ChannelwiseReLUOp,1,cv.dnn.cuda4dnn.ChannelwiseReLUOp.ChannelwiseReLUOp,"ANY cv.dnn.cuda4dnn.ChannelwiseReLUOp.ChannelwiseReLUOp (ANY,Mat)",src\cuda4dnn\primitives\activation.hpp,"ChannelwiseReLUOp(csl::Stream stream_, const Mat& slope)
                : stream(std::move(stream_))
        {
            CV_Assert(!slope.empty());
            slopeTensor = csl::makeTensorHeader<T>(slope);
            csl::copyMatToTensor<T>(slope, slopeTensor, stream);
        }",80.0,86.0,9.0,9.0,7.0,11,7,10,5,0,3,1,1,0,0,,0,3,4,2,2,ANY
1770,366581,calculate,1,cv.dnn.cuda4dnn.ChannelwiseReLUOp.calculate,"void cv.dnn.cuda4dnn.ChannelwiseReLUOp.calculate (ANY,ANY)",src\cuda4dnn\primitives\activation.hpp,"void calculate(csl::TensorSpan<T> output, csl::TensorView<T> input) const
        {
            CV_Assert(input.get_axis_size(1) == slopeTensor.size());
            std::size_t inner_size = input.size_range(2, input.rank());
            kernels::axiswise_relu<T>(stream, output, input, inner_size, slopeTensor);
        }",88.0,93.0,9.0,9.0,6.0,7,3,11,6,0,3,1,1,0,0,,0,3,4,2,2,void
1771,317433,fbb_,3,opencv_tflite.DensifyOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1772,317434,start_,3,opencv_tflite.DensifyOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1773,317435,DensifyOptionsBuilder,1,opencv_tflite.DensifyOptionsBuilder.DensifyOptionsBuilder,ANY opencv_tflite.DensifyOptionsBuilder.DensifyOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit DensifyOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",7452.0,7455.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1774,284671,SharedCtor,1,opencv_tensorflow.OpDef.SharedCtor,void opencv_tensorflow.OpDef.SharedCtor (),misc\tensorflow\op_def.pb.cc,"inline void OpDef::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
summary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  summary_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast...",1212.0,1229.0,1.0,1.0,18.0,28,6,13,7,0,7,1,1,0,0,,0,7,0,0,0,void
1775,317446,Finish,1,opencv_tflite.DensifyOptionsBuilder.Finish,Offset<DensifyOptions> opencv_tflite.DensifyOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<DensifyOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DensifyOptions>(end);
    return o;
  }",7456.0,7460.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<DensifyOptions>
1776,6151,SharedDtor,1,opencv_caffe.BlobProto.SharedDtor,void opencv_caffe.BlobProto.SharedDtor (),misc\caffe\opencv-caffe.pb.cc,"inline void BlobProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  raw_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete shape_;
}",4317.0,4321.0,1.0,1.0,5.0,7,5,4,4,0,3,2,2,1,0,,0,3,0,0,0,void
1777,71702,_InternalSerialize,1,opencv_caffe.MemoryDataParameter._InternalSerialize,"uint8_t opencv_caffe.MemoryDataParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* MemoryDataParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.MemoryDataParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 batch_size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_batch_size(), target);
  }

  // optional uint32 channels = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channels(), target);
  }

  // optional uint32 height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUI...",23234.0,23271.0,1.0,1.0,38.0,47,8,52,10,0,1,6,6,0,0,,0,1,4,2,2,uint8_t
1778,366619,stream,3,cv.dnn.cuda4dnn.ChannelwiseReLUOp.stream,,src\cuda4dnn\primitives\activation.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1779,366620,slopeTensor,3,cv.dnn.cuda4dnn.ChannelwiseReLUOp.slopeTensor,,src\cuda4dnn\primitives\activation.hpp,slopeTensor,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
1780,366627,calculate,1,cv.dnn.cuda4dnn.TanHOp.calculate,"void cv.dnn.cuda4dnn.TanHOp.calculate (ANY,ANY)",src\cuda4dnn\primitives\activation.hpp,"void calculate(csl::TensorSpan<T> output, csl::TensorView<T> input) const
        {
            kernels::tanh<T>(stream, output, input);
        }",105.0,108.0,9.0,9.0,4.0,1,1,4,4,0,1,1,1,0,0,,0,1,4,2,2,void
1781,22570,_InternalSerialize,1,opencv_caffe.SolverParameter._InternalSerialize,"uint8_t opencv_caffe.SolverParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* SolverParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.SolverParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string train_net = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_train_net().data(), static_cast<int>(this->_internal_train_net().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      ""opencv_caffe.SolverParameter.train_net"");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_train_net(), target);
  }

  // repeated string test_net = 2;
  for (int i = 0, n = this->_internal_test_net_size(); i < n; i++) {
    const auto& s = this->_internal_test_net(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8String...",8858.0,9154.0,1.0,1.0,297.0,404,8,419,14,0,6,42,42,0,3,,0,6,4,2,2,uint8_t
1782,317486,fbb_,3,opencv_tflite.SegmentSumOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1783,317487,start_,3,opencv_tflite.SegmentSumOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1784,317488,SegmentSumOptionsBuilder,1,opencv_tflite.SegmentSumOptionsBuilder.SegmentSumOptionsBuilder,ANY opencv_tflite.SegmentSumOptionsBuilder.SegmentSumOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit SegmentSumOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",7481.0,7484.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1785,366640,stream,3,cv.dnn.cuda4dnn.TanHOp.stream,,src\cuda4dnn\primitives\activation.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1786,383026,net,3,cv.dnn.darknet.setLayersParams.net,,src\darknet\darknet_io.cpp,*net,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,21,0,1,1,0,0,,0,0,0,0,0,
1787,383027,layer_id,3,cv.dnn.darknet.setLayersParams.layer_id,,src\darknet\darknet_io.cpp,layer_id,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,37,0,1,1,0,0,,0,0,0,0,0,
1788,383028,last_layer,3,cv.dnn.darknet.setLayersParams.last_layer,,src\darknet\darknet_io.cpp,last_layer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,55,0,1,1,0,0,,0,0,0,0,0,
1789,383029,fused_layer_names,3,cv.dnn.darknet.setLayersParams.fused_layer_names,,src\darknet\darknet_io.cpp,fused_layer_names,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,23,0,1,1,0,0,,0,0,0,0,0,
1790,6196,SetCachedSize,1,opencv_caffe.BlobProto.SetCachedSize,void opencv_caffe.BlobProto.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void BlobProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",4329.0,4331.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
1791,366647,calculate,1,cv.dnn.cuda4dnn.SwishOp.calculate,"void cv.dnn.cuda4dnn.SwishOp.calculate (ANY,ANY)",src\cuda4dnn\primitives\activation.hpp,"void calculate(csl::TensorSpan<T> output, csl::TensorView<T> input) const
        {
            kernels::swish<T>(stream, output, input);
        }",119.0,122.0,9.0,9.0,4.0,1,1,4,4,0,1,1,1,0,0,,0,1,4,2,2,void
1792,317499,Finish,1,opencv_tflite.SegmentSumOptionsBuilder.Finish,Offset<SegmentSumOptions> opencv_tflite.SegmentSumOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<SegmentSumOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SegmentSumOptions>(end);
    return o;
  }",7485.0,7489.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<SegmentSumOptions>
1793,383035,setLayerBlobs,1,cv.dnn.darknet.setLayersParams.setLayerBlobs,"void cv.dnn.darknet.setLayersParams.setLayerBlobs (int,ANY)",src\darknet\darknet_io.cpp,"void setLayerBlobs(int i, std::vector<cv::Mat> blobs)
                {
                    cv::dnn::LayerParams &params = net->layers[i].layerParams;
                    params.blobs = blobs;
                }",107.0,111.0,17.0,17.0,5.0,6,4,5,4,0,1,1,1,0,0,,0,1,4,2,2,void
1794,6206,Clear,1,opencv_caffe.BlobProto.Clear,void opencv_caffe.BlobProto.Clear (),misc\caffe\opencv-caffe.pb.cc,"void BlobProto::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.BlobProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  diff_.Clear();
  double_data_.Clear();
  double_diff_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      raw_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(shape_ != nullptr);
      shape_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&raw_data_type_) -
        reinterpret_cast<char*>(&num_)) + sizeof(raw_data_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",4333.0,4360.0,1.0,1.0,28.0,27,11,21,11,0,13,5,7,0,0,,0,13,0,0,0,void
1795,366660,stream,3,cv.dnn.cuda4dnn.SwishOp.stream,,src\cuda4dnn\primitives\activation.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1796,137288,_has_bits_,3,opencv_caffe.ExpParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
1797,137289,_cached_size_,3,opencv_caffe.ExpParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1798,137290,shift_,3,opencv_caffe.ExpParameter.shift_,,misc\caffe\opencv-caffe.pb.hpp,shift_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
1799,366667,calculate,1,cv.dnn.cuda4dnn.MishOp.calculate,"void cv.dnn.cuda4dnn.MishOp.calculate (ANY,ANY)",src\cuda4dnn\primitives\activation.hpp,"void calculate(csl::TensorSpan<T> output, csl::TensorView<T> input) const
        {
            kernels::mish<T>(stream, output, input);
        }",133.0,136.0,9.0,9.0,4.0,1,1,4,4,0,1,1,1,0,0,,0,1,4,2,2,void
1800,137291,base_,3,opencv_caffe.ExpParameter.base_,,misc\caffe\opencv-caffe.pb.hpp,base_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
1801,137292,scale_,3,opencv_caffe.ExpParameter.scale_,,misc\caffe\opencv-caffe.pb.hpp,scale_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
1802,383056,setBatchNorm,1,cv.dnn.darknet.setLayersParams.setBatchNorm,void cv.dnn.darknet.setLayersParams.setBatchNorm (),src\darknet\darknet_io.cpp,"void setBatchNorm()
                {
                    cv::dnn::LayerParams bn_param;

                    bn_param.name = ""BatchNorm-name"";
                    bn_param.type = ""BatchNorm"";
                    bn_param.set<bool>(""has_weight"", true);
                    bn_param.set<bool>(""has_bias"", true);
                    bn_param.set<float>(""eps"", 1E-6);	// .000001f in Darknet Yolo

                    darknet::LayerParameter lp;
                    std::string layer_name = cv::format(""bn_%d"", layer_id);
                    lp.layer_name = layer_name;
                    lp.layer_type = bn_param.type;
                    lp.layerParams = bn_param;
                    lp.bottom_indexes.push_back(last_layer);
                    last_layer = layer_name;
                    net->layers.push_back(lp);
                }",113.0,131.0,17.0,17.0,19.0,21,3,20,7,0,4,1,1,0,0,,0,4,0,0,0,void
1803,284756,SharedDtor,1,opencv_tensorflow.OpDef.SharedDtor,void opencv_tensorflow.OpDef.SharedDtor (),misc\tensorflow\op_def.pb.cc,"inline void OpDef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  summary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete deprecation_;
}",1238.0,1244.0,1.0,1.0,7.0,15,5,10,6,0,5,2,2,1,0,,0,5,0,0,0,void
1804,366680,stream,3,cv.dnn.cuda4dnn.MishOp.stream,,src\cuda4dnn\primitives\activation.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1805,104537,ByteSizeLong,1,opencv_caffe.NormalizedBBox.ByteSizeLong,size_t opencv_caffe.NormalizedBBox.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t NormalizedBBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.NormalizedBBox)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float xmin = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float ymin = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float xmax = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float ymax = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional int32 label = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_label());
    }

    // optional bool d...",32801.0,32853.0,1.0,1.0,53.0,34,9,27,7,0,2,10,18,0,0,,0,2,0,0,0,size_t
1806,366687,calculate,1,cv.dnn.cuda4dnn.SigmoidOp.calculate,"void cv.dnn.cuda4dnn.SigmoidOp.calculate (ANY,ANY)",src\cuda4dnn\primitives\activation.hpp,"void calculate(csl::TensorSpan<T> output, csl::TensorView<T> input) const
        {
            kernels::sigmoid<T>(stream, output, input);
        }",147.0,150.0,9.0,9.0,4.0,1,1,4,4,0,1,1,1,0,0,,0,1,4,2,2,void
1807,317539,fbb_,3,opencv_tflite.BatchMatMulOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1808,317540,start_,3,opencv_tflite.BatchMatMulOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1809,317541,add_adj_x,1,opencv_tflite.BatchMatMulOptionsBuilder.add_adj_x,void opencv_tflite.BatchMatMulOptionsBuilder.add_adj_x (bool),misc\tflite\schema_generated.hpp,"void add_adj_x(bool adj_x) {
    fbb_.AddElement<uint8_t>(BatchMatMulOptions::VT_ADJ_X, static_cast<uint8_t>(adj_x), 0);
  }",7527.0,7529.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
1810,399466,getWeights,1,cv.dnn.FastConv.getWeights,float* cv.dnn.FastConv.getWeights (),src\layers\cpu_kernels\convolution.cpp,"float* FastConv::getWeights()
{
    return alignPtr(weightsBuf.data(), VEC_ALIGN);
}",67.0,70.0,1.0,1.0,4.0,1,1,2,2,0,1,1,1,0,0,,0,1,0,0,0,float*
1811,366700,stream,3,cv.dnn.cuda4dnn.SigmoidOp.stream,,src\cuda4dnn\primitives\activation.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1812,307349,start_,3,opencv_tflite.QuantizationParametersBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1813,307350,add_min,1,opencv_tflite.QuantizationParametersBuilder.add_min,void opencv_tflite.QuantizationParametersBuilder.add_min (ANY),misc\tflite\schema_generated.hpp,"void add_min(::flatbuffers::Offset<::flatbuffers::Vector<float>> min) {
    fbb_.AddOffset(QuantizationParameters::VT_MIN, min);
  }",2407.0,2409.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
1814,366708,calculate,1,cv.dnn.cuda4dnn.ELUOp.calculate,"void cv.dnn.cuda4dnn.ELUOp.calculate (ANY,ANY)",src\cuda4dnn\primitives\activation.hpp,"void calculate(csl::TensorSpan<T> output, csl::TensorView<T> input) const
        {
            kernels::elu<T>(stream, output, input, alpha);
        }",161.0,164.0,9.0,9.0,4.0,1,1,5,5,0,2,1,1,0,0,,0,2,4,2,2,void
1815,399477,getWeightsWino,1,cv.dnn.FastConv.getWeightsWino,float* cv.dnn.FastConv.getWeightsWino (),src\layers\cpu_kernels\convolution.cpp,"float* FastConv::getWeightsWino()
{
    return alignPtr(weightsWinoBuf.data(), VEC_ALIGN);
}",72.0,75.0,1.0,1.0,4.0,1,1,2,2,0,1,1,1,0,0,,0,1,0,0,0,float*
1816,317561,add_adj_y,1,opencv_tflite.BatchMatMulOptionsBuilder.add_adj_y,void opencv_tflite.BatchMatMulOptionsBuilder.add_adj_y (bool),misc\tflite\schema_generated.hpp,"void add_adj_y(bool adj_y) {
    fbb_.AddElement<uint8_t>(BatchMatMulOptions::VT_ADJ_Y, static_cast<uint8_t>(adj_y), 0);
  }",7530.0,7532.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
1817,399488,getWeightsFP16,1,cv.dnn.FastConv.getWeightsFP16,float16_t cv.dnn.FastConv.getWeightsFP16 (),src\layers\cpu_kernels\convolution.cpp,"float16_t* FastConv::getWeightsFP16()
{
    return alignPtr(weightsBuf_FP16.data(), VEC_ALIGN);
}",77.0,80.0,1.0,1.0,4.0,1,1,2,2,0,1,1,1,0,0,,0,1,0,0,0,float16_t
1818,366722,stream,3,cv.dnn.cuda4dnn.ELUOp.stream,,src\cuda4dnn\primitives\activation.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1819,366723,alpha,3,cv.dnn.cuda4dnn.ELUOp.alpha,,src\cuda4dnn\primitives\activation.hpp,alpha,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1820,366730,calculate,1,cv.dnn.cuda4dnn.AbsValOp.calculate,"void cv.dnn.cuda4dnn.AbsValOp.calculate (ANY,ANY)",src\cuda4dnn\primitives\activation.hpp,"void calculate(csl::TensorSpan<T> output, csl::TensorView<T> input) const
        {
            kernels::abs<T>(stream, output, input);
        }",176.0,179.0,9.0,9.0,4.0,1,1,4,4,0,1,1,1,0,0,,0,1,4,2,2,void
1821,399499,getWeightsWinoFP16,1,cv.dnn.FastConv.getWeightsWinoFP16,float16_t cv.dnn.FastConv.getWeightsWinoFP16 (),src\layers\cpu_kernels\convolution.cpp,"float16_t* FastConv::getWeightsWinoFP16()
{
    return alignPtr(weightsWinoBuf_FP16.data(), VEC_ALIGN);
}",82.0,85.0,1.0,1.0,4.0,1,1,2,2,0,1,1,1,0,0,,0,1,0,0,0,float16_t
1822,317581,add_asymmetric_quantize_inputs,1,opencv_tflite.BatchMatMulOptionsBuilder.add_asymmetric_quantize_inputs,void opencv_tflite.BatchMatMulOptionsBuilder.add_asymmetric_quantize_inputs (bool),misc\tflite\schema_generated.hpp,"void add_asymmetric_quantize_inputs(bool asymmetric_quantize_inputs) {
    fbb_.AddElement<uint8_t>(BatchMatMulOptions::VT_ASYMMETRIC_QUANTIZE_INPUTS, static_cast<uint8_t>(asymmetric_quantize_inputs), 0);
  }",7533.0,7535.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
1823,284823,SetCachedSize,1,opencv_tensorflow.OpDef.SetCachedSize,void opencv_tensorflow.OpDef.SetCachedSize (int),misc\tensorflow\op_def.pb.cc,"void OpDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",1252.0,1254.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
1824,366743,stream,3,cv.dnn.cuda4dnn.AbsValOp.stream,,src\cuda4dnn\primitives\activation.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1825,6299,_InternalParse,1,opencv_caffe.BlobProto._InternalParse,"const char* opencv_caffe.BlobProto._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* BlobProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 num = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_num(&has_bits);
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 channels = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_channels(&has_bits);
          channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_u...",4362.0,4501.0,1.0,10.0,140.0,103,12,119,16,0,10,30,43,1,5,,0,6,4,2,2,const char*
1826,366750,calculate,1,cv.dnn.cuda4dnn.BNLLOp.calculate,"void cv.dnn.cuda4dnn.BNLLOp.calculate (ANY,ANY)",src\cuda4dnn\primitives\activation.hpp,"void calculate(csl::TensorSpan<T> output, csl::TensorView<T> input) const
        {
            kernels::bnll<T>(stream, output, input);
        }",190.0,193.0,9.0,9.0,4.0,1,1,4,4,0,1,1,1,0,0,,0,1,4,2,2,void
1827,284833,Clear,1,opencv_tensorflow.OpDef.Clear,void opencv_tensorflow.OpDef.Clear (),misc\tensorflow\op_def.pb.cc,"void OpDef::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_tensorflow.OpDef)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_arg_.Clear();
  output_arg_.Clear();
  attr_.Clear();
  name_.ClearToEmpty();
  summary_.ClearToEmpty();
  description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && deprecation_ != nullptr) {
    delete deprecation_;
  }
  deprecation_ = nullptr;
  ::memset(&is_commutative_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allows_uninitialized_input_) -
      reinterpret_cast<char*>(&is_commutative_)) + sizeof(allows_uninitialized_input_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",1256.0,1276.0,1.0,1.0,21.0,24,11,16,11,0,13,2,2,1,0,,0,13,0,0,0,void
1828,317601,BatchMatMulOptionsBuilder,1,opencv_tflite.BatchMatMulOptionsBuilder.BatchMatMulOptionsBuilder,ANY opencv_tflite.BatchMatMulOptionsBuilder.BatchMatMulOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit BatchMatMulOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",7536.0,7539.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1829,366763,stream,3,cv.dnn.cuda4dnn.BNLLOp.stream,,src\cuda4dnn\primitives\activation.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1830,317612,Finish,1,opencv_tflite.BatchMatMulOptionsBuilder.Finish,Offset<BatchMatMulOptions> opencv_tflite.BatchMatMulOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<BatchMatMulOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<BatchMatMulOptions>(end);
    return o;
  }",7540.0,7544.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<BatchMatMulOptions>
1831,366770,calculate,1,cv.dnn.cuda4dnn.CeilOp.calculate,"void cv.dnn.cuda4dnn.CeilOp.calculate (ANY,ANY)",src\cuda4dnn\primitives\activation.hpp,"void calculate(csl::TensorSpan<T> output, csl::TensorView<T> input) const
        {
            kernels::ceil<T>(stream, output, input);
        }",204.0,207.0,9.0,9.0,4.0,1,1,4,4,0,1,1,1,0,0,,0,1,4,2,2,void
1832,137398,descriptor,1,opencv_caffe.FlattenParameter.descriptor,Descriptor opencv_caffe.FlattenParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",11414.0,11416.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
1833,71866,ByteSizeLong,1,opencv_caffe.MemoryDataParameter.ByteSizeLong,size_t opencv_caffe.MemoryDataParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t MemoryDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.MemoryDataParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 batch_size = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_batch_size());
    }

    // optional uint32 channels = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channels());
    }

    // optional uint32 height = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
    }

    // optional uint32 wid...",23273.0,23305.0,1.0,1.0,33.0,31,8,28,7,0,2,6,10,0,0,,0,2,0,0,0,size_t
1834,137404,GetDescriptor,1,opencv_caffe.FlattenParameter.GetDescriptor,Descriptor opencv_caffe.FlattenParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",11417.0,11419.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
1835,55486,_InternalSerialize,1,opencv_caffe.SaveOutputParameter._InternalSerialize,"uint8_t opencv_caffe.SaveOutputParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* SaveOutputParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.SaveOutputParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string output_directory = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_output_directory().data(), static_cast<int>(this->_internal_output_directory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      ""opencv_caffe.SaveOutputParameter.output_directory"");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_output_directory(), target);
  }

  // optional string output_name_prefix = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this...",18235.0,18304.0,1.0,1.0,70.0,98,8,75,10,0,1,8,8,0,0,,0,1,4,2,2,uint8_t
1836,366783,stream,3,cv.dnn.cuda4dnn.CeilOp.stream,,src\cuda4dnn\primitives\activation.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1837,366790,calculate,1,cv.dnn.cuda4dnn.FloorOp.calculate,"void cv.dnn.cuda4dnn.FloorOp.calculate (ANY,ANY)",src\cuda4dnn\primitives\activation.hpp,"void calculate(csl::TensorSpan<T> output, csl::TensorView<T> input) const
        {
            kernels::floor<T>(stream, output, input);
        }",218.0,221.0,9.0,9.0,4.0,1,1,4,4,0,1,1,1,0,0,,0,1,4,2,2,void
1838,88262,MergeFrom,1,opencv_caffe.WindowDataParameter.MergeFrom,void opencv_caffe.WindowDataParameter.MergeFrom (WindowDataParameter),misc\caffe\opencv-caffe.pb.cc,"void WindowDataParameter::MergeFrom(const WindowDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.WindowDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_source(from._internal_source());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_mean_file(from._internal_mean_file());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_crop_mode(from._internal_crop_mode());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_root_folder(from._internal_root_folder());
    }
    if (cached_has_bits & 0x00000010u) {
      batch_size_ = from.batch_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      crop_size_ = from.crop_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      mirror_ = from.mirror_;
...",28385.0,28438.0,1.0,1.0,54.0,50,8,49,14,2,21,16,29,0,0,,0,21,2,1,1,void
1839,301254,GetEnumDescriptor,1,GetEnumDescriptor<opencv_tensorflow.DataType>,EnumDescriptor GetEnumDescriptor<opencv_tensorflow.DataType><> (),misc\tensorflow\types.pb.hpp,"inline const EnumDescriptor* GetEnumDescriptor< ::opencv_tensorflow::DataType>() {
  return ::opencv_tensorflow::DataType_descriptor();
}",145.0,147.0,1.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,0,0,0,0,EnumDescriptor
1840,137415,GetReflection,1,opencv_caffe.FlattenParameter.GetReflection,Reflection opencv_caffe.FlattenParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",11420.0,11422.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
1841,383184,setConvolution,1,cv.dnn.darknet.setLayersParams.setConvolution,"void cv.dnn.darknet.setLayersParams.setConvolution (int,int,int,int,int,int,int)",src\darknet\darknet_io.cpp,"void setConvolution(int kernel, int pad, int stride,
                    int filters_num, int channels_num, int groups, int use_batch_normalize)
                {
                    cv::dnn::LayerParams conv_param =
                        getParamConvolution(kernel, pad, stride, filters_num);

                    darknet::LayerParameter lp;
                    std::string layer_name = cv::format(""conv_%d"", layer_id);

                    // use BIAS in any case
                    if (!use_batch_normalize) {
                        conv_param.set<bool>(""bias_term"", true);
                    }

                    conv_param.set<int>(""group"", groups);

                    lp.layer_name = layer_name;
                    lp.layer_type = conv_param.type;
                    lp.layerParams = conv_param;
                    lp.bottom_indexes.push_back(last_layer);
                    last_layer = layer_name;
                    net->layers.push_back(lp);

                    if (use_ba...",151.0,179.0,17.0,17.0,29.0,20,5,28,14,0,7,3,3,0,0,,0,7,14,7,7,void
1842,137426,default_instance,1,opencv_caffe.FlattenParameter.default_instance,FlattenParameter opencv_caffe.FlattenParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const FlattenParameter& default_instance() {
    return *internal_default_instance();
  }",11423.0,11425.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,FlattenParameter
1843,366803,stream,3,cv.dnn.cuda4dnn.FloorOp.stream,,src\cuda4dnn\primitives\activation.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1844,137433,internal_default_instance,1,opencv_caffe.FlattenParameter.internal_default_instance,FlattenParameter opencv_caffe.FlattenParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const FlattenParameter* internal_default_instance() {
    return reinterpret_cast<const FlattenParameter*>(
               &_FlattenParameter_default_instance_);
  }",11426.0,11429.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,FlattenParameter
1845,366810,calculate,1,cv.dnn.cuda4dnn.LogOp.calculate,"void cv.dnn.cuda4dnn.LogOp.calculate (ANY,ANY)",src\cuda4dnn\primitives\activation.hpp,"void calculate(csl::TensorSpan<T> output, csl::TensorView<T> input) const
        {
            kernels::log<T>(stream, output, input);
        }",232.0,235.0,9.0,9.0,4.0,1,1,4,4,0,1,1,1,0,0,,0,1,4,2,2,void
1846,317670,fbb_,3,opencv_tflite.CumsumOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
1847,317671,start_,3,opencv_tflite.CumsumOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1848,366823,stream,3,cv.dnn.cuda4dnn.LogOp.stream,,src\cuda4dnn\primitives\activation.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1849,317672,add_exclusive,1,opencv_tflite.CumsumOptionsBuilder.add_exclusive,void opencv_tflite.CumsumOptionsBuilder.add_exclusive (bool),misc\tflite\schema_generated.hpp,"void add_exclusive(bool exclusive) {
    fbb_.AddElement<uint8_t>(CumsumOptions::VT_EXCLUSIVE, static_cast<uint8_t>(exclusive), 0);
  }",7583.0,7585.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
1850,284907,_InternalParse,1,opencv_tensorflow.OpDef._InternalParse,"const char* opencv_tensorflow.OpDef._InternalParse (char*,ANY*)",misc\tensorflow\op_def.pb.cc,"const char* OpDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, ""opencv_tensorflow.OpDef.name""));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .opencv_tensorflow.OpDef.ArgDef input_arg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_i...",1278.0,1414.0,1.0,10.0,137.0,121,15,134,14,0,4,38,66,0,0,,0,4,4,2,2,const char*
1851,366830,calculate,1,cv.dnn.cuda4dnn.RoundOp.calculate,"void cv.dnn.cuda4dnn.RoundOp.calculate (ANY,ANY)",src\cuda4dnn\primitives\activation.hpp,"void calculate(csl::TensorSpan<T> output, csl::TensorView<T> input) const
        {
            kernels::rint<T>(stream, output, input);
        }",246.0,249.0,9.0,9.0,4.0,1,1,4,4,0,1,1,1,0,0,,0,1,4,2,2,void
1852,104690,MergeFrom,1,opencv_caffe.NormalizedBBox.MergeFrom,void opencv_caffe.NormalizedBBox.MergeFrom (NormalizedBBox),misc\caffe\opencv-caffe.pb.cc,"void NormalizedBBox::MergeFrom(const NormalizedBBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.NormalizedBBox)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      xmin_ = from.xmin_;
    }
    if (cached_has_bits & 0x00000002u) {
      ymin_ = from.ymin_;
    }
    if (cached_has_bits & 0x00000004u) {
      xmax_ = from.xmax_;
    }
    if (cached_has_bits & 0x00000008u) {
      ymax_ = from.ymax_;
    }
    if (cached_has_bits & 0x00000010u) {
      label_ = from.label_;
    }
    if (cached_has_bits & 0x00000020u) {
      difficult_ = from.difficult_;
    }
    if (cached_has_bits & 0x00000040u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000080u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PR...",32868.0,32903.0,1.0,1.0,36.0,37,8,35,13,0,18,10,18,0,0,,0,18,2,1,1,void
1853,366843,stream,3,cv.dnn.cuda4dnn.RoundOp.stream,,src\cuda4dnn\primitives\activation.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1854,317692,add_reverse,1,opencv_tflite.CumsumOptionsBuilder.add_reverse,void opencv_tflite.CumsumOptionsBuilder.add_reverse (bool),misc\tflite\schema_generated.hpp,"void add_reverse(bool reverse) {
    fbb_.AddElement<uint8_t>(CumsumOptions::VT_REVERSE, static_cast<uint8_t>(reverse), 0);
  }",7586.0,7588.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
1855,301311,file_level_metadata_versions_2eproto,2,misc\tensorflow\versions.pb.cc.file_level_metadata_versions_2eproto,,misc\tensorflow\versions.pb.cc,static ::PROTOBUF_NAMESPACE_ID::Metadata[1] file_level_metadata_versions_2eproto,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1856,366850,calculate,1,cv.dnn.cuda4dnn.SqrtOp.calculate,"void cv.dnn.cuda4dnn.SqrtOp.calculate (ANY,ANY)",src\cuda4dnn\primitives\activation.hpp,"void calculate(csl::TensorSpan<T> output, csl::TensorView<T> input) const
        {
            kernels::sqrt<T>(stream, output, input);
        }",260.0,263.0,9.0,9.0,4.0,1,1,4,4,0,1,1,1,0,0,,0,1,4,2,2,void
1857,366863,stream,3,cv.dnn.cuda4dnn.SqrtOp.stream,,src\cuda4dnn\primitives\activation.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1858,317712,CumsumOptionsBuilder,1,opencv_tflite.CumsumOptionsBuilder.CumsumOptionsBuilder,ANY opencv_tflite.CumsumOptionsBuilder.CumsumOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit CumsumOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",7589.0,7592.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1859,235793,ByteSizeLong,1,opencv_onnx.TensorProto.ByteSizeLong,size_t opencv_onnx.TensorProto.ByteSizeLong (),misc\onnx\opencv-onnx.pb.cc,"size_t TensorProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_onnx.TensorProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 dims = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->dims_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_dims_size());
    total_size += data_size;
  }

  // repeated float float_data = 4 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_float_data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated int32 int32_data = 5 [packed = true];
...",4235.0,4367.0,1.0,1.0,133.0,147,13,137,18,0,13,13,18,0,0,,0,13,0,0,0,size_t
1860,366870,calculate,1,cv.dnn.cuda4dnn.NotOp.calculate,"void cv.dnn.cuda4dnn.NotOp.calculate (ANY,ANY)",src\cuda4dnn\primitives\activation.hpp,"void calculate(csl::TensorSpan<T> output, csl::TensorView<T> input) const
        {
            kernels::not_k<T>(stream, output, input);
        }",274.0,277.0,9.0,9.0,4.0,1,1,4,4,0,1,1,1,0,0,,0,1,4,2,2,void
1861,301335,descriptor_table_versions_2eproto_once,2,misc\tensorflow\versions.pb.cc.descriptor_table_versions_2eproto_once,,misc\tensorflow\versions.pb.cc,ANY descriptor_table_versions_2eproto_once,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1862,301336,descriptor_table_versions_2eproto,2,misc\tensorflow\versions.pb.cc.descriptor_table_versions_2eproto,,misc\tensorflow\versions.pb.cc,ANY descriptor_table_versions_2eproto,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1863,317723,Finish,1,opencv_tflite.CumsumOptionsBuilder.Finish,Offset<CumsumOptions> opencv_tflite.CumsumOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<CumsumOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CumsumOptions>(end);
    return o;
  }",7593.0,7597.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<CumsumOptions>
1864,366883,stream,3,cv.dnn.cuda4dnn.NotOp.stream,,src\cuda4dnn\primitives\activation.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1865,366890,calculate,1,cv.dnn.cuda4dnn.AcosOp.calculate,"void cv.dnn.cuda4dnn.AcosOp.calculate (ANY,ANY)",src\cuda4dnn\primitives\activation.hpp,"void calculate(csl::TensorSpan<T> output, csl::TensorView<T> input) const
        {
            kernels::acos<T>(stream, output, input);
        }",288.0,291.0,9.0,9.0,4.0,1,1,4,4,0,1,1,1,0,0,,0,1,4,2,2,void
1866,432429,clOptionSupport,1,clOptionSupport,bool clOptionSupport (ANY),src\ocl4dnn\src\common.cpp,"bool clOptionSupport(cv::String option)
{
    cv::String errmsg;
    ocl::Program program = ocl::Context::getDefault().getProg(ocl::dnn::dummy_oclsrc, option, errmsg);
    return program.ptr() ? true : false;
}",49.0,54.0,1.0,1.0,6.0,0,0,0,0,3,0,1,1,0,0,,0,0,2,1,1,bool
1867,301359,descriptor_table_versions_2eproto_getter,1,descriptor_table_versions_2eproto_getter,DescriptorTable descriptor_table_versions_2eproto_getter (),misc\tensorflow\versions.pb.cc,"const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_versions_2eproto_getter() {
  return &descriptor_table_versions_2eproto;
}",73.0,75.0,25.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,DescriptorTable
1868,366903,stream,3,cv.dnn.cuda4dnn.AcosOp.stream,,src\cuda4dnn\primitives\activation.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1869,268602,ByteSizeLong,1,opencv_tensorflow.FunctionDefLibrary.ByteSizeLong,size_t opencv_tensorflow.FunctionDefLibrary.ByteSizeLong (),misc\tensorflow\function.pb.cc,"size_t FunctionDefLibrary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_tensorflow.FunctionDefLibrary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opencv_tensorflow.FunctionDef function = 1;
  total_size += 1UL * this->_internal_function_size();
  for (const auto& msg : this->function_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .opencv_tensorflow.GradientDef gradient = 2;
  total_size += 1UL * this->_internal_gradient_size();
  for (const auto& msg : this->gradient_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}",336.0,359.0,1.0,1.0,24.0,20,7,17,7,0,3,3,3,2,0,,0,3,0,0,0,size_t
1870,366910,calculate,1,cv.dnn.cuda4dnn.AcoshOp.calculate,"void cv.dnn.cuda4dnn.AcoshOp.calculate (ANY,ANY)",src\cuda4dnn\primitives\activation.hpp,"void calculate(csl::TensorSpan<T> output, csl::TensorView<T> input) const
        {
            kernels::acosh<T>(stream, output, input);
        }",302.0,305.0,9.0,9.0,4.0,1,1,4,4,0,1,1,1,0,0,,0,1,4,2,2,void
1871,72006,MergeFrom,1,opencv_caffe.MemoryDataParameter.MergeFrom,void opencv_caffe.MemoryDataParameter.MergeFrom (MemoryDataParameter),misc\caffe\opencv-caffe.pb.cc,"void MemoryDataParameter::MergeFrom(const MemoryDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.MemoryDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      batch_size_ = from.batch_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      channels_ = from.channels_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",23320.0,23343.0,1.0,1.0,24.0,25,8,23,9,2,10,6,10,0,0,,0,10,2,1,1,void
1872,383304,setFullyConnected,1,cv.dnn.darknet.setLayersParams.setFullyConnected,"void cv.dnn.darknet.setLayersParams.setFullyConnected (int,int)",src\darknet\darknet_io.cpp,"void setFullyConnected(int output, int use_batch_normalize)
                {
                    cv::dnn::LayerParams fullyconnected_param =
                        getParamFullyConnected(output);

                    darknet::LayerParameter lp;
                    std::string layer_name = cv::format(""fullyConnected_%d"", layer_id);

                    // use BIAS in any case
                    if (!use_batch_normalize) {
                        fullyconnected_param.set<bool>(""bias_term"", true);
                    }

                    lp.layer_name = layer_name;
                    lp.layer_type = fullyconnected_param.type;
                    lp.layerParams = fullyconnected_param;
                    lp.bottom_indexes.push_back(last_layer);
                    last_layer = layer_name;
                    net->layers.push_back(lp);

                    if (use_batch_normalize)
                        setBatchNorm();

                    layer_id++;
                    fused_lay...",193.0,218.0,17.0,17.0,26.0,19,5,23,10,0,7,3,3,0,0,,0,7,4,2,2,void
1873,366923,stream,3,cv.dnn.cuda4dnn.AcoshOp.stream,,src\cuda4dnn\primitives\activation.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1874,317775,fbb_,3,opencv_tflite.BroadcastToOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1875,317776,start_,3,opencv_tflite.BroadcastToOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1876,317777,BroadcastToOptionsBuilder,1,opencv_tflite.BroadcastToOptionsBuilder.BroadcastToOptionsBuilder,ANY opencv_tflite.BroadcastToOptionsBuilder.BroadcastToOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit BroadcastToOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",7622.0,7625.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1877,366930,calculate,1,cv.dnn.cuda4dnn.AsinOp.calculate,"void cv.dnn.cuda4dnn.AsinOp.calculate (ANY,ANY)",src\cuda4dnn\primitives\activation.hpp,"void calculate(csl::TensorSpan<T> output, csl::TensorView<T> input) const
        {
            kernels::asin<T>(stream, output, input);
        }",316.0,319.0,9.0,9.0,4.0,1,1,4,4,0,1,1,1,0,0,,0,1,4,2,2,void
1878,137558,GetCachedSize,1,opencv_caffe.FlattenParameter.GetCachedSize,int opencv_caffe.FlattenParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },11474.0,11474.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
1879,121175,_has_bits_,3,opencv_caffe.SolverParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,41,0,1,1,0,0,,0,0,0,0,0,
1880,121176,_cached_size_,3,opencv_caffe.SolverParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1881,121177,test_net_,3,opencv_caffe.SolverParameter.test_net_,,misc\caffe\opencv-caffe.pb.hpp,test_net_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
1882,121178,test_iter_,3,opencv_caffe.SolverParameter.test_iter_,,misc\caffe\opencv-caffe.pb.hpp,test_iter_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
1883,121179,test_net_param_,3,opencv_caffe.SolverParameter.test_net_param_,,misc\caffe\opencv-caffe.pb.hpp,test_net_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
1884,121180,test_state_,3,opencv_caffe.SolverParameter.test_state_,,misc\caffe\opencv-caffe.pb.hpp,test_state_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
1885,317788,Finish,1,opencv_tflite.BroadcastToOptionsBuilder.Finish,Offset<BroadcastToOptions> opencv_tflite.BroadcastToOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<BroadcastToOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<BroadcastToOptions>(end);
    return o;
  }",7626.0,7630.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<BroadcastToOptions>
1886,121182,train_net_,3,opencv_caffe.SolverParameter.train_net_,,misc\caffe\opencv-caffe.pb.hpp,train_net_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1887,366943,stream,3,cv.dnn.cuda4dnn.AsinOp.stream,,src\cuda4dnn\primitives\activation.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1888,121183,lr_policy_,3,opencv_caffe.SolverParameter.lr_policy_,,misc\caffe\opencv-caffe.pb.hpp,lr_policy_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1889,121185,net_,3,opencv_caffe.SolverParameter.net_,,misc\caffe\opencv-caffe.pb.hpp,net_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1890,121184,snapshot_prefix_,3,opencv_caffe.SolverParameter.snapshot_prefix_,,misc\caffe\opencv-caffe.pb.hpp,snapshot_prefix_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1891,121187,regularization_type_,3,opencv_caffe.SolverParameter.regularization_type_,,misc\caffe\opencv-caffe.pb.hpp,regularization_type_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1892,121181,stepvalue_,3,opencv_caffe.SolverParameter.stepvalue_,,misc\caffe\opencv-caffe.pb.hpp,stepvalue_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
1893,121189,type_,3,opencv_caffe.SolverParameter.type_,,misc\caffe\opencv-caffe.pb.hpp,type_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1894,366950,calculate,1,cv.dnn.cuda4dnn.AsinhOp.calculate,"void cv.dnn.cuda4dnn.AsinhOp.calculate (ANY,ANY)",src\cuda4dnn\primitives\activation.hpp,"void calculate(csl::TensorSpan<T> output, csl::TensorView<T> input) const
        {
            kernels::asinh<T>(stream, output, input);
        }",330.0,333.0,9.0,9.0,4.0,1,1,4,4,0,1,1,1,0,0,,0,1,4,2,2,void
1895,121190,train_net_param_,3,opencv_caffe.SolverParameter.train_net_param_,,misc\caffe\opencv-caffe.pb.hpp,* train_net_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,11,0,1,1,0,0,,0,0,0,0,0,
1896,121191,net_param_,3,opencv_caffe.SolverParameter.net_param_,,misc\caffe\opencv-caffe.pb.hpp,* net_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
1897,121192,train_state_,3,opencv_caffe.SolverParameter.train_state_,,misc\caffe\opencv-caffe.pb.hpp,* train_state_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1898,121194,base_lr_,3,opencv_caffe.SolverParameter.base_lr_,,misc\caffe\opencv-caffe.pb.hpp,base_lr_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1899,121193,test_interval_,3,opencv_caffe.SolverParameter.test_interval_,,misc\caffe\opencv-caffe.pb.hpp,test_interval_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1900,121195,display_,3,opencv_caffe.SolverParameter.display_,,misc\caffe\opencv-caffe.pb.hpp,display_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1901,121196,max_iter_,3,opencv_caffe.SolverParameter.max_iter_,,misc\caffe\opencv-caffe.pb.hpp,max_iter_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1902,121197,gamma_,3,opencv_caffe.SolverParameter.gamma_,,misc\caffe\opencv-caffe.pb.hpp,gamma_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1903,121198,power_,3,opencv_caffe.SolverParameter.power_,,misc\caffe\opencv-caffe.pb.hpp,power_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1904,121199,momentum_,3,opencv_caffe.SolverParameter.momentum_,,misc\caffe\opencv-caffe.pb.hpp,momentum_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1905,121200,weight_decay_,3,opencv_caffe.SolverParameter.weight_decay_,,misc\caffe\opencv-caffe.pb.hpp,weight_decay_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1906,121202,snapshot_,3,opencv_caffe.SolverParameter.snapshot_,,misc\caffe\opencv-caffe.pb.hpp,snapshot_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1907,366963,stream,3,cv.dnn.cuda4dnn.AsinhOp.stream,,src\cuda4dnn\primitives\activation.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1908,121201,stepsize_,3,opencv_caffe.SolverParameter.stepsize_,,misc\caffe\opencv-caffe.pb.hpp,stepsize_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1909,121203,device_id_,3,opencv_caffe.SolverParameter.device_id_,,misc\caffe\opencv-caffe.pb.hpp,device_id_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1910,121206,debug_info_,3,opencv_caffe.SolverParameter.debug_info_,,misc\caffe\opencv-caffe.pb.hpp,debug_info_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1911,121204,test_compute_loss_,3,opencv_caffe.SolverParameter.test_compute_loss_,,misc\caffe\opencv-caffe.pb.hpp,test_compute_loss_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1912,121205,snapshot_diff_,3,opencv_caffe.SolverParameter.snapshot_diff_,,misc\caffe\opencv-caffe.pb.hpp,snapshot_diff_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1913,121209,random_seed_,3,opencv_caffe.SolverParameter.random_seed_,,misc\caffe\opencv-caffe.pb.hpp,random_seed_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
1914,366970,calculate,1,cv.dnn.cuda4dnn.AtanOp.calculate,"void cv.dnn.cuda4dnn.AtanOp.calculate (ANY,ANY)",src\cuda4dnn\primitives\activation.hpp,"void calculate(csl::TensorSpan<T> output, csl::TensorView<T> input) const
        {
            kernels::atan<T>(stream, output, input);
        }",344.0,347.0,9.0,9.0,4.0,1,1,4,4,0,1,1,1,0,0,,0,1,4,2,2,void
1915,121210,solver_mode_,3,opencv_caffe.SolverParameter.solver_mode_,,misc\caffe\opencv-caffe.pb.hpp,solver_mode_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
1916,121207,solver_type_,3,opencv_caffe.SolverParameter.solver_type_,,misc\caffe\opencv-caffe.pb.hpp,solver_type_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
1917,121208,momentum2_,3,opencv_caffe.SolverParameter.momentum2_,,misc\caffe\opencv-caffe.pb.hpp,momentum2_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
1918,121211,test_initialization_,3,opencv_caffe.SolverParameter.test_initialization_,,misc\caffe\opencv-caffe.pb.hpp,test_initialization_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
1919,121213,delta_,3,opencv_caffe.SolverParameter.delta_,,misc\caffe\opencv-caffe.pb.hpp,delta_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
1920,121214,average_loss_,3,opencv_caffe.SolverParameter.average_loss_,,misc\caffe\opencv-caffe.pb.hpp,average_loss_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
1921,121212,snapshot_after_train_,3,opencv_caffe.SolverParameter.snapshot_after_train_,,misc\caffe\opencv-caffe.pb.hpp,snapshot_after_train_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
1922,121216,iter_size_,3,opencv_caffe.SolverParameter.iter_size_,,misc\caffe\opencv-caffe.pb.hpp,iter_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
1923,104835,InternalSwap,1,opencv_caffe.NormalizedBBox.InternalSwap,void opencv_caffe.NormalizedBBox.InternalSwap (NormalizedBBox*),misc\caffe\opencv-caffe.pb.cc,"void NormalizedBBox::InternalSwap(NormalizedBBox* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NormalizedBBox, size_)
      + sizeof(NormalizedBBox::size_)
      - PROTOBUF_FIELD_OFFSET(NormalizedBBox, xmin_)>(
          reinterpret_cast<char*>(&xmin_),
          reinterpret_cast<char*>(&other->xmin_));
}",32916.0,32926.0,1.0,1.0,11.0,21,12,13,8,0,7,1,1,0,0,,0,7,2,1,1,void
1924,121218,rms_decay_,3,opencv_caffe.SolverParameter.rms_decay_,,misc\caffe\opencv-caffe.pb.hpp,rms_decay_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
1925,121217,snapshot_format_,3,opencv_caffe.SolverParameter.snapshot_format_,,misc\caffe\opencv-caffe.pb.hpp,snapshot_format_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
1926,121215,clip_gradients_,3,opencv_caffe.SolverParameter.clip_gradients_,,misc\caffe\opencv-caffe.pb.hpp,clip_gradients_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
1927,366983,stream,3,cv.dnn.cuda4dnn.AtanOp.stream,,src\cuda4dnn\primitives\activation.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1928,317829,start_,3,opencv_tflite.Rfft2dOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1929,317830,Rfft2dOptionsBuilder,1,opencv_tflite.Rfft2dOptionsBuilder.Rfft2dOptionsBuilder,ANY opencv_tflite.Rfft2dOptionsBuilder.Rfft2dOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit Rfft2dOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",7651.0,7654.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1930,317828,fbb_,3,opencv_tflite.Rfft2dOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1931,366990,calculate,1,cv.dnn.cuda4dnn.AtanhOp.calculate,"void cv.dnn.cuda4dnn.AtanhOp.calculate (ANY,ANY)",src\cuda4dnn\primitives\activation.hpp,"void calculate(csl::TensorSpan<T> output, csl::TensorView<T> input) const
        {
            kernels::atanh<T>(stream, output, input);
        }",358.0,361.0,9.0,9.0,4.0,1,1,4,4,0,1,1,1,0,0,,0,1,4,2,2,void
1932,317841,Finish,1,opencv_tflite.Rfft2dOptionsBuilder.Finish,Offset<Rfft2dOptions> opencv_tflite.Rfft2dOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<Rfft2dOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Rfft2dOptions>(end);
    return o;
  }",7655.0,7659.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<Rfft2dOptions>
1933,88467,InternalSwap,1,opencv_caffe.WindowDataParameter.InternalSwap,void opencv_caffe.WindowDataParameter.InternalSwap (WindowDataParameter*),misc\caffe\opencv-caffe.pb.cc,"void WindowDataParameter::InternalSwap(WindowDataParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &source_, lhs_arena,
      &other->source_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mean_file_, lhs_arena,
      &other->mean_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      nullptr,
      &crop_mode_, lhs_arena,
      &other->crop_mode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyIni...",28451.0,28487.0,1.0,1.0,37.0,61,13,58,19,0,23,1,1,0,0,,0,23,2,1,1,void
1934,383380,setActivation,1,cv.dnn.darknet.setLayersParams.setActivation,void cv.dnn.darknet.setLayersParams.setActivation (String),src\darknet\darknet_io.cpp,"void setActivation(String type)
                {
                    cv::dnn::LayerParams activation_param;
                    if (type == ""relu"")
                    {
                        activation_param.type = ""ReLU"";
                    }
                    else if (type == ""leaky"")
                    {
                        activation_param.set<float>(""negative_slope"", 0.1f);
                        activation_param.type = ""ReLU"";
                    }
                    else if (type == ""swish"" || type == ""silu"") // swish is an extension of silu.
                    {
                        activation_param.type = ""Swish"";
                    }
                    else if (type == ""mish"")
                    {
                        activation_param.type = ""Mish"";
                    }
                    else if (type == ""logistic"")
                    {
                        activation_param.type = ""Sigmoid"";
                    }
                    else if (...",220.0,264.0,17.0,17.0,45.0,20,4,20,9,0,6,2,2,0,0,,0,6,2,1,1,void
1935,367003,stream,3,cv.dnn.cuda4dnn.AtanhOp.stream,,src\cuda4dnn\primitives\activation.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1936,268706,MergeFrom,1,opencv_tensorflow.FunctionDefLibrary.MergeFrom,void opencv_tensorflow.FunctionDefLibrary.MergeFrom (FunctionDefLibrary),misc\tensorflow\function.pb.cc,"void FunctionDefLibrary::MergeFrom(const FunctionDefLibrary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_tensorflow.FunctionDefLibrary)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  function_.MergeFrom(from.function_);
  gradient_.MergeFrom(from.gradient_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",374.0,383.0,1.0,1.0,10.0,12,6,10,6,1,4,1,1,0,0,,0,4,2,1,1,void
1937,367010,calculate,1,cv.dnn.cuda4dnn.CosOp.calculate,"void cv.dnn.cuda4dnn.CosOp.calculate (ANY,ANY)",src\cuda4dnn\primitives\activation.hpp,"void calculate(csl::TensorSpan<T> output, csl::TensorView<T> input) const
        {
            kernels::cos<T>(stream, output, input);
        }",372.0,375.0,9.0,9.0,4.0,1,1,4,4,0,1,1,1,0,0,,0,1,4,2,2,void
1938,72111,InternalSwap,1,opencv_caffe.MemoryDataParameter.InternalSwap,void opencv_caffe.MemoryDataParameter.InternalSwap (MemoryDataParameter*),misc\caffe\opencv-caffe.pb.cc,"void MemoryDataParameter::InternalSwap(MemoryDataParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemoryDataParameter, width_)
      + sizeof(MemoryDataParameter::width_)
      - PROTOBUF_FIELD_OFFSET(MemoryDataParameter, batch_size_)>(
          reinterpret_cast<char*>(&batch_size_),
          reinterpret_cast<char*>(&other->batch_size_));
}",23356.0,23366.0,1.0,1.0,11.0,21,12,13,8,0,7,1,1,0,0,,0,7,2,1,1,void
1939,367023,stream,3,cv.dnn.cuda4dnn.CosOp.stream,,src\cuda4dnn\primitives\activation.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1940,367030,calculate,1,cv.dnn.cuda4dnn.CoshOp.calculate,"void cv.dnn.cuda4dnn.CoshOp.calculate (ANY,ANY)",src\cuda4dnn\primitives\activation.hpp,"void calculate(csl::TensorSpan<T> output, csl::TensorView<T> input) const
        {
            kernels::cosh<T>(stream, output, input);
        }",386.0,389.0,9.0,9.0,4.0,1,1,4,4,0,1,1,1,0,0,,0,1,4,2,2,void
1941,104888,GetMetadata,1,opencv_caffe.NormalizedBBox.GetMetadata,Metadata opencv_caffe.NormalizedBBox.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata NormalizedBBox::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[67]);
}",32928.0,32932.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
1942,317881,fbb_,3,opencv_tflite.HashtableOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1943,317882,start_,3,opencv_tflite.HashtableOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1944,317883,add_table_id,1,opencv_tflite.HashtableOptionsBuilder.add_table_id,void opencv_tflite.HashtableOptionsBuilder.add_table_id (int32_t),misc\tflite\schema_generated.hpp,"void add_table_id(int32_t table_id) {
    fbb_.AddElement<int32_t>(HashtableOptions::VT_TABLE_ID, table_id, 0);
  }",7697.0,7699.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
1945,59926,SharedCtor,1,opencv_caffe.EmbedParameter.SharedCtor,void opencv_caffe.EmbedParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void EmbedParameter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&weight_filler_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&input_dim_) -
    reinterpret_cast<char*>(&weight_filler_)) + sizeof(input_dim_));
bias_term_ = true;
}",19570.0,19576.0,1.0,1.0,7.0,17,7,5,3,0,5,1,1,0,0,,0,5,0,0,0,void
1946,301505,SetCachedSize,1,opencv_tensorflow.VersionDef.SetCachedSize,void opencv_tensorflow.VersionDef.SetCachedSize (int),misc\tensorflow\versions.pb.cc,"void VersionDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",131.0,133.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
1947,367043,stream,3,cv.dnn.cuda4dnn.CoshOp.stream,,src\cuda4dnn\primitives\activation.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1948,367050,calculate,1,cv.dnn.cuda4dnn.ErfOp.calculate,"void cv.dnn.cuda4dnn.ErfOp.calculate (ANY,ANY)",src\cuda4dnn\primitives\activation.hpp,"void calculate(csl::TensorSpan<T> output, csl::TensorView<T> input) const
        {
            kernels::erf<T>(stream, output, input);
        }",400.0,403.0,9.0,9.0,4.0,1,1,4,4,0,1,1,1,0,0,,0,1,4,2,2,void
1949,301515,Clear,1,opencv_tensorflow.VersionDef.Clear,void opencv_tensorflow.VersionDef.Clear (),misc\tensorflow\versions.pb.cc,"void VersionDef::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_tensorflow.VersionDef)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bad_consumers_.Clear();
  ::memset(&producer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_consumer_) -
      reinterpret_cast<char*>(&producer_)) + sizeof(min_consumer_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",135.0,146.0,1.0,1.0,12.0,14,7,8,5,0,5,1,1,0,0,,0,5,0,0,0,void
1950,104908,set_has_pooled_h,1,opencv_caffe._Internal.set_has_pooled_h,void opencv_caffe._Internal.set_has_pooled_h (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_pooled_h(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }",32939.0,32941.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
1951,317901,add_key_dtype,1,opencv_tflite.HashtableOptionsBuilder.add_key_dtype,void opencv_tflite.HashtableOptionsBuilder.add_key_dtype (ANY),misc\tflite\schema_generated.hpp,"void add_key_dtype(opencv_tflite::TensorType key_dtype) {
    fbb_.AddElement<int8_t>(HashtableOptions::VT_KEY_DTYPE, static_cast<int8_t>(key_dtype), 0);
  }",7700.0,7702.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
1952,104919,set_has_pooled_w,1,opencv_caffe._Internal.set_has_pooled_w,void opencv_caffe._Internal.set_has_pooled_w (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_pooled_w(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }",32942.0,32944.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
1953,367063,stream,3,cv.dnn.cuda4dnn.ErfOp.stream,,src\cuda4dnn\primitives\activation.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1954,137694,_has_bits_,3,opencv_caffe.FlattenParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
1955,137695,_cached_size_,3,opencv_caffe.FlattenParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1956,137696,axis_,3,opencv_caffe.FlattenParameter.axis_,,misc\caffe\opencv-caffe.pb.hpp,axis_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
1957,137697,end_axis_,3,opencv_caffe.FlattenParameter.end_axis_,,misc\caffe\opencv-caffe.pb.hpp,end_axis_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
1958,268768,InternalSwap,1,opencv_tensorflow.FunctionDefLibrary.InternalSwap,void opencv_tensorflow.FunctionDefLibrary.InternalSwap (FunctionDefLibrary*),misc\tensorflow\function.pb.cc,"void FunctionDefLibrary::InternalSwap(FunctionDefLibrary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  function_.InternalSwap(&other->function_);
  gradient_.InternalSwap(&other->gradient_);
}",396.0,401.0,1.0,1.0,6.0,9,3,6,4,0,4,1,1,0,0,,0,4,2,1,1,void
1959,104930,set_has_spatial_scale,1,opencv_caffe._Internal.set_has_spatial_scale,void opencv_caffe._Internal.set_has_spatial_scale (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_spatial_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }",33623.0,33625.0,3.0,3.0,3.0,2,2,1,1,2,0,1,1,0,0,,0,0,2,1,1,void
1960,72164,GetMetadata,1,opencv_caffe.MemoryDataParameter.GetMetadata,Metadata opencv_caffe.MemoryDataParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata MemoryDataParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[45]);
}",23368.0,23372.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
1961,367070,calculate,1,cv.dnn.cuda4dnn.HardSwishOp.calculate,"void cv.dnn.cuda4dnn.HardSwishOp.calculate (ANY,ANY)",src\cuda4dnn\primitives\activation.hpp,"void calculate(csl::TensorSpan<T> output, csl::TensorView<T> input) const
        {
            kernels::hardswish<T>(stream, output, input);
        }",414.0,417.0,9.0,9.0,4.0,1,1,4,4,0,1,1,1,0,0,,0,1,4,2,2,void
1962,317921,add_value_dtype,1,opencv_tflite.HashtableOptionsBuilder.add_value_dtype,void opencv_tflite.HashtableOptionsBuilder.add_value_dtype (ANY),misc\tflite\schema_generated.hpp,"void add_value_dtype(opencv_tflite::TensorType value_dtype) {
    fbb_.AddElement<int8_t>(HashtableOptions::VT_VALUE_DTYPE, static_cast<int8_t>(value_dtype), 0);
  }",7703.0,7705.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
1963,367083,stream,3,cv.dnn.cuda4dnn.HardSwishOp.stream,,src\cuda4dnn\primitives\activation.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1964,367090,calculate,1,cv.dnn.cuda4dnn.SinOp.calculate,"void cv.dnn.cuda4dnn.SinOp.calculate (ANY,ANY)",src\cuda4dnn\primitives\activation.hpp,"void calculate(csl::TensorSpan<T> output, csl::TensorView<T> input) const
        {
            kernels::sin<T>(stream, output, input);
        }",428.0,431.0,9.0,9.0,4.0,1,1,4,4,0,1,1,1,0,0,,0,1,4,2,2,void
1965,301555,_InternalParse,1,opencv_tensorflow.VersionDef._InternalParse,"const char* opencv_tensorflow.VersionDef._InternalParse (char*,ANY*)",misc\tensorflow\versions.pb.cc,"const char* VersionDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 producer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          producer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 min_consumer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          min_consumer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 bad_consumers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
  ...",148.0,202.0,1.0,10.0,55.0,39,11,44,8,0,2,13,15,0,0,,0,2,4,2,2,const char*
1966,317941,HashtableOptionsBuilder,1,opencv_tflite.HashtableOptionsBuilder.HashtableOptionsBuilder,ANY opencv_tflite.HashtableOptionsBuilder.HashtableOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit HashtableOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",7706.0,7709.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1967,72184,set_has_normalize_variance,1,opencv_caffe._Internal.set_has_normalize_variance,void opencv_caffe._Internal.set_has_normalize_variance (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_normalize_variance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }",23379.0,23381.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
1968,268797,GetMetadata,1,opencv_tensorflow.FunctionDefLibrary.GetMetadata,Metadata opencv_tensorflow.FunctionDefLibrary.GetMetadata (),misc\tensorflow\function.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata FunctionDefLibrary::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_function_2eproto_getter, &descriptor_table_function_2eproto_once,
      file_level_metadata_function_2eproto[0]);
}",403.0,407.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
1969,367103,stream,3,cv.dnn.cuda4dnn.SinOp.stream,,src\cuda4dnn\primitives\activation.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1970,317952,Finish,1,opencv_tflite.HashtableOptionsBuilder.Finish,Offset<HashtableOptions> opencv_tflite.HashtableOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<HashtableOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<HashtableOptions>(end);
    return o;
  }",7710.0,7714.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<HashtableOptions>
1971,55811,ByteSizeLong,1,opencv_caffe.SaveOutputParameter.ByteSizeLong,size_t opencv_caffe.SaveOutputParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t SaveOutputParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.SaveOutputParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string output_directory = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_output_directory());
    }

    // optional string output_name_prefix = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_output_name_prefix());
    }

    // optional string output_format = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatL...",18306.0,18358.0,1.0,1.0,53.0,48,9,38,7,0,2,8,14,0,0,,0,2,0,0,0,size_t
1972,72195,set_has_across_channels,1,opencv_caffe._Internal.set_has_across_channels,void opencv_caffe._Internal.set_has_across_channels (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_across_channels(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }",23382.0,23384.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
1973,367110,calculate,1,cv.dnn.cuda4dnn.SinhOp.calculate,"void cv.dnn.cuda4dnn.SinhOp.calculate (ANY,ANY)",src\cuda4dnn\primitives\activation.hpp,"void calculate(csl::TensorSpan<T> output, csl::TensorView<T> input) const
        {
            kernels::sinh<T>(stream, output, input);
        }",442.0,445.0,9.0,9.0,4.0,1,1,4,4,0,1,1,1,0,0,,0,1,4,2,2,void
1974,367123,stream,3,cv.dnn.cuda4dnn.SinhOp.stream,,src\cuda4dnn\primitives\activation.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1975,367130,calculate,1,cv.dnn.cuda4dnn.SoftplusOp.calculate,"void cv.dnn.cuda4dnn.SoftplusOp.calculate (ANY,ANY)",src\cuda4dnn\primitives\activation.hpp,"void calculate(csl::TensorSpan<T> output, csl::TensorView<T> input) const
        {
            kernels::softplus<T>(stream, output, input);
        }",456.0,459.0,9.0,9.0,4.0,1,1,4,4,0,1,1,1,0,0,,0,1,4,2,2,void
1976,268831,GetMetadata,1,opencv_tensorflow.FunctionDef_Node_AttrEntry_DoNotUse.GetMetadata,Metadata opencv_tensorflow.FunctionDef_Node_AttrEntry_DoNotUse.GetMetadata (),misc\tensorflow\function.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata FunctionDef_Node_AttrEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_function_2eproto_getter, &descriptor_table_function_2eproto_once,
      file_level_metadata_function_2eproto[1]);
}",417.0,421.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
1977,104994,SharedCtor,1,opencv_caffe.ROIPoolingParameter.SharedCtor,void opencv_caffe.ROIPoolingParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void ROIPoolingParameter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pooled_h_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pooled_w_) -
    reinterpret_cast<char*>(&pooled_h_)) + sizeof(pooled_w_));
spatial_scale_ = 1;
}",32969.0,32975.0,1.0,1.0,7.0,17,7,5,3,0,5,1,1,0,0,,0,5,0,0,0,void
1978,121381,descriptor,1,opencv_caffe.SolverState.descriptor,Descriptor opencv_caffe.SolverState.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",4758.0,4760.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
1979,367143,stream,3,cv.dnn.cuda4dnn.SoftplusOp.stream,,src\cuda4dnn\primitives\activation.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1980,383531,setMaxpool,1,cv.dnn.darknet.setLayersParams.setMaxpool,"void cv.dnn.darknet.setLayersParams.setMaxpool (int,int,int)",src\darknet\darknet_io.cpp,"void setMaxpool(int kernel, int pad, int stride)
                {
                    cv::dnn::LayerParams maxpool_param;
                    maxpool_param.set<cv::String>(""pool"", ""max"");
                    maxpool_param.set<int>(""kernel_size"", kernel);
                    maxpool_param.set<int>(""pad_l"", floor((float)pad / 2));
                    maxpool_param.set<int>(""pad_r"", ceil((float)pad / 2));
                    maxpool_param.set<int>(""pad_t"", floor((float)pad / 2));
                    maxpool_param.set<int>(""pad_b"", ceil((float)pad / 2));
                    maxpool_param.set<bool>(""ceil_mode"", false);
                    maxpool_param.set<int>(""stride"", stride);
                    maxpool_param.name = ""Pooling-name"";
                    maxpool_param.type = ""Pooling"";

                    darknet::LayerParameter lp;
                    std::string layer_name = cv::format(""pool_%d"", layer_id);
                    lp.layer_name = layer_name;
                    lp.layer...",266.0,290.0,17.0,17.0,25.0,41,10,35,11,0,7,1,1,0,0,,0,7,6,3,3,void
1981,121387,GetDescriptor,1,opencv_caffe.SolverState.GetDescriptor,Descriptor opencv_caffe.SolverState.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",4761.0,4763.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
1982,367150,calculate,1,cv.dnn.cuda4dnn.SoftsignOp.calculate,"void cv.dnn.cuda4dnn.SoftsignOp.calculate (ANY,ANY)",src\cuda4dnn\primitives\activation.hpp,"void calculate(csl::TensorSpan<T> output, csl::TensorView<T> input) const
        {
            kernels::softsign<T>(stream, output, input);
        }",470.0,473.0,9.0,9.0,4.0,1,1,4,4,0,1,1,1,0,0,,0,1,4,2,2,void
1983,268850,clear_attr,1,opencv_tensorflow.FunctionDef_Node.clear_attr,void opencv_tensorflow.FunctionDef_Node.clear_attr (),misc\tensorflow\function.pb.cc,"void FunctionDef_Node::clear_attr() {
  attr_.Clear();
}",429.0,431.0,1.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,void
1984,121398,GetReflection,1,opencv_caffe.SolverState.GetReflection,Reflection opencv_caffe.SolverState.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",4764.0,4766.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
1985,318010,fbb_,3,opencv_tflite.HashtableFindOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1986,318011,start_,3,opencv_tflite.HashtableFindOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1987,318012,HashtableFindOptionsBuilder,1,opencv_tflite.HashtableFindOptionsBuilder.HashtableFindOptionsBuilder,ANY opencv_tflite.HashtableFindOptionsBuilder.HashtableFindOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit HashtableFindOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",7741.0,7744.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
1988,88637,GetMetadata,1,opencv_caffe.WindowDataParameter.GetMetadata,Metadata opencv_caffe.WindowDataParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata WindowDataParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[62]);
}",28489.0,28493.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
1989,367163,stream,3,cv.dnn.cuda4dnn.SoftsignOp.stream,,src\cuda4dnn\primitives\activation.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1990,121409,default_instance,1,opencv_caffe.SolverState.default_instance,SolverState opencv_caffe.SolverState.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const SolverState& default_instance() {
    return *internal_default_instance();
  }",4767.0,4769.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,SolverState
1991,367170,calculate,1,cv.dnn.cuda4dnn.TanOp.calculate,"void cv.dnn.cuda4dnn.TanOp.calculate (ANY,ANY)",src\cuda4dnn\primitives\activation.hpp,"void calculate(csl::TensorSpan<T> output, csl::TensorView<T> input) const
        {
            kernels::tan<T>(stream, output, input);
        }",484.0,487.0,9.0,9.0,4.0,1,1,4,4,0,1,1,1,0,0,,0,1,4,2,2,void
1992,318023,Finish,1,opencv_tflite.HashtableFindOptionsBuilder.Finish,Offset<HashtableFindOptions> opencv_tflite.HashtableFindOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<HashtableFindOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<HashtableFindOptions>(end);
    return o;
  }",7745.0,7749.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<HashtableFindOptions>
1993,121416,internal_default_instance,1,opencv_caffe.SolverState.internal_default_instance,SolverState opencv_caffe.SolverState.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const SolverState* internal_default_instance() {
    return reinterpret_cast<const SolverState*>(
               &_SolverState_default_instance_);
  }",4770.0,4773.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,SolverState
1994,137803,descriptor,1,opencv_caffe.HDF5DataParameter.descriptor,Descriptor opencv_caffe.HDF5DataParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",11587.0,11589.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
1995,72270,SharedCtor,1,opencv_caffe.MVNParameter.SharedCtor,void opencv_caffe.MVNParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void MVNParameter::SharedCtor() {
across_channels_ = false;
normalize_variance_ = true;
eps_ = 1e-09f;
}",23409.0,23413.0,1.0,1.0,5.0,3,1,3,3,0,3,1,1,0,0,,0,3,0,0,0,void
1996,367183,stream,3,cv.dnn.cuda4dnn.TanOp.stream,,src\cuda4dnn\primitives\activation.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1997,88657,set_has_pyramid_height,1,opencv_caffe._Internal.set_has_pyramid_height,void opencv_caffe._Internal.set_has_pyramid_height (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_pyramid_height(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }",28500.0,28502.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
1998,137809,GetDescriptor,1,opencv_caffe.HDF5DataParameter.GetDescriptor,Descriptor opencv_caffe.HDF5DataParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",11590.0,11592.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
1999,367191,calculate,1,cv.dnn.cuda4dnn.CeluOp.calculate,"void cv.dnn.cuda4dnn.CeluOp.calculate (ANY,ANY)",src\cuda4dnn\primitives\activation.hpp,"void calculate(csl::TensorSpan<T> output, csl::TensorView<T> input) const
        {
            kernels::celu<T>(stream, output, input, alpha);
        }",498.0,501.0,9.0,9.0,4.0,1,1,5,5,0,2,1,1,0,0,,0,2,4,2,2,void
2000,137820,GetReflection,1,opencv_caffe.HDF5DataParameter.GetReflection,Reflection opencv_caffe.HDF5DataParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",11593.0,11595.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
2001,367205,stream,3,cv.dnn.cuda4dnn.CeluOp.stream,,src\cuda4dnn\primitives\activation.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2002,367206,alpha,3,cv.dnn.cuda4dnn.CeluOp.alpha,,src\cuda4dnn\primitives\activation.hpp,alpha,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2003,137831,default_instance,1,opencv_caffe.HDF5DataParameter.default_instance,HDF5DataParameter opencv_caffe.HDF5DataParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const HDF5DataParameter& default_instance() {
    return *internal_default_instance();
  }",11596.0,11598.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,HDF5DataParameter
2004,137838,internal_default_instance,1,opencv_caffe.HDF5DataParameter.internal_default_instance,HDF5DataParameter opencv_caffe.HDF5DataParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const HDF5DataParameter* internal_default_instance() {
    return reinterpret_cast<const HDF5DataParameter*>(
               &_HDF5DataParameter_default_instance_);
  }",11599.0,11602.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,HDF5DataParameter
2005,318063,fbb_,3,opencv_tflite.HashtableImportOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2006,367215,calculate,1,cv.dnn.cuda4dnn.HardSigmoidOp.calculate,"void cv.dnn.cuda4dnn.HardSigmoidOp.calculate (ANY,ANY)",src\cuda4dnn\primitives\activation.hpp,"void calculate(csl::TensorSpan<T> output, csl::TensorView<T> input) const
        {
            kernels::hardsigmoid<T>(stream, output, input, alpha, beta);
        }",514.0,517.0,9.0,9.0,4.0,1,1,6,6,0,3,1,1,0,0,,0,3,4,2,2,void
2007,318065,HashtableImportOptionsBuilder,1,opencv_tflite.HashtableImportOptionsBuilder.HashtableImportOptionsBuilder,ANY opencv_tflite.HashtableImportOptionsBuilder.HashtableImportOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit HashtableImportOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",7770.0,7773.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
2008,318064,start_,3,opencv_tflite.HashtableImportOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2009,105076,SetCachedSize,1,opencv_caffe.ROIPoolingParameter.SetCachedSize,void opencv_caffe.ROIPoolingParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void ROIPoolingParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",32994.0,32996.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
2010,318076,Finish,1,opencv_tflite.HashtableImportOptionsBuilder.Finish,Offset<HashtableImportOptions> opencv_tflite.HashtableImportOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<HashtableImportOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<HashtableImportOptions>(end);
    return o;
  }",7774.0,7778.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<HashtableImportOptions>
2011,268926,SharedCtor,1,opencv_tensorflow.FunctionDef_Node.SharedCtor,void opencv_tensorflow.FunctionDef_Node.SharedCtor (),misc\tensorflow\function.pb.cc,"inline void FunctionDef_Node::SharedCtor() {
op_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  op_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}",463.0,468.0,1.0,1.0,6.0,4,2,3,3,0,1,1,1,0,0,,0,1,0,0,0,void
2012,105086,Clear,1,opencv_caffe.ROIPoolingParameter.Clear,void opencv_caffe.ROIPoolingParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void ROIPoolingParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.ROIPoolingParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&pooled_h_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pooled_w_) -
        reinterpret_cast<char*>(&pooled_h_)) + sizeof(pooled_w_));
    spatial_scale_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",32998.0,33013.0,1.0,1.0,16.0,18,9,12,6,0,7,2,2,0,0,,0,7,0,0,0,void
2013,367232,beta,3,cv.dnn.cuda4dnn.HardSigmoidOp.beta,,src\cuda4dnn\primitives\activation.hpp,beta,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2014,367230,stream,3,cv.dnn.cuda4dnn.HardSigmoidOp.stream,,src\cuda4dnn\primitives\activation.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2015,367231,alpha,3,cv.dnn.cuda4dnn.HardSigmoidOp.alpha,,src\cuda4dnn\primitives\activation.hpp,alpha,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2016,72325,SetCachedSize,1,opencv_caffe.MVNParameter.SetCachedSize,void opencv_caffe.MVNParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void MVNParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",23432.0,23434.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
2017,367241,calculate,1,cv.dnn.cuda4dnn.SeluOp.calculate,"void cv.dnn.cuda4dnn.SeluOp.calculate (ANY,ANY)",src\cuda4dnn\primitives\activation.hpp,"void calculate(csl::TensorSpan<T> output, csl::TensorView<T> input) const
        {
            kernels::selu<T>(stream, output, input, alpha, gamma);
        }",530.0,533.0,9.0,9.0,4.0,1,1,6,6,0,3,1,1,0,0,,0,3,4,2,2,void
2018,72335,Clear,1,opencv_caffe.MVNParameter.Clear,void opencv_caffe.MVNParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void MVNParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.MVNParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    across_channels_ = false;
    normalize_variance_ = true;
    eps_ = 1e-09f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",23436.0,23450.0,1.0,1.0,15.0,10,5,10,6,0,5,2,2,0,0,,0,5,0,0,0,void
2019,367256,stream,3,cv.dnn.cuda4dnn.SeluOp.stream,,src\cuda4dnn\primitives\activation.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2020,367257,alpha,3,cv.dnn.cuda4dnn.SeluOp.alpha,,src\cuda4dnn\primitives\activation.hpp,alpha,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2021,367258,gamma,3,cv.dnn.cuda4dnn.SeluOp.gamma,,src\cuda4dnn\primitives\activation.hpp,gamma,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2022,268956,SharedDtor,1,opencv_tensorflow.FunctionDef_Node.SharedDtor,void opencv_tensorflow.FunctionDef_Node.SharedDtor (),misc\tensorflow\function.pb.cc,"inline void FunctionDef_Node::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  op_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}",477.0,480.0,1.0,1.0,4.0,5,3,3,3,0,1,1,1,0,0,,0,1,0,0,0,void
2023,367265,calculate,1,cv.dnn.cuda4dnn.GeluOp.calculate,"void cv.dnn.cuda4dnn.GeluOp.calculate (ANY,ANY)",src\cuda4dnn\primitives\activation.hpp,"void calculate(csl::TensorSpan<T> output, csl::TensorView<T> input) const
        {
            kernels::gelu<T>(stream, output, input);
        }",545.0,548.0,9.0,9.0,4.0,1,1,4,4,0,1,1,1,0,0,,0,1,4,2,2,void
2024,318116,fbb_,3,opencv_tflite.HashtableSizeOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2025,318117,start_,3,opencv_tflite.HashtableSizeOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2026,318118,HashtableSizeOptionsBuilder,1,opencv_tflite.HashtableSizeOptionsBuilder.HashtableSizeOptionsBuilder,ANY opencv_tflite.HashtableSizeOptionsBuilder.HashtableSizeOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit HashtableSizeOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",7799.0,7802.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
2027,88743,SharedCtor,1,opencv_caffe.SPPParameter.SharedCtor,void opencv_caffe.SPPParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void SPPParameter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pyramid_height_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&engine_) -
    reinterpret_cast<char*>(&pyramid_height_)) + sizeof(engine_));
}",28530.0,28535.0,1.0,1.0,6.0,16,6,4,2,0,4,1,1,0,0,,0,4,0,0,0,void
2028,367278,stream,3,cv.dnn.cuda4dnn.GeluOp.stream,,src\cuda4dnn\primitives\activation.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2029,268975,ArenaDtor,1,opencv_tensorflow.FunctionDef_Node.ArenaDtor,void opencv_tensorflow.FunctionDef_Node.ArenaDtor (void*),misc\tensorflow\function.pb.cc,"void FunctionDef_Node::ArenaDtor(void* object) {
  FunctionDef_Node* _this = reinterpret_cast< FunctionDef_Node* >(object);
  (void)_this;
  _this->attr_. ~MapField();
}",482.0,486.0,1.0,1.0,5.0,5,4,4,2,0,1,1,1,0,0,,0,1,2,1,1,void
2030,318129,Finish,1,opencv_tflite.HashtableSizeOptionsBuilder.Finish,Offset<HashtableSizeOptions> opencv_tflite.HashtableSizeOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<HashtableSizeOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<HashtableSizeOptions>(end);
    return o;
  }",7803.0,7807.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<HashtableSizeOptions>
2031,307464,Finish,1,opencv_tflite.QuantizationParametersBuilder.Finish,Offset<QuantizationParameters> opencv_tflite.QuantizationParametersBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<QuantizationParameters> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<QuantizationParameters>(end);
    return o;
  }",2432.0,2436.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<QuantizationParameters>
2032,105139,_InternalParse,1,opencv_caffe.ROIPoolingParameter._InternalParse,"const char* opencv_caffe.ROIPoolingParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* ROIPoolingParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 pooled_h = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_pooled_h(&has_bits);
          pooled_h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pooled_w = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_pooled_w(&has_bits);
          pooled_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } e...",33015.0,33071.0,1.0,10.0,57.0,49,14,52,13,0,7,13,15,0,3,,0,4,4,2,2,const char*
2033,72373,_InternalParse,1,opencv_caffe.MVNParameter._InternalParse,"const char* opencv_caffe.MVNParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* MVNParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool normalize_variance = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_normalize_variance(&has_bits);
          normalize_variance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool across_channels = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_across_channels(&has_bits);
          across_channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadV...",23452.0,23508.0,1.0,10.0,57.0,49,14,52,13,0,7,13,15,0,3,,0,4,4,2,2,const char*
2034,367286,calculate,1,cv.dnn.cuda4dnn.ThresholdedReluOp.calculate,"void cv.dnn.cuda4dnn.ThresholdedReluOp.calculate (ANY,ANY)",src\cuda4dnn\primitives\activation.hpp,"void calculate(csl::TensorSpan<T> output, csl::TensorView<T> input) const
        {
            kernels::thresholdedrelu<T>(stream, output, input, alpha);
        }",559.0,562.0,9.0,9.0,4.0,1,1,5,5,0,2,1,1,0,0,,0,2,4,2,2,void
2035,383674,setAvgpool,1,cv.dnn.darknet.setLayersParams.setAvgpool,void cv.dnn.darknet.setLayersParams.setAvgpool (),src\darknet\darknet_io.cpp,"void setAvgpool()
                {
                    cv::dnn::LayerParams avgpool_param;
                    avgpool_param.set<cv::String>(""pool"", ""ave"");
                    avgpool_param.set<bool>(""global_pooling"", true);
                    avgpool_param.name = ""Pooling-name"";
                    avgpool_param.type = ""Pooling"";
                    darknet::LayerParameter lp;

                    std::string layer_name = cv::format(""avgpool_%d"", layer_id);
                    lp.layer_name = layer_name;
                    lp.layer_type = avgpool_param.type;
                    lp.layerParams = avgpool_param;
                    lp.bottom_indexes.push_back(last_layer);
                    last_layer = layer_name;
                    net->layers.push_back(lp);
                    layer_id++;
                    fused_layer_names.push_back(last_layer);
                }",292.0,310.0,17.0,17.0,19.0,27,8,23,8,0,7,1,1,0,0,,0,7,0,0,0,void
2036,55999,MergeFrom,1,opencv_caffe.SaveOutputParameter.MergeFrom,void opencv_caffe.SaveOutputParameter.MergeFrom (SaveOutputParameter),misc\caffe\opencv-caffe.pb.cc,"void SaveOutputParameter::MergeFrom(const SaveOutputParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.SaveOutputParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_output_directory(from._internal_output_directory());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_output_name_prefix(from._internal_output_name_prefix());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_output_format(from._internal_output_format());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_label_map_file(from._internal_label_map_file());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_name_size_file(from._internal_name_size_file());
    }
    if (cached_has_bits & 0x00000020u) {
      num_test_image_ = from.n...",18373.0,18402.0,1.0,1.0,30.0,26,8,24,6,1,4,8,14,0,0,,0,4,2,1,1,void
2037,367300,stream,3,cv.dnn.cuda4dnn.ThresholdedReluOp.stream,,src\cuda4dnn\primitives\activation.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2038,367301,alpha,3,cv.dnn.cuda4dnn.ThresholdedReluOp.alpha,,src\cuda4dnn\primitives\activation.hpp,alpha,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2039,121541,GetCachedSize,1,opencv_caffe.SolverState.GetCachedSize,int opencv_caffe.SolverState.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },4818.0,4818.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
2040,301771,_InternalSerialize,1,opencv_tensorflow.VersionDef._InternalSerialize,"uint8_t opencv_tensorflow.VersionDef._InternalSerialize (uint8_t*,ANY*)",misc\tensorflow\versions.pb.cc,"uint8_t* VersionDef::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_tensorflow.VersionDef)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 producer = 1;
  if (this->_internal_producer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_producer(), target);
  }

  // int32 min_consumer = 2;
  if (this->_internal_min_consumer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_min_consumer(), target);
  }

  // repeated int32 bad_consumers = 3;
  {
    int byte_size = _bad_consumers_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_bad_consumers(), byte_siz...",204.0,237.0,1.0,1.0,34.0,37,7,38,12,0,1,5,5,0,0,,0,1,4,2,2,uint8_t
2041,367311,calculate,1,cv.dnn.cuda4dnn.PowerOp.calculate,"void cv.dnn.cuda4dnn.PowerOp.calculate (ANY,ANY)",src\cuda4dnn\primitives\activation.hpp,"void calculate(csl::TensorSpan<T> output, csl::TensorView<T> input) const
        {
            kernels::power<T>(stream, output, input, exp, scale, shift);
        }",575.0,578.0,9.0,9.0,4.0,1,1,7,7,0,4,1,1,0,0,,0,4,4,2,2,void
2042,269014,SetCachedSize,1,opencv_tensorflow.FunctionDef_Node.SetCachedSize,void opencv_tensorflow.FunctionDef_Node.SetCachedSize (int),misc\tensorflow\function.pb.cc,"void FunctionDef_Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",492.0,494.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
2043,318169,fbb_,3,opencv_tflite.VarHandleOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
2044,318170,start_,3,opencv_tflite.VarHandleOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2045,318171,add_container,1,opencv_tflite.VarHandleOptionsBuilder.add_container,void opencv_tflite.VarHandleOptionsBuilder.add_container (ANY),misc\tflite\schema_generated.hpp,"void add_container(::flatbuffers::Offset<::flatbuffers::String> container) {
    fbb_.AddOffset(VarHandleOptions::VT_CONTAINER, container);
  }",7842.0,7844.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
2046,367327,stream,3,cv.dnn.cuda4dnn.PowerOp.stream,,src\cuda4dnn\primitives\activation.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2047,269024,Clear,1,opencv_tensorflow.FunctionDef_Node.Clear,void opencv_tensorflow.FunctionDef_Node.Clear (),misc\tensorflow\function.pb.cc,"void FunctionDef_Node::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_tensorflow.FunctionDef.Node)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ret_.Clear();
  arg_.Clear();
  dep_.Clear();
  attr_.Clear();
  op_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",496.0,508.0,1.0,1.0,13.0,8,3,8,7,0,5,1,1,0,0,,0,5,0,0,0,void
2048,367329,scale,3,cv.dnn.cuda4dnn.PowerOp.scale,,src\cuda4dnn\primitives\activation.hpp,scale,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2049,367330,shift,3,cv.dnn.cuda4dnn.PowerOp.shift,,src\cuda4dnn\primitives\activation.hpp,shift,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2050,367328,exp,3,cv.dnn.cuda4dnn.PowerOp.exp,,src\cuda4dnn\primitives\activation.hpp,exp,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2051,318184,add_shared_name,1,opencv_tflite.VarHandleOptionsBuilder.add_shared_name,void opencv_tflite.VarHandleOptionsBuilder.add_shared_name (ANY),misc\tflite\schema_generated.hpp,"void add_shared_name(::flatbuffers::Offset<::flatbuffers::String> shared_name) {
    fbb_.AddOffset(VarHandleOptions::VT_SHARED_NAME, shared_name);
  }",7845.0,7847.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
2052,367339,calculate,1,cv.dnn.cuda4dnn.ExpOp.calculate,"void cv.dnn.cuda4dnn.ExpOp.calculate (ANY,ANY)",src\cuda4dnn\primitives\activation.hpp,"void calculate(csl::TensorSpan<T> output, csl::TensorView<T> input) const
        {
            kernels::exp<T>(stream, output, input, normScale, normShift);
        }",591.0,594.0,9.0,9.0,4.0,1,1,6,6,0,3,1,1,0,0,,0,3,4,2,2,void
2053,137963,GetCachedSize,1,opencv_caffe.HDF5DataParameter.GetCachedSize,int opencv_caffe.HDF5DataParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },11647.0,11647.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
2054,6899,_InternalSerialize,1,opencv_caffe.BlobProto._InternalSerialize,"uint8_t opencv_caffe.BlobProto._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* BlobProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.BlobProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num = 1 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num(), target);
  }

  // optional int32 channels = 2 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_channels(), target);
  }

  // optional int32 height = 3 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Writ...",4503.0,4581.0,1.0,1.0,79.0,83,8,88,11,0,2,13,13,0,1,,0,2,4,2,2,uint8_t
2055,318197,VarHandleOptionsBuilder,1,opencv_tflite.VarHandleOptionsBuilder.VarHandleOptionsBuilder,ANY opencv_tflite.VarHandleOptionsBuilder.VarHandleOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit VarHandleOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",7848.0,7851.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
2056,88822,SetCachedSize,1,opencv_caffe.SPPParameter.SetCachedSize,void opencv_caffe.SPPParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void SPPParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",28554.0,28556.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
2057,367354,stream,3,cv.dnn.cuda4dnn.ExpOp.stream,,src\cuda4dnn\primitives\activation.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2058,367355,normScale,3,cv.dnn.cuda4dnn.ExpOp.normScale,,src\cuda4dnn\primitives\activation.hpp,normScale,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2059,367356,normShift,3,cv.dnn.cuda4dnn.ExpOp.normShift,,src\cuda4dnn\primitives\activation.hpp,normShift,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2060,236286,MergeFrom,1,opencv_onnx.TensorProto.MergeFrom,void opencv_onnx.TensorProto.MergeFrom (TensorProto),misc\onnx\opencv-onnx.pb.cc,"void TensorProto::MergeFrom(const TensorProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_onnx.TensorProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  dims_.MergeFrom(from.dims_);
  float_data_.MergeFrom(from.float_data_);
  int32_data_.MergeFrom(from.int32_data_);
  string_data_.MergeFrom(from.string_data_);
  int64_data_.MergeFrom(from.int64_data_);
  double_data_.MergeFrom(from.double_data_);
  uint64_data_.MergeFrom(from.uint64_data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_raw_data(from._internal_raw_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_doc_string(from._internal_doc_string());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_segment()->::openc...",4382.0,4415.0,1.0,1.0,34.0,39,9,36,13,1,19,7,12,0,1,,0,18,2,1,1,void
2061,88832,Clear,1,opencv_caffe.SPPParameter.Clear,void opencv_caffe.SPPParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void SPPParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.SPPParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&pyramid_height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&engine_) -
        reinterpret_cast<char*>(&pyramid_height_)) + sizeof(engine_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",28558.0,28572.0,1.0,1.0,15.0,17,9,11,5,0,6,2,2,0,0,,0,6,0,0,0,void
2062,318208,Finish,1,opencv_tflite.VarHandleOptionsBuilder.Finish,Offset<VarHandleOptions> opencv_tflite.VarHandleOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<VarHandleOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<VarHandleOptions>(end);
    return o;
  }",7852.0,7856.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<VarHandleOptions>
2063,269059,_InternalParse,1,opencv_tensorflow.FunctionDef_Node._InternalParse,"const char* opencv_tensorflow.FunctionDef_Node._InternalParse (char*,ANY*)",misc\tensorflow\function.pb.cc,"const char* FunctionDef_Node::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ret();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, ""opencv_tensorflow.FunctionDef.Node.ret""));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string op = 2;
      case 2:
      ...",510.0,605.0,1.0,12.0,96.0,97,15,109,12,0,1,29,57,0,0,,0,1,4,2,2,const char*
2064,367365,calculate,1,cv.dnn.cuda4dnn.ShrinkOp.calculate,"void cv.dnn.cuda4dnn.ShrinkOp.calculate (ANY,ANY)",src\cuda4dnn\primitives\activation.hpp,"void calculate(csl::TensorSpan<T> output, csl::TensorView<T> input) const
        {
            kernels::shrink<T>(stream, output, input, bias, lambd);
        }",607.0,610.0,9.0,9.0,4.0,1,1,6,6,0,3,1,1,0,0,,0,3,4,2,2,void
2065,383758,setCrop,1,cv.dnn.darknet.setLayersParams.setCrop,"void cv.dnn.darknet.setLayersParams.setCrop (int,int,int,int,bool)",src\darknet\darknet_io.cpp,"void setCrop(int crop_height, int crop_width, int inp_height, int inp_width, bool noadjust)
                {
                    cv::dnn::LayerParams crop_param;
                    crop_param.name = ""CropLayer-name"";
                    std::vector<int> begin = {0, 0, (inp_height - crop_height) / 2, (inp_width - crop_width) / 2};
                    std::vector<int> sizes = {-1, -1, crop_height, crop_width};
                    crop_param.set(""begin"", DictValue::arrayInt(&begin[0], begin.size()));
                    crop_param.set(""size"", DictValue::arrayInt(&sizes[0], sizes.size()));
                    crop_param.type = ""Slice"";

                    darknet::LayerParameter lp;
                    std::string layer_name = cv::format(""crop_%d"", layer_id);
                    lp.layer_name = layer_name;
                    lp.layer_type = crop_param.type;
                    lp.layerParams = crop_param;
                    lp.bottom_indexes.push_back(last_layer);
                 ...",312.0,352.0,17.0,17.0,41.0,58,11,54,17,0,12,2,2,0,0,,0,12,10,5,5,void
2066,367380,stream,3,cv.dnn.cuda4dnn.ShrinkOp.stream,,src\cuda4dnn\primitives\activation.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2067,367381,bias,3,cv.dnn.cuda4dnn.ShrinkOp.bias,,src\cuda4dnn\primitives\activation.hpp,bias,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2068,367382,lambd,3,cv.dnn.cuda4dnn.ShrinkOp.lambd,,src\cuda4dnn\primitives\activation.hpp,lambd,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2069,318232,CreateVarHandleOptions,1,opencv_tflite.CreateVarHandleOptions,"Offset<VarHandleOptions> opencv_tflite.CreateVarHandleOptions (ANY,ANY,ANY)",misc\tflite\schema_generated.hpp,"inline ::flatbuffers::Offset<VarHandleOptions> CreateVarHandleOptions(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> container = 0,
    ::flatbuffers::Offset<::flatbuffers::String> shared_name = 0) {
  VarHandleOptionsBuilder builder_(_fbb);
  builder_.add_shared_name(shared_name);
  builder_.add_container(container);
  return builder_.Finish();
}",7859.0,7867.0,1.0,1.0,9.0,3,1,6,4,1,0,1,1,0,0,,0,0,6,3,3,Offset<VarHandleOptions>
2070,367389,calculate,1,cv.dnn.cuda4dnn.SignOp.calculate,"void cv.dnn.cuda4dnn.SignOp.calculate (ANY,ANY)",src\cuda4dnn\primitives\activation.hpp,"void calculate(csl::TensorSpan<T> output, csl::TensorView<T> input) const
        {
            kernels::sign<T>(stream, output, input);
        }",623.0,626.0,9.0,9.0,4.0,1,1,4,4,0,1,1,1,0,0,,0,1,4,2,2,void
2071,367402,stream,3,cv.dnn.cuda4dnn.SignOp.stream,,src\cuda4dnn\primitives\activation.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2072,285489,_InternalSerialize,1,opencv_tensorflow.OpDef._InternalSerialize,"uint8_t opencv_tensorflow.OpDef._InternalSerialize (uint8_t*,ANY*)",misc\tensorflow\op_def.pb.cc,"uint8_t* OpDef::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_tensorflow.OpDef)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      ""opencv_tensorflow.OpDef.name"");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .opencv_tensorflow.OpDef.ArgDef input_arg = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_input_arg_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2,...",1416.0,1514.0,1.0,1.0,99.0,144,8,125,12,0,1,13,13,0,1,,0,1,4,2,2,uint8_t
2073,88882,_InternalParse,1,opencv_caffe.SPPParameter._InternalParse,"const char* opencv_caffe.SPPParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* SPPParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 pyramid_height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_pyramid_height(&has_bits);
          pyramid_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .opencv_caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_T...",28574.0,28638.0,1.0,10.0,65.0,49,12,54,12,0,5,15,23,2,3,,0,4,4,2,2,const char*
2074,367409,calculate,1,cv.dnn.cuda4dnn.ReciprocalOp.calculate,"void cv.dnn.cuda4dnn.ReciprocalOp.calculate (ANY,ANY)",src\cuda4dnn\primitives\activation.hpp,"void calculate(csl::TensorSpan<T> output, csl::TensorView<T> input) const
        {
            kernels::reciprocal<T>(stream, output, input);
        }",638.0,641.0,9.0,9.0,4.0,1,1,4,4,0,1,1,1,0,0,,0,1,4,2,2,void
2075,318257,CreateVarHandleOptionsDirect,1,opencv_tflite.CreateVarHandleOptionsDirect,"Offset<VarHandleOptions> opencv_tflite.CreateVarHandleOptionsDirect (ANY,char*,char*)",misc\tflite\schema_generated.hpp,"inline ::flatbuffers::Offset<VarHandleOptions> CreateVarHandleOptionsDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *container = nullptr,
    const char *shared_name = nullptr) {
  auto container__ = container ? _fbb.CreateString(container) : 0;
  auto shared_name__ = shared_name ? _fbb.CreateString(shared_name) : 0;
  return opencv_tflite::CreateVarHandleOptions(
      _fbb,
      container__,
      shared_name__);
}",7869.0,7879.0,1.0,1.0,11.0,7,3,12,6,0,1,1,1,0,1,,0,0,6,3,3,Offset<VarHandleOptions>
2076,56124,InternalSwap,1,opencv_caffe.SaveOutputParameter.InternalSwap,void opencv_caffe.SaveOutputParameter.InternalSwap (SaveOutputParameter*),misc\caffe\opencv-caffe.pb.cc,"void SaveOutputParameter::InternalSwap(SaveOutputParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &output_directory_, lhs_arena,
      &other->output_directory_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &output_name_prefix_, lhs_arena,
      &other->output_name_prefix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &output_format_, lhs_arena,
      &other->output_format_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::in...",18415.0,18447.0,1.0,1.0,33.0,55,5,54,14,0,14,1,1,0,0,,0,14,2,1,1,void
2077,367422,stream,3,cv.dnn.cuda4dnn.ReciprocalOp.stream,,src\cuda4dnn\primitives\activation.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2078,222828,descriptor_table_opencv_2donnx_2eproto_getter,1,descriptor_table_opencv_2donnx_2eproto_getter,DescriptorTable descriptor_table_opencv_2donnx_2eproto_getter (),misc\onnx\opencv-onnx.pb.cc,"const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_opencv_2donnx_2eproto_getter() {
  return &descriptor_table_opencv_2donnx_2eproto;
}",557.0,559.0,25.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,DescriptorTable
2079,301906,ByteSizeLong,1,opencv_tensorflow.VersionDef.ByteSizeLong,size_t opencv_tensorflow.VersionDef.ByteSizeLong (),misc\tensorflow\versions.pb.cc,"size_t VersionDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_tensorflow.VersionDef)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 bad_consumers = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->bad_consumers_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bad_consumers_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 producer = 1;
  if (this->_internal_producer() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->...",239.0,273.0,1.0,1.0,35.0,36,9,32,10,0,3,4,4,0,0,,0,3,0,0,0,size_t
2080,367443,BatchNormOp,1,cv.dnn.cuda4dnn.BatchNormOp.BatchNormOp,"ANY cv.dnn.cuda4dnn.BatchNormOp.BatchNormOp (ANY,ANY,ANY)",src\cuda4dnn\primitives\batch_norm.hpp,"BatchNormOp(csl::Stream stream_, const cv::Mat& weights, const cv::Mat& bias)
            : stream(std::move(stream_))
        {
            biasTensor = csl::makeTensorHeader<T>(bias);
            csl::copyMatToTensor<T>(bias, biasTensor, stream);

            weightsTensor = csl::makeTensorHeader<T>(weights);
            csl::copyMatToTensor<T>(weights, weightsTensor, stream);
        }",24.0,32.0,9.0,9.0,9.0,18,6,18,7,0,6,1,1,0,0,,0,6,6,3,3,ANY
2081,318297,fbb_,3,opencv_tflite.ReadVariableOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2082,318298,start_,3,opencv_tflite.ReadVariableOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2083,318299,ReadVariableOptionsBuilder,1,opencv_tflite.ReadVariableOptionsBuilder.ReadVariableOptionsBuilder,ANY opencv_tflite.ReadVariableOptionsBuilder.ReadVariableOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit ReadVariableOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",7893.0,7896.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
2084,318310,Finish,1,opencv_tflite.ReadVariableOptionsBuilder.Finish,Offset<ReadVariableOptions> opencv_tflite.ReadVariableOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<ReadVariableOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ReadVariableOptions>(end);
    return o;
  }",7897.0,7901.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<ReadVariableOptions>
2085,367490,forward,1,cv.dnn.cuda4dnn.BatchNormOp.forward,"void cv.dnn.cuda4dnn.BatchNormOp.forward (ANY,ANY,ANY)",src\cuda4dnn\primitives\batch_norm.hpp,"void forward(
            const std::vector<cv::Ptr<BackendWrapper>>& inputs,
            const std::vector<cv::Ptr<BackendWrapper>>& outputs,
            csl::Workspace& workspace) override
        {
            CV_Assert(inputs.size() == 1 && outputs.size() == 1);

            auto input_wrapper = inputs[0].dynamicCast<wrapper_type>();
            auto input = input_wrapper->getView();

            auto output_wrapper = outputs[0].dynamicCast<wrapper_type>();
            auto output = output_wrapper->getSpan();

            std::size_t inner_size = input.size_range(2, input.rank());
            kernels::scaleN_with_biasN<T>(stream, output, input, inner_size, weightsTensor, biasTensor);
        }",34.0,49.0,9.0,9.0,16.0,19,6,20,11,0,3,1,1,0,0,,0,3,6,3,3,void
2086,105348,_InternalSerialize,1,opencv_caffe.ROIPoolingParameter._InternalSerialize,"uint8_t opencv_caffe.ROIPoolingParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* ROIPoolingParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.ROIPoolingParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pooled_h = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pooled_h(), target);
  }

  // optional uint32 pooled_w = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pooled_w(), target);
  }

  // optional float spatial_scale = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAM...",33073.0,33104.0,1.0,1.0,32.0,39,8,43,10,0,1,5,5,0,0,,0,1,4,2,2,uint8_t
2087,72582,_InternalSerialize,1,opencv_caffe.MVNParameter._InternalSerialize,"uint8_t opencv_caffe.MVNParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* MVNParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.MVNParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool normalize_variance = 1 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_normalize_variance(), target);
  }

  // optional bool across_channels = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_across_channels(), target);
  }

  // optional float eps = 3 [default = 1e-09];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = :...",23510.0,23541.0,1.0,1.0,32.0,39,8,43,10,0,1,5,5,0,0,,0,1,4,2,2,uint8_t
2088,318350,fbb_,3,opencv_tflite.AssignVariableOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2089,318351,start_,3,opencv_tflite.AssignVariableOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2090,318352,AssignVariableOptionsBuilder,1,opencv_tflite.AssignVariableOptionsBuilder.AssignVariableOptionsBuilder,ANY opencv_tflite.AssignVariableOptionsBuilder.AssignVariableOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit AssignVariableOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",7922.0,7925.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
2091,318363,Finish,1,opencv_tflite.AssignVariableOptionsBuilder.Finish,Offset<AssignVariableOptions> opencv_tflite.AssignVariableOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<AssignVariableOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AssignVariableOptions>(end);
    return o;
  }",7926.0,7930.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<AssignVariableOptions>
2092,138148,_has_bits_,3,opencv_caffe.HDF5DataParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
2093,236453,InternalSwap,1,opencv_onnx.TensorProto.InternalSwap,void opencv_onnx.TensorProto.InternalSwap (TensorProto*),misc\onnx\opencv-onnx.pb.cc,"void TensorProto::InternalSwap(TensorProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  dims_.InternalSwap(&other->dims_);
  float_data_.InternalSwap(&other->float_data_);
  int32_data_.InternalSwap(&other->int32_data_);
  string_data_.InternalSwap(&other->string_data_);
  int64_data_.InternalSwap(&other->int64_data_);
  double_data_.InternalSwap(&other->double_data_);
  uint64_data_.InternalSwap(&other->uint64_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &raw_data_, lhs_arena,
      &othe...",4428.0,4462.0,1.0,1.0,35.0,72,13,57,21,0,27,1,1,0,0,,0,27,2,1,1,void
2094,138149,_cached_size_,3,opencv_caffe.HDF5DataParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2095,138151,batch_size_,3,opencv_caffe.HDF5DataParameter.batch_size_,,misc\caffe\opencv-caffe.pb.hpp,batch_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
2096,138152,shuffle_,3,opencv_caffe.HDF5DataParameter.shuffle_,,misc\caffe\opencv-caffe.pb.hpp,shuffle_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
2097,138150,source_,3,opencv_caffe.HDF5DataParameter.source_,,misc\caffe\opencv-caffe.pb.hpp,source_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2098,121773,_has_bits_,3,opencv_caffe.SolverState._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
2099,121774,_cached_size_,3,opencv_caffe.SolverState._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2100,121775,history_,3,opencv_caffe.SolverState.history_,,misc\caffe\opencv-caffe.pb.hpp,history_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
2101,76307,GetMetadata,1,opencv_caffe.PowerParameter.GetMetadata,Metadata opencv_caffe.PowerParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata PowerParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[49]);
}",24644.0,24648.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
2102,121777,iter_,3,opencv_caffe.SolverState.iter_,,misc\caffe\opencv-caffe.pb.hpp,iter_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
2103,121778,current_step_,3,opencv_caffe.SolverState.current_step_,,misc\caffe\opencv-caffe.pb.hpp,current_step_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
2104,121776,learned_net_,3,opencv_caffe.SolverState.learned_net_,,misc\caffe\opencv-caffe.pb.hpp,learned_net_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2105,318403,fbb_,3,opencv_tflite.RandomOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
2106,318404,start_,3,opencv_tflite.RandomOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2107,318405,add_seed,1,opencv_tflite.RandomOptionsBuilder.add_seed,void opencv_tflite.RandomOptionsBuilder.add_seed (int64_t),misc\tflite\schema_generated.hpp,"void add_seed(int64_t seed) {
    fbb_.AddElement<int64_t>(RandomOptions::VT_SEED, seed, 0);
  }",7963.0,7965.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
2108,383948,setSoftmax,1,cv.dnn.darknet.setLayersParams.setSoftmax,void cv.dnn.darknet.setLayersParams.setSoftmax (),src\darknet\darknet_io.cpp,"void setSoftmax()
                {
                    cv::dnn::LayerParams softmax_param;
                    softmax_param.name = ""Softmax-name"";
                    softmax_param.type = ""Softmax"";
                    // set default axis to 1
                    if(!softmax_param.has(""axis""))
                        softmax_param.set(""axis"", 1);
                    darknet::LayerParameter lp;

                    std::string layer_name = cv::format(""softmax_%d"", layer_id);
                    lp.layer_name = layer_name;
                    lp.layer_type = softmax_param.type;
                    lp.layerParams = softmax_param;
                    lp.bottom_indexes.push_back(last_layer);
                    last_layer = layer_name;
                    net->layers.push_back(lp);
                    layer_id++;
                    fused_layer_names.push_back(last_layer);
                }",354.0,373.0,17.0,17.0,20.0,23,5,22,8,0,7,2,2,0,0,,0,7,0,0,0,void
2109,367565,stream,3,cv.dnn.cuda4dnn.BatchNormOp.stream,,src\cuda4dnn\primitives\batch_norm.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2110,367566,weightsTensor,3,cv.dnn.cuda4dnn.BatchNormOp.weightsTensor,,src\cuda4dnn\primitives\batch_norm.hpp,weightsTensor,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2111,367567,biasTensor,3,cv.dnn.cuda4dnn.BatchNormOp.biasTensor,,src\cuda4dnn\primitives\batch_norm.hpp,biasTensor,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2112,56277,GetMetadata,1,opencv_caffe.SaveOutputParameter.GetMetadata,Metadata opencv_caffe.SaveOutputParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata SaveOutputParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[28]);
}",18449.0,18453.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
2113,318423,add_seed2,1,opencv_tflite.RandomOptionsBuilder.add_seed2,void opencv_tflite.RandomOptionsBuilder.add_seed2 (int64_t),misc\tflite\schema_generated.hpp,"void add_seed2(int64_t seed2) {
    fbb_.AddElement<int64_t>(RandomOptions::VT_SEED2, seed2, 0);
  }",7966.0,7968.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
2114,318441,RandomOptionsBuilder,1,opencv_tflite.RandomOptionsBuilder.RandomOptionsBuilder,ANY opencv_tflite.RandomOptionsBuilder.RandomOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit RandomOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",7969.0,7972.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
2115,56297,set_has_dropout_ratio,1,opencv_caffe._Internal.set_has_dropout_ratio,void opencv_caffe._Internal.set_has_dropout_ratio (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_dropout_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }",30834.0,30836.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
2116,302060,MergeFrom,1,opencv_tensorflow.VersionDef.MergeFrom,void opencv_tensorflow.VersionDef.MergeFrom (VersionDef),misc\tensorflow\versions.pb.cc,"void VersionDef::MergeFrom(const VersionDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_tensorflow.VersionDef)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  bad_consumers_.MergeFrom(from.bad_consumers_);
  if (from._internal_producer() != 0) {
    _internal_set_producer(from._internal_producer());
  }
  if (from._internal_min_consumer() != 0) {
    _internal_set_min_consumer(from._internal_min_consumer());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",288.0,302.0,1.0,1.0,15.0,16,7,12,5,1,2,3,3,0,0,,0,2,2,1,1,void
2117,367603,forward,1,cv.dnn.cuda4dnn.ConcatOp.forward,"void cv.dnn.cuda4dnn.ConcatOp.forward (ANY,ANY,ANY)",src\cuda4dnn\primitives\concat.hpp,"void forward(
            const std::vector<cv::Ptr<BackendWrapper>>& inputs,
            const std::vector<cv::Ptr<BackendWrapper>>& outputs,
            csl::Workspace& workspace) override
        {
            CV_Assert(outputs.size() == 1);

            auto output_wrapper = outputs[0].dynamicCast<wrapper_type>();
            auto output = output_wrapper->getSpan();

            if(zero_padding)
            {
                auto output_shape = output_wrapper->getShape();

                kernels::fill<T>(stream, output, 0.0);

                std::size_t output_concat_axis_offset = 0;
                for (int i = 0; i < inputs.size(); i++)
                {
                    auto input_wrapper = inputs[i].dynamicCast<wrapper_type>();
                    auto input = input_wrapper->getView();
                    auto input_shape = input_wrapper->getShape();

                    std::vector<std::size_t> offsets(input_shape.size());
                    for (int j = 0; j < offset...",34.0,80.0,9.0,9.0,47.0,34,8,39,17,0,5,4,7,1,0,,0,5,6,3,3,void
2118,318452,Finish,1,opencv_tflite.RandomOptionsBuilder.Finish,Offset<RandomOptions> opencv_tflite.RandomOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<RandomOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RandomOptions>(end);
    return o;
  }",7973.0,7977.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<RandomOptions>
2119,56308,set_has_scale_train,1,opencv_caffe._Internal.set_has_scale_train,void opencv_caffe._Internal.set_has_scale_train (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_scale_train(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }",18463.0,18465.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
2120,105484,ByteSizeLong,1,opencv_caffe.ROIPoolingParameter.ByteSizeLong,size_t opencv_caffe.ROIPoolingParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t ROIPoolingParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.ROIPoolingParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 pooled_h = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_pooled_h());
    }

    // optional uint32 pooled_w = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_pooled_w());
    }

    // optional float spatial_scale = 3 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}",33106.0,33133.0,1.0,1.0,28.0,22,9,20,7,0,2,5,8,0,0,,0,2,0,0,0,size_t
2121,72718,ByteSizeLong,1,opencv_caffe.MVNParameter.ByteSizeLong,size_t opencv_caffe.MVNParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t MVNParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.MVNParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool across_channels = 2 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool normalize_variance = 1 [default = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional float eps = 3 [default = 1e-09];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}",23543.0,23570.0,1.0,1.0,28.0,16,7,14,4,0,2,5,8,0,0,,0,2,0,0,0,size_t
2122,138258,descriptor,1,opencv_caffe.HDF5OutputParameter.descriptor,Descriptor opencv_caffe.HDF5OutputParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",11780.0,11782.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
2123,138264,GetDescriptor,1,opencv_caffe.HDF5OutputParameter.GetDescriptor,Descriptor opencv_caffe.HDF5OutputParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",11783.0,11785.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
2124,384028,setConcat,1,cv.dnn.darknet.setLayersParams.setConcat,"void cv.dnn.darknet.setLayersParams.setConcat (int,int*)",src\darknet\darknet_io.cpp,"void setConcat(int number_of_inputs, int *input_indexes)
                {
                    cv::dnn::LayerParams concat_param;
                    concat_param.name = ""Concat-name"";
                    concat_param.type = ""Concat"";
                    concat_param.set<int>(""axis"", 1);	// channels are in axis = 1

                    darknet::LayerParameter lp;

                    std::string layer_name = cv::format(""concat_%d"", layer_id);
                    lp.layer_name = layer_name;
                    lp.layer_type = concat_param.type;
                    lp.layerParams = concat_param;
                    for (int i = 0; i < number_of_inputs; ++i)
                        lp.bottom_indexes.push_back(fused_layer_names.at(input_indexes[i]));

                    last_layer = layer_name;
                    net->layers.push_back(lp);

                    layer_id++;
                    fused_layer_names.push_back(last_layer);
                }",375.0,396.0,17.0,17.0,22.0,21,5,22,10,0,6,2,2,0,0,,0,6,4,2,2,void
2125,121884,descriptor,1,opencv_caffe.NetState.descriptor,Descriptor opencv_caffe.NetState.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",4971.0,4973.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
2126,121890,GetDescriptor,1,opencv_caffe.NetState.GetDescriptor,Descriptor opencv_caffe.NetState.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",4974.0,4976.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
2127,138275,GetReflection,1,opencv_caffe.HDF5OutputParameter.GetReflection,Reflection opencv_caffe.HDF5OutputParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",11786.0,11788.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
2128,7206,ByteSizeLong,1,opencv_caffe.BlobProto.ByteSizeLong,size_t opencv_caffe.BlobProto.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t BlobProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.BlobProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float data = 5 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float diff = 6 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_diff_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += d...",4583.0,4683.0,1.0,1.0,101.0,104,12,88,10,0,3,13,20,0,0,,0,3,0,0,0,size_t
2129,318504,fbb_,3,opencv_tflite.BucketizeOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2130,318505,start_,3,opencv_tflite.BucketizeOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2131,318506,add_boundaries,1,opencv_tflite.BucketizeOptionsBuilder.add_boundaries,void opencv_tflite.BucketizeOptionsBuilder.add_boundaries (ANY),misc\tflite\schema_generated.hpp,"void add_boundaries(::flatbuffers::Offset<::flatbuffers::Vector<float>> boundaries) {
    fbb_.AddOffset(BucketizeOptions::VT_BOUNDARIES, boundaries);
  }",8010.0,8012.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
2132,89133,_InternalSerialize,1,opencv_caffe.SPPParameter._InternalSerialize,"uint8_t opencv_caffe.SPPParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* SPPParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.SPPParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pyramid_height = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pyramid_height(), target);
  }

  // optional .opencv_caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_pool(), target);
  }

  // optional .opencv_caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureS...",28640.0,28673.0,1.0,1.0,34.0,39,8,43,10,0,1,5,5,0,0,,0,1,4,2,2,uint8_t
2133,138286,default_instance,1,opencv_caffe.HDF5OutputParameter.default_instance,HDF5OutputParameter opencv_caffe.HDF5OutputParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const HDF5OutputParameter& default_instance() {
    return *internal_default_instance();
  }",11789.0,11791.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,HDF5OutputParameter
2134,121901,GetReflection,1,opencv_caffe.NetState.GetReflection,Reflection opencv_caffe.NetState.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",4977.0,4979.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
2135,56372,SharedCtor,1,opencv_caffe.DropoutParameter.SharedCtor,void opencv_caffe.DropoutParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void DropoutParameter::SharedCtor() {
dropout_ratio_ = 0.5f;
scale_train_ = true;
}",18487.0,18490.0,1.0,1.0,4.0,2,1,2,2,0,2,1,1,0,0,,0,2,0,0,0,void
2136,138293,internal_default_instance,1,opencv_caffe.HDF5OutputParameter.internal_default_instance,HDF5OutputParameter opencv_caffe.HDF5OutputParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const HDF5OutputParameter* internal_default_instance() {
    return reinterpret_cast<const HDF5OutputParameter*>(
               &_HDF5OutputParameter_default_instance_);
  }",11792.0,11795.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,HDF5OutputParameter
2137,318519,BucketizeOptionsBuilder,1,opencv_tflite.BucketizeOptionsBuilder.BucketizeOptionsBuilder,ANY opencv_tflite.BucketizeOptionsBuilder.BucketizeOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit BucketizeOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",8013.0,8016.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
2138,121912,default_instance,1,opencv_caffe.NetState.default_instance,NetState opencv_caffe.NetState.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const NetState& default_instance() {
    return *internal_default_instance();
  }",4980.0,4982.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,NetState
2139,302141,InternalSwap,1,opencv_tensorflow.VersionDef.InternalSwap,void opencv_tensorflow.VersionDef.InternalSwap (VersionDef*),misc\tensorflow\versions.pb.cc,"void VersionDef::InternalSwap(VersionDef* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  bad_consumers_.InternalSwap(&other->bad_consumers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VersionDef, min_consumer_)
      + sizeof(VersionDef::min_consumer_)
      - PROTOBUF_FIELD_OFFSET(VersionDef, producer_)>(
          reinterpret_cast<char*>(&producer_),
          reinterpret_cast<char*>(&other->producer_));
}",315.0,325.0,1.0,1.0,11.0,21,11,13,8,0,7,1,1,0,0,,0,7,2,1,1,void
2140,121919,internal_default_instance,1,opencv_caffe.NetState.internal_default_instance,NetState opencv_caffe.NetState.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const NetState* internal_default_instance() {
    return reinterpret_cast<const NetState*>(
               &_NetState_default_instance_);
  }",4983.0,4986.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,NetState
2141,318530,Finish,1,opencv_tflite.BucketizeOptionsBuilder.Finish,Offset<BucketizeOptions> opencv_tflite.BucketizeOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<BucketizeOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<BucketizeOptions>(end);
    return o;
  }",8017.0,8021.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<BucketizeOptions>
2142,40014,MergeFrom,1,opencv_caffe.LayerParameter.MergeFrom,void opencv_caffe.LayerParameter.MergeFrom (LayerParameter),misc\caffe\opencv-caffe.pb.cc,"void LayerParameter::MergeFrom(const LayerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.LayerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  bottom_.MergeFrom(from.bottom_);
  top_.MergeFrom(from.top_);
  loss_weight_.MergeFrom(from.loss_weight_);
  param_.MergeFrom(from.param_);
  blobs_.MergeFrom(from.blobs_);
  include_.MergeFrom(from.include_);
  exclude_.MergeFrom(from.exclude_);
  propagate_down_.MergeFrom(from.propagate_down_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_transform_param()->::opencv_caffe::TransformationParameter::MergeFrom(from._internal_transform_param());
    }
    if (...",13706.0,13908.0,1.0,1.0,203.0,205,9,147,12,0,72,65,121,0,54,,0,18,2,1,1,void
2143,318554,CreateBucketizeOptions,1,opencv_tflite.CreateBucketizeOptions,"Offset<BucketizeOptions> opencv_tflite.CreateBucketizeOptions (ANY,ANY)",misc\tflite\schema_generated.hpp,"inline ::flatbuffers::Offset<BucketizeOptions> CreateBucketizeOptions(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> boundaries = 0) {
  BucketizeOptionsBuilder builder_(_fbb);
  builder_.add_boundaries(boundaries);
  return builder_.Finish();
}",8024.0,8030.0,1.0,1.0,7.0,2,1,4,3,1,0,1,1,0,0,,0,0,4,2,2,Offset<BucketizeOptions>
2144,236642,GetMetadata,1,opencv_onnx.TensorProto.GetMetadata,Metadata opencv_onnx.TensorProto.GetMetadata (),misc\onnx\opencv-onnx.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata TensorProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2donnx_2eproto_getter, &descriptor_table_opencv_2donnx_2eproto_once,
      file_level_metadata_opencv_2donnx_2eproto[7]);
}",4464.0,4468.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
2145,56424,SetCachedSize,1,opencv_caffe.DropoutParameter.SetCachedSize,void opencv_caffe.DropoutParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void DropoutParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",18509.0,18511.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
2146,72812,MergeFrom,1,opencv_caffe.MVNParameter.MergeFrom,void opencv_caffe.MVNParameter.MergeFrom (MVNParameter),misc\caffe\opencv-caffe.pb.cc,"void MVNParameter::MergeFrom(const MVNParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.MVNParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      across_channels_ = from.across_channels_;
    }
    if (cached_has_bits & 0x00000002u) {
      normalize_variance_ = from.normalize_variance_;
    }
    if (cached_has_bits & 0x00000004u) {
      eps_ = from.eps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",23585.0,23605.0,1.0,1.0,21.0,22,8,20,8,2,8,5,8,0,0,,0,8,2,1,1,void
2147,318573,CreateBucketizeOptionsDirect,1,opencv_tflite.CreateBucketizeOptionsDirect,"Offset<BucketizeOptions> opencv_tflite.CreateBucketizeOptionsDirect (ANY,ANY*)",misc\tflite\schema_generated.hpp,"inline ::flatbuffers::Offset<BucketizeOptions> CreateBucketizeOptionsDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<float> *boundaries = nullptr) {
  auto boundaries__ = boundaries ? _fbb.CreateVector<float>(*boundaries) : 0;
  return opencv_tflite::CreateBucketizeOptions(
      _fbb,
      boundaries__);
}",8032.0,8039.0,1.0,1.0,8.0,5,4,7,4,0,1,1,1,0,1,,0,0,4,2,2,Offset<BucketizeOptions>
2148,302193,GetMetadata,1,opencv_tensorflow.VersionDef.GetMetadata,Metadata opencv_tensorflow.VersionDef.GetMetadata (),misc\tensorflow\versions.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata VersionDef::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_versions_2eproto_getter, &descriptor_table_versions_2eproto_once,
      file_level_metadata_versions_2eproto[0]);
}",327.0,331.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
2149,56434,Clear,1,opencv_caffe.DropoutParameter.Clear,void opencv_caffe.DropoutParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void DropoutParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.DropoutParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    dropout_ratio_ = 0.5f;
    scale_train_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",18513.0,18526.0,1.0,1.0,14.0,9,5,9,5,0,4,2,2,0,0,,0,4,0,0,0,void
2150,384119,setIdentity,1,cv.dnn.darknet.setLayersParams.setIdentity,void cv.dnn.darknet.setLayersParams.setIdentity (int),src\darknet\darknet_io.cpp,"void setIdentity(int bottom_index)
                {
                    cv::dnn::LayerParams identity_param;
                    identity_param.name = ""Identity-name"";
                    identity_param.type = ""Identity"";

                    darknet::LayerParameter lp;

                    std::string layer_name = cv::format(""identity_%d"", layer_id);
                    lp.layer_name = layer_name;
                    lp.layer_type = identity_param.type;
                    lp.layerParams = identity_param;
                    lp.bottom_indexes.push_back(fused_layer_names.at(bottom_index));

                    last_layer = layer_name;
                    net->layers.push_back(lp);

                    layer_id++;
                    fused_layer_names.push_back(last_layer);
                }",398.0,417.0,17.0,17.0,20.0,21,4,21,9,0,7,1,1,0,0,,0,7,2,1,1,void
2151,105596,MergeFrom,1,opencv_caffe.ROIPoolingParameter.MergeFrom,void opencv_caffe.ROIPoolingParameter.MergeFrom (ROIPoolingParameter),misc\caffe\opencv-caffe.pb.cc,"void ROIPoolingParameter::MergeFrom(const ROIPoolingParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.ROIPoolingParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      pooled_h_ = from.pooled_h_;
    }
    if (cached_has_bits & 0x00000002u) {
      pooled_w_ = from.pooled_w_;
    }
    if (cached_has_bits & 0x00000004u) {
      spatial_scale_ = from.spatial_scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",33148.0,33168.0,1.0,1.0,21.0,22,8,20,8,1,8,5,8,0,0,,0,8,2,1,1,void
2152,318601,fbb_,3,opencv_tflite.GeluOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2153,318602,start_,3,opencv_tflite.GeluOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2154,318603,add_approximate,1,opencv_tflite.GeluOptionsBuilder.add_approximate,void opencv_tflite.GeluOptionsBuilder.add_approximate (bool),misc\tflite\schema_generated.hpp,"void add_approximate(bool approximate) {
    fbb_.AddElement<uint8_t>(GeluOptions::VT_APPROXIMATE, static_cast<uint8_t>(approximate), 0);
  }",8060.0,8062.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
2155,154761,_has_bits_,3,opencv_caffe.V1LayerParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,12,0,1,1,0,0,,0,0,0,0,0,
2156,154762,_cached_size_,3,opencv_caffe.V1LayerParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2157,154763,bottom_,3,opencv_caffe.V1LayerParameter.bottom_,,misc\caffe\opencv-caffe.pb.hpp,bottom_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
2158,154767,weight_decay_,3,opencv_caffe.V1LayerParameter.weight_decay_,,misc\caffe\opencv-caffe.pb.hpp,weight_decay_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2159,154764,top_,3,opencv_caffe.V1LayerParameter.top_,,misc\caffe\opencv-caffe.pb.hpp,top_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
2160,154765,blobs_,3,opencv_caffe.V1LayerParameter.blobs_,,misc\caffe\opencv-caffe.pb.hpp,blobs_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
2161,154766,blobs_lr_,3,opencv_caffe.V1LayerParameter.blobs_lr_,,misc\caffe\opencv-caffe.pb.hpp,blobs_lr_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2162,154768,include_,3,opencv_caffe.V1LayerParameter.include_,,misc\caffe\opencv-caffe.pb.hpp,include_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
2163,154772,blob_share_mode_,3,opencv_caffe.V1LayerParameter.blob_share_mode_,,misc\caffe\opencv-caffe.pb.hpp,blob_share_mode_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2164,154773,name_,3,opencv_caffe.V1LayerParameter.name_,,misc\caffe\opencv-caffe.pb.hpp,name_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2165,154769,exclude_,3,opencv_caffe.V1LayerParameter.exclude_,,misc\caffe\opencv-caffe.pb.hpp,exclude_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
2166,154770,loss_weight_,3,opencv_caffe.V1LayerParameter.loss_weight_,,misc\caffe\opencv-caffe.pb.hpp,loss_weight_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2167,154771,param_,3,opencv_caffe.V1LayerParameter.param_,,misc\caffe\opencv-caffe.pb.hpp,param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
2168,56469,_InternalParse,1,opencv_caffe.DropoutParameter._InternalParse,"const char* opencv_caffe.DropoutParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* DropoutParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float dropout_ratio = 1 [default = 0.5];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_dropout_ratio(&has_bits);
          dropout_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool scale_train = 2 [default = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_scale_train(&has_bits);
          scale_train_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint...",18528.0,18575.0,1.0,10.0,48.0,40,14,43,12,0,5,11,12,0,2,,0,3,4,2,2,const char*
2169,154778,dropout_param_,3,opencv_caffe.V1LayerParameter.dropout_param_,,misc\caffe\opencv-caffe.pb.hpp,* dropout_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2170,154774,layer_,3,opencv_caffe.V1LayerParameter.layer_,,misc\caffe\opencv-caffe.pb.hpp,* layer_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
2171,154776,convolution_param_,3,opencv_caffe.V1LayerParameter.convolution_param_,,misc\caffe\opencv-caffe.pb.hpp,* convolution_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2172,154777,data_param_,3,opencv_caffe.V1LayerParameter.data_param_,,misc\caffe\opencv-caffe.pb.hpp,* data_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2173,154782,infogain_loss_param_,3,opencv_caffe.V1LayerParameter.infogain_loss_param_,,misc\caffe\opencv-caffe.pb.hpp,* infogain_loss_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2174,318623,GeluOptionsBuilder,1,opencv_tflite.GeluOptionsBuilder.GeluOptionsBuilder,ANY opencv_tflite.GeluOptionsBuilder.GeluOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit GeluOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",8063.0,8066.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
2175,154775,concat_param_,3,opencv_caffe.V1LayerParameter.concat_param_,,misc\caffe\opencv-caffe.pb.hpp,* concat_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2176,154781,image_data_param_,3,opencv_caffe.V1LayerParameter.image_data_param_,,misc\caffe\opencv-caffe.pb.hpp,* image_data_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2177,154786,window_data_param_,3,opencv_caffe.V1LayerParameter.window_data_param_,,misc\caffe\opencv-caffe.pb.hpp,* window_data_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2178,154787,power_param_,3,opencv_caffe.V1LayerParameter.power_param_,,misc\caffe\opencv-caffe.pb.hpp,* power_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2179,154780,hdf5_output_param_,3,opencv_caffe.V1LayerParameter.hdf5_output_param_,,misc\caffe\opencv-caffe.pb.hpp,* hdf5_output_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2180,154789,argmax_param_,3,opencv_caffe.V1LayerParameter.argmax_param_,,misc\caffe\opencv-caffe.pb.hpp,* argmax_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2181,154784,lrn_param_,3,opencv_caffe.V1LayerParameter.lrn_param_,,misc\caffe\opencv-caffe.pb.hpp,* lrn_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2182,154785,pooling_param_,3,opencv_caffe.V1LayerParameter.pooling_param_,,misc\caffe\opencv-caffe.pb.hpp,* pooling_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2183,154788,memory_data_param_,3,opencv_caffe.V1LayerParameter.memory_data_param_,,misc\caffe\opencv-caffe.pb.hpp,* memory_data_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2184,154790,eltwise_param_,3,opencv_caffe.V1LayerParameter.eltwise_param_,,misc\caffe\opencv-caffe.pb.hpp,* eltwise_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2185,154791,threshold_param_,3,opencv_caffe.V1LayerParameter.threshold_param_,,misc\caffe\opencv-caffe.pb.hpp,* threshold_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2186,154792,dummy_data_param_,3,opencv_caffe.V1LayerParameter.dummy_data_param_,,misc\caffe\opencv-caffe.pb.hpp,* dummy_data_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2187,154796,slice_param_,3,opencv_caffe.V1LayerParameter.slice_param_,,misc\caffe\opencv-caffe.pb.hpp,* slice_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2188,154793,accuracy_param_,3,opencv_caffe.V1LayerParameter.accuracy_param_,,misc\caffe\opencv-caffe.pb.hpp,* accuracy_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2189,154798,transform_param_,3,opencv_caffe.V1LayerParameter.transform_param_,,misc\caffe\opencv-caffe.pb.hpp,* transform_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2190,154794,hinge_loss_param_,3,opencv_caffe.V1LayerParameter.hinge_loss_param_,,misc\caffe\opencv-caffe.pb.hpp,* hinge_loss_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2191,154800,sigmoid_param_,3,opencv_caffe.V1LayerParameter.sigmoid_param_,,misc\caffe\opencv-caffe.pb.hpp,* sigmoid_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2192,154795,relu_param_,3,opencv_caffe.V1LayerParameter.relu_param_,,misc\caffe\opencv-caffe.pb.hpp,* relu_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2193,138418,GetCachedSize,1,opencv_caffe.HDF5OutputParameter.GetCachedSize,int opencv_caffe.HDF5OutputParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },11840.0,11840.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
2194,154797,mvn_param_,3,opencv_caffe.V1LayerParameter.mvn_param_,,misc\caffe\opencv-caffe.pb.hpp,* mvn_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2195,154799,tanh_param_,3,opencv_caffe.V1LayerParameter.tanh_param_,,misc\caffe\opencv-caffe.pb.hpp,* tanh_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2196,89269,ByteSizeLong,1,opencv_caffe.SPPParameter.ByteSizeLong,size_t opencv_caffe.SPPParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t SPPParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.SPPParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 pyramid_height = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_pyramid_height());
    }

    // optional .opencv_caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pool());
    }

    // optional .opencv_caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal:...",28675.0,28704.0,1.0,1.0,30.0,27,9,23,7,0,2,5,8,0,0,,0,2,0,0,0,size_t
2197,154801,softmax_param_,3,opencv_caffe.V1LayerParameter.softmax_param_,,misc\caffe\opencv-caffe.pb.hpp,* softmax_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2198,154803,exp_param_,3,opencv_caffe.V1LayerParameter.exp_param_,,misc\caffe\opencv-caffe.pb.hpp,* exp_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2199,154805,type_,3,opencv_caffe.V1LayerParameter.type_,,misc\caffe\opencv-caffe.pb.hpp,type_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2200,154804,loss_param_,3,opencv_caffe.V1LayerParameter.loss_param_,,misc\caffe\opencv-caffe.pb.hpp,* loss_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2201,154802,contrastive_loss_param_,3,opencv_caffe.V1LayerParameter.contrastive_loss_param_,,misc\caffe\opencv-caffe.pb.hpp,* contrastive_loss_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2202,122044,GetCachedSize,1,opencv_caffe.NetState.GetCachedSize,int opencv_caffe.NetState.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },5031.0,5031.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
2203,367805,stream,3,cv.dnn.cuda4dnn.ConcatOp.stream,,src\cuda4dnn\primitives\concat.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2204,384190,setSlice,1,cv.dnn.darknet.setLayersParams.setSlice,"void cv.dnn.darknet.setLayersParams.setSlice (int,int,int)",src\darknet\darknet_io.cpp,"void setSlice(int input_index, int split_size, int group_id)
                {
                    int begin[] = {0, split_size * group_id, 0, 0};
                    cv::dnn::DictValue paramBegin = cv::dnn::DictValue::arrayInt(begin, 4);

                    int end[] = {INT_MAX, begin[1] + split_size, INT_MAX, INT_MAX};
                    cv::dnn::DictValue paramEnd = cv::dnn::DictValue::arrayInt(end, 4);

                    darknet::LayerParameter lp;
                    lp.layer_name = cv::format(""slice_%d"", layer_id);
                    lp.layer_type = ""Slice"";
                    lp.layerParams.set(""begin"", paramBegin);
                    lp.layerParams.set(""end"", paramEnd);

                    lp.bottom_indexes.push_back(fused_layer_names.at(input_index));
                    net->layers.push_back(lp);

                    layer_id++;
                    last_layer = lp.layer_name;
                    fused_layer_names.push_back(last_layer);
                }",419.0,439.0,17.0,17.0,21.0,33,8,37,16,0,9,1,1,0,2,,0,9,6,3,3,void
2205,367806,concat_axis,3,cv.dnn.cuda4dnn.ConcatOp.concat_axis,,src\cuda4dnn\primitives\concat.hpp,concat_axis,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2206,367807,zero_padding,3,cv.dnn.cuda4dnn.ConcatOp.zero_padding,,src\cuda4dnn\primitives\concat.hpp,zero_padding,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2207,351421,~ActivationDescriptor,1,cv.dnn.cuda4dnn.csl.cudnn.ActivationDescriptor.~ActivationDescriptor,ANY cv.dnn.cuda4dnn.csl.cudnn.ActivationDescriptor.~ActivationDescriptor (),src\cuda4dnn\csl\cudnn\activation.hpp,"~ActivationDescriptor() noexcept {
            if (descriptor != nullptr) {
                /* cudnnDestroyActivationDescriptor will not fail */
                CUDA4DNN_CHECK_CUDNN(cudnnDestroyActivationDescriptor(descriptor));
            }
        }",58.0,63.0,9.0,9.0,6.0,1,1,2,1,0,2,2,2,1,0,,0,2,0,0,0,ANY
2208,72907,InternalSwap,1,opencv_caffe.MVNParameter.InternalSwap,void opencv_caffe.MVNParameter.InternalSwap (MVNParameter*),misc\caffe\opencv-caffe.pb.cc,"void MVNParameter::InternalSwap(MVNParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(across_channels_, other->across_channels_);
  swap(normalize_variance_, other->normalize_variance_);
  swap(eps_, other->eps_);
}",23618.0,23625.0,1.0,1.0,8.0,9,4,10,6,0,8,1,1,0,0,,0,8,2,1,1,void
2209,367830,ConstOp,1,cv.dnn.cuda4dnn.ConstOp.ConstOp,"ANY cv.dnn.cuda4dnn.ConstOp.ConstOp (ANY,ANY)",src\cuda4dnn\primitives\const.hpp,"ConstOp(csl::Stream stream_, const cv::Mat& data)
            : stream(std::move(stream_))
        {
            constTensor = csl::makeTensorHeader<T>(data);
            csl::copyMatToTensor<T>(data, constTensor, stream);
        }",25.0,30.0,9.0,9.0,6.0,9,6,9,5,0,3,1,1,0,0,,0,3,4,2,2,ANY
2210,236759,SharedCtor,1,opencv_onnx.TensorShapeProto_Dimension.SharedCtor,void opencv_onnx.TensorShapeProto_Dimension.SharedCtor (),misc\onnx\opencv-onnx.pb.cc,"inline void TensorShapeProto_Dimension::SharedCtor() {
denotation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  denotation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
clear_has_value();
}",4518.0,4524.0,1.0,1.0,7.0,4,2,3,3,0,1,1,1,0,0,,0,1,0,0,0,void
2211,318680,fbb_,3,opencv_tflite.DynamicUpdateSliceOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2212,318681,start_,3,opencv_tflite.DynamicUpdateSliceOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2213,318682,DynamicUpdateSliceOptionsBuilder,1,opencv_tflite.DynamicUpdateSliceOptionsBuilder.DynamicUpdateSliceOptionsBuilder,ANY opencv_tflite.DynamicUpdateSliceOptionsBuilder.DynamicUpdateSliceOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit DynamicUpdateSliceOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",8094.0,8097.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
2214,105691,InternalSwap,1,opencv_caffe.ROIPoolingParameter.InternalSwap,void opencv_caffe.ROIPoolingParameter.InternalSwap (ROIPoolingParameter*),misc\caffe\opencv-caffe.pb.cc,"void ROIPoolingParameter::InternalSwap(ROIPoolingParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ROIPoolingParameter, pooled_w_)
      + sizeof(ROIPoolingParameter::pooled_w_)
      - PROTOBUF_FIELD_OFFSET(ROIPoolingParameter, pooled_h_)>(
          reinterpret_cast<char*>(&pooled_h_),
          reinterpret_cast<char*>(&other->pooled_h_));
  swap(spatial_scale_, other->spatial_scale_);
}",33181.0,33192.0,1.0,1.0,12.0,22,12,15,9,0,9,1,1,0,0,,0,9,2,1,1,void
2215,375960,stepY,3,cv.dnn.cuda4dnn.PriorBoxConfiguration.stepY,,src\cuda4dnn\primitives\prior_box.hpp,stepY,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2216,351456,get,1,cv.dnn.cuda4dnn.csl.cudnn.ActivationDescriptor.get,cudnnActivationDescriptor_t cv.dnn.cuda4dnn.csl.cudnn.ActivationDescriptor.get (),src\cuda4dnn\csl\cudnn\activation.hpp,cudnnActivationDescriptor_t get() const noexcept { return descriptor; },72.0,72.0,9.0,79.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,cudnnActivationDescriptor_t
2217,318693,Finish,1,opencv_tflite.DynamicUpdateSliceOptionsBuilder.Finish,Offset<DynamicUpdateSliceOptions> opencv_tflite.DynamicUpdateSliceOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<DynamicUpdateSliceOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DynamicUpdateSliceOptions>(end);
    return o;
  }",8098.0,8102.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<DynamicUpdateSliceOptions>
2218,351462,descriptor,3,cv.dnn.cuda4dnn.csl.cudnn.ActivationDescriptor.descriptor,,src\cuda4dnn\csl\cudnn\activation.hpp,descriptor,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2219,72944,GetMetadata,1,opencv_caffe.MVNParameter.GetMetadata,Metadata opencv_caffe.MVNParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata MVNParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[46]);
}",23627.0,23631.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
2220,367856,forward,1,cv.dnn.cuda4dnn.ConstOp.forward,"void cv.dnn.cuda4dnn.ConstOp.forward (ANY,ANY,ANY)",src\cuda4dnn\primitives\const.hpp,"void forward(
            const std::vector<cv::Ptr<BackendWrapper>>& inputs,
            const std::vector<cv::Ptr<BackendWrapper>>& outputs,
            csl::Workspace& workspace) override
        {
            CV_Assert(outputs.size() == 1 && inputs.size() == 0);

            auto output_wrapper = outputs[0].dynamicCast<wrapper_type>();
            auto output = output_wrapper->getSpan();
            csl::tensor_ops::copy<T>(stream, output, constTensor);
        }",32.0,42.0,9.0,9.0,11.0,12,6,11,8,0,2,1,1,0,0,,0,2,6,3,3,void
2221,433397,OCL4DNNConvConfig,1,cv.dnn.ocl4dnn.OCL4DNNConvConfig.OCL4DNNConvConfig,ANY cv.dnn.ocl4dnn.OCL4DNNConvConfig.OCL4DNNConvConfig (),src\ocl4dnn\include\ocl4dnn.hpp,"OCL4DNNConvConfig() :
        kernel(1, 1),
        stride(1, 1),
        dilation(1, 1),
        group(1),
        bias_term(false),
        use_half(false)
    {
        pads = {0, 0, 0, 0};
    }",56.0,65.0,5.0,5.0,10.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,ANY
2222,236790,SharedDtor,1,opencv_onnx.TensorShapeProto_Dimension.SharedDtor,void opencv_onnx.TensorShapeProto_Dimension.SharedDtor (),misc\onnx\opencv-onnx.pb.cc,"inline void TensorShapeProto_Dimension::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  denotation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_value()) {
    clear_value();
  }
}",4533.0,4539.0,1.0,1.0,7.0,5,3,3,3,0,1,2,2,0,0,,0,1,0,0,0,void
2223,433403,in_shape,3,cv.dnn.ocl4dnn.OCL4DNNConvConfig.in_shape,,src\ocl4dnn\include\ocl4dnn.hpp,in_shape,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
2224,433404,out_shape,3,cv.dnn.ocl4dnn.OCL4DNNConvConfig.out_shape,,src\ocl4dnn\include\ocl4dnn.hpp,out_shape,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2225,433405,kernel,3,cv.dnn.ocl4dnn.OCL4DNNConvConfig.kernel,,src\ocl4dnn\include\ocl4dnn.hpp,kernel,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2226,433406,pads,3,cv.dnn.ocl4dnn.OCL4DNNConvConfig.pads,,src\ocl4dnn\include\ocl4dnn.hpp,pads,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2227,433407,stride,3,cv.dnn.ocl4dnn.OCL4DNNConvConfig.stride,,src\ocl4dnn\include\ocl4dnn.hpp,stride,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2228,433408,dilation,3,cv.dnn.ocl4dnn.OCL4DNNConvConfig.dilation,,src\ocl4dnn\include\ocl4dnn.hpp,dilation,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2229,433409,group,3,cv.dnn.ocl4dnn.OCL4DNNConvConfig.group,,src\ocl4dnn\include\ocl4dnn.hpp,group,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2230,433410,bias_term,3,cv.dnn.ocl4dnn.OCL4DNNConvConfig.bias_term,,src\ocl4dnn\include\ocl4dnn.hpp,bias_term,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2231,433411,use_half,3,cv.dnn.ocl4dnn.OCL4DNNConvConfig.use_half,,src\ocl4dnn\include\ocl4dnn.hpp,use_half,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2232,318733,fbb_,3,opencv_tflite.UnsortedSegmentProdOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2233,318734,start_,3,opencv_tflite.UnsortedSegmentProdOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2234,318735,UnsortedSegmentProdOptionsBuilder,1,opencv_tflite.UnsortedSegmentProdOptionsBuilder.UnsortedSegmentProdOptionsBuilder,ANY opencv_tflite.UnsortedSegmentProdOptionsBuilder.UnsortedSegmentProdOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit UnsortedSegmentProdOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",8123.0,8126.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
2235,72980,shape,1,opencv_caffe.ParameterParameter._Internal.shape,BlobShape opencv_caffe.ParameterParameter._Internal.shape (ParameterParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::BlobShape&
ParameterParameter::_Internal::shape(const ParameterParameter* msg) {
  return *msg->shape_;
}",23644.0,23647.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,BlobShape
2236,105749,GetMetadata,1,opencv_caffe.ROIPoolingParameter.GetMetadata,Metadata opencv_caffe.ROIPoolingParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata ROIPoolingParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[68]);
}",33194.0,33198.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
2237,318746,Finish,1,opencv_tflite.UnsortedSegmentProdOptionsBuilder.Finish,Offset<UnsortedSegmentProdOptions> opencv_tflite.UnsortedSegmentProdOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<UnsortedSegmentProdOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UnsortedSegmentProdOptions>(end);
    return o;
  }",8127.0,8131.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<UnsortedSegmentProdOptions>
2238,367902,stream,3,cv.dnn.cuda4dnn.ConstOp.stream,,src\cuda4dnn\primitives\const.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2239,367903,constTensor,3,cv.dnn.cuda4dnn.ConstOp.constTensor,,src\cuda4dnn\primitives\const.hpp,constTensor,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2240,236832,SetCachedSize,1,opencv_onnx.TensorShapeProto_Dimension.SetCachedSize,void opencv_onnx.TensorShapeProto_Dimension.SetCachedSize (int),misc\onnx\opencv-onnx.pb.cc,"void TensorShapeProto_Dimension::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",4547.0,4549.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
2241,285991,ByteSizeLong,1,opencv_tensorflow.OpDef.ByteSizeLong,size_t opencv_tensorflow.OpDef.ByteSizeLong (),misc\tensorflow\op_def.pb.cc,"size_t OpDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_tensorflow.OpDef)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opencv_tensorflow.OpDef.ArgDef input_arg = 2;
  total_size += 1UL * this->_internal_input_arg_size();
  for (const auto& msg : this->input_arg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .opencv_tensorflow.OpDef.ArgDef output_arg = 3;
  total_size += 1UL * this->_internal_output_arg_size();
  for (const auto& msg : this->output_arg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .opencv_tensorflow.OpDef.AttrDef attr = 4;
  total_size += 1UL * this->_internal_attr_size();
  for (const auto& msg : this->attr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::Wi...",1516.0,1594.0,1.0,1.0,79.0,78,11,44,8,0,5,12,12,3,0,,0,5,0,0,0,size_t
2242,138536,_cached_size_,3,opencv_caffe.HDF5OutputParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2243,138537,file_name_,3,opencv_caffe.HDF5OutputParameter.file_name_,,misc\caffe\opencv-caffe.pb.hpp,file_name_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2244,236842,clear_value,1,opencv_onnx.TensorShapeProto_Dimension.clear_value,void opencv_onnx.TensorShapeProto_Dimension.clear_value (),misc\onnx\opencv-onnx.pb.cc,"void TensorShapeProto_Dimension::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:opencv_onnx.TensorShapeProto.Dimension)
  switch (value_case()) {
    case kDimValue: {
      // No need to clear
      break;
    }
    case kDimParam: {
      value_.dim_param_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}",4551.0,4567.0,1.0,1.0,17.0,5,4,6,5,0,7,5,2,0,0,,0,7,0,0,0,void
2245,138535,_has_bits_,3,opencv_caffe.HDF5OutputParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
2246,105769,set_has_feat_stride,1,opencv_caffe._Internal.set_has_feat_stride,void opencv_caffe._Internal.set_has_feat_stride (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_feat_stride(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }",33205.0,33207.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
2247,302378,descriptor,1,opencv_tensorflow.VersionDef.descriptor,Descriptor opencv_tensorflow.VersionDef.descriptor (),misc\tensorflow\versions.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",99.0,101.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
2248,302384,GetDescriptor,1,opencv_tensorflow.VersionDef.GetDescriptor,Descriptor opencv_tensorflow.VersionDef.GetDescriptor (),misc\tensorflow\versions.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",102.0,104.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
2249,89394,MergeFrom,1,opencv_caffe.SPPParameter.MergeFrom,void opencv_caffe.SPPParameter.MergeFrom (SPPParameter),misc\caffe\opencv-caffe.pb.cc,"void SPPParameter::MergeFrom(const SPPParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.SPPParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      pyramid_height_ = from.pyramid_height_;
    }
    if (cached_has_bits & 0x00000002u) {
      pool_ = from.pool_;
    }
    if (cached_has_bits & 0x00000004u) {
      engine_ = from.engine_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",28719.0,28739.0,1.0,1.0,21.0,22,8,20,8,1,8,5,8,0,0,,0,8,2,1,1,void
2250,384307,setReorg,1,cv.dnn.darknet.setLayersParams.setReorg,void cv.dnn.darknet.setLayersParams.setReorg (int),src\darknet\darknet_io.cpp,"void setReorg(int stride)
                {
                    cv::dnn::LayerParams reorg_params;
                    reorg_params.name = ""Reorg-name"";
                    reorg_params.type = ""Reorg"";
                    reorg_params.set<int>(""reorg_stride"", stride);

                    darknet::LayerParameter lp;
                    std::string layer_name = cv::format(""reorg_%d"", layer_id);
                    lp.layer_name = layer_name;
                    lp.layer_type = reorg_params.type;
                    lp.layerParams = reorg_params;
                    lp.bottom_indexes.push_back(last_layer);
                    last_layer = layer_name;

                    net->layers.push_back(lp);

                    layer_id++;
                    fused_layer_names.push_back(last_layer);
                }",441.0,460.0,17.0,17.0,20.0,21,4,22,9,0,7,1,1,0,0,,0,7,2,1,1,void
2251,105780,set_has_base_size,1,opencv_caffe._Internal.set_has_base_size,void opencv_caffe._Internal.set_has_base_size (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_base_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }",33208.0,33210.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
2252,302395,GetReflection,1,opencv_tensorflow.VersionDef.GetReflection,Reflection opencv_tensorflow.VersionDef.GetReflection (),misc\tensorflow\versions.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",105.0,107.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
2253,105791,set_has_min_size,1,opencv_caffe._Internal.set_has_min_size,void opencv_caffe._Internal.set_has_min_size (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_min_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }",33211.0,33213.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
2254,56639,_InternalSerialize,1,opencv_caffe.DropoutParameter._InternalSerialize,"uint8_t opencv_caffe.DropoutParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* DropoutParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.DropoutParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float dropout_ratio = 1 [default = 0.5];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_dropout_ratio(), target);
  }

  // optional bool scale_train = 2 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_scale_train(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerialize...",18577.0,18602.0,1.0,1.0,26.0,31,8,34,10,0,1,4,4,0,0,,0,1,4,2,2,uint8_t
2255,318786,fbb_,3,opencv_tflite.UnsortedSegmentMaxOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2256,318787,start_,3,opencv_tflite.UnsortedSegmentMaxOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2257,318788,UnsortedSegmentMaxOptionsBuilder,1,opencv_tflite.UnsortedSegmentMaxOptionsBuilder.UnsortedSegmentMaxOptionsBuilder,ANY opencv_tflite.UnsortedSegmentMaxOptionsBuilder.UnsortedSegmentMaxOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit UnsortedSegmentMaxOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",8152.0,8155.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
2258,302406,default_instance,1,opencv_tensorflow.VersionDef.default_instance,VersionDef opencv_tensorflow.VersionDef.default_instance (),misc\tensorflow\versions.pb.hpp,"static const VersionDef& default_instance() {
    return *internal_default_instance();
  }",108.0,110.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,VersionDef
2259,105802,set_has_pre_nms_topn,1,opencv_caffe._Internal.set_has_pre_nms_topn,void opencv_caffe._Internal.set_has_pre_nms_topn (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_pre_nms_topn(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }",33214.0,33216.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
2260,236875,Clear,1,opencv_onnx.TensorShapeProto_Dimension.Clear,void opencv_onnx.TensorShapeProto_Dimension.Clear (),misc\onnx\opencv-onnx.pb.cc,"void TensorShapeProto_Dimension::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_onnx.TensorShapeProto.Dimension)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    denotation_.ClearNonDefaultToEmpty();
  }
  clear_value();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",4570.0,4583.0,1.0,1.0,14.0,8,5,8,4,0,3,2,2,0,0,,0,3,0,0,0,void
2261,302413,internal_default_instance,1,opencv_tensorflow.VersionDef.internal_default_instance,VersionDef opencv_tensorflow.VersionDef.internal_default_instance (),misc\tensorflow\versions.pb.hpp,"static inline const VersionDef* internal_default_instance() {
    return reinterpret_cast<const VersionDef*>(
               &_VersionDef_default_instance_);
  }",111.0,114.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,VersionDef
2262,73038,SharedCtor,1,opencv_caffe.ParameterParameter.SharedCtor,void opencv_caffe.ParameterParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void ParameterParameter::SharedCtor() {
shape_ = nullptr;
}",23669.0,23671.0,1.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,void
2263,318799,Finish,1,opencv_tflite.UnsortedSegmentMaxOptionsBuilder.Finish,Offset<UnsortedSegmentMaxOptions> opencv_tflite.UnsortedSegmentMaxOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<UnsortedSegmentMaxOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UnsortedSegmentMaxOptions>(end);
    return o;
  }",8156.0,8160.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<UnsortedSegmentMaxOptions>
2264,351573,~FilterDescriptor,1,cv.dnn.cuda4dnn.csl.cudnn.FilterDescriptor.~FilterDescriptor,ANY cv.dnn.cuda4dnn.csl.cudnn.FilterDescriptor.~FilterDescriptor (),src\cuda4dnn\csl\cudnn\convolution.hpp,"~FilterDescriptor() noexcept {
            if (descriptor != nullptr) {
                /* cudnnDestroyFilterDescriptor will not fail for a valid descriptor object */
                CUDA4DNN_CHECK_CUDNN(cudnnDestroyFilterDescriptor(descriptor));
            }
        }",84.0,89.0,9.0,16.0,6.0,7,2,10,3,0,3,2,2,1,0,,0,3,0,0,0,ANY
2265,105813,set_has_post_nms_topn,1,opencv_caffe._Internal.set_has_post_nms_topn,void opencv_caffe._Internal.set_has_post_nms_topn (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_post_nms_topn(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }",33217.0,33219.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
2266,433498,kernelName,3,cv.dnn.ocl4dnn.OCL4DNNConvSpatial.kernelConfig.kernelName,,src\ocl4dnn\include\ocl4dnn.hpp,kernelName,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2267,433499,executionTime,3,cv.dnn.ocl4dnn.OCL4DNNConvSpatial.kernelConfig.executionTime,,src\ocl4dnn\include\ocl4dnn.hpp,executionTime,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2268,433500,local_work_size,3,cv.dnn.ocl4dnn.OCL4DNNConvSpatial.kernelConfig.local_work_size,,src\ocl4dnn\include\ocl4dnn.hpp,local_work_size[3],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
2269,367965,dilations,3,cv.dnn.cuda4dnn.ConvolutionConfiguration.dilations,,src\cuda4dnn\primitives\convolution.hpp,dilations,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2270,433501,global_work_size,3,cv.dnn.ocl4dnn.OCL4DNNConvSpatial.kernelConfig.global_work_size,,src\ocl4dnn\include\ocl4dnn.hpp,global_work_size[3],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
2271,433502,workItem_output,3,cv.dnn.ocl4dnn.OCL4DNNConvSpatial.kernelConfig.workItem_output,,src\ocl4dnn\include\ocl4dnn.hpp,workItem_output[3],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
2272,433504,tested,3,cv.dnn.ocl4dnn.OCL4DNNConvSpatial.kernelConfig.tested,,src\ocl4dnn\include\ocl4dnn.hpp,tested,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
2273,433503,verified,3,cv.dnn.ocl4dnn.OCL4DNNConvSpatial.kernelConfig.verified,,src\ocl4dnn\include\ocl4dnn.hpp,verified,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
2274,367966,strides,3,cv.dnn.cuda4dnn.ConvolutionConfiguration.strides,,src\cuda4dnn\primitives\convolution.hpp,strides,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2275,367971,padMode,3,cv.dnn.cuda4dnn.ConvolutionConfiguration.padMode,,src\cuda4dnn\primitives\convolution.hpp,padMode,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2276,73060,SharedDtor,1,opencv_caffe.ParameterParameter.SharedDtor,void opencv_caffe.ParameterParameter.SharedDtor (),misc\caffe\opencv-caffe.pb.cc,"inline void ParameterParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete shape_;
}",23680.0,23683.0,1.0,1.0,4.0,3,3,1,1,0,2,2,2,1,0,,0,2,0,0,0,void
2277,367973,pads_end,3,cv.dnn.cuda4dnn.ConvolutionConfiguration.pads_end,,src\cuda4dnn\primitives\convolution.hpp,pads_end,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2278,433506,use_null_local,3,cv.dnn.ocl4dnn.OCL4DNNConvSpatial.kernelConfig.use_null_local,,src\ocl4dnn\include\ocl4dnn.hpp,use_null_local,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2279,367975,output_shape,3,cv.dnn.cuda4dnn.ConvolutionConfiguration.output_shape,,src\cuda4dnn\primitives\convolution.hpp,output_shape,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2280,367976,groups,3,cv.dnn.cuda4dnn.ConvolutionConfiguration.groups,,src\cuda4dnn\primitives\convolution.hpp,groups,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2281,433507,kernelType,3,cv.dnn.ocl4dnn.OCL4DNNConvSpatial.kernelConfig.kernelType,,src\ocl4dnn\include\ocl4dnn.hpp,kernelType,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2282,433505,swizzle_weights,3,cv.dnn.ocl4dnn.OCL4DNNConvSpatial.kernelConfig.swizzle_weights,,src\ocl4dnn\include\ocl4dnn.hpp,swizzle_weights,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2283,367974,input_shape,3,cv.dnn.cuda4dnn.ConvolutionConfiguration.input_shape,,src\cuda4dnn\primitives\convolution.hpp,input_shape,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2284,367972,pads_begin,3,cv.dnn.cuda4dnn.ConvolutionConfiguration.pads_begin,,src\cuda4dnn\primitives\convolution.hpp,pads_begin,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2285,236909,_InternalParse,1,opencv_onnx.TensorShapeProto_Dimension._InternalParse,"const char* opencv_onnx.TensorShapeProto_Dimension._InternalParse (char*,ANY*)",misc\onnx\opencv-onnx.pb.cc,"const char* TensorShapeProto_Dimension::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 dim_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_dim_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dim_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dim_param();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, ""ope...",4585.0,4646.0,1.0,10.0,62.0,46,12,57,9,0,1,13,15,0,0,,0,1,4,2,2,const char*
2286,367983,fusion_mode,3,cv.dnn.cuda4dnn.ConvolutionConfiguration.fusion_mode,,src\cuda4dnn\primitives\convolution.hpp,fusion_mode,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2287,318839,fbb_,3,opencv_tflite.UnsortedSegmentSumOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2288,318840,start_,3,opencv_tflite.UnsortedSegmentSumOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2289,367993,activation_type,3,cv.dnn.cuda4dnn.ConvolutionConfiguration.activation_type,,src\cuda4dnn\primitives\convolution.hpp,activation_type,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2290,318841,UnsortedSegmentSumOptionsBuilder,1,opencv_tflite.UnsortedSegmentSumOptionsBuilder.UnsortedSegmentSumOptionsBuilder,ANY opencv_tflite.UnsortedSegmentSumOptionsBuilder.UnsortedSegmentSumOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit UnsortedSegmentSumOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",8181.0,8184.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
2291,367994,relu_negative_slope,3,cv.dnn.cuda4dnn.ConvolutionConfiguration.relu_negative_slope,,src\cuda4dnn\primitives\convolution.hpp,relu_negative_slope,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2292,367995,crelu_floor,3,cv.dnn.cuda4dnn.ConvolutionConfiguration.crelu_floor,,src\cuda4dnn\primitives\convolution.hpp,crelu_floor,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2293,367996,crelu_ceil,3,cv.dnn.cuda4dnn.ConvolutionConfiguration.crelu_ceil,,src\cuda4dnn\primitives\convolution.hpp,crelu_ceil,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2294,384380,setPermute,1,cv.dnn.darknet.setLayersParams.setPermute,void cv.dnn.darknet.setLayersParams.setPermute (bool),src\darknet\darknet_io.cpp,"void setPermute(bool isDarknetLayer = true)
                {
                    cv::dnn::LayerParams permute_params;
                    permute_params.name = ""Permute-name"";
                    permute_params.type = ""Permute"";
                    int permute[] = { 0, 2, 3, 1 };
                    cv::dnn::DictValue paramOrder = cv::dnn::DictValue::arrayInt(permute, 4);

                    permute_params.set(""order"", paramOrder);

                    darknet::LayerParameter lp;
                    std::string layer_name = cv::format(""permute_%d"", layer_id);
                    lp.layer_name = layer_name;
                    lp.layer_type = permute_params.type;
                    lp.layerParams = permute_params;
                    lp.bottom_indexes.push_back(last_layer);
                    last_layer = layer_name;
                    net->layers.push_back(lp);

                    if (isDarknetLayer)
                    {
                        layer_id++;
                   ...",462.0,486.0,17.0,17.0,25.0,27,5,29,13,0,8,2,2,0,1,,0,8,2,1,1,void
2295,367997,power_exp,3,cv.dnn.cuda4dnn.ConvolutionConfiguration.power_exp,,src\cuda4dnn\primitives\convolution.hpp,power_exp,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2296,367998,power_scale,3,cv.dnn.cuda4dnn.ConvolutionConfiguration.power_scale,,src\cuda4dnn\primitives\convolution.hpp,power_scale,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2297,368001,ConvolutionOp,1,cv.dnn.cuda4dnn.ConvolutionOp.ConvolutionOp,"ANY cv.dnn.cuda4dnn.ConvolutionOp.ConvolutionOp (ANY,ANY,ConvolutionConfiguration,Mat,Mat)",src\cuda4dnn\primitives\convolution.hpp,"ConvolutionOp(csl::Stream stream_, csl::cudnn::Handle handle_, const ConvolutionConfiguration& config, const Mat& filters, const Mat& bias)
            : stream(std::move(stream_)), cudnnHandle(std::move(handle_))
        {
            const auto& kernel_size = config.kernel_size;
            const auto& dilations = config.dilations;
            const auto& strides = config.strides;

            const auto convolution_order = kernel_size.size();
            CV_Assert(convolution_order == dilations.size());
            CV_Assert(convolution_order == strides.size());

            const auto& input_shape = config.input_shape;
            const auto& output_shape = config.output_shape;
            CV_Assert(input_shape.size() == output_shape.size());
            CV_Assert(input_shape.size() == convolution_order + 2);

            const auto groups = config.groups;

            CV_Assert (1 <= convolution_order && convolution_order <= 3);

            const auto rank = input_shape.size()...",88.0,286.0,9.0,20.0,199.0,280,19,280,65,0,53,15,24,10,0,,0,53,10,5,5,ANY
2298,367999,power_shift,3,cv.dnn.cuda4dnn.ConvolutionConfiguration.power_shift,,src\cuda4dnn\primitives\convolution.hpp,power_shift,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2299,318852,Finish,1,opencv_tflite.UnsortedSegmentSumOptionsBuilder.Finish,Offset<UnsortedSegmentSumOptions> opencv_tflite.UnsortedSegmentSumOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<UnsortedSegmentSumOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UnsortedSegmentSumOptions>(end);
    return o;
  }",8185.0,8189.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<UnsortedSegmentSumOptions>
2300,73094,SetCachedSize,1,opencv_caffe.ParameterParameter.SetCachedSize,void opencv_caffe.ParameterParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void ParameterParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",23691.0,23693.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
2301,7563,MergeFrom,1,opencv_caffe.BlobProto.MergeFrom,void opencv_caffe.BlobProto.MergeFrom (BlobProto),misc\caffe\opencv-caffe.pb.cc,"void BlobProto::MergeFrom(const BlobProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.BlobProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  diff_.MergeFrom(from.diff_);
  double_data_.MergeFrom(from.double_data_);
  double_diff_.MergeFrom(from.double_diff_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_raw_data(from._internal_raw_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_shape()->::opencv_caffe::BlobShape::MergeFrom(from._internal_shape());
    }
    if (cached_has_bits & 0x00000004u) {
      num_ = from.num_;
    }
    if (cached_has_bits & 0x00000008u) {
      channels_ = from.channels_;
    }
    if (cached_has_bits & 0x00000010u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000020u) {
      width_ = from.wid...",4698.0,4734.0,1.0,1.0,37.0,41,9,38,14,0,21,9,16,0,1,,0,20,2,1,1,void
2302,351628,get,1,cv.dnn.cuda4dnn.csl.cudnn.FilterDescriptor.get,cudnnFilterDescriptor_t cv.dnn.cuda4dnn.csl.cudnn.FilterDescriptor.get (),src\cuda4dnn\csl\cudnn\convolution.hpp,cudnnFilterDescriptor_t get() const noexcept { return descriptor; },98.0,98.0,9.0,75.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,cudnnFilterDescriptor_t
2303,73104,Clear,1,opencv_caffe.ParameterParameter.Clear,void opencv_caffe.ParameterParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void ParameterParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.ParameterParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(shape_ != nullptr);
    shape_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",23695.0,23708.0,1.0,1.0,14.0,9,7,9,4,0,4,2,2,0,0,,0,4,0,0,0,void
2304,89489,InternalSwap,1,opencv_caffe.SPPParameter.InternalSwap,void opencv_caffe.SPPParameter.InternalSwap (SPPParameter*),misc\caffe\opencv-caffe.pb.cc,"void SPPParameter::InternalSwap(SPPParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SPPParameter, engine_)
      + sizeof(SPPParameter::engine_)
      - PROTOBUF_FIELD_OFFSET(SPPParameter, pyramid_height_)>(
          reinterpret_cast<char*>(&pyramid_height_),
          reinterpret_cast<char*>(&other->pyramid_height_));
}",28752.0,28762.0,1.0,1.0,11.0,21,12,13,8,0,7,1,1,0,0,,0,7,2,1,1,void
2305,351634,constructor,1,cv.dnn.cuda4dnn.csl.cudnn.FilterDescriptor.constructor,"void cv.dnn.cuda4dnn.csl.cudnn.FilterDescriptor.constructor<ForwardItr> (ForwardItr,ForwardItr)",src\cuda4dnn\csl\cudnn\convolution.hpp,"void constructor(ForwardItr start, ForwardItr end) {
            CV_Assert(start != end);
            CV_Assert(std::distance(start, end) >= 3);
            CV_Assert(std::distance(start, end) <= CUDNN_DIM_MAX);

            CUDA4DNN_CHECK_CUDNN(cudnnCreateFilterDescriptor(&descriptor));
            try {
                const auto rank = std::distance(start, end);
                if (rank == 4) {
                    std::array<int, 4> dims;
                    std::copy(start, end, std::begin(dims));
                    CUDA4DNN_CHECK_CUDNN(
                        cudnnSetFilter4dDescriptor(
                            descriptor,
                            detail::get_data_type<T>(), CUDNN_TENSOR_NCHW,
                            dims[0], dims[1], dims[2], dims[3]
                        )
                    );
                } else {
                    std::vector<int> dims(start, end);
                    CUDA4DNN_CHECK_CUDNN(
                        cudnnSetFilterNdDescrip...",102.0,135.0,9.0,12.0,34.0,36,9,51,12,0,5,3,4,0,0,,0,5,4,2,2,void
2306,138643,descriptor,1,opencv_caffe.HingeLossParameter.descriptor,Descriptor opencv_caffe.HingeLossParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",11943.0,11945.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
2307,122262,_has_bits_,3,opencv_caffe.NetState._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
2308,122263,_cached_size_,3,opencv_caffe.NetState._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2309,122264,stage_,3,opencv_caffe.NetState.stage_,,misc\caffe\opencv-caffe.pb.hpp,stage_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
2310,122265,level_,3,opencv_caffe.NetState.level_,,misc\caffe\opencv-caffe.pb.hpp,level_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
2311,122266,phase_,3,opencv_caffe.NetState.phase_,,misc\caffe\opencv-caffe.pb.hpp,phase_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
2312,138649,GetDescriptor,1,opencv_caffe.HingeLossParameter.GetDescriptor,Descriptor opencv_caffe.HingeLossParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",11946.0,11948.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
2313,105888,SharedCtor,1,opencv_caffe.ProposalParameter.SharedCtor,void opencv_caffe.ProposalParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void ProposalParameter::SharedCtor() {
feat_stride_ = 16u;
base_size_ = 16u;
min_size_ = 16u;
pre_nms_topn_ = 6000u;
post_nms_topn_ = 300u;
nms_thresh_ = 0.7f;
}",33248.0,33255.0,1.0,1.0,8.0,6,1,6,6,0,6,1,1,0,0,,0,6,0,0,0,void
2314,138660,GetReflection,1,opencv_caffe.HingeLossParameter.GetReflection,Reflection opencv_caffe.HingeLossParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",11949.0,11951.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
2315,417189,func_,3,cv.dnn.ElementWiseLayer.PBody.func_,,src\layers\elementwise_layers.cpp,* func_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2316,417190,src_,3,cv.dnn.ElementWiseLayer.PBody.src_,,src\layers\elementwise_layers.cpp,* src_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2317,417191,dst_,3,cv.dnn.ElementWiseLayer.PBody.dst_,,src\layers\elementwise_layers.cpp,* dst_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2318,417192,nstripes_,3,cv.dnn.ElementWiseLayer.PBody.nstripes_,,src\layers\elementwise_layers.cpp,nstripes_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2319,417193,PBody,1,cv.dnn.ElementWiseLayer.PBody.PBody,"ANY cv.dnn.ElementWiseLayer.PBody.PBody (Func,Mat,Mat,int)",src\layers\elementwise_layers.cpp,"PBody(const Func &func, const Mat &src, Mat& dst, int nstripes)
        {
            func_ = &func;
            src_ = &src;
            dst_ = &dst;
            nstripes_ = nstripes;
        }",109.0,115.0,9.0,9.0,7.0,7,2,8,8,0,4,1,1,0,0,,0,4,8,4,4,ANY
2320,56747,ByteSizeLong,1,opencv_caffe.DropoutParameter.ByteSizeLong,size_t opencv_caffe.DropoutParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t DropoutParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.DropoutParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float dropout_ratio = 1 [default = 0.5];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional bool scale_train = 2 [default = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}",18604.0,18626.0,1.0,1.0,23.0,13,7,12,4,0,2,4,6,0,0,,0,2,0,0,0,size_t
2321,318892,fbb_,3,opencv_tflite.ATan2OptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2322,318893,start_,3,opencv_tflite.ATan2OptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2323,318894,ATan2OptionsBuilder,1,opencv_tflite.ATan2OptionsBuilder.ATan2OptionsBuilder,ANY opencv_tflite.ATan2OptionsBuilder.ATan2OptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit ATan2OptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",8210.0,8213.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
2324,138671,default_instance,1,opencv_caffe.HingeLossParameter.default_instance,HingeLossParameter opencv_caffe.HingeLossParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const HingeLossParameter& default_instance() {
    return *internal_default_instance();
  }",11952.0,11954.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,HingeLossParameter
2325,155055,descriptor,1,opencv_caffe.V0LayerParameter.descriptor,Descriptor opencv_caffe.V0LayerParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",18845.0,18847.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
2326,23984,ByteSizeLong,1,opencv_caffe.SolverParameter.ByteSizeLong,size_t opencv_caffe.SolverParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t SolverParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.SolverParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string test_net = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(test_net_.size());
  for (int i = 0, n = test_net_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      test_net_.Get(i));
  }

  // repeated int32 test_iter = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->test_iter_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_test_iter_size());
    total_size += data_size;
  }

  // repeated .opencv_caffe.NetParameter test_net_param = 22;
  total_size += 2UL * this->_internal_test_net_param_size(...",9156.0,9421.0,1.0,1.0,266.0,249,12,195,15,0,13,44,79,2,0,,0,13,0,0,0,size_t
2327,433589,kernelType,3,cv.dnn.ocl4dnn.OCL4DNNConvSpatial.tunerParam.kernelType,,src\ocl4dnn\include\ocl4dnn.hpp,kernelType,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2328,138678,internal_default_instance,1,opencv_caffe.HingeLossParameter.internal_default_instance,HingeLossParameter opencv_caffe.HingeLossParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const HingeLossParameter* internal_default_instance() {
    return reinterpret_cast<const HingeLossParameter*>(
               &_HingeLossParameter_default_instance_);
  }",11955.0,11958.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,HingeLossParameter
2329,155061,GetDescriptor,1,opencv_caffe.V0LayerParameter.GetDescriptor,Descriptor opencv_caffe.V0LayerParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",18848.0,18850.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
2330,73141,_InternalParse,1,opencv_caffe.ParameterParameter._InternalParse,"const char* opencv_caffe.ParameterParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* ParameterParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .opencv_caffe.BlobShape shape = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
  ...",23710.0,23747.0,1.0,10.0,38.0,27,12,31,8,0,1,9,9,0,0,,0,1,4,2,2,const char*
2331,433590,blockWidth,3,cv.dnn.ocl4dnn.OCL4DNNConvSpatial.tunerParam.blockWidth,,src\ocl4dnn\include\ocl4dnn.hpp,blockWidth,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2332,433593,tunerParam,1,cv.dnn.ocl4dnn.OCL4DNNConvSpatial.tunerParam.tunerParam,"ANY cv.dnn.ocl4dnn.OCL4DNNConvSpatial.tunerParam.tunerParam (int,int,int,int)",src\ocl4dnn\include\ocl4dnn.hpp,"tunerParam(int type, int w, int h, int d)
           {
               kernelType = type;
               blockWidth = w;
               blockHeight= h;
               blockDepth = d;
           }",149.0,155.0,12.0,12.0,7.0,4,1,8,8,0,4,1,1,0,0,,0,4,8,4,4,ANY
2333,433591,blockHeight,3,cv.dnn.ocl4dnn.OCL4DNNConvSpatial.tunerParam.blockHeight,,src\ocl4dnn\include\ocl4dnn.hpp,blockHeight,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2334,433592,blockDepth,3,cv.dnn.ocl4dnn.OCL4DNNConvSpatial.tunerParam.blockDepth,,src\ocl4dnn\include\ocl4dnn.hpp,blockDepth,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2335,318905,Finish,1,opencv_tflite.ATan2OptionsBuilder.Finish,Offset<ATan2Options> opencv_tflite.ATan2OptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<ATan2Options> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ATan2Options>(end);
    return o;
  }",8214.0,8218.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<ATan2Options>
2336,155072,GetReflection,1,opencv_caffe.V0LayerParameter.GetReflection,Reflection opencv_caffe.V0LayerParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",18851.0,18853.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
2337,89542,GetMetadata,1,opencv_caffe.SPPParameter.GetMetadata,Metadata opencv_caffe.SPPParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata SPPParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[63]);
}",28764.0,28768.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
2338,417223,ElementWiseLayer,1,cv.dnn.ElementWiseLayer.ElementWiseLayer,ANY cv.dnn.ElementWiseLayer.ElementWiseLayer (Func),src\layers\elementwise_layers.cpp,ElementWiseLayer(const Func &f=Func()) { func = f; },146.0,146.0,5.0,56.0,1.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,ANY
2339,302538,GetCachedSize,1,opencv_tensorflow.VersionDef.GetCachedSize,int opencv_tensorflow.VersionDef.GetCachedSize (),misc\tensorflow\versions.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },159.0,159.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
2340,155083,default_instance,1,opencv_caffe.V0LayerParameter.default_instance,V0LayerParameter opencv_caffe.V0LayerParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const V0LayerParameter& default_instance() {
    return *internal_default_instance();
  }",18854.0,18856.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,V0LayerParameter
2341,433613,addDef,1,cv.dnn.ocl4dnn.OCL4DNNConvSpatial.addDef,void cv.dnn.ocl4dnn.OCL4DNNConvSpatial.addDef (char*),src\ocl4dnn\include\ocl4dnn.hpp,"inline void addDef(const char* name, const char* value)
        {
            options_ << "" -D "" << name << ""="" << value;
        }",178.0,181.0,9.0,9.0,4.0,2,1,2,2,0,1,1,1,0,0,,0,1,4,2,2,void
2342,155090,internal_default_instance,1,opencv_caffe.V0LayerParameter.internal_default_instance,V0LayerParameter opencv_caffe.V0LayerParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const V0LayerParameter* internal_default_instance() {
    return reinterpret_cast<const V0LayerParameter*>(
               &_V0LayerParameter_default_instance_);
  }",18857.0,18860.0,3.0,3.0,4.0,2,2,1,1,4,0,1,1,0,0,,0,0,0,0,0,V0LayerParameter
2343,384477,setRegion,1,cv.dnn.darknet.setLayersParams.setRegion,"void cv.dnn.darknet.setLayersParams.setRegion (float,int,int,int,int,int,int,float*)",src\darknet\darknet_io.cpp,"void setRegion(float thresh, int coords, int classes, int anchors, int classfix, int softmax, int softmax_tree, float *biasData)
                {
                    cv::dnn::LayerParams region_param;
                    region_param.name = ""Region-name"";
                    region_param.type = ""Region"";

                    region_param.set<float>(""thresh"", thresh);
                    region_param.set<int>(""coords"", coords);
                    region_param.set<int>(""classes"", classes);
                    region_param.set<int>(""anchors"", anchors);
                    region_param.set<int>(""classfix"", classfix);
                    region_param.set<bool>(""softmax_tree"", softmax_tree);
                    region_param.set<bool>(""softmax"", softmax);

                    cv::Mat biasData_mat = cv::Mat(1, anchors * 2, CV_32F, biasData).clone();
                    region_param.blobs.push_back(biasData_mat);

                    darknet::LayerParameter lp;
                    std::str...",488.0,516.0,17.0,17.0,29.0,32,5,39,18,0,6,1,1,0,0,,0,6,16,8,8,void
2344,105952,SetCachedSize,1,opencv_caffe.ProposalParameter.SetCachedSize,void opencv_caffe.ProposalParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void ProposalParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",33274.0,33276.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
2345,318945,fbb_,3,opencv_tflite.UnsortedSegmentMinOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2346,318946,start_,3,opencv_tflite.UnsortedSegmentMinOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2347,318947,UnsortedSegmentMinOptionsBuilder,1,opencv_tflite.UnsortedSegmentMinOptionsBuilder.UnsortedSegmentMinOptionsBuilder,ANY opencv_tflite.UnsortedSegmentMinOptionsBuilder.UnsortedSegmentMinOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit UnsortedSegmentMinOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",8239.0,8242.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
2348,105962,Clear,1,opencv_caffe.ProposalParameter.Clear,void opencv_caffe.ProposalParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void ProposalParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.ProposalParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ratio_.Clear();
  scale_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    feat_stride_ = 16u;
    base_size_ = 16u;
    min_size_ = 16u;
    pre_nms_topn_ = 6000u;
    post_nms_topn_ = 300u;
    nms_thresh_ = 0.7f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",33278.0,33297.0,1.0,1.0,20.0,15,5,15,11,0,10,2,2,0,0,,0,10,0,0,0,void
2349,318958,Finish,1,opencv_tflite.UnsortedSegmentMinOptionsBuilder.Finish,Offset<UnsortedSegmentMinOptions> opencv_tflite.UnsortedSegmentMinOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<UnsortedSegmentMinOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UnsortedSegmentMinOptions>(end);
    return o;
  }",8243.0,8247.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<UnsortedSegmentMinOptions>
2350,56831,MergeFrom,1,opencv_caffe.DropoutParameter.MergeFrom,void opencv_caffe.DropoutParameter.MergeFrom (DropoutParameter),misc\caffe\opencv-caffe.pb.cc,"void DropoutParameter::MergeFrom(const DropoutParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.DropoutParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      dropout_ratio_ = from.dropout_ratio_;
    }
    if (cached_has_bits & 0x00000002u) {
      scale_train_ = from.scale_train_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",18641.0,18658.0,1.0,1.0,18.0,19,8,17,7,2,6,4,6,0,0,,0,6,2,1,1,void
2351,122372,descriptor,1,opencv_caffe.NetStateRule.descriptor,Descriptor opencv_caffe.NetStateRule.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",5170.0,5172.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
2352,122378,GetDescriptor,1,opencv_caffe.NetStateRule.GetDescriptor,Descriptor opencv_caffe.NetStateRule.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",5173.0,5175.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
2353,122389,GetReflection,1,opencv_caffe.NetStateRule.GetReflection,Reflection opencv_caffe.NetStateRule.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",5176.0,5178.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
2354,318998,fbb_,3,opencv_tflite.SignOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2355,318999,start_,3,opencv_tflite.SignOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2356,319000,SignOptionsBuilder,1,opencv_tflite.SignOptionsBuilder.SignOptionsBuilder,ANY opencv_tflite.SignOptionsBuilder.SignOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit SignOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",8268.0,8271.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
2357,122400,default_instance,1,opencv_caffe.NetStateRule.default_instance,NetStateRule opencv_caffe.NetStateRule.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const NetStateRule& default_instance() {
    return *internal_default_instance();
  }",5179.0,5181.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,NetStateRule
2358,106017,_InternalParse,1,opencv_caffe.ProposalParameter._InternalParse,"const char* opencv_caffe.ProposalParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* ProposalParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 feat_stride = 1 [default = 16];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_feat_stride(&has_bits);
          feat_stride_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 base_size = 2 [default = 16];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_base_size(&has_bits);
          base_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);...",33299.0,33414.0,1.0,10.0,116.0,104,17,105,16,0,13,29,48,0,6,,0,7,4,2,2,const char*
2359,319011,Finish,1,opencv_tflite.SignOptionsBuilder.Finish,Offset<SignOptions> opencv_tflite.SignOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<SignOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SignOptions>(end);
    return o;
  }",8272.0,8276.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<SignOptions>
2360,122407,internal_default_instance,1,opencv_caffe.NetStateRule.internal_default_instance,NetStateRule opencv_caffe.NetStateRule.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const NetStateRule* internal_default_instance() {
    return reinterpret_cast<const NetStateRule*>(
               &_NetStateRule_default_instance_);
  }",5182.0,5185.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,NetStateRule
2361,417323,func,3,cv.dnn.ElementWiseLayer.func,,src\layers\elementwise_layers.cpp,func,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2362,7729,InternalSwap,1,opencv_caffe.BlobProto.InternalSwap,void opencv_caffe.BlobProto.InternalSwap (BlobProto*),misc\caffe\opencv-caffe.pb.cc,"void BlobProto::InternalSwap(BlobProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
  diff_.InternalSwap(&other->diff_);
  double_data_.InternalSwap(&other->double_data_);
  double_diff_.InternalSwap(&other->double_diff_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &raw_data_, lhs_arena,
      &other->raw_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlobProto, raw_data_type_)
      + sizeof(BlobProto::raw_data_type_)
      - PROTOBUF_FIELD_OFFSET(BlobProto, shape_)>(
          reinterpret_cast<char*>(&shape_),
          reinterpret_cast<char*>(&other->shape_));
}",4747.0,4768.0,1.0,1.0,22.0,45,13,33,16,0,17,1,1,0,0,,0,17,2,1,1,void
2363,356489,get,1,cv.dnn.cuda4dnn.csl.cudnn.TransposeConvolutionAlgorithm.get,cudnnConvolutionBwdDataAlgo_t cv.dnn.cuda4dnn.csl.cudnn.TransposeConvolutionAlgorithm.get (),src\cuda4dnn\csl\cudnn\transpose_convolution.hpp,cudnnConvolutionBwdDataAlgo_t get() const noexcept { return dalgo; },95.0,95.0,9.0,76.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,cudnnConvolutionBwdDataAlgo_t
2364,138803,GetCachedSize,1,opencv_caffe.HingeLossParameter.GetCachedSize,int opencv_caffe.HingeLossParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },12003.0,12003.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
2365,73270,_InternalSerialize,1,opencv_caffe.ParameterParameter._InternalSerialize,"uint8_t opencv_caffe.ParameterParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* ParameterParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.ParameterParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .opencv_caffe.BlobShape shape = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::shape(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openc...",23749.0,23770.0,1.0,1.0,22.0,23,8,27,11,0,2,3,3,0,1,,0,2,4,2,2,uint8_t
2366,320669,start_,3,opencv_tflite.MetadataBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2367,320670,add_name,1,opencv_tflite.MetadataBuilder.add_name,void opencv_tflite.MetadataBuilder.add_name (ANY),misc\tflite\schema_generated.hpp,"void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Metadata::VT_NAME, name);
  }",9576.0,9578.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
2368,286270,MergeFrom,1,opencv_tensorflow.OpDef.MergeFrom,void opencv_tensorflow.OpDef.MergeFrom (OpDef),misc\tensorflow\op_def.pb.cc,"void OpDef::MergeFrom(const OpDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_tensorflow.OpDef)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  input_arg_.MergeFrom(from.input_arg_);
  output_arg_.MergeFrom(from.output_arg_);
  attr_.MergeFrom(from.attr_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_summary().empty()) {
    _internal_set_summary(from._internal_summary());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (from._internal_has_deprecation()) {
    _internal_mutable_deprecation()->::opencv_tensorflow::OpDeprecation::MergeFrom(from._internal_deprecation());
  }
  if (from._internal_is_commutative() != 0) {
    _internal_set_is_commutative(from._internal_is_commutative());
  }
  if (from._internal_is_aggregate() != 0) {
    _internal_set_is_aggregate(from._i...",1609.0,1643.0,1.0,1.0,35.0,41,9,28,7,1,7,9,9,0,1,,0,6,2,1,1,void
2369,417353,slope,3,cv.dnn.ReLUFunctor.slope,,src\layers\elementwise_layers.cpp,slope,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
2370,351818,descriptor,3,cv.dnn.cuda4dnn.csl.cudnn.FilterDescriptor.descriptor,,src\cuda4dnn\csl\cudnn\convolution.hpp,descriptor,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
2371,237131,_InternalSerialize,1,opencv_onnx.TensorShapeProto_Dimension._InternalSerialize,"uint8_t opencv_onnx.TensorShapeProto_Dimension._InternalSerialize (uint8_t*,ANY*)",misc\onnx\opencv-onnx.pb.cc,"uint8_t* TensorShapeProto_Dimension::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_onnx.TensorShapeProto.Dimension)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (value_case()) {
    case kDimValue: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_dim_value(), target);
      break;
    }
    case kDimParam: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_dim_param().data(), static_cast<int>(this->_internal_dim_param().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        ""opencv_onnx.TensorShapeProto.Dimension.dim_param"");
      target = stream->WriteStringMaybeAliased(
          2, this->_internal_dim_param(), target);
      break;
    }
    default: ;
...",4648.0,4688.0,1.0,1.0,41.0,51,8,45,12,0,3,6,4,0,0,,0,3,4,2,2,uint8_t
2372,319052,start_,3,opencv_tflite.OperatorCodeBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2373,319051,fbb_,3,opencv_tflite.OperatorCodeBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
2374,319053,add_deprecated_builtin_code,1,opencv_tflite.OperatorCodeBuilder.add_deprecated_builtin_code,void opencv_tflite.OperatorCodeBuilder.add_deprecated_builtin_code (int8_t),misc\tflite\schema_generated.hpp,"void add_deprecated_builtin_code(int8_t deprecated_builtin_code) {
    fbb_.AddElement<int8_t>(OperatorCode::VT_DEPRECATED_BUILTIN_CODE, deprecated_builtin_code, 0);
  }",8320.0,8322.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
2375,155215,GetCachedSize,1,opencv_caffe.V0LayerParameter.GetCachedSize,int opencv_caffe.V0LayerParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },18905.0,18905.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
2376,356495,get_workspace_size,1,cv.dnn.cuda4dnn.csl.cudnn.TransposeConvolutionAlgorithm.get_workspace_size,size_t cv.dnn.cuda4dnn.csl.cudnn.TransposeConvolutionAlgorithm.get_workspace_size (),src\cuda4dnn\csl\cudnn\transpose_convolution.hpp,std::size_t get_workspace_size() const noexcept { return workspace_size; },97.0,97.0,9.0,82.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,size_t
2377,56916,InternalSwap,1,opencv_caffe.DropoutParameter.InternalSwap,void opencv_caffe.DropoutParameter.InternalSwap (DropoutParameter*),misc\caffe\opencv-caffe.pb.cc,"void DropoutParameter::InternalSwap(DropoutParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dropout_ratio_, other->dropout_ratio_);
  swap(scale_train_, other->scale_train_);
}",18671.0,18677.0,1.0,1.0,7.0,8,4,8,5,0,6,1,1,0,0,,0,6,2,1,1,void
2378,319071,add_custom_code,1,opencv_tflite.OperatorCodeBuilder.add_custom_code,void opencv_tflite.OperatorCodeBuilder.add_custom_code (ANY),misc\tflite\schema_generated.hpp,"void add_custom_code(::flatbuffers::Offset<::flatbuffers::String> custom_code) {
    fbb_.AddOffset(OperatorCode::VT_CUSTOM_CODE, custom_code);
  }",8323.0,8325.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
2379,384611,setYolo,1,cv.dnn.darknet.setLayersParams.setYolo,"void cv.dnn.darknet.setLayersParams.setYolo (int,ANY,ANY,float,float,float,int)",src\darknet\darknet_io.cpp,"void setYolo(int classes, const std::vector<int>& mask, const std::vector<float>& anchors, float thresh, float nms_threshold, float scale_x_y, int new_coords)
                {
                    cv::dnn::LayerParams region_param;
                    region_param.name = ""Region-name"";
                    region_param.type = ""Region"";

                    const int numAnchors = mask.size();

                    region_param.set<int>(""classes"", classes);
                    region_param.set<int>(""anchors"", numAnchors);
                    region_param.set<bool>(""logistic"", true);
                    region_param.set<float>(""thresh"", thresh);
                    region_param.set<float>(""nms_threshold"", nms_threshold);
                    region_param.set<float>(""scale_x_y"", scale_x_y);
                    region_param.set<int>(""new_coords"", new_coords);

                    std::vector<float> usedAnchors(numAnchors * 2);
                    for (int i = 0; i < numAnchors; ++i)
       ...",518.0,556.0,17.0,17.0,39.0,56,9,58,21,0,7,2,2,0,0,,0,7,14,7,7,void
2380,417381,apply,1,cv.dnn.ReLUFunctor.apply,"void cv.dnn.ReLUFunctor.apply (float*,float*,int,int,size_t,int,int)",src\layers\elementwise_layers.cpp,"void apply(const float* srcptr, float* dstptr, int stripeStart, int len, size_t planeSize, int cn0, int cn1) const
    {
        CV_UNUSED(stripeStart);
        float s = slope;
        for( int cn = cn0; cn < cn1; cn++, srcptr += planeSize, dstptr += planeSize )
        {
            int i = 0;
#if CV_SIMD128
            v_float32x4 s4 = v_setall_f32(s), z = v_setzero_f32();
            for( ; i <= len - 16; i += 16 )
            {
                v_float32x4 x0 = v_load(srcptr + i);
                v_float32x4 x1 = v_load(srcptr + i + 4);
                v_float32x4 x2 = v_load(srcptr + i + 8);
                v_float32x4 x3 = v_load(srcptr + i + 12);
                x0 = v_select(v_ge(x0, z), x0, v_mul(x0, s4));
                x1 = v_select(v_ge(x1, z), x1, v_mul(x1, s4));
                x2 = v_select(v_ge(x2, z), x2, v_mul(x2, s4));
                x3 = v_select(v_ge(x3, z), x3, v_mul(x3, s4));
                v_store(dstptr + i, x0);
                v_store(dstptr + i + 4, x1...",358.0,389.0,5.0,5.0,32.0,12,6,19,11,0,1,3,4,0,0,,0,1,14,7,7,void
2381,351852,~ConvolutionDescriptor,1,cv.dnn.cuda4dnn.csl.cudnn.ConvolutionDescriptor.~ConvolutionDescriptor,ANY cv.dnn.cuda4dnn.csl.cudnn.ConvolutionDescriptor.~ConvolutionDescriptor (),src\cuda4dnn\csl\cudnn\convolution.hpp,"~ConvolutionDescriptor() noexcept {
            if (descriptor != nullptr) {
                /* cudnnDestroyConvolutionDescriptor will not fail for a valid descriptor object */
                CUDA4DNN_CHECK_CUDNN(cudnnDestroyConvolutionDescriptor(descriptor));
            }
        }",173.0,178.0,9.0,16.0,6.0,7,2,10,3,0,3,2,2,1,0,,0,3,0,0,0,ANY
2382,319084,add_version,1,opencv_tflite.OperatorCodeBuilder.add_version,void opencv_tflite.OperatorCodeBuilder.add_version (int32_t),misc\tflite\schema_generated.hpp,"void add_version(int32_t version) {
    fbb_.AddElement<int32_t>(OperatorCode::VT_VERSION, version, 1);
  }",8326.0,8328.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
2383,356501,dalgo,3,cv.dnn.cuda4dnn.csl.cudnn.TransposeConvolutionAlgorithm.dalgo,,src\cuda4dnn\csl\cudnn\transpose_convolution.hpp,dalgo,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2384,356502,workspace_size,3,cv.dnn.cuda4dnn.csl.cudnn.TransposeConvolutionAlgorithm.workspace_size,,src\cuda4dnn\csl\cudnn\transpose_convolution.hpp,workspace_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2385,56948,GetMetadata,1,opencv_caffe.DropoutParameter.GetMetadata,Metadata opencv_caffe.DropoutParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata DropoutParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[29]);
}",18679.0,18683.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
2386,302716,bad_consumers_,3,opencv_tensorflow.VersionDef.bad_consumers_,,misc\tensorflow\versions.pb.hpp,bad_consumers_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
2387,302717,_bad_consumers_cached_byte_size_,3,opencv_tensorflow.VersionDef._bad_consumers_cached_byte_size_,,misc\tensorflow\versions.pb.hpp,_bad_consumers_cached_byte_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2388,302718,producer_,3,opencv_tensorflow.VersionDef.producer_,,misc\tensorflow\versions.pb.hpp,producer_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
2389,302719,min_consumer_,3,opencv_tensorflow.VersionDef.min_consumer_,,misc\tensorflow\versions.pb.hpp,min_consumer_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
2390,302720,_cached_size_,3,opencv_tensorflow.VersionDef._cached_size_,,misc\tensorflow\versions.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2391,319102,add_builtin_code,1,opencv_tflite.OperatorCodeBuilder.add_builtin_code,void opencv_tflite.OperatorCodeBuilder.add_builtin_code (ANY),misc\tflite\schema_generated.hpp,"void add_builtin_code(opencv_tflite::BuiltinOperator builtin_code) {
    fbb_.AddElement<int32_t>(OperatorCode::VT_BUILTIN_CODE, static_cast<int32_t>(builtin_code), 0);
  }",8329.0,8331.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
2392,320683,add_buffer,1,opencv_tflite.MetadataBuilder.add_buffer,void opencv_tflite.MetadataBuilder.add_buffer (uint32_t),misc\tflite\schema_generated.hpp,"void add_buffer(uint32_t buffer) {
    fbb_.AddElement<uint32_t>(Metadata::VT_BUFFER, buffer, 0);
  }",9579.0,9581.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
2393,73352,ByteSizeLong,1,opencv_caffe.ParameterParameter.ByteSizeLong,size_t opencv_caffe.ParameterParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t ParameterParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.ParameterParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .opencv_caffe.BlobShape shape = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shape_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}",23772.0,23789.0,1.0,1.0,18.0,13,9,13,8,0,3,2,2,0,0,,0,3,0,0,0,size_t
2394,319122,OperatorCodeBuilder,1,opencv_tflite.OperatorCodeBuilder.OperatorCodeBuilder,ANY opencv_tflite.OperatorCodeBuilder.OperatorCodeBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit OperatorCodeBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",8332.0,8335.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
2395,269971,ByteSizeLong,1,opencv_tensorflow.FunctionDef_Node.ByteSizeLong,size_t opencv_tensorflow.FunctionDef_Node.ByteSizeLong (),misc\tensorflow\function.pb.cc,"size_t FunctionDef_Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_tensorflow.FunctionDef.Node)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ret = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ret_.size());
  for (int i = 0, n = ret_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ret_.Get(i));
  }

  // repeated string arg = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(arg_.size());
  for (int i = 0, n = arg_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      arg_.Get(i));
  }

  // repeated string dep = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(dep_.size());
  for (int i = 0, n = dep_.size(); i < n; i++) {
...",703.0,752.0,1.0,1.0,50.0,71,11,64,14,0,10,6,6,0,0,,0,10,0,0,0,size_t
2396,319133,Finish,1,opencv_tflite.OperatorCodeBuilder.Finish,Offset<OperatorCode> opencv_tflite.OperatorCodeBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<OperatorCode> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<OperatorCode>(end);
    return o;
  }",8336.0,8340.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<OperatorCode>
2397,351907,get,1,cv.dnn.cuda4dnn.csl.cudnn.ConvolutionDescriptor.get,cudnnConvolutionDescriptor_t cv.dnn.cuda4dnn.csl.cudnn.ConvolutionDescriptor.get (),src\cuda4dnn\csl\cudnn\convolution.hpp,cudnnConvolutionDescriptor_t get() const noexcept { return descriptor; },187.0,187.0,9.0,80.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,cudnnConvolutionDescriptor_t
2398,122532,GetCachedSize,1,opencv_caffe.NetStateRule.GetCachedSize,int opencv_caffe.NetStateRule.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },5230.0,5230.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
2399,7848,GetMetadata,1,opencv_caffe.BlobProto.GetMetadata,Metadata opencv_caffe.BlobProto.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata BlobProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[1]);
}",4770.0,4774.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
2400,351913,constructor,1,cv.dnn.cuda4dnn.csl.cudnn.ConvolutionDescriptor.constructor,"void cv.dnn.cuda4dnn.csl.cudnn.ConvolutionDescriptor.constructor<SequenceContainer> (SequenceContainer,SequenceContainer,SequenceContainer,ANY)",src\cuda4dnn\csl\cudnn\convolution.hpp,"void constructor(
            const SequenceContainer& zero_padding,
            const SequenceContainer& stride,
            const SequenceContainer& dilation,
            std::size_t group_count)
        {
            CV_Assert(zero_padding.size() == stride.size());
            CV_Assert(zero_padding.size() == dilation.size());

            CUDA4DNN_CHECK_CUDNN(cudnnCreateConvolutionDescriptor(&descriptor));
            try {
                const auto rank = zero_padding.size();
                if (rank == 2) {
                    CUDA4DNN_CHECK_CUDNN(
                        cudnnSetConvolution2dDescriptor(
                            descriptor,
                            zero_padding[0], zero_padding[1],
                            stride[0], stride[1],
                            dilation[0], dilation[1],
                            CUDNN_CROSS_CORRELATION,
                            detail::get_data_type<T>()
                        )
                    );
               ...",191.0,244.0,9.0,12.0,54.0,51,6,61,16,0,7,4,6,0,0,,0,7,8,4,4,void
2401,319157,CreateOperatorCode,1,opencv_tflite.CreateOperatorCode,"Offset<OperatorCode> opencv_tflite.CreateOperatorCode (ANY,int8_t,ANY,int32_t,ANY)",misc\tflite\schema_generated.hpp,"inline ::flatbuffers::Offset<OperatorCode> CreateOperatorCode(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int8_t deprecated_builtin_code = 0,
    ::flatbuffers::Offset<::flatbuffers::String> custom_code = 0,
    int32_t version = 1,
    opencv_tflite::BuiltinOperator builtin_code = opencv_tflite::BuiltinOperator_ADD) {
  OperatorCodeBuilder builder_(_fbb);
  builder_.add_builtin_code(builtin_code);
  builder_.add_version(version);
  builder_.add_custom_code(custom_code);
  builder_.add_deprecated_builtin_code(deprecated_builtin_code);
  return builder_.Finish();
}",8343.0,8355.0,1.0,1.0,13.0,5,1,10,6,1,0,1,1,0,0,,0,0,10,5,5,Offset<OperatorCode>
2402,138960,_has_bits_,3,opencv_caffe.HingeLossParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
2403,138961,_cached_size_,3,opencv_caffe.HingeLossParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2404,138962,norm_,3,opencv_caffe.HingeLossParameter.norm_,,misc\caffe\opencv-caffe.pb.hpp,norm_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
2405,417490,tryQuantize,1,cv.dnn.ReLUFunctor.tryQuantize,"bool cv.dnn.ReLUFunctor.tryQuantize (ANY,ANY,LayerParams)",src\layers\elementwise_layers.cpp,"bool tryQuantize(const std::vector<std::vector<float> > &scales,
                     const std::vector<std::vector<int> > &zeropoints, LayerParams& params)
    {
        if (slope != 0.f)
        {
            float inpScale = scales[0][0], outScale = scales[1][0];
            int inpZp = zeropoints[0][0], outZp = zeropoints[1][0];

            Mat lookUpTable(1, 256, CV_8S);
            int8_t* table = lookUpTable.ptr<int8_t>();
            for (int i = -128; i < 128; i++)
            {
                float x = inpScale*(i - inpZp);
                float y = x >= 0.f ? x : slope*x;
                int quantized = outZp + (int)std::round(y/outScale);
                table[i+128] = saturate_cast<int8_t>(quantized);
            }
            params.blobs.clear();
            params.blobs.push_back(lookUpTable);
        }
        params.set(""input_scale"", scales[0][0]);
        params.set(""input_zeropoint"", zeropoints[0][0]);
        params.set(""slope"", slope);
        return true;
 ...",510.0,534.0,5.0,5.0,25.0,46,14,42,18,0,3,3,4,1,0,,0,3,6,3,3,bool
2406,57042,SetCachedSize,1,opencv_caffe.DummyDataParameter.SetCachedSize,void opencv_caffe.DummyDataParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void DummyDataParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",18738.0,18740.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
2407,73430,MergeFrom,1,opencv_caffe.ParameterParameter.MergeFrom,void opencv_caffe.ParameterParameter.MergeFrom (ParameterParameter),misc\caffe\opencv-caffe.pb.cc,"void ParameterParameter::MergeFrom(const ParameterParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.ParameterParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_shape()) {
    _internal_mutable_shape()->::opencv_caffe::BlobShape::MergeFrom(from._internal_shape());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",23804.0,23814.0,1.0,1.0,11.0,11,7,8,4,1,1,2,2,0,1,,0,0,2,1,1,void
2408,319194,CreateOperatorCodeDirect,1,opencv_tflite.CreateOperatorCodeDirect,"Offset<OperatorCode> opencv_tflite.CreateOperatorCodeDirect (ANY,int8_t,char*,int32_t,ANY)",misc\tflite\schema_generated.hpp,"inline ::flatbuffers::Offset<OperatorCode> CreateOperatorCodeDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int8_t deprecated_builtin_code = 0,
    const char *custom_code = nullptr,
    int32_t version = 1,
    opencv_tflite::BuiltinOperator builtin_code = opencv_tflite::BuiltinOperator_ADD) {
  auto custom_code__ = custom_code ? _fbb.CreateString(custom_code) : 0;
  return opencv_tflite::CreateOperatorCode(
      _fbb,
      deprecated_builtin_code,
      custom_code__,
      version,
      builtin_code);
}",8357.0,8370.0,1.0,1.0,14.0,4,3,10,7,0,1,1,1,0,1,,0,0,10,5,5,Offset<OperatorCode>
2409,57052,Clear,1,opencv_caffe.DummyDataParameter.Clear,void opencv_caffe.DummyDataParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void DummyDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.DummyDataParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_filler_.Clear();
  num_.Clear();
  channels_.Clear();
  height_.Clear();
  width_.Clear();
  shape_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",18742.0,18755.0,1.0,1.0,14.0,9,3,9,8,0,6,1,1,0,0,,0,6,0,0,0,void
2410,286450,InternalSwap,1,opencv_tensorflow.OpDef.InternalSwap,void opencv_tensorflow.OpDef.InternalSwap (OpDef*),misc\tensorflow\op_def.pb.cc,"void OpDef::InternalSwap(OpDef* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  input_arg_.InternalSwap(&other->input_arg_);
  output_arg_.InternalSwap(&other->output_arg_);
  attr_.InternalSwap(&other->attr_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &summary_, lhs_arena,
      &other->summary_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESP...",1656.0,1685.0,1.0,1.0,30.0,57,12,47,16,0,17,1,1,0,0,,0,17,2,1,1,void
2411,237311,ByteSizeLong,1,opencv_onnx.TensorShapeProto_Dimension.ByteSizeLong,size_t opencv_onnx.TensorShapeProto_Dimension.ByteSizeLong (),misc\onnx\opencv-onnx.pb.cc,"size_t TensorShapeProto_Dimension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_onnx.TensorShapeProto.Dimension)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string denotation = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_denotation());
  }

  switch (value_case()) {
    // int64 dim_value = 1;
    case kDimValue: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_dim_value());
      break;
    }
    // string dim_param = 2;
    case kDimParam: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dim_param());
      break;
    }
    case VALUE_NOT_SET: {
      ...",4690.0,4724.0,1.0,1.0,35.0,24,9,23,10,0,5,6,3,0,0,,0,5,0,0,0,size_t
2412,7942,SetCachedSize,1,opencv_caffe.BlobProtoVector.SetCachedSize,void opencv_caffe.BlobProtoVector.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void BlobProtoVector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",4819.0,4821.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
2413,7952,Clear,1,opencv_caffe.BlobProtoVector.Clear,void opencv_caffe.BlobProtoVector.Clear (),misc\caffe\opencv-caffe.pb.cc,"void BlobProtoVector::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.BlobProtoVector)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blobs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",4823.0,4831.0,1.0,1.0,9.0,4,3,4,3,0,1,1,1,0,0,,0,1,0,0,0,void
2414,73492,InternalSwap,1,opencv_caffe.ParameterParameter.InternalSwap,void opencv_caffe.ParameterParameter.InternalSwap (ParameterParameter*),misc\caffe\opencv-caffe.pb.cc,"void ParameterParameter::InternalSwap(ParameterParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(shape_, other->shape_);
}",23827.0,23832.0,1.0,1.0,6.0,7,4,6,4,0,4,1,1,0,0,,0,4,2,1,1,void
2415,433949,options_,3,cv.dnn.ocl4dnn.OCL4DNNConvSpatial.options_,,src\ocl4dnn\include\ocl4dnn.hpp,options_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2416,450336,net,3,cv.dnn.TorchImporter.net,,src\torch\torch_importer.cpp,net,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2417,450337,file,3,cv.dnn.TorchImporter.file,,src\torch\torch_importer.cpp,file,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,22,0,1,1,0,0,,0,0,0,0,0,
2418,450338,readedIndexes,3,cv.dnn.TorchImporter.readedIndexes,,src\torch\torch_importer.cpp,readedIndexes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
2419,450339,storages,3,cv.dnn.TorchImporter.storages,,src\torch\torch_importer.cpp,storages,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
2420,450340,tensors,3,cv.dnn.TorchImporter.tensors,,src\torch\torch_importer.cpp,tensors,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
2421,450343,thName,3,cv.dnn.TorchImporter.Module.thName,,src\torch\torch_importer.cpp,thName,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2422,450344,apiType,3,cv.dnn.TorchImporter.Module.apiType,,src\torch\torch_importer.cpp,apiType,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2423,450345,params,3,cv.dnn.TorchImporter.Module.params,,src\torch\torch_importer.cpp,params,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2424,450346,modules,3,cv.dnn.TorchImporter.Module.modules,,src\torch\torch_importer.cpp,modules,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2425,384813,setShortcut,1,cv.dnn.darknet.setLayersParams.setShortcut,"void cv.dnn.darknet.setLayersParams.setShortcut (int,float)",src\darknet\darknet_io.cpp,"void setShortcut(int from, float alpha)
                {
                    cv::dnn::LayerParams shortcut_param;
                    shortcut_param.name = ""Shortcut-name"";
                    shortcut_param.type = ""Eltwise"";

                    if (alpha != 1)
                    {
                        std::vector<float> coeffs(2, 1);
                        coeffs[0] = alpha;
                        shortcut_param.set(""coeff"", DictValue::arrayReal<float*>(&coeffs[0], coeffs.size()));
                    }

                    shortcut_param.set<std::string>(""op"", ""sum"");
                    shortcut_param.set<std::string>(""output_channels_mode"", ""input_0_truncate"");

                    darknet::LayerParameter lp;
                    std::string layer_name = cv::format(""shortcut_%d"", layer_id);
                    lp.layer_name = layer_name;
                    lp.layer_type = shortcut_param.type;
                    lp.layerParams = shortcut_param;
                    lp.bot...",558.0,586.0,17.0,17.0,29.0,43,11,34,13,0,8,2,2,0,0,,0,8,4,2,2,void
2426,73519,GetMetadata,1,opencv_caffe.ParameterParameter.GetMetadata,Metadata opencv_caffe.ParameterParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata ParameterParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[47]);
}",23834.0,23838.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
2427,450353,rootModule,3,cv.dnn.TorchImporter.rootModule,,src\torch\torch_importer.cpp,*rootModule,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
2428,450354,curModule,3,cv.dnn.TorchImporter.curModule,,src\torch\torch_importer.cpp,*curModule,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
2429,450355,moduleCounter,3,cv.dnn.TorchImporter.moduleCounter,,src\torch\torch_importer.cpp,moduleCounter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2430,450356,testPhase,3,cv.dnn.TorchImporter.testPhase,,src\torch\torch_importer.cpp,testPhase,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2431,450357,TorchImporter,1,cv.dnn.TorchImporter.TorchImporter,"ANY cv.dnn.TorchImporter.TorchImporter (String,bool,bool)",src\torch\torch_importer.cpp,"TorchImporter(String filename, bool isBinary, bool evaluate)
    {
        CV_TRACE_FUNCTION();

        rootModule = curModule = NULL;
        moduleCounter = 0;
        testPhase = evaluate;

        file = cv::Ptr<THFile>(THDiskFile_new(filename, ""r"", 0), THFile_free);
        CV_Assert(file && THFile_isOpened(file));

        if (isBinary)
            THFile_binary(file);
        else
            THFile_ascii(file);
    }",139.0,154.0,5.0,5.0,16.0,11,7,15,12,0,8,2,2,0,0,,0,8,6,3,3,ANY
2432,433983,in_shape,3,cv.dnn.ocl4dnn.OCL4DNNPoolConfig.in_shape,,src\ocl4dnn\include\ocl4dnn.hpp,in_shape,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2433,433984,out_shape,3,cv.dnn.ocl4dnn.OCL4DNNPoolConfig.out_shape,,src\ocl4dnn\include\ocl4dnn.hpp,out_shape,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2434,433985,kernel,3,cv.dnn.ocl4dnn.OCL4DNNPoolConfig.kernel,,src\ocl4dnn\include\ocl4dnn.hpp,kernel,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2435,433986,pad_l,3,cv.dnn.ocl4dnn.OCL4DNNPoolConfig.pad_l,,src\ocl4dnn\include\ocl4dnn.hpp,pad_l,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2436,433987,pad_t,3,cv.dnn.ocl4dnn.OCL4DNNPoolConfig.pad_t,,src\ocl4dnn\include\ocl4dnn.hpp,pad_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2437,433988,pad_r,3,cv.dnn.ocl4dnn.OCL4DNNPoolConfig.pad_r,,src\ocl4dnn\include\ocl4dnn.hpp,pad_r,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2438,433989,pad_b,3,cv.dnn.ocl4dnn.OCL4DNNPoolConfig.pad_b,,src\ocl4dnn\include\ocl4dnn.hpp,pad_b,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2439,433990,stride,3,cv.dnn.ocl4dnn.OCL4DNNPoolConfig.stride,,src\ocl4dnn\include\ocl4dnn.hpp,stride,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2440,433992,channels,3,cv.dnn.ocl4dnn.OCL4DNNPoolConfig.channels,,src\ocl4dnn\include\ocl4dnn.hpp,channels,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2441,433993,pool_method,3,cv.dnn.ocl4dnn.OCL4DNNPoolConfig.pool_method,,src\ocl4dnn\include\ocl4dnn.hpp,pool_method,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2442,433995,avePoolPaddedArea,3,cv.dnn.ocl4dnn.OCL4DNNPoolConfig.avePoolPaddedArea,,src\ocl4dnn\include\ocl4dnn.hpp,avePoolPaddedArea,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2443,139083,descriptor,1,opencv_caffe.ImageDataParameter.descriptor,Descriptor opencv_caffe.ImageDataParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",12131.0,12133.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
2444,433997,use_half,3,cv.dnn.ocl4dnn.OCL4DNNPoolConfig.use_half,,src\ocl4dnn\include\ocl4dnn.hpp,use_half,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2445,73550,set_has_pad,1,opencv_caffe._Internal.set_has_pad,void opencv_caffe._Internal.set_has_pad (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_pad(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }",30819.0,30821.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
2446,433996,computeMaxIdx,3,cv.dnn.ocl4dnn.OCL4DNNPoolConfig.computeMaxIdx,,src\ocl4dnn\include\ocl4dnn.hpp,computeMaxIdx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2447,139089,GetDescriptor,1,opencv_caffe.ImageDataParameter.GetDescriptor,Descriptor opencv_caffe.ImageDataParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",12134.0,12136.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
2448,139100,GetReflection,1,opencv_caffe.ImageDataParameter.GetReflection,Reflection opencv_caffe.ImageDataParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",12137.0,12139.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
2449,450405,readInt,1,cv.dnn.TorchImporter.readInt,int cv.dnn.TorchImporter.readInt (),src\torch\torch_importer.cpp,"inline int readInt()
    {
        return THFile_readIntScalar(file);
    }",158.0,161.0,5.0,5.0,4.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
2450,139111,default_instance,1,opencv_caffe.ImageDataParameter.default_instance,ImageDataParameter opencv_caffe.ImageDataParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const ImageDataParameter& default_instance() {
    return *internal_default_instance();
  }",12140.0,12142.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,ImageDataParameter
2451,450412,readLong,1,cv.dnn.TorchImporter.readLong,long cv.dnn.TorchImporter.readLong (),src\torch\torch_importer.cpp,"inline long readLong()
    {
        return THFile_readLongScalar(file);
    }",163.0,166.0,5.0,5.0,4.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,long
2452,139118,internal_default_instance,1,opencv_caffe.ImageDataParameter.internal_default_instance,ImageDataParameter opencv_caffe.ImageDataParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const ImageDataParameter* internal_default_instance() {
    return reinterpret_cast<const ImageDataParameter*>(
               &_ImageDataParameter_default_instance_);
  }",12143.0,12146.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,ImageDataParameter
2453,73583,set_has_kernel_size,1,opencv_caffe._Internal.set_has_kernel_size,void opencv_caffe._Internal.set_has_kernel_size (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_kernel_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }",23857.0,23859.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
2454,417652,minValue,3,cv.dnn.ReLU6Functor.minValue,,src\layers\elementwise_layers.cpp,minValue,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2455,417653,maxValue,3,cv.dnn.ReLU6Functor.maxValue,,src\layers\elementwise_layers.cpp,maxValue,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2456,417654,ReLU6Functor,1,cv.dnn.ReLU6Functor.ReLU6Functor,"ANY cv.dnn.ReLU6Functor.ReLU6Functor (float,float)",src\layers\elementwise_layers.cpp,"ReLU6Functor(float minValue_ = 0.0f, float maxValue_ = 6.0f)
        : minValue(minValue_), maxValue(maxValue_)
    {
        CV_Assert(minValue <= maxValue);
    }",544.0,548.0,5.0,5.0,5.0,1,1,2,2,0,2,1,1,0,0,,0,2,4,2,2,ANY
2457,434042,num_output,3,cv.dnn.ocl4dnn.OCL4DNNInnerProductConfig.num_output,,src\ocl4dnn\include\ocl4dnn.hpp,num_output,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2458,434043,M,3,cv.dnn.ocl4dnn.OCL4DNNInnerProductConfig.M,,src\ocl4dnn\include\ocl4dnn.hpp,M,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2459,450427,readDouble,1,cv.dnn.TorchImporter.readDouble,double cv.dnn.TorchImporter.readDouble (),src\torch\torch_importer.cpp,"inline double readDouble()
    {
        return THFile_readDoubleScalar(file);
    }",173.0,176.0,5.0,5.0,4.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,double
2460,237436,MergeFrom,1,opencv_onnx.TensorShapeProto_Dimension.MergeFrom,void opencv_onnx.TensorShapeProto_Dimension.MergeFrom (TensorShapeProto_Dimension),misc\onnx\opencv-onnx.pb.cc,"void TensorShapeProto_Dimension::MergeFrom(const TensorShapeProto_Dimension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_onnx.TensorShapeProto.Dimension)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_denotation()) {
    _internal_set_denotation(from._internal_denotation());
  }
  switch (from.value_case()) {
    case kDimValue: {
      _internal_set_dim_value(from._internal_dim_value());
      break;
    }
    case kDimParam: {
      _internal_set_dim_param(from._internal_dim_param());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",4739.0,4762.0,1.0,1.0,24.0,13,6,14,7,0,3,6,3,0,0,,0,3,2,1,1,void
2461,434046,transpose,3,cv.dnn.ocl4dnn.OCL4DNNInnerProductConfig.transpose,,src\ocl4dnn\include\ocl4dnn.hpp,transpose,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2462,434044,K,3,cv.dnn.ocl4dnn.OCL4DNNInnerProductConfig.K,,src\ocl4dnn\include\ocl4dnn.hpp,K,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2463,434048,use_half,3,cv.dnn.ocl4dnn.OCL4DNNInnerProductConfig.use_half,,src\ocl4dnn\include\ocl4dnn.hpp,use_half,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2464,434047,phase_test,3,cv.dnn.ocl4dnn.OCL4DNNInnerProductConfig.phase_test,,src\ocl4dnn\include\ocl4dnn.hpp,phase_test,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2465,450434,readString,1,cv.dnn.TorchImporter.readString,String cv.dnn.TorchImporter.readString (),src\torch\torch_importer.cpp,"inline String readString()
    {
        int size = THFile_readIntScalar(file);
        String str(size, '\0');
        THFile_readCharRaw(file, const_cast<char*>(str.c_str()), size);
        return str;
    }",178.0,184.0,5.0,5.0,7.0,3,3,7,3,0,2,1,1,0,0,,0,2,0,0,0,String
2466,434045,bias_term,3,cv.dnn.ocl4dnn.OCL4DNNInnerProductConfig.bias_term,,src\ocl4dnn\include\ocl4dnn.hpp,bias_term,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2467,286598,GetMetadata,1,opencv_tensorflow.OpDef.GetMetadata,Metadata opencv_tensorflow.OpDef.GetMetadata (),misc\tensorflow\op_def.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata OpDef::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_op_5fdef_2eproto_getter, &descriptor_table_op_5fdef_2eproto_once,
      file_level_metadata_op_5fdef_2eproto[2]);
}",1687.0,1691.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
2468,73616,set_has_stride,1,opencv_caffe._Internal.set_has_stride,void opencv_caffe._Internal.set_has_stride (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_stride(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }",30828.0,30830.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
2469,417690,apply,1,cv.dnn.ReLU6Functor.apply,"void cv.dnn.ReLU6Functor.apply (float*,float*,int,int,size_t,int,int)",src\layers\elementwise_layers.cpp,"void apply(const float* srcptr, float* dstptr, int stripeStart, int len, size_t planeSize, int cn0, int cn1) const
    {
        CV_UNUSED(stripeStart);
        for( int cn = cn0; cn < cn1; cn++, srcptr += planeSize, dstptr += planeSize )
        {
            int i = 0;
#if CV_SIMD128
            v_float32x4 minV = v_setall_f32(minValue), maxV = v_setall_f32(maxValue);
            for( ; i <= len - 16; i += 16 )
            {
                v_float32x4 x0 = v_load(srcptr + i);
                v_float32x4 x1 = v_load(srcptr + i + 4);
                v_float32x4 x2 = v_load(srcptr + i + 8);
                v_float32x4 x3 = v_load(srcptr + i + 12);
                x0 = v_min(v_max(minV, x0), maxV);
                x1 = v_min(v_max(minV, x1), maxV);
                x2 = v_min(v_max(minV, x2), maxV);
                x3 = v_min(v_max(minV, x3), maxV);
                v_store(dstptr + i, x0);
                v_store(dstptr + i + 4, x1);
                v_store(dstptr + i + 8, x2);
      ...",563.0,596.0,5.0,5.0,34.0,11,6,19,11,0,3,4,7,1,0,,0,3,14,7,7,void
2470,270247,MergeFrom,1,opencv_tensorflow.FunctionDef_Node.MergeFrom,void opencv_tensorflow.FunctionDef_Node.MergeFrom (FunctionDef_Node),misc\tensorflow\function.pb.cc,"void FunctionDef_Node::MergeFrom(const FunctionDef_Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_tensorflow.FunctionDef.Node)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ret_.MergeFrom(from.ret_);
  arg_.MergeFrom(from.arg_);
  dep_.MergeFrom(from.dep_);
  attr_.MergeFrom(from.attr_);
  if (!from._internal_op().empty()) {
    _internal_set_op(from._internal_op());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",767.0,781.0,1.0,1.0,15.0,20,7,16,8,0,8,2,2,0,0,,0,8,2,1,1,void
2471,450479,readTable,1,cv.dnn.TorchImporter.readTable,void cv.dnn.TorchImporter.readTable (int),src\torch\torch_importer.cpp,"void readTable(int index = -1)
    {
        index = (index < 0) ? readInt() : index;

        if (readedIndexes.count(index))
            return;

        readedIndexes.insert(index);

        int size = readInt();

        for (int i = 0; i < size; i++)
        {
            readObject(); //key
            readObject(); //value
        }
    }",198.0,214.0,5.0,5.0,17.0,8,4,11,4,0,2,3,3,1,0,,0,2,2,1,1,void
2472,352177,descriptor,3,cv.dnn.cuda4dnn.csl.cudnn.ConvolutionDescriptor.descriptor,,src\cuda4dnn\csl\cudnn\convolution.hpp,descriptor,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,11,0,1,1,0,0,,0,0,0,0,0,
2473,434098,phase_test,3,cv.dnn.ocl4dnn.OCL4DNNLRNConfig.phase_test,,src\ocl4dnn\include\ocl4dnn.hpp,phase_test,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2474,434097,lrn_type,3,cv.dnn.ocl4dnn.OCL4DNNLRNConfig.lrn_type,,src\ocl4dnn\include\ocl4dnn.hpp,lrn_type,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2475,384947,setScaleChannels,1,cv.dnn.darknet.setLayersParams.setScaleChannels,void cv.dnn.darknet.setLayersParams.setScaleChannels (int),src\darknet\darknet_io.cpp,"void setScaleChannels(int from)
                {
                    cv::dnn::LayerParams shortcut_param;
                    shortcut_param.type = ""Scale"";

                    darknet::LayerParameter lp;
                    std::string layer_name = cv::format(""scale_channels_%d"", layer_id);
                    lp.layer_name = layer_name;
                    lp.layer_type = shortcut_param.type;
                    lp.layerParams = shortcut_param;
                    lp.bottom_indexes.push_back(fused_layer_names.at(from));
                    lp.bottom_indexes.push_back(last_layer);
                    last_layer = layer_name;
                    net->layers.push_back(lp);

                    layer_id++;
                    fused_layer_names.push_back(last_layer);
                }",588.0,605.0,17.0,17.0,18.0,21,4,22,9,0,8,1,1,0,0,,0,8,2,1,1,void
2476,434101,beta,3,cv.dnn.ocl4dnn.OCL4DNNLRNConfig.beta,,src\ocl4dnn\include\ocl4dnn.hpp,beta,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2477,434099,local_size,3,cv.dnn.ocl4dnn.OCL4DNNLRNConfig.local_size,,src\ocl4dnn\include\ocl4dnn.hpp,local_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2478,434102,k,3,cv.dnn.ocl4dnn.OCL4DNNLRNConfig.k,,src\ocl4dnn\include\ocl4dnn.hpp,k,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2479,434100,alpha,3,cv.dnn.ocl4dnn.OCL4DNNLRNConfig.alpha,,src\ocl4dnn\include\ocl4dnn.hpp,alpha,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2480,434105,channels,3,cv.dnn.ocl4dnn.OCL4DNNLRNConfig.channels,,src\ocl4dnn\include\ocl4dnn.hpp,channels,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2481,434106,height,3,cv.dnn.ocl4dnn.OCL4DNNLRNConfig.height,,src\ocl4dnn\include\ocl4dnn.hpp,height,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2482,434107,width,3,cv.dnn.ocl4dnn.OCL4DNNLRNConfig.width,,src\ocl4dnn\include\ocl4dnn.hpp,width,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2483,434103,norm_by_size,3,cv.dnn.ocl4dnn.OCL4DNNLRNConfig.norm_by_size,,src\ocl4dnn\include\ocl4dnn.hpp,norm_by_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2484,434108,use_half,3,cv.dnn.ocl4dnn.OCL4DNNLRNConfig.use_half,,src\ocl4dnn\include\ocl4dnn.hpp,use_half,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2485,73660,set_has_global_pooling,1,opencv_caffe._Internal.set_has_global_pooling,void opencv_caffe._Internal.set_has_global_pooling (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_global_pooling(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }",23878.0,23880.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
2486,40893,IsInitialized,1,opencv_caffe.LayerParameter.IsInitialized,bool opencv_caffe.LayerParameter.IsInitialized (),misc\caffe\opencv-caffe.pb.cc,"bool LayerParameter::IsInitialized() const {
  if (_internal_has_psroi_pooling_param()) {
    if (!psroi_pooling_param_->IsInitialized()) return false;
  }
  return true;
}",13917.0,13922.0,1.0,1.0,6.0,2,2,1,1,0,1,3,4,1,0,,0,1,0,0,0,bool
2487,434104,batch_size,3,cv.dnn.ocl4dnn.OCL4DNNLRNConfig.batch_size,,src\ocl4dnn\include\ocl4dnn.hpp,batch_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2488,73671,set_has_ceil_mode,1,opencv_caffe._Internal.set_has_ceil_mode,void opencv_caffe._Internal.set_has_ceil_mode (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_ceil_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }",23881.0,23883.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
2489,105824,set_has_nms_thresh,1,opencv_caffe._Internal.set_has_nms_thresh,void opencv_caffe._Internal.set_has_nms_thresh (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_nms_thresh(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }",33220.0,33222.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
2490,40911,InternalSwap,1,opencv_caffe.LayerParameter.InternalSwap,void opencv_caffe.LayerParameter.InternalSwap (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"void LayerParameter::InternalSwap(LayerParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  bottom_.InternalSwap(&other->bottom_);
  top_.InternalSwap(&other->top_);
  loss_weight_.InternalSwap(&other->loss_weight_);
  param_.InternalSwap(&other->param_);
  blobs_.InternalSwap(&other->blobs_);
  include_.InternalSwap(&other->include_);
  exclude_.InternalSwap(&other->exclude_);
  propagate_down_.InternalSwap(&other->propagate_down_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyS...",13924.0,13955.0,1.0,1.0,32.0,69,13,52,21,0,29,1,1,0,0,,0,29,2,1,1,void
2491,237523,InternalSwap,1,opencv_onnx.TensorShapeProto_Dimension.InternalSwap,void opencv_onnx.TensorShapeProto_Dimension.InternalSwap (TensorShapeProto_Dimension*),misc\onnx\opencv-onnx.pb.cc,"void TensorShapeProto_Dimension::InternalSwap(TensorShapeProto_Dimension* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &denotation_, lhs_arena,
      &other->denotation_, rhs_arena
  );
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}",4775.0,4788.0,1.0,1.0,14.0,22,5,20,11,0,8,1,1,0,0,,0,8,2,1,1,void
2492,286683,SharedCtor,1,opencv_tensorflow.OpDeprecation.SharedCtor,void opencv_tensorflow.OpDeprecation.SharedCtor (),misc\tensorflow\op_def.pb.cc,"inline void OpDeprecation::SharedCtor() {
explanation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  explanation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
version_ = 0;
}",1723.0,1729.0,1.0,1.0,7.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,void
2493,450523,parseTorchType,1,cv.dnn.TorchImporter.parseTorchType,"int cv.dnn.TorchImporter.parseTorchType (String,char*,char*)",src\torch\torch_importer.cpp,"static inline int parseTorchType(const String &str, const char *suffix, const char *prefix = ""torch."")
    {
        if (startsWith(str, prefix) && endsWith(str, suffix))
        {
           String typeStr = str.substr(strlen(prefix), str.length() - strlen(prefix) - strlen(suffix));

           if (typeStr == ""Double"")
               return TYPE_DOUBLE;
           else if (typeStr == ""Float"" || typeStr == ""Cuda"")
               return TYPE_FLOAT;
           else if (typeStr == ""Byte"")
               return TYPE_BYTE;
           else if (typeStr == ""Char"")
               return TYPE_CHAR;
           else if (typeStr == ""Short"")
               return TYPE_SHORT;
           else if (typeStr == ""Int"")
               return TYPE_INT;
           else if (typeStr == ""Long"")
               return TYPE_LONG;
           else
               CV_Error(Error::StsNotImplemented, ""Unknown type \"""" + typeStr + ""\"" of torch class \"""" + str + ""\"""");
        }

        return -1;
    }",218.0,243.0,5.0,5.0,26.0,8,6,12,5,2,0,3,4,0,0,,0,0,6,3,3,int
2494,90080,accuracy_param,1,opencv_caffe.V1LayerParameter._Internal.accuracy_param,AccuracyParameter opencv_caffe.V1LayerParameter._Internal.accuracy_param (V1LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::AccuracyParameter&
V1LayerParameter::_Internal::accuracy_param(const V1LayerParameter* msg) {
  return *msg->accuracy_param_;
}",28907.0,28910.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,AccuracyParameter
2495,434144,in_shape,3,cv.dnn.ocl4dnn.OCL4DNNSoftmaxConfig.in_shape,,src\ocl4dnn\include\ocl4dnn.hpp,in_shape,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2496,434146,channels,3,cv.dnn.ocl4dnn.OCL4DNNSoftmaxConfig.channels,,src\ocl4dnn\include\ocl4dnn.hpp,channels,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2497,434147,logsoftmax,3,cv.dnn.ocl4dnn.OCL4DNNSoftmaxConfig.logsoftmax,,src\ocl4dnn\include\ocl4dnn.hpp,logsoftmax,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2498,434148,use_half,3,cv.dnn.ocl4dnn.OCL4DNNSoftmaxConfig.use_half,,src\ocl4dnn\include\ocl4dnn.hpp,use_half,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2499,434145,axis,3,cv.dnn.ocl4dnn.OCL4DNNSoftmaxConfig.axis,,src\ocl4dnn\include\ocl4dnn.hpp,axis,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2500,90090,argmax_param,1,opencv_caffe.V1LayerParameter._Internal.argmax_param,ArgMaxParameter opencv_caffe.V1LayerParameter._Internal.argmax_param (V1LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::ArgMaxParameter&
V1LayerParameter::_Internal::argmax_param(const V1LayerParameter* msg) {
  return *msg->argmax_param_;
}",28911.0,28914.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,ArgMaxParameter
2501,139243,GetCachedSize,1,opencv_caffe.ImageDataParameter.GetCachedSize,int opencv_caffe.ImageDataParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },12191.0,12191.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
2502,122866,_has_bits_,3,opencv_caffe.NetStateRule._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
2503,122867,_cached_size_,3,opencv_caffe.NetStateRule._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2504,122868,stage_,3,opencv_caffe.NetStateRule.stage_,,misc\caffe\opencv-caffe.pb.hpp,stage_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
2505,122869,not_stage_,3,opencv_caffe.NetStateRule.not_stage_,,misc\caffe\opencv-caffe.pb.hpp,not_stage_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
2506,122870,phase_,3,opencv_caffe.NetStateRule.phase_,,misc\caffe\opencv-caffe.pb.hpp,phase_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
2507,122871,min_level_,3,opencv_caffe.NetStateRule.min_level_,,misc\caffe\opencv-caffe.pb.hpp,min_level_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2508,122872,max_level_,3,opencv_caffe.NetStateRule.max_level_,,misc\caffe\opencv-caffe.pb.hpp,max_level_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
2509,90100,concat_param,1,opencv_caffe.V1LayerParameter._Internal.concat_param,ConcatParameter opencv_caffe.V1LayerParameter._Internal.concat_param (V1LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::ConcatParameter&
V1LayerParameter::_Internal::concat_param(const V1LayerParameter* msg) {
  return *msg->concat_param_;
}",28915.0,28918.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,ConcatParameter
2510,286716,SharedDtor,1,opencv_tensorflow.OpDeprecation.SharedDtor,void opencv_tensorflow.OpDeprecation.SharedDtor (),misc\tensorflow\op_def.pb.cc,"inline void OpDeprecation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  explanation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}",1738.0,1741.0,1.0,1.0,4.0,5,3,3,3,0,1,1,1,0,0,,0,1,0,0,0,void
2511,385020,setSAM,1,cv.dnn.darknet.setLayersParams.setSAM,void cv.dnn.darknet.setLayersParams.setSAM (int),src\darknet\darknet_io.cpp,"void setSAM(int from)
                {
                    cv::dnn::LayerParams eltwise_param;
                    eltwise_param.name = ""SAM-name"";
                    eltwise_param.type = ""Eltwise"";

                    eltwise_param.set<std::string>(""operation"", ""prod"");
                    eltwise_param.set<std::string>(""output_channels_mode"", ""same"");

                    darknet::LayerParameter lp;
                    std::string layer_name = cv::format(""sam_%d"", layer_id);
                    lp.layer_name = layer_name;
                    lp.layer_type = eltwise_param.type;
                    lp.layerParams = eltwise_param;
                    lp.bottom_indexes.push_back(last_layer);
                    lp.bottom_indexes.push_back(fused_layer_names.at(from));
                    last_layer = layer_name;
                    net->layers.push_back(lp);

                    layer_id++;
                    fused_layer_names.push_back(last_layer);
                }",607.0,628.0,17.0,17.0,22.0,35,8,27,10,0,8,1,1,0,0,,0,8,2,1,1,void
2512,90110,contrastive_loss_param,1,opencv_caffe.V1LayerParameter._Internal.contrastive_loss_param,ContrastiveLossParameter opencv_caffe.V1LayerParameter._Internal.contrastive_loss_param (V1LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::ContrastiveLossParameter&
V1LayerParameter::_Internal::contrastive_loss_param(const V1LayerParameter* msg) {
  return *msg->contrastive_loss_param_;
}",28919.0,28922.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,ContrastiveLossParameter
2513,270338,InternalSwap,1,opencv_tensorflow.FunctionDef_Node.InternalSwap,void opencv_tensorflow.FunctionDef_Node.InternalSwap (FunctionDef_Node*),misc\tensorflow\function.pb.cc,"void FunctionDef_Node::InternalSwap(FunctionDef_Node* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ret_.InternalSwap(&other->ret_);
  arg_.InternalSwap(&other->arg_);
  dep_.InternalSwap(&other->dep_);
  attr_.InternalSwap(&other->attr_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &op_, lhs_arena,
      &other->op_, rhs_arena
  );
}",794.0,808.0,1.0,1.0,15.0,27,4,22,12,0,10,1,1,0,0,,0,10,2,1,1,void
2514,73735,SharedCtor,1,opencv_caffe.PoolingParameter.SharedCtor,void opencv_caffe.PoolingParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void PoolingParameter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pool_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&global_pooling_) -
    reinterpret_cast<char*>(&pool_)) + sizeof(global_pooling_));
stride_ = 1u;
ceil_mode_ = true;
}",23905.0,23912.0,1.0,1.0,8.0,18,7,6,4,0,6,1,1,0,0,,0,6,0,0,0,void
2515,90120,convolution_param,1,opencv_caffe.V1LayerParameter._Internal.convolution_param,ConvolutionParameter opencv_caffe.V1LayerParameter._Internal.convolution_param (V1LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::ConvolutionParameter&
V1LayerParameter::_Internal::convolution_param(const V1LayerParameter* msg) {
  return *msg->convolution_param_;
}",28923.0,28926.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,ConvolutionParameter
2516,106505,_InternalSerialize,1,opencv_caffe.ProposalParameter._InternalSerialize,"uint8_t opencv_caffe.ProposalParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* ProposalParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.ProposalParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 feat_stride = 1 [default = 16];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_feat_stride(), target);
  }

  // optional uint32 base_size = 2 [default = 16];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_base_size(), target);
  }

  // optional uint32 min_size = 3 [default = 16];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_...",33416.0,33477.0,1.0,1.0,62.0,85,8,96,12,0,1,10,10,0,0,,0,1,4,2,2,uint8_t
2517,90130,data_param,1,opencv_caffe.V1LayerParameter._Internal.data_param,DataParameter opencv_caffe.V1LayerParameter._Internal.data_param (V1LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::DataParameter&
V1LayerParameter::_Internal::data_param(const V1LayerParameter* msg) {
  return *msg->data_param_;
}",28927.0,28930.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,DataParameter
2518,8210,ByteSizeLong,1,opencv_caffe.BlobProtoVector.ByteSizeLong,size_t opencv_caffe.BlobProtoVector.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t BlobProtoVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.BlobProtoVector)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opencv_caffe.BlobProto blobs = 1;
  total_size += 1UL * this->_internal_blobs_size();
  for (const auto& msg : this->blobs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}",4897.0,4913.0,1.0,1.0,17.0,12,7,11,7,0,2,2,2,1,0,,0,2,0,0,0,size_t
2519,237593,GetMetadata,1,opencv_onnx.TensorShapeProto_Dimension.GetMetadata,Metadata opencv_onnx.TensorShapeProto_Dimension.GetMetadata (),misc\onnx\opencv-onnx.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata TensorShapeProto_Dimension::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2donnx_2eproto_getter, &descriptor_table_opencv_2donnx_2eproto_once,
      file_level_metadata_opencv_2donnx_2eproto[8]);
}",4790.0,4794.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
2520,90140,dropout_param,1,opencv_caffe.V1LayerParameter._Internal.dropout_param,DropoutParameter opencv_caffe.V1LayerParameter._Internal.dropout_param (V1LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::DropoutParameter&
V1LayerParameter::_Internal::dropout_param(const V1LayerParameter* msg) {
  return *msg->dropout_param_;
}",28931.0,28934.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,DropoutParameter
2521,286754,SetCachedSize,1,opencv_tensorflow.OpDeprecation.SetCachedSize,void opencv_tensorflow.OpDeprecation.SetCachedSize (int),misc\tensorflow\op_def.pb.cc,"void OpDeprecation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",1749.0,1751.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
2522,90150,dummy_data_param,1,opencv_caffe.V1LayerParameter._Internal.dummy_data_param,DummyDataParameter opencv_caffe.V1LayerParameter._Internal.dummy_data_param (V1LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::DummyDataParameter&
V1LayerParameter::_Internal::dummy_data_param(const V1LayerParameter* msg) {
  return *msg->dummy_data_param_;
}",28935.0,28938.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,DummyDataParameter
2523,352299,get,1,cv.dnn.cuda4dnn.csl.cudnn.ConvolutionAlgorithm.get,cudnnConvolutionFwdAlgo_t cv.dnn.cuda4dnn.csl.cudnn.ConvolutionAlgorithm.get (),src\cuda4dnn\csl\cudnn\convolution.hpp,cudnnConvolutionFwdAlgo_t get() const noexcept { return algo; },328.0,328.0,9.0,71.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,cudnnConvolutionFwdAlgo_t
2524,286764,Clear,1,opencv_tensorflow.OpDeprecation.Clear,void opencv_tensorflow.OpDeprecation.Clear (),misc\tensorflow\op_def.pb.cc,"void OpDeprecation::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_tensorflow.OpDeprecation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  explanation_.ClearToEmpty();
  version_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",1753.0,1762.0,1.0,1.0,10.0,5,3,5,4,0,2,1,1,0,0,,0,2,0,0,0,void
2525,90160,eltwise_param,1,opencv_caffe.V1LayerParameter._Internal.eltwise_param,EltwiseParameter opencv_caffe.V1LayerParameter._Internal.eltwise_param (V1LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::EltwiseParameter&
V1LayerParameter::_Internal::eltwise_param(const V1LayerParameter* msg) {
  return *msg->eltwise_param_;
}",28939.0,28942.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,EltwiseParameter
2526,352305,get_workspace_size,1,cv.dnn.cuda4dnn.csl.cudnn.ConvolutionAlgorithm.get_workspace_size,size_t cv.dnn.cuda4dnn.csl.cudnn.ConvolutionAlgorithm.get_workspace_size (),src\cuda4dnn\csl\cudnn\convolution.hpp,std::size_t get_workspace_size() const noexcept { return workspace_size; },331.0,331.0,9.0,82.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,size_t
2527,352311,algo,3,cv.dnn.cuda4dnn.csl.cudnn.ConvolutionAlgorithm.algo,,src\cuda4dnn\csl\cudnn\convolution.hpp,algo,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2528,352312,workspace_size,3,cv.dnn.cuda4dnn.csl.cudnn.ConvolutionAlgorithm.workspace_size,,src\cuda4dnn\csl\cudnn\convolution.hpp,workspace_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2529,90170,exp_param,1,opencv_caffe.V1LayerParameter._Internal.exp_param,ExpParameter opencv_caffe.V1LayerParameter._Internal.exp_param (V1LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::ExpParameter&
V1LayerParameter::_Internal::exp_param(const V1LayerParameter* msg) {
  return *msg->exp_param_;
}",28943.0,28946.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,ExpParameter
2530,286786,_InternalParse,1,opencv_tensorflow.OpDeprecation._InternalParse,"const char* opencv_tensorflow.OpDeprecation._InternalParse (char*,ANY*)",misc\tensorflow\op_def.pb.cc,"const char* OpDeprecation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string explanation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_explanation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, ""opencv_tensorflow.OpDeprecation.explanation""));
          CHK_(ptr);
        } el...",1764.0,1809.0,1.0,10.0,46.0,36,11,42,9,0,1,11,12,0,0,,0,1,4,2,2,const char*
2531,90180,hdf5_data_param,1,opencv_caffe.V1LayerParameter._Internal.hdf5_data_param,HDF5DataParameter opencv_caffe.V1LayerParameter._Internal.hdf5_data_param (V1LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::HDF5DataParameter&
V1LayerParameter::_Internal::hdf5_data_param(const V1LayerParameter* msg) {
  return *msg->hdf5_data_param_;
}",28947.0,28950.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,HDF5DataParameter
2532,90190,hdf5_output_param,1,opencv_caffe.V1LayerParameter._Internal.hdf5_output_param,HDF5OutputParameter opencv_caffe.V1LayerParameter._Internal.hdf5_output_param (V1LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::HDF5OutputParameter&
V1LayerParameter::_Internal::hdf5_output_param(const V1LayerParameter* msg) {
  return *msg->hdf5_output_param_;
}",28951.0,28954.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,HDF5OutputParameter
2533,450641,parseTensorType,1,cv.dnn.TorchImporter.parseTensorType,int cv.dnn.TorchImporter.parseTensorType (String),src\torch\torch_importer.cpp,"static int parseTensorType(const String &className)
    {
        return parseTorchType(className, ""Tensor"");
    }",245.0,248.0,5.0,5.0,4.0,0,0,1,1,1,1,1,1,0,1,,0,0,2,1,1,int
2534,270417,GetMetadata,1,opencv_tensorflow.FunctionDef_Node.GetMetadata,Metadata opencv_tensorflow.FunctionDef_Node.GetMetadata (),misc\tensorflow\function.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata FunctionDef_Node::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_function_2eproto_getter, &descriptor_table_function_2eproto_once,
      file_level_metadata_function_2eproto[2]);
}",810.0,814.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
2535,90200,hinge_loss_param,1,opencv_caffe.V1LayerParameter._Internal.hinge_loss_param,HingeLossParameter opencv_caffe.V1LayerParameter._Internal.hinge_loss_param (V1LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::HingeLossParameter&
V1LayerParameter::_Internal::hinge_loss_param(const V1LayerParameter* msg) {
  return *msg->hinge_loss_param_;
}",28955.0,28958.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,HingeLossParameter
2536,450650,parseStorageType,1,cv.dnn.TorchImporter.parseStorageType,int cv.dnn.TorchImporter.parseStorageType (String),src\torch\torch_importer.cpp,"static int parseStorageType(const String &className)
    {
        return parseTorchType(className, ""Storage"");
    }",250.0,253.0,5.0,5.0,4.0,0,0,1,1,1,1,1,1,0,1,,0,0,2,1,1,int
2537,73820,SetCachedSize,1,opencv_caffe.PoolingParameter.SetCachedSize,void opencv_caffe.PoolingParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void PoolingParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",23931.0,23933.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
2538,8289,MergeFrom,1,opencv_caffe.BlobProtoVector.MergeFrom,void opencv_caffe.BlobProtoVector.MergeFrom (BlobProtoVector),misc\caffe\opencv-caffe.pb.cc,"void BlobProtoVector::MergeFrom(const BlobProtoVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.BlobProtoVector)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  blobs_.MergeFrom(from.blobs_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",4928.0,4936.0,1.0,1.0,9.0,10,6,8,5,0,2,1,1,0,0,,0,2,2,1,1,void
2539,90210,image_data_param,1,opencv_caffe.V1LayerParameter._Internal.image_data_param,ImageDataParameter opencv_caffe.V1LayerParameter._Internal.image_data_param (V1LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::ImageDataParameter&
V1LayerParameter::_Internal::image_data_param(const V1LayerParameter* msg) {
  return *msg->image_data_param_;
}",28959.0,28962.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,ImageDataParameter
2540,450659,readTorchStorage,1,cv.dnn.TorchImporter.readTorchStorage,"void cv.dnn.TorchImporter.readTorchStorage (int,int)",src\torch\torch_importer.cpp,"void readTorchStorage(int index, int type = -1)
    {
        long size = readLong();
        Mat storageMat;

        switch (type)
        {
        case TYPE_FLOAT:
            storageMat.create(1, size, CV_32F);
            THFile_readFloatRaw(file, (float*)storageMat.data, size);
            break;
        case TYPE_DOUBLE:
            storageMat.create(1, size, CV_64F);
            THFile_readDoubleRaw(file, (double*)storageMat.data, size);
            break;
        case TYPE_CHAR:
            storageMat.create(1, size, CV_8S);
            THFile_readByteRaw(file, (uchar*)storageMat.data, size);
            break;
        case TYPE_BYTE:
            storageMat.create(1, size, CV_8U);
            THFile_readByteRaw(file, (uchar*)storageMat.data, size);
            break;
        case TYPE_SHORT:
            storageMat.create(1, size, CV_16S);
            THFile_readShortRaw(file, (short*)storageMat.data, size);
            break;
        case TYPE_INT:
            storageMat.c...",255.0,302.0,5.0,5.0,48.0,30,5,61,23,0,8,11,4,0,0,,0,8,4,2,2,void
2541,385122,setUpsample,1,cv.dnn.darknet.setLayersParams.setUpsample,void cv.dnn.darknet.setLayersParams.setUpsample (int),src\darknet\darknet_io.cpp,"void setUpsample(int scaleFactor)
                {
                    cv::dnn::LayerParams param;
                    param.name = ""Upsample-name"";
                    param.type = ""Resize"";

                    param.set<int>(""zoom_factor"", scaleFactor);
                    param.set<String>(""interpolation"", ""nearest"");

                    darknet::LayerParameter lp;
                    std::string layer_name = cv::format(""upsample_%d"", layer_id);
                    lp.layer_name = layer_name;
                    lp.layer_type = param.type;
                    lp.layerParams = param;
                    lp.bottom_indexes.push_back(last_layer);
                    last_layer = layer_name;
                    net->layers.push_back(lp);

                    layer_id++;
                    fused_layer_names.push_back(last_layer);
                }",630.0,650.0,17.0,17.0,21.0,26,8,24,10,0,7,1,1,0,0,,0,7,2,1,1,void
2542,122978,descriptor,1,opencv_caffe.ParamSpec.descriptor,Descriptor opencv_caffe.ParamSpec.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",5410.0,5412.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
2543,73830,Clear,1,opencv_caffe.PoolingParameter.Clear,void opencv_caffe.PoolingParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void PoolingParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.PoolingParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&pool_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pad_h_) -
        reinterpret_cast<char*>(&pool_)) + sizeof(pad_h_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&pad_w_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&global_pooling_) -
        reinterpret_cast<char*>(&pad_w_)) + sizeof(global_pooling_));
    stride_ = 1u;
    ceil_mode_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",23935.0,23956.0,1.0,1.0,22.0,30,9,18,9,0,12,3,3,0,0,,0,12,0,0,0,void
2544,122984,GetDescriptor,1,opencv_caffe.ParamSpec.GetDescriptor,Descriptor opencv_caffe.ParamSpec.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",5413.0,5415.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
2545,270441,signature,1,opencv_tensorflow.FunctionDef._Internal.signature,OpDef opencv_tensorflow.FunctionDef._Internal.signature (FunctionDef*),misc\tensorflow\function.pb.cc,"const ::opencv_tensorflow::OpDef&
FunctionDef::_Internal::signature(const FunctionDef* msg) {
  return *msg->signature_;
}",823.0,826.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,OpDef
2546,90220,infogain_loss_param,1,opencv_caffe.V1LayerParameter._Internal.infogain_loss_param,InfogainLossParameter opencv_caffe.V1LayerParameter._Internal.infogain_loss_param (V1LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::InfogainLossParameter&
V1LayerParameter::_Internal::infogain_loss_param(const V1LayerParameter* msg) {
  return *msg->infogain_loss_param_;
}",28963.0,28966.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,InfogainLossParameter
2547,270451,clear_signature,1,opencv_tensorflow.FunctionDef.clear_signature,void opencv_tensorflow.FunctionDef.clear_signature (),misc\tensorflow\function.pb.cc,"void FunctionDef::clear_signature() {
  if (GetArenaForAllocation() == nullptr && signature_ != nullptr) {
    delete signature_;
  }
  signature_ = nullptr;
}",827.0,832.0,1.0,1.0,6.0,5,5,3,1,0,3,2,2,1,0,,0,3,0,0,0,void
2548,122995,GetReflection,1,opencv_caffe.ParamSpec.GetReflection,Reflection opencv_caffe.ParamSpec.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",5416.0,5418.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
2549,90230,inner_product_param,1,opencv_caffe.V1LayerParameter._Internal.inner_product_param,InnerProductParameter opencv_caffe.V1LayerParameter._Internal.inner_product_param (V1LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::InnerProductParameter&
V1LayerParameter::_Internal::inner_product_param(const V1LayerParameter* msg) {
  return *msg->inner_product_param_;
}",28967.0,28970.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,InnerProductParameter
2550,237687,SetCachedSize,1,opencv_onnx.TensorShapeProto.SetCachedSize,void opencv_onnx.TensorShapeProto.SetCachedSize (int),misc\onnx\opencv-onnx.pb.cc,"void TensorShapeProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",4839.0,4841.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
2551,123006,default_instance,1,opencv_caffe.ParamSpec.default_instance,ParamSpec opencv_caffe.ParamSpec.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const ParamSpec& default_instance() {
    return *internal_default_instance();
  }",5419.0,5421.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,ParamSpec
2552,90240,lrn_param,1,opencv_caffe.V1LayerParameter._Internal.lrn_param,LRNParameter opencv_caffe.V1LayerParameter._Internal.lrn_param (V1LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::LRNParameter&
V1LayerParameter::_Internal::lrn_param(const V1LayerParameter* msg) {
  return *msg->lrn_param_;
}",28971.0,28974.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,LRNParameter
2553,237697,Clear,1,opencv_onnx.TensorShapeProto.Clear,void opencv_onnx.TensorShapeProto.Clear (),misc\onnx\opencv-onnx.pb.cc,"void TensorShapeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_onnx.TensorShapeProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dim_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",4843.0,4851.0,1.0,1.0,9.0,4,3,4,3,0,1,1,1,0,0,,0,1,0,0,0,void
2554,123013,internal_default_instance,1,opencv_caffe.ParamSpec.internal_default_instance,ParamSpec opencv_caffe.ParamSpec.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const ParamSpec* internal_default_instance() {
    return reinterpret_cast<const ParamSpec*>(
               &_ParamSpec_default_instance_);
  }",5422.0,5425.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,ParamSpec
2555,41094,GetMetadata,1,opencv_caffe.LayerParameter.GetMetadata,Metadata opencv_caffe.LayerParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata LayerParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[15]);
}",13957.0,13961.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
2556,90250,memory_data_param,1,opencv_caffe.V1LayerParameter._Internal.memory_data_param,MemoryDataParameter opencv_caffe.V1LayerParameter._Internal.memory_data_param (V1LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::MemoryDataParameter&
V1LayerParameter::_Internal::memory_data_param(const V1LayerParameter* msg) {
  return *msg->memory_data_param_;
}",28975.0,28978.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,MemoryDataParameter
2557,90260,mvn_param,1,opencv_caffe.V1LayerParameter._Internal.mvn_param,MVNParameter opencv_caffe.V1LayerParameter._Internal.mvn_param (V1LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::MVNParameter&
V1LayerParameter::_Internal::mvn_param(const V1LayerParameter* msg) {
  return *msg->mvn_param_;
}",28979.0,28982.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,MVNParameter
2558,8344,InternalSwap,1,opencv_caffe.BlobProtoVector.InternalSwap,void opencv_caffe.BlobProtoVector.InternalSwap (BlobProtoVector*),misc\caffe\opencv-caffe.pb.cc,"void BlobProtoVector::InternalSwap(BlobProtoVector* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  blobs_.InternalSwap(&other->blobs_);
}",4949.0,4953.0,1.0,1.0,5.0,6,3,4,3,0,2,1,1,0,0,,0,2,2,1,1,void
2559,41114,set_has_scale,1,opencv_caffe._Internal.set_has_scale,void opencv_caffe._Internal.set_has_scale (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }",30852.0,30854.0,3.0,3.0,3.0,2,2,1,1,7,0,1,1,0,0,,0,0,2,1,1,void
2560,90270,pooling_param,1,opencv_caffe.V1LayerParameter._Internal.pooling_param,PoolingParameter opencv_caffe.V1LayerParameter._Internal.pooling_param (V1LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::PoolingParameter&
V1LayerParameter::_Internal::pooling_param(const V1LayerParameter* msg) {
  return *msg->pooling_param_;
}",28983.0,28986.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,PoolingParameter
2561,41125,set_has_mirror,1,opencv_caffe._Internal.set_has_mirror,void opencv_caffe._Internal.set_has_mirror (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_mirror(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }",30864.0,30866.0,3.0,3.0,3.0,2,2,1,1,4,0,1,1,0,0,,0,0,2,1,1,void
2562,90280,power_param,1,opencv_caffe.V1LayerParameter._Internal.power_param,PowerParameter opencv_caffe.V1LayerParameter._Internal.power_param (V1LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::PowerParameter&
V1LayerParameter::_Internal::power_param(const V1LayerParameter* msg) {
  return *msg->power_param_;
}",28987.0,28990.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,PowerParameter
2563,8365,GetMetadata,1,opencv_caffe.BlobProtoVector.GetMetadata,Metadata opencv_caffe.BlobProtoVector.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata BlobProtoVector::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[2]);
}",4955.0,4959.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
2564,41136,set_has_crop_size,1,opencv_caffe._Internal.set_has_crop_size,void opencv_caffe._Internal.set_has_crop_size (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_crop_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }",27850.0,27852.0,3.0,3.0,3.0,2,2,1,1,4,0,1,1,0,0,,0,0,2,1,1,void
2565,90290,relu_param,1,opencv_caffe.V1LayerParameter._Internal.relu_param,ReLUParameter opencv_caffe.V1LayerParameter._Internal.relu_param (V1LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::ReLUParameter&
V1LayerParameter::_Internal::relu_param(const V1LayerParameter* msg) {
  return *msg->relu_param_;
}",28991.0,28994.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,ReLUParameter
2566,270517,SharedCtor,1,opencv_tensorflow.FunctionDef.SharedCtor,void opencv_tensorflow.FunctionDef.SharedCtor (),misc\tensorflow\function.pb.cc,"inline void FunctionDef::SharedCtor() {
signature_ = nullptr;
}",855.0,857.0,1.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,void
2567,73912,_InternalParse,1,opencv_caffe.PoolingParameter._InternalParse,"const char* opencv_caffe.PoolingParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* PoolingParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .opencv_caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::opencv_caffe::PoolingParameter_PoolMethod_IsValid(val))) {
            _internal_set_pool(static_cast<::opencv_caffe::PoolingParameter_PoolMethod>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        contin...",23958.0,24112.0,1.0,10.0,155.0,139,12,144,22,0,25,35,53,2,13,,0,14,4,2,2,const char*
2568,90300,sigmoid_param,1,opencv_caffe.V1LayerParameter._Internal.sigmoid_param,SigmoidParameter opencv_caffe.V1LayerParameter._Internal.sigmoid_param (V1LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::SigmoidParameter&
V1LayerParameter::_Internal::sigmoid_param(const V1LayerParameter* msg) {
  return *msg->sigmoid_param_;
}",28995.0,28998.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,SigmoidParameter
2569,90310,softmax_param,1,opencv_caffe.V1LayerParameter._Internal.softmax_param,SoftmaxParameter opencv_caffe.V1LayerParameter._Internal.softmax_param (V1LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::SoftmaxParameter&
V1LayerParameter::_Internal::softmax_param(const V1LayerParameter* msg) {
  return *msg->softmax_param_;
}",28999.0,29002.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,SoftmaxParameter
2570,41158,set_has_force_color,1,opencv_caffe._Internal.set_has_force_color,void opencv_caffe._Internal.set_has_force_color (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_force_color(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }",13980.0,13982.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
2571,270539,SharedDtor,1,opencv_tensorflow.FunctionDef.SharedDtor,void opencv_tensorflow.FunctionDef.SharedDtor (),misc\tensorflow\function.pb.cc,"inline void FunctionDef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete signature_;
}",866.0,869.0,1.0,1.0,4.0,3,3,1,1,0,2,2,2,1,0,,0,2,0,0,0,void
2572,90320,slice_param,1,opencv_caffe.V1LayerParameter._Internal.slice_param,SliceParameter opencv_caffe.V1LayerParameter._Internal.slice_param (V1LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::SliceParameter&
V1LayerParameter::_Internal::slice_param(const V1LayerParameter* msg) {
  return *msg->slice_param_;
}",29003.0,29006.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,SliceParameter
2573,41169,set_has_force_gray,1,opencv_caffe._Internal.set_has_force_gray,void opencv_caffe._Internal.set_has_force_gray (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_force_gray(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }",13983.0,13985.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
2574,90330,tanh_param,1,opencv_caffe.V1LayerParameter._Internal.tanh_param,TanHParameter opencv_caffe.V1LayerParameter._Internal.tanh_param (V1LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::TanHParameter&
V1LayerParameter::_Internal::tanh_param(const V1LayerParameter* msg) {
  return *msg->tanh_param_;
}",29007.0,29010.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,TanHParameter
2575,24800,MergeFrom,1,opencv_caffe.SolverParameter.MergeFrom,void opencv_caffe.SolverParameter.MergeFrom (SolverParameter),misc\caffe\opencv-caffe.pb.cc,"void SolverParameter::MergeFrom(const SolverParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.SolverParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  test_net_.MergeFrom(from.test_net_);
  test_iter_.MergeFrom(from.test_iter_);
  test_net_param_.MergeFrom(from.test_net_param_);
  test_state_.MergeFrom(from.test_state_);
  stepvalue_.MergeFrom(from.stepvalue_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_train_net(from._internal_train_net());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_lr_policy(from._internal_lr_policy());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_snapshot_prefix(from._internal_snapshot_prefix());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_net(from._internal_net());
    }
    if (cached_has_bits & 0x000000...",9436.0,9569.0,1.0,1.0,134.0,132,9,129,36,0,71,41,76,0,3,,0,68,2,1,1,void
2576,90340,threshold_param,1,opencv_caffe.V1LayerParameter._Internal.threshold_param,ThresholdParameter opencv_caffe.V1LayerParameter._Internal.threshold_param (V1LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::ThresholdParameter&
V1LayerParameter::_Internal::threshold_param(const V1LayerParameter* msg) {
  return *msg->threshold_param_;
}",29011.0,29014.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,ThresholdParameter
2577,270573,SetCachedSize,1,opencv_tensorflow.FunctionDef.SetCachedSize,void opencv_tensorflow.FunctionDef.SetCachedSize (int),misc\tensorflow\function.pb.cc,"void FunctionDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",877.0,879.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
2578,90350,window_data_param,1,opencv_caffe.V1LayerParameter._Internal.window_data_param,WindowDataParameter opencv_caffe.V1LayerParameter._Internal.window_data_param (V1LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::WindowDataParameter&
V1LayerParameter::_Internal::window_data_param(const V1LayerParameter* msg) {
  return *msg->window_data_param_;
}",29015.0,29018.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,WindowDataParameter
2579,270583,Clear,1,opencv_tensorflow.FunctionDef.Clear,void opencv_tensorflow.FunctionDef.Clear (),misc\tensorflow\function.pb.cc,"void FunctionDef::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_tensorflow.FunctionDef)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_.Clear();
  if (GetArenaForAllocation() == nullptr && signature_ != nullptr) {
    delete signature_;
  }
  signature_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",881.0,893.0,1.0,1.0,13.0,9,7,7,4,0,4,2,2,1,0,,0,4,0,0,0,void
2580,90360,transform_param,1,opencv_caffe.V1LayerParameter._Internal.transform_param,TransformationParameter opencv_caffe.V1LayerParameter._Internal.transform_param (V1LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::TransformationParameter&
V1LayerParameter::_Internal::transform_param(const V1LayerParameter* msg) {
  return *msg->transform_param_;
}",29019.0,29022.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,TransformationParameter
2581,385279,ReadDarknetFromCfgStream,1,cv.dnn.darknet.ReadDarknetFromCfgStream,"bool cv.dnn.darknet.ReadDarknetFromCfgStream (ANY,NetParameter*)",src\darknet\darknet_io.cpp,"bool ReadDarknetFromCfgStream(std::istream &ifile, NetParameter *net)
            {
                bool read_net = false;
                int layers_counter = -1;
                for (std::string line; std::getline(ifile, line);) {
                    line = escapeString(line);
                    if (line.empty()) continue;
                    switch (line[0]) {
                    case '\0': break;
                    case '#': break;
                    case ';': break;
                    case '[':
                        if (line == ""[net]"") {
                            read_net = true;
                        }
                        else {
                            // read section
                            read_net = false;
                            ++layers_counter;
                            const size_t layer_type_size = line.find(']') - 1;
                            CV_Assert(layer_type_size < line.size());
                            std::string layer_type = l...",677.0,971.0,13.0,13.0,295.0,149,19,135,30,0,18,19,31,1,0,,0,18,4,2,2,bool
2582,90370,loss_param,1,opencv_caffe.V1LayerParameter._Internal.loss_param,LossParameter opencv_caffe.V1LayerParameter._Internal.loss_param (V1LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::LossParameter&
V1LayerParameter::_Internal::loss_param(const V1LayerParameter* msg) {
  return *msg->loss_param_;
}",29023.0,29026.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,LossParameter
2583,123138,GetCachedSize,1,opencv_caffe.ParamSpec.GetCachedSize,int opencv_caffe.ParamSpec.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },5470.0,5470.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
2584,8459,SetCachedSize,1,opencv_caffe.PermuteParameter.SetCachedSize,void opencv_caffe.PermuteParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void PermuteParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",5004.0,5006.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
2585,90380,layer,1,opencv_caffe.V1LayerParameter._Internal.layer,V0LayerParameter opencv_caffe.V1LayerParameter._Internal.layer (V1LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::V0LayerParameter&
V1LayerParameter::_Internal::layer(const V1LayerParameter* msg) {
  return *msg->layer_;
}",29027.0,29030.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,V0LayerParameter
2586,8469,Clear,1,opencv_caffe.PermuteParameter.Clear,void opencv_caffe.PermuteParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void PermuteParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.PermuteParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  order_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",5008.0,5016.0,1.0,1.0,9.0,4,3,4,3,0,1,1,1,0,0,,0,1,0,0,0,void
2587,450843,readTorchTable,1,cv.dnn.TorchImporter.readTorchTable,"void cv.dnn.TorchImporter.readTorchTable (Dict,TensorsMap)",src\torch\torch_importer.cpp,"void readTorchTable(Dict &scalarParams, TensorsMap &tensorParams)
    {
        int luaType = readInt();
        int index = readInt();

        CV_Assert(luaType == TYPE_TABLE && readedIndexes.count(index) == 0);
        readedIndexes.insert(index);

        long fpos;
        int numPairs = readInt();

        for (int i = 0; i < numPairs; i++)
        {
            fpos = THFile_position(file);
            int ktype = readInt();

            if (ktype != TYPE_STRING) //skip non-string fields
            {
                THFile_seek(file, fpos);
                readObject(); //key
                readObject(); //value
                continue;
            }

            String key = readString();
            if (dbgPrint)
                std::cout << i << ""th key: "" << key << ""\n"";

            fpos = THFile_position(file);
            int vtype = readInt();

            if (vtype == TYPE_TORCH)
            {
                int index = readInt();
                int numModules =...",304.0,393.0,5.0,5.0,90.0,44,9,52,21,0,9,9,14,1,0,,0,9,4,2,2,void
2588,41261,SharedCtor,1,opencv_caffe.TransformationParameter.SharedCtor,void opencv_caffe.TransformationParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void TransformationParameter::SharedCtor() {
mean_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mean_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&crop_size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&force_gray_) -
    reinterpret_cast<char*>(&crop_size_)) + sizeof(force_gray_));
scale_ = 1;
}",14017.0,14027.0,1.0,1.0,11.0,21,7,8,6,0,6,1,1,0,0,,0,6,0,0,0,void
2589,106811,ByteSizeLong,1,opencv_caffe.ProposalParameter.ByteSizeLong,size_t opencv_caffe.ProposalParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t ProposalParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.ProposalParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float ratio = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ratio_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ratio_size());
    total_size += data_size;
  }

  // repeated float scale = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_scale_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_scale_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 feat_s...",33479.0,33539.0,1.0,1.0,61.0,62,10,51,9,0,2,8,14,0,0,,0,2,0,0,0,size_t
2590,368978,forward,1,cv.dnn.cuda4dnn.ConvolutionOp.forward,"void cv.dnn.cuda4dnn.ConvolutionOp.forward (ANY,ANY,ANY)",src\cuda4dnn\primitives\convolution.hpp,"void forward(
            const std::vector<cv::Ptr<BackendWrapper>>& inputs,
            const std::vector<cv::Ptr<BackendWrapper>>& outputs,
            csl::Workspace& workspace) override
        {
            /* input[0] = conv input, input[1] = bias (from fused eltwise layer) */
            CV_Assert(inputs.size() == 1 || inputs.size() == 2);
            CV_Assert(outputs.size() == 1);

            csl::WorkspaceAllocator allocator(workspace);

            auto input_wrapper = inputs[0].dynamicCast<wrapper_type>();
            auto input = input_wrapper->getView();

            if (!transformed_shape.empty())
            {
                auto& shape = transformed_shape;
                auto transformed_input = allocator.get_tensor_span<T>(std::begin(shape), std::end(shape));
                inputTransformer.transform(input, transformed_input);
                input = transformed_input;
            }

            auto conv_scratchpad = allocator.get_instance();

            aut...",288.0,580.0,9.0,9.0,293.0,82,8,89,29,0,25,10,19,11,0,,0,25,6,3,3,void
2591,41327,SharedDtor,1,opencv_caffe.TransformationParameter.SharedDtor,void opencv_caffe.TransformationParameter.SharedDtor (),misc\caffe\opencv-caffe.pb.cc,"inline void TransformationParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  mean_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}",14036.0,14039.0,1.0,1.0,4.0,5,3,3,3,0,1,1,1,0,0,,0,1,0,0,0,void
2592,287093,ByteSizeLong,1,opencv_tensorflow.OpDeprecation.ByteSizeLong,size_t opencv_tensorflow.OpDeprecation.ByteSizeLong (),misc\tensorflow\op_def.pb.cc,"size_t OpDeprecation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_tensorflow.OpDeprecation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string explanation = 2;
  if (!this->_internal_explanation().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_explanation());
  }

  // int32 version = 1;
  if (this->_internal_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}",1841.0,1862.0,1.0,1.0,22.0,20,9,13,6,0,1,3,3,0,0,,0,1,0,0,0,size_t
2593,237955,ByteSizeLong,1,opencv_onnx.TensorShapeProto.ByteSizeLong,size_t opencv_onnx.TensorShapeProto.ByteSizeLong (),misc\onnx\opencv-onnx.pb.cc,"size_t TensorShapeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_onnx.TensorShapeProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opencv_onnx.TensorShapeProto.Dimension dim = 1;
  total_size += 1UL * this->_internal_dim_size();
  for (const auto& msg : this->dim_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}",4917.0,4933.0,1.0,1.0,17.0,12,7,11,7,0,2,2,2,1,0,,0,2,0,0,0,size_t
2594,41365,SetCachedSize,1,opencv_caffe.TransformationParameter.SetCachedSize,void opencv_caffe.TransformationParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void TransformationParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",14047.0,14049.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
2595,41375,Clear,1,opencv_caffe.TransformationParameter.Clear,void opencv_caffe.TransformationParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void TransformationParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.TransformationParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mean_value_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    mean_file_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&crop_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&force_gray_) -
        reinterpret_cast<char*>(&crop_size_)) + sizeof(force_gray_));
    scale_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",14051.0,14070.0,1.0,1.0,20.0,21,9,15,8,0,9,3,3,0,0,,0,9,0,0,0,void
2596,221637,GetEnumDescriptor,1,GetEnumDescriptor<opencv_caffe.PriorBoxParameter_CodeType>,EnumDescriptor GetEnumDescriptor<opencv_caffe.PriorBoxParameter_CodeType><> (),misc\caffe\opencv-caffe.pb.hpp,"inline const EnumDescriptor* GetEnumDescriptor< ::opencv_caffe::PriorBoxParameter_CodeType>() {
  return ::opencv_caffe::PriorBoxParameter_CodeType_descriptor();
}",44806.0,44808.0,1.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,0,0,0,0,EnumDescriptor
2597,270793,_InternalSerialize,1,opencv_tensorflow.FunctionDef._InternalSerialize,"uint8_t opencv_tensorflow.FunctionDef._InternalSerialize (uint8_t*,ANY*)",misc\tensorflow\function.pb.cc,"uint8_t* FunctionDef::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_tensorflow.FunctionDef)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opencv_tensorflow.OpDef signature = 1;
  if (this->_internal_has_signature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::signature(this), target, stream);
  }

  // repeated .opencv_tensorflow.FunctionDef.Node node = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_node_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_node(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::...",945.0,973.0,1.0,1.0,29.0,33,6,38,12,0,1,4,4,0,1,,0,1,4,2,2,uint8_t
2598,221647,GetEnumDescriptor,1,GetEnumDescriptor<opencv_caffe.FillerParameter_VarianceNorm>,EnumDescriptor GetEnumDescriptor<opencv_caffe.FillerParameter_VarianceNorm><> (),misc\caffe\opencv-caffe.pb.hpp,"inline const EnumDescriptor* GetEnumDescriptor< ::opencv_caffe::FillerParameter_VarianceNorm>() {
  return ::opencv_caffe::FillerParameter_VarianceNorm_descriptor();
}",44811.0,44813.0,1.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,0,0,0,0,EnumDescriptor
2599,238034,MergeFrom,1,opencv_onnx.TensorShapeProto.MergeFrom,void opencv_onnx.TensorShapeProto.MergeFrom (TensorShapeProto),misc\onnx\opencv-onnx.pb.cc,"void TensorShapeProto::MergeFrom(const TensorShapeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_onnx.TensorShapeProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  dim_.MergeFrom(from.dim_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",4948.0,4956.0,1.0,1.0,9.0,10,6,8,5,1,2,1,1,0,0,,0,2,2,1,1,void
2600,221657,GetEnumDescriptor,1,GetEnumDescriptor<opencv_caffe.SolverParameter_SnapshotFormat>,EnumDescriptor GetEnumDescriptor<opencv_caffe.SolverParameter_SnapshotFormat><> (),misc\caffe\opencv-caffe.pb.hpp,"inline const EnumDescriptor* GetEnumDescriptor< ::opencv_caffe::SolverParameter_SnapshotFormat>() {
  return ::opencv_caffe::SolverParameter_SnapshotFormat_descriptor();
}",44816.0,44818.0,1.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,0,0,0,0,EnumDescriptor
2601,287195,MergeFrom,1,opencv_tensorflow.OpDeprecation.MergeFrom,void opencv_tensorflow.OpDeprecation.MergeFrom (OpDeprecation),misc\tensorflow\op_def.pb.cc,"void OpDeprecation::MergeFrom(const OpDeprecation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_tensorflow.OpDeprecation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_explanation().empty()) {
    _internal_set_explanation(from._internal_explanation());
  }
  if (from._internal_version() != 0) {
    _internal_set_version(from._internal_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",1877.0,1890.0,1.0,1.0,14.0,15,8,10,4,1,0,3,3,0,0,,0,0,2,1,1,void
2602,319965,fbb_,3,opencv_tflite.OperatorBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,11,0,1,1,0,0,,0,0,0,0,0,
2603,319966,start_,3,opencv_tflite.OperatorBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2604,319967,add_opcode_index,1,opencv_tflite.OperatorBuilder.add_opcode_index,void opencv_tflite.OperatorBuilder.add_opcode_index (uint32_t),misc\tflite\schema_generated.hpp,"void add_opcode_index(uint32_t opcode_index) {
    fbb_.AddElement<uint32_t>(Operator::VT_OPCODE_INDEX, opcode_index, 0);
  }",9299.0,9301.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
2605,41441,_InternalParse,1,opencv_caffe.TransformationParameter._InternalParse,"const char* opencv_caffe.TransformationParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* TransformationParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float scale = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_scale(&has_bits);
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool mirror = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mirror(&has_bits);
          mirror_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
  ...",14072.0,14174.0,1.0,10.0,103.0,90,17,96,16,0,11,24,36,0,5,,0,6,4,2,2,const char*
2606,221667,GetEnumDescriptor,1,GetEnumDescriptor<opencv_caffe.SolverParameter_SolverMode>,EnumDescriptor GetEnumDescriptor<opencv_caffe.SolverParameter_SolverMode><> (),misc\caffe\opencv-caffe.pb.hpp,"inline const EnumDescriptor* GetEnumDescriptor< ::opencv_caffe::SolverParameter_SolverMode>() {
  return ::opencv_caffe::SolverParameter_SolverMode_descriptor();
}",44821.0,44823.0,1.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,0,0,0,0,EnumDescriptor
2607,154779,hdf5_data_param_,3,opencv_caffe.V1LayerParameter.hdf5_data_param_,,misc\caffe\opencv-caffe.pb.hpp,* hdf5_data_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2608,221677,GetEnumDescriptor,1,GetEnumDescriptor<opencv_caffe.SolverParameter_SolverType>,EnumDescriptor GetEnumDescriptor<opencv_caffe.SolverParameter_SolverType><> (),misc\caffe\opencv-caffe.pb.hpp,"inline const EnumDescriptor* GetEnumDescriptor< ::opencv_caffe::SolverParameter_SolverType>() {
  return ::opencv_caffe::SolverParameter_SolverType_descriptor();
}",44826.0,44828.0,1.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,0,0,0,0,EnumDescriptor
2609,319985,add_inputs,1,opencv_tflite.OperatorBuilder.add_inputs,void opencv_tflite.OperatorBuilder.add_inputs (ANY),misc\tflite\schema_generated.hpp,"void add_inputs(::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> inputs) {
    fbb_.AddOffset(Operator::VT_INPUTS, inputs);
  }",9302.0,9304.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
2610,139764,_has_bits_,3,opencv_caffe.ImageDataParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
2611,139765,_cached_size_,3,opencv_caffe.ImageDataParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2612,139766,source_,3,opencv_caffe.ImageDataParameter.source_,,misc\caffe\opencv-caffe.pb.hpp,source_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2613,221687,GetEnumDescriptor,1,GetEnumDescriptor<opencv_caffe.ParamSpec_DimCheckMode>,EnumDescriptor GetEnumDescriptor<opencv_caffe.ParamSpec_DimCheckMode><> (),misc\caffe\opencv-caffe.pb.hpp,"inline const EnumDescriptor* GetEnumDescriptor< ::opencv_caffe::ParamSpec_DimCheckMode>() {
  return ::opencv_caffe::ParamSpec_DimCheckMode_descriptor();
}",44831.0,44833.0,1.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,0,0,0,0,EnumDescriptor
2614,139768,root_folder_,3,opencv_caffe.ImageDataParameter.root_folder_,,misc\caffe\opencv-caffe.pb.hpp,root_folder_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2615,139769,crop_size_,3,opencv_caffe.ImageDataParameter.crop_size_,,misc\caffe\opencv-caffe.pb.hpp,crop_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
2616,139767,mean_file_,3,opencv_caffe.ImageDataParameter.mean_file_,,misc\caffe\opencv-caffe.pb.hpp,mean_file_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2617,139771,shuffle_,3,opencv_caffe.ImageDataParameter.shuffle_,,misc\caffe\opencv-caffe.pb.hpp,shuffle_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2618,139772,mirror_,3,opencv_caffe.ImageDataParameter.mirror_,,misc\caffe\opencv-caffe.pb.hpp,mirror_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2619,139773,new_height_,3,opencv_caffe.ImageDataParameter.new_height_,,misc\caffe\opencv-caffe.pb.hpp,new_height_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2620,319998,add_outputs,1,opencv_tflite.OperatorBuilder.add_outputs,void opencv_tflite.OperatorBuilder.add_outputs (ANY),misc\tflite\schema_generated.hpp,"void add_outputs(::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> outputs) {
    fbb_.AddOffset(Operator::VT_OUTPUTS, outputs);
  }",9305.0,9307.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
2621,139775,is_color_,3,opencv_caffe.ImageDataParameter.is_color_,,misc\caffe\opencv-caffe.pb.hpp,is_color_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
2622,139776,scale_,3,opencv_caffe.ImageDataParameter.scale_,,misc\caffe\opencv-caffe.pb.hpp,scale_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
2623,139777,batch_size_,3,opencv_caffe.ImageDataParameter.batch_size_,,misc\caffe\opencv-caffe.pb.hpp,batch_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
2624,139774,new_width_,3,opencv_caffe.ImageDataParameter.new_width_,,misc\caffe\opencv-caffe.pb.hpp,new_width_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
2625,221697,GetEnumDescriptor,1,GetEnumDescriptor<opencv_caffe.LossParameter_NormalizationMode>,EnumDescriptor GetEnumDescriptor<opencv_caffe.LossParameter_NormalizationMode><> (),misc\caffe\opencv-caffe.pb.hpp,"inline const EnumDescriptor* GetEnumDescriptor< ::opencv_caffe::LossParameter_NormalizationMode>() {
  return ::opencv_caffe::LossParameter_NormalizationMode_descriptor();
}",44836.0,44838.0,1.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,0,0,0,0,EnumDescriptor
2626,154783,inner_product_param_,3,opencv_caffe.V1LayerParameter.inner_product_param_,,misc\caffe\opencv-caffe.pb.hpp,* inner_product_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2627,238089,InternalSwap,1,opencv_onnx.TensorShapeProto.InternalSwap,void opencv_onnx.TensorShapeProto.InternalSwap (TensorShapeProto*),misc\onnx\opencv-onnx.pb.cc,"void TensorShapeProto::InternalSwap(TensorShapeProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  dim_.InternalSwap(&other->dim_);
}",4969.0,4973.0,1.0,1.0,5.0,6,3,4,3,0,2,1,1,0,0,,0,2,2,1,1,void
2628,221707,GetEnumDescriptor,1,GetEnumDescriptor<opencv_caffe.ConvolutionParameter_Engine>,EnumDescriptor GetEnumDescriptor<opencv_caffe.ConvolutionParameter_Engine><> (),misc\caffe\opencv-caffe.pb.hpp,"inline const EnumDescriptor* GetEnumDescriptor< ::opencv_caffe::ConvolutionParameter_Engine>() {
  return ::opencv_caffe::ConvolutionParameter_Engine_descriptor();
}",44841.0,44843.0,1.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,0,0,0,0,EnumDescriptor
2629,320011,add_builtin_options_type,1,opencv_tflite.OperatorBuilder.add_builtin_options_type,void opencv_tflite.OperatorBuilder.add_builtin_options_type (ANY),misc\tflite\schema_generated.hpp,"void add_builtin_options_type(opencv_tflite::BuiltinOptions builtin_options_type) {
    fbb_.AddElement<uint8_t>(Operator::VT_BUILTIN_OPTIONS_TYPE, static_cast<uint8_t>(builtin_options_type), 0);
  }",9308.0,9310.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
2630,123412,_has_bits_,3,opencv_caffe.ParamSpec._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
2631,123413,_cached_size_,3,opencv_caffe.ParamSpec._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2632,123414,name_,3,opencv_caffe.ParamSpec.name_,,misc\caffe\opencv-caffe.pb.hpp,name_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2633,123415,share_mode_,3,opencv_caffe.ParamSpec.share_mode_,,misc\caffe\opencv-caffe.pb.hpp,share_mode_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
2634,123416,lr_mult_,3,opencv_caffe.ParamSpec.lr_mult_,,misc\caffe\opencv-caffe.pb.hpp,lr_mult_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
2635,123417,decay_mult_,3,opencv_caffe.ParamSpec.decay_mult_,,misc\caffe\opencv-caffe.pb.hpp,decay_mult_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
2636,221717,GetEnumDescriptor,1,GetEnumDescriptor<opencv_caffe.DataParameter_DB>,EnumDescriptor GetEnumDescriptor<opencv_caffe.DataParameter_DB><> (),misc\caffe\opencv-caffe.pb.hpp,"inline const EnumDescriptor* GetEnumDescriptor< ::opencv_caffe::DataParameter_DB>() {
  return ::opencv_caffe::DataParameter_DB_descriptor();
}",44846.0,44848.0,1.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,0,0,0,0,EnumDescriptor
2637,238110,GetMetadata,1,opencv_onnx.TensorShapeProto.GetMetadata,Metadata opencv_onnx.TensorShapeProto.GetMetadata (),misc\onnx\opencv-onnx.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata TensorShapeProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2donnx_2eproto_getter, &descriptor_table_opencv_2donnx_2eproto_once,
      file_level_metadata_opencv_2donnx_2eproto[9]);
}",4975.0,4979.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
2638,221727,GetEnumDescriptor,1,GetEnumDescriptor<opencv_caffe.EltwiseParameter_EltwiseOp>,EnumDescriptor GetEnumDescriptor<opencv_caffe.EltwiseParameter_EltwiseOp><> (),misc\caffe\opencv-caffe.pb.hpp,"inline const EnumDescriptor* GetEnumDescriptor< ::opencv_caffe::EltwiseParameter_EltwiseOp>() {
  return ::opencv_caffe::EltwiseParameter_EltwiseOp_descriptor();
}",44851.0,44853.0,1.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,0,0,0,0,EnumDescriptor
2639,320031,add_builtin_options,1,opencv_tflite.OperatorBuilder.add_builtin_options,void opencv_tflite.OperatorBuilder.add_builtin_options (ANY),misc\tflite\schema_generated.hpp,"void add_builtin_options(::flatbuffers::Offset<void> builtin_options) {
    fbb_.AddOffset(Operator::VT_BUILTIN_OPTIONS, builtin_options);
  }",9311.0,9313.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
2640,107046,MergeFrom,1,opencv_caffe.ProposalParameter.MergeFrom,void opencv_caffe.ProposalParameter.MergeFrom (ProposalParameter),misc\caffe\opencv-caffe.pb.cc,"void ProposalParameter::MergeFrom(const ProposalParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.ProposalParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ratio_.MergeFrom(from.ratio_);
  scale_.MergeFrom(from.scale_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      feat_stride_ = from.feat_stride_;
    }
    if (cached_has_bits & 0x00000002u) {
      base_size_ = from.base_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_size_ = from.min_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      pre_nms_topn_ = from.pre_nms_topn_;
    }
    if (cached_has_bits & 0x00000010u) {
      post_nms_topn_ = from.post_nms_topn_;
    }
    if (cached_has_bits & 0x00000020u) {
      nms_thresh_ = from.nms_thresh_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_...",33554.0,33585.0,1.0,1.0,32.0,35,8,33,13,1,18,8,14,0,0,,0,18,2,1,1,void
2641,287271,InternalSwap,1,opencv_tensorflow.OpDeprecation.InternalSwap,void opencv_tensorflow.OpDeprecation.InternalSwap (OpDeprecation*),misc\tensorflow\op_def.pb.cc,"void OpDeprecation::InternalSwap(OpDeprecation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &explanation_, lhs_arena,
      &other->explanation_, rhs_arena
  );
  swap(version_, other->version_);
}",1903.0,1914.0,1.0,1.0,12.0,16,4,16,9,0,4,1,1,0,0,,0,4,2,1,1,void
2642,221737,GetEnumDescriptor,1,GetEnumDescriptor<opencv_caffe.HingeLossParameter_Norm>,EnumDescriptor GetEnumDescriptor<opencv_caffe.HingeLossParameter_Norm><> (),misc\caffe\opencv-caffe.pb.hpp,"inline const EnumDescriptor* GetEnumDescriptor< ::opencv_caffe::HingeLossParameter_Norm>() {
  return ::opencv_caffe::HingeLossParameter_Norm_descriptor();
}",44856.0,44858.0,1.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,0,0,0,0,EnumDescriptor
2643,320044,add_custom_options,1,opencv_tflite.OperatorBuilder.add_custom_options,void opencv_tflite.OperatorBuilder.add_custom_options (ANY),misc\tflite\schema_generated.hpp,"void add_custom_options(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> custom_options) {
    fbb_.AddOffset(Operator::VT_CUSTOM_OPTIONS, custom_options);
  }",9314.0,9316.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
2644,8754,ByteSizeLong,1,opencv_caffe.PermuteParameter.ByteSizeLong,size_t opencv_caffe.PermuteParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t PermuteParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.PermuteParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 order = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->order_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_order_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}",5083.0,5101.0,1.0,1.0,19.0,15,7,14,7,0,2,1,1,0,0,,0,2,0,0,0,size_t
2645,221747,GetEnumDescriptor,1,GetEnumDescriptor<opencv_caffe.LRNParameter_NormRegion>,EnumDescriptor GetEnumDescriptor<opencv_caffe.LRNParameter_NormRegion><> (),misc\caffe\opencv-caffe.pb.hpp,"inline const EnumDescriptor* GetEnumDescriptor< ::opencv_caffe::LRNParameter_NormRegion>() {
  return ::opencv_caffe::LRNParameter_NormRegion_descriptor();
}",44861.0,44863.0,1.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,0,0,0,0,EnumDescriptor
2646,320057,add_custom_options_format,1,opencv_tflite.OperatorBuilder.add_custom_options_format,void opencv_tflite.OperatorBuilder.add_custom_options_format (ANY),misc\tflite\schema_generated.hpp,"void add_custom_options_format(opencv_tflite::CustomOptionsFormat custom_options_format) {
    fbb_.AddElement<int8_t>(Operator::VT_CUSTOM_OPTIONS_FORMAT, static_cast<int8_t>(custom_options_format), 0);
  }",9317.0,9319.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
2647,221757,GetEnumDescriptor,1,GetEnumDescriptor<opencv_caffe.LRNParameter_Engine>,EnumDescriptor GetEnumDescriptor<opencv_caffe.LRNParameter_Engine><> (),misc\caffe\opencv-caffe.pb.hpp,"inline const EnumDescriptor* GetEnumDescriptor< ::opencv_caffe::LRNParameter_Engine>() {
  return ::opencv_caffe::LRNParameter_Engine_descriptor();
}",44866.0,44868.0,1.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,0,0,0,0,EnumDescriptor
2648,270917,ByteSizeLong,1,opencv_tensorflow.FunctionDef.ByteSizeLong,size_t opencv_tensorflow.FunctionDef.ByteSizeLong (),misc\tensorflow\function.pb.cc,"size_t FunctionDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_tensorflow.FunctionDef)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opencv_tensorflow.FunctionDef.Node node = 2;
  total_size += 1UL * this->_internal_node_size();
  for (const auto& msg : this->node_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .opencv_tensorflow.OpDef signature = 1;
  if (this->_internal_has_signature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signature_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}",975.0,998.0,1.0,1.0,24.0,19,9,16,8,0,3,3,3,1,0,,0,3,0,0,0,size_t
2649,221767,GetEnumDescriptor,1,GetEnumDescriptor<opencv_caffe.PoolingParameter_PoolMethod>,EnumDescriptor GetEnumDescriptor<opencv_caffe.PoolingParameter_PoolMethod><> (),misc\caffe\opencv-caffe.pb.hpp,"inline const EnumDescriptor* GetEnumDescriptor< ::opencv_caffe::PoolingParameter_PoolMethod>() {
  return ::opencv_caffe::PoolingParameter_PoolMethod_descriptor();
}",44871.0,44873.0,1.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,0,0,0,0,EnumDescriptor
2650,451146,readTorchTensor,1,cv.dnn.TorchImporter.readTorchTensor,"void cv.dnn.TorchImporter.readTorchTensor (int,int)",src\torch\torch_importer.cpp,"void readTorchTensor(int indexTensor, int typeTensor)
    {
        int ndims = readInt();
        AutoBuffer<int64, 4> sizes(ndims);
        AutoBuffer<int64, 4> steps(ndims);
        THFile_readLongRaw(file, sizes.data(), ndims);
        THFile_readLongRaw(file, steps.data(), ndims);
        long offset = readLong() - 1;

        //read Storage
        int typeidx = readInt();
        CV_Assert(typeidx == TYPE_TORCH || (typeidx == TYPE_NIL && ndims == 0));

        if (typeidx == TYPE_NIL)
        {
            tensors.insert(std::make_pair(indexTensor, Mat()));
            return;
        }

        int indexStorage = readInt();
        if (readedIndexes.count(indexStorage) == 0)
        {
            String className = readTorchClassName();
            int typeStorage = parseStorageType(className);
            CV_Assert(typeStorage >= 0 && typeTensor == typeStorage);
            readTorchStorage(indexStorage, typeStorage);
            typeTensor = storages[indexStorage].type();
...",395.0,448.0,5.0,5.0,54.0,70,14,84,30,0,10,5,5,1,1,,0,10,4,2,2,void
2651,238157,shape,1,opencv_onnx.TypeProto_Tensor._Internal.shape,TensorShapeProto opencv_onnx.TypeProto_Tensor._Internal.shape (TypeProto_Tensor*),misc\onnx\opencv-onnx.pb.cc,"const ::opencv_onnx::TensorShapeProto&
TypeProto_Tensor::_Internal::shape(const TypeProto_Tensor* msg) {
  return *msg->shape_;
}",4995.0,4998.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,TensorShapeProto
2652,320077,add_mutating_variable_inputs,1,opencv_tflite.OperatorBuilder.add_mutating_variable_inputs,void opencv_tflite.OperatorBuilder.add_mutating_variable_inputs (ANY),misc\tflite\schema_generated.hpp,"void add_mutating_variable_inputs(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> mutating_variable_inputs) {
    fbb_.AddOffset(Operator::VT_MUTATING_VARIABLE_INPUTS, mutating_variable_inputs);
  }",9320.0,9322.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
2653,221777,GetEnumDescriptor,1,GetEnumDescriptor<opencv_caffe.PoolingParameter_Engine>,EnumDescriptor GetEnumDescriptor<opencv_caffe.PoolingParameter_Engine><> (),misc\caffe\opencv-caffe.pb.hpp,"inline const EnumDescriptor* GetEnumDescriptor< ::opencv_caffe::PoolingParameter_Engine>() {
  return ::opencv_caffe::PoolingParameter_Engine_descriptor();
}",44876.0,44878.0,1.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,0,0,0,0,EnumDescriptor
2654,320090,add_intermediates,1,opencv_tflite.OperatorBuilder.add_intermediates,void opencv_tflite.OperatorBuilder.add_intermediates (ANY),misc\tflite\schema_generated.hpp,"void add_intermediates(::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> intermediates) {
    fbb_.AddOffset(Operator::VT_INTERMEDIATES, intermediates);
  }",9323.0,9325.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
2655,287323,GetMetadata,1,opencv_tensorflow.OpDeprecation.GetMetadata,Metadata opencv_tensorflow.OpDeprecation.GetMetadata (),misc\tensorflow\op_def.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata OpDeprecation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_op_5fdef_2eproto_getter, &descriptor_table_op_5fdef_2eproto_once,
      file_level_metadata_op_5fdef_2eproto[3]);
}",1916.0,1920.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
2656,221787,GetEnumDescriptor,1,GetEnumDescriptor<opencv_caffe.ReductionParameter_ReductionOp>,EnumDescriptor GetEnumDescriptor<opencv_caffe.ReductionParameter_ReductionOp><> (),misc\caffe\opencv-caffe.pb.hpp,"inline const EnumDescriptor* GetEnumDescriptor< ::opencv_caffe::ReductionParameter_ReductionOp>() {
  return ::opencv_caffe::ReductionParameter_ReductionOp_descriptor();
}",44881.0,44883.0,1.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,0,0,0,0,EnumDescriptor
2657,57953,ByteSizeLong,1,opencv_caffe.DummyDataParameter.ByteSizeLong,size_t opencv_caffe.DummyDataParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t DummyDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.DummyDataParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opencv_caffe.FillerParameter data_filler = 1;
  total_size += 1UL * this->_internal_data_filler_size();
  for (const auto& msg : this->data_filler_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 num = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->num_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_num_size());
    total_size += data_size;
  }

  // repeated uint32 channels = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->channels_);
    total...",18930.0,18989.0,1.0,1.0,60.0,64,7,53,8,0,7,3,3,2,0,,0,7,0,0,0,size_t
2658,221797,GetEnumDescriptor,1,GetEnumDescriptor<opencv_caffe.ReLUParameter_Engine>,EnumDescriptor GetEnumDescriptor<opencv_caffe.ReLUParameter_Engine><> (),misc\caffe\opencv-caffe.pb.hpp,"inline const EnumDescriptor* GetEnumDescriptor< ::opencv_caffe::ReLUParameter_Engine>() {
  return ::opencv_caffe::ReLUParameter_Engine_descriptor();
}",44886.0,44888.0,1.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,0,0,0,0,EnumDescriptor
2659,320103,OperatorBuilder,1,opencv_tflite.OperatorBuilder.OperatorBuilder,ANY opencv_tflite.OperatorBuilder.OperatorBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit OperatorBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",9326.0,9329.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
2660,139883,descriptor,1,opencv_caffe.InfogainLossParameter.descriptor,Descriptor opencv_caffe.InfogainLossParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",12469.0,12471.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
2661,221807,GetEnumDescriptor,1,GetEnumDescriptor<opencv_caffe.SigmoidParameter_Engine>,EnumDescriptor GetEnumDescriptor<opencv_caffe.SigmoidParameter_Engine><> (),misc\caffe\opencv-caffe.pb.hpp,"inline const EnumDescriptor* GetEnumDescriptor< ::opencv_caffe::SigmoidParameter_Engine>() {
  return ::opencv_caffe::SigmoidParameter_Engine_descriptor();
}",44891.0,44893.0,1.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,0,0,0,0,EnumDescriptor
2662,139889,GetDescriptor,1,opencv_caffe.InfogainLossParameter.GetDescriptor,Descriptor opencv_caffe.InfogainLossParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",12472.0,12474.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
2663,320114,Finish,1,opencv_tflite.OperatorBuilder.Finish,Offset<Operator> opencv_tflite.OperatorBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<Operator> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Operator>(end);
    return o;
  }",9330.0,9334.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<Operator>
2664,221817,GetEnumDescriptor,1,GetEnumDescriptor<opencv_caffe.SoftmaxParameter_Engine>,EnumDescriptor GetEnumDescriptor<opencv_caffe.SoftmaxParameter_Engine><> (),misc\caffe\opencv-caffe.pb.hpp,"inline const EnumDescriptor* GetEnumDescriptor< ::opencv_caffe::SoftmaxParameter_Engine>() {
  return ::opencv_caffe::SoftmaxParameter_Engine_descriptor();
}",44896.0,44898.0,1.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,0,0,0,0,EnumDescriptor
2665,139900,GetReflection,1,opencv_caffe.InfogainLossParameter.GetReflection,Reflection opencv_caffe.InfogainLossParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",12475.0,12477.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
2666,221827,GetEnumDescriptor,1,GetEnumDescriptor<opencv_caffe.TanHParameter_Engine>,EnumDescriptor GetEnumDescriptor<opencv_caffe.TanHParameter_Engine><> (),misc\caffe\opencv-caffe.pb.hpp,"inline const EnumDescriptor* GetEnumDescriptor< ::opencv_caffe::TanHParameter_Engine>() {
  return ::opencv_caffe::TanHParameter_Engine_descriptor();
}",44901.0,44903.0,1.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,0,0,0,0,EnumDescriptor
2667,139911,default_instance,1,opencv_caffe.InfogainLossParameter.default_instance,InfogainLossParameter opencv_caffe.InfogainLossParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const InfogainLossParameter& default_instance() {
    return *internal_default_instance();
  }",12478.0,12480.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,InfogainLossParameter
2668,8840,MergeFrom,1,opencv_caffe.PermuteParameter.MergeFrom,void opencv_caffe.PermuteParameter.MergeFrom (PermuteParameter),misc\caffe\opencv-caffe.pb.cc,"void PermuteParameter::MergeFrom(const PermuteParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.PermuteParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  order_.MergeFrom(from.order_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",5116.0,5124.0,1.0,1.0,9.0,10,6,8,5,1,2,1,1,0,0,,0,2,2,1,1,void
2669,320138,CreateOperator,1,opencv_tflite.CreateOperator,"Offset<Operator> opencv_tflite.CreateOperator (ANY,uint32_t,ANY,ANY,ANY,ANY,ANY,ANY,ANY,ANY)",misc\tflite\schema_generated.hpp,"inline ::flatbuffers::Offset<Operator> CreateOperator(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t opcode_index = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> inputs = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> outputs = 0,
    opencv_tflite::BuiltinOptions builtin_options_type = opencv_tflite::BuiltinOptions_NONE,
    ::flatbuffers::Offset<void> builtin_options = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> custom_options = 0,
    opencv_tflite::CustomOptionsFormat custom_options_format = opencv_tflite::CustomOptionsFormat_FLEXBUFFERS,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> mutating_variable_inputs = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> intermediates = 0) {
  OperatorBuilder builder_(_fbb);
  builder_.add_intermediates(intermediates);
  builder_.add_mutating_variable_inputs(mutating_variable_inputs);
  builder_.add_custom_options(custom_options);
  builder_.add_builtin_options(...",9337.0,9359.0,1.0,1.0,23.0,10,1,20,11,1,0,1,1,0,0,,0,0,20,10,10,Offset<Operator>
2670,238220,SharedCtor,1,opencv_onnx.TypeProto_Tensor.SharedCtor,void opencv_onnx.TypeProto_Tensor.SharedCtor (),misc\onnx\opencv-onnx.pb.cc,"inline void TypeProto_Tensor::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&shape_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&elem_type_) -
    reinterpret_cast<char*>(&shape_)) + sizeof(elem_type_));
}",5021.0,5026.0,1.0,1.0,6.0,16,6,4,2,0,4,1,1,0,0,,0,4,0,0,0,void
2671,221837,GetEnumDescriptor,1,GetEnumDescriptor<opencv_caffe.SPPParameter_PoolMethod>,EnumDescriptor GetEnumDescriptor<opencv_caffe.SPPParameter_PoolMethod><> (),misc\caffe\opencv-caffe.pb.hpp,"inline const EnumDescriptor* GetEnumDescriptor< ::opencv_caffe::SPPParameter_PoolMethod>() {
  return ::opencv_caffe::SPPParameter_PoolMethod_descriptor();
}",44906.0,44908.0,1.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,0,0,0,0,EnumDescriptor
2672,139918,internal_default_instance,1,opencv_caffe.InfogainLossParameter.internal_default_instance,InfogainLossParameter opencv_caffe.InfogainLossParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const InfogainLossParameter* internal_default_instance() {
    return reinterpret_cast<const InfogainLossParameter*>(
               &_InfogainLossParameter_default_instance_);
  }",12481.0,12484.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,InfogainLossParameter
2673,123538,descriptor,1,opencv_caffe.LayerParameter.descriptor,Descriptor opencv_caffe.LayerParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",5648.0,5650.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
2674,221847,GetEnumDescriptor,1,GetEnumDescriptor<opencv_caffe.SPPParameter_Engine>,EnumDescriptor GetEnumDescriptor<opencv_caffe.SPPParameter_Engine><> (),misc\caffe\opencv-caffe.pb.hpp,"inline const EnumDescriptor* GetEnumDescriptor< ::opencv_caffe::SPPParameter_Engine>() {
  return ::opencv_caffe::SPPParameter_Engine_descriptor();
}",44911.0,44913.0,1.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,0,0,0,0,EnumDescriptor
2675,123544,GetDescriptor,1,opencv_caffe.LayerParameter.GetDescriptor,Descriptor opencv_caffe.LayerParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",5651.0,5653.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
2676,221857,GetEnumDescriptor,1,GetEnumDescriptor<opencv_caffe.V1LayerParameter_LayerType>,EnumDescriptor GetEnumDescriptor<opencv_caffe.V1LayerParameter_LayerType><> (),misc\caffe\opencv-caffe.pb.hpp,"inline const EnumDescriptor* GetEnumDescriptor< ::opencv_caffe::V1LayerParameter_LayerType>() {
  return ::opencv_caffe::V1LayerParameter_LayerType_descriptor();
}",44916.0,44918.0,1.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,0,0,0,0,EnumDescriptor
2677,123555,GetReflection,1,opencv_caffe.LayerParameter.GetReflection,Reflection opencv_caffe.LayerParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",5654.0,5656.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
2678,271016,MergeFrom,1,opencv_tensorflow.FunctionDef.MergeFrom,void opencv_tensorflow.FunctionDef.MergeFrom (FunctionDef),misc\tensorflow\function.pb.cc,"void FunctionDef::MergeFrom(const FunctionDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_tensorflow.FunctionDef)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  node_.MergeFrom(from.node_);
  if (from._internal_has_signature()) {
    _internal_mutable_signature()->::opencv_tensorflow::OpDef::MergeFrom(from._internal_signature());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",1013.0,1024.0,1.0,1.0,12.0,13,7,10,5,0,3,2,2,0,1,,0,2,2,1,1,void
2679,221867,GetEnumDescriptor,1,GetEnumDescriptor<opencv_caffe.V1LayerParameter_DimCheckMode>,EnumDescriptor GetEnumDescriptor<opencv_caffe.V1LayerParameter_DimCheckMode><> (),misc\caffe\opencv-caffe.pb.hpp,"inline const EnumDescriptor* GetEnumDescriptor< ::opencv_caffe::V1LayerParameter_DimCheckMode>() {
  return ::opencv_caffe::V1LayerParameter_DimCheckMode_descriptor();
}",44921.0,44923.0,1.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,0,0,0,0,EnumDescriptor
2680,123566,default_instance,1,opencv_caffe.LayerParameter.default_instance,LayerParameter opencv_caffe.LayerParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const LayerParameter& default_instance() {
    return *internal_default_instance();
  }",5657.0,5659.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,LayerParameter
2681,107185,InternalSwap,1,opencv_caffe.ProposalParameter.InternalSwap,void opencv_caffe.ProposalParameter.InternalSwap (ProposalParameter*),misc\caffe\opencv-caffe.pb.cc,"void ProposalParameter::InternalSwap(ProposalParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ratio_.InternalSwap(&other->ratio_);
  scale_.InternalSwap(&other->scale_);
  swap(feat_stride_, other->feat_stride_);
  swap(base_size_, other->base_size_);
  swap(min_size_, other->min_size_);
  swap(pre_nms_topn_, other->pre_nms_topn_);
  swap(post_nms_topn_, other->post_nms_topn_);
  swap(nms_thresh_, other->nms_thresh_);
}",33598.0,33610.0,1.0,1.0,13.0,18,4,20,11,0,18,1,1,0,0,,0,18,2,1,1,void
2682,123573,internal_default_instance,1,opencv_caffe.LayerParameter.internal_default_instance,LayerParameter opencv_caffe.LayerParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const LayerParameter* internal_default_instance() {
    return reinterpret_cast<const LayerParameter*>(
               &_LayerParameter_default_instance_);
  }",5660.0,5663.0,3.0,3.0,4.0,2,2,1,1,55,0,1,1,0,0,,0,0,0,0,0,LayerParameter
2683,221877,GetEnumDescriptor,1,GetEnumDescriptor<opencv_caffe.V0LayerParameter_PoolMethod>,EnumDescriptor GetEnumDescriptor<opencv_caffe.V0LayerParameter_PoolMethod><> (),misc\caffe\opencv-caffe.pb.hpp,"inline const EnumDescriptor* GetEnumDescriptor< ::opencv_caffe::V0LayerParameter_PoolMethod>() {
  return ::opencv_caffe::V0LayerParameter_PoolMethod_descriptor();
}",44926.0,44928.0,1.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,0,0,0,0,EnumDescriptor
2684,287417,SetCachedSize,1,opencv_tensorflow.OpList.SetCachedSize,void opencv_tensorflow.OpList.SetCachedSize (int),misc\tensorflow\op_def.pb.cc,"void OpList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",1965.0,1967.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
2685,8895,InternalSwap,1,opencv_caffe.PermuteParameter.InternalSwap,void opencv_caffe.PermuteParameter.InternalSwap (PermuteParameter*),misc\caffe\opencv-caffe.pb.cc,"void PermuteParameter::InternalSwap(PermuteParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  order_.InternalSwap(&other->order_);
}",5137.0,5141.0,1.0,1.0,5.0,6,3,4,3,0,2,1,1,0,0,,0,2,2,1,1,void
2686,238272,SharedDtor,1,opencv_onnx.TypeProto_Tensor.SharedDtor,void opencv_onnx.TypeProto_Tensor.SharedDtor (),misc\onnx\opencv-onnx.pb.cc,"inline void TypeProto_Tensor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete shape_;
}",5035.0,5038.0,1.0,1.0,4.0,3,3,1,1,0,2,2,2,1,0,,0,2,0,0,0,void
2687,221887,GetEnumDescriptor,1,GetEnumDescriptor<opencv_caffe.Type>,EnumDescriptor GetEnumDescriptor<opencv_caffe.Type><> (),misc\caffe\opencv-caffe.pb.hpp,"inline const EnumDescriptor* GetEnumDescriptor< ::opencv_caffe::Type>() {
  return ::opencv_caffe::Type_descriptor();
}",44931.0,44933.0,1.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,0,0,0,0,EnumDescriptor
2688,287427,Clear,1,opencv_tensorflow.OpList.Clear,void opencv_tensorflow.OpList.Clear (),misc\tensorflow\op_def.pb.cc,"void OpList::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_tensorflow.OpList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  op_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",1969.0,1977.0,1.0,1.0,9.0,4,3,4,3,0,1,1,1,0,0,,0,1,0,0,0,void
2689,221897,GetEnumDescriptor,1,GetEnumDescriptor<opencv_caffe.Phase>,EnumDescriptor GetEnumDescriptor<opencv_caffe.Phase><> (),misc\caffe\opencv-caffe.pb.hpp,"inline const EnumDescriptor* GetEnumDescriptor< ::opencv_caffe::Phase>() {
  return ::opencv_caffe::Phase_descriptor();
}",44936.0,44938.0,1.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,0,0,0,0,EnumDescriptor
2690,320205,CreateOperatorDirect,1,opencv_tflite.CreateOperatorDirect,"Offset<Operator> opencv_tflite.CreateOperatorDirect (ANY,uint32_t,ANY*,ANY*,ANY,ANY,ANY*,ANY,ANY*,ANY*)",misc\tflite\schema_generated.hpp,"inline ::flatbuffers::Offset<Operator> CreateOperatorDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t opcode_index = 0,
    const std::vector<int32_t> *inputs = nullptr,
    const std::vector<int32_t> *outputs = nullptr,
    opencv_tflite::BuiltinOptions builtin_options_type = opencv_tflite::BuiltinOptions_NONE,
    ::flatbuffers::Offset<void> builtin_options = 0,
    const std::vector<uint8_t> *custom_options = nullptr,
    opencv_tflite::CustomOptionsFormat custom_options_format = opencv_tflite::CustomOptionsFormat_FLEXBUFFERS,
    const std::vector<uint8_t> *mutating_variable_inputs = nullptr,
    const std::vector<int32_t> *intermediates = nullptr) {
  auto inputs__ = inputs ? _fbb.CreateVector<int32_t>(*inputs) : 0;
  auto outputs__ = outputs ? _fbb.CreateVector<int32_t>(*outputs) : 0;
  auto custom_options__ = custom_options ? _fbb.CreateVector<uint8_t>(*custom_options) : 0;
  auto mutating_variable_inputs__ = mutating_variable_inputs ? _fbb.CreateVector<uint8_...",9361.0,9388.0,1.0,1.0,28.0,31,6,36,18,0,1,1,1,0,1,,0,0,20,10,10,Offset<Operator>
2691,25295,IsInitialized,1,opencv_caffe.SolverParameter.IsInitialized,bool opencv_caffe.SolverParameter.IsInitialized (),misc\caffe\opencv-caffe.pb.cc,"bool SolverParameter::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(test_net_param_))
    return false;
  if (_internal_has_train_net_param()) {
    if (!train_net_param_->IsInitialized()) return false;
  }
  if (_internal_has_net_param()) {
    if (!net_param_->IsInitialized()) return false;
  }
  return true;
}",9578.0,9588.0,1.0,1.0,11.0,7,3,5,5,0,3,6,8,3,0,,0,3,0,0,0,bool
2692,8916,GetMetadata,1,opencv_caffe.PermuteParameter.GetMetadata,Metadata opencv_caffe.PermuteParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata PermuteParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[3]);
}",5143.0,5147.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
2693,418529,alpha,3,cv.dnn.ELUFunctor.alpha,,src\layers\elementwise_layers.cpp,alpha,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2694,238306,SetCachedSize,1,opencv_onnx.TypeProto_Tensor.SetCachedSize,void opencv_onnx.TypeProto_Tensor.SetCachedSize (int),misc\onnx\opencv-onnx.pb.cc,"void TypeProto_Tensor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",5046.0,5048.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
2695,8936,set_has_across_spatial,1,opencv_caffe._Internal.set_has_across_spatial,void opencv_caffe._Internal.set_has_across_spatial (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_across_spatial(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }",5154.0,5156.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
2696,238316,Clear,1,opencv_onnx.TypeProto_Tensor.Clear,void opencv_onnx.TypeProto_Tensor.Clear (),misc\onnx\opencv-onnx.pb.cc,"void TypeProto_Tensor::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_onnx.TypeProto.Tensor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(shape_ != nullptr);
    shape_->Clear();
  }
  elem_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",5050.0,5064.0,1.0,1.0,15.0,10,7,10,5,0,5,2,2,0,0,,0,5,0,0,0,void
2697,271085,InternalSwap,1,opencv_tensorflow.FunctionDef.InternalSwap,void opencv_tensorflow.FunctionDef.InternalSwap (FunctionDef*),misc\tensorflow\function.pb.cc,"void FunctionDef::InternalSwap(FunctionDef* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  node_.InternalSwap(&other->node_);
  swap(signature_, other->signature_);
}",1037.0,1042.0,1.0,1.0,6.0,7,3,6,4,0,4,1,1,0,0,,0,4,2,1,1,void
2698,107253,GetMetadata,1,opencv_caffe.ProposalParameter.GetMetadata,Metadata opencv_caffe.ProposalParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata ProposalParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[69]);
}",33612.0,33616.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
2699,25337,InternalSwap,1,opencv_caffe.SolverParameter.InternalSwap,void opencv_caffe.SolverParameter.InternalSwap (SolverParameter*),misc\caffe\opencv-caffe.pb.cc,"void SolverParameter::InternalSwap(SolverParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  test_net_.InternalSwap(&other->test_net_);
  test_iter_.InternalSwap(&other->test_iter_);
  test_net_param_.InternalSwap(&other->test_net_param_);
  test_state_.InternalSwap(&other->test_state_);
  stepvalue_.InternalSwap(&other->stepvalue_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &train_net_, lhs_arena,
      &other->train_net_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &lr_policy_, lhs_arena,
      &other->lr_policy_, rhs_arena
  )...",9590.0,9649.0,1.0,1.0,60.0,101,13,100,33,0,53,1,1,0,0,,0,53,2,1,1,void
2700,418557,calculate,1,cv.dnn.ELUFunctor.calculate,float cv.dnn.ELUFunctor.calculate (float),src\layers\elementwise_layers.cpp,"inline float calculate(float x) const
    {
        return x >= 0.f ? x : alpha * (exp(x) - 1.f);
    }",1185.0,1188.0,5.0,5.0,4.0,4,4,4,2,0,1,1,1,0,0,,0,1,2,1,1,float
2701,8963,set_has_channel_shared,1,opencv_caffe._Internal.set_has_channel_shared,void opencv_caffe._Internal.set_has_channel_shared (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_channel_shared(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }",32301.0,32303.0,3.0,3.0,3.0,2,2,1,1,2,0,1,1,0,0,,0,0,2,1,1,void
2702,271111,GetMetadata,1,opencv_tensorflow.FunctionDef.GetMetadata,Metadata opencv_tensorflow.FunctionDef.GetMetadata (),misc\tensorflow\function.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata FunctionDef::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_function_2eproto_getter, &descriptor_table_function_2eproto_once,
      file_level_metadata_function_2eproto[3]);
}",1044.0,1048.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
2703,140043,GetCachedSize,1,opencv_caffe.InfogainLossParameter.GetCachedSize,int opencv_caffe.InfogainLossParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },12529.0,12529.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
2704,418574,setKernelParams,1,cv.dnn.ELUFunctor.setKernelParams,void cv.dnn.ELUFunctor.setKernelParams (ANY),src\layers\elementwise_layers.cpp,"inline void setKernelParams(ocl::Kernel& kernel) const
    {
        kernel.set(3, alpha);
    }",1190.0,1193.0,5.0,5.0,4.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
2705,8974,set_has_eps,1,opencv_caffe._Internal.set_has_eps,void opencv_caffe._Internal.set_has_eps (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_eps(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }",23385.0,23387.0,3.0,3.0,3.0,2,2,1,1,3,0,1,1,0,0,,0,0,2,1,1,void
2706,238356,_InternalParse,1,opencv_onnx.TypeProto_Tensor._InternalParse,"const char* opencv_onnx.TypeProto_Tensor._InternalParse (char*,ANY*)",misc\onnx\opencv-onnx.pb.cc,"const char* TypeProto_Tensor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .opencv_onnx.TensorProto.DataType elem_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::opencv_onnx::TensorProto_DataType_IsValid(val))) {
            _internal_set_elem_type(static_cast<::opencv_onnx::TensorProto_DataType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .opencv_...",5066.0,5116.0,1.0,10.0,51.0,36,12,41,10,0,2,12,16,1,1,,0,2,4,2,2,const char*
2707,107284,set_has_output_dim,1,opencv_caffe._Internal.set_has_output_dim,void opencv_caffe._Internal.set_has_output_dim (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_output_dim(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }",33626.0,33628.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
2708,8985,scale_filler,1,opencv_caffe.NormalizeBBoxParameter._Internal.scale_filler,FillerParameter opencv_caffe.NormalizeBBoxParameter._Internal.scale_filler (NormalizeBBoxParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::FillerParameter&
NormalizeBBoxParameter::_Internal::scale_filler(const NormalizeBBoxParameter* msg) {
  return *msg->scale_filler_;
}",5169.0,5172.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,FillerParameter
2709,107295,set_has_group_size,1,opencv_caffe._Internal.set_has_group_size,void opencv_caffe._Internal.set_has_group_size (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_group_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }",33629.0,33631.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
2710,123698,GetCachedSize,1,opencv_caffe.LayerParameter.GetCachedSize,int opencv_caffe.LayerParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },5708.0,5708.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
2711,320307,fbb_,3,opencv_tflite.SubGraphBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
2712,320308,start_,3,opencv_tflite.SubGraphBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2713,320309,add_tensors,1,opencv_tflite.SubGraphBuilder.add_tensors,void opencv_tflite.SubGraphBuilder.add_tensors (ANY),misc\tflite\schema_generated.hpp,"void add_tensors(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<opencv_tflite::Tensor>>> tensors) {
    fbb_.AddOffset(SubGraph::VT_TENSORS, tensors);
  }",9436.0,9438.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
2714,74553,_InternalSerialize,1,opencv_caffe.PoolingParameter._InternalSerialize,"uint8_t opencv_caffe.PoolingParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* PoolingParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.PoolingParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .opencv_caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_pool(), target);
  }

  // optional uint32 kernel_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kernel_size(), target);
  }

  // optional uint32 stride = 3 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ...",24114.0,24207.0,1.0,1.0,94.0,119,8,133,10,0,1,15,15,0,0,,0,1,4,2,2,uint8_t
2715,320322,add_inputs,1,opencv_tflite.SubGraphBuilder.add_inputs,void opencv_tflite.SubGraphBuilder.add_inputs (ANY),misc\tflite\schema_generated.hpp,"void add_inputs(::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> inputs) {
    fbb_.AddOffset(SubGraph::VT_INPUTS, inputs);
  }",9439.0,9441.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
2716,58185,MergeFrom,1,opencv_caffe.DummyDataParameter.MergeFrom,void opencv_caffe.DummyDataParameter.MergeFrom (DummyDataParameter),misc\caffe\opencv-caffe.pb.cc,"void DummyDataParameter::MergeFrom(const DummyDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.DummyDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  data_filler_.MergeFrom(from.data_filler_);
  num_.MergeFrom(from.num_);
  channels_.MergeFrom(from.channels_);
  height_.MergeFrom(from.height_);
  width_.MergeFrom(from.width_);
  shape_.MergeFrom(from.shape_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",19004.0,19017.0,1.0,1.0,14.0,20,6,18,10,2,12,1,1,0,0,,0,12,2,1,1,void
2717,320335,add_outputs,1,opencv_tflite.SubGraphBuilder.add_outputs,void opencv_tflite.SubGraphBuilder.add_outputs (ANY),misc\tflite\schema_generated.hpp,"void add_outputs(::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> outputs) {
    fbb_.AddOffset(SubGraph::VT_OUTPUTS, outputs);
  }",9442.0,9444.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
2718,353113,getCUDNNStatus,1,cv.dnn.cuda4dnn.csl.cudnn.cuDNNException.getCUDNNStatus,cudnnStatus_t cv.dnn.cuda4dnn.csl.cudnn.cuDNNException.getCUDNNStatus (),src\cuda4dnn\csl\cudnn\cudnn.hpp,cudnnStatus_t getCUDNNStatus() const noexcept { return cudnnError; },34.0,34.0,9.0,76.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,cudnnStatus_t
2719,320348,add_operators,1,opencv_tflite.SubGraphBuilder.add_operators,void opencv_tflite.SubGraphBuilder.add_operators (ANY),misc\tflite\schema_generated.hpp,"void add_operators(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<opencv_tflite::Operator>>> operators) {
    fbb_.AddOffset(SubGraph::VT_OPERATORS, operators);
  }",9445.0,9447.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
2720,353119,cudnnError,3,cv.dnn.cuda4dnn.csl.cudnn.cuDNNException.cudnnError,,src\cuda4dnn\csl\cudnn\cudnn.hpp,cudnnError,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2721,320361,add_name,1,opencv_tflite.SubGraphBuilder.add_name,void opencv_tflite.SubGraphBuilder.add_name (ANY),misc\tflite\schema_generated.hpp,"void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(SubGraph::VT_NAME, name);
  }",9448.0,9450.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
2722,9067,SharedCtor,1,opencv_caffe.NormalizeBBoxParameter.SharedCtor,void opencv_caffe.NormalizeBBoxParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void NormalizeBBoxParameter::SharedCtor() {
scale_filler_ = nullptr;
across_spatial_ = true;
channel_shared_ = true;
eps_ = 1e-10f;
}",5197.0,5202.0,1.0,1.0,6.0,4,1,4,4,0,4,1,1,0,0,,0,4,0,0,0,void
2723,107374,SharedCtor,1,opencv_caffe.PSROIPoolingParameter.SharedCtor,void opencv_caffe.PSROIPoolingParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void PSROIPoolingParameter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&spatial_scale_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&group_size_) -
    reinterpret_cast<char*>(&spatial_scale_)) + sizeof(group_size_));
}",33656.0,33661.0,1.0,1.0,6.0,16,6,4,2,0,4,1,1,0,0,,0,4,0,0,0,void
2724,320374,SubGraphBuilder,1,opencv_tflite.SubGraphBuilder.SubGraphBuilder,ANY opencv_tflite.SubGraphBuilder.SubGraphBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit SubGraphBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",9451.0,9454.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
2725,271223,SharedCtor,1,opencv_tensorflow.GradientDef.SharedCtor,void opencv_tensorflow.GradientDef.SharedCtor (),misc\tensorflow\function.pb.cc,"inline void GradientDef::SharedCtor() {
function_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  function_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
gradient_func_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  gradient_func_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}",1087.0,1096.0,1.0,1.0,10.0,8,2,6,4,0,2,1,1,0,0,,0,2,0,0,0,void
2726,41855,_InternalSerialize,1,opencv_caffe.TransformationParameter._InternalSerialize,"uint8_t opencv_caffe.TransformationParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* TransformationParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.TransformationParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float scale = 1 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_scale(), target);
  }

  // optional bool mirror = 2 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_mirror(), target);
  }

  // optional uint32 crop_size = 3 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_...",14176.0,14235.0,1.0,1.0,60.0,81,8,84,12,0,1,9,9,0,0,,0,1,4,2,2,uint8_t
2727,140160,_has_bits_,3,opencv_caffe.InfogainLossParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
2728,140161,_cached_size_,3,opencv_caffe.InfogainLossParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2729,140162,source_,3,opencv_caffe.InfogainLossParameter.source_,,misc\caffe\opencv-caffe.pb.hpp,source_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2730,320385,Finish,1,opencv_tflite.SubGraphBuilder.Finish,Offset<SubGraph> opencv_tflite.SubGraphBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<SubGraph> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SubGraph>(end);
    return o;
  }",9455.0,9459.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<SubGraph>
2731,9098,SharedDtor,1,opencv_caffe.NormalizeBBoxParameter.SharedDtor,void opencv_caffe.NormalizeBBoxParameter.SharedDtor (),misc\caffe\opencv-caffe.pb.cc,"inline void NormalizeBBoxParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete scale_filler_;
}",5211.0,5214.0,1.0,1.0,4.0,3,3,1,1,0,2,2,2,1,0,,0,2,0,0,0,void
2732,320409,CreateSubGraph,1,opencv_tflite.CreateSubGraph,"Offset<SubGraph> opencv_tflite.CreateSubGraph (ANY,ANY,ANY,ANY,ANY,ANY)",misc\tflite\schema_generated.hpp,"inline ::flatbuffers::Offset<SubGraph> CreateSubGraph(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<opencv_tflite::Tensor>>> tensors = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> inputs = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> outputs = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<opencv_tflite::Operator>>> operators = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0) {
  SubGraphBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_operators(operators);
  builder_.add_outputs(outputs);
  builder_.add_inputs(inputs);
  builder_.add_tensors(tensors);
  return builder_.Finish();
}",9462.0,9476.0,1.0,1.0,15.0,6,1,12,7,1,0,1,1,0,0,,0,0,12,6,6,Offset<SubGraph>
2733,271264,SharedDtor,1,opencv_tensorflow.GradientDef.SharedDtor,void opencv_tensorflow.GradientDef.SharedDtor (),misc\tensorflow\function.pb.cc,"inline void GradientDef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  function_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gradient_func_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}",1105.0,1109.0,1.0,1.0,5.0,9,3,6,4,0,2,1,1,0,0,,0,2,0,0,0,void
2734,91041,SharedCtor,1,opencv_caffe.V1LayerParameter.SharedCtor,void opencv_caffe.V1LayerParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void V1LayerParameter::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&layer_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&layer_)) + sizeof(type_));
}",29231.0,29240.0,1.0,1.0,10.0,20,6,7,5,0,5,1,1,0,0,,0,5,0,0,0,void
2735,58275,InternalSwap,1,opencv_caffe.DummyDataParameter.InternalSwap,void opencv_caffe.DummyDataParameter.InternalSwap (DummyDataParameter*),misc\caffe\opencv-caffe.pb.cc,"void DummyDataParameter::InternalSwap(DummyDataParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_filler_.InternalSwap(&other->data_filler_);
  num_.InternalSwap(&other->num_);
  channels_.InternalSwap(&other->channels_);
  height_.InternalSwap(&other->height_);
  width_.InternalSwap(&other->width_);
  shape_.InternalSwap(&other->shape_);
}",19030.0,19039.0,1.0,1.0,10.0,21,3,14,8,0,12,1,1,0,0,,0,12,2,1,1,void
2736,9132,SetCachedSize,1,opencv_caffe.NormalizeBBoxParameter.SetCachedSize,void opencv_caffe.NormalizeBBoxParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void NormalizeBBoxParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",5222.0,5224.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
2737,9142,Clear,1,opencv_caffe.NormalizeBBoxParameter.Clear,void opencv_caffe.NormalizeBBoxParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void NormalizeBBoxParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.NormalizeBBoxParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(scale_filler_ != nullptr);
      scale_filler_->Clear();
    }
    across_spatial_ = true;
    channel_shared_ = true;
    eps_ = 1e-10f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",5226.0,5244.0,1.0,1.0,19.0,13,7,13,7,0,7,3,4,0,0,,0,7,0,0,0,void
2738,451513,readTorchObject,1,cv.dnn.TorchImporter.readTorchObject,void cv.dnn.TorchImporter.readTorchObject (int),src\torch\torch_importer.cpp,"void readTorchObject(int index)
    {
        if(readedIndexes.count(index))
            return;

        String className = readTorchClassName();
        String nnName;

        if (dbgPrint)
            std::cout << ""Class: "" << className << std::endl;

        int type;
        if ( (type = parseTensorType(className)) >= 0 ) //is Tensor
        {
            readTorchTensor(index, type);
        }
        else if ( (type = parseStorageType(className)) >= 0 ) //is Storage
        {
            readTorchStorage(index, type);
        }
        else if (isNNClass(className, nnName))
        {
            Dict scalarParams;
            TensorsMap tensorParams;

            cv::Ptr<Module> newModule(new Module(nnName));
            cv::dnn::LayerParams &layerParams = newModule->params;

            layerParams.set(""torch_index"", index);

            if (nnName == ""Sequential"" || nnName == ""Parallel"" ||
                nnName == ""Concat"" || nnName == ""ConcatTable"" || nnName == ""JoinTabl...",476.0,1002.0,5.0,5.0,527.0,10,4,13,6,0,3,4,4,2,1,,0,3,2,1,1,void
2739,107453,SetCachedSize,1,opencv_caffe.PSROIPoolingParameter.SetCachedSize,void opencv_caffe.PSROIPoolingParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void PSROIPoolingParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",33680.0,33682.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
2740,320452,CreateSubGraphDirect,1,opencv_tflite.CreateSubGraphDirect,"Offset<SubGraph> opencv_tflite.CreateSubGraphDirect (ANY,ANY*,ANY*,ANY*,ANY*,char*)",misc\tflite\schema_generated.hpp,"inline ::flatbuffers::Offset<SubGraph> CreateSubGraphDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<opencv_tflite::Tensor>> *tensors = nullptr,
    const std::vector<int32_t> *inputs = nullptr,
    const std::vector<int32_t> *outputs = nullptr,
    const std::vector<::flatbuffers::Offset<opencv_tflite::Operator>> *operators = nullptr,
    const char *name = nullptr) {
  auto tensors__ = tensors ? _fbb.CreateVector<::flatbuffers::Offset<opencv_tflite::Tensor>>(*tensors) : 0;
  auto inputs__ = inputs ? _fbb.CreateVector<int32_t>(*inputs) : 0;
  auto outputs__ = outputs ? _fbb.CreateVector<int32_t>(*outputs) : 0;
  auto operators__ = operators ? _fbb.CreateVector<::flatbuffers::Offset<opencv_tflite::Operator>>(*operators) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return opencv_tflite::CreateSubGraph(
      _fbb,
      tensors__,
      inputs__,
      outputs__,
      operators__,
      name__);
}",9478.0,9497.0,1.0,1.0,20.0,34,7,33,14,0,1,1,1,0,1,,0,0,12,6,6,Offset<SubGraph>
2741,287685,ByteSizeLong,1,opencv_tensorflow.OpList.ByteSizeLong,size_t opencv_tensorflow.OpList.ByteSizeLong (),misc\tensorflow\op_def.pb.cc,"size_t OpList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_tensorflow.OpList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opencv_tensorflow.OpDef op = 1;
  total_size += 1UL * this->_internal_op_size();
  for (const auto& msg : this->op_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}",2043.0,2059.0,1.0,1.0,17.0,12,7,11,7,0,2,2,2,1,0,,0,2,0,0,0,size_t
2742,107463,Clear,1,opencv_caffe.PSROIPoolingParameter.Clear,void opencv_caffe.PSROIPoolingParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void PSROIPoolingParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.PSROIPoolingParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&spatial_scale_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&group_size_) -
        reinterpret_cast<char*>(&spatial_scale_)) + sizeof(group_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",33684.0,33698.0,1.0,1.0,15.0,17,9,11,5,0,6,2,2,0,0,,0,6,0,0,0,void
2743,238542,_InternalSerialize,1,opencv_onnx.TypeProto_Tensor._InternalSerialize,"uint8_t opencv_onnx.TypeProto_Tensor._InternalSerialize (uint8_t*,ANY*)",misc\onnx\opencv-onnx.pb.cc,"uint8_t* TypeProto_Tensor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_onnx.TypeProto.Tensor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .opencv_onnx.TensorProto.DataType elem_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_elem_type(), target);
  }

  // optional .opencv_onnx.TensorShapeProto shape = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::shape(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::interna...",5118.0,5146.0,1.0,1.0,29.0,31,8,36,11,0,2,4,4,0,1,,0,2,4,2,2,uint8_t
2744,271313,SetCachedSize,1,opencv_tensorflow.GradientDef.SetCachedSize,void opencv_tensorflow.GradientDef.SetCachedSize (int),misc\tensorflow\function.pb.cc,"void GradientDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",1117.0,1119.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
2745,271323,Clear,1,opencv_tensorflow.GradientDef.Clear,void opencv_tensorflow.GradientDef.Clear (),misc\tensorflow\function.pb.cc,"void GradientDef::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_tensorflow.GradientDef)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  function_name_.ClearToEmpty();
  gradient_func_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",1121.0,1130.0,1.0,1.0,10.0,5,3,5,4,0,2,1,1,0,0,,0,2,0,0,0,void
2746,91104,SharedDtor,1,opencv_caffe.V1LayerParameter.SharedDtor,void opencv_caffe.V1LayerParameter.SharedDtor (),misc\caffe\opencv-caffe.pb.cc,"inline void V1LayerParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete layer_;
  if (this != internal_default_instance()) delete concat_param_;
  if (this != internal_default_instance()) delete convolution_param_;
  if (this != internal_default_instance()) delete data_param_;
  if (this != internal_default_instance()) delete dropout_param_;
  if (this != internal_default_instance()) delete hdf5_data_param_;
  if (this != internal_default_instance()) delete hdf5_output_param_;
  if (this != internal_default_instance()) delete image_data_param_;
  if (this != internal_default_instance()) delete infogain_loss_param_;
  if (this != internal_default_instance()) delete inner_product_param_;
  if (this != internal_default_instance()) delete lrn_param_;
  if (this != internal_default_instance()) delete pooling_param_;
  if (t...",29249.0,29283.0,1.0,1.0,35.0,67,5,34,34,0,63,32,32,31,0,,0,63,0,0,0,void
2747,58336,GetMetadata,1,opencv_caffe.DummyDataParameter.GetMetadata,Metadata opencv_caffe.DummyDataParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata DummyDataParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[30]);
}",19041.0,19045.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
2748,9193,_InternalParse,1,opencv_caffe.NormalizeBBoxParameter._InternalParse,"const char* opencv_caffe.NormalizeBBoxParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* NormalizeBBoxParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool across_spatial = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_across_spatial(&has_bits);
          across_spatial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .opencv_caffe.FillerParameter scale_filler = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_scale_filler(), ptr);
          CHK_(ptr);
        } else
          goto...",5246.0,5310.0,1.0,10.0,65.0,54,14,58,13,0,7,15,18,0,3,,0,4,4,2,2,const char*
2749,140268,descriptor,1,opencv_caffe.InnerProductParameter.descriptor,Descriptor opencv_caffe.InnerProductParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",12632.0,12634.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
2750,140274,GetDescriptor,1,opencv_caffe.InnerProductParameter.GetDescriptor,Descriptor opencv_caffe.InnerProductParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",12635.0,12637.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
2751,107513,_InternalParse,1,opencv_caffe.PSROIPoolingParameter._InternalParse,"const char* opencv_caffe.PSROIPoolingParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* PSROIPoolingParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required float spatial_scale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_spatial_scale(&has_bits);
          spatial_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required int32 output_dim = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_output_dim(&has_bits);
          output_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);...",33700.0,33756.0,1.0,10.0,57.0,49,14,52,13,0,7,13,15,0,3,,0,4,4,2,2,const char*
2752,140285,GetReflection,1,opencv_caffe.InnerProductParameter.GetReflection,Reflection opencv_caffe.InnerProductParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",12638.0,12640.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
2753,353277,~UniqueHandle,1,cv.dnn.cuda4dnn.csl.cudnn.UniqueHandle.~UniqueHandle,ANY cv.dnn.cuda4dnn.csl.cudnn.UniqueHandle.~UniqueHandle (),src\cuda4dnn\csl\cudnn\cudnn.hpp,"~UniqueHandle() noexcept {
            if (handle != nullptr) {
                /* cudnnDestroy won't throw if a valid handle is passed */
                CUDA4DNN_CHECK_CUDNN(cudnnDestroy(handle));
            }
        }",84.0,89.0,9.0,16.0,6.0,7,2,10,3,0,3,2,2,1,0,,0,3,0,0,0,ANY
2754,58367,set_has_stable_prod_grad,1,opencv_caffe._Internal.set_has_stable_prod_grad,void opencv_caffe._Internal.set_has_stable_prod_grad (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_stable_prod_grad(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }",19055.0,19057.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
2755,301426,SharedCtor,1,opencv_tensorflow.VersionDef.SharedCtor,void opencv_tensorflow.VersionDef.SharedCtor (),misc\tensorflow\versions.pb.cc,"inline void VersionDef::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&producer_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&min_consumer_) -
    reinterpret_cast<char*>(&producer_)) + sizeof(min_consumer_));
}",107.0,112.0,1.0,1.0,6.0,16,6,4,2,0,4,1,1,0,0,,0,4,0,0,0,void
2756,140296,default_instance,1,opencv_caffe.InnerProductParameter.default_instance,InnerProductParameter opencv_caffe.InnerProductParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const InnerProductParameter& default_instance() {
    return *internal_default_instance();
  }",12641.0,12643.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,InnerProductParameter
2757,140303,internal_default_instance,1,opencv_caffe.InnerProductParameter.internal_default_instance,InnerProductParameter opencv_caffe.InnerProductParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const InnerProductParameter* internal_default_instance() {
    return reinterpret_cast<const InnerProductParameter*>(
               &_InnerProductParameter_default_instance_);
  }",12644.0,12647.0,3.0,3.0,4.0,2,2,1,1,3,0,1,1,0,0,,0,0,0,0,0,InnerProductParameter
2758,287764,MergeFrom,1,opencv_tensorflow.OpList.MergeFrom,void opencv_tensorflow.OpList.MergeFrom (OpList),misc\tensorflow\op_def.pb.cc,"void OpList::MergeFrom(const OpList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_tensorflow.OpList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  op_.MergeFrom(from.op_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",2074.0,2082.0,1.0,1.0,9.0,10,6,8,5,0,2,1,1,0,0,,0,2,2,1,1,void
2759,25631,GetMetadata,1,opencv_caffe.SolverParameter.GetMetadata,Metadata opencv_caffe.SolverParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata SolverParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[10]);
}",9651.0,9655.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
2760,320555,fbb_,3,opencv_tflite.BufferBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2761,320556,start_,3,opencv_tflite.BufferBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2762,320557,add_data,1,opencv_tflite.BufferBuilder.add_data,void opencv_tflite.BufferBuilder.add_data (ANY),misc\tflite\schema_generated.hpp,"void add_data(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(Buffer::VT_DATA, data);
  }",9519.0,9521.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
2763,25651,set_has_iter,1,opencv_caffe._Internal.set_has_iter,void opencv_caffe._Internal.set_has_iter (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_iter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }",9662.0,9664.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
2764,320570,BufferBuilder,1,opencv_tflite.BufferBuilder.BufferBuilder,ANY opencv_tflite.BufferBuilder.BufferBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit BufferBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",9522.0,9525.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
2765,238652,ByteSizeLong,1,opencv_onnx.TypeProto_Tensor.ByteSizeLong,size_t opencv_onnx.TypeProto_Tensor.ByteSizeLong (),misc\onnx\opencv-onnx.pb.cc,"size_t TypeProto_Tensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_onnx.TypeProto.Tensor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .opencv_onnx.TensorShapeProto shape = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shape_);
    }

    // optional .opencv_onnx.TensorProto.DataType elem_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_elem_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}",5148.0,5173.0,1.0,1.0,26.0,21,10,19,8,0,3,4,6,0,0,,0,3,0,0,0,size_t
2766,58431,SharedCtor,1,opencv_caffe.EltwiseParameter.SharedCtor,void opencv_caffe.EltwiseParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void EltwiseParameter::SharedCtor() {
operation_ = 1;
stable_prod_grad_ = true;
}",19081.0,19084.0,1.0,1.0,4.0,2,1,2,2,0,2,1,1,0,0,,0,2,0,0,0,void
2767,320581,Finish,1,opencv_tflite.BufferBuilder.Finish,Offset<Buffer> opencv_tflite.BufferBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<Buffer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Buffer>(end);
    return o;
  }",9526.0,9530.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<Buffer>
2768,25673,set_has_current_step,1,opencv_caffe._Internal.set_has_current_step,void opencv_caffe._Internal.set_has_current_step (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_current_step(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }",9668.0,9670.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
2769,287819,InternalSwap,1,opencv_tensorflow.OpList.InternalSwap,void opencv_tensorflow.OpList.InternalSwap (OpList*),misc\tensorflow\op_def.pb.cc,"void OpList::InternalSwap(OpList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  op_.InternalSwap(&other->op_);
}",2095.0,2099.0,1.0,1.0,5.0,6,3,4,3,0,2,1,1,0,0,,0,2,2,1,1,void
2770,353356,get,1,cv.dnn.cuda4dnn.csl.cudnn.UniqueHandle.get,cudnnHandle_t cv.dnn.cuda4dnn.csl.cudnn.UniqueHandle.get (),src\cuda4dnn\csl\cudnn\cudnn.hpp,"cudnnHandle_t get() const noexcept {
            CV_Assert(handle);
            return handle;
        }",104.0,107.0,9.0,9.0,4.0,0,0,2,1,0,2,1,1,0,0,,0,2,0,0,0,cudnnHandle_t
2771,353364,operator bool,1,cv.dnn.cuda4dnn.csl.cudnn.UniqueHandle.operator bool,ANY cv.dnn.cuda4dnn.csl.cudnn.UniqueHandle.operator bool (),src\cuda4dnn\csl\cudnn\cudnn.hpp,explicit operator bool() const noexcept { return static_cast<bool>(handle); },110.0,110.0,9.0,85.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,ANY
2772,320605,CreateBuffer,1,opencv_tflite.CreateBuffer,"Offset<Buffer> opencv_tflite.CreateBuffer (ANY,ANY)",misc\tflite\schema_generated.hpp,"inline ::flatbuffers::Offset<Buffer> CreateBuffer(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data = 0) {
  BufferBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}",9533.0,9539.0,1.0,1.0,7.0,2,1,4,3,1,0,1,1,0,0,,0,0,4,2,2,Offset<Buffer>
2773,353373,handle,3,cv.dnn.cuda4dnn.csl.cudnn.UniqueHandle.handle,,src\cuda4dnn\csl\cudnn\cudnn.hpp,handle,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
2774,287840,GetMetadata,1,opencv_tensorflow.OpList.GetMetadata,Metadata opencv_tensorflow.OpList.GetMetadata (),misc\tensorflow\op_def.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata OpList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_op_5fdef_2eproto_getter, &descriptor_table_op_5fdef_2eproto_once,
      file_level_metadata_op_5fdef_2eproto[4]);
}",2101.0,2105.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
2775,320624,CreateBufferDirect,1,opencv_tflite.CreateBufferDirect,"Offset<Buffer> opencv_tflite.CreateBufferDirect (ANY,ANY*)",misc\tflite\schema_generated.hpp,"inline ::flatbuffers::Offset<Buffer> CreateBufferDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *data = nullptr) {
  if (data) { _fbb.ForceVectorAlignment(data->size(), sizeof(uint8_t), 16); }
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return opencv_tflite::CreateBuffer(
      _fbb,
      data__);
}",9541.0,9549.0,1.0,1.0,9.0,10,8,12,5,0,1,2,2,0,1,,0,0,4,2,2,Offset<Buffer>
2776,58483,SetCachedSize,1,opencv_caffe.EltwiseParameter.SetCachedSize,void opencv_caffe.EltwiseParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void EltwiseParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",19103.0,19105.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
2777,353404,operator bool,1,cv.dnn.cuda4dnn.csl.cudnn.Handle.operator bool,ANY cv.dnn.cuda4dnn.csl.cudnn.Handle.operator bool (),src\cuda4dnn\csl\cudnn\cudnn.hpp,explicit operator bool() const noexcept { return static_cast<bool>(handle); },141.0,141.0,9.0,85.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,ANY
2778,58493,Clear,1,opencv_caffe.EltwiseParameter.Clear,void opencv_caffe.EltwiseParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void EltwiseParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.EltwiseParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  coeff_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    operation_ = 1;
    stable_prod_grad_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",19107.0,19121.0,1.0,1.0,15.0,10,5,10,6,0,5,2,2,0,0,,0,5,0,0,0,void
2779,353412,get,1,cv.dnn.cuda4dnn.csl.cudnn.Handle.get,cudnnHandle_t cv.dnn.cuda4dnn.csl.cudnn.Handle.get (),src\cuda4dnn\csl\cudnn\cudnn.hpp,"cudnnHandle_t get() const noexcept {
            CV_Assert(handle);
            return handle->get();
        }",144.0,147.0,9.0,9.0,4.0,1,1,2,1,0,2,1,1,0,0,,0,2,0,0,0,cudnnHandle_t
2780,140428,GetCachedSize,1,opencv_caffe.InnerProductParameter.GetCachedSize,int opencv_caffe.InnerProductParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },12692.0,12692.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
2781,353423,handle,3,cv.dnn.cuda4dnn.csl.cudnn.Handle.handle,,src\cuda4dnn\csl\cudnn\cudnn.hpp,handle,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2782,156815,_has_bits_,3,opencv_caffe.V0LayerParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,44,0,1,1,0,0,,0,0,0,0,0,
2783,156816,_cached_size_,3,opencv_caffe.V0LayerParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2784,156817,blobs_,3,opencv_caffe.V0LayerParameter.blobs_,,misc\caffe\opencv-caffe.pb.hpp,blobs_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
2785,156819,weight_decay_,3,opencv_caffe.V0LayerParameter.weight_decay_,,misc\caffe\opencv-caffe.pb.hpp,weight_decay_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2786,156820,name_,3,opencv_caffe.V0LayerParameter.name_,,misc\caffe\opencv-caffe.pb.hpp,name_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2787,156821,type_,3,opencv_caffe.V0LayerParameter.type_,,misc\caffe\opencv-caffe.pb.hpp,type_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2788,156818,blobs_lr_,3,opencv_caffe.V0LayerParameter.blobs_lr_,,misc\caffe\opencv-caffe.pb.hpp,blobs_lr_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2789,156823,meanfile_,3,opencv_caffe.V0LayerParameter.meanfile_,,misc\caffe\opencv-caffe.pb.hpp,meanfile_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2790,156822,source_,3,opencv_caffe.V0LayerParameter.source_,,misc\caffe\opencv-caffe.pb.hpp,source_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2791,156825,det_crop_mode_,3,opencv_caffe.V0LayerParameter.det_crop_mode_,,misc\caffe\opencv-caffe.pb.hpp,det_crop_mode_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2792,156826,weight_filler_,3,opencv_caffe.V0LayerParameter.weight_filler_,,misc\caffe\opencv-caffe.pb.hpp,* weight_filler_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
2793,42139,ByteSizeLong,1,opencv_caffe.TransformationParameter.ByteSizeLong,size_t opencv_caffe.TransformationParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t TransformationParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.TransformationParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float mean_value = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_mean_value_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mean_value_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string mean_file = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mean_file());
    }

    // optional uint32 crop_size = 3 [default = 0];
    if (cached_has_bits & 0x000000...",14237.0,14290.0,1.0,1.0,54.0,43,10,34,9,0,2,8,14,0,0,,0,2,0,0,0,size_t
2794,156827,bias_filler_,3,opencv_caffe.V0LayerParameter.bias_filler_,,misc\caffe\opencv-caffe.pb.hpp,* bias_filler_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2795,156829,num_output_,3,opencv_caffe.V0LayerParameter.num_output_,,misc\caffe\opencv-caffe.pb.hpp,num_output_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2796,156828,hdf5_output_param_,3,opencv_caffe.V0LayerParameter.hdf5_output_param_,,misc\caffe\opencv-caffe.pb.hpp,* hdf5_output_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2797,320668,fbb_,3,opencv_tflite.MetadataBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
2798,156832,pool_,3,opencv_caffe.V0LayerParameter.pool_,,misc\caffe\opencv-caffe.pb.hpp,pool_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2799,156830,pad_,3,opencv_caffe.V0LayerParameter.pad_,,misc\caffe\opencv-caffe.pb.hpp,pad_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2800,156831,kernelsize_,3,opencv_caffe.V0LayerParameter.kernelsize_,,misc\caffe\opencv-caffe.pb.hpp,kernelsize_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2801,156835,new_width_,3,opencv_caffe.V0LayerParameter.new_width_,,misc\caffe\opencv-caffe.pb.hpp,new_width_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2802,156836,mirror_,3,opencv_caffe.V0LayerParameter.mirror_,,misc\caffe\opencv-caffe.pb.hpp,mirror_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2803,25765,SharedCtor,1,opencv_caffe.SolverState.SharedCtor,void opencv_caffe.SolverState.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void SolverState::SharedCtor() {
learned_net_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  learned_net_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&iter_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&current_step_) -
    reinterpret_cast<char*>(&iter_)) + sizeof(current_step_));
}",9702.0,9711.0,1.0,1.0,10.0,20,6,7,5,0,5,1,1,0,0,,0,5,0,0,0,void
2804,58532,_InternalParse,1,opencv_caffe.EltwiseParameter._InternalParse,"const char* opencv_caffe.EltwiseParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* EltwiseParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .opencv_caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::opencv_caffe::EltwiseParameter_EltwiseOp_IsValid(val))) {
            _internal_set_operation(static_cast<::opencv_caffe::EltwiseParameter_EltwiseOp>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
       ...",19123.0,19190.0,1.0,10.0,68.0,54,17,57,13,0,4,17,28,1,2,,0,3,4,2,2,const char*
2805,156838,rand_skip_,3,opencv_caffe.V0LayerParameter.rand_skip_,,misc\caffe\opencv-caffe.pb.hpp,rand_skip_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2806,156840,new_num_,3,opencv_caffe.V0LayerParameter.new_num_,,misc\caffe\opencv-caffe.pb.hpp,new_num_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2807,238756,MergeFrom,1,opencv_onnx.TypeProto_Tensor.MergeFrom,void opencv_onnx.TypeProto_Tensor.MergeFrom (TypeProto_Tensor),misc\onnx\opencv-onnx.pb.cc,"void TypeProto_Tensor::MergeFrom(const TypeProto_Tensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_onnx.TypeProto.Tensor)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_shape()->::opencv_onnx::TensorShapeProto::MergeFrom(from._internal_shape());
    }
    if (cached_has_bits & 0x00000002u) {
      elem_type_ = from.elem_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",5188.0,5205.0,1.0,1.0,18.0,19,9,16,6,1,5,4,6,0,1,,0,4,2,1,1,void
2808,156842,new_height_,3,opencv_caffe.V0LayerParameter.new_height_,,misc\caffe\opencv-caffe.pb.hpp,new_height_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
2809,156837,shuffle_images_,3,opencv_caffe.V0LayerParameter.shuffle_images_,,misc\caffe\opencv-caffe.pb.hpp,shuffle_images_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2810,156844,biasterm_,3,opencv_caffe.V0LayerParameter.biasterm_,,misc\caffe\opencv-caffe.pb.hpp,biasterm_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
2811,156845,group_,3,opencv_caffe.V0LayerParameter.group_,,misc\caffe\opencv-caffe.pb.hpp,group_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
2812,156839,det_context_pad_,3,opencv_caffe.V0LayerParameter.det_context_pad_,,misc\caffe\opencv-caffe.pb.hpp,det_context_pad_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2813,156847,dropout_ratio_,3,opencv_caffe.V0LayerParameter.dropout_ratio_,,misc\caffe\opencv-caffe.pb.hpp,dropout_ratio_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
2814,156848,local_size_,3,opencv_caffe.V0LayerParameter.local_size_,,misc\caffe\opencv-caffe.pb.hpp,local_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
2815,156849,alpha_,3,opencv_caffe.V0LayerParameter.alpha_,,misc\caffe\opencv-caffe.pb.hpp,alpha_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
2816,156850,beta_,3,opencv_caffe.V0LayerParameter.beta_,,misc\caffe\opencv-caffe.pb.hpp,beta_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
2817,156851,scale_,3,opencv_caffe.V0LayerParameter.scale_,,misc\caffe\opencv-caffe.pb.hpp,scale_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
2818,156852,k_,3,opencv_caffe.V0LayerParameter.k_,,misc\caffe\opencv-caffe.pb.hpp,k_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
2819,156853,det_fg_threshold_,3,opencv_caffe.V0LayerParameter.det_fg_threshold_,,misc\caffe\opencv-caffe.pb.hpp,det_fg_threshold_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
2820,156854,det_bg_threshold_,3,opencv_caffe.V0LayerParameter.det_bg_threshold_,,misc\caffe\opencv-caffe.pb.hpp,det_bg_threshold_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
2821,156855,det_fg_fraction_,3,opencv_caffe.V0LayerParameter.det_fg_fraction_,,misc\caffe\opencv-caffe.pb.hpp,det_fg_fraction_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
2822,320701,MetadataBuilder,1,opencv_tflite.MetadataBuilder.MetadataBuilder,ANY opencv_tflite.MetadataBuilder.MetadataBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit MetadataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",9582.0,9585.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
2823,148410,_has_bits_,3,opencv_caffe.SigmoidParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
2824,320712,Finish,1,opencv_tflite.MetadataBuilder.Finish,Offset<Metadata> opencv_tflite.MetadataBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<Metadata> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Metadata>(end);
    return o;
  }",9586.0,9590.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<Metadata>
2825,107722,_InternalSerialize,1,opencv_caffe.PSROIPoolingParameter._InternalSerialize,"uint8_t opencv_caffe.PSROIPoolingParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* PSROIPoolingParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.PSROIPoolingParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float spatial_scale = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_spatial_scale(), target);
  }

  // required int32 output_dim = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_output_dim(), target);
  }

  // required int32 group_size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat...",33758.0,33789.0,1.0,1.0,32.0,39,8,43,10,0,1,5,5,0,0,,0,1,4,2,2,uint8_t
2826,353496,~TensorDescriptor,1,cv.dnn.cuda4dnn.csl.cudnn.TensorDescriptor.~TensorDescriptor,ANY cv.dnn.cuda4dnn.csl.cudnn.TensorDescriptor.~TensorDescriptor (),src\cuda4dnn\csl\cudnn\cudnn.hpp,"~TensorDescriptor() noexcept {
            if (descriptor != nullptr) {
                /* cudnnDestroyTensorDescriptor will not fail */
                CUDA4DNN_CHECK_CUDNN(cudnnDestroyTensorDescriptor(descriptor));
            }
        }",196.0,201.0,9.0,16.0,6.0,7,2,10,3,0,3,2,2,1,0,,0,3,0,0,0,ANY
2827,9433,_InternalSerialize,1,opencv_caffe.NormalizeBBoxParameter._InternalSerialize,"uint8_t opencv_caffe.NormalizeBBoxParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* NormalizeBBoxParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.NormalizeBBoxParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool across_spatial = 1 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_across_spatial(), target);
  }

  // optional .opencv_caffe.FillerParameter scale_filler = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::scale_filler(this), target, stream);
  }

  // optional bool channel_shared = 3 [default = true];
  if (cached_has_bits & 0x00000004u) {
    tar...",5312.0,5351.0,1.0,1.0,40.0,47,8,54,11,0,2,6,6,0,1,,0,2,4,2,2,uint8_t
2828,74969,ByteSizeLong,1,opencv_caffe.PoolingParameter.ByteSizeLong,size_t opencv_caffe.PoolingParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t PoolingParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.PoolingParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .opencv_caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pool());
    }

    // optional uint32 kernel_size = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_kernel_size());
    }

    // optional uint32 pad = 4 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_...",24209.0,24290.0,1.0,1.0,82.0,82,9,68,7,0,2,16,29,0,0,,0,2,0,0,0,size_t
2829,91359,SetCachedSize,1,opencv_caffe.V1LayerParameter.SetCachedSize,void opencv_caffe.V1LayerParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void V1LayerParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",29291.0,29293.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
2830,320736,CreateMetadata,1,opencv_tflite.CreateMetadata,"Offset<Metadata> opencv_tflite.CreateMetadata (ANY,ANY,uint32_t)",misc\tflite\schema_generated.hpp,"inline ::flatbuffers::Offset<Metadata> CreateMetadata(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    uint32_t buffer = 0) {
  MetadataBuilder builder_(_fbb);
  builder_.add_buffer(buffer);
  builder_.add_name(name);
  return builder_.Finish();
}",9593.0,9601.0,1.0,1.0,9.0,3,1,6,4,1,0,1,1,0,0,,0,0,6,3,3,Offset<Metadata>
2831,25828,SharedDtor,1,opencv_caffe.SolverState.SharedDtor,void opencv_caffe.SolverState.SharedDtor (),misc\caffe\opencv-caffe.pb.cc,"inline void SolverState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  learned_net_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}",9720.0,9723.0,1.0,1.0,4.0,5,3,3,3,0,1,1,1,0,0,,0,1,0,0,0,void
2832,91369,Clear,1,opencv_caffe.V1LayerParameter.Clear,void opencv_caffe.V1LayerParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void V1LayerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.V1LayerParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bottom_.Clear();
  top_.Clear();
  blobs_.Clear();
  blobs_lr_.Clear();
  weight_decay_.Clear();
  include_.Clear();
  exclude_.Clear();
  loss_weight_.Clear();
  param_.Clear();
  blob_share_mode_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(layer_ != nullptr);
      layer_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(concat_param_ != nullptr);
      concat_param_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(convolution_param_ != nullptr);
      convolution_param_->Clear();
    }
    if (cached_has_bits ...",29295.0,29450.0,1.0,1.0,156.0,116,7,116,46,0,76,37,69,0,0,,0,76,0,0,0,void
2833,320761,CreateMetadataDirect,1,opencv_tflite.CreateMetadataDirect,"Offset<Metadata> opencv_tflite.CreateMetadataDirect (ANY,char*,uint32_t)",misc\tflite\schema_generated.hpp,"inline ::flatbuffers::Offset<Metadata> CreateMetadataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    uint32_t buffer = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return opencv_tflite::CreateMetadata(
      _fbb,
      name__,
      buffer);
}",9603.0,9612.0,1.0,1.0,10.0,4,3,8,5,0,1,1,1,0,1,,0,0,6,3,3,Offset<Metadata>
2834,238844,InternalSwap,1,opencv_onnx.TypeProto_Tensor.InternalSwap,void opencv_onnx.TypeProto_Tensor.InternalSwap (TypeProto_Tensor*),misc\onnx\opencv-onnx.pb.cc,"void TypeProto_Tensor::InternalSwap(TypeProto_Tensor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TypeProto_Tensor, elem_type_)
      + sizeof(TypeProto_Tensor::elem_type_)
      - PROTOBUF_FIELD_OFFSET(TypeProto_Tensor, shape_)>(
          reinterpret_cast<char*>(&shape_),
          reinterpret_cast<char*>(&other->shape_));
}",5218.0,5228.0,1.0,1.0,11.0,21,12,13,8,0,7,1,1,0,0,,0,7,2,1,1,void
2835,25866,SetCachedSize,1,opencv_caffe.SolverState.SetCachedSize,void opencv_caffe.SolverState.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void SolverState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",9731.0,9733.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
2836,353551,get,1,cv.dnn.cuda4dnn.csl.cudnn.TensorDescriptor.get,cudnnTensorDescriptor_t cv.dnn.cuda4dnn.csl.cudnn.TensorDescriptor.get (),src\cuda4dnn\csl\cudnn\cudnn.hpp,cudnnTensorDescriptor_t get() const noexcept { return descriptor; },210.0,210.0,9.0,75.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,cudnnTensorDescriptor_t
2837,25876,Clear,1,opencv_caffe.SolverState.Clear,void opencv_caffe.SolverState.Clear (),misc\caffe\opencv-caffe.pb.cc,"void SolverState::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.SolverState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  history_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    learned_net_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&iter_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&current_step_) -
        reinterpret_cast<char*>(&iter_)) + sizeof(current_step_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",9735.0,9753.0,1.0,1.0,19.0,20,9,14,7,0,8,3,3,0,0,,0,8,0,0,0,void
2838,353557,constructor,1,cv.dnn.cuda4dnn.csl.cudnn.TensorDescriptor.constructor,"void cv.dnn.cuda4dnn.csl.cudnn.TensorDescriptor.constructor<ForwardItr> (ForwardItr,ForwardItr)",src\cuda4dnn\csl\cudnn\cudnn.hpp,"void constructor(ForwardItr start, ForwardItr end) {
            CV_Assert(start != end);
            CV_Assert(std::distance(start, end) <= CUDNN_DIM_MAX);

            CUDA4DNN_CHECK_CUDNN(cudnnCreateTensorDescriptor(&descriptor));
            try {
                /* cuDNN documentation recommends using the 4d tensor API whenever possible
                 * hence, we create a 4d tensor descriptors for 3d tensor
                 */
                const auto rank = std::distance(start, end);
                if (rank <= 4) {
                    std::array<int, 4> dims;
                    std::fill(std::begin(dims), std::end(dims), 1);

                    /* suppose we have a 3d tensor, the first axis is the batch axis and
                     * the second axis is the channel axis (generally)
                     *
                     * cuDNN frequently assumes that the first axis is the batch axis and the
                     * second axis is the channel axis; hence, we copy the...",214.0,285.0,9.0,12.0,72.0,37,7,53,12,0,5,3,4,0,0,,0,5,4,2,2,void
2839,320790,fbb_,3,opencv_tflite.TensorMapBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
2840,320791,start_,3,opencv_tflite.TensorMapBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2841,320792,add_name,1,opencv_tflite.TensorMapBuilder.add_name,void opencv_tflite.TensorMapBuilder.add_name (ANY),misc\tflite\schema_generated.hpp,"void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(TensorMap::VT_NAME, name);
  }",9639.0,9641.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
2842,320805,add_tensor_index,1,opencv_tflite.TensorMapBuilder.add_tensor_index,void opencv_tflite.TensorMapBuilder.add_tensor_index (uint32_t),misc\tflite\schema_generated.hpp,"void add_tensor_index(uint32_t tensor_index) {
    fbb_.AddElement<uint32_t>(TensorMap::VT_TENSOR_INDEX, tensor_index, 0);
  }",9642.0,9644.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
2843,238897,GetMetadata,1,opencv_onnx.TypeProto_Tensor.GetMetadata,Metadata opencv_onnx.TypeProto_Tensor.GetMetadata (),misc\onnx\opencv-onnx.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata TypeProto_Tensor::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2donnx_2eproto_getter, &descriptor_table_opencv_2donnx_2eproto_once,
      file_level_metadata_opencv_2donnx_2eproto[10]);
}",5230.0,5234.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
2844,156979,descriptor,1,opencv_caffe.PReLUParameter.descriptor,Descriptor opencv_caffe.PReLUParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",19654.0,19656.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
2845,320823,TensorMapBuilder,1,opencv_tflite.TensorMapBuilder.TensorMapBuilder,ANY opencv_tflite.TensorMapBuilder.TensorMapBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit TensorMapBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",9645.0,9648.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
2846,156985,GetDescriptor,1,opencv_caffe.PReLUParameter.GetDescriptor,Descriptor opencv_caffe.PReLUParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",19657.0,19659.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
2847,320834,Finish,1,opencv_tflite.TensorMapBuilder.Finish,Offset<TensorMap> opencv_tflite.TensorMapBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<TensorMap> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TensorMap>(end);
    return o;
  }",9649.0,9653.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<TensorMap>
2848,156996,GetReflection,1,opencv_caffe.PReLUParameter.GetReflection,Reflection opencv_caffe.PReLUParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",19660.0,19662.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
2849,42316,MergeFrom,1,opencv_caffe.TransformationParameter.MergeFrom,void opencv_caffe.TransformationParameter.MergeFrom (TransformationParameter),misc\caffe\opencv-caffe.pb.cc,"void TransformationParameter::MergeFrom(const TransformationParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.TransformationParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  mean_value_.MergeFrom(from.mean_value_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_mean_file(from._internal_mean_file());
    }
    if (cached_has_bits & 0x00000002u) {
      crop_size_ = from.crop_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      mirror_ = from.mirror_;
    }
    if (cached_has_bits & 0x00000008u) {
      force_color_ = from.force_color_;
    }
    if (cached_has_bits & 0x00000010u) {
      force_gray_ = from.force_gray_;
    }
    if (cached_has_bits & 0x00000020u) {
      scale_ = from.scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPAC...",14305.0,14335.0,1.0,1.0,31.0,32,8,30,11,2,14,8,14,0,0,,0,14,2,1,1,void
2850,157007,default_instance,1,opencv_caffe.PReLUParameter.default_instance,PReLUParameter opencv_caffe.PReLUParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const PReLUParameter& default_instance() {
    return *internal_default_instance();
  }",19663.0,19665.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,PReLUParameter
2851,271696,ByteSizeLong,1,opencv_tensorflow.GradientDef.ByteSizeLong,size_t opencv_tensorflow.GradientDef.ByteSizeLong (),misc\tensorflow\function.pb.cc,"size_t GradientDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_tensorflow.GradientDef)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string function_name = 1;
  if (!this->_internal_function_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_function_name());
  }

  // string gradient_func = 2;
  if (!this->_internal_gradient_func().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gradient_func());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}",1215.0,1238.0,1.0,1.0,24.0,22,8,13,6,0,1,3,3,0,0,,0,1,0,0,0,size_t
2852,25939,_InternalParse,1,opencv_caffe.SolverState._InternalParse,"const char* opencv_caffe.SolverState._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* SolverState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 iter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_iter(&has_bits);
          iter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string learned_net = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_learned_net();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID:...",9755.0,9827.0,1.0,10.0,73.0,62,16,69,12,0,5,18,27,0,2,,0,3,4,2,2,const char*
2853,238933,tensor_type,1,opencv_onnx.TypeProto._Internal.tensor_type,TypeProto_Tensor opencv_onnx.TypeProto._Internal.tensor_type (TypeProto*),misc\onnx\opencv-onnx.pb.cc,"const ::opencv_onnx::TypeProto_Tensor&
TypeProto::_Internal::tensor_type(const TypeProto* msg) {
  return *msg->value_.tensor_type_;
}",5247.0,5250.0,1.0,1.0,4.0,3,3,1,1,1,1,1,1,0,0,,0,1,2,1,1,TypeProto_Tensor
2854,157014,internal_default_instance,1,opencv_caffe.PReLUParameter.internal_default_instance,PReLUParameter opencv_caffe.PReLUParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const PReLUParameter* internal_default_instance() {
    return reinterpret_cast<const PReLUParameter*>(
               &_PReLUParameter_default_instance_);
  }",19666.0,19669.0,3.0,3.0,4.0,2,2,1,1,2,0,1,1,0,0,,0,0,0,0,0,PReLUParameter
2855,320858,CreateTensorMap,1,opencv_tflite.CreateTensorMap,"Offset<TensorMap> opencv_tflite.CreateTensorMap (ANY,ANY,uint32_t)",misc\tflite\schema_generated.hpp,"inline ::flatbuffers::Offset<TensorMap> CreateTensorMap(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    uint32_t tensor_index = 0) {
  TensorMapBuilder builder_(_fbb);
  builder_.add_tensor_index(tensor_index);
  builder_.add_name(name);
  return builder_.Finish();
}",9656.0,9664.0,1.0,1.0,9.0,3,1,6,4,1,0,1,1,0,0,,0,0,6,3,3,Offset<TensorMap>
2856,238945,set_allocated_tensor_type,1,opencv_onnx.TypeProto.set_allocated_tensor_type,void opencv_onnx.TypeProto.set_allocated_tensor_type (ANY*),misc\onnx\opencv-onnx.pb.cc,"void TypeProto::set_allocated_tensor_type(::opencv_onnx::TypeProto_Tensor* tensor_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (tensor_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opencv_onnx::TypeProto_Tensor>::GetOwningArena(tensor_type);
    if (message_arena != submessage_arena) {
      tensor_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tensor_type, submessage_arena);
    }
    set_has_tensor_type();
    value_.tensor_type_ = tensor_type;
  }
  // @@protoc_insertion_point(field_set_allocated:opencv_onnx.TypeProto.tensor_type)
}",5251.0,5265.0,1.0,1.0,15.0,14,5,17,8,0,2,3,4,0,0,,0,2,2,1,1,void
2857,320883,CreateTensorMapDirect,1,opencv_tflite.CreateTensorMapDirect,"Offset<TensorMap> opencv_tflite.CreateTensorMapDirect (ANY,char*,uint32_t)",misc\tflite\schema_generated.hpp,"inline ::flatbuffers::Offset<TensorMap> CreateTensorMapDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    uint32_t tensor_index = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return opencv_tflite::CreateTensorMap(
      _fbb,
      name__,
      tensor_index);
}",9666.0,9675.0,1.0,1.0,10.0,4,3,8,5,0,1,1,1,0,1,,0,0,6,3,3,Offset<TensorMap>
2858,288121,descriptor,1,opencv_tensorflow.OpDef_ArgDef.descriptor,Descriptor opencv_tensorflow.OpDef_ArgDef.descriptor (),misc\tensorflow\op_def.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",117.0,119.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
2859,9599,ByteSizeLong,1,opencv_caffe.NormalizeBBoxParameter.ByteSizeLong,size_t opencv_caffe.NormalizeBBoxParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t NormalizeBBoxParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.NormalizeBBoxParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .opencv_caffe.FillerParameter scale_filler = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scale_filler_);
    }

    // optional bool across_spatial = 1 [default = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool channel_shared = 3 [default = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional float eps = 4 [default = 1e-10];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
...",5353.0,5387.0,1.0,1.0,35.0,23,9,20,8,0,3,6,10,0,0,,0,3,0,0,0,size_t
2860,288127,GetDescriptor,1,opencv_tensorflow.OpDef_ArgDef.GetDescriptor,Descriptor opencv_tensorflow.OpDef_ArgDef.GetDescriptor (),misc\tensorflow\op_def.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",120.0,122.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
2861,107910,ByteSizeLong,1,opencv_caffe.PSROIPoolingParameter.ByteSizeLong,size_t opencv_caffe.PSROIPoolingParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t PSROIPoolingParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.PSROIPoolingParameter)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float spatial_scale = 1;
    total_size += 1 + 4;

    // required int32 output_dim = 2;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_output_dim());

    // required int32 group_size = 3;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_group_size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}",33812.0,33834.0,1.0,1.0,23.0,20,11,15,7,0,2,2,2,1,0,,0,2,0,0,0,size_t
2862,288138,GetReflection,1,opencv_tensorflow.OpDef_ArgDef.GetReflection,Reflection opencv_tensorflow.OpDef_ArgDef.GetReflection (),misc\tensorflow\op_def.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",123.0,125.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
2863,320912,fbb_,3,opencv_tflite.SignatureDefBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
2864,320913,start_,3,opencv_tflite.SignatureDefBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2865,320914,add_inputs,1,opencv_tflite.SignatureDefBuilder.add_inputs,void opencv_tflite.SignatureDefBuilder.add_inputs (ANY),misc\tflite\schema_generated.hpp,"void add_inputs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<opencv_tflite::TensorMap>>> inputs) {
    fbb_.AddOffset(SignatureDef::VT_INPUTS, inputs);
  }",9716.0,9718.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
2866,288149,default_instance,1,opencv_tensorflow.OpDef_ArgDef.default_instance,OpDef_ArgDef opencv_tensorflow.OpDef_ArgDef.default_instance (),misc\tensorflow\op_def.pb.hpp,"static const OpDef_ArgDef& default_instance() {
    return *internal_default_instance();
  }",126.0,128.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,OpDef_ArgDef
2867,288156,internal_default_instance,1,opencv_tensorflow.OpDef_ArgDef.internal_default_instance,OpDef_ArgDef opencv_tensorflow.OpDef_ArgDef.internal_default_instance (),misc\tensorflow\op_def.pb.hpp,"static inline const OpDef_ArgDef* internal_default_instance() {
    return reinterpret_cast<const OpDef_ArgDef*>(
               &_OpDef_ArgDef_default_instance_);
  }",129.0,132.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,OpDef_ArgDef
2868,320927,add_outputs,1,opencv_tflite.SignatureDefBuilder.add_outputs,void opencv_tflite.SignatureDefBuilder.add_outputs (ANY),misc\tflite\schema_generated.hpp,"void add_outputs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<opencv_tflite::TensorMap>>> outputs) {
    fbb_.AddOffset(SignatureDef::VT_OUTPUTS, outputs);
  }",9719.0,9721.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
2869,320940,add_signature_key,1,opencv_tflite.SignatureDefBuilder.add_signature_key,void opencv_tflite.SignatureDefBuilder.add_signature_key (ANY),misc\tflite\schema_generated.hpp,"void add_signature_key(::flatbuffers::Offset<::flatbuffers::String> signature_key) {
    fbb_.AddOffset(SignatureDef::VT_SIGNATURE_KEY, signature_key);
  }",9722.0,9724.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
2870,58807,_InternalSerialize,1,opencv_caffe.EltwiseParameter._InternalSerialize,"uint8_t opencv_caffe.EltwiseParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* EltwiseParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.EltwiseParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .opencv_caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_operation(), target);
  }

  // repeated float coeff = 2;
  for (int i = 0, n = this->_internal_coeff_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_coeff(i), target);
  }

  // optional bool stable_prod_grad = 3 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->...",19192.0,19224.0,1.0,1.0,33.0,42,8,47,12,0,1,5,5,0,0,,0,1,4,2,2,uint8_t
2871,320953,add_subgraph_index,1,opencv_tflite.SignatureDefBuilder.add_subgraph_index,void opencv_tflite.SignatureDefBuilder.add_subgraph_index (uint32_t),misc\tflite\schema_generated.hpp,"void add_subgraph_index(uint32_t subgraph_index) {
    fbb_.AddElement<uint32_t>(SignatureDef::VT_SUBGRAPH_INDEX, subgraph_index, 0);
  }",9725.0,9727.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
2872,140732,_has_bits_,3,opencv_caffe.InnerProductParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
2873,140733,_cached_size_,3,opencv_caffe.InnerProductParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2874,140734,weight_filler_,3,opencv_caffe.InnerProductParameter.weight_filler_,,misc\caffe\opencv-caffe.pb.hpp,* weight_filler_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
2875,140735,bias_filler_,3,opencv_caffe.InnerProductParameter.bias_filler_,,misc\caffe\opencv-caffe.pb.hpp,* bias_filler_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2876,140736,num_output_,3,opencv_caffe.InnerProductParameter.num_output_,,misc\caffe\opencv-caffe.pb.hpp,num_output_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2877,140737,transpose_,3,opencv_caffe.InnerProductParameter.transpose_,,misc\caffe\opencv-caffe.pb.hpp,transpose_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
2878,140738,bias_term_,3,opencv_caffe.InnerProductParameter.bias_term_,,misc\caffe\opencv-caffe.pb.hpp,bias_term_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
2879,140739,axis_,3,opencv_caffe.InnerProductParameter.axis_,,misc\caffe\opencv-caffe.pb.hpp,axis_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
2880,320971,SignatureDefBuilder,1,opencv_tflite.SignatureDefBuilder.SignatureDefBuilder,ANY opencv_tflite.SignatureDefBuilder.SignatureDefBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit SignatureDefBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",9728.0,9731.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
2881,42448,InternalSwap,1,opencv_caffe.TransformationParameter.InternalSwap,void opencv_caffe.TransformationParameter.InternalSwap (TransformationParameter*),misc\caffe\opencv-caffe.pb.cc,"void TransformationParameter::InternalSwap(TransformationParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mean_value_.InternalSwap(&other->mean_value_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mean_file_, lhs_arena,
      &other->mean_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransformationParameter, force_gray_)
      + sizeof(TransformationParameter::force_gray_)
      - PROTOBUF_FIELD_OFFSET(TransformationParameter, crop_size_)>(
          reinterpret_cast<char*>(&crop_size_),
          reinterpret_cast<char*>(&other->crop_size_));
  swap(scale_, other->scale_);
}",14348.0,14367.0,1.0,1.0,20.0,37,13,29,14,0,13,1,1,0,0,,0,13,2,1,1,void
2882,157139,GetCachedSize,1,opencv_caffe.PReLUParameter.GetCachedSize,int opencv_caffe.PReLUParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },19714.0,19714.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
2883,320982,Finish,1,opencv_tflite.SignatureDefBuilder.Finish,Offset<SignatureDef> opencv_tflite.SignatureDefBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<SignatureDef> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SignatureDef>(end);
    return o;
  }",9732.0,9736.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<SignatureDef>
2884,239078,SharedCtor,1,opencv_onnx.TypeProto.SharedCtor,void opencv_onnx.TypeProto.SharedCtor (),misc\onnx\opencv-onnx.pb.cc,"inline void TypeProto::SharedCtor() {
denotation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  denotation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
clear_has_value();
}",5300.0,5306.0,1.0,1.0,7.0,4,2,3,3,0,1,1,1,0,0,,0,1,0,0,0,void
2885,108013,MergeFrom,1,opencv_caffe.PSROIPoolingParameter.MergeFrom,void opencv_caffe.PSROIPoolingParameter.MergeFrom (PSROIPoolingParameter),misc\caffe\opencv-caffe.pb.cc,"void PSROIPoolingParameter::MergeFrom(const PSROIPoolingParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.PSROIPoolingParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      spatial_scale_ = from.spatial_scale_;
    }
    if (cached_has_bits & 0x00000002u) {
      output_dim_ = from.output_dim_;
    }
    if (cached_has_bits & 0x00000004u) {
      group_size_ = from.group_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",33849.0,33869.0,1.0,1.0,21.0,22,8,20,8,1,8,5,8,0,0,,0,8,2,1,1,void
2886,321006,CreateSignatureDef,1,opencv_tflite.CreateSignatureDef,"Offset<SignatureDef> opencv_tflite.CreateSignatureDef (ANY,ANY,ANY,ANY,uint32_t)",misc\tflite\schema_generated.hpp,"inline ::flatbuffers::Offset<SignatureDef> CreateSignatureDef(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<opencv_tflite::TensorMap>>> inputs = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<opencv_tflite::TensorMap>>> outputs = 0,
    ::flatbuffers::Offset<::flatbuffers::String> signature_key = 0,
    uint32_t subgraph_index = 0) {
  SignatureDefBuilder builder_(_fbb);
  builder_.add_subgraph_index(subgraph_index);
  builder_.add_signature_key(signature_key);
  builder_.add_outputs(outputs);
  builder_.add_inputs(inputs);
  return builder_.Finish();
}",9739.0,9751.0,1.0,1.0,13.0,5,1,10,6,1,0,1,1,0,0,,0,0,10,5,5,Offset<SignatureDef>
2887,9712,MergeFrom,1,opencv_caffe.NormalizeBBoxParameter.MergeFrom,void opencv_caffe.NormalizeBBoxParameter.MergeFrom (NormalizeBBoxParameter),misc\caffe\opencv-caffe.pb.cc,"void NormalizeBBoxParameter::MergeFrom(const NormalizeBBoxParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.NormalizeBBoxParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_scale_filler()->::opencv_caffe::FillerParameter::MergeFrom(from._internal_scale_filler());
    }
    if (cached_has_bits & 0x00000002u) {
      across_spatial_ = from.across_spatial_;
    }
    if (cached_has_bits & 0x00000004u) {
      channel_shared_ = from.channel_shared_;
    }
    if (cached_has_bits & 0x00000008u) {
      eps_ = from.eps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",5402.0,5425.0,1.0,1.0,24.0,25,9,22,8,1,9,6,10,0,1,,0,8,2,1,1,void
2888,222709,file_level_metadata_opencv_2donnx_2eproto,2,misc\onnx\opencv-onnx.pb.cc.file_level_metadata_opencv_2donnx_2eproto,,misc\onnx\opencv-onnx.pb.cc,static ::PROTOBUF_NAMESPACE_ID::Metadata[13] file_level_metadata_opencv_2donnx_2eproto,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,13,0,1,1,0,0,,0,0,0,0,0,
2889,222712,file_level_enum_descriptors_opencv_2donnx_2eproto,2,misc\onnx\opencv-onnx.pb.cc.file_level_enum_descriptors_opencv_2donnx_2eproto,,misc\onnx\opencv-onnx.pb.cc,ANY file_level_enum_descriptors_opencv_2donnx_2eproto,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2890,353788,descriptor,3,cv.dnn.cuda4dnn.csl.cudnn.TensorDescriptor.descriptor,,src\cuda4dnn\csl\cudnn\cudnn.hpp,descriptor,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
2891,239109,SharedDtor,1,opencv_onnx.TypeProto.SharedDtor,void opencv_onnx.TypeProto.SharedDtor (),misc\onnx\opencv-onnx.pb.cc,"inline void TypeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  denotation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_value()) {
    clear_value();
  }
}",5315.0,5321.0,1.0,1.0,7.0,5,3,3,3,0,1,2,2,0,0,,0,1,0,0,0,void
2892,75271,MergeFrom,1,opencv_caffe.PoolingParameter.MergeFrom,void opencv_caffe.PoolingParameter.MergeFrom (PoolingParameter),misc\caffe\opencv-caffe.pb.cc,"void PoolingParameter::MergeFrom(const PoolingParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.PoolingParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      pool_ = from.pool_;
    }
    if (cached_has_bits & 0x00000002u) {
      kernel_size_ = from.kernel_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      pad_ = from.pad_;
    }
    if (cached_has_bits & 0x00000008u) {
      kernel_h_ = from.kernel_h_;
    }
    if (cached_has_bits & 0x00000010u) {
      kernel_w_ = from.kernel_w_;
    }
    if (cached_has_bits & 0x00000020u) {
      stride_h_ = from.stride_h_;
    }
    if (cached_has_bits & 0x00000040u) {
      stride_w_ = from.stride_w_;
    }
    if (cached_has_bits & 0x00000080u) {
      pad_h_ = from.pad_h_;
    }
    _has_bits_[0] |= cached_has_bits;
  ...",24305.0,24358.0,1.0,1.0,54.0,54,8,53,18,2,29,16,29,0,0,,0,29,2,1,1,void
2893,271880,InternalSwap,1,opencv_tensorflow.GradientDef.InternalSwap,void opencv_tensorflow.GradientDef.InternalSwap (GradientDef*),misc\tensorflow\function.pb.cc,"void GradientDef::InternalSwap(GradientDef* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &function_name_, lhs_arena,
      &other->function_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gradient_func_, lhs_arena,
      &other->gradient_func_, rhs_arena
  );
}",1279.0,1294.0,1.0,1.0,16.0,24,4,23,9,0,4,1,1,0,0,,0,4,2,1,1,void
2894,321043,CreateSignatureDefDirect,1,opencv_tflite.CreateSignatureDefDirect,"Offset<SignatureDef> opencv_tflite.CreateSignatureDefDirect (ANY,ANY*,ANY*,char*,uint32_t)",misc\tflite\schema_generated.hpp,"inline ::flatbuffers::Offset<SignatureDef> CreateSignatureDefDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<opencv_tflite::TensorMap>> *inputs = nullptr,
    const std::vector<::flatbuffers::Offset<opencv_tflite::TensorMap>> *outputs = nullptr,
    const char *signature_key = nullptr,
    uint32_t subgraph_index = 0) {
  auto inputs__ = inputs ? _fbb.CreateVector<::flatbuffers::Offset<opencv_tflite::TensorMap>>(*inputs) : 0;
  auto outputs__ = outputs ? _fbb.CreateVector<::flatbuffers::Offset<opencv_tflite::TensorMap>>(*outputs) : 0;
  auto signature_key__ = signature_key ? _fbb.CreateString(signature_key) : 0;
  return opencv_tflite::CreateSignatureDef(
      _fbb,
      inputs__,
      outputs__,
      signature_key__,
      subgraph_index);
}",9753.0,9768.0,1.0,1.0,16.0,22,6,22,10,0,1,1,1,0,1,,0,0,10,5,5,Offset<SignatureDef>
2895,288281,GetCachedSize,1,opencv_tensorflow.OpDef_ArgDef.GetCachedSize,int opencv_tensorflow.OpDef_ArgDef.GetCachedSize (),misc\tensorflow\op_def.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },177.0,177.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
2896,140845,descriptor,1,opencv_caffe.InputParameter.descriptor,Descriptor opencv_caffe.InputParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",12875.0,12877.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
2897,239151,SetCachedSize,1,opencv_onnx.TypeProto.SetCachedSize,void opencv_onnx.TypeProto.SetCachedSize (int),misc\onnx\opencv-onnx.pb.cc,"void TypeProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",5329.0,5331.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
2898,140851,GetDescriptor,1,opencv_caffe.InputParameter.GetDescriptor,Descriptor opencv_caffe.InputParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",12878.0,12880.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
2899,42548,GetMetadata,1,opencv_caffe.TransformationParameter.GetMetadata,Metadata opencv_caffe.TransformationParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata TransformationParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[16]);
}",14369.0,14373.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
2900,239161,clear_value,1,opencv_onnx.TypeProto.clear_value,void opencv_onnx.TypeProto.clear_value (),misc\onnx\opencv-onnx.pb.cc,"void TypeProto::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:opencv_onnx.TypeProto)
  switch (value_case()) {
    case kTensorType: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.tensor_type_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}",5333.0,5347.0,1.0,1.0,15.0,5,5,5,4,0,6,5,4,0,0,,0,6,0,0,0,void
2901,353853,get,1,cv.dnn.cuda4dnn.csl.cudnn.TensorDescriptorsArray.get,vector<cudnnTensorDescriptor_t> cv.dnn.cuda4dnn.csl.cudnn.TensorDescriptorsArray.get (),src\cuda4dnn\csl\cudnn\cudnn.hpp,"std::vector<cudnnTensorDescriptor_t> get() const noexcept
        {
            std::vector<cudnnTensorDescriptor_t> descPtrs;
            descPtrs.reserve(descriptors.size());
            for (auto& desc : descriptors)
            {
                descPtrs.push_back(desc.get());
            }
            return descPtrs;
        }",320.0,329.0,9.0,9.0,10.0,7,3,9,5,0,2,2,2,1,0,,0,2,0,0,0,vector<cudnnTensorDescriptor_t>
2902,140862,GetReflection,1,opencv_caffe.InputParameter.GetReflection,Reflection opencv_caffe.InputParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",12881.0,12883.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
2903,108102,IsInitialized,1,opencv_caffe.PSROIPoolingParameter.IsInitialized,bool opencv_caffe.PSROIPoolingParameter.IsInitialized (),misc\caffe\opencv-caffe.pb.cc,"bool PSROIPoolingParameter::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}",33878.0,33881.0,1.0,1.0,4.0,1,1,2,2,0,1,2,2,1,0,,0,1,0,0,0,bool
2904,42568,set_has_ignore_label,1,opencv_caffe._Internal.set_has_ignore_label,void opencv_caffe._Internal.set_has_ignore_label (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_ignore_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }",14658.0,14660.0,3.0,3.0,3.0,2,2,1,1,2,0,1,1,0,0,,0,0,2,1,1,void
2905,140873,default_instance,1,opencv_caffe.InputParameter.default_instance,InputParameter opencv_caffe.InputParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const InputParameter& default_instance() {
    return *internal_default_instance();
  }",12884.0,12886.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,InputParameter
2906,58958,ByteSizeLong,1,opencv_caffe.EltwiseParameter.ByteSizeLong,size_t opencv_caffe.EltwiseParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t EltwiseParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.EltwiseParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float coeff = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_coeff_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_coeff_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .opencv_caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operation());
    }

    // optional bool stable_prod_grad = 3 [default = true];
    if (cached_has...",19226.0,19258.0,1.0,1.0,33.0,28,10,23,9,0,2,4,6,0,0,,0,2,0,0,0,size_t
2907,271950,GetMetadata,1,opencv_tensorflow.GradientDef.GetMetadata,Metadata opencv_tensorflow.GradientDef.GetMetadata (),misc\tensorflow\function.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata GradientDef::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_function_2eproto_getter, &descriptor_table_function_2eproto_once,
      file_level_metadata_function_2eproto[4]);
}",1296.0,1300.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
2908,140880,internal_default_instance,1,opencv_caffe.InputParameter.internal_default_instance,InputParameter opencv_caffe.InputParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const InputParameter* internal_default_instance() {
    return reinterpret_cast<const InputParameter*>(
               &_InputParameter_default_instance_);
  }",12887.0,12890.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,InputParameter
2909,222804,descriptor_table_opencv_2donnx_2eproto_once,2,misc\onnx\opencv-onnx.pb.cc.descriptor_table_opencv_2donnx_2eproto_once,,misc\onnx\opencv-onnx.pb.cc,ANY descriptor_table_opencv_2donnx_2eproto_once,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,13,0,1,1,0,0,,0,0,0,0,0,
2910,108117,InternalSwap,1,opencv_caffe.PSROIPoolingParameter.InternalSwap,void opencv_caffe.PSROIPoolingParameter.InternalSwap (PSROIPoolingParameter*),misc\caffe\opencv-caffe.pb.cc,"void PSROIPoolingParameter::InternalSwap(PSROIPoolingParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PSROIPoolingParameter, group_size_)
      + sizeof(PSROIPoolingParameter::group_size_)
      - PROTOBUF_FIELD_OFFSET(PSROIPoolingParameter, spatial_scale_)>(
          reinterpret_cast<char*>(&spatial_scale_),
          reinterpret_cast<char*>(&other->spatial_scale_));
}",33883.0,33893.0,1.0,1.0,11.0,21,12,13,8,0,7,1,1,0,0,,0,7,2,1,1,void
2911,239190,Clear,1,opencv_onnx.TypeProto.Clear,void opencv_onnx.TypeProto.Clear (),misc\onnx\opencv-onnx.pb.cc,"void TypeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_onnx.TypeProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    denotation_.ClearNonDefaultToEmpty();
  }
  clear_value();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",5350.0,5363.0,1.0,1.0,14.0,8,5,8,4,0,3,2,2,0,0,,0,3,0,0,0,void
2912,222805,descriptor_table_opencv_2donnx_2eproto,2,misc\onnx\opencv-onnx.pb.cc.descriptor_table_opencv_2donnx_2eproto,,misc\onnx\opencv-onnx.pb.cc,ANY descriptor_table_opencv_2donnx_2eproto,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
2913,321116,fbb_,3,opencv_tflite.ModelBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
2914,9820,InternalSwap,1,opencv_caffe.NormalizeBBoxParameter.InternalSwap,void opencv_caffe.NormalizeBBoxParameter.InternalSwap (NormalizeBBoxParameter*),misc\caffe\opencv-caffe.pb.cc,"void NormalizeBBoxParameter::InternalSwap(NormalizeBBoxParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(scale_filler_, other->scale_filler_);
  swap(across_spatial_, other->across_spatial_);
  swap(channel_shared_, other->channel_shared_);
  swap(eps_, other->eps_);
}",5438.0,5446.0,1.0,1.0,9.0,10,4,12,7,0,10,1,1,0,0,,0,10,2,1,1,void
2915,321118,add_version,1,opencv_tflite.ModelBuilder.add_version,void opencv_tflite.ModelBuilder.add_version (uint32_t),misc\tflite\schema_generated.hpp,"void add_version(uint32_t version) {
    fbb_.AddElement<uint32_t>(Model::VT_VERSION, version, 0);
  }",9836.0,9838.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
2916,42590,set_has_normalize,1,opencv_caffe._Internal.set_has_normalize,void opencv_caffe._Internal.set_has_normalize (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_normalize(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }",14386.0,14388.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
2917,321117,start_,3,opencv_tflite.ModelBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2918,353886,descriptors,3,cv.dnn.cuda4dnn.csl.cudnn.TensorDescriptorsArray.descriptors,,src\cuda4dnn\csl\cudnn\cudnn.hpp,descriptors,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2919,370269,get_workspace_memory_in_bytes,1,cv.dnn.cuda4dnn.ConvolutionOp.get_workspace_memory_in_bytes,size_t cv.dnn.cuda4dnn.ConvolutionOp.get_workspace_memory_in_bytes (),src\cuda4dnn\primitives\convolution.hpp,std::size_t get_workspace_memory_in_bytes() const noexcept override { return scratch_mem_in_bytes; },582.0,582.0,9.0,108.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,size_t
2920,370275,stream,3,cv.dnn.cuda4dnn.ConvolutionOp.stream,,src\cuda4dnn\primitives\convolution.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2921,370276,cudnnHandle,3,cv.dnn.cuda4dnn.ConvolutionOp.cudnnHandle,,src\cuda4dnn\primitives\convolution.hpp,cudnnHandle,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2922,370277,filtersTensor,3,cv.dnn.cuda4dnn.ConvolutionOp.filtersTensor,,src\cuda4dnn\primitives\convolution.hpp,filtersTensor,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
2923,370278,biasTensor,3,cv.dnn.cuda4dnn.ConvolutionOp.biasTensor,,src\cuda4dnn\primitives\convolution.hpp,biasTensor,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
2924,370279,convoluter,3,cv.dnn.cuda4dnn.ConvolutionOp.convoluter,,src\cuda4dnn\primitives\convolution.hpp,convoluter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
2925,370280,transformed_shape,3,cv.dnn.cuda4dnn.ConvolutionOp.transformed_shape,,src\cuda4dnn\primitives\convolution.hpp,transformed_shape,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
2926,370281,inputTransformer,3,cv.dnn.cuda4dnn.ConvolutionOp.inputTransformer,,src\cuda4dnn\primitives\convolution.hpp,inputTransformer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2927,26218,_InternalSerialize,1,opencv_caffe.SolverState._InternalSerialize,"uint8_t opencv_caffe.SolverState._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* SolverState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.SolverState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 iter = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_iter(), target);
  }

  // optional string learned_net = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_learned_net().data(), static_cast<int>(this->_internal_learned_net().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      ""opencv_caffe.SolverState.learned_net"");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_learned_net(), ta...",9829.0,9872.0,1.0,1.0,44.0,58,8,58,12,0,1,6,6,0,0,,0,1,4,2,2,uint8_t
2928,370283,fusion_mode,3,cv.dnn.cuda4dnn.ConvolutionOp.fusion_mode,,src\cuda4dnn\primitives\convolution.hpp,fusion_mode,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,11,0,1,1,0,0,,0,0,0,0,0,
2929,157291,_has_bits_,3,opencv_caffe.PReLUParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
2930,157293,filler_,3,opencv_caffe.PReLUParameter.filler_,,misc\caffe\opencv-caffe.pb.hpp,* filler_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
2931,157292,_cached_size_,3,opencv_caffe.PReLUParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2932,157294,channel_shared_,3,opencv_caffe.PReLUParameter.channel_shared_,,misc\caffe\opencv-caffe.pb.hpp,channel_shared_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
2933,321136,add_operator_codes,1,opencv_tflite.ModelBuilder.add_operator_codes,void opencv_tflite.ModelBuilder.add_operator_codes (ANY),misc\tflite\schema_generated.hpp,"void add_operator_codes(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<opencv_tflite::OperatorCode>>> operator_codes) {
    fbb_.AddOffset(Model::VT_OPERATOR_CODES, operator_codes);
  }",9839.0,9841.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
2934,370287,crelu_ceil,3,cv.dnn.cuda4dnn.ConvolutionOp.crelu_ceil,,src\cuda4dnn\primitives\convolution.hpp,crelu_ceil,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2935,370284,activation,3,cv.dnn.cuda4dnn.ConvolutionOp.activation,,src\cuda4dnn\primitives\convolution.hpp,activation,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2936,370290,power_shift,3,cv.dnn.cuda4dnn.ConvolutionOp.power_shift,,src\cuda4dnn\primitives\convolution.hpp,power_shift,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2937,370285,relu_negative_slope,3,cv.dnn.cuda4dnn.ConvolutionOp.relu_negative_slope,,src\cuda4dnn\primitives\convolution.hpp,relu_negative_slope,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2938,370292,CUDNN,3,cv.dnn.cuda4dnn.ConvolutionOp.InternalFusionLocation.CUDNN,,src\cuda4dnn\primitives\convolution.hpp,CUDNN,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2939,370294,fusion_location,3,cv.dnn.cuda4dnn.ConvolutionOp.fusion_location,,src\cuda4dnn\primitives\convolution.hpp,fusion_location,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2940,370293,NATIVE,3,cv.dnn.cuda4dnn.ConvolutionOp.InternalFusionLocation.NATIVE,,src\cuda4dnn\primitives\convolution.hpp,NATIVE,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2941,239224,_InternalParse,1,opencv_onnx.TypeProto._InternalParse,"const char* opencv_onnx.TypeProto._InternalParse (char*,ANY*)",misc\onnx\opencv-onnx.pb.cc,"const char* TypeProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opencv_onnx.TypeProto.Tensor tensor_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tensor_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string denotation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_denotation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, ...",5365.0,5414.0,1.0,10.0,50.0,36,12,44,9,0,1,11,12,0,0,,0,1,4,2,2,const char*
2942,222841,AttributeProto_AttributeType_descriptor,1,opencv_onnx.AttributeProto_AttributeType_descriptor,EnumDescriptor opencv_onnx.AttributeProto_AttributeType_descriptor (),misc\onnx\opencv-onnx.pb.cc,"const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AttributeProto_AttributeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_opencv_2donnx_2eproto);
  return file_level_enum_descriptors_opencv_2donnx_2eproto[0];
}",564.0,567.0,1.0,1.0,4.0,4,3,4,4,1,2,1,1,0,0,,0,2,0,0,0,EnumDescriptor
2943,370289,power_scale,3,cv.dnn.cuda4dnn.ConvolutionOp.power_scale,,src\cuda4dnn\primitives\convolution.hpp,power_scale,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2944,321149,add_subgraphs,1,opencv_tflite.ModelBuilder.add_subgraphs,void opencv_tflite.ModelBuilder.add_subgraphs (ANY),misc\tflite\schema_generated.hpp,"void add_subgraphs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<opencv_tflite::SubGraph>>> subgraphs) {
    fbb_.AddOffset(Model::VT_SUBGRAPHS, subgraphs);
  }",9842.0,9844.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
2945,9862,GetMetadata,1,opencv_caffe.NormalizeBBoxParameter.GetMetadata,Metadata opencv_caffe.NormalizeBBoxParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata NormalizeBBoxParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[4]);
}",5448.0,5452.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
2946,222857,AttributeProto_AttributeType_IsValid,1,opencv_onnx.AttributeProto_AttributeType_IsValid,bool opencv_onnx.AttributeProto_AttributeType_IsValid (int),misc\onnx\opencv-onnx.pb.cc,"bool AttributeProto_AttributeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}",568.0,585.0,1.0,1.0,18.0,0,0,1,1,1,0,2,2,0,0,,0,0,2,1,1,bool
2947,108170,GetMetadata,1,opencv_caffe.PSROIPoolingParameter.GetMetadata,Metadata opencv_caffe.PSROIPoolingParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata PSROIPoolingParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[70]);
}",33895.0,33899.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
2948,321162,add_description,1,opencv_tflite.ModelBuilder.add_description,void opencv_tflite.ModelBuilder.add_description (ANY),misc\tflite\schema_generated.hpp,"void add_description(::flatbuffers::Offset<::flatbuffers::String> description) {
    fbb_.AddOffset(Model::VT_DESCRIPTION, description);
  }",9845.0,9847.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
2949,370320,forward,1,cv.dnn.cuda4dnn.CropAndResizeOp.forward,"void cv.dnn.cuda4dnn.CropAndResizeOp.forward (ANY,ANY,ANY)",src\cuda4dnn\primitives\crop_and_resize.hpp,"void forward(
            const std::vector<cv::Ptr<BackendWrapper>>& inputs,
            const std::vector<cv::Ptr<BackendWrapper>>& outputs,
            csl::Workspace& workspace) override
        {
            CV_Assert(inputs.size() == 2 && outputs.size() == 1);

            auto input_wrapper = inputs[0].dynamicCast<wrapper_type>();
            auto input = input_wrapper->getView();

            auto box_wrapper = inputs[1].dynamicCast<wrapper_type>();
            auto boxes = box_wrapper->getView();

            auto output_wrapper = outputs[0].dynamicCast<wrapper_type>();
            auto output = output_wrapper->getSpan();

            kernels::crop_and_resize(stream, output, input, static_cast<csl::View<T>>(boxes));
        }",26.0,43.0,9.0,9.0,18.0,22,7,19,10,0,1,1,1,0,0,,0,1,6,3,3,void
2950,321175,add_buffers,1,opencv_tflite.ModelBuilder.add_buffers,void opencv_tflite.ModelBuilder.add_buffers (ANY),misc\tflite\schema_generated.hpp,"void add_buffers(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<opencv_tflite::Buffer>>> buffers) {
    fbb_.AddOffset(Model::VT_BUFFERS, buffers);
  }",9848.0,9850.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
2951,9882,set_has_flip,1,opencv_caffe._Internal.set_has_flip,void opencv_caffe._Internal.set_has_flip (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_flip(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }",5459.0,5461.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
2952,353947,~LRNDescriptor,1,cv.dnn.cuda4dnn.csl.cudnn.LRNDescriptor.~LRNDescriptor,ANY cv.dnn.cuda4dnn.csl.cudnn.LRNDescriptor.~LRNDescriptor (),src\cuda4dnn\csl\cudnn\lrn.hpp,"~LRNDescriptor() noexcept {
            if (descriptor != nullptr) {
                /* cudnnDestroyLRNDescriptor will not fail for a valid descriptor */
                CUDA4DNN_CHECK_CUDNN(cudnnDestroyLRNDescriptor(descriptor));
            }
        }",53.0,58.0,9.0,16.0,6.0,7,2,10,3,0,3,2,2,1,0,,0,3,0,0,0,ANY
2953,42654,SharedCtor,1,opencv_caffe.LossParameter.SharedCtor,void opencv_caffe.LossParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void LossParameter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ignore_label_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&normalize_) -
    reinterpret_cast<char*>(&ignore_label_)) + sizeof(normalize_));
normalization_ = 1;
}",14410.0,14416.0,1.0,1.0,7.0,17,7,5,3,0,5,1,1,0,0,,0,5,0,0,0,void
2954,321188,add_metadata_buffer,1,opencv_tflite.ModelBuilder.add_metadata_buffer,void opencv_tflite.ModelBuilder.add_metadata_buffer (ANY),misc\tflite\schema_generated.hpp,"void add_metadata_buffer(::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> metadata_buffer) {
    fbb_.AddOffset(Model::VT_METADATA_BUFFER, metadata_buffer);
  }",9851.0,9853.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
2955,9893,set_has_clip,1,opencv_caffe._Internal.set_has_clip,void opencv_caffe._Internal.set_has_clip (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_clip(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }",6207.0,6209.0,3.0,3.0,3.0,2,2,1,1,2,0,1,1,0,0,,0,0,2,1,1,void
2956,9904,set_has_img_size,1,opencv_caffe._Internal.set_has_img_size,void opencv_caffe._Internal.set_has_img_size (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_img_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }",5465.0,5467.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
2957,321201,add_metadata,1,opencv_tflite.ModelBuilder.add_metadata,void opencv_tflite.ModelBuilder.add_metadata (ANY),misc\tflite\schema_generated.hpp,"void add_metadata(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<opencv_tflite::Metadata>>> metadata) {
    fbb_.AddOffset(Model::VT_METADATA, metadata);
  }",9854.0,9856.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
2958,222906,TensorProto_DataType_descriptor,1,opencv_onnx.TensorProto_DataType_descriptor,EnumDescriptor opencv_onnx.TensorProto_DataType_descriptor (),misc\onnx\opencv-onnx.pb.cc,"const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TensorProto_DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_opencv_2donnx_2eproto);
  return file_level_enum_descriptors_opencv_2donnx_2eproto[1];
}",603.0,606.0,1.0,1.0,4.0,4,3,4,4,1,2,1,1,0,0,,0,2,0,0,0,EnumDescriptor
2959,9915,set_has_img_h,1,opencv_caffe._Internal.set_has_img_h,void opencv_caffe._Internal.set_has_img_h (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_img_h(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }",5468.0,5470.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
2960,321214,add_signature_defs,1,opencv_tflite.ModelBuilder.add_signature_defs,void opencv_tflite.ModelBuilder.add_signature_defs (ANY),misc\tflite\schema_generated.hpp,"void add_signature_defs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<opencv_tflite::SignatureDef>>> signature_defs) {
    fbb_.AddOffset(Model::VT_SIGNATURE_DEFS, signature_defs);
  }",9857.0,9859.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
2961,9926,set_has_img_w,1,opencv_caffe._Internal.set_has_img_w,void opencv_caffe._Internal.set_has_img_w (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_img_w(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }",5471.0,5473.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
2962,222922,TensorProto_DataType_IsValid,1,opencv_onnx.TensorProto_DataType_IsValid,bool opencv_onnx.TensorProto_DataType_IsValid (int),misc\onnx\opencv-onnx.pb.cc,"bool TensorProto_DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}",607.0,629.0,1.0,1.0,23.0,0,0,1,1,2,0,2,2,0,0,,0,0,2,1,1,bool
2963,321227,ModelBuilder,1,opencv_tflite.ModelBuilder.ModelBuilder,ANY opencv_tflite.ModelBuilder.ModelBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit ModelBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",9860.0,9863.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
2964,141005,GetCachedSize,1,opencv_caffe.InputParameter.GetCachedSize,int opencv_caffe.InputParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },12935.0,12935.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
2965,59086,MergeFrom,1,opencv_caffe.EltwiseParameter.MergeFrom,void opencv_caffe.EltwiseParameter.MergeFrom (EltwiseParameter),misc\caffe\opencv-caffe.pb.cc,"void EltwiseParameter::MergeFrom(const EltwiseParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.EltwiseParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  coeff_.MergeFrom(from.coeff_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      operation_ = from.operation_;
    }
    if (cached_has_bits & 0x00000002u) {
      stable_prod_grad_ = from.stable_prod_grad_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",19273.0,19291.0,1.0,1.0,19.0,21,8,19,8,2,8,4,6,0,0,,0,8,2,1,1,void
2966,9937,set_has_step,1,opencv_caffe._Internal.set_has_step,void opencv_caffe._Internal.set_has_step (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_step(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }",5474.0,5476.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
2967,75476,InternalSwap,1,opencv_caffe.PoolingParameter.InternalSwap,void opencv_caffe.PoolingParameter.InternalSwap (PoolingParameter*),misc\caffe\opencv-caffe.pb.cc,"void PoolingParameter::InternalSwap(PoolingParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PoolingParameter, global_pooling_)
      + sizeof(PoolingParameter::global_pooling_)
      - PROTOBUF_FIELD_OFFSET(PoolingParameter, pool_)>(
          reinterpret_cast<char*>(&pool_),
          reinterpret_cast<char*>(&other->pool_));
  swap(stride_, other->stride_);
  swap(ceil_mode_, other->ceil_mode_);
}",24371.0,24383.0,1.0,1.0,13.0,23,12,17,10,0,11,1,1,0,0,,0,11,2,1,1,void
2968,321238,Finish,1,opencv_tflite.ModelBuilder.Finish,Offset<Model> opencv_tflite.ModelBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<Model> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Model>(end);
    return o;
  }",9864.0,9868.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<Model>
2969,354007,get,1,cv.dnn.cuda4dnn.csl.cudnn.LRNDescriptor.get,cudnnLRNDescriptor_t cv.dnn.cuda4dnn.csl.cudnn.LRNDescriptor.get (),src\cuda4dnn\csl\cudnn\lrn.hpp,cudnnLRNDescriptor_t get() const noexcept { return descriptor; },68.0,68.0,9.0,72.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,cudnnLRNDescriptor_t
2970,157400,descriptor,1,opencv_caffe.NormalizedBBox.descriptor,Descriptor opencv_caffe.NormalizedBBox.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",19832.0,19834.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
2971,91868,_InternalParse,1,opencv_caffe.V1LayerParameter._InternalParse,"const char* opencv_caffe.V1LayerParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* V1LayerParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .opencv_caffe.V0LayerParameter layer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_layer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string bottom = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_bottom();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::i...",29452.0,29911.0,1.0,10.0,460.0,341,16,386,10,0,2,125,234,2,2,,0,2,4,2,2,const char*
2972,354013,getType,1,cv.dnn.cuda4dnn.csl.cudnn.LRNDescriptor.getType,LRNType cv.dnn.cuda4dnn.csl.cudnn.LRNDescriptor.getType (),src\cuda4dnn\csl\cudnn\lrn.hpp,LRNType getType() const noexcept { return type; },69.0,69.0,9.0,57.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,LRNType
2973,157406,GetDescriptor,1,opencv_caffe.NormalizedBBox.GetDescriptor,Descriptor opencv_caffe.NormalizedBBox.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",19835.0,19837.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
2974,370399,stream,3,cv.dnn.cuda4dnn.CropAndResizeOp.stream,,src\cuda4dnn\primitives\crop_and_resize.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2975,9948,set_has_step_h,1,opencv_caffe._Internal.set_has_step_h,void opencv_caffe._Internal.set_has_step_h (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_step_h(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }",5477.0,5479.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
2976,354019,constructor,1,cv.dnn.cuda4dnn.csl.cudnn.LRNDescriptor.constructor,"void cv.dnn.cuda4dnn.csl.cudnn.LRNDescriptor.constructor (ANY,double,double,double,LRNType)",src\cuda4dnn\csl\cudnn\lrn.hpp,"void constructor(std::size_t local_size, double alpha, double beta, double k, LRNType type_) {
            CV_Assert(CUDNN_LRN_MIN_N <= local_size && local_size <= CUDNN_LRN_MAX_N);

            type = type_;

            CUDA4DNN_CHECK_CUDNN(cudnnCreateLRNDescriptor(&descriptor));
            try {
                CUDA4DNN_CHECK_CUDNN(
                    cudnnSetLRNDescriptor(
                        descriptor,
                        local_size,
                        alpha,
                        beta,
                        k
                    )
               );
            } catch (...) {
                /* cudnnDestroyLRNDescriptor will not fail for a valid descriptor */
                CUDA4DNN_CHECK_CUDNN(cudnnDestroyLRNDescriptor(descriptor));
                throw;
            }
        }",72.0,93.0,9.0,12.0,22.0,25,6,36,13,0,6,2,2,0,0,,0,6,10,5,5,void
2977,9959,set_has_step_w,1,opencv_caffe._Internal.set_has_step_w,void opencv_caffe._Internal.set_has_step_w (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_step_w(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }",5480.0,5482.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
2978,157417,GetReflection,1,opencv_caffe.NormalizedBBox.GetReflection,Reflection opencv_caffe.NormalizedBBox.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",19838.0,19840.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
2979,321262,CreateModel,1,opencv_tflite.CreateModel,"Offset<Model> opencv_tflite.CreateModel (ANY,uint32_t,ANY,ANY,ANY,ANY,ANY,ANY,ANY)",misc\tflite\schema_generated.hpp,"inline ::flatbuffers::Offset<Model> CreateModel(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t version = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<opencv_tflite::OperatorCode>>> operator_codes = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<opencv_tflite::SubGraph>>> subgraphs = 0,
    ::flatbuffers::Offset<::flatbuffers::String> description = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<opencv_tflite::Buffer>>> buffers = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> metadata_buffer = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<opencv_tflite::Metadata>>> metadata = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<opencv_tflite::SignatureDef>>> signature_defs = 0) {
  ModelBuilder builder_(_fbb);
  builder_.add_signature_defs(signature_defs);
  builder_.add_metadata(metadata);
  builder_.add_metadata_buffer(metadata_buffe...",9871.0,9891.0,1.0,1.0,21.0,9,1,18,10,1,0,1,1,0,0,,0,0,18,9,9,Offset<Model>
2980,42736,SetCachedSize,1,opencv_caffe.LossParameter.SetCachedSize,void opencv_caffe.LossParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void LossParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",14435.0,14437.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
2981,9970,set_has_offset,1,opencv_caffe._Internal.set_has_offset,void opencv_caffe._Internal.set_has_offset (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }",5483.0,5485.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
2982,157428,default_instance,1,opencv_caffe.NormalizedBBox.default_instance,NormalizedBBox opencv_caffe.NormalizedBBox.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const NormalizedBBox& default_instance() {
    return *internal_default_instance();
  }",19841.0,19843.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,NormalizedBBox
2983,42746,Clear,1,opencv_caffe.LossParameter.Clear,void opencv_caffe.LossParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void LossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.LossParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&ignore_label_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&normalize_) -
        reinterpret_cast<char*>(&ignore_label_)) + sizeof(normalize_));
    normalization_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",14439.0,14454.0,1.0,1.0,16.0,18,9,12,6,0,7,2,2,0,0,,0,7,0,0,0,void
2984,370427,batch_size,3,cv.dnn.cuda4dnn.DetectionOutputConfiguration.batch_size,,src\cuda4dnn\primitives\detection_output.hpp,batch_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2985,157435,internal_default_instance,1,opencv_caffe.NormalizedBBox.internal_default_instance,NormalizedBBox opencv_caffe.NormalizedBBox.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const NormalizedBBox* internal_default_instance() {
    return reinterpret_cast<const NormalizedBBox*>(
               &_NormalizedBBox_default_instance_);
  }",19844.0,19847.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,NormalizedBBox
2986,370431,code_type,3,cv.dnn.cuda4dnn.DetectionOutputConfiguration.code_type,,src\cuda4dnn\primitives\detection_output.hpp,code_type,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2987,370432,share_location,3,cv.dnn.cuda4dnn.DetectionOutputConfiguration.share_location,,src\cuda4dnn\primitives\detection_output.hpp,share_location,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2988,370433,num_priors,3,cv.dnn.cuda4dnn.DetectionOutputConfiguration.num_priors,,src\cuda4dnn\primitives\detection_output.hpp,num_priors,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2989,370434,num_classes,3,cv.dnn.cuda4dnn.DetectionOutputConfiguration.num_classes,,src\cuda4dnn\primitives\detection_output.hpp,num_classes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2990,370435,background_class_id,3,cv.dnn.cuda4dnn.DetectionOutputConfiguration.background_class_id,,src\cuda4dnn\primitives\detection_output.hpp,background_class_id,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2991,370436,transpose_location,3,cv.dnn.cuda4dnn.DetectionOutputConfiguration.transpose_location,,src\cuda4dnn\primitives\detection_output.hpp,transpose_location,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2992,370437,variance_encoded_in_target,3,cv.dnn.cuda4dnn.DetectionOutputConfiguration.variance_encoded_in_target,,src\cuda4dnn\primitives\detection_output.hpp,variance_encoded_in_target,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2993,370438,normalized_bbox,3,cv.dnn.cuda4dnn.DetectionOutputConfiguration.normalized_bbox,,src\cuda4dnn\primitives\detection_output.hpp,normalized_bbox,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2994,370439,clip_box,3,cv.dnn.cuda4dnn.DetectionOutputConfiguration.clip_box,,src\cuda4dnn\primitives\detection_output.hpp,clip_box,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2995,370440,classwise_topK,3,cv.dnn.cuda4dnn.DetectionOutputConfiguration.classwise_topK,,src\cuda4dnn\primitives\detection_output.hpp,classwise_topK,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2996,370441,confidence_threshold,3,cv.dnn.cuda4dnn.DetectionOutputConfiguration.confidence_threshold,,src\cuda4dnn\primitives\detection_output.hpp,confidence_threshold,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2997,222986,Version_descriptor,1,opencv_onnx.Version_descriptor,EnumDescriptor opencv_onnx.Version_descriptor (),misc\onnx\opencv-onnx.pb.cc,"const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Version_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_opencv_2donnx_2eproto);
  return file_level_enum_descriptors_opencv_2donnx_2eproto[2];
}",652.0,655.0,1.0,1.0,4.0,4,3,4,4,1,2,1,1,0,0,,0,2,0,0,0,EnumDescriptor
2998,370442,nms_threshold,3,cv.dnn.cuda4dnn.DetectionOutputConfiguration.nms_threshold,,src\cuda4dnn\primitives\detection_output.hpp,nms_threshold,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2999,370443,keepTopK,3,cv.dnn.cuda4dnn.DetectionOutputConfiguration.keepTopK,,src\cuda4dnn\primitives\detection_output.hpp,keepTopK,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3000,370445,GRID_NMS_CUTOFF,3,cv.dnn.cuda4dnn.DetectionOutputOp.GRID_NMS_CUTOFF,,src\cuda4dnn\primitives\detection_output.hpp,GRID_NMS_CUTOFF = 32,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3001,370447,DetectionOutputOp,1,cv.dnn.cuda4dnn.DetectionOutputOp.DetectionOutputOp,"ANY cv.dnn.cuda4dnn.DetectionOutputOp.DetectionOutputOp (ANY,DetectionOutputConfiguration)",src\cuda4dnn\primitives\detection_output.hpp,"DetectionOutputOp(csl::Stream stream_, const DetectionOutputConfiguration& config)
            : stream(std::move(stream_))
        {
            corner_true_or_center_false = (config.code_type == DetectionOutputConfiguration::CodeType::CORNER);

            share_location = config.share_location;
            num_priors = config.num_priors;
            num_classes = config.num_classes;
            background_class_id = config.background_class_id;

            transpose_location = config.transpose_location;
            variance_encoded_in_target = config.variance_encoded_in_target;
            normalized_bbox = config.normalized_bbox;
            clip_box = config.clip_box;

            classwise_topK = config.classwise_topK;
            confidence_threshold = config.confidence_threshold;
            nms_threshold = config.nms_threshold;

            keepTopK = config.keepTopK;
            CV_Assert(keepTopK > 0);

            if (classwise_topK == -1)
            {
                c...",70.0,120.0,9.0,9.0,51.0,75,10,82,24,0,52,4,5,6,0,,0,52,4,2,2,ANY
3002,386832,ReadDarknetFromWeightsStream,1,cv.dnn.darknet.ReadDarknetFromWeightsStream,"bool cv.dnn.darknet.ReadDarknetFromWeightsStream (ANY,NetParameter*)",src\darknet\darknet_io.cpp,"bool ReadDarknetFromWeightsStream(std::istream &ifile, NetParameter *net)
            {
                int32_t major_ver, minor_ver, revision;
                ifile.read(reinterpret_cast<char *>(&major_ver), sizeof(int32_t));
                ifile.read(reinterpret_cast<char *>(&minor_ver), sizeof(int32_t));
                ifile.read(reinterpret_cast<char *>(&revision), sizeof(int32_t));

                uint64_t seen;
                if ((major_ver * 10 + minor_ver) >= 2) {
                    ifile.read(reinterpret_cast<char *>(&seen), sizeof(uint64_t));
                }
                else {
                    int32_t iseen = 0;
                    ifile.read(reinterpret_cast<char *>(&iseen), sizeof(int32_t));
                    seen = iseen;
                }
                bool transpose = (major_ver > 1000) || (minor_ver > 1000);
                if(transpose)
                    CV_Error(cv::Error::StsNotImplemented, ""Transpose the weights (except for convolutional) is n...",973.0,1091.0,13.0,13.0,119.0,144,23,143,36,0,6,12,24,1,0,,0,6,4,2,2,bool
3003,75539,GetMetadata,1,opencv_caffe.PoolingParameter.GetMetadata,Metadata opencv_caffe.PoolingParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata PoolingParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[48]);
}",24385.0,24389.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
3004,239399,_InternalSerialize,1,opencv_onnx.TypeProto._InternalSerialize,"uint8_t opencv_onnx.TypeProto._InternalSerialize (uint8_t*,ANY*)",misc\onnx\opencv-onnx.pb.cc,"uint8_t* TypeProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_onnx.TypeProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opencv_onnx.TypeProto.Tensor tensor_type = 1;
  if (_internal_has_tensor_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tensor_type(this), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional string denotation = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_denotation().data(), static_cast<int>(this->_internal_denotation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      ""opencv_onnx.TypeProto.denotation"");
    target = stream->WriteStringMaybeAliased(
   ...",5416.0,5447.0,1.0,1.0,32.0,37,8,36,11,0,2,4,4,0,1,,0,2,4,2,2,uint8_t
3005,59178,InternalSwap,1,opencv_caffe.EltwiseParameter.InternalSwap,void opencv_caffe.EltwiseParameter.InternalSwap (EltwiseParameter*),misc\caffe\opencv-caffe.pb.cc,"void EltwiseParameter::InternalSwap(EltwiseParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  coeff_.InternalSwap(&other->coeff_);
  swap(operation_, other->operation_);
  swap(stable_prod_grad_, other->stable_prod_grad_);
}",19304.0,19311.0,1.0,1.0,8.0,11,4,10,6,0,8,1,1,0,0,,0,8,2,1,1,void
3006,321323,CreateModelDirect,1,opencv_tflite.CreateModelDirect,"Offset<Model> opencv_tflite.CreateModelDirect (ANY,uint32_t,ANY*,ANY*,char*,ANY*,ANY*,ANY*,ANY*)",misc\tflite\schema_generated.hpp,"inline ::flatbuffers::Offset<Model> CreateModelDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t version = 0,
    const std::vector<::flatbuffers::Offset<opencv_tflite::OperatorCode>> *operator_codes = nullptr,
    const std::vector<::flatbuffers::Offset<opencv_tflite::SubGraph>> *subgraphs = nullptr,
    const char *description = nullptr,
    const std::vector<::flatbuffers::Offset<opencv_tflite::Buffer>> *buffers = nullptr,
    const std::vector<int32_t> *metadata_buffer = nullptr,
    const std::vector<::flatbuffers::Offset<opencv_tflite::Metadata>> *metadata = nullptr,
    const std::vector<::flatbuffers::Offset<opencv_tflite::SignatureDef>> *signature_defs = nullptr) {
  auto operator_codes__ = operator_codes ? _fbb.CreateVector<::flatbuffers::Offset<opencv_tflite::OperatorCode>>(*operator_codes) : 0;
  auto subgraphs__ = subgraphs ? _fbb.CreateVector<::flatbuffers::Offset<opencv_tflite::SubGraph>>(*subgraphs) : 0;
  auto description__ = description ? _fbb.Create...",9893.0,9920.0,1.0,1.0,28.0,55,7,49,19,0,1,1,1,0,1,,0,0,18,9,9,Offset<Model>
3007,42799,_InternalParse,1,opencv_caffe.LossParameter._InternalParse,"const char* opencv_caffe.LossParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* LossParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 ignore_label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ignore_label(&has_bits);
          ignore_label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool normalize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_normalize(&has_bits);
          normalize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto han...",14456.0,14516.0,1.0,10.0,61.0,49,12,53,13,0,6,14,19,1,3,,0,4,4,2,2,const char*
3008,10034,SharedCtor,1,opencv_caffe.PriorBoxParameter.SharedCtor,void opencv_caffe.PriorBoxParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void PriorBoxParameter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&img_size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&step_w_) -
    reinterpret_cast<char*>(&img_size_)) + sizeof(step_w_));
flip_ = true;
clip_ = true;
offset_ = 0.5f;
}",5523.0,5531.0,1.0,1.0,9.0,19,7,7,5,0,7,1,1,0,0,,0,7,0,0,0,void
3009,26421,ByteSizeLong,1,opencv_caffe.SolverState.ByteSizeLong,size_t opencv_caffe.SolverState.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t SolverState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.SolverState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opencv_caffe.BlobProto history = 3;
  total_size += 1UL * this->_internal_history_size();
  for (const auto& msg : this->history_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string learned_net = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_learned_net());
    }

    // optional int32 iter = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_ite...",9874.0,9910.0,1.0,1.0,37.0,34,10,29,8,0,3,6,9,1,0,,0,3,0,0,0,size_t
3010,141120,shape_,3,opencv_caffe.InputParameter.shape_,,misc\caffe\opencv-caffe.pb.hpp,shape_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
3011,141121,_cached_size_,3,opencv_caffe.InputParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3012,354116,descriptor,3,cv.dnn.cuda4dnn.csl.cudnn.LRNDescriptor.descriptor,,src\cuda4dnn\csl\cudnn\lrn.hpp,descriptor,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
3013,354117,type,3,cv.dnn.cuda4dnn.csl.cudnn.LRNDescriptor.type,,src\cuda4dnn\csl\cudnn\lrn.hpp,type,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3014,59218,GetMetadata,1,opencv_caffe.EltwiseParameter.GetMetadata,Metadata opencv_caffe.EltwiseParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata EltwiseParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[31]);
}",19313.0,19317.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
3015,223069,set_has_f,1,opencv_onnx._Internal.set_has_f,void opencv_onnx._Internal.set_has_f (HasBits*),misc\onnx\opencv-onnx.pb.cc,"static void set_has_f(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }",686.0,688.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
3016,288606,name_,3,opencv_tensorflow.OpDef_ArgDef.name_,,misc\tensorflow\op_def.pb.hpp,name_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3017,288607,description_,3,opencv_tensorflow.OpDef_ArgDef.description_,,misc\tensorflow\op_def.pb.hpp,description_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3018,288608,type_attr_,3,opencv_tensorflow.OpDef_ArgDef.type_attr_,,misc\tensorflow\op_def.pb.hpp,type_attr_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3019,288609,number_attr_,3,opencv_tensorflow.OpDef_ArgDef.number_attr_,,misc\tensorflow\op_def.pb.hpp,number_attr_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3020,288610,type_list_attr_,3,opencv_tensorflow.OpDef_ArgDef.type_list_attr_,,misc\tensorflow\op_def.pb.hpp,type_list_attr_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3021,288611,type_,3,opencv_tensorflow.OpDef_ArgDef.type_,,misc\tensorflow\op_def.pb.hpp,type_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
3022,288612,is_ref_,3,opencv_tensorflow.OpDef_ArgDef.is_ref_,,misc\tensorflow\op_def.pb.hpp,is_ref_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
3023,288613,_cached_size_,3,opencv_tensorflow.OpDef_ArgDef._cached_size_,,misc\tensorflow\op_def.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3024,59238,set_has_alpha,1,opencv_caffe._Internal.set_has_alpha,void opencv_caffe._Internal.set_has_alpha (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_alpha(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }",30840.0,30842.0,3.0,3.0,3.0,2,2,1,1,2,0,1,1,0,0,,0,0,2,1,1,void
3025,223080,set_has_i,1,opencv_onnx._Internal.set_has_i,void opencv_onnx._Internal.set_has_i (HasBits*),misc\onnx\opencv-onnx.pb.cc,"static void set_has_i(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }",689.0,691.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
3026,272237,descriptor,1,opencv_tensorflow.FunctionDefLibrary.descriptor,Descriptor opencv_tensorflow.FunctionDefLibrary.descriptor (),misc\tensorflow\function.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",120.0,122.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
3027,272243,GetDescriptor,1,opencv_tensorflow.FunctionDefLibrary.GetDescriptor,Descriptor opencv_tensorflow.FunctionDefLibrary.GetDescriptor (),misc\tensorflow\function.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",123.0,125.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
3028,157560,GetCachedSize,1,opencv_caffe.NormalizedBBox.GetCachedSize,int opencv_caffe.NormalizedBBox.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },19892.0,19892.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
3029,75645,SharedCtor,1,opencv_caffe.PowerParameter.SharedCtor,void opencv_caffe.PowerParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void PowerParameter::SharedCtor() {
shift_ = 0;
power_ = 1;
scale_ = 1;
}",24426.0,24430.0,1.0,1.0,5.0,3,1,3,3,0,3,1,1,0,0,,0,3,0,0,0,void
3030,272254,GetReflection,1,opencv_tensorflow.FunctionDefLibrary.GetReflection,Reflection opencv_tensorflow.FunctionDefLibrary.GetReflection (),misc\tensorflow\function.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",126.0,128.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
3031,272265,default_instance,1,opencv_tensorflow.FunctionDefLibrary.default_instance,FunctionDefLibrary opencv_tensorflow.FunctionDefLibrary.default_instance (),misc\tensorflow\function.pb.hpp,"static const FunctionDefLibrary& default_instance() {
    return *internal_default_instance();
  }",129.0,131.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,FunctionDefLibrary
3032,10122,SetCachedSize,1,opencv_caffe.PriorBoxParameter.SetCachedSize,void opencv_caffe.PriorBoxParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void PriorBoxParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",5550.0,5552.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
3033,272272,internal_default_instance,1,opencv_tensorflow.FunctionDefLibrary.internal_default_instance,FunctionDefLibrary opencv_tensorflow.FunctionDefLibrary.internal_default_instance (),misc\tensorflow\function.pb.hpp,"static inline const FunctionDefLibrary* internal_default_instance() {
    return reinterpret_cast<const FunctionDefLibrary*>(
               &_FunctionDefLibrary_default_instance_);
  }",132.0,135.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,FunctionDefLibrary
3034,59283,SharedCtor,1,opencv_caffe.ELUParameter.SharedCtor,void opencv_caffe.ELUParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void ELUParameter::SharedCtor() {
alpha_ = 1;
}",19346.0,19348.0,1.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,void
3035,10132,Clear,1,opencv_caffe.PriorBoxParameter.Clear,void opencv_caffe.PriorBoxParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void PriorBoxParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.PriorBoxParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  min_size_.Clear();
  max_size_.Clear();
  aspect_ratio_.Clear();
  variance_.Clear();
  offset_h_.Clear();
  offset_w_.Clear();
  width_.Clear();
  height_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&img_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&step_w_) -
        reinterpret_cast<char*>(&img_size_)) + sizeof(step_w_));
    flip_ = true;
    clip_ = true;
  }
  offset_ = 0.5f;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",5554.0,5579.0,1.0,1.0,26.0,28,9,22,16,0,17,2,2,0,0,,0,17,0,0,0,void
3036,419733,alpha,3,cv.dnn.CeluFunctor.alpha,,src\layers\elementwise_layers.cpp,alpha,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3037,223134,t,1,opencv_onnx.AttributeProto._Internal.t,TensorProto opencv_onnx.AttributeProto._Internal.t (AttributeProto*),misc\onnx\opencv-onnx.pb.cc,"const ::opencv_onnx::TensorProto&
AttributeProto::_Internal::t(const AttributeProto* msg) {
  return *msg->t_;
}",705.0,708.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,TensorProto
3038,239528,ByteSizeLong,1,opencv_onnx.TypeProto.ByteSizeLong,size_t opencv_onnx.TypeProto.ByteSizeLong (),misc\onnx\opencv-onnx.pb.cc,"size_t TypeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_onnx.TypeProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string denotation = 6;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_denotation());
  }

  switch (value_case()) {
    // .opencv_onnx.TypeProto.Tensor tensor_type = 1;
    case kTensorType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.tensor_type_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}",5449.0,5478.0,1.0,1.0,30.0,20,10,19,10,0,5,5,3,0,0,,0,5,0,0,0,size_t
3039,419753,calculate,1,cv.dnn.CeluFunctor.calculate,float cv.dnn.CeluFunctor.calculate (float),src\layers\elementwise_layers.cpp,"inline float calculate(float x) const
    {
        return max(0.f, x) + min(0.f, alpha * expm1(x / alpha));
    }",2085.0,2088.0,5.0,5.0,4.0,3,3,4,2,0,2,1,1,0,0,,0,2,2,1,1,float
3040,223144,g,1,opencv_onnx.AttributeProto._Internal.g,GraphProto opencv_onnx.AttributeProto._Internal.g (AttributeProto*),misc\onnx\opencv-onnx.pb.cc,"const ::opencv_onnx::GraphProto&
AttributeProto::_Internal::g(const AttributeProto* msg) {
  return *msg->g_;
}",709.0,712.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,GraphProto
3041,141227,descriptor,1,opencv_caffe.LogParameter.descriptor,Descriptor opencv_caffe.LogParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",13037.0,13039.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
3042,141233,GetDescriptor,1,opencv_caffe.LogParameter.GetDescriptor,Descriptor opencv_caffe.LogParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",13040.0,13042.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
3043,288692,descriptor,1,opencv_tensorflow.OpDef_AttrDef.descriptor,Descriptor opencv_tensorflow.OpDef_AttrDef.descriptor (),misc\tensorflow\op_def.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",354.0,356.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
3044,75700,SetCachedSize,1,opencv_caffe.PowerParameter.SetCachedSize,void opencv_caffe.PowerParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void PowerParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",24449.0,24451.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
3045,288698,GetDescriptor,1,opencv_tensorflow.OpDef_AttrDef.GetDescriptor,Descriptor opencv_tensorflow.OpDef_AttrDef.GetDescriptor (),misc\tensorflow\op_def.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",357.0,359.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
3046,419771,setKernelParams,1,cv.dnn.CeluFunctor.setKernelParams,void cv.dnn.CeluFunctor.setKernelParams (ANY),src\layers\elementwise_layers.cpp,"inline void setKernelParams(ocl::Kernel& kernel) const
    {
        kernel.set(3, alpha);
    }",2090.0,2093.0,5.0,5.0,4.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
3047,141244,GetReflection,1,opencv_caffe.LogParameter.GetReflection,Reflection opencv_caffe.LogParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",13043.0,13045.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
3048,75710,Clear,1,opencv_caffe.PowerParameter.Clear,void opencv_caffe.PowerParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void PowerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.PowerParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    shift_ = 0;
    power_ = 1;
    scale_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",24453.0,24467.0,1.0,1.0,15.0,10,5,10,6,0,5,2,2,0,0,,0,5,0,0,0,void
3049,59332,SetCachedSize,1,opencv_caffe.ELUParameter.SetCachedSize,void opencv_caffe.ELUParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void ELUParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",19367.0,19369.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
3050,288709,GetReflection,1,opencv_tensorflow.OpDef_AttrDef.GetReflection,Reflection opencv_tensorflow.OpDef_AttrDef.GetReflection (),misc\tensorflow\op_def.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",360.0,362.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
3051,141255,default_instance,1,opencv_caffe.LogParameter.default_instance,LogParameter opencv_caffe.LogParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const LogParameter& default_instance() {
    return *internal_default_instance();
  }",13046.0,13048.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,LogParameter
3052,26569,MergeFrom,1,opencv_caffe.SolverState.MergeFrom,void opencv_caffe.SolverState.MergeFrom (SolverState),misc\caffe\opencv-caffe.pb.cc,"void SolverState::MergeFrom(const SolverState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.SolverState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  history_.MergeFrom(from.history_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_learned_net(from._internal_learned_net());
    }
    if (cached_has_bits & 0x00000002u) {
      iter_ = from.iter_;
    }
    if (cached_has_bits & 0x00000004u) {
      current_step_ = from.current_step_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",9925.0,9946.0,1.0,1.0,22.0,23,8,21,8,0,8,5,8,0,0,,0,8,2,1,1,void
3053,59342,Clear,1,opencv_caffe.ELUParameter.Clear,void opencv_caffe.ELUParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void ELUParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.ELUParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alpha_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",19371.0,19380.0,1.0,1.0,10.0,5,3,5,4,0,2,1,1,0,0,,0,2,0,0,0,void
3054,141262,internal_default_instance,1,opencv_caffe.LogParameter.internal_default_instance,LogParameter opencv_caffe.LogParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const LogParameter* internal_default_instance() {
    return reinterpret_cast<const LogParameter*>(
               &_LogParameter_default_instance_);
  }",13049.0,13052.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,LogParameter
3055,288720,default_instance,1,opencv_tensorflow.OpDef_AttrDef.default_instance,OpDef_AttrDef opencv_tensorflow.OpDef_AttrDef.default_instance (),misc\tensorflow\op_def.pb.hpp,"static const OpDef_AttrDef& default_instance() {
    return *internal_default_instance();
  }",363.0,365.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,OpDef_AttrDef
3056,288727,internal_default_instance,1,opencv_tensorflow.OpDef_AttrDef.internal_default_instance,OpDef_AttrDef opencv_tensorflow.OpDef_AttrDef.internal_default_instance (),misc\tensorflow\op_def.pb.hpp,"static inline const OpDef_AttrDef* internal_default_instance() {
    return reinterpret_cast<const OpDef_AttrDef*>(
               &_OpDef_AttrDef_default_instance_);
  }",366.0,369.0,3.0,3.0,4.0,2,2,1,1,3,0,1,1,0,0,,0,0,0,0,0,OpDef_AttrDef
3057,419800,alpha,3,cv.dnn.HardSigmoidFunctor.alpha,,src\layers\elementwise_layers.cpp,alpha,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3058,419801,beta,3,cv.dnn.HardSigmoidFunctor.beta,,src\layers\elementwise_layers.cpp,beta,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3059,75748,_InternalParse,1,opencv_caffe.PowerParameter._InternalParse,"const char* opencv_caffe.PowerParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* PowerParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float power = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_power(&has_bits);
          power_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float scale = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_scale(&has_bits);
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);...",24469.0,24525.0,1.0,6.0,57.0,49,14,52,13,0,7,13,15,0,3,,0,4,4,2,2,const char*
3060,59364,_InternalParse,1,opencv_caffe.ELUParameter._InternalParse,"const char* opencv_caffe.ELUParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* ELUParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float alpha = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_alpha(&has_bits);
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PR...",19382.0,19420.0,1.0,6.0,39.0,31,14,34,11,0,3,9,9,0,1,,0,2,4,2,2,const char*
3061,370662,forward,1,cv.dnn.cuda4dnn.DetectionOutputOp.forward,"void cv.dnn.cuda4dnn.DetectionOutputOp.forward (ANY,ANY,ANY)",src\cuda4dnn\primitives\detection_output.hpp,"void forward(
            const std::vector<cv::Ptr<BackendWrapper>>& inputs,
            const std::vector<cv::Ptr<BackendWrapper>>& outputs,
            csl::Workspace& workspace) override
        {
            /* locations, scores and priors make the first three inputs in order */
            /* the 4th input is used to obtain the shape for clipping */
            CV_Assert((inputs.size() == 3 || inputs.size() == 4) && outputs.size() == 1);

            // locations: [batch_size, num_priors, num_loc_classes, 4]
            auto locations_wrapper = inputs[0].dynamicCast<wrapper_type>();
            auto locations = locations_wrapper->getView();

            // scores: [batch_size, num_priors, num_classes]
            auto scores_wrapper = inputs[1].dynamicCast<wrapper_type>();
            auto scores = scores_wrapper->getView();
            scores.unsqueeze();
            scores.reshape(-1, num_priors, num_classes);

            // priors: [1, 2, num_priors, 4]
            auto pr...",122.0,254.0,9.0,9.0,133.0,119,19,192,45,0,46,5,6,4,0,,0,46,6,3,3,void
3062,419822,calculate,1,cv.dnn.HardSigmoidFunctor.calculate,float cv.dnn.HardSigmoidFunctor.calculate (float),src\layers\elementwise_layers.cpp,"inline float calculate(float x) const
    {
        return max(0.f, min(1.f, alpha * x + beta));
    }",2122.0,2125.0,5.0,5.0,4.0,2,2,3,3,0,2,1,1,0,0,,0,2,2,1,1,float
3063,10223,_InternalParse,1,opencv_caffe.PriorBoxParameter._InternalParse,"const char* opencv_caffe.PriorBoxParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* PriorBoxParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float min_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_min_size(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<13>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_min_size(), ptr, ctx);
          CHK_(ptr);
        } else
          g...",5581.0,5819.0,1.0,10.0,239.0,215,17,210,19,0,19,65,129,0,9,,0,10,4,2,2,const char*
3064,419837,setKernelParams,1,cv.dnn.HardSigmoidFunctor.setKernelParams,void cv.dnn.HardSigmoidFunctor.setKernelParams (ANY),src\layers\elementwise_layers.cpp,"inline void setKernelParams(ocl::Kernel& kernel) const
    {
        kernel.set(3, alpha);
        kernel.set(4, beta);
    }",2127.0,2131.0,5.0,5.0,5.0,2,1,4,3,0,2,1,1,0,0,,0,2,2,1,1,void
3065,272397,GetCachedSize,1,opencv_tensorflow.FunctionDefLibrary.GetCachedSize,int opencv_tensorflow.FunctionDefLibrary.GetCachedSize (),misc\tensorflow\function.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },180.0,180.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
3066,239635,MergeFrom,1,opencv_onnx.TypeProto.MergeFrom,void opencv_onnx.TypeProto.MergeFrom (TypeProto),misc\onnx\opencv-onnx.pb.cc,"void TypeProto::MergeFrom(const TypeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_onnx.TypeProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_denotation()) {
    _internal_set_denotation(from._internal_denotation());
  }
  switch (from.value_case()) {
    case kTensorType: {
      _internal_mutable_tensor_type()->::opencv_onnx::TypeProto_Tensor::MergeFrom(from._internal_tensor_type());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",5493.0,5512.0,1.0,1.0,20.0,13,7,12,6,1,3,5,3,0,1,,0,2,2,1,1,void
3067,43032,_InternalSerialize,1,opencv_caffe.LossParameter._InternalSerialize,"uint8_t opencv_caffe.LossParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* LossParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.LossParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ignore_label = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ignore_label(), target);
  }

  // optional bool normalize = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_normalize(), target);
  }

  // optional .opencv_caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROT...",14518.0,14550.0,1.0,1.0,33.0,39,8,43,10,0,1,5,5,0,0,,0,1,4,2,2,uint8_t
3068,419872,alpha,3,cv.dnn.SeluFunctor.alpha,,src\layers\elementwise_layers.cpp,alpha,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3069,419873,gamma,3,cv.dnn.SeluFunctor.gamma,,src\layers\elementwise_layers.cpp,gamma,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3070,26671,InternalSwap,1,opencv_caffe.SolverState.InternalSwap,void opencv_caffe.SolverState.InternalSwap (SolverState*),misc\caffe\opencv-caffe.pb.cc,"void SolverState::InternalSwap(SolverState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  history_.InternalSwap(&other->history_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &learned_net_, lhs_arena,
      &other->learned_net_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolverState, current_step_)
      + sizeof(SolverState::current_step_)
      - PROTOBUF_FIELD_OFFSET(SolverState, iter_)>(
          reinterpret_cast<char*>(&iter_),
          reinterpret_cast<char*>(&other->iter_));
}",9959.0,9977.0,1.0,1.0,19.0,36,13,27,13,0,11,1,1,0,0,,0,11,2,1,1,void
3071,419894,calculate,1,cv.dnn.SeluFunctor.calculate,float cv.dnn.SeluFunctor.calculate (float),src\layers\elementwise_layers.cpp,"inline float calculate(float x) const
    {
        return gamma * (x > 0.f ? x : alpha * expm1(x));
    }",2161.0,2164.0,5.0,5.0,4.0,4,3,5,3,0,2,1,1,0,0,,0,2,2,1,1,float
3072,419911,setKernelParams,1,cv.dnn.SeluFunctor.setKernelParams,void cv.dnn.SeluFunctor.setKernelParams (ANY),src\layers\elementwise_layers.cpp,"inline void setKernelParams(ocl::Kernel& kernel) const
    {
        kernel.set(3, alpha);
        kernel.set(4, gamma);
    }",2166.0,2170.0,5.0,5.0,5.0,2,1,4,3,0,2,1,1,0,0,,0,2,2,1,1,void
3073,141387,GetCachedSize,1,opencv_caffe.LogParameter.GetCachedSize,int opencv_caffe.LogParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },13097.0,13097.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
3074,288852,GetCachedSize,1,opencv_tensorflow.OpDef_AttrDef.GetCachedSize,int opencv_tensorflow.OpDef_AttrDef.GetCachedSize (),misc\tensorflow\op_def.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },414.0,414.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
3075,239716,InternalSwap,1,opencv_onnx.TypeProto.InternalSwap,void opencv_onnx.TypeProto.InternalSwap (TypeProto*),misc\onnx\opencv-onnx.pb.cc,"void TypeProto::InternalSwap(TypeProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &denotation_, lhs_arena,
      &other->denotation_, rhs_arena
  );
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}",5525.0,5538.0,1.0,1.0,14.0,22,5,20,11,0,8,1,1,0,0,,0,8,2,1,1,void
3076,59495,_InternalSerialize,1,opencv_caffe.ELUParameter._InternalSerialize,"uint8_t opencv_caffe.ELUParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* ELUParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.ELUParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float alpha = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_alpha(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencv_caffe.ELUParameter)
  return target;
}",19422.0,19441.0,1.0,1.0,20.0,23,8,25,10,0,1,3,3,0,0,,0,1,4,2,2,uint8_t
3077,419946,alpha,3,cv.dnn.ThresholdedReluFunctor.alpha,,src\layers\elementwise_layers.cpp,alpha,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3078,223357,SharedCtor,1,opencv_onnx.AttributeProto.SharedCtor,void opencv_onnx.AttributeProto.SharedCtor (),misc\onnx\opencv-onnx.pb.cc,"inline void AttributeProto::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
s_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  s_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
doc_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  doc_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ref_attr_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlrea...",784.0,805.0,1.0,1.0,22.0,32,6,16,8,0,8,1,1,0,0,,0,8,0,0,0,void
3079,419966,calculate,1,cv.dnn.ThresholdedReluFunctor.calculate,float cv.dnn.ThresholdedReluFunctor.calculate (float),src\layers\elementwise_layers.cpp,"inline float calculate(float x) const
    {
        return x > alpha ? x : 0.f;
    }",2199.0,2202.0,5.0,5.0,4.0,2,2,3,2,0,1,1,1,0,0,,0,1,2,1,1,float
3080,419978,setKernelParams,1,cv.dnn.ThresholdedReluFunctor.setKernelParams,void cv.dnn.ThresholdedReluFunctor.setKernelParams (ANY),src\layers\elementwise_layers.cpp,"inline void setKernelParams(ocl::Kernel& kernel) const
    {
        kernel.set(3, alpha);
    }",2204.0,2207.0,5.0,5.0,4.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
3081,26766,GetMetadata,1,opencv_caffe.SolverState.GetMetadata,Metadata opencv_caffe.SolverState.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata SolverState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[11]);
}",9979.0,9983.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
3082,43168,ByteSizeLong,1,opencv_caffe.LossParameter.ByteSizeLong,size_t opencv_caffe.LossParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t LossParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.LossParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 ignore_label = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_ignore_label());
    }

    // optional bool normalize = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional .opencv_caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_normalization());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size,...",14552.0,14580.0,1.0,1.0,29.0,23,9,20,7,0,2,5,8,0,0,,0,2,0,0,0,size_t
3083,420007,power,3,cv.dnn.PowerFunctor.power,,src\layers\elementwise_layers.cpp,power,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
3084,420008,scale,3,cv.dnn.PowerFunctor.scale,,src\layers\elementwise_layers.cpp,scale,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3085,420009,shift,3,cv.dnn.PowerFunctor.shift,,src\layers\elementwise_layers.cpp,shift,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
3086,239786,GetMetadata,1,opencv_onnx.TypeProto.GetMetadata,Metadata opencv_onnx.TypeProto.GetMetadata (),misc\onnx\opencv-onnx.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata TypeProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2donnx_2eproto_getter, &descriptor_table_opencv_2donnx_2eproto_once,
      file_level_metadata_opencv_2donnx_2eproto[11]);
}",5540.0,5544.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
3087,420011,originScale,3,cv.dnn.PowerFunctor.originScale,,src\layers\elementwise_layers.cpp,originScale,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3088,420012,originShift,3,cv.dnn.PowerFunctor.originShift,,src\layers\elementwise_layers.cpp,originShift,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3089,26797,set_has_level,1,opencv_caffe._Internal.set_has_level,void opencv_caffe._Internal.set_has_level (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }",9993.0,9995.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
3090,75945,_InternalSerialize,1,opencv_caffe.PowerParameter._InternalSerialize,"uint8_t opencv_caffe.PowerParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* PowerParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.PowerParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float power = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_power(), target);
  }

  // optional float scale = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_scale(), target);
  }

  // optional float shift = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLit...",24527.0,24558.0,1.0,1.0,32.0,39,8,43,10,0,1,5,5,0,0,,0,1,4,2,2,uint8_t
3091,272559,function_,3,opencv_tensorflow.FunctionDefLibrary.function_,,misc\tensorflow\function.pb.hpp,function_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
3092,272560,gradient_,3,opencv_tensorflow.FunctionDefLibrary.gradient_,,misc\tensorflow\function.pb.hpp,gradient_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
3093,272561,_cached_size_,3,opencv_tensorflow.FunctionDefLibrary._cached_size_,,misc\tensorflow\function.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3094,420010,originPower,3,cv.dnn.PowerFunctor.originPower,,src\layers\elementwise_layers.cpp,originPower,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3095,59575,ByteSizeLong,1,opencv_caffe.ELUParameter.ByteSizeLong,size_t opencv_caffe.ELUParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t ELUParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.ELUParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float alpha = 1 [default = 1];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}",19443.0,19458.0,1.0,1.0,16.0,9,7,9,4,0,2,2,2,0,0,,0,2,0,0,0,size_t
3096,420039,finalize,1,cv.dnn.PowerFunctor.finalize,void cv.dnn.PowerFunctor.finalize (),src\layers\elementwise_layers.cpp,"void finalize()
    {
        power = originPower;
        scale = originScale;
        shift = originShift;
    }",2246.0,2251.0,5.0,5.0,6.0,3,1,6,6,0,6,1,1,0,0,,0,6,0,0,0,void
3097,239817,set_has_version,1,opencv_onnx._Internal.set_has_version,void opencv_onnx._Internal.set_has_version (HasBits*),misc\onnx\opencv-onnx.pb.cc,"static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }",5554.0,5556.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
3098,157900,_has_bits_,3,opencv_caffe.NormalizedBBox._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
3099,157901,_cached_size_,3,opencv_caffe.NormalizedBBox._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3100,157902,xmin_,3,opencv_caffe.NormalizedBBox.xmin_,,misc\caffe\opencv-caffe.pb.hpp,xmin_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
3101,157903,ymin_,3,opencv_caffe.NormalizedBBox.ymin_,,misc\caffe\opencv-caffe.pb.hpp,ymin_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3102,157904,xmax_,3,opencv_caffe.NormalizedBBox.xmax_,,misc\caffe\opencv-caffe.pb.hpp,xmax_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3103,157905,ymax_,3,opencv_caffe.NormalizedBBox.ymax_,,misc\caffe\opencv-caffe.pb.hpp,ymax_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3104,157906,label_,3,opencv_caffe.NormalizedBBox.label_,,misc\caffe\opencv-caffe.pb.hpp,label_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3105,157907,difficult_,3,opencv_caffe.NormalizedBBox.difficult_,,misc\caffe\opencv-caffe.pb.hpp,difficult_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3106,157908,score_,3,opencv_caffe.NormalizedBBox.score_,,misc\caffe\opencv-caffe.pb.hpp,score_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3107,157909,size_,3,opencv_caffe.NormalizedBBox.size_,,misc\caffe\opencv-caffe.pb.hpp,size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
3108,420052,apply,1,cv.dnn.PowerFunctor.apply,"void cv.dnn.PowerFunctor.apply (float*,float*,int,int,size_t,int,int)",src\layers\elementwise_layers.cpp,"void apply(const float* srcptr, float* dstptr, int stripeStart, int len, size_t planeSize, int cn0, int cn1) const
    {
        CV_UNUSED(stripeStart);
        float a = scale, b = shift, p = power;
        if( p == 1.f )
        {
            for( int cn = cn0; cn < cn1; cn++, srcptr += planeSize, dstptr += planeSize )
            {
                for( int i = 0; i < len; i++ )
                {
                    float x = srcptr[i];
                    dstptr[i] = a*x + b;
                }
            }
        }
        else
        {
            for( int cn = cn0; cn < cn1; cn++, srcptr += planeSize, dstptr += planeSize )
            {
                for( int i = 0; i < len; i++ )
                {
                    float x = srcptr[i];
                    dstptr[i] = pow(a*x + b, p);
                }
            }
        }
    }",2253.0,2279.0,5.0,5.0,27.0,14,6,23,15,0,3,4,7,0,0,,0,3,14,7,7,void
3109,223453,SharedDtor,1,opencv_onnx.AttributeProto.SharedDtor,void opencv_onnx.AttributeProto.SharedDtor (),misc\onnx\opencv-onnx.pb.cc,"inline void AttributeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  s_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doc_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ref_attr_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete t_;
  if (this != internal_default_instance()) delete g_;
}",814.0,822.0,1.0,1.0,9.0,21,5,14,8,0,8,3,3,2,0,,0,8,0,0,0,void
3110,26861,SharedCtor,1,opencv_caffe.NetState.SharedCtor,void opencv_caffe.NetState.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void NetState::SharedCtor() {
level_ = 0;
phase_ = 1;
}",10019.0,10022.0,1.0,1.0,4.0,2,1,2,2,0,2,1,1,0,0,,0,2,0,0,0,void
3111,141557,_has_bits_,3,opencv_caffe.LogParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
3112,141558,_cached_size_,3,opencv_caffe.LogParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3113,141559,shift_,3,opencv_caffe.LogParameter.shift_,,misc\caffe\opencv-caffe.pb.hpp,shift_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
3114,141560,base_,3,opencv_caffe.LogParameter.base_,,misc\caffe\opencv-caffe.pb.hpp,base_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
3115,141561,scale_,3,opencv_caffe.LogParameter.scale_,,misc\caffe\opencv-caffe.pb.hpp,scale_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
3116,59644,MergeFrom,1,opencv_caffe.ELUParameter.MergeFrom,void opencv_caffe.ELUParameter.MergeFrom (ELUParameter),misc\caffe\opencv-caffe.pb.cc,"void ELUParameter::MergeFrom(const ELUParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.ELUParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_alpha()) {
    _internal_set_alpha(from._internal_alpha());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",19473.0,19483.0,1.0,1.0,11.0,10,6,8,4,1,0,2,2,0,0,,0,0,2,1,1,void
3117,43282,MergeFrom,1,opencv_caffe.LossParameter.MergeFrom,void opencv_caffe.LossParameter.MergeFrom (LossParameter),misc\caffe\opencv-caffe.pb.cc,"void LossParameter::MergeFrom(const LossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.LossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ignore_label_ = from.ignore_label_;
    }
    if (cached_has_bits & 0x00000002u) {
      normalize_ = from.normalize_;
    }
    if (cached_has_bits & 0x00000004u) {
      normalization_ = from.normalization_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",14595.0,14615.0,1.0,1.0,21.0,22,8,20,8,2,8,5,8,0,0,,0,8,2,1,1,void
3118,239890,SharedCtor,1,opencv_onnx.OperatorSetIdProto.SharedCtor,void opencv_onnx.OperatorSetIdProto.SharedCtor (),misc\onnx\opencv-onnx.pb.cc,"inline void OperatorSetIdProto::SharedCtor() {
domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
version_ = int64_t{0};
}",5584.0,5590.0,1.0,1.0,7.0,6,4,4,4,0,2,1,1,0,0,,0,2,0,0,0,void
3119,26913,SetCachedSize,1,opencv_caffe.NetState.SetCachedSize,void opencv_caffe.NetState.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void NetState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",10041.0,10043.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
3120,26923,Clear,1,opencv_caffe.NetState.Clear,void opencv_caffe.NetState.Clear (),misc\caffe\opencv-caffe.pb.cc,"void NetState::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.NetState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stage_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    level_ = 0;
    phase_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",10045.0,10059.0,1.0,1.0,15.0,10,5,10,6,0,5,2,2,0,0,,0,5,0,0,0,void
3121,76081,ByteSizeLong,1,opencv_caffe.PowerParameter.ByteSizeLong,size_t opencv_caffe.PowerParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t PowerParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.PowerParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float shift = 3 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float power = 1 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float scale = 2 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}",24560.0,24587.0,1.0,1.0,28.0,16,7,14,4,0,2,5,8,0,0,,0,2,0,0,0,size_t
3122,223538,SetCachedSize,1,opencv_onnx.AttributeProto.SetCachedSize,void opencv_onnx.AttributeProto.SetCachedSize (int),misc\onnx\opencv-onnx.pb.cc,"void AttributeProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",830.0,832.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
3123,239925,SharedDtor,1,opencv_onnx.OperatorSetIdProto.SharedDtor,void opencv_onnx.OperatorSetIdProto.SharedDtor (),misc\onnx\opencv-onnx.pb.cc,"inline void OperatorSetIdProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  domain_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}",5599.0,5602.0,1.0,1.0,4.0,5,3,3,3,0,1,1,1,0,0,,0,1,0,0,0,void
3124,59703,InternalSwap,1,opencv_caffe.ELUParameter.InternalSwap,void opencv_caffe.ELUParameter.InternalSwap (ELUParameter*),misc\caffe\opencv-caffe.pb.cc,"void ELUParameter::InternalSwap(ELUParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(alpha_, other->alpha_);
}",19496.0,19501.0,1.0,1.0,6.0,7,4,6,4,0,4,1,1,0,0,,0,4,2,1,1,void
3125,223548,Clear,1,opencv_onnx.AttributeProto.Clear,void opencv_onnx.AttributeProto.Clear (),misc\onnx\opencv-onnx.pb.cc,"void AttributeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_onnx.AttributeProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  floats_.Clear();
  ints_.Clear();
  strings_.Clear();
  tensors_.Clear();
  graphs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      s_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      doc_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      ref_attr_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(t_ != nullptr);
      t_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(g_ != nullptr);
      g_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u)...",834.0,876.0,1.0,1.0,43.0,38,11,32,17,0,20,9,15,0,0,,0,20,0,0,0,void
3126,354623,~PoolingDescriptor,1,cv.dnn.cuda4dnn.csl.cudnn.PoolingDescriptor.~PoolingDescriptor,ANY cv.dnn.cuda4dnn.csl.cudnn.PoolingDescriptor.~PoolingDescriptor (),src\cuda4dnn\csl\cudnn\pooling.hpp,"~PoolingDescriptor() noexcept {
            if (descriptor != nullptr) {
                /* cudnnDestroyPoolingDescriptor will not fail for a valid descriptor */
                CUDA4DNN_CHECK_CUDNN(cudnnDestroyPoolingDescriptor(descriptor));
            }
        }",60.0,65.0,9.0,16.0,6.0,7,2,10,3,0,3,2,2,1,0,,0,3,0,0,0,ANY
3127,158015,descriptor,1,opencv_caffe.ROIPoolingParameter.descriptor,Descriptor opencv_caffe.ROIPoolingParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",20095.0,20097.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
3128,272709,descriptor,1,opencv_tensorflow.FunctionDef_Node.descriptor,Descriptor opencv_tensorflow.FunctionDef_Node.descriptor (),misc\tensorflow\function.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",320.0,322.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
3129,158021,GetDescriptor,1,opencv_caffe.ROIPoolingParameter.GetDescriptor,Descriptor opencv_caffe.ROIPoolingParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",20098.0,20100.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
3130,272715,GetDescriptor,1,opencv_tensorflow.FunctionDef_Node.GetDescriptor,Descriptor opencv_tensorflow.FunctionDef_Node.GetDescriptor (),misc\tensorflow\function.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",323.0,325.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
3131,158032,GetReflection,1,opencv_caffe.ROIPoolingParameter.GetReflection,Reflection opencv_caffe.ROIPoolingParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",20101.0,20103.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
3132,26962,_InternalParse,1,opencv_caffe.NetState._InternalParse,"const char* opencv_caffe.NetState._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* NetState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .opencv_caffe.Phase phase = 1 [default = TEST];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::opencv_caffe::Phase_IsValid(val))) {
            _internal_set_phase(static_cast<::opencv_caffe::Phase>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 level = 2 [default = 0];
      case 2:
    ...",10061.0,10129.0,1.0,10.0,69.0,57,16,64,13,0,4,17,28,1,2,,0,3,4,2,2,const char*
3133,59730,GetMetadata,1,opencv_caffe.ELUParameter.GetMetadata,Metadata opencv_caffe.ELUParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata ELUParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[32]);
}",19503.0,19507.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
3134,272726,GetReflection,1,opencv_tensorflow.FunctionDef_Node.GetReflection,Reflection opencv_tensorflow.FunctionDef_Node.GetReflection (),misc\tensorflow\function.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",326.0,328.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
3135,239963,SetCachedSize,1,opencv_onnx.OperatorSetIdProto.SetCachedSize,void opencv_onnx.OperatorSetIdProto.SetCachedSize (int),misc\onnx\opencv-onnx.pb.cc,"void OperatorSetIdProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",5610.0,5612.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
3136,158043,default_instance,1,opencv_caffe.ROIPoolingParameter.default_instance,ROIPoolingParameter opencv_caffe.ROIPoolingParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const ROIPoolingParameter& default_instance() {
    return *internal_default_instance();
  }",20104.0,20106.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,ROIPoolingParameter
3137,272737,default_instance,1,opencv_tensorflow.FunctionDef_Node.default_instance,FunctionDef_Node opencv_tensorflow.FunctionDef_Node.default_instance (),misc\tensorflow\function.pb.hpp,"static const FunctionDef_Node& default_instance() {
    return *internal_default_instance();
  }",329.0,331.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,FunctionDef_Node
3138,158050,internal_default_instance,1,opencv_caffe.ROIPoolingParameter.internal_default_instance,ROIPoolingParameter opencv_caffe.ROIPoolingParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const ROIPoolingParameter* internal_default_instance() {
    return reinterpret_cast<const ROIPoolingParameter*>(
               &_ROIPoolingParameter_default_instance_);
  }",20107.0,20110.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,ROIPoolingParameter
3139,141667,descriptor,1,opencv_caffe.LRNParameter.descriptor,Descriptor opencv_caffe.LRNParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",13225.0,13227.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
3140,387428,layer_name,3,cv.dnn.darknet.LayerParameter.layer_name,,src\darknet\darknet_io.hpp,layer_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3141,239973,Clear,1,opencv_onnx.OperatorSetIdProto.Clear,void opencv_onnx.OperatorSetIdProto.Clear (),misc\onnx\opencv-onnx.pb.cc,"void OperatorSetIdProto::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_onnx.OperatorSetIdProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    domain_.ClearNonDefaultToEmpty();
  }
  version_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",5614.0,5627.0,1.0,1.0,14.0,10,6,9,5,0,4,2,2,0,0,,0,4,0,0,0,void
3142,387430,bottom_indexes,3,cv.dnn.darknet.LayerParameter.bottom_indexes,,src\darknet\darknet_io.hpp,bottom_indexes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3143,387431,layerParams,3,cv.dnn.darknet.LayerParameter.layerParams,,src\darknet\darknet_io.hpp,layerParams,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3144,272744,internal_default_instance,1,opencv_tensorflow.FunctionDef_Node.internal_default_instance,FunctionDef_Node opencv_tensorflow.FunctionDef_Node.internal_default_instance (),misc\tensorflow\function.pb.hpp,"static inline const FunctionDef_Node* internal_default_instance() {
    return reinterpret_cast<const FunctionDef_Node*>(
               &_FunctionDef_Node_default_instance_);
  }",332.0,335.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,FunctionDef_Node
3145,141673,GetDescriptor,1,opencv_caffe.LRNParameter.GetDescriptor,Descriptor opencv_caffe.LRNParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",13228.0,13230.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
3146,387433,getLayerParams,1,cv.dnn.darknet.LayerParameter.getLayerParams,LayerParams cv.dnn.darknet.LayerParameter.getLayerParams (),src\darknet\darknet_io.hpp,cv::dnn::LayerParams getLayerParams() const { return layerParams; },84.0,84.0,17.0,83.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,LayerParams
3147,387429,layer_type,3,cv.dnn.darknet.LayerParameter.layer_type,,src\darknet\darknet_io.hpp,layer_type,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3148,387439,name,1,cv.dnn.darknet.LayerParameter.name,string cv.dnn.darknet.LayerParameter.name (),src\darknet\darknet_io.hpp,std::string name() const { return layer_name; },85.0,85.0,17.0,63.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,string
3149,43377,InternalSwap,1,opencv_caffe.LossParameter.InternalSwap,void opencv_caffe.LossParameter.InternalSwap (LossParameter*),misc\caffe\opencv-caffe.pb.cc,"void LossParameter::InternalSwap(LossParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LossParameter, normalize_)
      + sizeof(LossParameter::normalize_)
      - PROTOBUF_FIELD_OFFSET(LossParameter, ignore_label_)>(
          reinterpret_cast<char*>(&ignore_label_),
          reinterpret_cast<char*>(&other->ignore_label_));
  swap(normalization_, other->normalization_);
}",14628.0,14639.0,1.0,1.0,12.0,22,12,15,9,0,9,1,1,0,0,,0,9,2,1,1,void
3150,59761,set_has_input_dim,1,opencv_caffe._Internal.set_has_input_dim,void opencv_caffe._Internal.set_has_input_dim (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_input_dim(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }",19517.0,19519.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
3151,141684,GetReflection,1,opencv_caffe.LRNParameter.GetReflection,Reflection opencv_caffe.LRNParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",13231.0,13233.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
3152,387445,type,1,cv.dnn.darknet.LayerParameter.type,string cv.dnn.darknet.LayerParameter.type (),src\darknet\darknet_io.hpp,std::string type() const { return layer_type; },86.0,86.0,17.0,63.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,string
3153,354678,get,1,cv.dnn.cuda4dnn.csl.cudnn.PoolingDescriptor.get,cudnnPoolingDescriptor_t cv.dnn.cuda4dnn.csl.cudnn.PoolingDescriptor.get (),src\cuda4dnn\csl\cudnn\pooling.hpp,cudnnPoolingDescriptor_t get() const noexcept { return descriptor; },74.0,74.0,9.0,76.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,cudnnPoolingDescriptor_t
3154,420215,tryFuse,1,cv.dnn.PowerFunctor.tryFuse,bool cv.dnn.PowerFunctor.tryFuse (ANY),src\layers\elementwise_layers.cpp,"bool tryFuse(Ptr<dnn::Layer>& top)
    {
        if (power != 1.0f && shift != 0.0f)
            return false;

        Mat w, b;
        top->getScaleShift(w, b);
        if ((w.empty() && b.empty()) || w.total() > 1 || b.total() > 1)
            return false;

        float nextScale = w.empty() ? 1.0f : w.at<float>(0);
        float nextShift = b.empty() ? 0.0f : b.at<float>(0);
        scale = std::pow(scale, power) * nextScale;
        shift = nextScale * shift + nextShift;
        return true;
    }",2374.0,2389.0,5.0,5.0,16.0,27,10,24,9,0,7,3,3,2,0,,0,7,2,1,1,bool
3155,387451,bottom_size,1,cv.dnn.darknet.LayerParameter.bottom_size,int cv.dnn.darknet.LayerParameter.bottom_size (),src\darknet\darknet_io.hpp,int bottom_size() const { return bottom_indexes.size(); },87.0,87.0,17.0,73.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
3156,354684,constructor,1,cv.dnn.cuda4dnn.csl.cudnn.PoolingDescriptor.constructor,"void cv.dnn.cuda4dnn.csl.cudnn.PoolingDescriptor.constructor<SequenceContainer> (SequenceContainer,SequenceContainer,SequenceContainer,PoolingType)",src\cuda4dnn\csl\cudnn\pooling.hpp,"void constructor(
            const SequenceContainer& window_size,
            const SequenceContainer& padding,
            const SequenceContainer& stride,
            PoolingType type)
        {
            CV_Assert(window_size.size() == padding.size());
            CV_Assert(window_size.size() == stride.size());

            auto get_pooling_type = [] (PoolingType type) {
                switch (type) {
                case PoolingType::MAX:
                    return CUDNN_POOLING_MAX;
                case PoolingType::MAX_DETERMINISTIC:
                    return CUDNN_POOLING_MAX_DETERMINISTIC;
                case PoolingType::AVERAGE_EXCLUDE_PADDING:
                    return CUDNN_POOLING_AVERAGE_COUNT_EXCLUDE_PADDING;
                case PoolingType::AVERAGE_INCLUDE_PADDING:
                    return CUDNN_POOLING_AVERAGE_COUNT_INCLUDE_PADDING;
                }
                CV_Error(Error::StsBadArg, ""unknown pooling type"");
            };

            CUDA4DNN_C...",78.0,131.0,9.0,12.0,54.0,37,6,42,12,0,5,3,4,0,0,,0,5,8,4,4,void
3157,141695,default_instance,1,opencv_caffe.LRNParameter.default_instance,LRNParameter opencv_caffe.LRNParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const LRNParameter& default_instance() {
    return *internal_default_instance();
  }",13234.0,13236.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,LRNParameter
3158,387460,bottom,1,cv.dnn.darknet.LayerParameter.bottom,string cv.dnn.darknet.LayerParameter.bottom (int),src\darknet\darknet_io.hpp,std::string bottom(const int index) const { return bottom_indexes.at(index); },88.0,88.0,17.0,94.0,1.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,string
3159,141702,internal_default_instance,1,opencv_caffe.LRNParameter.internal_default_instance,LRNParameter opencv_caffe.LRNParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const LRNParameter* internal_default_instance() {
    return reinterpret_cast<const LRNParameter*>(
               &_LRNParameter_default_instance_);
  }",13237.0,13240.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,LRNParameter
3160,240011,_InternalParse,1,opencv_onnx.OperatorSetIdProto._InternalParse,"const char* opencv_onnx.OperatorSetIdProto._InternalParse (char*,ANY*)",misc\onnx\opencv-onnx.pb.cc,"const char* OperatorSetIdProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string domain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_domain();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, ""opencv_onnx.OperatorSetIdProto.domain"");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal:...",5629.0,5679.0,1.0,10.0,51.0,40,12,47,11,0,3,11,12,0,1,,0,2,4,2,2,const char*
3161,76175,MergeFrom,1,opencv_caffe.PowerParameter.MergeFrom,void opencv_caffe.PowerParameter.MergeFrom (PowerParameter),misc\caffe\opencv-caffe.pb.cc,"void PowerParameter::MergeFrom(const PowerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.PowerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      shift_ = from.shift_;
    }
    if (cached_has_bits & 0x00000002u) {
      power_ = from.power_;
    }
    if (cached_has_bits & 0x00000004u) {
      scale_ = from.scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",24602.0,24622.0,1.0,1.0,21.0,22,8,20,8,2,8,5,8,0,0,,0,8,2,1,1,void
3162,387477,top,1,cv.dnn.darknet.LayerParameter.top,string cv.dnn.darknet.LayerParameter.top (int),src\darknet\darknet_io.hpp,std::string top(const int index) const { return layer_name; },90.0,90.0,17.0,77.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,2,1,1,string
3163,387485,width,3,cv.dnn.darknet.NetParameter.width,,src\darknet\darknet_io.hpp,width,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
3164,387486,height,3,cv.dnn.darknet.NetParameter.height,,src\darknet\darknet_io.hpp,height,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
3165,387487,channels,3,cv.dnn.darknet.NetParameter.channels,,src\darknet\darknet_io.hpp,channels,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
3166,387488,layers,3,cv.dnn.darknet.NetParameter.layers,,src\darknet\darknet_io.hpp,layers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3167,387489,out_channels_vec,3,cv.dnn.darknet.NetParameter.out_channels_vec,,src\darknet\darknet_io.hpp,out_channels_vec,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3168,387490,layers_cfg,3,cv.dnn.darknet.NetParameter.layers_cfg,,src\darknet\darknet_io.hpp,layers_cfg,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
3169,387491,net_cfg,3,cv.dnn.darknet.NetParameter.net_cfg,,src\darknet\darknet_io.hpp,net_cfg,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3170,59815,weight_filler,1,opencv_caffe.EmbedParameter._Internal.weight_filler,FillerParameter opencv_caffe.EmbedParameter._Internal.weight_filler (EmbedParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::FillerParameter&
EmbedParameter::_Internal::weight_filler(const EmbedParameter* msg) {
  return *msg->weight_filler_;
}",19533.0,19536.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,FillerParameter
3171,387496,layer_size,1,cv.dnn.darknet.NetParameter.layer_size,int cv.dnn.darknet.NetParameter.layer_size (),src\darknet\darknet_io.hpp,int layer_size() const { return layers.size(); },104.0,104.0,17.0,64.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
3172,289195,name_,3,opencv_tensorflow.OpDef_AttrDef.name_,,misc\tensorflow\op_def.pb.hpp,name_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3173,289196,type_,3,opencv_tensorflow.OpDef_AttrDef.type_,,misc\tensorflow\op_def.pb.hpp,type_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3174,289197,description_,3,opencv_tensorflow.OpDef_AttrDef.description_,,misc\tensorflow\op_def.pb.hpp,description_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3175,289198,default_value_,3,opencv_tensorflow.OpDef_AttrDef.default_value_,,misc\tensorflow\op_def.pb.hpp,* default_value_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,14,0,1,1,0,0,,0,0,0,0,0,
3176,289199,allowed_values_,3,opencv_tensorflow.OpDef_AttrDef.allowed_values_,,misc\tensorflow\op_def.pb.hpp,* allowed_values_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
3177,289200,minimum_,3,opencv_tensorflow.OpDef_AttrDef.minimum_,,misc\tensorflow\op_def.pb.hpp,minimum_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3178,59825,bias_filler,1,opencv_caffe.EmbedParameter._Internal.bias_filler,FillerParameter opencv_caffe.EmbedParameter._Internal.bias_filler (EmbedParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::FillerParameter&
EmbedParameter::_Internal::bias_filler(const EmbedParameter* msg) {
  return *msg->bias_filler_;
}",19537.0,19540.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,FillerParameter
3179,289202,_cached_size_,3,opencv_tensorflow.OpDef_AttrDef._cached_size_,,misc\tensorflow\op_def.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3180,43435,GetMetadata,1,opencv_caffe.LossParameter.GetMetadata,Metadata opencv_caffe.LossParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata LossParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[17]);
}",14641.0,14645.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
3181,289201,has_minimum_,3,opencv_tensorflow.OpDef_AttrDef.has_minimum_,,misc\tensorflow\op_def.pb.hpp,has_minimum_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
3182,387518,layer,1,cv.dnn.darknet.NetParameter.layer,LayerParameter cv.dnn.darknet.NetParameter.layer (int),src\darknet\darknet_io.hpp,LayerParameter layer(const int index) const { return layers.at(index); },108.0,108.0,17.0,88.0,1.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,LayerParameter
3183,43455,set_has_top_k,1,opencv_caffe._Internal.set_has_top_k,void opencv_caffe._Internal.set_has_top_k (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_top_k(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }",17723.0,17725.0,3.0,3.0,3.0,2,2,1,1,3,0,1,1,0,0,,0,0,2,1,1,void
3184,223688,_InternalParse,1,opencv_onnx.AttributeProto._InternalParse,"const char* opencv_onnx.AttributeProto._InternalParse (char*,ANY*)",misc\onnx\opencv-onnx.pb.cc,"const char* AttributeProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, ""opencv_onnx.AttributeProto.name"");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float f = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_f(&has_bits...",878.0,1071.0,1.0,10.0,194.0,162,17,183,15,0,6,51,97,1,3,,0,4,4,2,2,const char*
3185,43466,set_has_axis,1,opencv_caffe._Internal.set_has_axis,void opencv_caffe._Internal.set_has_axis (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_axis(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }",27418.0,27420.0,3.0,3.0,3.0,2,2,1,1,14,0,1,1,0,0,,0,0,2,1,1,void
3186,420313,getScaleShift,1,cv.dnn.PowerFunctor.getScaleShift,"void cv.dnn.PowerFunctor.getScaleShift (Mat,Mat)",src\layers\elementwise_layers.cpp,"void getScaleShift(Mat& _scale, Mat& _shift) const
    {
        if (power == 1.0f)
        {
            _scale = Mat(1, 1, CV_32F, Scalar(scale));
            _shift = Mat(1, 1, CV_32F, Scalar(shift));
        }
    }",2391.0,2398.0,5.0,5.0,8.0,3,2,7,6,0,3,2,2,1,0,,0,3,4,2,2,void
3187,158175,GetCachedSize,1,opencv_caffe.ROIPoolingParameter.GetCachedSize,int opencv_caffe.ROIPoolingParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },20155.0,20155.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
3188,272869,GetCachedSize,1,opencv_tensorflow.FunctionDef_Node.GetCachedSize,int opencv_tensorflow.FunctionDef_Node.GetCachedSize (),misc\tensorflow\function.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },380.0,380.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
3189,76270,InternalSwap,1,opencv_caffe.PowerParameter.InternalSwap,void opencv_caffe.PowerParameter.InternalSwap (PowerParameter*),misc\caffe\opencv-caffe.pb.cc,"void PowerParameter::InternalSwap(PowerParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(shift_, other->shift_);
  swap(power_, other->power_);
  swap(scale_, other->scale_);
}",24635.0,24642.0,1.0,1.0,8.0,9,4,10,6,0,8,1,1,0,0,,0,8,2,1,1,void
3190,420340,getFLOPSPerElement,1,cv.dnn.PowerFunctor.getFLOPSPerElement,int64 cv.dnn.PowerFunctor.getFLOPSPerElement (),src\layers\elementwise_layers.cpp,int64 getFLOPSPerElement() const { return power == 1 ? 2 : 10; },2400.0,2400.0,5.0,68.0,1.0,2,2,1,1,0,1,1,1,0,0,,0,1,0,0,0,int64
3191,420353,base,3,cv.dnn.ExpFunctor.base,,src\layers\elementwise_layers.cpp,base,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3192,289281,descriptor,1,opencv_tensorflow.OpDef.descriptor,Descriptor opencv_tensorflow.OpDef.descriptor (),misc\tensorflow\op_def.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",599.0,601.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
3193,141827,GetCachedSize,1,opencv_caffe.LRNParameter.GetCachedSize,int opencv_caffe.LRNParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },13285.0,13285.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
3194,420356,normScale,3,cv.dnn.ExpFunctor.normScale,,src\layers\elementwise_layers.cpp,normScale,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3195,420357,normShift,3,cv.dnn.ExpFunctor.normShift,,src\layers\elementwise_layers.cpp,normShift,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3196,420358,ExpFunctor,1,cv.dnn.ExpFunctor.ExpFunctor,"ANY cv.dnn.ExpFunctor.ExpFunctor (float,float,float)",src\layers\elementwise_layers.cpp,"ExpFunctor(float base_ = -1.f, float scale_ = 1.f, float shift_ = 0.f)
        : base(base_), scale(scale_), shift(shift_)
    {
        // For base > 0 :
        // y     = base^(scale * input + shift)
        // ln(y) = ln(base)*(scale * input + shift)
        // y     = exp((ln(base)*scale) * input + (ln(base)*shift))
        // y     = exp(normalized_scale * input + normalized_shift)
        CV_Check(base, base == -1.f || base > 0.f, ""Unsupported 'base' value"");
        const float ln_base = (base == -1.f) ? 1.f : log(base);
        normScale = scale * ln_base;
        normShift = shift * ln_base;
    }",2409.0,2421.0,5.0,5.0,13.0,12,7,12,6,0,9,1,1,0,0,,0,9,6,3,3,ANY
3197,289287,GetDescriptor,1,opencv_tensorflow.OpDef.GetDescriptor,Descriptor opencv_tensorflow.OpDef.GetDescriptor (),misc\tensorflow\op_def.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",602.0,604.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
3198,420354,scale,3,cv.dnn.ExpFunctor.scale,,src\layers\elementwise_layers.cpp,scale,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3199,420355,shift,3,cv.dnn.ExpFunctor.shift,,src\layers\elementwise_layers.cpp,shift,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3200,371212,get_workspace_memory_in_bytes,1,cv.dnn.cuda4dnn.DetectionOutputOp.get_workspace_memory_in_bytes,size_t cv.dnn.cuda4dnn.DetectionOutputOp.get_workspace_memory_in_bytes (),src\cuda4dnn\primitives\detection_output.hpp,std::size_t get_workspace_memory_in_bytes() const noexcept override { return scratch_mem_in_bytes; },256.0,256.0,9.0,108.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,size_t
3201,387600,addMissing,1,cv.dnn.detail.LayerHandler.addMissing,"void cv.dnn.detail.LayerHandler.addMissing (ANY,ANY)",src\debug_utils.cpp,"void detail::LayerHandler::addMissing(const std::string& name, const std::string& type)
{
    // If we didn't add it, but can create it, it's custom and not missing.
    if (!contains(type) && LayerFactory::isLayerRegistered(type))
    {
        return;
    }

    layers[type].insert(name);
}",38.0,47.0,1.0,1.0,10.0,5,4,6,4,0,1,2,2,0,0,,0,1,4,2,2,void
3202,371218,stream,3,cv.dnn.cuda4dnn.DetectionOutputOp.stream,,src\cuda4dnn\primitives\detection_output.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
3203,371219,scratch_mem_in_bytes,3,cv.dnn.cuda4dnn.DetectionOutputOp.scratch_mem_in_bytes,,src\cuda4dnn\primitives\detection_output.hpp,scratch_mem_in_bytes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3204,371220,share_location,3,cv.dnn.cuda4dnn.DetectionOutputOp.share_location,,src\cuda4dnn\primitives\detection_output.hpp,share_location,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
3205,371221,num_priors,3,cv.dnn.cuda4dnn.DetectionOutputOp.num_priors,,src\cuda4dnn\primitives\detection_output.hpp,num_priors,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
3206,371222,num_classes,3,cv.dnn.cuda4dnn.DetectionOutputOp.num_classes,,src\cuda4dnn\primitives\detection_output.hpp,num_classes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,16,0,1,1,0,0,,0,0,0,0,0,
3207,371223,background_class_id,3,cv.dnn.cuda4dnn.DetectionOutputOp.background_class_id,,src\cuda4dnn\primitives\detection_output.hpp,background_class_id,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
3208,43541,SharedCtor,1,opencv_caffe.AccuracyParameter.SharedCtor,void opencv_caffe.AccuracyParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void AccuracyParameter::SharedCtor() {
ignore_label_ = 0;
top_k_ = 1u;
axis_ = 1;
}",14682.0,14686.0,1.0,1.0,5.0,3,1,3,3,0,3,1,1,0,0,,0,3,0,0,0,void
3209,371224,transpose_location,3,cv.dnn.cuda4dnn.DetectionOutputOp.transpose_location,,src\cuda4dnn\primitives\detection_output.hpp,transpose_location,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3210,371226,corner_true_or_center_false,3,cv.dnn.cuda4dnn.DetectionOutputOp.corner_true_or_center_false,,src\cuda4dnn\primitives\detection_output.hpp,corner_true_or_center_false,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3211,371227,normalized_bbox,3,cv.dnn.cuda4dnn.DetectionOutputOp.normalized_bbox,,src\cuda4dnn\primitives\detection_output.hpp,normalized_bbox,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
3212,371228,clip_box,3,cv.dnn.cuda4dnn.DetectionOutputOp.clip_box,,src\cuda4dnn\primitives\detection_output.hpp,clip_box,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3213,371229,classwise_topK,3,cv.dnn.cuda4dnn.DetectionOutputOp.classwise_topK,,src\cuda4dnn\primitives\detection_output.hpp,classwise_topK,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
3214,371230,confidence_threshold,3,cv.dnn.cuda4dnn.DetectionOutputOp.confidence_threshold,,src\cuda4dnn\primitives\detection_output.hpp,confidence_threshold,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3215,289309,default_instance,1,opencv_tensorflow.OpDef.default_instance,OpDef opencv_tensorflow.OpDef.default_instance (),misc\tensorflow\op_def.pb.hpp,"static const OpDef& default_instance() {
    return *internal_default_instance();
  }",608.0,610.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,OpDef
3216,371232,keepTopK,3,cv.dnn.cuda4dnn.DetectionOutputOp.keepTopK,,src\cuda4dnn\primitives\detection_output.hpp,keepTopK,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
3217,371231,nms_threshold,3,cv.dnn.cuda4dnn.DetectionOutputOp.nms_threshold,,src\cuda4dnn\primitives\detection_output.hpp,nms_threshold,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3218,371225,variance_encoded_in_target,3,cv.dnn.cuda4dnn.DetectionOutputOp.variance_encoded_in_target,,src\cuda4dnn\primitives\detection_output.hpp,variance_encoded_in_target,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3219,289316,internal_default_instance,1,opencv_tensorflow.OpDef.internal_default_instance,OpDef opencv_tensorflow.OpDef.internal_default_instance (),misc\tensorflow\op_def.pb.hpp,"static inline const OpDef* internal_default_instance() {
    return reinterpret_cast<const OpDef*>(
               &_OpDef_default_instance_);
  }",611.0,614.0,3.0,3.0,4.0,2,2,1,1,2,0,1,1,0,0,,0,0,0,0,0,OpDef
3220,387625,contains,1,cv.dnn.detail.LayerHandler.contains,bool cv.dnn.detail.LayerHandler.contains (ANY),src\debug_utils.cpp,"bool detail::LayerHandler::contains(const std::string& type) const
{
    return layers.count(type) != 0;
}",49.0,52.0,1.0,1.0,4.0,2,2,2,2,0,1,1,1,0,0,,0,1,2,1,1,bool
3221,387638,printMissing,1,cv.dnn.detail.LayerHandler.printMissing,void cv.dnn.detail.LayerHandler.printMissing (),src\debug_utils.cpp,"void detail::LayerHandler::printMissing() const
{
    if (layers.empty())
    {
        return;
    }

    std::ostringstream ss;
    ss << ""DNN: Not supported types:\n"";
    for (const auto& type_names : layers)
    {
        const auto& type = type_names.first;
        ss << ""Type='"" << type << ""', affected nodes:\n["";
        for (const auto& name : type_names.second)
        {
            ss << ""'"" << name << ""', "";
        }
        ss.seekp(-2, std::ios_base::end);
        ss << ""]\n"";
    }
    CV_LOG_ERROR(NULL, ss.str());
}",54.0,75.0,1.0,1.0,22.0,17,4,16,8,0,2,4,5,2,0,,0,2,0,0,0,void
3222,240194,_InternalSerialize,1,opencv_onnx.OperatorSetIdProto._InternalSerialize,"uint8_t opencv_onnx.OperatorSetIdProto._InternalSerialize (uint8_t*,ANY*)",misc\onnx\opencv-onnx.pb.cc,"uint8_t* OperatorSetIdProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_onnx.OperatorSetIdProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string domain = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_domain().data(), static_cast<int>(this->_internal_domain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      ""opencv_onnx.OperatorSetIdProto.domain"");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_domain(), target);
  }

  // optional int64 version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_version(), ta...",5681.0,5710.0,1.0,1.0,30.0,38,8,35,10,0,1,4,4,0,0,,0,1,4,2,2,uint8_t
3223,371267,MAX,3,cv.dnn.cuda4dnn.EltwiseOpType.MAX,,src\cuda4dnn\primitives\eltwise.hpp,MAX,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3224,371268,SUM,3,cv.dnn.cuda4dnn.EltwiseOpType.SUM,,src\cuda4dnn\primitives\eltwise.hpp,SUM,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3225,371269,PRODUCT,3,cv.dnn.cuda4dnn.EltwiseOpType.PRODUCT,,src\cuda4dnn\primitives\eltwise.hpp,PRODUCT,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3226,420419,calculate,1,cv.dnn.ExpFunctor.calculate,float cv.dnn.ExpFunctor.calculate (float),src\layers\elementwise_layers.cpp,"inline float calculate(float x) const
    {
        return exp(normScale * x + normShift);
    }",2429.0,2432.0,5.0,5.0,4.0,2,2,3,3,0,2,1,1,0,0,,0,2,2,1,1,float
3227,371270,DIV,3,cv.dnn.cuda4dnn.EltwiseOpType.DIV,,src\cuda4dnn\primitives\eltwise.hpp,DIV,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3228,371272,SUB,3,cv.dnn.cuda4dnn.EltwiseOpType.SUB,,src\cuda4dnn\primitives\eltwise.hpp,SUB,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3229,371271,MIN,3,cv.dnn.cuda4dnn.EltwiseOpType.MIN,,src\cuda4dnn\primitives\eltwise.hpp,MIN,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3230,76360,set_has_share_in_parallel,1,opencv_caffe._Internal.set_has_share_in_parallel,void opencv_caffe._Internal.set_has_share_in_parallel (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_share_in_parallel(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }",24664.0,24666.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
3231,43596,SetCachedSize,1,opencv_caffe.AccuracyParameter.SetCachedSize,void opencv_caffe.AccuracyParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void AccuracyParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",14705.0,14707.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
3232,59981,SharedDtor,1,opencv_caffe.EmbedParameter.SharedDtor,void opencv_caffe.EmbedParameter.SharedDtor (),misc\caffe\opencv-caffe.pb.cc,"inline void EmbedParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete weight_filler_;
  if (this != internal_default_instance()) delete bias_filler_;
}",19585.0,19589.0,1.0,1.0,5.0,5,3,2,2,0,4,3,3,2,0,,0,4,0,0,0,void
3233,420431,setKernelParams,1,cv.dnn.ExpFunctor.setKernelParams,void cv.dnn.ExpFunctor.setKernelParams (ANY),src\layers\elementwise_layers.cpp,"inline void setKernelParams(ocl::Kernel& kernel) const
    {
        kernel.set(3, normScale);
        kernel.set(4, normShift);
    }",2434.0,2438.0,5.0,5.0,5.0,2,1,4,3,0,2,1,1,0,0,,0,2,2,1,1,void
3234,354896,descriptor,3,cv.dnn.cuda4dnn.csl.cudnn.PoolingDescriptor.descriptor,,src\cuda4dnn\csl\cudnn\pooling.hpp,descriptor,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
3235,43606,Clear,1,opencv_caffe.AccuracyParameter.Clear,void opencv_caffe.AccuracyParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void AccuracyParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.AccuracyParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ignore_label_ = 0;
    top_k_ = 1u;
    axis_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",14709.0,14723.0,1.0,1.0,15.0,10,5,10,6,0,5,2,2,0,0,,0,5,0,0,0,void
3236,27228,_InternalSerialize,1,opencv_caffe.NetState._InternalSerialize,"uint8_t opencv_caffe.NetState._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* NetState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.NetState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .opencv_caffe.Phase phase = 1 [default = TEST];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_phase(), target);
  }

  // optional int32 level = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_level(), target);
  }

  // repeated string stage = 3;
  for (int i = 0, n = this->_internal_stage_size(); i < n; i++) {
    const auto& s = this->_internal_stage(i);
    ::PROTOBUF_NAMESPACE_ID::int...",10131.0,10167.0,1.0,1.0,37.0,48,8,52,13,0,1,5,5,0,0,,0,1,4,2,2,uint8_t
3237,371293,forward,1,cv.dnn.cuda4dnn.EltwiseOp.forward,"void cv.dnn.cuda4dnn.EltwiseOp.forward (ANY,ANY,ANY)",src\cuda4dnn\primitives\eltwise.hpp,"void forward(
            const std::vector<cv::Ptr<BackendWrapper>>& inputs,
            const std::vector<cv::Ptr<BackendWrapper>>& outputs,
            csl::Workspace& workspace) override
        {
            CV_Assert(inputs.size() >= 2);
            CV_Assert(outputs.size() == 1);

            CV_Assert(coeffs.size() == 0 || op == EltwiseOpType::SUM);
            CV_Assert(coeffs.size() == 0 || inputs.size() == coeffs.size());

            auto output_wrapper = outputs[0].dynamicCast<wrapper_type>();
            auto output = output_wrapper->getSpan();

            if (inputs.size() == 2)
            {
                auto input_wrapper_x = inputs[0].dynamicCast<wrapper_type>();
                auto input_x = input_wrapper_x->getView();

                auto input_wrapper_y = inputs[1].dynamicCast<wrapper_type>();
                auto input_y = input_wrapper_y->getView();

                switch (op)
                {
                case EltwiseOpType::MAX: kernels::eltwise_m...",58.0,128.0,9.0,9.0,71.0,51,8,61,13,0,7,10,7,0,0,,0,7,6,3,3,void
3238,60022,SetCachedSize,1,opencv_caffe.EmbedParameter.SetCachedSize,void opencv_caffe.EmbedParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void EmbedParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",19597.0,19599.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
3239,43644,_InternalParse,1,opencv_caffe.AccuracyParameter._InternalParse,"const char* opencv_caffe.AccuracyParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* AccuracyParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 top_k = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_top_k(&has_bits);
          top_k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 axis = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_axis(&has_bits);
          axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handl...",14725.0,14781.0,1.0,10.0,57.0,49,12,52,12,0,7,13,15,0,3,,0,4,4,2,2,const char*
3240,420477,scale,3,cv.dnn.ChannelsPReLUFunctor.scale,,src\layers\elementwise_layers.cpp,scale,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
3241,60032,Clear,1,opencv_caffe.EmbedParameter.Clear,void opencv_caffe.EmbedParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void EmbedParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.EmbedParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(weight_filler_ != nullptr);
      weight_filler_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bias_filler_ != nullptr);
      bias_filler_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&num_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&input_dim_) -
        reinterpret_cast<char*>(&num_output_)) + sizeof(input_dim_));
    bias_term_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",19601.0,19626.0,1.0,1.0,26.0,25,11,19,8,0,11,5,7,0,0,,0,11,0,0,0,void
3242,158345,_has_bits_,3,opencv_caffe.ROIPoolingParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
3243,158346,_cached_size_,3,opencv_caffe.ROIPoolingParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3244,158347,pooled_h_,3,opencv_caffe.ROIPoolingParameter.pooled_h_,,misc\caffe\opencv-caffe.pb.hpp,pooled_h_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
3245,158348,pooled_w_,3,opencv_caffe.ROIPoolingParameter.pooled_w_,,misc\caffe\opencv-caffe.pb.hpp,pooled_w_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
3246,158349,spatial_scale_,3,opencv_caffe.ROIPoolingParameter.spatial_scale_,,misc\caffe\opencv-caffe.pb.hpp,spatial_scale_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
3247,420507,apply,1,cv.dnn.ChannelsPReLUFunctor.apply,"void cv.dnn.ChannelsPReLUFunctor.apply (float*,float*,int,int,size_t,int,int)",src\layers\elementwise_layers.cpp,"void apply(const float* srcptr, float* dstptr, int stripeStart, int len, size_t planeSize, int cn0, int cn1) const
    {
        CV_UNUSED(stripeStart);
        CV_Assert(scale.isContinuous() && scale.type() == CV_32F);

        const float* scaleptr = scale.ptr<float>();
        CV_Assert( 0 <= cn0 && cn0 < cn1 && cn1 <= (int)scale.total() );

        for( int cn = cn0; cn < cn1; cn++, srcptr += planeSize, dstptr += planeSize )
        {
            float s = scaleptr[cn];
            int i = 0;
        #if CV_SIMD128
            v_float32x4 s4 = v_setall_f32(s), z = v_setzero_f32();
            for( ; i <= len - 16; i += 16 )
            {
                v_float32x4 x0 = v_load(srcptr + i);
                v_float32x4 x1 = v_load(srcptr + i + 4);
                v_float32x4 x2 = v_load(srcptr + i + 8);
                v_float32x4 x3 = v_load(srcptr + i + 12);
                x0 = v_select(v_ge(x0, z), x0, v_mul(x0, s4));
                x1 = v_select(v_ge(x1, z), x1, v_mul(x1, s4...",2499.0,2535.0,5.0,5.0,37.0,26,11,30,13,0,4,3,4,0,0,,0,4,14,7,7,void
3248,289441,GetCachedSize,1,opencv_tensorflow.OpDef.GetCachedSize,int opencv_tensorflow.OpDef.GetCachedSize (),misc\tensorflow\op_def.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },659.0,659.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
3249,240323,ByteSizeLong,1,opencv_onnx.OperatorSetIdProto.ByteSizeLong,size_t opencv_onnx.OperatorSetIdProto.ByteSizeLong (),misc\onnx\opencv-onnx.pb.cc,"size_t OperatorSetIdProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_onnx.OperatorSetIdProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string domain = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_domain());
    }

    // optional int64 version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_version());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}",5712.0,5736.0,1.0,1.0,25.0,20,9,18,7,0,2,4,6,0,0,,0,2,0,0,0,size_t
3250,76489,SharedCtor,1,opencv_caffe.PythonParameter.SharedCtor,void opencv_caffe.PythonParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void PythonParameter::SharedCtor() {
module_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  module_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
layer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  layer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
param_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  param_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
share_in_parallel_ = false;
}",24710.0,24724.0,1.0,1.0,15.0,13,3,10,6,0,4,1,1,0,0,,0,4,0,0,0,void
3251,387788,out,3,cv.dnn.detail.LayerShapes.out,,src\dnn_common.hpp,out,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3252,387789,internal,3,cv.dnn.detail.LayerShapes.internal,,src\dnn_common.hpp,internal,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3253,387790,supportInPlace,3,cv.dnn.detail.LayerShapes.supportInPlace,,src\dnn_common.hpp,supportInPlace,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3254,387791,LayerShapes,1,cv.dnn.detail.LayerShapes.LayerShapes,ANY cv.dnn.detail.LayerShapes.LayerShapes (),src\dnn_common.hpp,LayerShapes() {supportInPlace = false;},58.0,58.0,5.0,43.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,ANY
3255,60116,_InternalParse,1,opencv_caffe.EmbedParameter._InternalParse,"const char* opencv_caffe.EmbedParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* EmbedParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 num_output = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_num_output(&has_bits);
          num_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 input_dim = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_input_dim(&has_bits);
          input_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handl...",19628.0,19700.0,1.0,10.0,73.0,59,12,64,12,0,7,17,21,0,3,,0,4,4,2,2,const char*
3256,387799,create,1,cv.dnn.detail.NotImplemented.create,Ptr<Layer> cv.dnn.detail.NotImplemented.create (LayerParams),src\layers\not_implemented_layer.cpp,"Ptr<Layer> NotImplemented::create(const LayerParams& params)
{
    return makePtr<NotImplementedImpl>(params);
}",167.0,170.0,1.0,1.0,4.0,0,0,0,0,1,0,1,1,0,0,,0,0,2,1,1,Ptr<Layer>
3257,158455,descriptor,1,opencv_caffe.ProposalParameter.descriptor,Descriptor opencv_caffe.ProposalParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",20283.0,20285.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
3258,158461,GetDescriptor,1,opencv_caffe.ProposalParameter.GetDescriptor,Descriptor opencv_caffe.ProposalParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",20286.0,20288.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
3259,76544,SharedDtor,1,opencv_caffe.PythonParameter.SharedDtor,void opencv_caffe.PythonParameter.SharedDtor (),misc\caffe\opencv-caffe.pb.cc,"inline void PythonParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  module_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  layer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}",24733.0,24738.0,1.0,1.0,6.0,13,3,9,5,0,3,1,1,0,0,,0,3,0,0,0,void
3260,27398,ByteSizeLong,1,opencv_caffe.NetState.ByteSizeLong,size_t opencv_caffe.NetState.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t NetState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.NetState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string stage = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(stage_.size());
  for (int i = 0, n = stage_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      stage_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 level = 2 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_level());
    }

    // optional .opencv_caffe.Phase phase = 1 [default = TEST];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::intern...",10169.0,10200.0,1.0,1.0,32.0,34,11,33,10,0,5,5,7,0,0,,0,5,0,0,0,size_t
3261,158472,GetReflection,1,opencv_caffe.ProposalParameter.GetReflection,Reflection opencv_caffe.ProposalParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",20289.0,20291.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
3262,158483,default_instance,1,opencv_caffe.ProposalParameter.default_instance,ProposalParameter opencv_caffe.ProposalParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const ProposalParameter& default_instance() {
    return *internal_default_instance();
  }",20292.0,20294.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,ProposalParameter
3263,158490,internal_default_instance,1,opencv_caffe.ProposalParameter.internal_default_instance,ProposalParameter opencv_caffe.ProposalParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const ProposalParameter* internal_default_instance() {
    return reinterpret_cast<const ProposalParameter*>(
               &_ProposalParameter_default_instance_);
  }",20295.0,20298.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,ProposalParameter
3264,240427,MergeFrom,1,opencv_onnx.OperatorSetIdProto.MergeFrom,void opencv_onnx.OperatorSetIdProto.MergeFrom (OperatorSetIdProto),misc\onnx\opencv-onnx.pb.cc,"void OperatorSetIdProto::MergeFrom(const OperatorSetIdProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_onnx.OperatorSetIdProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_domain(from._internal_domain());
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",5751.0,5768.0,1.0,1.0,18.0,18,8,16,6,0,4,4,6,0,0,,0,4,2,1,1,void
3265,387893,layers,3,cv.dnn.detail.LayerHandler.layers,,src\dnn_common.hpp,layers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
3266,76604,SetCachedSize,1,opencv_caffe.PythonParameter.SetCachedSize,void opencv_caffe.PythonParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void PythonParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",24746.0,24748.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
3267,76614,Clear,1,opencv_caffe.PythonParameter.Clear,void opencv_caffe.PythonParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void PythonParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.PythonParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      module_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      layer_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      param_str_.ClearNonDefaultToEmpty();
    }
  }
  share_in_parallel_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",24750.0,24771.0,1.0,1.0,22.0,14,5,14,7,0,6,5,8,0,0,,0,6,0,0,0,void
3268,43859,_InternalSerialize,1,opencv_caffe.AccuracyParameter._InternalSerialize,"uint8_t opencv_caffe.AccuracyParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* AccuracyParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.AccuracyParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 top_k = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_top_k(), target);
  }

  // optional int32 axis = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_axis(), target);
  }

  // optional int32 ignore_label = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite...",14783.0,14814.0,1.0,1.0,32.0,39,8,43,10,0,1,5,5,0,0,,0,1,4,2,2,uint8_t
3269,273256,ret_,3,opencv_tensorflow.FunctionDef_Node.ret_,,misc\tensorflow\function.pb.hpp,ret_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
3270,273257,arg_,3,opencv_tensorflow.FunctionDef_Node.arg_,,misc\tensorflow\function.pb.hpp,arg_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
3271,273258,dep_,3,opencv_tensorflow.FunctionDef_Node.dep_,,misc\tensorflow\function.pb.hpp,dep_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
3272,273259,attr_,3,opencv_tensorflow.FunctionDef_Node.attr_,,misc\tensorflow\function.pb.hpp,attr_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
3273,273260,op_,3,opencv_tensorflow.FunctionDef_Node.op_,,misc\tensorflow\function.pb.hpp,op_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3274,273261,_cached_size_,3,opencv_tensorflow.FunctionDef_Node._cached_size_,,misc\tensorflow\function.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3275,240512,InternalSwap,1,opencv_onnx.OperatorSetIdProto.InternalSwap,void opencv_onnx.OperatorSetIdProto.InternalSwap (OperatorSetIdProto*),misc\onnx\opencv-onnx.pb.cc,"void OperatorSetIdProto::InternalSwap(OperatorSetIdProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &domain_, lhs_arena,
      &other->domain_, rhs_arena
  );
  swap(version_, other->version_);
}",5781.0,5793.0,1.0,1.0,13.0,19,5,18,10,0,6,1,1,0,0,,0,6,2,1,1,void
3276,76673,_InternalParse,1,opencv_caffe.PythonParameter._InternalParse,"const char* opencv_caffe.PythonParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* PythonParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string module = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_module();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, ""opencv_caffe.PythonParameter.module"");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string layer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _inte...",24773.0,24847.0,1.0,10.0,75.0,58,12,73,11,0,3,15,18,0,1,,0,2,4,2,2,const char*
3277,142210,_has_bits_,3,opencv_caffe.LRNParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
3278,142211,_cached_size_,3,opencv_caffe.LRNParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3279,142212,norm_region_,3,opencv_caffe.LRNParameter.norm_region_,,misc\caffe\opencv-caffe.pb.hpp,norm_region_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
3280,142213,engine_,3,opencv_caffe.LRNParameter.engine_,,misc\caffe\opencv-caffe.pb.hpp,engine_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
3281,142214,local_size_,3,opencv_caffe.LRNParameter.local_size_,,misc\caffe\opencv-caffe.pb.hpp,local_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
3282,142215,alpha_,3,opencv_caffe.LRNParameter.alpha_,,misc\caffe\opencv-caffe.pb.hpp,alpha_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
3283,142216,beta_,3,opencv_caffe.LRNParameter.beta_,,misc\caffe\opencv-caffe.pb.hpp,beta_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
3284,142217,k_,3,opencv_caffe.LRNParameter.k_,,misc\caffe\opencv-caffe.pb.hpp,k_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
3285,437140,OCL4DNNConvSpatial,1,cv.dnn.ocl4dnn.OCL4DNNConvSpatial<Dtype>.OCL4DNNConvSpatial,ANY cv.dnn.ocl4dnn.OCL4DNNConvSpatial<Dtype>.OCL4DNNConvSpatial<Dtype> (OCL4DNNConvConfig),src\ocl4dnn\src\ocl4dnn_conv_spatial.cpp,"OCL4DNNConvSpatial<Dtype>::OCL4DNNConvSpatial(OCL4DNNConvConfig config)
{
    bias_term_ = config.bias_term;
    int dims = config.in_shape.size();
    int spatial_dims = 2;

    channels_   = config.in_shape[dims - spatial_dims - 1];
    num_output_ = config.out_shape[dims - spatial_dims - 1];
    group_ = config.group;
    CV_CheckGT(group_, 0, """");  // avoid div by zero below

    fused_activ_ = OCL4DNN_CONV_FUSED_ACTIV_NONE;
    fused_eltwise_ = false;
    power_ = 1.f;
    negative_slope_ = 0;
    min_value_ = 0;
    max_value_ = 0;
    prev_kernel_type_ = -1;
    tuned_ = false;
    use_half_ = config.use_half;

    // assumption: spatial dimension is 2.
    kernel_h_ = config.kernel.height;
    kernel_w_ = config.kernel.width;
    // pads: [pad_top, pad_bottom, pad_left, pad_right]
    pad_h_ = config.pads[0]; // pad_top
    pad_bottom_ = config.pads[1];
    pad_w_ = config.pads[2]; // pad_left
    pad_right_ = config.pads[3];
    stride_h_ = config.stride.height;
    stride_...",160.0,224.0,1.0,1.0,65.0,110,13,95,42,0,20,3,4,0,0,,0,20,2,1,1,ANY
3286,158615,GetCachedSize,1,opencv_caffe.ProposalParameter.GetCachedSize,int opencv_caffe.ProposalParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },20343.0,20343.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
3287,27550,MergeFrom,1,opencv_caffe.NetState.MergeFrom,void opencv_caffe.NetState.MergeFrom (NetState),misc\caffe\opencv-caffe.pb.cc,"void NetState::MergeFrom(const NetState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.NetState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  stage_.MergeFrom(from.stage_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000002u) {
      phase_ = from.phase_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",10215.0,10233.0,1.0,1.0,19.0,21,8,19,8,2,8,4,6,0,0,,0,8,2,1,1,void
3288,273340,descriptor,1,opencv_tensorflow.FunctionDef.descriptor,Descriptor opencv_tensorflow.FunctionDef.descriptor (),misc\tensorflow\function.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",573.0,575.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
3289,240573,GetMetadata,1,opencv_onnx.OperatorSetIdProto.GetMetadata,Metadata opencv_onnx.OperatorSetIdProto.GetMetadata (),misc\onnx\opencv-onnx.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata OperatorSetIdProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2donnx_2eproto_getter, &descriptor_table_opencv_2donnx_2eproto_once,
      file_level_metadata_opencv_2donnx_2eproto[12]);
}",5795.0,5799.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
3290,273346,GetDescriptor,1,opencv_tensorflow.FunctionDef.GetDescriptor,Descriptor opencv_tensorflow.FunctionDef.GetDescriptor (),misc\tensorflow\function.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",576.0,578.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
3291,273357,GetReflection,1,opencv_tensorflow.FunctionDef.GetReflection,Reflection opencv_tensorflow.FunctionDef.GetReflection (),misc\tensorflow\function.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",579.0,581.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
3292,273368,default_instance,1,opencv_tensorflow.FunctionDef.default_instance,FunctionDef opencv_tensorflow.FunctionDef.default_instance (),misc\tensorflow\function.pb.hpp,"static const FunctionDef& default_instance() {
    return *internal_default_instance();
  }",582.0,584.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,FunctionDef
3293,43995,ByteSizeLong,1,opencv_caffe.AccuracyParameter.ByteSizeLong,size_t opencv_caffe.AccuracyParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t AccuracyParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.AccuracyParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 ignore_label = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_ignore_label());
    }

    // optional uint32 top_k = 1 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_top_k());
    }

    // optional int32 axis = 2 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_axis());
    }

  }
  return...",14816.0,14843.0,1.0,1.0,28.0,25,8,23,7,0,2,5,8,0,0,,0,2,0,0,0,size_t
3294,273375,internal_default_instance,1,opencv_tensorflow.FunctionDef.internal_default_instance,FunctionDef opencv_tensorflow.FunctionDef.internal_default_instance (),misc\tensorflow\function.pb.hpp,"static inline const FunctionDef* internal_default_instance() {
    return reinterpret_cast<const FunctionDef*>(
               &_FunctionDef_default_instance_);
  }",585.0,588.0,3.0,3.0,4.0,2,2,1,1,2,0,1,1,0,0,,0,0,0,0,0,FunctionDef
3295,60393,_InternalSerialize,1,opencv_caffe.EmbedParameter._InternalSerialize,"uint8_t opencv_caffe.EmbedParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* EmbedParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.EmbedParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_output = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_output(), target);
  }

  // optional uint32 input_dim = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_input_dim(), target);
  }

  // optional bool bias_term = 3 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLit...",19702.0,19749.0,1.0,1.0,48.0,55,8,65,11,0,3,7,7,0,2,,0,3,4,2,2,uint8_t
3296,420848,bias,3,cv.dnn.ShrinkFunctor.bias,,src\layers\elementwise_layers.cpp,bias,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3297,420849,lambd,3,cv.dnn.ShrinkFunctor.lambd,,src\layers\elementwise_layers.cpp,lambd,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3298,27642,InternalSwap,1,opencv_caffe.NetState.InternalSwap,void opencv_caffe.NetState.InternalSwap (NetState*),misc\caffe\opencv-caffe.pb.cc,"void NetState::InternalSwap(NetState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stage_.InternalSwap(&other->stage_);
  swap(level_, other->level_);
  swap(phase_, other->phase_);
}",10246.0,10253.0,1.0,1.0,8.0,11,4,10,6,0,8,1,1,0,0,,0,8,2,1,1,void
3299,404479,weightsBuf,3,cv.dnn.FastConv.weightsBuf,,src\layers\cpu_kernels\convolution.hpp,weightsBuf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3300,404480,weightsWinoBuf,3,cv.dnn.FastConv.weightsWinoBuf,,src\layers\cpu_kernels\convolution.hpp,weightsWinoBuf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3301,420870,calculate,1,cv.dnn.ShrinkFunctor.calculate,float cv.dnn.ShrinkFunctor.calculate (float),src\layers\elementwise_layers.cpp,"inline float calculate(float x) const
    {
        return x > lambd ? x - bias : (x < -lambd ? x + bias : 0.f);
    }",2747.0,2750.0,5.0,5.0,4.0,7,6,8,3,0,4,1,1,0,0,,0,4,2,1,1,float
3302,371721,InnerProductOp,1,cv.dnn.cuda4dnn.InnerProductOp.InnerProductOp,"ANY cv.dnn.cuda4dnn.InnerProductOp.InnerProductOp (ANY,ANY,ANY,Mat,Mat)",src\cuda4dnn\primitives\inner_product.hpp,"InnerProductOp(csl::Stream stream_, csl::cublas::Handle handle, std::size_t axis, const Mat& weights, const Mat& bias)
            : stream(std::move(stream_)), cublasHandle(std::move(handle)), axis{ axis }
        {
            weightsTensor = csl::makeTensorHeader<T>(weights);
            CV_Assert(get_effective_rank(weightsTensor) <= 2);
            csl::copyMatToTensor<T>(weights, weightsTensor, stream);

            if (!bias.empty())
            {
                biasTensor = csl::makeTensorHeader<T>(bias);
                csl::copyMatToTensor<T>(bias, biasTensor, stream);
                CV_Assert(weightsTensor.get_axis_size(-2) == biasTensor.size());
            }
        }",30.0,43.0,9.0,9.0,14.0,25,10,22,7,0,9,2,2,0,0,,0,9,10,5,5,ANY
3303,404490,weightsBuf_FP16,3,cv.dnn.FastConv.weightsBuf_FP16,,src\layers\cpu_kernels\convolution.hpp,weightsBuf_FP16,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3304,404491,weightsWinoBuf_FP16,3,cv.dnn.FastConv.weightsWinoBuf_FP16,,src\layers\cpu_kernels\convolution.hpp,weightsWinoBuf_FP16,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3305,355343,~DropoutDescriptor,1,cv.dnn.cuda4dnn.csl.cudnn.DropoutDescriptor.~DropoutDescriptor,ANY cv.dnn.cuda4dnn.csl.cudnn.DropoutDescriptor.~DropoutDescriptor (),src\cuda4dnn\csl\cudnn\recurrent.hpp,"~DropoutDescriptor() noexcept
    {
        if (descriptor)
        {
            CUDA4DNN_CHECK_CUDNN(cudnnDestroyDropoutDescriptor(descriptor));
        }
    }",51.0,57.0,5.0,12.0,7.0,6,1,10,3,0,3,2,2,1,0,,0,3,0,0,0,ANY
3306,142356,descriptor,1,opencv_caffe.MemoryDataParameter.descriptor,Descriptor opencv_caffe.MemoryDataParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",13520.0,13522.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
3307,142362,GetDescriptor,1,opencv_caffe.MemoryDataParameter.GetDescriptor,Descriptor opencv_caffe.MemoryDataParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",13523.0,13525.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
3308,11296,_InternalSerialize,1,opencv_caffe.PriorBoxParameter._InternalSerialize,"uint8_t opencv_caffe.PriorBoxParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* PriorBoxParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.PriorBoxParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float min_size = 1;
  for (int i = 0, n = this->_internal_min_size_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_min_size(i), target);
  }

  // repeated float max_size = 2;
  for (int i = 0, n = this->_internal_max_size_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_max_size(i), target);
  }

  // repeated float aspect_ratio = 3;
  for (int i = 0, n = this->_internal_aspect_ratio_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PR...",5821.0,5936.0,1.0,1.0,116.0,175,8,201,12,0,1,19,19,0,0,,0,1,4,2,2,uint8_t
3309,27682,GetMetadata,1,opencv_caffe.NetState.GetMetadata,Metadata opencv_caffe.NetState.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata NetState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[12]);
}",10255.0,10259.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
3310,142373,GetReflection,1,opencv_caffe.MemoryDataParameter.GetReflection,Reflection opencv_caffe.MemoryDataParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",13526.0,13528.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
3311,142384,default_instance,1,opencv_caffe.MemoryDataParameter.default_instance,MemoryDataParameter opencv_caffe.MemoryDataParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const MemoryDataParameter& default_instance() {
    return *internal_default_instance();
  }",13529.0,13531.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,MemoryDataParameter
3312,142391,internal_default_instance,1,opencv_caffe.MemoryDataParameter.internal_default_instance,MemoryDataParameter opencv_caffe.MemoryDataParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const MemoryDataParameter* internal_default_instance() {
    return reinterpret_cast<const MemoryDataParameter*>(
               &_MemoryDataParameter_default_instance_);
  }",13532.0,13535.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,MemoryDataParameter
3313,27713,set_has_min_level,1,opencv_caffe._Internal.set_has_min_level,void opencv_caffe._Internal.set_has_min_level (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_min_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }",10269.0,10271.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
3314,27724,set_has_max_level,1,opencv_caffe._Internal.set_has_max_level,void opencv_caffe._Internal.set_has_max_level (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_max_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }",10272.0,10274.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
3315,355405,get,1,cv.dnn.cuda4dnn.csl.cudnn.DropoutDescriptor.get,cudnnDropoutDescriptor_t cv.dnn.cuda4dnn.csl.cudnn.DropoutDescriptor.get (),src\cuda4dnn\csl\cudnn\recurrent.hpp,cudnnDropoutDescriptor_t get() const noexcept { return descriptor; },68.0,68.0,5.0,72.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,cudnnDropoutDescriptor_t
3316,371794,forward,1,cv.dnn.cuda4dnn.InnerProductOp.forward,"void cv.dnn.cuda4dnn.InnerProductOp.forward (ANY,ANY,ANY)",src\cuda4dnn\primitives\inner_product.hpp,"void forward(
            const std::vector<cv::Ptr<BackendWrapper>>& inputs,
            const std::vector<cv::Ptr<BackendWrapper>>& outputs,
            csl::Workspace& workspace) override
        {
            for (int i = 0; i < inputs.size(); i++)
            {
                auto input_wrapper = inputs[i].dynamicCast<wrapper_type>();
                auto input = input_wrapper->getView();

                auto output_wrapper = outputs[i].dynamicCast<wrapper_type>();
                auto output = output_wrapper->getSpan();

                std::size_t batch_size = input.size_range(0, axis);

                auto input_size = input.size() / batch_size;
                CV_Assert(input_size == weightsTensor.get_axis_size(-1));

                auto output_size = output.size() / batch_size;
                CV_Assert(output_size == weightsTensor.get_axis_size(-2));

                /* we treat the input and output as a matrix with dimensions (batch_size, input_size)
                ...",45.0,81.0,9.0,9.0,37.0,34,9,44,18,0,8,3,4,1,0,,0,8,6,3,3,void
3317,355411,descriptor,3,cv.dnn.cuda4dnn.csl.cudnn.DropoutDescriptor.descriptor,,src\cuda4dnn\csl\cudnn\recurrent.hpp,descriptor{nullptr},-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
3318,44116,MergeFrom,1,opencv_caffe.AccuracyParameter.MergeFrom,void opencv_caffe.AccuracyParameter.MergeFrom (AccuracyParameter),misc\caffe\opencv-caffe.pb.cc,"void AccuracyParameter::MergeFrom(const AccuracyParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.AccuracyParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ignore_label_ = from.ignore_label_;
    }
    if (cached_has_bits & 0x00000002u) {
      top_k_ = from.top_k_;
    }
    if (cached_has_bits & 0x00000004u) {
      axis_ = from.axis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",14858.0,14878.0,1.0,1.0,21.0,22,8,20,8,2,8,5,8,0,0,,0,8,2,1,1,void
3319,273500,GetCachedSize,1,opencv_tensorflow.FunctionDef.GetCachedSize,int opencv_tensorflow.FunctionDef.GetCachedSize (),misc\tensorflow\function.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },633.0,633.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
3320,289929,input_arg_,3,opencv_tensorflow.OpDef.input_arg_,,misc\tensorflow\op_def.pb.hpp,input_arg_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
3321,289930,output_arg_,3,opencv_tensorflow.OpDef.output_arg_,,misc\tensorflow\op_def.pb.hpp,output_arg_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
3322,289931,attr_,3,opencv_tensorflow.OpDef.attr_,,misc\tensorflow\op_def.pb.hpp,attr_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
3323,289932,name_,3,opencv_tensorflow.OpDef.name_,,misc\tensorflow\op_def.pb.hpp,name_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3324,289933,summary_,3,opencv_tensorflow.OpDef.summary_,,misc\tensorflow\op_def.pb.hpp,summary_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3325,289934,description_,3,opencv_tensorflow.OpDef.description_,,misc\tensorflow\op_def.pb.hpp,description_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3326,289935,deprecation_,3,opencv_tensorflow.OpDef.deprecation_,,misc\tensorflow\op_def.pb.hpp,* deprecation_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,11,0,1,1,0,0,,0,0,0,0,0,
3327,289936,is_commutative_,3,opencv_tensorflow.OpDef.is_commutative_,,misc\tensorflow\op_def.pb.hpp,is_commutative_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3328,27788,SharedCtor,1,opencv_caffe.NetStateRule.SharedCtor,void opencv_caffe.NetStateRule.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void NetStateRule::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&phase_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_level_) -
    reinterpret_cast<char*>(&phase_)) + sizeof(max_level_));
}",10300.0,10305.0,1.0,1.0,6.0,16,6,4,2,0,4,1,1,0,0,,0,4,0,0,0,void
3329,289937,is_aggregate_,3,opencv_tensorflow.OpDef.is_aggregate_,,misc\tensorflow\op_def.pb.hpp,is_aggregate_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3330,289939,allows_uninitialized_input_,3,opencv_tensorflow.OpDef.allows_uninitialized_input_,,misc\tensorflow\op_def.pb.hpp,allows_uninitialized_input_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
3331,289940,_cached_size_,3,opencv_tensorflow.OpDef._cached_size_,,misc\tensorflow\op_def.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3332,289938,is_stateful_,3,opencv_tensorflow.OpDef.is_stateful_,,misc\tensorflow\op_def.pb.hpp,is_stateful_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3333,76948,_InternalSerialize,1,opencv_caffe.PythonParameter._InternalSerialize,"uint8_t opencv_caffe.PythonParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* PythonParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.PythonParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string module = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_module().data(), static_cast<int>(this->_internal_module().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      ""opencv_caffe.PythonParameter.module"");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_module(), target);
  }

  // optional string layer = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_layer().data(), static_cast<int>(this->_internal_layer().length...",24849.0,24898.0,1.0,1.0,50.0,68,8,55,10,0,1,6,6,0,0,,0,1,4,2,2,uint8_t
3334,60589,ByteSizeLong,1,opencv_caffe.EmbedParameter.ByteSizeLong,size_t opencv_caffe.EmbedParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t EmbedParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.EmbedParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .opencv_caffe.FillerParameter weight_filler = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *weight_filler_);
    }

    // optional .opencv_caffe.FillerParameter bias_filler = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bias_filler_);
    }

    // optional uint32 num_output = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->...",19751.0,19792.0,1.0,1.0,42.0,36,10,32,9,0,4,7,12,0,0,,0,4,0,0,0,size_t
3335,44211,InternalSwap,1,opencv_caffe.AccuracyParameter.InternalSwap,void opencv_caffe.AccuracyParameter.InternalSwap (AccuracyParameter*),misc\caffe\opencv-caffe.pb.cc,"void AccuracyParameter::InternalSwap(AccuracyParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ignore_label_, other->ignore_label_);
  swap(top_k_, other->top_k_);
  swap(axis_, other->axis_);
}",14891.0,14898.0,1.0,1.0,8.0,9,4,10,6,0,8,1,1,0,0,,0,8,2,1,1,void
3336,142516,GetCachedSize,1,opencv_caffe.MemoryDataParameter.GetCachedSize,int opencv_caffe.MemoryDataParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },13580.0,13580.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
3337,44248,GetMetadata,1,opencv_caffe.AccuracyParameter.GetMetadata,Metadata opencv_caffe.AccuracyParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata AccuracyParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[18]);
}",14900.0,14904.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
3338,27867,SetCachedSize,1,opencv_caffe.NetStateRule.SetCachedSize,void opencv_caffe.NetStateRule.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void NetStateRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",10324.0,10326.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
3339,371935,stream,3,cv.dnn.cuda4dnn.InnerProductOp.stream,,src\cuda4dnn\primitives\inner_product.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3340,371936,cublasHandle,3,cv.dnn.cuda4dnn.InnerProductOp.cublasHandle,,src\cuda4dnn\primitives\inner_product.hpp,cublasHandle,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3341,371937,weightsTensor,3,cv.dnn.cuda4dnn.InnerProductOp.weightsTensor,,src\cuda4dnn\primitives\inner_product.hpp,weightsTensor,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
3342,355554,~RNNDescriptor,1,cv.dnn.cuda4dnn.csl.cudnn.RNNDescriptor.~RNNDescriptor,ANY cv.dnn.cuda4dnn.csl.cudnn.RNNDescriptor.~RNNDescriptor (),src\cuda4dnn\csl\cudnn\recurrent.hpp,"~RNNDescriptor() noexcept
    {
        if (descriptor)
        {
            CUDA4DNN_CHECK_CUDNN(cudnnDestroyRNNDescriptor(descriptor));
        }
    }",136.0,142.0,5.0,12.0,7.0,6,1,10,3,0,3,2,2,1,0,,0,3,0,0,0,ANY
3343,371938,biasTensor,3,cv.dnn.cuda4dnn.InnerProductOp.biasTensor,,src\cuda4dnn\primitives\inner_product.hpp,biasTensor,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3344,371939,axis,3,cv.dnn.cuda4dnn.InnerProductOp.axis,,src\cuda4dnn\primitives\inner_product.hpp,axis,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3345,27877,Clear,1,opencv_caffe.NetStateRule.Clear,void opencv_caffe.NetStateRule.Clear (),misc\caffe\opencv-caffe.pb.cc,"void NetStateRule::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.NetStateRule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stage_.Clear();
  not_stage_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&phase_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_level_) -
        reinterpret_cast<char*>(&phase_)) + sizeof(max_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",10328.0,10344.0,1.0,1.0,17.0,19,9,13,7,0,8,2,2,0,0,,0,8,0,0,0,void
3346,290019,descriptor,1,opencv_tensorflow.OpDeprecation.descriptor,Descriptor opencv_tensorflow.OpDeprecation.descriptor (),misc\tensorflow\op_def.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",909.0,911.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
3347,290025,GetDescriptor,1,opencv_tensorflow.OpDeprecation.GetDescriptor,Descriptor opencv_tensorflow.OpDeprecation.GetDescriptor (),misc\tensorflow\op_def.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",912.0,914.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
3348,44268,set_has_out_max_val,1,opencv_caffe._Internal.set_has_out_max_val,void opencv_caffe._Internal.set_has_out_max_val (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_out_max_val(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }",14911.0,14913.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
3349,224499,_InternalSerialize,1,opencv_onnx.AttributeProto._InternalSerialize,"uint8_t opencv_onnx.AttributeProto._InternalSerialize (uint8_t*,ANY*)",misc\onnx\opencv-onnx.pb.cc,"uint8_t* AttributeProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_onnx.AttributeProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      ""opencv_onnx.AttributeProto.name"");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional float f = 2;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_f(), target);
  }

  // optional int64 i ...",1073.0,1191.0,1.0,1.0,119.0,158,8,163,14,0,3,16,16,0,2,,0,3,4,2,2,uint8_t
3350,290036,GetReflection,1,opencv_tensorflow.OpDeprecation.GetReflection,Reflection opencv_tensorflow.OpDeprecation.GetReflection (),misc\tensorflow\op_def.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",915.0,917.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
3351,290047,default_instance,1,opencv_tensorflow.OpDeprecation.default_instance,OpDeprecation opencv_tensorflow.OpDeprecation.default_instance (),misc\tensorflow\op_def.pb.hpp,"static const OpDeprecation& default_instance() {
    return *internal_default_instance();
  }",918.0,920.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,OpDeprecation
3352,273666,node_,3,opencv_tensorflow.FunctionDef.node_,,misc\tensorflow\function.pb.hpp,node_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
3353,273667,signature_,3,opencv_tensorflow.FunctionDef.signature_,,misc\tensorflow\function.pb.hpp,* signature_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,12,0,1,1,0,0,,0,0,0,0,0,
3354,273668,_cached_size_,3,opencv_tensorflow.FunctionDef._cached_size_,,misc\tensorflow\function.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3355,371972,InstanceNormOp,1,cv.dnn.cuda4dnn.InstanceNormOp.InstanceNormOp,"ANY cv.dnn.cuda4dnn.InstanceNormOp.InstanceNormOp (ANY,float,size_t)",src\cuda4dnn\primitives\instance_norm.hpp,"InstanceNormOp(csl::Stream stream_, float epsilon_, size_t loops)
            : stream(std::move(stream_)), epsilon(epsilon_) {
            csl::WorkspaceBuilder builder;
            builder.require<float>(loops);
            builder.require<float>(loops);
            scratch_mem_in_bytes = builder.required_workspace_size();
        }",31.0,37.0,9.0,9.0,7.0,4,2,6,3,0,1,1,1,0,0,,0,1,6,3,3,ANY
3356,290054,internal_default_instance,1,opencv_tensorflow.OpDeprecation.internal_default_instance,OpDeprecation opencv_tensorflow.OpDeprecation.internal_default_instance (),misc\tensorflow\op_def.pb.hpp,"static inline const OpDeprecation* internal_default_instance() {
    return reinterpret_cast<const OpDeprecation*>(
               &_OpDeprecation_default_instance_);
  }",921.0,924.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,OpDeprecation
3357,355607,get,1,cv.dnn.cuda4dnn.csl.cudnn.RNNDescriptor.get,cudnnRNNDescriptor_t cv.dnn.cuda4dnn.csl.cudnn.RNNDescriptor.get (),src\cuda4dnn\csl\cudnn\recurrent.hpp,cudnnRNNDescriptor_t get() const noexcept { return descriptor; },152.0,152.0,5.0,68.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,cudnnRNNDescriptor_t
3358,159003,_has_bits_,3,opencv_caffe.ProposalParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
3359,159004,_cached_size_,3,opencv_caffe.ProposalParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3360,355613,descriptor,3,cv.dnn.cuda4dnn.csl.cudnn.RNNDescriptor.descriptor,,src\cuda4dnn\csl\cudnn\recurrent.hpp,descriptor{nullptr},-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
3361,159005,ratio_,3,opencv_caffe.ProposalParameter.ratio_,,misc\caffe\opencv-caffe.pb.hpp,ratio_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3362,159007,feat_stride_,3,opencv_caffe.ProposalParameter.feat_stride_,,misc\caffe\opencv-caffe.pb.hpp,feat_stride_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
3363,159008,base_size_,3,opencv_caffe.ProposalParameter.base_size_,,misc\caffe\opencv-caffe.pb.hpp,base_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
3364,159009,min_size_,3,opencv_caffe.ProposalParameter.min_size_,,misc\caffe\opencv-caffe.pb.hpp,min_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
3365,159010,pre_nms_topn_,3,opencv_caffe.ProposalParameter.pre_nms_topn_,,misc\caffe\opencv-caffe.pb.hpp,pre_nms_topn_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
3366,159011,post_nms_topn_,3,opencv_caffe.ProposalParameter.post_nms_topn_,,misc\caffe\opencv-caffe.pb.hpp,post_nms_topn_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
3367,159012,nms_thresh_,3,opencv_caffe.ProposalParameter.nms_thresh_,,misc\caffe\opencv-caffe.pb.hpp,nms_thresh_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
3368,27935,_InternalParse,1,opencv_caffe.NetStateRule._InternalParse,"const char* opencv_caffe.NetStateRule._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* NetStateRule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .opencv_caffe.Phase phase = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::opencv_caffe::Phase_IsValid(val))) {
            _internal_set_phase(static_cast<::opencv_caffe::Phase>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 min_level = 2;
      case 2:
        if (PROTOBUF_PREDIC...",10346.0,10440.0,1.0,10.0,95.0,83,16,93,14,0,6,24,43,1,3,,0,4,4,2,2,const char*
3369,159006,scale_,3,opencv_caffe.ProposalParameter.scale_,,misc\caffe\opencv-caffe.pb.hpp,scale_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3370,44354,SharedCtor,1,opencv_caffe.ArgMaxParameter.SharedCtor,void opencv_caffe.ArgMaxParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void ArgMaxParameter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&out_max_val_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&axis_) -
    reinterpret_cast<char*>(&out_max_val_)) + sizeof(axis_));
top_k_ = 1u;
}",14941.0,14947.0,1.0,1.0,7.0,17,7,5,3,0,5,1,1,0,0,,0,5,0,0,0,void
3371,60739,MergeFrom,1,opencv_caffe.EmbedParameter.MergeFrom,void opencv_caffe.EmbedParameter.MergeFrom (EmbedParameter),misc\caffe\opencv-caffe.pb.cc,"void EmbedParameter::MergeFrom(const EmbedParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.EmbedParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_weight_filler()->::opencv_caffe::FillerParameter::MergeFrom(from._internal_weight_filler());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_bias_filler()->::opencv_caffe::FillerParameter::MergeFrom(from._internal_bias_filler());
    }
    if (cached_has_bits & 0x00000004u) {
      num_output_ = from.num_output_;
    }
    if (cached_has_bits & 0x00000008u) {
      input_dim_ = from.input_dim_;
    }
    if (cached_has_bits & 0x00000010u) {
      bias_term_ = from.bias_term_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::Un...",19807.0,19833.0,1.0,1.0,27.0,28,9,24,8,1,10,7,12,0,2,,0,8,2,1,1,void
3372,370282,scratch_mem_in_bytes,3,cv.dnn.cuda4dnn.ConvolutionOp.scratch_mem_in_bytes,,src\cuda4dnn\primitives\convolution.hpp,scratch_mem_in_bytes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3373,273747,descriptor,1,opencv_tensorflow.GradientDef.descriptor,Descriptor opencv_tensorflow.GradientDef.descriptor (),misc\tensorflow\function.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",750.0,752.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
3374,273753,GetDescriptor,1,opencv_tensorflow.GradientDef.GetDescriptor,Descriptor opencv_tensorflow.GradientDef.GetDescriptor (),misc\tensorflow\function.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",753.0,755.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
3375,370286,crelu_floor,3,cv.dnn.cuda4dnn.ConvolutionOp.crelu_floor,,src\cuda4dnn\primitives\convolution.hpp,crelu_floor,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3376,273764,GetReflection,1,opencv_tensorflow.GradientDef.GetReflection,Reflection opencv_tensorflow.GradientDef.GetReflection (),misc\tensorflow\function.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",756.0,758.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
3377,370288,power_exp,3,cv.dnn.cuda4dnn.ConvolutionOp.power_exp,,src\cuda4dnn\primitives\convolution.hpp,power_exp,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3378,273775,default_instance,1,opencv_tensorflow.GradientDef.default_instance,GradientDef opencv_tensorflow.GradientDef.default_instance (),misc\tensorflow\function.pb.hpp,"static const GradientDef& default_instance() {
    return *internal_default_instance();
  }",759.0,761.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,GradientDef
3379,273782,internal_default_instance,1,opencv_tensorflow.GradientDef.internal_default_instance,GradientDef opencv_tensorflow.GradientDef.internal_default_instance (),misc\tensorflow\function.pb.hpp,"static inline const GradientDef* internal_default_instance() {
    return reinterpret_cast<const GradientDef*>(
               &_GradientDef_default_instance_);
  }",762.0,765.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,GradientDef
3380,77175,ByteSizeLong,1,opencv_caffe.PythonParameter.ByteSizeLong,size_t opencv_caffe.PythonParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t PythonParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.PythonParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string module = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_module());
    }

    // optional string layer = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_layer());
    }

    // optional string param_str = 3 [default = """"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_...",24900.0,24938.0,1.0,1.0,39.0,31,9,25,7,0,2,6,10,0,0,,0,2,0,0,0,size_t
3381,454012,readObject,1,cv.dnn.TorchImporter.readObject,void cv.dnn.TorchImporter.readObject (),src\torch\torch_importer.cpp,"void readObject()
    {
        int typeidx = readInt();

        if (typeidx == TYPE_TORCH)
        {
            int index = readInt();
            readTorchObject(index);
            readedIndexes.insert(index);
        }
        else if (typeidx == TYPE_NIL)
            return;
        else if (typeidx == TYPE_NUMBER)
            readDouble();
        else if (typeidx == TYPE_BOOLEAN)
            readBool();
        else if (typeidx == TYPE_STRING)
            readString();
        else if (typeidx == TYPE_TABLE)
            readTable();
        else
            CV_Error(Error::StsNotImplemented, ""Unsupported Lua type"");
    }",1004.0,1026.0,5.0,5.0,23.0,4,3,7,4,0,1,2,2,0,0,,0,1,0,0,0,void
3382,257407,_internal_set_dim_param,1,opencv_onnx.TensorShapeProto_Dimension._internal_set_dim_param,void opencv_onnx.TensorShapeProto_Dimension._internal_set_dim_param (ANY),misc\onnx\opencv-onnx.pb.hpp,"inline void TensorShapeProto_Dimension::_internal_set_dim_param(const std::string& value) {
  if (!_internal_has_dim_param()) {
    clear_value();
    set_has_dim_param();
    value_.dim_param_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.dim_param_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}",6862.0,6869.0,1.0,1.0,8.0,9,4,5,4,0,2,2,2,1,0,,0,1,2,1,1,void
3383,142720,_has_bits_,3,opencv_caffe.MemoryDataParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
3384,142721,_cached_size_,3,opencv_caffe.MemoryDataParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3385,142722,batch_size_,3,opencv_caffe.MemoryDataParameter.batch_size_,,misc\caffe\opencv-caffe.pb.hpp,batch_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
3386,142723,channels_,3,opencv_caffe.MemoryDataParameter.channels_,,misc\caffe\opencv-caffe.pb.hpp,channels_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3387,142724,height_,3,opencv_caffe.MemoryDataParameter.height_,,misc\caffe\opencv-caffe.pb.hpp,height_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3388,142725,width_,3,opencv_caffe.MemoryDataParameter.width_,,misc\caffe\opencv-caffe.pb.hpp,width_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
3389,290179,GetCachedSize,1,opencv_tensorflow.OpDeprecation.GetCachedSize,int opencv_tensorflow.OpDeprecation.GetCachedSize (),misc\tensorflow\op_def.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },969.0,969.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
3390,159118,descriptor,1,opencv_caffe.PSROIPoolingParameter.descriptor,Descriptor opencv_caffe.PSROIPoolingParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",20564.0,20566.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
3391,159124,GetDescriptor,1,opencv_caffe.PSROIPoolingParameter.GetDescriptor,Descriptor opencv_caffe.PSROIPoolingParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",20567.0,20569.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
3392,44436,SetCachedSize,1,opencv_caffe.ArgMaxParameter.SetCachedSize,void opencv_caffe.ArgMaxParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void ArgMaxParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",14966.0,14968.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
3393,44446,Clear,1,opencv_caffe.ArgMaxParameter.Clear,void opencv_caffe.ArgMaxParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void ArgMaxParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.ArgMaxParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&out_max_val_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&axis_) -
        reinterpret_cast<char*>(&out_max_val_)) + sizeof(axis_));
    top_k_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",14970.0,14985.0,1.0,1.0,16.0,18,9,12,6,0,7,2,2,0,0,,0,7,0,0,0,void
3394,159135,GetReflection,1,opencv_caffe.PSROIPoolingParameter.GetReflection,Reflection opencv_caffe.PSROIPoolingParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",20570.0,20572.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
3395,159146,default_instance,1,opencv_caffe.PSROIPoolingParameter.default_instance,PSROIPoolingParameter opencv_caffe.PSROIPoolingParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const PSROIPoolingParameter& default_instance() {
    return *internal_default_instance();
  }",20573.0,20575.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,PSROIPoolingParameter
3396,159153,internal_default_instance,1,opencv_caffe.PSROIPoolingParameter.internal_default_instance,PSROIPoolingParameter opencv_caffe.PSROIPoolingParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const PSROIPoolingParameter* internal_default_instance() {
    return reinterpret_cast<const PSROIPoolingParameter*>(
               &_PSROIPoolingParameter_default_instance_);
  }",20576.0,20579.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,PSROIPoolingParameter
3397,60860,InternalSwap,1,opencv_caffe.EmbedParameter.InternalSwap,void opencv_caffe.EmbedParameter.InternalSwap (EmbedParameter*),misc\caffe\opencv-caffe.pb.cc,"void EmbedParameter::InternalSwap(EmbedParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EmbedParameter, input_dim_)
      + sizeof(EmbedParameter::input_dim_)
      - PROTOBUF_FIELD_OFFSET(EmbedParameter, weight_filler_)>(
          reinterpret_cast<char*>(&weight_filler_),
          reinterpret_cast<char*>(&other->weight_filler_));
  swap(bias_term_, other->bias_term_);
}",19846.0,19857.0,1.0,1.0,12.0,22,12,15,9,0,9,1,1,0,0,,0,9,2,1,1,void
3398,437699,setupKernelDetails,1,cv.dnn.ocl4dnn.OCL4DNNConvSpatial<Dtype>.setupKernelDetails,"void cv.dnn.ocl4dnn.OCL4DNNConvSpatial<Dtype>.setupKernelDetails<Dtype> (int32_t,int32_t,int32_t,int32_t)",src\ocl4dnn\src\ocl4dnn_conv_spatial.cpp,"void OCL4DNNConvSpatial<Dtype>::setupKernelDetails(int32_t kernelType,
                                                   int32_t blockM,
                                                   int32_t blockK,
                                                   int32_t blockN)
{
    std::string kernelUKey;
    int32_t simd_size;

    if (kernelType == KERNEL_TYPE_INTEL_IDLF) {
        simd_size = blockN;
        kernelUKey = generateSpecificKey(KERNEL_TYPE_INTEL_IDLF, blockM, blockK, 1);

        // kernel name
        kernel_name_ = ""IDLF_"";
        kernel_name_ += kernelUKey;
        if (simd_size == 16)
            kernel_name_ += ""_SIMD16"";
        else
            kernel_name_ += ""_SIMD8"";

        // options
        options_ << "" -cl-fast-relaxed-math -D KERNEL_IDLF -D convolve_simd="" << kernel_name_;
        options_ << "" -cl-mad-enable"";
        if (clOptionSupport(""-cl-no-subgroup-ifp""))
            options_ << "" -cl-no-subgroup-ifp "";

        // defs
        int32_t output_bloc...",336.0,474.0,1.0,1.0,139.0,40,11,69,35,0,1,4,6,1,1,,0,1,8,4,4,void
3399,454083,generateLayerName,1,cv.dnn.TorchImporter.generateLayerName,String cv.dnn.TorchImporter.generateLayerName (String),src\torch\torch_importer.cpp,"inline String generateLayerName(const String &label = String())
    {
        return ""l"" + toString(++this->moduleCounter) + ""_"" + label;
    }",1028.0,1031.0,5.0,5.0,4.0,5,3,1,1,0,1,1,1,0,0,,0,1,2,1,1,String
3400,44499,_InternalParse,1,opencv_caffe.ArgMaxParameter._InternalParse,"const char* opencv_caffe.ArgMaxParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* ArgMaxParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool out_max_val = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_out_max_val(&has_bits);
          out_max_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 top_k = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_top_k(&has_bits);
          top_k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } els...",14987.0,15043.0,1.0,10.0,57.0,49,12,52,12,0,7,13,15,0,3,,0,4,4,2,2,const char*
3401,454100,fill,1,cv.dnn.TorchImporter.fill,"int cv.dnn.TorchImporter.fill (Module*,ANY,int,int)",src\torch\torch_importer.cpp,"int fill(Module *module, std::vector<std::pair<int, Module*> >& addedModules, int prevLayerId = 0, int prevOutNum = 0)
    {
        if (module == NULL)
            return prevLayerId;

        if (module->apiType.length())
        {
            int newLayerId = net.addLayer(generateLayerName(module->apiType), module->apiType, module->params);
            net.connect(prevLayerId, prevOutNum, newLayerId, 0);
            addedModules.push_back(std::make_pair(newLayerId, module));
            return newLayerId;
        }
        else
        {
            if (module->thName == ""Sequential"" || module->thName == ""Inception"")
            {
                for (size_t i = 0; i < module->modules.size(); i++)
                {
                    prevLayerId = fill(module->modules[i], addedModules, prevLayerId, prevOutNum);
                    prevOutNum = 0;
                }
                return prevLayerId;
            }
            else if (module->thName == ""Concat"")
            {
   ...",1033.0,1227.0,5.0,5.0,195.0,15,6,20,9,0,7,3,3,1,0,,0,7,8,4,4,int
3402,372181,get_workspace_memory_in_bytes,1,cv.dnn.cuda4dnn.InstanceNormOp.get_workspace_memory_in_bytes,size_t cv.dnn.cuda4dnn.InstanceNormOp.get_workspace_memory_in_bytes (),src\cuda4dnn\primitives\instance_norm.hpp,std::size_t get_workspace_memory_in_bytes() const noexcept override { return scratch_mem_in_bytes; },74.0,74.0,9.0,108.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,size_t
3403,372187,stream,3,cv.dnn.cuda4dnn.InstanceNormOp.stream,,src\cuda4dnn\primitives\instance_norm.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3404,372189,scratch_mem_in_bytes,3,cv.dnn.cuda4dnn.InstanceNormOp.scratch_mem_in_bytes,,src\cuda4dnn\primitives\instance_norm.hpp,scratch_mem_in_bytes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3405,380085,back,1,cv.dnn.cuda4dnn.csl.device.array.back,reference cv.dnn.cuda4dnn.csl.device.array.back (),src\cuda\array.hpp,const_reference back() const { return ptr[N - 1]; },63.0,63.0,29.0,79.0,1.0,2,2,2,2,0,1,1,1,0,0,,0,1,0,0,0,const_reference
3406,142831,descriptor,1,opencv_caffe.MVNParameter.descriptor,Descriptor opencv_caffe.MVNParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",13723.0,13725.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
3407,273907,GetCachedSize,1,opencv_tensorflow.GradientDef.GetCachedSize,int opencv_tensorflow.GradientDef.GetCachedSize (),misc\tensorflow\function.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },810.0,810.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
3408,142837,GetDescriptor,1,opencv_caffe.MVNParameter.GetDescriptor,Descriptor opencv_caffe.MVNParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",13726.0,13728.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
3409,60918,GetMetadata,1,opencv_caffe.EmbedParameter.GetMetadata,Metadata opencv_caffe.EmbedParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata EmbedParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[33]);
}",19859.0,19863.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
3410,372222,LayerNormOp,1,cv.dnn.cuda4dnn.LayerNormOp.LayerNormOp,"ANY cv.dnn.cuda4dnn.LayerNormOp.LayerNormOp (ANY,int,float,size_t)",src\cuda4dnn\primitives\layer_norm.hpp,"LayerNormOp(csl::Stream stream_, int normalized_axis, float epsilon_, size_t loops)
            : stream(std::move(stream_)), epsilon(epsilon_) {
            CV_CheckGE(normalized_axis, 0, ""LayerNorm/CUDA: axis needs to be normalized"");
            axis = static_cast<size_t>(normalized_axis);

            csl::WorkspaceBuilder builder;
            builder.require<float>(loops);
            builder.require<float>(loops);
            scratch_mem_in_bytes = builder.required_workspace_size();
        }",31.0,40.0,9.0,9.0,10.0,6,3,9,5,0,2,1,1,0,0,,0,2,8,4,4,ANY
3411,77312,MergeFrom,1,opencv_caffe.PythonParameter.MergeFrom,void opencv_caffe.PythonParameter.MergeFrom (PythonParameter),misc\caffe\opencv-caffe.pb.cc,"void PythonParameter::MergeFrom(const PythonParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.PythonParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_module(from._internal_module());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_layer(from._internal_layer());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_param_str(from._internal_param_str());
    }
    if (cached_has_bits & 0x00000008u) {
      share_in_parallel_ = from.share_in_parallel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",24953.0,24976.0,1.0,1.0,24.0,22,8,20,6,1,4,6,10,0,0,,0,4,2,1,1,void
3412,142848,GetReflection,1,opencv_caffe.MVNParameter.GetReflection,Reflection opencv_caffe.MVNParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",13729.0,13731.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
3413,290314,explanation_,3,opencv_tensorflow.OpDeprecation.explanation_,,misc\tensorflow\op_def.pb.hpp,explanation_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3414,290315,version_,3,opencv_tensorflow.OpDeprecation.version_,,misc\tensorflow\op_def.pb.hpp,version_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3415,60938,set_has_base,1,opencv_caffe._Internal.set_has_base,void opencv_caffe._Internal.set_has_base (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_base(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }",22466.0,22468.0,3.0,3.0,3.0,2,2,1,1,2,0,1,1,0,0,,0,0,2,1,1,void
3416,142859,default_instance,1,opencv_caffe.MVNParameter.default_instance,MVNParameter opencv_caffe.MVNParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const MVNParameter& default_instance() {
    return *internal_default_instance();
  }",13732.0,13734.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,MVNParameter
3417,290316,_cached_size_,3,opencv_tensorflow.OpDeprecation._cached_size_,,misc\tensorflow\op_def.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3418,142866,internal_default_instance,1,opencv_caffe.MVNParameter.internal_default_instance,MVNParameter opencv_caffe.MVNParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const MVNParameter* internal_default_instance() {
    return reinterpret_cast<const MVNParameter*>(
               &_MVNParameter_default_instance_);
  }",13735.0,13738.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,MVNParameter
3419,60960,set_has_shift,1,opencv_caffe._Internal.set_has_shift,void opencv_caffe._Internal.set_has_shift (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_shift(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }",24402.0,24404.0,3.0,3.0,3.0,2,2,1,1,3,0,1,1,0,0,,0,0,2,1,1,void
3420,372256,forward,1,cv.dnn.cuda4dnn.LayerNormOp.forward,"void cv.dnn.cuda4dnn.LayerNormOp.forward (ANY,ANY,ANY)",src\cuda4dnn\primitives\layer_norm.hpp,"void forward(const std::vector<cv::Ptr<BackendWrapper>>& inputs,
                     const std::vector<cv::Ptr<BackendWrapper>>& outputs,
                     csl::Workspace& workspace) override {
            auto input_wrapper = inputs[0].dynamicCast<wrapper_type>();
            auto scale_wrapper = inputs[1].dynamicCast<wrapper_type>();

            auto input = input_wrapper->getView();
            auto scale = scale_wrapper->getView();

            auto output_wrapper = outputs[0].dynamicCast<wrapper_type>();
            auto output = output_wrapper->getSpan();

            auto loops = input.size_range(0, axis);
            auto norm_size = input.size_range(axis, input.rank());
            if (norm_size == 1) {
                kernels::fill<T>(stream, output, 0.f);
                return;
            } else {
                auto ws_allocator = csl::WorkspaceAllocator(workspace);

                auto mean = ws_allocator.get_span<float>(loops);
                kernels::fill<fl...",42.0,78.0,9.0,9.0,37.0,22,5,23,13,0,3,2,2,0,0,,0,3,6,3,3,void
3421,405033,fastGemm,1,cv.dnn.fastGemm,"void cv.dnn.fastGemm (bool,int,int,int,float,float*,int,float*,float,float*,int,FastGemmOpt)",src\layers\cpu_kernels\fast_gemm.cpp,"void fastGemm(bool trans_a, bool trans_b,
              float alpha, const Mat &A, const Mat &B,
              float beta, Mat &C, FastGemmOpt &opt) {
    CV_CheckTypeEQ(A.type(), CV_32F, ""DNN/fastGemm: only support float32 for now"");
    CV_CheckTypeEQ(A.type(), B.type(), ""DNN/fastGemm: A and B should have the same type"");
    CV_CheckTypeEQ(B.type(), C.type(), ""DNN/fastGemm: B and C should have the same type"");

    const auto shape_a = shape(A);
    CV_CheckEQ(shape_a.size(), static_cast<size_t>(2), ""DNN/fastGemm: A must be 2-dimensional"");
    const auto shape_b = shape(B);
    CV_CheckEQ(shape_b.size(), static_cast<size_t>(2), ""DNN/fastGemm: B must be 2-dimensional"");
    const auto shape_c = shape(C);
    CV_CheckEQ(shape_c.size(), static_cast<size_t>(2), ""DNN/fastGemm: C must be 2-dimensional"");

    int ma = shape_a[0], na = shape_a[1];
    int mb = shape_b[0], nb = shape_b[1];

    int lda0 = na, lda1 = 1, ldb0 = nb, ldb1 = 1, ldc = shape_c[1];

    const float *a = A.ptr<c...",285.0,311.0,1.0,1.0,27.0,12,4,27,20,0,1,2,2,0,0,,0,1,16,8,8,void
3422,159278,GetCachedSize,1,opencv_caffe.PSROIPoolingParameter.GetCachedSize,int opencv_caffe.PSROIPoolingParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },20624.0,20624.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
3423,93775,_InternalSerialize,1,opencv_caffe.V1LayerParameter._InternalSerialize,"uint8_t opencv_caffe.V1LayerParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* V1LayerParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.V1LayerParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .opencv_caffe.V0LayerParameter layer = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::layer(this), target, stream);
  }

  // repeated string bottom = 2;
  for (int i = 0, n = this->_internal_bottom_size(); i < n; i++) {
    const auto& s = this->_internal_bottom(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      ""opencv_caffe.V1LayerParameter.bottom"");
    target = ...",29913.0,30272.0,1.0,1.0,360.0,421,8,528,14,0,34,45,45,0,31,,0,34,4,2,2,uint8_t
3424,290395,descriptor,1,opencv_tensorflow.OpList.descriptor,Descriptor opencv_tensorflow.OpList.descriptor (),misc\tensorflow\op_def.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",1071.0,1073.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
3425,61024,SharedCtor,1,opencv_caffe.ExpParameter.SharedCtor,void opencv_caffe.ExpParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void ExpParameter::SharedCtor() {
shift_ = 0;
base_ = -1;
scale_ = 1;
}",19900.0,19904.0,1.0,1.0,5.0,4,2,3,3,0,3,1,1,0,0,,0,3,0,0,0,void
3426,290401,GetDescriptor,1,opencv_tensorflow.OpList.GetDescriptor,Descriptor opencv_tensorflow.OpList.GetDescriptor (),misc\tensorflow\op_def.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",1074.0,1076.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
3427,77417,InternalSwap,1,opencv_caffe.PythonParameter.InternalSwap,void opencv_caffe.PythonParameter.InternalSwap (PythonParameter*),misc\caffe\opencv-caffe.pb.cc,"void PythonParameter::InternalSwap(PythonParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &module_, lhs_arena,
      &other->module_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &layer_, lhs_arena,
      &other->layer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &param_str_, lhs_arena,
      &other->param_str_, rhs_arena
  );
  swap(share_in_parallel_, other->share_in_parallel_);
}",24989.0,25011.0,1.0,1.0,23.0,37,5,36,12,0,10,1,1,0,0,,0,10,2,1,1,void
3428,290412,GetReflection,1,opencv_tensorflow.OpList.GetReflection,Reflection opencv_tensorflow.OpList.GetReflection (),misc\tensorflow\op_def.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",1077.0,1079.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
3429,290423,default_instance,1,opencv_tensorflow.OpList.default_instance,OpList opencv_tensorflow.OpList.default_instance (),misc\tensorflow\op_def.pb.hpp,"static const OpList& default_instance() {
    return *internal_default_instance();
  }",1080.0,1082.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,OpList
3430,290430,internal_default_instance,1,opencv_tensorflow.OpList.internal_default_instance,OpList opencv_tensorflow.OpList.internal_default_instance (),misc\tensorflow\op_def.pb.hpp,"static inline const OpList* internal_default_instance() {
    return reinterpret_cast<const OpList*>(
               &_OpList_default_instance_);
  }",1083.0,1086.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,OpList
3431,274057,function_name_,3,opencv_tensorflow.GradientDef.function_name_,,misc\tensorflow\function.pb.hpp,function_name_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3432,274058,gradient_func_,3,opencv_tensorflow.GradientDef.gradient_func_,,misc\tensorflow\function.pb.hpp,gradient_func_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3433,274059,_cached_size_,3,opencv_tensorflow.GradientDef._cached_size_,,misc\tensorflow\function.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3434,142991,GetCachedSize,1,opencv_caffe.MVNParameter.GetCachedSize,int opencv_caffe.MVNParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },13783.0,13783.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
3435,28312,_InternalSerialize,1,opencv_caffe.NetStateRule._InternalSerialize,"uint8_t opencv_caffe.NetStateRule._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* NetStateRule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.NetStateRule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .opencv_caffe.Phase phase = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_phase(), target);
  }

  // optional int32 min_level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_min_level(), target);
  }

  // optional int32 max_level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32T...",10442.0,10494.0,1.0,1.0,53.0,73,8,79,13,0,1,7,7,0,0,,0,1,4,2,2,uint8_t
3436,61080,SetCachedSize,1,opencv_caffe.ExpParameter.SetCachedSize,void opencv_caffe.ExpParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void ExpParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",19923.0,19925.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
3437,61090,Clear,1,opencv_caffe.ExpParameter.Clear,void opencv_caffe.ExpParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void ExpParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.ExpParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    shift_ = 0;
    base_ = -1;
    scale_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",19927.0,19941.0,1.0,1.0,15.0,11,6,10,6,0,5,2,2,0,0,,0,5,0,0,0,void
3438,356006,~TensorTransformDescriptor,1,cv.dnn.cuda4dnn.csl.cudnn.TensorTransformDescriptor.~TensorTransformDescriptor,ANY cv.dnn.cuda4dnn.csl.cudnn.TensorTransformDescriptor.~TensorTransformDescriptor (),src\cuda4dnn\csl\cudnn\transform.hpp,"~TensorTransformDescriptor() noexcept {
            if (descriptor != nullptr) {
                /* cudnnDestroyTensorTransformDescriptor will not fail for a valid descriptor */
                CUDA4DNN_CHECK_CUDNN(cudnnDestroyTensorTransformDescriptor(descriptor));
            }
        }",52.0,57.0,9.0,16.0,6.0,7,2,10,3,0,3,2,2,1,0,,0,3,0,0,0,ANY
3439,11944,ByteSizeLong,1,opencv_caffe.PriorBoxParameter.ByteSizeLong,size_t opencv_caffe.PriorBoxParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t PriorBoxParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.PriorBoxParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float min_size = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_min_size_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_min_size_size());
    total_size += data_size;
  }

  // repeated float max_size = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_max_size_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_max_size_size());
    total_size += data_size;
  }

  // repeated float aspect_ratio = 3;
  {
    unsigned int count = static_cast<unsign...",5938.0,6067.0,1.0,1.0,130.0,131,10,99,9,0,2,11,19,0,0,,0,2,0,0,0,size_t
3440,44714,_InternalSerialize,1,opencv_caffe.ArgMaxParameter._InternalSerialize,"uint8_t opencv_caffe.ArgMaxParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* ArgMaxParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.ArgMaxParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool out_max_val = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_out_max_val(), target);
  }

  // optional uint32 top_k = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_top_k(), target);
  }

  // optional int32 axis = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat...",15045.0,15076.0,1.0,1.0,32.0,39,8,43,10,0,1,5,5,0,0,,0,1,4,2,2,uint8_t
3441,61129,_InternalParse,1,opencv_caffe.ExpParameter._InternalParse,"const char* opencv_caffe.ExpParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* ExpParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float base = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_base(&has_bits);
          base_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float scale = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_scale(&has_bits);
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
   ...",19943.0,19999.0,1.0,6.0,57.0,49,14,52,13,0,7,13,15,0,3,,0,4,4,2,2,const char*
3442,77524,GetMetadata,1,opencv_caffe.PythonParameter.GetMetadata,Metadata opencv_caffe.PythonParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata PythonParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[50]);
}",25013.0,25017.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
3443,159452,_has_bits_,3,opencv_caffe.PSROIPoolingParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
3444,159453,_cached_size_,3,opencv_caffe.PSROIPoolingParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3445,159454,spatial_scale_,3,opencv_caffe.PSROIPoolingParameter.spatial_scale_,,misc\caffe\opencv-caffe.pb.hpp,spatial_scale_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
3446,159455,output_dim_,3,opencv_caffe.PSROIPoolingParameter.output_dim_,,misc\caffe\opencv-caffe.pb.hpp,output_dim_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3447,159456,group_size_,3,opencv_caffe.PSROIPoolingParameter.group_size_,,misc\caffe\opencv-caffe.pb.hpp,group_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
3448,356061,get,1,cv.dnn.cuda4dnn.csl.cudnn.TensorTransformDescriptor.get,cudnnTensorTransformDescriptor_t cv.dnn.cuda4dnn.csl.cudnn.TensorTransformDescriptor.get (),src\cuda4dnn\csl\cudnn\transform.hpp,cudnnTensorTransformDescriptor_t get() const noexcept { return descriptor; },66.0,66.0,9.0,84.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,cudnnTensorTransformDescriptor_t
3449,356067,constructor,1,cv.dnn.cuda4dnn.csl.cudnn.TensorTransformDescriptor.constructor,"void cv.dnn.cuda4dnn.csl.cudnn.TensorTransformDescriptor.constructor<SequenceContainer> (SequenceContainer,SequenceContainer)",src\cuda4dnn\csl\cudnn\transform.hpp,"void constructor(
            const SequenceContainer& padding_left,
            const SequenceContainer& padding_right
        )
        {
            CV_Assert(padding_left.size() == padding_right.size());

            auto ipadding_left  = std::vector<int32_t>(std::begin(padding_left), std::end(padding_left));
            auto ipadding_right = std::vector<int32_t>(std::begin(padding_right), std::end(padding_right));
            CUDA4DNN_CHECK_CUDNN(cudnnCreateTensorTransformDescriptor(&descriptor));
            try {
                CUDA4DNN_CHECK_CUDNN(
                    cudnnSetTensorTransformDescriptor(
                        descriptor,
                        ipadding_left.size(), CUDNN_TENSOR_NCHW,
                        ipadding_left.data(), ipadding_right.data(),
                        NULL, CUDNN_TRANSFORM_FOLD
                    )
                );
            } catch (...) {
                /* cudnnDestroyTensorTransformDescriptor will not fail for a valid descr...",70.0,94.0,9.0,12.0,25.0,43,9,48,14,0,5,2,2,0,0,,0,5,4,2,2,void
3450,372453,get_workspace_memory_in_bytes,1,cv.dnn.cuda4dnn.LayerNormOp.get_workspace_memory_in_bytes,size_t cv.dnn.cuda4dnn.LayerNormOp.get_workspace_memory_in_bytes (),src\cuda4dnn\primitives\layer_norm.hpp,std::size_t get_workspace_memory_in_bytes() const noexcept override { return scratch_mem_in_bytes; },80.0,80.0,9.0,108.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,size_t
3451,372459,stream,3,cv.dnn.cuda4dnn.LayerNormOp.stream,,src\cuda4dnn\primitives\layer_norm.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3452,372461,axis,3,cv.dnn.cuda4dnn.LayerNormOp.axis,,src\cuda4dnn\primitives\layer_norm.hpp,axis,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3453,372462,scratch_mem_in_bytes,3,cv.dnn.cuda4dnn.LayerNormOp.scratch_mem_in_bytes,,src\cuda4dnn\primitives\layer_norm.hpp,scratch_mem_in_bytes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3454,290555,GetCachedSize,1,opencv_tensorflow.OpList.GetCachedSize,int opencv_tensorflow.OpList.GetCachedSize (),misc\tensorflow\op_def.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },1131.0,1131.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
3455,372486,LRNOp,1,cv.dnn.cuda4dnn.LRNOp.LRNOp,"ANY cv.dnn.cuda4dnn.LRNOp.LRNOp (ANY,LRNType,ANY,T,T,T,ANY)",src\cuda4dnn\primitives\lrn.hpp,"LRNOp(csl::cudnn::Handle handle, LRNType type_, std::size_t local_size, T alpha, T beta, T bias, std::size_t largestInputSize)
            : scratch_mem_in_bytes { 0 }
        {
            typename csl::LRN<T>::LRNType type{};
            switch (type_) {
            case LRNType::ACROSS_CHANNELS: type = csl::LRN<T>::LRNType::ACROSS_CHANNELS; break;
            case LRNType::WITHIN_CHANNEL: type = csl::LRN<T>::LRNType::WITHIN_CHANNEL; break;
            }
            lrn = csl::LRN<T>(std::move(handle), local_size, alpha, beta, bias, type);

            csl::WorkspaceBuilder builder;
            if (type_ == LRNType::WITHIN_CHANNEL) {
                /* this is not a bug; we require two of these */
                builder.require<T>(largestInputSize);
                builder.require<T>(largestInputSize);
            }

            scratch_mem_in_bytes = builder.required_workspace_size();
        }",28.0,46.0,9.0,9.0,19.0,21,4,29,15,0,2,5,3,0,0,,0,2,14,7,7,ANY
3456,241424,descriptor,1,opencv_onnx.AttributeProto.descriptor,Descriptor opencv_onnx.AttributeProto.descriptor (),misc\onnx\opencv-onnx.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",249.0,251.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
3457,241430,GetDescriptor,1,opencv_onnx.AttributeProto.GetDescriptor,Descriptor opencv_onnx.AttributeProto.GetDescriptor (),misc\onnx\opencv-onnx.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",252.0,254.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
3458,77598,set_has_expose_hidden,1,opencv_caffe._Internal.set_has_expose_hidden,void opencv_caffe._Internal.set_has_expose_hidden (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_expose_hidden(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }",25038.0,25040.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
3459,241441,GetReflection,1,opencv_onnx.AttributeProto.GetReflection,Reflection opencv_onnx.AttributeProto.GetReflection (),misc\onnx\opencv-onnx.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",255.0,257.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
3460,77609,weight_filler,1,opencv_caffe.RecurrentParameter._Internal.weight_filler,FillerParameter opencv_caffe.RecurrentParameter._Internal.weight_filler (RecurrentParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::FillerParameter&
RecurrentParameter::_Internal::weight_filler(const RecurrentParameter* msg) {
  return *msg->weight_filler_;
}",25043.0,25046.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,FillerParameter
3461,241452,default_instance,1,opencv_onnx.AttributeProto.default_instance,AttributeProto opencv_onnx.AttributeProto.default_instance (),misc\onnx\opencv-onnx.pb.hpp,"static const AttributeProto& default_instance() {
    return *internal_default_instance();
  }",258.0,260.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,AttributeProto
3462,225073,ByteSizeLong,1,opencv_onnx.AttributeProto.ByteSizeLong,size_t opencv_onnx.AttributeProto.ByteSizeLong (),misc\onnx\opencv-onnx.pb.cc,"size_t AttributeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_onnx.AttributeProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float floats = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_floats_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_floats_size());
    total_size += data_size;
  }

  // repeated int64 ints = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->ints_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ints_size());
    total_size += data_size;
  }

  // repeated bytes strings = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(strings_.size())...",1193.0,1303.0,1.0,1.0,111.0,117,12,96,15,0,10,14,22,2,0,,0,10,0,0,0,size_t
3463,44850,ByteSizeLong,1,opencv_caffe.ArgMaxParameter.ByteSizeLong,size_t opencv_caffe.ArgMaxParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t ArgMaxParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.ArgMaxParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool out_max_val = 1 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional int32 axis = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_axis());
    }

    // optional uint32 top_k = 2 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_top_k());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}",15078.0,15105.0,1.0,1.0,28.0,22,9,20,7,0,2,5,8,0,0,,0,2,0,0,0,size_t
3464,241459,internal_default_instance,1,opencv_onnx.AttributeProto.internal_default_instance,AttributeProto opencv_onnx.AttributeProto.internal_default_instance (),misc\onnx\opencv-onnx.pb.hpp,"static inline const AttributeProto* internal_default_instance() {
    return reinterpret_cast<const AttributeProto*>(
               &_AttributeProto_default_instance_);
  }",261.0,264.0,3.0,3.0,4.0,2,2,1,1,3,0,1,1,0,0,,0,0,0,0,0,AttributeProto
3465,77619,bias_filler,1,opencv_caffe.RecurrentParameter._Internal.bias_filler,FillerParameter opencv_caffe.RecurrentParameter._Internal.bias_filler (RecurrentParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::FillerParameter&
RecurrentParameter::_Internal::bias_filler(const RecurrentParameter* msg) {
  return *msg->bias_filler_;
}",25047.0,25050.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,FillerParameter
3466,143161,_has_bits_,3,opencv_caffe.MVNParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
3467,143162,_cached_size_,3,opencv_caffe.MVNParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3468,143163,across_channels_,3,opencv_caffe.MVNParameter.across_channels_,,misc\caffe\opencv-caffe.pb.hpp,across_channels_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
3469,143164,normalize_variance_,3,opencv_caffe.MVNParameter.normalize_variance_,,misc\caffe\opencv-caffe.pb.hpp,normalize_variance_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
3470,143165,eps_,3,opencv_caffe.MVNParameter.eps_,,misc\caffe\opencv-caffe.pb.hpp,eps_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
3471,372572,forward,1,cv.dnn.cuda4dnn.LRNOp.forward,"void cv.dnn.cuda4dnn.LRNOp.forward (ANY,ANY,ANY)",src\cuda4dnn\primitives\lrn.hpp,"void forward(
            const std::vector<cv::Ptr<BackendWrapper>>& inputs,
            const std::vector<cv::Ptr<BackendWrapper>>& outputs,
            csl::Workspace& workspace) override
        {
            for (int i = 0; i < inputs.size(); i++)
            {
                auto input_wrapper = inputs[i].dynamicCast<wrapper_type>();
                auto input = input_wrapper->getView();

                auto output_wrapper = outputs[i].dynamicCast<wrapper_type>();
                auto output = output_wrapper->getSpan();

                csl::WorkspaceAllocator allocator(workspace);
                lrn.normalize(input, output, allocator.get_instance());
            }
        }",48.0,64.0,9.0,9.0,17.0,15,5,18,10,0,1,2,2,0,0,,0,1,6,3,3,void
3472,290670,op_,3,opencv_tensorflow.OpList.op_,,misc\tensorflow\op_def.pb.hpp,op_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
3473,290671,_cached_size_,3,opencv_tensorflow.OpList._cached_size_,,misc\tensorflow\op_def.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3474,356213,descriptor,3,cv.dnn.cuda4dnn.csl.cudnn.TensorTransformDescriptor.descriptor,,src\cuda4dnn\csl\cudnn\transform.hpp,descriptor,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
3475,61326,_InternalSerialize,1,opencv_caffe.ExpParameter._InternalSerialize,"uint8_t opencv_caffe.ExpParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* ExpParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.ExpParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float base = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_base(), target);
  }

  // optional float scale = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_scale(), target);
  }

  // optional float shift = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Wr...",20001.0,20032.0,1.0,1.0,32.0,39,8,43,10,0,1,5,5,0,0,,0,1,4,2,2,uint8_t
3476,77720,SharedCtor,1,opencv_caffe.RecurrentParameter.SharedCtor,void opencv_caffe.RecurrentParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void RecurrentParameter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&weight_filler_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expose_hidden_) -
    reinterpret_cast<char*>(&weight_filler_)) + sizeof(expose_hidden_));
}",25080.0,25085.0,1.0,1.0,6.0,16,6,4,2,0,4,1,1,0,0,,0,4,0,0,0,void
3477,28572,ByteSizeLong,1,opencv_caffe.NetStateRule.ByteSizeLong,size_t opencv_caffe.NetStateRule.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t NetStateRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.NetStateRule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string stage = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(stage_.size());
  for (int i = 0, n = stage_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      stage_.Get(i));
  }

  // repeated string not_stage = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(not_stage_.size());
  for (int i = 0, n = not_stage_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      not_stage_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .opencv_caffe.Phase phase = 1;
    if (cached_has_bits & ...",10496.0,10540.0,1.0,1.0,45.0,54,11,53,11,0,8,7,10,0,0,,0,8,0,0,0,size_t
3478,372639,get_workspace_memory_in_bytes,1,cv.dnn.cuda4dnn.LRNOp.get_workspace_memory_in_bytes,size_t cv.dnn.cuda4dnn.LRNOp.get_workspace_memory_in_bytes (),src\cuda4dnn\primitives\lrn.hpp,std::size_t get_workspace_memory_in_bytes() const noexcept override { return scratch_mem_in_bytes; },66.0,66.0,9.0,108.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,size_t
3479,44962,MergeFrom,1,opencv_caffe.ArgMaxParameter.MergeFrom,void opencv_caffe.ArgMaxParameter.MergeFrom (ArgMaxParameter),misc\caffe\opencv-caffe.pb.cc,"void ArgMaxParameter::MergeFrom(const ArgMaxParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.ArgMaxParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      out_max_val_ = from.out_max_val_;
    }
    if (cached_has_bits & 0x00000002u) {
      axis_ = from.axis_;
    }
    if (cached_has_bits & 0x00000004u) {
      top_k_ = from.top_k_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",15120.0,15140.0,1.0,1.0,21.0,22,8,20,8,2,8,5,8,0,0,,0,8,2,1,1,void
3480,372645,lrn,3,cv.dnn.cuda4dnn.LRNOp.lrn,,src\cuda4dnn\primitives\lrn.hpp,lrn,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3481,372646,scratch_mem_in_bytes,3,cv.dnn.cuda4dnn.LRNOp.scratch_mem_in_bytes,,src\cuda4dnn\primitives\lrn.hpp,scratch_mem_in_bytes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3482,143271,descriptor,1,opencv_caffe.ParameterParameter.descriptor,Descriptor opencv_caffe.ParameterParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",13911.0,13913.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
3483,143277,GetDescriptor,1,opencv_caffe.ParameterParameter.GetDescriptor,Descriptor opencv_caffe.ParameterParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",13914.0,13916.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
3484,241584,GetCachedSize,1,opencv_onnx.AttributeProto.GetCachedSize,int opencv_onnx.AttributeProto.GetCachedSize (),misc\onnx\opencv-onnx.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },309.0,309.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
3485,143288,GetReflection,1,opencv_caffe.ParameterParameter.GetReflection,Reflection opencv_caffe.ParameterParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",13917.0,13919.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
3486,372673,MatMulOp,1,cv.dnn.cuda4dnn.MatMulOp.MatMulOp,"ANY cv.dnn.cuda4dnn.MatMulOp.MatMulOp (ANY,ANY,Mat,Mat,bool,bool)",src\cuda4dnn\primitives\matmul.hpp,"MatMulOp(csl::Stream stream_, csl::cublas::Handle handle, const Mat& constInp, const Mat& bias, bool _transA, bool _transB)
            : stream(std::move(stream_)), cublasHandle(std::move(handle))
        {
            if (!constInp.empty())
            {
                constTensor = csl::makeTensorHeader<T>(constInp);
                csl::copyMatToTensor<T>(constInp, constTensor, stream);
            }

            if (!bias.empty())
            {
                biasTensor = csl::makeTensorHeader<T>(bias);
                csl::copyMatToTensor<T>(bias, biasTensor, stream);
            }

            transA = _transA;
            transB = _transB;
        }",28.0,45.0,9.0,9.0,18.0,24,7,24,11,0,8,3,3,0,0,,0,8,12,6,6,ANY
3487,143299,default_instance,1,opencv_caffe.ParameterParameter.default_instance,ParameterParameter opencv_caffe.ParameterParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const ParameterParameter& default_instance() {
    return *internal_default_instance();
  }",13920.0,13922.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,ParameterParameter
3488,143306,internal_default_instance,1,opencv_caffe.ParameterParameter.internal_default_instance,ParameterParameter opencv_caffe.ParameterParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const ParameterParameter* internal_default_instance() {
    return reinterpret_cast<const ParameterParameter*>(
               &_ParameterParameter_default_instance_);
  }",13923.0,13926.0,3.0,3.0,4.0,2,2,1,1,2,0,1,1,0,0,,0,0,0,0,0,ParameterParameter
3489,77772,SharedDtor,1,opencv_caffe.RecurrentParameter.SharedDtor,void opencv_caffe.RecurrentParameter.SharedDtor (),misc\caffe\opencv-caffe.pb.cc,"inline void RecurrentParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete weight_filler_;
  if (this != internal_default_instance()) delete bias_filler_;
}",25094.0,25098.0,1.0,1.0,5.0,5,3,2,2,0,4,3,3,2,0,,0,4,0,0,0,void
3490,77813,SetCachedSize,1,opencv_caffe.RecurrentParameter.SetCachedSize,void opencv_caffe.RecurrentParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void RecurrentParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",25106.0,25108.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
3491,77823,Clear,1,opencv_caffe.RecurrentParameter.Clear,void opencv_caffe.RecurrentParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void RecurrentParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.RecurrentParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(weight_filler_ != nullptr);
      weight_filler_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bias_filler_ != nullptr);
      bias_filler_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&num_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&expose_hidden_) -
        reinterpret_cast<char*>(&num_output_)) + sizeof(expose_hidden_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",25110.0,25134.0,1.0,1.0,25.0,24,11,18,7,0,10,5,7,0,0,,0,10,0,0,0,void
3492,45057,InternalSwap,1,opencv_caffe.ArgMaxParameter.InternalSwap,void opencv_caffe.ArgMaxParameter.InternalSwap (ArgMaxParameter*),misc\caffe\opencv-caffe.pb.cc,"void ArgMaxParameter::InternalSwap(ArgMaxParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ArgMaxParameter, axis_)
      + sizeof(ArgMaxParameter::axis_)
      - PROTOBUF_FIELD_OFFSET(ArgMaxParameter, out_max_val_)>(
          reinterpret_cast<char*>(&out_max_val_),
          reinterpret_cast<char*>(&other->out_max_val_));
  swap(top_k_, other->top_k_);
}",15153.0,15164.0,1.0,1.0,12.0,22,12,15,9,0,9,1,1,0,0,,0,9,2,1,1,void
3493,372743,forward,1,cv.dnn.cuda4dnn.MatMulOp.forward,"void cv.dnn.cuda4dnn.MatMulOp.forward (ANY,ANY,ANY)",src\cuda4dnn\primitives\matmul.hpp,"void forward(
            const std::vector<cv::Ptr<BackendWrapper>>& inputs,
            const std::vector<cv::Ptr<BackendWrapper>>& outputs,
            csl::Workspace& workspace) override
        {
            CV_Assert(((inputs.size() == 2 && constTensor.empty()) ||
                       (inputs.size() == 1 && !constTensor.empty())) && outputs.size() == 1);

            auto input1_wrapper = inputs[0].dynamicCast<wrapper_type>();
            auto input1 = input1_wrapper->getView();

            csl::TensorView<T> input2;
            if (constTensor.empty())
            {
                auto input2_wrapper = inputs[1].dynamicCast<wrapper_type>();
                input2 = input2_wrapper->getView();
            }
            else
                input2 = csl::TensorView<T>(constTensor);

            auto output_wrapper = outputs[0].dynamicCast<wrapper_type>();
            auto output = output_wrapper->getSpan();

            auto rank = output.rank();
            CV_Assert(rank =...",47.0,142.0,9.0,9.0,96.0,82,14,81,26,0,11,7,8,4,0,,0,11,6,3,3,void
3494,61462,ByteSizeLong,1,opencv_caffe.ExpParameter.ByteSizeLong,size_t opencv_caffe.ExpParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t ExpParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.ExpParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float shift = 3 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float base = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float scale = 2 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}",20034.0,20061.0,1.0,1.0,28.0,16,7,14,4,0,2,5,8,0,0,,0,2,0,0,0,size_t
3495,307229,fbb_,3,opencv_tflite.CustomQuantizationBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3496,307230,start_,3,opencv_tflite.CustomQuantizationBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3497,307231,add_custom,1,opencv_tflite.CustomQuantizationBuilder.add_custom,void opencv_tflite.CustomQuantizationBuilder.add_custom (ANY),misc\tflite\schema_generated.hpp,"void add_custom(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> custom) {
    fbb_.AddOffset(CustomQuantization::VT_CUSTOM, custom);
  }",2313.0,2315.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
3498,307244,CustomQuantizationBuilder,1,opencv_tflite.CustomQuantizationBuilder.CustomQuantizationBuilder,ANY opencv_tflite.CustomQuantizationBuilder.CustomQuantizationBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit CustomQuantizationBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",2316.0,2319.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
3499,307255,Finish,1,opencv_tflite.CustomQuantizationBuilder.Finish,Offset<CustomQuantization> opencv_tflite.CustomQuantizationBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<CustomQuantization> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CustomQuantization>(end);
    return o;
  }",2320.0,2324.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<CustomQuantization>
3500,45115,GetMetadata,1,opencv_caffe.ArgMaxParameter.GetMetadata,Metadata opencv_caffe.ArgMaxParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata ArgMaxParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[19]);
}",15166.0,15170.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
3501,143431,GetCachedSize,1,opencv_caffe.ParameterParameter.GetCachedSize,int opencv_caffe.ParameterParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },13971.0,13971.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
3502,307279,CreateCustomQuantization,1,opencv_tflite.CreateCustomQuantization,"Offset<CustomQuantization> opencv_tflite.CreateCustomQuantization (ANY,ANY)",misc\tflite\schema_generated.hpp,"inline ::flatbuffers::Offset<CustomQuantization> CreateCustomQuantization(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> custom = 0) {
  CustomQuantizationBuilder builder_(_fbb);
  builder_.add_custom(custom);
  return builder_.Finish();
}",2327.0,2333.0,1.0,1.0,7.0,2,1,4,3,1,0,1,1,0,0,,0,0,4,2,2,Offset<CustomQuantization>
3503,77904,_InternalParse,1,opencv_caffe.RecurrentParameter._InternalParse,"const char* opencv_caffe.RecurrentParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* RecurrentParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 num_output = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_num_output(&has_bits);
          num_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .opencv_caffe.FillerParameter weight_filler = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_weight_filler(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual...",25136.0,25208.0,1.0,10.0,73.0,59,12,64,12,0,7,17,21,0,3,,0,4,4,2,2,const char*
3504,127066,_has_bits_,3,opencv_caffe.LayerParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,15,0,1,1,0,0,,0,0,0,0,0,
3505,127067,_cached_size_,3,opencv_caffe.LayerParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3506,127068,bottom_,3,opencv_caffe.LayerParameter.bottom_,,misc\caffe\opencv-caffe.pb.hpp,bottom_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
3507,127069,top_,3,opencv_caffe.LayerParameter.top_,,misc\caffe\opencv-caffe.pb.hpp,top_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
3508,127070,loss_weight_,3,opencv_caffe.LayerParameter.loss_weight_,,misc\caffe\opencv-caffe.pb.hpp,loss_weight_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3509,127071,param_,3,opencv_caffe.LayerParameter.param_,,misc\caffe\opencv-caffe.pb.hpp,param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
3510,127072,blobs_,3,opencv_caffe.LayerParameter.blobs_,,misc\caffe\opencv-caffe.pb.hpp,blobs_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
3511,127073,include_,3,opencv_caffe.LayerParameter.include_,,misc\caffe\opencv-caffe.pb.hpp,include_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
3512,127074,exclude_,3,opencv_caffe.LayerParameter.exclude_,,misc\caffe\opencv-caffe.pb.hpp,exclude_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
3513,127075,propagate_down_,3,opencv_caffe.LayerParameter.propagate_down_,,misc\caffe\opencv-caffe.pb.hpp,propagate_down_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3514,127076,name_,3,opencv_caffe.LayerParameter.name_,,misc\caffe\opencv-caffe.pb.hpp,name_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3515,12389,MergeFrom,1,opencv_caffe.PriorBoxParameter.MergeFrom,void opencv_caffe.PriorBoxParameter.MergeFrom (PriorBoxParameter),misc\caffe\opencv-caffe.pb.cc,"void PriorBoxParameter::MergeFrom(const PriorBoxParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.PriorBoxParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  min_size_.MergeFrom(from.min_size_);
  max_size_.MergeFrom(from.max_size_);
  aspect_ratio_.MergeFrom(from.aspect_ratio_);
  variance_.MergeFrom(from.variance_);
  offset_h_.MergeFrom(from.offset_h_);
  offset_w_.MergeFrom(from.offset_w_);
  width_.MergeFrom(from.width_);
  height_.MergeFrom(from.height_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      img_size_ = from.img_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      img_h_ = from.img_h_;
    }
    if (cached_has_bits & 0x00000004u) {
      img_w_ = from.img_w_;
    }
    if (cached_has_bits & 0x00000008u) {
      step_ = from.step_;
    }
    if (cached_has_bits & 0x00000010u) {
      step_h...",6082.0,6128.0,1.0,1.0,47.0,55,8,53,21,1,34,11,19,0,0,,0,34,2,1,1,void
3516,127077,type_,3,opencv_caffe.LayerParameter.type_,,misc\caffe\opencv-caffe.pb.hpp,type_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3517,127079,loss_param_,3,opencv_caffe.LayerParameter.loss_param_,,misc\caffe\opencv-caffe.pb.hpp,* loss_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3518,127078,transform_param_,3,opencv_caffe.LayerParameter.transform_param_,,misc\caffe\opencv-caffe.pb.hpp,* transform_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
3519,127080,accuracy_param_,3,opencv_caffe.LayerParameter.accuracy_param_,,misc\caffe\opencv-caffe.pb.hpp,* accuracy_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3520,127082,concat_param_,3,opencv_caffe.LayerParameter.concat_param_,,misc\caffe\opencv-caffe.pb.hpp,* concat_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3521,127083,contrastive_loss_param_,3,opencv_caffe.LayerParameter.contrastive_loss_param_,,misc\caffe\opencv-caffe.pb.hpp,* contrastive_loss_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3522,127081,argmax_param_,3,opencv_caffe.LayerParameter.argmax_param_,,misc\caffe\opencv-caffe.pb.hpp,* argmax_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3523,127084,convolution_param_,3,opencv_caffe.LayerParameter.convolution_param_,,misc\caffe\opencv-caffe.pb.hpp,* convolution_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3524,127085,data_param_,3,opencv_caffe.LayerParameter.data_param_,,misc\caffe\opencv-caffe.pb.hpp,* data_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3525,127086,dropout_param_,3,opencv_caffe.LayerParameter.dropout_param_,,misc\caffe\opencv-caffe.pb.hpp,* dropout_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3526,127088,eltwise_param_,3,opencv_caffe.LayerParameter.eltwise_param_,,misc\caffe\opencv-caffe.pb.hpp,* eltwise_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3527,127089,exp_param_,3,opencv_caffe.LayerParameter.exp_param_,,misc\caffe\opencv-caffe.pb.hpp,* exp_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3528,127087,dummy_data_param_,3,opencv_caffe.LayerParameter.dummy_data_param_,,misc\caffe\opencv-caffe.pb.hpp,* dummy_data_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3529,127090,hdf5_data_param_,3,opencv_caffe.LayerParameter.hdf5_data_param_,,misc\caffe\opencv-caffe.pb.hpp,* hdf5_data_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3530,127091,hdf5_output_param_,3,opencv_caffe.LayerParameter.hdf5_output_param_,,misc\caffe\opencv-caffe.pb.hpp,* hdf5_output_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3531,127092,hinge_loss_param_,3,opencv_caffe.LayerParameter.hinge_loss_param_,,misc\caffe\opencv-caffe.pb.hpp,* hinge_loss_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3532,127093,image_data_param_,3,opencv_caffe.LayerParameter.image_data_param_,,misc\caffe\opencv-caffe.pb.hpp,* image_data_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3533,61556,MergeFrom,1,opencv_caffe.ExpParameter.MergeFrom,void opencv_caffe.ExpParameter.MergeFrom (ExpParameter),misc\caffe\opencv-caffe.pb.cc,"void ExpParameter::MergeFrom(const ExpParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.ExpParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      shift_ = from.shift_;
    }
    if (cached_has_bits & 0x00000002u) {
      base_ = from.base_;
    }
    if (cached_has_bits & 0x00000004u) {
      scale_ = from.scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",20076.0,20096.0,1.0,1.0,21.0,22,8,20,8,2,8,5,8,0,0,,0,8,2,1,1,void
3534,127094,infogain_loss_param_,3,opencv_caffe.LayerParameter.infogain_loss_param_,,misc\caffe\opencv-caffe.pb.hpp,* infogain_loss_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3535,127097,memory_data_param_,3,opencv_caffe.LayerParameter.memory_data_param_,,misc\caffe\opencv-caffe.pb.hpp,* memory_data_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3536,127098,mvn_param_,3,opencv_caffe.LayerParameter.mvn_param_,,misc\caffe\opencv-caffe.pb.hpp,* mvn_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3537,127096,lrn_param_,3,opencv_caffe.LayerParameter.lrn_param_,,misc\caffe\opencv-caffe.pb.hpp,* lrn_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3538,28791,MergeFrom,1,opencv_caffe.NetStateRule.MergeFrom,void opencv_caffe.NetStateRule.MergeFrom (NetStateRule),misc\caffe\opencv-caffe.pb.cc,"void NetStateRule::MergeFrom(const NetStateRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.NetStateRule)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  stage_.MergeFrom(from.stage_);
  not_stage_.MergeFrom(from.not_stage_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      phase_ = from.phase_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_level_ = from.min_level_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_level_ = from.max_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",10555.0,10577.0,1.0,1.0,23.0,26,8,24,10,0,12,5,8,0,0,,0,12,2,1,1,void
3539,127099,pooling_param_,3,opencv_caffe.LayerParameter.pooling_param_,,misc\caffe\opencv-caffe.pb.hpp,* pooling_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3540,127100,power_param_,3,opencv_caffe.LayerParameter.power_param_,,misc\caffe\opencv-caffe.pb.hpp,* power_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3541,127101,relu_param_,3,opencv_caffe.LayerParameter.relu_param_,,misc\caffe\opencv-caffe.pb.hpp,* relu_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3542,127104,slice_param_,3,opencv_caffe.LayerParameter.slice_param_,,misc\caffe\opencv-caffe.pb.hpp,* slice_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3543,127102,sigmoid_param_,3,opencv_caffe.LayerParameter.sigmoid_param_,,misc\caffe\opencv-caffe.pb.hpp,* sigmoid_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3544,127103,softmax_param_,3,opencv_caffe.LayerParameter.softmax_param_,,misc\caffe\opencv-caffe.pb.hpp,* softmax_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3545,127105,tanh_param_,3,opencv_caffe.LayerParameter.tanh_param_,,misc\caffe\opencv-caffe.pb.hpp,* tanh_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3546,127106,threshold_param_,3,opencv_caffe.LayerParameter.threshold_param_,,misc\caffe\opencv-caffe.pb.hpp,* threshold_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3547,127107,window_data_param_,3,opencv_caffe.LayerParameter.window_data_param_,,misc\caffe\opencv-caffe.pb.hpp,* window_data_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3548,127109,prelu_param_,3,opencv_caffe.LayerParameter.prelu_param_,,misc\caffe\opencv-caffe.pb.hpp,* prelu_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3549,127110,spp_param_,3,opencv_caffe.LayerParameter.spp_param_,,misc\caffe\opencv-caffe.pb.hpp,* spp_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3550,127111,reshape_param_,3,opencv_caffe.LayerParameter.reshape_param_,,misc\caffe\opencv-caffe.pb.hpp,* reshape_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3551,127112,log_param_,3,opencv_caffe.LayerParameter.log_param_,,misc\caffe\opencv-caffe.pb.hpp,* log_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3552,127108,python_param_,3,opencv_caffe.LayerParameter.python_param_,,misc\caffe\opencv-caffe.pb.hpp,* python_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3553,127114,reduction_param_,3,opencv_caffe.LayerParameter.reduction_param_,,misc\caffe\opencv-caffe.pb.hpp,* reduction_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3554,127116,tile_param_,3,opencv_caffe.LayerParameter.tile_param_,,misc\caffe\opencv-caffe.pb.hpp,* tile_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3555,127117,batch_norm_param_,3,opencv_caffe.LayerParameter.batch_norm_param_,,misc\caffe\opencv-caffe.pb.hpp,* batch_norm_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3556,127115,embed_param_,3,opencv_caffe.LayerParameter.embed_param_,,misc\caffe\opencv-caffe.pb.hpp,* embed_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3557,127113,flatten_param_,3,opencv_caffe.LayerParameter.flatten_param_,,misc\caffe\opencv-caffe.pb.hpp,* flatten_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3558,127118,elu_param_,3,opencv_caffe.LayerParameter.elu_param_,,misc\caffe\opencv-caffe.pb.hpp,* elu_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3559,127119,bias_param_,3,opencv_caffe.LayerParameter.bias_param_,,misc\caffe\opencv-caffe.pb.hpp,* bias_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3560,127120,scale_param_,3,opencv_caffe.LayerParameter.scale_param_,,misc\caffe\opencv-caffe.pb.hpp,* scale_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3561,127123,parameter_param_,3,opencv_caffe.LayerParameter.parameter_param_,,misc\caffe\opencv-caffe.pb.hpp,* parameter_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3562,127121,input_param_,3,opencv_caffe.LayerParameter.input_param_,,misc\caffe\opencv-caffe.pb.hpp,* input_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3563,127122,crop_param_,3,opencv_caffe.LayerParameter.crop_param_,,misc\caffe\opencv-caffe.pb.hpp,* crop_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3564,307348,fbb_,3,opencv_tflite.QuantizationParametersBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
3565,127124,recurrent_param_,3,opencv_caffe.LayerParameter.recurrent_param_,,misc\caffe\opencv-caffe.pb.hpp,* recurrent_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3566,127126,permute_param_,3,opencv_caffe.LayerParameter.permute_param_,,misc\caffe\opencv-caffe.pb.hpp,* permute_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3567,127127,norm_param_,3,opencv_caffe.LayerParameter.norm_param_,,misc\caffe\opencv-caffe.pb.hpp,* norm_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3568,127128,prior_box_param_,3,opencv_caffe.LayerParameter.prior_box_param_,,misc\caffe\opencv-caffe.pb.hpp,* prior_box_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3569,127125,detection_output_param_,3,opencv_caffe.LayerParameter.detection_output_param_,,misc\caffe\opencv-caffe.pb.hpp,* detection_output_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3570,127130,psroi_pooling_param_,3,opencv_caffe.LayerParameter.psroi_pooling_param_,,misc\caffe\opencv-caffe.pb.hpp,* psroi_pooling_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
3571,127131,roi_pooling_param_,3,opencv_caffe.LayerParameter.roi_pooling_param_,,misc\caffe\opencv-caffe.pb.hpp,* roi_pooling_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3572,127129,proposal_param_,3,opencv_caffe.LayerParameter.proposal_param_,,misc\caffe\opencv-caffe.pb.hpp,* proposal_param_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3573,45210,SharedCtor,1,opencv_caffe.ConcatParameter.SharedCtor,void opencv_caffe.ConcatParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void ConcatParameter::SharedCtor() {
concat_dim_ = 1u;
axis_ = 1;
}",15204.0,15207.0,1.0,1.0,4.0,2,1,2,2,0,2,1,1,0,0,,0,2,0,0,0,void
3574,127132,phase_,3,opencv_caffe.LayerParameter.phase_,,misc\caffe\opencv-caffe.pb.hpp,phase_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3575,307363,add_max,1,opencv_tflite.QuantizationParametersBuilder.add_max,void opencv_tflite.QuantizationParametersBuilder.add_max (ANY),misc\tflite\schema_generated.hpp,"void add_max(::flatbuffers::Offset<::flatbuffers::Vector<float>> max) {
    fbb_.AddOffset(QuantizationParameters::VT_MAX, max);
  }",2410.0,2412.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
3576,307376,add_scale,1,opencv_tflite.QuantizationParametersBuilder.add_scale,void opencv_tflite.QuantizationParametersBuilder.add_scale (ANY),misc\tflite\schema_generated.hpp,"void add_scale(::flatbuffers::Offset<::flatbuffers::Vector<float>> scale) {
    fbb_.AddOffset(QuantizationParameters::VT_SCALE, scale);
  }",2413.0,2415.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
3577,143549,_has_bits_,3,opencv_caffe.ParameterParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
3578,143550,_cached_size_,3,opencv_caffe.ParameterParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3579,143551,shape_,3,opencv_caffe.ParameterParameter.shape_,,misc\caffe\opencv-caffe.pb.hpp,* shape_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
3580,225472,MergeFrom,1,opencv_onnx.AttributeProto.MergeFrom,void opencv_onnx.AttributeProto.MergeFrom (AttributeProto),misc\onnx\opencv-onnx.pb.cc,"void AttributeProto::MergeFrom(const AttributeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_onnx.AttributeProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  floats_.MergeFrom(from.floats_);
  ints_.MergeFrom(from.ints_);
  strings_.MergeFrom(from.strings_);
  tensors_.MergeFrom(from.tensors_);
  graphs_.MergeFrom(from.graphs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_s(from._internal_s());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_doc_string(from._internal_doc_string());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_ref_attr_name(from._internal_ref_attr_name());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_t()->::opencv_onnx::TensorPro...",1318.0,1361.0,1.0,1.0,44.0,45,9,41,12,0,18,11,19,0,2,,0,16,2,1,1,void
3581,307389,add_zero_point,1,opencv_tflite.QuantizationParametersBuilder.add_zero_point,void opencv_tflite.QuantizationParametersBuilder.add_zero_point (ANY),misc\tflite\schema_generated.hpp,"void add_zero_point(::flatbuffers::Offset<::flatbuffers::Vector<int64_t>> zero_point) {
    fbb_.AddOffset(QuantizationParameters::VT_ZERO_POINT, zero_point);
  }",2416.0,2418.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
3582,405702,use_avx,3,cv.dnn.FastGemmOpt.use_avx,,src\layers\cpu_kernels\fast_gemm.hpp,use_avx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3583,405703,use_avx2,3,cv.dnn.FastGemmOpt.use_avx2,,src\layers\cpu_kernels\fast_gemm.hpp,use_avx2,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3584,405704,use_neon,3,cv.dnn.FastGemmOpt.use_neon,,src\layers\cpu_kernels\fast_gemm.hpp,use_neon,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3585,405705,use_lasx,3,cv.dnn.FastGemmOpt.use_lasx,,src\layers\cpu_kernels\fast_gemm.hpp,use_lasx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3586,405706,multi_thread,3,cv.dnn.FastGemmOpt.multi_thread,,src\layers\cpu_kernels\fast_gemm.hpp,multi_thread,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3587,405707,FastGemmOpt,1,cv.dnn.FastGemmOpt.FastGemmOpt,ANY cv.dnn.FastGemmOpt.FastGemmOpt (),src\layers\cpu_kernels\fast_gemm.hpp,"FastGemmOpt() {
        use_avx = false;
        use_avx2 = false;
        use_neon = false;
        use_lasx = false;
        multi_thread = false;
    }",27.0,33.0,5.0,5.0,7.0,5,1,5,5,0,5,1,1,0,0,,0,5,0,0,0,ANY
3588,307402,add_details_type,1,opencv_tflite.QuantizationParametersBuilder.add_details_type,void opencv_tflite.QuantizationParametersBuilder.add_details_type (ANY),misc\tflite\schema_generated.hpp,"void add_details_type(opencv_tflite::QuantizationDetails details_type) {
    fbb_.AddElement<uint8_t>(QuantizationParameters::VT_DETAILS_TYPE, static_cast<uint8_t>(details_type), 0);
  }",2419.0,2421.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
3589,45262,SetCachedSize,1,opencv_caffe.ConcatParameter.SetCachedSize,void opencv_caffe.ConcatParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void ConcatParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",15226.0,15228.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
3590,61651,InternalSwap,1,opencv_caffe.ExpParameter.InternalSwap,void opencv_caffe.ExpParameter.InternalSwap (ExpParameter*),misc\caffe\opencv-caffe.pb.cc,"void ExpParameter::InternalSwap(ExpParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(shift_, other->shift_);
  swap(base_, other->base_);
  swap(scale_, other->scale_);
}",20109.0,20116.0,1.0,1.0,8.0,9,4,10,6,0,8,1,1,0,0,,0,8,2,1,1,void
3591,323796,height,3,opencv_test.TestSize_.height,,perf\perf_convolution.cpp,height,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3592,323797,operator ?,1,opencv_test.TestSize_.operator ?,ANY opencv_test.TestSize_.operator ? (),perf\perf_convolution.cpp,"operator Size() const { return Size(width, height); }",14.0,14.0,5.0,57.0,1.0,0,0,2,2,0,2,1,1,0,0,,0,2,0,0,0,ANY
3593,323795,width,3,opencv_test.TestSize_.width,,perf\perf_convolution.cpp,width,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3594,45272,Clear,1,opencv_caffe.ConcatParameter.Clear,void opencv_caffe.ConcatParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void ConcatParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.ConcatParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    concat_dim_ = 1u;
    axis_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",15230.0,15243.0,1.0,1.0,14.0,9,5,9,5,0,4,2,2,0,0,,0,4,0,0,0,void
3595,405726,init,1,cv.dnn.FastGemmOpt.init,void cv.dnn.FastGemmOpt.init (),src\layers\cpu_kernels\fast_gemm.hpp,"void init() {
        use_avx = checkHardwareSupport(CPU_AVX);
        use_avx2 = checkHardwareSupport(CPU_AVX2);
        use_neon = checkHardwareSupport(CPU_NEON);
        use_lasx = checkHardwareSupport(CPU_LASX);
        multi_thread = true;
    }",35.0,41.0,5.0,5.0,7.0,5,1,9,9,0,5,1,1,0,0,,0,5,0,0,0,void
3596,323807,kernel,3,opencv_test.ConvParam_t.kernel,,perf\perf_convolution.cpp,kernel,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3597,307422,add_details,1,opencv_tflite.QuantizationParametersBuilder.add_details,void opencv_tflite.QuantizationParametersBuilder.add_details (ANY),misc\tflite\schema_generated.hpp,"void add_details(::flatbuffers::Offset<void> details) {
    fbb_.AddOffset(QuantizationParameters::VT_DETAILS, details);
  }",2422.0,2424.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
3598,28900,InternalSwap,1,opencv_caffe.NetStateRule.InternalSwap,void opencv_caffe.NetStateRule.InternalSwap (NetStateRule*),misc\caffe\opencv-caffe.pb.cc,"void NetStateRule::InternalSwap(NetStateRule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stage_.InternalSwap(&other->stage_);
  not_stage_.InternalSwap(&other->not_stage_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetStateRule, max_level_)
      + sizeof(NetStateRule::max_level_)
      - PROTOBUF_FIELD_OFFSET(NetStateRule, phase_)>(
          reinterpret_cast<char*>(&phase_),
          reinterpret_cast<char*>(&other->phase_));
}",10590.0,10602.0,1.0,1.0,13.0,27,12,17,10,0,11,1,1,0,0,,0,11,2,1,1,void
3599,323816,shapeIn,3,opencv_test.ConvParam_t.shapeIn,,perf\perf_convolution.cpp,shapeIn,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
3600,323817,outCN,3,opencv_test.ConvParam_t.outCN,,perf\perf_convolution.cpp,outCN,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3601,323818,groups,3,opencv_test.ConvParam_t.groups,,perf\perf_convolution.cpp,groups,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3602,307435,add_quantized_dimension,1,opencv_tflite.QuantizationParametersBuilder.add_quantized_dimension,void opencv_tflite.QuantizationParametersBuilder.add_quantized_dimension (int32_t),misc\tflite\schema_generated.hpp,"void add_quantized_dimension(int32_t quantized_dimension) {
    fbb_.AddElement<int32_t>(QuantizationParameters::VT_QUANTIZED_DIMENSION, quantized_dimension, 0);
  }",2425.0,2427.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
3603,323820,stride,3,opencv_test.ConvParam_t.stride,,perf\perf_convolution.cpp,stride,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3604,323822,dilation,3,opencv_test.ConvParam_t.dilation,,perf\perf_convolution.cpp,dilation,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3605,323824,pad,3,opencv_test.ConvParam_t.pad,,perf\perf_convolution.cpp,pad,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3606,323826,padAdjust,3,opencv_test.ConvParam_t.padAdjust,,perf\perf_convolution.cpp,padAdjust,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3607,323827,padMode,3,opencv_test.ConvParam_t.padMode,,perf\perf_convolution.cpp,* padMode,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3608,323828,hasBias,3,opencv_test.ConvParam_t.hasBias,,perf\perf_convolution.cpp,hasBias,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3609,323829,declared_flops,3,opencv_test.ConvParam_t.declared_flops,,perf\perf_convolution.cpp,declared_flops,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3610,405749,all,1,cv.dnn.FastGemmOpt.all,bool cv.dnn.FastGemmOpt.all (),src\layers\cpu_kernels\fast_gemm.hpp,"bool all() {
        return use_avx || use_avx2 || use_neon || use_lasx;
    }",43.0,45.0,5.0,5.0,3.0,3,1,4,4,0,4,1,1,0,0,,0,4,0,0,0,bool
3611,61688,GetMetadata,1,opencv_caffe.ExpParameter.GetMetadata,Metadata opencv_caffe.ExpParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata ExpParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[34]);
}",20118.0,20122.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
3612,45307,_InternalParse,1,opencv_caffe.ConcatParameter._InternalParse,"const char* opencv_caffe.ConcatParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* ConcatParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 concat_dim = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_concat_dim(&has_bits);
          concat_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 axis = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_axis(&has_bits);
          axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
       ...",15245.0,15292.0,1.0,10.0,48.0,40,12,43,11,0,5,11,12,0,2,,0,3,4,2,2,const char*
3613,307453,QuantizationParametersBuilder,1,opencv_tflite.QuantizationParametersBuilder.QuantizationParametersBuilder,ANY opencv_tflite.QuantizationParametersBuilder.QuantizationParametersBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit QuantizationParametersBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",2428.0,2431.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
3614,405762,A_offsets,3,cv.dnn.MatMulHelper.A_offsets,,src\layers\cpu_kernels\fast_gemm.hpp,A_offsets,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3615,405763,B_offsets,3,cv.dnn.MatMulHelper.B_offsets,,src\layers\cpu_kernels\fast_gemm.hpp,B_offsets,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3616,405764,packed_B_offsets,3,cv.dnn.MatMulHelper.packed_B_offsets,,src\layers\cpu_kernels\fast_gemm.hpp,packed_B_offsets,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
3617,405765,C_offsets,3,cv.dnn.MatMulHelper.C_offsets,,src\layers\cpu_kernels\fast_gemm.hpp,C_offsets,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3618,405766,A_rows,3,cv.dnn.MatMulHelper.A_rows,,src\layers\cpu_kernels\fast_gemm.hpp,A_rows,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3619,405767,B_rows,3,cv.dnn.MatMulHelper.B_rows,,src\layers\cpu_kernels\fast_gemm.hpp,B_rows,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3620,405768,C_rows,3,cv.dnn.MatMulHelper.C_rows,,src\layers\cpu_kernels\fast_gemm.hpp,C_rows,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3621,405769,batch,3,cv.dnn.MatMulHelper.batch,,src\layers\cpu_kernels\fast_gemm.hpp,batch,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,11,0,1,1,0,0,,0,0,0,0,0,
3622,405770,lda0,3,cv.dnn.MatMulHelper.lda0,,src\layers\cpu_kernels\fast_gemm.hpp,lda0,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3623,405771,lda1,3,cv.dnn.MatMulHelper.lda1,,src\layers\cpu_kernels\fast_gemm.hpp,lda1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3624,127244,GetDescriptor,1,opencv_caffe.TransformationParameter.GetDescriptor,Descriptor opencv_caffe.TransformationParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",7109.0,7111.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
3625,405773,ldb1,3,cv.dnn.MatMulHelper.ldb1,,src\layers\cpu_kernels\fast_gemm.hpp,ldb1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3626,405774,ldc,3,cv.dnn.MatMulHelper.ldc,,src\layers\cpu_kernels\fast_gemm.hpp,ldc,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3627,405772,ldb0,3,cv.dnn.MatMulHelper.ldb0,,src\layers\cpu_kernels\fast_gemm.hpp,ldb0,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3628,405776,N,3,cv.dnn.MatMulHelper.N,,src\layers\cpu_kernels\fast_gemm.hpp,N,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3629,405775,M,3,cv.dnn.MatMulHelper.M,,src\layers\cpu_kernels\fast_gemm.hpp,M,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3630,405778,MatMulHelper,1,cv.dnn.MatMulHelper.MatMulHelper,ANY cv.dnn.MatMulHelper.MatMulHelper (),src\layers\cpu_kernels\fast_gemm.hpp,"MatMulHelper() {
        A_offsets = {0};
        B_offsets = {0};
        packed_B_offsets = {0};
        C_offsets = {0};
        A_rows = {0};
        B_rows = {0};
        C_rows = {0};

        batch = 0;
    }",64.0,74.0,5.0,5.0,11.0,8,1,8,8,0,8,1,1,0,0,,0,8,0,0,0,ANY
3631,405777,K,3,cv.dnn.MatMulHelper.K,,src\layers\cpu_kernels\fast_gemm.hpp,K,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
3632,127255,GetReflection,1,opencv_caffe.TransformationParameter.GetReflection,Reflection opencv_caffe.TransformationParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",7112.0,7114.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
3633,61719,set_has_end_axis,1,opencv_caffe._Internal.set_has_end_axis,void opencv_caffe._Internal.set_has_end_axis (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_end_axis(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }",20132.0,20134.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
3634,307488,CreateQuantizationParameters,1,opencv_tflite.CreateQuantizationParameters,"Offset<QuantizationParameters> opencv_tflite.CreateQuantizationParameters (ANY,ANY,ANY,ANY,ANY,ANY,ANY,int32_t)",misc\tflite\schema_generated.hpp,"inline ::flatbuffers::Offset<QuantizationParameters> CreateQuantizationParameters(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> min = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> max = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> scale = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int64_t>> zero_point = 0,
    opencv_tflite::QuantizationDetails details_type = opencv_tflite::QuantizationDetails_NONE,
    ::flatbuffers::Offset<void> details = 0,
    int32_t quantized_dimension = 0) {
  QuantizationParametersBuilder builder_(_fbb);
  builder_.add_quantized_dimension(quantized_dimension);
  builder_.add_details(details);
  builder_.add_zero_point(zero_point);
  builder_.add_scale(scale);
  builder_.add_max(max);
  builder_.add_min(min);
  builder_.add_details_type(details_type);
  return builder_.Finish();
}",2439.0,2457.0,1.0,1.0,19.0,8,1,16,9,1,0,1,1,0,0,,0,0,16,8,8,Offset<QuantizationParameters>
3635,127266,default_instance,1,opencv_caffe.TransformationParameter.default_instance,TransformationParameter opencv_caffe.TransformationParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const TransformationParameter& default_instance() {
    return *internal_default_instance();
  }",7115.0,7117.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,TransformationParameter
3636,405799,empty,1,cv.dnn.MatMulHelper.empty,bool cv.dnn.MatMulHelper.empty (),src\layers\cpu_kernels\fast_gemm.hpp,"bool empty() const {
        return batch == 0;
    }",76.0,78.0,5.0,5.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,bool
3637,28969,GetMetadata,1,opencv_caffe.NetStateRule.GetMetadata,Metadata opencv_caffe.NetStateRule.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata NetStateRule::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[13]);
}",10604.0,10608.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
3638,127273,internal_default_instance,1,opencv_caffe.TransformationParameter.internal_default_instance,TransformationParameter opencv_caffe.TransformationParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const TransformationParameter* internal_default_instance() {
    return reinterpret_cast<const TransformationParameter*>(
               &_TransformationParameter_default_instance_);
  }",7118.0,7121.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,TransformationParameter
3639,143657,descriptor,1,opencv_caffe.PoolingParameter.descriptor,Descriptor opencv_caffe.PoolingParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",14074.0,14076.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
3640,405807,compute,1,cv.dnn.MatMulHelper.compute,"void cv.dnn.MatMulHelper.compute (bool,bool,MatShape,MatShape,MatShape)",src\layers\cpu_kernels\fast_gemm.hpp,"void compute(bool trans_a, bool trans_b, MatShape A_shape, MatShape B_shape, MatShape C_shape) {
        auto A_ndims = A_shape.size(), B_ndims = B_shape.size(), C_ndims =  C_shape.size();
        int ma = A_shape[A_ndims - 2], na = A_shape.back();
        int mb = B_shape[B_ndims - 2], nb = B_shape.back();
        lda0 = na, lda1 = 1;
        ldb0 = nb, ldb1 = 1;
        ldc = C_shape.back();

        M = trans_a ? na : ma;
        N = trans_b ? mb : nb;
        K = trans_a ? ma : na;

        if (trans_a) {
            std::swap(lda0, lda1);
        }
        if (trans_b) {
            std::swap(ldb0, ldb1);
        }

        // compute offsets
        auto batch_ndims = C_ndims - 2;

        batch = total(C_shape, 0, batch_ndims);

        A_offsets.resize(batch, 0);
        B_offsets.resize(batch, 0);
        C_offsets.resize(batch, 0);
        A_rows.resize(batch, 0);
        B_rows.resize(batch, 0);
        C_rows.resize(batch, 0);

        // build C_offsets
        size_t C...",80.0,142.0,5.0,5.0,63.0,122,15,153,42,0,36,6,7,1,0,,0,36,10,5,5,void
3641,143663,GetDescriptor,1,opencv_caffe.PoolingParameter.GetDescriptor,Descriptor opencv_caffe.PoolingParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",14077.0,14079.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
3642,12600,InternalSwap,1,opencv_caffe.PriorBoxParameter.InternalSwap,void opencv_caffe.PriorBoxParameter.InternalSwap (PriorBoxParameter*),misc\caffe\opencv-caffe.pb.cc,"void PriorBoxParameter::InternalSwap(PriorBoxParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  min_size_.InternalSwap(&other->min_size_);
  max_size_.InternalSwap(&other->max_size_);
  aspect_ratio_.InternalSwap(&other->aspect_ratio_);
  variance_.InternalSwap(&other->variance_);
  offset_h_.InternalSwap(&other->offset_h_);
  offset_w_.InternalSwap(&other->offset_w_);
  width_.InternalSwap(&other->width_);
  height_.InternalSwap(&other->height_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PriorBoxParameter, step_w_)
      + sizeof(PriorBoxParameter::step_w_)
      - PROTOBUF_FIELD_OFFSET(PriorBoxParameter, img_size_)>(
          reinterpret_cast<char*>(&img_size_),
          reinterpret_cast<char*>(&other->img_size_));
  swap(flip_, other->flip_);
  swap(clip_, other->clip_);
  swap(offset_, other->offset_);
}",6141.0,6162.0,1.0,1.0,22.0,48,12,35,19,0,29,1,1,0,0,,0,29,2,1,1,void
3643,143674,GetReflection,1,opencv_caffe.PoolingParameter.GetReflection,Reflection opencv_caffe.PoolingParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",14080.0,14082.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
3644,143685,default_instance,1,opencv_caffe.PoolingParameter.default_instance,PoolingParameter opencv_caffe.PoolingParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const PoolingParameter& default_instance() {
    return *internal_default_instance();
  }",14083.0,14085.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,PoolingParameter
3645,143692,internal_default_instance,1,opencv_caffe.PoolingParameter.internal_default_instance,PoolingParameter opencv_caffe.PoolingParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const PoolingParameter* internal_default_instance() {
    return reinterpret_cast<const PoolingParameter*>(
               &_PoolingParameter_default_instance_);
  }",14086.0,14089.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,PoolingParameter
3646,29011,set_has_lr_mult,1,opencv_caffe._Internal.set_has_lr_mult,void opencv_caffe._Internal.set_has_lr_mult (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_lr_mult(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }",10621.0,10623.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
3647,61783,SharedCtor,1,opencv_caffe.FlattenParameter.SharedCtor,void opencv_caffe.FlattenParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void FlattenParameter::SharedCtor() {
axis_ = 1;
end_axis_ = -1;
}",20156.0,20159.0,1.0,1.0,4.0,3,2,2,2,0,2,1,1,0,0,,0,2,0,0,0,void
3648,307543,CreateQuantizationParametersDirect,1,opencv_tflite.CreateQuantizationParametersDirect,"Offset<QuantizationParameters> opencv_tflite.CreateQuantizationParametersDirect (ANY,ANY*,ANY*,ANY*,ANY*,ANY,ANY,int32_t)",misc\tflite\schema_generated.hpp,"inline ::flatbuffers::Offset<QuantizationParameters> CreateQuantizationParametersDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<float> *min = nullptr,
    const std::vector<float> *max = nullptr,
    const std::vector<float> *scale = nullptr,
    const std::vector<int64_t> *zero_point = nullptr,
    opencv_tflite::QuantizationDetails details_type = opencv_tflite::QuantizationDetails_NONE,
    ::flatbuffers::Offset<void> details = 0,
    int32_t quantized_dimension = 0) {
  auto min__ = min ? _fbb.CreateVector<float>(*min) : 0;
  auto max__ = max ? _fbb.CreateVector<float>(*max) : 0;
  auto scale__ = scale ? _fbb.CreateVector<float>(*scale) : 0;
  auto zero_point__ = zero_point ? _fbb.CreateVector<int64_t>(*zero_point) : 0;
  return opencv_tflite::CreateQuantizationParameters(
      _fbb,
      min__,
      max__,
      scale__,
      zero_point__,
      details_type,
      details,
      quantized_dimension);
}",2459.0,2481.0,1.0,1.0,23.0,19,6,26,14,0,1,1,1,0,1,,0,0,16,8,8,Offset<QuantizationParameters>
3649,29022,set_has_decay_mult,1,opencv_caffe._Internal.set_has_decay_mult,void opencv_caffe._Internal.set_has_decay_mult (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_decay_mult(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }",10624.0,10626.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
3650,78181,_InternalSerialize,1,opencv_caffe.RecurrentParameter._InternalSerialize,"uint8_t opencv_caffe.RecurrentParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* RecurrentParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.RecurrentParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_output = 1 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_output(), target);
  }

  // optional .opencv_caffe.FillerParameter weight_filler = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::weight_filler(this), target, stream);
  }

  // optional .opencv_caffe.FillerParameter bias_filler = 3;
  if (cached_has_bits & 0x00000002u) {
    target = st...",25210.0,25257.0,1.0,1.0,48.0,55,8,65,11,0,3,7,7,0,2,,0,3,4,2,2,uint8_t
3651,225668,InternalSwap,1,opencv_onnx.AttributeProto.InternalSwap,void opencv_onnx.AttributeProto.InternalSwap (AttributeProto*),misc\onnx\opencv-onnx.pb.cc,"void AttributeProto::InternalSwap(AttributeProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  floats_.InternalSwap(&other->floats_);
  ints_.InternalSwap(&other->ints_);
  strings_.InternalSwap(&other->strings_);
  tensors_.InternalSwap(&other->tensors_);
  graphs_.InternalSwap(&other->graphs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &s_, lhs_arena,
      &other->s_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::Ge...",1374.0,1411.0,1.0,1.0,38.0,75,13,62,20,0,25,1,1,0,0,,0,25,2,1,1,void
3652,61836,SetCachedSize,1,opencv_caffe.FlattenParameter.SetCachedSize,void opencv_caffe.FlattenParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void FlattenParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",20178.0,20180.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
3653,61846,Clear,1,opencv_caffe.FlattenParameter.Clear,void opencv_caffe.FlattenParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void FlattenParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.FlattenParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    axis_ = 1;
    end_axis_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",20182.0,20195.0,1.0,1.0,14.0,10,6,9,5,0,4,2,2,0,0,,0,4,0,0,0,void
3654,307621,fbb_,3,opencv_tflite.Int32VectorBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3655,307622,start_,3,opencv_tflite.Int32VectorBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3656,307623,add_values,1,opencv_tflite.Int32VectorBuilder.add_values,void opencv_tflite.Int32VectorBuilder.add_values (ANY),misc\tflite\schema_generated.hpp,"void add_values(::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> values) {
    fbb_.AddOffset(Int32Vector::VT_VALUES, values);
  }",2503.0,2505.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
3657,127398,GetCachedSize,1,opencv_caffe.TransformationParameter.GetCachedSize,int opencv_caffe.TransformationParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },7166.0,7166.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
3658,45483,_InternalSerialize,1,opencv_caffe.ConcatParameter._InternalSerialize,"uint8_t opencv_caffe.ConcatParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* ConcatParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.ConcatParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 concat_dim = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_concat_dim(), target);
  }

  // optional int32 axis = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_axis(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
 ...",15294.0,15319.0,1.0,1.0,26.0,31,8,34,10,0,1,4,4,0,0,,0,1,4,2,2,uint8_t
3659,373164,stream,3,cv.dnn.cuda4dnn.MatMulOp.stream,,src\cuda4dnn\primitives\matmul.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3660,373165,cublasHandle,3,cv.dnn.cuda4dnn.MatMulOp.cublasHandle,,src\cuda4dnn\primitives\matmul.hpp,cublasHandle,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3661,373166,constTensor,3,cv.dnn.cuda4dnn.MatMulOp.constTensor,,src\cuda4dnn\primitives\matmul.hpp,constTensor,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3662,373167,biasTensor,3,cv.dnn.cuda4dnn.MatMulOp.biasTensor,,src\cuda4dnn\primitives\matmul.hpp,biasTensor,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
3663,373168,transA,3,cv.dnn.cuda4dnn.MatMulOp.transA,,src\cuda4dnn\primitives\matmul.hpp,transA,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3664,373169,transB,3,cv.dnn.cuda4dnn.MatMulOp.transB,,src\cuda4dnn\primitives\matmul.hpp,transB,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3665,363994,require,1,cv.dnn.cuda4dnn.csl.WorkspaceBuilder.require,void cv.dnn.cuda4dnn.csl.WorkspaceBuilder.require<T> (ANY),src\cuda4dnn\csl\workspace.hpp,"void require(std::size_t count) noexcept {
            auto blocks256 = (count * sizeof(T) + 255) / 256;
            max_size_in_bytes += blocks256 * 256;
        }",54.0,57.0,9.0,9.0,4.0,7,6,5,4,0,1,1,1,0,0,,0,1,2,1,1,void
3666,307636,Int32VectorBuilder,1,opencv_tflite.Int32VectorBuilder.Int32VectorBuilder,ANY opencv_tflite.Int32VectorBuilder.Int32VectorBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit Int32VectorBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",2506.0,2509.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
3667,61882,_InternalParse,1,opencv_caffe.FlattenParameter._InternalParse,"const char* opencv_caffe.FlattenParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* FlattenParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 axis = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_axis(&has_bits);
          axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 end_axis = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_end_axis(&has_bits);
          end_axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          go...",20197.0,20244.0,1.0,10.0,48.0,40,12,43,11,0,5,11,12,0,2,,0,3,4,2,2,const char*
3668,356795,~Event,1,cv.dnn.cuda4dnn.csl.Event.~Event,ANY cv.dnn.cuda4dnn.csl.Event.~Event (),src\cuda4dnn\csl\event.hpp,"~Event() {
            try {
                if (event != nullptr)
                    CUDA4DNN_CHECK_CUDA(cudaEventDestroy(event));
            } catch (const CUDAException& ex) {
                std::ostringstream os;
                os << ""Asynchronous exception caught during CUDA event destruction.\n"";
                os << ex.what();
                os << ""Exception will be ignored.\n"";
                CV_LOG_WARNING(0, os.str().c_str());
            }
        }",41.0,52.0,9.0,20.0,12.0,12,3,14,5,0,3,3,4,1,0,,0,3,0,0,0,ANY
3669,29114,SharedCtor,1,opencv_caffe.ParamSpec.SharedCtor,void opencv_caffe.ParamSpec.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void ParamSpec::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
share_mode_ = 0;
lr_mult_ = 1;
decay_mult_ = 1;
}",10656.0,10664.0,1.0,1.0,9.0,7,3,6,6,0,4,1,1,0,0,,0,4,0,0,0,void
3670,12732,GetMetadata,1,opencv_caffe.PriorBoxParameter.GetMetadata,Metadata opencv_caffe.PriorBoxParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata PriorBoxParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[5]);
}",6164.0,6168.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
3671,307647,Finish,1,opencv_tflite.Int32VectorBuilder.Finish,Offset<Int32Vector> opencv_tflite.Int32VectorBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<Int32Vector> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Int32Vector>(end);
    return o;
  }",2510.0,2514.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<Int32Vector>
3672,143817,GetCachedSize,1,opencv_caffe.PoolingParameter.GetCachedSize,int opencv_caffe.PoolingParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },14134.0,14134.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
3673,373194,MatMulBroadcastOp,1,cv.dnn.cuda4dnn.MatMulBroadcastOp.MatMulBroadcastOp,"ANY cv.dnn.cuda4dnn.MatMulBroadcastOp.MatMulBroadcastOp (ANY,ANY,Mat,bool,bool,ANY,ANY,ANY,size_t)",src\cuda4dnn\primitives\matmul_broadcast.hpp,"MatMulBroadcastOp(csl::Stream stream_, csl::cublas::Handle handle, const Mat &B, bool _transA, bool _transB,
                 const std::vector<size_t> &A_offsets_, const std::vector<size_t> &B_offsets_, std::vector<size_t> &C_offsets_,
                 size_t batch_)
            : stream(std::move(stream_)), cublasHandle(std::move(handle)), A_offsets(A_offsets_), B_offsets(B_offsets_), C_offsets(C_offsets_), batch(batch_)
        {
            if (!B.empty()) {
                input_B_tensor = csl::makeTensorHeader<T>(B);
                csl::copyMatToTensor<T>(B, input_B_tensor, stream);
            }

            transA = _transA;
            transB = _transB;
        }",26.0,38.0,9.0,9.0,13.0,13,7,14,9,0,5,2,2,0,0,,0,5,18,9,9,ANY
3674,12752,set_has_num_classes,1,opencv_caffe._Internal.set_has_num_classes,void opencv_caffe._Internal.set_has_num_classes (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_num_classes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }",6175.0,6177.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
3675,455127,populateNet,1,cv.dnn.TorchImporter.populateNet,void cv.dnn.TorchImporter.populateNet (Net),src\torch\torch_importer.cpp,"void populateNet(Net net_)
    {
        CV_TRACE_FUNCTION();

        CV_Assert(rootModule == NULL);
        cv::Ptr<Module> rootModule_ = cv::makePtr<Module>(""Sequential"");
        rootModule = rootModule_.get();
        curModule = rootModule;

        THFile_seek(file, 0);
        readObject();

        net = net_;
        std::vector<std::pair<int, Module*> > addedModules;
        fill(rootModule, addedModules);

        rootModule = NULL;
        curModule = NULL;
    }",1229.0,1247.0,5.0,5.0,19.0,15,5,21,11,0,9,1,1,0,0,,0,9,2,1,1,void
3676,307671,CreateInt32Vector,1,opencv_tflite.CreateInt32Vector,"Offset<Int32Vector> opencv_tflite.CreateInt32Vector (ANY,ANY)",misc\tflite\schema_generated.hpp,"inline ::flatbuffers::Offset<Int32Vector> CreateInt32Vector(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> values = 0) {
  Int32VectorBuilder builder_(_fbb);
  builder_.add_values(values);
  return builder_.Finish();
}",2517.0,2523.0,1.0,1.0,7.0,2,1,4,3,1,0,1,1,0,0,,0,0,4,2,2,Offset<Int32Vector>
3677,12763,set_has_share_location,1,opencv_caffe._Internal.set_has_share_location,void opencv_caffe._Internal.set_has_share_location (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_share_location(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }",6178.0,6180.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
3678,29153,SharedDtor,1,opencv_caffe.ParamSpec.SharedDtor,void opencv_caffe.ParamSpec.SharedDtor (),misc\caffe\opencv-caffe.pb.cc,"inline void ParamSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}",10673.0,10676.0,1.0,1.0,4.0,5,3,3,3,0,1,1,1,0,0,,0,1,0,0,0,void
3679,12774,set_has_background_label_id,1,opencv_caffe._Internal.set_has_background_label_id,void opencv_caffe._Internal.set_has_background_label_id (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_background_label_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }",6181.0,6183.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
3680,307690,CreateInt32VectorDirect,1,opencv_tflite.CreateInt32VectorDirect,"Offset<Int32Vector> opencv_tflite.CreateInt32VectorDirect (ANY,ANY*)",misc\tflite\schema_generated.hpp,"inline ::flatbuffers::Offset<Int32Vector> CreateInt32VectorDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int32_t> *values = nullptr) {
  auto values__ = values ? _fbb.CreateVector<int32_t>(*values) : 0;
  return opencv_tflite::CreateInt32Vector(
      _fbb,
      values__);
}",2525.0,2532.0,1.0,1.0,8.0,7,6,8,5,0,1,1,1,0,1,,0,0,4,2,2,Offset<Int32Vector>
3681,373240,forward,1,cv.dnn.cuda4dnn.MatMulBroadcastOp.forward,"void cv.dnn.cuda4dnn.MatMulBroadcastOp.forward (ANY,ANY,ANY)",src\cuda4dnn\primitives\matmul_broadcast.hpp,"void forward(
            const std::vector<cv::Ptr<BackendWrapper>>& inputs,
            const std::vector<cv::Ptr<BackendWrapper>>& outputs,
            csl::Workspace& workspace) override
        {
            CV_Assert(((inputs.size() == 2 && input_B_tensor.empty()) ||
                       (inputs.size() == 1 && !input_B_tensor.empty())) && outputs.size() == 1);

            auto input_A_wrapper = inputs[0].dynamicCast<wrapper_type>();
            auto input_A = input_A_wrapper->getView();

            csl::TensorView<T> input_B;
            if (input_B_tensor.empty()) {
                auto input_B_wrapper = inputs[1].dynamicCast<wrapper_type>();
                input_B = input_B_wrapper->getView();
            } else {
                input_B = csl::TensorView<T>(input_B_tensor);
            }

            auto output_wrapper = outputs[0].dynamicCast<wrapper_type>();
            auto output = output_wrapper->getSpan();

            csl::tensor_ops::gemmBatched<T>(cublasHandl...",40.0,63.0,9.0,9.0,24.0,31,8,30,18,0,10,2,2,1,0,,0,10,6,3,3,void
3682,29191,SetCachedSize,1,opencv_caffe.ParamSpec.SetCachedSize,void opencv_caffe.ParamSpec.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void ParamSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",10684.0,10686.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
3683,307720,fbb_,3,opencv_tflite.Uint16VectorBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3684,356873,record,1,cv.dnn.cuda4dnn.csl.Event.record,void cv.dnn.cuda4dnn.csl.Event.record (Stream),src\cuda4dnn\csl\event.hpp,"void record(const Stream& stream) {
            CV_Assert(stream);
            CUDA4DNN_CHECK_CUDA(cudaEventRecord(event, stream.get()));
        }",62.0,65.0,9.0,12.0,4.0,6,1,9,4,0,1,1,1,0,0,,0,1,2,1,1,void
3685,307721,start_,3,opencv_tflite.Uint16VectorBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3686,307722,add_values,1,opencv_tflite.Uint16VectorBuilder.add_values,void opencv_tflite.Uint16VectorBuilder.add_values (ANY),misc\tflite\schema_generated.hpp,"void add_values(::flatbuffers::Offset<::flatbuffers::Vector<uint16_t>> values) {
    fbb_.AddOffset(Uint16Vector::VT_VALUES, values);
  }",2554.0,2556.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
3687,455181,readTorchBlob,1,cv.dnn.readTorchBlob,"Mat cv.dnn.readTorchBlob (String,bool)",src\torch\torch_importer.cpp,"Mat readTorchBlob(const String &filename, bool isBinary)
{
    TorchImporter importer(filename, isBinary, true);
    importer.readObject();
    CV_Assert(importer.tensors.size() == 1);

    return importer.tensors.begin()->second;
}",1250.0,1257.0,1.0,1.0,8.0,7,3,5,3,0,2,1,1,0,0,,0,2,4,2,2,Mat
3688,29201,Clear,1,opencv_caffe.ParamSpec.Clear,void opencv_caffe.ParamSpec.Clear (),misc\caffe\opencv-caffe.pb.cc,"void ParamSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.ParamSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    share_mode_ = 0;
    lr_mult_ = 1;
    decay_mult_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",10688.0,10705.0,1.0,1.0,18.0,12,5,12,7,0,6,3,3,0,0,,0,6,0,0,0,void
3689,45591,ByteSizeLong,1,opencv_caffe.ConcatParameter.ByteSizeLong,size_t opencv_caffe.ConcatParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t ConcatParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.ConcatParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 concat_dim = 1 [default = 1];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_concat_dim());
    }

    // optional int32 axis = 2 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_axis());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}",15321.0,15343.0,1.0,1.0,23.0,19,8,18,7,0,2,4,6,0,0,,0,2,0,0,0,size_t
3690,307735,Uint16VectorBuilder,1,opencv_tflite.Uint16VectorBuilder.Uint16VectorBuilder,ANY opencv_tflite.Uint16VectorBuilder.Uint16VectorBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit Uint16VectorBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",2557.0,2560.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
3691,12828,set_has_variance_encoded_in_target,1,opencv_caffe._Internal.set_has_variance_encoded_in_target,void opencv_caffe._Internal.set_has_variance_encoded_in_target (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_variance_encoded_in_target(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }",6195.0,6197.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
3692,307746,Finish,1,opencv_tflite.Uint16VectorBuilder.Finish,Offset<Uint16Vector> opencv_tflite.Uint16VectorBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<Uint16Vector> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Uint16Vector>(end);
    return o;
  }",2561.0,2565.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<Uint16Vector>
3693,12839,set_has_keep_top_k,1,opencv_caffe._Internal.set_has_keep_top_k,void opencv_caffe._Internal.set_has_keep_top_k (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_keep_top_k(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }",6198.0,6200.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
3694,356903,synchronize,1,cv.dnn.cuda4dnn.csl.Event.synchronize,void cv.dnn.cuda4dnn.csl.Event.synchronize (),src\cuda4dnn\csl\event.hpp,void synchronize() const { CUDA4DNN_CHECK_CUDA(cudaEventSynchronize(event)); },68.0,68.0,9.0,35.0,1.0,5,1,8,3,0,2,1,1,0,0,,0,2,0,0,0,void
3695,78377,ByteSizeLong,1,opencv_caffe.RecurrentParameter.ByteSizeLong,size_t opencv_caffe.RecurrentParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t RecurrentParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.RecurrentParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .opencv_caffe.FillerParameter weight_filler = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *weight_filler_);
    }

    // optional .opencv_caffe.FillerParameter bias_filler = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bias_filler_);
    }

    // optional uint32 num_output = 1 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UI...",25259.0,25300.0,1.0,1.0,42.0,33,10,29,9,0,4,7,12,0,0,,0,4,0,0,0,size_t
3696,12850,set_has_confidence_threshold,1,opencv_caffe._Internal.set_has_confidence_threshold,void opencv_caffe._Internal.set_has_confidence_threshold (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_confidence_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }",6201.0,6203.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
3697,307770,CreateUint16Vector,1,opencv_tflite.CreateUint16Vector,"Offset<Uint16Vector> opencv_tflite.CreateUint16Vector (ANY,ANY)",misc\tflite\schema_generated.hpp,"inline ::flatbuffers::Offset<Uint16Vector> CreateUint16Vector(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint16_t>> values = 0) {
  Uint16VectorBuilder builder_(_fbb);
  builder_.add_values(values);
  return builder_.Finish();
}",2568.0,2574.0,1.0,1.0,7.0,2,1,4,3,1,0,1,1,0,0,,0,0,4,2,2,Offset<Uint16Vector>
3698,12861,set_has_normalized_bbox,1,opencv_caffe._Internal.set_has_normalized_bbox,void opencv_caffe._Internal.set_has_normalized_bbox (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_normalized_bbox(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }",6204.0,6206.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
3699,29248,_InternalParse,1,opencv_caffe.ParamSpec._InternalParse,"const char* opencv_caffe.ParamSpec._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* ParamSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, ""opencv_caffe.ParamSpec.name"");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .opencv_caffe.ParamSpec.DimCheckMode share_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
         ...",10707.0,10779.0,1.0,10.0,73.0,58,14,66,15,0,6,16,22,1,3,,0,4,4,2,2,const char*
3700,356928,busy,1,cv.dnn.cuda4dnn.csl.Event.busy,bool cv.dnn.cuda4dnn.csl.Event.busy (),src\cuda4dnn\csl\event.hpp,"bool busy() const {
            auto status = cudaEventQuery(event);
            if (status == cudaErrorNotReady)
                return true;
            CUDA4DNN_CHECK_CUDA(status);
            return false;
        }",71.0,77.0,9.0,12.0,7.0,7,3,12,5,0,1,2,2,0,0,,0,1,0,0,0,bool
3701,225864,GetMetadata,1,opencv_onnx.AttributeProto.GetMetadata,Metadata opencv_onnx.AttributeProto.GetMetadata (),misc\onnx\opencv-onnx.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata AttributeProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2donnx_2eproto_getter, &descriptor_table_opencv_2donnx_2eproto_once,
      file_level_metadata_opencv_2donnx_2eproto[0]);
}",1413.0,1417.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
3702,307789,CreateUint16VectorDirect,1,opencv_tflite.CreateUint16VectorDirect,"Offset<Uint16Vector> opencv_tflite.CreateUint16VectorDirect (ANY,ANY*)",misc\tflite\schema_generated.hpp,"inline ::flatbuffers::Offset<Uint16Vector> CreateUint16VectorDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint16_t> *values = nullptr) {
  if (values) { _fbb.ForceVectorAlignment(values->size(), sizeof(uint16_t), 4); }
  auto values__ = values ? _fbb.CreateVector<uint16_t>(*values) : 0;
  return opencv_tflite::CreateUint16Vector(
      _fbb,
      values__);
}",2576.0,2584.0,1.0,1.0,9.0,10,8,12,5,0,1,2,2,0,1,,0,0,4,2,2,Offset<Uint16Vector>
3703,12883,nms_param,1,opencv_caffe.DetectionOutputParameter._Internal.nms_param,NonMaximumSuppressionParameter opencv_caffe.DetectionOutputParameter._Internal.nms_param (DetectionOutputParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::NonMaximumSuppressionParameter&
DetectionOutputParameter::_Internal::nms_param(const DetectionOutputParameter* msg) {
  return *msg->nms_param_;
}",6212.0,6215.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,NonMaximumSuppressionParameter
3704,12893,save_output_param,1,opencv_caffe.DetectionOutputParameter._Internal.save_output_param,SaveOutputParameter opencv_caffe.DetectionOutputParameter._Internal.save_output_param (DetectionOutputParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::SaveOutputParameter&
DetectionOutputParameter::_Internal::save_output_param(const DetectionOutputParameter* msg) {
  return *msg->save_output_param_;
}",6216.0,6219.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,SaveOutputParameter
3705,356965,get,1,cv.dnn.cuda4dnn.csl.Event.get,cudaEvent_t cv.dnn.cuda4dnn.csl.Event.get (),src\cuda4dnn\csl\event.hpp,cudaEvent_t get() const noexcept { return event; },79.0,79.0,9.0,58.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,cudaEvent_t
3706,62058,_InternalSerialize,1,opencv_caffe.FlattenParameter._InternalSerialize,"uint8_t opencv_caffe.FlattenParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* FlattenParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.FlattenParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 axis = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_axis(), target);
  }

  // optional int32 end_axis = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_end_axis(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
    ...",20246.0,20271.0,1.0,1.0,26.0,31,8,34,10,0,1,4,4,0,0,,0,1,4,2,2,uint8_t
3707,356971,operator bool,1,cv.dnn.cuda4dnn.csl.Event.operator bool,ANY cv.dnn.cuda4dnn.csl.Event.operator bool (),src\cuda4dnn\csl\event.hpp,explicit operator bool() const noexcept { return event; },82.0,82.0,9.0,65.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,ANY
3708,373360,stream,3,cv.dnn.cuda4dnn.MatMulBroadcastOp.stream,,src\cuda4dnn\primitives\matmul_broadcast.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3709,356977,event,3,cv.dnn.cuda4dnn.csl.Event.event,,src\cuda4dnn\csl\event.hpp,event,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
3710,373362,input_B_tensor,3,cv.dnn.cuda4dnn.MatMulBroadcastOp.input_B_tensor,,src\cuda4dnn\primitives\matmul_broadcast.hpp,input_B_tensor,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3711,373363,transA,3,cv.dnn.cuda4dnn.MatMulBroadcastOp.transA,,src\cuda4dnn\primitives\matmul_broadcast.hpp,transA,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3712,373361,cublasHandle,3,cv.dnn.cuda4dnn.MatMulBroadcastOp.cublasHandle,,src\cuda4dnn\primitives\matmul_broadcast.hpp,cublasHandle,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3713,373365,A_offsets,3,cv.dnn.cuda4dnn.MatMulBroadcastOp.A_offsets,,src\cuda4dnn\primitives\matmul_broadcast.hpp,A_offsets,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3714,373366,B_offsets,3,cv.dnn.cuda4dnn.MatMulBroadcastOp.B_offsets,,src\cuda4dnn\primitives\matmul_broadcast.hpp,B_offsets,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3715,373364,transB,3,cv.dnn.cuda4dnn.MatMulBroadcastOp.transB,,src\cuda4dnn\primitives\matmul_broadcast.hpp,transB,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3716,373368,batch,3,cv.dnn.cuda4dnn.MatMulBroadcastOp.batch,,src\cuda4dnn\primitives\matmul_broadcast.hpp,batch,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3717,373367,C_offsets,3,cv.dnn.cuda4dnn.MatMulBroadcastOp.C_offsets,,src\cuda4dnn\primitives\matmul_broadcast.hpp,C_offsets,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3718,307833,fbb_,3,opencv_tflite.Uint8VectorBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3719,307834,start_,3,opencv_tflite.Uint8VectorBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3720,307835,add_values,1,opencv_tflite.Uint8VectorBuilder.add_values,void opencv_tflite.Uint8VectorBuilder.add_values (ANY),misc\tflite\schema_generated.hpp,"void add_values(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> values) {
    fbb_.AddOffset(Uint8Vector::VT_VALUES, values);
  }",2606.0,2608.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
3721,45693,MergeFrom,1,opencv_caffe.ConcatParameter.MergeFrom,void opencv_caffe.ConcatParameter.MergeFrom (ConcatParameter),misc\caffe\opencv-caffe.pb.cc,"void ConcatParameter::MergeFrom(const ConcatParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.ConcatParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      concat_dim_ = from.concat_dim_;
    }
    if (cached_has_bits & 0x00000002u) {
      axis_ = from.axis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",15358.0,15375.0,1.0,1.0,18.0,19,8,17,7,2,6,4,6,0,0,,0,6,2,1,1,void
3722,225922,type,1,opencv_onnx.ValueInfoProto._Internal.type,TypeProto opencv_onnx.ValueInfoProto._Internal.type (ValueInfoProto*),misc\onnx\opencv-onnx.pb.cc,"const ::opencv_onnx::TypeProto&
ValueInfoProto::_Internal::type(const ValueInfoProto* msg) {
  return *msg->type_;
}",1436.0,1439.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,TypeProto
3723,307848,Uint8VectorBuilder,1,opencv_tflite.Uint8VectorBuilder.Uint8VectorBuilder,ANY opencv_tflite.Uint8VectorBuilder.Uint8VectorBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit Uint8VectorBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",2609.0,2612.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
3724,373392,window_size,3,cv.dnn.cuda4dnn.MaxPoolingConfiguration.window_size,,src\cuda4dnn\primitives\max_unpooling.hpp,window_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3725,373393,strides,3,cv.dnn.cuda4dnn.MaxPoolingConfiguration.strides,,src\cuda4dnn\primitives\max_unpooling.hpp,strides,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3726,307859,Finish,1,opencv_tflite.Uint8VectorBuilder.Finish,Offset<Uint8Vector> opencv_tflite.Uint8VectorBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<Uint8Vector> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Uint8Vector>(end);
    return o;
  }",2613.0,2617.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<Uint8Vector>
3727,373398,padMode,3,cv.dnn.cuda4dnn.MaxPoolingConfiguration.padMode,,src\cuda4dnn\primitives\max_unpooling.hpp,padMode,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3728,373399,pads_begin,3,cv.dnn.cuda4dnn.MaxPoolingConfiguration.pads_begin,,src\cuda4dnn\primitives\max_unpooling.hpp,pads_begin,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3729,373403,MaxPoolingOp,1,cv.dnn.cuda4dnn.MaxPoolingOp.MaxPoolingOp,"ANY cv.dnn.cuda4dnn.MaxPoolingOp.MaxPoolingOp (ANY,MaxPoolingConfiguration)",src\cuda4dnn\primitives\max_unpooling.hpp,"MaxPoolingOp(csl::Stream stream_, const MaxPoolingConfiguration& config)
            : stream(std::move(stream_))
        {
            window_size = config.window_size;

            const auto pooling_order = window_size.size();

            strides = config.strides;
            CV_Assert(pooling_order == strides.size());

            if (pooling_order < 1 || pooling_order > 3)
                CV_Error(Error::StsNotImplemented, ""Only 1D/2D/3D max-pooling are supported."");

            padding_left.resize(pooling_order);
            if (config.padMode == MaxPoolingConfiguration::PaddingMode::MANUAL)
            {
                const auto& pads_begin = config.pads_begin;
                CV_Assert(pooling_order == pads_begin.size());

                padding_left.assign(std::begin(pads_begin), std::end(pads_begin));
            }
            else if (config.padMode == MaxPoolingConfiguration::PaddingMode::VALID)
            {
                /* nothing to do as the paddings are alre...",47.0,91.0,9.0,9.0,45.0,24,6,25,10,0,10,3,3,1,0,,0,10,4,2,2,ANY
3730,307883,CreateUint8Vector,1,opencv_tflite.CreateUint8Vector,"Offset<Uint8Vector> opencv_tflite.CreateUint8Vector (ANY,ANY)",misc\tflite\schema_generated.hpp,"inline ::flatbuffers::Offset<Uint8Vector> CreateUint8Vector(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> values = 0) {
  Uint8VectorBuilder builder_(_fbb);
  builder_.add_values(values);
  return builder_.Finish();
}",2620.0,2626.0,1.0,1.0,7.0,2,1,4,3,1,0,1,1,0,0,,0,0,4,2,2,Offset<Uint8Vector>
3731,78518,MergeFrom,1,opencv_caffe.RecurrentParameter.MergeFrom,void opencv_caffe.RecurrentParameter.MergeFrom (RecurrentParameter),misc\caffe\opencv-caffe.pb.cc,"void RecurrentParameter::MergeFrom(const RecurrentParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.RecurrentParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_weight_filler()->::opencv_caffe::FillerParameter::MergeFrom(from._internal_weight_filler());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_bias_filler()->::opencv_caffe::FillerParameter::MergeFrom(from._internal_bias_filler());
    }
    if (cached_has_bits & 0x00000004u) {
      num_output_ = from.num_output_;
    }
    if (cached_has_bits & 0x00000008u) {
      debug_info_ = from.debug_info_;
    }
    if (cached_has_bits & 0x00000010u) {
      expose_hidden_ = from.expose_hidden_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PRO...",25315.0,25341.0,1.0,1.0,27.0,28,9,24,8,1,10,7,12,0,2,,0,8,2,1,1,void
3732,307902,CreateUint8VectorDirect,1,opencv_tflite.CreateUint8VectorDirect,"Offset<Uint8Vector> opencv_tflite.CreateUint8VectorDirect (ANY,ANY*)",misc\tflite\schema_generated.hpp,"inline ::flatbuffers::Offset<Uint8Vector> CreateUint8VectorDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *values = nullptr) {
  if (values) { _fbb.ForceVectorAlignment(values->size(), sizeof(uint8_t), 4); }
  auto values__ = values ? _fbb.CreateVector<uint8_t>(*values) : 0;
  return opencv_tflite::CreateUint8Vector(
      _fbb,
      values__);
}",2628.0,2636.0,1.0,1.0,9.0,10,8,12,5,0,1,2,2,0,1,,0,0,4,2,2,Offset<Uint8Vector>
3733,12994,SharedCtor,1,opencv_caffe.DetectionOutputParameter.SharedCtor,void opencv_caffe.DetectionOutputParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void DetectionOutputParameter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&nms_param_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&clip_) -
    reinterpret_cast<char*>(&nms_param_)) + sizeof(clip_));
keep_top_k_ = -1;
code_type_ = 1;
share_location_ = true;
normalized_bbox_ = true;
}",6249.0,6258.0,1.0,1.0,10.0,21,8,8,6,0,8,1,1,0,0,,0,8,0,0,0,void
3734,406214,updatePackedBOffsets,1,cv.dnn.MatMulHelper.updatePackedBOffsets,void cv.dnn.MatMulHelper.updatePackedBOffsets (size_t),src\layers\cpu_kernels\fast_gemm.hpp,"void updatePackedBOffsets(size_t packed_B_size) {
        size_t packed_B_inner_size = packed_B_size / batch;
        packed_B_offsets.resize(B_offsets.size());
        for (size_t i = 0; i < packed_B_offsets.size(); i++) {
            packed_B_offsets[i] = (B_offsets[i] / (N * K)) * packed_B_inner_size;
        }
    }",145.0,151.0,5.0,5.0,7.0,13,6,15,8,0,8,2,2,1,0,,0,8,2,1,1,void
3735,258767,GetEnumDescriptor,1,GetEnumDescriptor<opencv_onnx.AttributeProto_AttributeType>,EnumDescriptor GetEnumDescriptor<opencv_onnx.AttributeProto_AttributeType><> (),misc\onnx\opencv-onnx.pb.hpp,"inline const EnumDescriptor* GetEnumDescriptor< ::opencv_onnx::AttributeProto_AttributeType>() {
  return ::opencv_onnx::AttributeProto_AttributeType_descriptor();
}",7441.0,7443.0,1.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,0,0,0,0,EnumDescriptor
3736,45778,InternalSwap,1,opencv_caffe.ConcatParameter.InternalSwap,void opencv_caffe.ConcatParameter.InternalSwap (ConcatParameter*),misc\caffe\opencv-caffe.pb.cc,"void ConcatParameter::InternalSwap(ConcatParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(concat_dim_, other->concat_dim_);
  swap(axis_, other->axis_);
}",15388.0,15394.0,1.0,1.0,7.0,8,4,8,5,0,6,1,1,0,0,,0,6,2,1,1,void
3737,62166,ByteSizeLong,1,opencv_caffe.FlattenParameter.ByteSizeLong,size_t opencv_caffe.FlattenParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t FlattenParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.FlattenParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 axis = 1 [default = 1];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_axis());
    }

    // optional int32 end_axis = 2 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_end_axis());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}",20273.0,20295.0,1.0,1.0,23.0,19,8,18,7,0,2,4,6,0,0,,0,2,0,0,0,size_t
3738,258777,GetEnumDescriptor,1,GetEnumDescriptor<opencv_onnx.TensorProto_DataType>,EnumDescriptor GetEnumDescriptor<opencv_onnx.TensorProto_DataType><> (),misc\onnx\opencv-onnx.pb.hpp,"inline const EnumDescriptor* GetEnumDescriptor< ::opencv_onnx::TensorProto_DataType>() {
  return ::opencv_onnx::TensorProto_DataType_descriptor();
}",7446.0,7448.0,1.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,0,0,0,0,EnumDescriptor
3739,258787,GetEnumDescriptor,1,GetEnumDescriptor<opencv_onnx.Version>,EnumDescriptor GetEnumDescriptor<opencv_onnx.Version><> (),misc\onnx\opencv-onnx.pb.hpp,"inline const EnumDescriptor* GetEnumDescriptor< ::opencv_onnx::Version>() {
  return ::opencv_onnx::Version_descriptor();
}",7451.0,7453.0,1.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,0,0,0,0,EnumDescriptor
3740,242406,_has_bits_,3,opencv_onnx.AttributeProto._has_bits_,,misc\onnx\opencv-onnx.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
3741,242407,_cached_size_,3,opencv_onnx.AttributeProto._cached_size_,,misc\onnx\opencv-onnx.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3742,242408,floats_,3,opencv_onnx.AttributeProto.floats_,,misc\onnx\opencv-onnx.pb.hpp,floats_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3743,242409,ints_,3,opencv_onnx.AttributeProto.ints_,,misc\onnx\opencv-onnx.pb.hpp,ints_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
3744,242410,strings_,3,opencv_onnx.AttributeProto.strings_,,misc\onnx\opencv-onnx.pb.hpp,strings_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
3745,242411,tensors_,3,opencv_onnx.AttributeProto.tensors_,,misc\onnx\opencv-onnx.pb.hpp,tensors_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
3746,242412,graphs_,3,opencv_onnx.AttributeProto.graphs_,,misc\onnx\opencv-onnx.pb.hpp,graphs_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
3747,242413,name_,3,opencv_onnx.AttributeProto.name_,,misc\onnx\opencv-onnx.pb.hpp,name_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3748,242414,s_,3,opencv_onnx.AttributeProto.s_,,misc\onnx\opencv-onnx.pb.hpp,s_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3749,242415,doc_string_,3,opencv_onnx.AttributeProto.doc_string_,,misc\onnx\opencv-onnx.pb.hpp,doc_string_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3750,242416,ref_attr_name_,3,opencv_onnx.AttributeProto.ref_attr_name_,,misc\onnx\opencv-onnx.pb.hpp,ref_attr_name_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3751,242417,t_,3,opencv_onnx.AttributeProto.t_,,misc\onnx\opencv-onnx.pb.hpp,* t_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
3752,45810,GetMetadata,1,opencv_caffe.ConcatParameter.GetMetadata,Metadata opencv_caffe.ConcatParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata ConcatParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[20]);
}",15396.0,15400.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
3753,242419,i_,3,opencv_onnx.AttributeProto.i_,,misc\onnx\opencv-onnx.pb.hpp,i_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3754,242420,f_,3,opencv_onnx.AttributeProto.f_,,misc\onnx\opencv-onnx.pb.hpp,f_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3755,242421,type_,3,opencv_onnx.AttributeProto.type_,,misc\onnx\opencv-onnx.pb.hpp,type_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3756,226036,SharedCtor,1,opencv_onnx.ValueInfoProto.SharedCtor,void opencv_onnx.ValueInfoProto.SharedCtor (),misc\onnx\opencv-onnx.pb.cc,"inline void ValueInfoProto::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
doc_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  doc_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_ = nullptr;
}",1477.0,1487.0,1.0,1.0,11.0,9,3,7,5,0,3,1,1,0,0,,0,3,0,0,0,void
3757,242418,g_,3,opencv_onnx.AttributeProto.g_,,misc\onnx\opencv-onnx.pb.hpp,* g_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3758,127743,_has_bits_,3,opencv_caffe.TransformationParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
3759,127744,_cached_size_,3,opencv_caffe.TransformationParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3760,127745,mean_value_,3,opencv_caffe.TransformationParameter.mean_value_,,misc\caffe\opencv-caffe.pb.hpp,mean_value_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3761,127746,mean_file_,3,opencv_caffe.TransformationParameter.mean_file_,,misc\caffe\opencv-caffe.pb.hpp,mean_file_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3762,127747,crop_size_,3,opencv_caffe.TransformationParameter.crop_size_,,misc\caffe\opencv-caffe.pb.hpp,crop_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
3763,13059,SharedDtor,1,opencv_caffe.DetectionOutputParameter.SharedDtor,void opencv_caffe.DetectionOutputParameter.SharedDtor (),misc\caffe\opencv-caffe.pb.cc,"inline void DetectionOutputParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete nms_param_;
  if (this != internal_default_instance()) delete save_output_param_;
}",6267.0,6271.0,1.0,1.0,5.0,5,3,2,2,0,4,3,3,2,0,,0,4,0,0,0,void
3764,127748,mirror_,3,opencv_caffe.TransformationParameter.mirror_,,misc\caffe\opencv-caffe.pb.hpp,mirror_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3765,127750,force_gray_,3,opencv_caffe.TransformationParameter.force_gray_,,misc\caffe\opencv-caffe.pb.hpp,force_gray_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
3766,45830,set_has_use_global_stats,1,opencv_caffe._Internal.set_has_use_global_stats,void opencv_caffe._Internal.set_has_use_global_stats (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_use_global_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }",15407.0,15409.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
3767,127751,scale_,3,opencv_caffe.TransformationParameter.scale_,,misc\caffe\opencv-caffe.pb.hpp,scale_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
3768,127749,force_color_,3,opencv_caffe.TransformationParameter.force_color_,,misc\caffe\opencv-caffe.pb.hpp,force_color_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3769,307982,fbb_,3,opencv_tflite.DimensionMetadataBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
3770,307983,start_,3,opencv_tflite.DimensionMetadataBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3771,307984,add_format,1,opencv_tflite.DimensionMetadataBuilder.add_format,void opencv_tflite.DimensionMetadataBuilder.add_format (ANY),misc\tflite\schema_generated.hpp,"void add_format(opencv_tflite::DimensionType format) {
    fbb_.AddElement<int8_t>(DimensionMetadata::VT_FORMAT, static_cast<int8_t>(format), 0);
  }",2728.0,2730.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
3772,45841,set_has_moving_average_fraction,1,opencv_caffe._Internal.set_has_moving_average_fraction,void opencv_caffe._Internal.set_has_moving_average_fraction (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_moving_average_fraction(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }",15410.0,15412.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
3773,226080,SharedDtor,1,opencv_onnx.ValueInfoProto.SharedDtor,void opencv_onnx.ValueInfoProto.SharedDtor (),misc\onnx\opencv-onnx.pb.cc,"inline void ValueInfoProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doc_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete type_;
}",1496.0,1501.0,1.0,1.0,6.0,11,5,7,5,0,4,2,2,1,0,,0,4,0,0,0,void
3774,308004,add_dense_size,1,opencv_tflite.DimensionMetadataBuilder.add_dense_size,void opencv_tflite.DimensionMetadataBuilder.add_dense_size (int32_t),misc\tflite\schema_generated.hpp,"void add_dense_size(int32_t dense_size) {
    fbb_.AddElement<int32_t>(DimensionMetadata::VT_DENSE_SIZE, dense_size, 0);
  }",2731.0,2733.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
3775,45863,set_has_scale_bias,1,opencv_caffe._Internal.set_has_scale_bias,void opencv_caffe._Internal.set_has_scale_bias (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_scale_bias(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }",15416.0,15418.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
3776,13100,SetCachedSize,1,opencv_caffe.DetectionOutputParameter.SetCachedSize,void opencv_caffe.DetectionOutputParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void DetectionOutputParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",6279.0,6281.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
3777,78639,InternalSwap,1,opencv_caffe.RecurrentParameter.InternalSwap,void opencv_caffe.RecurrentParameter.InternalSwap (RecurrentParameter*),misc\caffe\opencv-caffe.pb.cc,"void RecurrentParameter::InternalSwap(RecurrentParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecurrentParameter, expose_hidden_)
      + sizeof(RecurrentParameter::expose_hidden_)
      - PROTOBUF_FIELD_OFFSET(RecurrentParameter, weight_filler_)>(
          reinterpret_cast<char*>(&weight_filler_),
          reinterpret_cast<char*>(&other->weight_filler_));
}",25354.0,25364.0,1.0,1.0,11.0,21,12,13,8,0,7,1,1,0,0,,0,7,2,1,1,void
3778,13110,Clear,1,opencv_caffe.DetectionOutputParameter.Clear,void opencv_caffe.DetectionOutputParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void DetectionOutputParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.DetectionOutputParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(nms_param_ != nullptr);
      nms_param_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(save_output_param_ != nullptr);
      save_output_param_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&num_classes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&clip_) -
        reinterpret_cast<char*>(&num_classes_)) + sizeof(clip_));
    keep_top_k_ = -1;
  }
  if (cached_has_bits & 0x00000700u) {
    code_type_ = 1;
    share_location_ = true;
    normalized_bbox_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPAC...",6283.0,6313.0,1.0,1.0,31.0,30,12,23,11,0,14,6,8,0,0,,0,14,0,0,0,void
3779,308022,add_array_segments_type,1,opencv_tflite.DimensionMetadataBuilder.add_array_segments_type,void opencv_tflite.DimensionMetadataBuilder.add_array_segments_type (ANY),misc\tflite\schema_generated.hpp,"void add_array_segments_type(opencv_tflite::SparseIndexVector array_segments_type) {
    fbb_.AddElement<uint8_t>(DimensionMetadata::VT_ARRAY_SEGMENTS_TYPE, static_cast<uint8_t>(array_segments_type), 0);
  }",2734.0,2736.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
3780,62268,MergeFrom,1,opencv_caffe.FlattenParameter.MergeFrom,void opencv_caffe.FlattenParameter.MergeFrom (FlattenParameter),misc\caffe\opencv-caffe.pb.cc,"void FlattenParameter::MergeFrom(const FlattenParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.FlattenParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      axis_ = from.axis_;
    }
    if (cached_has_bits & 0x00000002u) {
      end_axis_ = from.end_axis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",20310.0,20327.0,1.0,1.0,18.0,19,8,17,7,1,6,4,6,0,0,,0,6,2,1,1,void
3781,308042,add_array_segments,1,opencv_tflite.DimensionMetadataBuilder.add_array_segments,void opencv_tflite.DimensionMetadataBuilder.add_array_segments (ANY),misc\tflite\schema_generated.hpp,"void add_array_segments(::flatbuffers::Offset<void> array_segments) {
    fbb_.AddOffset(DimensionMetadata::VT_ARRAY_SEGMENTS, array_segments);
  }",2737.0,2739.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
3782,29515,_InternalSerialize,1,opencv_caffe.ParamSpec._InternalSerialize,"uint8_t opencv_caffe.ParamSpec._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* ParamSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.ParamSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      ""opencv_caffe.ParamSpec.name"");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .opencv_caffe.ParamSpec.DimCheckMode share_mode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_share_mo...",10781.0,10823.0,1.0,1.0,43.0,54,8,53,10,0,1,6,6,0,0,,0,1,4,2,2,uint8_t
3783,258903,file_level_metadata_attr_5fvalue_2eproto,2,misc\tensorflow\attr_value.pb.cc.file_level_metadata_attr_5fvalue_2eproto,,misc\tensorflow\attr_value.pb.cc,static ::PROTOBUF_NAMESPACE_ID::Metadata[4] file_level_metadata_attr_5fvalue_2eproto,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
3784,226136,SetCachedSize,1,opencv_onnx.ValueInfoProto.SetCachedSize,void opencv_onnx.ValueInfoProto.SetCachedSize (int),misc\onnx\opencv-onnx.pb.cc,"void ValueInfoProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",1509.0,1511.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
3785,308055,add_array_indices_type,1,opencv_tflite.DimensionMetadataBuilder.add_array_indices_type,void opencv_tflite.DimensionMetadataBuilder.add_array_indices_type (ANY),misc\tflite\schema_generated.hpp,"void add_array_indices_type(opencv_tflite::SparseIndexVector array_indices_type) {
    fbb_.AddElement<uint8_t>(DimensionMetadata::VT_ARRAY_INDICES_TYPE, static_cast<uint8_t>(array_indices_type), 0);
  }",2740.0,2742.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
3786,373599,forward,1,cv.dnn.cuda4dnn.MaxPoolingOp.forward,"void cv.dnn.cuda4dnn.MaxPoolingOp.forward (ANY,ANY,ANY)",src\cuda4dnn\primitives\max_unpooling.hpp,"void forward(
            const std::vector<cv::Ptr<BackendWrapper>>& inputs,
            const std::vector<cv::Ptr<BackendWrapper>>& outputs,
            csl::Workspace& workspace) override
        {
            CV_Assert(inputs.size() == 1 && outputs.size() == 2);

            auto input_wrapper = inputs[0].dynamicCast<wrapper_type>();
            auto input_data = input_wrapper->getView();

            auto output_wrapper = outputs[0].dynamicCast<wrapper_type>();
            auto output_data = output_wrapper->getSpan();

            auto indices_wrapper = outputs[1].dynamicCast<wrapper_type>();
            auto output_indices = indices_wrapper->getSpan();

            kernels::max_pooling_with_indices<T>(
                stream, output_data, output_indices, input_data, window_size, strides, padding_left
            );
        }",93.0,112.0,9.0,9.0,20.0,21,6,22,13,0,4,1,1,0,0,,0,4,6,3,3,void
3787,357217,operator =,1,cv.dnn.cuda4dnn.csl.ManagedPtr.operator =,ManagedPtr cv.dnn.cuda4dnn.csl.ManagedPtr.operator = (ManagedPtr),src\cuda4dnn\csl\memory.hpp,"ManagedPtr& operator=(ManagedPtr&& other) noexcept {
            wrapped = std::move(other.wrapped);
            n = other.n;
            capacity = other.capacity;

            other.reset();
            return *this;
        }",78.0,85.0,9.0,9.0,8.0,9,3,8,5,0,6,1,1,0,0,,0,6,2,1,1,ManagedPtr
3788,226146,Clear,1,opencv_onnx.ValueInfoProto.Clear,void opencv_onnx.ValueInfoProto.Clear (),misc\onnx\opencv-onnx.pb.cc,"void ValueInfoProto::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_onnx.ValueInfoProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      doc_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(type_ != nullptr);
      type_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",1513.0,1534.0,1.0,1.0,22.0,14,7,14,6,0,6,5,8,0,0,,0,6,0,0,0,void
3789,78692,GetMetadata,1,opencv_caffe.RecurrentParameter.GetMetadata,Metadata opencv_caffe.RecurrentParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata RecurrentParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[51]);
}",25366.0,25370.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
3790,45927,SharedCtor,1,opencv_caffe.BatchNormParameter.SharedCtor,void opencv_caffe.BatchNormParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void BatchNormParameter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&use_global_stats_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&scale_bias_) -
    reinterpret_cast<char*>(&use_global_stats_)) + sizeof(scale_bias_));
moving_average_fraction_ = 0.999f;
eps_ = 1e-05f;
}",15440.0,15447.0,1.0,1.0,8.0,18,7,6,4,0,6,1,1,0,0,,0,6,0,0,0,void
3791,308075,add_array_indices,1,opencv_tflite.DimensionMetadataBuilder.add_array_indices,void opencv_tflite.DimensionMetadataBuilder.add_array_indices (ANY),misc\tflite\schema_generated.hpp,"void add_array_indices(::flatbuffers::Offset<void> array_indices) {
    fbb_.AddOffset(DimensionMetadata::VT_ARRAY_INDICES, array_indices);
  }",2743.0,2745.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
3792,127857,descriptor,1,opencv_caffe.LossParameter.descriptor,Descriptor opencv_caffe.LossParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",7368.0,7370.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
3793,127863,GetDescriptor,1,opencv_caffe.LossParameter.GetDescriptor,Descriptor opencv_caffe.LossParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",7371.0,7373.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
3794,308088,DimensionMetadataBuilder,1,opencv_tflite.DimensionMetadataBuilder.DimensionMetadataBuilder,ANY opencv_tflite.DimensionMetadataBuilder.DimensionMetadataBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit DimensionMetadataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",2746.0,2749.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
3795,357248,size,1,cv.dnn.cuda4dnn.csl.ManagedPtr.size,size_type cv.dnn.cuda4dnn.csl.ManagedPtr.size (),src\cuda4dnn\csl\memory.hpp,size_type size() const noexcept { return n; },87.0,87.0,9.0,53.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,size_type
3796,127874,GetReflection,1,opencv_caffe.LossParameter.GetReflection,Reflection opencv_caffe.LossParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",7374.0,7376.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
3797,308099,Finish,1,opencv_tflite.DimensionMetadataBuilder.Finish,Offset<DimensionMetadata> opencv_tflite.DimensionMetadataBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<DimensionMetadata> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DimensionMetadata>(end);
    return o;
  }",2750.0,2754.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<DimensionMetadata>
3798,357254,reset,1,cv.dnn.cuda4dnn.csl.ManagedPtr.reset,void cv.dnn.cuda4dnn.csl.ManagedPtr.reset (),src\cuda4dnn\csl\memory.hpp,"void reset(size_type count) {
            /* we need to fully own the memory to perform optimizations */
            if (wrapped.use_count() == 1) {
                /* avoid reallocation if the existing capacity is sufficient */
                if (count <= capacity) {
                    n = count;
                    return;
                }
            }

            /* no optimization performed; allocate memory */
            ManagedPtr tmp(count);
            swap(tmp, *this);
        }",100.0,113.0,9.0,9.0,14.0,3,2,3,3,0,3,1,1,0,0,,0,3,2,1,1,void
3799,242569,descriptor,1,opencv_onnx.ValueInfoProto.descriptor,Descriptor opencv_onnx.ValueInfoProto.descriptor (),misc\onnx\opencv-onnx.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",719.0,721.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
3800,127885,default_instance,1,opencv_caffe.LossParameter.default_instance,LossParameter opencv_caffe.LossParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const LossParameter& default_instance() {
    return *internal_default_instance();
  }",7377.0,7379.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,LossParameter
3801,78734,set_has_coeff,1,opencv_caffe._Internal.set_has_coeff,void opencv_caffe._Internal.set_has_coeff (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_coeff(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }",25383.0,25385.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
3802,242575,GetDescriptor,1,opencv_onnx.ValueInfoProto.GetDescriptor,Descriptor opencv_onnx.ValueInfoProto.GetDescriptor (),misc\onnx\opencv-onnx.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",722.0,724.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
3803,62353,InternalSwap,1,opencv_caffe.FlattenParameter.InternalSwap,void opencv_caffe.FlattenParameter.InternalSwap (FlattenParameter*),misc\caffe\opencv-caffe.pb.cc,"void FlattenParameter::InternalSwap(FlattenParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(axis_, other->axis_);
  swap(end_axis_, other->end_axis_);
}",20340.0,20346.0,1.0,1.0,7.0,8,4,8,5,0,6,1,1,0,0,,0,6,2,1,1,void
3804,258961,descriptor_table_attr_5fvalue_2eproto_once,2,misc\tensorflow\attr_value.pb.cc.descriptor_table_attr_5fvalue_2eproto_once,,misc\tensorflow\attr_value.pb.cc,ANY descriptor_table_attr_5fvalue_2eproto_once,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
3805,258962,descriptor_table_attr_5fvalue_2eproto,2,misc\tensorflow\attr_value.pb.cc.descriptor_table_attr_5fvalue_2eproto,,misc\tensorflow\attr_value.pb.cc,ANY descriptor_table_attr_5fvalue_2eproto,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3806,127892,internal_default_instance,1,opencv_caffe.LossParameter.internal_default_instance,LossParameter opencv_caffe.LossParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const LossParameter* internal_default_instance() {
    return reinterpret_cast<const LossParameter*>(
               &_LossParameter_default_instance_);
  }",7380.0,7383.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,LossParameter
3807,13209,_InternalParse,1,opencv_caffe.DetectionOutputParameter._InternalParse,"const char* opencv_caffe.DetectionOutputParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* DetectionOutputParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 num_classes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_num_classes(&has_bits);
          num_classes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool share_location = 2 [default = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_share_location(&has_bits);
          share_location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK...",6315.0,6445.0,1.0,10.0,131.0,113,14,119,20,0,18,30,43,1,9,,0,10,4,2,2,const char*
3808,242586,GetReflection,1,opencv_onnx.ValueInfoProto.GetReflection,Reflection opencv_onnx.ValueInfoProto.GetReflection (),misc\onnx\opencv-onnx.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",725.0,727.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
3809,226206,_InternalParse,1,opencv_onnx.ValueInfoProto._InternalParse,"const char* opencv_onnx.ValueInfoProto._InternalParse (char*,ANY*)",misc\onnx\opencv-onnx.pb.cc,"const char* ValueInfoProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, ""opencv_onnx.ValueInfoProto.name"");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .opencv_onnx.TypeProto type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx-...",1536.0,1597.0,1.0,10.0,62.0,45,12,57,9,0,1,13,15,0,0,,0,1,4,2,2,const char*
3810,242597,default_instance,1,opencv_onnx.ValueInfoProto.default_instance,ValueInfoProto opencv_onnx.ValueInfoProto.default_instance (),misc\onnx\opencv-onnx.pb.hpp,"static const ValueInfoProto& default_instance() {
    return *internal_default_instance();
  }",728.0,730.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,ValueInfoProto
3811,258985,descriptor_table_attr_5fvalue_2eproto_getter,1,descriptor_table_attr_5fvalue_2eproto_getter,DescriptorTable descriptor_table_attr_5fvalue_2eproto_getter (),misc\tensorflow\attr_value.pb.cc,"const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_attr_5fvalue_2eproto_getter() {
  return &descriptor_table_attr_5fvalue_2eproto;
}",181.0,183.0,25.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,DescriptorTable
3812,242604,internal_default_instance,1,opencv_onnx.ValueInfoProto.internal_default_instance,ValueInfoProto opencv_onnx.ValueInfoProto.internal_default_instance (),misc\onnx\opencv-onnx.pb.hpp,"static inline const ValueInfoProto* internal_default_instance() {
    return reinterpret_cast<const ValueInfoProto*>(
               &_ValueInfoProto_default_instance_);
  }",731.0,734.0,3.0,3.0,4.0,2,2,1,1,2,0,1,1,0,0,,0,0,0,0,0,ValueInfoProto
3813,373679,stream,3,cv.dnn.cuda4dnn.MaxPoolingOp.stream,,src\cuda4dnn\primitives\max_unpooling.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3814,373680,window_size,3,cv.dnn.cuda4dnn.MaxPoolingOp.window_size,,src\cuda4dnn\primitives\max_unpooling.hpp,window_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3815,62385,GetMetadata,1,opencv_caffe.FlattenParameter.GetMetadata,Metadata opencv_caffe.FlattenParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata FlattenParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[35]);
}",20348.0,20352.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
3816,373682,padding_left,3,cv.dnn.cuda4dnn.MaxPoolingOp.padding_left,,src\cuda4dnn\primitives\max_unpooling.hpp,padding_left,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3817,373681,strides,3,cv.dnn.cuda4dnn.MaxPoolingOp.strides,,src\cuda4dnn\primitives\max_unpooling.hpp,strides,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3818,357296,get,1,cv.dnn.cuda4dnn.csl.ManagedPtr.get,pointer cv.dnn.cuda4dnn.csl.ManagedPtr.get (),src\cuda4dnn\csl\memory.hpp,pointer get() const noexcept { return pointer(wrapped.get()); },115.0,115.0,9.0,71.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,pointer
3819,373685,strides,3,cv.dnn.cuda4dnn.MaxUnpoolingConfiguration.strides,,src\cuda4dnn\primitives\max_unpooling.hpp,strides,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3820,373686,pads_begin,3,cv.dnn.cuda4dnn.MaxUnpoolingConfiguration.pads_begin,,src\cuda4dnn\primitives\max_unpooling.hpp,pads_begin,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3821,258999,clear_shape,1,opencv_tensorflow.AttrValue_ListValue.clear_shape,void opencv_tensorflow.AttrValue_ListValue.clear_shape (),misc\tensorflow\attr_value.pb.cc,"void AttrValue_ListValue::clear_shape() {
  shape_.Clear();
}",195.0,197.0,1.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,void
3822,373684,window_size,3,cv.dnn.cuda4dnn.MaxUnpoolingConfiguration.window_size,,src\cuda4dnn\primitives\max_unpooling.hpp,window_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3823,373689,MaxUnpoolingOp,1,cv.dnn.cuda4dnn.MaxUnpoolingOp.MaxUnpoolingOp,"ANY cv.dnn.cuda4dnn.MaxUnpoolingOp.MaxUnpoolingOp (ANY,MaxUnpoolingConfiguration)",src\cuda4dnn\primitives\max_unpooling.hpp,"MaxUnpoolingOp(csl::Stream stream_, const MaxUnpoolingConfiguration& config)
            : stream(std::move(stream_))
        {
            window_size = config.window_size;

            const auto pooling_order = window_size.size();
            CV_Assert(pooling_order >= 1);

            strides = config.strides;
            padding_left = config.pads_begin;
            CV_Assert(strides.size() == pooling_order);
            CV_Assert(padding_left.size() == pooling_order);

            if (pooling_order != 2 && pooling_order != 3)
                CV_Error(Error::StsNotImplemented, ""Only 2D/3D max-unpooling are supported."");
        }",132.0,147.0,9.0,9.0,16.0,17,6,16,6,0,9,2,2,0,0,,0,9,4,2,2,ANY
3824,357306,operator bool,1,cv.dnn.cuda4dnn.csl.ManagedPtr.operator bool,ANY cv.dnn.cuda4dnn.csl.ManagedPtr.operator bool (),src\cuda4dnn\csl\memory.hpp,explicit operator bool() const noexcept { return wrapped; },117.0,117.0,9.0,67.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,ANY
3825,46012,SetCachedSize,1,opencv_caffe.BatchNormParameter.SetCachedSize,void opencv_caffe.BatchNormParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void BatchNormParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",15466.0,15468.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
3826,259007,clear_tensor,1,opencv_tensorflow.AttrValue_ListValue.clear_tensor,void opencv_tensorflow.AttrValue_ListValue.clear_tensor (),misc\tensorflow\attr_value.pb.cc,"void AttrValue_ListValue::clear_tensor() {
  tensor_.Clear();
}",198.0,200.0,1.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,void
3827,357312,operator ==,1,cv.dnn.cuda4dnn.csl.ManagedPtr.operator ==,"bool cv.dnn.cuda4dnn.csl.ManagedPtr.operator == (ManagedPtr,ManagedPtr)",src\cuda4dnn\csl\memory.hpp,"friend bool operator==(const ManagedPtr& lhs, const ManagedPtr& rhs) noexcept { return lhs.wrapped == rhs.wrapped; }",119.0,119.0,9.0,124.0,1.0,3,2,2,2,0,2,1,1,0,0,,0,2,4,2,2,bool
3828,46022,Clear,1,opencv_caffe.BatchNormParameter.Clear,void opencv_caffe.BatchNormParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void BatchNormParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.BatchNormParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&use_global_stats_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scale_bias_) -
      reinterpret_cast<char*>(&use_global_stats_)) + sizeof(scale_bias_));
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    moving_average_fraction_ = 0.999f;
    eps_ = 1e-05f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",15470.0,15486.0,1.0,1.0,17.0,19,9,13,7,0,8,2,2,0,0,,0,8,0,0,0,void
3829,357326,operator !=,1,cv.dnn.cuda4dnn.csl.ManagedPtr.operator !=,"bool cv.dnn.cuda4dnn.csl.ManagedPtr.operator != (ManagedPtr,ManagedPtr)",src\cuda4dnn\csl\memory.hpp,"friend bool operator!=(const ManagedPtr& lhs, const ManagedPtr& rhs) noexcept { return lhs.wrapped != rhs.wrapped; }",120.0,120.0,9.0,124.0,1.0,3,2,2,2,0,2,1,1,0,0,,0,2,4,2,2,bool
3830,308175,fbb_,3,opencv_tflite.SparsityParametersBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3831,308176,start_,3,opencv_tflite.SparsityParametersBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3832,308177,add_traversal_order,1,opencv_tflite.SparsityParametersBuilder.add_traversal_order,void opencv_tflite.SparsityParametersBuilder.add_traversal_order (ANY),misc\tflite\schema_generated.hpp,"void add_traversal_order(::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> traversal_order) {
    fbb_.AddOffset(SparsityParameters::VT_TRAVERSAL_ORDER, traversal_order);
  }",2808.0,2810.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
3833,78798,SharedCtor,1,opencv_caffe.ReductionParameter.SharedCtor,void opencv_caffe.ReductionParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void ReductionParameter::SharedCtor() {
axis_ = 0;
operation_ = 1;
coeff_ = 1;
}",25407.0,25411.0,1.0,1.0,5.0,3,1,3,3,0,3,1,1,0,0,,0,3,0,0,0,void
3834,62427,set_has_shuffle,1,opencv_caffe._Internal.set_has_shuffle,void opencv_caffe._Internal.set_has_shuffle (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_shuffle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }",21078.0,21080.0,3.0,3.0,3.0,2,2,1,1,2,0,1,1,0,0,,0,0,2,1,1,void
3835,357340,swap,1,cv.dnn.cuda4dnn.csl.ManagedPtr.swap,"void cv.dnn.cuda4dnn.csl.ManagedPtr.swap (ManagedPtr,ManagedPtr)",src\cuda4dnn\csl\memory.hpp,"friend void swap(ManagedPtr& lhs, ManagedPtr& rhs) noexcept {
            using std::swap;
            swap(lhs.wrapped, rhs.wrapped);
            swap(lhs.n, rhs.n);
            swap(lhs.capacity, rhs.capacity);
        }",122.0,127.0,9.0,9.0,6.0,6,1,6,2,0,6,1,1,0,0,,0,6,4,2,2,void
3836,308190,add_block_map,1,opencv_tflite.SparsityParametersBuilder.add_block_map,void opencv_tflite.SparsityParametersBuilder.add_block_map (ANY),misc\tflite\schema_generated.hpp,"void add_block_map(::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> block_map) {
    fbb_.AddOffset(SparsityParameters::VT_BLOCK_MAP, block_map);
  }",2811.0,2813.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
3837,308203,add_dim_metadata,1,opencv_tflite.SparsityParametersBuilder.add_dim_metadata,void opencv_tflite.SparsityParametersBuilder.add_dim_metadata (ANY),misc\tflite\schema_generated.hpp,"void add_dim_metadata(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<opencv_tflite::DimensionMetadata>>> dim_metadata) {
    fbb_.AddOffset(SparsityParameters::VT_DIM_METADATA, dim_metadata);
  }",2814.0,2816.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
3838,373749,forward,1,cv.dnn.cuda4dnn.MaxUnpoolingOp.forward,"void cv.dnn.cuda4dnn.MaxUnpoolingOp.forward (ANY,ANY,ANY)",src\cuda4dnn\primitives\max_unpooling.hpp,"void forward(
            const std::vector<cv::Ptr<BackendWrapper>>& inputs,
            const std::vector<cv::Ptr<BackendWrapper>>& outputs,
            csl::Workspace& workspace) override
        {
            /* sometimes a third input is passed to provide the output shape; we won't need it */
            CV_Assert(inputs.size() == 2 || inputs.size() == 3);
            CV_Assert(outputs.size() >= 1);

            for(int i = 0;  i < outputs.size(); i++)
            {
                auto input_wrapper = inputs[0].dynamicCast<wrapper_type>();
                auto input_data = input_wrapper->getView();

                auto indices_wrapper = inputs[1].dynamicCast<wrapper_type>();
                auto input_indices = indices_wrapper->getView();

                auto output_wrapper = outputs[i].dynamicCast<wrapper_type>();
                auto output_data = output_wrapper->getSpan();

                kernels::max_unpooling<T>(stream, output_data, input_data, input_indices, window_si...",149.0,171.0,9.0,9.0,23.0,26,8,27,14,0,4,2,2,0,0,,0,4,6,3,3,void
3839,357367,wrapped,3,cv.dnn.cuda4dnn.csl.ManagedPtr.wrapped,,src\cuda4dnn\csl\memory.hpp,wrapped,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,11,0,1,1,0,0,,0,0,0,0,0,
3840,357368,n,3,cv.dnn.cuda4dnn.csl.ManagedPtr.n,,src\cuda4dnn\csl\memory.hpp,n,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
3841,357369,capacity,3,cv.dnn.cuda4dnn.csl.ManagedPtr.capacity,,src\cuda4dnn\csl\memory.hpp,capacity,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3842,308216,SparsityParametersBuilder,1,opencv_tflite.SparsityParametersBuilder.SparsityParametersBuilder,ANY opencv_tflite.SparsityParametersBuilder.SparsityParametersBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit SparsityParametersBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",2817.0,2820.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
3843,46078,_InternalParse,1,opencv_caffe.BatchNormParameter._InternalParse,"const char* opencv_caffe.BatchNormParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* BatchNormParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool use_global_stats = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_use_global_stats(&has_bits);
          use_global_stats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float moving_average_fraction = 2 [default = 0.999];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_moving_average_fraction(&has_bits);
          moving_average_fraction_ = ::PROTOBUF_NAMESPACE_ID::interna...",15488.0,15553.0,1.0,10.0,66.0,58,14,61,14,0,9,15,18,0,4,,0,5,4,2,2,const char*
3844,308227,Finish,1,opencv_tflite.SparsityParametersBuilder.Finish,Offset<SparsityParameters> opencv_tflite.SparsityParametersBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<SparsityParameters> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SparsityParameters>(end);
    return o;
  }",2821.0,2825.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<SparsityParameters>
3845,29700,ByteSizeLong,1,opencv_caffe.ParamSpec.ByteSizeLong,size_t opencv_caffe.ParamSpec.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t ParamSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.ParamSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .opencv_caffe.ParamSpec.DimCheckMode share_mode = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_share_mode());
    }

    // optional float lr_mult = 3 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float decay_mult = 4 [default = 1];
    if (cached_has_bits & 0x...",10825.0,10860.0,1.0,1.0,36.0,27,9,22,7,0,2,6,10,0,0,,0,2,0,0,0,size_t
3846,78853,SetCachedSize,1,opencv_caffe.ReductionParameter.SetCachedSize,void opencv_caffe.ReductionParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void ReductionParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",25430.0,25432.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
3847,78863,Clear,1,opencv_caffe.ReductionParameter.Clear,void opencv_caffe.ReductionParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void ReductionParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.ReductionParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    axis_ = 0;
    operation_ = 1;
    coeff_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",25434.0,25448.0,1.0,1.0,15.0,10,5,10,6,0,5,2,2,0,0,,0,5,0,0,0,void
3848,128017,GetCachedSize,1,opencv_caffe.LossParameter.GetCachedSize,int opencv_caffe.LossParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },7428.0,7428.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
3849,259090,SetCachedSize,1,opencv_tensorflow.AttrValue_ListValue.SetCachedSize,void opencv_tensorflow.AttrValue_ListValue.SetCachedSize (int),misc\tensorflow\attr_value.pb.cc,"void AttrValue_ListValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",250.0,252.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
3850,308251,CreateSparsityParameters,1,opencv_tflite.CreateSparsityParameters,"Offset<SparsityParameters> opencv_tflite.CreateSparsityParameters (ANY,ANY,ANY,ANY)",misc\tflite\schema_generated.hpp,"inline ::flatbuffers::Offset<SparsityParameters> CreateSparsityParameters(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> traversal_order = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> block_map = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<opencv_tflite::DimensionMetadata>>> dim_metadata = 0) {
  SparsityParametersBuilder builder_(_fbb);
  builder_.add_dim_metadata(dim_metadata);
  builder_.add_block_map(block_map);
  builder_.add_traversal_order(traversal_order);
  return builder_.Finish();
}",2828.0,2838.0,1.0,1.0,11.0,4,1,8,5,1,0,1,1,0,0,,0,0,8,4,4,Offset<SparsityParameters>
3851,259100,Clear,1,opencv_tensorflow.AttrValue_ListValue.Clear,void opencv_tensorflow.AttrValue_ListValue.Clear (),misc\tensorflow\attr_value.pb.cc,"void AttrValue_ListValue::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_tensorflow.AttrValue.ListValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  s_.Clear();
  i_.Clear();
  f_.Clear();
  b_.Clear();
  type_.Clear();
  shape_.Clear();
  tensor_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",254.0,268.0,1.0,1.0,15.0,10,3,10,9,0,7,1,1,0,0,,0,7,0,0,0,void
3852,242729,GetCachedSize,1,opencv_onnx.ValueInfoProto.GetCachedSize,int opencv_onnx.ValueInfoProto.GetCachedSize (),misc\onnx\opencv-onnx.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },779.0,779.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
3853,78901,_InternalParse,1,opencv_caffe.ReductionParameter._InternalParse,"const char* opencv_caffe.ReductionParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* ReductionParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .opencv_caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::opencv_caffe::ReductionParameter_ReductionOp_IsValid(val))) {
            _internal_set_operation(static_cast<::opencv_caffe::ReductionParameter_ReductionOp>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_un...",25450.0,25510.0,1.0,10.0,61.0,49,14,53,14,0,6,14,19,1,3,,0,4,4,2,2,const char*
3854,144439,_has_bits_,3,opencv_caffe.PoolingParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
3855,144440,_cached_size_,3,opencv_caffe.PoolingParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3856,144441,pool_,3,opencv_caffe.PoolingParameter.pool_,,misc\caffe\opencv-caffe.pb.hpp,pool_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
3857,308282,CreateSparsityParametersDirect,1,opencv_tflite.CreateSparsityParametersDirect,"Offset<SparsityParameters> opencv_tflite.CreateSparsityParametersDirect (ANY,ANY*,ANY*,ANY*)",misc\tflite\schema_generated.hpp,"inline ::flatbuffers::Offset<SparsityParameters> CreateSparsityParametersDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int32_t> *traversal_order = nullptr,
    const std::vector<int32_t> *block_map = nullptr,
    const std::vector<::flatbuffers::Offset<opencv_tflite::DimensionMetadata>> *dim_metadata = nullptr) {
  auto traversal_order__ = traversal_order ? _fbb.CreateVector<int32_t>(*traversal_order) : 0;
  auto block_map__ = block_map ? _fbb.CreateVector<int32_t>(*block_map) : 0;
  auto dim_metadata__ = dim_metadata ? _fbb.CreateVector<::flatbuffers::Offset<opencv_tflite::DimensionMetadata>>(*dim_metadata) : 0;
  return opencv_tflite::CreateSparsityParameters(
      _fbb,
      traversal_order__,
      block_map__,
      dim_metadata__);
}",2840.0,2853.0,1.0,1.0,14.0,22,7,21,10,0,1,1,1,0,1,,0,0,8,4,4,Offset<SparsityParameters>
3858,144442,kernel_size_,3,opencv_caffe.PoolingParameter.kernel_size_,,misc\caffe\opencv-caffe.pb.hpp,kernel_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3859,62519,SharedCtor,1,opencv_caffe.HDF5DataParameter.SharedCtor,void opencv_caffe.HDF5DataParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void HDF5DataParameter::SharedCtor() {
source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&batch_size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&shuffle_) -
    reinterpret_cast<char*>(&batch_size_)) + sizeof(shuffle_));
}",20397.0,20406.0,1.0,1.0,10.0,20,6,7,5,0,5,1,1,0,0,,0,5,0,0,0,void
3860,144443,pad_,3,opencv_caffe.PoolingParameter.pad_,,misc\caffe\opencv-caffe.pb.hpp,pad_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3861,144445,kernel_w_,3,opencv_caffe.PoolingParameter.kernel_w_,,misc\caffe\opencv-caffe.pb.hpp,kernel_w_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3862,144446,stride_h_,3,opencv_caffe.PoolingParameter.stride_h_,,misc\caffe\opencv-caffe.pb.hpp,stride_h_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3863,144448,pad_h_,3,opencv_caffe.PoolingParameter.pad_h_,,misc\caffe\opencv-caffe.pb.hpp,pad_h_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3864,144449,pad_w_,3,opencv_caffe.PoolingParameter.pad_w_,,misc\caffe\opencv-caffe.pb.hpp,pad_w_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3865,144450,engine_,3,opencv_caffe.PoolingParameter.engine_,,misc\caffe\opencv-caffe.pb.hpp,engine_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3866,144451,global_pooling_,3,opencv_caffe.PoolingParameter.global_pooling_,,misc\caffe\opencv-caffe.pb.hpp,global_pooling_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
3867,144452,stride_,3,opencv_caffe.PoolingParameter.stride_,,misc\caffe\opencv-caffe.pb.hpp,stride_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
3868,144453,ceil_mode_,3,opencv_caffe.PoolingParameter.ceil_mode_,,misc\caffe\opencv-caffe.pb.hpp,ceil_mode_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
3869,144447,stride_w_,3,opencv_caffe.PoolingParameter.stride_w_,,misc\caffe\opencv-caffe.pb.hpp,stride_w_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3870,373851,stream,3,cv.dnn.cuda4dnn.MaxUnpoolingOp.stream,,src\cuda4dnn\primitives\max_unpooling.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3871,373852,window_size,3,cv.dnn.cuda4dnn.MaxUnpoolingOp.window_size,,src\cuda4dnn\primitives\max_unpooling.hpp,window_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3872,373853,strides,3,cv.dnn.cuda4dnn.MaxUnpoolingOp.strides,,src\cuda4dnn\primitives\max_unpooling.hpp,strides,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3873,373854,padding_left,3,cv.dnn.cuda4dnn.MaxUnpoolingOp.padding_left,,src\cuda4dnn\primitives\max_unpooling.hpp,padding_left,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3874,95340,ByteSizeLong,1,opencv_caffe.V1LayerParameter.ByteSizeLong,size_t opencv_caffe.V1LayerParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t V1LayerParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.V1LayerParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string bottom = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(bottom_.size());
  for (int i = 0, n = bottom_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      bottom_.Get(i));
  }

  // repeated string top = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(top_.size());
  for (int i = 0, n = top_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      top_.Get(i));
  }

  // repeated .opencv_caffe.BlobProto blobs = 6;
  total_size += 1UL * this->_internal_blobs_size();
  for (const auto& msg : this->blobs_) {
    total_size +=...",30274.0,30605.0,1.0,1.0,332.0,357,12,309,46,0,46,45,77,3,0,,0,46,0,0,0,size_t
3875,62582,SharedDtor,1,opencv_caffe.HDF5DataParameter.SharedDtor,void opencv_caffe.HDF5DataParameter.SharedDtor (),misc\caffe\opencv-caffe.pb.cc,"inline void HDF5DataParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}",20415.0,20418.0,1.0,1.0,4.0,5,3,3,3,0,1,1,1,0,0,,0,1,0,0,0,void
3876,226427,_InternalSerialize,1,opencv_onnx.ValueInfoProto._InternalSerialize,"uint8_t opencv_onnx.ValueInfoProto._InternalSerialize (uint8_t*,ANY*)",misc\onnx\opencv-onnx.pb.cc,"uint8_t* ValueInfoProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_onnx.ValueInfoProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      ""opencv_onnx.ValueInfoProto.name"");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .opencv_onnx.TypeProto type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::type(th...",1599.0,1640.0,1.0,1.0,42.0,53,8,47,11,0,2,5,5,0,1,,0,2,4,2,2,uint8_t
3877,373886,input_shapes,3,cv.dnn.cuda4dnn.MVNConfiguration.input_shapes,,src\cuda4dnn\primitives\mvn.hpp,input_shapes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3878,308350,fbb_,3,opencv_tflite.VariantSubTypeBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3879,373888,normalize_variance,3,cv.dnn.cuda4dnn.MVNConfiguration.normalize_variance,,src\cuda4dnn\primitives\mvn.hpp,normalize_variance,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3880,308351,start_,3,opencv_tflite.VariantSubTypeBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3881,29826,MergeFrom,1,opencv_caffe.ParamSpec.MergeFrom,void opencv_caffe.ParamSpec.MergeFrom (ParamSpec),misc\caffe\opencv-caffe.pb.cc,"void ParamSpec::MergeFrom(const ParamSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.ParamSpec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      share_mode_ = from.share_mode_;
    }
    if (cached_has_bits & 0x00000004u) {
      lr_mult_ = from.lr_mult_;
    }
    if (cached_has_bits & 0x00000008u) {
      decay_mult_ = from.decay_mult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",10875.0,10898.0,1.0,1.0,24.0,24,8,22,8,0,8,6,10,0,0,,0,8,2,1,1,void
3882,373889,epsilon,3,cv.dnn.cuda4dnn.MVNConfiguration.epsilon,,src\cuda4dnn\primitives\mvn.hpp,epsilon,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3883,373892,MVNOp,1,cv.dnn.cuda4dnn.MVNOp.MVNOp,"ANY cv.dnn.cuda4dnn.MVNOp.MVNOp (ANY,MVNConfiguration)",src\cuda4dnn\primitives\mvn.hpp,"MVNOp(csl::Stream stream_, const MVNConfiguration& config)
            : stream(std::move(stream_))
        {
            split_axis = config.split_axis;
            normalize_variance = config.normalize_variance;
            epsilon = config.epsilon;

            std::size_t max_outer_size = 0;
            const auto& input_shapes = config.input_shapes;
            for (int i = 0; i < input_shapes.size(); i++)
            {
                std::size_t outer_size = 1;
                for (int j = 0; j < split_axis; j++)
                    outer_size *= input_shapes[i][j];
                max_outer_size = std::max(max_outer_size, outer_size);
            }

            csl::WorkspaceBuilder builder;
            builder.require<float>(max_outer_size);
            if (normalize_variance)
                builder.require<float>(max_outer_size);
            scratch_mem_in_bytes = builder.required_workspace_size();
        }",49.0,71.0,9.0,9.0,23.0,21,3,27,12,0,10,4,5,2,0,,0,10,4,2,2,ANY
3884,373887,split_axis,3,cv.dnn.cuda4dnn.MVNConfiguration.split_axis,,src\cuda4dnn\primitives\mvn.hpp,split_axis,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3885,308352,add_shape,1,opencv_tflite.VariantSubTypeBuilder.add_shape,void opencv_tflite.VariantSubTypeBuilder.add_shape (ANY),misc\tflite\schema_generated.hpp,"void add_shape(::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> shape) {
    fbb_.AddOffset(VariantSubType::VT_SHAPE, shape);
  }",2885.0,2887.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
3886,308365,add_type,1,opencv_tflite.VariantSubTypeBuilder.add_type,void opencv_tflite.VariantSubTypeBuilder.add_type (ANY),misc\tflite\schema_generated.hpp,"void add_type(opencv_tflite::TensorType type) {
    fbb_.AddElement<int8_t>(VariantSubType::VT_TYPE, static_cast<int8_t>(type), 0);
  }",2888.0,2890.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
3887,439443,convolve,1,cv.dnn.ocl4dnn.OCL4DNNConvSpatial<float>.convolve,"bool cv.dnn.ocl4dnn.OCL4DNNConvSpatial<float>.convolve<> (UMat,UMat,UMat,UMat,int32_t,kernelConfig*)",src\ocl4dnn\src\ocl4dnn_conv_spatial.cpp,"bool OCL4DNNConvSpatial<float>::convolve(const UMat &bottom, UMat &top,
                                         const UMat &weight, const UMat &bias,
                                         int32_t numImages, kernelConfig* config)
{
    ocl::Program program;
    phash_t::iterator it = phash.find(config->kernelName);
    if (it != phash.end())
        program = it->second;
    else
        return false;

    int32_t bias_offset;
    int32_t element_size = use_half_ ? sizeof(short) : sizeof(float);

    if (config->kernelType == KERNEL_TYPE_INTEL_IDLF) {
        if (!swizzleWeight(weight, config->workItem_output[2], false))
            return false;
#if 0
        size_t total_bottom_size = bottom_dim_ * numImages;
        size_t total_kernel_size = kernel_h_ * kernel_w_ * channels_ * M_;
        size_t total_bias_size = M_ * group_;
        size_t total_top_size = top_dim_ * numImages;
#endif
        for (int32_t g = 0; g < group_; ++g) {
            bias_offset = M_ * g;
          ...",850.0,1072.0,1.0,1.0,223.0,83,15,99,36,0,6,8,16,4,0,,0,6,12,6,6,bool
3888,275610,file_level_metadata_graph_2eproto,2,misc\tensorflow\graph.pb.cc.file_level_metadata_graph_2eproto,,misc\tensorflow\graph.pb.cc,static ::PROTOBUF_NAMESPACE_ID::Metadata[3] file_level_metadata_graph_2eproto,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3889,62620,SetCachedSize,1,opencv_caffe.HDF5DataParameter.SetCachedSize,void opencv_caffe.HDF5DataParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void HDF5DataParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",20426.0,20428.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
3890,308385,add_has_rank,1,opencv_tflite.VariantSubTypeBuilder.add_has_rank,void opencv_tflite.VariantSubTypeBuilder.add_has_rank (bool),misc\tflite\schema_generated.hpp,"void add_has_rank(bool has_rank) {
    fbb_.AddElement<uint8_t>(VariantSubType::VT_HAS_RANK, static_cast<uint8_t>(has_rank), 0);
  }",2891.0,2893.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
3891,62630,Clear,1,opencv_caffe.HDF5DataParameter.Clear,void opencv_caffe.HDF5DataParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void HDF5DataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.HDF5DataParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    source_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&batch_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&shuffle_) -
        reinterpret_cast<char*>(&batch_size_)) + sizeof(shuffle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",20430.0,20447.0,1.0,1.0,18.0,19,9,13,6,0,7,3,3,0,0,,0,7,0,0,0,void
3892,308405,VariantSubTypeBuilder,1,opencv_tflite.VariantSubTypeBuilder.VariantSubTypeBuilder,ANY opencv_tflite.VariantSubTypeBuilder.VariantSubTypeBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit VariantSubTypeBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",2894.0,2897.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
3893,308416,Finish,1,opencv_tflite.VariantSubTypeBuilder.Finish,Offset<VariantSubType> opencv_tflite.VariantSubTypeBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<VariantSubType> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<VariantSubType>(end);
    return o;
  }",2898.0,2902.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<VariantSubType>
3894,275662,descriptor_table_graph_2eproto_once,2,misc\tensorflow\graph.pb.cc.descriptor_table_graph_2eproto_once,,misc\tensorflow\graph.pb.cc,ANY descriptor_table_graph_2eproto_once,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3895,275663,descriptor_table_graph_2eproto,2,misc\tensorflow\graph.pb.cc.descriptor_table_graph_2eproto,,misc\tensorflow\graph.pb.cc,ANY descriptor_table_graph_2eproto,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3896,144595,descriptor,1,opencv_caffe.PowerParameter.descriptor,Descriptor opencv_caffe.PowerParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",14476.0,14478.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
3897,308440,CreateVariantSubType,1,opencv_tflite.CreateVariantSubType,"Offset<VariantSubType> opencv_tflite.CreateVariantSubType (ANY,ANY,ANY,bool)",misc\tflite\schema_generated.hpp,"inline ::flatbuffers::Offset<VariantSubType> CreateVariantSubType(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> shape = 0,
    opencv_tflite::TensorType type = opencv_tflite::TensorType_FLOAT32,
    bool has_rank = false) {
  VariantSubTypeBuilder builder_(_fbb);
  builder_.add_shape(shape);
  builder_.add_has_rank(has_rank);
  builder_.add_type(type);
  return builder_.Finish();
}",2905.0,2915.0,1.0,1.0,11.0,4,1,8,5,1,0,1,1,0,0,,0,0,8,4,4,Offset<VariantSubType>
3898,144601,GetDescriptor,1,opencv_caffe.PowerParameter.GetDescriptor,Descriptor opencv_caffe.PowerParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",14479.0,14481.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
3899,62689,_InternalParse,1,opencv_caffe.HDF5DataParameter._InternalParse,"const char* opencv_caffe.HDF5DataParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* HDF5DataParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, ""opencv_caffe.HDF5DataParameter.source"");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 batch_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Intern...",20449.0,20508.0,1.0,10.0,60.0,49,12,56,12,0,5,13,15,0,2,,0,3,4,2,2,const char*
3900,373988,forward,1,cv.dnn.cuda4dnn.MVNOp.forward,"void cv.dnn.cuda4dnn.MVNOp.forward (ANY,ANY,ANY)",src\cuda4dnn\primitives\mvn.hpp,"void forward(
            const std::vector<cv::Ptr<BackendWrapper>>& inputs,
            const std::vector<cv::Ptr<BackendWrapper>>& outputs,
            csl::Workspace& workspace) override
        {
            CV_Assert(inputs.size() == outputs.size());

            for (int i = 0; i < inputs.size(); i++)
            {
                auto input_wrapper = inputs[i].dynamicCast<wrapper_type>();
                auto input = input_wrapper->getView();

                auto output_wrapper = outputs[i].dynamicCast<wrapper_type>();
                auto output = output_wrapper->getSpan();

                auto outer_size = input.size_range(0, split_axis);
                auto inner_size = input.size_range(split_axis, input.rank());
                if (inner_size == 1)
                {
                    kernels::fill<T>(stream, output, 0.0f);
                    return;
                }
                else
                {
                    auto ws_allocator = csl::WorkspaceAlloca...",73.0,118.0,9.0,9.0,46.0,23,6,26,12,0,3,3,4,0,0,,0,3,6,3,3,void
3901,144612,GetReflection,1,opencv_caffe.PowerParameter.GetReflection,Reflection opencv_caffe.PowerParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",14482.0,14484.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
3902,275686,descriptor_table_graph_2eproto_getter,1,descriptor_table_graph_2eproto_getter,DescriptorTable descriptor_table_graph_2eproto_getter (),misc\tensorflow\graph.pb.cc,"const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_graph_2eproto_getter() {
  return &descriptor_table_graph_2eproto;
}",139.0,141.0,25.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,DescriptorTable
3903,29931,InternalSwap,1,opencv_caffe.ParamSpec.InternalSwap,void opencv_caffe.ParamSpec.InternalSwap (ParamSpec*),misc\caffe\opencv-caffe.pb.cc,"void ParamSpec::InternalSwap(ParamSpec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(share_mode_, other->share_mode_);
  swap(lr_mult_, other->lr_mult_);
  swap(decay_mult_, other->decay_mult_);
}",10911.0,10925.0,1.0,1.0,15.0,21,5,22,12,0,10,1,1,0,0,,0,10,2,1,1,void
3904,144623,default_instance,1,opencv_caffe.PowerParameter.default_instance,PowerParameter opencv_caffe.PowerParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const PowerParameter& default_instance() {
    return *internal_default_instance();
  }",14485.0,14487.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,PowerParameter
3905,46320,_InternalSerialize,1,opencv_caffe.BatchNormParameter._InternalSerialize,"uint8_t opencv_caffe.BatchNormParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* BatchNormParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.BatchNormParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool use_global_stats = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_use_global_stats(), target);
  }

  // optional float moving_average_fraction = 2 [default = 0.999];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_moving_average_fraction(), target);
  }

  // optional float eps = 3 [default = 1e-05];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    t...",15555.0,15592.0,1.0,1.0,38.0,47,8,52,10,0,1,6,6,0,0,,0,1,4,2,2,uint8_t
3906,128244,_has_bits_,3,opencv_caffe.LossParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
3907,128245,_cached_size_,3,opencv_caffe.LossParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3908,144630,internal_default_instance,1,opencv_caffe.PowerParameter.internal_default_instance,PowerParameter opencv_caffe.PowerParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const PowerParameter* internal_default_instance() {
    return reinterpret_cast<const PowerParameter*>(
               &_PowerParameter_default_instance_);
  }",14488.0,14491.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,PowerParameter
3909,128247,normalize_,3,opencv_caffe.LossParameter.normalize_,,misc\caffe\opencv-caffe.pb.hpp,normalize_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
3910,128248,normalization_,3,opencv_caffe.LossParameter.normalization_,,misc\caffe\opencv-caffe.pb.hpp,normalization_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
3911,128246,ignore_label_,3,opencv_caffe.LossParameter.ignore_label_,,misc\caffe\opencv-caffe.pb.hpp,ignore_label_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
3912,308471,CreateVariantSubTypeDirect,1,opencv_tflite.CreateVariantSubTypeDirect,"Offset<VariantSubType> opencv_tflite.CreateVariantSubTypeDirect (ANY,ANY*,ANY,bool)",misc\tflite\schema_generated.hpp,"inline ::flatbuffers::Offset<VariantSubType> CreateVariantSubTypeDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int32_t> *shape = nullptr,
    opencv_tflite::TensorType type = opencv_tflite::TensorType_FLOAT32,
    bool has_rank = false) {
  auto shape__ = shape ? _fbb.CreateVector<int32_t>(*shape) : 0;
  return opencv_tflite::CreateVariantSubType(
      _fbb,
      shape__,
      type,
      has_rank);
}",2917.0,2928.0,1.0,1.0,12.0,7,6,10,7,0,1,1,1,0,1,,0,0,8,4,4,Offset<VariantSubType>
3913,275710,versions,1,opencv_tensorflow.GraphDef._Internal.versions,VersionDef opencv_tensorflow.GraphDef._Internal.versions (GraphDef*),misc\tensorflow\graph.pb.cc,"const ::opencv_tensorflow::VersionDef&
GraphDef::_Internal::versions(const GraphDef* msg) {
  return *msg->versions_;
}",155.0,158.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,VersionDef
3914,242945,_has_bits_,3,opencv_onnx.ValueInfoProto._has_bits_,,misc\onnx\opencv-onnx.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
3915,242946,_cached_size_,3,opencv_onnx.ValueInfoProto._cached_size_,,misc\onnx\opencv-onnx.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3916,242947,name_,3,opencv_onnx.ValueInfoProto.name_,,misc\onnx\opencv-onnx.pb.hpp,name_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3917,242948,doc_string_,3,opencv_onnx.ValueInfoProto.doc_string_,,misc\onnx\opencv-onnx.pb.hpp,doc_string_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3918,242949,type_,3,opencv_onnx.ValueInfoProto.type_,,misc\onnx\opencv-onnx.pb.hpp,* type_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
3919,275720,library,1,opencv_tensorflow.GraphDef._Internal.library,FunctionDefLibrary opencv_tensorflow.GraphDef._Internal.library (GraphDef*),misc\tensorflow\graph.pb.cc,"const ::opencv_tensorflow::FunctionDefLibrary&
GraphDef::_Internal::library(const GraphDef* msg) {
  return *msg->library_;
}",159.0,162.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,FunctionDefLibrary
3920,275730,clear_versions,1,opencv_tensorflow.GraphDef.clear_versions,void opencv_tensorflow.GraphDef.clear_versions (),misc\tensorflow\graph.pb.cc,"void GraphDef::clear_versions() {
  if (GetArenaForAllocation() == nullptr && versions_ != nullptr) {
    delete versions_;
  }
  versions_ = nullptr;
}",163.0,168.0,1.0,1.0,6.0,5,5,3,1,0,3,2,2,1,0,,0,3,0,0,0,void
3921,79128,_InternalSerialize,1,opencv_caffe.ReductionParameter._InternalSerialize,"uint8_t opencv_caffe.ReductionParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* ReductionParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.ReductionParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .opencv_caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_operation(), target);
  }

  // optional int32 axis = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_axis(), target);
  }

  // optional float coeff = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
...",25512.0,25544.0,1.0,1.0,33.0,39,8,43,10,0,1,5,5,0,0,,0,1,4,2,2,uint8_t
3922,308505,fbb_,3,opencv_tflite.TensorBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,12,0,1,1,0,0,,0,0,0,0,0,
3923,308506,start_,3,opencv_tflite.TensorBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3924,308507,add_shape,1,opencv_tflite.TensorBuilder.add_shape,void opencv_tflite.TensorBuilder.add_shape (ANY),misc\tflite\schema_generated.hpp,"void add_shape(::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> shape) {
    fbb_.AddOffset(Tensor::VT_SHAPE, shape);
  }",3001.0,3003.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
3925,275748,clear_library,1,opencv_tensorflow.GraphDef.clear_library,void opencv_tensorflow.GraphDef.clear_library (),misc\tensorflow\graph.pb.cc,"void GraphDef::clear_library() {
  if (GetArenaForAllocation() == nullptr && library_ != nullptr) {
    delete library_;
  }
  library_ = nullptr;
}",169.0,174.0,1.0,1.0,6.0,5,5,3,1,0,3,2,2,1,0,,0,3,0,0,0,void
3926,308520,add_type,1,opencv_tflite.TensorBuilder.add_type,void opencv_tflite.TensorBuilder.add_type (ANY),misc\tflite\schema_generated.hpp,"void add_type(opencv_tflite::TensorType type) {
    fbb_.AddElement<int8_t>(Tensor::VT_TYPE, static_cast<int8_t>(type), 0);
  }",3004.0,3006.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
3927,226607,ByteSizeLong,1,opencv_onnx.ValueInfoProto.ByteSizeLong,size_t opencv_onnx.ValueInfoProto.ByteSizeLong (),misc\onnx\opencv-onnx.pb.cc,"size_t ValueInfoProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_onnx.ValueInfoProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string doc_string = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_doc_string());
    }

    // optional .opencv_onnx.TypeProto type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_);
    }

...",1642.0,1675.0,1.0,1.0,34.0,28,10,24,8,0,3,5,8,0,0,,0,3,0,0,0,size_t
3928,357679,~MemoryLockGuard,1,cv.dnn.cuda4dnn.csl.MemoryLockGuard.~MemoryLockGuard,ANY cv.dnn.cuda4dnn.csl.MemoryLockGuard.~MemoryLockGuard (),src\cuda4dnn\csl\memory.hpp,"~MemoryLockGuard() {
            if(ptr != nullptr) {
                /* cudaHostUnregister does not throw for a valid ptr */
                CUDA4DNN_CHECK_CUDA(cudaHostUnregister(ptr));
            }
        }",290.0,295.0,9.0,16.0,6.0,6,2,9,3,0,3,2,2,1,0,,0,3,0,0,0,ANY
3929,30002,GetMetadata,1,opencv_caffe.ParamSpec.GetMetadata,Metadata opencv_caffe.ParamSpec.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata ParamSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[14]);
}",10927.0,10931.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
3930,308540,add_buffer,1,opencv_tflite.TensorBuilder.add_buffer,void opencv_tflite.TensorBuilder.add_buffer (uint32_t),misc\tflite\schema_generated.hpp,"void add_buffer(uint32_t buffer) {
    fbb_.AddElement<uint32_t>(Tensor::VT_BUFFER, buffer, 0);
  }",3007.0,3009.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
3931,357709,ptr,3,cv.dnn.cuda4dnn.csl.MemoryLockGuard.ptr,,src\cuda4dnn\csl\memory.hpp,*ptr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3932,308558,add_name,1,opencv_tflite.TensorBuilder.add_name,void opencv_tflite.TensorBuilder.add_name (ANY),misc\tflite\schema_generated.hpp,"void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Tensor::VT_NAME, name);
  }",3010.0,3012.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
3933,308571,add_quantization,1,opencv_tflite.TensorBuilder.add_quantization,void opencv_tflite.TensorBuilder.add_quantization (ANY),misc\tflite\schema_generated.hpp,"void add_quantization(::flatbuffers::Offset<opencv_tflite::QuantizationParameters> quantization) {
    fbb_.AddOffset(Tensor::VT_QUANTIZATION, quantization);
  }",3013.0,3015.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
3934,308584,add_is_variable,1,opencv_tflite.TensorBuilder.add_is_variable,void opencv_tflite.TensorBuilder.add_is_variable (bool),misc\tflite\schema_generated.hpp,"void add_is_variable(bool is_variable) {
    fbb_.AddElement<uint8_t>(Tensor::VT_IS_VARIABLE, static_cast<uint8_t>(is_variable), 0);
  }",3016.0,3018.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
3935,243055,descriptor,1,opencv_onnx.NodeProto.descriptor,Descriptor opencv_onnx.NodeProto.descriptor (),misc\onnx\opencv-onnx.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",922.0,924.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
3936,144755,GetCachedSize,1,opencv_caffe.PowerParameter.GetCachedSize,int opencv_caffe.PowerParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },14536.0,14536.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
3937,243061,GetDescriptor,1,opencv_onnx.NodeProto.GetDescriptor,Descriptor opencv_onnx.NodeProto.GetDescriptor (),misc\onnx\opencv-onnx.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",925.0,927.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
3938,128375,descriptor,1,opencv_caffe.AccuracyParameter.descriptor,Descriptor opencv_caffe.AccuracyParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",7590.0,7592.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
3939,308604,add_sparsity,1,opencv_tflite.TensorBuilder.add_sparsity,void opencv_tflite.TensorBuilder.add_sparsity (ANY),misc\tflite\schema_generated.hpp,"void add_sparsity(::flatbuffers::Offset<opencv_tflite::SparsityParameters> sparsity) {
    fbb_.AddOffset(Tensor::VT_SPARSITY, sparsity);
  }",3019.0,3021.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
3940,128381,GetDescriptor,1,opencv_caffe.AccuracyParameter.GetDescriptor,Descriptor opencv_caffe.AccuracyParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",7593.0,7595.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
3941,357756,operator =,1,cv.dnn.cuda4dnn.csl.DevicePtr.operator =,DevicePtr cv.dnn.cuda4dnn.csl.DevicePtr.operator = (pointer),src\cuda4dnn\csl\pointer.hpp,DevicePtr operator=(pointer ptr_) noexcept { ptr = ptr_; return *this; },56.0,56.0,30.0,101.0,1.0,2,2,2,2,0,1,1,1,0,0,,0,1,2,1,1,DevicePtr
3942,275838,SharedCtor,1,opencv_tensorflow.GraphDef.SharedCtor,void opencv_tensorflow.GraphDef.SharedCtor (),misc\tensorflow\graph.pb.cc,"inline void GraphDef::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&library_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&library_)) + sizeof(version_));
}",203.0,208.0,1.0,1.0,6.0,16,6,4,2,0,4,1,1,0,0,,0,4,0,0,0,void
3943,243072,GetReflection,1,opencv_onnx.NodeProto.GetReflection,Reflection opencv_onnx.NodeProto.GetReflection (),misc\onnx\opencv-onnx.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",928.0,930.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
3944,357767,get,1,cv.dnn.cuda4dnn.csl.DevicePtr.get,pointer cv.dnn.cuda4dnn.csl.DevicePtr.get (),src\cuda4dnn\csl\pointer.hpp,pointer get() const noexcept { return ptr; },58.0,58.0,30.0,73.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,pointer
3945,128392,GetReflection,1,opencv_caffe.AccuracyParameter.GetReflection,Reflection opencv_caffe.AccuracyParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",7596.0,7598.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
3946,308617,add_shape_signature,1,opencv_tflite.TensorBuilder.add_shape_signature,void opencv_tflite.TensorBuilder.add_shape_signature (ANY),misc\tflite\schema_generated.hpp,"void add_shape_signature(::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> shape_signature) {
    fbb_.AddOffset(Tensor::VT_SHAPE_SIGNATURE, shape_signature);
  }",3022.0,3024.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
3947,243083,default_instance,1,opencv_onnx.NodeProto.default_instance,NodeProto opencv_onnx.NodeProto.default_instance (),misc\onnx\opencv-onnx.pb.hpp,"static const NodeProto& default_instance() {
    return *internal_default_instance();
  }",931.0,933.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,NodeProto
3948,243090,internal_default_instance,1,opencv_onnx.NodeProto.internal_default_instance,NodeProto opencv_onnx.NodeProto.internal_default_instance (),misc\onnx\opencv-onnx.pb.hpp,"static inline const NodeProto* internal_default_instance() {
    return reinterpret_cast<const NodeProto*>(
               &_NodeProto_default_instance_);
  }",934.0,937.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,NodeProto
3949,128403,default_instance,1,opencv_caffe.AccuracyParameter.default_instance,AccuracyParameter opencv_caffe.AccuracyParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const AccuracyParameter& default_instance() {
    return *internal_default_instance();
  }",7599.0,7601.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,AccuracyParameter
3950,46484,ByteSizeLong,1,opencv_caffe.BatchNormParameter.ByteSizeLong,size_t opencv_caffe.BatchNormParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t BatchNormParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.BatchNormParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool use_global_stats = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool scale_bias = 7 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional float moving_average_fraction = 2 [default = 0.999];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float eps = 3 [default = 1e-05];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}",15594.0,15626.0,1.0,1.0,33.0,19,7,16,4,0,2,6,10,0,0,,0,2,0,0,0,size_t
3951,308630,add_has_rank,1,opencv_tflite.TensorBuilder.add_has_rank,void opencv_tflite.TensorBuilder.add_has_rank (bool),misc\tflite\schema_generated.hpp,"void add_has_rank(bool has_rank) {
    fbb_.AddElement<uint8_t>(Tensor::VT_HAS_RANK, static_cast<uint8_t>(has_rank), 0);
  }",3025.0,3027.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
3952,128410,internal_default_instance,1,opencv_caffe.AccuracyParameter.internal_default_instance,AccuracyParameter opencv_caffe.AccuracyParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const AccuracyParameter* internal_default_instance() {
    return reinterpret_cast<const AccuracyParameter*>(
               &_AccuracyParameter_default_instance_);
  }",7602.0,7605.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,AccuracyParameter
3953,79264,ByteSizeLong,1,opencv_caffe.ReductionParameter.ByteSizeLong,size_t opencv_caffe.ReductionParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t ReductionParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.ReductionParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 axis = 2 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_axis());
    }

    // optional .opencv_caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operation());
    }

    // optional float coeff = 3 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(tot...",25546.0,25574.0,1.0,1.0,29.0,23,9,20,7,0,2,5,8,0,0,,0,2,0,0,0,size_t
3954,374177,get_workspace_memory_in_bytes,1,cv.dnn.cuda4dnn.MVNOp.get_workspace_memory_in_bytes,size_t cv.dnn.cuda4dnn.MVNOp.get_workspace_memory_in_bytes (),src\cuda4dnn\primitives\mvn.hpp,std::size_t get_workspace_memory_in_bytes() const noexcept override { return scratch_mem_in_bytes; },120.0,120.0,9.0,108.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,size_t
3955,357795,operator ?,1,cv.dnn.cuda4dnn.csl.DevicePtr.operator ?,"ANY cv.dnn.cuda4dnn.csl.DevicePtr.operator ?<U,std::enable_if<!std::is_const<U>::value,bool>::type=true> ()",src\cuda4dnn\csl\pointer.hpp,explicit operator pointer() const noexcept { return ptr; },122.0,122.0,30.0,87.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,ANY
3956,13732,_InternalSerialize,1,opencv_caffe.DetectionOutputParameter._InternalSerialize,"uint8_t opencv_caffe.DetectionOutputParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* DetectionOutputParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.DetectionOutputParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_classes = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_classes(), target);
  }

  // optional bool share_location = 2 [default = true];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_share_location(), target);
  }

  // optional int32 background_label_id = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    targ...",6447.0,6531.0,1.0,1.0,85.0,103,8,119,11,0,3,13,13,0,2,,0,3,4,2,2,uint8_t
3957,374183,stream,3,cv.dnn.cuda4dnn.MVNOp.stream,,src\cuda4dnn\primitives\mvn.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3958,374184,normalize_variance,3,cv.dnn.cuda4dnn.MVNOp.normalize_variance,,src\cuda4dnn\primitives\mvn.hpp,normalize_variance,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3959,374185,epsilon,3,cv.dnn.cuda4dnn.MVNOp.epsilon,,src\cuda4dnn\primitives\mvn.hpp,epsilon,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3960,308650,add_variant_tensors,1,opencv_tflite.TensorBuilder.add_variant_tensors,void opencv_tflite.TensorBuilder.add_variant_tensors (ANY),misc\tflite\schema_generated.hpp,"void add_variant_tensors(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<opencv_tflite::VariantSubType>>> variant_tensors) {
    fbb_.AddOffset(Tensor::VT_VARIANT_TENSORS, variant_tensors);
  }",3028.0,3030.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
3961,374186,split_axis,3,cv.dnn.cuda4dnn.MVNOp.split_axis,,src\cuda4dnn\primitives\mvn.hpp,split_axis,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
3962,374187,scratch_mem_in_bytes,3,cv.dnn.cuda4dnn.MVNOp.scratch_mem_in_bytes,,src\cuda4dnn\primitives\mvn.hpp,scratch_mem_in_bytes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3963,226732,MergeFrom,1,opencv_onnx.ValueInfoProto.MergeFrom,void opencv_onnx.ValueInfoProto.MergeFrom (ValueInfoProto),misc\onnx\opencv-onnx.pb.cc,"void ValueInfoProto::MergeFrom(const ValueInfoProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_onnx.ValueInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_doc_string(from._internal_doc_string());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_type()->::opencv_onnx::TypeProto::MergeFrom(from._internal_type());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",1690.0,1709.0,1.0,1.0,20.0,19,9,15,4,0,2,5,8,0,1,,0,1,2,1,1,void
3964,289298,GetReflection,1,opencv_tensorflow.OpDef.GetReflection,Reflection opencv_tensorflow.OpDef.GetReflection (),misc\tensorflow\op_def.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",605.0,607.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
3965,357803,operator bool,1,cv.dnn.cuda4dnn.csl.DevicePtr.operator bool,ANY cv.dnn.cuda4dnn.csl.DevicePtr.operator bool (),src\cuda4dnn\csl\pointer.hpp,explicit operator bool() const noexcept { return ptr; },69.0,69.0,30.0,84.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,ANY
3966,357809,operator ++,1,cv.dnn.cuda4dnn.csl.DevicePtr.operator ++,DevicePtr cv.dnn.cuda4dnn.csl.DevicePtr.operator ++ (),src\cuda4dnn\csl\pointer.hpp,"DevicePtr operator++(int) noexcept {
            auto tmp = DevicePtr(*this);
            ptr++;
            return tmp;
        }",76.0,80.0,30.0,9.0,5.0,2,2,1,1,0,1,1,1,0,0,,0,1,2,1,1,DevicePtr
3967,275890,SharedDtor,1,opencv_tensorflow.GraphDef.SharedDtor,void opencv_tensorflow.GraphDef.SharedDtor (),misc\tensorflow\graph.pb.cc,"inline void GraphDef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete library_;
  if (this != internal_default_instance()) delete versions_;
}",217.0,221.0,1.0,1.0,5.0,5,3,2,2,0,4,3,3,2,0,,0,4,0,0,0,void
3968,308663,TensorBuilder,1,opencv_tflite.TensorBuilder.TensorBuilder,ANY opencv_tflite.TensorBuilder.TensorBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit TensorBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",3031.0,3034.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
3969,62911,_InternalSerialize,1,opencv_caffe.HDF5DataParameter._InternalSerialize,"uint8_t opencv_caffe.HDF5DataParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* HDF5DataParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.HDF5DataParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      ""opencv_caffe.HDF5DataParameter.source"");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_source(), target);
  }

  // optional uint32 batch_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_batch_siz...",20510.0,20545.0,1.0,1.0,36.0,46,8,44,10,0,1,5,5,0,0,,0,1,4,2,2,uint8_t
3970,308674,Finish,1,opencv_tflite.TensorBuilder.Finish,Offset<Tensor> opencv_tflite.TensorBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<Tensor> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Tensor>(end);
    return o;
  }",3035.0,3039.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<Tensor>
3971,357833,operator --,1,cv.dnn.cuda4dnn.csl.DevicePtr.operator --,DevicePtr cv.dnn.cuda4dnn.csl.DevicePtr.operator -- (),src\cuda4dnn\csl\pointer.hpp,"DevicePtr operator--(int) noexcept {
            auto tmp = DevicePtr(*this);
            ptr--;
            return tmp;
        }",87.0,91.0,30.0,9.0,5.0,2,2,1,1,0,1,1,1,0,0,,0,1,2,1,1,DevicePtr
3972,374226,NormalizeOp,1,cv.dnn.cuda4dnn.NormalizeOp.NormalizeOp,"ANY cv.dnn.cuda4dnn.NormalizeOp.NormalizeOp<V> (ANY,Mat,NormalizeConfiguration<V>)",src\cuda4dnn\primitives\normalize_bbox.hpp,"NormalizeOp(csl::Stream stream_, const Mat& weights, const NormalizeConfiguration<V>& config)
            : stream(std::move(stream_)), weight{ 1.0 }
        {
            norm_order = config.norm;
            epsilon = config.eps;
            axis_start = config.axis_start;
            axis_end = config.axis_end;

            if (!weights.empty())
            {
                if (weights.total() == 1)
                {
                    CV_Assert(weights.type() == CV_32F);
                    weight = weights.at<float>(0, 0);
                }
                else
                {
                    weightsTensor = csl::makeTensorHeader<T>(weights);
                    csl::copyMatToTensor<T>(weights, weightsTensor, stream);
                }
            }

            std::size_t outer_size = 1;
            for (int i = 0; i < axis_start; i++)
                outer_size *= config.input_shape[i];

            std::size_t inner_size = 1;
            for (int i = axis_end; i < c...",54.0,87.0,9.0,9.0,34.0,28,6,28,13,0,8,5,6,1,0,,0,8,6,3,3,ANY
3973,308698,CreateTensor,1,opencv_tflite.CreateTensor,"Offset<Tensor> opencv_tflite.CreateTensor (ANY,ANY,ANY,uint32_t,ANY,ANY,bool,ANY,ANY,bool,ANY)",misc\tflite\schema_generated.hpp,"inline ::flatbuffers::Offset<Tensor> CreateTensor(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> shape = 0,
    opencv_tflite::TensorType type = opencv_tflite::TensorType_FLOAT32,
    uint32_t buffer = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<opencv_tflite::QuantizationParameters> quantization = 0,
    bool is_variable = false,
    ::flatbuffers::Offset<opencv_tflite::SparsityParameters> sparsity = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> shape_signature = 0,
    bool has_rank = false,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<opencv_tflite::VariantSubType>>> variant_tensors = 0) {
  TensorBuilder builder_(_fbb);
  builder_.add_variant_tensors(variant_tensors);
  builder_.add_shape_signature(shape_signature);
  builder_.add_sparsity(sparsity);
  builder_.add_quantization(quantization);
  builder_.add_name(name);
  builder_.add_buffer(...",3042.0,3066.0,1.0,1.0,25.0,11,1,22,12,1,0,1,1,0,0,,0,0,22,11,11,Offset<Tensor>
3974,275931,SetCachedSize,1,opencv_tensorflow.GraphDef.SetCachedSize,void opencv_tensorflow.GraphDef.SetCachedSize (int),misc\tensorflow\graph.pb.cc,"void GraphDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",229.0,231.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
3975,357857,operator +=,1,cv.dnn.cuda4dnn.csl.DevicePtr.operator +=,DevicePtr cv.dnn.cuda4dnn.csl.DevicePtr.operator += (ANY),src\cuda4dnn\csl\pointer.hpp,"DevicePtr operator+=(std::ptrdiff_t offset) noexcept {
            ptr += offset;
            return *this;
        }",93.0,96.0,30.0,9.0,4.0,2,2,2,2,0,1,1,1,0,0,,0,1,2,1,1,DevicePtr
3976,275941,Clear,1,opencv_tensorflow.GraphDef.Clear,void opencv_tensorflow.GraphDef.Clear (),misc\tensorflow\graph.pb.cc,"void GraphDef::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_tensorflow.GraphDef)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_.Clear();
  if (GetArenaForAllocation() == nullptr && library_ != nullptr) {
    delete library_;
  }
  library_ = nullptr;
  if (GetArenaForAllocation() == nullptr && versions_ != nullptr) {
    delete versions_;
  }
  versions_ = nullptr;
  version_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",233.0,250.0,1.0,1.0,18.0,15,7,11,6,0,8,3,3,2,0,,0,8,0,0,0,void
3977,357868,operator -=,1,cv.dnn.cuda4dnn.csl.DevicePtr.operator -=,DevicePtr cv.dnn.cuda4dnn.csl.DevicePtr.operator -= (ANY),src\cuda4dnn\csl\pointer.hpp,"DevicePtr operator-=(std::ptrdiff_t offset) noexcept {
            ptr -= offset;
            return *this;
        }",98.0,101.0,30.0,9.0,4.0,2,2,2,2,0,1,1,1,0,0,,0,1,2,1,1,DevicePtr
3978,46588,MergeFrom,1,opencv_caffe.BatchNormParameter.MergeFrom,void opencv_caffe.BatchNormParameter.MergeFrom (BatchNormParameter),misc\caffe\opencv-caffe.pb.cc,"void BatchNormParameter::MergeFrom(const BatchNormParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.BatchNormParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      use_global_stats_ = from.use_global_stats_;
    }
    if (cached_has_bits & 0x00000002u) {
      scale_bias_ = from.scale_bias_;
    }
    if (cached_has_bits & 0x00000004u) {
      moving_average_fraction_ = from.moving_average_fraction_;
    }
    if (cached_has_bits & 0x00000008u) {
      eps_ = from.eps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",15641.0,15664.0,1.0,1.0,24.0,25,8,23,9,1,10,6,10,0,0,,0,10,2,1,1,void
3979,226825,InternalSwap,1,opencv_onnx.ValueInfoProto.InternalSwap,void opencv_onnx.ValueInfoProto.InternalSwap (ValueInfoProto*),misc\onnx\opencv-onnx.pb.cc,"void ValueInfoProto::InternalSwap(ValueInfoProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &doc_string_, lhs_arena,
      &other->doc_string_, rhs_arena
  );
  swap(type_, other->type_);
}",1722.0,1739.0,1.0,1.0,18.0,28,5,27,11,0,8,1,1,0,0,,0,8,2,1,1,void
3980,243215,GetCachedSize,1,opencv_onnx.NodeProto.GetCachedSize,int opencv_onnx.NodeProto.GetCachedSize (),misc\onnx\opencv-onnx.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },982.0,982.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
3981,79378,MergeFrom,1,opencv_caffe.ReductionParameter.MergeFrom,void opencv_caffe.ReductionParameter.MergeFrom (ReductionParameter),misc\caffe\opencv-caffe.pb.cc,"void ReductionParameter::MergeFrom(const ReductionParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.ReductionParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      axis_ = from.axis_;
    }
    if (cached_has_bits & 0x00000002u) {
      operation_ = from.operation_;
    }
    if (cached_has_bits & 0x00000004u) {
      coeff_ = from.coeff_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",25589.0,25609.0,1.0,1.0,21.0,22,8,20,8,1,8,5,8,0,0,,0,8,2,1,1,void
3982,128535,GetCachedSize,1,opencv_caffe.AccuracyParameter.GetCachedSize,int opencv_caffe.AccuracyParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },7650.0,7650.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
3983,275991,_InternalParse,1,opencv_tensorflow.GraphDef._InternalParse,"const char* opencv_tensorflow.GraphDef._InternalParse (char*,ANY*)",misc\tensorflow\graph.pb.cc,"const char* GraphDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .opencv_tensorflow.NodeDef node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_node(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .opencv_tensorflow.FunctionDefLibrary library = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_library(), ptr);
    ...",252.0,316.0,1.0,12.0,65.0,49,15,54,7,0,1,18,27,0,0,,0,1,4,2,2,const char*
3984,357913,operator ==,1,cv.dnn.cuda4dnn.csl.DevicePtr.operator ==,"bool cv.dnn.cuda4dnn.csl.DevicePtr.operator == (DevicePtr,DevicePtr)",src\cuda4dnn\csl\pointer.hpp,"friend bool operator==(DevicePtr lhs, DevicePtr rhs) noexcept { return lhs.ptr == rhs.ptr; }",115.0,115.0,30.0,121.0,1.0,3,2,2,2,0,2,1,1,0,0,,0,2,4,2,2,bool
3985,144925,_has_bits_,3,opencv_caffe.PowerParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
3986,144926,_cached_size_,3,opencv_caffe.PowerParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3987,144927,shift_,3,opencv_caffe.PowerParameter.shift_,,misc\caffe\opencv-caffe.pb.hpp,shift_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
3988,144928,power_,3,opencv_caffe.PowerParameter.power_,,misc\caffe\opencv-caffe.pb.hpp,power_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
3989,144929,scale_,3,opencv_caffe.PowerParameter.scale_,,misc\caffe\opencv-caffe.pb.hpp,scale_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
3990,308771,CreateTensorDirect,1,opencv_tflite.CreateTensorDirect,"Offset<Tensor> opencv_tflite.CreateTensorDirect (ANY,ANY*,ANY,uint32_t,char*,ANY,bool,ANY,ANY*,bool,ANY*)",misc\tflite\schema_generated.hpp,"inline ::flatbuffers::Offset<Tensor> CreateTensorDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int32_t> *shape = nullptr,
    opencv_tflite::TensorType type = opencv_tflite::TensorType_FLOAT32,
    uint32_t buffer = 0,
    const char *name = nullptr,
    ::flatbuffers::Offset<opencv_tflite::QuantizationParameters> quantization = 0,
    bool is_variable = false,
    ::flatbuffers::Offset<opencv_tflite::SparsityParameters> sparsity = 0,
    const std::vector<int32_t> *shape_signature = nullptr,
    bool has_rank = false,
    const std::vector<::flatbuffers::Offset<opencv_tflite::VariantSubType>> *variant_tensors = nullptr) {
  auto shape__ = shape ? _fbb.CreateVector<int32_t>(*shape) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto shape_signature__ = shape_signature ? _fbb.CreateVector<int32_t>(*shape_signature) : 0;
  auto variant_tensors__ = variant_tensors ? _fbb.CreateVector<::flatbuffers::Offset<opencv_tflite::VariantSubType>>(*variant_...",3068.0,3096.0,1.0,1.0,29.0,25,7,32,18,0,1,1,1,0,1,,0,0,22,11,11,Offset<Tensor>
3991,357938,operator <,1,cv.dnn.cuda4dnn.csl.DevicePtr.operator <,"bool cv.dnn.cuda4dnn.csl.DevicePtr.operator < (DevicePtr,DevicePtr)",src\cuda4dnn\csl\pointer.hpp,"friend bool operator<(DevicePtr lhs, DevicePtr rhs) noexcept { return lhs.ptr < rhs.ptr; }",117.0,117.0,30.0,119.0,1.0,3,2,2,2,0,2,1,1,0,0,,0,2,4,2,2,bool
3992,318634,Finish,1,opencv_tflite.GeluOptionsBuilder.Finish,Offset<GeluOptions> opencv_tflite.GeluOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<GeluOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GeluOptions>(end);
    return o;
  }",8067.0,8071.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<GeluOptions>
3993,259654,_InternalSerialize,1,opencv_tensorflow.AttrValue_ListValue._InternalSerialize,"uint8_t opencv_tensorflow.AttrValue_ListValue._InternalSerialize (uint8_t*,ANY*)",misc\tensorflow\attr_value.pb.cc,"uint8_t* AttrValue_ListValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_tensorflow.AttrValue.ListValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes s = 2;
  for (int i = 0, n = this->_internal_s_size(); i < n; i++) {
    const auto& s = this->_internal_s(i);
    target = stream->WriteBytes(2, s, target);
  }

  // repeated int64 i = 3 [packed = true];
  {
    int byte_size = _i_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_i(), byte_size, target);
    }
  }

  // repeated float f = 4 [packed = true];
  if (this->_internal_f_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_f(), target);
  }

  // repeated bool b = 5 [packed = true];
  if (this->_internal_b_size() > 0) {
    target = stream->WriteFixedPacked(5, _inter...",384.0,446.0,1.0,1.0,63.0,65,6,75,17,0,3,9,9,0,0,,0,3,4,2,2,uint8_t
3994,63068,ByteSizeLong,1,opencv_caffe.HDF5DataParameter.ByteSizeLong,size_t opencv_caffe.HDF5DataParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t HDF5DataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.HDF5DataParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string source = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source());
    }

    // optional uint32 batch_size = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_batch_size());
    }

    // optional bool shuffle = 3 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}",20547.0,20576.0,1.0,1.0,30.0,23,9,20,7,0,2,5,8,0,0,,0,2,0,0,0,size_t
3995,226909,GetMetadata,1,opencv_onnx.ValueInfoProto.GetMetadata,Metadata opencv_onnx.ValueInfoProto.GetMetadata (),misc\onnx\opencv-onnx.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata ValueInfoProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2donnx_2eproto_getter, &descriptor_table_opencv_2donnx_2eproto_once,
      file_level_metadata_opencv_2donnx_2eproto[1]);
}",1741.0,1745.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
3996,374368,forward,1,cv.dnn.cuda4dnn.NormalizeOp.forward,"void cv.dnn.cuda4dnn.NormalizeOp.forward (ANY,ANY,ANY)",src\cuda4dnn\primitives\normalize_bbox.hpp,"void forward(
            const std::vector<cv::Ptr<BackendWrapper>>& inputs,
            const std::vector<cv::Ptr<BackendWrapper>>& outputs,
            csl::Workspace& workspace) override
        {
            CV_Assert(inputs.size() == 1 && outputs.size() == 1);

            auto input_wrapper = inputs[0].dynamicCast<wrapper_type>();
            auto input = input_wrapper->getView();

            auto output_wrapper = outputs[0].dynamicCast<wrapper_type>();
            auto output = output_wrapper->getSpan();

            std::size_t outer_size = input.size_range(0, axis_start);
            std::size_t mid_size = input.size_range(axis_start, axis_end);
            std::size_t inner_size = input.size_range(axis_end, input.rank());

            auto ws_allocator = csl::WorkspaceAllocator(workspace);
            auto scratch = ws_allocator.get_span<T>();
            kernels::normalize<T>(stream, output, input, outer_size, mid_size, inner_size, norm_order, epsilon, scratch);

      ...",89.0,124.0,9.0,9.0,36.0,30,8,42,20,0,10,2,2,1,0,,0,10,6,3,3,void
3997,46693,InternalSwap,1,opencv_caffe.BatchNormParameter.InternalSwap,void opencv_caffe.BatchNormParameter.InternalSwap (BatchNormParameter*),misc\caffe\opencv-caffe.pb.cc,"void BatchNormParameter::InternalSwap(BatchNormParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BatchNormParameter, scale_bias_)
      + sizeof(BatchNormParameter::scale_bias_)
      - PROTOBUF_FIELD_OFFSET(BatchNormParameter, use_global_stats_)>(
          reinterpret_cast<char*>(&use_global_stats_),
          reinterpret_cast<char*>(&other->use_global_stats_));
  swap(moving_average_fraction_, other->moving_average_fraction_);
  swap(eps_, other->eps_);
}",15677.0,15689.0,1.0,1.0,13.0,23,12,17,10,0,11,1,1,0,0,,0,11,2,1,1,void
3998,357990,swap,1,cv.dnn.cuda4dnn.csl.DevicePtr.swap,"void cv.dnn.cuda4dnn.csl.DevicePtr.swap (DevicePtr,DevicePtr)",src\cuda4dnn\csl\pointer.hpp,"friend void swap(DevicePtr& lhs, DevicePtr& rhs) noexcept {
            using std::swap;
            swap(lhs.ptr, rhs.ptr);
        }",124.0,127.0,23.0,9.0,4.0,2,1,2,2,0,2,1,1,0,0,,0,2,4,2,2,void
3999,79473,InternalSwap,1,opencv_caffe.ReductionParameter.InternalSwap,void opencv_caffe.ReductionParameter.InternalSwap (ReductionParameter*),misc\caffe\opencv-caffe.pb.cc,"void ReductionParameter::InternalSwap(ReductionParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(axis_, other->axis_);
  swap(operation_, other->operation_);
  swap(coeff_, other->coeff_);
}",25622.0,25629.0,1.0,1.0,8.0,9,4,10,6,0,8,1,1,0,0,,0,8,2,1,1,void
4000,308864,fbb_,3,opencv_tflite.Conv2DOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
4001,308865,start_,3,opencv_tflite.Conv2DOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4002,308866,add_padding,1,opencv_tflite.Conv2DOptionsBuilder.add_padding,void opencv_tflite.Conv2DOptionsBuilder.add_padding (ANY),misc\tflite\schema_generated.hpp,"void add_padding(opencv_tflite::Padding padding) {
    fbb_.AddElement<int8_t>(Conv2DOptions::VT_PADDING, static_cast<int8_t>(padding), 0);
  }",3142.0,3144.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4003,358019,ptr,3,cv.dnn.cuda4dnn.csl.DevicePtr.ptr,,src\cuda4dnn\csl\pointer.hpp,ptr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,26,0,1,1,0,0,,0,0,0,0,0,
4004,145035,descriptor,1,opencv_caffe.PythonParameter.descriptor,Descriptor opencv_caffe.PythonParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",14664.0,14666.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
4005,145041,GetDescriptor,1,opencv_caffe.PythonParameter.GetDescriptor,Descriptor opencv_caffe.PythonParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",14667.0,14669.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
4006,79510,GetMetadata,1,opencv_caffe.ReductionParameter.GetMetadata,Metadata opencv_caffe.ReductionParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata ReductionParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[52]);
}",25631.0,25635.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
4007,308886,add_stride_w,1,opencv_tflite.Conv2DOptionsBuilder.add_stride_w,void opencv_tflite.Conv2DOptionsBuilder.add_stride_w (int32_t),misc\tflite\schema_generated.hpp,"void add_stride_w(int32_t stride_w) {
    fbb_.AddElement<int32_t>(Conv2DOptions::VT_STRIDE_W, stride_w, 0);
  }",3145.0,3147.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4008,145052,GetReflection,1,opencv_caffe.PythonParameter.GetReflection,Reflection opencv_caffe.PythonParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",14670.0,14672.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
4009,46756,GetMetadata,1,opencv_caffe.BatchNormParameter.GetMetadata,Metadata opencv_caffe.BatchNormParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata BatchNormParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[21]);
}",15691.0,15695.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
4010,358052,operator =,1,cv.dnn.cuda4dnn.csl.DevicePtr<const void>.operator =,DevicePtr cv.dnn.cuda4dnn.csl.DevicePtr<const void>.operator = (pointer),src\cuda4dnn\csl\pointer.hpp,DevicePtr operator=(pointer ptr_) noexcept { ptr = ptr_; return *this; },154.0,154.0,30.0,101.0,1.0,2,2,2,2,0,1,1,1,0,0,,0,1,2,1,1,DevicePtr
4011,145063,default_instance,1,opencv_caffe.PythonParameter.default_instance,PythonParameter opencv_caffe.PythonParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const PythonParameter& default_instance() {
    return *internal_default_instance();
  }",14673.0,14675.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,PythonParameter
4012,308904,add_stride_h,1,opencv_tflite.Conv2DOptionsBuilder.add_stride_h,void opencv_tflite.Conv2DOptionsBuilder.add_stride_h (int32_t),misc\tflite\schema_generated.hpp,"void add_stride_h(int32_t stride_h) {
    fbb_.AddElement<int32_t>(Conv2DOptions::VT_STRIDE_H, stride_h, 0);
  }",3148.0,3150.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4013,79530,set_has_negative_slope,1,opencv_caffe._Internal.set_has_negative_slope,void opencv_caffe._Internal.set_has_negative_slope (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_negative_slope(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }",25642.0,25644.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
4014,145070,internal_default_instance,1,opencv_caffe.PythonParameter.internal_default_instance,PythonParameter opencv_caffe.PythonParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const PythonParameter* internal_default_instance() {
    return reinterpret_cast<const PythonParameter*>(
               &_PythonParameter_default_instance_);
  }",14676.0,14679.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,PythonParameter
4015,358063,get,1,cv.dnn.cuda4dnn.csl.DevicePtr<const void>.get,pointer cv.dnn.cuda4dnn.csl.DevicePtr<const void>.get (),src\cuda4dnn\csl\pointer.hpp,pointer get() const noexcept { return ptr; },156.0,156.0,30.0,73.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,pointer
4016,358069,operator bool,1,cv.dnn.cuda4dnn.csl.DevicePtr<const void>.operator bool,ANY cv.dnn.cuda4dnn.csl.DevicePtr<const void>.operator bool (),src\cuda4dnn\csl\pointer.hpp,explicit operator bool() const noexcept { return ptr; },158.0,158.0,30.0,84.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,ANY
4017,308922,add_fused_activation_function,1,opencv_tflite.Conv2DOptionsBuilder.add_fused_activation_function,void opencv_tflite.Conv2DOptionsBuilder.add_fused_activation_function (ANY),misc\tflite\schema_generated.hpp,"void add_fused_activation_function(opencv_tflite::ActivationFunctionType fused_activation_function) {
    fbb_.AddElement<int8_t>(Conv2DOptions::VT_FUSED_ACTIVATION_FUNCTION, static_cast<int8_t>(fused_activation_function), 0);
  }",3151.0,3153.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4018,358075,operator ==,1,cv.dnn.cuda4dnn.csl.DevicePtr<const void>.operator ==,"bool cv.dnn.cuda4dnn.csl.DevicePtr<const void>.operator == (DevicePtr,DevicePtr)",src\cuda4dnn\csl\pointer.hpp,"friend bool operator==(DevicePtr lhs, DevicePtr rhs) noexcept { return lhs.ptr == rhs.ptr; }",160.0,160.0,30.0,121.0,1.0,3,2,2,2,0,2,1,1,0,0,,0,2,4,2,2,bool
4019,128705,_has_bits_,3,opencv_caffe.AccuracyParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
4020,128706,_cached_size_,3,opencv_caffe.AccuracyParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
4021,128707,ignore_label_,3,opencv_caffe.AccuracyParameter.ignore_label_,,misc\caffe\opencv-caffe.pb.hpp,ignore_label_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
4022,128708,top_k_,3,opencv_caffe.AccuracyParameter.top_k_,,misc\caffe\opencv-caffe.pb.hpp,top_k_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
4023,128709,axis_,3,opencv_caffe.AccuracyParameter.axis_,,misc\caffe\opencv-caffe.pb.hpp,axis_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
4024,46787,set_has_num_axes,1,opencv_caffe._Internal.set_has_num_axes,void opencv_caffe._Internal.set_has_num_axes (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_num_axes(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }",26170.0,26172.0,3.0,3.0,3.0,2,2,1,1,3,0,1,1,0,0,,0,0,2,1,1,void
4025,63182,MergeFrom,1,opencv_caffe.HDF5DataParameter.MergeFrom,void opencv_caffe.HDF5DataParameter.MergeFrom (HDF5DataParameter),misc\caffe\opencv-caffe.pb.cc,"void HDF5DataParameter::MergeFrom(const HDF5DataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.HDF5DataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_source(from._internal_source());
    }
    if (cached_has_bits & 0x00000002u) {
      batch_size_ = from.batch_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      shuffle_ = from.shuffle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",20591.0,20611.0,1.0,1.0,21.0,21,8,19,7,2,6,5,8,0,0,,0,6,2,1,1,void
4026,308942,add_dilation_w_factor,1,opencv_tflite.Conv2DOptionsBuilder.add_dilation_w_factor,void opencv_tflite.Conv2DOptionsBuilder.add_dilation_w_factor (int32_t),misc\tflite\schema_generated.hpp,"void add_dilation_w_factor(int32_t dilation_w_factor) {
    fbb_.AddElement<int32_t>(Conv2DOptions::VT_DILATION_W_FACTOR, dilation_w_factor, 1);
  }",3154.0,3156.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4027,358100,operator <,1,cv.dnn.cuda4dnn.csl.DevicePtr<const void>.operator <,"bool cv.dnn.cuda4dnn.csl.DevicePtr<const void>.operator < (DevicePtr,DevicePtr)",src\cuda4dnn\csl\pointer.hpp,"friend bool operator<(DevicePtr lhs, DevicePtr rhs) noexcept { return lhs.ptr < rhs.ptr; }",162.0,162.0,30.0,119.0,1.0,3,2,2,2,0,2,1,1,0,0,,0,2,4,2,2,bool
4028,46814,filler,1,opencv_caffe.BiasParameter._Internal.filler,FillerParameter opencv_caffe.BiasParameter._Internal.filler (BiasParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::FillerParameter&
BiasParameter::_Internal::filler(const BiasParameter* msg) {
  return *msg->filler_;
}",15714.0,15717.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,FillerParameter
4029,308960,add_dilation_h_factor,1,opencv_tflite.Conv2DOptionsBuilder.add_dilation_h_factor,void opencv_tflite.Conv2DOptionsBuilder.add_dilation_h_factor (int32_t),misc\tflite\schema_generated.hpp,"void add_dilation_h_factor(int32_t dilation_h_factor) {
    fbb_.AddElement<int32_t>(Conv2DOptions::VT_DILATION_H_FACTOR, dilation_h_factor, 1);
  }",3157.0,3159.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4030,308978,Conv2DOptionsBuilder,1,opencv_tflite.Conv2DOptionsBuilder.Conv2DOptionsBuilder,ANY opencv_tflite.Conv2DOptionsBuilder.Conv2DOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit Conv2DOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",3160.0,3163.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
4031,79605,SharedCtor,1,opencv_caffe.ReLUParameter.SharedCtor,void opencv_caffe.ReLUParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void ReLUParameter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&negative_slope_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&engine_) -
    reinterpret_cast<char*>(&negative_slope_)) + sizeof(engine_));
}",25669.0,25674.0,1.0,1.0,6.0,16,6,4,2,0,4,1,1,0,0,,0,4,0,0,0,void
4032,308989,Finish,1,opencv_tflite.Conv2DOptionsBuilder.Finish,Offset<Conv2DOptions> opencv_tflite.Conv2DOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<Conv2DOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Conv2DOptions>(end);
    return o;
  }",3164.0,3168.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<Conv2DOptions>
4033,374527,get_workspace_memory_in_bytes,1,cv.dnn.cuda4dnn.NormalizeOp.get_workspace_memory_in_bytes,size_t cv.dnn.cuda4dnn.NormalizeOp.get_workspace_memory_in_bytes (),src\cuda4dnn\primitives\normalize_bbox.hpp,std::size_t get_workspace_memory_in_bytes() const noexcept override { return scratch_mem_in_bytes; },126.0,126.0,9.0,108.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,size_t
4034,358146,operator ?,1,cv.dnn.cuda4dnn.csl.DevicePtr<const void>.operator ?,ANY cv.dnn.cuda4dnn.csl.DevicePtr<const void>.operator ? (),src\cuda4dnn\csl\pointer.hpp,explicit operator pointer() const noexcept { return ptr; },168.0,168.0,30.0,87.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,ANY
4035,374533,stream,3,cv.dnn.cuda4dnn.NormalizeOp.stream,,src\cuda4dnn\primitives\normalize_bbox.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4036,374535,weight,3,cv.dnn.cuda4dnn.NormalizeOp.weight,,src\cuda4dnn\primitives\normalize_bbox.hpp,weight,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
4037,276232,_InternalSerialize,1,opencv_tensorflow.GraphDef._InternalSerialize,"uint8_t opencv_tensorflow.GraphDef._InternalSerialize (uint8_t*,ANY*)",misc\tensorflow\graph.pb.cc,"uint8_t* GraphDef::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_tensorflow.GraphDef)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opencv_tensorflow.NodeDef node = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_node_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_node(i), target, stream);
  }

  // .opencv_tensorflow.FunctionDefLibrary library = 2;
  if (this->_internal_has_library()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::library(this), target, stream);
  }

  // int32 version = 3 [deprecated = true];
  if (this->_internal_version() != 0) {
    target = s...",318.0,360.0,1.0,1.0,43.0,50,7,56,12,0,2,6,6,0,2,,0,2,4,2,2,uint8_t
4038,374536,epsilon,3,cv.dnn.cuda4dnn.NormalizeOp.epsilon,,src\cuda4dnn\primitives\normalize_bbox.hpp,epsilon,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4039,374538,axis_start,3,cv.dnn.cuda4dnn.NormalizeOp.axis_start,,src\cuda4dnn\primitives\normalize_bbox.hpp,axis_start,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
4040,374539,axis_end,3,cv.dnn.cuda4dnn.NormalizeOp.axis_end,,src\cuda4dnn\primitives\normalize_bbox.hpp,axis_end,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
4041,374540,scratch_mem_in_bytes,3,cv.dnn.cuda4dnn.NormalizeOp.scratch_mem_in_bytes,,src\cuda4dnn\primitives\normalize_bbox.hpp,scratch_mem_in_bytes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4042,358152,DevicePtr,1,cv.dnn.cuda4dnn.csl.DevicePtr<const void>.operator cv.dnn.cuda4dnn.csl.DevicePtr<#10000>,"ANY cv.dnn.cuda4dnn.csl.DevicePtr<const void>.operator cv.dnn.cuda4dnn.csl.DevicePtr<#10000><T,std::enable_if<std::is_const<T>::value,bool>::type=true> ()",src\cuda4dnn\csl\pointer.hpp,"explicit operator DevicePtr<T>() const noexcept {
            return static_cast<T*>(ptr);
        }",172.0,174.0,30.0,9.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,ANY
4043,374537,norm_order,3,cv.dnn.cuda4dnn.NormalizeOp.norm_order,,src\cuda4dnn\primitives\normalize_bbox.hpp,norm_order,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4044,358160,swap,1,cv.dnn.cuda4dnn.csl.DevicePtr<const void>.swap,"void cv.dnn.cuda4dnn.csl.DevicePtr<const void>.swap (DevicePtr,DevicePtr)",src\cuda4dnn\csl\pointer.hpp,"friend void swap(DevicePtr& lhs, DevicePtr& rhs) noexcept {
            using std::swap;
            swap(lhs.ptr, rhs.ptr);
        }",176.0,179.0,23.0,9.0,4.0,2,1,2,2,0,2,1,1,0,0,,0,2,4,2,2,void
4045,14096,ByteSizeLong,1,opencv_caffe.DetectionOutputParameter.ByteSizeLong,size_t opencv_caffe.DetectionOutputParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t DetectionOutputParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.DetectionOutputParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .opencv_caffe.NonMaximumSuppressionParameter nms_param = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nms_param_);
    }

    // optional .opencv_caffe.SaveOutputParameter save_output_param = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *save_output_param_);
    }

    // optional uint32 num_classes = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::intern...",6533.0,6607.0,1.0,1.0,75.0,62,10,51,9,0,4,14,25,0,0,,0,4,0,0,0,size_t
4046,227114,SharedCtor,1,opencv_onnx.NodeProto.SharedCtor,void opencv_onnx.NodeProto.SharedCtor (),misc\onnx\opencv-onnx.pb.cc,"inline void NodeProto::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
op_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  op_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
doc_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  doc_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlrea...",1820.0,1837.0,1.0,1.0,18.0,16,2,12,6,0,4,1,1,0,0,,0,4,0,0,0,void
4047,145195,GetCachedSize,1,opencv_caffe.PythonParameter.GetCachedSize,int opencv_caffe.PythonParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },14724.0,14724.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
4048,374572,CONSTANT,3,cv.dnn.cuda4dnn.PaddingType.CONSTANT,,src\cuda4dnn\primitives\padding.hpp,CONSTANT,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4049,63277,InternalSwap,1,opencv_caffe.HDF5DataParameter.InternalSwap,void opencv_caffe.HDF5DataParameter.InternalSwap (HDF5DataParameter*),misc\caffe\opencv-caffe.pb.cc,"void HDF5DataParameter::InternalSwap(HDF5DataParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &source_, lhs_arena,
      &other->source_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HDF5DataParameter, shuffle_)
      + sizeof(HDF5DataParameter::shuffle_)
      - PROTOBUF_FIELD_OFFSET(HDF5DataParameter, batch_size_)>(
          reinterpret_cast<char*>(&batch_size_),
          reinterpret_cast<char*>(&other->batch_size_));
}",20624.0,20641.0,1.0,1.0,18.0,33,13,25,12,0,9,1,1,0,0,,0,9,2,1,1,void
4050,358189,ptr,3,cv.dnn.cuda4dnn.csl.DevicePtr<void>.ptr,,src\cuda4dnn\csl\pointer.hpp,ptr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
4051,128815,descriptor,1,opencv_caffe.ArgMaxParameter.descriptor,Descriptor opencv_caffe.ArgMaxParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",7778.0,7780.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
4052,46896,SharedCtor,1,opencv_caffe.BiasParameter.SharedCtor,void opencv_caffe.BiasParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void BiasParameter::SharedCtor() {
filler_ = nullptr;
axis_ = 1;
num_axes_ = 1;
}",15742.0,15746.0,1.0,1.0,5.0,3,1,3,3,0,3,1,1,0,0,,0,3,0,0,0,void
4053,128821,GetDescriptor,1,opencv_caffe.ArgMaxParameter.GetDescriptor,Descriptor opencv_caffe.ArgMaxParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",7781.0,7783.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
4054,374584,forward,1,cv.dnn.cuda4dnn.PaddingOp.forward,"void cv.dnn.cuda4dnn.PaddingOp.forward (ANY,ANY,ANY)",src\cuda4dnn\primitives\padding.hpp,"void forward(
            const std::vector<cv::Ptr<BackendWrapper>>& inputs,
            const std::vector<cv::Ptr<BackendWrapper>>& outputs,
            csl::Workspace& workspace) override
        {
            CV_Assert(inputs.size() == 1 && outputs.size() == 1);

            auto input_wrapper = inputs[0].dynamicCast<wrapper_type>();
            auto input = input_wrapper->getView();

            auto output_wrapper = outputs[0].dynamicCast<wrapper_type>();
            auto output = output_wrapper->getSpan();

            /* suppose we require padding for the first spatial axis (H in NCHW or D in NCDHW)
             *
             * there could be a case where the batch axis, channel axis, and the first spatial axis are all one
             * this would result in effective rank being less than the number of axes requiring padding
             */
            /* the effective rank of the input may be smaller than the effective rank of the output but the converse is never true
    ...",42.0,106.0,9.0,9.0,65.0,52,12,58,18,0,12,6,10,5,0,,0,12,6,3,3,void
4055,358207,operator =,1,cv.dnn.cuda4dnn.csl.DevicePtr<void>.operator =,DevicePtr cv.dnn.cuda4dnn.csl.DevicePtr<void>.operator = (pointer),src\cuda4dnn\csl\pointer.hpp,DevicePtr operator=(pointer ptr_) noexcept { ptr = ptr_; return *this; },206.0,206.0,30.0,101.0,1.0,2,2,2,2,0,1,1,1,0,0,,0,1,2,1,1,DevicePtr
4056,128832,GetReflection,1,opencv_caffe.ArgMaxParameter.GetReflection,Reflection opencv_caffe.ArgMaxParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",7784.0,7786.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
4057,79684,SetCachedSize,1,opencv_caffe.ReLUParameter.SetCachedSize,void opencv_caffe.ReLUParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void ReLUParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",25693.0,25695.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
4058,45146,set_has_concat_dim,1,opencv_caffe._Internal.set_has_concat_dim,void opencv_caffe._Internal.set_has_concat_dim (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_concat_dim(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }",30900.0,30902.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
4059,309065,fbb_,3,opencv_tflite.Conv3DOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
4060,358218,get,1,cv.dnn.cuda4dnn.csl.DevicePtr<void>.get,pointer cv.dnn.cuda4dnn.csl.DevicePtr<void>.get (),src\cuda4dnn\csl\pointer.hpp,pointer get() const noexcept { return ptr; },208.0,208.0,30.0,73.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,pointer
4061,309066,start_,3,opencv_tflite.Conv3DOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4062,259915,ByteSizeLong,1,opencv_tensorflow.AttrValue_ListValue.ByteSizeLong,size_t opencv_tensorflow.AttrValue_ListValue.ByteSizeLong (),misc\tensorflow\attr_value.pb.cc,"size_t AttrValue_ListValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_tensorflow.AttrValue.ListValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes s = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(s_.size());
  for (int i = 0, n = s_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      s_.Get(i));
  }

  // repeated int64 i = 3 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->i_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _i_cached_byte_size_.store(cached_si...",448.0,536.0,1.0,1.0,89.0,103,10,98,16,0,9,9,9,2,0,,0,9,0,0,0,size_t
4063,128843,default_instance,1,opencv_caffe.ArgMaxParameter.default_instance,ArgMaxParameter opencv_caffe.ArgMaxParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const ArgMaxParameter& default_instance() {
    return *internal_default_instance();
  }",7787.0,7789.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,ArgMaxParameter
4064,79694,Clear,1,opencv_caffe.ReLUParameter.Clear,void opencv_caffe.ReLUParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void ReLUParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.ReLUParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&negative_slope_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&engine_) -
        reinterpret_cast<char*>(&negative_slope_)) + sizeof(engine_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",25697.0,25711.0,1.0,1.0,15.0,17,9,11,5,0,6,2,2,0,0,,0,6,0,0,0,void
4065,46924,SharedDtor,1,opencv_caffe.BiasParameter.SharedDtor,void opencv_caffe.BiasParameter.SharedDtor (),misc\caffe\opencv-caffe.pb.cc,"inline void BiasParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete filler_;
}",15755.0,15758.0,1.0,1.0,4.0,3,3,1,1,0,2,2,2,1,0,,0,2,0,0,0,void
4066,358224,DevicePtr,1,cv.dnn.cuda4dnn.csl.DevicePtr<void>.operator cv.dnn.cuda4dnn.csl.DevicePtr<const void>,ANY cv.dnn.cuda4dnn.csl.DevicePtr<void>.operator cv.dnn.cuda4dnn.csl.DevicePtr<const void> (),src\cuda4dnn\csl\pointer.hpp,operator DevicePtr<const void>() const noexcept { return DevicePtr<const void>{ptr}; },210.0,210.0,30.0,115.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,ANY
4067,309067,add_padding,1,opencv_tflite.Conv3DOptionsBuilder.add_padding,void opencv_tflite.Conv3DOptionsBuilder.add_padding (ANY),misc\tflite\schema_generated.hpp,"void add_padding(opencv_tflite::Padding padding) {
    fbb_.AddElement<int8_t>(Conv3DOptions::VT_PADDING, static_cast<int8_t>(padding), 0);
  }",3243.0,3245.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4068,128850,internal_default_instance,1,opencv_caffe.ArgMaxParameter.internal_default_instance,ArgMaxParameter opencv_caffe.ArgMaxParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const ArgMaxParameter* internal_default_instance() {
    return reinterpret_cast<const ArgMaxParameter*>(
               &_ArgMaxParameter_default_instance_);
  }",7790.0,7793.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,ArgMaxParameter
4069,390996,setFusedNode,1,cv.dnn.Subgraph.setFusedNode,"void cv.dnn.Subgraph.setFusedNode (ANY,int,int,int,int,int,int)",src\graph_simplifier.cpp,"void Subgraph::setFusedNode(const std::string& op, const std::vector<int>& inputs_)
{
    fusedNodeInputs = inputs_;
    fusedNodeOp = op;
}",54.0,58.0,1.0,1.0,5.0,20,11,21,12,0,1,2,2,0,0,,0,1,4,2,2,void
4070,358232,operator bool,1,cv.dnn.cuda4dnn.csl.DevicePtr<void>.operator bool,ANY cv.dnn.cuda4dnn.csl.DevicePtr<void>.operator bool (),src\cuda4dnn\csl\pointer.hpp,explicit operator bool() const noexcept { return ptr; },212.0,212.0,30.0,84.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,ANY
4071,358238,operator ==,1,cv.dnn.cuda4dnn.csl.DevicePtr<void>.operator ==,"bool cv.dnn.cuda4dnn.csl.DevicePtr<void>.operator == (DevicePtr,DevicePtr)",src\cuda4dnn\csl\pointer.hpp,"friend bool operator==(DevicePtr lhs, DevicePtr rhs) noexcept { return lhs.ptr == rhs.ptr; }",214.0,214.0,30.0,121.0,1.0,3,2,2,2,0,2,1,1,0,0,,0,2,4,2,2,bool
4072,309087,add_stride_d,1,opencv_tflite.Conv3DOptionsBuilder.add_stride_d,void opencv_tflite.Conv3DOptionsBuilder.add_stride_d (int32_t),misc\tflite\schema_generated.hpp,"void add_stride_d(int32_t stride_d) {
    fbb_.AddElement<int32_t>(Conv3DOptions::VT_STRIDE_D, stride_d, 0);
  }",3246.0,3248.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4073,227177,SharedDtor,1,opencv_onnx.NodeProto.SharedDtor,void opencv_onnx.NodeProto.SharedDtor (),misc\onnx\opencv-onnx.pb.cc,"inline void NodeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  op_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doc_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}",1846.0,1852.0,1.0,1.0,7.0,17,3,12,6,0,4,1,1,0,0,,0,4,0,0,0,void
4074,46958,SetCachedSize,1,opencv_caffe.BiasParameter.SetCachedSize,void opencv_caffe.BiasParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void BiasParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",15766.0,15768.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
4075,309105,add_stride_w,1,opencv_tflite.Conv3DOptionsBuilder.add_stride_w,void opencv_tflite.Conv3DOptionsBuilder.add_stride_w (int32_t),misc\tflite\schema_generated.hpp,"void add_stride_w(int32_t stride_w) {
    fbb_.AddElement<int32_t>(Conv3DOptions::VT_STRIDE_W, stride_w, 0);
  }",3249.0,3251.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4076,358263,operator <,1,cv.dnn.cuda4dnn.csl.DevicePtr<void>.operator <,"bool cv.dnn.cuda4dnn.csl.DevicePtr<void>.operator < (DevicePtr,DevicePtr)",src\cuda4dnn\csl\pointer.hpp,"friend bool operator<(DevicePtr lhs, DevicePtr rhs) noexcept { return lhs.ptr < rhs.ptr; }",216.0,216.0,30.0,119.0,1.0,3,2,2,2,0,2,1,1,0,0,,0,2,4,2,2,bool
4077,46968,Clear,1,opencv_caffe.BiasParameter.Clear,void opencv_caffe.BiasParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void BiasParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.BiasParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(filler_ != nullptr);
      filler_->Clear();
    }
    axis_ = 1;
    num_axes_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",15770.0,15787.0,1.0,1.0,18.0,12,7,12,6,0,6,3,4,0,0,,0,6,0,0,0,void
4078,79744,_InternalParse,1,opencv_caffe.ReLUParameter._InternalParse,"const char* opencv_caffe.ReLUParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* ReLUParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float negative_slope = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_negative_slope(&has_bits);
          negative_slope_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .opencv_caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(pt...",25713.0,25764.0,1.0,10.0,52.0,40,14,44,13,0,4,12,16,1,2,,0,3,4,2,2,const char*
4079,309123,add_stride_h,1,opencv_tflite.Conv3DOptionsBuilder.add_stride_h,void opencv_tflite.Conv3DOptionsBuilder.add_stride_h (int32_t),misc\tflite\schema_generated.hpp,"void add_stride_h(int32_t stride_h) {
    fbb_.AddElement<int32_t>(Conv3DOptions::VT_STRIDE_H, stride_h, 0);
  }",3252.0,3254.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4080,63364,GetMetadata,1,opencv_caffe.HDF5DataParameter.GetMetadata,Metadata opencv_caffe.HDF5DataParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata HDF5DataParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[36]);
}",20643.0,20647.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
4081,309141,add_fused_activation_function,1,opencv_tflite.Conv3DOptionsBuilder.add_fused_activation_function,void opencv_tflite.Conv3DOptionsBuilder.add_fused_activation_function (ANY),misc\tflite\schema_generated.hpp,"void add_fused_activation_function(opencv_tflite::ActivationFunctionType fused_activation_function) {
    fbb_.AddElement<int8_t>(Conv3DOptions::VT_FUSED_ACTIVATION_FUNCTION, static_cast<int8_t>(fused_activation_function), 0);
  }",3255.0,3257.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4082,358309,operator ?,1,cv.dnn.cuda4dnn.csl.DevicePtr<void>.operator ?,ANY cv.dnn.cuda4dnn.csl.DevicePtr<void>.operator ? (),src\cuda4dnn\csl\pointer.hpp,explicit operator pointer() const noexcept { return ptr; },222.0,222.0,30.0,87.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,ANY
4083,47016,_InternalParse,1,opencv_caffe.BiasParameter._InternalParse,"const char* opencv_caffe.BiasParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* BiasParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 axis = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_axis(&has_bits);
          axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_axes = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_num_axes(&has_bits);
          num_axes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto h...",15789.0,15844.0,1.0,10.0,56.0,45,12,49,11,0,5,13,15,0,2,,0,3,4,2,2,const char*
4084,309161,add_dilation_d_factor,1,opencv_tflite.Conv3DOptionsBuilder.add_dilation_d_factor,void opencv_tflite.Conv3DOptionsBuilder.add_dilation_d_factor (int32_t),misc\tflite\schema_generated.hpp,"void add_dilation_d_factor(int32_t dilation_d_factor) {
    fbb_.AddElement<int32_t>(Conv3DOptions::VT_DILATION_D_FACTOR, dilation_d_factor, 1);
  }",3258.0,3260.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4085,391082,getInputNodeId,1,cv.dnn.Subgraph.getInputNodeId,"int cv.dnn.Subgraph.getInputNodeId (Ptr<ImportGraphWrapper>,Ptr<ImportNodeWrapper>,int)",src\graph_simplifier.cpp,"int Subgraph::getInputNodeId(const Ptr<ImportGraphWrapper>& net,
                             const Ptr<ImportNodeWrapper>& node,
                             int inpId)
{
    CV_Assert(inpId < node->getNumInputs());
    std::string name = node->getInputName(inpId);
    const int numNodes = net->getNumNodes();
    for (int i = 0; i < numNodes; ++i)
    {
        const int numOutputs = net->getNumOutputs(i);
        for (int j = 0; j < numOutputs; j++)
        {
            if (net->getOutputName(i, j) == name)
                return i;
        }
    }
    CV_Error(Error::StsParseError, ""Input node with name "" + name + "" not found"");
}",60.0,77.0,1.0,1.0,18.0,17,6,23,9,5,0,4,7,0,0,,0,0,6,3,3,int
4086,358315,DevicePtr,1,cv.dnn.cuda4dnn.csl.DevicePtr<void>.operator cv.dnn.cuda4dnn.csl.DevicePtr<#10000>,ANY cv.dnn.cuda4dnn.csl.DevicePtr<void>.operator cv.dnn.cuda4dnn.csl.DevicePtr<#10000><T> (),src\cuda4dnn\csl\pointer.hpp,"explicit operator DevicePtr<T>() const noexcept {
            return DevicePtr<T>(static_cast<T*>(ptr));
        }",226.0,228.0,30.0,9.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,ANY
4087,227248,SetCachedSize,1,opencv_onnx.NodeProto.SetCachedSize,void opencv_onnx.NodeProto.SetCachedSize (int),misc\onnx\opencv-onnx.pb.cc,"void NodeProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",1860.0,1862.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
4088,358324,swap,1,cv.dnn.cuda4dnn.csl.DevicePtr<void>.swap,"void cv.dnn.cuda4dnn.csl.DevicePtr<void>.swap (DevicePtr,DevicePtr)",src\cuda4dnn\csl\pointer.hpp,"friend void swap(DevicePtr& lhs, DevicePtr& rhs) noexcept {
            using std::swap;
            swap(lhs.ptr, rhs.ptr);
        }",230.0,233.0,23.0,9.0,4.0,2,1,2,2,0,2,1,1,0,0,,0,2,4,2,2,void
4089,227258,Clear,1,opencv_onnx.NodeProto.Clear,void opencv_onnx.NodeProto.Clear (),misc\onnx\opencv-onnx.pb.cc,"void NodeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_onnx.NodeProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_.Clear();
  output_.Clear();
  attribute_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      op_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      doc_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      domain_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",1864.0,1890.0,1.0,1.0,27.0,18,5,18,10,0,9,6,10,0,0,,0,9,0,0,0,void
4090,309179,add_dilation_w_factor,1,opencv_tflite.Conv3DOptionsBuilder.add_dilation_w_factor,void opencv_tflite.Conv3DOptionsBuilder.add_dilation_w_factor (int32_t),misc\tflite\schema_generated.hpp,"void add_dilation_w_factor(int32_t dilation_w_factor) {
    fbb_.AddElement<int32_t>(Conv3DOptions::VT_DILATION_W_FACTOR, dilation_w_factor, 1);
  }",3261.0,3263.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4091,276418,ByteSizeLong,1,opencv_tensorflow.GraphDef.ByteSizeLong,size_t opencv_tensorflow.GraphDef.ByteSizeLong (),misc\tensorflow\graph.pb.cc,"size_t GraphDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_tensorflow.GraphDef)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opencv_tensorflow.NodeDef node = 1;
  total_size += 1UL * this->_internal_node_size();
  for (const auto& msg : this->node_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .opencv_tensorflow.FunctionDefLibrary library = 2;
  if (this->_internal_has_library()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *library_);
  }

  // .opencv_tensorflow.VersionDef versions = 4;
  if (this->_internal_has_versions()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *versions_);
  }

  // int32 version = 3 [deprecated = true];
  if (this->_internal_v...",362.0,397.0,1.0,1.0,36.0,33,10,25,9,0,4,5,5,1,0,,0,4,0,0,0,size_t
4092,309197,add_dilation_h_factor,1,opencv_tflite.Conv3DOptionsBuilder.add_dilation_h_factor,void opencv_tflite.Conv3DOptionsBuilder.add_dilation_h_factor (int32_t),misc\tflite\schema_generated.hpp,"void add_dilation_h_factor(int32_t dilation_h_factor) {
    fbb_.AddElement<int32_t>(Conv3DOptions::VT_DILATION_H_FACTOR, dilation_h_factor, 1);
  }",3264.0,3266.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4093,128975,GetCachedSize,1,opencv_caffe.ArgMaxParameter.GetCachedSize,int opencv_caffe.ArgMaxParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },7838.0,7838.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
4094,112591,descriptor,1,opencv_caffe.BlobShape.descriptor,Descriptor opencv_caffe.BlobShape.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",1070.0,1072.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
4095,358353,ptr,3,cv.dnn.cuda4dnn.csl.DevicePtr<void>.ptr,,src\cuda4dnn\csl\pointer.hpp,ptr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
4096,112597,GetDescriptor,1,opencv_caffe.BlobShape.GetDescriptor,Descriptor opencv_caffe.BlobShape.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",1073.0,1075.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
4097,63452,SharedCtor,1,opencv_caffe.HDF5OutputParameter.SharedCtor,void opencv_caffe.HDF5OutputParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void HDF5OutputParameter::SharedCtor() {
file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}",20683.0,20688.0,1.0,1.0,6.0,4,2,3,3,0,1,1,1,0,0,,0,1,0,0,0,void
4098,309215,Conv3DOptionsBuilder,1,opencv_tflite.Conv3DOptionsBuilder.Conv3DOptionsBuilder,ANY opencv_tflite.Conv3DOptionsBuilder.Conv3DOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit Conv3DOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",3267.0,3270.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
4099,112608,GetReflection,1,opencv_caffe.BlobShape.GetReflection,Reflection opencv_caffe.BlobShape.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",1076.0,1078.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
4100,243690,_has_bits_,3,opencv_onnx.NodeProto._has_bits_,,misc\onnx\opencv-onnx.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
4101,243691,_cached_size_,3,opencv_onnx.NodeProto._cached_size_,,misc\onnx\opencv-onnx.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
4102,243692,input_,3,opencv_onnx.NodeProto.input_,,misc\onnx\opencv-onnx.pb.hpp,input_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
4103,243693,output_,3,opencv_onnx.NodeProto.output_,,misc\onnx\opencv-onnx.pb.hpp,output_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
4104,243694,attribute_,3,opencv_onnx.NodeProto.attribute_,,misc\onnx\opencv-onnx.pb.hpp,attribute_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
4105,243695,name_,3,opencv_onnx.NodeProto.name_,,misc\onnx\opencv-onnx.pb.hpp,name_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
4106,243696,op_type_,3,opencv_onnx.NodeProto.op_type_,,misc\onnx\opencv-onnx.pb.hpp,op_type_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
4107,243697,doc_string_,3,opencv_onnx.NodeProto.doc_string_,,misc\onnx\opencv-onnx.pb.hpp,doc_string_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
4108,243698,domain_,3,opencv_onnx.NodeProto.domain_,,misc\onnx\opencv-onnx.pb.hpp,domain_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
4109,112619,default_instance,1,opencv_caffe.BlobShape.default_instance,BlobShape opencv_caffe.BlobShape.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const BlobShape& default_instance() {
    return *internal_default_instance();
  }",1079.0,1081.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,BlobShape
4110,112626,internal_default_instance,1,opencv_caffe.BlobShape.internal_default_instance,BlobShape opencv_caffe.BlobShape.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const BlobShape* internal_default_instance() {
    return reinterpret_cast<const BlobShape*>(
               &_BlobShape_default_instance_);
  }",1082.0,1085.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,BlobShape
4111,63482,SharedDtor,1,opencv_caffe.HDF5OutputParameter.SharedDtor,void opencv_caffe.HDF5OutputParameter.SharedDtor (),misc\caffe\opencv-caffe.pb.cc,"inline void HDF5OutputParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}",20697.0,20700.0,1.0,1.0,4.0,5,3,3,3,0,1,1,1,0,0,,0,1,0,0,0,void
4112,14331,MergeFrom,1,opencv_caffe.DetectionOutputParameter.MergeFrom,void opencv_caffe.DetectionOutputParameter.MergeFrom (DetectionOutputParameter),misc\caffe\opencv-caffe.pb.cc,"void DetectionOutputParameter::MergeFrom(const DetectionOutputParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.DetectionOutputParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_nms_param()->::opencv_caffe::NonMaximumSuppressionParameter::MergeFrom(from._internal_nms_param());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_save_output_param()->::opencv_caffe::SaveOutputParameter::MergeFrom(from._internal_save_output_param());
    }
    if (cached_has_bits & 0x00000004u) {
      num_classes_ = from.num_classes_;
    }
    if (cached_has_bits & 0x00000008u) {
      background_label_id_ = from.background_label_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      confidence_threshold_ = from.confidence_threshold_;
    }
    ...",6622.0,6669.0,1.0,1.0,48.0,48,9,45,14,1,23,14,25,0,2,,0,21,2,1,1,void
4113,391164,match,1,cv.dnn.Subgraph.match,"bool cv.dnn.Subgraph.match (Ptr<ImportGraphWrapper>,int,ANY)",src\graph_simplifier.cpp,"bool Subgraph::match(const Ptr<ImportGraphWrapper>& net, int nodeId,
                     std::vector<int>& matchedNodesIds)
{
    matchedNodesIds.clear();

    // Collection of all matchings states across branching.
    // If there is no commutative ops in the subgraph - there would be just a single map.
    std::vector<std::shared_ptr<std::map<int, int>>> matchCandidates;
    matchCandidates.push_back(makePtr<std::map<int, int>>());

    struct State
    {
        int nodeToMatch;
        int targetNodeId;
        // Every state refers to current matchings pairs as well as
        // matchings from parent branches produced by commutative ops.
        std::vector<std::shared_ptr<std::map<int, int>>> matchings;

        // When we register a matching pair we should register it in every parent branch.
        // This is actual for branching in case of commutative ops only.
        void addMatch(std::pair<int, int> match)
        {
            for (auto& m : matchings)
               ...",79.0,178.0,1.0,1.0,100.0,92,12,99,19,0,9,16,20,3,4,,0,5,6,3,3,bool
4114,227335,_InternalParse,1,opencv_onnx.NodeProto._InternalParse,"const char* opencv_onnx.NodeProto._InternalParse (char*,ANY*)",misc\onnx\opencv-onnx.pb.cc,"const char* NodeProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_input();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, ""opencv_onnx.NodeProto.input"");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_...",1892.0,2016.0,1.0,12.0,125.0,105,16,130,9,0,1,30,54,0,0,,0,1,4,2,2,const char*
4115,63520,SetCachedSize,1,opencv_caffe.HDF5OutputParameter.SetCachedSize,void opencv_caffe.HDF5OutputParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void HDF5OutputParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",20708.0,20710.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
4116,145444,_has_bits_,3,opencv_caffe.PythonParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
4117,145445,_cached_size_,3,opencv_caffe.PythonParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
4118,145446,module_,3,opencv_caffe.PythonParameter.module_,,misc\caffe\opencv-caffe.pb.hpp,module_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
4119,145447,layer_,3,opencv_caffe.PythonParameter.layer_,,misc\caffe\opencv-caffe.pb.hpp,layer_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
4120,145448,param_str_,3,opencv_caffe.PythonParameter.param_str_,,misc\caffe\opencv-caffe.pb.hpp,param_str_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
4121,145449,share_in_parallel_,3,opencv_caffe.PythonParameter.share_in_parallel_,,misc\caffe\opencv-caffe.pb.hpp,share_in_parallel_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
4122,63530,Clear,1,opencv_caffe.HDF5OutputParameter.Clear,void opencv_caffe.HDF5OutputParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void HDF5OutputParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.HDF5OutputParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    file_name_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",20712.0,20724.0,1.0,1.0,13.0,8,5,8,4,0,3,2,2,0,0,,0,3,0,0,0,void
4123,423995,notImplementedRegisterer,1,cv.dnn.detail.notImplementedRegisterer,Ptr<Layer> cv.dnn.detail.notImplementedRegisterer (LayerParams),src\layers\not_implemented_layer.cpp,"Ptr<Layer> notImplementedRegisterer(LayerParams &params)
{
    return detail::NotImplemented::create(params);
}",172.0,175.0,1.0,1.0,4.0,2,1,3,3,0,1,1,1,0,1,,0,0,2,1,1,Ptr<Layer>
4124,79932,_InternalSerialize,1,opencv_caffe.ReLUParameter._InternalSerialize,"uint8_t opencv_caffe.ReLUParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* ReLUParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.ReLUParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float negative_slope = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_negative_slope(), target);
  }

  // optional .opencv_caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_engine(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireF...",25766.0,25792.0,1.0,1.0,27.0,31,8,34,10,0,1,4,4,0,0,,0,1,4,2,2,uint8_t
4125,309314,fbb_,3,opencv_tflite.Pool2DOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
4126,309315,start_,3,opencv_tflite.Pool2DOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4127,309316,add_padding,1,opencv_tflite.Pool2DOptionsBuilder.add_padding,void opencv_tflite.Pool2DOptionsBuilder.add_padding (ANY),misc\tflite\schema_generated.hpp,"void add_padding(opencv_tflite::Padding padding) {
    fbb_.AddElement<int8_t>(Pool2DOptions::VT_PADDING, static_cast<int8_t>(padding), 0);
  }",3344.0,3346.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4128,374857,stream,3,cv.dnn.cuda4dnn.PaddingOp.stream,,src\cuda4dnn\primitives\padding.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4129,374858,type,3,cv.dnn.cuda4dnn.PaddingOp.type,,src\cuda4dnn\primitives\padding.hpp,type,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4130,63563,_InternalParse,1,opencv_caffe.HDF5OutputParameter._InternalParse,"const char* opencv_caffe.HDF5OutputParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* HDF5OutputParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string file_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, ""opencv_caffe.HDF5OutputParameter.file_name"");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CH...",20726.0,20767.0,1.0,10.0,42.0,31,12,38,9,0,1,9,9,0,0,,0,1,4,2,2,const char*
4131,374860,dstRanges,3,cv.dnn.cuda4dnn.PaddingOp.dstRanges,,src\cuda4dnn\primitives\padding.hpp,dstRanges,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
4132,374859,value,3,cv.dnn.cuda4dnn.PaddingOp.value,,src\cuda4dnn\primitives\padding.hpp,value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4133,374862,<lambda>0,1,cv.dnn.cuda4dnn.PermuteOp.forward.<lambda>0,ANY cv.dnn.cuda4dnn.PermuteOp.forward.<lambda>0 (),src\cuda4dnn\primitives\permute.hpp,"[&] {
                    for (int i = 0; i < order.size(); i++)
                        if (order[i] != i)
                            return true;
                    return false;
                }",44.0,49.0,37.0,17.0,6.0,3,3,3,2,1,1,2,2,1,0,,0,1,0,0,0,ANY
4134,276559,MergeFrom,1,opencv_tensorflow.GraphDef.MergeFrom,void opencv_tensorflow.GraphDef.MergeFrom (GraphDef),misc\tensorflow\graph.pb.cc,"void GraphDef::MergeFrom(const GraphDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_tensorflow.GraphDef)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  node_.MergeFrom(from.node_);
  if (from._internal_has_library()) {
    _internal_mutable_library()->::opencv_tensorflow::FunctionDefLibrary::MergeFrom(from._internal_library());
  }
  if (from._internal_has_versions()) {
    _internal_mutable_versions()->::opencv_tensorflow::VersionDef::MergeFrom(from._internal_versions());
  }
  if (from._internal_version() != 0) {
    _internal_set_version(from._internal_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",412.0,429.0,1.0,1.0,18.0,19,8,14,5,0,4,4,4,0,2,,0,2,2,1,1,void
4135,309336,add_stride_w,1,opencv_tflite.Pool2DOptionsBuilder.add_stride_w,void opencv_tflite.Pool2DOptionsBuilder.add_stride_w (int32_t),misc\tflite\schema_generated.hpp,"void add_stride_w(int32_t stride_w) {
    fbb_.AddElement<int32_t>(Pool2DOptions::VT_STRIDE_W, stride_w, 0);
  }",3347.0,3349.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4136,243804,descriptor,1,opencv_onnx.ModelProto.descriptor,Descriptor opencv_onnx.ModelProto.descriptor (),misc\onnx\opencv-onnx.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",1217.0,1219.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
4137,243810,GetDescriptor,1,opencv_onnx.ModelProto.GetDescriptor,Descriptor opencv_onnx.ModelProto.GetDescriptor (),misc\onnx\opencv-onnx.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",1220.0,1222.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
4138,309354,add_stride_h,1,opencv_tflite.Pool2DOptionsBuilder.add_stride_h,void opencv_tflite.Pool2DOptionsBuilder.add_stride_h (int32_t),misc\tflite\schema_generated.hpp,"void add_stride_h(int32_t stride_h) {
    fbb_.AddElement<int32_t>(Pool2DOptions::VT_STRIDE_H, stride_h, 0);
  }",3350.0,3352.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4139,243821,GetReflection,1,opencv_onnx.ModelProto.GetReflection,Reflection opencv_onnx.ModelProto.GetReflection (),misc\onnx\opencv-onnx.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",1223.0,1225.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
4140,112751,GetCachedSize,1,opencv_caffe.BlobShape.GetCachedSize,int opencv_caffe.BlobShape.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },1130.0,1130.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
4141,47223,_InternalSerialize,1,opencv_caffe.BiasParameter._InternalSerialize,"uint8_t opencv_caffe.BiasParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* BiasParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.BiasParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 axis = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_axis(), target);
  }

  // optional int32 num_axes = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num_axes(), target);
  }

  // optional .opencv_caffe.FillerParameter filler = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::...",15846.0,15879.0,1.0,1.0,34.0,39,8,45,11,0,2,5,5,0,1,,0,2,4,2,2,uint8_t
4142,243832,default_instance,1,opencv_onnx.ModelProto.default_instance,ModelProto opencv_onnx.ModelProto.default_instance (),misc\onnx\opencv-onnx.pb.hpp,"static const ModelProto& default_instance() {
    return *internal_default_instance();
  }",1226.0,1228.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,ModelProto
4143,129145,_has_bits_,3,opencv_caffe.ArgMaxParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
4144,129146,_cached_size_,3,opencv_caffe.ArgMaxParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
4145,129147,out_max_val_,3,opencv_caffe.ArgMaxParameter.out_max_val_,,misc\caffe\opencv-caffe.pb.hpp,out_max_val_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
4146,129148,axis_,3,opencv_caffe.ArgMaxParameter.axis_,,misc\caffe\opencv-caffe.pb.hpp,axis_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
4147,129149,top_k_,3,opencv_caffe.ArgMaxParameter.top_k_,,misc\caffe\opencv-caffe.pb.hpp,top_k_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
4148,309372,add_filter_width,1,opencv_tflite.Pool2DOptionsBuilder.add_filter_width,void opencv_tflite.Pool2DOptionsBuilder.add_filter_width (int32_t),misc\tflite\schema_generated.hpp,"void add_filter_width(int32_t filter_width) {
    fbb_.AddElement<int32_t>(Pool2DOptions::VT_FILTER_WIDTH, filter_width, 0);
  }",3353.0,3355.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4149,243839,internal_default_instance,1,opencv_onnx.ModelProto.internal_default_instance,ModelProto opencv_onnx.ModelProto.internal_default_instance (),misc\onnx\opencv-onnx.pb.hpp,"static inline const ModelProto* internal_default_instance() {
    return reinterpret_cast<const ModelProto*>(
               &_ModelProto_default_instance_);
  }",1229.0,1232.0,3.0,3.0,4.0,2,2,1,1,2,0,1,1,0,0,,0,0,0,0,0,ModelProto
4150,374923,forward,1,cv.dnn.cuda4dnn.PermuteOp.forward,"void cv.dnn.cuda4dnn.PermuteOp.forward (ANY,ANY,ANY)",src\cuda4dnn\primitives\permute.hpp,"void forward(
            const std::vector<cv::Ptr<BackendWrapper>>& inputs,
            const std::vector<cv::Ptr<BackendWrapper>>& outputs,
            csl::Workspace& workspace) override
        {
            for (int i = 0; i < inputs.size(); i++)
            {
                auto input_wrapper = inputs[i].dynamicCast<wrapper_type>();
                auto input = input_wrapper->getView();

                auto output_wrapper = outputs[i].dynamicCast<wrapper_type>();
                auto output = output_wrapper->getSpan();

                auto needsPermute = [&] {
                    for (int i = 0; i < order.size(); i++)
                        if (order[i] != i)
                            return true;
                    return false;
                }();

                if (needsPermute)
                {
                    kernels::permute(stream, output, input, order);
                }
                else
                {
                    if (input.get() != outpu...",31.0,61.0,9.0,9.0,31.0,15,5,20,11,0,3,3,4,0,0,,0,3,6,3,3,void
4151,309390,add_filter_height,1,opencv_tflite.Pool2DOptionsBuilder.add_filter_height,void opencv_tflite.Pool2DOptionsBuilder.add_filter_height (int32_t),misc\tflite\schema_generated.hpp,"void add_filter_height(int32_t filter_height) {
    fbb_.AddElement<int32_t>(Pool2DOptions::VT_FILTER_HEIGHT, filter_height, 0);
  }",3356.0,3358.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4152,145555,descriptor,1,opencv_caffe.RecurrentParameter.descriptor,Descriptor opencv_caffe.RecurrentParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",14882.0,14884.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
4153,145561,GetDescriptor,1,opencv_caffe.RecurrentParameter.GetDescriptor,Descriptor opencv_caffe.RecurrentParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",14885.0,14887.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
4154,309408,add_fused_activation_function,1,opencv_tflite.Pool2DOptionsBuilder.add_fused_activation_function,void opencv_tflite.Pool2DOptionsBuilder.add_fused_activation_function (ANY),misc\tflite\schema_generated.hpp,"void add_fused_activation_function(opencv_tflite::ActivationFunctionType fused_activation_function) {
    fbb_.AddElement<int8_t>(Pool2DOptions::VT_FUSED_ACTIVATION_FUNCTION, static_cast<int8_t>(fused_activation_function), 0);
  }",3359.0,3361.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4155,145572,GetReflection,1,opencv_caffe.RecurrentParameter.GetReflection,Reflection opencv_caffe.RecurrentParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",14888.0,14890.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
4156,96423,MergeFrom,1,opencv_caffe.V1LayerParameter.MergeFrom,void opencv_caffe.V1LayerParameter.MergeFrom (V1LayerParameter),misc\caffe\opencv-caffe.pb.cc,"void V1LayerParameter::MergeFrom(const V1LayerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.V1LayerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  bottom_.MergeFrom(from.bottom_);
  top_.MergeFrom(from.top_);
  blobs_.MergeFrom(from.blobs_);
  blobs_lr_.MergeFrom(from.blobs_lr_);
  weight_decay_.MergeFrom(from.weight_decay_);
  include_.MergeFrom(from.include_);
  exclude_.MergeFrom(from.exclude_);
  loss_weight_.MergeFrom(from.loss_weight_);
  param_.MergeFrom(from.param_);
  blob_share_mode_.MergeFrom(from.blob_share_mode_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_layer()->::opencv_caffe::V0LayerParameter::MergeFrom(from._internal_layer());
    }
    if (cached_has_bits & 0x00000004u...",30620.0,30745.0,1.0,1.0,126.0,132,9,98,14,0,52,38,70,0,31,,0,21,2,1,1,void
4157,80040,ByteSizeLong,1,opencv_caffe.ReLUParameter.ByteSizeLong,size_t opencv_caffe.ReLUParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t ReLUParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.ReLUParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float negative_slope = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional .opencv_caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_engine());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}",25794.0,25817.0,1.0,1.0,24.0,17,9,15,7,0,2,4,6,0,0,,0,2,0,0,0,size_t
4158,276655,InternalSwap,1,opencv_tensorflow.GraphDef.InternalSwap,void opencv_tensorflow.GraphDef.InternalSwap (GraphDef*),misc\tensorflow\graph.pb.cc,"void GraphDef::InternalSwap(GraphDef* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  node_.InternalSwap(&other->node_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GraphDef, version_)
      + sizeof(GraphDef::version_)
      - PROTOBUF_FIELD_OFFSET(GraphDef, library_)>(
          reinterpret_cast<char*>(&library_),
          reinterpret_cast<char*>(&other->library_));
}",442.0,452.0,1.0,1.0,11.0,21,11,13,8,0,7,1,1,0,0,,0,7,2,1,1,void
4159,145583,default_instance,1,opencv_caffe.RecurrentParameter.default_instance,RecurrentParameter opencv_caffe.RecurrentParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const RecurrentParameter& default_instance() {
    return *internal_default_instance();
  }",14891.0,14893.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,RecurrentParameter
4160,309428,Pool2DOptionsBuilder,1,opencv_tflite.Pool2DOptionsBuilder.Pool2DOptionsBuilder,ANY opencv_tflite.Pool2DOptionsBuilder.Pool2DOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit Pool2DOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",3362.0,3365.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
4161,145590,internal_default_instance,1,opencv_caffe.RecurrentParameter.internal_default_instance,RecurrentParameter opencv_caffe.RecurrentParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const RecurrentParameter* internal_default_instance() {
    return reinterpret_cast<const RecurrentParameter*>(
               &_RecurrentParameter_default_instance_);
  }",14894.0,14897.0,3.0,3.0,4.0,2,2,1,1,3,0,1,1,0,0,,0,0,0,0,0,RecurrentParameter
4162,14522,InternalSwap,1,opencv_caffe.DetectionOutputParameter.InternalSwap,void opencv_caffe.DetectionOutputParameter.InternalSwap (DetectionOutputParameter*),misc\caffe\opencv-caffe.pb.cc,"void DetectionOutputParameter::InternalSwap(DetectionOutputParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DetectionOutputParameter, clip_)
      + sizeof(DetectionOutputParameter::clip_)
      - PROTOBUF_FIELD_OFFSET(DetectionOutputParameter, nms_param_)>(
          reinterpret_cast<char*>(&nms_param_),
          reinterpret_cast<char*>(&other->nms_param_));
  swap(keep_top_k_, other->keep_top_k_);
  swap(code_type_, other->code_type_);
  swap(share_location_, other->share_location_);
  swap(normalized_bbox_, other->normalized_bbox_);
}",6682.0,6696.0,1.0,1.0,15.0,25,12,21,12,0,15,1,1,0,0,,0,15,2,1,1,void
4163,260285,MergeFrom,1,opencv_tensorflow.AttrValue_ListValue.MergeFrom,void opencv_tensorflow.AttrValue_ListValue.MergeFrom (AttrValue_ListValue),misc\tensorflow\attr_value.pb.cc,"void AttrValue_ListValue::MergeFrom(const AttrValue_ListValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_tensorflow.AttrValue.ListValue)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  s_.MergeFrom(from.s_);
  i_.MergeFrom(from.i_);
  f_.MergeFrom(from.f_);
  b_.MergeFrom(from.b_);
  type_.MergeFrom(from.type_);
  shape_.MergeFrom(from.shape_);
  tensor_.MergeFrom(from.tensor_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",551.0,565.0,1.0,1.0,15.0,22,6,20,11,1,14,1,1,0,0,,0,14,2,1,1,void
4164,309439,Finish,1,opencv_tflite.Pool2DOptionsBuilder.Finish,Offset<Pool2DOptions> opencv_tflite.Pool2DOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<Pool2DOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Pool2DOptions>(end);
    return o;
  }",3366.0,3370.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<Pool2DOptions>
4165,30919,transform_param,1,opencv_caffe.LayerParameter._Internal.transform_param,TransformationParameter opencv_caffe.LayerParameter._Internal.transform_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::TransformationParameter&
LayerParameter::_Internal::transform_param(const LayerParameter* msg) {
  return *msg->transform_param_;
}",11165.0,11168.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,TransformationParameter
4166,30929,loss_param,1,opencv_caffe.LayerParameter._Internal.loss_param,LossParameter opencv_caffe.LayerParameter._Internal.loss_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::LossParameter&
LayerParameter::_Internal::loss_param(const LayerParameter* msg) {
  return *msg->loss_param_;
}",11169.0,11172.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,LossParameter
4167,30939,accuracy_param,1,opencv_caffe.LayerParameter._Internal.accuracy_param,AccuracyParameter opencv_caffe.LayerParameter._Internal.accuracy_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::AccuracyParameter&
LayerParameter::_Internal::accuracy_param(const LayerParameter* msg) {
  return *msg->accuracy_param_;
}",11173.0,11176.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,AccuracyParameter
4168,63707,_InternalSerialize,1,opencv_caffe.HDF5OutputParameter._InternalSerialize,"uint8_t opencv_caffe.HDF5OutputParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* HDF5OutputParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.HDF5OutputParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string file_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      ""opencv_caffe.HDF5OutputParameter.file_name"");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknow...",20769.0,20792.0,1.0,1.0,24.0,30,8,26,9,0,1,3,3,0,0,,0,1,4,2,2,uint8_t
4169,276707,GetMetadata,1,opencv_tensorflow.GraphDef.GetMetadata,Metadata opencv_tensorflow.GraphDef.GetMetadata (),misc\tensorflow\graph.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata GraphDef::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[0]);
}",454.0,458.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
4170,30949,argmax_param,1,opencv_caffe.LayerParameter._Internal.argmax_param,ArgMaxParameter opencv_caffe.LayerParameter._Internal.argmax_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::ArgMaxParameter&
LayerParameter::_Internal::argmax_param(const LayerParameter* msg) {
  return *msg->argmax_param_;
}",11177.0,11180.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,ArgMaxParameter
4171,375015,stream,3,cv.dnn.cuda4dnn.PermuteOp.stream,,src\cuda4dnn\primitives\permute.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4172,375016,order,3,cv.dnn.cuda4dnn.PermuteOp.order,,src\cuda4dnn\primitives\permute.hpp,order,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4173,129255,descriptor,1,opencv_caffe.ConcatParameter.descriptor,Descriptor opencv_caffe.ConcatParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",7966.0,7968.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
4174,112877,dim_,3,opencv_caffe.BlobShape.dim_,,misc\caffe\opencv-caffe.pb.hpp,dim_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
4175,112878,_dim_cached_byte_size_,3,opencv_caffe.BlobShape._dim_cached_byte_size_,,misc\caffe\opencv-caffe.pb.hpp,_dim_cached_byte_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4176,112879,_cached_size_,3,opencv_caffe.BlobShape._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
4177,30959,batch_norm_param,1,opencv_caffe.LayerParameter._Internal.batch_norm_param,BatchNormParameter opencv_caffe.LayerParameter._Internal.batch_norm_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::BatchNormParameter&
LayerParameter::_Internal::batch_norm_param(const LayerParameter* msg) {
  return *msg->batch_norm_param_;
}",11181.0,11184.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,BatchNormParameter
4178,129261,GetDescriptor,1,opencv_caffe.ConcatParameter.GetDescriptor,Descriptor opencv_caffe.ConcatParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",7969.0,7971.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
4179,129272,GetReflection,1,opencv_caffe.ConcatParameter.GetReflection,Reflection opencv_caffe.ConcatParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",7972.0,7974.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
4180,30969,bias_param,1,opencv_caffe.LayerParameter._Internal.bias_param,BiasParameter opencv_caffe.LayerParameter._Internal.bias_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::BiasParameter&
LayerParameter::_Internal::bias_param(const LayerParameter* msg) {
  return *msg->bias_param_;
}",11185.0,11188.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,BiasParameter
4181,243964,GetCachedSize,1,opencv_onnx.ModelProto.GetCachedSize,int opencv_onnx.ModelProto.GetCachedSize (),misc\onnx\opencv-onnx.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },1277.0,1277.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
4182,47361,ByteSizeLong,1,opencv_caffe.BiasParameter.ByteSizeLong,size_t opencv_caffe.BiasParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t BiasParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.BiasParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .opencv_caffe.FillerParameter filler = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *filler_);
    }

    // optional int32 axis = 1 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_axis());
    }

    // optional int32 num_axes = 2 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_num_axes());
    }

  ...",15881.0,15910.0,1.0,1.0,30.0,26,10,24,8,0,3,5,8,0,0,,0,3,0,0,0,size_t
4183,129283,default_instance,1,opencv_caffe.ConcatParameter.default_instance,ConcatParameter opencv_caffe.ConcatParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const ConcatParameter& default_instance() {
    return *internal_default_instance();
  }",7975.0,7977.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,ConcatParameter
4184,30979,concat_param,1,opencv_caffe.LayerParameter._Internal.concat_param,ConcatParameter opencv_caffe.LayerParameter._Internal.concat_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::ConcatParameter&
LayerParameter::_Internal::concat_param(const LayerParameter* msg) {
  return *msg->concat_param_;
}",11189.0,11192.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,ConcatParameter
4185,276741,GetMetadata,1,opencv_tensorflow.NodeDef_AttrEntry_DoNotUse.GetMetadata,Metadata opencv_tensorflow.NodeDef_AttrEntry_DoNotUse.GetMetadata (),misc\tensorflow\graph.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata NodeDef_AttrEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[1]);
}",468.0,472.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
4186,14595,GetMetadata,1,opencv_caffe.DetectionOutputParameter.GetMetadata,Metadata opencv_caffe.DetectionOutputParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata DetectionOutputParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[6]);
}",6698.0,6702.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
4187,80135,MergeFrom,1,opencv_caffe.ReLUParameter.MergeFrom,void opencv_caffe.ReLUParameter.MergeFrom (ReLUParameter),misc\caffe\opencv-caffe.pb.cc,"void ReLUParameter::MergeFrom(const ReLUParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.ReLUParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      negative_slope_ = from.negative_slope_;
    }
    if (cached_has_bits & 0x00000002u) {
      engine_ = from.engine_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",25832.0,25849.0,1.0,1.0,18.0,19,8,17,7,2,6,4,6,0,0,,0,6,2,1,1,void
4188,129290,internal_default_instance,1,opencv_caffe.ConcatParameter.internal_default_instance,ConcatParameter opencv_caffe.ConcatParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const ConcatParameter* internal_default_instance() {
    return reinterpret_cast<const ConcatParameter*>(
               &_ConcatParameter_default_instance_);
  }",7978.0,7981.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,ConcatParameter
4189,309515,fbb_,3,opencv_tflite.DepthwiseConv2DOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
4190,309516,start_,3,opencv_tflite.DepthwiseConv2DOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4191,30989,contrastive_loss_param,1,opencv_caffe.LayerParameter._Internal.contrastive_loss_param,ContrastiveLossParameter opencv_caffe.LayerParameter._Internal.contrastive_loss_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::ContrastiveLossParameter&
LayerParameter::_Internal::contrastive_loss_param(const LayerParameter* msg) {
  return *msg->contrastive_loss_param_;
}",11193.0,11196.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,ContrastiveLossParameter
4192,309517,add_padding,1,opencv_tflite.DepthwiseConv2DOptionsBuilder.add_padding,void opencv_tflite.DepthwiseConv2DOptionsBuilder.add_padding (ANY),misc\tflite\schema_generated.hpp,"void add_padding(opencv_tflite::Padding padding) {
    fbb_.AddElement<int8_t>(DepthwiseConv2DOptions::VT_PADDING, static_cast<int8_t>(padding), 0);
  }",3440.0,3442.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4193,375061,poolMode,3,cv.dnn.cuda4dnn.PoolingConfiguration.poolMode,,src\cuda4dnn\primitives\pooling.hpp,poolMode,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4194,375062,window_size,3,cv.dnn.cuda4dnn.PoolingConfiguration.window_size,,src\cuda4dnn\primitives\pooling.hpp,window_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4195,30999,convolution_param,1,opencv_caffe.LayerParameter._Internal.convolution_param,ConvolutionParameter opencv_caffe.LayerParameter._Internal.convolution_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::ConvolutionParameter&
LayerParameter::_Internal::convolution_param(const LayerParameter* msg) {
  return *msg->convolution_param_;
}",11197.0,11200.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,ConvolutionParameter
4196,276760,clear_attr,1,opencv_tensorflow.NodeDef.clear_attr,void opencv_tensorflow.NodeDef.clear_attr (),misc\tensorflow\graph.pb.cc,"void NodeDef::clear_attr() {
  attr_.Clear();
}",480.0,482.0,1.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,void
4197,375063,strides,3,cv.dnn.cuda4dnn.PoolingConfiguration.strides,,src\cuda4dnn\primitives\pooling.hpp,strides,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4198,375068,padMode,3,cv.dnn.cuda4dnn.PoolingConfiguration.padMode,,src\cuda4dnn\primitives\pooling.hpp,padMode,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4199,375069,pads_begin,3,cv.dnn.cuda4dnn.PoolingConfiguration.pads_begin,,src\cuda4dnn\primitives\pooling.hpp,pads_begin,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4200,260382,InternalSwap,1,opencv_tensorflow.AttrValue_ListValue.InternalSwap,void opencv_tensorflow.AttrValue_ListValue.InternalSwap (AttrValue_ListValue*),misc\tensorflow\attr_value.pb.cc,"void AttrValue_ListValue::InternalSwap(AttrValue_ListValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  s_.InternalSwap(&other->s_);
  i_.InternalSwap(&other->i_);
  f_.InternalSwap(&other->f_);
  b_.InternalSwap(&other->b_);
  type_.InternalSwap(&other->type_);
  shape_.InternalSwap(&other->shape_);
  tensor_.InternalSwap(&other->tensor_);
}",578.0,588.0,1.0,1.0,11.0,24,3,16,9,0,14,1,1,0,0,,0,14,2,1,1,void
4201,375070,pads_end,3,cv.dnn.cuda4dnn.PoolingConfiguration.pads_end,,src\cuda4dnn\primitives\pooling.hpp,pads_end,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4202,31009,crop_param,1,opencv_caffe.LayerParameter._Internal.crop_param,CropParameter opencv_caffe.LayerParameter._Internal.crop_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::CropParameter&
LayerParameter::_Internal::crop_param(const LayerParameter* msg) {
  return *msg->crop_param_;
}",11201.0,11204.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,CropParameter
4203,309537,add_stride_w,1,opencv_tflite.DepthwiseConv2DOptionsBuilder.add_stride_w,void opencv_tflite.DepthwiseConv2DOptionsBuilder.add_stride_w (int32_t),misc\tflite\schema_generated.hpp,"void add_stride_w(int32_t stride_w) {
    fbb_.AddElement<int32_t>(DepthwiseConv2DOptions::VT_STRIDE_W, stride_w, 0);
  }",3443.0,3445.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4204,375075,input_shape,3,cv.dnn.cuda4dnn.PoolingConfiguration.input_shape,,src\cuda4dnn\primitives\pooling.hpp,input_shape,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4205,375074,roundMode,3,cv.dnn.cuda4dnn.PoolingConfiguration.roundMode,,src\cuda4dnn\primitives\pooling.hpp,roundMode,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4206,375077,PoolingOp,1,cv.dnn.cuda4dnn.PoolingOp.PoolingOp,"ANY cv.dnn.cuda4dnn.PoolingOp.PoolingOp (ANY,PoolingConfiguration)",src\cuda4dnn\primitives\pooling.hpp,"PoolingOp(csl::cudnn::Handle handle, const PoolingConfiguration& config)
            : cudnnHandle(std::move(handle))
        {
            const auto& window_size = config.window_size;

            const auto pooling_order = window_size.size();
            CV_Assert(pooling_order >= 1);

            const auto& strides = config.strides;
            CV_Assert(pooling_order == strides.size());

            const auto& input_shape = config.input_shape;
            CV_Assert(input_shape.size() == pooling_order + 2);

            if (pooling_order > 3)
                CV_Error(Error::StsNotImplemented, ""Only 1D/2D/3D pooling are supported."");

            const auto rank = input_shape.size();

            /* left and right are misleading as the padding is applicable for any number of dimensions
             * but we use those identifiers to avoid confusion with `pads_begin` and `pads_end`
             *
             * `common_padding` contains the amount of padding that has to be added ...",69.0,224.0,9.0,9.0,156.0,180,17,196,33,0,14,15,26,4,0,,0,14,4,2,2,ANY
4207,31019,data_param,1,opencv_caffe.LayerParameter._Internal.data_param,DataParameter opencv_caffe.LayerParameter._Internal.data_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::DataParameter&
LayerParameter::_Internal::data_param(const LayerParameter* msg) {
  return *msg->data_param_;
}",11205.0,11208.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,DataParameter
4208,145715,GetCachedSize,1,opencv_caffe.RecurrentParameter.GetCachedSize,int opencv_caffe.RecurrentParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },14942.0,14942.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
4209,309555,add_stride_h,1,opencv_tflite.DepthwiseConv2DOptionsBuilder.add_stride_h,void opencv_tflite.DepthwiseConv2DOptionsBuilder.add_stride_h (int32_t),misc\tflite\schema_generated.hpp,"void add_stride_h(int32_t stride_h) {
    fbb_.AddElement<int32_t>(DepthwiseConv2DOptions::VT_STRIDE_H, stride_h, 0);
  }",3446.0,3448.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4210,31029,detection_output_param,1,opencv_caffe.LayerParameter._Internal.detection_output_param,DetectionOutputParameter opencv_caffe.LayerParameter._Internal.detection_output_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::DetectionOutputParameter&
LayerParameter::_Internal::detection_output_param(const LayerParameter* msg) {
  return *msg->detection_output_param_;
}",11209.0,11212.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,DetectionOutputParameter
4211,31039,dropout_param,1,opencv_caffe.LayerParameter._Internal.dropout_param,DropoutParameter opencv_caffe.LayerParameter._Internal.dropout_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::DropoutParameter&
LayerParameter::_Internal::dropout_param(const LayerParameter* msg) {
  return *msg->dropout_param_;
}",11213.0,11216.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,DropoutParameter
4212,63808,ByteSizeLong,1,opencv_caffe.HDF5OutputParameter.ByteSizeLong,size_t opencv_caffe.HDF5OutputParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t HDF5OutputParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.HDF5OutputParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string file_name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}",20794.0,20811.0,1.0,1.0,18.0,13,9,12,7,0,2,2,2,0,0,,0,2,0,0,0,size_t
4213,14659,set_has_label,1,opencv_caffe._Internal.set_has_label,void opencv_caffe._Internal.set_has_label (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }",32558.0,32560.0,3.0,3.0,3.0,2,2,1,1,2,0,1,1,0,0,,0,0,2,1,1,void
4214,309573,add_depth_multiplier,1,opencv_tflite.DepthwiseConv2DOptionsBuilder.add_depth_multiplier,void opencv_tflite.DepthwiseConv2DOptionsBuilder.add_depth_multiplier (int32_t),misc\tflite\schema_generated.hpp,"void add_depth_multiplier(int32_t depth_multiplier) {
    fbb_.AddElement<int32_t>(DepthwiseConv2DOptions::VT_DEPTH_MULTIPLIER, depth_multiplier, 0);
  }",3449.0,3451.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4215,31049,dummy_data_param,1,opencv_caffe.LayerParameter._Internal.dummy_data_param,DummyDataParameter opencv_caffe.LayerParameter._Internal.dummy_data_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::DummyDataParameter&
LayerParameter::_Internal::dummy_data_param(const LayerParameter* msg) {
  return *msg->dummy_data_param_;
}",11217.0,11220.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,DummyDataParameter
4216,14670,set_has_encoded,1,opencv_caffe._Internal.set_has_encoded,void opencv_caffe._Internal.set_has_encoded (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_encoded(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }",6724.0,6726.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
4217,31059,eltwise_param,1,opencv_caffe.LayerParameter._Internal.eltwise_param,EltwiseParameter opencv_caffe.LayerParameter._Internal.eltwise_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::EltwiseParameter&
LayerParameter::_Internal::eltwise_param(const LayerParameter* msg) {
  return *msg->eltwise_param_;
}",11221.0,11224.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,EltwiseParameter
4218,309591,add_fused_activation_function,1,opencv_tflite.DepthwiseConv2DOptionsBuilder.add_fused_activation_function,void opencv_tflite.DepthwiseConv2DOptionsBuilder.add_fused_activation_function (ANY),misc\tflite\schema_generated.hpp,"void add_fused_activation_function(opencv_tflite::ActivationFunctionType fused_activation_function) {
    fbb_.AddElement<int8_t>(DepthwiseConv2DOptions::VT_FUSED_ACTIVATION_FUNCTION, static_cast<int8_t>(fused_activation_function), 0);
  }",3452.0,3454.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4219,112985,descriptor,1,opencv_caffe.BlobProto.descriptor,Descriptor opencv_caffe.BlobProto.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",1237.0,1239.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
4220,293209,file_level_metadata_tensor_2eproto,2,misc\tensorflow\tensor.pb.cc.file_level_metadata_tensor_2eproto,,misc\tensorflow\tensor.pb.cc,static ::PROTOBUF_NAMESPACE_ID::Metadata[1] file_level_metadata_tensor_2eproto,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4221,80220,InternalSwap,1,opencv_caffe.ReLUParameter.InternalSwap,void opencv_caffe.ReLUParameter.InternalSwap (ReLUParameter*),misc\caffe\opencv-caffe.pb.cc,"void ReLUParameter::InternalSwap(ReLUParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReLUParameter, engine_)
      + sizeof(ReLUParameter::engine_)
      - PROTOBUF_FIELD_OFFSET(ReLUParameter, negative_slope_)>(
          reinterpret_cast<char*>(&negative_slope_),
          reinterpret_cast<char*>(&other->negative_slope_));
}",25862.0,25872.0,1.0,1.0,11.0,21,12,13,8,0,7,1,1,0,0,,0,7,2,1,1,void
4222,31069,elu_param,1,opencv_caffe.LayerParameter._Internal.elu_param,ELUParameter opencv_caffe.LayerParameter._Internal.elu_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::ELUParameter&
LayerParameter::_Internal::elu_param(const LayerParameter* msg) {
  return *msg->elu_param_;
}",11225.0,11228.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,ELUParameter
4223,112991,GetDescriptor,1,opencv_caffe.BlobProto.GetDescriptor,Descriptor opencv_caffe.BlobProto.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",1240.0,1242.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
4224,260451,GetMetadata,1,opencv_tensorflow.AttrValue_ListValue.GetMetadata,Metadata opencv_tensorflow.AttrValue_ListValue.GetMetadata (),misc\tensorflow\attr_value.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata AttrValue_ListValue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_attr_5fvalue_2eproto_getter, &descriptor_table_attr_5fvalue_2eproto_once,
      file_level_metadata_attr_5fvalue_2eproto[0]);
}",590.0,594.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
4225,31079,embed_param,1,opencv_caffe.LayerParameter._Internal.embed_param,EmbedParameter opencv_caffe.LayerParameter._Internal.embed_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::EmbedParameter&
LayerParameter::_Internal::embed_param(const LayerParameter* msg) {
  return *msg->embed_param_;
}",11229.0,11232.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,EmbedParameter
4226,113002,GetReflection,1,opencv_caffe.BlobProto.GetReflection,Reflection opencv_caffe.BlobProto.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",1243.0,1245.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
4227,309611,add_dilation_w_factor,1,opencv_tflite.DepthwiseConv2DOptionsBuilder.add_dilation_w_factor,void opencv_tflite.DepthwiseConv2DOptionsBuilder.add_dilation_w_factor (int32_t),misc\tflite\schema_generated.hpp,"void add_dilation_w_factor(int32_t dilation_w_factor) {
    fbb_.AddElement<int32_t>(DepthwiseConv2DOptions::VT_DILATION_W_FACTOR, dilation_w_factor, 1);
  }",3455.0,3457.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4228,31089,exp_param,1,opencv_caffe.LayerParameter._Internal.exp_param,ExpParameter opencv_caffe.LayerParameter._Internal.exp_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::ExpParameter&
LayerParameter::_Internal::exp_param(const LayerParameter* msg) {
  return *msg->exp_param_;
}",11233.0,11236.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,ExpParameter
4229,113013,default_instance,1,opencv_caffe.BlobProto.default_instance,BlobProto opencv_caffe.BlobProto.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const BlobProto& default_instance() {
    return *internal_default_instance();
  }",1246.0,1248.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,BlobProto
4230,47482,MergeFrom,1,opencv_caffe.BiasParameter.MergeFrom,void opencv_caffe.BiasParameter.MergeFrom (BiasParameter),misc\caffe\opencv-caffe.pb.cc,"void BiasParameter::MergeFrom(const BiasParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.BiasParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_filler()->::opencv_caffe::FillerParameter::MergeFrom(from._internal_filler());
    }
    if (cached_has_bits & 0x00000002u) {
      axis_ = from.axis_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_axes_ = from.num_axes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",15925.0,15945.0,1.0,1.0,21.0,22,9,19,7,1,7,5,8,0,1,,0,6,2,1,1,void
4231,31099,flatten_param,1,opencv_caffe.LayerParameter._Internal.flatten_param,FlattenParameter opencv_caffe.LayerParameter._Internal.flatten_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::FlattenParameter&
LayerParameter::_Internal::flatten_param(const LayerParameter* msg) {
  return *msg->flatten_param_;
}",11237.0,11240.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,FlattenParameter
4232,113020,internal_default_instance,1,opencv_caffe.BlobProto.internal_default_instance,BlobProto opencv_caffe.BlobProto.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const BlobProto* internal_default_instance() {
    return reinterpret_cast<const BlobProto*>(
               &_BlobProto_default_instance_);
  }",1249.0,1252.0,3.0,3.0,4.0,2,2,1,1,2,0,1,1,0,0,,0,0,0,0,0,BlobProto
4233,293245,descriptor_table_tensor_2eproto_once,2,misc\tensorflow\tensor.pb.cc.descriptor_table_tensor_2eproto_once,,misc\tensorflow\tensor.pb.cc,ANY descriptor_table_tensor_2eproto_once,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4234,293246,descriptor_table_tensor_2eproto,2,misc\tensorflow\tensor.pb.cc.descriptor_table_tensor_2eproto,,misc\tensorflow\tensor.pb.cc,ANY descriptor_table_tensor_2eproto,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4235,309629,add_dilation_h_factor,1,opencv_tflite.DepthwiseConv2DOptionsBuilder.add_dilation_h_factor,void opencv_tflite.DepthwiseConv2DOptionsBuilder.add_dilation_h_factor (int32_t),misc\tflite\schema_generated.hpp,"void add_dilation_h_factor(int32_t dilation_h_factor) {
    fbb_.AddElement<int32_t>(DepthwiseConv2DOptions::VT_DILATION_H_FACTOR, dilation_h_factor, 1);
  }",3458.0,3460.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4236,391552,replace,1,cv.dnn.Subgraph.replace,"void cv.dnn.Subgraph.replace (Ptr<ImportGraphWrapper>,ANY)",src\graph_simplifier.cpp,"void Subgraph::replace(const Ptr<ImportGraphWrapper>& net, const std::vector<int>& matchedNodesIds)
{
    // Extract names of input nodes.
    std::vector<std::string> inputsNames(fusedNodeInputs.size());
    for (int i = 0; i < fusedNodeInputs.size(); ++i)
    {
        std::string inpName;
        // Find input node name looking at inputs of fused nodes.
        for (int j = 0; j < matchedNodesIds.size() && inpName.empty(); ++j)
        {
            Ptr<ImportNodeWrapper> node = net->getNode(matchedNodesIds[j]);
            std::vector<int>& inpIndices = inputs[j];

            CV_Assert(inpIndices.empty() || node->getNumInputs() == inpIndices.size());
            for (int k = 0; k < inpIndices.size(); ++k)
            {
                if (inpIndices[k] == fusedNodeInputs[i])
                {
                    inpName = node->getInputName(k);
                    break;
                }
            }
        }
        CV_Assert(!inpName.empty());
        inputsNames[i] = inpN...",180.0,219.0,1.0,1.0,40.0,50,10,56,15,0,6,7,12,2,1,,0,6,4,2,2,void
4237,440705,timedConvolve,1,cv.dnn.ocl4dnn.OCL4DNNConvSpatial<float>.timedConvolve,"float cv.dnn.ocl4dnn.OCL4DNNConvSpatial<float>.timedConvolve<> (UMat,UMat,UMat,UMat,int32_t,kernelConfig*)",src\ocl4dnn\src\ocl4dnn_conv_spatial.cpp,"float OCL4DNNConvSpatial<float>::timedConvolve(const UMat &bottom, UMat &top,
                                               const UMat &weight, const UMat &bias,
                                               int32_t numImages, kernelConfig* config)
{
    cv::ocl::Queue queue;
    try
    {
        queue = cv::ocl::Queue::getDefault();
    }
    catch (const std::exception& e)
    {
        CV_LOG_ONCE_ERROR(NULL, ""OpenCV(ocl4dnn): Can't get OpenCL default queue for auto-tuning: "" << e.what());
        return 1e6;
    }

    // warm up.
    bool saved_tuned = tuned_;
    tuned_ = false;
    convolve(bottom, top, weight, bias, numImages, config);

    cv::ocl::Timer timer(queue);
    timer.start();
    bool res = true;;
    CV_LOG_INFO(NULL, ""Benchmarking kernel: "" << config->kernelName);
    tuned_ = true;
    int loop_cnt = 4;
    for (int i = 0; i < loop_cnt; i++) {
        res = convolve(bottom, top, weight, bias, numImages, config);
        if (!res)
            break;
    }
  ...",1075.0,1125.0,1.0,1.0,51.0,50,9,68,33,0,3,6,6,0,0,,0,3,12,6,6,float
4238,31109,hdf5_data_param,1,opencv_caffe.LayerParameter._Internal.hdf5_data_param,HDF5DataParameter opencv_caffe.LayerParameter._Internal.hdf5_data_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::HDF5DataParameter&
LayerParameter::_Internal::hdf5_data_param(const LayerParameter* msg) {
  return *msg->hdf5_data_param_;
}",11241.0,11244.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,HDF5DataParameter
4239,129415,GetCachedSize,1,opencv_caffe.ConcatParameter.GetCachedSize,int opencv_caffe.ConcatParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },8026.0,8026.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
4240,260490,shape,1,opencv_tensorflow.AttrValue._Internal.shape,TensorShapeProto opencv_tensorflow.AttrValue._Internal.shape (AttrValue*),misc\tensorflow\attr_value.pb.cc,"const ::opencv_tensorflow::TensorShapeProto&
AttrValue::_Internal::shape(const AttrValue* msg) {
  return *msg->value_.shape_;
}",606.0,609.0,1.0,1.0,4.0,3,3,1,1,1,1,1,1,0,0,,0,1,2,1,1,TensorShapeProto
4241,31119,hdf5_output_param,1,opencv_caffe.LayerParameter._Internal.hdf5_output_param,HDF5OutputParameter opencv_caffe.LayerParameter._Internal.hdf5_output_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::HDF5OutputParameter&
LayerParameter::_Internal::hdf5_output_param(const LayerParameter* msg) {
  return *msg->hdf5_output_param_;
}",11245.0,11248.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,HDF5OutputParameter
4242,63888,MergeFrom,1,opencv_caffe.HDF5OutputParameter.MergeFrom,void opencv_caffe.HDF5OutputParameter.MergeFrom (HDF5OutputParameter),misc\caffe\opencv-caffe.pb.cc,"void HDF5OutputParameter::MergeFrom(const HDF5OutputParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.HDF5OutputParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_file_name()) {
    _internal_set_file_name(from._internal_file_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",20826.0,20836.0,1.0,1.0,11.0,10,6,8,4,3,0,2,2,0,0,,0,0,2,1,1,void
4243,80273,GetMetadata,1,opencv_caffe.ReLUParameter.GetMetadata,Metadata opencv_caffe.ReLUParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata ReLUParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[53]);
}",25874.0,25878.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
4244,309647,DepthwiseConv2DOptionsBuilder,1,opencv_tflite.DepthwiseConv2DOptionsBuilder.DepthwiseConv2DOptionsBuilder,ANY opencv_tflite.DepthwiseConv2DOptionsBuilder.DepthwiseConv2DOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit DepthwiseConv2DOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",3461.0,3464.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
4245,358802,size,1,cv.dnn.cuda4dnn.csl.Span.size,size_type cv.dnn.cuda4dnn.csl.Span.size (),src\cuda4dnn\csl\span.hpp,size_type size() const noexcept { return sz; },41.0,41.0,30.0,75.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,size_type
4246,293269,descriptor_table_tensor_2eproto_getter,1,descriptor_table_tensor_2eproto_getter,DescriptorTable descriptor_table_tensor_2eproto_getter (),misc\tensorflow\tensor.pb.cc,"const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_tensor_2eproto_getter() {
  return &descriptor_table_tensor_2eproto;
}",108.0,110.0,25.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,DescriptorTable
4247,260502,tensor,1,opencv_tensorflow.AttrValue._Internal.tensor,TensorProto opencv_tensorflow.AttrValue._Internal.tensor (AttrValue*),misc\tensorflow\attr_value.pb.cc,"const ::opencv_tensorflow::TensorProto&
AttrValue::_Internal::tensor(const AttrValue* msg) {
  return *msg->value_.tensor_;
}",610.0,613.0,1.0,1.0,4.0,3,3,1,1,1,1,1,1,0,0,,0,1,2,1,1,TensorProto
4248,31129,hinge_loss_param,1,opencv_caffe.LayerParameter._Internal.hinge_loss_param,HingeLossParameter opencv_caffe.LayerParameter._Internal.hinge_loss_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::HingeLossParameter&
LayerParameter::_Internal::hinge_loss_param(const LayerParameter* msg) {
  return *msg->hinge_loss_param_;
}",11249.0,11252.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,HingeLossParameter
4249,309658,Finish,1,opencv_tflite.DepthwiseConv2DOptionsBuilder.Finish,Offset<DepthwiseConv2DOptions> opencv_tflite.DepthwiseConv2DOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<DepthwiseConv2DOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DepthwiseConv2DOptions>(end);
    return o;
  }",3465.0,3469.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<DepthwiseConv2DOptions>
4250,358816,operator [],1,cv.dnn.cuda4dnn.csl.Span.operator [],reference cv.dnn.cuda4dnn.csl.Span.operator [] (index_type),src\cuda4dnn\csl\span.hpp,reference operator[](index_type index) const { return ptr[index]; },44.0,44.0,25.0,91.0,1.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,reference
4251,260514,list,1,opencv_tensorflow.AttrValue._Internal.list,AttrValue_ListValue opencv_tensorflow.AttrValue._Internal.list (AttrValue*),misc\tensorflow\attr_value.pb.cc,"const ::opencv_tensorflow::AttrValue_ListValue&
AttrValue::_Internal::list(const AttrValue* msg) {
  return *msg->value_.list_;
}",614.0,617.0,1.0,1.0,4.0,3,3,1,1,1,1,1,1,0,0,,0,1,2,1,1,AttrValue_ListValue
4252,31139,image_data_param,1,opencv_caffe.LayerParameter._Internal.image_data_param,ImageDataParameter opencv_caffe.LayerParameter._Internal.image_data_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::ImageDataParameter&
LayerParameter::_Internal::image_data_param(const LayerParameter* msg) {
  return *msg->image_data_param_;
}",11253.0,11256.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,ImageDataParameter
4253,276900,SharedCtor,1,opencv_tensorflow.NodeDef.SharedCtor,void opencv_tensorflow.NodeDef.SharedCtor (),misc\tensorflow\graph.pb.cc,"inline void NodeDef::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
op_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  op_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  device_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}",526.0,539.0,1.0,1.0,14.0,12,2,9,5,0,3,1,1,0,0,,0,3,0,0,0,void
4254,293288,tensor_shape,1,opencv_tensorflow.TensorProto._Internal.tensor_shape,TensorShapeProto opencv_tensorflow.TensorProto._Internal.tensor_shape (TensorProto*),misc\tensorflow\tensor.pb.cc,"const ::opencv_tensorflow::TensorShapeProto&
TensorProto::_Internal::tensor_shape(const TensorProto* msg) {
  return *msg->tensor_shape_;
}",123.0,126.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,TensorShapeProto
4255,358825,data,1,cv.dnn.cuda4dnn.csl.Span.data,pointer cv.dnn.cuda4dnn.csl.Span.data (),src\cuda4dnn\csl\span.hpp,pointer data() const noexcept { return ptr; },45.0,45.0,30.0,74.0,1.0,0,0,1,1,0,1,1,1,0,0,,0,1,0,0,0,pointer
4256,14762,SharedCtor,1,opencv_caffe.Datum.SharedCtor,void opencv_caffe.Datum.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void Datum::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channels_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&encoded_) -
    reinterpret_cast<char*>(&channels_)) + sizeof(encoded_));
}",6758.0,6767.0,1.0,1.0,10.0,20,6,7,5,0,5,1,1,0,0,,0,5,0,0,0,void
4257,31149,infogain_loss_param,1,opencv_caffe.LayerParameter._Internal.infogain_loss_param,InfogainLossParameter opencv_caffe.LayerParameter._Internal.infogain_loss_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::InfogainLossParameter&
LayerParameter::_Internal::infogain_loss_param(const LayerParameter* msg) {
  return *msg->infogain_loss_param_;
}",11257.0,11260.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,InfogainLossParameter
4258,260526,func,1,opencv_tensorflow.AttrValue._Internal.func,NameAttrList opencv_tensorflow.AttrValue._Internal.func (AttrValue*),misc\tensorflow\attr_value.pb.cc,"const ::opencv_tensorflow::NameAttrList&
AttrValue::_Internal::func(const AttrValue* msg) {
  return *msg->value_.func_;
}",618.0,621.0,1.0,1.0,4.0,3,3,1,1,1,1,1,1,0,0,,0,1,2,1,1,NameAttrList
4259,358831,Span,1,cv.dnn.cuda4dnn.csl.Span.operator cv.dnn.cuda4dnn.csl.Span<#10001>,"ANY cv.dnn.cuda4dnn.csl.Span.operator cv.dnn.cuda4dnn.csl.Span<#10001><U,V,std::enable_if<!std::is_const<U>::value,bool>::type=true> ()",src\cuda4dnn\csl\span.hpp,"operator Span<V>() const noexcept { return Span<V>{ptr, sz}; }",49.0,49.0,34.0,95.0,1.0,1,1,2,2,0,2,1,1,0,0,,0,2,0,0,0,ANY
4260,293298,clear_tensor_shape,1,opencv_tensorflow.TensorProto.clear_tensor_shape,void opencv_tensorflow.TensorProto.clear_tensor_shape (),misc\tensorflow\tensor.pb.cc,"void TensorProto::clear_tensor_shape() {
  if (GetArenaForAllocation() == nullptr && tensor_shape_ != nullptr) {
    delete tensor_shape_;
  }
  tensor_shape_ = nullptr;
}",127.0,132.0,1.0,1.0,6.0,5,5,3,1,0,3,2,2,1,0,,0,3,0,0,0,void
4261,31159,inner_product_param,1,opencv_caffe.LayerParameter._Internal.inner_product_param,InnerProductParameter opencv_caffe.LayerParameter._Internal.inner_product_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::InnerProductParameter&
LayerParameter::_Internal::inner_product_param(const LayerParameter* msg) {
  return *msg->inner_product_param_;
}",11261.0,11264.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,InnerProductParameter
4262,358840,ptr,3,cv.dnn.cuda4dnn.csl.Span.ptr,,src\cuda4dnn\csl\span.hpp,ptr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
4263,358841,sz,3,cv.dnn.cuda4dnn.csl.Span.sz,,src\cuda4dnn\csl\span.hpp,sz,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4264,260538,set_allocated_shape,1,opencv_tensorflow.AttrValue.set_allocated_shape,void opencv_tensorflow.AttrValue.set_allocated_shape (ANY*),misc\tensorflow\attr_value.pb.cc,"void AttrValue::set_allocated_shape(::opencv_tensorflow::TensorShapeProto* shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape));
    if (message_arena != submessage_arena) {
      shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    set_has_shape();
    value_.shape_ = shape;
  }
  // @@protoc_insertion_point(field_set_allocated:opencv_tensorflow.AttrValue.shape)
}",622.0,638.0,1.0,1.0,17.0,15,6,17,7,0,2,3,4,0,0,,0,2,2,1,1,void
4265,31169,input_param,1,opencv_caffe.LayerParameter._Internal.input_param,InputParameter opencv_caffe.LayerParameter._Internal.input_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::InputParameter&
LayerParameter::_Internal::input_param(const LayerParameter* msg) {
  return *msg->input_param_;
}",11265.0,11268.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,InputParameter
4266,80331,shape,1,opencv_caffe.ReshapeParameter._Internal.shape,BlobShape opencv_caffe.ReshapeParameter._Internal.shape (ReshapeParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::BlobShape&
ReshapeParameter::_Internal::shape(const ReshapeParameter* msg) {
  return *msg->shape_;
}",25897.0,25900.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,BlobShape
4267,31179,log_param,1,opencv_caffe.LayerParameter._Internal.log_param,LogParameter opencv_caffe.LayerParameter._Internal.log_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::LogParameter&
LayerParameter::_Internal::log_param(const LayerParameter* msg) {
  return *msg->log_param_;
}",11269.0,11272.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,LogParameter
4268,63947,InternalSwap,1,opencv_caffe.HDF5OutputParameter.InternalSwap,void opencv_caffe.HDF5OutputParameter.InternalSwap (HDF5OutputParameter*),misc\caffe\opencv-caffe.pb.cc,"void HDF5OutputParameter::InternalSwap(HDF5OutputParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_name_, lhs_arena,
      &other->file_name_, rhs_arena
  );
}",20849.0,20860.0,1.0,1.0,12.0,18,5,16,9,0,4,1,1,0,0,,0,4,2,1,1,void
4269,31189,lrn_param,1,opencv_caffe.LayerParameter._Internal.lrn_param,LRNParameter opencv_caffe.LayerParameter._Internal.lrn_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::LRNParameter&
LayerParameter::_Internal::lrn_param(const LayerParameter* msg) {
  return *msg->lrn_param_;
}",11273.0,11276.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,LRNParameter
4270,276952,SharedDtor,1,opencv_tensorflow.NodeDef.SharedDtor,void opencv_tensorflow.NodeDef.SharedDtor (),misc\tensorflow\graph.pb.cc,"inline void NodeDef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  op_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}",548.0,553.0,1.0,1.0,6.0,13,3,9,5,0,3,1,1,0,0,,0,3,0,0,0,void
4271,47580,InternalSwap,1,opencv_caffe.BiasParameter.InternalSwap,void opencv_caffe.BiasParameter.InternalSwap (BiasParameter*),misc\caffe\opencv-caffe.pb.cc,"void BiasParameter::InternalSwap(BiasParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(filler_, other->filler_);
  swap(axis_, other->axis_);
  swap(num_axes_, other->num_axes_);
}",15958.0,15965.0,1.0,1.0,8.0,9,4,10,6,0,8,1,1,0,0,,0,8,2,1,1,void
4272,31199,memory_data_param,1,opencv_caffe.LayerParameter._Internal.memory_data_param,MemoryDataParameter opencv_caffe.LayerParameter._Internal.memory_data_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::MemoryDataParameter&
LayerParameter::_Internal::memory_data_param(const LayerParameter* msg) {
  return *msg->memory_data_param_;
}",11277.0,11280.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,MemoryDataParameter
4273,14825,SharedDtor,1,opencv_caffe.Datum.SharedDtor,void opencv_caffe.Datum.SharedDtor (),misc\caffe\opencv-caffe.pb.cc,"inline void Datum::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}",6776.0,6779.0,1.0,1.0,4.0,5,3,3,3,0,1,1,1,0,0,,0,1,0,0,0,void
4274,31209,mvn_param,1,opencv_caffe.LayerParameter._Internal.mvn_param,MVNParameter opencv_caffe.LayerParameter._Internal.mvn_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::MVNParameter&
LayerParameter::_Internal::mvn_param(const LayerParameter* msg) {
  return *msg->mvn_param_;
}",11281.0,11284.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,MVNParameter
4275,227818,_InternalSerialize,1,opencv_onnx.NodeProto._InternalSerialize,"uint8_t opencv_onnx.NodeProto._InternalSerialize (uint8_t*,ANY*)",misc\onnx\opencv-onnx.pb.cc,"uint8_t* NodeProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_onnx.NodeProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string input = 1;
  for (int i = 0, n = this->_internal_input_size(); i < n; i++) {
    const auto& s = this->_internal_input(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      ""opencv_onnx.NodeProto.input"");
    target = stream->WriteString(1, s, target);
  }

  // repeated string output = 2;
  for (int i = 0, n = this->_internal_output_size(); i < n; i++) {
    const auto& s = this->_internal_output(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::intern...",2018.0,2099.0,1.0,1.0,82.0,121,8,106,13,0,1,9,9,0,0,,0,1,4,2,2,uint8_t
4276,309740,fbb_,3,opencv_tflite.ConcatEmbeddingsOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
4277,309741,start_,3,opencv_tflite.ConcatEmbeddingsOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4278,309742,add_num_channels,1,opencv_tflite.ConcatEmbeddingsOptionsBuilder.add_num_channels,void opencv_tflite.ConcatEmbeddingsOptionsBuilder.add_num_channels (int32_t),misc\tflite\schema_generated.hpp,"void add_num_channels(int32_t num_channels) {
    fbb_.AddElement<int32_t>(ConcatEmbeddingsOptions::VT_NUM_CHANNELS, num_channels, 0);
  }",3523.0,3525.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4279,260593,clear_shape,1,opencv_tensorflow.AttrValue.clear_shape,void opencv_tensorflow.AttrValue.clear_shape (),misc\tensorflow\attr_value.pb.cc,"void AttrValue::clear_shape() {
  if (_internal_has_shape()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.shape_;
    }
    clear_has_value();
  }
}",639.0,646.0,1.0,1.0,8.0,3,3,1,1,0,2,3,4,0,0,,0,2,0,0,0,void
4280,31219,norm_param,1,opencv_caffe.LayerParameter._Internal.norm_param,NormalizeBBoxParameter opencv_caffe.LayerParameter._Internal.norm_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::NormalizeBBoxParameter&
LayerParameter::_Internal::norm_param(const LayerParameter* msg) {
  return *msg->norm_param_;
}",11285.0,11288.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,NormalizeBBoxParameter
4281,113145,GetCachedSize,1,opencv_caffe.BlobProto.GetCachedSize,int opencv_caffe.BlobProto.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },1297.0,1297.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
4282,31229,permute_param,1,opencv_caffe.LayerParameter._Internal.permute_param,PermuteParameter opencv_caffe.LayerParameter._Internal.permute_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::PermuteParameter&
LayerParameter::_Internal::permute_param(const LayerParameter* msg) {
  return *msg->permute_param_;
}",11289.0,11292.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,PermuteParameter
4283,309760,add_num_columns_per_channel,1,opencv_tflite.ConcatEmbeddingsOptionsBuilder.add_num_columns_per_channel,void opencv_tflite.ConcatEmbeddingsOptionsBuilder.add_num_columns_per_channel (ANY),misc\tflite\schema_generated.hpp,"void add_num_columns_per_channel(::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> num_columns_per_channel) {
    fbb_.AddOffset(ConcatEmbeddingsOptions::VT_NUM_COLUMNS_PER_CHANNEL, num_columns_per_channel);
  }",3526.0,3528.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
4284,276993,ArenaDtor,1,opencv_tensorflow.NodeDef.ArenaDtor,void opencv_tensorflow.NodeDef.ArenaDtor (void*),misc\tensorflow\graph.pb.cc,"void NodeDef::ArenaDtor(void* object) {
  NodeDef* _this = reinterpret_cast< NodeDef* >(object);
  (void)_this;
  _this->attr_. ~MapField();
}",555.0,559.0,1.0,1.0,5.0,5,4,4,2,0,1,1,1,0,0,,0,1,2,1,1,void
4285,47617,GetMetadata,1,opencv_caffe.BiasParameter.GetMetadata,Metadata opencv_caffe.BiasParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata BiasParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[22]);
}",15967.0,15971.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
4286,260610,set_allocated_tensor,1,opencv_tensorflow.AttrValue.set_allocated_tensor,void opencv_tensorflow.AttrValue.set_allocated_tensor (ANY*),misc\tensorflow\attr_value.pb.cc,"void AttrValue::set_allocated_tensor(::opencv_tensorflow::TensorProto* tensor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (tensor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tensor));
    if (message_arena != submessage_arena) {
      tensor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tensor, submessage_arena);
    }
    set_has_tensor();
    value_.tensor_ = tensor;
  }
  // @@protoc_insertion_point(field_set_allocated:opencv_tensorflow.AttrValue.tensor)
}",647.0,663.0,1.0,1.0,17.0,15,6,17,7,0,2,3,4,0,0,,0,2,2,1,1,void
4287,64003,GetMetadata,1,opencv_caffe.HDF5OutputParameter.GetMetadata,Metadata opencv_caffe.HDF5OutputParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata HDF5OutputParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[37]);
}",20862.0,20866.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
4288,31239,parameter_param,1,opencv_caffe.LayerParameter._Internal.parameter_param,ParameterParameter opencv_caffe.LayerParameter._Internal.parameter_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::ParameterParameter&
LayerParameter::_Internal::parameter_param(const LayerParameter* msg) {
  return *msg->parameter_param_;
}",11293.0,11296.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,ParameterParameter
4289,309773,add_embedding_dim_per_channel,1,opencv_tflite.ConcatEmbeddingsOptionsBuilder.add_embedding_dim_per_channel,void opencv_tflite.ConcatEmbeddingsOptionsBuilder.add_embedding_dim_per_channel (ANY),misc\tflite\schema_generated.hpp,"void add_embedding_dim_per_channel(::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> embedding_dim_per_channel) {
    fbb_.AddOffset(ConcatEmbeddingsOptions::VT_EMBEDDING_DIM_PER_CHANNEL, embedding_dim_per_channel);
  }",3529.0,3531.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
4290,129551,_has_bits_,3,opencv_caffe.ConcatParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
4291,129552,_cached_size_,3,opencv_caffe.ConcatParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
4292,129553,concat_dim_,3,opencv_caffe.ConcatParameter.concat_dim_,,misc\caffe\opencv-caffe.pb.hpp,concat_dim_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
4293,31249,pooling_param,1,opencv_caffe.LayerParameter._Internal.pooling_param,PoolingParameter opencv_caffe.LayerParameter._Internal.pooling_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::PoolingParameter&
LayerParameter::_Internal::pooling_param(const LayerParameter* msg) {
  return *msg->pooling_param_;
}",11297.0,11300.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,PoolingParameter
4294,129554,axis_,3,opencv_caffe.ConcatParameter.axis_,,misc\caffe\opencv-caffe.pb.hpp,axis_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
4295,14863,SetCachedSize,1,opencv_caffe.Datum.SetCachedSize,void opencv_caffe.Datum.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void Datum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",6787.0,6789.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
4296,116930,confidence_threshold_,3,opencv_caffe.DetectionOutputParameter.confidence_threshold_,,misc\caffe\opencv-caffe.pb.hpp,confidence_threshold_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
4297,47637,set_has_margin,1,opencv_caffe._Internal.set_has_margin,void opencv_caffe._Internal.set_has_margin (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_margin(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }",15978.0,15980.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
4298,14873,Clear,1,opencv_caffe.Datum.Clear,void opencv_caffe.Datum.Clear (),misc\caffe\opencv-caffe.pb.cc,"void Datum::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.Datum)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  float_data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&channels_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&encoded_) -
        reinterpret_cast<char*>(&channels_)) + sizeof(encoded_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",6791.0,6809.0,1.0,1.0,19.0,20,9,14,7,0,8,3,3,0,0,,0,8,0,0,0,void
4299,309786,ConcatEmbeddingsOptionsBuilder,1,opencv_tflite.ConcatEmbeddingsOptionsBuilder.ConcatEmbeddingsOptionsBuilder,ANY opencv_tflite.ConcatEmbeddingsOptionsBuilder.ConcatEmbeddingsOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit ConcatEmbeddingsOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",3532.0,3535.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
4300,31259,power_param,1,opencv_caffe.LayerParameter._Internal.power_param,PowerParameter opencv_caffe.LayerParameter._Internal.power_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::PowerParameter&
LayerParameter::_Internal::power_param(const LayerParameter* msg) {
  return *msg->power_param_;
}",11301.0,11304.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,PowerParameter
4301,80413,SharedCtor,1,opencv_caffe.ReshapeParameter.SharedCtor,void opencv_caffe.ReshapeParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void ReshapeParameter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&shape_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&axis_) -
    reinterpret_cast<char*>(&shape_)) + sizeof(axis_));
num_axes_ = -1;
}",25925.0,25931.0,1.0,1.0,7.0,18,8,5,3,0,5,1,1,0,0,,0,5,0,0,0,void
4302,47648,set_has_legacy_version,1,opencv_caffe._Internal.set_has_legacy_version,void opencv_caffe._Internal.set_has_legacy_version (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_legacy_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }",15981.0,15983.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
4303,309797,Finish,1,opencv_tflite.ConcatEmbeddingsOptionsBuilder.Finish,Offset<ConcatEmbeddingsOptions> opencv_tflite.ConcatEmbeddingsOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<ConcatEmbeddingsOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ConcatEmbeddingsOptions>(end);
    return o;
  }",3536.0,3540.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<ConcatEmbeddingsOptions>
4304,31269,prelu_param,1,opencv_caffe.LayerParameter._Internal.prelu_param,PReLUParameter opencv_caffe.LayerParameter._Internal.prelu_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::PReLUParameter&
LayerParameter::_Internal::prelu_param(const LayerParameter* msg) {
  return *msg->prelu_param_;
}",11305.0,11308.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,PReLUParameter
4305,277032,SetCachedSize,1,opencv_tensorflow.NodeDef.SetCachedSize,void opencv_tensorflow.NodeDef.SetCachedSize (int),misc\tensorflow\graph.pb.cc,"void NodeDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",565.0,567.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
4306,293420,SharedCtor,1,opencv_tensorflow.TensorProto.SharedCtor,void opencv_tensorflow.TensorProto.SharedCtor (),misc\tensorflow\tensor.pb.cc,"inline void TensorProto::SharedCtor() {
tensor_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tensor_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tensor_shape_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&version_number_) -
    reinterpret_cast<char*>(&tensor_shape_)) + sizeof(version_number_));
}",182.0,191.0,1.0,1.0,10.0,20,6,7,5,0,5,1,1,0,0,,0,5,0,0,0,void
4307,31279,prior_box_param,1,opencv_caffe.LayerParameter._Internal.prior_box_param,PriorBoxParameter opencv_caffe.LayerParameter._Internal.prior_box_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::PriorBoxParameter&
LayerParameter::_Internal::prior_box_param(const LayerParameter* msg) {
  return *msg->prior_box_param_;
}",11309.0,11312.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,PriorBoxParameter
4308,277042,Clear,1,opencv_tensorflow.NodeDef.Clear,void opencv_tensorflow.NodeDef.Clear (),misc\tensorflow\graph.pb.cc,"void NodeDef::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_tensorflow.NodeDef)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_.Clear();
  attr_.Clear();
  name_.ClearToEmpty();
  op_.ClearToEmpty();
  device_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",569.0,581.0,1.0,1.0,13.0,8,3,8,7,0,5,1,1,0,0,,0,5,0,0,0,void
4309,31289,proposal_param,1,opencv_caffe.LayerParameter._Internal.proposal_param,ProposalParameter opencv_caffe.LayerParameter._Internal.proposal_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::ProposalParameter&
LayerParameter::_Internal::proposal_param(const LayerParameter* msg) {
  return *msg->proposal_param_;
}",11313.0,11316.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,ProposalParameter
4310,260665,clear_tensor,1,opencv_tensorflow.AttrValue.clear_tensor,void opencv_tensorflow.AttrValue.clear_tensor (),misc\tensorflow\attr_value.pb.cc,"void AttrValue::clear_tensor() {
  if (_internal_has_tensor()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.tensor_;
    }
    clear_has_value();
  }
}",664.0,671.0,1.0,1.0,8.0,3,3,1,1,0,2,3,4,0,0,,0,2,0,0,0,void
4311,309821,CreateConcatEmbeddingsOptions,1,opencv_tflite.CreateConcatEmbeddingsOptions,"Offset<ConcatEmbeddingsOptions> opencv_tflite.CreateConcatEmbeddingsOptions (ANY,int32_t,ANY,ANY)",misc\tflite\schema_generated.hpp,"inline ::flatbuffers::Offset<ConcatEmbeddingsOptions> CreateConcatEmbeddingsOptions(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t num_channels = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> num_columns_per_channel = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> embedding_dim_per_channel = 0) {
  ConcatEmbeddingsOptionsBuilder builder_(_fbb);
  builder_.add_embedding_dim_per_channel(embedding_dim_per_channel);
  builder_.add_num_columns_per_channel(num_columns_per_channel);
  builder_.add_num_channels(num_channels);
  return builder_.Finish();
}",3543.0,3553.0,1.0,1.0,11.0,4,1,8,5,1,0,1,1,0,0,,0,0,8,4,4,Offset<ConcatEmbeddingsOptions>
4312,145985,_has_bits_,3,opencv_caffe.RecurrentParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
4313,145986,_cached_size_,3,opencv_caffe.RecurrentParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
4314,31299,psroi_pooling_param,1,opencv_caffe.LayerParameter._Internal.psroi_pooling_param,PSROIPoolingParameter opencv_caffe.LayerParameter._Internal.psroi_pooling_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::PSROIPoolingParameter&
LayerParameter::_Internal::psroi_pooling_param(const LayerParameter* msg) {
  return *msg->psroi_pooling_param_;
}",11317.0,11320.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,PSROIPoolingParameter
4315,64068,SharedCtor,1,opencv_caffe.HingeLossParameter.SharedCtor,void opencv_caffe.HingeLossParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void HingeLossParameter::SharedCtor() {
norm_ = 1;
}",20895.0,20897.0,1.0,1.0,3.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,void
4316,145987,weight_filler_,3,opencv_caffe.RecurrentParameter.weight_filler_,,misc\caffe\opencv-caffe.pb.hpp,* weight_filler_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
4317,358980,~UniqueStream,1,cv.dnn.cuda4dnn.csl.UniqueStream.~UniqueStream,ANY cv.dnn.cuda4dnn.csl.UniqueStream.~UniqueStream (),src\cuda4dnn\csl\stream.hpp,"~UniqueStream() {
            try {
                /* cudaStreamDestroy does not throw if a valid stream is passed unless a previous
                 * asynchronous operation errored.
                 */
                if (stream != 0)
                    CUDA4DNN_CHECK_CUDA(cudaStreamDestroy(stream));
            } catch (const CUDAException& ex) {
                std::ostringstream os;
                os << ""Asynchronous exception caught during CUDA stream destruction.\n"";
                os << ex.what();
                os << ""Exception will be ignored.\n"";
                CV_LOG_WARNING(0, os.str().c_str());
            }
        }",53.0,67.0,9.0,20.0,15.0,12,3,14,5,0,3,3,4,1,0,,0,3,0,0,0,ANY
4318,145990,debug_info_,3,opencv_caffe.RecurrentParameter.debug_info_,,misc\caffe\opencv-caffe.pb.hpp,debug_info_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
4319,145991,expose_hidden_,3,opencv_caffe.RecurrentParameter.expose_hidden_,,misc\caffe\opencv-caffe.pb.hpp,expose_hidden_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
4320,145988,bias_filler_,3,opencv_caffe.RecurrentParameter.bias_filler_,,misc\caffe\opencv-caffe.pb.hpp,* bias_filler_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
4321,440902,verifyResult,1,cv.dnn.ocl4dnn.OCL4DNNConvSpatial<float>.verifyResult,"bool cv.dnn.ocl4dnn.OCL4DNNConvSpatial<float>.verifyResult<> (UMat,UMat,UMat,UMat,int32_t,kernelConfig*,UMat)",src\ocl4dnn\src\ocl4dnn_conv_spatial.cpp,"bool OCL4DNNConvSpatial<float>::verifyResult(const UMat &bottom,
                                             UMat &top,
                                             const UMat &weight,
                                             const UMat &bias,
                                             int32_t numImages,
                                             kernelConfig* config,
                                             UMat &verifyTop)
{
    if (config->verified)
        return true;
    else if (config->tested)
        return false;

    //int32_t sz[4] = {numImages, num_output_, output_h_, output_w_};
    CV_CheckEQ(top.total(), (size_t)numImages * num_output_ * output_h_ * output_w_, """");
    CV_CheckTypeEQ(top.type(), (use_half_) ? CV_16SC1 : CV_32FC1, """");
    top.setTo(Scalar::all(0));

    bool saved_tuned = tuned_;
    tuned_ = false;
    convolve(bottom, top, weight, bias, numImages, config);
    tuned_ = saved_tuned;

    config->tested = true;

    UMat new_top, new_ver...",1128.0,1253.0,1.0,1.0,126.0,117,16,120,45,0,3,11,21,1,0,,0,3,14,7,7,bool
4322,260682,set_allocated_list,1,opencv_tensorflow.AttrValue.set_allocated_list,void opencv_tensorflow.AttrValue.set_allocated_list (ANY*),misc\tensorflow\attr_value.pb.cc,"void AttrValue::set_allocated_list(::opencv_tensorflow::AttrValue_ListValue* list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opencv_tensorflow::AttrValue_ListValue>::GetOwningArena(list);
    if (message_arena != submessage_arena) {
      list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list, submessage_arena);
    }
    set_has_list();
    value_.list_ = list;
  }
  // @@protoc_insertion_point(field_set_allocated:opencv_tensorflow.AttrValue.list)
}",672.0,686.0,1.0,1.0,15.0,14,5,17,8,0,2,3,4,0,0,,0,2,2,1,1,void
4323,145989,num_output_,3,opencv_caffe.RecurrentParameter.num_output_,,misc\caffe\opencv-caffe.pb.hpp,num_output_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
4324,31309,python_param,1,opencv_caffe.LayerParameter._Internal.python_param,PythonParameter opencv_caffe.LayerParameter._Internal.python_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::PythonParameter&
LayerParameter::_Internal::python_param(const LayerParameter* msg) {
  return *msg->python_param_;
}",11321.0,11324.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,PythonParameter
4325,424527,numH,3,cv.dnn.RNNLayerImpl.numH,,src\layers\recurrent_layers.cpp,numH,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4326,424528,numO,3,cv.dnn.RNNLayerImpl.numO,,src\layers\recurrent_layers.cpp,numO,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4327,424529,numSamples,3,cv.dnn.RNNLayerImpl.numSamples,,src\layers\recurrent_layers.cpp,numSamples,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4328,424530,numTimestamps,3,cv.dnn.RNNLayerImpl.numTimestamps,,src\layers\recurrent_layers.cpp,numTimestamps,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4329,424532,dtype,3,cv.dnn.RNNLayerImpl.dtype,,src\layers\recurrent_layers.cpp,dtype,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4330,80469,SharedDtor,1,opencv_caffe.ReshapeParameter.SharedDtor,void opencv_caffe.ReshapeParameter.SharedDtor (),misc\caffe\opencv-caffe.pb.cc,"inline void ReshapeParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete shape_;
}",25940.0,25943.0,1.0,1.0,4.0,3,3,1,1,0,2,2,2,1,0,,0,2,0,0,0,void
4331,277077,_InternalParse,1,opencv_tensorflow.NodeDef._InternalParse,"const char* opencv_tensorflow.NodeDef._InternalParse (char*,ANY*)",misc\tensorflow\graph.pb.cc,"const char* NodeDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, ""opencv_tensorflow.NodeDef.name""));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string op = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_op();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
        ...",583.0,668.0,1.0,10.0,86.0,81,15,95,12,0,1,23,39,0,0,,0,1,4,2,2,const char*
4332,31319,recurrent_param,1,opencv_caffe.LayerParameter._Internal.recurrent_param,RecurrentParameter opencv_caffe.LayerParameter._Internal.recurrent_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::RecurrentParameter&
LayerParameter::_Internal::recurrent_param(const LayerParameter* msg) {
  return *msg->recurrent_param_;
}",11325.0,11328.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,RecurrentParameter
4333,14936,_InternalParse,1,opencv_caffe.Datum._InternalParse,"const char* opencv_caffe.Datum._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* Datum::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 channels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_channels(&has_bits);
          channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continu...",6811.0,6910.0,1.0,10.0,100.0,88,17,93,16,0,11,24,36,0,5,,0,6,4,2,2,const char*
4334,424538,produceH,3,cv.dnn.RNNLayerImpl.produceH,,src\layers\recurrent_layers.cpp,produceH,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
4335,424539,RNNLayerImpl,1,cv.dnn.RNNLayerImpl.RNNLayerImpl,ANY cv.dnn.RNNLayerImpl.RNNLayerImpl (LayerParams),src\layers\recurrent_layers.cpp,"RNNLayerImpl(const LayerParams& params)
        : numX(0), numH(0), numO(0), numSamples(0), numTimestamps(0), numSamplesTotal(0), dtype(0)
    {
        setParamsFrom(params);
        type = ""RNN"";
        produceH = false;
    }",804.0,810.0,5.0,5.0,7.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,ANY
4336,309852,CreateConcatEmbeddingsOptionsDirect,1,opencv_tflite.CreateConcatEmbeddingsOptionsDirect,"Offset<ConcatEmbeddingsOptions> opencv_tflite.CreateConcatEmbeddingsOptionsDirect (ANY,int32_t,ANY*,ANY*)",misc\tflite\schema_generated.hpp,"inline ::flatbuffers::Offset<ConcatEmbeddingsOptions> CreateConcatEmbeddingsOptionsDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t num_channels = 0,
    const std::vector<int32_t> *num_columns_per_channel = nullptr,
    const std::vector<int32_t> *embedding_dim_per_channel = nullptr) {
  auto num_columns_per_channel__ = num_columns_per_channel ? _fbb.CreateVector<int32_t>(*num_columns_per_channel) : 0;
  auto embedding_dim_per_channel__ = embedding_dim_per_channel ? _fbb.CreateVector<int32_t>(*embedding_dim_per_channel) : 0;
  return opencv_tflite::CreateConcatEmbeddingsOptions(
      _fbb,
      num_channels,
      num_columns_per_channel__,
      embedding_dim_per_channel__);
}",3555.0,3567.0,1.0,1.0,13.0,13,6,15,8,0,1,1,1,0,1,,0,0,8,4,4,Offset<ConcatEmbeddingsOptions>
4337,47712,SharedCtor,1,opencv_caffe.ContrastiveLossParameter.SharedCtor,void opencv_caffe.ContrastiveLossParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void ContrastiveLossParameter::SharedCtor() {
legacy_version_ = false;
margin_ = 1;
}",16005.0,16008.0,1.0,1.0,4.0,2,1,2,2,0,2,1,1,0,0,,0,2,0,0,0,void
4338,31329,reduction_param,1,opencv_caffe.LayerParameter._Internal.reduction_param,ReductionParameter opencv_caffe.LayerParameter._Internal.reduction_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::ReductionParameter&
LayerParameter::_Internal::reduction_param(const LayerParameter* msg) {
  return *msg->reduction_param_;
}",11329.0,11332.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,ReductionParameter
4339,31339,relu_param,1,opencv_caffe.LayerParameter._Internal.relu_param,ReLUParameter opencv_caffe.LayerParameter._Internal.relu_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::ReLUParameter&
LayerParameter::_Internal::relu_param(const LayerParameter* msg) {
  return *msg->relu_param_;
}",11333.0,11336.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,ReLUParameter
4340,293483,SharedDtor,1,opencv_tensorflow.TensorProto.SharedDtor,void opencv_tensorflow.TensorProto.SharedDtor (),misc\tensorflow\tensor.pb.cc,"inline void TensorProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tensor_content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tensor_shape_;
}",200.0,204.0,1.0,1.0,5.0,7,5,4,4,0,3,2,2,1,0,,0,3,0,0,0,void
4341,31349,reshape_param,1,opencv_caffe.LayerParameter._Internal.reshape_param,ReshapeParameter opencv_caffe.LayerParameter._Internal.reshape_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::ReshapeParameter&
LayerParameter::_Internal::reshape_param(const LayerParameter* msg) {
  return *msg->reshape_param_;
}",11337.0,11340.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,ReshapeParameter
4342,64117,SetCachedSize,1,opencv_caffe.HingeLossParameter.SetCachedSize,void opencv_caffe.HingeLossParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void HingeLossParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",20916.0,20918.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
4343,80503,SetCachedSize,1,opencv_caffe.ReshapeParameter.SetCachedSize,void opencv_caffe.ReshapeParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void ReshapeParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",25951.0,25953.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
4344,129660,descriptor,1,opencv_caffe.BatchNormParameter.descriptor,Descriptor opencv_caffe.BatchNormParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",8139.0,8141.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
4345,260735,set_allocated_func,1,opencv_tensorflow.AttrValue.set_allocated_func,void opencv_tensorflow.AttrValue.set_allocated_func (ANY*),misc\tensorflow\attr_value.pb.cc,"void AttrValue::set_allocated_func(::opencv_tensorflow::NameAttrList* func) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (func) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opencv_tensorflow::NameAttrList>::GetOwningArena(func);
    if (message_arena != submessage_arena) {
      func = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, func, submessage_arena);
    }
    set_has_func();
    value_.func_ = func;
  }
  // @@protoc_insertion_point(field_set_allocated:opencv_tensorflow.AttrValue.func)
}",687.0,701.0,1.0,1.0,15.0,14,5,17,8,0,2,3,4,0,0,,0,2,2,1,1,void
4346,64127,Clear,1,opencv_caffe.HingeLossParameter.Clear,void opencv_caffe.HingeLossParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void HingeLossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.HingeLossParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  norm_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",20920.0,20929.0,1.0,1.0,10.0,5,3,5,4,0,2,1,1,0,0,,0,2,0,0,0,void
4347,80513,Clear,1,opencv_caffe.ReshapeParameter.Clear,void opencv_caffe.ReshapeParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void ReshapeParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.ReshapeParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(shape_ != nullptr);
    shape_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    axis_ = 0;
    num_axes_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",25955.0,25972.0,1.0,1.0,18.0,13,8,12,6,0,6,3,3,0,0,,0,6,0,0,0,void
4348,129666,GetDescriptor,1,opencv_caffe.BatchNormParameter.GetDescriptor,Descriptor opencv_caffe.BatchNormParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",8142.0,8144.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
4349,31359,roi_pooling_param,1,opencv_caffe.LayerParameter._Internal.roi_pooling_param,ROIPoolingParameter opencv_caffe.LayerParameter._Internal.roi_pooling_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::ROIPoolingParameter&
LayerParameter::_Internal::roi_pooling_param(const LayerParameter* msg) {
  return *msg->roi_pooling_param_;
}",11341.0,11344.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,ROIPoolingParameter
4350,31369,scale_param,1,opencv_caffe.LayerParameter._Internal.scale_param,ScaleParameter opencv_caffe.LayerParameter._Internal.scale_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::ScaleParameter&
LayerParameter::_Internal::scale_param(const LayerParameter* msg) {
  return *msg->scale_param_;
}",11345.0,11348.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,ScaleParameter
4351,309900,fbb_,3,opencv_tflite.LSHProjectionOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
4352,309901,start_,3,opencv_tflite.LSHProjectionOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4353,424588,reshapeOutput,1,cv.dnn.RNNLayerImpl.reshapeOutput,void cv.dnn.RNNLayerImpl.reshapeOutput (ANY),src\layers\recurrent_layers.cpp,"void reshapeOutput(std::vector<Mat> &output)
    {
        output.resize(produceH ? 2 : 1);
        int sz0[] = { numTimestamps, numSamples, numO };
        output[0].create(3, sz0, dtype);
        if (produceH)
        {
            int sz1[] = { numTimestamps, numSamples, numH };
            output[1].create(3, sz1, dtype);
        }
    }",892.0,902.0,5.0,5.0,11.0,10,5,17,9,0,10,2,2,1,0,,0,10,2,1,1,void
4354,129677,GetReflection,1,opencv_caffe.BatchNormParameter.GetReflection,Reflection opencv_caffe.BatchNormParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",8145.0,8147.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
4355,309902,add_type,1,opencv_tflite.LSHProjectionOptionsBuilder.add_type,void opencv_tflite.LSHProjectionOptionsBuilder.add_type (ANY),misc\tflite\schema_generated.hpp,"void add_type(opencv_tflite::LSHProjectionType type) {
    fbb_.AddElement<int8_t>(LSHProjectionOptions::VT_TYPE, static_cast<int8_t>(type), 0);
  }",3588.0,3590.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4356,31379,sigmoid_param,1,opencv_caffe.LayerParameter._Internal.sigmoid_param,SigmoidParameter opencv_caffe.LayerParameter._Internal.sigmoid_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::SigmoidParameter&
LayerParameter::_Internal::sigmoid_param(const LayerParameter* msg) {
  return *msg->sigmoid_param_;
}",11349.0,11352.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,SigmoidParameter
4357,47764,SetCachedSize,1,opencv_caffe.ContrastiveLossParameter.SetCachedSize,void opencv_caffe.ContrastiveLossParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void ContrastiveLossParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",16027.0,16029.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
4358,64149,_InternalParse,1,opencv_caffe.HingeLossParameter._InternalParse,"const char* opencv_caffe.HingeLossParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* HingeLossParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .opencv_caffe.HingeLossParameter.Norm norm = 1 [default = L1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::opencv_caffe::HingeLossParameter_Norm_IsValid(val))) {
            _internal_set_norm(static_cast<::opencv_caffe::HingeLossParameter_Norm>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      d...",20931.0,20973.0,1.0,10.0,43.0,31,12,35,10,0,2,10,13,1,1,,0,2,4,2,2,const char*
4359,293528,SetCachedSize,1,opencv_tensorflow.TensorProto.SetCachedSize,void opencv_tensorflow.TensorProto.SetCachedSize (int),misc\tensorflow\tensor.pb.cc,"void TensorProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",212.0,214.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
4360,129688,default_instance,1,opencv_caffe.BatchNormParameter.default_instance,BatchNormParameter opencv_caffe.BatchNormParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const BatchNormParameter& default_instance() {
    return *internal_default_instance();
  }",8148.0,8150.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,BatchNormParameter
4361,31389,softmax_param,1,opencv_caffe.LayerParameter._Internal.softmax_param,SoftmaxParameter opencv_caffe.LayerParameter._Internal.softmax_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::SoftmaxParameter&
LayerParameter::_Internal::softmax_param(const LayerParameter* msg) {
  return *msg->softmax_param_;
}",11353.0,11356.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,SoftmaxParameter
4362,47774,Clear,1,opencv_caffe.ContrastiveLossParameter.Clear,void opencv_caffe.ContrastiveLossParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void ContrastiveLossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.ContrastiveLossParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    legacy_version_ = false;
    margin_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",16031.0,16044.0,1.0,1.0,14.0,9,5,9,5,0,4,2,2,0,0,,0,4,0,0,0,void
4363,129695,internal_default_instance,1,opencv_caffe.BatchNormParameter.internal_default_instance,BatchNormParameter opencv_caffe.BatchNormParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const BatchNormParameter* internal_default_instance() {
    return reinterpret_cast<const BatchNormParameter*>(
               &_BatchNormParameter_default_instance_);
  }",8151.0,8154.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,BatchNormParameter
4364,359073,get,1,cv.dnn.cuda4dnn.csl.UniqueStream.get,cudaStream_t cv.dnn.cuda4dnn.csl.UniqueStream.get (),src\cuda4dnn\csl\stream.hpp,"cudaStream_t get() const noexcept {
            CV_Assert(stream);
            return stream;
        }",81.0,84.0,9.0,9.0,4.0,0,0,2,1,0,2,1,1,0,0,,0,2,0,0,0,cudaStream_t
4365,293538,Clear,1,opencv_tensorflow.TensorProto.Clear,void opencv_tensorflow.TensorProto.Clear (),misc\tensorflow\tensor.pb.cc,"void TensorProto::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_tensorflow.TensorProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  float_val_.Clear();
  double_val_.Clear();
  int_val_.Clear();
  string_val_.Clear();
  scomplex_val_.Clear();
  int64_val_.Clear();
  bool_val_.Clear();
  dcomplex_val_.Clear();
  half_val_.Clear();
  tensor_content_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && tensor_shape_ != nullptr) {
    delete tensor_shape_;
  }
  tensor_shape_ = nullptr;
  ::memset(&dtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_number_) -
      reinterpret_cast<char*>(&dtype_)) + sizeof(version_number_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",216.0,240.0,1.0,1.0,25.0,28,11,20,15,0,17,2,2,1,0,,0,17,0,0,0,void
4366,309922,LSHProjectionOptionsBuilder,1,opencv_tflite.LSHProjectionOptionsBuilder.LSHProjectionOptionsBuilder,ANY opencv_tflite.LSHProjectionOptionsBuilder.LSHProjectionOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit LSHProjectionOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",3591.0,3594.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
4367,31399,spp_param,1,opencv_caffe.LayerParameter._Internal.spp_param,SPPParameter opencv_caffe.LayerParameter._Internal.spp_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::SPPParameter&
LayerParameter::_Internal::spp_param(const LayerParameter* msg) {
  return *msg->spp_param_;
}",11357.0,11360.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,SPPParameter
4368,359081,synchronize,1,cv.dnn.cuda4dnn.csl.UniqueStream.synchronize,void cv.dnn.cuda4dnn.csl.UniqueStream.synchronize (),src\cuda4dnn\csl\stream.hpp,"void synchronize() const {
            CV_Assert(stream);
            CUDA4DNN_CHECK_CUDA(cudaStreamSynchronize(stream));
        }",87.0,90.0,9.0,12.0,4.0,5,1,9,3,0,3,1,1,0,0,,0,3,0,0,0,void
4369,309933,Finish,1,opencv_tflite.LSHProjectionOptionsBuilder.Finish,Offset<LSHProjectionOptions> opencv_tflite.LSHProjectionOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<LSHProjectionOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LSHProjectionOptions>(end);
    return o;
  }",3595.0,3599.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<LSHProjectionOptions>
4370,31409,slice_param,1,opencv_caffe.LayerParameter._Internal.slice_param,SliceParameter opencv_caffe.LayerParameter._Internal.slice_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::SliceParameter&
LayerParameter::_Internal::slice_param(const LayerParameter* msg) {
  return *msg->slice_param_;
}",11361.0,11364.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,SliceParameter
4371,80562,_InternalParse,1,opencv_caffe.ReshapeParameter._InternalParse,"const char* opencv_caffe.ReshapeParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* ReshapeParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .opencv_caffe.BlobShape shape = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 axis = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_axis(&has_bits);
          axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int3...",25974.0,26029.0,1.0,10.0,56.0,45,12,49,11,0,5,13,15,0,2,,0,3,4,2,2,const char*
4372,146097,descriptor,1,opencv_caffe.ReductionParameter.descriptor,Descriptor opencv_caffe.ReductionParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",15110.0,15112.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
4373,146103,GetDescriptor,1,opencv_caffe.ReductionParameter.GetDescriptor,Descriptor opencv_caffe.ReductionParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",15113.0,15115.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
4374,31419,tanh_param,1,opencv_caffe.LayerParameter._Internal.tanh_param,TanHParameter opencv_caffe.LayerParameter._Internal.tanh_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::TanHParameter&
LayerParameter::_Internal::tanh_param(const LayerParameter* msg) {
  return *msg->tanh_param_;
}",11365.0,11368.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,TanHParameter
4375,47809,_InternalParse,1,opencv_caffe.ContrastiveLossParameter._InternalParse,"const char* opencv_caffe.ContrastiveLossParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* ContrastiveLossParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float margin = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_margin(&has_bits);
          margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool legacy_version = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_legacy_version(&has_bits);
          legacy_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&p...",16046.0,16093.0,1.0,10.0,48.0,40,14,43,12,0,5,11,12,0,2,,0,3,4,2,2,const char*
4376,146114,GetReflection,1,opencv_caffe.ReductionParameter.GetReflection,Reflection opencv_caffe.ReductionParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",15116.0,15118.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
4377,359108,busy,1,cv.dnn.cuda4dnn.csl.UniqueStream.busy,bool cv.dnn.cuda4dnn.csl.UniqueStream.busy (),src\cuda4dnn\csl\stream.hpp,"bool busy() const {
            CV_Assert(stream);

            auto status = cudaStreamQuery(stream);
            if (status == cudaErrorNotReady)
                return true;
            CUDA4DNN_CHECK_CUDA(status);
            return false;
        }",93.0,101.0,9.0,12.0,9.0,7,3,13,5,0,2,2,2,0,0,,0,2,0,0,0,bool
4378,31429,threshold_param,1,opencv_caffe.LayerParameter._Internal.threshold_param,ThresholdParameter opencv_caffe.LayerParameter._Internal.threshold_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::ThresholdParameter&
LayerParameter::_Internal::threshold_param(const LayerParameter* msg) {
  return *msg->threshold_param_;
}",11369.0,11372.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,ThresholdParameter
4379,146125,default_instance,1,opencv_caffe.ReductionParameter.default_instance,ReductionParameter opencv_caffe.ReductionParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const ReductionParameter& default_instance() {
    return *internal_default_instance();
  }",15119.0,15121.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,ReductionParameter
4380,31439,tile_param,1,opencv_caffe.LayerParameter._Internal.tile_param,TileParameter opencv_caffe.LayerParameter._Internal.tile_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::TileParameter&
LayerParameter::_Internal::tile_param(const LayerParameter* msg) {
  return *msg->tile_param_;
}",11373.0,11376.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,TileParameter
4381,247226,GetReflection,1,opencv_onnx.TensorShapeProto_Dimension.GetReflection,Reflection opencv_onnx.TensorShapeProto_Dimension.GetReflection (),misc\onnx\opencv-onnx.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",2646.0,2648.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
4382,146132,internal_default_instance,1,opencv_caffe.ReductionParameter.internal_default_instance,ReductionParameter opencv_caffe.ReductionParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const ReductionParameter* internal_default_instance() {
    return reinterpret_cast<const ReductionParameter*>(
               &_ReductionParameter_default_instance_);
  }",15122.0,15125.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,ReductionParameter
4383,244440,_has_bits_,3,opencv_onnx.ModelProto._has_bits_,,misc\onnx\opencv-onnx.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
4384,31449,window_data_param,1,opencv_caffe.LayerParameter._Internal.window_data_param,WindowDataParameter opencv_caffe.LayerParameter._Internal.window_data_param (LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::WindowDataParameter&
LayerParameter::_Internal::window_data_param(const LayerParameter* msg) {
  return *msg->window_data_param_;
}",11377.0,11380.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,WindowDataParameter
4385,244441,_cached_size_,3,opencv_onnx.ModelProto._cached_size_,,misc\onnx\opencv-onnx.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
4386,309979,fbb_,3,opencv_tflite.SVDFOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
4387,244444,producer_name_,3,opencv_onnx.ModelProto.producer_name_,,misc\onnx\opencv-onnx.pb.hpp,producer_name_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
4388,309981,add_rank,1,opencv_tflite.SVDFOptionsBuilder.add_rank,void opencv_tflite.SVDFOptionsBuilder.add_rank (int32_t),misc\tflite\schema_generated.hpp,"void add_rank(int32_t rank) {
    fbb_.AddElement<int32_t>(SVDFOptions::VT_RANK, rank, 0);
  }",3639.0,3641.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4389,244442,opset_import_,3,opencv_onnx.ModelProto.opset_import_,,misc\onnx\opencv-onnx.pb.hpp,opset_import_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
4390,244443,metadata_props_,3,opencv_onnx.ModelProto.metadata_props_,,misc\onnx\opencv-onnx.pb.hpp,metadata_props_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
4391,309980,start_,3,opencv_tflite.SVDFOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4392,244445,producer_version_,3,opencv_onnx.ModelProto.producer_version_,,misc\onnx\opencv-onnx.pb.hpp,producer_version_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
4393,244446,domain_,3,opencv_onnx.ModelProto.domain_,,misc\onnx\opencv-onnx.pb.hpp,domain_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
4394,244447,doc_string_,3,opencv_onnx.ModelProto.doc_string_,,misc\onnx\opencv-onnx.pb.hpp,doc_string_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
4395,96992,InternalSwap,1,opencv_caffe.V1LayerParameter.InternalSwap,void opencv_caffe.V1LayerParameter.InternalSwap (V1LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"void V1LayerParameter::InternalSwap(V1LayerParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  bottom_.InternalSwap(&other->bottom_);
  top_.InternalSwap(&other->top_);
  blobs_.InternalSwap(&other->blobs_);
  blobs_lr_.InternalSwap(&other->blobs_lr_);
  weight_decay_.InternalSwap(&other->weight_decay_);
  include_.InternalSwap(&other->include_);
  exclude_.InternalSwap(&other->exclude_);
  loss_weight_.InternalSwap(&other->loss_weight_);
  param_.InternalSwap(&other->param_);
  blob_share_mode_.InternalSwap(&other->blob_share_mode_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_N...",30758.0,30786.0,1.0,1.0,29.0,66,13,47,22,0,31,1,1,0,0,,0,31,2,1,1,void
4396,244450,model_version_,3,opencv_onnx.ModelProto.model_version_,,misc\onnx\opencv-onnx.pb.hpp,model_version_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
4397,244449,ir_version_,3,opencv_onnx.ModelProto.ir_version_,,misc\onnx\opencv-onnx.pb.hpp,ir_version_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
4398,244448,graph_,3,opencv_onnx.ModelProto.graph_,,misc\onnx\opencv-onnx.pb.hpp,* graph_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
4399,359147,operator bool,1,cv.dnn.cuda4dnn.csl.UniqueStream.operator bool,ANY cv.dnn.cuda4dnn.csl.UniqueStream.operator bool (),src\cuda4dnn\csl\stream.hpp,explicit operator bool() const noexcept { return static_cast<bool>(stream); },104.0,104.0,9.0,85.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,ANY
4400,309999,add_fused_activation_function,1,opencv_tflite.SVDFOptionsBuilder.add_fused_activation_function,void opencv_tflite.SVDFOptionsBuilder.add_fused_activation_function (ANY),misc\tflite\schema_generated.hpp,"void add_fused_activation_function(opencv_tflite::ActivationFunctionType fused_activation_function) {
    fbb_.AddElement<int8_t>(SVDFOptions::VT_FUSED_ACTIVATION_FUNCTION, static_cast<int8_t>(fused_activation_function), 0);
  }",3642.0,3644.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4401,139770,rand_skip_,3,opencv_caffe.ImageDataParameter.rand_skip_,,misc\caffe\opencv-caffe.pb.hpp,rand_skip_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
4402,359155,stream,3,cv.dnn.cuda4dnn.csl.UniqueStream.stream,,src\cuda4dnn\csl\stream.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,11,0,1,1,0,0,,0,0,0,0,0,
4403,293628,_InternalParse,1,opencv_tensorflow.TensorProto._InternalParse,"const char* opencv_tensorflow.TensorProto._InternalParse (char*,ANY*)",misc\tensorflow\tensor.pb.cc,"const char* TensorProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opencv_tensorflow.DataType dtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dtype(static_cast<::opencv_tensorflow::DataType>(val));
        } else
          goto handle_unusual;
        continue;
      // .opencv_tensorflow.TensorShapeProto tensor_shape = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tensor_shape(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
   ...",242.0,405.0,1.0,10.0,164.0,109,15,134,9,0,1,36,54,0,0,,0,1,4,2,2,const char*
4404,310019,add_asymmetric_quantize_inputs,1,opencv_tflite.SVDFOptionsBuilder.add_asymmetric_quantize_inputs,void opencv_tflite.SVDFOptionsBuilder.add_asymmetric_quantize_inputs (bool),misc\tflite\schema_generated.hpp,"void add_asymmetric_quantize_inputs(bool asymmetric_quantize_inputs) {
    fbb_.AddElement<uint8_t>(SVDFOptions::VT_ASYMMETRIC_QUANTIZE_INPUTS, static_cast<uint8_t>(asymmetric_quantize_inputs), 0);
  }",3645.0,3647.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4405,247237,default_instance,1,opencv_onnx.TensorShapeProto_Dimension.default_instance,TensorShapeProto_Dimension opencv_onnx.TensorShapeProto_Dimension.default_instance (),misc\onnx\opencv-onnx.pb.hpp,"static const TensorShapeProto_Dimension& default_instance() {
    return *internal_default_instance();
  }",2649.0,2651.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,TensorShapeProto_Dimension
4406,310039,SVDFOptionsBuilder,1,opencv_tflite.SVDFOptionsBuilder.SVDFOptionsBuilder,ANY opencv_tflite.SVDFOptionsBuilder.SVDFOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit SVDFOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",3648.0,3651.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
4407,129820,GetCachedSize,1,opencv_caffe.BatchNormParameter.GetCachedSize,int opencv_caffe.BatchNormParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },8199.0,8199.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
4408,359198,synchronize,1,cv.dnn.cuda4dnn.csl.Stream.synchronize,void cv.dnn.cuda4dnn.csl.Stream.synchronize (),src\cuda4dnn\csl\stream.hpp,"void synchronize() const {
            CV_Assert(stream);
            stream->synchronize();
        }",132.0,135.0,9.0,9.0,4.0,1,1,2,1,0,2,1,1,0,0,,0,2,0,0,0,void
4409,310050,Finish,1,opencv_tflite.SVDFOptionsBuilder.Finish,Offset<SVDFOptions> opencv_tflite.SVDFOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<SVDFOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SVDFOptions>(end);
    return o;
  }",3652.0,3656.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<SVDFOptions>
4410,359208,busy,1,cv.dnn.cuda4dnn.csl.Stream.busy,bool cv.dnn.cuda4dnn.csl.Stream.busy (),src\cuda4dnn\csl\stream.hpp,"bool busy() const {
            CV_Assert(stream);
            return stream->busy();
        }",138.0,141.0,9.0,9.0,4.0,1,1,2,1,0,2,1,1,0,0,,0,2,0,0,0,bool
4411,64304,_InternalSerialize,1,opencv_caffe.HingeLossParameter._InternalSerialize,"uint8_t opencv_caffe.HingeLossParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* HingeLossParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.HingeLossParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .opencv_caffe.HingeLossParameter.Norm norm = 1 [default = L1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_norm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_en...",20975.0,20995.0,1.0,1.0,21.0,23,8,25,10,0,1,3,3,0,0,,0,1,4,2,2,uint8_t
4412,359219,operator bool,1,cv.dnn.cuda4dnn.csl.Stream.operator bool,ANY cv.dnn.cuda4dnn.csl.Stream.operator bool (),src\cuda4dnn\csl\stream.hpp,"explicit operator bool() const noexcept {
            if (!stream)
                return false;
            return stream->operator bool();
        }",144.0,148.0,9.0,9.0,5.0,2,2,2,1,0,2,2,2,1,0,,0,2,0,0,0,ANY
4413,359234,get,1,cv.dnn.cuda4dnn.csl.Stream.get,cudaStream_t cv.dnn.cuda4dnn.csl.Stream.get (),src\cuda4dnn\csl\stream.hpp,"cudaStream_t get() const noexcept {
            CV_Assert(stream);
            return stream->get();
        }",150.0,153.0,9.0,9.0,4.0,1,1,2,1,0,2,1,1,0,0,,0,2,0,0,0,cudaStream_t
4414,244556,descriptor,1,opencv_onnx.StringStringEntryProto.descriptor,Descriptor opencv_onnx.StringStringEntryProto.descriptor (),misc\onnx\opencv-onnx.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",1530.0,1532.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
4415,359245,stream,3,cv.dnn.cuda4dnn.csl.Stream.stream,,src\cuda4dnn\csl\stream.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
4416,146257,GetCachedSize,1,opencv_caffe.ReductionParameter.GetCachedSize,int opencv_caffe.ReductionParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },15170.0,15170.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
4417,244562,GetDescriptor,1,opencv_onnx.StringStringEntryProto.GetDescriptor,Descriptor opencv_onnx.StringStringEntryProto.GetDescriptor (),misc\onnx\opencv-onnx.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",1533.0,1535.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
4418,310108,fbb_,3,opencv_tflite.RNNOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
4419,244573,GetReflection,1,opencv_onnx.StringStringEntryProto.GetReflection,Reflection opencv_onnx.StringStringEntryProto.GetReflection (),misc\onnx\opencv-onnx.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",1536.0,1538.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
4420,310109,start_,3,opencv_tflite.RNNOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4421,310110,add_fused_activation_function,1,opencv_tflite.RNNOptionsBuilder.add_fused_activation_function,void opencv_tflite.RNNOptionsBuilder.add_fused_activation_function (ANY),misc\tflite\schema_generated.hpp,"void add_fused_activation_function(opencv_tflite::ActivationFunctionType fused_activation_function) {
    fbb_.AddElement<int8_t>(RNNOptions::VT_FUSED_ACTIVATION_FUNCTION, static_cast<int8_t>(fused_activation_function), 0);
  }",3695.0,3697.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4422,244584,default_instance,1,opencv_onnx.StringStringEntryProto.default_instance,StringStringEntryProto opencv_onnx.StringStringEntryProto.default_instance (),misc\onnx\opencv-onnx.pb.hpp,"static const StringStringEntryProto& default_instance() {
    return *internal_default_instance();
  }",1539.0,1541.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,StringStringEntryProto
4423,47979,_InternalSerialize,1,opencv_caffe.ContrastiveLossParameter._InternalSerialize,"uint8_t opencv_caffe.ContrastiveLossParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* ContrastiveLossParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.ContrastiveLossParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float margin = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_margin(), target);
  }

  // optional bool legacy_version = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_legacy_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSe...",16095.0,16120.0,1.0,1.0,26.0,31,8,34,10,0,1,4,4,0,0,,0,1,4,2,2,uint8_t
4424,244591,internal_default_instance,1,opencv_onnx.StringStringEntryProto.internal_default_instance,StringStringEntryProto opencv_onnx.StringStringEntryProto.internal_default_instance (),misc\onnx\opencv-onnx.pb.hpp,"static inline const StringStringEntryProto* internal_default_instance() {
    return reinterpret_cast<const StringStringEntryProto*>(
               &_StringStringEntryProto_default_instance_);
  }",1542.0,1545.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,StringStringEntryProto
4425,310130,add_asymmetric_quantize_inputs,1,opencv_tflite.RNNOptionsBuilder.add_asymmetric_quantize_inputs,void opencv_tflite.RNNOptionsBuilder.add_asymmetric_quantize_inputs (bool),misc\tflite\schema_generated.hpp,"void add_asymmetric_quantize_inputs(bool asymmetric_quantize_inputs) {
    fbb_.AddElement<uint8_t>(RNNOptions::VT_ASYMMETRIC_QUANTIZE_INPUTS, static_cast<uint8_t>(asymmetric_quantize_inputs), 0);
  }",3698.0,3700.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4426,260981,SetCachedSize,1,opencv_tensorflow.AttrValue.SetCachedSize,void opencv_tensorflow.AttrValue.SetCachedSize (int),misc\tensorflow\attr_value.pb.cc,"void AttrValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",787.0,789.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
4427,260991,clear_value,1,opencv_tensorflow.AttrValue.clear_value,void opencv_tensorflow.AttrValue.clear_value (),misc\tensorflow\attr_value.pb.cc,"void AttrValue::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:opencv_tensorflow.AttrValue)
  switch (value_case()) {
    case kS: {
      value_.s_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kI: {
      // No need to clear
      break;
    }
    case kF: {
      // No need to clear
      break;
    }
    case kB: {
      // No need to clear
      break;
    }
    case kType: {
      // No need to clear
      break;
    }
    case kShape: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.shape_;
      }
      break;
    }
    case kTensor: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.tensor_;
      }
      break;
    }
    case kList: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.list_;
      }
      break;
    }
    case kFunc: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.func_;
  ...",791.0,847.0,1.0,1.0,57.0,20,6,19,13,0,25,17,10,0,0,,0,25,0,0,0,void
4428,64384,ByteSizeLong,1,opencv_caffe.HingeLossParameter.ByteSizeLong,size_t opencv_caffe.HingeLossParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t HingeLossParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.HingeLossParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .opencv_caffe.HingeLossParameter.Norm norm = 1 [default = L1];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_norm());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}",20997.0,21013.0,1.0,1.0,17.0,13,9,12,7,0,2,2,2,0,0,,0,2,0,0,0,size_t
4429,80769,_InternalSerialize,1,opencv_caffe.ReshapeParameter._InternalSerialize,"uint8_t opencv_caffe.ReshapeParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* ReshapeParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.ReshapeParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .opencv_caffe.BlobShape shape = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::shape(this), target, stream);
  }

  // optional int32 axis = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_axis(), target);
  }

  // optional int32 num_axes = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_N...",26031.0,26064.0,1.0,1.0,34.0,39,8,45,11,0,2,5,5,0,1,,0,2,4,2,2,uint8_t
4430,310150,RNNOptionsBuilder,1,opencv_tflite.RNNOptionsBuilder.RNNOptionsBuilder,ANY opencv_tflite.RNNOptionsBuilder.RNNOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit RNNOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",3701.0,3704.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
4431,228236,ByteSizeLong,1,opencv_onnx.NodeProto.ByteSizeLong,size_t opencv_onnx.NodeProto.ByteSizeLong (),misc\onnx\opencv-onnx.pb.cc,"size_t NodeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_onnx.NodeProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string input = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(input_.size());
  for (int i = 0, n = input_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      input_.Get(i));
  }

  // repeated string output = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(output_.size());
  for (int i = 0, n = output_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      output_.Get(i));
  }

  // repeated .opencv_onnx.AttributeProto attribute = 5;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->attribute_) {
    tota...",2101.0,2164.0,1.0,1.0,64.0,71,11,64,12,0,9,9,13,1,0,,0,9,0,0,0,size_t
4432,97168,GetMetadata,1,opencv_caffe.V1LayerParameter.GetMetadata,Metadata opencv_caffe.V1LayerParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata V1LayerParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[64]);
}",30788.0,30792.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
4433,310161,Finish,1,opencv_tflite.RNNOptionsBuilder.Finish,Offset<RNNOptions> opencv_tflite.RNNOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<RNNOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RNNOptions>(end);
    return o;
  }",3705.0,3709.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<RNNOptions>
4434,310213,fbb_,3,opencv_tflite.SequenceRNNOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
4435,310214,start_,3,opencv_tflite.SequenceRNNOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4436,310215,add_time_major,1,opencv_tflite.SequenceRNNOptionsBuilder.add_time_major,void opencv_tflite.SequenceRNNOptionsBuilder.add_time_major (bool),misc\tflite\schema_generated.hpp,"void add_time_major(bool time_major) {
    fbb_.AddElement<uint8_t>(SequenceRNNOptions::VT_TIME_MAJOR, static_cast<uint8_t>(time_major), 0);
  }",3751.0,3753.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4437,64464,MergeFrom,1,opencv_caffe.HingeLossParameter.MergeFrom,void opencv_caffe.HingeLossParameter.MergeFrom (HingeLossParameter),misc\caffe\opencv-caffe.pb.cc,"void HingeLossParameter::MergeFrom(const HingeLossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.HingeLossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_norm()) {
    _internal_set_norm(from._internal_norm());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",21028.0,21038.0,1.0,1.0,11.0,10,6,8,4,2,0,2,2,0,0,,0,0,2,1,1,void
4438,48087,ByteSizeLong,1,opencv_caffe.ContrastiveLossParameter.ByteSizeLong,size_t opencv_caffe.ContrastiveLossParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t ContrastiveLossParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.ContrastiveLossParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool legacy_version = 2 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional float margin = 1 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}",16122.0,16144.0,1.0,1.0,23.0,13,7,12,4,0,2,4,6,0,0,,0,2,0,0,0,size_t
4439,310235,add_fused_activation_function,1,opencv_tflite.SequenceRNNOptionsBuilder.add_fused_activation_function,void opencv_tflite.SequenceRNNOptionsBuilder.add_fused_activation_function (ANY),misc\tflite\schema_generated.hpp,"void add_fused_activation_function(opencv_tflite::ActivationFunctionType fused_activation_function) {
    fbb_.AddElement<int8_t>(SequenceRNNOptions::VT_FUSED_ACTIVATION_FUNCTION, static_cast<int8_t>(fused_activation_function), 0);
  }",3754.0,3756.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4440,130024,_has_bits_,3,opencv_caffe.BatchNormParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
4441,130025,_cached_size_,3,opencv_caffe.BatchNormParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
4442,130026,use_global_stats_,3,opencv_caffe.BatchNormParameter.use_global_stats_,,misc\caffe\opencv-caffe.pb.hpp,use_global_stats_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
4443,130027,scale_bias_,3,opencv_caffe.BatchNormParameter.scale_bias_,,misc\caffe\opencv-caffe.pb.hpp,scale_bias_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
4444,244716,GetCachedSize,1,opencv_onnx.StringStringEntryProto.GetCachedSize,int opencv_onnx.StringStringEntryProto.GetCachedSize (),misc\onnx\opencv-onnx.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },1590.0,1590.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
4445,130028,moving_average_fraction_,3,opencv_caffe.BatchNormParameter.moving_average_fraction_,,misc\caffe\opencv-caffe.pb.hpp,moving_average_fraction_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
4446,392174,fusedNodeOp,3,cv.dnn.Subgraph.fusedNodeOp,,src\graph_simplifier.hpp,fusedNodeOp,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4447,392173,inputs,3,cv.dnn.Subgraph.inputs,,src\graph_simplifier.hpp,inputs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4448,392175,fusedNodeInputs,3,cv.dnn.Subgraph.fusedNodeInputs,,src\graph_simplifier.hpp,fusedNodeInputs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
4449,130029,eps_,3,opencv_caffe.BatchNormParameter.eps_,,misc\caffe\opencv-caffe.pb.hpp,eps_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
4450,392172,nodes,3,cv.dnn.Subgraph.nodes,,src\graph_simplifier.hpp,nodes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
4451,310255,add_asymmetric_quantize_inputs,1,opencv_tflite.SequenceRNNOptionsBuilder.add_asymmetric_quantize_inputs,void opencv_tflite.SequenceRNNOptionsBuilder.add_asymmetric_quantize_inputs (bool),misc\tflite\schema_generated.hpp,"void add_asymmetric_quantize_inputs(bool asymmetric_quantize_inputs) {
    fbb_.AddElement<uint8_t>(SequenceRNNOptions::VT_ASYMMETRIC_QUANTIZE_INPUTS, static_cast<uint8_t>(asymmetric_quantize_inputs), 0);
  }",3757.0,3759.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4452,15348,_InternalSerialize,1,opencv_caffe.Datum._InternalSerialize,"uint8_t opencv_caffe.Datum._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* Datum::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.Datum)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 channels = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_channels(), target);
  }

  // optional int32 height = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // optional int32 width = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_width(), tar...",6912.0,6967.0,1.0,1.0,56.0,70,8,78,12,0,1,9,9,0,0,,0,1,4,2,2,uint8_t
4453,310275,SequenceRNNOptionsBuilder,1,opencv_tflite.SequenceRNNOptionsBuilder.SequenceRNNOptionsBuilder,ANY opencv_tflite.SequenceRNNOptionsBuilder.SequenceRNNOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit SequenceRNNOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",3760.0,3763.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
4454,392195,HalideScheduler,1,cv.dnn.HalideScheduler.HalideScheduler,ANY cv.dnn.HalideScheduler.HalideScheduler (ANY),src\halide_scheduler.cpp,"HalideScheduler::HalideScheduler(const std::string& configFile)
{
    if (!configFile.empty())
        fs = FileStorage(configFile, FileStorage::READ);
}",235.0,239.0,1.0,1.0,5.0,4,3,4,3,0,1,2,2,0,0,,0,1,2,1,1,ANY
4455,80907,ByteSizeLong,1,opencv_caffe.ReshapeParameter.ByteSizeLong,size_t opencv_caffe.ReshapeParameter.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t ReshapeParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.ReshapeParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .opencv_caffe.BlobShape shape = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shape_);
    }

    // optional int32 axis = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_axis());
    }

    // optional int32 num_axes = 3 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_num_axes());
    }

  }...",26066.0,26095.0,1.0,1.0,30.0,26,10,24,8,0,3,5,8,0,0,,0,3,0,0,0,size_t
4456,64523,InternalSwap,1,opencv_caffe.HingeLossParameter.InternalSwap,void opencv_caffe.HingeLossParameter.InternalSwap (HingeLossParameter*),misc\caffe\opencv-caffe.pb.cc,"void HingeLossParameter::InternalSwap(HingeLossParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(norm_, other->norm_);
}",21051.0,21056.0,1.0,1.0,6.0,7,4,6,4,0,4,1,1,0,0,,0,4,2,1,1,void
4457,310286,Finish,1,opencv_tflite.SequenceRNNOptionsBuilder.Finish,Offset<SequenceRNNOptions> opencv_tflite.SequenceRNNOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<SequenceRNNOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SequenceRNNOptions>(end);
    return o;
  }",3764.0,3768.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<SequenceRNNOptions>
4458,392214,~HalideScheduler,1,cv.dnn.HalideScheduler.~HalideScheduler,ANY cv.dnn.HalideScheduler.~HalideScheduler (),src\halide_scheduler.cpp,"HalideScheduler::~HalideScheduler()
{
    if (fs.isOpened())
        fs.release();
}",241.0,245.0,1.0,1.0,5.0,2,1,2,1,0,2,2,2,1,0,,0,2,0,0,0,ANY
4459,375843,forward,1,cv.dnn.cuda4dnn.PoolingOp.forward,"void cv.dnn.cuda4dnn.PoolingOp.forward (ANY,ANY,ANY)",src\cuda4dnn\primitives\pooling.hpp,"void forward(
            const std::vector<cv::Ptr<BackendWrapper>>& inputs,
            const std::vector<cv::Ptr<BackendWrapper>>& outputs,
            csl::Workspace& workspace) override
        {
            CV_Assert(inputs.size() == 1 && outputs.size() == 1);

            auto input_wrapper = inputs[0].dynamicCast<wrapper_type>();
            auto input = input_wrapper->getView();

            if (!transformedInput.empty())
            {
                inputTransformer.transform(input, transformedInput);
                input = csl::TensorView<T>(transformedInput);
            }

            auto output_wrapper = outputs[0].dynamicCast<wrapper_type>();
            auto output = output_wrapper->getSpan();

            pooler.pool(input, output);
        }",226.0,246.0,9.0,9.0,21.0,21,7,20,10,0,5,2,2,1,0,,0,5,6,3,3,void
4460,64550,GetMetadata,1,opencv_caffe.HingeLossParameter.GetMetadata,Metadata opencv_caffe.HingeLossParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata HingeLossParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[38]);
}",21058.0,21062.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
4461,48171,MergeFrom,1,opencv_caffe.ContrastiveLossParameter.MergeFrom,void opencv_caffe.ContrastiveLossParameter.MergeFrom (ContrastiveLossParameter),misc\caffe\opencv-caffe.pb.cc,"void ContrastiveLossParameter::MergeFrom(const ContrastiveLossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.ContrastiveLossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      legacy_version_ = from.legacy_version_;
    }
    if (cached_has_bits & 0x00000002u) {
      margin_ = from.margin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",16159.0,16176.0,1.0,1.0,18.0,19,8,17,7,2,6,4,6,0,0,,0,6,2,1,1,void
4462,113714,_has_bits_,3,opencv_caffe.BlobProto._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
4463,113715,_cached_size_,3,opencv_caffe.BlobProto._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
4464,113716,data_,3,opencv_caffe.BlobProto.data_,,misc\caffe\opencv-caffe.pb.hpp,data_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
4465,113717,diff_,3,opencv_caffe.BlobProto.diff_,,misc\caffe\opencv-caffe.pb.hpp,diff_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
4466,113718,double_data_,3,opencv_caffe.BlobProto.double_data_,,misc\caffe\opencv-caffe.pb.hpp,double_data_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
4467,113719,double_diff_,3,opencv_caffe.BlobProto.double_diff_,,misc\caffe\opencv-caffe.pb.hpp,double_diff_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
4468,113720,raw_data_,3,opencv_caffe.BlobProto.raw_data_,,misc\caffe\opencv-caffe.pb.hpp,raw_data_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
4469,113721,shape_,3,opencv_caffe.BlobProto.shape_,,misc\caffe\opencv-caffe.pb.hpp,* shape_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
4470,113722,num_,3,opencv_caffe.BlobProto.num_,,misc\caffe\opencv-caffe.pb.hpp,num_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
4471,146486,axis_,3,opencv_caffe.ReductionParameter.axis_,,misc\caffe\opencv-caffe.pb.hpp,axis_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
4472,146487,operation_,3,opencv_caffe.ReductionParameter.operation_,,misc\caffe\opencv-caffe.pb.hpp,operation_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
4473,113724,height_,3,opencv_caffe.BlobProto.height_,,misc\caffe\opencv-caffe.pb.hpp,height_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
4474,113726,raw_data_type_,3,opencv_caffe.BlobProto.raw_data_type_,,misc\caffe\opencv-caffe.pb.hpp,raw_data_type_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
4475,146488,coeff_,3,opencv_caffe.ReductionParameter.coeff_,,misc\caffe\opencv-caffe.pb.hpp,coeff_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
4476,113725,width_,3,opencv_caffe.BlobProto.width_,,misc\caffe\opencv-caffe.pb.hpp,width_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
4477,113723,channels_,3,opencv_caffe.BlobProto.channels_,,misc\caffe\opencv-caffe.pb.hpp,channels_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
4478,392259,fs,3,cv.dnn.HalideScheduler.fs,,src\halide_scheduler.hpp,fs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
4479,310344,fbb_,3,opencv_tflite.BidirectionalSequenceRNNOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
4480,310345,start_,3,opencv_tflite.BidirectionalSequenceRNNOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4481,310346,add_time_major,1,opencv_tflite.BidirectionalSequenceRNNOptionsBuilder.add_time_major,void opencv_tflite.BidirectionalSequenceRNNOptionsBuilder.add_time_major (bool),misc\tflite\schema_generated.hpp,"void add_time_major(bool time_major) {
    fbb_.AddElement<uint8_t>(BidirectionalSequenceRNNOptions::VT_TIME_MAJOR, static_cast<uint8_t>(time_major), 0);
  }",3817.0,3819.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4482,130135,descriptor,1,opencv_caffe.BiasParameter.descriptor,Descriptor opencv_caffe.BiasParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",8342.0,8344.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
4483,359513,empty,1,cv.dnn.cuda4dnn.csl.Tensor.empty,bool cv.dnn.cuda4dnn.csl.Tensor.empty (),src\cuda4dnn\csl\tensor.hpp,bool empty() const noexcept { return shape.size() == 0; },102.0,102.0,9.0,65.0,1.0,2,2,1,1,0,1,1,1,0,0,,0,1,0,0,0,bool
4484,130141,GetDescriptor,1,opencv_caffe.BiasParameter.GetDescriptor,Descriptor opencv_caffe.BiasParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",8345.0,8347.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
4485,310366,add_fused_activation_function,1,opencv_tflite.BidirectionalSequenceRNNOptionsBuilder.add_fused_activation_function,void opencv_tflite.BidirectionalSequenceRNNOptionsBuilder.add_fused_activation_function (ANY),misc\tflite\schema_generated.hpp,"void add_fused_activation_function(opencv_tflite::ActivationFunctionType fused_activation_function) {
    fbb_.AddElement<int8_t>(BidirectionalSequenceRNNOptions::VT_FUSED_ACTIVATION_FUNCTION, static_cast<int8_t>(fused_activation_function), 0);
  }",3820.0,3822.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4486,359524,size,1,cv.dnn.cuda4dnn.csl.Tensor.size,size_type cv.dnn.cuda4dnn.csl.Tensor.size (),src\cuda4dnn\csl\tensor.hpp,"size_type size() const noexcept {
            CV_Assert(!empty());
            return std::accumulate(std::begin(shape), std::end(shape), 1, std::multiplies<size_type>());
        }",109.0,112.0,9.0,9.0,4.0,5,2,6,2,0,2,1,1,0,0,,0,2,0,0,0,size_type
4487,64614,set_has_new_height,1,opencv_caffe._Internal.set_has_new_height,void opencv_caffe._Internal.set_has_new_height (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_new_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }",30891.0,30893.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
4488,130152,GetReflection,1,opencv_caffe.BiasParameter.GetReflection,Reflection opencv_caffe.BiasParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",8348.0,8350.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
4489,64625,set_has_new_width,1,opencv_caffe._Internal.set_has_new_width,void opencv_caffe._Internal.set_has_new_width (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_new_width(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }",30894.0,30896.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
4490,375922,cudnnHandle,3,cv.dnn.cuda4dnn.PoolingOp.cudnnHandle,,src\cuda4dnn\primitives\pooling.hpp,cudnnHandle,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4491,130163,default_instance,1,opencv_caffe.BiasParameter.default_instance,BiasParameter opencv_caffe.BiasParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const BiasParameter& default_instance() {
    return *internal_default_instance();
  }",8351.0,8353.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,BiasParameter
4492,375924,transformedInput,3,cv.dnn.cuda4dnn.PoolingOp.transformedInput,,src\cuda4dnn\primitives\pooling.hpp,transformedInput,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
4493,375925,inputTransformer,3,cv.dnn.cuda4dnn.PoolingOp.inputTransformer,,src\cuda4dnn\primitives\pooling.hpp,inputTransformer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4494,375923,pooler,3,cv.dnn.cuda4dnn.PoolingOp.pooler,,src\cuda4dnn\primitives\pooling.hpp,pooler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4495,310386,add_merge_outputs,1,opencv_tflite.BidirectionalSequenceRNNOptionsBuilder.add_merge_outputs,void opencv_tflite.BidirectionalSequenceRNNOptionsBuilder.add_merge_outputs (bool),misc\tflite\schema_generated.hpp,"void add_merge_outputs(bool merge_outputs) {
    fbb_.AddElement<uint8_t>(BidirectionalSequenceRNNOptions::VT_MERGE_OUTPUTS, static_cast<uint8_t>(merge_outputs), 0);
  }",3823.0,3825.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4496,130170,internal_default_instance,1,opencv_caffe.BiasParameter.internal_default_instance,BiasParameter opencv_caffe.BiasParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const BiasParameter* internal_default_instance() {
    return reinterpret_cast<const BiasParameter*>(
               &_BiasParameter_default_instance_);
  }",8354.0,8357.0,3.0,3.0,4.0,2,2,1,1,2,0,1,1,0,0,,0,0,0,0,0,BiasParameter
4497,64636,set_has_is_color,1,opencv_caffe._Internal.set_has_is_color,void opencv_caffe._Internal.set_has_is_color (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_is_color(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }",21087.0,21089.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
4498,359551,rank,1,cv.dnn.cuda4dnn.csl.Tensor.rank,size_type cv.dnn.cuda4dnn.csl.Tensor.rank (),src\cuda4dnn\csl\tensor.hpp,"size_type rank() const noexcept {
            CV_Assert(!empty());
            return shape.size();
        }",119.0,122.0,9.0,9.0,4.0,2,2,1,1,0,1,1,1,0,0,,0,1,0,0,0,size_type
4499,48256,InternalSwap,1,opencv_caffe.ContrastiveLossParameter.InternalSwap,void opencv_caffe.ContrastiveLossParameter.InternalSwap (ContrastiveLossParameter*),misc\caffe\opencv-caffe.pb.cc,"void ContrastiveLossParameter::InternalSwap(ContrastiveLossParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(legacy_version_, other->legacy_version_);
  swap(margin_, other->margin_);
}",16189.0,16195.0,1.0,1.0,7.0,8,4,8,5,0,6,1,1,0,0,,0,6,2,1,1,void
4500,81028,MergeFrom,1,opencv_caffe.ReshapeParameter.MergeFrom,void opencv_caffe.ReshapeParameter.MergeFrom (ReshapeParameter),misc\caffe\opencv-caffe.pb.cc,"void ReshapeParameter::MergeFrom(const ReshapeParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.ReshapeParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_shape()->::opencv_caffe::BlobShape::MergeFrom(from._internal_shape());
    }
    if (cached_has_bits & 0x00000002u) {
      axis_ = from.axis_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_axes_ = from.num_axes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",26110.0,26130.0,1.0,1.0,21.0,22,9,19,7,1,7,5,8,0,1,,0,6,2,1,1,void
4501,310406,add_asymmetric_quantize_inputs,1,opencv_tflite.BidirectionalSequenceRNNOptionsBuilder.add_asymmetric_quantize_inputs,void opencv_tflite.BidirectionalSequenceRNNOptionsBuilder.add_asymmetric_quantize_inputs (bool),misc\tflite\schema_generated.hpp,"void add_asymmetric_quantize_inputs(bool asymmetric_quantize_inputs) {
    fbb_.AddElement<uint8_t>(BidirectionalSequenceRNNOptions::VT_ASYMMETRIC_QUANTIZE_INPUTS, static_cast<uint8_t>(asymmetric_quantize_inputs), 0);
  }",3826.0,3828.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4502,359563,get_axis_size,1,cv.dnn.cuda4dnn.csl.Tensor.get_axis_size,size_type cv.dnn.cuda4dnn.csl.Tensor.get_axis_size (int),src\cuda4dnn\csl\tensor.hpp,"size_type get_axis_size(int axis) const noexcept {
            axis = clamp_axis(axis, rank());
            CV_Assert(axis >= 0 && axis < rank());
            return shape[axis];
        }",138.0,142.0,9.0,9.0,5.0,5,5,6,2,0,1,1,1,0,0,,0,1,2,1,1,size_type
4503,375951,feature_map_width,3,cv.dnn.cuda4dnn.PriorBoxConfiguration.feature_map_width,,src\cuda4dnn\primitives\prior_box.hpp,feature_map_width,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4504,375952,feature_map_height,3,cv.dnn.cuda4dnn.PriorBoxConfiguration.feature_map_height,,src\cuda4dnn\primitives\prior_box.hpp,feature_map_height,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4505,375953,image_width,3,cv.dnn.cuda4dnn.PriorBoxConfiguration.image_width,,src\cuda4dnn\primitives\prior_box.hpp,image_width,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4506,244882,_has_bits_,3,opencv_onnx.StringStringEntryProto._has_bits_,,misc\onnx\opencv-onnx.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
4507,244883,_cached_size_,3,opencv_onnx.StringStringEntryProto._cached_size_,,misc\onnx\opencv-onnx.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
4508,244884,key_,3,opencv_onnx.StringStringEntryProto.key_,,misc\onnx\opencv-onnx.pb.hpp,key_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
4509,244885,value_,3,opencv_onnx.StringStringEntryProto.value_,,misc\onnx\opencv-onnx.pb.hpp,value_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
4510,375955,box_widths,3,cv.dnn.cuda4dnn.PriorBoxConfiguration.box_widths,,src\cuda4dnn\primitives\prior_box.hpp,box_widths,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4511,375954,image_height,3,cv.dnn.cuda4dnn.PriorBoxConfiguration.image_height,,src\cuda4dnn\primitives\prior_box.hpp,image_height,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4512,375956,box_heights,3,cv.dnn.cuda4dnn.PriorBoxConfiguration.box_heights,,src\cuda4dnn\primitives\prior_box.hpp,box_heights,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4513,228505,MergeFrom,1,opencv_onnx.NodeProto.MergeFrom,void opencv_onnx.NodeProto.MergeFrom (NodeProto),misc\onnx\opencv-onnx.pb.cc,"void NodeProto::MergeFrom(const NodeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_onnx.NodeProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  input_.MergeFrom(from.input_);
  output_.MergeFrom(from.output_);
  attribute_.MergeFrom(from.attribute_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_op_type(from._internal_op_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_doc_string(from._internal_doc_string());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_domain(from._internal_domain());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",2179.0,2204.0,1.0,1.0,26.0,26,8,23,7,0,7,6,10,0,0,,0,7,2,1,1,void
4514,310426,BidirectionalSequenceRNNOptionsBuilder,1,opencv_tflite.BidirectionalSequenceRNNOptionsBuilder.BidirectionalSequenceRNNOptionsBuilder,ANY opencv_tflite.BidirectionalSequenceRNNOptionsBuilder.BidirectionalSequenceRNNOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit BidirectionalSequenceRNNOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",3829.0,3832.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
4515,375961,variance,3,cv.dnn.cuda4dnn.PriorBoxConfiguration.variance,,src\cuda4dnn\primitives\prior_box.hpp,variance,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4516,375957,offsets_x,3,cv.dnn.cuda4dnn.PriorBoxConfiguration.offsets_x,,src\cuda4dnn\primitives\prior_box.hpp,offsets_x,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4517,375958,offsets_y,3,cv.dnn.cuda4dnn.PriorBoxConfiguration.offsets_y,,src\cuda4dnn\primitives\prior_box.hpp,offsets_y,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4518,375959,stepX,3,cv.dnn.cuda4dnn.PriorBoxConfiguration.stepX,,src\cuda4dnn\primitives\prior_box.hpp,stepX,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4519,375967,PriorBoxOp,1,cv.dnn.cuda4dnn.PriorBoxOp.PriorBoxOp,"ANY cv.dnn.cuda4dnn.PriorBoxOp.PriorBoxOp (ANY,PriorBoxConfiguration)",src\cuda4dnn\primitives\prior_box.hpp,"PriorBoxOp(csl::Stream stream_, const PriorBoxConfiguration& config)
            : stream(std::move(stream_))
        {
            feature_map_width = config.feature_map_width;
            feature_map_height = config.feature_map_height;

            image_width = config.image_width;
            image_height = config.image_height;

            const auto& box_widths = config.box_widths;
            const auto& box_heights = config.box_heights;
            CV_Assert(box_widths.size() == box_heights.size());

            box_size = box_widths.size();

            const auto& offsets_x = config.offsets_x;
            const auto& offsets_y = config.offsets_y;
            CV_Assert(offsets_x.size() == offsets_y.size());

            offset_size = offsets_x.size();

            /* for better memory utilization and preassumably better cache performance, we merge
             * the four vectors and put them in a single tensor
             */
            auto total = box_widths.size() * 2 + ...",48.0,91.0,9.0,9.0,44.0,69,5,81,24,0,29,1,1,0,0,,0,29,4,2,2,ANY
4520,48288,GetMetadata,1,opencv_caffe.ContrastiveLossParameter.GetMetadata,Metadata opencv_caffe.ContrastiveLossParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata ContrastiveLossParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[23]);
}",16197.0,16201.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
4521,359585,size_range,1,cv.dnn.cuda4dnn.csl.Tensor.size_range,"size_type cv.dnn.cuda4dnn.csl.Tensor.size_range (size_type,size_type)",src\cuda4dnn\csl\tensor.hpp,"size_type size_range(size_type axis_start, size_type axis_end) const noexcept {
            CV_Assert(!empty());
            CV_Assert(axis_start <= axis_end);
            CV_Assert(axis_end <= rank());
            auto start = std::begin(shape) + axis_start;
            auto end = std::begin(shape) + axis_end;
            return std::accumulate(start, end, 1, std::multiplies<size_type>());
        }",158.0,165.0,9.0,9.0,8.0,11,5,15,6,0,2,1,1,0,0,,0,2,4,2,2,size_type
4522,375962,num_priors,3,cv.dnn.cuda4dnn.PriorBoxConfiguration.num_priors,,src\cuda4dnn\primitives\prior_box.hpp,num_priors,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4523,375963,clip,3,cv.dnn.cuda4dnn.PriorBoxConfiguration.clip,,src\cuda4dnn\primitives\prior_box.hpp,clip,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4524,375964,normalize,3,cv.dnn.cuda4dnn.PriorBoxConfiguration.normalize,,src\cuda4dnn\primitives\prior_box.hpp,normalize,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4525,310437,Finish,1,opencv_tflite.BidirectionalSequenceRNNOptionsBuilder.Finish,Offset<BidirectionalSequenceRNNOptions> opencv_tflite.BidirectionalSequenceRNNOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<BidirectionalSequenceRNNOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<BidirectionalSequenceRNNOptions>(end);
    return o;
  }",3833.0,3837.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<BidirectionalSequenceRNNOptions>
4526,113832,descriptor,1,opencv_caffe.BlobProtoVector.descriptor,Descriptor opencv_caffe.BlobProtoVector.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",1591.0,1593.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
4527,113838,GetDescriptor,1,opencv_caffe.BlobProtoVector.GetDescriptor,Descriptor opencv_caffe.BlobProtoVector.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",1594.0,1596.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
4528,48308,set_has_num_output,1,opencv_caffe._Internal.set_has_num_output,void opencv_caffe._Internal.set_has_num_output (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_num_output(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }",30805.0,30807.0,3.0,3.0,3.0,2,2,1,1,4,0,1,1,0,0,,0,0,2,1,1,void
4529,146615,descriptor,1,opencv_caffe.ReLUParameter.descriptor,Descriptor opencv_caffe.ReLUParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",15332.0,15334.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
4530,113849,GetReflection,1,opencv_caffe.BlobProtoVector.GetReflection,Reflection opencv_caffe.BlobProtoVector.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",1597.0,1599.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
4531,146621,GetDescriptor,1,opencv_caffe.ReLUParameter.GetDescriptor,Descriptor opencv_caffe.ReLUParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",15335.0,15337.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
4532,48319,set_has_bias_term,1,opencv_caffe._Internal.set_has_bias_term,void opencv_caffe._Internal.set_has_bias_term (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_bias_term(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }",26177.0,26179.0,3.0,3.0,3.0,2,2,1,1,4,0,1,1,0,0,,0,0,2,1,1,void
4533,113860,default_instance,1,opencv_caffe.BlobProtoVector.default_instance,BlobProtoVector opencv_caffe.BlobProtoVector.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const BlobProtoVector& default_instance() {
    return *internal_default_instance();
  }",1600.0,1602.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,BlobProtoVector
4534,146632,GetReflection,1,opencv_caffe.ReLUParameter.GetReflection,Reflection opencv_caffe.ReLUParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",15338.0,15340.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
4535,48330,set_has_pad_h,1,opencv_caffe._Internal.set_has_pad_h,void opencv_caffe._Internal.set_has_pad_h (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_pad_h(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }",23851.0,23853.0,3.0,3.0,3.0,2,2,1,1,2,0,1,1,0,0,,0,0,2,1,1,void
4536,113867,internal_default_instance,1,opencv_caffe.BlobProtoVector.internal_default_instance,BlobProtoVector opencv_caffe.BlobProtoVector.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const BlobProtoVector* internal_default_instance() {
    return reinterpret_cast<const BlobProtoVector*>(
               &_BlobProtoVector_default_instance_);
  }",1603.0,1606.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,BlobProtoVector
4537,359634,shape_as_vector,1,cv.dnn.cuda4dnn.csl.Tensor.shape_as_vector,vector<size_type> cv.dnn.cuda4dnn.csl.Tensor.shape_as_vector (),src\cuda4dnn\csl\tensor.hpp,"std::vector<size_type> shape_as_vector() const {
            CV_Assert(!empty());
            return std::vector<size_type>(std::begin(shape), std::end(shape));
        }",174.0,177.0,9.0,9.0,4.0,8,6,6,3,0,2,1,1,0,0,,0,2,0,0,0,vector<size_type>
4538,146643,default_instance,1,opencv_caffe.ReLUParameter.default_instance,ReLUParameter opencv_caffe.ReLUParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const ReLUParameter& default_instance() {
    return *internal_default_instance();
  }",15341.0,15343.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,ReLUParameter
4539,48341,set_has_pad_w,1,opencv_caffe._Internal.set_has_pad_w,void opencv_caffe._Internal.set_has_pad_w (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_pad_w(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }",23854.0,23856.0,3.0,3.0,3.0,2,2,1,1,2,0,1,1,0,0,,0,0,2,1,1,void
4540,146650,internal_default_instance,1,opencv_caffe.ReLUParameter.internal_default_instance,ReLUParameter opencv_caffe.ReLUParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const ReLUParameter* internal_default_instance() {
    return reinterpret_cast<const ReLUParameter*>(
               &_ReLUParameter_default_instance_);
  }",15344.0,15347.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,ReLUParameter
4541,48352,set_has_kernel_h,1,opencv_caffe._Internal.set_has_kernel_h,void opencv_caffe._Internal.set_has_kernel_h (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_kernel_h(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }",23860.0,23862.0,3.0,3.0,3.0,2,2,1,1,2,0,1,1,0,0,,0,0,2,1,1,void
4542,310501,fbb_,3,opencv_tflite.FullyConnectedOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
4543,81126,InternalSwap,1,opencv_caffe.ReshapeParameter.InternalSwap,void opencv_caffe.ReshapeParameter.InternalSwap (ReshapeParameter*),misc\caffe\opencv-caffe.pb.cc,"void ReshapeParameter::InternalSwap(ReshapeParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReshapeParameter, axis_)
      + sizeof(ReshapeParameter::axis_)
      - PROTOBUF_FIELD_OFFSET(ReshapeParameter, shape_)>(
          reinterpret_cast<char*>(&shape_),
          reinterpret_cast<char*>(&other->shape_));
  swap(num_axes_, other->num_axes_);
}",26143.0,26154.0,1.0,1.0,12.0,22,12,15,9,0,9,1,1,0,0,,0,9,2,1,1,void
4544,310503,add_fused_activation_function,1,opencv_tflite.FullyConnectedOptionsBuilder.add_fused_activation_function,void opencv_tflite.FullyConnectedOptionsBuilder.add_fused_activation_function (ANY),misc\tflite\schema_generated.hpp,"void add_fused_activation_function(opencv_tflite::ActivationFunctionType fused_activation_function) {
    fbb_.AddElement<int8_t>(FullyConnectedOptions::VT_FUSED_ACTIVATION_FUNCTION, static_cast<int8_t>(fused_activation_function), 0);
  }",3888.0,3890.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4545,310502,start_,3,opencv_tflite.FullyConnectedOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4546,48363,set_has_kernel_w,1,opencv_caffe._Internal.set_has_kernel_w,void opencv_caffe._Internal.set_has_kernel_w (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_kernel_w(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }",23863.0,23865.0,3.0,3.0,3.0,2,2,1,1,2,0,1,1,0,0,,0,0,2,1,1,void
4547,359660,get,1,cv.dnn.cuda4dnn.csl.Tensor.get,pointer cv.dnn.cuda4dnn.csl.Tensor.get (),src\cuda4dnn\csl\tensor.hpp,const_pointer get() const noexcept { return data.get(); },183.0,183.0,9.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,const_pointer
4548,15600,ByteSizeLong,1,opencv_caffe.Datum.ByteSizeLong,size_t opencv_caffe.Datum.ByteSizeLong (),misc\caffe\opencv-caffe.pb.cc,"size_t Datum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_caffe.Datum)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float float_data = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_float_data_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_float_data_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes data = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional int32 channels = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::Wi...",6969.0,7022.0,1.0,1.0,54.0,52,10,43,9,0,2,8,14,0,0,,0,2,0,0,0,size_t
4549,48374,set_has_stride_h,1,opencv_caffe._Internal.set_has_stride_h,void opencv_caffe._Internal.set_has_stride_h (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_stride_h(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }",23869.0,23871.0,3.0,3.0,3.0,2,2,1,1,2,0,1,1,0,0,,0,0,2,1,1,void
4550,130295,GetCachedSize,1,opencv_caffe.BiasParameter.GetCachedSize,int opencv_caffe.BiasParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },8402.0,8402.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
4551,310523,add_weights_format,1,opencv_tflite.FullyConnectedOptionsBuilder.add_weights_format,void opencv_tflite.FullyConnectedOptionsBuilder.add_weights_format (ANY),misc\tflite\schema_generated.hpp,"void add_weights_format(opencv_tflite::FullyConnectedOptionsWeightsFormat weights_format) {
    fbb_.AddElement<int8_t>(FullyConnectedOptions::VT_WEIGHTS_FORMAT, static_cast<int8_t>(weights_format), 0);
  }",3891.0,3893.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4552,359678,clear,1,cv.dnn.cuda4dnn.csl.Tensor.clear,void cv.dnn.cuda4dnn.csl.Tensor.clear (),src\cuda4dnn\csl\tensor.hpp,"void clear() {
            CV_Assert(!empty());
            data.reset();
            shape.clear();
        }",192.0,196.0,9.0,9.0,5.0,3,2,2,2,0,2,1,1,0,0,,0,2,0,0,0,void
4553,244991,descriptor,1,opencv_onnx.GraphProto.descriptor,Descriptor opencv_onnx.GraphProto.descriptor (),misc\onnx\opencv-onnx.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",1713.0,1715.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
4554,48385,set_has_stride_w,1,opencv_caffe._Internal.set_has_stride_w,void opencv_caffe._Internal.set_has_stride_w (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_stride_w(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }",23872.0,23874.0,3.0,3.0,3.0,2,2,1,1,2,0,1,1,0,0,,0,0,2,1,1,void
4555,244997,GetDescriptor,1,opencv_onnx.GraphProto.GetDescriptor,Descriptor opencv_onnx.GraphProto.GetDescriptor (),misc\onnx\opencv-onnx.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",1716.0,1718.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
4556,48396,set_has_group,1,opencv_caffe._Internal.set_has_group,void opencv_caffe._Internal.set_has_group (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_group(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }",30825.0,30827.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
4557,359693,resize,1,cv.dnn.cuda4dnn.csl.Tensor.resize,"type cv.dnn.cuda4dnn.csl.Tensor.resize<ForwardItr> (ForwardItr,ForwardItr)",src\cuda4dnn\csl\tensor.hpp,"void resize(Sizes... new_sizes_) {
            static_assert(sizeof...(Sizes) <= CSL_MAX_TENSOR_RANK, ""required rank exceeds maximum supported rank"");
            static_assert(sizeof...(Sizes) > 0, ""no sizes provided"");
            std::array<size_type, sizeof...(Sizes)> new_sizes = { static_cast<size_type>(new_sizes_)... };
            resize(std::begin(new_sizes), std::end(new_sizes));
        }",224.0,229.0,9.0,46.0,6.0,8,4,15,6,0,2,1,1,0,0,,0,2,2,1,1,void
4558,310543,add_keep_num_dims,1,opencv_tflite.FullyConnectedOptionsBuilder.add_keep_num_dims,void opencv_tflite.FullyConnectedOptionsBuilder.add_keep_num_dims (bool),misc\tflite\schema_generated.hpp,"void add_keep_num_dims(bool keep_num_dims) {
    fbb_.AddElement<uint8_t>(FullyConnectedOptions::VT_KEEP_NUM_DIMS, static_cast<uint8_t>(keep_num_dims), 0);
  }",3894.0,3896.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4559,245008,GetReflection,1,opencv_onnx.GraphProto.GetReflection,Reflection opencv_onnx.GraphProto.GetReflection (),misc\onnx\opencv-onnx.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",1719.0,1721.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
4560,228626,InternalSwap,1,opencv_onnx.NodeProto.InternalSwap,void opencv_onnx.NodeProto.InternalSwap (NodeProto*),misc\onnx\opencv-onnx.pb.cc,"void NodeProto::InternalSwap(NodeProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  input_.InternalSwap(&other->input_);
  output_.InternalSwap(&other->output_);
  attribute_.InternalSwap(&other->attribute_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &op_type_, lhs_arena,
      &other->op_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &doc_string_, lhs_arena,
      &other->do...",2217.0,2246.0,1.0,1.0,30.0,54,5,49,15,0,16,1,1,0,0,,0,16,2,1,1,void
4561,245019,default_instance,1,opencv_onnx.GraphProto.default_instance,GraphProto opencv_onnx.GraphProto.default_instance (),misc\onnx\opencv-onnx.pb.hpp,"static const GraphProto& default_instance() {
    return *internal_default_instance();
  }",1722.0,1724.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,GraphProto
4562,81184,GetMetadata,1,opencv_caffe.ReshapeParameter.GetMetadata,Metadata opencv_caffe.ReshapeParameter.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata ReshapeParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[54]);
}",26156.0,26160.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
4563,245026,internal_default_instance,1,opencv_onnx.GraphProto.internal_default_instance,GraphProto opencv_onnx.GraphProto.internal_default_instance (),misc\onnx\opencv-onnx.pb.hpp,"static inline const GraphProto* internal_default_instance() {
    return reinterpret_cast<const GraphProto*>(
               &_GraphProto_default_instance_);
  }",1725.0,1728.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,GraphProto
4564,310563,add_asymmetric_quantize_inputs,1,opencv_tflite.FullyConnectedOptionsBuilder.add_asymmetric_quantize_inputs,void opencv_tflite.FullyConnectedOptionsBuilder.add_asymmetric_quantize_inputs (bool),misc\tflite\schema_generated.hpp,"void add_asymmetric_quantize_inputs(bool asymmetric_quantize_inputs) {
    fbb_.AddElement<uint8_t>(FullyConnectedOptions::VT_ASYMMETRIC_QUANTIZE_INPUTS, static_cast<uint8_t>(asymmetric_quantize_inputs), 0);
  }",3897.0,3899.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4565,97588,weight_filler,1,opencv_caffe.V0LayerParameter._Internal.weight_filler,FillerParameter opencv_caffe.V0LayerParameter._Internal.weight_filler (V0LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::FillerParameter&
V0LayerParameter::_Internal::weight_filler(const V0LayerParameter* msg) {
  return *msg->weight_filler_;
}",30909.0,30912.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,FillerParameter
4566,310583,FullyConnectedOptionsBuilder,1,opencv_tflite.FullyConnectedOptionsBuilder.FullyConnectedOptionsBuilder,ANY opencv_tflite.FullyConnectedOptionsBuilder.FullyConnectedOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit FullyConnectedOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",3900.0,3903.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
4567,425274,ResizeLayerImpl,1,cv.dnn.ResizeLayerImpl.ResizeLayerImpl,ANY cv.dnn.ResizeLayerImpl.ResizeLayerImpl (LayerParams),src\layers\resize_layer.cpp,"ResizeLayerImpl(const LayerParams& params) : zoomFactorWidth(params.get<float>(""zoom_factor_x"", params.get<float>(""zoom_factor"", 0))),
                                                 zoomFactorHeight(params.get<float>(""zoom_factor_y"", params.get<float>(""zoom_factor"", 0))),
                                                 scaleWidth(0), scaleHeight(0)
    {
        setParamsFrom(params);
        outWidth = params.get<float>(""width"", 0);
        outHeight = params.get<float>(""height"", 0);
        if (params.has(""zoom_factor""))
        {
            CV_Assert(!params.has(""zoom_factor_x"") && !params.has(""zoom_factor_y""));
        }
        else if (params.has(""zoom_factor_x"") || params.has(""zoom_factor_y""))
        {
            CV_Assert(params.has(""zoom_factor_x"") && params.has(""zoom_factor_y""));
        }
        interpolation = params.get<String>(""interpolation"");
        CV_Check(interpolation, interpolation == ""nearest"" || interpolation == ""opencv_linear"" || interpolation == ""bil...",33.0,55.0,5.0,5.0,23.0,25,8,21,7,0,11,3,3,1,0,,0,11,2,1,1,ANY
4568,97598,bias_filler,1,opencv_caffe.V0LayerParameter._Internal.bias_filler,FillerParameter opencv_caffe.V0LayerParameter._Internal.bias_filler (V0LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::FillerParameter&
V0LayerParameter::_Internal::bias_filler(const V0LayerParameter* msg) {
  return *msg->bias_filler_;
}",30913.0,30916.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,FillerParameter
4569,310594,Finish,1,opencv_tflite.FullyConnectedOptionsBuilder.Finish,Offset<FullyConnectedOptions> opencv_tflite.FullyConnectedOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<FullyConnectedOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FullyConnectedOptions>(end);
    return o;
  }",3904.0,3908.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<FullyConnectedOptions>
4570,64839,SharedCtor,1,opencv_caffe.ImageDataParameter.SharedCtor,void opencv_caffe.ImageDataParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void ImageDataParameter::SharedCtor() {
source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mean_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mean_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
root_folder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  root_folder_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(...",21150.0,21170.0,1.0,1.0,21.0,31,7,16,10,0,10,1,1,0,0,,0,10,0,0,0,void
4571,97608,hdf5_output_param,1,opencv_caffe.V0LayerParameter._Internal.hdf5_output_param,HDF5OutputParameter opencv_caffe.V0LayerParameter._Internal.hdf5_output_param (V0LayerParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::HDF5OutputParameter&
V0LayerParameter::_Internal::hdf5_output_param(const V0LayerParameter* msg) {
  return *msg->hdf5_output_param_;
}",30917.0,30920.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,HDF5OutputParameter
4572,113992,GetCachedSize,1,opencv_caffe.BlobProtoVector.GetCachedSize,int opencv_caffe.BlobProtoVector.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },1651.0,1651.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
4573,48461,set_has_force_nd_im2col,1,opencv_caffe._Internal.set_has_force_nd_im2col,void opencv_caffe._Internal.set_has_force_nd_im2col (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_force_nd_im2col(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }",16249.0,16251.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
4574,343374,testConfigs,3,opencv_test.ConvParamGenerator.testConfigs,,perf\perf_convolution.cpp,* testConfigs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4575,343375,size,3,opencv_test.ConvParamGenerator.size,,perf\perf_convolution.cpp,size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4576,343376,all,1,opencv_test.ConvParamGenerator.all,ParamGenerator<ConvParam_t> opencv_test.ConvParamGenerator.all (),perf\perf_convolution.cpp,"::testing::internal::ParamGenerator<ConvParam_t> all() const
    {
        int NUM = size;
        static size_t DNN_LIMIT_CONV = utils::getConfigurationParameterSizeT(""OPENCV_TEST_DNN_LIMIT_CONV"", 0);
        if (DNN_LIMIT_CONV > 0)
            NUM = std::min(NUM, (int)DNN_LIMIT_CONV);

        std::vector<ConvParam_t> v_(NUM);
        for (int i = 0; i < NUM; ++i) { v_[i] = testConfigs[i]; } // reduce generated code size
        return ::testing::ValuesIn(v_);
    }",775.0,785.0,5.0,5.0,11.0,13,6,19,9,0,2,3,3,0,0,,0,2,0,0,0,ParamGenerator<ConvParam_t>
4577,309226,Finish,1,opencv_tflite.Conv3DOptionsBuilder.Finish,Offset<Conv3DOptions> opencv_tflite.Conv3DOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<Conv3DOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Conv3DOptions>(end);
    return o;
  }",3271.0,3275.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<Conv3DOptions>
4578,146775,GetCachedSize,1,opencv_caffe.ReLUParameter.GetCachedSize,int opencv_caffe.ReLUParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },15392.0,15392.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
4579,48472,weight_filler,1,opencv_caffe.ConvolutionParameter._Internal.weight_filler,FillerParameter opencv_caffe.ConvolutionParameter._Internal.weight_filler (ConvolutionParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::FillerParameter&
ConvolutionParameter::_Internal::weight_filler(const ConvolutionParameter* msg) {
  return *msg->weight_filler_;
}",16254.0,16257.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,FillerParameter
4580,48482,bias_filler,1,opencv_caffe.ConvolutionParameter._Internal.bias_filler,FillerParameter opencv_caffe.ConvolutionParameter._Internal.bias_filler (ConvolutionParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::FillerParameter&
ConvolutionParameter::_Internal::bias_filler(const ConvolutionParameter* msg) {
  return *msg->bias_filler_;
}",16258.0,16261.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,FillerParameter
4581,81269,filler,1,opencv_caffe.ScaleParameter._Internal.filler,FillerParameter opencv_caffe.ScaleParameter._Internal.filler (ScaleParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::FillerParameter&
ScaleParameter::_Internal::filler(const ScaleParameter* msg) {
  return *msg->filler_;
}",26186.0,26189.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,FillerParameter
4582,81279,bias_filler,1,opencv_caffe.ScaleParameter._Internal.bias_filler,FillerParameter opencv_caffe.ScaleParameter._Internal.bias_filler (ScaleParameter*),misc\caffe\opencv-caffe.pb.cc,"const ::opencv_caffe::FillerParameter&
ScaleParameter::_Internal::bias_filler(const ScaleParameter* msg) {
  return *msg->bias_filler_;
}",26190.0,26193.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,FillerParameter
4583,310658,fbb_,3,opencv_tflite.SoftmaxOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
4584,310659,start_,3,opencv_tflite.SoftmaxOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4585,310660,add_beta,1,opencv_tflite.SoftmaxOptionsBuilder.add_beta,void opencv_tflite.SoftmaxOptionsBuilder.add_beta (float),misc\tflite\schema_generated.hpp,"void add_beta(float beta) {
    fbb_.AddElement<float>(SoftmaxOptions::VT_BETA, beta, 0.0f);
  }",3944.0,3946.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
4586,343436,PrintTo,1,opencv_test.PrintTo,"void opencv_test.PrintTo (ConvParam_t,ANY*)",perf\perf_recurrent.cpp,"static inline void PrintTo(const LstmParams& params, ::std::ostream* os) {
    (*os) << ""BATCH="" << params.nrSamples
        << "", IN="" << params.inputSize
        << "", HIDDEN="" << params.hiddenSize
        << "", TS="" << params.nrSteps;
}",23.0,28.0,1.0,1.0,6.0,88,9,29,3,0,20,8,8,7,0,,0,20,4,2,2,void
4587,310674,SoftmaxOptionsBuilder,1,opencv_tflite.SoftmaxOptionsBuilder.SoftmaxOptionsBuilder,ANY opencv_tflite.SoftmaxOptionsBuilder.SoftmaxOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit SoftmaxOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",3947.0,3950.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
4588,359828,reshape,1,cv.dnn.cuda4dnn.csl.Tensor.reshape,"type cv.dnn.cuda4dnn.csl.Tensor.reshape<ForwardItr> (ForwardItr,ForwardItr)",src\cuda4dnn\csl\tensor.hpp,"void reshape(Sizes... new_sizes_) {
            static_assert(sizeof...(Sizes) <= CSL_MAX_TENSOR_RANK, ""required rank exceeds maximum supported rank"");
            static_assert(sizeof...(Sizes) > 0, ""no sizes provided"");
            std::array<std::int64_t, sizeof...(Sizes)> new_sizes = { static_cast<std::int64_t>(new_sizes_)... };
            reshape(std::begin(new_sizes), std::end(new_sizes));
        }",313.0,318.0,9.0,46.0,6.0,33,8,48,9,0,5,6,7,0,0,,0,5,2,1,1,void
4589,376213,forward,1,cv.dnn.cuda4dnn.PriorBoxOp.forward,"void cv.dnn.cuda4dnn.PriorBoxOp.forward (ANY,ANY,ANY)",src\cuda4dnn\primitives\prior_box.hpp,"void forward(
            const std::vector<cv::Ptr<BackendWrapper>>& inputs,
            const std::vector<cv::Ptr<BackendWrapper>>& outputs,
            csl::Workspace& workspace) override
        {
            CV_Assert(inputs.size() == 2); /* we don't need the inputs but we are given */
            CV_Assert(outputs.size() == 1);

            auto output_wrapper = outputs[0].dynamicCast<wrapper_type>();
            auto output = output_wrapper->getSpan();

            /* we had stored all the parameters in a single tensor; now we create appropriate views
             * for each of the parameter arrays from the single tensor
             */
            auto boxWidths  = csl::View<float>(paramsTensor.get(), box_size);
            auto boxHeights = csl::View<float>(paramsTensor.get() + box_size, box_size);
            auto offsetsX   = csl::View<float>(paramsTensor.get() + 2 * box_size, offset_size);
            auto offsetsY   = csl::View<float>(paramsTensor.get() + 2 * box_size +...",93.0,115.0,9.0,9.0,23.0,28,7,43,24,0,23,1,1,0,0,,0,23,6,3,3,void
4590,310685,Finish,1,opencv_tflite.SoftmaxOptionsBuilder.Finish,Offset<SoftmaxOptions> opencv_tflite.SoftmaxOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<SoftmaxOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SoftmaxOptions>(end);
    return o;
  }",3951.0,3955.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<SoftmaxOptions>
4591,245151,GetCachedSize,1,opencv_onnx.GraphProto.GetCachedSize,int opencv_onnx.GraphProto.GetCachedSize (),misc\onnx\opencv-onnx.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },1773.0,1773.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
4592,277921,ByteSizeLong,1,opencv_tensorflow.NodeDef.ByteSizeLong,size_t opencv_tensorflow.NodeDef.ByteSizeLong (),misc\tensorflow\graph.pb.cc,"size_t NodeDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_tensorflow.NodeDef)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string input = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(input_.size());
  for (int i = 0, n = input_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      input_.Get(i));
  }

  // map<string, .opencv_tensorflow.AttrValue> attr = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attr_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::opencv_tensorflow::AttrValue >::const_iterator
      it = this->_internal_attr().begin();
      it != this->_internal_attr().end(); ++it) {
    total_size += NodeDef_AttrEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

 ...",766.0,813.0,1.0,1.0,48.0,61,11,42,12,0,4,6,6,0,0,,0,4,0,0,0,size_t
4593,64933,SharedDtor,1,opencv_caffe.ImageDataParameter.SharedDtor,void opencv_caffe.ImageDataParameter.SharedDtor (),misc\caffe\opencv-caffe.pb.cc,"inline void ImageDataParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mean_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  root_folder_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}",21179.0,21184.0,1.0,1.0,6.0,13,3,9,5,0,3,1,1,0,0,,0,3,0,0,0,void
4594,228775,GetMetadata,1,opencv_onnx.NodeProto.GetMetadata,Metadata opencv_onnx.NodeProto.GetMetadata (),misc\onnx\opencv-onnx.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata NodeProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2donnx_2eproto_getter, &descriptor_table_opencv_2donnx_2eproto_once,
      file_level_metadata_opencv_2donnx_2eproto[2]);
}",2248.0,2252.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
4595,261549,_InternalSerialize,1,opencv_tensorflow.AttrValue._InternalSerialize,"uint8_t opencv_tensorflow.AttrValue._InternalSerialize (uint8_t*,ANY*)",misc\tensorflow\attr_value.pb.cc,"uint8_t* AttrValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_tensorflow.AttrValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opencv_tensorflow.AttrValue.ListValue list = 1;
  if (_internal_has_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::list(this), target, stream);
  }

  // bytes s = 2;
  if (_internal_has_s()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_s(), target);
  }

  // int64 i = 3;
  if (_internal_has_i()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_i(), target);
  }

  // float f = 4;
  if (_internal_has_f()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBU...",973.0,1058.0,1.0,1.0,86.0,86,6,98,10,0,4,12,12,0,4,,0,4,4,2,2,uint8_t
4596,130481,_has_bits_,3,opencv_caffe.BiasParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
4597,130482,_cached_size_,3,opencv_caffe.BiasParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
4598,130483,filler_,3,opencv_caffe.BiasParameter.filler_,,misc\caffe\opencv-caffe.pb.hpp,* filler_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
4599,130484,axis_,3,opencv_caffe.BiasParameter.axis_,,misc\caffe\opencv-caffe.pb.hpp,axis_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
4600,130485,num_axes_,3,opencv_caffe.BiasParameter.num_axes_,,misc\caffe\opencv-caffe.pb.hpp,num_axes_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
4601,114107,blobs_,3,opencv_caffe.BlobProtoVector.blobs_,,misc\caffe\opencv-caffe.pb.hpp,blobs_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
4602,15804,MergeFrom,1,opencv_caffe.Datum.MergeFrom,void opencv_caffe.Datum.MergeFrom (Datum),misc\caffe\opencv-caffe.pb.cc,"void Datum::MergeFrom(const Datum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_caffe.Datum)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  float_data_.MergeFrom(from.float_data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      channels_ = from.channels_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      label_ = from.label_;
    }
    if (cached_has_bits & 0x00000020u) {
      encoded_ = from.encoded_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",7037.0,7067.0,1.0,1.0,31.0,32,8,30,11,0,14,8,14,0,0,,0,14,2,1,1,void
4603,114108,_cached_size_,3,opencv_caffe.BlobProtoVector._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
4604,228795,set_has_ir_version,1,opencv_onnx._Internal.set_has_ir_version,void opencv_onnx._Internal.set_has_ir_version (HasBits*),misc\onnx\opencv-onnx.pb.cc,"static void set_has_ir_version(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }",2259.0,2261.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
4605,48583,SharedCtor,1,opencv_caffe.ConvolutionParameter.SharedCtor,void opencv_caffe.ConvolutionParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void ConvolutionParameter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&weight_filler_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&force_nd_im2col_) -
    reinterpret_cast<char*>(&weight_filler_)) + sizeof(force_nd_im2col_));
axis_ = 1;
bias_term_ = true;
group_ = 1u;
}",16299.0,16307.0,1.0,1.0,9.0,19,7,7,5,0,7,1,1,0,0,,0,7,0,0,0,void
4606,310731,fbb_,3,opencv_tflite.ConcatenationOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
4607,310732,start_,3,opencv_tflite.ConcatenationOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4608,310733,add_axis,1,opencv_tflite.ConcatenationOptionsBuilder.add_axis,void opencv_tflite.ConcatenationOptionsBuilder.add_axis (int32_t),misc\tflite\schema_generated.hpp,"void add_axis(int32_t axis) {
    fbb_.AddElement<int32_t>(ConcatenationOptions::VT_AXIS, axis, 0);
  }",3990.0,3992.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4609,425435,outWidth,3,cv.dnn.ResizeLayerImpl.outWidth,,src\layers\resize_layer.cpp,outWidth,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4610,425436,outHeight,3,cv.dnn.ResizeLayerImpl.outHeight,,src\layers\resize_layer.cpp,outHeight,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4611,425439,interpolation,3,cv.dnn.ResizeLayerImpl.interpolation,,src\layers\resize_layer.cpp,interpolation,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
4612,310751,add_fused_activation_function,1,opencv_tflite.ConcatenationOptionsBuilder.add_fused_activation_function,void opencv_tflite.ConcatenationOptionsBuilder.add_fused_activation_function (ANY),misc\tflite\schema_generated.hpp,"void add_fused_activation_function(opencv_tflite::ActivationFunctionType fused_activation_function) {
    fbb_.AddElement<int8_t>(ConcatenationOptions::VT_FUSED_ACTIVATION_FUNCTION, static_cast<int8_t>(fused_activation_function), 0);
  }",3993.0,3995.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4613,64993,SetCachedSize,1,opencv_caffe.ImageDataParameter.SetCachedSize,void opencv_caffe.ImageDataParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void ImageDataParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",21192.0,21194.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
4614,425442,alignCorners,3,cv.dnn.ResizeLayerImpl.alignCorners,,src\layers\resize_layer.cpp,alignCorners,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4615,425443,halfPixelCenters,3,cv.dnn.ResizeLayerImpl.halfPixelCenters,,src\layers\resize_layer.cpp,halfPixelCenters,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4616,81380,SharedCtor,1,opencv_caffe.ScaleParameter.SharedCtor,void opencv_caffe.ScaleParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void ScaleParameter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&filler_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bias_term_) -
    reinterpret_cast<char*>(&filler_)) + sizeof(bias_term_));
axis_ = 1;
num_axes_ = 1;
}",26223.0,26230.0,1.0,1.0,8.0,18,7,6,4,0,6,1,1,0,0,,0,6,0,0,0,void
4617,228839,set_has_model_version,1,opencv_onnx._Internal.set_has_model_version,void opencv_onnx._Internal.set_has_model_version (HasBits*),misc\onnx\opencv-onnx.pb.cc,"static void set_has_model_version(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }",2271.0,2273.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
4618,65003,Clear,1,opencv_caffe.ImageDataParameter.Clear,void opencv_caffe.ImageDataParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void ImageDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.ImageDataParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      source_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      mean_file_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      root_folder_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&crop_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&new_height_) -
        reinterpret_cast<char*>(&crop_size_)) + sizeof(new_height_));
  }
  if (cached_has_bits & 0x00000f00u) {
    new_width_ = 0u;
    is_color_ = true;
    scale_ = 1;
    batch_size_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID:...",21196.0,21227.0,1.0,1.0,32.0,29,9,23,12,0,13,7,10,0,0,,0,13,0,0,0,void
4619,294385,_InternalSerialize,1,opencv_tensorflow.TensorProto._InternalSerialize,"uint8_t opencv_tensorflow.TensorProto._InternalSerialize (uint8_t*,ANY*)",misc\tensorflow\tensor.pb.cc,"uint8_t* TensorProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_tensorflow.TensorProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opencv_tensorflow.DataType dtype = 1;
  if (this->_internal_dtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_dtype(), target);
  }

  // .opencv_tensorflow.TensorShapeProto tensor_shape = 2;
  if (this->_internal_has_tensor_shape()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tensor_shape(this), target, stream);
  }

  // int32 version_number = 3;
  if (this->_internal_version_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal:...",407.0,504.0,1.0,1.0,98.0,91,8,92,18,0,4,15,15,0,1,,0,4,4,2,2,uint8_t
4620,310771,ConcatenationOptionsBuilder,1,opencv_tflite.ConcatenationOptionsBuilder.ConcatenationOptionsBuilder,ANY opencv_tflite.ConcatenationOptionsBuilder.ConcatenationOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit ConcatenationOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",3996.0,3999.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
4621,310782,Finish,1,opencv_tflite.ConcatenationOptionsBuilder.Finish,Offset<ConcatenationOptions> opencv_tflite.ConcatenationOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<ConcatenationOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ConcatenationOptions>(end);
    return o;
  }",4000.0,4004.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<ConcatenationOptions>
4622,48644,SharedDtor,1,opencv_caffe.ConvolutionParameter.SharedDtor,void opencv_caffe.ConvolutionParameter.SharedDtor (),misc\caffe\opencv-caffe.pb.cc,"inline void ConvolutionParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete weight_filler_;
  if (this != internal_default_instance()) delete bias_filler_;
}",16316.0,16320.0,1.0,1.0,5.0,5,3,2,2,0,4,3,3,2,0,,0,4,0,0,0,void
4623,376330,stream,3,cv.dnn.cuda4dnn.PriorBoxOp.stream,,src\cuda4dnn\primitives\prior_box.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4624,376331,paramsTensor,3,cv.dnn.cuda4dnn.PriorBoxOp.paramsTensor,,src\cuda4dnn\primitives\prior_box.hpp,paramsTensor,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
4625,376332,feature_map_width,3,cv.dnn.cuda4dnn.PriorBoxOp.feature_map_width,,src\cuda4dnn\primitives\prior_box.hpp,feature_map_width,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4626,228877,graph,1,opencv_onnx.ModelProto._Internal.graph,GraphProto opencv_onnx.ModelProto._Internal.graph (ModelProto*),misc\onnx\opencv-onnx.pb.cc,"const ::opencv_onnx::GraphProto&
ModelProto::_Internal::graph(const ModelProto* msg) {
  return *msg->graph_;
}",2283.0,2286.0,1.0,1.0,4.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,GraphProto
4627,376334,image_width,3,cv.dnn.cuda4dnn.PriorBoxOp.image_width,,src\cuda4dnn\primitives\prior_box.hpp,image_width,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4628,376335,image_height,3,cv.dnn.cuda4dnn.PriorBoxOp.image_height,,src\cuda4dnn\primitives\prior_box.hpp,image_height,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4629,376336,box_size,3,cv.dnn.cuda4dnn.PriorBoxOp.box_size,,src\cuda4dnn\primitives\prior_box.hpp,box_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
4630,376337,offset_size,3,cv.dnn.cuda4dnn.PriorBoxOp.offset_size,,src\cuda4dnn\primitives\prior_box.hpp,offset_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
4631,376338,stepX,3,cv.dnn.cuda4dnn.PriorBoxOp.stepX,,src\cuda4dnn\primitives\prior_box.hpp,stepX,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4632,376339,stepY,3,cv.dnn.cuda4dnn.PriorBoxOp.stepY,,src\cuda4dnn\primitives\prior_box.hpp,stepY,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4633,376333,feature_map_height,3,cv.dnn.cuda4dnn.PriorBoxOp.feature_map_height,,src\cuda4dnn\primitives\prior_box.hpp,feature_map_height,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4634,376340,variance,3,cv.dnn.cuda4dnn.PriorBoxOp.variance,,src\cuda4dnn\primitives\prior_box.hpp,variance,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4635,376341,num_priors,3,cv.dnn.cuda4dnn.PriorBoxOp.num_priors,,src\cuda4dnn\primitives\prior_box.hpp,num_priors,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4636,376342,clip,3,cv.dnn.cuda4dnn.PriorBoxOp.clip,,src\cuda4dnn\primitives\prior_box.hpp,clip,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4637,146967,_has_bits_,3,opencv_caffe.ReLUParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
4638,146969,negative_slope_,3,opencv_caffe.ReLUParameter.negative_slope_,,misc\caffe\opencv-caffe.pb.hpp,negative_slope_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
4639,146970,engine_,3,opencv_caffe.ReLUParameter.engine_,,misc\caffe\opencv-caffe.pb.hpp,engine_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
4640,376343,normalize,3,cv.dnn.cuda4dnn.PriorBoxOp.normalize,,src\cuda4dnn\primitives\prior_box.hpp,normalize,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4641,146968,_cached_size_,3,opencv_caffe.ReLUParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
4642,81438,SharedDtor,1,opencv_caffe.ScaleParameter.SharedDtor,void opencv_caffe.ScaleParameter.SharedDtor (),misc\caffe\opencv-caffe.pb.cc,"inline void ScaleParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete filler_;
  if (this != internal_default_instance()) delete bias_filler_;
}",26239.0,26243.0,1.0,1.0,5.0,5,3,2,2,0,4,3,3,2,0,,0,4,0,0,0,void
4643,130591,descriptor,1,opencv_caffe.ContrastiveLossParameter.descriptor,Descriptor opencv_caffe.ContrastiveLossParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",8535.0,8537.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
4644,130597,GetDescriptor,1,opencv_caffe.ContrastiveLossParameter.GetDescriptor,Descriptor opencv_caffe.ContrastiveLossParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",8538.0,8540.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
4645,114214,descriptor,1,opencv_caffe.PermuteParameter.descriptor,Descriptor opencv_caffe.PermuteParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",1753.0,1755.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
4646,376361,seqLength,3,cv.dnn.cuda4dnn.RNNConfiguration.seqLength,,src\cuda4dnn\primitives\recurrent_cells.hpp,seqLength,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4647,376362,numLayers,3,cv.dnn.cuda4dnn.RNNConfiguration.numLayers,,src\cuda4dnn\primitives\recurrent_cells.hpp,numLayers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4648,376363,hiddenSize,3,cv.dnn.cuda4dnn.RNNConfiguration.hiddenSize,,src\cuda4dnn\primitives\recurrent_cells.hpp,hiddenSize,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4649,114220,GetDescriptor,1,opencv_caffe.PermuteParameter.GetDescriptor,Descriptor opencv_caffe.PermuteParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",1756.0,1758.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
4650,48685,SetCachedSize,1,opencv_caffe.ConvolutionParameter.SetCachedSize,void opencv_caffe.ConvolutionParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void ConvolutionParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",16328.0,16330.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
4651,376364,inputSize,3,cv.dnn.cuda4dnn.RNNConfiguration.inputSize,,src\cuda4dnn\primitives\recurrent_cells.hpp,inputSize,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4652,376365,miniBatch,3,cv.dnn.cuda4dnn.RNNConfiguration.miniBatch,,src\cuda4dnn\primitives\recurrent_cells.hpp,miniBatch,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4653,376366,bidirectional,3,cv.dnn.cuda4dnn.RNNConfiguration.bidirectional,,src\cuda4dnn\primitives\recurrent_cells.hpp,bidirectional,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4654,130608,GetReflection,1,opencv_caffe.ContrastiveLossParameter.GetReflection,Reflection opencv_caffe.ContrastiveLossParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",8541.0,8543.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
4655,310834,fbb_,3,opencv_tflite.AddOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
4656,376369,LSTMOp,1,cv.dnn.cuda4dnn.LSTMOp.LSTMOp,"ANY cv.dnn.cuda4dnn.LSTMOp.LSTMOp (ANY,ANY,Mat,Mat,Mat,RNNConfiguration)",src\cuda4dnn\primitives\recurrent_cells.hpp,"LSTMOp(csl::Stream stream_, csl::cudnn::Handle handle, const Mat& filters, const Mat& h0,
           const Mat& c0, const RNNConfiguration& config)
            : stream(std::move(stream_))
    {
        typename csl::LSTM<T>::params_type params{
                {filters.total(), 1, 1}, // reshape
                config.seqLength,
                config.numLayers,
                config.hiddenSize,
                config.inputSize,
                config.miniBatch,
                config.bidirectional,
                0.0, /* dropout */
                csl::cudnn::RNNDescriptor<T>::RNNMode::LSTM
        };

        lstm = csl::LSTM<T>(handle, params);
        auto correct_shape_filters = filters.reshape(1, {static_cast<int>(filters.total()), 1, 1});
        filtersTensor = csl::makeTensorHeader<T>(correct_shape_filters);
        csl::copyMatToTensor<T>(correct_shape_filters, filtersTensor, stream);

        h0Tensor = csl::makeTensorHeader<T>(h0);
        csl::copyMatToTensor<T>(h0, ...",32.0,61.0,5.0,5.0,30.0,50,8,48,18,0,17,1,1,0,0,,0,17,12,6,6,ANY
4657,310835,start_,3,opencv_tflite.AddOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4658,310836,add_fused_activation_function,1,opencv_tflite.AddOptionsBuilder.add_fused_activation_function,void opencv_tflite.AddOptionsBuilder.add_fused_activation_function (ANY),misc\tflite\schema_generated.hpp,"void add_fused_activation_function(opencv_tflite::ActivationFunctionType fused_activation_function) {
    fbb_.AddElement<int8_t>(AddOptions::VT_FUSED_ACTIVATION_FUNCTION, static_cast<int8_t>(fused_activation_function), 0);
  }",4041.0,4043.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4659,48695,Clear,1,opencv_caffe.ConvolutionParameter.Clear,void opencv_caffe.ConvolutionParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void ConvolutionParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.ConvolutionParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pad_.Clear();
  kernel_size_.Clear();
  stride_.Clear();
  dilation_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(weight_filler_ != nullptr);
      weight_filler_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bias_filler_ != nullptr);
      bias_filler_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&num_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stride_h_) -
        reinterpret_cast<char*>(&num_output_)) + sizeof(stride_h_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&stride_w_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&force_nd_im2col_...",16332.0,16368.0,1.0,1.0,37.0,42,11,30,16,0,21,6,8,0,0,,0,21,0,0,0,void
4660,114231,GetReflection,1,opencv_caffe.PermuteParameter.GetReflection,Reflection opencv_caffe.PermuteParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",1759.0,1761.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
4661,130619,default_instance,1,opencv_caffe.ContrastiveLossParameter.default_instance,ContrastiveLossParameter opencv_caffe.ContrastiveLossParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const ContrastiveLossParameter& default_instance() {
    return *internal_default_instance();
  }",8544.0,8546.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,ContrastiveLossParameter
4662,15936,InternalSwap,1,opencv_caffe.Datum.InternalSwap,void opencv_caffe.Datum.InternalSwap (Datum*),misc\caffe\opencv-caffe.pb.cc,"void Datum::InternalSwap(Datum* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  float_data_.InternalSwap(&other->float_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Datum, encoded_)
      + sizeof(Datum::encoded_)
      - PROTOBUF_FIELD_OFFSET(Datum, channels_)>(
          reinterpret_cast<char*>(&channels_),
          reinterpret_cast<char*>(&other->channels_));
}",7080.0,7098.0,1.0,1.0,19.0,36,13,27,13,0,11,1,1,0,0,,0,11,2,1,1,void
4663,114242,default_instance,1,opencv_caffe.PermuteParameter.default_instance,PermuteParameter opencv_caffe.PermuteParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const PermuteParameter& default_instance() {
    return *internal_default_instance();
  }",1762.0,1764.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,PermuteParameter
4664,130626,internal_default_instance,1,opencv_caffe.ContrastiveLossParameter.internal_default_instance,ContrastiveLossParameter opencv_caffe.ContrastiveLossParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const ContrastiveLossParameter* internal_default_instance() {
    return reinterpret_cast<const ContrastiveLossParameter*>(
               &_ContrastiveLossParameter_default_instance_);
  }",8547.0,8550.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,ContrastiveLossParameter
4665,81479,SetCachedSize,1,opencv_caffe.ScaleParameter.SetCachedSize,void opencv_caffe.ScaleParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void ScaleParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",26251.0,26253.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
4666,310856,add_pot_scale_int16,1,opencv_tflite.AddOptionsBuilder.add_pot_scale_int16,void opencv_tflite.AddOptionsBuilder.add_pot_scale_int16 (bool),misc\tflite\schema_generated.hpp,"void add_pot_scale_int16(bool pot_scale_int16) {
    fbb_.AddElement<uint8_t>(AddOptions::VT_POT_SCALE_INT16, static_cast<uint8_t>(pot_scale_int16), 1);
  }",4044.0,4046.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4667,114249,internal_default_instance,1,opencv_caffe.PermuteParameter.internal_default_instance,PermuteParameter opencv_caffe.PermuteParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const PermuteParameter* internal_default_instance() {
    return reinterpret_cast<const PermuteParameter*>(
               &_PermuteParameter_default_instance_);
  }",1765.0,1768.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,PermuteParameter
4668,65102,_InternalParse,1,opencv_caffe.ImageDataParameter._InternalParse,"const char* opencv_caffe.ImageDataParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* ImageDataParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, ""opencv_caffe.ImageDataParameter.source"");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float scale = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
       ...",21229.0,21375.0,1.0,10.0,147.0,130,14,145,20,0,19,31,42,0,9,,0,10,4,2,2,const char*
4669,97872,SharedCtor,1,opencv_caffe.V0LayerParameter.SharedCtor,void opencv_caffe.V0LayerParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void V0LayerParameter::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
meanfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyIni...",30999.0,31034.0,1.0,1.0,36.0,46,7,30,22,0,22,1,1,0,0,,0,22,0,0,0,void
4670,81489,Clear,1,opencv_caffe.ScaleParameter.Clear,void opencv_caffe.ScaleParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void ScaleParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.ScaleParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(filler_ != nullptr);
      filler_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bias_filler_ != nullptr);
      bias_filler_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    bias_term_ = false;
    axis_ = 1;
    num_axes_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",26255.0,26279.0,1.0,1.0,25.0,17,7,17,8,0,9,5,7,0,0,,0,9,0,0,0,void
4671,343644,build_net,1,opencv_test.build_net,"Net opencv_test.build_net (ConvParam_t,Backend,Target,ANY,double,double)",perf\perf_convolution.cpp,"static
Net build_net(
    const ConvParam_t& params, Backend backendId, Target targetId,
    const std::function<void(Net&)>& configure_network_cb = std::function<void(Net&)>(),
    double flops_limit_debug_long = 2e9, double flops_limit_debug_verylong = 6e9
)
{
    double declared_flops = params.declared_flops;

    if (flops_limit_debug_verylong > 0 && declared_flops >= flops_limit_debug_verylong)
        applyTestTag(CV_TEST_TAG_DEBUG_VERYLONG);
    if (flops_limit_debug_long > 0 && declared_flops >= flops_limit_debug_long)
        applyTestTag(CV_TEST_TAG_DEBUG_LONG);

    Size kernel = params.kernel;
    MatShape inputShape = MatShape(params.shapeIn.dims, params.shapeIn.dims + 4);
    int outChannels = params.outCN;
    int groups = params.groups;
    Size stride = params.stride;
    Size dilation = params.dilation;
    Size pad = params.pad;
    Size padAdjust = params.padAdjust;
    std::string padMode(params.padMode);
    bool hasBias = params.hasBias;

    int inChannels = ...",809.0,903.0,1.0,1.0,95.0,132,15,129,33,0,12,7,7,0,0,,0,12,12,6,6,Net
4672,310876,AddOptionsBuilder,1,opencv_tflite.AddOptionsBuilder.AddOptionsBuilder,ANY opencv_tflite.AddOptionsBuilder.AddOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit AddOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",4047.0,4050.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
4673,310887,Finish,1,opencv_tflite.AddOptionsBuilder.Finish,Offset<AddOptions> opencv_tflite.AddOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<AddOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AddOptions>(end);
    return o;
  }",4051.0,4055.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<AddOptions>
4674,278153,MergeFrom,1,opencv_tensorflow.NodeDef.MergeFrom,void opencv_tensorflow.NodeDef.MergeFrom (NodeDef),misc\tensorflow\graph.pb.cc,"void NodeDef::MergeFrom(const NodeDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_tensorflow.NodeDef)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  input_.MergeFrom(from.input_);
  attr_.MergeFrom(from.attr_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_op().empty()) {
    _internal_set_op(from._internal_op());
  }
  if (!from._internal_device().empty()) {
    _internal_set_device(from._internal_device());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}",828.0,846.0,1.0,1.0,19.0,24,7,16,6,0,4,4,4,0,0,,0,4,2,1,1,void
4675,360079,squeeze,1,cv.dnn.cuda4dnn.csl.Tensor.squeeze,void cv.dnn.cuda4dnn.csl.Tensor.squeeze (),src\cuda4dnn\csl\tensor.hpp,"void squeeze(int axis) {
            CV_Assert(!empty());
            CV_Assert(rank() >= 2);
            axis = clamp_axis(axis, rank());
            CV_Assert(axis >= 0 && axis < rank());
            shape.erase(std::begin(shape) + axis);
        }",364.0,370.0,9.0,9.0,7.0,9,5,10,3,0,4,1,1,0,0,,0,4,2,1,1,void
4676,81558,_InternalParse,1,opencv_caffe.ScaleParameter._InternalParse,"const char* opencv_caffe.ScaleParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* ScaleParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 axis = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_axis(&has_bits);
          axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_axes = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_num_axes(&has_bits);
          num_axes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto ...",26281.0,26353.0,1.0,10.0,73.0,59,12,64,12,0,7,17,21,0,3,,0,4,4,2,2,const char*
4677,147094,descriptor,1,opencv_caffe.ReshapeParameter.descriptor,Descriptor opencv_caffe.ReshapeParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",15537.0,15539.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
4678,310939,fbb_,3,opencv_tflite.MulOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
4679,147100,GetDescriptor,1,opencv_caffe.ReshapeParameter.GetDescriptor,Descriptor opencv_caffe.ReshapeParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",15540.0,15542.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
4680,310940,start_,3,opencv_tflite.MulOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4681,310941,add_fused_activation_function,1,opencv_tflite.MulOptionsBuilder.add_fused_activation_function,void opencv_tflite.MulOptionsBuilder.add_fused_activation_function (ANY),misc\tflite\schema_generated.hpp,"void add_fused_activation_function(opencv_tflite::ActivationFunctionType fused_activation_function) {
    fbb_.AddElement<int8_t>(MulOptions::VT_FUSED_ACTIVATION_FUNCTION, static_cast<int8_t>(fused_activation_function), 0);
  }",4087.0,4089.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4682,16031,GetMetadata,1,opencv_caffe.Datum.GetMetadata,Metadata opencv_caffe.Datum.GetMetadata (),misc\caffe\opencv-caffe.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata Datum::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2dcaffe_2eproto_getter, &descriptor_table_opencv_2dcaffe_2eproto_once,
      file_level_metadata_opencv_2dcaffe_2eproto[7]);
}",7100.0,7104.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
4683,147111,GetReflection,1,opencv_caffe.ReshapeParameter.GetReflection,Reflection opencv_caffe.ReshapeParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",15543.0,15545.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
4684,310961,MulOptionsBuilder,1,opencv_tflite.MulOptionsBuilder.MulOptionsBuilder,ANY opencv_tflite.MulOptionsBuilder.MulOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit MulOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",4090.0,4093.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
4685,147122,default_instance,1,opencv_caffe.ReshapeParameter.default_instance,ReshapeParameter opencv_caffe.ReshapeParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const ReshapeParameter& default_instance() {
    return *internal_default_instance();
  }",15546.0,15548.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,ReshapeParameter
4686,147129,internal_default_instance,1,opencv_caffe.ReshapeParameter.internal_default_instance,ReshapeParameter opencv_caffe.ReshapeParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const ReshapeParameter* internal_default_instance() {
    return reinterpret_cast<const ReshapeParameter*>(
               &_ReshapeParameter_default_instance_);
  }",15549.0,15552.0,3.0,3.0,4.0,2,2,1,1,2,0,1,1,0,0,,0,0,0,0,0,ReshapeParameter
4687,48827,_InternalParse,1,opencv_caffe.ConvolutionParameter._InternalParse,"const char* opencv_caffe.ConvolutionParameter._InternalParse (char*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"const char* ConvolutionParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 num_output = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_num_output(&has_bits);
          num_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool bias_term = 2 [default = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_bias_term(&has_bits);
          bias_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else...",16370.0,16591.0,1.0,10.0,222.0,196,16,198,22,0,24,56,100,1,12,,0,13,4,2,2,const char*
4688,310972,Finish,1,opencv_tflite.MulOptionsBuilder.Finish,Offset<MulOptions> opencv_tflite.MulOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<MulOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MulOptions>(end);
    return o;
  }",4094.0,4098.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<MulOptions>
4689,16062,set_has_value,1,opencv_caffe._Internal.set_has_value,void opencv_caffe._Internal.set_has_value (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }",7114.0,7116.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
4690,130751,GetCachedSize,1,opencv_caffe.ContrastiveLossParameter.GetCachedSize,int opencv_caffe.ContrastiveLossParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },8595.0,8595.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
4691,376512,forward,1,cv.dnn.cuda4dnn.LSTMOp.forward,"void cv.dnn.cuda4dnn.LSTMOp.forward (ANY,ANY,ANY)",src\cuda4dnn\primitives\recurrent_cells.hpp,"void forward(const std::vector<cv::Ptr<BackendWrapper>>& inputs,
                 const std::vector<cv::Ptr<BackendWrapper>>& outputs,
                 csl::Workspace& workspace) override
    {
        CV_Assert(inputs.size() == 1 && !outputs.empty());

        auto input_wrapper = inputs[0].dynamicCast<wrapper_type>();
        auto input = input_wrapper->getView();

        auto y_output_wrapper = outputs[0].dynamicCast<wrapper_type>();
        auto y_output = y_output_wrapper->getSpan();

        Ptr<wrapper_type> yc_output_wrapper = outputs.size() == 2 ? outputs[1].dynamicCast<wrapper_type>() : Ptr<wrapper_type>();
        csl::TensorSpan<T> yc_output = yc_output_wrapper.empty() ? csl::TensorSpan<T>() : yc_output_wrapper->getSpan();

        csl::WorkspaceAllocator allocator(workspace);
        lstm.inference(input, y_output, yc_output, filtersTensor, h0Tensor, c0Tensor, allocator.get_instance());
    }",63.0,80.0,5.0,5.0,18.0,28,8,26,15,0,4,1,1,0,0,,0,4,6,3,3,void
4692,114374,GetCachedSize,1,opencv_caffe.PermuteParameter.GetCachedSize,int opencv_caffe.PermuteParameter.GetCachedSize (),misc\caffe\opencv-caffe.pb.hpp,int GetCachedSize() const final { return _cached_size_.Get(); },1813.0,1813.0,3.0,65.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,int
4693,16073,set_has_min,1,opencv_caffe._Internal.set_has_min,void opencv_caffe._Internal.set_has_min (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_min(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }",7117.0,7119.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
4694,229071,SharedCtor,1,opencv_onnx.ModelProto.SharedCtor,void opencv_onnx.ModelProto.SharedCtor (),misc\onnx\opencv-onnx.pb.cc,"inline void ModelProto::SharedCtor() {
producer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  producer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
producer_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  producer_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
doc_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_...",2347.0,2368.0,1.0,1.0,22.0,32,6,16,8,0,8,1,1,0,0,,0,8,0,0,0,void
4695,361406,size_range,1,cv.dnn.cuda4dnn.csl.TensorView.size_range,"size_type cv.dnn.cuda4dnn.csl.TensorView.size_range (size_type,size_type)",src\cuda4dnn\csl\tensor.hpp,"size_type size_range(size_type axis_start, size_type axis_end) const noexcept {
            CV_Assert(!empty());
            CV_Assert(axis_start <= axis_end);
            CV_Assert(axis_end <= rank());
            auto start = std::begin(shape) + axis_start;
            auto end = std::begin(shape) + axis_end;
            return std::accumulate(start, end, 1, std::multiplies<size_type>());
        }",904.0,911.0,9.0,9.0,8.0,11,5,15,6,0,2,1,1,0,0,,0,2,4,2,2,size_type
4696,16084,set_has_max,1,opencv_caffe._Internal.set_has_max,void opencv_caffe._Internal.set_has_max (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_max(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }",7120.0,7122.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
4697,360155,squeeze_to,1,cv.dnn.cuda4dnn.csl.Tensor.squeeze_to,void cv.dnn.cuda4dnn.csl.Tensor.squeeze_to (int),src\cuda4dnn\csl\tensor.hpp,"void squeeze_to(int r) {
            CV_Assert(!empty());
            CV_Assert(rank() >= r);
            CV_Assert(std::all_of(std::begin(shape), std::end(shape) - r, [](size_type x){ return x == 1; }));
            std::copy(std::end(shape) - r, std::end(shape), std::begin(shape));
            shape.resize(r);
        }",384.0,390.0,9.0,9.0,7.0,12,4,17,3,0,6,1,1,0,0,,0,6,2,1,1,void
4698,98012,SharedDtor,1,opencv_caffe.V0LayerParameter.SharedDtor,void opencv_caffe.V0LayerParameter.SharedDtor (),misc\caffe\opencv-caffe.pb.cc,"inline void V0LayerParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  meanfile_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  det_crop_mode_.DestroyNoArena(nullptr);
  if (this != internal_default_instance()) delete weight_filler_;
  if (this != internal_default_instance()) delete bias_filler_;
  if (this != internal_default_instance()) delete hdf5_output_param_;
}",31043.0,31053.0,1.0,1.0,11.0,24,5,16,10,0,11,4,4,3,0,,0,11,0,0,0,void
4699,16095,set_has_mean,1,opencv_caffe._Internal.set_has_mean,void opencv_caffe._Internal.set_has_mean (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_mean(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }",7123.0,7125.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
4700,146484,_has_bits_,3,opencv_caffe.ReductionParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
4701,311018,fbb_,3,opencv_tflite.L2NormOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
4702,16106,set_has_std,1,opencv_caffe._Internal.set_has_std,void opencv_caffe._Internal.set_has_std (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_std(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }",7126.0,7128.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
4703,146485,_cached_size_,3,opencv_caffe.ReductionParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
4704,311020,add_fused_activation_function,1,opencv_tflite.L2NormOptionsBuilder.add_fused_activation_function,void opencv_tflite.L2NormOptionsBuilder.add_fused_activation_function (ANY),misc\tflite\schema_generated.hpp,"void add_fused_activation_function(opencv_tflite::ActivationFunctionType fused_activation_function) {
    fbb_.AddElement<int8_t>(L2NormOptions::VT_FUSED_ACTIVATION_FUNCTION, static_cast<int8_t>(fused_activation_function), 0);
  }",4128.0,4130.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4705,311019,start_,3,opencv_tflite.L2NormOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4706,261874,ByteSizeLong,1,opencv_tensorflow.AttrValue.ByteSizeLong,size_t opencv_tensorflow.AttrValue.ByteSizeLong (),misc\tensorflow\attr_value.pb.cc,"size_t AttrValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_tensorflow.AttrValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // bytes s = 2;
    case kS: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_s());
      break;
    }
    // int64 i = 3;
    case kI: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_i());
      break;
    }
    // float f = 4;
    case kF: {
      total_size += 1 + 4;
      break;
    }
    // bool b = 5;
    case kB: {
      total_size += 1 + 1;
      break;
    }
    // .opencv_tensorflow.DataType type = 6;
    case kType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
      break;
...",1060.0,1137.0,1.0,1.0,78.0,59,8,54,18,0,16,13,2,0,0,,0,16,0,0,0,size_t
4707,278260,InternalSwap,1,opencv_tensorflow.NodeDef.InternalSwap,void opencv_tensorflow.NodeDef.InternalSwap (NodeDef*),misc\tensorflow\graph.pb.cc,"void NodeDef::InternalSwap(NodeDef* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  input_.InternalSwap(&other->input_);
  attr_.InternalSwap(&other->attr_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &op_, lhs_arena,
      &other->op_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &device_, lhs_arena,
      &other->device_, rhs_arena
  );
}",859.0,881.0,1.0,1.0,23.0,39,4,36,12,0,10,1,1,0,0,,0,10,2,1,1,void
4708,16117,set_has_sparse,1,opencv_caffe._Internal.set_has_sparse,void opencv_caffe._Internal.set_has_sparse (HasBits*),misc\caffe\opencv-caffe.pb.cc,"static void set_has_sparse(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }",7129.0,7131.0,3.0,3.0,3.0,2,2,1,1,1,0,1,1,0,0,,0,0,2,1,1,void
4709,311040,L2NormOptionsBuilder,1,opencv_tflite.L2NormOptionsBuilder.L2NormOptionsBuilder,ANY opencv_tflite.L2NormOptionsBuilder.L2NormOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit L2NormOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",4131.0,4134.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
4710,311051,Finish,1,opencv_tflite.L2NormOptionsBuilder.Finish,Offset<L2NormOptions> opencv_tflite.L2NormOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<L2NormOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<L2NormOptions>(end);
    return o;
  }",4135.0,4139.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<L2NormOptions>
4711,360211,unsqueeze,1,cv.dnn.cuda4dnn.csl.Tensor.unsqueeze,void cv.dnn.cuda4dnn.csl.Tensor.unsqueeze (int),src\cuda4dnn\csl\tensor.hpp,"void unsqueeze(int axis = 0) {
            CV_Assert(!empty());
            CV_Assert(rank() < CSL_MAX_TENSOR_RANK);
            axis = clamp_axis(axis, rank());
            CV_Assert(axis >= 0 && axis < rank());
            shape.insert(std::begin(shape) + axis, 1);
        }",402.0,408.0,9.0,31.0,7.0,9,7,8,3,0,2,1,1,0,0,,0,2,2,1,1,void
4712,376614,get_workspace_memory_in_bytes,1,cv.dnn.cuda4dnn.LSTMOp.get_workspace_memory_in_bytes,size_t cv.dnn.cuda4dnn.LSTMOp.get_workspace_memory_in_bytes (),src\cuda4dnn\primitives\recurrent_cells.hpp,"std::size_t get_workspace_memory_in_bytes() const noexcept override
    {
        return lstm.get_workspace_memory_in_bytes();
    }",82.0,85.0,5.0,5.0,4.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,size_t
4713,376623,lstm,3,cv.dnn.cuda4dnn.LSTMOp.lstm,,src\cuda4dnn\primitives\recurrent_cells.hpp,lstm,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
4714,376624,stream,3,cv.dnn.cuda4dnn.LSTMOp.stream,,src\cuda4dnn\primitives\recurrent_cells.hpp,stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
4715,376625,filtersTensor,3,cv.dnn.cuda4dnn.LSTMOp.filtersTensor,,src\cuda4dnn\primitives\recurrent_cells.hpp,filtersTensor,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
4716,245552,_has_bits_,3,opencv_onnx.GraphProto._has_bits_,,misc\onnx\opencv-onnx.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
4717,376627,c0Tensor,3,cv.dnn.cuda4dnn.LSTMOp.c0Tensor,,src\cuda4dnn\primitives\recurrent_cells.hpp,c0Tensor,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
4718,245553,_cached_size_,3,opencv_onnx.GraphProto._cached_size_,,misc\onnx\opencv-onnx.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
4719,245555,initializer_,3,opencv_onnx.GraphProto.initializer_,,misc\onnx\opencv-onnx.pb.hpp,initializer_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
4720,229167,SharedDtor,1,opencv_onnx.ModelProto.SharedDtor,void opencv_onnx.ModelProto.SharedDtor (),misc\onnx\opencv-onnx.pb.cc,"inline void ModelProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  producer_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  producer_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doc_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete graph_;
}",2377.0,2384.0,1.0,1.0,8.0,19,5,13,7,0,6,2,2,1,0,,0,6,0,0,0,void
4721,245554,node_,3,opencv_onnx.GraphProto.node_,,misc\onnx\opencv-onnx.pb.hpp,node_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
4722,376626,h0Tensor,3,cv.dnn.cuda4dnn.LSTMOp.h0Tensor,,src\cuda4dnn\primitives\recurrent_cells.hpp,h0Tensor,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
4723,245556,input_,3,opencv_onnx.GraphProto.input_,,misc\onnx\opencv-onnx.pb.hpp,input_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
4724,245558,value_info_,3,opencv_onnx.GraphProto.value_info_,,misc\onnx\opencv-onnx.pb.hpp,value_info_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
4725,245557,output_,3,opencv_onnx.GraphProto.output_,,misc\onnx\opencv-onnx.pb.hpp,output_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
4726,245560,doc_string_,3,opencv_onnx.GraphProto.doc_string_,,misc\onnx\opencv-onnx.pb.hpp,doc_string_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
4727,311097,fbb_,3,opencv_tflite.LocalResponseNormalizationOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
4728,245559,name_,3,opencv_onnx.GraphProto.name_,,misc\onnx\opencv-onnx.pb.hpp,name_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
4729,360250,Span,1,cv.dnn.cuda4dnn.csl.Tensor.operator cv.dnn.cuda4dnn.csl.Span<#0>,ANY cv.dnn.cuda4dnn.csl.Tensor.operator cv.dnn.cuda4dnn.csl.Span<#0> (),src\cuda4dnn\csl\tensor.hpp,"operator Span<T>() noexcept { return Span<T>(data.get(), size()); }",410.0,410.0,9.0,75.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,ANY
4730,311098,start_,3,opencv_tflite.LocalResponseNormalizationOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4731,311099,add_radius,1,opencv_tflite.LocalResponseNormalizationOptionsBuilder.add_radius,void opencv_tflite.LocalResponseNormalizationOptionsBuilder.add_radius (int32_t),misc\tflite\schema_generated.hpp,"void add_radius(int32_t radius) {
    fbb_.AddElement<int32_t>(LocalResponseNormalizationOptions::VT_RADIUS, radius, 0);
  }",4184.0,4186.0,3.0,3.0,3.0,6,5,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4732,32575,SharedCtor,1,opencv_caffe.LayerParameter.SharedCtor,void opencv_caffe.LayerParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void LayerParameter::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), """", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transform_param_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&phase_) -
    reinterpret_cast<char*>(&transform_param_)) + sizeof(phase_));
}",11700.0,11713.0,1.0,1.0,14.0,24,6,10,6,0,6,1,1,0,0,,0,6,0,0,0,void
4733,98109,SetCachedSize,1,opencv_caffe.V0LayerParameter.SetCachedSize,void opencv_caffe.V0LayerParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void V0LayerParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",31061.0,31063.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
4734,114500,order_,3,opencv_caffe.PermuteParameter.order_,,misc\caffe\opencv-caffe.pb.hpp,order_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
4735,360261,Span,1,cv.dnn.cuda4dnn.csl.Tensor.operator cv.dnn.cuda4dnn.csl.Span<const #0>,ANY cv.dnn.cuda4dnn.csl.Tensor.operator cv.dnn.cuda4dnn.csl.Span<const #0> (),src\cuda4dnn\csl\tensor.hpp,"operator View<T>() const noexcept { return View<T>(data.get(), size()); }",411.0,411.0,9.0,81.0,1.0,1,1,1,1,0,1,1,1,0,0,,0,1,0,0,0,ANY
4736,114501,_cached_size_,3,opencv_caffe.PermuteParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
4737,130887,_has_bits_,3,opencv_caffe.ContrastiveLossParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
4738,98119,Clear,1,opencv_caffe.V0LayerParameter.Clear,void opencv_caffe.V0LayerParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void V0LayerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.V0LayerParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blobs_.Clear();
  blobs_lr_.Clear();
  weight_decay_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      source_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      meanfile_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      det_crop_mode_.ClearToDefault(::opencv_caffe::V0LayerParameter::_i_give_permission_to_break_this_code_default_det_crop_mode_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(weight_...",31065.0,31134.0,1.0,1.0,70.0,70,11,58,33,0,38,14,22,0,0,,0,38,0,0,0,void
4739,130889,legacy_version_,3,opencv_caffe.ContrastiveLossParameter.legacy_version_,,misc\caffe\opencv-caffe.pb.hpp,legacy_version_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
4740,130890,margin_,3,opencv_caffe.ContrastiveLossParameter.margin_,,misc\caffe\opencv-caffe.pb.hpp,margin_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
4741,130888,_cached_size_,3,opencv_caffe.ContrastiveLossParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
4742,311117,add_bias,1,opencv_tflite.LocalResponseNormalizationOptionsBuilder.add_bias,void opencv_tflite.LocalResponseNormalizationOptionsBuilder.add_bias (float),misc\tflite\schema_generated.hpp,"void add_bias(float bias) {
    fbb_.AddElement<float>(LocalResponseNormalizationOptions::VT_BIAS, bias, 0.0f);
  }",4187.0,4189.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
4743,376658,SIGMOID,3,cv.dnn.cuda4dnn.SquashMethod.SIGMOID,,src\cuda4dnn\primitives\region.hpp,SIGMOID,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4744,294746,ByteSizeLong,1,opencv_tensorflow.TensorProto.ByteSizeLong,size_t opencv_tensorflow.TensorProto.ByteSizeLong (),misc\tensorflow\tensor.pb.cc,"size_t TensorProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_tensorflow.TensorProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float float_val = 5 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_float_val_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double double_val = 6 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_double_val_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_s...",506.0,653.0,1.0,1.0,148.0,168,13,149,17,0,11,14,14,0,0,,0,11,0,0,0,size_t
4745,311131,add_alpha,1,opencv_tflite.LocalResponseNormalizationOptionsBuilder.add_alpha,void opencv_tflite.LocalResponseNormalizationOptionsBuilder.add_alpha (float),misc\tflite\schema_generated.hpp,"void add_alpha(float alpha) {
    fbb_.AddElement<float>(LocalResponseNormalizationOptions::VT_ALPHA, alpha, 0.0f);
  }",4190.0,4192.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
4746,376672,RegionOp,1,cv.dnn.cuda4dnn.RegionOp.RegionOp,"ANY cv.dnn.cuda4dnn.RegionOp.RegionOp<V> (ANY,ANY,RegionConfiguration<V>)",src\cuda4dnn\primitives\region.hpp,"RegionOp(csl::Stream stream_, const cv::Mat& bias, const RegionConfiguration<V>& config)
            : stream(std::move(stream_))
        {
            biasTensor = csl::makeTensorHeader<T>(bias);
            csl::copyMatToTensor<T>(bias, biasTensor, stream);

            classes = config.classes;
            boxes_per_cell = config.boxes_per_cell;

            width_norm = config.width_norm;
            height_norm = config.height_norm;

            scale_x_y = config.scale_x_y;

            squash_type = config.squash_method;
            object_prob_cutoff = config.object_prob_cutoff;
            class_prob_cutoff = config.class_prob_cutoff;

            nms_iou_threshold = config.nms_iou_threshold;
            new_coords = config.new_coords;
        }",72.0,92.0,9.0,9.0,21.0,29,6,29,16,0,13,1,1,0,0,,0,13,6,3,3,ANY
4747,16224,SharedCtor,1,opencv_caffe.FillerParameter.SharedCtor,void opencv_caffe.FillerParameter.SharedCtor (),misc\caffe\opencv-caffe.pb.cc,"inline void FillerParameter::SharedCtor() {
type_.UnsafeSetDefault(nullptr);
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&variance_norm_) -
    reinterpret_cast<char*>(&value_)) + sizeof(variance_norm_));
sparse_ = -1;
max_ = 1;
std_ = 1;
}",7162.0,7171.0,1.0,1.0,10.0,21,8,8,6,0,8,1,1,0,0,,0,8,0,0,0,void
4748,278369,GetMetadata,1,opencv_tensorflow.NodeDef.GetMetadata,Metadata opencv_tensorflow.NodeDef.GetMetadata (),misc\tensorflow\graph.pb.cc,"::PROTOBUF_NAMESPACE_ID::Metadata NodeDef::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[2]);
}",883.0,887.0,1.0,1.0,5.0,5,3,4,4,0,2,1,1,0,0,,0,2,0,0,0,Metadata
4749,360292,shape,3,cv.dnn.cuda4dnn.csl.Tensor.shape,,src\cuda4dnn\csl\tensor.hpp,shape,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,28,0,1,1,0,0,,0,0,0,0,0,
4750,360293,data,3,cv.dnn.cuda4dnn.csl.Tensor.data,,src\cuda4dnn\csl\tensor.hpp,data,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
4751,311145,add_beta,1,opencv_tflite.LocalResponseNormalizationOptionsBuilder.add_beta,void opencv_tflite.LocalResponseNormalizationOptionsBuilder.add_beta (float),misc\tflite\schema_generated.hpp,"void add_beta(float beta) {
    fbb_.AddElement<float>(LocalResponseNormalizationOptions::VT_BETA, beta, 0.0f);
  }",4193.0,4195.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
4752,311159,LocalResponseNormalizationOptionsBuilder,1,opencv_tflite.LocalResponseNormalizationOptionsBuilder.LocalResponseNormalizationOptionsBuilder,ANY opencv_tflite.LocalResponseNormalizationOptionsBuilder.LocalResponseNormalizationOptionsBuilder (ANY),misc\tflite\schema_generated.hpp,"explicit LocalResponseNormalizationOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }",4196.0,4199.0,3.0,3.0,4.0,2,2,2,2,0,2,1,1,0,0,,0,2,2,1,1,ANY
4753,229245,SetCachedSize,1,opencv_onnx.ModelProto.SetCachedSize,void opencv_onnx.ModelProto.SetCachedSize (int),misc\onnx\opencv-onnx.pb.cc,"void ModelProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",2392.0,2394.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
4754,311170,Finish,1,opencv_tflite.LocalResponseNormalizationOptionsBuilder.Finish,Offset<LocalResponseNormalizationOptions> opencv_tflite.LocalResponseNormalizationOptionsBuilder.Finish (),misc\tflite\schema_generated.hpp,"::flatbuffers::Offset<LocalResponseNormalizationOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LocalResponseNormalizationOptions>(end);
    return o;
  }",4200.0,4204.0,3.0,3.0,5.0,6,4,8,6,0,2,1,1,0,0,,0,2,0,0,0,Offset<LocalResponseNormalizationOptions>
4755,229255,Clear,1,opencv_onnx.ModelProto.Clear,void opencv_onnx.ModelProto.Clear (),misc\onnx\opencv-onnx.pb.cc,"void ModelProto::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_onnx.ModelProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  opset_import_.Clear();
  metadata_props_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      producer_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      producer_version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      domain_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      doc_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(graph_ != nullptr);
      graph_->Clear();
    }
  }
  if (cached_has_bits & 0x00000060u) {
    ::memset(&ir_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&model_version_) -
        reinterpret_cas...",2396.0,2430.0,1.0,1.0,35.0,31,11,25,12,0,14,8,13,0,0,,0,14,0,0,0,void
4756,32649,SharedDtor,1,opencv_caffe.LayerParameter.SharedDtor,void opencv_caffe.LayerParameter.SharedDtor (),misc\caffe\opencv-caffe.pb.cc,"inline void LayerParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete transform_param_;
  if (this != internal_default_instance()) delete loss_param_;
  if (this != internal_default_instance()) delete accuracy_param_;
  if (this != internal_default_instance()) delete argmax_param_;
  if (this != internal_default_instance()) delete concat_param_;
  if (this != internal_default_instance()) delete contrastive_loss_param_;
  if (this != internal_default_instance()) delete convolution_param_;
  if (this != internal_default_instance()) delete data_param_;
  if (this != internal_default_instance()) delete dropout_param_;
  if (this != internal_default_instance()) delete dummy_data_param_;
  if (this != internal_default_instance()) delet...",11722.0,11780.0,1.0,1.0,59.0,117,5,60,58,0,110,55,55,54,0,,0,110,0,0,0,void
4757,245666,descriptor,1,opencv_onnx.TensorProto_Segment.descriptor,Descriptor opencv_onnx.TensorProto_Segment.descriptor (),misc\onnx\opencv-onnx.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",1996.0,1998.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
4758,16291,SharedDtor,1,opencv_caffe.FillerParameter.SharedDtor,void opencv_caffe.FillerParameter.SharedDtor (),misc\caffe\opencv-caffe.pb.cc,"inline void FillerParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  type_.DestroyNoArena(nullptr);
}",7180.0,7183.0,1.0,1.0,4.0,2,2,1,1,0,1,1,1,0,0,,0,1,0,0,0,void
4759,245672,GetDescriptor,1,opencv_onnx.TensorProto_Segment.GetDescriptor,Descriptor opencv_onnx.TensorProto_Segment.GetDescriptor (),misc\onnx\opencv-onnx.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",1999.0,2001.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
4760,81835,_InternalSerialize,1,opencv_caffe.ScaleParameter._InternalSerialize,"uint8_t opencv_caffe.ScaleParameter._InternalSerialize (uint8_t*,ANY*)",misc\caffe\opencv-caffe.pb.cc,"uint8_t* ScaleParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_caffe.ScaleParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 axis = 1 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_axis(), target);
  }

  // optional int32 num_axes = 2 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num_axes(), target);
  }

  // optional .opencv_caffe.FillerParameter filler = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal...",26355.0,26402.0,1.0,1.0,48.0,55,8,65,11,0,3,7,7,0,2,,0,3,4,2,2,uint8_t
4761,376749,forward,1,cv.dnn.cuda4dnn.RegionOp.forward,"void cv.dnn.cuda4dnn.RegionOp.forward (ANY,ANY,ANY)",src\cuda4dnn\primitives\region.hpp,"void forward(
            const std::vector<cv::Ptr<BackendWrapper>>& inputs,
            const std::vector<cv::Ptr<BackendWrapper>>& outputs,
            csl::Workspace& workspace) override
        {
            CV_Assert(outputs.size() == 1);

            auto input_wrapper = inputs[0].dynamicCast<wrapper_type>();
            auto input = input_wrapper->getView();

            auto output_wrapper = outputs[0].dynamicCast<wrapper_type>();
            auto output = output_wrapper->getSpan();

            auto rows = input.get_axis_size(1);
            auto cols = input.get_axis_size(2);

            auto cell_box_size = classes + 4 + 1;

            /* we squash class scores into probabilities using softmax or sigmoid */
            bool if_true_sigmoid_else_softmax = (squash_type == SquashMethod::SIGMOID);

            kernels::region<T>(stream, output, input, biasTensor,
                object_prob_cutoff, class_prob_cutoff,
                boxes_per_cell, cell_box_size,
         ...",94.0,132.0,9.0,9.0,39.0,42,10,55,28,0,17,3,4,1,0,,0,17,6,3,3,void
4762,114607,descriptor,1,opencv_caffe.NormalizeBBoxParameter.descriptor,Descriptor opencv_caffe.NormalizeBBoxParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",1919.0,1921.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
4763,245683,GetReflection,1,opencv_onnx.TensorProto_Segment.GetReflection,Reflection opencv_onnx.TensorProto_Segment.GetReflection (),misc\onnx\opencv-onnx.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",2002.0,2004.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
4764,130996,descriptor,1,opencv_caffe.ConvolutionParameter.descriptor,Descriptor opencv_caffe.ConvolutionParameter.descriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }",8708.0,8710.0,3.0,3.0,3.0,0,0,0,0,0,1,1,1,0,0,,0,0,0,0,0,Descriptor
4765,114613,GetDescriptor,1,opencv_caffe.NormalizeBBoxParameter.GetDescriptor,Descriptor opencv_caffe.NormalizeBBoxParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",1922.0,1924.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
4766,367964,kernel_size,3,cv.dnn.cuda4dnn.ConvolutionConfiguration.kernel_size,,src\cuda4dnn\primitives\convolution.hpp,kernel_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4767,131002,GetDescriptor,1,opencv_caffe.ConvolutionParameter.GetDescriptor,Descriptor opencv_caffe.ConvolutionParameter.GetDescriptor (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }",8711.0,8713.0,3.0,3.0,3.0,2,1,0,0,1,1,1,1,0,0,,0,0,0,0,0,Descriptor
4768,245694,default_instance,1,opencv_onnx.TensorProto_Segment.default_instance,TensorProto_Segment opencv_onnx.TensorProto_Segment.default_instance (),misc\onnx\opencv-onnx.pb.hpp,"static const TensorProto_Segment& default_instance() {
    return *internal_default_instance();
  }",2005.0,2007.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,TensorProto_Segment
4769,114624,GetReflection,1,opencv_caffe.NormalizeBBoxParameter.GetReflection,Reflection opencv_caffe.NormalizeBBoxParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",1925.0,1927.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
4770,311234,fbb_,3,opencv_tflite.LSTMOptionsBuilder.fbb_,,misc\tflite\schema_generated.hpp,&fbb_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
4771,16323,SetCachedSize,1,opencv_caffe.FillerParameter.SetCachedSize,void opencv_caffe.FillerParameter.SetCachedSize (int),misc\caffe\opencv-caffe.pb.cc,"void FillerParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}",7191.0,7193.0,1.0,1.0,3.0,1,1,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
4772,311236,add_fused_activation_function,1,opencv_tflite.LSTMOptionsBuilder.add_fused_activation_function,void opencv_tflite.LSTMOptionsBuilder.add_fused_activation_function (ANY),misc\tflite\schema_generated.hpp,"void add_fused_activation_function(opencv_tflite::ActivationFunctionType fused_activation_function) {
    fbb_.AddElement<int8_t>(LSTMOptions::VT_FUSED_ACTIVATION_FUNCTION, static_cast<int8_t>(fused_activation_function), 0);
  }",4260.0,4262.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4773,131013,GetReflection,1,opencv_caffe.ConvolutionParameter.GetReflection,Reflection opencv_caffe.ConvolutionParameter.GetReflection (),misc\caffe\opencv-caffe.pb.hpp,"static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }",8714.0,8716.0,3.0,3.0,3.0,2,1,0,0,0,1,1,1,0,0,,0,0,0,0,0,Reflection
4774,311235,start_,3,opencv_tflite.LSTMOptionsBuilder.start_,,misc\tflite\schema_generated.hpp,start_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4775,245701,internal_default_instance,1,opencv_onnx.TensorProto_Segment.internal_default_instance,TensorProto_Segment opencv_onnx.TensorProto_Segment.internal_default_instance (),misc\onnx\opencv-onnx.pb.hpp,"static inline const TensorProto_Segment* internal_default_instance() {
    return reinterpret_cast<const TensorProto_Segment*>(
               &_TensorProto_Segment_default_instance_);
  }",2008.0,2011.0,3.0,3.0,4.0,2,2,1,1,1,0,1,1,0,0,,0,0,0,0,0,TensorProto_Segment
4776,114635,default_instance,1,opencv_caffe.NormalizeBBoxParameter.default_instance,NormalizeBBoxParameter opencv_caffe.NormalizeBBoxParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const NormalizeBBoxParameter& default_instance() {
    return *internal_default_instance();
  }",1928.0,1930.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,NormalizeBBoxParameter
4777,16333,Clear,1,opencv_caffe.FillerParameter.Clear,void opencv_caffe.FillerParameter.Clear (),misc\caffe\opencv-caffe.pb.cc,"void FillerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_caffe.FillerParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    type_.ClearToDefault(::opencv_caffe::FillerParameter::_i_give_permission_to_break_this_code_default_type_, GetArenaForAllocation());
     }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&variance_norm_) -
        reinterpret_cast<char*>(&value_)) + sizeof(variance_norm_));
    sparse_ = -1;
    max_ = 1;
    std_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}",7195.0,7215.0,1.0,1.0,21.0,25,10,18,11,0,10,3,3,0,0,,0,10,0,0,0,void
4778,131024,default_instance,1,opencv_caffe.ConvolutionParameter.default_instance,ConvolutionParameter opencv_caffe.ConvolutionParameter.default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static const ConvolutionParameter& default_instance() {
    return *internal_default_instance();
  }",8717.0,8719.0,3.0,3.0,3.0,1,1,0,0,2,1,1,1,0,0,,0,0,0,0,0,ConvolutionParameter
4779,114642,internal_default_instance,1,opencv_caffe.NormalizeBBoxParameter.internal_default_instance,NormalizeBBoxParameter opencv_caffe.NormalizeBBoxParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const NormalizeBBoxParameter* internal_default_instance() {
    return reinterpret_cast<const NormalizeBBoxParameter*>(
               &_NormalizeBBoxParameter_default_instance_);
  }",1931.0,1934.0,3.0,3.0,4.0,2,2,1,1,2,0,1,1,0,0,,0,0,0,0,0,NormalizeBBoxParameter
4780,131031,internal_default_instance,1,opencv_caffe.ConvolutionParameter.internal_default_instance,ConvolutionParameter opencv_caffe.ConvolutionParameter.internal_default_instance (),misc\caffe\opencv-caffe.pb.hpp,"static inline const ConvolutionParameter* internal_default_instance() {
    return reinterpret_cast<const ConvolutionParameter*>(
               &_ConvolutionParameter_default_instance_);
  }",8720.0,8723.0,3.0,3.0,4.0,2,2,1,1,3,0,1,1,0,0,,0,0,0,0,0,ConvolutionParameter
4781,311256,add_cell_clip,1,opencv_tflite.LSTMOptionsBuilder.add_cell_clip,void opencv_tflite.LSTMOptionsBuilder.add_cell_clip (float),misc\tflite\schema_generated.hpp,"void add_cell_clip(float cell_clip) {
    fbb_.AddElement<float>(LSTMOptions::VT_CELL_CLIP, cell_clip, 0.0f);
  }",4263.0,4265.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
4782,360409,empty,1,cv.dnn.cuda4dnn.csl.TensorSpan.empty,bool cv.dnn.cuda4dnn.csl.TensorSpan.empty (),src\cuda4dnn\csl\tensor.hpp,bool empty() const noexcept { return shape.size() == 0; },470.0,470.0,9.0,65.0,1.0,2,2,1,1,0,1,1,1,0,0,,0,1,0,0,0,bool
4783,262111,MergeFrom,1,opencv_tensorflow.AttrValue.MergeFrom,void opencv_tensorflow.AttrValue.MergeFrom (AttrValue),misc\tensorflow\attr_value.pb.cc,"void AttrValue::MergeFrom(const AttrValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv_tensorflow.AttrValue)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kS: {
      _internal_set_s(from._internal_s());
      break;
    }
    case kI: {
      _internal_set_i(from._internal_i());
      break;
    }
    case kF: {
      _internal_set_f(from._internal_f());
      break;
    }
    case kB: {
      _internal_set_b(from._internal_b());
      break;
    }
    case kType: {
      _internal_set_type(from._internal_type());
      break;
    }
    case kShape: {
      _internal_mutable_shape()->::opencv_tensorflow::TensorShapeProto::MergeFrom(from._internal_shape());
      break;
    }
    case kTensor: {
      _internal_mutable_tensor()->::opencv_tensorflow::TensorProto::MergeFrom(from._internal_tensor());
      break;
    }
    case kList: {
      _internal_mutable_list()->::...",1152.0,1204.0,1.0,1.0,53.0,23,7,28,15,2,15,13,2,0,4,,0,11,2,1,1,void
4784,360420,size,1,cv.dnn.cuda4dnn.csl.TensorSpan.size,size_type cv.dnn.cuda4dnn.csl.TensorSpan.size (),src\cuda4dnn\csl\tensor.hpp,"size_type size() const noexcept {
            CV_Assert(!empty());
            return std::accumulate(std::begin(shape), std::end(shape), 1, std::multiplies<size_type>());
        }",477.0,480.0,9.0,9.0,4.0,5,2,6,2,0,2,1,1,0,0,,0,2,0,0,0,size_type
4785,311270,add_proj_clip,1,opencv_tflite.LSTMOptionsBuilder.add_proj_clip,void opencv_tflite.LSTMOptionsBuilder.add_proj_clip (float),misc\tflite\schema_generated.hpp,"void add_proj_clip(float proj_clip) {
    fbb_.AddElement<float>(LSTMOptions::VT_PROJ_CLIP, proj_clip, 0.0f);
  }",4266.0,4268.0,3.0,3.0,3.0,2,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
4786,147440,_has_bits_,3,opencv_caffe.ReshapeParameter._has_bits_,,misc\caffe\opencv-caffe.pb.hpp,_has_bits_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
4787,147441,_cached_size_,3,opencv_caffe.ReshapeParameter._cached_size_,,misc\caffe\opencv-caffe.pb.hpp,_cached_size_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
4788,147442,shape_,3,opencv_caffe.ReshapeParameter.shape_,,misc\caffe\opencv-caffe.pb.hpp,* shape_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
4789,147443,axis_,3,opencv_caffe.ReshapeParameter.axis_,,misc\caffe\opencv-caffe.pb.hpp,axis_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
4790,147444,num_axes_,3,opencv_caffe.ReshapeParameter.num_axes_,,misc\caffe\opencv-caffe.pb.hpp,num_axes_,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
4791,311284,add_kernel_type,1,opencv_tflite.LSTMOptionsBuilder.add_kernel_type,void opencv_tflite.LSTMOptionsBuilder.add_kernel_type (ANY),misc\tflite\schema_generated.hpp,"void add_kernel_type(opencv_tflite::LSTMKernelType kernel_type) {
    fbb_.AddElement<int8_t>(LSTMOptions::VT_KERNEL_TYPE, static_cast<int8_t>(kernel_type), 0);
  }",4269.0,4271.0,3.0,3.0,3.0,7,6,4,4,0,1,1,1,0,0,,0,1,2,1,1,void
4792,229367,_InternalParse,1,opencv_onnx.ModelProto._InternalParse,"const char* opencv_onnx.ModelProto._InternalParse (char*,ANY*)",misc\onnx\opencv-onnx.pb.cc,"const char* ModelProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 ir_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ir_version(&has_bits);
          ir_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string producer_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_producer_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::P...",2432.0,2561.0,1.0,10.0,130.0,107,16,127,12,0,5,31,51,0,2,,0,3,4,2,2,const char*
4793,360447,rank,1,cv.dnn.cuda4dnn.csl.TensorSpan.rank,size_type cv.dnn.cuda4dnn.csl.TensorSpan.rank (),src\cuda4dnn\csl\tensor.hpp,"size_type rank() const noexcept {
            CV_Assert(!empty());
            return shape.size();
        }",487.0,490.0,9.0,9.0,4.0,2,2,1,1,0,1,1,1,0,0,,0,1,0,0,0,size_type
