18,UNKNOWN,-1,,"CV__DNN_INLINE_NS_BEGIN
//! @addtogroup dnn
//! @{

/** @defgroup dnnLayerList Partial List of Implemented Layers
  @{
  This subsection of dnn module contains information about built-in layers and their descriptions.

  Classes listed here, in fact, provides C++ API for creating instances of built-in layers.
  In addition to this way of layers instantiation, there is a more common factory API (see @ref dnnLayerFactory), it allows to create layers dynamically (by name) and register new ones.
  You can use both API, but factory API is less convenient for native C++ programming and basically designed for use inside importers (see @ref readNetFromCaffe(), @ref readNetFromTorch(), @ref readNetFromTensorflow()).

  Built-in layers partially reproduce functionality of corresponding Caffe and Torch7 layers.
  In particular, the following layers and Caffe importer were tested to reproduce <a href=""http://caffe.berkeleyvision.org/tutorial/layers.html"">Caffe</a> functionality:
  - Convolution...",1,<empty>,,48,1,CPPASTProblemDeclaration,,<empty>
19,UNKNOWN,-1,,"class CV_EXPORTS ConstLayer : public Layer
    {
    public:
        static Ptr<Layer> create(const LayerParams &params);
    };",5,<empty>,,83,2,CPPASTProblemDeclaration,,<empty>
20,UNKNOWN,-1,,"class CV_EXPORTS LSTMLayer : public Layer
    {
    public:
        /** Creates instance of LSTM layer */
        static Ptr<LSTMLayer> create(const LayerParams& params);

        /** @deprecated Use LayerParams::blobs instead.
        @brief Set trained weights for LSTM layer.

        LSTM behavior on each step is defined by current input, previous output, previous cell state and learned weights.

        Let @f$x_t@f$ be current input, @f$h_t@f$ be current output, @f$c_t@f$ be current state.
        Than current output and current cell state is computed as follows:
        @f{eqnarray*}{
        h_t &= o_t \odot tanh(c_t),               \\
        c_t &= f_t \odot c_{t-1} + i_t \odot g_t, \\
        @f}
        where @f$\odot@f$ is per-element multiply operation and @f$i_t, f_t, o_t, g_t@f$ is internal gates that are computed using learned weights.

        Gates are computed as follows:
        @f{eqnarray*}{
        i_t &= sigmoid&(W_{xi} x_t + W_{hi} h_{t-1} + b_i), \\
       ...",5,<empty>,,90,3,CPPASTProblemDeclaration,,<empty>
21,UNKNOWN,-1,,"class CV_EXPORTS GRULayer : public Layer
    {
    public:
        /** Creates instance of GRU layer */
        static Ptr<GRULayer> create(const LayerParams& params);
    };",5,<empty>,,195,4,CPPASTProblemDeclaration,,<empty>
22,UNKNOWN,-1,,"class CV_EXPORTS RNNLayer : public Layer
    {
    public:
        /** Creates instance of RNNLayer */
        static Ptr<RNNLayer> create(const LayerParams& params);

        /** Setups learned weights.

        Recurrent-layer behavior on each step is defined by current input @f$ x_t @f$, previous state @f$ h_t @f$ and learned weights as follows:
        @f{eqnarray*}{
        h_t &= tanh&(W_{hh} h_{t-1} + W_{xh} x_t + b_h),  \\
        o_t &= tanh&(W_{ho} h_t + b_o),
        @f}

        @param Wxh is @f$ W_{xh} @f$ matrix
        @param bh  is @f$ b_{h}  @f$ vector
        @param Whh is @f$ W_{hh} @f$ matrix
        @param Who is @f$ W_{xo} @f$ matrix
        @param bo  is @f$ b_{o}  @f$ vector
        */
        virtual void setWeights(const Mat &Wxh, const Mat &bh, const Mat &Whh, const Mat &Who, const Mat &bo) = 0;

        /** @brief If this flag is set to true then layer will produce @f$ h_t @f$ as second output.
         * @details Shape of the second output is the same as...",5,<empty>,,215,5,CPPASTProblemDeclaration,,<empty>
23,UNKNOWN,-1,,"class CV_EXPORTS EinsumLayer : public Layer
    {
    public:
        static Ptr<EinsumLayer> create(const LayerParams& params);
    };",5,<empty>,,271,6,CPPASTProblemDeclaration,,<empty>
24,UNKNOWN,-1,,"class CV_EXPORTS BaseConvolutionLayer : public Layer
    {
    public:
        CV_DEPRECATED_EXTERNAL Size kernel, stride, pad, dilation, adjustPad;
        std::vector<size_t> adjust_pads;
        std::vector<size_t> kernel_size, strides, dilations;
        std::vector<size_t> pads_begin, pads_end;
        String padMode;
        int numOutput;
    };",5,<empty>,,277,7,CPPASTProblemDeclaration,,<empty>
25,UNKNOWN,-1,,"class CV_EXPORTS ConvolutionLayer : public BaseConvolutionLayer
    {
    public:
        static Ptr<BaseConvolutionLayer> create(const LayerParams& params);
        bool fusedActivation = false;
        bool fusedAdd = false;
        bool useWinograd = true; // Flag whether to use Winograd to speed up 3x3 convolution.
    };",5,<empty>,,288,8,CPPASTProblemDeclaration,,<empty>
26,UNKNOWN,-1,,"class CV_EXPORTS ConvolutionLayerInt8 : public BaseConvolutionLayer
    {
    public:
        int input_zp, output_zp;
        float input_sc, output_sc;

        // quantization type flag. The perChannel default is true, that means it contains the parameters
        // of per-Channel quantization. Otherwise, that means this layer contains per-Tensor quantized parameters.
        bool per_channel;
        bool useWinograd = false; // Flag whether to use Winograd to speed up 3x3 convolution.
        static Ptr<BaseConvolutionLayer> create(const LayerParams& params);
    };",5,<empty>,,297,9,CPPASTProblemDeclaration,,<empty>
27,UNKNOWN,-1,,"class CV_EXPORTS DeconvolutionLayer : public BaseConvolutionLayer
    {
    public:
        static Ptr<BaseConvolutionLayer> create(const LayerParams& params);
    };",5,<empty>,,310,10,CPPASTProblemDeclaration,,<empty>
28,UNKNOWN,-1,,"class CV_EXPORTS LRNLayer : public Layer
    {
    public:
        int type;

        int size;
        float alpha, beta, bias;
        bool normBySize;

        static Ptr<LRNLayer> create(const LayerParams& params);
    };",5,<empty>,,316,11,CPPASTProblemDeclaration,,<empty>
29,UNKNOWN,-1,,"class CV_EXPORTS ArgLayer : public Layer
    {
    public:
        static Ptr<ArgLayer> create(const LayerParams& params);
    };",5,<empty>,,332,12,CPPASTProblemDeclaration,,<empty>
30,UNKNOWN,-1,,"class CV_EXPORTS GatherLayer : public Layer
    {
    public:
        static Ptr<GatherLayer> create(const LayerParams& params);
    };",5,<empty>,,340,13,CPPASTProblemDeclaration,,<empty>
31,UNKNOWN,-1,,"class CV_EXPORTS GatherElementsLayer : public Layer
    {
    public:
        static Ptr<GatherElementsLayer> create(const LayerParams& params);
    };",5,<empty>,,356,14,CPPASTProblemDeclaration,,<empty>
32,UNKNOWN,-1,,"class CV_EXPORTS PoolingLayer : public Layer
    {
    public:
        int type;
        std::vector<size_t> kernel_size, strides;
        std::vector<size_t> pads_begin, pads_end;
        bool globalPooling; //!< Flag is true if at least one of the axes is global pooled.
        std::vector<bool> isGlobalPooling;
        bool computeMaxIdx;
        String padMode;
        bool ceilMode;
        // If true for average pooling with padding, divide an every output region
        // by a whole kernel area. Otherwise exclude zero padded values and divide
        // by number of real values.
        bool avePoolPaddedArea;
        // ROIPooling parameters.
        Size pooledSize;
        float spatialScale;
        // PSROIPooling parameters.
        int psRoiOutChannels;

        static Ptr<PoolingLayer> create(const LayerParams& params);
    };",5,<empty>,,362,15,CPPASTProblemDeclaration,,<empty>
33,UNKNOWN,-1,,"class CV_EXPORTS PoolingLayerInt8 : public PoolingLayer
    {
    public:
        int input_zp, output_zp;
        float input_sc, output_sc;
        static Ptr<PoolingLayerInt8> create(const LayerParams& params);
    };",5,<empty>,,386,16,CPPASTProblemDeclaration,,<empty>
34,UNKNOWN,-1,,"class CV_EXPORTS ReduceLayer : public Layer
    {
    public:
        static Ptr<ReduceLayer> create(const LayerParams& params);
    };",5,<empty>,,394,17,CPPASTProblemDeclaration,,<empty>
35,UNKNOWN,-1,,"class CV_EXPORTS SoftmaxLayer : public Layer
    {
    public:
        bool logSoftMax;

        static Ptr<SoftmaxLayer> create(const LayerParams& params);
    };",5,<empty>,,400,18,CPPASTProblemDeclaration,,<empty>
36,UNKNOWN,-1,,"class CV_EXPORTS SoftmaxLayerInt8 : public SoftmaxLayer
    {
    public:
        float output_sc;
        int output_zp;
        static Ptr<SoftmaxLayerInt8> create(const LayerParams& params);
    };",5,<empty>,,408,19,CPPASTProblemDeclaration,,<empty>
37,UNKNOWN,-1,,"class CV_EXPORTS InnerProductLayer : public Layer
    {
    public:
        int axis;
        static Ptr<InnerProductLayer> create(const LayerParams& params);
    };",5,<empty>,,420,20,CPPASTProblemDeclaration,,<empty>
38,UNKNOWN,-1,,"class CV_EXPORTS InnerProductLayerInt8 : public InnerProductLayer
    {
    public:
        int input_zp, output_zp;
        float input_sc, output_sc;

        // quantization type flag. The perChannel default is true, that means it contains the parameters
        // of per-Channel quantization. Otherwise, that means this layer contains per-Tensor quantized parameters.
        bool per_channel;
        static Ptr<InnerProductLayerInt8> create(const LayerParams& params);
    };",5,<empty>,,427,21,CPPASTProblemDeclaration,,<empty>
39,UNKNOWN,-1,,"class CV_EXPORTS MVNLayer : public Layer
    {
    public:
        float eps;
        bool normVariance, acrossChannels;

        static Ptr<MVNLayer> create(const LayerParams& params);
    };",5,<empty>,,439,22,CPPASTProblemDeclaration,,<empty>
40,UNKNOWN,-1,,"class CV_EXPORTS ReshapeLayer : public Layer
    {
    public:
        MatShape newShapeDesc;
        Range newShapeRange;

        static Ptr<ReshapeLayer> create(const LayerParams& params);
    };",5,<empty>,,450,23,CPPASTProblemDeclaration,,<empty>
41,UNKNOWN,-1,,"class CV_EXPORTS FlattenLayer : public Layer
    {
    public:
        static Ptr<FlattenLayer> create(const LayerParams &params);
    };",5,<empty>,,459,24,CPPASTProblemDeclaration,,<empty>
42,UNKNOWN,-1,,"class CV_EXPORTS QuantizeLayer : public Layer
    {
    public:
        std::vector<float> scales;
        std::vector<int> zeropoints;
        static Ptr<QuantizeLayer> create(const LayerParams &params);
    };",5,<empty>,,465,25,CPPASTProblemDeclaration,,<empty>
43,UNKNOWN,-1,,"class CV_EXPORTS DequantizeLayer : public Layer
    {
    public:
        std::vector<float> scales;
        std::vector<int> zeropoints;
        static Ptr<DequantizeLayer> create(const LayerParams &params);
    };",5,<empty>,,473,26,CPPASTProblemDeclaration,,<empty>
44,UNKNOWN,-1,,"class CV_EXPORTS RequantizeLayer : public Layer
    {
    public:
        float scale, shift;
        static Ptr<RequantizeLayer> create(const LayerParams &params);
    };",5,<empty>,,481,27,CPPASTProblemDeclaration,,<empty>
45,UNKNOWN,-1,,"class CV_EXPORTS ConcatLayer : public Layer
    {
    public:
        int axis;
        /**
         * @brief Add zero padding in case of concatenation of blobs with different
         * spatial sizes.
         *
         * Details: https://github.com/torch/nn/blob/master/doc/containers.md#depthconcat
         */
        bool padding;
        int paddingValue;

        static Ptr<ConcatLayer> create(const LayerParams &params);
    };",5,<empty>,,488,28,CPPASTProblemDeclaration,,<empty>
46,UNKNOWN,-1,,"class CV_EXPORTS SplitLayer : public Layer
    {
    public:
        int outputsCount; //!< Number of copies that will be produced (is ignored when negative).

        static Ptr<SplitLayer> create(const LayerParams &params);
    };",5,<empty>,,504,29,CPPASTProblemDeclaration,,<empty>
47,UNKNOWN,-1,,"class CV_EXPORTS SliceLayer : public Layer
    {
    public:
        /**
         * @brief Vector of slice ranges.
         *
         * The first dimension equals number of output blobs.
         * Inner vector has slice ranges for the first number of input dimensions.
         */
        std::vector<std::vector<Range> > sliceRanges;
        std::vector<std::vector<int> > sliceSteps;
        int axis;
        int num_split;

        static Ptr<SliceLayer> create(const LayerParams &params);
    };",5,<empty>,,536,30,CPPASTProblemDeclaration,,<empty>
48,UNKNOWN,-1,,"class CV_EXPORTS PermuteLayer : public Layer
    {
    public:
        static Ptr<PermuteLayer> create(const LayerParams& params);
    };",5,<empty>,,553,31,CPPASTProblemDeclaration,,<empty>
49,UNKNOWN,-1,,"class CV_EXPORTS ShuffleChannelLayer : public Layer
    {
    public:
        static Ptr<Layer> create(const LayerParams& params);

        int group;
    };",5,<empty>,,568,32,CPPASTProblemDeclaration,,<empty>
50,UNKNOWN,-1,,"class CV_EXPORTS PaddingLayer : public Layer
    {
    public:
        static Ptr<PaddingLayer> create(const LayerParams& params);
    };",5,<empty>,,596,33,CPPASTProblemDeclaration,,<empty>
51,UNKNOWN,-1,,"class CV_EXPORTS ActivationLayer : public Layer
    {
    public:
        virtual void forwardSlice(const float* src, float* dst, int len,
                                  size_t outPlaneSize, int cn0, int cn1) const {}
        virtual void forwardSlice(const int* src, const int* lut, int* dst, int len,
                                  size_t outPlaneSize, int cn0, int cn1) const {}
        virtual void forwardSlice(const int8_t* src, const int8_t* lut, int8_t* dst, int len,
                                  size_t outPlaneSize, int cn0, int cn1) const {}
    };",5,<empty>,,603,34,CPPASTProblemDeclaration,,<empty>
52,UNKNOWN,-1,,"class CV_EXPORTS ReLULayer : public ActivationLayer
    {
    public:
        float negativeSlope;

        static Ptr<ReLULayer> create(const LayerParams &params);
    };",5,<empty>,,614,35,CPPASTProblemDeclaration,,<empty>
53,UNKNOWN,-1,,"class CV_EXPORTS ReLU6Layer : public ActivationLayer
    {
    public:
        float minValue, maxValue;

        static Ptr<ReLU6Layer> create(const LayerParams &params);
    };",5,<empty>,,622,36,CPPASTProblemDeclaration,,<empty>
54,UNKNOWN,-1,,"class CV_EXPORTS ChannelsPReLULayer : public ActivationLayer
    {
    public:
        static Ptr<Layer> create(const LayerParams& params);
    };",5,<empty>,,630,37,CPPASTProblemDeclaration,,<empty>
55,UNKNOWN,-1,,"class CV_EXPORTS ELULayer : public ActivationLayer
    {
    public:
        float alpha;

        static Ptr<ELULayer> create(const LayerParams &params);
    };",5,<empty>,,636,38,CPPASTProblemDeclaration,,<empty>
56,UNKNOWN,-1,,"class CV_EXPORTS TanHLayer : public ActivationLayer
    {
    public:
        static Ptr<TanHLayer> create(const LayerParams &params);
    };",5,<empty>,,644,39,CPPASTProblemDeclaration,,<empty>
57,UNKNOWN,-1,,"class CV_EXPORTS SwishLayer : public ActivationLayer
    {
    public:
        static Ptr<SwishLayer> create(const LayerParams &params);
    };",5,<empty>,,650,40,CPPASTProblemDeclaration,,<empty>
58,UNKNOWN,-1,,"class CV_EXPORTS MishLayer : public ActivationLayer
    {
    public:
        static Ptr<MishLayer> create(const LayerParams &params);
    };",5,<empty>,,656,41,CPPASTProblemDeclaration,,<empty>
59,UNKNOWN,-1,,"class CV_EXPORTS SigmoidLayer : public ActivationLayer
    {
    public:
        static Ptr<SigmoidLayer> create(const LayerParams &params);
    };",5,<empty>,,662,42,CPPASTProblemDeclaration,,<empty>
60,UNKNOWN,-1,,"class CV_EXPORTS BNLLLayer : public ActivationLayer
    {
    public:
        static Ptr<BNLLLayer> create(const LayerParams &params);
    };",5,<empty>,,668,43,CPPASTProblemDeclaration,,<empty>
61,UNKNOWN,-1,,"class CV_EXPORTS AbsLayer : public ActivationLayer
    {
    public:
        static Ptr<AbsLayer> create(const LayerParams &params);
    };",5,<empty>,,674,44,CPPASTProblemDeclaration,,<empty>
62,UNKNOWN,-1,,"class CV_EXPORTS PowerLayer : public ActivationLayer
    {
    public:
        float power, scale, shift;

        static Ptr<PowerLayer> create(const LayerParams &params);
    };",5,<empty>,,680,45,CPPASTProblemDeclaration,,<empty>
63,UNKNOWN,-1,,"class CV_EXPORTS ExpLayer : public ActivationLayer
    {
    public:
        float base, scale, shift;

        static Ptr<ExpLayer> create(const LayerParams &params);
    };",5,<empty>,,688,46,CPPASTProblemDeclaration,,<empty>
64,UNKNOWN,-1,,"class CV_EXPORTS CeilLayer : public ActivationLayer
    {
    public:
        static Ptr<CeilLayer> create(const LayerParams &params);
    };",5,<empty>,,696,47,CPPASTProblemDeclaration,,<empty>
65,UNKNOWN,-1,,"class CV_EXPORTS FloorLayer : public ActivationLayer
    {
    public:
        static Ptr<FloorLayer> create(const LayerParams &params);
    };",5,<empty>,,702,48,CPPASTProblemDeclaration,,<empty>
66,UNKNOWN,-1,,"class CV_EXPORTS LogLayer : public ActivationLayer
    {
    public:
        static Ptr<LogLayer> create(const LayerParams &params);
    };",5,<empty>,,708,49,CPPASTProblemDeclaration,,<empty>
67,UNKNOWN,-1,,"class CV_EXPORTS RoundLayer : public ActivationLayer
    {
    public:
        static Ptr<RoundLayer> create(const LayerParams &params);
    };",5,<empty>,,714,50,CPPASTProblemDeclaration,,<empty>
68,UNKNOWN,-1,,"class CV_EXPORTS SqrtLayer : public ActivationLayer
    {
    public:
        static Ptr<SqrtLayer> create(const LayerParams &params);
    };",5,<empty>,,720,51,CPPASTProblemDeclaration,,<empty>
69,UNKNOWN,-1,,"class CV_EXPORTS NotLayer : public ActivationLayer
    {
    public:
        static Ptr<NotLayer> create(const LayerParams &params);
    };",5,<empty>,,726,52,CPPASTProblemDeclaration,,<empty>
70,UNKNOWN,-1,,"class CV_EXPORTS AcosLayer : public ActivationLayer
    {
    public:
        static Ptr<AcosLayer> create(const LayerParams &params);
    };",5,<empty>,,732,53,CPPASTProblemDeclaration,,<empty>
71,UNKNOWN,-1,,"class CV_EXPORTS AcoshLayer : public ActivationLayer
    {
    public:
        static Ptr<AcoshLayer> create(const LayerParams &params);
    };",5,<empty>,,738,54,CPPASTProblemDeclaration,,<empty>
72,UNKNOWN,-1,,"class CV_EXPORTS AsinLayer : public ActivationLayer
    {
    public:
        static Ptr<AsinLayer> create(const LayerParams &params);
    };",5,<empty>,,744,55,CPPASTProblemDeclaration,,<empty>
73,UNKNOWN,-1,,"class CV_EXPORTS AsinhLayer : public ActivationLayer
    {
    public:
        static Ptr<AsinhLayer> create(const LayerParams &params);
    };",5,<empty>,,750,56,CPPASTProblemDeclaration,,<empty>
74,UNKNOWN,-1,,"class CV_EXPORTS AtanLayer : public ActivationLayer
    {
    public:
        static Ptr<AtanLayer> create(const LayerParams &params);
    };",5,<empty>,,756,57,CPPASTProblemDeclaration,,<empty>
75,UNKNOWN,-1,,"class CV_EXPORTS AtanhLayer : public ActivationLayer
    {
    public:
        static Ptr<AtanhLayer> create(const LayerParams &params);
    };",5,<empty>,,762,58,CPPASTProblemDeclaration,,<empty>
76,UNKNOWN,-1,,"class CV_EXPORTS CosLayer : public ActivationLayer
    {
    public:
        static Ptr<CosLayer> create(const LayerParams &params);
    };",5,<empty>,,768,59,CPPASTProblemDeclaration,,<empty>
77,UNKNOWN,-1,,"class CV_EXPORTS CoshLayer : public ActivationLayer
    {
    public:
        static Ptr<CoshLayer> create(const LayerParams &params);
    };",5,<empty>,,774,60,CPPASTProblemDeclaration,,<empty>
78,UNKNOWN,-1,,"class CV_EXPORTS ErfLayer : public ActivationLayer
    {
    public:
        static Ptr<ErfLayer> create(const LayerParams &params);
    };",5,<empty>,,780,61,CPPASTProblemDeclaration,,<empty>
79,UNKNOWN,-1,,"class CV_EXPORTS HardSwishLayer : public ActivationLayer
    {
    public:
        static Ptr<HardSwishLayer> create(const LayerParams &params);
    };",5,<empty>,,786,62,CPPASTProblemDeclaration,,<empty>
80,UNKNOWN,-1,,"class CV_EXPORTS SinLayer : public ActivationLayer
    {
    public:
        static Ptr<SinLayer> create(const LayerParams &params);
    };",5,<empty>,,792,63,CPPASTProblemDeclaration,,<empty>
81,UNKNOWN,-1,,"class CV_EXPORTS SinhLayer : public ActivationLayer
    {
    public:
        static Ptr<SinhLayer> create(const LayerParams &params);
    };",5,<empty>,,798,64,CPPASTProblemDeclaration,,<empty>
82,UNKNOWN,-1,,"class CV_EXPORTS SoftplusLayer : public ActivationLayer
    {
    public:
        static Ptr<SoftplusLayer> create(const LayerParams &params);
    };",5,<empty>,,804,65,CPPASTProblemDeclaration,,<empty>
83,UNKNOWN,-1,,"class CV_EXPORTS SoftsignLayer : public ActivationLayer
    {
    public:
        static Ptr<SoftsignLayer> create(const LayerParams &params);
    };",5,<empty>,,810,66,CPPASTProblemDeclaration,,<empty>
84,UNKNOWN,-1,,"class CV_EXPORTS TanLayer : public ActivationLayer
    {
    public:
        static Ptr<TanLayer> create(const LayerParams &params);
    };",5,<empty>,,816,67,CPPASTProblemDeclaration,,<empty>
85,UNKNOWN,-1,,"class CV_EXPORTS CeluLayer : public ActivationLayer
    {
    public:
        float alpha;

        static Ptr<CeluLayer> create(const LayerParams &params);
    };",5,<empty>,,822,68,CPPASTProblemDeclaration,,<empty>
86,UNKNOWN,-1,,"class CV_EXPORTS HardSigmoidLayer : public ActivationLayer
    {
    public:
        float alpha;
        float beta;

        static Ptr<HardSigmoidLayer> create(const LayerParams &params);
    };",5,<empty>,,830,69,CPPASTProblemDeclaration,,<empty>
87,UNKNOWN,-1,,"class CV_EXPORTS SeluLayer : public ActivationLayer
    {
    public:
        float alpha;
        float gamma;

        static Ptr<SeluLayer> create(const LayerParams &params);
    };",5,<empty>,,839,70,CPPASTProblemDeclaration,,<empty>
88,UNKNOWN,-1,,"class CV_EXPORTS GeluLayer : public ActivationLayer
    {
    public:
        static Ptr<GeluLayer> create(const LayerParams &params);
    };",5,<empty>,,848,71,CPPASTProblemDeclaration,,<empty>
89,UNKNOWN,-1,,"class CV_EXPORTS GeluApproximationLayer : public ActivationLayer
    {
    public:
        static Ptr<GeluApproximationLayer> create(const LayerParams &params);
    };",5,<empty>,,854,72,CPPASTProblemDeclaration,,<empty>
90,UNKNOWN,-1,,"class CV_EXPORTS ThresholdedReluLayer : public ActivationLayer
    {
    public:
        float alpha;

        static Ptr<ThresholdedReluLayer> create(const LayerParams &params);
    };",5,<empty>,,860,73,CPPASTProblemDeclaration,,<empty>
91,UNKNOWN,-1,,"class CV_EXPORTS ActivationLayerInt8 : public ActivationLayer
    {
    public:
        static Ptr<ActivationLayerInt8> create(const LayerParams &params);
    };",5,<empty>,,868,74,CPPASTProblemDeclaration,,<empty>
92,UNKNOWN,-1,,"class CV_EXPORTS SignLayer : public ActivationLayer
    {
    public:
        static Ptr<SignLayer> create(const LayerParams &params);
    };",5,<empty>,,874,75,CPPASTProblemDeclaration,,<empty>
93,UNKNOWN,-1,,"class CV_EXPORTS ShrinkLayer : public ActivationLayer
    {
    public:
        float bias;
        float lambd;
        static Ptr<ShrinkLayer> create(const LayerParams &params);
    };",5,<empty>,,880,76,CPPASTProblemDeclaration,,<empty>
94,UNKNOWN,-1,,"class CV_EXPORTS ReciprocalLayer : public ActivationLayer
    {
    public:
        static Ptr<ReciprocalLayer> create(const LayerParams &params);
    };",5,<empty>,,888,77,CPPASTProblemDeclaration,,<empty>
95,UNKNOWN,-1,,"class CV_EXPORTS CropLayer : public Layer
    {
    public:
        static Ptr<Layer> create(const LayerParams &params);
    };",5,<empty>,,896,78,CPPASTProblemDeclaration,,<empty>
96,UNKNOWN,-1,,"class CV_EXPORTS EltwiseLayer : public Layer
    {
    public:
        static Ptr<EltwiseLayer> create(const LayerParams &params);
    };",5,<empty>,,909,79,CPPASTProblemDeclaration,,<empty>
97,UNKNOWN,-1,,"class CV_EXPORTS EltwiseLayerInt8 : public Layer
    {
    public:
        static Ptr<EltwiseLayerInt8> create(const LayerParams &params);
    };",5,<empty>,,915,80,CPPASTProblemDeclaration,,<empty>
98,UNKNOWN,-1,,"class CV_EXPORTS NaryEltwiseLayer : public Layer
    {
    public:
        static Ptr<NaryEltwiseLayer> create(const LayerParams &params);
    };",5,<empty>,,921,81,CPPASTProblemDeclaration,,<empty>
99,UNKNOWN,-1,,"class CV_EXPORTS BatchNormLayer : public ActivationLayer
    {
    public:
        bool hasWeights, hasBias;
        float epsilon;

        static Ptr<BatchNormLayer> create(const LayerParams &params);
    };",5,<empty>,,927,82,CPPASTProblemDeclaration,,<empty>
100,UNKNOWN,-1,,"class CV_EXPORTS BatchNormLayerInt8 : public BatchNormLayer
    {
    public:
        float input_sc, output_sc;
        int input_zp, output_zp;
        static Ptr<BatchNormLayerInt8> create(const LayerParams &params);
    };",5,<empty>,,936,83,CPPASTProblemDeclaration,,<empty>
101,UNKNOWN,-1,,"class CV_EXPORTS MaxUnpoolLayer : public Layer
    {
    public:
        Size poolKernel;
        Size poolPad;
        Size poolStride;

        static Ptr<MaxUnpoolLayer> create(const LayerParams &params);
    };",5,<empty>,,944,84,CPPASTProblemDeclaration,,<empty>
102,UNKNOWN,-1,,"class CV_EXPORTS ScaleLayer : public Layer
    {
    public:
        bool hasBias;
        int axis;
        String mode;

        static Ptr<ScaleLayer> create(const LayerParams& params);
    };",5,<empty>,,954,85,CPPASTProblemDeclaration,,<empty>
103,UNKNOWN,-1,,"class CV_EXPORTS ScaleLayerInt8 : public ScaleLayer
    {
    public:
        float output_sc;
        int output_zp;
        static Ptr<ScaleLayerInt8> create(const LayerParams &params);
    };",5,<empty>,,964,86,CPPASTProblemDeclaration,,<empty>
104,UNKNOWN,-1,,"class CV_EXPORTS ShiftLayer : public Layer
    {
    public:
        static Ptr<Layer> create(const LayerParams& params);
    };",5,<empty>,,972,87,CPPASTProblemDeclaration,,<empty>
105,UNKNOWN,-1,,"class CV_EXPORTS ShiftLayerInt8 : public Layer
    {
    public:
        static Ptr<Layer> create(const LayerParams& params);
    };",5,<empty>,,978,88,CPPASTProblemDeclaration,,<empty>
106,UNKNOWN,-1,,"class CV_EXPORTS CompareLayer : public Layer
    {
    public:
        static Ptr<Layer> create(const LayerParams& params);
    };",5,<empty>,,984,89,CPPASTProblemDeclaration,,<empty>
107,UNKNOWN,-1,,"class CV_EXPORTS DataAugmentationLayer : public Layer
    {
    public:
        static Ptr<DataAugmentationLayer> create(const LayerParams& params);
    };",5,<empty>,,990,90,CPPASTProblemDeclaration,,<empty>
108,UNKNOWN,-1,,"class CV_EXPORTS CorrelationLayer : public Layer
    {
    public:
        static Ptr<CorrelationLayer> create(const LayerParams& params);
    };",5,<empty>,,996,91,CPPASTProblemDeclaration,,<empty>
109,UNKNOWN,-1,,"class CV_EXPORTS AccumLayer : public Layer
    {
    public:
        static Ptr<AccumLayer> create(const LayerParams& params);
    };",5,<empty>,,1002,92,CPPASTProblemDeclaration,,<empty>
110,UNKNOWN,-1,,"class CV_EXPORTS FlowWarpLayer : public Layer
    {
    public:
        static Ptr<FlowWarpLayer> create(const LayerParams& params);
    };",5,<empty>,,1008,93,CPPASTProblemDeclaration,,<empty>
111,UNKNOWN,-1,,"class CV_EXPORTS PriorBoxLayer : public Layer
    {
    public:
        static Ptr<PriorBoxLayer> create(const LayerParams& params);
    };",5,<empty>,,1014,94,CPPASTProblemDeclaration,,<empty>
112,UNKNOWN,-1,,"class CV_EXPORTS ReorgLayer : public Layer
    {
    public:
        static Ptr<ReorgLayer> create(const LayerParams& params);
    };",5,<empty>,,1020,95,CPPASTProblemDeclaration,,<empty>
113,UNKNOWN,-1,,"class CV_EXPORTS RegionLayer : public Layer
    {
    public:
        float nmsThreshold;

        static Ptr<RegionLayer> create(const LayerParams& params);
    };",5,<empty>,,1026,96,CPPASTProblemDeclaration,,<empty>
114,UNKNOWN,-1,,"class CV_EXPORTS DetectionOutputLayer : public Layer
    {
    public:
        static Ptr<DetectionOutputLayer> create(const LayerParams& params);
    };",5,<empty>,,1042,97,CPPASTProblemDeclaration,,<empty>
115,UNKNOWN,-1,,"class CV_EXPORTS NormalizeBBoxLayer : public Layer
    {
    public:
        float pnorm, epsilon;
        CV_DEPRECATED_EXTERNAL bool acrossSpatial;

        static Ptr<NormalizeBBoxLayer> create(const LayerParams& params);
    };",5,<empty>,,1073,98,CPPASTProblemDeclaration,,<empty>
116,UNKNOWN,-1,,"class CV_EXPORTS ResizeLayer : public Layer
    {
    public:
        static Ptr<ResizeLayer> create(const LayerParams& params);
    };",5,<empty>,,1087,99,CPPASTProblemDeclaration,,<empty>
117,UNKNOWN,-1,,"class CV_EXPORTS InterpLayer : public Layer
    {
    public:
        static Ptr<Layer> create(const LayerParams& params);
    };",5,<empty>,,1098,100,CPPASTProblemDeclaration,,<empty>
118,UNKNOWN,-1,,"class CV_EXPORTS ProposalLayer : public Layer
    {
    public:
        static Ptr<ProposalLayer> create(const LayerParams& params);
    };",5,<empty>,,1104,101,CPPASTProblemDeclaration,,<empty>
119,UNKNOWN,-1,,"class CV_EXPORTS CropAndResizeLayer : public Layer
    {
    public:
        static Ptr<Layer> create(const LayerParams& params);
    };",5,<empty>,,1110,102,CPPASTProblemDeclaration,,<empty>
120,UNKNOWN,-1,,"class CV_EXPORTS CumSumLayer : public Layer
    {
    public:
        int exclusive;
        int reverse;

        static Ptr<CumSumLayer> create(const LayerParams& params);
    };",5,<empty>,,1116,103,CPPASTProblemDeclaration,,<empty>
121,UNKNOWN,-1,,"class CV_EXPORTS ScatterLayer : public Layer
    {
    public:
        static Ptr<ScatterLayer> create(const LayerParams& params);
    };",5,<empty>,,1125,104,CPPASTProblemDeclaration,,<empty>
122,UNKNOWN,-1,,"class CV_EXPORTS ScatterNDLayer : public Layer
    {
    public:
        static Ptr<ScatterNDLayer> create(const LayerParams& params);
    };",5,<empty>,,1131,105,CPPASTProblemDeclaration,,<empty>
123,UNKNOWN,-1,,"class CV_EXPORTS TileLayer : public Layer
    {
    public:
        static Ptr<TileLayer> create(const LayerParams& params);
    };",5,<empty>,,1137,106,CPPASTProblemDeclaration,,<empty>
124,UNKNOWN,-1,,"class CV_EXPORTS LayerNormLayer : public Layer
    {
    public:
        CV_DEPRECATED_EXTERNAL bool hasBias; // Deprecated, preserve for compatibility
        int axis;
        float epsilon;

        static Ptr<LayerNormLayer> create(const LayerParams& params);
    };",5,<empty>,,1143,107,CPPASTProblemDeclaration,,<empty>
125,UNKNOWN,-1,,"class CV_EXPORTS GemmLayer : public Layer {
    public:
        bool trans_a;
        bool trans_b;
        float alpha;
        float beta;

        static Ptr<GemmLayer> create(const LayerParams& params);
    };",5,<empty>,,1153,108,CPPASTProblemDeclaration,,<empty>
126,UNKNOWN,-1,,"class CV_EXPORTS MatMulLayer : public Layer {
     public:
        static Ptr<MatMulLayer> create(const LayerParams &params);
    };",5,<empty>,,1163,109,CPPASTProblemDeclaration,,<empty>
127,UNKNOWN,-1,,"class CV_EXPORTS ExpandLayer : public Layer
    {
    public:
        static Ptr<ExpandLayer> create(const LayerParams &params);
    };",5,<empty>,,1168,110,CPPASTProblemDeclaration,,<empty>
128,UNKNOWN,-1,,"class CV_EXPORTS InstanceNormLayer : public Layer {
    public:
        float epsilon;

        static Ptr<InstanceNormLayer> create(const LayerParams &params);
    };",5,<empty>,,1174,111,CPPASTProblemDeclaration,,<empty>
129,UNKNOWN,-1,,"class CV_EXPORTS AttentionLayer : public Layer {
     public:
        static Ptr<AttentionLayer> create(const LayerParams &params);
    };",5,<empty>,,1181,112,CPPASTProblemDeclaration,,<empty>
130,UNKNOWN,-1,,"CV__DNN_INLINE_NS_END
",1,<empty>,,1188,113,CPPASTProblemDeclaration,,<empty>
146,UNKNOWN,-1,,"CV__DNN_INLINE_NS_BEGIN
//! @addtogroup dnn
//! @{

/** @brief This struct stores the scalar value (or array) of one of the following type: double, cv::String or int64.
 *  @todo Maybe int64 is useless because double type exactly stores at least 2^52 integers.
 */
struct CV_EXPORTS_W DictValue
{
    DictValue(const DictValue &r);
    explicit DictValue(bool i)           : type(Param::INT), pi(new AutoBuffer<int64,1>) { (*pi)[0] = i ? 1 : 0; }       //!< Constructs integer scalar
    explicit DictValue(int64 i = 0)      : type(Param::INT), pi(new AutoBuffer<int64,1>) { (*pi)[0] = i; }       //!< Constructs integer scalar
    CV_WRAP explicit DictValue(int i)    : type(Param::INT), pi(new AutoBuffer<int64,1>) { (*pi)[0] = i; }       //!< Constructs integer scalar
    explicit DictValue(unsigned p)       : type(Param::INT), pi(new AutoBuffer<int64,1>) { (*pi)[0] = p; }       //!< Constructs integer scalar
    CV_WRAP explicit DictValue(double p)         : type(Param::REAL), pd(new Auto...",1,<empty>,,53,1,CPPASTProblemDeclaration,,<empty>
147,UNKNOWN,-1,,"class CV_EXPORTS Dict
{
    typedef std::map<String, DictValue> _Dict;
    _Dict dict;

public:

    //! Checks a presence of the @p key in the dictionary.
    bool has(const String &key) const;

    //! If the @p key in the dictionary then returns pointer to its value, else returns NULL.
    DictValue *ptr(const String &key);

    /** @overload */
    const DictValue *ptr(const String &key) const;

    //! If the @p key in the dictionary then returns its value, else an error will be generated.
    const DictValue &get(const String &key) const;

    /** @overload */
    template <typename T>
    T get(const String &key) const;

    //! If the @p key in the dictionary then returns its value, else returns @p defaultValue.
    template <typename T>
    T get(const String &key, const T &defaultValue) const;

    //! Sets new @p value for the @p key, or adds new key-value pair into the dictionary.
    template<typename T>
    const T &set(const String &key, const T &value);

    //! Eras...",1,<empty>,,114,2,CPPASTProblemDeclaration,,<empty>
148,UNKNOWN,-1,,"CV__DNN_INLINE_NS_END
",1,<empty>,,156,3,CPPASTProblemDeclaration,,<empty>
174,UNKNOWN,-1,,"CV__DNN_INLINE_NS_BEGIN
//! @addtogroup dnn
//! @{

    typedef std::vector<int> MatShape;

    /**
     * @brief Enum of computation backends supported by layers.
     * @see Net::setPreferableBackend
     */
    enum Backend
    {
        //! DNN_BACKEND_DEFAULT equals to OPENCV_DNN_BACKEND_DEFAULT, which can be defined using CMake or a configuration parameter
        DNN_BACKEND_DEFAULT = 0,
        DNN_BACKEND_HALIDE,
        DNN_BACKEND_INFERENCE_ENGINE,            //!< Intel OpenVINO computational backend
                                                 //!< @note Tutorial how to build OpenCV with OpenVINO: @ref tutorial_dnn_openvino
        DNN_BACKEND_OPENCV,
        DNN_BACKEND_VKCOM,
        DNN_BACKEND_CUDA,
        DNN_BACKEND_WEBNN,
        DNN_BACKEND_TIMVX,
        DNN_BACKEND_CANN,
#if defined(__OPENCV_BUILD) || defined(BUILD_PLUGIN)
#if !defined(OPENCV_BINDING_PARSER)
        DNN_BACKEND_INFERENCE_ENGINE_NGRAPH = 1000000,     // internal - use DNN_BACKEND_INFERENCE_...",1,<empty>,,60,2,CPPASTProblemDeclaration,,<empty>
184,UNKNOWN,-1,,CV__DNN_INLINE_NS_BEGIN,1,<empty>,,49,1,CPPASTProblemDeclaration,,<empty>
389,UNKNOWN,1,,int64,17,<empty>,,103,1,CPPASTTypeId,,<empty>
431,UNKNOWN,1,,int,13,<empty>,,119,1,CPPASTTypeId,,<empty>
444,UNKNOWN,1,,int,13,<empty>,,124,1,CPPASTTypeId,,<empty>
457,UNKNOWN,1,,unsigned,13,<empty>,,130,1,CPPASTTypeId,,<empty>
528,UNKNOWN,1,,double,17,<empty>,,151,1,CPPASTTypeId,,<empty>
579,UNKNOWN,1,,float,13,<empty>,,172,1,CPPASTTypeId,,<empty>
608,UNKNOWN,1,,int,69,<empty>,,179,1,CPPASTTypeId,,<empty>
923,UNKNOWN,1,,int,17,<empty>,,282,1,CPPASTTypeId,,<empty>
934,UNKNOWN,1,,int,17,<empty>,,284,1,CPPASTTypeId,,<empty>
945,UNKNOWN,1,,int,17,<empty>,,286,1,CPPASTTypeId,,<empty>
995,UNKNOWN,1,,int,71,<empty>,,298,1,CPPASTTypeId,,<empty>
1392,UNKNOWN,-1,,"CV__DNN_INLINE_NS_END
",1,<empty>,,408,36,CPPASTProblemDeclaration,,<empty>
1402,UNKNOWN,-1,,CV__DNN_INLINE_NS_BEGIN,1,<empty>,,12,1,CPPASTProblemDeclaration,,<empty>
1444,UNKNOWN,-1,,"CV__DNN_INLINE_NS_END
",1,<empty>,,75,3,CPPASTProblemDeclaration,,<empty>
1454,UNKNOWN,-1,,"CV__DNN_INLINE_NS_BEGIN
//! @addtogroup dnn
//! @{
//!
//! @defgroup dnnLayerFactory Utilities for New Layers Registration
//! @{

/** @brief %Layer factory allows to create instances of registered layers. */
class CV_EXPORTS LayerFactory
{
public:

    //! Each Layer class must provide this function to the factory
    typedef Ptr<Layer>(*Constructor)(LayerParams &params);

    //! Registers the layer class with typename @p type and specified @p constructor. Thread-safe.
    static void registerLayer(const String &type, Constructor constructor);

    //! Unregisters registered layer with specified type name. Thread-safe.
    static void unregisterLayer(const String &type);

    //! Check if layer is registered.
    static bool isLayerRegistered(const std::string& type);

    /** @brief Creates instance of registered layer.
     *  @param type type name of creating layer.
     *  @param params parameters which will be used for layer initialization.
     *  @note Thread-safe.
     */
...",1,<empty>,,48,1,CPPASTProblemDeclaration,,<empty>
1455,UNKNOWN,-1,,"CV__DNN_INLINE_NS_END
",1,<empty>,,85,2,CPPASTProblemDeclaration,,<empty>
1465,UNKNOWN,-1,,CV__DNN_INLINE_NS_BEGIN,1,<empty>,,11,1,CPPASTProblemDeclaration,,<empty>
1475,UNKNOWN,-1,,"CV__DNN_INLINE_NS_END
",1,<empty>,,26,5,CPPASTProblemDeclaration,,<empty>
1493,UNKNOWN,-1,,CV__DNN_INLINE_NS_BEGIN,1,<empty>,,53,1,CPPASTProblemDeclaration,,<empty>
1768,UNKNOWN,1,,void*,43,<empty>,,116,1,CPPASTTypeId,,<empty>
1910,UNKNOWN,1,,int,17,<empty>,,166,1,CPPASTTypeId,,<empty>
2205,UNKNOWN,1,,int,34,<empty>,,252,1,CPPASTTypeId,,<empty>
2297,UNKNOWN,1,,int,17,<empty>,,274,1,CPPASTTypeId,,<empty>
2314,UNKNOWN,1,,size_t,17,<empty>,,277,1,CPPASTTypeId,,<empty>
2346,UNKNOWN,-1,,"CV__DNN_INLINE_NS_END
",1,<empty>,,287,24,CPPASTProblemDeclaration,,<empty>
2356,UNKNOWN,-1,,"CV__DNN_INLINE_NS_BEGIN

/**
 * @brief Skip model import after diagnostic run in readNet() functions.
 * @param[in] skip Indicates whether to skip the import.
 *
 * This is an internal OpenCV function not intended for users.
 */
CV_EXPORTS void skipModelImport(bool skip);

CV__DNN_INLINE_NS_END",1,<empty>,,11,1,CPPASTProblemDeclaration,,<empty>
2366,UNKNOWN,-1,,"CV__DNN_INLINE_NS_BEGIN


/* Values for 'OPENCV_DNN_BACKEND_INFERENCE_ENGINE_TYPE' parameter */
/// @deprecated
#define CV_DNN_BACKEND_INFERENCE_ENGINE_NN_BUILDER_API     ""NN_BUILDER""
/// @deprecated
#define CV_DNN_BACKEND_INFERENCE_ENGINE_NGRAPH             ""NGRAPH""

/** @brief Returns Inference Engine internal backend API.
 *
 * See values of `CV_DNN_BACKEND_INFERENCE_ENGINE_*` macros.
 *
 * `OPENCV_DNN_BACKEND_INFERENCE_ENGINE_TYPE` runtime parameter (environment variable) is ignored since 4.6.0.
 *
 * @deprecated
 */
CV_EXPORTS_W cv::String getInferenceEngineBackendType();

/** @brief Specify Inference Engine internal backend API.
 *
 * See values of `CV_DNN_BACKEND_INFERENCE_ENGINE_*` macros.
 *
 * @returns previous value of internal backend API
 *
 * @deprecated
 */
CV_EXPORTS_W cv::String setInferenceEngineBackendType(const cv::String& newBackendType);


/** @brief Release a Myriad device (binded by OpenCV).
 *
 * Single Myriad device cannot be shared across multiple processe...",1,<empty>,,14,1,CPPASTProblemDeclaration,,<empty>
2374,UNKNOWN,-1,,namespace CV__DNN_INLINE_NS { },32,<empty>,,15,1,CPPASTProblemDeclaration,,<empty>
2375,UNKNOWN,-1,,using namespace CV__DNN_INLINE_NS;,64,<empty>,,15,2,CPPASTProblemDeclaration,,<empty>
2403,UNKNOWN,1,,G,24,<empty>,,18,1,CPPASTProblemDeclaration,,<empty>
2421,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,32,3,CPPASTProblemDeclaration,,<empty>
2439,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,55,7,CPPASTProblemDeclaration,,<empty>
2457,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,67,11,CPPASTProblemDeclaration,,<empty>
2475,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,79,15,CPPASTProblemDeclaration,,<empty>
2493,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,94,19,CPPASTProblemDeclaration,,<empty>
2511,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,122,23,CPPASTProblemDeclaration,,<empty>
2529,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,145,27,CPPASTProblemDeclaration,,<empty>
2547,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,163,31,CPPASTProblemDeclaration,,<empty>
2565,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,183,35,CPPASTProblemDeclaration,,<empty>
2583,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,203,39,CPPASTProblemDeclaration,,<empty>
2601,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,257,43,CPPASTProblemDeclaration,,<empty>
2619,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,272,47,CPPASTProblemDeclaration,,<empty>
2637,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,287,51,CPPASTProblemDeclaration,,<empty>
2655,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,304,55,CPPASTProblemDeclaration,,<empty>
2673,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,320,59,CPPASTProblemDeclaration,,<empty>
2691,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,397,63,CPPASTProblemDeclaration,,<empty>
2709,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,415,67,CPPASTProblemDeclaration,,<empty>
2727,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,430,71,CPPASTProblemDeclaration,,<empty>
2745,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,444,75,CPPASTProblemDeclaration,,<empty>
2763,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,458,79,CPPASTProblemDeclaration,,<empty>
2781,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,471,83,CPPASTProblemDeclaration,,<empty>
2799,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,486,87,CPPASTProblemDeclaration,,<empty>
2817,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,500,91,CPPASTProblemDeclaration,,<empty>
2835,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,513,95,CPPASTProblemDeclaration,,<empty>
2853,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,543,99,CPPASTProblemDeclaration,,<empty>
2871,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,556,103,CPPASTProblemDeclaration,,<empty>
2889,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,578,107,CPPASTProblemDeclaration,,<empty>
2907,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,592,111,CPPASTProblemDeclaration,,<empty>
2925,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,609,115,CPPASTProblemDeclaration,,<empty>
2943,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,622,119,CPPASTProblemDeclaration,,<empty>
2961,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,639,123,CPPASTProblemDeclaration,,<empty>
2979,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,654,127,CPPASTProblemDeclaration,,<empty>
2997,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,666,131,CPPASTProblemDeclaration,,<empty>
3015,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,682,135,CPPASTProblemDeclaration,,<empty>
3033,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,696,139,CPPASTProblemDeclaration,,<empty>
3051,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,709,143,CPPASTProblemDeclaration,,<empty>
3069,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,723,147,CPPASTProblemDeclaration,,<empty>
3087,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,735,151,CPPASTProblemDeclaration,,<empty>
3105,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,748,155,CPPASTProblemDeclaration,,<empty>
3123,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,771,159,CPPASTProblemDeclaration,,<empty>
3141,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,783,163,CPPASTProblemDeclaration,,<empty>
3159,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,800,167,CPPASTProblemDeclaration,,<empty>
3177,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,812,171,CPPASTProblemDeclaration,,<empty>
3195,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,826,175,CPPASTProblemDeclaration,,<empty>
3213,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,845,179,CPPASTProblemDeclaration,,<empty>
3231,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,860,183,CPPASTProblemDeclaration,,<empty>
3249,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,874,187,CPPASTProblemDeclaration,,<empty>
3267,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,886,191,CPPASTProblemDeclaration,,<empty>
3285,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,912,195,CPPASTProblemDeclaration,,<empty>
3303,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,926,199,CPPASTProblemDeclaration,,<empty>
3321,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,941,203,CPPASTProblemDeclaration,,<empty>
3339,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,957,207,CPPASTProblemDeclaration,,<empty>
3357,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,972,211,CPPASTProblemDeclaration,,<empty>
3375,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,986,215,CPPASTProblemDeclaration,,<empty>
3393,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,1000,219,CPPASTProblemDeclaration,,<empty>
3411,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,1016,223,CPPASTProblemDeclaration,,<empty>
3429,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,1029,227,CPPASTProblemDeclaration,,<empty>
3447,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,1043,231,CPPASTProblemDeclaration,,<empty>
3465,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,1057,235,CPPASTProblemDeclaration,,<empty>
3483,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,1070,239,CPPASTProblemDeclaration,,<empty>
3501,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,1083,243,CPPASTProblemDeclaration,,<empty>
3519,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,1095,247,CPPASTProblemDeclaration,,<empty>
3537,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,1119,251,CPPASTProblemDeclaration,,<empty>
3555,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,1135,255,CPPASTProblemDeclaration,,<empty>
3573,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,1190,259,CPPASTProblemDeclaration,,<empty>
3591,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,1240,263,CPPASTProblemDeclaration,,<empty>
3609,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,1253,267,CPPASTProblemDeclaration,,<empty>
3627,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,1272,271,CPPASTProblemDeclaration,,<empty>
3645,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,1286,275,CPPASTProblemDeclaration,,<empty>
3663,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,1305,279,CPPASTProblemDeclaration,,<empty>
3681,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,1319,283,CPPASTProblemDeclaration,,<empty>
3693,UNKNOWN,9,,"const uint32_t TableStruct_opencv_2dcaffe_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opencv_caffe::BlobShape, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opencv_caffe::BlobShape, dim_),
  PROTOBUF_FIELD_OFFSET(::opencv_caffe::BlobProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::opencv_caffe::BlobProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opencv_caffe::BlobProto, shape_),
  PROTOBUF_FIELD_OFFSET(::opencv_caffe::BlobProto, data_),
  PROTOBUF_FIELD_OFFSET(::opencv_caffe::BlobProto, diff_),
  PROTOBUF_FIELD_OFFSET(::opencv_caffe::BlobProto, double_data_),
  PROTOBUF_FIELD_OFFSET(::opencv_caffe::BlobProto, double_diff_),
  PROTOBUF_FIELD_OFFSET(::opencv_caffe:...",1,<empty>,,1325,9,CPPASTProblemDeclaration,,<empty>
3694,UNKNOWN,10,,"static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::opencv_caffe::BlobShape)},
  { 7, 24, -1, sizeof(::opencv_caffe::BlobProto)},
  { 35, -1, -1, sizeof(::opencv_caffe::BlobProtoVector)},
  { 42, -1, -1, sizeof(::opencv_caffe::PermuteParameter)},
  { 49, 59, -1, sizeof(::opencv_caffe::NormalizeBBoxParameter)},
  { 63, 86, -1, sizeof(::opencv_caffe::PriorBoxParameter)},
  { 103, 120, -1, sizeof(::opencv_caffe::DetectionOutputParameter)},
  { 131, 144, -1, sizeof(::opencv_caffe::Datum)},
  { 151, 165, -1, sizeof(::opencv_caffe::FillerParameter)},
  { 173, 188, -1, sizeof(::opencv_caffe::NetParameter)},
  { 197, 243, -1, sizeof(::opencv_caffe::SolverParameter)},
  { 283, 293, -1, sizeof(::opencv_caffe::SolverState)},
  { 297, 306, -1, sizeof(::opencv_caffe::NetState)},
  { 309, 320, -1, sizeof(::opencv_caffe::NetStateRule)},
  { 325, 335, -1, sizeof(::opencv_caffe::ParamSpec)},
  { 339, 410, -1,...",1,<empty>,,2723,10,CPPASTProblemDeclaration,,<empty>
3700,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2798,1,CPPASTTypeId,,<empty>
3706,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2799,1,CPPASTTypeId,,<empty>
3712,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2800,1,CPPASTTypeId,,<empty>
3718,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2801,1,CPPASTTypeId,,<empty>
3724,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2802,1,CPPASTTypeId,,<empty>
3730,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2803,1,CPPASTTypeId,,<empty>
3736,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2804,1,CPPASTTypeId,,<empty>
3742,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2805,1,CPPASTTypeId,,<empty>
3748,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2806,1,CPPASTTypeId,,<empty>
3754,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2807,1,CPPASTTypeId,,<empty>
3760,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2808,1,CPPASTTypeId,,<empty>
3766,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2809,1,CPPASTTypeId,,<empty>
3772,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2810,1,CPPASTTypeId,,<empty>
3778,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2811,1,CPPASTTypeId,,<empty>
3784,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2812,1,CPPASTTypeId,,<empty>
3790,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2813,1,CPPASTTypeId,,<empty>
3796,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2814,1,CPPASTTypeId,,<empty>
3802,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2815,1,CPPASTTypeId,,<empty>
3808,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2816,1,CPPASTTypeId,,<empty>
3814,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2817,1,CPPASTTypeId,,<empty>
3820,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2818,1,CPPASTTypeId,,<empty>
3826,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2819,1,CPPASTTypeId,,<empty>
3832,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2820,1,CPPASTTypeId,,<empty>
3838,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2821,1,CPPASTTypeId,,<empty>
3844,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2822,1,CPPASTTypeId,,<empty>
3850,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2823,1,CPPASTTypeId,,<empty>
3856,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2824,1,CPPASTTypeId,,<empty>
3862,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2825,1,CPPASTTypeId,,<empty>
3868,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2826,1,CPPASTTypeId,,<empty>
3874,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2827,1,CPPASTTypeId,,<empty>
3880,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2828,1,CPPASTTypeId,,<empty>
3886,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2829,1,CPPASTTypeId,,<empty>
3892,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2830,1,CPPASTTypeId,,<empty>
3898,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2831,1,CPPASTTypeId,,<empty>
3904,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2832,1,CPPASTTypeId,,<empty>
3910,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2833,1,CPPASTTypeId,,<empty>
3916,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2834,1,CPPASTTypeId,,<empty>
3922,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2835,1,CPPASTTypeId,,<empty>
3928,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2836,1,CPPASTTypeId,,<empty>
3934,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2837,1,CPPASTTypeId,,<empty>
3940,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2838,1,CPPASTTypeId,,<empty>
3946,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2839,1,CPPASTTypeId,,<empty>
3952,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2840,1,CPPASTTypeId,,<empty>
3958,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2841,1,CPPASTTypeId,,<empty>
3964,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2842,1,CPPASTTypeId,,<empty>
3970,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2843,1,CPPASTTypeId,,<empty>
3976,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2844,1,CPPASTTypeId,,<empty>
3982,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2845,1,CPPASTTypeId,,<empty>
3988,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2846,1,CPPASTTypeId,,<empty>
3994,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2847,1,CPPASTTypeId,,<empty>
4000,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2848,1,CPPASTTypeId,,<empty>
4006,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2849,1,CPPASTTypeId,,<empty>
4012,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2850,1,CPPASTTypeId,,<empty>
4018,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2851,1,CPPASTTypeId,,<empty>
4024,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2852,1,CPPASTTypeId,,<empty>
4030,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2853,1,CPPASTTypeId,,<empty>
4036,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2854,1,CPPASTTypeId,,<empty>
4042,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2855,1,CPPASTTypeId,,<empty>
4048,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2856,1,CPPASTTypeId,,<empty>
4054,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2857,1,CPPASTTypeId,,<empty>
4060,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2858,1,CPPASTTypeId,,<empty>
4066,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2859,1,CPPASTTypeId,,<empty>
4072,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2860,1,CPPASTTypeId,,<empty>
4078,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2861,1,CPPASTTypeId,,<empty>
4084,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2862,1,CPPASTTypeId,,<empty>
4090,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2863,1,CPPASTTypeId,,<empty>
4096,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2864,1,CPPASTTypeId,,<empty>
4102,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2865,1,CPPASTTypeId,,<empty>
4108,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2866,1,CPPASTTypeId,,<empty>
4114,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2867,1,CPPASTTypeId,,<empty>
4120,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,2868,1,CPPASTTypeId,,<empty>
4125,UNKNOWN,13,,"const char descriptor_table_protodef_opencv_2dcaffe_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  ""\n\022opencv-caffe.proto\022\014opencv_caffe\""\034\n\tBl""
  ""obShape\022\017\n\003dim\030\001 \003(\003B\002\020\001\""\224\002\n\tBlobProto\022&""
  ""\n\005shape\030\007 \001(\0132\027.opencv_caffe.BlobShape\022\020""
  ""\n\004data\030\005 \003(\002B\002\020\001\022\020\n\004diff\030\006 \003(\002B\002\020\001\022\027\n\013do""
  ""uble_data\030\010 \003(\001B\002\020\001\022\027\n\013double_diff\030\t \003(\001""
  ""B\002\020\001\022)\n\rraw_data_type\030\n \001(\0162\022.opencv_caf""
  ""fe.Type\022\024\n\010raw_data\030\014 \001(\014B\002\020\000\022\016\n\003num\030\001 \001""
  ""(\005:\0010\022\023\n\010channels\030\002 \001(\005:\0010\022\021\n\006height\030\003 \001""
  ""(\005:\0010\022\020\n\005width\030\004 \001(\005:\0010\""9\n\017BlobProtoVect""
  ""or\022&\n\005blobs\030\001 \003(\0132\027.opencv_caffe.BlobPro""
  ""to\""!\n\020PermuteParameter\022\r\n\005order\030\001 \003(\r\""...",1,<empty>,,2871,13,CPPASTProblemDeclaration,,<empty>
4149,UNKNOWN,17,,PROTOBUF_ATTRIBUTE_WEAK,1,<empty>,,3352,17,CPPASTProblemDeclaration,,<empty>
4157,UNKNOWN,19,,PROTOBUF_ATTRIBUTE_INIT_PRIORITY,1,<empty>,,3357,19,CPPASTProblemDeclaration,,<empty>
5426,UNKNOWN,1,,BlobShape*,40,<empty>,,4072,1,CPPASTTypeId,,<empty>
5429,UNKNOWN,1,,void,4,<empty>,,4073,1,CPPASTTypeId,,<empty>
5455,UNKNOWN,1,,void,4,<empty>,,4085,1,CPPASTTypeId,,<empty>
5503,UNKNOWN,1,,uint8_t,47,<empty>,,4099,1,CPPASTTypeId,,<empty>
5532,UNKNOWN,1,,uint8_t,32,<empty>,,4102,1,CPPASTTypeId,,<empty>
5626,UNKNOWN,1,,void,4,<empty>,,4135,1,CPPASTTypeId,,<empty>
5701,UNKNOWN,1,,void,4,<empty>,,4160,1,CPPASTTypeId,,<empty>
5736,UNKNOWN,1,,int32_t,25,<empty>,,4169,1,CPPASTTypeId,,<empty>
5792,UNKNOWN,1,,BlobShape *,15,<empty>,,4188,1,CPPASTTypeId,,<empty>
5796,UNKNOWN,1,,const BlobShape &,19,<empty>,,4189,1,CPPASTTypeId,,<empty>
5812,UNKNOWN,1,,void,4,<empty>,,4197,1,CPPASTTypeId,,<empty>
6074,UNKNOWN,1,,size_t,17,<empty>,,4294,1,CPPASTTypeId,,<empty>
6077,UNKNOWN,1,,char*,42,<empty>,,4294,1,CPPASTTypeId,,<empty>
6081,UNKNOWN,1,,char*,22,<empty>,,4295,1,CPPASTTypeId,,<empty>
6107,UNKNOWN,1,,char*,27,<empty>,,4304,1,CPPASTTypeId,,<empty>
6110,UNKNOWN,1,,size_t,54,<empty>,,4304,1,CPPASTTypeId,,<empty>
6113,UNKNOWN,1,,char*,22,<empty>,,4305,1,CPPASTTypeId,,<empty>
6117,UNKNOWN,1,,char*,57,<empty>,,4305,1,CPPASTTypeId,,<empty>
6122,UNKNOWN,1,,size_t,20,<empty>,,4306,1,CPPASTTypeId,,<empty>
6125,UNKNOWN,1,,char*,45,<empty>,,4306,1,CPPASTTypeId,,<empty>
6129,UNKNOWN,1,,char*,22,<empty>,,4307,1,CPPASTTypeId,,<empty>
6184,UNKNOWN,1,,BlobProto*,40,<empty>,,4324,1,CPPASTTypeId,,<empty>
6187,UNKNOWN,1,,void,4,<empty>,,4325,1,CPPASTTypeId,,<empty>
6213,UNKNOWN,1,,void,4,<empty>,,4337,1,CPPASTTypeId,,<empty>
6277,UNKNOWN,1,,size_t,36,<empty>,,4354,1,CPPASTTypeId,,<empty>
6280,UNKNOWN,1,,char*,26,<empty>,,4355,1,CPPASTTypeId,,<empty>
6284,UNKNOWN,1,,char*,26,<empty>,,4356,1,CPPASTTypeId,,<empty>
6339,UNKNOWN,1,,uint8_t,47,<empty>,,4371,1,CPPASTTypeId,,<empty>
6378,UNKNOWN,1,,uint8_t,47,<empty>,,4380,1,CPPASTTypeId,,<empty>
6417,UNKNOWN,1,,uint8_t,47,<empty>,,4389,1,CPPASTTypeId,,<empty>
6456,UNKNOWN,1,,uint8_t,47,<empty>,,4398,1,CPPASTTypeId,,<empty>
6495,UNKNOWN,1,,uint8_t,47,<empty>,,4407,1,CPPASTTypeId,,<empty>
6524,UNKNOWN,1,,uint8_t,32,<empty>,,4410,1,CPPASTTypeId,,<empty>
6550,UNKNOWN,1,,uint8_t,47,<empty>,,4418,1,CPPASTTypeId,,<empty>
6579,UNKNOWN,1,,uint8_t,32,<empty>,,4421,1,CPPASTTypeId,,<empty>
6605,UNKNOWN,1,,uint8_t,47,<empty>,,4429,1,CPPASTTypeId,,<empty>
6636,UNKNOWN,1,,uint8_t,47,<empty>,,4437,1,CPPASTTypeId,,<empty>
6665,UNKNOWN,1,,uint8_t,32,<empty>,,4440,1,CPPASTTypeId,,<empty>
6691,UNKNOWN,1,,uint8_t,47,<empty>,,4448,1,CPPASTTypeId,,<empty>
6720,UNKNOWN,1,,uint8_t,32,<empty>,,4451,1,CPPASTTypeId,,<empty>
6746,UNKNOWN,1,,uint8_t,47,<empty>,,4459,1,CPPASTTypeId,,<empty>
6780,UNKNOWN,1,,::opencv_caffe::Type,53,<empty>,,4463,1,CPPASTTypeId,,<empty>
6803,UNKNOWN,1,,uint8_t,47,<empty>,,4472,1,CPPASTTypeId,,<empty>
6908,UNKNOWN,1,,void,4,<empty>,,4507,1,CPPASTTypeId,,<empty>
7217,UNKNOWN,1,,void,4,<empty>,,4589,1,CPPASTTypeId,,<empty>
7224,UNKNOWN,1,,unsigned int,38,<empty>,,4593,1,CPPASTTypeId,,<empty>
7253,UNKNOWN,1,,int32_t,25,<empty>,,4598,1,CPPASTTypeId,,<empty>
7263,UNKNOWN,1,,unsigned int,38,<empty>,,4605,1,CPPASTTypeId,,<empty>
7292,UNKNOWN,1,,int32_t,25,<empty>,,4610,1,CPPASTTypeId,,<empty>
7302,UNKNOWN,1,,unsigned int,38,<empty>,,4617,1,CPPASTTypeId,,<empty>
7331,UNKNOWN,1,,int32_t,25,<empty>,,4622,1,CPPASTTypeId,,<empty>
7341,UNKNOWN,1,,unsigned int,38,<empty>,,4629,1,CPPASTTypeId,,<empty>
7370,UNKNOWN,1,,int32_t,25,<empty>,,4634,1,CPPASTTypeId,,<empty>
7555,UNKNOWN,1,,BlobProto *,15,<empty>,,4693,1,CPPASTTypeId,,<empty>
7559,UNKNOWN,1,,const BlobProto &,19,<empty>,,4694,1,CPPASTTypeId,,<empty>
7575,UNKNOWN,1,,void,4,<empty>,,4702,1,CPPASTTypeId,,<empty>
7837,UNKNOWN,1,,char*,28,<empty>,,4766,1,CPPASTTypeId,,<empty>
7841,UNKNOWN,1,,char*,28,<empty>,,4767,1,CPPASTTypeId,,<empty>
7930,UNKNOWN,1,,BlobProtoVector*,46,<empty>,,4814,1,CPPASTTypeId,,<empty>
7933,UNKNOWN,1,,void,4,<empty>,,4815,1,CPPASTTypeId,,<empty>
7959,UNKNOWN,1,,void,4,<empty>,,4827,1,CPPASTTypeId,,<empty>
8007,UNKNOWN,1,,uint8_t,47,<empty>,,4841,1,CPPASTTypeId,,<empty>
8126,UNKNOWN,1,,void,4,<empty>,,4879,1,CPPASTTypeId,,<empty>
8138,UNKNOWN,1,,unsigned int,23,<empty>,,4883,1,CPPASTTypeId,,<empty>
8221,UNKNOWN,1,,void,4,<empty>,,4903,1,CPPASTTypeId,,<empty>
8281,UNKNOWN,1,,BlobProtoVector *,15,<empty>,,4923,1,CPPASTTypeId,,<empty>
8285,UNKNOWN,1,,const BlobProtoVector &,19,<empty>,,4924,1,CPPASTTypeId,,<empty>
8301,UNKNOWN,1,,void,4,<empty>,,4932,1,CPPASTTypeId,,<empty>
8447,UNKNOWN,1,,PermuteParameter*,47,<empty>,,4999,1,CPPASTTypeId,,<empty>
8450,UNKNOWN,1,,void,4,<empty>,,5000,1,CPPASTTypeId,,<empty>
8476,UNKNOWN,1,,void,4,<empty>,,5012,1,CPPASTTypeId,,<empty>
8524,UNKNOWN,1,,uint8_t,47,<empty>,,5026,1,CPPASTTypeId,,<empty>
8577,UNKNOWN,1,,uint8_t,32,<empty>,,5034,1,CPPASTTypeId,,<empty>
8673,UNKNOWN,1,,void,4,<empty>,,5067,1,CPPASTTypeId,,<empty>
8765,UNKNOWN,1,,void,4,<empty>,,5089,1,CPPASTTypeId,,<empty>
8832,UNKNOWN,1,,PermuteParameter *,15,<empty>,,5111,1,CPPASTTypeId,,<empty>
8836,UNKNOWN,1,,const PermuteParameter &,19,<empty>,,5112,1,CPPASTTypeId,,<empty>
8852,UNKNOWN,1,,void,4,<empty>,,5120,1,CPPASTTypeId,,<empty>
9053,UNKNOWN,1,,size_t,17,<empty>,,5192,1,CPPASTTypeId,,<empty>
9056,UNKNOWN,1,,char*,42,<empty>,,5192,1,CPPASTTypeId,,<empty>
9060,UNKNOWN,1,,char*,22,<empty>,,5193,1,CPPASTTypeId,,<empty>
9120,UNKNOWN,1,,NormalizeBBoxParameter*,53,<empty>,,5217,1,CPPASTTypeId,,<empty>
9123,UNKNOWN,1,,void,4,<empty>,,5218,1,CPPASTTypeId,,<empty>
9149,UNKNOWN,1,,void,4,<empty>,,5230,1,CPPASTTypeId,,<empty>
9233,UNKNOWN,1,,uint8_t,47,<empty>,,5255,1,CPPASTTypeId,,<empty>
9272,UNKNOWN,1,,uint8_t,47,<empty>,,5264,1,CPPASTTypeId,,<empty>
9303,UNKNOWN,1,,uint8_t,47,<empty>,,5272,1,CPPASTTypeId,,<empty>
9342,UNKNOWN,1,,uint8_t,47,<empty>,,5281,1,CPPASTTypeId,,<empty>
9442,UNKNOWN,1,,void,4,<empty>,,5316,1,CPPASTTypeId,,<empty>
9610,UNKNOWN,1,,void,4,<empty>,,5359,1,CPPASTTypeId,,<empty>
9704,UNKNOWN,1,,NormalizeBBoxParameter *,15,<empty>,,5397,1,CPPASTTypeId,,<empty>
9708,UNKNOWN,1,,const NormalizeBBoxParameter &,19,<empty>,,5398,1,CPPASTTypeId,,<empty>
9724,UNKNOWN,1,,void,4,<empty>,,5406,1,CPPASTTypeId,,<empty>
10020,UNKNOWN,1,,size_t,17,<empty>,,5518,1,CPPASTTypeId,,<empty>
10023,UNKNOWN,1,,char*,42,<empty>,,5518,1,CPPASTTypeId,,<empty>
10027,UNKNOWN,1,,char*,22,<empty>,,5519,1,CPPASTTypeId,,<empty>
10042,UNKNOWN,1,,char*,27,<empty>,,5524,1,CPPASTTypeId,,<empty>
10045,UNKNOWN,1,,size_t,54,<empty>,,5524,1,CPPASTTypeId,,<empty>
10048,UNKNOWN,1,,char*,22,<empty>,,5525,1,CPPASTTypeId,,<empty>
10052,UNKNOWN,1,,char*,60,<empty>,,5525,1,CPPASTTypeId,,<empty>
10057,UNKNOWN,1,,size_t,20,<empty>,,5526,1,CPPASTTypeId,,<empty>
10060,UNKNOWN,1,,char*,45,<empty>,,5526,1,CPPASTTypeId,,<empty>
10064,UNKNOWN,1,,char*,22,<empty>,,5527,1,CPPASTTypeId,,<empty>
10110,UNKNOWN,1,,PriorBoxParameter*,48,<empty>,,5545,1,CPPASTTypeId,,<empty>
10113,UNKNOWN,1,,void,4,<empty>,,5546,1,CPPASTTypeId,,<empty>
10139,UNKNOWN,1,,void,4,<empty>,,5558,1,CPPASTTypeId,,<empty>
10192,UNKNOWN,1,,size_t,41,<empty>,,5570,1,CPPASTTypeId,,<empty>
10195,UNKNOWN,1,,char*,26,<empty>,,5571,1,CPPASTTypeId,,<empty>
10199,UNKNOWN,1,,char*,26,<empty>,,5572,1,CPPASTTypeId,,<empty>
10263,UNKNOWN,1,,uint8_t,47,<empty>,,5590,1,CPPASTTypeId,,<empty>
10310,UNKNOWN,1,,uint8_t,32,<empty>,,5598,1,CPPASTTypeId,,<empty>
10344,UNKNOWN,1,,uint8_t,47,<empty>,,5606,1,CPPASTTypeId,,<empty>
10391,UNKNOWN,1,,uint8_t,32,<empty>,,5614,1,CPPASTTypeId,,<empty>
10425,UNKNOWN,1,,uint8_t,47,<empty>,,5622,1,CPPASTTypeId,,<empty>
10472,UNKNOWN,1,,uint8_t,32,<empty>,,5630,1,CPPASTTypeId,,<empty>
10506,UNKNOWN,1,,uint8_t,47,<empty>,,5638,1,CPPASTTypeId,,<empty>
10545,UNKNOWN,1,,uint8_t,47,<empty>,,5647,1,CPPASTTypeId,,<empty>
10584,UNKNOWN,1,,uint8_t,47,<empty>,,5656,1,CPPASTTypeId,,<empty>
10631,UNKNOWN,1,,uint8_t,32,<empty>,,5664,1,CPPASTTypeId,,<empty>
10665,UNKNOWN,1,,uint8_t,47,<empty>,,5672,1,CPPASTTypeId,,<empty>
10704,UNKNOWN,1,,uint8_t,47,<empty>,,5681,1,CPPASTTypeId,,<empty>
10743,UNKNOWN,1,,uint8_t,47,<empty>,,5690,1,CPPASTTypeId,,<empty>
10782,UNKNOWN,1,,uint8_t,47,<empty>,,5699,1,CPPASTTypeId,,<empty>
10815,UNKNOWN,1,,uint8_t,47,<empty>,,5708,1,CPPASTTypeId,,<empty>
10848,UNKNOWN,1,,uint8_t,47,<empty>,,5717,1,CPPASTTypeId,,<empty>
10881,UNKNOWN,1,,uint8_t,47,<empty>,,5726,1,CPPASTTypeId,,<empty>
10914,UNKNOWN,1,,uint8_t,47,<empty>,,5735,1,CPPASTTypeId,,<empty>
10961,UNKNOWN,1,,uint8_t,32,<empty>,,5743,1,CPPASTTypeId,,<empty>
10995,UNKNOWN,1,,uint8_t,47,<empty>,,5751,1,CPPASTTypeId,,<empty>
11042,UNKNOWN,1,,uint8_t,32,<empty>,,5759,1,CPPASTTypeId,,<empty>
11076,UNKNOWN,1,,uint8_t,47,<empty>,,5767,1,CPPASTTypeId,,<empty>
11123,UNKNOWN,1,,uint8_t,32,<empty>,,5775,1,CPPASTTypeId,,<empty>
11157,UNKNOWN,1,,uint8_t,47,<empty>,,5783,1,CPPASTTypeId,,<empty>
11204,UNKNOWN,1,,uint8_t,32,<empty>,,5791,1,CPPASTTypeId,,<empty>
11305,UNKNOWN,1,,void,4,<empty>,,5825,1,CPPASTTypeId,,<empty>
11955,UNKNOWN,1,,void,4,<empty>,,5944,1,CPPASTTypeId,,<empty>
11962,UNKNOWN,1,,unsigned int,38,<empty>,,5948,1,CPPASTTypeId,,<empty>
11995,UNKNOWN,1,,unsigned int,38,<empty>,,5957,1,CPPASTTypeId,,<empty>
12028,UNKNOWN,1,,unsigned int,38,<empty>,,5966,1,CPPASTTypeId,,<empty>
12061,UNKNOWN,1,,unsigned int,38,<empty>,,5975,1,CPPASTTypeId,,<empty>
12094,UNKNOWN,1,,unsigned int,38,<empty>,,5984,1,CPPASTTypeId,,<empty>
12127,UNKNOWN,1,,unsigned int,38,<empty>,,5993,1,CPPASTTypeId,,<empty>
12160,UNKNOWN,1,,unsigned int,38,<empty>,,6002,1,CPPASTTypeId,,<empty>
12193,UNKNOWN,1,,unsigned int,38,<empty>,,6011,1,CPPASTTypeId,,<empty>
12381,UNKNOWN,1,,PriorBoxParameter *,15,<empty>,,6077,1,CPPASTTypeId,,<empty>
12385,UNKNOWN,1,,const PriorBoxParameter &,19,<empty>,,6078,1,CPPASTTypeId,,<empty>
12401,UNKNOWN,1,,void,4,<empty>,,6086,1,CPPASTTypeId,,<empty>
12706,UNKNOWN,1,,char*,28,<empty>,,6157,1,CPPASTTypeId,,<empty>
12710,UNKNOWN,1,,char*,28,<empty>,,6158,1,CPPASTTypeId,,<empty>
12980,UNKNOWN,1,,size_t,17,<empty>,,6244,1,CPPASTTypeId,,<empty>
12983,UNKNOWN,1,,char*,42,<empty>,,6244,1,CPPASTTypeId,,<empty>
12987,UNKNOWN,1,,char*,22,<empty>,,6245,1,CPPASTTypeId,,<empty>
13002,UNKNOWN,1,,char*,27,<empty>,,6250,1,CPPASTTypeId,,<empty>
13005,UNKNOWN,1,,size_t,54,<empty>,,6250,1,CPPASTTypeId,,<empty>
13008,UNKNOWN,1,,char*,22,<empty>,,6251,1,CPPASTTypeId,,<empty>
13012,UNKNOWN,1,,char*,61,<empty>,,6251,1,CPPASTTypeId,,<empty>
13017,UNKNOWN,1,,size_t,20,<empty>,,6252,1,CPPASTTypeId,,<empty>
13020,UNKNOWN,1,,char*,45,<empty>,,6252,1,CPPASTTypeId,,<empty>
13024,UNKNOWN,1,,char*,22,<empty>,,6253,1,CPPASTTypeId,,<empty>
13088,UNKNOWN,1,,DetectionOutputParameter*,55,<empty>,,6274,1,CPPASTTypeId,,<empty>
13091,UNKNOWN,1,,void,4,<empty>,,6275,1,CPPASTTypeId,,<empty>
13117,UNKNOWN,1,,void,4,<empty>,,6287,1,CPPASTTypeId,,<empty>
13169,UNKNOWN,1,,size_t,44,<empty>,,6301,1,CPPASTTypeId,,<empty>
13172,UNKNOWN,1,,char*,26,<empty>,,6302,1,CPPASTTypeId,,<empty>
13176,UNKNOWN,1,,char*,26,<empty>,,6303,1,CPPASTTypeId,,<empty>
13249,UNKNOWN,1,,uint8_t,47,<empty>,,6324,1,CPPASTTypeId,,<empty>
13288,UNKNOWN,1,,uint8_t,47,<empty>,,6333,1,CPPASTTypeId,,<empty>
13327,UNKNOWN,1,,uint8_t,47,<empty>,,6342,1,CPPASTTypeId,,<empty>
13366,UNKNOWN,1,,uint8_t,47,<empty>,,6351,1,CPPASTTypeId,,<empty>
13397,UNKNOWN,1,,uint8_t,47,<empty>,,6359,1,CPPASTTypeId,,<empty>
13428,UNKNOWN,1,,uint8_t,47,<empty>,,6367,1,CPPASTTypeId,,<empty>
13462,UNKNOWN,1,,::opencv_caffe::PriorBoxParameter_CodeType,49,<empty>,,6371,1,CPPASTTypeId,,<empty>
13485,UNKNOWN,1,,uint8_t,47,<empty>,,6380,1,CPPASTTypeId,,<empty>
13524,UNKNOWN,1,,uint8_t,47,<empty>,,6389,1,CPPASTTypeId,,<empty>
13563,UNKNOWN,1,,uint8_t,47,<empty>,,6398,1,CPPASTTypeId,,<empty>
13596,UNKNOWN,1,,uint8_t,47,<empty>,,6407,1,CPPASTTypeId,,<empty>
13635,UNKNOWN,1,,uint8_t,47,<empty>,,6416,1,CPPASTTypeId,,<empty>
13741,UNKNOWN,1,,void,4,<empty>,,6451,1,CPPASTTypeId,,<empty>
14107,UNKNOWN,1,,void,4,<empty>,,6539,1,CPPASTTypeId,,<empty>
14323,UNKNOWN,1,,DetectionOutputParameter *,15,<empty>,,6617,1,CPPASTTypeId,,<empty>
14327,UNKNOWN,1,,const DetectionOutputParameter &,19,<empty>,,6618,1,CPPASTTypeId,,<empty>
14343,UNKNOWN,1,,void,4,<empty>,,6626,1,CPPASTTypeId,,<empty>
14564,UNKNOWN,1,,char*,28,<empty>,,6690,1,CPPASTTypeId,,<empty>
14568,UNKNOWN,1,,char*,28,<empty>,,6691,1,CPPASTTypeId,,<empty>
14748,UNKNOWN,1,,size_t,17,<empty>,,6753,1,CPPASTTypeId,,<empty>
14751,UNKNOWN,1,,char*,42,<empty>,,6753,1,CPPASTTypeId,,<empty>
14755,UNKNOWN,1,,char*,22,<empty>,,6754,1,CPPASTTypeId,,<empty>
14781,UNKNOWN,1,,char*,27,<empty>,,6763,1,CPPASTTypeId,,<empty>
14784,UNKNOWN,1,,size_t,54,<empty>,,6763,1,CPPASTTypeId,,<empty>
14787,UNKNOWN,1,,char*,22,<empty>,,6764,1,CPPASTTypeId,,<empty>
14791,UNKNOWN,1,,char*,60,<empty>,,6764,1,CPPASTTypeId,,<empty>
14796,UNKNOWN,1,,size_t,20,<empty>,,6765,1,CPPASTTypeId,,<empty>
14799,UNKNOWN,1,,char*,45,<empty>,,6765,1,CPPASTTypeId,,<empty>
14803,UNKNOWN,1,,char*,22,<empty>,,6766,1,CPPASTTypeId,,<empty>
14851,UNKNOWN,1,,Datum*,36,<empty>,,6782,1,CPPASTTypeId,,<empty>
14854,UNKNOWN,1,,void,4,<empty>,,6783,1,CPPASTTypeId,,<empty>
14880,UNKNOWN,1,,void,4,<empty>,,6795,1,CPPASTTypeId,,<empty>
14914,UNKNOWN,1,,size_t,41,<empty>,,6803,1,CPPASTTypeId,,<empty>
14917,UNKNOWN,1,,char*,26,<empty>,,6804,1,CPPASTTypeId,,<empty>
14921,UNKNOWN,1,,char*,26,<empty>,,6805,1,CPPASTTypeId,,<empty>
14976,UNKNOWN,1,,uint8_t,47,<empty>,,6820,1,CPPASTTypeId,,<empty>
15015,UNKNOWN,1,,uint8_t,47,<empty>,,6829,1,CPPASTTypeId,,<empty>
15054,UNKNOWN,1,,uint8_t,47,<empty>,,6838,1,CPPASTTypeId,,<empty>
15093,UNKNOWN,1,,uint8_t,47,<empty>,,6847,1,CPPASTTypeId,,<empty>
15131,UNKNOWN,1,,uint8_t,47,<empty>,,6856,1,CPPASTTypeId,,<empty>
15170,UNKNOWN,1,,uint8_t,47,<empty>,,6865,1,CPPASTTypeId,,<empty>
15217,UNKNOWN,1,,uint8_t,32,<empty>,,6873,1,CPPASTTypeId,,<empty>
15251,UNKNOWN,1,,uint8_t,47,<empty>,,6881,1,CPPASTTypeId,,<empty>
15357,UNKNOWN,1,,void,4,<empty>,,6916,1,CPPASTTypeId,,<empty>
15611,UNKNOWN,1,,void,4,<empty>,,6975,1,CPPASTTypeId,,<empty>
15618,UNKNOWN,1,,unsigned int,38,<empty>,,6979,1,CPPASTTypeId,,<empty>
15796,UNKNOWN,1,,Datum *,15,<empty>,,7032,1,CPPASTTypeId,,<empty>
15800,UNKNOWN,1,,const Datum &,19,<empty>,,7033,1,CPPASTTypeId,,<empty>
15816,UNKNOWN,1,,void,4,<empty>,,7041,1,CPPASTTypeId,,<empty>
16020,UNKNOWN,1,,char*,28,<empty>,,7096,1,CPPASTTypeId,,<empty>
16024,UNKNOWN,1,,char*,28,<empty>,,7097,1,CPPASTTypeId,,<empty>
16210,UNKNOWN,1,,size_t,17,<empty>,,7157,1,CPPASTTypeId,,<empty>
16213,UNKNOWN,1,,char*,42,<empty>,,7157,1,CPPASTTypeId,,<empty>
16217,UNKNOWN,1,,char*,22,<empty>,,7158,1,CPPASTTypeId,,<empty>
16237,UNKNOWN,1,,char*,27,<empty>,,7164,1,CPPASTTypeId,,<empty>
16240,UNKNOWN,1,,size_t,54,<empty>,,7164,1,CPPASTTypeId,,<empty>
16243,UNKNOWN,1,,char*,22,<empty>,,7165,1,CPPASTTypeId,,<empty>
16247,UNKNOWN,1,,char*,57,<empty>,,7165,1,CPPASTTypeId,,<empty>
16252,UNKNOWN,1,,size_t,20,<empty>,,7166,1,CPPASTTypeId,,<empty>
16255,UNKNOWN,1,,char*,45,<empty>,,7166,1,CPPASTTypeId,,<empty>
16259,UNKNOWN,1,,char*,22,<empty>,,7167,1,CPPASTTypeId,,<empty>
16311,UNKNOWN,1,,FillerParameter*,46,<empty>,,7186,1,CPPASTTypeId,,<empty>
16314,UNKNOWN,1,,void,4,<empty>,,7187,1,CPPASTTypeId,,<empty>
16340,UNKNOWN,1,,void,4,<empty>,,7199,1,CPPASTTypeId,,<empty>
16376,UNKNOWN,1,,size_t,38,<empty>,,7206,1,CPPASTTypeId,,<empty>
16379,UNKNOWN,1,,char*,26,<empty>,,7207,1,CPPASTTypeId,,<empty>
16383,UNKNOWN,1,,char*,26,<empty>,,7208,1,CPPASTTypeId,,<empty>
16448,UNKNOWN,1,,uint8_t,47,<empty>,,7226,1,CPPASTTypeId,,<empty>
16494,UNKNOWN,1,,uint8_t,47,<empty>,,7238,1,CPPASTTypeId,,<empty>
16527,UNKNOWN,1,,uint8_t,47,<empty>,,7247,1,CPPASTTypeId,,<empty>
16560,UNKNOWN,1,,uint8_t,47,<empty>,,7256,1,CPPASTTypeId,,<empty>
16593,UNKNOWN,1,,uint8_t,47,<empty>,,7265,1,CPPASTTypeId,,<empty>
16626,UNKNOWN,1,,uint8_t,47,<empty>,,7274,1,CPPASTTypeId,,<empty>
16659,UNKNOWN,1,,uint8_t,47,<empty>,,7283,1,CPPASTTypeId,,<empty>
16698,UNKNOWN,1,,uint8_t,47,<empty>,,7292,1,CPPASTTypeId,,<empty>
16732,UNKNOWN,1,,::opencv_caffe::FillerParameter_VarianceNorm,53,<empty>,,7296,1,CPPASTTypeId,,<empty>
16822,UNKNOWN,1,,void,4,<empty>,,7331,1,CPPASTTypeId,,<empty>
16850,UNKNOWN,1,,int,50,<empty>,,7337,1,CPPASTTypeId,,<empty>
17121,UNKNOWN,1,,void,4,<empty>,,7401,1,CPPASTTypeId,,<empty>
17277,UNKNOWN,1,,FillerParameter *,15,<empty>,,7460,1,CPPASTTypeId,,<empty>
17281,UNKNOWN,1,,const FillerParameter &,19,<empty>,,7461,1,CPPASTTypeId,,<empty>
17297,UNKNOWN,1,,void,4,<empty>,,7469,1,CPPASTTypeId,,<empty>
17500,UNKNOWN,1,,char*,28,<empty>,,7528,1,CPPASTTypeId,,<empty>
17504,UNKNOWN,1,,char*,28,<empty>,,7529,1,CPPASTTypeId,,<empty>
17691,UNKNOWN,1,,size_t,17,<empty>,,7602,1,CPPASTTypeId,,<empty>
17694,UNKNOWN,1,,char*,42,<empty>,,7602,1,CPPASTTypeId,,<empty>
17698,UNKNOWN,1,,char*,22,<empty>,,7603,1,CPPASTTypeId,,<empty>
17724,UNKNOWN,1,,char*,27,<empty>,,7612,1,CPPASTTypeId,,<empty>
17727,UNKNOWN,1,,size_t,54,<empty>,,7612,1,CPPASTTypeId,,<empty>
17730,UNKNOWN,1,,char*,22,<empty>,,7613,1,CPPASTTypeId,,<empty>
17734,UNKNOWN,1,,char*,57,<empty>,,7613,1,CPPASTTypeId,,<empty>
17739,UNKNOWN,1,,size_t,20,<empty>,,7614,1,CPPASTTypeId,,<empty>
17742,UNKNOWN,1,,char*,45,<empty>,,7614,1,CPPASTTypeId,,<empty>
17746,UNKNOWN,1,,char*,22,<empty>,,7615,1,CPPASTTypeId,,<empty>
17801,UNKNOWN,1,,NetParameter*,43,<empty>,,7632,1,CPPASTTypeId,,<empty>
17804,UNKNOWN,1,,void,4,<empty>,,7633,1,CPPASTTypeId,,<empty>
17830,UNKNOWN,1,,void,4,<empty>,,7645,1,CPPASTTypeId,,<empty>
17893,UNKNOWN,1,,size_t,45,<empty>,,7662,1,CPPASTTypeId,,<empty>
17896,UNKNOWN,1,,char*,24,<empty>,,7663,1,CPPASTTypeId,,<empty>
17900,UNKNOWN,1,,char*,24,<empty>,,7664,1,CPPASTTypeId,,<empty>
17955,UNKNOWN,1,,uint8_t,47,<empty>,,7678,1,CPPASTTypeId,,<empty>
18001,UNKNOWN,1,,uint8_t,47,<empty>,,7690,1,CPPASTTypeId,,<empty>
18058,UNKNOWN,1,,uint8_t,47,<empty>,,7703,1,CPPASTTypeId,,<empty>
18130,UNKNOWN,1,,uint8_t,47,<empty>,,7720,1,CPPASTTypeId,,<empty>
18183,UNKNOWN,1,,uint8_t,32,<empty>,,7728,1,CPPASTTypeId,,<empty>
18217,UNKNOWN,1,,uint8_t,47,<empty>,,7736,1,CPPASTTypeId,,<empty>
18256,UNKNOWN,1,,uint8_t,47,<empty>,,7745,1,CPPASTTypeId,,<empty>
18287,UNKNOWN,1,,uint8_t,47,<empty>,,7753,1,CPPASTTypeId,,<empty>
18326,UNKNOWN,1,,uint8_t,47,<empty>,,7762,1,CPPASTTypeId,,<empty>
18383,UNKNOWN,1,,uint8_t,47,<empty>,,7775,1,CPPASTTypeId,,<empty>
18507,UNKNOWN,1,,void,4,<empty>,,7814,1,CPPASTTypeId,,<empty>
18535,UNKNOWN,1,,int,50,<empty>,,7820,1,CPPASTTypeId,,<empty>
18573,UNKNOWN,1,,unsigned int,23,<empty>,,7829,1,CPPASTTypeId,,<empty>
18649,UNKNOWN,1,,int,29,<empty>,,7839,1,CPPASTTypeId,,<empty>
18810,UNKNOWN,1,,unsigned int,23,<empty>,,7873,1,CPPASTTypeId,,<empty>
18856,UNKNOWN,1,,unsigned int,23,<empty>,,7881,1,CPPASTTypeId,,<empty>
18939,UNKNOWN,1,,void,4,<empty>,,7901,1,CPPASTTypeId,,<empty>
19199,UNKNOWN,1,,NetParameter *,15,<empty>,,7979,1,CPPASTTypeId,,<empty>
19203,UNKNOWN,1,,const NetParameter &,19,<empty>,,7980,1,CPPASTTypeId,,<empty>
19219,UNKNOWN,1,,void,4,<empty>,,7988,1,CPPASTTypeId,,<empty>
19478,UNKNOWN,1,,char*,28,<empty>,,8047,1,CPPASTTypeId,,<empty>
19482,UNKNOWN,1,,char*,28,<empty>,,8048,1,CPPASTTypeId,,<empty>
20211,UNKNOWN,1,,size_t,17,<empty>,,8267,1,CPPASTTypeId,,<empty>
20214,UNKNOWN,1,,char*,42,<empty>,,8267,1,CPPASTTypeId,,<empty>
20218,UNKNOWN,1,,char*,22,<empty>,,8268,1,CPPASTTypeId,,<empty>
20287,UNKNOWN,1,,char*,27,<empty>,,8291,1,CPPASTTypeId,,<empty>
20290,UNKNOWN,1,,size_t,54,<empty>,,8291,1,CPPASTTypeId,,<empty>
20293,UNKNOWN,1,,char*,22,<empty>,,8292,1,CPPASTTypeId,,<empty>
20297,UNKNOWN,1,,char*,67,<empty>,,8292,1,CPPASTTypeId,,<empty>
20302,UNKNOWN,1,,size_t,20,<empty>,,8293,1,CPPASTTypeId,,<empty>
20305,UNKNOWN,1,,char*,45,<empty>,,8293,1,CPPASTTypeId,,<empty>
20309,UNKNOWN,1,,char*,22,<empty>,,8294,1,CPPASTTypeId,,<empty>
20458,UNKNOWN,1,,SolverParameter*,46,<empty>,,8329,1,CPPASTTypeId,,<empty>
20461,UNKNOWN,1,,void,4,<empty>,,8330,1,CPPASTTypeId,,<empty>
20487,UNKNOWN,1,,void,4,<empty>,,8342,1,CPPASTTypeId,,<empty>
20638,UNKNOWN,1,,size_t,46,<empty>,,8383,1,CPPASTTypeId,,<empty>
20641,UNKNOWN,1,,char*,26,<empty>,,8384,1,CPPASTTypeId,,<empty>
20645,UNKNOWN,1,,char*,26,<empty>,,8385,1,CPPASTTypeId,,<empty>
20664,UNKNOWN,1,,size_t,45,<empty>,,8388,1,CPPASTTypeId,,<empty>
20667,UNKNOWN,1,,char*,26,<empty>,,8389,1,CPPASTTypeId,,<empty>
20671,UNKNOWN,1,,char*,26,<empty>,,8390,1,CPPASTTypeId,,<empty>
20774,UNKNOWN,1,,uint8_t,47,<empty>,,8420,1,CPPASTTypeId,,<empty>
20820,UNKNOWN,1,,uint8_t,47,<empty>,,8432,1,CPPASTTypeId,,<empty>
20892,UNKNOWN,1,,uint8_t,47,<empty>,,8449,1,CPPASTTypeId,,<empty>
20945,UNKNOWN,1,,uint8_t,32,<empty>,,8457,1,CPPASTTypeId,,<empty>
20979,UNKNOWN,1,,uint8_t,47,<empty>,,8465,1,CPPASTTypeId,,<empty>
21018,UNKNOWN,1,,uint8_t,47,<empty>,,8474,1,CPPASTTypeId,,<empty>
21051,UNKNOWN,1,,uint8_t,47,<empty>,,8483,1,CPPASTTypeId,,<empty>
21090,UNKNOWN,1,,uint8_t,47,<empty>,,8492,1,CPPASTTypeId,,<empty>
21129,UNKNOWN,1,,uint8_t,47,<empty>,,8501,1,CPPASTTypeId,,<empty>
21175,UNKNOWN,1,,uint8_t,47,<empty>,,8513,1,CPPASTTypeId,,<empty>
21208,UNKNOWN,1,,uint8_t,47,<empty>,,8522,1,CPPASTTypeId,,<empty>
21241,UNKNOWN,1,,uint8_t,47,<empty>,,8531,1,CPPASTTypeId,,<empty>
21274,UNKNOWN,1,,uint8_t,47,<empty>,,8540,1,CPPASTTypeId,,<empty>
21307,UNKNOWN,1,,uint8_t,47,<empty>,,8549,1,CPPASTTypeId,,<empty>
21346,UNKNOWN,1,,uint8_t,47,<empty>,,8558,1,CPPASTTypeId,,<empty>
21385,UNKNOWN,1,,uint8_t,47,<empty>,,8567,1,CPPASTTypeId,,<empty>
21431,UNKNOWN,1,,uint8_t,47,<empty>,,8579,1,CPPASTTypeId,,<empty>
21470,UNKNOWN,1,,uint8_t,47,<empty>,,8588,1,CPPASTTypeId,,<empty>
21504,UNKNOWN,1,,::opencv_caffe::SolverParameter_SolverMode,51,<empty>,,8592,1,CPPASTTypeId,,<empty>
21527,UNKNOWN,1,,uint8_t,47,<empty>,,8601,1,CPPASTTypeId,,<empty>
21566,UNKNOWN,1,,uint8_t,47,<empty>,,8610,1,CPPASTTypeId,,<empty>
21605,UNKNOWN,1,,uint8_t,47,<empty>,,8619,1,CPPASTTypeId,,<empty>
21644,UNKNOWN,1,,uint8_t,47,<empty>,,8628,1,CPPASTTypeId,,<empty>
21675,UNKNOWN,1,,uint8_t,47,<empty>,,8636,1,CPPASTTypeId,,<empty>
21732,UNKNOWN,1,,uint8_t,47,<empty>,,8649,1,CPPASTTypeId,,<empty>
21771,UNKNOWN,1,,uint8_t,47,<empty>,,8658,1,CPPASTTypeId,,<empty>
21817,UNKNOWN,1,,uint8_t,47,<empty>,,8670,1,CPPASTTypeId,,<empty>
21848,UNKNOWN,1,,uint8_t,47,<empty>,,8678,1,CPPASTTypeId,,<empty>
21879,UNKNOWN,1,,uint8_t,47,<empty>,,8686,1,CPPASTTypeId,,<empty>
21936,UNKNOWN,1,,uint8_t,47,<empty>,,8699,1,CPPASTTypeId,,<empty>
21975,UNKNOWN,1,,uint8_t,47,<empty>,,8708,1,CPPASTTypeId,,<empty>
22021,UNKNOWN,1,,uint8_t,47,<empty>,,8720,1,CPPASTTypeId,,<empty>
22055,UNKNOWN,1,,::opencv_caffe::SolverParameter_SolverType,51,<empty>,,8724,1,CPPASTTypeId,,<empty>
22078,UNKNOWN,1,,uint8_t,47,<empty>,,8733,1,CPPASTTypeId,,<empty>
22111,UNKNOWN,1,,uint8_t,47,<empty>,,8742,1,CPPASTTypeId,,<empty>
22150,UNKNOWN,1,,uint8_t,47,<empty>,,8751,1,CPPASTTypeId,,<empty>
22189,UNKNOWN,1,,uint8_t,47,<empty>,,8760,1,CPPASTTypeId,,<empty>
22242,UNKNOWN,1,,uint8_t,32,<empty>,,8768,1,CPPASTTypeId,,<empty>
22276,UNKNOWN,1,,uint8_t,47,<empty>,,8776,1,CPPASTTypeId,,<empty>
22309,UNKNOWN,1,,uint8_t,47,<empty>,,8785,1,CPPASTTypeId,,<empty>
22348,UNKNOWN,1,,uint8_t,47,<empty>,,8794,1,CPPASTTypeId,,<empty>
22382,UNKNOWN,1,,::opencv_caffe::SolverParameter_SnapshotFormat,55,<empty>,,8798,1,CPPASTTypeId,,<empty>
22405,UNKNOWN,1,,uint8_t,47,<empty>,,8807,1,CPPASTTypeId,,<empty>
22438,UNKNOWN,1,,uint8_t,47,<empty>,,8816,1,CPPASTTypeId,,<empty>
22471,UNKNOWN,1,,uint8_t,47,<empty>,,8825,1,CPPASTTypeId,,<empty>
22579,UNKNOWN,1,,void,4,<empty>,,8862,1,CPPASTTypeId,,<empty>
22607,UNKNOWN,1,,int,55,<empty>,,8868,1,CPPASTTypeId,,<empty>
22675,UNKNOWN,1,,int,29,<empty>,,8879,1,CPPASTTypeId,,<empty>
22873,UNKNOWN,1,,int,55,<empty>,,8918,1,CPPASTTypeId,,<empty>
23090,UNKNOWN,1,,int,61,<empty>,,8964,1,CPPASTTypeId,,<empty>
23298,UNKNOWN,1,,unsigned int,23,<empty>,,9012,1,CPPASTTypeId,,<empty>
23383,UNKNOWN,1,,int,49,<empty>,,9027,1,CPPASTTypeId,,<empty>
23481,UNKNOWN,1,,unsigned int,23,<empty>,,9052,1,CPPASTTypeId,,<empty>
23566,UNKNOWN,1,,int,65,<empty>,,9067,1,CPPASTTypeId,,<empty>
23920,UNKNOWN,1,,int,50,<empty>,,9141,1,CPPASTTypeId,,<empty>
23995,UNKNOWN,1,,void,4,<empty>,,9162,1,CPPASTTypeId,,<empty>
24792,UNKNOWN,1,,SolverParameter *,15,<empty>,,9431,1,CPPASTTypeId,,<empty>
24796,UNKNOWN,1,,const SolverParameter &,19,<empty>,,9432,1,CPPASTTypeId,,<empty>
24812,UNKNOWN,1,,void,4,<empty>,,9440,1,CPPASTTypeId,,<empty>
25565,UNKNOWN,1,,char*,28,<empty>,,9636,1,CPPASTTypeId,,<empty>
25569,UNKNOWN,1,,char*,28,<empty>,,9637,1,CPPASTTypeId,,<empty>
25751,UNKNOWN,1,,size_t,17,<empty>,,9697,1,CPPASTTypeId,,<empty>
25754,UNKNOWN,1,,char*,42,<empty>,,9697,1,CPPASTTypeId,,<empty>
25758,UNKNOWN,1,,char*,22,<empty>,,9698,1,CPPASTTypeId,,<empty>
25784,UNKNOWN,1,,char*,27,<empty>,,9707,1,CPPASTTypeId,,<empty>
25787,UNKNOWN,1,,size_t,54,<empty>,,9707,1,CPPASTTypeId,,<empty>
25790,UNKNOWN,1,,char*,22,<empty>,,9708,1,CPPASTTypeId,,<empty>
25794,UNKNOWN,1,,char*,56,<empty>,,9708,1,CPPASTTypeId,,<empty>
25799,UNKNOWN,1,,size_t,20,<empty>,,9709,1,CPPASTTypeId,,<empty>
25802,UNKNOWN,1,,char*,45,<empty>,,9709,1,CPPASTTypeId,,<empty>
25806,UNKNOWN,1,,char*,22,<empty>,,9710,1,CPPASTTypeId,,<empty>
25854,UNKNOWN,1,,SolverState*,42,<empty>,,9726,1,CPPASTTypeId,,<empty>
25857,UNKNOWN,1,,void,4,<empty>,,9727,1,CPPASTTypeId,,<empty>
25883,UNKNOWN,1,,void,4,<empty>,,9739,1,CPPASTTypeId,,<empty>
25917,UNKNOWN,1,,size_t,37,<empty>,,9747,1,CPPASTTypeId,,<empty>
25920,UNKNOWN,1,,char*,26,<empty>,,9748,1,CPPASTTypeId,,<empty>
25924,UNKNOWN,1,,char*,26,<empty>,,9749,1,CPPASTTypeId,,<empty>
25979,UNKNOWN,1,,uint8_t,47,<empty>,,9764,1,CPPASTTypeId,,<empty>
26018,UNKNOWN,1,,uint8_t,47,<empty>,,9773,1,CPPASTTypeId,,<empty>
26064,UNKNOWN,1,,uint8_t,47,<empty>,,9785,1,CPPASTTypeId,,<empty>
26121,UNKNOWN,1,,uint8_t,47,<empty>,,9798,1,CPPASTTypeId,,<empty>
26227,UNKNOWN,1,,void,4,<empty>,,9833,1,CPPASTTypeId,,<empty>
26283,UNKNOWN,1,,int,57,<empty>,,9845,1,CPPASTTypeId,,<empty>
26321,UNKNOWN,1,,unsigned int,23,<empty>,,9854,1,CPPASTTypeId,,<empty>
26432,UNKNOWN,1,,void,4,<empty>,,9880,1,CPPASTTypeId,,<empty>
26561,UNKNOWN,1,,SolverState *,15,<empty>,,9920,1,CPPASTTypeId,,<empty>
26565,UNKNOWN,1,,const SolverState &,19,<empty>,,9921,1,CPPASTTypeId,,<empty>
26581,UNKNOWN,1,,void,4,<empty>,,9929,1,CPPASTTypeId,,<empty>
26755,UNKNOWN,1,,char*,28,<empty>,,9975,1,CPPASTTypeId,,<empty>
26759,UNKNOWN,1,,char*,28,<empty>,,9976,1,CPPASTTypeId,,<empty>
26847,UNKNOWN,1,,size_t,17,<empty>,,10014,1,CPPASTTypeId,,<empty>
26850,UNKNOWN,1,,char*,42,<empty>,,10014,1,CPPASTTypeId,,<empty>
26854,UNKNOWN,1,,char*,22,<empty>,,10015,1,CPPASTTypeId,,<empty>
26901,UNKNOWN,1,,NetState*,39,<empty>,,10036,1,CPPASTTypeId,,<empty>
26904,UNKNOWN,1,,void,4,<empty>,,10037,1,CPPASTTypeId,,<empty>
26930,UNKNOWN,1,,void,4,<empty>,,10049,1,CPPASTTypeId,,<empty>
27002,UNKNOWN,1,,uint8_t,47,<empty>,,10070,1,CPPASTTypeId,,<empty>
27036,UNKNOWN,1,,::opencv_caffe::Phase,45,<empty>,,10074,1,CPPASTTypeId,,<empty>
27059,UNKNOWN,1,,uint8_t,47,<empty>,,10083,1,CPPASTTypeId,,<empty>
27098,UNKNOWN,1,,uint8_t,47,<empty>,,10092,1,CPPASTTypeId,,<empty>
27237,UNKNOWN,1,,void,4,<empty>,,10135,1,CPPASTTypeId,,<empty>
27340,UNKNOWN,1,,int,29,<empty>,,10155,1,CPPASTTypeId,,<empty>
27409,UNKNOWN,1,,void,4,<empty>,,10175,1,CPPASTTypeId,,<empty>
27542,UNKNOWN,1,,NetState *,15,<empty>,,10210,1,CPPASTTypeId,,<empty>
27546,UNKNOWN,1,,const NetState &,19,<empty>,,10211,1,CPPASTTypeId,,<empty>
27562,UNKNOWN,1,,void,4,<empty>,,10219,1,CPPASTTypeId,,<empty>
27774,UNKNOWN,1,,size_t,17,<empty>,,10295,1,CPPASTTypeId,,<empty>
27777,UNKNOWN,1,,char*,42,<empty>,,10295,1,CPPASTTypeId,,<empty>
27781,UNKNOWN,1,,char*,22,<empty>,,10296,1,CPPASTTypeId,,<empty>
27796,UNKNOWN,1,,char*,27,<empty>,,10301,1,CPPASTTypeId,,<empty>
27799,UNKNOWN,1,,size_t,54,<empty>,,10301,1,CPPASTTypeId,,<empty>
27802,UNKNOWN,1,,char*,22,<empty>,,10302,1,CPPASTTypeId,,<empty>
27806,UNKNOWN,1,,char*,57,<empty>,,10302,1,CPPASTTypeId,,<empty>
27811,UNKNOWN,1,,size_t,20,<empty>,,10303,1,CPPASTTypeId,,<empty>
27814,UNKNOWN,1,,char*,45,<empty>,,10303,1,CPPASTTypeId,,<empty>
27818,UNKNOWN,1,,char*,22,<empty>,,10304,1,CPPASTTypeId,,<empty>
27855,UNKNOWN,1,,NetStateRule*,43,<empty>,,10319,1,CPPASTTypeId,,<empty>
27858,UNKNOWN,1,,void,4,<empty>,,10320,1,CPPASTTypeId,,<empty>
27884,UNKNOWN,1,,void,4,<empty>,,10332,1,CPPASTTypeId,,<empty>
27913,UNKNOWN,1,,size_t,38,<empty>,,10338,1,CPPASTTypeId,,<empty>
27916,UNKNOWN,1,,char*,26,<empty>,,10339,1,CPPASTTypeId,,<empty>
27920,UNKNOWN,1,,char*,26,<empty>,,10340,1,CPPASTTypeId,,<empty>
27975,UNKNOWN,1,,uint8_t,47,<empty>,,10355,1,CPPASTTypeId,,<empty>
28009,UNKNOWN,1,,::opencv_caffe::Phase,45,<empty>,,10359,1,CPPASTTypeId,,<empty>
28032,UNKNOWN,1,,uint8_t,47,<empty>,,10368,1,CPPASTTypeId,,<empty>
28071,UNKNOWN,1,,uint8_t,47,<empty>,,10377,1,CPPASTTypeId,,<empty>
28110,UNKNOWN,1,,uint8_t,47,<empty>,,10386,1,CPPASTTypeId,,<empty>
28182,UNKNOWN,1,,uint8_t,47,<empty>,,10403,1,CPPASTTypeId,,<empty>
28321,UNKNOWN,1,,void,4,<empty>,,10446,1,CPPASTTypeId,,<empty>
28452,UNKNOWN,1,,int,29,<empty>,,10472,1,CPPASTTypeId,,<empty>
28514,UNKNOWN,1,,int,29,<empty>,,10482,1,CPPASTTypeId,,<empty>
28583,UNKNOWN,1,,void,4,<empty>,,10502,1,CPPASTTypeId,,<empty>
28783,UNKNOWN,1,,NetStateRule *,15,<empty>,,10550,1,CPPASTTypeId,,<empty>
28787,UNKNOWN,1,,const NetStateRule &,19,<empty>,,10551,1,CPPASTTypeId,,<empty>
28803,UNKNOWN,1,,void,4,<empty>,,10559,1,CPPASTTypeId,,<empty>
28958,UNKNOWN,1,,char*,28,<empty>,,10600,1,CPPASTTypeId,,<empty>
28962,UNKNOWN,1,,char*,28,<empty>,,10601,1,CPPASTTypeId,,<empty>
29100,UNKNOWN,1,,size_t,17,<empty>,,10651,1,CPPASTTypeId,,<empty>
29103,UNKNOWN,1,,char*,42,<empty>,,10651,1,CPPASTTypeId,,<empty>
29107,UNKNOWN,1,,char*,22,<empty>,,10652,1,CPPASTTypeId,,<empty>
29179,UNKNOWN,1,,ParamSpec*,40,<empty>,,10679,1,CPPASTTypeId,,<empty>
29182,UNKNOWN,1,,void,4,<empty>,,10680,1,CPPASTTypeId,,<empty>
29208,UNKNOWN,1,,void,4,<empty>,,10692,1,CPPASTTypeId,,<empty>
29288,UNKNOWN,1,,uint8_t,47,<empty>,,10716,1,CPPASTTypeId,,<empty>
29334,UNKNOWN,1,,uint8_t,47,<empty>,,10728,1,CPPASTTypeId,,<empty>
29368,UNKNOWN,1,,::opencv_caffe::ParamSpec_DimCheckMode,50,<empty>,,10732,1,CPPASTTypeId,,<empty>
29391,UNKNOWN,1,,uint8_t,47,<empty>,,10741,1,CPPASTTypeId,,<empty>
29424,UNKNOWN,1,,uint8_t,47,<empty>,,10750,1,CPPASTTypeId,,<empty>
29524,UNKNOWN,1,,void,4,<empty>,,10785,1,CPPASTTypeId,,<empty>
29552,UNKNOWN,1,,int,50,<empty>,,10791,1,CPPASTTypeId,,<empty>
29711,UNKNOWN,1,,void,4,<empty>,,10831,1,CPPASTTypeId,,<empty>
29818,UNKNOWN,1,,ParamSpec *,15,<empty>,,10870,1,CPPASTTypeId,,<empty>
29822,UNKNOWN,1,,const ParamSpec &,19,<empty>,,10871,1,CPPASTTypeId,,<empty>
29838,UNKNOWN,1,,void,4,<empty>,,10879,1,CPPASTTypeId,,<empty>
32605,UNKNOWN,1,,char*,27,<empty>,,11709,1,CPPASTTypeId,,<empty>
32608,UNKNOWN,1,,size_t,54,<empty>,,11709,1,CPPASTTypeId,,<empty>
32611,UNKNOWN,1,,char*,22,<empty>,,11710,1,CPPASTTypeId,,<empty>
32615,UNKNOWN,1,,char*,67,<empty>,,11710,1,CPPASTTypeId,,<empty>
32620,UNKNOWN,1,,size_t,20,<empty>,,11711,1,CPPASTTypeId,,<empty>
32623,UNKNOWN,1,,char*,45,<empty>,,11711,1,CPPASTTypeId,,<empty>
32627,UNKNOWN,1,,char*,22,<empty>,,11712,1,CPPASTTypeId,,<empty>
33064,UNKNOWN,1,,LayerParameter*,45,<empty>,,11783,1,CPPASTTypeId,,<empty>
33067,UNKNOWN,1,,void,4,<empty>,,11784,1,CPPASTTypeId,,<empty>
33093,UNKNOWN,1,,void,4,<empty>,,11796,1,CPPASTTypeId,,<empty>
33941,UNKNOWN,1,,uint8_t,47,<empty>,,12057,1,CPPASTTypeId,,<empty>
33987,UNKNOWN,1,,uint8_t,47,<empty>,,12069,1,CPPASTTypeId,,<empty>
34033,UNKNOWN,1,,uint8_t,47,<empty>,,12081,1,CPPASTTypeId,,<empty>
34105,UNKNOWN,1,,uint8_t,47,<empty>,,12098,1,CPPASTTypeId,,<empty>
34177,UNKNOWN,1,,uint8_t,47,<empty>,,12115,1,CPPASTTypeId,,<empty>
34224,UNKNOWN,1,,uint8_t,32,<empty>,,12123,1,CPPASTTypeId,,<empty>
34258,UNKNOWN,1,,uint8_t,47,<empty>,,12131,1,CPPASTTypeId,,<empty>
34315,UNKNOWN,1,,uint8_t,47,<empty>,,12144,1,CPPASTTypeId,,<empty>
34372,UNKNOWN,1,,uint8_t,47,<empty>,,12157,1,CPPASTTypeId,,<empty>
34429,UNKNOWN,1,,uint8_t,47,<empty>,,12170,1,CPPASTTypeId,,<empty>
34486,UNKNOWN,1,,uint8_t,47,<empty>,,12183,1,CPPASTTypeId,,<empty>
34520,UNKNOWN,1,,::opencv_caffe::Phase,45,<empty>,,12187,1,CPPASTTypeId,,<empty>
34543,UNKNOWN,1,,uint8_t,47,<empty>,,12196,1,CPPASTTypeId,,<empty>
34596,UNKNOWN,1,,uint8_t,32,<empty>,,12204,1,CPPASTTypeId,,<empty>
34630,UNKNOWN,1,,uint8_t,47,<empty>,,12212,1,CPPASTTypeId,,<empty>
34661,UNKNOWN,1,,uint8_t,47,<empty>,,12220,1,CPPASTTypeId,,<empty>
34692,UNKNOWN,1,,uint8_t,47,<empty>,,12228,1,CPPASTTypeId,,<empty>
34723,UNKNOWN,1,,uint8_t,47,<empty>,,12236,1,CPPASTTypeId,,<empty>
34754,UNKNOWN,1,,uint8_t,47,<empty>,,12244,1,CPPASTTypeId,,<empty>
34785,UNKNOWN,1,,uint8_t,47,<empty>,,12252,1,CPPASTTypeId,,<empty>
34816,UNKNOWN,1,,uint8_t,47,<empty>,,12260,1,CPPASTTypeId,,<empty>
34847,UNKNOWN,1,,uint8_t,47,<empty>,,12268,1,CPPASTTypeId,,<empty>
34878,UNKNOWN,1,,uint8_t,47,<empty>,,12276,1,CPPASTTypeId,,<empty>
34909,UNKNOWN,1,,uint8_t,47,<empty>,,12284,1,CPPASTTypeId,,<empty>
34940,UNKNOWN,1,,uint8_t,47,<empty>,,12292,1,CPPASTTypeId,,<empty>
34971,UNKNOWN,1,,uint8_t,47,<empty>,,12300,1,CPPASTTypeId,,<empty>
35002,UNKNOWN,1,,uint8_t,47,<empty>,,12308,1,CPPASTTypeId,,<empty>
35033,UNKNOWN,1,,uint8_t,47,<empty>,,12316,1,CPPASTTypeId,,<empty>
35064,UNKNOWN,1,,uint8_t,47,<empty>,,12324,1,CPPASTTypeId,,<empty>
35095,UNKNOWN,1,,uint8_t,47,<empty>,,12332,1,CPPASTTypeId,,<empty>
35126,UNKNOWN,1,,uint8_t,47,<empty>,,12340,1,CPPASTTypeId,,<empty>
35157,UNKNOWN,1,,uint8_t,47,<empty>,,12348,1,CPPASTTypeId,,<empty>
35188,UNKNOWN,1,,uint8_t,47,<empty>,,12356,1,CPPASTTypeId,,<empty>
35219,UNKNOWN,1,,uint8_t,47,<empty>,,12364,1,CPPASTTypeId,,<empty>
35250,UNKNOWN,1,,uint8_t,47,<empty>,,12372,1,CPPASTTypeId,,<empty>
35281,UNKNOWN,1,,uint8_t,47,<empty>,,12380,1,CPPASTTypeId,,<empty>
35312,UNKNOWN,1,,uint8_t,47,<empty>,,12388,1,CPPASTTypeId,,<empty>
35343,UNKNOWN,1,,uint8_t,47,<empty>,,12396,1,CPPASTTypeId,,<empty>
35374,UNKNOWN,1,,uint8_t,47,<empty>,,12404,1,CPPASTTypeId,,<empty>
35405,UNKNOWN,1,,uint8_t,47,<empty>,,12412,1,CPPASTTypeId,,<empty>
35436,UNKNOWN,1,,uint8_t,47,<empty>,,12420,1,CPPASTTypeId,,<empty>
35467,UNKNOWN,1,,uint8_t,47,<empty>,,12428,1,CPPASTTypeId,,<empty>
35498,UNKNOWN,1,,uint8_t,47,<empty>,,12436,1,CPPASTTypeId,,<empty>
35529,UNKNOWN,1,,uint8_t,47,<empty>,,12444,1,CPPASTTypeId,,<empty>
35560,UNKNOWN,1,,uint8_t,47,<empty>,,12452,1,CPPASTTypeId,,<empty>
35591,UNKNOWN,1,,uint8_t,47,<empty>,,12460,1,CPPASTTypeId,,<empty>
35622,UNKNOWN,1,,uint8_t,47,<empty>,,12468,1,CPPASTTypeId,,<empty>
35653,UNKNOWN,1,,uint8_t,47,<empty>,,12476,1,CPPASTTypeId,,<empty>
35684,UNKNOWN,1,,uint8_t,47,<empty>,,12484,1,CPPASTTypeId,,<empty>
35715,UNKNOWN,1,,uint8_t,47,<empty>,,12492,1,CPPASTTypeId,,<empty>
35746,UNKNOWN,1,,uint8_t,47,<empty>,,12500,1,CPPASTTypeId,,<empty>
35777,UNKNOWN,1,,uint8_t,47,<empty>,,12508,1,CPPASTTypeId,,<empty>
35808,UNKNOWN,1,,uint8_t,47,<empty>,,12516,1,CPPASTTypeId,,<empty>
35839,UNKNOWN,1,,uint8_t,47,<empty>,,12524,1,CPPASTTypeId,,<empty>
35870,UNKNOWN,1,,uint8_t,47,<empty>,,12532,1,CPPASTTypeId,,<empty>
35901,UNKNOWN,1,,uint8_t,47,<empty>,,12540,1,CPPASTTypeId,,<empty>
35932,UNKNOWN,1,,uint8_t,47,<empty>,,12548,1,CPPASTTypeId,,<empty>
35963,UNKNOWN,1,,uint8_t,47,<empty>,,12556,1,CPPASTTypeId,,<empty>
35994,UNKNOWN,1,,uint8_t,47,<empty>,,12564,1,CPPASTTypeId,,<empty>
36025,UNKNOWN,1,,uint8_t,47,<empty>,,12572,1,CPPASTTypeId,,<empty>
36056,UNKNOWN,1,,uint8_t,47,<empty>,,12580,1,CPPASTTypeId,,<empty>
36087,UNKNOWN,1,,uint8_t,47,<empty>,,12588,1,CPPASTTypeId,,<empty>
36118,UNKNOWN,1,,uint8_t,47,<empty>,,12596,1,CPPASTTypeId,,<empty>
36149,UNKNOWN,1,,uint8_t,47,<empty>,,12604,1,CPPASTTypeId,,<empty>
36180,UNKNOWN,1,,uint8_t,47,<empty>,,12612,1,CPPASTTypeId,,<empty>
36211,UNKNOWN,1,,uint8_t,47,<empty>,,12620,1,CPPASTTypeId,,<empty>
36242,UNKNOWN,1,,uint8_t,47,<empty>,,12628,1,CPPASTTypeId,,<empty>
36273,UNKNOWN,1,,uint8_t,47,<empty>,,12636,1,CPPASTTypeId,,<empty>
36366,UNKNOWN,1,,void,4,<empty>,,12669,1,CPPASTTypeId,,<empty>
36394,UNKNOWN,1,,int,50,<empty>,,12675,1,CPPASTTypeId,,<empty>
36443,UNKNOWN,1,,int,50,<empty>,,12685,1,CPPASTTypeId,,<empty>
36511,UNKNOWN,1,,int,29,<empty>,,12696,1,CPPASTTypeId,,<empty>
36573,UNKNOWN,1,,int,29,<empty>,,12706,1,CPPASTTypeId,,<empty>
36648,UNKNOWN,1,,unsigned int,23,<empty>,,12720,1,CPPASTTypeId,,<empty>
36694,UNKNOWN,1,,unsigned int,23,<empty>,,12728,1,CPPASTTypeId,,<empty>
36740,UNKNOWN,1,,unsigned int,23,<empty>,,12736,1,CPPASTTypeId,,<empty>
36786,UNKNOWN,1,,unsigned int,23,<empty>,,12744,1,CPPASTTypeId,,<empty>
38575,UNKNOWN,1,,void,4,<empty>,,13212,1,CPPASTTypeId,,<empty>
38678,UNKNOWN,1,,unsigned int,38,<empty>,,13232,1,CPPASTTypeId,,<empty>
38811,UNKNOWN,1,,unsigned int,38,<empty>,,13269,1,CPPASTTypeId,,<empty>
40006,UNKNOWN,1,,LayerParameter *,15,<empty>,,13701,1,CPPASTTypeId,,<empty>
40010,UNKNOWN,1,,const LayerParameter &,19,<empty>,,13702,1,CPPASTTypeId,,<empty>
40026,UNKNOWN,1,,void,4,<empty>,,13710,1,CPPASTTypeId,,<empty>
41083,UNKNOWN,1,,char*,28,<empty>,,13953,1,CPPASTTypeId,,<empty>
41087,UNKNOWN,1,,char*,28,<empty>,,13954,1,CPPASTTypeId,,<empty>
41247,UNKNOWN,1,,size_t,17,<empty>,,14012,1,CPPASTTypeId,,<empty>
41250,UNKNOWN,1,,char*,42,<empty>,,14012,1,CPPASTTypeId,,<empty>
41254,UNKNOWN,1,,char*,22,<empty>,,14013,1,CPPASTTypeId,,<empty>
41280,UNKNOWN,1,,char*,27,<empty>,,14022,1,CPPASTTypeId,,<empty>
41283,UNKNOWN,1,,size_t,54,<empty>,,14022,1,CPPASTTypeId,,<empty>
41286,UNKNOWN,1,,char*,22,<empty>,,14023,1,CPPASTTypeId,,<empty>
41290,UNKNOWN,1,,char*,61,<empty>,,14023,1,CPPASTTypeId,,<empty>
41295,UNKNOWN,1,,size_t,20,<empty>,,14024,1,CPPASTTypeId,,<empty>
41298,UNKNOWN,1,,char*,45,<empty>,,14024,1,CPPASTTypeId,,<empty>
41302,UNKNOWN,1,,char*,22,<empty>,,14025,1,CPPASTTypeId,,<empty>
41353,UNKNOWN,1,,TransformationParameter*,54,<empty>,,14042,1,CPPASTTypeId,,<empty>
41356,UNKNOWN,1,,void,4,<empty>,,14043,1,CPPASTTypeId,,<empty>
41382,UNKNOWN,1,,void,4,<empty>,,14055,1,CPPASTTypeId,,<empty>
41416,UNKNOWN,1,,size_t,42,<empty>,,14063,1,CPPASTTypeId,,<empty>
41419,UNKNOWN,1,,char*,26,<empty>,,14064,1,CPPASTTypeId,,<empty>
41423,UNKNOWN,1,,char*,26,<empty>,,14065,1,CPPASTTypeId,,<empty>
41481,UNKNOWN,1,,uint8_t,47,<empty>,,14081,1,CPPASTTypeId,,<empty>
41514,UNKNOWN,1,,uint8_t,47,<empty>,,14090,1,CPPASTTypeId,,<empty>
41553,UNKNOWN,1,,uint8_t,47,<empty>,,14099,1,CPPASTTypeId,,<empty>
41592,UNKNOWN,1,,uint8_t,47,<empty>,,14108,1,CPPASTTypeId,,<empty>
41638,UNKNOWN,1,,uint8_t,47,<empty>,,14120,1,CPPASTTypeId,,<empty>
41685,UNKNOWN,1,,uint8_t,32,<empty>,,14128,1,CPPASTTypeId,,<empty>
41719,UNKNOWN,1,,uint8_t,47,<empty>,,14136,1,CPPASTTypeId,,<empty>
41758,UNKNOWN,1,,uint8_t,47,<empty>,,14145,1,CPPASTTypeId,,<empty>
41864,UNKNOWN,1,,void,4,<empty>,,14180,1,CPPASTTypeId,,<empty>
41976,UNKNOWN,1,,int,55,<empty>,,14204,1,CPPASTTypeId,,<empty>
42150,UNKNOWN,1,,void,4,<empty>,,14243,1,CPPASTTypeId,,<empty>
42157,UNKNOWN,1,,unsigned int,38,<empty>,,14247,1,CPPASTTypeId,,<empty>
42308,UNKNOWN,1,,TransformationParameter *,15,<empty>,,14300,1,CPPASTTypeId,,<empty>
42312,UNKNOWN,1,,const TransformationParameter &,19,<empty>,,14301,1,CPPASTTypeId,,<empty>
42328,UNKNOWN,1,,void,4,<empty>,,14309,1,CPPASTTypeId,,<empty>
42532,UNKNOWN,1,,char*,28,<empty>,,14364,1,CPPASTTypeId,,<empty>
42536,UNKNOWN,1,,char*,28,<empty>,,14365,1,CPPASTTypeId,,<empty>
42640,UNKNOWN,1,,size_t,17,<empty>,,14405,1,CPPASTTypeId,,<empty>
42643,UNKNOWN,1,,char*,42,<empty>,,14405,1,CPPASTTypeId,,<empty>
42647,UNKNOWN,1,,char*,22,<empty>,,14406,1,CPPASTTypeId,,<empty>
42662,UNKNOWN,1,,char*,27,<empty>,,14411,1,CPPASTTypeId,,<empty>
42665,UNKNOWN,1,,size_t,54,<empty>,,14411,1,CPPASTTypeId,,<empty>
42668,UNKNOWN,1,,char*,22,<empty>,,14412,1,CPPASTTypeId,,<empty>
42672,UNKNOWN,1,,char*,64,<empty>,,14412,1,CPPASTTypeId,,<empty>
42677,UNKNOWN,1,,size_t,20,<empty>,,14413,1,CPPASTTypeId,,<empty>
42680,UNKNOWN,1,,char*,45,<empty>,,14413,1,CPPASTTypeId,,<empty>
42684,UNKNOWN,1,,char*,22,<empty>,,14414,1,CPPASTTypeId,,<empty>
42724,UNKNOWN,1,,LossParameter*,44,<empty>,,14430,1,CPPASTTypeId,,<empty>
42727,UNKNOWN,1,,void,4,<empty>,,14431,1,CPPASTTypeId,,<empty>
42753,UNKNOWN,1,,void,4,<empty>,,14443,1,CPPASTTypeId,,<empty>
42774,UNKNOWN,1,,size_t,45,<empty>,,14447,1,CPPASTTypeId,,<empty>
42777,UNKNOWN,1,,char*,26,<empty>,,14448,1,CPPASTTypeId,,<empty>
42781,UNKNOWN,1,,char*,26,<empty>,,14449,1,CPPASTTypeId,,<empty>
42839,UNKNOWN,1,,uint8_t,47,<empty>,,14465,1,CPPASTTypeId,,<empty>
42878,UNKNOWN,1,,uint8_t,47,<empty>,,14474,1,CPPASTTypeId,,<empty>
42917,UNKNOWN,1,,uint8_t,47,<empty>,,14483,1,CPPASTTypeId,,<empty>
42951,UNKNOWN,1,,::opencv_caffe::LossParameter_NormalizationMode,53,<empty>,,14487,1,CPPASTTypeId,,<empty>
43041,UNKNOWN,1,,void,4,<empty>,,14522,1,CPPASTTypeId,,<empty>
43179,UNKNOWN,1,,void,4,<empty>,,14558,1,CPPASTTypeId,,<empty>
43274,UNKNOWN,1,,LossParameter *,15,<empty>,,14590,1,CPPASTTypeId,,<empty>
43278,UNKNOWN,1,,const LossParameter &,19,<empty>,,14591,1,CPPASTTypeId,,<empty>
43294,UNKNOWN,1,,void,4,<empty>,,14599,1,CPPASTTypeId,,<empty>
43419,UNKNOWN,1,,char*,28,<empty>,,14636,1,CPPASTTypeId,,<empty>
43423,UNKNOWN,1,,char*,28,<empty>,,14637,1,CPPASTTypeId,,<empty>
43527,UNKNOWN,1,,size_t,17,<empty>,,14677,1,CPPASTTypeId,,<empty>
43530,UNKNOWN,1,,char*,42,<empty>,,14677,1,CPPASTTypeId,,<empty>
43534,UNKNOWN,1,,char*,22,<empty>,,14678,1,CPPASTTypeId,,<empty>
43584,UNKNOWN,1,,AccuracyParameter*,48,<empty>,,14700,1,CPPASTTypeId,,<empty>
43587,UNKNOWN,1,,void,4,<empty>,,14701,1,CPPASTTypeId,,<empty>
43613,UNKNOWN,1,,void,4,<empty>,,14713,1,CPPASTTypeId,,<empty>
43684,UNKNOWN,1,,uint8_t,47,<empty>,,14734,1,CPPASTTypeId,,<empty>
43723,UNKNOWN,1,,uint8_t,47,<empty>,,14743,1,CPPASTTypeId,,<empty>
43762,UNKNOWN,1,,uint8_t,47,<empty>,,14752,1,CPPASTTypeId,,<empty>
43868,UNKNOWN,1,,void,4,<empty>,,14787,1,CPPASTTypeId,,<empty>
44006,UNKNOWN,1,,void,4,<empty>,,14822,1,CPPASTTypeId,,<empty>
44108,UNKNOWN,1,,AccuracyParameter *,15,<empty>,,14853,1,CPPASTTypeId,,<empty>
44112,UNKNOWN,1,,const AccuracyParameter &,19,<empty>,,14854,1,CPPASTTypeId,,<empty>
44128,UNKNOWN,1,,void,4,<empty>,,14862,1,CPPASTTypeId,,<empty>
44340,UNKNOWN,1,,size_t,17,<empty>,,14936,1,CPPASTTypeId,,<empty>
44343,UNKNOWN,1,,char*,42,<empty>,,14936,1,CPPASTTypeId,,<empty>
44347,UNKNOWN,1,,char*,22,<empty>,,14937,1,CPPASTTypeId,,<empty>
44362,UNKNOWN,1,,char*,27,<empty>,,14942,1,CPPASTTypeId,,<empty>
44365,UNKNOWN,1,,size_t,54,<empty>,,14942,1,CPPASTTypeId,,<empty>
44368,UNKNOWN,1,,char*,22,<empty>,,14943,1,CPPASTTypeId,,<empty>
44372,UNKNOWN,1,,char*,63,<empty>,,14943,1,CPPASTTypeId,,<empty>
44377,UNKNOWN,1,,size_t,20,<empty>,,14944,1,CPPASTTypeId,,<empty>
44380,UNKNOWN,1,,char*,45,<empty>,,14944,1,CPPASTTypeId,,<empty>
44384,UNKNOWN,1,,char*,22,<empty>,,14945,1,CPPASTTypeId,,<empty>
44424,UNKNOWN,1,,ArgMaxParameter*,46,<empty>,,14961,1,CPPASTTypeId,,<empty>
44427,UNKNOWN,1,,void,4,<empty>,,14962,1,CPPASTTypeId,,<empty>
44453,UNKNOWN,1,,void,4,<empty>,,14974,1,CPPASTTypeId,,<empty>
44474,UNKNOWN,1,,size_t,44,<empty>,,14978,1,CPPASTTypeId,,<empty>
44477,UNKNOWN,1,,char*,26,<empty>,,14979,1,CPPASTTypeId,,<empty>
44481,UNKNOWN,1,,char*,26,<empty>,,14980,1,CPPASTTypeId,,<empty>
44539,UNKNOWN,1,,uint8_t,47,<empty>,,14996,1,CPPASTTypeId,,<empty>
44578,UNKNOWN,1,,uint8_t,47,<empty>,,15005,1,CPPASTTypeId,,<empty>
44617,UNKNOWN,1,,uint8_t,47,<empty>,,15014,1,CPPASTTypeId,,<empty>
44723,UNKNOWN,1,,void,4,<empty>,,15049,1,CPPASTTypeId,,<empty>
44861,UNKNOWN,1,,void,4,<empty>,,15084,1,CPPASTTypeId,,<empty>
44954,UNKNOWN,1,,ArgMaxParameter *,15,<empty>,,15115,1,CPPASTTypeId,,<empty>
44958,UNKNOWN,1,,const ArgMaxParameter &,19,<empty>,,15116,1,CPPASTTypeId,,<empty>
44974,UNKNOWN,1,,void,4,<empty>,,15124,1,CPPASTTypeId,,<empty>
45099,UNKNOWN,1,,char*,28,<empty>,,15161,1,CPPASTTypeId,,<empty>
45103,UNKNOWN,1,,char*,28,<empty>,,15162,1,CPPASTTypeId,,<empty>
45196,UNKNOWN,1,,size_t,17,<empty>,,15199,1,CPPASTTypeId,,<empty>
45199,UNKNOWN,1,,char*,42,<empty>,,15199,1,CPPASTTypeId,,<empty>
45203,UNKNOWN,1,,char*,22,<empty>,,15200,1,CPPASTTypeId,,<empty>
45250,UNKNOWN,1,,ConcatParameter*,46,<empty>,,15221,1,CPPASTTypeId,,<empty>
45253,UNKNOWN,1,,void,4,<empty>,,15222,1,CPPASTTypeId,,<empty>
45279,UNKNOWN,1,,void,4,<empty>,,15234,1,CPPASTTypeId,,<empty>
45347,UNKNOWN,1,,uint8_t,47,<empty>,,15254,1,CPPASTTypeId,,<empty>
45386,UNKNOWN,1,,uint8_t,47,<empty>,,15263,1,CPPASTTypeId,,<empty>
45492,UNKNOWN,1,,void,4,<empty>,,15298,1,CPPASTTypeId,,<empty>
45602,UNKNOWN,1,,void,4,<empty>,,15327,1,CPPASTTypeId,,<empty>
45685,UNKNOWN,1,,ConcatParameter *,15,<empty>,,15353,1,CPPASTTypeId,,<empty>
45689,UNKNOWN,1,,const ConcatParameter &,19,<empty>,,15354,1,CPPASTTypeId,,<empty>
45705,UNKNOWN,1,,void,4,<empty>,,15362,1,CPPASTTypeId,,<empty>
45913,UNKNOWN,1,,size_t,17,<empty>,,15435,1,CPPASTTypeId,,<empty>
45916,UNKNOWN,1,,char*,42,<empty>,,15435,1,CPPASTTypeId,,<empty>
45920,UNKNOWN,1,,char*,22,<empty>,,15436,1,CPPASTTypeId,,<empty>
45935,UNKNOWN,1,,char*,27,<empty>,,15441,1,CPPASTTypeId,,<empty>
45938,UNKNOWN,1,,size_t,54,<empty>,,15441,1,CPPASTTypeId,,<empty>
45941,UNKNOWN,1,,char*,22,<empty>,,15442,1,CPPASTTypeId,,<empty>
45945,UNKNOWN,1,,char*,68,<empty>,,15442,1,CPPASTTypeId,,<empty>
45950,UNKNOWN,1,,size_t,20,<empty>,,15443,1,CPPASTTypeId,,<empty>
45953,UNKNOWN,1,,char*,45,<empty>,,15443,1,CPPASTTypeId,,<empty>
45957,UNKNOWN,1,,char*,22,<empty>,,15444,1,CPPASTTypeId,,<empty>
46000,UNKNOWN,1,,BatchNormParameter*,49,<empty>,,15461,1,CPPASTTypeId,,<empty>
46003,UNKNOWN,1,,void,4,<empty>,,15462,1,CPPASTTypeId,,<empty>
46029,UNKNOWN,1,,void,4,<empty>,,15474,1,CPPASTTypeId,,<empty>
46040,UNKNOWN,1,,size_t,47,<empty>,,15476,1,CPPASTTypeId,,<empty>
46043,UNKNOWN,1,,char*,24,<empty>,,15477,1,CPPASTTypeId,,<empty>
46047,UNKNOWN,1,,char*,24,<empty>,,15478,1,CPPASTTypeId,,<empty>
46118,UNKNOWN,1,,uint8_t,47,<empty>,,15497,1,CPPASTTypeId,,<empty>
46157,UNKNOWN,1,,uint8_t,47,<empty>,,15506,1,CPPASTTypeId,,<empty>
46190,UNKNOWN,1,,uint8_t,47,<empty>,,15515,1,CPPASTTypeId,,<empty>
46223,UNKNOWN,1,,uint8_t,47,<empty>,,15524,1,CPPASTTypeId,,<empty>
46329,UNKNOWN,1,,void,4,<empty>,,15559,1,CPPASTTypeId,,<empty>
46495,UNKNOWN,1,,void,4,<empty>,,15600,1,CPPASTTypeId,,<empty>
46580,UNKNOWN,1,,BatchNormParameter *,15,<empty>,,15636,1,CPPASTTypeId,,<empty>
46584,UNKNOWN,1,,const BatchNormParameter &,19,<empty>,,15637,1,CPPASTTypeId,,<empty>
46600,UNKNOWN,1,,void,4,<empty>,,15645,1,CPPASTTypeId,,<empty>
46735,UNKNOWN,1,,char*,28,<empty>,,15685,1,CPPASTTypeId,,<empty>
46739,UNKNOWN,1,,char*,28,<empty>,,15686,1,CPPASTTypeId,,<empty>
46882,UNKNOWN,1,,size_t,17,<empty>,,15737,1,CPPASTTypeId,,<empty>
46885,UNKNOWN,1,,char*,42,<empty>,,15737,1,CPPASTTypeId,,<empty>
46889,UNKNOWN,1,,char*,22,<empty>,,15738,1,CPPASTTypeId,,<empty>
46946,UNKNOWN,1,,BiasParameter*,44,<empty>,,15761,1,CPPASTTypeId,,<empty>
46949,UNKNOWN,1,,void,4,<empty>,,15762,1,CPPASTTypeId,,<empty>
46975,UNKNOWN,1,,void,4,<empty>,,15774,1,CPPASTTypeId,,<empty>
47056,UNKNOWN,1,,uint8_t,47,<empty>,,15798,1,CPPASTTypeId,,<empty>
47095,UNKNOWN,1,,uint8_t,47,<empty>,,15807,1,CPPASTTypeId,,<empty>
47134,UNKNOWN,1,,uint8_t,47,<empty>,,15816,1,CPPASTTypeId,,<empty>
47232,UNKNOWN,1,,void,4,<empty>,,15850,1,CPPASTTypeId,,<empty>
47372,UNKNOWN,1,,void,4,<empty>,,15887,1,CPPASTTypeId,,<empty>
47474,UNKNOWN,1,,BiasParameter *,15,<empty>,,15920,1,CPPASTTypeId,,<empty>
47478,UNKNOWN,1,,const BiasParameter &,19,<empty>,,15921,1,CPPASTTypeId,,<empty>
47494,UNKNOWN,1,,void,4,<empty>,,15929,1,CPPASTTypeId,,<empty>
47698,UNKNOWN,1,,size_t,17,<empty>,,16000,1,CPPASTTypeId,,<empty>
47701,UNKNOWN,1,,char*,42,<empty>,,16000,1,CPPASTTypeId,,<empty>
47705,UNKNOWN,1,,char*,22,<empty>,,16001,1,CPPASTTypeId,,<empty>
47752,UNKNOWN,1,,ContrastiveLossParameter*,55,<empty>,,16022,1,CPPASTTypeId,,<empty>
47755,UNKNOWN,1,,void,4,<empty>,,16023,1,CPPASTTypeId,,<empty>
47781,UNKNOWN,1,,void,4,<empty>,,16035,1,CPPASTTypeId,,<empty>
47849,UNKNOWN,1,,uint8_t,47,<empty>,,16055,1,CPPASTTypeId,,<empty>
47882,UNKNOWN,1,,uint8_t,47,<empty>,,16064,1,CPPASTTypeId,,<empty>
47988,UNKNOWN,1,,void,4,<empty>,,16099,1,CPPASTTypeId,,<empty>
48098,UNKNOWN,1,,void,4,<empty>,,16128,1,CPPASTTypeId,,<empty>
48163,UNKNOWN,1,,ContrastiveLossParameter *,15,<empty>,,16154,1,CPPASTTypeId,,<empty>
48167,UNKNOWN,1,,const ContrastiveLossParameter &,19,<empty>,,16155,1,CPPASTTypeId,,<empty>
48183,UNKNOWN,1,,void,4,<empty>,,16163,1,CPPASTTypeId,,<empty>
48569,UNKNOWN,1,,size_t,17,<empty>,,16294,1,CPPASTTypeId,,<empty>
48572,UNKNOWN,1,,char*,42,<empty>,,16294,1,CPPASTTypeId,,<empty>
48576,UNKNOWN,1,,char*,22,<empty>,,16295,1,CPPASTTypeId,,<empty>
48591,UNKNOWN,1,,char*,27,<empty>,,16300,1,CPPASTTypeId,,<empty>
48594,UNKNOWN,1,,size_t,54,<empty>,,16300,1,CPPASTTypeId,,<empty>
48597,UNKNOWN,1,,char*,22,<empty>,,16301,1,CPPASTTypeId,,<empty>
48601,UNKNOWN,1,,char*,65,<empty>,,16301,1,CPPASTTypeId,,<empty>
48606,UNKNOWN,1,,size_t,20,<empty>,,16302,1,CPPASTTypeId,,<empty>
48609,UNKNOWN,1,,char*,45,<empty>,,16302,1,CPPASTTypeId,,<empty>
48613,UNKNOWN,1,,char*,22,<empty>,,16303,1,CPPASTTypeId,,<empty>
48673,UNKNOWN,1,,ConvolutionParameter*,51,<empty>,,16323,1,CPPASTTypeId,,<empty>
48676,UNKNOWN,1,,void,4,<empty>,,16324,1,CPPASTTypeId,,<empty>
48702,UNKNOWN,1,,void,4,<empty>,,16336,1,CPPASTTypeId,,<empty>
48770,UNKNOWN,1,,size_t,43,<empty>,,16354,1,CPPASTTypeId,,<empty>
48773,UNKNOWN,1,,char*,26,<empty>,,16355,1,CPPASTTypeId,,<empty>
48777,UNKNOWN,1,,char*,26,<empty>,,16356,1,CPPASTTypeId,,<empty>
48796,UNKNOWN,1,,size_t,41,<empty>,,16359,1,CPPASTTypeId,,<empty>
48799,UNKNOWN,1,,char*,26,<empty>,,16360,1,CPPASTTypeId,,<empty>
48803,UNKNOWN,1,,char*,26,<empty>,,16361,1,CPPASTTypeId,,<empty>
48867,UNKNOWN,1,,uint8_t,47,<empty>,,16379,1,CPPASTTypeId,,<empty>
48906,UNKNOWN,1,,uint8_t,47,<empty>,,16388,1,CPPASTTypeId,,<empty>
48945,UNKNOWN,1,,uint8_t,47,<empty>,,16397,1,CPPASTTypeId,,<empty>
48998,UNKNOWN,1,,uint8_t,32,<empty>,,16405,1,CPPASTTypeId,,<empty>
49032,UNKNOWN,1,,uint8_t,47,<empty>,,16413,1,CPPASTTypeId,,<empty>
49085,UNKNOWN,1,,uint8_t,32,<empty>,,16421,1,CPPASTTypeId,,<empty>
49119,UNKNOWN,1,,uint8_t,47,<empty>,,16429,1,CPPASTTypeId,,<empty>
49158,UNKNOWN,1,,uint8_t,47,<empty>,,16438,1,CPPASTTypeId,,<empty>
49211,UNKNOWN,1,,uint8_t,32,<empty>,,16446,1,CPPASTTypeId,,<empty>
49245,UNKNOWN,1,,uint8_t,47,<empty>,,16454,1,CPPASTTypeId,,<empty>
49276,UNKNOWN,1,,uint8_t,47,<empty>,,16462,1,CPPASTTypeId,,<empty>
49307,UNKNOWN,1,,uint8_t,47,<empty>,,16470,1,CPPASTTypeId,,<empty>
49346,UNKNOWN,1,,uint8_t,47,<empty>,,16479,1,CPPASTTypeId,,<empty>
49385,UNKNOWN,1,,uint8_t,47,<empty>,,16488,1,CPPASTTypeId,,<empty>
49424,UNKNOWN,1,,uint8_t,47,<empty>,,16497,1,CPPASTTypeId,,<empty>
49463,UNKNOWN,1,,uint8_t,47,<empty>,,16506,1,CPPASTTypeId,,<empty>
49502,UNKNOWN,1,,uint8_t,47,<empty>,,16515,1,CPPASTTypeId,,<empty>
49541,UNKNOWN,1,,uint8_t,47,<empty>,,16524,1,CPPASTTypeId,,<empty>
49575,UNKNOWN,1,,::opencv_caffe::ConvolutionParameter_Engine,46,<empty>,,16528,1,CPPASTTypeId,,<empty>
49598,UNKNOWN,1,,uint8_t,47,<empty>,,16537,1,CPPASTTypeId,,<empty>
49637,UNKNOWN,1,,uint8_t,47,<empty>,,16546,1,CPPASTTypeId,,<empty>
49676,UNKNOWN,1,,uint8_t,47,<empty>,,16555,1,CPPASTTypeId,,<empty>
49729,UNKNOWN,1,,uint8_t,32,<empty>,,16563,1,CPPASTTypeId,,<empty>
49830,UNKNOWN,1,,void,4,<empty>,,16597,1,CPPASTTypeId,,<empty>
50452,UNKNOWN,1,,void,4,<empty>,,16727,1,CPPASTTypeId,,<empty>
50882,UNKNOWN,1,,ConvolutionParameter *,15,<empty>,,16858,1,CPPASTTypeId,,<empty>
50886,UNKNOWN,1,,const ConvolutionParameter &,19,<empty>,,16859,1,CPPASTTypeId,,<empty>
50902,UNKNOWN,1,,void,4,<empty>,,16867,1,CPPASTTypeId,,<empty>
51213,UNKNOWN,1,,char*,28,<empty>,,16948,1,CPPASTTypeId,,<empty>
51217,UNKNOWN,1,,char*,28,<empty>,,16949,1,CPPASTTypeId,,<empty>
51341,UNKNOWN,1,,CropParameter*,44,<empty>,,17006,1,CPPASTTypeId,,<empty>
51344,UNKNOWN,1,,void,4,<empty>,,17007,1,CPPASTTypeId,,<empty>
51370,UNKNOWN,1,,void,4,<empty>,,17019,1,CPPASTTypeId,,<empty>
51429,UNKNOWN,1,,uint8_t,47,<empty>,,17036,1,CPPASTTypeId,,<empty>
51468,UNKNOWN,1,,uint8_t,47,<empty>,,17045,1,CPPASTTypeId,,<empty>
51521,UNKNOWN,1,,uint8_t,32,<empty>,,17053,1,CPPASTTypeId,,<empty>
51622,UNKNOWN,1,,void,4,<empty>,,17087,1,CPPASTTypeId,,<empty>
51747,UNKNOWN,1,,void,4,<empty>,,17116,1,CPPASTTypeId,,<empty>
51838,UNKNOWN,1,,CropParameter *,15,<empty>,,17144,1,CPPASTTypeId,,<empty>
51842,UNKNOWN,1,,const CropParameter &,19,<empty>,,17145,1,CPPASTTypeId,,<empty>
51858,UNKNOWN,1,,void,4,<empty>,,17153,1,CPPASTTypeId,,<empty>
52172,UNKNOWN,1,,size_t,17,<empty>,,17254,1,CPPASTTypeId,,<empty>
52175,UNKNOWN,1,,char*,42,<empty>,,17254,1,CPPASTTypeId,,<empty>
52179,UNKNOWN,1,,char*,22,<empty>,,17255,1,CPPASTTypeId,,<empty>
52216,UNKNOWN,1,,char*,27,<empty>,,17268,1,CPPASTTypeId,,<empty>
52219,UNKNOWN,1,,size_t,54,<empty>,,17268,1,CPPASTTypeId,,<empty>
52222,UNKNOWN,1,,char*,22,<empty>,,17269,1,CPPASTTypeId,,<empty>
52226,UNKNOWN,1,,char*,62,<empty>,,17269,1,CPPASTTypeId,,<empty>
52231,UNKNOWN,1,,size_t,20,<empty>,,17270,1,CPPASTTypeId,,<empty>
52234,UNKNOWN,1,,char*,45,<empty>,,17270,1,CPPASTTypeId,,<empty>
52238,UNKNOWN,1,,char*,22,<empty>,,17271,1,CPPASTTypeId,,<empty>
52303,UNKNOWN,1,,DataParameter*,44,<empty>,,17290,1,CPPASTTypeId,,<empty>
52306,UNKNOWN,1,,void,4,<empty>,,17291,1,CPPASTTypeId,,<empty>
52332,UNKNOWN,1,,void,4,<empty>,,17303,1,CPPASTTypeId,,<empty>
52376,UNKNOWN,1,,size_t,43,<empty>,,17315,1,CPPASTTypeId,,<empty>
52379,UNKNOWN,1,,char*,26,<empty>,,17316,1,CPPASTTypeId,,<empty>
52383,UNKNOWN,1,,char*,26,<empty>,,17317,1,CPPASTTypeId,,<empty>
52449,UNKNOWN,1,,uint8_t,47,<empty>,,17336,1,CPPASTTypeId,,<empty>
52495,UNKNOWN,1,,uint8_t,47,<empty>,,17348,1,CPPASTTypeId,,<empty>
52528,UNKNOWN,1,,uint8_t,47,<empty>,,17357,1,CPPASTTypeId,,<empty>
52574,UNKNOWN,1,,uint8_t,47,<empty>,,17369,1,CPPASTTypeId,,<empty>
52613,UNKNOWN,1,,uint8_t,47,<empty>,,17378,1,CPPASTTypeId,,<empty>
52652,UNKNOWN,1,,uint8_t,47,<empty>,,17387,1,CPPASTTypeId,,<empty>
52691,UNKNOWN,1,,uint8_t,47,<empty>,,17396,1,CPPASTTypeId,,<empty>
52730,UNKNOWN,1,,uint8_t,47,<empty>,,17405,1,CPPASTTypeId,,<empty>
52764,UNKNOWN,1,,::opencv_caffe::DataParameter_DB,47,<empty>,,17409,1,CPPASTTypeId,,<empty>
52787,UNKNOWN,1,,uint8_t,47,<empty>,,17418,1,CPPASTTypeId,,<empty>
52826,UNKNOWN,1,,uint8_t,47,<empty>,,17427,1,CPPASTTypeId,,<empty>
52932,UNKNOWN,1,,void,4,<empty>,,17462,1,CPPASTTypeId,,<empty>
52960,UNKNOWN,1,,int,52,<empty>,,17468,1,CPPASTTypeId,,<empty>
53037,UNKNOWN,1,,int,55,<empty>,,17484,1,CPPASTTypeId,,<empty>
53308,UNKNOWN,1,,void,4,<empty>,,17548,1,CPPASTTypeId,,<empty>
53527,UNKNOWN,1,,DataParameter *,15,<empty>,,17621,1,CPPASTTypeId,,<empty>
53531,UNKNOWN,1,,const DataParameter &,19,<empty>,,17622,1,CPPASTTypeId,,<empty>
53547,UNKNOWN,1,,void,4,<empty>,,17630,1,CPPASTTypeId,,<empty>
53809,UNKNOWN,1,,char*,28,<empty>,,17703,1,CPPASTTypeId,,<empty>
53813,UNKNOWN,1,,char*,28,<empty>,,17704,1,CPPASTTypeId,,<empty>
53922,UNKNOWN,1,,size_t,17,<empty>,,17745,1,CPPASTTypeId,,<empty>
53925,UNKNOWN,1,,char*,42,<empty>,,17745,1,CPPASTTypeId,,<empty>
53929,UNKNOWN,1,,char*,22,<empty>,,17746,1,CPPASTTypeId,,<empty>
53979,UNKNOWN,1,,NonMaximumSuppressionParameter*,61,<empty>,,17768,1,CPPASTTypeId,,<empty>
53982,UNKNOWN,1,,void,4,<empty>,,17769,1,CPPASTTypeId,,<empty>
54008,UNKNOWN,1,,void,4,<empty>,,17781,1,CPPASTTypeId,,<empty>
54079,UNKNOWN,1,,uint8_t,47,<empty>,,17802,1,CPPASTTypeId,,<empty>
54112,UNKNOWN,1,,uint8_t,47,<empty>,,17811,1,CPPASTTypeId,,<empty>
54151,UNKNOWN,1,,uint8_t,47,<empty>,,17820,1,CPPASTTypeId,,<empty>
54251,UNKNOWN,1,,void,4,<empty>,,17855,1,CPPASTTypeId,,<empty>
54389,UNKNOWN,1,,void,4,<empty>,,17890,1,CPPASTTypeId,,<empty>
54473,UNKNOWN,1,,NonMaximumSuppressionParameter *,15,<empty>,,17921,1,CPPASTTypeId,,<empty>
54477,UNKNOWN,1,,const NonMaximumSuppressionParameter &,19,<empty>,,17922,1,CPPASTTypeId,,<empty>
54493,UNKNOWN,1,,void,4,<empty>,,17930,1,CPPASTTypeId,,<empty>
55020,UNKNOWN,1,,SaveOutputParameter*,50,<empty>,,18097,1,CPPASTTypeId,,<empty>
55023,UNKNOWN,1,,void,4,<empty>,,18098,1,CPPASTTypeId,,<empty>
55049,UNKNOWN,1,,void,4,<empty>,,18110,1,CPPASTTypeId,,<empty>
55159,UNKNOWN,1,,uint8_t,47,<empty>,,18144,1,CPPASTTypeId,,<empty>
55205,UNKNOWN,1,,uint8_t,47,<empty>,,18156,1,CPPASTTypeId,,<empty>
55251,UNKNOWN,1,,uint8_t,47,<empty>,,18168,1,CPPASTTypeId,,<empty>
55297,UNKNOWN,1,,uint8_t,47,<empty>,,18180,1,CPPASTTypeId,,<empty>
55343,UNKNOWN,1,,uint8_t,47,<empty>,,18192,1,CPPASTTypeId,,<empty>
55389,UNKNOWN,1,,uint8_t,47,<empty>,,18204,1,CPPASTTypeId,,<empty>
55495,UNKNOWN,1,,void,4,<empty>,,18239,1,CPPASTTypeId,,<empty>
55523,UNKNOWN,1,,int,62,<empty>,,18245,1,CPPASTTypeId,,<empty>
55572,UNKNOWN,1,,int,64,<empty>,,18255,1,CPPASTTypeId,,<empty>
55621,UNKNOWN,1,,int,59,<empty>,,18265,1,CPPASTTypeId,,<empty>
55670,UNKNOWN,1,,int,60,<empty>,,18275,1,CPPASTTypeId,,<empty>
55719,UNKNOWN,1,,int,60,<empty>,,18285,1,CPPASTTypeId,,<empty>
55822,UNKNOWN,1,,void,4,<empty>,,18312,1,CPPASTTypeId,,<empty>
55991,UNKNOWN,1,,SaveOutputParameter *,15,<empty>,,18368,1,CPPASTTypeId,,<empty>
55995,UNKNOWN,1,,const SaveOutputParameter &,19,<empty>,,18369,1,CPPASTTypeId,,<empty>
56011,UNKNOWN,1,,void,4,<empty>,,18377,1,CPPASTTypeId,,<empty>
56358,UNKNOWN,1,,size_t,17,<empty>,,18482,1,CPPASTTypeId,,<empty>
56361,UNKNOWN,1,,char*,42,<empty>,,18482,1,CPPASTTypeId,,<empty>
56365,UNKNOWN,1,,char*,22,<empty>,,18483,1,CPPASTTypeId,,<empty>
56412,UNKNOWN,1,,DropoutParameter*,47,<empty>,,18504,1,CPPASTTypeId,,<empty>
56415,UNKNOWN,1,,void,4,<empty>,,18505,1,CPPASTTypeId,,<empty>
56441,UNKNOWN,1,,void,4,<empty>,,18517,1,CPPASTTypeId,,<empty>
56509,UNKNOWN,1,,uint8_t,47,<empty>,,18537,1,CPPASTTypeId,,<empty>
56542,UNKNOWN,1,,uint8_t,47,<empty>,,18546,1,CPPASTTypeId,,<empty>
56648,UNKNOWN,1,,void,4,<empty>,,18581,1,CPPASTTypeId,,<empty>
56758,UNKNOWN,1,,void,4,<empty>,,18610,1,CPPASTTypeId,,<empty>
56823,UNKNOWN,1,,DropoutParameter *,15,<empty>,,18636,1,CPPASTTypeId,,<empty>
56827,UNKNOWN,1,,const DropoutParameter &,19,<empty>,,18637,1,CPPASTTypeId,,<empty>
56843,UNKNOWN,1,,void,4,<empty>,,18645,1,CPPASTTypeId,,<empty>
57030,UNKNOWN,1,,DummyDataParameter*,49,<empty>,,18733,1,CPPASTTypeId,,<empty>
57033,UNKNOWN,1,,void,4,<empty>,,18734,1,CPPASTTypeId,,<empty>
57059,UNKNOWN,1,,void,4,<empty>,,18746,1,CPPASTTypeId,,<empty>
57127,UNKNOWN,1,,uint8_t,47,<empty>,,18765,1,CPPASTTypeId,,<empty>
57184,UNKNOWN,1,,uint8_t,47,<empty>,,18778,1,CPPASTTypeId,,<empty>
57237,UNKNOWN,1,,uint8_t,32,<empty>,,18786,1,CPPASTTypeId,,<empty>
57271,UNKNOWN,1,,uint8_t,47,<empty>,,18794,1,CPPASTTypeId,,<empty>
57324,UNKNOWN,1,,uint8_t,32,<empty>,,18802,1,CPPASTTypeId,,<empty>
57358,UNKNOWN,1,,uint8_t,47,<empty>,,18810,1,CPPASTTypeId,,<empty>
57411,UNKNOWN,1,,uint8_t,32,<empty>,,18818,1,CPPASTTypeId,,<empty>
57445,UNKNOWN,1,,uint8_t,47,<empty>,,18826,1,CPPASTTypeId,,<empty>
57498,UNKNOWN,1,,uint8_t,32,<empty>,,18834,1,CPPASTTypeId,,<empty>
57532,UNKNOWN,1,,uint8_t,47,<empty>,,18842,1,CPPASTTypeId,,<empty>
57651,UNKNOWN,1,,void,4,<empty>,,18880,1,CPPASTTypeId,,<empty>
57663,UNKNOWN,1,,unsigned int,23,<empty>,,18884,1,CPPASTTypeId,,<empty>
57881,UNKNOWN,1,,unsigned int,23,<empty>,,18916,1,CPPASTTypeId,,<empty>
57964,UNKNOWN,1,,void,4,<empty>,,18936,1,CPPASTTypeId,,<empty>
58177,UNKNOWN,1,,DummyDataParameter *,15,<empty>,,18999,1,CPPASTTypeId,,<empty>
58181,UNKNOWN,1,,const DummyDataParameter &,19,<empty>,,19000,1,CPPASTTypeId,,<empty>
58197,UNKNOWN,1,,void,4,<empty>,,19008,1,CPPASTTypeId,,<empty>
58417,UNKNOWN,1,,size_t,17,<empty>,,19076,1,CPPASTTypeId,,<empty>
58420,UNKNOWN,1,,char*,42,<empty>,,19076,1,CPPASTTypeId,,<empty>
58424,UNKNOWN,1,,char*,22,<empty>,,19077,1,CPPASTTypeId,,<empty>
58471,UNKNOWN,1,,EltwiseParameter*,47,<empty>,,19098,1,CPPASTTypeId,,<empty>
58474,UNKNOWN,1,,void,4,<empty>,,19099,1,CPPASTTypeId,,<empty>
58500,UNKNOWN,1,,void,4,<empty>,,19111,1,CPPASTTypeId,,<empty>
58572,UNKNOWN,1,,uint8_t,47,<empty>,,19132,1,CPPASTTypeId,,<empty>
58606,UNKNOWN,1,,::opencv_caffe::EltwiseParameter_EltwiseOp,49,<empty>,,19136,1,CPPASTTypeId,,<empty>
58629,UNKNOWN,1,,uint8_t,47,<empty>,,19145,1,CPPASTTypeId,,<empty>
58676,UNKNOWN,1,,uint8_t,32,<empty>,,19153,1,CPPASTTypeId,,<empty>
58710,UNKNOWN,1,,uint8_t,47,<empty>,,19161,1,CPPASTTypeId,,<empty>
58816,UNKNOWN,1,,void,4,<empty>,,19196,1,CPPASTTypeId,,<empty>
58969,UNKNOWN,1,,void,4,<empty>,,19232,1,CPPASTTypeId,,<empty>
58976,UNKNOWN,1,,unsigned int,38,<empty>,,19236,1,CPPASTTypeId,,<empty>
59078,UNKNOWN,1,,EltwiseParameter *,15,<empty>,,19268,1,CPPASTTypeId,,<empty>
59082,UNKNOWN,1,,const EltwiseParameter &,19,<empty>,,19269,1,CPPASTTypeId,,<empty>
59098,UNKNOWN,1,,void,4,<empty>,,19277,1,CPPASTTypeId,,<empty>
59320,UNKNOWN,1,,ELUParameter*,43,<empty>,,19362,1,CPPASTTypeId,,<empty>
59323,UNKNOWN,1,,void,4,<empty>,,19363,1,CPPASTTypeId,,<empty>
59349,UNKNOWN,1,,void,4,<empty>,,19375,1,CPPASTTypeId,,<empty>
59404,UNKNOWN,1,,uint8_t,47,<empty>,,19391,1,CPPASTTypeId,,<empty>
59504,UNKNOWN,1,,void,4,<empty>,,19426,1,CPPASTTypeId,,<empty>
59586,UNKNOWN,1,,void,4,<empty>,,19449,1,CPPASTTypeId,,<empty>
59636,UNKNOWN,1,,ELUParameter *,15,<empty>,,19468,1,CPPASTTypeId,,<empty>
59640,UNKNOWN,1,,const ELUParameter &,19,<empty>,,19469,1,CPPASTTypeId,,<empty>
59656,UNKNOWN,1,,void,4,<empty>,,19477,1,CPPASTTypeId,,<empty>
59912,UNKNOWN,1,,size_t,17,<empty>,,19565,1,CPPASTTypeId,,<empty>
59915,UNKNOWN,1,,char*,42,<empty>,,19565,1,CPPASTTypeId,,<empty>
59919,UNKNOWN,1,,char*,22,<empty>,,19566,1,CPPASTTypeId,,<empty>
59934,UNKNOWN,1,,char*,27,<empty>,,19571,1,CPPASTTypeId,,<empty>
59937,UNKNOWN,1,,size_t,54,<empty>,,19571,1,CPPASTTypeId,,<empty>
59940,UNKNOWN,1,,char*,22,<empty>,,19572,1,CPPASTTypeId,,<empty>
59944,UNKNOWN,1,,char*,65,<empty>,,19572,1,CPPASTTypeId,,<empty>
59949,UNKNOWN,1,,size_t,20,<empty>,,19573,1,CPPASTTypeId,,<empty>
59952,UNKNOWN,1,,char*,45,<empty>,,19573,1,CPPASTTypeId,,<empty>
59956,UNKNOWN,1,,char*,22,<empty>,,19574,1,CPPASTTypeId,,<empty>
60010,UNKNOWN,1,,EmbedParameter*,45,<empty>,,19592,1,CPPASTTypeId,,<empty>
60013,UNKNOWN,1,,void,4,<empty>,,19593,1,CPPASTTypeId,,<empty>
60039,UNKNOWN,1,,void,4,<empty>,,19605,1,CPPASTTypeId,,<empty>
60091,UNKNOWN,1,,size_t,43,<empty>,,19619,1,CPPASTTypeId,,<empty>
60094,UNKNOWN,1,,char*,26,<empty>,,19620,1,CPPASTTypeId,,<empty>
60098,UNKNOWN,1,,char*,26,<empty>,,19621,1,CPPASTTypeId,,<empty>
60156,UNKNOWN,1,,uint8_t,47,<empty>,,19637,1,CPPASTTypeId,,<empty>
60195,UNKNOWN,1,,uint8_t,47,<empty>,,19646,1,CPPASTTypeId,,<empty>
60234,UNKNOWN,1,,uint8_t,47,<empty>,,19655,1,CPPASTTypeId,,<empty>
60273,UNKNOWN,1,,uint8_t,47,<empty>,,19664,1,CPPASTTypeId,,<empty>
60304,UNKNOWN,1,,uint8_t,47,<empty>,,19672,1,CPPASTTypeId,,<empty>
60402,UNKNOWN,1,,void,4,<empty>,,19706,1,CPPASTTypeId,,<empty>
60600,UNKNOWN,1,,void,4,<empty>,,19757,1,CPPASTTypeId,,<empty>
60731,UNKNOWN,1,,EmbedParameter *,15,<empty>,,19802,1,CPPASTTypeId,,<empty>
60735,UNKNOWN,1,,const EmbedParameter &,19,<empty>,,19803,1,CPPASTTypeId,,<empty>
60751,UNKNOWN,1,,void,4,<empty>,,19811,1,CPPASTTypeId,,<empty>
60902,UNKNOWN,1,,char*,28,<empty>,,19854,1,CPPASTTypeId,,<empty>
60906,UNKNOWN,1,,char*,28,<empty>,,19855,1,CPPASTTypeId,,<empty>
61010,UNKNOWN,1,,size_t,17,<empty>,,19895,1,CPPASTTypeId,,<empty>
61013,UNKNOWN,1,,char*,42,<empty>,,19895,1,CPPASTTypeId,,<empty>
61017,UNKNOWN,1,,char*,22,<empty>,,19896,1,CPPASTTypeId,,<empty>
61068,UNKNOWN,1,,ExpParameter*,43,<empty>,,19918,1,CPPASTTypeId,,<empty>
61071,UNKNOWN,1,,void,4,<empty>,,19919,1,CPPASTTypeId,,<empty>
61097,UNKNOWN,1,,void,4,<empty>,,19931,1,CPPASTTypeId,,<empty>
61169,UNKNOWN,1,,uint8_t,47,<empty>,,19952,1,CPPASTTypeId,,<empty>
61202,UNKNOWN,1,,uint8_t,47,<empty>,,19961,1,CPPASTTypeId,,<empty>
61235,UNKNOWN,1,,uint8_t,47,<empty>,,19970,1,CPPASTTypeId,,<empty>
61335,UNKNOWN,1,,void,4,<empty>,,20005,1,CPPASTTypeId,,<empty>
61473,UNKNOWN,1,,void,4,<empty>,,20040,1,CPPASTTypeId,,<empty>
61548,UNKNOWN,1,,ExpParameter *,15,<empty>,,20071,1,CPPASTTypeId,,<empty>
61552,UNKNOWN,1,,const ExpParameter &,19,<empty>,,20072,1,CPPASTTypeId,,<empty>
61568,UNKNOWN,1,,void,4,<empty>,,20080,1,CPPASTTypeId,,<empty>
61769,UNKNOWN,1,,size_t,17,<empty>,,20151,1,CPPASTTypeId,,<empty>
61772,UNKNOWN,1,,char*,42,<empty>,,20151,1,CPPASTTypeId,,<empty>
61776,UNKNOWN,1,,char*,22,<empty>,,20152,1,CPPASTTypeId,,<empty>
61824,UNKNOWN,1,,FlattenParameter*,47,<empty>,,20173,1,CPPASTTypeId,,<empty>
61827,UNKNOWN,1,,void,4,<empty>,,20174,1,CPPASTTypeId,,<empty>
61853,UNKNOWN,1,,void,4,<empty>,,20186,1,CPPASTTypeId,,<empty>
61922,UNKNOWN,1,,uint8_t,47,<empty>,,20206,1,CPPASTTypeId,,<empty>
61961,UNKNOWN,1,,uint8_t,47,<empty>,,20215,1,CPPASTTypeId,,<empty>
62067,UNKNOWN,1,,void,4,<empty>,,20250,1,CPPASTTypeId,,<empty>
62177,UNKNOWN,1,,void,4,<empty>,,20279,1,CPPASTTypeId,,<empty>
62260,UNKNOWN,1,,FlattenParameter *,15,<empty>,,20305,1,CPPASTTypeId,,<empty>
62264,UNKNOWN,1,,const FlattenParameter &,19,<empty>,,20306,1,CPPASTTypeId,,<empty>
62280,UNKNOWN,1,,void,4,<empty>,,20314,1,CPPASTTypeId,,<empty>
62505,UNKNOWN,1,,size_t,17,<empty>,,20392,1,CPPASTTypeId,,<empty>
62508,UNKNOWN,1,,char*,42,<empty>,,20392,1,CPPASTTypeId,,<empty>
62512,UNKNOWN,1,,char*,22,<empty>,,20393,1,CPPASTTypeId,,<empty>
62538,UNKNOWN,1,,char*,27,<empty>,,20402,1,CPPASTTypeId,,<empty>
62541,UNKNOWN,1,,size_t,54,<empty>,,20402,1,CPPASTTypeId,,<empty>
62544,UNKNOWN,1,,char*,22,<empty>,,20403,1,CPPASTTypeId,,<empty>
62548,UNKNOWN,1,,char*,62,<empty>,,20403,1,CPPASTTypeId,,<empty>
62553,UNKNOWN,1,,size_t,20,<empty>,,20404,1,CPPASTTypeId,,<empty>
62556,UNKNOWN,1,,char*,45,<empty>,,20404,1,CPPASTTypeId,,<empty>
62560,UNKNOWN,1,,char*,22,<empty>,,20405,1,CPPASTTypeId,,<empty>
62608,UNKNOWN,1,,HDF5DataParameter*,48,<empty>,,20421,1,CPPASTTypeId,,<empty>
62611,UNKNOWN,1,,void,4,<empty>,,20422,1,CPPASTTypeId,,<empty>
62637,UNKNOWN,1,,void,4,<empty>,,20434,1,CPPASTTypeId,,<empty>
62667,UNKNOWN,1,,size_t,43,<empty>,,20441,1,CPPASTTypeId,,<empty>
62670,UNKNOWN,1,,char*,26,<empty>,,20442,1,CPPASTTypeId,,<empty>
62674,UNKNOWN,1,,char*,26,<empty>,,20443,1,CPPASTTypeId,,<empty>
62729,UNKNOWN,1,,uint8_t,47,<empty>,,20458,1,CPPASTTypeId,,<empty>
62775,UNKNOWN,1,,uint8_t,47,<empty>,,20470,1,CPPASTTypeId,,<empty>
62814,UNKNOWN,1,,uint8_t,47,<empty>,,20479,1,CPPASTTypeId,,<empty>
62920,UNKNOWN,1,,void,4,<empty>,,20514,1,CPPASTTypeId,,<empty>
62948,UNKNOWN,1,,int,52,<empty>,,20520,1,CPPASTTypeId,,<empty>
63079,UNKNOWN,1,,void,4,<empty>,,20553,1,CPPASTTypeId,,<empty>
63174,UNKNOWN,1,,HDF5DataParameter *,15,<empty>,,20586,1,CPPASTTypeId,,<empty>
63178,UNKNOWN,1,,const HDF5DataParameter &,19,<empty>,,20587,1,CPPASTTypeId,,<empty>
63194,UNKNOWN,1,,void,4,<empty>,,20595,1,CPPASTTypeId,,<empty>
63353,UNKNOWN,1,,char*,28,<empty>,,20639,1,CPPASTTypeId,,<empty>
63357,UNKNOWN,1,,char*,28,<empty>,,20640,1,CPPASTTypeId,,<empty>
63508,UNKNOWN,1,,HDF5OutputParameter*,50,<empty>,,20703,1,CPPASTTypeId,,<empty>
63511,UNKNOWN,1,,void,4,<empty>,,20704,1,CPPASTTypeId,,<empty>
63537,UNKNOWN,1,,void,4,<empty>,,20716,1,CPPASTTypeId,,<empty>
63603,UNKNOWN,1,,uint8_t,47,<empty>,,20735,1,CPPASTTypeId,,<empty>
63716,UNKNOWN,1,,void,4,<empty>,,20773,1,CPPASTTypeId,,<empty>
63744,UNKNOWN,1,,int,55,<empty>,,20779,1,CPPASTTypeId,,<empty>
63819,UNKNOWN,1,,void,4,<empty>,,20800,1,CPPASTTypeId,,<empty>
63880,UNKNOWN,1,,HDF5OutputParameter *,15,<empty>,,20821,1,CPPASTTypeId,,<empty>
63884,UNKNOWN,1,,const HDF5OutputParameter &,19,<empty>,,20822,1,CPPASTTypeId,,<empty>
63900,UNKNOWN,1,,void,4,<empty>,,20830,1,CPPASTTypeId,,<empty>
64105,UNKNOWN,1,,HingeLossParameter*,49,<empty>,,20911,1,CPPASTTypeId,,<empty>
64108,UNKNOWN,1,,void,4,<empty>,,20912,1,CPPASTTypeId,,<empty>
64134,UNKNOWN,1,,void,4,<empty>,,20924,1,CPPASTTypeId,,<empty>
64189,UNKNOWN,1,,uint8_t,47,<empty>,,20940,1,CPPASTTypeId,,<empty>
64223,UNKNOWN,1,,::opencv_caffe::HingeLossParameter_Norm,44,<empty>,,20944,1,CPPASTTypeId,,<empty>
64313,UNKNOWN,1,,void,4,<empty>,,20979,1,CPPASTTypeId,,<empty>
64395,UNKNOWN,1,,void,4,<empty>,,21003,1,CPPASTTypeId,,<empty>
64456,UNKNOWN,1,,HingeLossParameter *,15,<empty>,,21023,1,CPPASTTypeId,,<empty>
64460,UNKNOWN,1,,const HingeLossParameter &,19,<empty>,,21024,1,CPPASTTypeId,,<empty>
64476,UNKNOWN,1,,void,4,<empty>,,21032,1,CPPASTTypeId,,<empty>
64825,UNKNOWN,1,,size_t,17,<empty>,,21145,1,CPPASTTypeId,,<empty>
64828,UNKNOWN,1,,char*,42,<empty>,,21145,1,CPPASTTypeId,,<empty>
64832,UNKNOWN,1,,char*,22,<empty>,,21146,1,CPPASTTypeId,,<empty>
64880,UNKNOWN,1,,char*,27,<empty>,,21163,1,CPPASTTypeId,,<empty>
64883,UNKNOWN,1,,size_t,54,<empty>,,21163,1,CPPASTTypeId,,<empty>
64886,UNKNOWN,1,,char*,22,<empty>,,21164,1,CPPASTTypeId,,<empty>
64890,UNKNOWN,1,,char*,61,<empty>,,21164,1,CPPASTTypeId,,<empty>
64895,UNKNOWN,1,,size_t,20,<empty>,,21165,1,CPPASTTypeId,,<empty>
64898,UNKNOWN,1,,char*,45,<empty>,,21165,1,CPPASTTypeId,,<empty>
64902,UNKNOWN,1,,char*,22,<empty>,,21166,1,CPPASTTypeId,,<empty>
64981,UNKNOWN,1,,ImageDataParameter*,49,<empty>,,21187,1,CPPASTTypeId,,<empty>
64984,UNKNOWN,1,,void,4,<empty>,,21188,1,CPPASTTypeId,,<empty>
65010,UNKNOWN,1,,void,4,<empty>,,21200,1,CPPASTTypeId,,<empty>
65063,UNKNOWN,1,,size_t,42,<empty>,,21215,1,CPPASTTypeId,,<empty>
65066,UNKNOWN,1,,char*,26,<empty>,,21216,1,CPPASTTypeId,,<empty>
65070,UNKNOWN,1,,char*,26,<empty>,,21217,1,CPPASTTypeId,,<empty>
65142,UNKNOWN,1,,uint8_t,47,<empty>,,21238,1,CPPASTTypeId,,<empty>
65188,UNKNOWN,1,,uint8_t,47,<empty>,,21250,1,CPPASTTypeId,,<empty>
65221,UNKNOWN,1,,uint8_t,47,<empty>,,21259,1,CPPASTTypeId,,<empty>
65267,UNKNOWN,1,,uint8_t,47,<empty>,,21271,1,CPPASTTypeId,,<empty>
65306,UNKNOWN,1,,uint8_t,47,<empty>,,21280,1,CPPASTTypeId,,<empty>
65345,UNKNOWN,1,,uint8_t,47,<empty>,,21289,1,CPPASTTypeId,,<empty>
65384,UNKNOWN,1,,uint8_t,47,<empty>,,21298,1,CPPASTTypeId,,<empty>
65423,UNKNOWN,1,,uint8_t,47,<empty>,,21307,1,CPPASTTypeId,,<empty>
65462,UNKNOWN,1,,uint8_t,47,<empty>,,21316,1,CPPASTTypeId,,<empty>
65501,UNKNOWN,1,,uint8_t,47,<empty>,,21325,1,CPPASTTypeId,,<empty>
65540,UNKNOWN,1,,uint8_t,47,<empty>,,21334,1,CPPASTTypeId,,<empty>
65579,UNKNOWN,1,,uint8_t,47,<empty>,,21343,1,CPPASTTypeId,,<empty>
65692,UNKNOWN,1,,void,4,<empty>,,21381,1,CPPASTTypeId,,<empty>
65720,UNKNOWN,1,,int,52,<empty>,,21387,1,CPPASTTypeId,,<empty>
65797,UNKNOWN,1,,int,55,<empty>,,21403,1,CPPASTTypeId,,<empty>
66070,UNKNOWN,1,,int,57,<empty>,,21461,1,CPPASTTypeId,,<empty>
66145,UNKNOWN,1,,void,4,<empty>,,21482,1,CPPASTTypeId,,<empty>
66393,UNKNOWN,1,,ImageDataParameter *,15,<empty>,,21566,1,CPPASTTypeId,,<empty>
66397,UNKNOWN,1,,const ImageDataParameter &,19,<empty>,,21567,1,CPPASTTypeId,,<empty>
66413,UNKNOWN,1,,void,4,<empty>,,21575,1,CPPASTTypeId,,<empty>
66718,UNKNOWN,1,,char*,28,<empty>,,21659,1,CPPASTTypeId,,<empty>
66722,UNKNOWN,1,,char*,28,<empty>,,21660,1,CPPASTTypeId,,<empty>
66888,UNKNOWN,1,,InfogainLossParameter*,52,<empty>,,21726,1,CPPASTTypeId,,<empty>
66891,UNKNOWN,1,,void,4,<empty>,,21727,1,CPPASTTypeId,,<empty>
66917,UNKNOWN,1,,void,4,<empty>,,21739,1,CPPASTTypeId,,<empty>
66983,UNKNOWN,1,,uint8_t,47,<empty>,,21758,1,CPPASTTypeId,,<empty>
67096,UNKNOWN,1,,void,4,<empty>,,21796,1,CPPASTTypeId,,<empty>
67124,UNKNOWN,1,,int,52,<empty>,,21802,1,CPPASTTypeId,,<empty>
67199,UNKNOWN,1,,void,4,<empty>,,21823,1,CPPASTTypeId,,<empty>
67260,UNKNOWN,1,,InfogainLossParameter *,15,<empty>,,21844,1,CPPASTTypeId,,<empty>
67264,UNKNOWN,1,,const InfogainLossParameter &,19,<empty>,,21845,1,CPPASTTypeId,,<empty>
67280,UNKNOWN,1,,void,4,<empty>,,21853,1,CPPASTTypeId,,<empty>
67576,UNKNOWN,1,,size_t,17,<empty>,,21950,1,CPPASTTypeId,,<empty>
67579,UNKNOWN,1,,char*,42,<empty>,,21950,1,CPPASTTypeId,,<empty>
67583,UNKNOWN,1,,char*,22,<empty>,,21951,1,CPPASTTypeId,,<empty>
67598,UNKNOWN,1,,char*,27,<empty>,,21956,1,CPPASTTypeId,,<empty>
67601,UNKNOWN,1,,size_t,54,<empty>,,21956,1,CPPASTTypeId,,<empty>
67604,UNKNOWN,1,,char*,22,<empty>,,21957,1,CPPASTTypeId,,<empty>
67608,UNKNOWN,1,,char*,65,<empty>,,21957,1,CPPASTTypeId,,<empty>
67613,UNKNOWN,1,,size_t,20,<empty>,,21958,1,CPPASTTypeId,,<empty>
67616,UNKNOWN,1,,char*,45,<empty>,,21958,1,CPPASTTypeId,,<empty>
67620,UNKNOWN,1,,char*,22,<empty>,,21959,1,CPPASTTypeId,,<empty>
67677,UNKNOWN,1,,InnerProductParameter*,52,<empty>,,21978,1,CPPASTTypeId,,<empty>
67680,UNKNOWN,1,,void,4,<empty>,,21979,1,CPPASTTypeId,,<empty>
67706,UNKNOWN,1,,void,4,<empty>,,21991,1,CPPASTTypeId,,<empty>
67758,UNKNOWN,1,,size_t,43,<empty>,,22005,1,CPPASTTypeId,,<empty>
67761,UNKNOWN,1,,char*,26,<empty>,,22006,1,CPPASTTypeId,,<empty>
67765,UNKNOWN,1,,char*,26,<empty>,,22007,1,CPPASTTypeId,,<empty>
67826,UNKNOWN,1,,uint8_t,47,<empty>,,22024,1,CPPASTTypeId,,<empty>
67865,UNKNOWN,1,,uint8_t,47,<empty>,,22033,1,CPPASTTypeId,,<empty>
67904,UNKNOWN,1,,uint8_t,47,<empty>,,22042,1,CPPASTTypeId,,<empty>
67935,UNKNOWN,1,,uint8_t,47,<empty>,,22050,1,CPPASTTypeId,,<empty>
67966,UNKNOWN,1,,uint8_t,47,<empty>,,22058,1,CPPASTTypeId,,<empty>
68005,UNKNOWN,1,,uint8_t,47,<empty>,,22067,1,CPPASTTypeId,,<empty>
68111,UNKNOWN,1,,void,4,<empty>,,22102,1,CPPASTTypeId,,<empty>
68337,UNKNOWN,1,,void,4,<empty>,,22159,1,CPPASTTypeId,,<empty>
68478,UNKNOWN,1,,InnerProductParameter *,15,<empty>,,22209,1,CPPASTTypeId,,<empty>
68482,UNKNOWN,1,,const InnerProductParameter &,19,<empty>,,22210,1,CPPASTTypeId,,<empty>
68498,UNKNOWN,1,,void,4,<empty>,,22218,1,CPPASTTypeId,,<empty>
68659,UNKNOWN,1,,char*,28,<empty>,,22264,1,CPPASTTypeId,,<empty>
68663,UNKNOWN,1,,char*,28,<empty>,,22265,1,CPPASTTypeId,,<empty>
68762,UNKNOWN,1,,InputParameter*,45,<empty>,,22314,1,CPPASTTypeId,,<empty>
68765,UNKNOWN,1,,void,4,<empty>,,22315,1,CPPASTTypeId,,<empty>
68791,UNKNOWN,1,,void,4,<empty>,,22327,1,CPPASTTypeId,,<empty>
68839,UNKNOWN,1,,uint8_t,47,<empty>,,22341,1,CPPASTTypeId,,<empty>
68958,UNKNOWN,1,,void,4,<empty>,,22379,1,CPPASTTypeId,,<empty>
68970,UNKNOWN,1,,unsigned int,23,<empty>,,22383,1,CPPASTTypeId,,<empty>
69053,UNKNOWN,1,,void,4,<empty>,,22403,1,CPPASTTypeId,,<empty>
69113,UNKNOWN,1,,InputParameter *,15,<empty>,,22423,1,CPPASTTypeId,,<empty>
69117,UNKNOWN,1,,const InputParameter &,19,<empty>,,22424,1,CPPASTTypeId,,<empty>
69133,UNKNOWN,1,,void,4,<empty>,,22432,1,CPPASTTypeId,,<empty>
69289,UNKNOWN,1,,size_t,17,<empty>,,22491,1,CPPASTTypeId,,<empty>
69292,UNKNOWN,1,,char*,42,<empty>,,22491,1,CPPASTTypeId,,<empty>
69296,UNKNOWN,1,,char*,22,<empty>,,22492,1,CPPASTTypeId,,<empty>
69347,UNKNOWN,1,,LogParameter*,43,<empty>,,22514,1,CPPASTTypeId,,<empty>
69350,UNKNOWN,1,,void,4,<empty>,,22515,1,CPPASTTypeId,,<empty>
69376,UNKNOWN,1,,void,4,<empty>,,22527,1,CPPASTTypeId,,<empty>
69448,UNKNOWN,1,,uint8_t,47,<empty>,,22548,1,CPPASTTypeId,,<empty>
69481,UNKNOWN,1,,uint8_t,47,<empty>,,22557,1,CPPASTTypeId,,<empty>
69514,UNKNOWN,1,,uint8_t,47,<empty>,,22566,1,CPPASTTypeId,,<empty>
69614,UNKNOWN,1,,void,4,<empty>,,22601,1,CPPASTTypeId,,<empty>
69752,UNKNOWN,1,,void,4,<empty>,,22636,1,CPPASTTypeId,,<empty>
69827,UNKNOWN,1,,LogParameter *,15,<empty>,,22667,1,CPPASTTypeId,,<empty>
69831,UNKNOWN,1,,const LogParameter &,19,<empty>,,22668,1,CPPASTTypeId,,<empty>
69847,UNKNOWN,1,,void,4,<empty>,,22676,1,CPPASTTypeId,,<empty>
70092,UNKNOWN,1,,size_t,17,<empty>,,22759,1,CPPASTTypeId,,<empty>
70095,UNKNOWN,1,,char*,42,<empty>,,22759,1,CPPASTTypeId,,<empty>
70099,UNKNOWN,1,,char*,22,<empty>,,22760,1,CPPASTTypeId,,<empty>
70114,UNKNOWN,1,,char*,27,<empty>,,22765,1,CPPASTTypeId,,<empty>
70117,UNKNOWN,1,,size_t,54,<empty>,,22765,1,CPPASTTypeId,,<empty>
70120,UNKNOWN,1,,char*,22,<empty>,,22766,1,CPPASTTypeId,,<empty>
70124,UNKNOWN,1,,char*,63,<empty>,,22766,1,CPPASTTypeId,,<empty>
70129,UNKNOWN,1,,size_t,20,<empty>,,22767,1,CPPASTTypeId,,<empty>
70132,UNKNOWN,1,,char*,45,<empty>,,22767,1,CPPASTTypeId,,<empty>
70136,UNKNOWN,1,,char*,22,<empty>,,22768,1,CPPASTTypeId,,<empty>
70185,UNKNOWN,1,,LRNParameter*,43,<empty>,,22787,1,CPPASTTypeId,,<empty>
70188,UNKNOWN,1,,void,4,<empty>,,22788,1,CPPASTTypeId,,<empty>
70214,UNKNOWN,1,,void,4,<empty>,,22800,1,CPPASTTypeId,,<empty>
70235,UNKNOWN,1,,size_t,44,<empty>,,22804,1,CPPASTTypeId,,<empty>
70238,UNKNOWN,1,,char*,26,<empty>,,22805,1,CPPASTTypeId,,<empty>
70242,UNKNOWN,1,,char*,26,<empty>,,22806,1,CPPASTTypeId,,<empty>
70309,UNKNOWN,1,,uint8_t,47,<empty>,,22825,1,CPPASTTypeId,,<empty>
70348,UNKNOWN,1,,uint8_t,47,<empty>,,22834,1,CPPASTTypeId,,<empty>
70381,UNKNOWN,1,,uint8_t,47,<empty>,,22843,1,CPPASTTypeId,,<empty>
70414,UNKNOWN,1,,uint8_t,47,<empty>,,22852,1,CPPASTTypeId,,<empty>
70448,UNKNOWN,1,,::opencv_caffe::LRNParameter_NormRegion,51,<empty>,,22856,1,CPPASTTypeId,,<empty>
70471,UNKNOWN,1,,uint8_t,47,<empty>,,22865,1,CPPASTTypeId,,<empty>
70504,UNKNOWN,1,,uint8_t,47,<empty>,,22874,1,CPPASTTypeId,,<empty>
70538,UNKNOWN,1,,::opencv_caffe::LRNParameter_Engine,46,<empty>,,22878,1,CPPASTTypeId,,<empty>
70628,UNKNOWN,1,,void,4,<empty>,,22913,1,CPPASTTypeId,,<empty>
70850,UNKNOWN,1,,void,4,<empty>,,22968,1,CPPASTTypeId,,<empty>
70986,UNKNOWN,1,,LRNParameter *,15,<empty>,,23016,1,CPPASTTypeId,,<empty>
70990,UNKNOWN,1,,const LRNParameter &,19,<empty>,,23017,1,CPPASTTypeId,,<empty>
71006,UNKNOWN,1,,void,4,<empty>,,23025,1,CPPASTTypeId,,<empty>
71161,UNKNOWN,1,,char*,28,<empty>,,23071,1,CPPASTTypeId,,<empty>
71165,UNKNOWN,1,,char*,28,<empty>,,23072,1,CPPASTTypeId,,<empty>
71295,UNKNOWN,1,,size_t,17,<empty>,,23118,1,CPPASTTypeId,,<empty>
71298,UNKNOWN,1,,char*,42,<empty>,,23118,1,CPPASTTypeId,,<empty>
71302,UNKNOWN,1,,char*,22,<empty>,,23119,1,CPPASTTypeId,,<empty>
71317,UNKNOWN,1,,char*,27,<empty>,,23124,1,CPPASTTypeId,,<empty>
71320,UNKNOWN,1,,size_t,54,<empty>,,23124,1,CPPASTTypeId,,<empty>
71323,UNKNOWN,1,,char*,22,<empty>,,23125,1,CPPASTTypeId,,<empty>
71327,UNKNOWN,1,,char*,62,<empty>,,23125,1,CPPASTTypeId,,<empty>
71332,UNKNOWN,1,,size_t,20,<empty>,,23126,1,CPPASTTypeId,,<empty>
71335,UNKNOWN,1,,char*,45,<empty>,,23126,1,CPPASTTypeId,,<empty>
71339,UNKNOWN,1,,char*,22,<empty>,,23127,1,CPPASTTypeId,,<empty>
71376,UNKNOWN,1,,MemoryDataParameter*,50,<empty>,,23142,1,CPPASTTypeId,,<empty>
71379,UNKNOWN,1,,void,4,<empty>,,23143,1,CPPASTTypeId,,<empty>
71405,UNKNOWN,1,,void,4,<empty>,,23155,1,CPPASTTypeId,,<empty>
71426,UNKNOWN,1,,size_t,43,<empty>,,23159,1,CPPASTTypeId,,<empty>
71429,UNKNOWN,1,,char*,26,<empty>,,23160,1,CPPASTTypeId,,<empty>
71433,UNKNOWN,1,,char*,26,<empty>,,23161,1,CPPASTTypeId,,<empty>
71488,UNKNOWN,1,,uint8_t,47,<empty>,,23176,1,CPPASTTypeId,,<empty>
71527,UNKNOWN,1,,uint8_t,47,<empty>,,23185,1,CPPASTTypeId,,<empty>
71566,UNKNOWN,1,,uint8_t,47,<empty>,,23194,1,CPPASTTypeId,,<empty>
71605,UNKNOWN,1,,uint8_t,47,<empty>,,23203,1,CPPASTTypeId,,<empty>
71711,UNKNOWN,1,,void,4,<empty>,,23238,1,CPPASTTypeId,,<empty>
71877,UNKNOWN,1,,void,4,<empty>,,23279,1,CPPASTTypeId,,<empty>
71998,UNKNOWN,1,,MemoryDataParameter *,15,<empty>,,23315,1,CPPASTTypeId,,<empty>
72002,UNKNOWN,1,,const MemoryDataParameter &,19,<empty>,,23316,1,CPPASTTypeId,,<empty>
72018,UNKNOWN,1,,void,4,<empty>,,23324,1,CPPASTTypeId,,<empty>
72153,UNKNOWN,1,,char*,28,<empty>,,23364,1,CPPASTTypeId,,<empty>
72157,UNKNOWN,1,,char*,28,<empty>,,23365,1,CPPASTTypeId,,<empty>
72256,UNKNOWN,1,,size_t,17,<empty>,,23404,1,CPPASTTypeId,,<empty>
72259,UNKNOWN,1,,char*,42,<empty>,,23404,1,CPPASTTypeId,,<empty>
72263,UNKNOWN,1,,char*,22,<empty>,,23405,1,CPPASTTypeId,,<empty>
72313,UNKNOWN,1,,MVNParameter*,43,<empty>,,23427,1,CPPASTTypeId,,<empty>
72316,UNKNOWN,1,,void,4,<empty>,,23428,1,CPPASTTypeId,,<empty>
72342,UNKNOWN,1,,void,4,<empty>,,23440,1,CPPASTTypeId,,<empty>
72413,UNKNOWN,1,,uint8_t,47,<empty>,,23461,1,CPPASTTypeId,,<empty>
72452,UNKNOWN,1,,uint8_t,47,<empty>,,23470,1,CPPASTTypeId,,<empty>
72491,UNKNOWN,1,,uint8_t,47,<empty>,,23479,1,CPPASTTypeId,,<empty>
72591,UNKNOWN,1,,void,4,<empty>,,23514,1,CPPASTTypeId,,<empty>
72729,UNKNOWN,1,,void,4,<empty>,,23549,1,CPPASTTypeId,,<empty>
72804,UNKNOWN,1,,MVNParameter *,15,<empty>,,23580,1,CPPASTTypeId,,<empty>
72808,UNKNOWN,1,,const MVNParameter &,19,<empty>,,23581,1,CPPASTTypeId,,<empty>
72824,UNKNOWN,1,,void,4,<empty>,,23589,1,CPPASTTypeId,,<empty>
73082,UNKNOWN,1,,ParameterParameter*,49,<empty>,,23686,1,CPPASTTypeId,,<empty>
73085,UNKNOWN,1,,void,4,<empty>,,23687,1,CPPASTTypeId,,<empty>
73111,UNKNOWN,1,,void,4,<empty>,,23699,1,CPPASTTypeId,,<empty>
73181,UNKNOWN,1,,uint8_t,47,<empty>,,23719,1,CPPASTTypeId,,<empty>
73279,UNKNOWN,1,,void,4,<empty>,,23753,1,CPPASTTypeId,,<empty>
73363,UNKNOWN,1,,void,4,<empty>,,23778,1,CPPASTTypeId,,<empty>
73422,UNKNOWN,1,,ParameterParameter *,15,<empty>,,23799,1,CPPASTTypeId,,<empty>
73426,UNKNOWN,1,,const ParameterParameter &,19,<empty>,,23800,1,CPPASTTypeId,,<empty>
73442,UNKNOWN,1,,void,4,<empty>,,23808,1,CPPASTTypeId,,<empty>
73721,UNKNOWN,1,,size_t,17,<empty>,,23900,1,CPPASTTypeId,,<empty>
73724,UNKNOWN,1,,char*,42,<empty>,,23900,1,CPPASTTypeId,,<empty>
73728,UNKNOWN,1,,char*,22,<empty>,,23901,1,CPPASTTypeId,,<empty>
73743,UNKNOWN,1,,char*,27,<empty>,,23906,1,CPPASTTypeId,,<empty>
73746,UNKNOWN,1,,size_t,54,<empty>,,23906,1,CPPASTTypeId,,<empty>
73749,UNKNOWN,1,,char*,22,<empty>,,23907,1,CPPASTTypeId,,<empty>
73753,UNKNOWN,1,,char*,56,<empty>,,23907,1,CPPASTTypeId,,<empty>
73758,UNKNOWN,1,,size_t,20,<empty>,,23908,1,CPPASTTypeId,,<empty>
73761,UNKNOWN,1,,char*,45,<empty>,,23908,1,CPPASTTypeId,,<empty>
73765,UNKNOWN,1,,char*,22,<empty>,,23909,1,CPPASTTypeId,,<empty>
73808,UNKNOWN,1,,PoolingParameter*,47,<empty>,,23926,1,CPPASTTypeId,,<empty>
73811,UNKNOWN,1,,void,4,<empty>,,23927,1,CPPASTTypeId,,<empty>
73837,UNKNOWN,1,,void,4,<empty>,,23939,1,CPPASTTypeId,,<empty>
73858,UNKNOWN,1,,size_t,37,<empty>,,23943,1,CPPASTTypeId,,<empty>
73861,UNKNOWN,1,,char*,26,<empty>,,23944,1,CPPASTTypeId,,<empty>
73865,UNKNOWN,1,,char*,26,<empty>,,23945,1,CPPASTTypeId,,<empty>
73884,UNKNOWN,1,,size_t,38,<empty>,,23948,1,CPPASTTypeId,,<empty>
73887,UNKNOWN,1,,char*,26,<empty>,,23949,1,CPPASTTypeId,,<empty>
73891,UNKNOWN,1,,char*,26,<empty>,,23950,1,CPPASTTypeId,,<empty>
73952,UNKNOWN,1,,uint8_t,47,<empty>,,23967,1,CPPASTTypeId,,<empty>
73986,UNKNOWN,1,,::opencv_caffe::PoolingParameter_PoolMethod,44,<empty>,,23971,1,CPPASTTypeId,,<empty>
74009,UNKNOWN,1,,uint8_t,47,<empty>,,23980,1,CPPASTTypeId,,<empty>
74048,UNKNOWN,1,,uint8_t,47,<empty>,,23989,1,CPPASTTypeId,,<empty>
74087,UNKNOWN,1,,uint8_t,47,<empty>,,23998,1,CPPASTTypeId,,<empty>
74126,UNKNOWN,1,,uint8_t,47,<empty>,,24007,1,CPPASTTypeId,,<empty>
74165,UNKNOWN,1,,uint8_t,47,<empty>,,24016,1,CPPASTTypeId,,<empty>
74204,UNKNOWN,1,,uint8_t,47,<empty>,,24025,1,CPPASTTypeId,,<empty>
74243,UNKNOWN,1,,uint8_t,47,<empty>,,24034,1,CPPASTTypeId,,<empty>
74282,UNKNOWN,1,,uint8_t,47,<empty>,,24043,1,CPPASTTypeId,,<empty>
74321,UNKNOWN,1,,uint8_t,47,<empty>,,24052,1,CPPASTTypeId,,<empty>
74360,UNKNOWN,1,,uint8_t,47,<empty>,,24061,1,CPPASTTypeId,,<empty>
74394,UNKNOWN,1,,::opencv_caffe::PoolingParameter_Engine,46,<empty>,,24065,1,CPPASTTypeId,,<empty>
74417,UNKNOWN,1,,uint8_t,47,<empty>,,24074,1,CPPASTTypeId,,<empty>
74456,UNKNOWN,1,,uint8_t,47,<empty>,,24083,1,CPPASTTypeId,,<empty>
74562,UNKNOWN,1,,void,4,<empty>,,24118,1,CPPASTTypeId,,<empty>
74980,UNKNOWN,1,,void,4,<empty>,,24215,1,CPPASTTypeId,,<empty>
75263,UNKNOWN,1,,PoolingParameter *,15,<empty>,,24300,1,CPPASTTypeId,,<empty>
75267,UNKNOWN,1,,const PoolingParameter &,19,<empty>,,24301,1,CPPASTTypeId,,<empty>
75283,UNKNOWN,1,,void,4,<empty>,,24309,1,CPPASTTypeId,,<empty>
75518,UNKNOWN,1,,char*,28,<empty>,,24379,1,CPPASTTypeId,,<empty>
75522,UNKNOWN,1,,char*,28,<empty>,,24380,1,CPPASTTypeId,,<empty>
75631,UNKNOWN,1,,size_t,17,<empty>,,24421,1,CPPASTTypeId,,<empty>
75634,UNKNOWN,1,,char*,42,<empty>,,24421,1,CPPASTTypeId,,<empty>
75638,UNKNOWN,1,,char*,22,<empty>,,24422,1,CPPASTTypeId,,<empty>
75688,UNKNOWN,1,,PowerParameter*,45,<empty>,,24444,1,CPPASTTypeId,,<empty>
75691,UNKNOWN,1,,void,4,<empty>,,24445,1,CPPASTTypeId,,<empty>
75717,UNKNOWN,1,,void,4,<empty>,,24457,1,CPPASTTypeId,,<empty>
75788,UNKNOWN,1,,uint8_t,47,<empty>,,24478,1,CPPASTTypeId,,<empty>
75821,UNKNOWN,1,,uint8_t,47,<empty>,,24487,1,CPPASTTypeId,,<empty>
75854,UNKNOWN,1,,uint8_t,47,<empty>,,24496,1,CPPASTTypeId,,<empty>
75954,UNKNOWN,1,,void,4,<empty>,,24531,1,CPPASTTypeId,,<empty>
76092,UNKNOWN,1,,void,4,<empty>,,24566,1,CPPASTTypeId,,<empty>
76167,UNKNOWN,1,,PowerParameter *,15,<empty>,,24597,1,CPPASTTypeId,,<empty>
76171,UNKNOWN,1,,const PowerParameter &,19,<empty>,,24598,1,CPPASTTypeId,,<empty>
76187,UNKNOWN,1,,void,4,<empty>,,24606,1,CPPASTTypeId,,<empty>
76592,UNKNOWN,1,,PythonParameter*,46,<empty>,,24741,1,CPPASTTypeId,,<empty>
76595,UNKNOWN,1,,void,4,<empty>,,24742,1,CPPASTTypeId,,<empty>
76621,UNKNOWN,1,,void,4,<empty>,,24754,1,CPPASTTypeId,,<empty>
76713,UNKNOWN,1,,uint8_t,47,<empty>,,24782,1,CPPASTTypeId,,<empty>
76759,UNKNOWN,1,,uint8_t,47,<empty>,,24794,1,CPPASTTypeId,,<empty>
76805,UNKNOWN,1,,uint8_t,47,<empty>,,24806,1,CPPASTTypeId,,<empty>
76851,UNKNOWN,1,,uint8_t,47,<empty>,,24818,1,CPPASTTypeId,,<empty>
76957,UNKNOWN,1,,void,4,<empty>,,24853,1,CPPASTTypeId,,<empty>
76985,UNKNOWN,1,,int,52,<empty>,,24859,1,CPPASTTypeId,,<empty>
77034,UNKNOWN,1,,int,51,<empty>,,24869,1,CPPASTTypeId,,<empty>
77083,UNKNOWN,1,,int,55,<empty>,,24879,1,CPPASTTypeId,,<empty>
77186,UNKNOWN,1,,void,4,<empty>,,24906,1,CPPASTTypeId,,<empty>
77304,UNKNOWN,1,,PythonParameter *,15,<empty>,,24948,1,CPPASTTypeId,,<empty>
77308,UNKNOWN,1,,const PythonParameter &,19,<empty>,,24949,1,CPPASTTypeId,,<empty>
77324,UNKNOWN,1,,void,4,<empty>,,24957,1,CPPASTTypeId,,<empty>
77706,UNKNOWN,1,,size_t,17,<empty>,,25075,1,CPPASTTypeId,,<empty>
77709,UNKNOWN,1,,char*,42,<empty>,,25075,1,CPPASTTypeId,,<empty>
77713,UNKNOWN,1,,char*,22,<empty>,,25076,1,CPPASTTypeId,,<empty>
77728,UNKNOWN,1,,char*,27,<empty>,,25081,1,CPPASTTypeId,,<empty>
77731,UNKNOWN,1,,size_t,54,<empty>,,25081,1,CPPASTTypeId,,<empty>
77734,UNKNOWN,1,,char*,22,<empty>,,25082,1,CPPASTTypeId,,<empty>
77738,UNKNOWN,1,,char*,65,<empty>,,25082,1,CPPASTTypeId,,<empty>
77743,UNKNOWN,1,,size_t,20,<empty>,,25083,1,CPPASTTypeId,,<empty>
77746,UNKNOWN,1,,char*,45,<empty>,,25083,1,CPPASTTypeId,,<empty>
77750,UNKNOWN,1,,char*,22,<empty>,,25084,1,CPPASTTypeId,,<empty>
77801,UNKNOWN,1,,RecurrentParameter*,49,<empty>,,25101,1,CPPASTTypeId,,<empty>
77804,UNKNOWN,1,,void,4,<empty>,,25102,1,CPPASTTypeId,,<empty>
77830,UNKNOWN,1,,void,4,<empty>,,25114,1,CPPASTTypeId,,<empty>
77882,UNKNOWN,1,,size_t,43,<empty>,,25128,1,CPPASTTypeId,,<empty>
77885,UNKNOWN,1,,char*,26,<empty>,,25129,1,CPPASTTypeId,,<empty>
77889,UNKNOWN,1,,char*,26,<empty>,,25130,1,CPPASTTypeId,,<empty>
77944,UNKNOWN,1,,uint8_t,47,<empty>,,25145,1,CPPASTTypeId,,<empty>
77983,UNKNOWN,1,,uint8_t,47,<empty>,,25154,1,CPPASTTypeId,,<empty>
78014,UNKNOWN,1,,uint8_t,47,<empty>,,25162,1,CPPASTTypeId,,<empty>
78045,UNKNOWN,1,,uint8_t,47,<empty>,,25170,1,CPPASTTypeId,,<empty>
78084,UNKNOWN,1,,uint8_t,47,<empty>,,25179,1,CPPASTTypeId,,<empty>
78190,UNKNOWN,1,,void,4,<empty>,,25214,1,CPPASTTypeId,,<empty>
78388,UNKNOWN,1,,void,4,<empty>,,25265,1,CPPASTTypeId,,<empty>
78510,UNKNOWN,1,,RecurrentParameter *,15,<empty>,,25310,1,CPPASTTypeId,,<empty>
78514,UNKNOWN,1,,const RecurrentParameter &,19,<empty>,,25311,1,CPPASTTypeId,,<empty>
78530,UNKNOWN,1,,void,4,<empty>,,25319,1,CPPASTTypeId,,<empty>
78681,UNKNOWN,1,,char*,28,<empty>,,25362,1,CPPASTTypeId,,<empty>
78685,UNKNOWN,1,,char*,28,<empty>,,25363,1,CPPASTTypeId,,<empty>
78784,UNKNOWN,1,,size_t,17,<empty>,,25402,1,CPPASTTypeId,,<empty>
78787,UNKNOWN,1,,char*,42,<empty>,,25402,1,CPPASTTypeId,,<empty>
78791,UNKNOWN,1,,char*,22,<empty>,,25403,1,CPPASTTypeId,,<empty>
78841,UNKNOWN,1,,ReductionParameter*,49,<empty>,,25425,1,CPPASTTypeId,,<empty>
78844,UNKNOWN,1,,void,4,<empty>,,25426,1,CPPASTTypeId,,<empty>
78870,UNKNOWN,1,,void,4,<empty>,,25438,1,CPPASTTypeId,,<empty>
78941,UNKNOWN,1,,uint8_t,47,<empty>,,25459,1,CPPASTTypeId,,<empty>
78975,UNKNOWN,1,,::opencv_caffe::ReductionParameter_ReductionOp,49,<empty>,,25463,1,CPPASTTypeId,,<empty>
78998,UNKNOWN,1,,uint8_t,47,<empty>,,25472,1,CPPASTTypeId,,<empty>
79037,UNKNOWN,1,,uint8_t,47,<empty>,,25481,1,CPPASTTypeId,,<empty>
79137,UNKNOWN,1,,void,4,<empty>,,25516,1,CPPASTTypeId,,<empty>
79275,UNKNOWN,1,,void,4,<empty>,,25552,1,CPPASTTypeId,,<empty>
79370,UNKNOWN,1,,ReductionParameter *,15,<empty>,,25584,1,CPPASTTypeId,,<empty>
79374,UNKNOWN,1,,const ReductionParameter &,19,<empty>,,25585,1,CPPASTTypeId,,<empty>
79390,UNKNOWN,1,,void,4,<empty>,,25593,1,CPPASTTypeId,,<empty>
79591,UNKNOWN,1,,size_t,17,<empty>,,25664,1,CPPASTTypeId,,<empty>
79594,UNKNOWN,1,,char*,42,<empty>,,25664,1,CPPASTTypeId,,<empty>
79598,UNKNOWN,1,,char*,22,<empty>,,25665,1,CPPASTTypeId,,<empty>
79613,UNKNOWN,1,,char*,27,<empty>,,25670,1,CPPASTTypeId,,<empty>
79616,UNKNOWN,1,,size_t,54,<empty>,,25670,1,CPPASTTypeId,,<empty>
79619,UNKNOWN,1,,char*,22,<empty>,,25671,1,CPPASTTypeId,,<empty>
79623,UNKNOWN,1,,char*,66,<empty>,,25671,1,CPPASTTypeId,,<empty>
79628,UNKNOWN,1,,size_t,20,<empty>,,25672,1,CPPASTTypeId,,<empty>
79631,UNKNOWN,1,,char*,45,<empty>,,25672,1,CPPASTTypeId,,<empty>
79635,UNKNOWN,1,,char*,22,<empty>,,25673,1,CPPASTTypeId,,<empty>
79672,UNKNOWN,1,,ReLUParameter*,44,<empty>,,25688,1,CPPASTTypeId,,<empty>
79675,UNKNOWN,1,,void,4,<empty>,,25689,1,CPPASTTypeId,,<empty>
79701,UNKNOWN,1,,void,4,<empty>,,25701,1,CPPASTTypeId,,<empty>
79722,UNKNOWN,1,,size_t,47,<empty>,,25705,1,CPPASTTypeId,,<empty>
79725,UNKNOWN,1,,char*,26,<empty>,,25706,1,CPPASTTypeId,,<empty>
79729,UNKNOWN,1,,char*,26,<empty>,,25707,1,CPPASTTypeId,,<empty>
79784,UNKNOWN,1,,uint8_t,47,<empty>,,25722,1,CPPASTTypeId,,<empty>
79817,UNKNOWN,1,,uint8_t,47,<empty>,,25731,1,CPPASTTypeId,,<empty>
79851,UNKNOWN,1,,::opencv_caffe::ReLUParameter_Engine,46,<empty>,,25735,1,CPPASTTypeId,,<empty>
79941,UNKNOWN,1,,void,4,<empty>,,25770,1,CPPASTTypeId,,<empty>
80051,UNKNOWN,1,,void,4,<empty>,,25800,1,CPPASTTypeId,,<empty>
80127,UNKNOWN,1,,ReLUParameter *,15,<empty>,,25827,1,CPPASTTypeId,,<empty>
80131,UNKNOWN,1,,const ReLUParameter &,19,<empty>,,25828,1,CPPASTTypeId,,<empty>
80147,UNKNOWN,1,,void,4,<empty>,,25836,1,CPPASTTypeId,,<empty>
80262,UNKNOWN,1,,char*,28,<empty>,,25870,1,CPPASTTypeId,,<empty>
80266,UNKNOWN,1,,char*,28,<empty>,,25871,1,CPPASTTypeId,,<empty>
80399,UNKNOWN,1,,size_t,17,<empty>,,25920,1,CPPASTTypeId,,<empty>
80402,UNKNOWN,1,,char*,42,<empty>,,25920,1,CPPASTTypeId,,<empty>
80406,UNKNOWN,1,,char*,22,<empty>,,25921,1,CPPASTTypeId,,<empty>
80421,UNKNOWN,1,,char*,27,<empty>,,25926,1,CPPASTTypeId,,<empty>
80424,UNKNOWN,1,,size_t,54,<empty>,,25926,1,CPPASTTypeId,,<empty>
80427,UNKNOWN,1,,char*,22,<empty>,,25927,1,CPPASTTypeId,,<empty>
80431,UNKNOWN,1,,char*,57,<empty>,,25927,1,CPPASTTypeId,,<empty>
80436,UNKNOWN,1,,size_t,20,<empty>,,25928,1,CPPASTTypeId,,<empty>
80439,UNKNOWN,1,,char*,45,<empty>,,25928,1,CPPASTTypeId,,<empty>
80443,UNKNOWN,1,,char*,22,<empty>,,25929,1,CPPASTTypeId,,<empty>
80491,UNKNOWN,1,,ReshapeParameter*,47,<empty>,,25946,1,CPPASTTypeId,,<empty>
80494,UNKNOWN,1,,void,4,<empty>,,25947,1,CPPASTTypeId,,<empty>
80520,UNKNOWN,1,,void,4,<empty>,,25959,1,CPPASTTypeId,,<empty>
80602,UNKNOWN,1,,uint8_t,47,<empty>,,25983,1,CPPASTTypeId,,<empty>
80633,UNKNOWN,1,,uint8_t,47,<empty>,,25991,1,CPPASTTypeId,,<empty>
80672,UNKNOWN,1,,uint8_t,47,<empty>,,26000,1,CPPASTTypeId,,<empty>
80778,UNKNOWN,1,,void,4,<empty>,,26035,1,CPPASTTypeId,,<empty>
80918,UNKNOWN,1,,void,4,<empty>,,26072,1,CPPASTTypeId,,<empty>
81020,UNKNOWN,1,,ReshapeParameter *,15,<empty>,,26105,1,CPPASTTypeId,,<empty>
81024,UNKNOWN,1,,const ReshapeParameter &,19,<empty>,,26106,1,CPPASTTypeId,,<empty>
81040,UNKNOWN,1,,void,4,<empty>,,26114,1,CPPASTTypeId,,<empty>
81168,UNKNOWN,1,,char*,28,<empty>,,26151,1,CPPASTTypeId,,<empty>
81172,UNKNOWN,1,,char*,28,<empty>,,26152,1,CPPASTTypeId,,<empty>
81366,UNKNOWN,1,,size_t,17,<empty>,,26218,1,CPPASTTypeId,,<empty>
81369,UNKNOWN,1,,char*,42,<empty>,,26218,1,CPPASTTypeId,,<empty>
81373,UNKNOWN,1,,char*,22,<empty>,,26219,1,CPPASTTypeId,,<empty>
81388,UNKNOWN,1,,char*,27,<empty>,,26224,1,CPPASTTypeId,,<empty>
81391,UNKNOWN,1,,size_t,54,<empty>,,26224,1,CPPASTTypeId,,<empty>
81394,UNKNOWN,1,,char*,22,<empty>,,26225,1,CPPASTTypeId,,<empty>
81398,UNKNOWN,1,,char*,58,<empty>,,26225,1,CPPASTTypeId,,<empty>
81403,UNKNOWN,1,,size_t,20,<empty>,,26226,1,CPPASTTypeId,,<empty>
81406,UNKNOWN,1,,char*,45,<empty>,,26226,1,CPPASTTypeId,,<empty>
81410,UNKNOWN,1,,char*,22,<empty>,,26227,1,CPPASTTypeId,,<empty>
81467,UNKNOWN,1,,ScaleParameter*,45,<empty>,,26246,1,CPPASTTypeId,,<empty>
81470,UNKNOWN,1,,void,4,<empty>,,26247,1,CPPASTTypeId,,<empty>
81496,UNKNOWN,1,,void,4,<empty>,,26259,1,CPPASTTypeId,,<empty>
81598,UNKNOWN,1,,uint8_t,47,<empty>,,26290,1,CPPASTTypeId,,<empty>
81637,UNKNOWN,1,,uint8_t,47,<empty>,,26299,1,CPPASTTypeId,,<empty>
81676,UNKNOWN,1,,uint8_t,47,<empty>,,26308,1,CPPASTTypeId,,<empty>
81707,UNKNOWN,1,,uint8_t,47,<empty>,,26316,1,CPPASTTypeId,,<empty>
81746,UNKNOWN,1,,uint8_t,47,<empty>,,26325,1,CPPASTTypeId,,<empty>
81844,UNKNOWN,1,,void,4,<empty>,,26359,1,CPPASTTypeId,,<empty>
82042,UNKNOWN,1,,void,4,<empty>,,26410,1,CPPASTTypeId,,<empty>
82173,UNKNOWN,1,,ScaleParameter *,15,<empty>,,26455,1,CPPASTTypeId,,<empty>
82177,UNKNOWN,1,,const ScaleParameter &,19,<empty>,,26456,1,CPPASTTypeId,,<empty>
82193,UNKNOWN,1,,void,4,<empty>,,26464,1,CPPASTTypeId,,<empty>
82344,UNKNOWN,1,,char*,28,<empty>,,26507,1,CPPASTTypeId,,<empty>
82348,UNKNOWN,1,,char*,28,<empty>,,26508,1,CPPASTTypeId,,<empty>
82467,UNKNOWN,1,,SigmoidParameter*,47,<empty>,,26562,1,CPPASTTypeId,,<empty>
82470,UNKNOWN,1,,void,4,<empty>,,26563,1,CPPASTTypeId,,<empty>
82496,UNKNOWN,1,,void,4,<empty>,,26575,1,CPPASTTypeId,,<empty>
82551,UNKNOWN,1,,uint8_t,47,<empty>,,26591,1,CPPASTTypeId,,<empty>
82585,UNKNOWN,1,,::opencv_caffe::SigmoidParameter_Engine,46,<empty>,,26595,1,CPPASTTypeId,,<empty>
82675,UNKNOWN,1,,void,4,<empty>,,26630,1,CPPASTTypeId,,<empty>
82757,UNKNOWN,1,,void,4,<empty>,,26654,1,CPPASTTypeId,,<empty>
82818,UNKNOWN,1,,SigmoidParameter *,15,<empty>,,26674,1,CPPASTTypeId,,<empty>
82822,UNKNOWN,1,,const SigmoidParameter &,19,<empty>,,26675,1,CPPASTTypeId,,<empty>
82838,UNKNOWN,1,,void,4,<empty>,,26683,1,CPPASTTypeId,,<empty>
82993,UNKNOWN,1,,size_t,17,<empty>,,26744,1,CPPASTTypeId,,<empty>
82996,UNKNOWN,1,,char*,42,<empty>,,26744,1,CPPASTTypeId,,<empty>
83000,UNKNOWN,1,,char*,22,<empty>,,26745,1,CPPASTTypeId,,<empty>
83047,UNKNOWN,1,,SliceParameter*,45,<empty>,,26766,1,CPPASTTypeId,,<empty>
83050,UNKNOWN,1,,void,4,<empty>,,26767,1,CPPASTTypeId,,<empty>
83076,UNKNOWN,1,,void,4,<empty>,,26779,1,CPPASTTypeId,,<empty>
83148,UNKNOWN,1,,uint8_t,47,<empty>,,26800,1,CPPASTTypeId,,<empty>
83187,UNKNOWN,1,,uint8_t,47,<empty>,,26809,1,CPPASTTypeId,,<empty>
83240,UNKNOWN,1,,uint8_t,32,<empty>,,26817,1,CPPASTTypeId,,<empty>
83274,UNKNOWN,1,,uint8_t,47,<empty>,,26825,1,CPPASTTypeId,,<empty>
83380,UNKNOWN,1,,void,4,<empty>,,26860,1,CPPASTTypeId,,<empty>
83533,UNKNOWN,1,,void,4,<empty>,,26895,1,CPPASTTypeId,,<empty>
83648,UNKNOWN,1,,SliceParameter *,15,<empty>,,26930,1,CPPASTTypeId,,<empty>
83652,UNKNOWN,1,,const SliceParameter &,19,<empty>,,26931,1,CPPASTTypeId,,<empty>
83668,UNKNOWN,1,,void,4,<empty>,,26939,1,CPPASTTypeId,,<empty>
83869,UNKNOWN,1,,size_t,17,<empty>,,27008,1,CPPASTTypeId,,<empty>
83872,UNKNOWN,1,,char*,42,<empty>,,27008,1,CPPASTTypeId,,<empty>
83876,UNKNOWN,1,,char*,22,<empty>,,27009,1,CPPASTTypeId,,<empty>
83923,UNKNOWN,1,,SoftmaxParameter*,47,<empty>,,27030,1,CPPASTTypeId,,<empty>
83926,UNKNOWN,1,,void,4,<empty>,,27031,1,CPPASTTypeId,,<empty>
83952,UNKNOWN,1,,void,4,<empty>,,27043,1,CPPASTTypeId,,<empty>
84020,UNKNOWN,1,,uint8_t,47,<empty>,,27063,1,CPPASTTypeId,,<empty>
84054,UNKNOWN,1,,::opencv_caffe::SoftmaxParameter_Engine,46,<empty>,,27067,1,CPPASTTypeId,,<empty>
84077,UNKNOWN,1,,uint8_t,47,<empty>,,27076,1,CPPASTTypeId,,<empty>
84183,UNKNOWN,1,,void,4,<empty>,,27111,1,CPPASTTypeId,,<empty>
84293,UNKNOWN,1,,void,4,<empty>,,27141,1,CPPASTTypeId,,<empty>
84378,UNKNOWN,1,,SoftmaxParameter *,15,<empty>,,27168,1,CPPASTTypeId,,<empty>
84382,UNKNOWN,1,,const SoftmaxParameter &,19,<empty>,,27169,1,CPPASTTypeId,,<empty>
84398,UNKNOWN,1,,void,4,<empty>,,27177,1,CPPASTTypeId,,<empty>
84605,UNKNOWN,1,,TanHParameter*,44,<empty>,,27260,1,CPPASTTypeId,,<empty>
84608,UNKNOWN,1,,void,4,<empty>,,27261,1,CPPASTTypeId,,<empty>
84634,UNKNOWN,1,,void,4,<empty>,,27273,1,CPPASTTypeId,,<empty>
84689,UNKNOWN,1,,uint8_t,47,<empty>,,27289,1,CPPASTTypeId,,<empty>
84723,UNKNOWN,1,,::opencv_caffe::TanHParameter_Engine,46,<empty>,,27293,1,CPPASTTypeId,,<empty>
84813,UNKNOWN,1,,void,4,<empty>,,27328,1,CPPASTTypeId,,<empty>
84895,UNKNOWN,1,,void,4,<empty>,,27352,1,CPPASTTypeId,,<empty>
84956,UNKNOWN,1,,TanHParameter *,15,<empty>,,27372,1,CPPASTTypeId,,<empty>
84960,UNKNOWN,1,,const TanHParameter &,19,<empty>,,27373,1,CPPASTTypeId,,<empty>
84976,UNKNOWN,1,,void,4,<empty>,,27381,1,CPPASTTypeId,,<empty>
85131,UNKNOWN,1,,size_t,17,<empty>,,27440,1,CPPASTTypeId,,<empty>
85134,UNKNOWN,1,,char*,42,<empty>,,27440,1,CPPASTTypeId,,<empty>
85138,UNKNOWN,1,,char*,22,<empty>,,27441,1,CPPASTTypeId,,<empty>
85185,UNKNOWN,1,,TileParameter*,44,<empty>,,27462,1,CPPASTTypeId,,<empty>
85188,UNKNOWN,1,,void,4,<empty>,,27463,1,CPPASTTypeId,,<empty>
85214,UNKNOWN,1,,void,4,<empty>,,27475,1,CPPASTTypeId,,<empty>
85282,UNKNOWN,1,,uint8_t,47,<empty>,,27495,1,CPPASTTypeId,,<empty>
85321,UNKNOWN,1,,uint8_t,47,<empty>,,27504,1,CPPASTTypeId,,<empty>
85427,UNKNOWN,1,,void,4,<empty>,,27539,1,CPPASTTypeId,,<empty>
85537,UNKNOWN,1,,void,4,<empty>,,27568,1,CPPASTTypeId,,<empty>
85620,UNKNOWN,1,,TileParameter *,15,<empty>,,27594,1,CPPASTTypeId,,<empty>
85624,UNKNOWN,1,,const TileParameter &,19,<empty>,,27595,1,CPPASTTypeId,,<empty>
85640,UNKNOWN,1,,void,4,<empty>,,27603,1,CPPASTTypeId,,<empty>
85847,UNKNOWN,1,,ThresholdParameter*,49,<empty>,,27686,1,CPPASTTypeId,,<empty>
85850,UNKNOWN,1,,void,4,<empty>,,27687,1,CPPASTTypeId,,<empty>
85876,UNKNOWN,1,,void,4,<empty>,,27699,1,CPPASTTypeId,,<empty>
85931,UNKNOWN,1,,uint8_t,47,<empty>,,27715,1,CPPASTTypeId,,<empty>
86031,UNKNOWN,1,,void,4,<empty>,,27750,1,CPPASTTypeId,,<empty>
86113,UNKNOWN,1,,void,4,<empty>,,27773,1,CPPASTTypeId,,<empty>
86163,UNKNOWN,1,,ThresholdParameter *,15,<empty>,,27792,1,CPPASTTypeId,,<empty>
86167,UNKNOWN,1,,const ThresholdParameter &,19,<empty>,,27793,1,CPPASTTypeId,,<empty>
86183,UNKNOWN,1,,void,4,<empty>,,27801,1,CPPASTTypeId,,<empty>
86575,UNKNOWN,1,,size_t,17,<empty>,,27923,1,CPPASTTypeId,,<empty>
86578,UNKNOWN,1,,char*,42,<empty>,,27923,1,CPPASTTypeId,,<empty>
86582,UNKNOWN,1,,char*,22,<empty>,,27924,1,CPPASTTypeId,,<empty>
86635,UNKNOWN,1,,char*,27,<empty>,,27942,1,CPPASTTypeId,,<empty>
86638,UNKNOWN,1,,size_t,54,<empty>,,27942,1,CPPASTTypeId,,<empty>
86641,UNKNOWN,1,,char*,22,<empty>,,27943,1,CPPASTTypeId,,<empty>
86645,UNKNOWN,1,,char*,62,<empty>,,27943,1,CPPASTTypeId,,<empty>
86650,UNKNOWN,1,,size_t,20,<empty>,,27944,1,CPPASTTypeId,,<empty>
86653,UNKNOWN,1,,char*,45,<empty>,,27944,1,CPPASTTypeId,,<empty>
86657,UNKNOWN,1,,char*,22,<empty>,,27945,1,CPPASTTypeId,,<empty>
86744,UNKNOWN,1,,WindowDataParameter*,50,<empty>,,27968,1,CPPASTTypeId,,<empty>
86747,UNKNOWN,1,,void,4,<empty>,,27969,1,CPPASTTypeId,,<empty>
86773,UNKNOWN,1,,void,4,<empty>,,27981,1,CPPASTTypeId,,<empty>
86841,UNKNOWN,1,,size_t,43,<empty>,,27999,1,CPPASTTypeId,,<empty>
86844,UNKNOWN,1,,char*,26,<empty>,,28000,1,CPPASTTypeId,,<empty>
86848,UNKNOWN,1,,char*,26,<empty>,,28001,1,CPPASTTypeId,,<empty>
86923,UNKNOWN,1,,uint8_t,47,<empty>,,28023,1,CPPASTTypeId,,<empty>
86969,UNKNOWN,1,,uint8_t,47,<empty>,,28035,1,CPPASTTypeId,,<empty>
87002,UNKNOWN,1,,uint8_t,47,<empty>,,28044,1,CPPASTTypeId,,<empty>
87048,UNKNOWN,1,,uint8_t,47,<empty>,,28056,1,CPPASTTypeId,,<empty>
87087,UNKNOWN,1,,uint8_t,47,<empty>,,28065,1,CPPASTTypeId,,<empty>
87126,UNKNOWN,1,,uint8_t,47,<empty>,,28074,1,CPPASTTypeId,,<empty>
87165,UNKNOWN,1,,uint8_t,47,<empty>,,28083,1,CPPASTTypeId,,<empty>
87198,UNKNOWN,1,,uint8_t,47,<empty>,,28092,1,CPPASTTypeId,,<empty>
87231,UNKNOWN,1,,uint8_t,47,<empty>,,28101,1,CPPASTTypeId,,<empty>
87264,UNKNOWN,1,,uint8_t,47,<empty>,,28110,1,CPPASTTypeId,,<empty>
87303,UNKNOWN,1,,uint8_t,47,<empty>,,28119,1,CPPASTTypeId,,<empty>
87349,UNKNOWN,1,,uint8_t,47,<empty>,,28131,1,CPPASTTypeId,,<empty>
87388,UNKNOWN,1,,uint8_t,47,<empty>,,28140,1,CPPASTTypeId,,<empty>
87501,UNKNOWN,1,,void,4,<empty>,,28178,1,CPPASTTypeId,,<empty>
87529,UNKNOWN,1,,int,52,<empty>,,28184,1,CPPASTTypeId,,<empty>
87606,UNKNOWN,1,,int,55,<empty>,,28200,1,CPPASTTypeId,,<empty>
87851,UNKNOWN,1,,int,55,<empty>,,28252,1,CPPASTTypeId,,<empty>
87928,UNKNOWN,1,,int,57,<empty>,,28268,1,CPPASTTypeId,,<empty>
88003,UNKNOWN,1,,void,4,<empty>,,28289,1,CPPASTTypeId,,<empty>
88254,UNKNOWN,1,,WindowDataParameter *,15,<empty>,,28380,1,CPPASTTypeId,,<empty>
88258,UNKNOWN,1,,const WindowDataParameter &,19,<empty>,,28381,1,CPPASTTypeId,,<empty>
88274,UNKNOWN,1,,void,4,<empty>,,28389,1,CPPASTTypeId,,<empty>
88606,UNKNOWN,1,,char*,28,<empty>,,28481,1,CPPASTTypeId,,<empty>
88610,UNKNOWN,1,,char*,28,<empty>,,28482,1,CPPASTTypeId,,<empty>
88729,UNKNOWN,1,,size_t,17,<empty>,,28525,1,CPPASTTypeId,,<empty>
88732,UNKNOWN,1,,char*,42,<empty>,,28525,1,CPPASTTypeId,,<empty>
88736,UNKNOWN,1,,char*,22,<empty>,,28526,1,CPPASTTypeId,,<empty>
88751,UNKNOWN,1,,char*,27,<empty>,,28531,1,CPPASTTypeId,,<empty>
88754,UNKNOWN,1,,size_t,54,<empty>,,28531,1,CPPASTTypeId,,<empty>
88757,UNKNOWN,1,,char*,22,<empty>,,28532,1,CPPASTTypeId,,<empty>
88761,UNKNOWN,1,,char*,66,<empty>,,28532,1,CPPASTTypeId,,<empty>
88766,UNKNOWN,1,,size_t,20,<empty>,,28533,1,CPPASTTypeId,,<empty>
88769,UNKNOWN,1,,char*,45,<empty>,,28533,1,CPPASTTypeId,,<empty>
88773,UNKNOWN,1,,char*,22,<empty>,,28534,1,CPPASTTypeId,,<empty>
88810,UNKNOWN,1,,SPPParameter*,43,<empty>,,28549,1,CPPASTTypeId,,<empty>
88813,UNKNOWN,1,,void,4,<empty>,,28550,1,CPPASTTypeId,,<empty>
88839,UNKNOWN,1,,void,4,<empty>,,28562,1,CPPASTTypeId,,<empty>
88860,UNKNOWN,1,,size_t,47,<empty>,,28566,1,CPPASTTypeId,,<empty>
88863,UNKNOWN,1,,char*,26,<empty>,,28567,1,CPPASTTypeId,,<empty>
88867,UNKNOWN,1,,char*,26,<empty>,,28568,1,CPPASTTypeId,,<empty>
88922,UNKNOWN,1,,uint8_t,47,<empty>,,28583,1,CPPASTTypeId,,<empty>
88961,UNKNOWN,1,,uint8_t,47,<empty>,,28592,1,CPPASTTypeId,,<empty>
88995,UNKNOWN,1,,::opencv_caffe::SPPParameter_PoolMethod,44,<empty>,,28596,1,CPPASTTypeId,,<empty>
89018,UNKNOWN,1,,uint8_t,47,<empty>,,28605,1,CPPASTTypeId,,<empty>
89052,UNKNOWN,1,,::opencv_caffe::SPPParameter_Engine,46,<empty>,,28609,1,CPPASTTypeId,,<empty>
89142,UNKNOWN,1,,void,4,<empty>,,28644,1,CPPASTTypeId,,<empty>
89280,UNKNOWN,1,,void,4,<empty>,,28681,1,CPPASTTypeId,,<empty>
89386,UNKNOWN,1,,SPPParameter *,15,<empty>,,28714,1,CPPASTTypeId,,<empty>
89390,UNKNOWN,1,,const SPPParameter &,19,<empty>,,28715,1,CPPASTTypeId,,<empty>
89406,UNKNOWN,1,,void,4,<empty>,,28723,1,CPPASTTypeId,,<empty>
89531,UNKNOWN,1,,char*,28,<empty>,,28760,1,CPPASTTypeId,,<empty>
89535,UNKNOWN,1,,char*,28,<empty>,,28761,1,CPPASTTypeId,,<empty>
91060,UNKNOWN,1,,char*,27,<empty>,,29236,1,CPPASTTypeId,,<empty>
91063,UNKNOWN,1,,size_t,54,<empty>,,29236,1,CPPASTTypeId,,<empty>
91066,UNKNOWN,1,,char*,22,<empty>,,29237,1,CPPASTTypeId,,<empty>
91070,UNKNOWN,1,,char*,57,<empty>,,29237,1,CPPASTTypeId,,<empty>
91075,UNKNOWN,1,,size_t,20,<empty>,,29238,1,CPPASTTypeId,,<empty>
91078,UNKNOWN,1,,char*,45,<empty>,,29238,1,CPPASTTypeId,,<empty>
91082,UNKNOWN,1,,char*,22,<empty>,,29239,1,CPPASTTypeId,,<empty>
91347,UNKNOWN,1,,V1LayerParameter*,47,<empty>,,29286,1,CPPASTTypeId,,<empty>
91350,UNKNOWN,1,,void,4,<empty>,,29287,1,CPPASTTypeId,,<empty>
91376,UNKNOWN,1,,void,4,<empty>,,29299,1,CPPASTTypeId,,<empty>
91904,UNKNOWN,1,,uint8_t,47,<empty>,,29460,1,CPPASTTypeId,,<empty>
91935,UNKNOWN,1,,uint8_t,47,<empty>,,29468,1,CPPASTTypeId,,<empty>
92007,UNKNOWN,1,,uint8_t,47,<empty>,,29485,1,CPPASTTypeId,,<empty>
92079,UNKNOWN,1,,uint8_t,47,<empty>,,29502,1,CPPASTTypeId,,<empty>
92125,UNKNOWN,1,,uint8_t,47,<empty>,,29514,1,CPPASTTypeId,,<empty>
92159,UNKNOWN,1,,::opencv_caffe::V1LayerParameter_LayerType,44,<empty>,,29518,1,CPPASTTypeId,,<empty>
92182,UNKNOWN,1,,uint8_t,47,<empty>,,29527,1,CPPASTTypeId,,<empty>
92239,UNKNOWN,1,,uint8_t,47,<empty>,,29540,1,CPPASTTypeId,,<empty>
92286,UNKNOWN,1,,uint8_t,32,<empty>,,29548,1,CPPASTTypeId,,<empty>
92320,UNKNOWN,1,,uint8_t,47,<empty>,,29556,1,CPPASTTypeId,,<empty>
92367,UNKNOWN,1,,uint8_t,32,<empty>,,29564,1,CPPASTTypeId,,<empty>
92401,UNKNOWN,1,,uint8_t,47,<empty>,,29572,1,CPPASTTypeId,,<empty>
92432,UNKNOWN,1,,uint8_t,47,<empty>,,29580,1,CPPASTTypeId,,<empty>
92463,UNKNOWN,1,,uint8_t,47,<empty>,,29588,1,CPPASTTypeId,,<empty>
92494,UNKNOWN,1,,uint8_t,47,<empty>,,29596,1,CPPASTTypeId,,<empty>
92525,UNKNOWN,1,,uint8_t,47,<empty>,,29604,1,CPPASTTypeId,,<empty>
92556,UNKNOWN,1,,uint8_t,47,<empty>,,29612,1,CPPASTTypeId,,<empty>
92587,UNKNOWN,1,,uint8_t,47,<empty>,,29620,1,CPPASTTypeId,,<empty>
92618,UNKNOWN,1,,uint8_t,47,<empty>,,29628,1,CPPASTTypeId,,<empty>
92649,UNKNOWN,1,,uint8_t,47,<empty>,,29636,1,CPPASTTypeId,,<empty>
92680,UNKNOWN,1,,uint8_t,47,<empty>,,29644,1,CPPASTTypeId,,<empty>
92711,UNKNOWN,1,,uint8_t,47,<empty>,,29652,1,CPPASTTypeId,,<empty>
92742,UNKNOWN,1,,uint8_t,47,<empty>,,29660,1,CPPASTTypeId,,<empty>
92773,UNKNOWN,1,,uint8_t,47,<empty>,,29668,1,CPPASTTypeId,,<empty>
92804,UNKNOWN,1,,uint8_t,47,<empty>,,29676,1,CPPASTTypeId,,<empty>
92835,UNKNOWN,1,,uint8_t,47,<empty>,,29684,1,CPPASTTypeId,,<empty>
92866,UNKNOWN,1,,uint8_t,47,<empty>,,29692,1,CPPASTTypeId,,<empty>
92897,UNKNOWN,1,,uint8_t,47,<empty>,,29700,1,CPPASTTypeId,,<empty>
92928,UNKNOWN,1,,uint8_t,47,<empty>,,29708,1,CPPASTTypeId,,<empty>
92959,UNKNOWN,1,,uint8_t,47,<empty>,,29716,1,CPPASTTypeId,,<empty>
92990,UNKNOWN,1,,uint8_t,47,<empty>,,29724,1,CPPASTTypeId,,<empty>
93021,UNKNOWN,1,,uint8_t,47,<empty>,,29732,1,CPPASTTypeId,,<empty>
93052,UNKNOWN,1,,uint8_t,47,<empty>,,29740,1,CPPASTTypeId,,<empty>
93083,UNKNOWN,1,,uint8_t,47,<empty>,,29748,1,CPPASTTypeId,,<empty>
93140,UNKNOWN,1,,uint8_t,47,<empty>,,29761,1,CPPASTTypeId,,<empty>
93197,UNKNOWN,1,,uint8_t,47,<empty>,,29774,1,CPPASTTypeId,,<empty>
93228,UNKNOWN,1,,uint8_t,47,<empty>,,29782,1,CPPASTTypeId,,<empty>
93275,UNKNOWN,1,,uint8_t,32,<empty>,,29790,1,CPPASTTypeId,,<empty>
93309,UNKNOWN,1,,uint8_t,47,<empty>,,29798,1,CPPASTTypeId,,<empty>
93340,UNKNOWN,1,,uint8_t,47,<empty>,,29806,1,CPPASTTypeId,,<empty>
93371,UNKNOWN,1,,uint8_t,47,<empty>,,29814,1,CPPASTTypeId,,<empty>
93402,UNKNOWN,1,,uint8_t,47,<empty>,,29822,1,CPPASTTypeId,,<empty>
93433,UNKNOWN,1,,uint8_t,47,<empty>,,29830,1,CPPASTTypeId,,<empty>
93464,UNKNOWN,1,,uint8_t,47,<empty>,,29838,1,CPPASTTypeId,,<empty>
93495,UNKNOWN,1,,uint8_t,47,<empty>,,29846,1,CPPASTTypeId,,<empty>
93526,UNKNOWN,1,,uint8_t,47,<empty>,,29854,1,CPPASTTypeId,,<empty>
93598,UNKNOWN,1,,uint8_t,47,<empty>,,29871,1,CPPASTTypeId,,<empty>
93640,UNKNOWN,1,,::opencv_caffe::V1LayerParameter_DimCheckMode,57,<empty>,,29878,1,CPPASTTypeId,,<empty>
93676,UNKNOWN,1,,uint8_t,32,<empty>,,29884,1,CPPASTTypeId,,<empty>
93784,UNKNOWN,1,,void,4,<empty>,,29917,1,CPPASTTypeId,,<empty>
93861,UNKNOWN,1,,int,29,<empty>,,29932,1,CPPASTTypeId,,<empty>
93923,UNKNOWN,1,,int,29,<empty>,,29942,1,CPPASTTypeId,,<empty>
93966,UNKNOWN,1,,int,50,<empty>,,29951,1,CPPASTTypeId,,<empty>
94037,UNKNOWN,1,,unsigned int,23,<empty>,,29968,1,CPPASTTypeId,,<empty>
94834,UNKNOWN,1,,unsigned int,23,<empty>,,30165,1,CPPASTTypeId,,<empty>
94880,UNKNOWN,1,,unsigned int,23,<empty>,,30173,1,CPPASTTypeId,,<empty>
95239,UNKNOWN,1,,int,29,<empty>,,30253,1,CPPASTTypeId,,<empty>
95351,UNKNOWN,1,,void,4,<empty>,,30280,1,CPPASTTypeId,,<empty>
95479,UNKNOWN,1,,unsigned int,38,<empty>,,30307,1,CPPASTTypeId,,<empty>
95512,UNKNOWN,1,,unsigned int,38,<empty>,,30316,1,CPPASTTypeId,,<empty>
95595,UNKNOWN,1,,unsigned int,38,<empty>,,30339,1,CPPASTTypeId,,<empty>
95680,UNKNOWN,1,,unsigned int,38,<empty>,,30357,1,CPPASTTypeId,,<empty>
95712,UNKNOWN,1,,int,53,<empty>,,30359,1,CPPASTTypeId,,<empty>
96415,UNKNOWN,1,,V1LayerParameter *,15,<empty>,,30615,1,CPPASTTypeId,,<empty>
96419,UNKNOWN,1,,const V1LayerParameter &,19,<empty>,,30616,1,CPPASTTypeId,,<empty>
96435,UNKNOWN,1,,void,4,<empty>,,30624,1,CPPASTTypeId,,<empty>
97157,UNKNOWN,1,,char*,28,<empty>,,30784,1,CPPASTTypeId,,<empty>
97161,UNKNOWN,1,,char*,28,<empty>,,30785,1,CPPASTTypeId,,<empty>
97858,UNKNOWN,1,,size_t,17,<empty>,,30994,1,CPPASTTypeId,,<empty>
97861,UNKNOWN,1,,char*,42,<empty>,,30994,1,CPPASTTypeId,,<empty>
97865,UNKNOWN,1,,char*,22,<empty>,,30995,1,CPPASTTypeId,,<empty>
97929,UNKNOWN,1,,char*,27,<empty>,,31017,1,CPPASTTypeId,,<empty>
97932,UNKNOWN,1,,size_t,54,<empty>,,31017,1,CPPASTTypeId,,<empty>
97935,UNKNOWN,1,,char*,22,<empty>,,31018,1,CPPASTTypeId,,<empty>
97939,UNKNOWN,1,,char*,65,<empty>,,31018,1,CPPASTTypeId,,<empty>
97944,UNKNOWN,1,,size_t,20,<empty>,,31019,1,CPPASTTypeId,,<empty>
97947,UNKNOWN,1,,char*,45,<empty>,,31019,1,CPPASTTypeId,,<empty>
97951,UNKNOWN,1,,char*,22,<empty>,,31020,1,CPPASTTypeId,,<empty>
98097,UNKNOWN,1,,V0LayerParameter*,47,<empty>,,31056,1,CPPASTTypeId,,<empty>
98100,UNKNOWN,1,,void,4,<empty>,,31057,1,CPPASTTypeId,,<empty>
98126,UNKNOWN,1,,void,4,<empty>,,31069,1,CPPASTTypeId,,<empty>
98254,UNKNOWN,1,,size_t,43,<empty>,,31105,1,CPPASTTypeId,,<empty>
98257,UNKNOWN,1,,char*,26,<empty>,,31106,1,CPPASTTypeId,,<empty>
98261,UNKNOWN,1,,char*,26,<empty>,,31107,1,CPPASTTypeId,,<empty>
98280,UNKNOWN,1,,size_t,47,<empty>,,31110,1,CPPASTTypeId,,<empty>
98283,UNKNOWN,1,,char*,26,<empty>,,31111,1,CPPASTTypeId,,<empty>
98287,UNKNOWN,1,,char*,26,<empty>,,31112,1,CPPASTTypeId,,<empty>
98392,UNKNOWN,1,,uint8_t,47,<empty>,,31144,1,CPPASTTypeId,,<empty>
98438,UNKNOWN,1,,uint8_t,47,<empty>,,31156,1,CPPASTTypeId,,<empty>
98484,UNKNOWN,1,,uint8_t,47,<empty>,,31168,1,CPPASTTypeId,,<empty>
98523,UNKNOWN,1,,uint8_t,47,<empty>,,31177,1,CPPASTTypeId,,<empty>
98562,UNKNOWN,1,,uint8_t,47,<empty>,,31186,1,CPPASTTypeId,,<empty>
98593,UNKNOWN,1,,uint8_t,47,<empty>,,31194,1,CPPASTTypeId,,<empty>
98624,UNKNOWN,1,,uint8_t,47,<empty>,,31202,1,CPPASTTypeId,,<empty>
98663,UNKNOWN,1,,uint8_t,47,<empty>,,31211,1,CPPASTTypeId,,<empty>
98702,UNKNOWN,1,,uint8_t,47,<empty>,,31220,1,CPPASTTypeId,,<empty>
98741,UNKNOWN,1,,uint8_t,47,<empty>,,31229,1,CPPASTTypeId,,<empty>
98780,UNKNOWN,1,,uint8_t,47,<empty>,,31238,1,CPPASTTypeId,,<empty>
98814,UNKNOWN,1,,::opencv_caffe::V0LayerParameter_PoolMethod,44,<empty>,,31242,1,CPPASTTypeId,,<empty>
98837,UNKNOWN,1,,uint8_t,47,<empty>,,31251,1,CPPASTTypeId,,<empty>
98870,UNKNOWN,1,,uint8_t,47,<empty>,,31260,1,CPPASTTypeId,,<empty>
98909,UNKNOWN,1,,uint8_t,47,<empty>,,31269,1,CPPASTTypeId,,<empty>
98942,UNKNOWN,1,,uint8_t,47,<empty>,,31278,1,CPPASTTypeId,,<empty>
98975,UNKNOWN,1,,uint8_t,47,<empty>,,31287,1,CPPASTTypeId,,<empty>
99021,UNKNOWN,1,,uint8_t,47,<empty>,,31299,1,CPPASTTypeId,,<empty>
99054,UNKNOWN,1,,uint8_t,47,<empty>,,31308,1,CPPASTTypeId,,<empty>
99100,UNKNOWN,1,,uint8_t,47,<empty>,,31320,1,CPPASTTypeId,,<empty>
99139,UNKNOWN,1,,uint8_t,47,<empty>,,31329,1,CPPASTTypeId,,<empty>
99178,UNKNOWN,1,,uint8_t,47,<empty>,,31338,1,CPPASTTypeId,,<empty>
99217,UNKNOWN,1,,uint8_t,47,<empty>,,31347,1,CPPASTTypeId,,<empty>
99250,UNKNOWN,1,,uint8_t,47,<empty>,,31356,1,CPPASTTypeId,,<empty>
99307,UNKNOWN,1,,uint8_t,47,<empty>,,31369,1,CPPASTTypeId,,<empty>
99354,UNKNOWN,1,,uint8_t,32,<empty>,,31377,1,CPPASTTypeId,,<empty>
99388,UNKNOWN,1,,uint8_t,47,<empty>,,31385,1,CPPASTTypeId,,<empty>
99435,UNKNOWN,1,,uint8_t,32,<empty>,,31393,1,CPPASTTypeId,,<empty>
99469,UNKNOWN,1,,uint8_t,47,<empty>,,31401,1,CPPASTTypeId,,<empty>
99508,UNKNOWN,1,,uint8_t,47,<empty>,,31410,1,CPPASTTypeId,,<empty>
99541,UNKNOWN,1,,uint8_t,47,<empty>,,31419,1,CPPASTTypeId,,<empty>
99574,UNKNOWN,1,,uint8_t,47,<empty>,,31428,1,CPPASTTypeId,,<empty>
99607,UNKNOWN,1,,uint8_t,47,<empty>,,31437,1,CPPASTTypeId,,<empty>
99646,UNKNOWN,1,,uint8_t,47,<empty>,,31446,1,CPPASTTypeId,,<empty>
99692,UNKNOWN,1,,uint8_t,47,<empty>,,31458,1,CPPASTTypeId,,<empty>
99731,UNKNOWN,1,,uint8_t,47,<empty>,,31467,1,CPPASTTypeId,,<empty>
99770,UNKNOWN,1,,uint8_t,47,<empty>,,31476,1,CPPASTTypeId,,<empty>
99809,UNKNOWN,1,,uint8_t,47,<empty>,,31485,1,CPPASTTypeId,,<empty>
99848,UNKNOWN,1,,uint8_t,47,<empty>,,31494,1,CPPASTTypeId,,<empty>
99887,UNKNOWN,1,,uint8_t,47,<empty>,,31503,1,CPPASTTypeId,,<empty>
99926,UNKNOWN,1,,uint8_t,47,<empty>,,31512,1,CPPASTTypeId,,<empty>
100019,UNKNOWN,1,,void,4,<empty>,,31545,1,CPPASTTypeId,,<empty>
100047,UNKNOWN,1,,int,50,<empty>,,31551,1,CPPASTTypeId,,<empty>
100096,UNKNOWN,1,,int,50,<empty>,,31561,1,CPPASTTypeId,,<empty>
100513,UNKNOWN,1,,int,52,<empty>,,31654,1,CPPASTTypeId,,<empty>
100590,UNKNOWN,1,,int,54,<empty>,,31670,1,CPPASTTypeId,,<empty>
100740,UNKNOWN,1,,unsigned int,23,<empty>,,31703,1,CPPASTTypeId,,<empty>
101033,UNKNOWN,1,,int,59,<empty>,,31756,1,CPPASTTypeId,,<empty>
101306,UNKNOWN,1,,void,4,<empty>,,31821,1,CPPASTTypeId,,<empty>
101338,UNKNOWN,1,,unsigned int,38,<empty>,,31832,1,CPPASTTypeId,,<empty>
101371,UNKNOWN,1,,unsigned int,38,<empty>,,31841,1,CPPASTTypeId,,<empty>
102063,UNKNOWN,1,,V0LayerParameter *,15,<empty>,,32081,1,CPPASTTypeId,,<empty>
102067,UNKNOWN,1,,const V0LayerParameter &,19,<empty>,,32082,1,CPPASTTypeId,,<empty>
102083,UNKNOWN,1,,void,4,<empty>,,32090,1,CPPASTTypeId,,<empty>
102753,UNKNOWN,1,,char*,28,<empty>,,32269,1,CPPASTTypeId,,<empty>
102757,UNKNOWN,1,,char*,28,<empty>,,32270,1,CPPASTTypeId,,<empty>
102947,UNKNOWN,1,,char*,27,<empty>,,32333,1,CPPASTTypeId,,<empty>
102950,UNKNOWN,1,,size_t,54,<empty>,,32333,1,CPPASTTypeId,,<empty>
102953,UNKNOWN,1,,char*,22,<empty>,,32334,1,CPPASTTypeId,,<empty>
102957,UNKNOWN,1,,char*,58,<empty>,,32334,1,CPPASTTypeId,,<empty>
102962,UNKNOWN,1,,size_t,20,<empty>,,32335,1,CPPASTTypeId,,<empty>
102965,UNKNOWN,1,,char*,45,<empty>,,32335,1,CPPASTTypeId,,<empty>
102969,UNKNOWN,1,,char*,22,<empty>,,32336,1,CPPASTTypeId,,<empty>
103013,UNKNOWN,1,,PReLUParameter*,45,<empty>,,32352,1,CPPASTTypeId,,<empty>
103016,UNKNOWN,1,,void,4,<empty>,,32353,1,CPPASTTypeId,,<empty>
103042,UNKNOWN,1,,void,4,<empty>,,32365,1,CPPASTTypeId,,<empty>
103115,UNKNOWN,1,,uint8_t,47,<empty>,,32386,1,CPPASTTypeId,,<empty>
103146,UNKNOWN,1,,uint8_t,47,<empty>,,32394,1,CPPASTTypeId,,<empty>
103252,UNKNOWN,1,,void,4,<empty>,,32429,1,CPPASTTypeId,,<empty>
103364,UNKNOWN,1,,void,4,<empty>,,32460,1,CPPASTTypeId,,<empty>
103438,UNKNOWN,1,,PReLUParameter *,15,<empty>,,32488,1,CPPASTTypeId,,<empty>
103442,UNKNOWN,1,,const PReLUParameter &,19,<empty>,,32489,1,CPPASTTypeId,,<empty>
103458,UNKNOWN,1,,void,4,<empty>,,32497,1,CPPASTTypeId,,<empty>
103576,UNKNOWN,1,,char*,28,<empty>,,32531,1,CPPASTTypeId,,<empty>
103580,UNKNOWN,1,,char*,28,<empty>,,32532,1,CPPASTTypeId,,<empty>
103734,UNKNOWN,1,,size_t,17,<empty>,,32586,1,CPPASTTypeId,,<empty>
103737,UNKNOWN,1,,char*,42,<empty>,,32586,1,CPPASTTypeId,,<empty>
103741,UNKNOWN,1,,char*,22,<empty>,,32587,1,CPPASTTypeId,,<empty>
103756,UNKNOWN,1,,char*,27,<empty>,,32592,1,CPPASTTypeId,,<empty>
103759,UNKNOWN,1,,size_t,54,<empty>,,32592,1,CPPASTTypeId,,<empty>
103762,UNKNOWN,1,,char*,22,<empty>,,32593,1,CPPASTTypeId,,<empty>
103766,UNKNOWN,1,,char*,56,<empty>,,32593,1,CPPASTTypeId,,<empty>
103771,UNKNOWN,1,,size_t,20,<empty>,,32594,1,CPPASTTypeId,,<empty>
103774,UNKNOWN,1,,char*,45,<empty>,,32594,1,CPPASTTypeId,,<empty>
103778,UNKNOWN,1,,char*,22,<empty>,,32595,1,CPPASTTypeId,,<empty>
103815,UNKNOWN,1,,NormalizedBBox*,45,<empty>,,32610,1,CPPASTTypeId,,<empty>
103818,UNKNOWN,1,,void,4,<empty>,,32611,1,CPPASTTypeId,,<empty>
103844,UNKNOWN,1,,void,4,<empty>,,32623,1,CPPASTTypeId,,<empty>
103865,UNKNOWN,1,,size_t,37,<empty>,,32627,1,CPPASTTypeId,,<empty>
103868,UNKNOWN,1,,char*,26,<empty>,,32628,1,CPPASTTypeId,,<empty>
103872,UNKNOWN,1,,char*,26,<empty>,,32629,1,CPPASTTypeId,,<empty>
103927,UNKNOWN,1,,uint8_t,47,<empty>,,32644,1,CPPASTTypeId,,<empty>
103960,UNKNOWN,1,,uint8_t,47,<empty>,,32653,1,CPPASTTypeId,,<empty>
103993,UNKNOWN,1,,uint8_t,47,<empty>,,32662,1,CPPASTTypeId,,<empty>
104026,UNKNOWN,1,,uint8_t,47,<empty>,,32671,1,CPPASTTypeId,,<empty>
104059,UNKNOWN,1,,uint8_t,47,<empty>,,32680,1,CPPASTTypeId,,<empty>
104098,UNKNOWN,1,,uint8_t,47,<empty>,,32689,1,CPPASTTypeId,,<empty>
104137,UNKNOWN,1,,uint8_t,47,<empty>,,32698,1,CPPASTTypeId,,<empty>
104170,UNKNOWN,1,,uint8_t,47,<empty>,,32707,1,CPPASTTypeId,,<empty>
104270,UNKNOWN,1,,void,4,<empty>,,32742,1,CPPASTTypeId,,<empty>
104548,UNKNOWN,1,,void,4,<empty>,,32807,1,CPPASTTypeId,,<empty>
104682,UNKNOWN,1,,NormalizedBBox *,15,<empty>,,32863,1,CPPASTTypeId,,<empty>
104686,UNKNOWN,1,,const NormalizedBBox &,19,<empty>,,32864,1,CPPASTTypeId,,<empty>
104702,UNKNOWN,1,,void,4,<empty>,,32872,1,CPPASTTypeId,,<empty>
104877,UNKNOWN,1,,char*,28,<empty>,,32924,1,CPPASTTypeId,,<empty>
104881,UNKNOWN,1,,char*,28,<empty>,,32925,1,CPPASTTypeId,,<empty>
104980,UNKNOWN,1,,size_t,17,<empty>,,32964,1,CPPASTTypeId,,<empty>
104983,UNKNOWN,1,,char*,42,<empty>,,32964,1,CPPASTTypeId,,<empty>
104987,UNKNOWN,1,,char*,22,<empty>,,32965,1,CPPASTTypeId,,<empty>
105002,UNKNOWN,1,,char*,27,<empty>,,32970,1,CPPASTTypeId,,<empty>
105005,UNKNOWN,1,,size_t,54,<empty>,,32970,1,CPPASTTypeId,,<empty>
105008,UNKNOWN,1,,char*,22,<empty>,,32971,1,CPPASTTypeId,,<empty>
105012,UNKNOWN,1,,char*,60,<empty>,,32971,1,CPPASTTypeId,,<empty>
105017,UNKNOWN,1,,size_t,20,<empty>,,32972,1,CPPASTTypeId,,<empty>
105020,UNKNOWN,1,,char*,45,<empty>,,32972,1,CPPASTTypeId,,<empty>
105024,UNKNOWN,1,,char*,22,<empty>,,32973,1,CPPASTTypeId,,<empty>
105064,UNKNOWN,1,,ROIPoolingParameter*,50,<empty>,,32989,1,CPPASTTypeId,,<empty>
105067,UNKNOWN,1,,void,4,<empty>,,32990,1,CPPASTTypeId,,<empty>
105093,UNKNOWN,1,,void,4,<empty>,,33002,1,CPPASTTypeId,,<empty>
105114,UNKNOWN,1,,size_t,41,<empty>,,33006,1,CPPASTTypeId,,<empty>
105117,UNKNOWN,1,,char*,26,<empty>,,33007,1,CPPASTTypeId,,<empty>
105121,UNKNOWN,1,,char*,26,<empty>,,33008,1,CPPASTTypeId,,<empty>
105179,UNKNOWN,1,,uint8_t,47,<empty>,,33024,1,CPPASTTypeId,,<empty>
105218,UNKNOWN,1,,uint8_t,47,<empty>,,33033,1,CPPASTTypeId,,<empty>
105257,UNKNOWN,1,,uint8_t,47,<empty>,,33042,1,CPPASTTypeId,,<empty>
105357,UNKNOWN,1,,void,4,<empty>,,33077,1,CPPASTTypeId,,<empty>
105495,UNKNOWN,1,,void,4,<empty>,,33112,1,CPPASTTypeId,,<empty>
105588,UNKNOWN,1,,ROIPoolingParameter *,15,<empty>,,33143,1,CPPASTTypeId,,<empty>
105592,UNKNOWN,1,,const ROIPoolingParameter &,19,<empty>,,33144,1,CPPASTTypeId,,<empty>
105608,UNKNOWN,1,,void,4,<empty>,,33152,1,CPPASTTypeId,,<empty>
105733,UNKNOWN,1,,char*,28,<empty>,,33189,1,CPPASTTypeId,,<empty>
105737,UNKNOWN,1,,char*,28,<empty>,,33190,1,CPPASTTypeId,,<empty>
105874,UNKNOWN,1,,size_t,17,<empty>,,33243,1,CPPASTTypeId,,<empty>
105877,UNKNOWN,1,,char*,42,<empty>,,33243,1,CPPASTTypeId,,<empty>
105881,UNKNOWN,1,,char*,22,<empty>,,33244,1,CPPASTTypeId,,<empty>
105940,UNKNOWN,1,,ProposalParameter*,48,<empty>,,33269,1,CPPASTTypeId,,<empty>
105943,UNKNOWN,1,,void,4,<empty>,,33270,1,CPPASTTypeId,,<empty>
105969,UNKNOWN,1,,void,4,<empty>,,33282,1,CPPASTTypeId,,<empty>
106057,UNKNOWN,1,,uint8_t,47,<empty>,,33308,1,CPPASTTypeId,,<empty>
106096,UNKNOWN,1,,uint8_t,47,<empty>,,33317,1,CPPASTTypeId,,<empty>
106135,UNKNOWN,1,,uint8_t,47,<empty>,,33326,1,CPPASTTypeId,,<empty>
106174,UNKNOWN,1,,uint8_t,47,<empty>,,33335,1,CPPASTTypeId,,<empty>
106221,UNKNOWN,1,,uint8_t,32,<empty>,,33343,1,CPPASTTypeId,,<empty>
106255,UNKNOWN,1,,uint8_t,47,<empty>,,33351,1,CPPASTTypeId,,<empty>
106302,UNKNOWN,1,,uint8_t,32,<empty>,,33359,1,CPPASTTypeId,,<empty>
106336,UNKNOWN,1,,uint8_t,47,<empty>,,33367,1,CPPASTTypeId,,<empty>
106375,UNKNOWN,1,,uint8_t,47,<empty>,,33376,1,CPPASTTypeId,,<empty>
106414,UNKNOWN,1,,uint8_t,47,<empty>,,33385,1,CPPASTTypeId,,<empty>
106514,UNKNOWN,1,,void,4,<empty>,,33420,1,CPPASTTypeId,,<empty>
106822,UNKNOWN,1,,void,4,<empty>,,33485,1,CPPASTTypeId,,<empty>
106829,UNKNOWN,1,,unsigned int,38,<empty>,,33489,1,CPPASTTypeId,,<empty>
106862,UNKNOWN,1,,unsigned int,38,<empty>,,33498,1,CPPASTTypeId,,<empty>
107038,UNKNOWN,1,,ProposalParameter *,15,<empty>,,33549,1,CPPASTTypeId,,<empty>
107042,UNKNOWN,1,,const ProposalParameter &,19,<empty>,,33550,1,CPPASTTypeId,,<empty>
107058,UNKNOWN,1,,void,4,<empty>,,33558,1,CPPASTTypeId,,<empty>
107360,UNKNOWN,1,,size_t,17,<empty>,,33651,1,CPPASTTypeId,,<empty>
107363,UNKNOWN,1,,char*,42,<empty>,,33651,1,CPPASTTypeId,,<empty>
107367,UNKNOWN,1,,char*,22,<empty>,,33652,1,CPPASTTypeId,,<empty>
107382,UNKNOWN,1,,char*,27,<empty>,,33657,1,CPPASTTypeId,,<empty>
107385,UNKNOWN,1,,size_t,54,<empty>,,33657,1,CPPASTTypeId,,<empty>
107388,UNKNOWN,1,,char*,22,<empty>,,33658,1,CPPASTTypeId,,<empty>
107392,UNKNOWN,1,,char*,65,<empty>,,33658,1,CPPASTTypeId,,<empty>
107397,UNKNOWN,1,,size_t,20,<empty>,,33659,1,CPPASTTypeId,,<empty>
107400,UNKNOWN,1,,char*,45,<empty>,,33659,1,CPPASTTypeId,,<empty>
107404,UNKNOWN,1,,char*,22,<empty>,,33660,1,CPPASTTypeId,,<empty>
107441,UNKNOWN,1,,PSROIPoolingParameter*,52,<empty>,,33675,1,CPPASTTypeId,,<empty>
107444,UNKNOWN,1,,void,4,<empty>,,33676,1,CPPASTTypeId,,<empty>
107470,UNKNOWN,1,,void,4,<empty>,,33688,1,CPPASTTypeId,,<empty>
107491,UNKNOWN,1,,size_t,46,<empty>,,33692,1,CPPASTTypeId,,<empty>
107494,UNKNOWN,1,,char*,26,<empty>,,33693,1,CPPASTTypeId,,<empty>
107498,UNKNOWN,1,,char*,26,<empty>,,33694,1,CPPASTTypeId,,<empty>
107553,UNKNOWN,1,,uint8_t,47,<empty>,,33709,1,CPPASTTypeId,,<empty>
107586,UNKNOWN,1,,uint8_t,47,<empty>,,33718,1,CPPASTTypeId,,<empty>
107625,UNKNOWN,1,,uint8_t,47,<empty>,,33727,1,CPPASTTypeId,,<empty>
107731,UNKNOWN,1,,void,4,<empty>,,33762,1,CPPASTTypeId,,<empty>
107970,UNKNOWN,1,,void,4,<empty>,,33831,1,CPPASTTypeId,,<empty>
108005,UNKNOWN,1,,PSROIPoolingParameter *,15,<empty>,,33844,1,CPPASTTypeId,,<empty>
108009,UNKNOWN,1,,const PSROIPoolingParameter &,19,<empty>,,33845,1,CPPASTTypeId,,<empty>
108025,UNKNOWN,1,,void,4,<empty>,,33853,1,CPPASTTypeId,,<empty>
108159,UNKNOWN,1,,char*,28,<empty>,,33891,1,CPPASTTypeId,,<empty>
108163,UNKNOWN,1,,char*,28,<empty>,,33892,1,CPPASTTypeId,,<empty>
108188,UNKNOWN,23,,PROTOBUF_NAMESPACE_OPEN,1,<empty>,,33903,23,CPPASTProblemDeclaration,,<empty>
109254,UNKNOWN,95,,PROTOBUF_NAMESPACE_CLOSE,1,<empty>,,34117,95,CPPASTProblemDeclaration,,<empty>
109296,UNKNOWN,1,,PROTOBUF_NAMESPACE_OPEN,1,<empty>,,38,1,CPPASTProblemDeclaration,,<empty>
109299,UNKNOWN,3,,PROTOBUF_NAMESPACE_CLOSE,1,<empty>,,42,3,CPPASTProblemDeclaration,,<empty>
109302,UNKNOWN,-1,,],75,<empty>,,46,2,CPPASTProblemDeclaration,,<empty>
109305,UNKNOWN,-1,,],80,<empty>,,48,5,CPPASTProblemDeclaration,,<empty>
109308,UNKNOWN,-1,,],71,<empty>,,50,8,CPPASTProblemDeclaration,,<empty>
109539,UNKNOWN,7,,PROTOBUF_NAMESPACE_OPEN,1,<empty>,,272,7,CPPASTProblemDeclaration,,<empty>
109895,UNKNOWN,79,,PROTOBUF_NAMESPACE_CLOSE,1,<empty>,,344,79,CPPASTProblemDeclaration,,<empty>
112630,UNKNOWN,1,,const BlobShape*,29,<empty>,,1083,1,CPPASTTypeId,,<empty>
112726,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,1123,23,CPPASTProblemDeclaration,,<empty>
113024,UNKNOWN,1,,const BlobProto*,29,<empty>,,1250,1,CPPASTTypeId,,<empty>
113120,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,1290,23,CPPASTProblemDeclaration,,<empty>
113495,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,1438,97,CPPASTProblemDeclaration,,<empty>
113509,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_raw_data(const std::string& value);,3,<empty>,,1442,101,CPPASTProblemDeclaration,,<empty>
113871,UNKNOWN,1,,const BlobProtoVector*,29,<empty>,,1604,1,CPPASTTypeId,,<empty>
113967,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,1644,23,CPPASTProblemDeclaration,,<empty>
114253,UNKNOWN,1,,const PermuteParameter*,29,<empty>,,1766,1,CPPASTTypeId,,<empty>
114349,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,1806,23,CPPASTProblemDeclaration,,<empty>
114646,UNKNOWN,1,,const NormalizeBBoxParameter*,29,<empty>,,1932,1,CPPASTTypeId,,<empty>
114742,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,1972,23,CPPASTProblemDeclaration,,<empty>
115137,UNKNOWN,1,,const PriorBoxParameter*,29,<empty>,,2140,1,CPPASTTypeId,,<empty>
115233,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,2180,23,CPPASTProblemDeclaration,,<empty>
116329,UNKNOWN,1,,const DetectionOutputParameter*,29,<empty>,,2640,1,CPPASTTypeId,,<empty>
116425,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,2680,23,CPPASTProblemDeclaration,,<empty>
117081,UNKNOWN,1,,const Datum*,29,<empty>,,2958,1,CPPASTTypeId,,<empty>
117177,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,2998,23,CPPASTProblemDeclaration,,<empty>
117374,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,3076,61,CPPASTProblemDeclaration,,<empty>
117388,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);,3,<empty>,,3080,65,CPPASTProblemDeclaration,,<empty>
117700,UNKNOWN,1,,const FillerParameter*,29,<empty>,,3220,1,CPPASTTypeId,,<empty>
117796,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,3260,23,CPPASTProblemDeclaration,,<empty>
117999,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,3349,60,CPPASTProblemDeclaration,,<empty>
118013,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);,3,<empty>,,3353,64,CPPASTProblemDeclaration,,<empty>
118405,UNKNOWN,1,,const NetParameter*,29,<empty>,,3521,1,CPPASTTypeId,,<empty>
118501,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,3561,23,CPPASTProblemDeclaration,,<empty>
118913,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,3719,107,CPPASTProblemDeclaration,,<empty>
118927,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);,3,<empty>,,3723,111,CPPASTProblemDeclaration,,<empty>
119197,UNKNOWN,1,,const SolverParameter*,29,<empty>,,3844,1,CPPASTTypeId,,<empty>
119293,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,3884,23,CPPASTProblemDeclaration,,<empty>
120009,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,4175,143,CPPASTProblemDeclaration,,<empty>
120023,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_train_net(const std::string& value);,3,<empty>,,4179,147,CPPASTProblemDeclaration,,<empty>
120054,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,4193,155,CPPASTProblemDeclaration,,<empty>
120068,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_lr_policy(const std::string& value);,3,<empty>,,4197,159,CPPASTProblemDeclaration,,<empty>
120099,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,4211,167,CPPASTProblemDeclaration,,<empty>
120113,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_snapshot_prefix(const std::string& value);,3,<empty>,,4215,171,CPPASTProblemDeclaration,,<empty>
120144,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,4229,179,CPPASTProblemDeclaration,,<empty>
120158,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_net(const std::string& value);,3,<empty>,,4233,183,CPPASTProblemDeclaration,,<empty>
120189,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,4247,191,CPPASTProblemDeclaration,,<empty>
120203,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_regularization_type(const std::string& value);,3,<empty>,,4251,195,CPPASTProblemDeclaration,,<empty>
120234,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,4265,203,CPPASTProblemDeclaration,,<empty>
120248,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);,3,<empty>,,4269,207,CPPASTProblemDeclaration,,<empty>
121420,UNKNOWN,1,,const SolverState*,29,<empty>,,4771,1,CPPASTTypeId,,<empty>
121516,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,4811,23,CPPASTProblemDeclaration,,<empty>
121690,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,4882,59,CPPASTProblemDeclaration,,<empty>
121704,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_learned_net(const std::string& value);,3,<empty>,,4886,63,CPPASTProblemDeclaration,,<empty>
121923,UNKNOWN,1,,const NetState*,29,<empty>,,4984,1,CPPASTTypeId,,<empty>
122019,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,5024,23,CPPASTProblemDeclaration,,<empty>
122411,UNKNOWN,1,,const NetStateRule*,29,<empty>,,5183,1,CPPASTTypeId,,<empty>
122507,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,5223,23,CPPASTProblemDeclaration,,<empty>
123017,UNKNOWN,1,,const ParamSpec*,29,<empty>,,5423,1,CPPASTTypeId,,<empty>
123113,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,5463,23,CPPASTProblemDeclaration,,<empty>
123299,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,5546,59,CPPASTProblemDeclaration,,<empty>
123313,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);,3,<empty>,,5550,63,CPPASTProblemDeclaration,,<empty>
123577,UNKNOWN,1,,const LayerParameter*,29,<empty>,,5661,1,CPPASTTypeId,,<empty>
123673,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,5701,23,CPPASTProblemDeclaration,,<empty>
124484,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,5979,145,CPPASTProblemDeclaration,,<empty>
124498,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);,3,<empty>,,5983,149,CPPASTProblemDeclaration,,<empty>
124529,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,5997,157,CPPASTProblemDeclaration,,<empty>
124543,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);,3,<empty>,,6001,161,CPPASTProblemDeclaration,,<empty>
127277,UNKNOWN,1,,const TransformationParameter*,29,<empty>,,7119,1,CPPASTTypeId,,<empty>
127373,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,7159,23,CPPASTProblemDeclaration,,<empty>
127570,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,7237,61,CPPASTProblemDeclaration,,<empty>
127584,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_mean_file(const std::string& value);,3,<empty>,,7241,65,CPPASTProblemDeclaration,,<empty>
127896,UNKNOWN,1,,const LossParameter*,29,<empty>,,7381,1,CPPASTTypeId,,<empty>
127992,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,7421,23,CPPASTProblemDeclaration,,<empty>
128414,UNKNOWN,1,,const AccuracyParameter*,29,<empty>,,7603,1,CPPASTTypeId,,<empty>
128510,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,7643,23,CPPASTProblemDeclaration,,<empty>
128854,UNKNOWN,1,,const ArgMaxParameter*,29,<empty>,,7791,1,CPPASTTypeId,,<empty>
128950,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,7831,23,CPPASTProblemDeclaration,,<empty>
129294,UNKNOWN,1,,const ConcatParameter*,29,<empty>,,7979,1,CPPASTTypeId,,<empty>
129390,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,8019,23,CPPASTProblemDeclaration,,<empty>
129699,UNKNOWN,1,,const BatchNormParameter*,29,<empty>,,8152,1,CPPASTTypeId,,<empty>
129795,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,8192,23,CPPASTProblemDeclaration,,<empty>
130174,UNKNOWN,1,,const BiasParameter*,29,<empty>,,8355,1,CPPASTTypeId,,<empty>
130270,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,8395,23,CPPASTProblemDeclaration,,<empty>
130630,UNKNOWN,1,,const ContrastiveLossParameter*,29,<empty>,,8548,1,CPPASTTypeId,,<empty>
130726,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,8588,23,CPPASTProblemDeclaration,,<empty>
131035,UNKNOWN,1,,const ConvolutionParameter*,29,<empty>,,8721,1,CPPASTTypeId,,<empty>
131131,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,8761,23,CPPASTProblemDeclaration,,<empty>
132202,UNKNOWN,1,,const CropParameter*,29,<empty>,,9212,1,CPPASTTypeId,,<empty>
132298,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,9252,23,CPPASTProblemDeclaration,,<empty>
132631,UNKNOWN,1,,const DataParameter*,29,<empty>,,9394,1,CPPASTTypeId,,<empty>
132727,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,9434,23,CPPASTProblemDeclaration,,<empty>
132937,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,9523,59,CPPASTProblemDeclaration,,<empty>
132951,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(const std::string& value);,3,<empty>,,9527,63,CPPASTProblemDeclaration,,<empty>
132982,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,9541,71,CPPASTProblemDeclaration,,<empty>
132996,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_mean_file(const std::string& value);,3,<empty>,,9545,75,CPPASTProblemDeclaration,,<empty>
133416,UNKNOWN,1,,const NonMaximumSuppressionParameter*,29,<empty>,,9727,1,CPPASTTypeId,,<empty>
133512,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,9767,23,CPPASTProblemDeclaration,,<empty>
133856,UNKNOWN,1,,const SaveOutputParameter*,29,<empty>,,9915,1,CPPASTTypeId,,<empty>
133952,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,9955,23,CPPASTProblemDeclaration,,<empty>
134091,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,10010,49,CPPASTProblemDeclaration,,<empty>
134105,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_directory(const std::string& value);,3,<empty>,,10014,53,CPPASTProblemDeclaration,,<empty>
134136,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,10028,61,CPPASTProblemDeclaration,,<empty>
134150,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_name_prefix(const std::string& value);,3,<empty>,,10032,65,CPPASTProblemDeclaration,,<empty>
134181,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,10046,73,CPPASTProblemDeclaration,,<empty>
134195,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_format(const std::string& value);,3,<empty>,,10050,77,CPPASTProblemDeclaration,,<empty>
134226,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,10064,85,CPPASTProblemDeclaration,,<empty>
134240,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_label_map_file(const std::string& value);,3,<empty>,,10068,89,CPPASTProblemDeclaration,,<empty>
134271,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,10082,97,CPPASTProblemDeclaration,,<empty>
134285,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_size_file(const std::string& value);,3,<empty>,,10086,101,CPPASTProblemDeclaration,,<empty>
134476,UNKNOWN,1,,const DropoutParameter*,29,<empty>,,10173,1,CPPASTTypeId,,<empty>
134572,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,10213,23,CPPASTProblemDeclaration,,<empty>
134881,UNKNOWN,1,,const DummyDataParameter*,29,<empty>,,10346,1,CPPASTTypeId,,<empty>
134977,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,10386,23,CPPASTProblemDeclaration,,<empty>
135547,UNKNOWN,1,,const EltwiseParameter*,29,<empty>,,10624,1,CPPASTTypeId,,<empty>
135643,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,10664,23,CPPASTProblemDeclaration,,<empty>
136085,UNKNOWN,1,,const ELUParameter*,29,<empty>,,10853,1,CPPASTTypeId,,<empty>
136181,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,10893,23,CPPASTProblemDeclaration,,<empty>
136455,UNKNOWN,1,,const EmbedParameter*,29,<empty>,,11011,1,CPPASTTypeId,,<empty>
136551,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,11051,23,CPPASTProblemDeclaration,,<empty>
136997,UNKNOWN,1,,const ExpParameter*,29,<empty>,,11239,1,CPPASTTypeId,,<empty>
137093,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,11279,23,CPPASTProblemDeclaration,,<empty>
137437,UNKNOWN,1,,const FlattenParameter*,29,<empty>,,11427,1,CPPASTTypeId,,<empty>
137533,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,11467,23,CPPASTProblemDeclaration,,<empty>
137842,UNKNOWN,1,,const HDF5DataParameter*,29,<empty>,,11600,1,CPPASTTypeId,,<empty>
137938,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,11640,23,CPPASTProblemDeclaration,,<empty>
138065,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,11692,49,CPPASTProblemDeclaration,,<empty>
138079,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(const std::string& value);,3,<empty>,,11696,53,CPPASTProblemDeclaration,,<empty>
138297,UNKNOWN,1,,const HDF5OutputParameter*,29,<empty>,,11793,1,CPPASTTypeId,,<empty>
138393,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,11833,23,CPPASTProblemDeclaration,,<empty>
138512,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,11883,49,CPPASTProblemDeclaration,,<empty>
138526,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);,3,<empty>,,11887,53,CPPASTProblemDeclaration,,<empty>
138682,UNKNOWN,1,,const HingeLossParameter*,29,<empty>,,11956,1,CPPASTTypeId,,<empty>
138778,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,11996,23,CPPASTProblemDeclaration,,<empty>
139122,UNKNOWN,1,,const ImageDataParameter*,29,<empty>,,12144,1,CPPASTTypeId,,<empty>
139218,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,12184,23,CPPASTProblemDeclaration,,<empty>
139381,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,12245,49,CPPASTProblemDeclaration,,<empty>
139395,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(const std::string& value);,3,<empty>,,12249,53,CPPASTProblemDeclaration,,<empty>
139426,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,12263,61,CPPASTProblemDeclaration,,<empty>
139440,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_mean_file(const std::string& value);,3,<empty>,,12267,65,CPPASTProblemDeclaration,,<empty>
139471,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,12281,73,CPPASTProblemDeclaration,,<empty>
139485,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_root_folder(const std::string& value);,3,<empty>,,12285,77,CPPASTProblemDeclaration,,<empty>
139922,UNKNOWN,1,,const InfogainLossParameter*,29,<empty>,,12482,1,CPPASTTypeId,,<empty>
140018,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,12522,23,CPPASTProblemDeclaration,,<empty>
140137,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,12572,49,CPPASTProblemDeclaration,,<empty>
140151,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(const std::string& value);,3,<empty>,,12576,53,CPPASTProblemDeclaration,,<empty>
140307,UNKNOWN,1,,const InnerProductParameter*,29,<empty>,,12645,1,CPPASTTypeId,,<empty>
140403,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,12685,23,CPPASTProblemDeclaration,,<empty>
140884,UNKNOWN,1,,const InputParameter*,29,<empty>,,12888,1,CPPASTTypeId,,<empty>
140980,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,12928,23,CPPASTProblemDeclaration,,<empty>
141266,UNKNOWN,1,,const LogParameter*,29,<empty>,,13050,1,CPPASTTypeId,,<empty>
141362,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,13090,23,CPPASTProblemDeclaration,,<empty>
141706,UNKNOWN,1,,const LRNParameter*,29,<empty>,,13238,1,CPPASTTypeId,,<empty>
141802,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,13278,23,CPPASTProblemDeclaration,,<empty>
142395,UNKNOWN,1,,const MemoryDataParameter*,29,<empty>,,13533,1,CPPASTTypeId,,<empty>
142491,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,13573,23,CPPASTProblemDeclaration,,<empty>
142870,UNKNOWN,1,,const MVNParameter*,29,<empty>,,13736,1,CPPASTTypeId,,<empty>
142966,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,13776,23,CPPASTProblemDeclaration,,<empty>
143310,UNKNOWN,1,,const ParameterParameter*,29,<empty>,,13924,1,CPPASTTypeId,,<empty>
143406,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,13964,23,CPPASTProblemDeclaration,,<empty>
143696,UNKNOWN,1,,const PoolingParameter*,29,<empty>,,14087,1,CPPASTTypeId,,<empty>
143792,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,14127,23,CPPASTProblemDeclaration,,<empty>
144634,UNKNOWN,1,,const PowerParameter*,29,<empty>,,14489,1,CPPASTTypeId,,<empty>
144730,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,14529,23,CPPASTProblemDeclaration,,<empty>
145074,UNKNOWN,1,,const PythonParameter*,29,<empty>,,14677,1,CPPASTTypeId,,<empty>
145170,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,14717,23,CPPASTProblemDeclaration,,<empty>
145301,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,14770,49,CPPASTProblemDeclaration,,<empty>
145315,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_module(const std::string& value);,3,<empty>,,14774,53,CPPASTProblemDeclaration,,<empty>
145346,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,14788,61,CPPASTProblemDeclaration,,<empty>
145360,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_layer(const std::string& value);,3,<empty>,,14792,65,CPPASTProblemDeclaration,,<empty>
145391,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,14806,73,CPPASTProblemDeclaration,,<empty>
145405,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_param_str(const std::string& value);,3,<empty>,,14810,77,CPPASTProblemDeclaration,,<empty>
145594,UNKNOWN,1,,const RecurrentParameter*,29,<empty>,,14895,1,CPPASTTypeId,,<empty>
145690,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,14935,23,CPPASTProblemDeclaration,,<empty>
146136,UNKNOWN,1,,const ReductionParameter*,29,<empty>,,15123,1,CPPASTTypeId,,<empty>
146232,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,15163,23,CPPASTProblemDeclaration,,<empty>
146654,UNKNOWN,1,,const ReLUParameter*,29,<empty>,,15345,1,CPPASTTypeId,,<empty>
146750,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,15385,23,CPPASTProblemDeclaration,,<empty>
147133,UNKNOWN,1,,const ReshapeParameter*,29,<empty>,,15550,1,CPPASTTypeId,,<empty>
147229,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,15590,23,CPPASTProblemDeclaration,,<empty>
147589,UNKNOWN,1,,const ScaleParameter*,29,<empty>,,15743,1,CPPASTTypeId,,<empty>
147685,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,15783,23,CPPASTProblemDeclaration,,<empty>
148131,UNKNOWN,1,,const SigmoidParameter*,29,<empty>,,15971,1,CPPASTTypeId,,<empty>
148227,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,16011,23,CPPASTProblemDeclaration,,<empty>
148575,UNKNOWN,1,,const SliceParameter*,29,<empty>,,16161,1,CPPASTTypeId,,<empty>
148671,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,16201,23,CPPASTProblemDeclaration,,<empty>
149039,UNKNOWN,1,,const SoftmaxParameter*,29,<empty>,,16358,1,CPPASTTypeId,,<empty>
149135,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,16398,23,CPPASTProblemDeclaration,,<empty>
149518,UNKNOWN,1,,const TanHParameter*,29,<empty>,,16563,1,CPPASTTypeId,,<empty>
149614,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,16603,23,CPPASTProblemDeclaration,,<empty>
149962,UNKNOWN,1,,const TileParameter*,29,<empty>,,16753,1,CPPASTTypeId,,<empty>
150058,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,16793,23,CPPASTProblemDeclaration,,<empty>
150367,UNKNOWN,1,,const ThresholdParameter*,29,<empty>,,16926,1,CPPASTTypeId,,<empty>
150463,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,16966,23,CPPASTProblemDeclaration,,<empty>
150737,UNKNOWN,1,,const WindowDataParameter*,29,<empty>,,17084,1,CPPASTTypeId,,<empty>
150833,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,17124,23,CPPASTProblemDeclaration,,<empty>
151000,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,17186,49,CPPASTProblemDeclaration,,<empty>
151014,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(const std::string& value);,3,<empty>,,17190,53,CPPASTProblemDeclaration,,<empty>
151045,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,17204,61,CPPASTProblemDeclaration,,<empty>
151059,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_mean_file(const std::string& value);,3,<empty>,,17208,65,CPPASTProblemDeclaration,,<empty>
151090,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,17222,73,CPPASTProblemDeclaration,,<empty>
151104,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_crop_mode(const std::string& value);,3,<empty>,,17226,77,CPPASTProblemDeclaration,,<empty>
151135,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,17240,85,CPPASTProblemDeclaration,,<empty>
151149,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_root_folder(const std::string& value);,3,<empty>,,17244,89,CPPASTProblemDeclaration,,<empty>
151588,UNKNOWN,1,,const SPPParameter*,29,<empty>,,17443,1,CPPASTTypeId,,<empty>
151684,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,17483,23,CPPASTProblemDeclaration,,<empty>
152176,UNKNOWN,1,,const V1LayerParameter*,29,<empty>,,17695,1,CPPASTTypeId,,<empty>
152272,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,17735,23,CPPASTProblemDeclaration,,<empty>
153282,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,18172,232,CPPASTProblemDeclaration,,<empty>
153296,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);,3,<empty>,,18176,236,CPPASTProblemDeclaration,,<empty>
155094,UNKNOWN,1,,const V0LayerParameter*,29,<empty>,,18858,1,CPPASTTypeId,,<empty>
155190,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,18898,23,CPPASTProblemDeclaration,,<empty>
155664,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,19079,94,CPPASTProblemDeclaration,,<empty>
155678,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);,3,<empty>,,19083,98,CPPASTProblemDeclaration,,<empty>
155709,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,19097,106,CPPASTProblemDeclaration,,<empty>
155723,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);,3,<empty>,,19101,110,CPPASTProblemDeclaration,,<empty>
155754,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,19115,118,CPPASTProblemDeclaration,,<empty>
155768,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(const std::string& value);,3,<empty>,,19119,122,CPPASTProblemDeclaration,,<empty>
155799,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,19133,130,CPPASTProblemDeclaration,,<empty>
155813,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_meanfile(const std::string& value);,3,<empty>,,19137,134,CPPASTProblemDeclaration,,<empty>
155844,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,19151,142,CPPASTProblemDeclaration,,<empty>
155858,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_det_crop_mode(const std::string& value);,3,<empty>,,19155,146,CPPASTProblemDeclaration,,<empty>
157018,UNKNOWN,1,,const PReLUParameter*,29,<empty>,,19667,1,CPPASTTypeId,,<empty>
157114,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,19707,23,CPPASTProblemDeclaration,,<empty>
157439,UNKNOWN,1,,const NormalizedBBox*,29,<empty>,,19845,1,CPPASTTypeId,,<empty>
157535,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,19885,23,CPPASTProblemDeclaration,,<empty>
158054,UNKNOWN,1,,const ROIPoolingParameter*,29,<empty>,,20108,1,CPPASTTypeId,,<empty>
158150,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,20148,23,CPPASTProblemDeclaration,,<empty>
158494,UNKNOWN,1,,const ProposalParameter*,29,<empty>,,20296,1,CPPASTTypeId,,<empty>
158590,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,20336,23,CPPASTProblemDeclaration,,<empty>
159157,UNKNOWN,1,,const PSROIPoolingParameter*,29,<empty>,,20577,1,CPPASTTypeId,,<empty>
159253,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,20617,23,CPPASTProblemDeclaration,,<empty>
159623,UNKNOWN,1,,const ::opencv_caffe::BlobShape&,47,<empty>,,20792,1,CPPASTTypeId,,<empty>
159645,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,20802,1,CPPASTTypeId,,<empty>
160251,UNKNOWN,1,,::opencv_caffe::Type,23,<empty>,,21068,1,CPPASTTypeId,,<empty>
160329,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlobProto::set_raw_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 raw_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_caffe.BlobProto.raw_data)
}",1,<empty>,,21100,451,CPPASTProblemDeclaration,,<empty>
161031,UNKNOWN,1,,const ::opencv_caffe::FillerParameter&,47,<empty>,,21407,1,CPPASTTypeId,,<empty>
161053,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,21417,1,CPPASTTypeId,,<empty>
163004,UNKNOWN,1,,const ::opencv_caffe::NonMaximumSuppressionParameter&,47,<empty>,,22273,1,CPPASTTypeId,,<empty>
163026,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,22283,1,CPPASTTypeId,,<empty>
163271,UNKNOWN,1,,const ::opencv_caffe::SaveOutputParameter&,47,<empty>,,22363,1,CPPASTTypeId,,<empty>
163293,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,22373,1,CPPASTTypeId,,<empty>
163515,UNKNOWN,1,,::opencv_caffe::PriorBoxParameter_CodeType,23,<empty>,,22451,1,CPPASTTypeId,,<empty>
164130,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Datum::set_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_caffe.Datum.data)
}",1,<empty>,,22711,809,CPPASTProblemDeclaration,,<empty>
164544,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FillerParameter::set_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_caffe.FillerParameter.type)
}",1,<empty>,,22888,846,CPPASTProblemDeclaration,,<empty>
165101,UNKNOWN,1,,::opencv_caffe::FillerParameter_VarianceNorm,23,<empty>,,23112,1,CPPASTTypeId,,<empty>
165179,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetParameter::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_caffe.NetParameter.name)
}",1,<empty>,,23148,906,CPPASTProblemDeclaration,,<empty>
165433,UNKNOWN,1,,const char*,22,<empty>,,23242,1,CPPASTTypeId,,<empty>
165503,UNKNOWN,1,,const char*,41,<empty>,,23262,1,CPPASTTypeId,,<empty>
165831,UNKNOWN,1,,const ::opencv_caffe::NetState&,47,<empty>,,23406,1,CPPASTTypeId,,<empty>
165853,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,23416,1,CPPASTTypeId,,<empty>
166315,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SolverParameter::set_net(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 net_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_caffe.SolverParameter.net)
}",1,<empty>,,23609,1002,CPPASTProblemDeclaration,,<empty>
166501,UNKNOWN,1,,const ::opencv_caffe::NetParameter&,47,<empty>,,23677,1,CPPASTTypeId,,<empty>
166523,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,23687,1,CPPASTTypeId,,<empty>
166748,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SolverParameter::set_train_net(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 train_net_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_caffe.SolverParameter.train_net)
}",1,<empty>,,23768,1024,CPPASTProblemDeclaration,,<empty>
167002,UNKNOWN,1,,const char*,22,<empty>,,23862,1,CPPASTTypeId,,<empty>
167072,UNKNOWN,1,,const char*,44,<empty>,,23882,1,CPPASTTypeId,,<empty>
167152,UNKNOWN,1,,const ::opencv_caffe::NetParameter&,47,<empty>,,23911,1,CPPASTTypeId,,<empty>
167174,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,23921,1,CPPASTTypeId,,<empty>
167504,UNKNOWN,1,,const ::opencv_caffe::NetState&,47,<empty>,,24041,1,CPPASTTypeId,,<empty>
167526,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,24051,1,CPPASTTypeId,,<empty>
168468,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SolverParameter::set_lr_policy(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 lr_policy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_caffe.SolverParameter.lr_policy)
}",1,<empty>,,24443,1163,CPPASTProblemDeclaration,,<empty>
168920,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SolverParameter::set_regularization_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 regularization_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_caffe.SolverParameter.regularization_type)
}",1,<empty>,,24625,1202,CPPASTProblemDeclaration,,<empty>
169375,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SolverParameter::set_snapshot_prefix(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 snapshot_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_caffe.SolverParameter.snapshot_prefix)
}",1,<empty>,,24815,1246,CPPASTProblemDeclaration,,<empty>
169605,UNKNOWN,1,,::opencv_caffe::SolverParameter_SnapshotFormat,23,<empty>,,24909,1,CPPASTTypeId,,<empty>
169680,UNKNOWN,1,,::opencv_caffe::SolverParameter_SolverMode,23,<empty>,,24938,1,CPPASTTypeId,,<empty>
169913,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SolverParameter::set_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_caffe.SolverParameter.type)
}",1,<empty>,,25027,1292,CPPASTProblemDeclaration,,<empty>
170402,UNKNOWN,1,,::opencv_caffe::SolverParameter_SolverType,23,<empty>,,25223,1,CPPASTTypeId,,<empty>
170547,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SolverState::set_learned_net(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 learned_net_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_caffe.SolverState.learned_net)
}",1,<empty>,,25287,1352,CPPASTProblemDeclaration,,<empty>
170862,UNKNOWN,1,,::opencv_caffe::Phase,23,<empty>,,25425,1,CPPASTTypeId,,<empty>
171095,UNKNOWN,1,,const char*,22,<empty>,,25510,1,CPPASTTypeId,,<empty>
171165,UNKNOWN,1,,const char*,41,<empty>,,25530,1,CPPASTTypeId,,<empty>
171222,UNKNOWN,1,,::opencv_caffe::Phase,23,<empty>,,25561,1,CPPASTTypeId,,<empty>
171522,UNKNOWN,1,,const char*,22,<empty>,,25674,1,CPPASTTypeId,,<empty>
171592,UNKNOWN,1,,const char*,41,<empty>,,25694,1,CPPASTTypeId,,<empty>
171740,UNKNOWN,1,,const char*,22,<empty>,,25749,1,CPPASTTypeId,,<empty>
171810,UNKNOWN,1,,const char*,45,<empty>,,25769,1,CPPASTTypeId,,<empty>
171870,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ParamSpec::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_caffe.ParamSpec.name)
}",1,<empty>,,25803,1469,CPPASTProblemDeclaration,,<empty>
172033,UNKNOWN,1,,::opencv_caffe::ParamSpec_DimCheckMode,23,<empty>,,25869,1,CPPASTTypeId,,<empty>
172245,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LayerParameter::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_caffe.LayerParameter.name)
}",1,<empty>,,25961,1501,CPPASTProblemDeclaration,,<empty>
172411,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LayerParameter::set_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_caffe.LayerParameter.type)
}",1,<empty>,,26030,1512,CPPASTProblemDeclaration,,<empty>
172665,UNKNOWN,1,,const char*,22,<empty>,,26124,1,CPPASTTypeId,,<empty>
172735,UNKNOWN,1,,const char*,42,<empty>,,26144,1,CPPASTTypeId,,<empty>
172883,UNKNOWN,1,,const char*,22,<empty>,,26199,1,CPPASTTypeId,,<empty>
172953,UNKNOWN,1,,const char*,39,<empty>,,26219,1,CPPASTTypeId,,<empty>
173010,UNKNOWN,1,,::opencv_caffe::Phase,23,<empty>,,26246,1,CPPASTTypeId,,<empty>
173640,UNKNOWN,1,,const ::opencv_caffe::TransformationParameter&,47,<empty>,,26531,1,CPPASTTypeId,,<empty>
173662,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,26541,1,CPPASTTypeId,,<empty>
173907,UNKNOWN,1,,const ::opencv_caffe::LossParameter&,47,<empty>,,26621,1,CPPASTTypeId,,<empty>
173929,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,26631,1,CPPASTTypeId,,<empty>
174174,UNKNOWN,1,,const ::opencv_caffe::AccuracyParameter&,47,<empty>,,26711,1,CPPASTTypeId,,<empty>
174196,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,26721,1,CPPASTTypeId,,<empty>
174441,UNKNOWN,1,,const ::opencv_caffe::ArgMaxParameter&,47,<empty>,,26801,1,CPPASTTypeId,,<empty>
174463,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,26811,1,CPPASTTypeId,,<empty>
174708,UNKNOWN,1,,const ::opencv_caffe::BatchNormParameter&,47,<empty>,,26891,1,CPPASTTypeId,,<empty>
174730,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,26901,1,CPPASTTypeId,,<empty>
174975,UNKNOWN,1,,const ::opencv_caffe::BiasParameter&,47,<empty>,,26981,1,CPPASTTypeId,,<empty>
174997,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,26991,1,CPPASTTypeId,,<empty>
175242,UNKNOWN,1,,const ::opencv_caffe::ConcatParameter&,47,<empty>,,27071,1,CPPASTTypeId,,<empty>
175264,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,27081,1,CPPASTTypeId,,<empty>
175509,UNKNOWN,1,,const ::opencv_caffe::ContrastiveLossParameter&,47,<empty>,,27161,1,CPPASTTypeId,,<empty>
175531,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,27171,1,CPPASTTypeId,,<empty>
175776,UNKNOWN,1,,const ::opencv_caffe::ConvolutionParameter&,47,<empty>,,27251,1,CPPASTTypeId,,<empty>
175798,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,27261,1,CPPASTTypeId,,<empty>
176043,UNKNOWN,1,,const ::opencv_caffe::CropParameter&,47,<empty>,,27341,1,CPPASTTypeId,,<empty>
176065,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,27351,1,CPPASTTypeId,,<empty>
176310,UNKNOWN,1,,const ::opencv_caffe::DataParameter&,47,<empty>,,27431,1,CPPASTTypeId,,<empty>
176332,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,27441,1,CPPASTTypeId,,<empty>
176577,UNKNOWN,1,,const ::opencv_caffe::DetectionOutputParameter&,47,<empty>,,27521,1,CPPASTTypeId,,<empty>
176599,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,27531,1,CPPASTTypeId,,<empty>
176844,UNKNOWN,1,,const ::opencv_caffe::DropoutParameter&,47,<empty>,,27611,1,CPPASTTypeId,,<empty>
176866,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,27621,1,CPPASTTypeId,,<empty>
177111,UNKNOWN,1,,const ::opencv_caffe::DummyDataParameter&,47,<empty>,,27701,1,CPPASTTypeId,,<empty>
177133,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,27711,1,CPPASTTypeId,,<empty>
177378,UNKNOWN,1,,const ::opencv_caffe::EltwiseParameter&,47,<empty>,,27791,1,CPPASTTypeId,,<empty>
177400,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,27801,1,CPPASTTypeId,,<empty>
177645,UNKNOWN,1,,const ::opencv_caffe::ELUParameter&,47,<empty>,,27881,1,CPPASTTypeId,,<empty>
177667,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,27891,1,CPPASTTypeId,,<empty>
177912,UNKNOWN,1,,const ::opencv_caffe::EmbedParameter&,47,<empty>,,27971,1,CPPASTTypeId,,<empty>
177934,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,27981,1,CPPASTTypeId,,<empty>
178179,UNKNOWN,1,,const ::opencv_caffe::ExpParameter&,47,<empty>,,28061,1,CPPASTTypeId,,<empty>
178201,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,28071,1,CPPASTTypeId,,<empty>
178446,UNKNOWN,1,,const ::opencv_caffe::FlattenParameter&,47,<empty>,,28151,1,CPPASTTypeId,,<empty>
178468,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,28161,1,CPPASTTypeId,,<empty>
178713,UNKNOWN,1,,const ::opencv_caffe::HDF5DataParameter&,47,<empty>,,28241,1,CPPASTTypeId,,<empty>
178735,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,28251,1,CPPASTTypeId,,<empty>
178980,UNKNOWN,1,,const ::opencv_caffe::HDF5OutputParameter&,47,<empty>,,28331,1,CPPASTTypeId,,<empty>
179002,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,28341,1,CPPASTTypeId,,<empty>
179247,UNKNOWN,1,,const ::opencv_caffe::HingeLossParameter&,47,<empty>,,28421,1,CPPASTTypeId,,<empty>
179269,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,28431,1,CPPASTTypeId,,<empty>
179514,UNKNOWN,1,,const ::opencv_caffe::ImageDataParameter&,47,<empty>,,28511,1,CPPASTTypeId,,<empty>
179536,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,28521,1,CPPASTTypeId,,<empty>
179781,UNKNOWN,1,,const ::opencv_caffe::InfogainLossParameter&,47,<empty>,,28601,1,CPPASTTypeId,,<empty>
179803,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,28611,1,CPPASTTypeId,,<empty>
180048,UNKNOWN,1,,const ::opencv_caffe::InnerProductParameter&,47,<empty>,,28691,1,CPPASTTypeId,,<empty>
180070,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,28701,1,CPPASTTypeId,,<empty>
180315,UNKNOWN,1,,const ::opencv_caffe::InputParameter&,47,<empty>,,28781,1,CPPASTTypeId,,<empty>
180337,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,28791,1,CPPASTTypeId,,<empty>
180582,UNKNOWN,1,,const ::opencv_caffe::LogParameter&,47,<empty>,,28871,1,CPPASTTypeId,,<empty>
180604,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,28881,1,CPPASTTypeId,,<empty>
180849,UNKNOWN,1,,const ::opencv_caffe::LRNParameter&,47,<empty>,,28961,1,CPPASTTypeId,,<empty>
180871,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,28971,1,CPPASTTypeId,,<empty>
181116,UNKNOWN,1,,const ::opencv_caffe::MemoryDataParameter&,47,<empty>,,29051,1,CPPASTTypeId,,<empty>
181138,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,29061,1,CPPASTTypeId,,<empty>
181383,UNKNOWN,1,,const ::opencv_caffe::MVNParameter&,47,<empty>,,29141,1,CPPASTTypeId,,<empty>
181405,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,29151,1,CPPASTTypeId,,<empty>
181650,UNKNOWN,1,,const ::opencv_caffe::NormalizeBBoxParameter&,47,<empty>,,29231,1,CPPASTTypeId,,<empty>
181672,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,29241,1,CPPASTTypeId,,<empty>
181917,UNKNOWN,1,,const ::opencv_caffe::PermuteParameter&,47,<empty>,,29321,1,CPPASTTypeId,,<empty>
181939,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,29331,1,CPPASTTypeId,,<empty>
182184,UNKNOWN,1,,const ::opencv_caffe::ParameterParameter&,47,<empty>,,29411,1,CPPASTTypeId,,<empty>
182206,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,29421,1,CPPASTTypeId,,<empty>
182451,UNKNOWN,1,,const ::opencv_caffe::PoolingParameter&,47,<empty>,,29501,1,CPPASTTypeId,,<empty>
182473,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,29511,1,CPPASTTypeId,,<empty>
182718,UNKNOWN,1,,const ::opencv_caffe::PowerParameter&,47,<empty>,,29591,1,CPPASTTypeId,,<empty>
182740,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,29601,1,CPPASTTypeId,,<empty>
182985,UNKNOWN,1,,const ::opencv_caffe::PReLUParameter&,47,<empty>,,29681,1,CPPASTTypeId,,<empty>
183007,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,29691,1,CPPASTTypeId,,<empty>
183252,UNKNOWN,1,,const ::opencv_caffe::PriorBoxParameter&,47,<empty>,,29771,1,CPPASTTypeId,,<empty>
183274,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,29781,1,CPPASTTypeId,,<empty>
183519,UNKNOWN,1,,const ::opencv_caffe::ProposalParameter&,47,<empty>,,29861,1,CPPASTTypeId,,<empty>
183541,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,29871,1,CPPASTTypeId,,<empty>
183786,UNKNOWN,1,,const ::opencv_caffe::PSROIPoolingParameter&,47,<empty>,,29951,1,CPPASTTypeId,,<empty>
183808,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,29961,1,CPPASTTypeId,,<empty>
184053,UNKNOWN,1,,const ::opencv_caffe::PythonParameter&,47,<empty>,,30041,1,CPPASTTypeId,,<empty>
184075,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,30051,1,CPPASTTypeId,,<empty>
184320,UNKNOWN,1,,const ::opencv_caffe::RecurrentParameter&,47,<empty>,,30131,1,CPPASTTypeId,,<empty>
184342,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,30141,1,CPPASTTypeId,,<empty>
184587,UNKNOWN,1,,const ::opencv_caffe::ReductionParameter&,47,<empty>,,30221,1,CPPASTTypeId,,<empty>
184609,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,30231,1,CPPASTTypeId,,<empty>
184854,UNKNOWN,1,,const ::opencv_caffe::ReLUParameter&,47,<empty>,,30311,1,CPPASTTypeId,,<empty>
184876,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,30321,1,CPPASTTypeId,,<empty>
185121,UNKNOWN,1,,const ::opencv_caffe::ReshapeParameter&,47,<empty>,,30401,1,CPPASTTypeId,,<empty>
185143,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,30411,1,CPPASTTypeId,,<empty>
185388,UNKNOWN,1,,const ::opencv_caffe::ROIPoolingParameter&,47,<empty>,,30491,1,CPPASTTypeId,,<empty>
185410,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,30501,1,CPPASTTypeId,,<empty>
185655,UNKNOWN,1,,const ::opencv_caffe::ScaleParameter&,47,<empty>,,30581,1,CPPASTTypeId,,<empty>
185677,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,30591,1,CPPASTTypeId,,<empty>
185922,UNKNOWN,1,,const ::opencv_caffe::SigmoidParameter&,47,<empty>,,30671,1,CPPASTTypeId,,<empty>
185944,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,30681,1,CPPASTTypeId,,<empty>
186189,UNKNOWN,1,,const ::opencv_caffe::SoftmaxParameter&,47,<empty>,,30761,1,CPPASTTypeId,,<empty>
186211,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,30771,1,CPPASTTypeId,,<empty>
186456,UNKNOWN,1,,const ::opencv_caffe::SPPParameter&,47,<empty>,,30851,1,CPPASTTypeId,,<empty>
186478,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,30861,1,CPPASTTypeId,,<empty>
186723,UNKNOWN,1,,const ::opencv_caffe::SliceParameter&,47,<empty>,,30941,1,CPPASTTypeId,,<empty>
186745,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,30951,1,CPPASTTypeId,,<empty>
186990,UNKNOWN,1,,const ::opencv_caffe::TanHParameter&,47,<empty>,,31031,1,CPPASTTypeId,,<empty>
187012,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,31041,1,CPPASTTypeId,,<empty>
187257,UNKNOWN,1,,const ::opencv_caffe::ThresholdParameter&,47,<empty>,,31121,1,CPPASTTypeId,,<empty>
187279,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,31131,1,CPPASTTypeId,,<empty>
187524,UNKNOWN,1,,const ::opencv_caffe::TileParameter&,47,<empty>,,31211,1,CPPASTTypeId,,<empty>
187546,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,31221,1,CPPASTTypeId,,<empty>
187791,UNKNOWN,1,,const ::opencv_caffe::WindowDataParameter&,47,<empty>,,31301,1,CPPASTTypeId,,<empty>
187813,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,31311,1,CPPASTTypeId,,<empty>
188239,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransformationParameter::set_mean_file(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 mean_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_caffe.TransformationParameter.mean_file)
}",1,<empty>,,31480,2245,CPPASTProblemDeclaration,,<empty>
188699,UNKNOWN,1,,::opencv_caffe::LossParameter_NormalizationMode,23,<empty>,,31681,1,CPPASTTypeId,,<empty>
189802,UNKNOWN,1,,const ::opencv_caffe::FillerParameter&,47,<empty>,,32152,1,CPPASTTypeId,,<empty>
189824,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,32162,1,CPPASTTypeId,,<empty>
191190,UNKNOWN,1,,const ::opencv_caffe::FillerParameter&,47,<empty>,,32746,1,CPPASTTypeId,,<empty>
191212,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,32756,1,CPPASTTypeId,,<empty>
191457,UNKNOWN,1,,const ::opencv_caffe::FillerParameter&,47,<empty>,,32836,1,CPPASTTypeId,,<empty>
191479,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,32846,1,CPPASTTypeId,,<empty>
191701,UNKNOWN,1,,::opencv_caffe::ConvolutionParameter_Engine,23,<empty>,,32924,1,CPPASTTypeId,,<empty>
192076,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataParameter::set_source(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_caffe.DataParameter.source)
}",1,<empty>,,33095,2599,CPPASTProblemDeclaration,,<empty>
192373,UNKNOWN,1,,::opencv_caffe::DataParameter_DB,23,<empty>,,33217,1,CPPASTTypeId,,<empty>
192518,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataParameter::set_mean_file(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 mean_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_caffe.DataParameter.mean_file)
}",1,<empty>,,33277,2638,CPPASTProblemDeclaration,,<empty>
193153,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SaveOutputParameter::set_output_directory(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 output_directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_caffe.SaveOutputParameter.output_directory)
}",1,<empty>,,33550,2698,CPPASTProblemDeclaration,,<empty>
193319,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SaveOutputParameter::set_output_name_prefix(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 output_name_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_caffe.SaveOutputParameter.output_name_prefix)
}",1,<empty>,,33619,2709,CPPASTProblemDeclaration,,<empty>
193485,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SaveOutputParameter::set_output_format(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 output_format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_caffe.SaveOutputParameter.output_format)
}",1,<empty>,,33688,2720,CPPASTProblemDeclaration,,<empty>
193651,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SaveOutputParameter::set_label_map_file(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 label_map_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_caffe.SaveOutputParameter.label_map_file)
}",1,<empty>,,33757,2731,CPPASTProblemDeclaration,,<empty>
193817,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SaveOutputParameter::set_name_size_file(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 name_size_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_caffe.SaveOutputParameter.name_size_file)
}",1,<empty>,,33826,2742,CPPASTProblemDeclaration,,<empty>
194735,UNKNOWN,1,,::opencv_caffe::EltwiseParameter_EltwiseOp,23,<empty>,,34256,1,CPPASTTypeId,,<empty>
195264,UNKNOWN,1,,const ::opencv_caffe::FillerParameter&,47,<empty>,,34482,1,CPPASTTypeId,,<empty>
195286,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,34492,1,CPPASTTypeId,,<empty>
195531,UNKNOWN,1,,const ::opencv_caffe::FillerParameter&,47,<empty>,,34572,1,CPPASTTypeId,,<empty>
195553,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,34582,1,CPPASTTypeId,,<empty>
196115,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HDF5DataParameter::set_source(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_caffe.HDF5DataParameter.source)
}",1,<empty>,,34815,2953,CPPASTProblemDeclaration,,<empty>
196415,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HDF5OutputParameter::set_file_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_caffe.HDF5OutputParameter.file_name)
}",1,<empty>,,34944,2978,CPPASTProblemDeclaration,,<empty>
196578,UNKNOWN,1,,::opencv_caffe::HingeLossParameter_Norm,23,<empty>,,35014,1,CPPASTTypeId,,<empty>
196656,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImageDataParameter::set_source(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_caffe.ImageDataParameter.source)
}",1,<empty>,,35050,2996,CPPASTProblemDeclaration,,<empty>
197291,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImageDataParameter::set_mean_file(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 mean_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_caffe.ImageDataParameter.mean_file)
}",1,<empty>,,35315,3056,CPPASTProblemDeclaration,,<empty>
197591,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImageDataParameter::set_root_folder(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 root_folder_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_caffe.ImageDataParameter.root_folder)
}",1,<empty>,,35440,3081,CPPASTProblemDeclaration,,<empty>
197757,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InfogainLossParameter::set_source(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_caffe.InfogainLossParameter.source)
}",1,<empty>,,35513,3092,CPPASTProblemDeclaration,,<empty>
198077,UNKNOWN,1,,const ::opencv_caffe::FillerParameter&,47,<empty>,,35641,1,CPPASTTypeId,,<empty>
198099,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,35651,1,CPPASTTypeId,,<empty>
198344,UNKNOWN,1,,const ::opencv_caffe::FillerParameter&,47,<empty>,,35731,1,CPPASTTypeId,,<empty>
198366,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,35741,1,CPPASTTypeId,,<empty>
199210,UNKNOWN,1,,::opencv_caffe::LRNParameter_NormRegion,23,<empty>,,36095,1,CPPASTTypeId,,<empty>
199352,UNKNOWN,1,,::opencv_caffe::LRNParameter_Engine,23,<empty>,,36152,1,CPPASTTypeId,,<empty>
199919,UNKNOWN,1,,const ::opencv_caffe::BlobShape&,47,<empty>,,36391,1,CPPASTTypeId,,<empty>
199941,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,36401,1,CPPASTTypeId,,<empty>
200163,UNKNOWN,1,,::opencv_caffe::PoolingParameter_PoolMethod,23,<empty>,,36483,1,CPPASTTypeId,,<empty>
200841,UNKNOWN,1,,::opencv_caffe::PoolingParameter_Engine,23,<empty>,,36764,1,CPPASTTypeId,,<empty>
201254,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PythonParameter::set_module(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 module_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_caffe.PythonParameter.module)
}",1,<empty>,,36944,3398,CPPASTProblemDeclaration,,<empty>
201420,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PythonParameter::set_layer(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 layer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_caffe.PythonParameter.layer)
}",1,<empty>,,37013,3409,CPPASTProblemDeclaration,,<empty>
201586,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PythonParameter::set_param_str(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 param_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_caffe.PythonParameter.param_str)
}",1,<empty>,,37082,3420,CPPASTProblemDeclaration,,<empty>
201906,UNKNOWN,1,,const ::opencv_caffe::FillerParameter&,47,<empty>,,37210,1,CPPASTTypeId,,<empty>
201928,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,37220,1,CPPASTTypeId,,<empty>
202173,UNKNOWN,1,,const ::opencv_caffe::FillerParameter&,47,<empty>,,37300,1,CPPASTTypeId,,<empty>
202195,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,37310,1,CPPASTTypeId,,<empty>
202551,UNKNOWN,1,,::opencv_caffe::ReductionParameter_ReductionOp,23,<empty>,,37448,1,CPPASTTypeId,,<empty>
202827,UNKNOWN,1,,::opencv_caffe::ReLUParameter_Engine,23,<empty>,,37565,1,CPPASTTypeId,,<empty>
202925,UNKNOWN,1,,const ::opencv_caffe::BlobShape&,47,<empty>,,37600,1,CPPASTTypeId,,<empty>
202947,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,37610,1,CPPASTTypeId,,<empty>
203461,UNKNOWN,1,,const ::opencv_caffe::FillerParameter&,47,<empty>,,37806,1,CPPASTTypeId,,<empty>
203483,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,37816,1,CPPASTTypeId,,<empty>
203795,UNKNOWN,1,,const ::opencv_caffe::FillerParameter&,47,<empty>,,37924,1,CPPASTTypeId,,<empty>
203817,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,37934,1,CPPASTTypeId,,<empty>
204039,UNKNOWN,1,,::opencv_caffe::SigmoidParameter_Engine,23,<empty>,,38016,1,CPPASTTypeId,,<empty>
204344,UNKNOWN,1,,::opencv_caffe::SoftmaxParameter_Engine,23,<empty>,,38156,1,CPPASTTypeId,,<empty>
204486,UNKNOWN,1,,::opencv_caffe::TanHParameter_Engine,23,<empty>,,38217,1,CPPASTTypeId,,<empty>
204765,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WindowDataParameter::set_source(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_caffe.WindowDataParameter.source)
}",1,<empty>,,38345,3659,CPPASTProblemDeclaration,,<empty>
204998,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WindowDataParameter::set_mean_file(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 mean_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_caffe.WindowDataParameter.mean_file)
}",1,<empty>,,38442,3677,CPPASTProblemDeclaration,,<empty>
205651,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WindowDataParameter::set_crop_mode(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 crop_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_caffe.WindowDataParameter.crop_mode)
}",1,<empty>,,38708,3737,CPPASTProblemDeclaration,,<empty>
205875,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WindowDataParameter::set_root_folder(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 root_folder_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_caffe.WindowDataParameter.root_folder)
}",1,<empty>,,38795,3755,CPPASTProblemDeclaration,,<empty>
206105,UNKNOWN,1,,::opencv_caffe::SPPParameter_PoolMethod,23,<empty>,,38893,1,CPPASTTypeId,,<empty>
206180,UNKNOWN,1,,::opencv_caffe::SPPParameter_Engine,23,<empty>,,38922,1,CPPASTTypeId,,<empty>
206346,UNKNOWN,1,,const char*,22,<empty>,,38983,1,CPPASTTypeId,,<empty>
206416,UNKNOWN,1,,const char*,42,<empty>,,39003,1,CPPASTTypeId,,<empty>
206564,UNKNOWN,1,,const char*,22,<empty>,,39058,1,CPPASTTypeId,,<empty>
206634,UNKNOWN,1,,const char*,39,<empty>,,39078,1,CPPASTTypeId,,<empty>
206694,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void V1LayerParameter::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_caffe.V1LayerParameter.name)
}",1,<empty>,,39108,3823,CPPASTProblemDeclaration,,<empty>
207027,UNKNOWN,1,,::opencv_caffe::V1LayerParameter_LayerType,23,<empty>,,39254,1,CPPASTTypeId,,<empty>
207278,UNKNOWN,1,,const char*,22,<empty>,,39351,1,CPPASTTypeId,,<empty>
207348,UNKNOWN,1,,const char*,41,<empty>,,39371,1,CPPASTTypeId,,<empty>
207394,UNKNOWN,1,,::opencv_caffe::V1LayerParameter_DimCheckMode,23,<empty>,,39396,1,CPPASTTypeId,,<empty>
207820,UNKNOWN,1,,const ::opencv_caffe::AccuracyParameter&,47,<empty>,,39586,1,CPPASTTypeId,,<empty>
207842,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,39596,1,CPPASTTypeId,,<empty>
208087,UNKNOWN,1,,const ::opencv_caffe::ArgMaxParameter&,47,<empty>,,39676,1,CPPASTTypeId,,<empty>
208109,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,39686,1,CPPASTTypeId,,<empty>
208354,UNKNOWN,1,,const ::opencv_caffe::ConcatParameter&,47,<empty>,,39766,1,CPPASTTypeId,,<empty>
208376,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,39776,1,CPPASTTypeId,,<empty>
208621,UNKNOWN,1,,const ::opencv_caffe::ContrastiveLossParameter&,47,<empty>,,39856,1,CPPASTTypeId,,<empty>
208643,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,39866,1,CPPASTTypeId,,<empty>
208888,UNKNOWN,1,,const ::opencv_caffe::ConvolutionParameter&,47,<empty>,,39946,1,CPPASTTypeId,,<empty>
208910,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,39956,1,CPPASTTypeId,,<empty>
209155,UNKNOWN,1,,const ::opencv_caffe::DataParameter&,47,<empty>,,40036,1,CPPASTTypeId,,<empty>
209177,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,40046,1,CPPASTTypeId,,<empty>
209422,UNKNOWN,1,,const ::opencv_caffe::DropoutParameter&,47,<empty>,,40126,1,CPPASTTypeId,,<empty>
209444,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,40136,1,CPPASTTypeId,,<empty>
209689,UNKNOWN,1,,const ::opencv_caffe::DummyDataParameter&,47,<empty>,,40216,1,CPPASTTypeId,,<empty>
209711,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,40226,1,CPPASTTypeId,,<empty>
209956,UNKNOWN,1,,const ::opencv_caffe::EltwiseParameter&,47,<empty>,,40306,1,CPPASTTypeId,,<empty>
209978,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,40316,1,CPPASTTypeId,,<empty>
210223,UNKNOWN,1,,const ::opencv_caffe::ExpParameter&,47,<empty>,,40396,1,CPPASTTypeId,,<empty>
210245,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,40406,1,CPPASTTypeId,,<empty>
210490,UNKNOWN,1,,const ::opencv_caffe::HDF5DataParameter&,47,<empty>,,40486,1,CPPASTTypeId,,<empty>
210512,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,40496,1,CPPASTTypeId,,<empty>
210757,UNKNOWN,1,,const ::opencv_caffe::HDF5OutputParameter&,47,<empty>,,40576,1,CPPASTTypeId,,<empty>
210779,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,40586,1,CPPASTTypeId,,<empty>
211024,UNKNOWN,1,,const ::opencv_caffe::HingeLossParameter&,47,<empty>,,40666,1,CPPASTTypeId,,<empty>
211046,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,40676,1,CPPASTTypeId,,<empty>
211291,UNKNOWN,1,,const ::opencv_caffe::ImageDataParameter&,47,<empty>,,40756,1,CPPASTTypeId,,<empty>
211313,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,40766,1,CPPASTTypeId,,<empty>
211558,UNKNOWN,1,,const ::opencv_caffe::InfogainLossParameter&,47,<empty>,,40846,1,CPPASTTypeId,,<empty>
211580,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,40856,1,CPPASTTypeId,,<empty>
211825,UNKNOWN,1,,const ::opencv_caffe::InnerProductParameter&,47,<empty>,,40936,1,CPPASTTypeId,,<empty>
211847,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,40946,1,CPPASTTypeId,,<empty>
212092,UNKNOWN,1,,const ::opencv_caffe::LRNParameter&,47,<empty>,,41026,1,CPPASTTypeId,,<empty>
212114,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,41036,1,CPPASTTypeId,,<empty>
212359,UNKNOWN,1,,const ::opencv_caffe::MemoryDataParameter&,47,<empty>,,41116,1,CPPASTTypeId,,<empty>
212381,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,41126,1,CPPASTTypeId,,<empty>
212626,UNKNOWN,1,,const ::opencv_caffe::MVNParameter&,47,<empty>,,41206,1,CPPASTTypeId,,<empty>
212648,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,41216,1,CPPASTTypeId,,<empty>
212893,UNKNOWN,1,,const ::opencv_caffe::PoolingParameter&,47,<empty>,,41296,1,CPPASTTypeId,,<empty>
212915,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,41306,1,CPPASTTypeId,,<empty>
213160,UNKNOWN,1,,const ::opencv_caffe::PowerParameter&,47,<empty>,,41386,1,CPPASTTypeId,,<empty>
213182,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,41396,1,CPPASTTypeId,,<empty>
213427,UNKNOWN,1,,const ::opencv_caffe::ReLUParameter&,47,<empty>,,41476,1,CPPASTTypeId,,<empty>
213449,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,41486,1,CPPASTTypeId,,<empty>
213694,UNKNOWN,1,,const ::opencv_caffe::SigmoidParameter&,47,<empty>,,41566,1,CPPASTTypeId,,<empty>
213716,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,41576,1,CPPASTTypeId,,<empty>
213961,UNKNOWN,1,,const ::opencv_caffe::SoftmaxParameter&,47,<empty>,,41656,1,CPPASTTypeId,,<empty>
213983,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,41666,1,CPPASTTypeId,,<empty>
214228,UNKNOWN,1,,const ::opencv_caffe::SliceParameter&,47,<empty>,,41746,1,CPPASTTypeId,,<empty>
214250,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,41756,1,CPPASTTypeId,,<empty>
214495,UNKNOWN,1,,const ::opencv_caffe::TanHParameter&,47,<empty>,,41836,1,CPPASTTypeId,,<empty>
214517,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,41846,1,CPPASTTypeId,,<empty>
214762,UNKNOWN,1,,const ::opencv_caffe::ThresholdParameter&,47,<empty>,,41926,1,CPPASTTypeId,,<empty>
214784,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,41936,1,CPPASTTypeId,,<empty>
215029,UNKNOWN,1,,const ::opencv_caffe::WindowDataParameter&,47,<empty>,,42016,1,CPPASTTypeId,,<empty>
215051,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,42026,1,CPPASTTypeId,,<empty>
215296,UNKNOWN,1,,const ::opencv_caffe::TransformationParameter&,47,<empty>,,42106,1,CPPASTTypeId,,<empty>
215318,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,42116,1,CPPASTTypeId,,<empty>
215563,UNKNOWN,1,,const ::opencv_caffe::LossParameter&,47,<empty>,,42196,1,CPPASTTypeId,,<empty>
215585,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,42206,1,CPPASTTypeId,,<empty>
215830,UNKNOWN,1,,const ::opencv_caffe::V0LayerParameter&,47,<empty>,,42286,1,CPPASTTypeId,,<empty>
215852,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,42296,1,CPPASTTypeId,,<empty>
216077,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void V0LayerParameter::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_caffe.V0LayerParameter.name)
}",1,<empty>,,42381,4277,CPPASTProblemDeclaration,,<empty>
216243,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void V0LayerParameter::set_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_caffe.V0LayerParameter.type)
}",1,<empty>,,42450,4288,CPPASTProblemDeclaration,,<empty>
216563,UNKNOWN,1,,const ::opencv_caffe::FillerParameter&,47,<empty>,,42574,1,CPPASTTypeId,,<empty>
216585,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,42584,1,CPPASTTypeId,,<empty>
216830,UNKNOWN,1,,const ::opencv_caffe::FillerParameter&,47,<empty>,,42664,1,CPPASTTypeId,,<empty>
216852,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,42674,1,CPPASTTypeId,,<empty>
217342,UNKNOWN,1,,::opencv_caffe::V0LayerParameter_PoolMethod,23,<empty>,,42864,1,CPPASTTypeId,,<empty>
217755,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void V0LayerParameter::set_source(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_caffe.V0LayerParameter.source)
}",1,<empty>,,43036,4405,CPPASTProblemDeclaration,,<empty>
217988,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void V0LayerParameter::set_meanfile(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 meanfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_caffe.V0LayerParameter.meanfile)
}",1,<empty>,,43133,4423,CPPASTProblemDeclaration,,<empty>
218985,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void V0LayerParameter::set_det_crop_mode(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 det_crop_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_caffe.V0LayerParameter.det_crop_mode)
}",1,<empty>,,43561,4524,CPPASTProblemDeclaration,,<empty>
219564,UNKNOWN,1,,const ::opencv_caffe::HDF5OutputParameter&,47,<empty>,,43787,1,CPPASTTypeId,,<empty>
219586,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,43797,1,CPPASTTypeId,,<empty>
219831,UNKNOWN,1,,const ::opencv_caffe::FillerParameter&,47,<empty>,,43881,1,CPPASTTypeId,,<empty>
219853,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,43891,1,CPPASTTypeId,,<empty>
221635,UNKNOWN,81,,PROTOBUF_NAMESPACE_OPEN,1,<empty>,,44802,81,CPPASTProblemDeclaration,,<empty>
221906,UNKNOWN,136,,PROTOBUF_NAMESPACE_CLOSE,1,<empty>,,44940,136,CPPASTProblemDeclaration,,<empty>
221938,UNKNOWN,1,,MatShape,17,<empty>,,15,1,CPPASTTypeId,,<empty>
222019,UNKNOWN,1,,jobject,39,<empty>,,36,1,CPPASTTypeId,,<empty>
222032,UNKNOWN,1,,cv::Mat*,27,<empty>,,37,1,CPPASTTypeId,,<empty>
222041,UNKNOWN,1,,MatShape,30,<empty>,,38,1,CPPASTTypeId,,<empty>
222085,UNKNOWN,1,,jclass,33,<empty>,,51,1,CPPASTTypeId,,<empty>
222293,UNKNOWN,1,,jclass,33,<empty>,,88,1,CPPASTTypeId,,<empty>
222342,UNKNOWN,1,,jobject,39,<empty>,,95,1,CPPASTTypeId,,<empty>
222364,UNKNOWN,1,,cv::Ptr<cv::dnn::Layer>*,47,<empty>,,96,1,CPPASTTypeId,,<empty>
222473,UNKNOWN,1,,G,24,<empty>,,18,1,CPPASTProblemDeclaration,,<empty>
222491,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,45,3,CPPASTProblemDeclaration,,<empty>
222509,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,59,7,CPPASTProblemDeclaration,,<empty>
222527,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,77,11,CPPASTProblemDeclaration,,<empty>
222545,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,97,15,CPPASTProblemDeclaration,,<empty>
222563,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,110,19,CPPASTProblemDeclaration,,<empty>
222581,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,128,23,CPPASTProblemDeclaration,,<empty>
222599,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,141,27,CPPASTProblemDeclaration,,<empty>
222617,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,168,31,CPPASTProblemDeclaration,,<empty>
222635,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,181,35,CPPASTProblemDeclaration,,<empty>
222653,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,193,39,CPPASTProblemDeclaration,,<empty>
222671,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,207,43,CPPASTProblemDeclaration,,<empty>
222689,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,220,47,CPPASTProblemDeclaration,,<empty>
222707,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,233,51,CPPASTProblemDeclaration,,<empty>
222719,UNKNOWN,9,,"const uint32_t TableStruct_opencv_2donnx_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::opencv_onnx::AttributeProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::opencv_onnx::AttributeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opencv_onnx::AttributeProto, name_),
  PROTOBUF_FIELD_OFFSET(::opencv_onnx::AttributeProto, ref_attr_name_),
  PROTOBUF_FIELD_OFFSET(::opencv_onnx::AttributeProto, doc_string_),
  PROTOBUF_FIELD_OFFSET(::opencv_onnx::AttributeProto, type_),
  PROTOBUF_FIELD_OFFSET(::opencv_onnx::AttributeProto, f_),
  PROTOBUF_FIELD_OFFSET(::opencv_onnx::AttributeProto, i_),
  PROTOBUF_FIELD_OFFSET(::opencv_onnx::AttributeProto, s_),
  PROTOBUF_FIELD_OFFSET(::opencv_onnx::AttributeProto, t_),
  PROTOBUF_FIELD_OFFSET(::opencv_onnx::AttributeProto, g_),
  PROTOBUF_FIELD_OFFSET(::opencv_onnx::AttributeProto, ...",1,<empty>,,239,9,CPPASTProblemDeclaration,,<empty>
222720,UNKNOWN,10,,"static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 20, -1, sizeof(::opencv_onnx::AttributeProto)},
  { 34, 43, -1, sizeof(::opencv_onnx::ValueInfoProto)},
  { 46, 59, -1, sizeof(::opencv_onnx::NodeProto)},
  { 66, 81, -1, sizeof(::opencv_onnx::ModelProto)},
  { 90, 98, -1, sizeof(::opencv_onnx::StringStringEntryProto)},
  { 100, 113, -1, sizeof(::opencv_onnx::GraphProto)},
  { 120, 128, -1, sizeof(::opencv_onnx::TensorProto_Segment)},
  { 130, 148, -1, sizeof(::opencv_onnx::TensorProto)},
  { 160, 170, -1, sizeof(::opencv_onnx::TensorShapeProto_Dimension)},
  { 173, -1, -1, sizeof(::opencv_onnx::TensorShapeProto)},
  { 180, 188, -1, sizeof(::opencv_onnx::TypeProto_Tensor)},
  { 190, 199, -1, sizeof(::opencv_onnx::TypeProto)},
  { 201, 209, -1, sizeof(::opencv_onnx::OperatorSetIdProto)},
};",1,<empty>,,452,10,CPPASTProblemDeclaration,,<empty>
222726,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,469,1,CPPASTTypeId,,<empty>
222732,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,470,1,CPPASTTypeId,,<empty>
222738,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,471,1,CPPASTTypeId,,<empty>
222744,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,472,1,CPPASTTypeId,,<empty>
222750,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,473,1,CPPASTTypeId,,<empty>
222756,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,474,1,CPPASTTypeId,,<empty>
222762,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,475,1,CPPASTTypeId,,<empty>
222768,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,476,1,CPPASTTypeId,,<empty>
222774,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,477,1,CPPASTTypeId,,<empty>
222780,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,478,1,CPPASTTypeId,,<empty>
222786,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,479,1,CPPASTTypeId,,<empty>
222792,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,480,1,CPPASTTypeId,,<empty>
222798,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,481,1,CPPASTTypeId,,<empty>
222803,UNKNOWN,13,,"const char descriptor_table_protodef_opencv_2donnx_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  ""\n\021opencv-onnx.proto\022\013opencv_onnx\""\203\004\n\016Att""
  ""ributeProto\022\014\n\004name\030\001 \001(\t\022\025\n\rref_attr_na""
  ""me\030\025 \001(\t\022\022\n\ndoc_string\030\r \001(\t\0227\n\004type\030\024 \001""
  ""(\0162).opencv_onnx.AttributeProto.Attribut""
  ""eType\022\t\n\001f\030\002 \001(\002\022\t\n\001i\030\003 \001(\003\022\t\n\001s\030\004 \001(\014\022#""
  ""\n\001t\030\005 \001(\0132\030.opencv_onnx.TensorProto\022\""\n\001g""
  ""\030\006 \001(\0132\027.opencv_onnx.GraphProto\022\016\n\006float""
  ""s\030\007 \003(\002\022\014\n\004ints\030\010 \003(\003\022\017\n\007strings\030\t \003(\014\022)""
  ""\n\007tensors\030\n \003(\0132\030.opencv_onnx.TensorProt""
  ""o\022\'\n\006graphs\030\013 \003(\0132\027.opencv_onnx.GraphPro""
  ""to\""\221\001\n\rAttributeType\022\r\n\tUNDEFINED\020\000\022\t\n\005F""
  ""LOAT\020\001\022\007\n\003INT\020\002\022\n\n\006STRING\020...",1,<empty>,,484,13,CPPASTProblemDeclaration,,<empty>
222827,UNKNOWN,17,,PROTOBUF_ATTRIBUTE_WEAK,1,<empty>,,557,17,CPPASTProblemDeclaration,,<empty>
222835,UNKNOWN,19,,PROTOBUF_ATTRIBUTE_INIT_PRIORITY,1,<empty>,,562,19,CPPASTProblemDeclaration,,<empty>
223343,UNKNOWN,1,,size_t,17,<empty>,,779,1,CPPASTTypeId,,<empty>
223346,UNKNOWN,1,,char*,42,<empty>,,779,1,CPPASTTypeId,,<empty>
223350,UNKNOWN,1,,char*,22,<empty>,,780,1,CPPASTTypeId,,<empty>
223409,UNKNOWN,1,,char*,27,<empty>,,801,1,CPPASTTypeId,,<empty>
223412,UNKNOWN,1,,size_t,54,<empty>,,801,1,CPPASTTypeId,,<empty>
223415,UNKNOWN,1,,char*,22,<empty>,,802,1,CPPASTTypeId,,<empty>
223419,UNKNOWN,1,,char*,53,<empty>,,802,1,CPPASTTypeId,,<empty>
223424,UNKNOWN,1,,size_t,20,<empty>,,803,1,CPPASTTypeId,,<empty>
223427,UNKNOWN,1,,char*,45,<empty>,,803,1,CPPASTTypeId,,<empty>
223431,UNKNOWN,1,,char*,22,<empty>,,804,1,CPPASTTypeId,,<empty>
223526,UNKNOWN,1,,AttributeProto*,45,<empty>,,825,1,CPPASTTypeId,,<empty>
223529,UNKNOWN,1,,void,4,<empty>,,826,1,CPPASTTypeId,,<empty>
223555,UNKNOWN,1,,void,4,<empty>,,838,1,CPPASTTypeId,,<empty>
223663,UNKNOWN,1,,size_t,34,<empty>,,869,1,CPPASTTypeId,,<empty>
223666,UNKNOWN,1,,char*,26,<empty>,,870,1,CPPASTTypeId,,<empty>
223670,UNKNOWN,1,,char*,26,<empty>,,871,1,CPPASTTypeId,,<empty>
223728,UNKNOWN,1,,uint8_t,47,<empty>,,887,1,CPPASTTypeId,,<empty>
223774,UNKNOWN,1,,uint8_t,47,<empty>,,899,1,CPPASTTypeId,,<empty>
223807,UNKNOWN,1,,uint8_t,47,<empty>,,908,1,CPPASTTypeId,,<empty>
223846,UNKNOWN,1,,uint8_t,47,<empty>,,917,1,CPPASTTypeId,,<empty>
223884,UNKNOWN,1,,uint8_t,47,<empty>,,926,1,CPPASTTypeId,,<empty>
223915,UNKNOWN,1,,uint8_t,47,<empty>,,934,1,CPPASTTypeId,,<empty>
223946,UNKNOWN,1,,uint8_t,47,<empty>,,942,1,CPPASTTypeId,,<empty>
223993,UNKNOWN,1,,uint8_t,32,<empty>,,950,1,CPPASTTypeId,,<empty>
224027,UNKNOWN,1,,uint8_t,47,<empty>,,958,1,CPPASTTypeId,,<empty>
224080,UNKNOWN,1,,uint8_t,32,<empty>,,966,1,CPPASTTypeId,,<empty>
224114,UNKNOWN,1,,uint8_t,47,<empty>,,974,1,CPPASTTypeId,,<empty>
224178,UNKNOWN,1,,uint8_t,47,<empty>,,988,1,CPPASTTypeId,,<empty>
224235,UNKNOWN,1,,uint8_t,47,<empty>,,1001,1,CPPASTTypeId,,<empty>
224292,UNKNOWN,1,,uint8_t,47,<empty>,,1014,1,CPPASTTypeId,,<empty>
224338,UNKNOWN,1,,uint8_t,47,<empty>,,1026,1,CPPASTTypeId,,<empty>
224372,UNKNOWN,1,,::opencv_onnx::AttributeProto_AttributeType,44,<empty>,,1030,1,CPPASTTypeId,,<empty>
224395,UNKNOWN,1,,uint8_t,47,<empty>,,1039,1,CPPASTTypeId,,<empty>
224508,UNKNOWN,1,,void,4,<empty>,,1077,1,CPPASTTypeId,,<empty>
224536,UNKNOWN,1,,int,50,<empty>,,1083,1,CPPASTTypeId,,<empty>
224829,UNKNOWN,1,,unsigned int,23,<empty>,,1144,1,CPPASTTypeId,,<empty>
224875,UNKNOWN,1,,unsigned int,23,<empty>,,1152,1,CPPASTTypeId,,<empty>
224932,UNKNOWN,1,,int,56,<empty>,,1161,1,CPPASTTypeId,,<empty>
225009,UNKNOWN,1,,int,59,<empty>,,1178,1,CPPASTTypeId,,<empty>
225084,UNKNOWN,1,,void,4,<empty>,,1199,1,CPPASTTypeId,,<empty>
225091,UNKNOWN,1,,unsigned int,38,<empty>,,1203,1,CPPASTTypeId,,<empty>
225464,UNKNOWN,1,,AttributeProto *,15,<empty>,,1313,1,CPPASTTypeId,,<empty>
225468,UNKNOWN,1,,const AttributeProto &,19,<empty>,,1314,1,CPPASTTypeId,,<empty>
225484,UNKNOWN,1,,void,4,<empty>,,1322,1,CPPASTTypeId,,<empty>
225853,UNKNOWN,1,,char*,28,<empty>,,1409,1,CPPASTTypeId,,<empty>
225857,UNKNOWN,1,,char*,28,<empty>,,1410,1,CPPASTTypeId,,<empty>
226124,UNKNOWN,1,,ValueInfoProto*,45,<empty>,,1504,1,CPPASTTypeId,,<empty>
226127,UNKNOWN,1,,void,4,<empty>,,1505,1,CPPASTTypeId,,<empty>
226153,UNKNOWN,1,,void,4,<empty>,,1517,1,CPPASTTypeId,,<empty>
226246,UNKNOWN,1,,uint8_t,47,<empty>,,1545,1,CPPASTTypeId,,<empty>
226292,UNKNOWN,1,,uint8_t,47,<empty>,,1557,1,CPPASTTypeId,,<empty>
226323,UNKNOWN,1,,uint8_t,47,<empty>,,1565,1,CPPASTTypeId,,<empty>
226436,UNKNOWN,1,,void,4,<empty>,,1603,1,CPPASTTypeId,,<empty>
226464,UNKNOWN,1,,int,50,<empty>,,1609,1,CPPASTTypeId,,<empty>
226543,UNKNOWN,1,,int,56,<empty>,,1627,1,CPPASTTypeId,,<empty>
226618,UNKNOWN,1,,void,4,<empty>,,1648,1,CPPASTTypeId,,<empty>
226724,UNKNOWN,1,,ValueInfoProto *,15,<empty>,,1685,1,CPPASTTypeId,,<empty>
226728,UNKNOWN,1,,const ValueInfoProto &,19,<empty>,,1686,1,CPPASTTypeId,,<empty>
226744,UNKNOWN,1,,void,4,<empty>,,1694,1,CPPASTTypeId,,<empty>
227236,UNKNOWN,1,,NodeProto*,40,<empty>,,1855,1,CPPASTTypeId,,<empty>
227239,UNKNOWN,1,,void,4,<empty>,,1856,1,CPPASTTypeId,,<empty>
227265,UNKNOWN,1,,void,4,<empty>,,1868,1,CPPASTTypeId,,<empty>
227375,UNKNOWN,1,,uint8_t,47,<empty>,,1901,1,CPPASTTypeId,,<empty>
227447,UNKNOWN,1,,uint8_t,47,<empty>,,1918,1,CPPASTTypeId,,<empty>
227519,UNKNOWN,1,,uint8_t,47,<empty>,,1935,1,CPPASTTypeId,,<empty>
227565,UNKNOWN,1,,uint8_t,47,<empty>,,1947,1,CPPASTTypeId,,<empty>
227611,UNKNOWN,1,,uint8_t,47,<empty>,,1959,1,CPPASTTypeId,,<empty>
227668,UNKNOWN,1,,uint8_t,47,<empty>,,1972,1,CPPASTTypeId,,<empty>
227714,UNKNOWN,1,,uint8_t,47,<empty>,,1984,1,CPPASTTypeId,,<empty>
227827,UNKNOWN,1,,void,4,<empty>,,2022,1,CPPASTTypeId,,<empty>
227869,UNKNOWN,1,,int,29,<empty>,,2028,1,CPPASTTypeId,,<empty>
227931,UNKNOWN,1,,int,29,<empty>,,2038,1,CPPASTTypeId,,<empty>
227979,UNKNOWN,1,,int,50,<empty>,,2048,1,CPPASTTypeId,,<empty>
228028,UNKNOWN,1,,int,53,<empty>,,2058,1,CPPASTTypeId,,<empty>
228066,UNKNOWN,1,,unsigned int,23,<empty>,,2067,1,CPPASTTypeId,,<empty>
228123,UNKNOWN,1,,int,56,<empty>,,2076,1,CPPASTTypeId,,<empty>
228172,UNKNOWN,1,,int,52,<empty>,,2086,1,CPPASTTypeId,,<empty>
228247,UNKNOWN,1,,void,4,<empty>,,2107,1,CPPASTTypeId,,<empty>
228497,UNKNOWN,1,,NodeProto *,15,<empty>,,2174,1,CPPASTTypeId,,<empty>
228501,UNKNOWN,1,,const NodeProto &,19,<empty>,,2175,1,CPPASTTypeId,,<empty>
228517,UNKNOWN,1,,void,4,<empty>,,2183,1,CPPASTTypeId,,<empty>
229057,UNKNOWN,1,,size_t,17,<empty>,,2342,1,CPPASTTypeId,,<empty>
229060,UNKNOWN,1,,char*,42,<empty>,,2342,1,CPPASTTypeId,,<empty>
229064,UNKNOWN,1,,char*,22,<empty>,,2343,1,CPPASTTypeId,,<empty>
229123,UNKNOWN,1,,char*,27,<empty>,,2364,1,CPPASTTypeId,,<empty>
229126,UNKNOWN,1,,size_t,54,<empty>,,2364,1,CPPASTTypeId,,<empty>
229129,UNKNOWN,1,,char*,22,<empty>,,2365,1,CPPASTTypeId,,<empty>
229133,UNKNOWN,1,,char*,57,<empty>,,2365,1,CPPASTTypeId,,<empty>
229138,UNKNOWN,1,,size_t,20,<empty>,,2366,1,CPPASTTypeId,,<empty>
229141,UNKNOWN,1,,char*,45,<empty>,,2366,1,CPPASTTypeId,,<empty>
229145,UNKNOWN,1,,char*,22,<empty>,,2367,1,CPPASTTypeId,,<empty>
229233,UNKNOWN,1,,ModelProto*,41,<empty>,,2387,1,CPPASTTypeId,,<empty>
229236,UNKNOWN,1,,void,4,<empty>,,2388,1,CPPASTTypeId,,<empty>
229262,UNKNOWN,1,,void,4,<empty>,,2400,1,CPPASTTypeId,,<empty>
229345,UNKNOWN,1,,size_t,43,<empty>,,2424,1,CPPASTTypeId,,<empty>
229348,UNKNOWN,1,,char*,26,<empty>,,2425,1,CPPASTTypeId,,<empty>
229352,UNKNOWN,1,,char*,26,<empty>,,2426,1,CPPASTTypeId,,<empty>
229407,UNKNOWN,1,,uint8_t,47,<empty>,,2441,1,CPPASTTypeId,,<empty>
229446,UNKNOWN,1,,uint8_t,47,<empty>,,2450,1,CPPASTTypeId,,<empty>
229492,UNKNOWN,1,,uint8_t,47,<empty>,,2462,1,CPPASTTypeId,,<empty>
229538,UNKNOWN,1,,uint8_t,47,<empty>,,2474,1,CPPASTTypeId,,<empty>
229584,UNKNOWN,1,,uint8_t,47,<empty>,,2486,1,CPPASTTypeId,,<empty>
229623,UNKNOWN,1,,uint8_t,47,<empty>,,2495,1,CPPASTTypeId,,<empty>
229669,UNKNOWN,1,,uint8_t,47,<empty>,,2507,1,CPPASTTypeId,,<empty>
229700,UNKNOWN,1,,uint8_t,47,<empty>,,2515,1,CPPASTTypeId,,<empty>
229757,UNKNOWN,1,,uint8_t,47,<empty>,,2528,1,CPPASTTypeId,,<empty>
229881,UNKNOWN,1,,void,4,<empty>,,2567,1,CPPASTTypeId,,<empty>
229937,UNKNOWN,1,,int,59,<empty>,,2579,1,CPPASTTypeId,,<empty>
229986,UNKNOWN,1,,int,62,<empty>,,2589,1,CPPASTTypeId,,<empty>
230035,UNKNOWN,1,,int,52,<empty>,,2599,1,CPPASTTypeId,,<empty>
230112,UNKNOWN,1,,int,56,<empty>,,2615,1,CPPASTTypeId,,<empty>
230180,UNKNOWN,1,,unsigned int,23,<empty>,,2632,1,CPPASTTypeId,,<empty>
230226,UNKNOWN,1,,unsigned int,23,<empty>,,2640,1,CPPASTTypeId,,<empty>
230309,UNKNOWN,1,,void,4,<empty>,,2660,1,CPPASTTypeId,,<empty>
230545,UNKNOWN,1,,ModelProto *,15,<empty>,,2735,1,CPPASTTypeId,,<empty>
230549,UNKNOWN,1,,const ModelProto &,19,<empty>,,2736,1,CPPASTTypeId,,<empty>
230565,UNKNOWN,1,,void,4,<empty>,,2744,1,CPPASTTypeId,,<empty>
230866,UNKNOWN,1,,char*,28,<empty>,,2819,1,CPPASTTypeId,,<empty>
230870,UNKNOWN,1,,char*,28,<empty>,,2820,1,CPPASTTypeId,,<empty>
231082,UNKNOWN,1,,StringStringEntryProto*,53,<empty>,,2899,1,CPPASTTypeId,,<empty>
231085,UNKNOWN,1,,void,4,<empty>,,2900,1,CPPASTTypeId,,<empty>
231111,UNKNOWN,1,,void,4,<empty>,,2912,1,CPPASTTypeId,,<empty>
231191,UNKNOWN,1,,uint8_t,47,<empty>,,2936,1,CPPASTTypeId,,<empty>
231237,UNKNOWN,1,,uint8_t,47,<empty>,,2948,1,CPPASTTypeId,,<empty>
231350,UNKNOWN,1,,void,4,<empty>,,2986,1,CPPASTTypeId,,<empty>
231378,UNKNOWN,1,,int,49,<empty>,,2992,1,CPPASTTypeId,,<empty>
231427,UNKNOWN,1,,int,51,<empty>,,3002,1,CPPASTTypeId,,<empty>
231502,UNKNOWN,1,,void,4,<empty>,,3023,1,CPPASTTypeId,,<empty>
231589,UNKNOWN,1,,StringStringEntryProto *,15,<empty>,,3053,1,CPPASTTypeId,,<empty>
231593,UNKNOWN,1,,const StringStringEntryProto &,19,<empty>,,3054,1,CPPASTTypeId,,<empty>
231609,UNKNOWN,1,,void,4,<empty>,,3062,1,CPPASTTypeId,,<empty>
231961,UNKNOWN,1,,GraphProto*,41,<empty>,,3191,1,CPPASTTypeId,,<empty>
231964,UNKNOWN,1,,void,4,<empty>,,3192,1,CPPASTTypeId,,<empty>
231990,UNKNOWN,1,,void,4,<empty>,,3204,1,CPPASTTypeId,,<empty>
232090,UNKNOWN,1,,uint8_t,47,<empty>,,3233,1,CPPASTTypeId,,<empty>
232147,UNKNOWN,1,,uint8_t,47,<empty>,,3246,1,CPPASTTypeId,,<empty>
232193,UNKNOWN,1,,uint8_t,47,<empty>,,3258,1,CPPASTTypeId,,<empty>
232250,UNKNOWN,1,,uint8_t,47,<empty>,,3271,1,CPPASTTypeId,,<empty>
232296,UNKNOWN,1,,uint8_t,47,<empty>,,3283,1,CPPASTTypeId,,<empty>
232353,UNKNOWN,1,,uint8_t,47,<empty>,,3296,1,CPPASTTypeId,,<empty>
232410,UNKNOWN,1,,uint8_t,47,<empty>,,3309,1,CPPASTTypeId,,<empty>
232534,UNKNOWN,1,,void,4,<empty>,,3348,1,CPPASTTypeId,,<empty>
232546,UNKNOWN,1,,unsigned int,23,<empty>,,3352,1,CPPASTTypeId,,<empty>
232608,UNKNOWN,1,,int,50,<empty>,,3362,1,CPPASTTypeId,,<empty>
232646,UNKNOWN,1,,unsigned int,23,<empty>,,3371,1,CPPASTTypeId,,<empty>
232703,UNKNOWN,1,,int,56,<empty>,,3380,1,CPPASTTypeId,,<empty>
232741,UNKNOWN,1,,unsigned int,23,<empty>,,3389,1,CPPASTTypeId,,<empty>
232787,UNKNOWN,1,,unsigned int,23,<empty>,,3397,1,CPPASTTypeId,,<empty>
232833,UNKNOWN,1,,unsigned int,23,<empty>,,3405,1,CPPASTTypeId,,<empty>
232916,UNKNOWN,1,,void,4,<empty>,,3425,1,CPPASTTypeId,,<empty>
233128,UNKNOWN,1,,GraphProto *,15,<empty>,,3490,1,CPPASTTypeId,,<empty>
233132,UNKNOWN,1,,const GraphProto &,19,<empty>,,3491,1,CPPASTTypeId,,<empty>
233148,UNKNOWN,1,,void,4,<empty>,,3499,1,CPPASTTypeId,,<empty>
233451,UNKNOWN,1,,size_t,17,<empty>,,3585,1,CPPASTTypeId,,<empty>
233454,UNKNOWN,1,,char*,42,<empty>,,3585,1,CPPASTTypeId,,<empty>
233458,UNKNOWN,1,,char*,22,<empty>,,3586,1,CPPASTTypeId,,<empty>
233473,UNKNOWN,1,,char*,27,<empty>,,3591,1,CPPASTTypeId,,<empty>
233476,UNKNOWN,1,,size_t,54,<empty>,,3591,1,CPPASTTypeId,,<empty>
233479,UNKNOWN,1,,char*,22,<empty>,,3592,1,CPPASTTypeId,,<empty>
233483,UNKNOWN,1,,char*,57,<empty>,,3592,1,CPPASTTypeId,,<empty>
233488,UNKNOWN,1,,size_t,20,<empty>,,3593,1,CPPASTTypeId,,<empty>
233491,UNKNOWN,1,,char*,45,<empty>,,3593,1,CPPASTTypeId,,<empty>
233495,UNKNOWN,1,,char*,22,<empty>,,3594,1,CPPASTTypeId,,<empty>
233532,UNKNOWN,1,,TensorProto_Segment*,50,<empty>,,3609,1,CPPASTTypeId,,<empty>
233535,UNKNOWN,1,,void,4,<empty>,,3610,1,CPPASTTypeId,,<empty>
233561,UNKNOWN,1,,void,4,<empty>,,3622,1,CPPASTTypeId,,<empty>
233582,UNKNOWN,1,,size_t,38,<empty>,,3626,1,CPPASTTypeId,,<empty>
233585,UNKNOWN,1,,char*,26,<empty>,,3627,1,CPPASTTypeId,,<empty>
233589,UNKNOWN,1,,char*,26,<empty>,,3628,1,CPPASTTypeId,,<empty>
233644,UNKNOWN,1,,uint8_t,47,<empty>,,3643,1,CPPASTTypeId,,<empty>
233683,UNKNOWN,1,,uint8_t,47,<empty>,,3652,1,CPPASTTypeId,,<empty>
233789,UNKNOWN,1,,void,4,<empty>,,3687,1,CPPASTTypeId,,<empty>
233899,UNKNOWN,1,,void,4,<empty>,,3716,1,CPPASTTypeId,,<empty>
233982,UNKNOWN,1,,TensorProto_Segment *,15,<empty>,,3742,1,CPPASTTypeId,,<empty>
233986,UNKNOWN,1,,const TensorProto_Segment &,19,<empty>,,3743,1,CPPASTTypeId,,<empty>
234002,UNKNOWN,1,,void,4,<empty>,,3751,1,CPPASTTypeId,,<empty>
234117,UNKNOWN,1,,char*,28,<empty>,,3785,1,CPPASTTypeId,,<empty>
234121,UNKNOWN,1,,char*,28,<empty>,,3786,1,CPPASTTypeId,,<empty>
234396,UNKNOWN,1,,char*,27,<empty>,,3895,1,CPPASTTypeId,,<empty>
234399,UNKNOWN,1,,size_t,54,<empty>,,3895,1,CPPASTTypeId,,<empty>
234402,UNKNOWN,1,,char*,22,<empty>,,3896,1,CPPASTTypeId,,<empty>
234406,UNKNOWN,1,,char*,59,<empty>,,3896,1,CPPASTTypeId,,<empty>
234411,UNKNOWN,1,,size_t,20,<empty>,,3897,1,CPPASTTypeId,,<empty>
234414,UNKNOWN,1,,char*,45,<empty>,,3897,1,CPPASTTypeId,,<empty>
234418,UNKNOWN,1,,char*,22,<empty>,,3898,1,CPPASTTypeId,,<empty>
234495,UNKNOWN,1,,TensorProto*,42,<empty>,,3917,1,CPPASTTypeId,,<empty>
234498,UNKNOWN,1,,void,4,<empty>,,3918,1,CPPASTTypeId,,<empty>
234524,UNKNOWN,1,,void,4,<empty>,,3930,1,CPPASTTypeId,,<empty>
234657,UNKNOWN,1,,uint8_t,47,<empty>,,3969,1,CPPASTTypeId,,<empty>
234710,UNKNOWN,1,,uint8_t,32,<empty>,,3977,1,CPPASTTypeId,,<empty>
234744,UNKNOWN,1,,uint8_t,47,<empty>,,3985,1,CPPASTTypeId,,<empty>
234778,UNKNOWN,1,,::opencv_onnx::TensorProto_DataType,49,<empty>,,3989,1,CPPASTTypeId,,<empty>
234801,UNKNOWN,1,,uint8_t,47,<empty>,,3998,1,CPPASTTypeId,,<empty>
234832,UNKNOWN,1,,uint8_t,47,<empty>,,4006,1,CPPASTTypeId,,<empty>
234861,UNKNOWN,1,,uint8_t,32,<empty>,,4009,1,CPPASTTypeId,,<empty>
234887,UNKNOWN,1,,uint8_t,47,<empty>,,4017,1,CPPASTTypeId,,<empty>
234916,UNKNOWN,1,,uint8_t,32,<empty>,,4020,1,CPPASTTypeId,,<empty>
234948,UNKNOWN,1,,uint8_t,47,<empty>,,4028,1,CPPASTTypeId,,<empty>
235012,UNKNOWN,1,,uint8_t,47,<empty>,,4042,1,CPPASTTypeId,,<empty>
235041,UNKNOWN,1,,uint8_t,32,<empty>,,4045,1,CPPASTTypeId,,<empty>
235073,UNKNOWN,1,,uint8_t,47,<empty>,,4053,1,CPPASTTypeId,,<empty>
235119,UNKNOWN,1,,uint8_t,47,<empty>,,4065,1,CPPASTTypeId,,<empty>
235157,UNKNOWN,1,,uint8_t,47,<empty>,,4074,1,CPPASTTypeId,,<empty>
235186,UNKNOWN,1,,uint8_t,32,<empty>,,4077,1,CPPASTTypeId,,<empty>
235212,UNKNOWN,1,,uint8_t,47,<empty>,,4085,1,CPPASTTypeId,,<empty>
235241,UNKNOWN,1,,uint8_t,32,<empty>,,4088,1,CPPASTTypeId,,<empty>
235273,UNKNOWN,1,,uint8_t,47,<empty>,,4096,1,CPPASTTypeId,,<empty>
235386,UNKNOWN,1,,void,4,<empty>,,4134,1,CPPASTTypeId,,<empty>
235620,UNKNOWN,1,,int,50,<empty>,,4190,1,CPPASTTypeId,,<empty>
235729,UNKNOWN,1,,int,56,<empty>,,4220,1,CPPASTTypeId,,<empty>
235804,UNKNOWN,1,,void,4,<empty>,,4241,1,CPPASTTypeId,,<empty>
235843,UNKNOWN,1,,unsigned int,38,<empty>,,4254,1,CPPASTTypeId,,<empty>
235872,UNKNOWN,1,,int32_t,25,<empty>,,4259,1,CPPASTTypeId,,<empty>
235910,UNKNOWN,1,,int32_t,25,<empty>,,4271,1,CPPASTTypeId,,<empty>
236014,UNKNOWN,1,,int32_t,25,<empty>,,4294,1,CPPASTTypeId,,<empty>
236042,UNKNOWN,1,,unsigned int,38,<empty>,,4304,1,CPPASTTypeId,,<empty>
236071,UNKNOWN,1,,int32_t,25,<empty>,,4309,1,CPPASTTypeId,,<empty>
236109,UNKNOWN,1,,int32_t,25,<empty>,,4321,1,CPPASTTypeId,,<empty>
236278,UNKNOWN,1,,TensorProto *,15,<empty>,,4377,1,CPPASTTypeId,,<empty>
236282,UNKNOWN,1,,const TensorProto &,19,<empty>,,4378,1,CPPASTTypeId,,<empty>
236298,UNKNOWN,1,,void,4,<empty>,,4386,1,CPPASTTypeId,,<empty>
236631,UNKNOWN,1,,char*,28,<empty>,,4460,1,CPPASTTypeId,,<empty>
236635,UNKNOWN,1,,char*,28,<empty>,,4461,1,CPPASTTypeId,,<empty>
236820,UNKNOWN,1,,TensorShapeProto_Dimension*,57,<empty>,,4542,1,CPPASTTypeId,,<empty>
236823,UNKNOWN,1,,void,4,<empty>,,4543,1,CPPASTTypeId,,<empty>
236882,UNKNOWN,1,,void,4,<empty>,,4574,1,CPPASTTypeId,,<empty>
236949,UNKNOWN,1,,uint8_t,47,<empty>,,4594,1,CPPASTTypeId,,<empty>
236981,UNKNOWN,1,,uint8_t,47,<empty>,,4602,1,CPPASTTypeId,,<empty>
237027,UNKNOWN,1,,uint8_t,47,<empty>,,4614,1,CPPASTTypeId,,<empty>
237140,UNKNOWN,1,,void,4,<empty>,,4652,1,CPPASTTypeId,,<empty>
237191,UNKNOWN,1,,int,57,<empty>,,4662,1,CPPASTTypeId,,<empty>
237247,UNKNOWN,1,,int,56,<empty>,,4675,1,CPPASTTypeId,,<empty>
237322,UNKNOWN,1,,void,4,<empty>,,4696,1,CPPASTTypeId,,<empty>
237428,UNKNOWN,1,,TensorShapeProto_Dimension *,15,<empty>,,4734,1,CPPASTTypeId,,<empty>
237432,UNKNOWN,1,,const TensorShapeProto_Dimension &,19,<empty>,,4735,1,CPPASTTypeId,,<empty>
237448,UNKNOWN,1,,void,4,<empty>,,4743,1,CPPASTTypeId,,<empty>
237675,UNKNOWN,1,,TensorShapeProto*,47,<empty>,,4834,1,CPPASTTypeId,,<empty>
237678,UNKNOWN,1,,void,4,<empty>,,4835,1,CPPASTTypeId,,<empty>
237704,UNKNOWN,1,,void,4,<empty>,,4847,1,CPPASTTypeId,,<empty>
237752,UNKNOWN,1,,uint8_t,47,<empty>,,4861,1,CPPASTTypeId,,<empty>
237871,UNKNOWN,1,,void,4,<empty>,,4899,1,CPPASTTypeId,,<empty>
237883,UNKNOWN,1,,unsigned int,23,<empty>,,4903,1,CPPASTTypeId,,<empty>
237966,UNKNOWN,1,,void,4,<empty>,,4923,1,CPPASTTypeId,,<empty>
238026,UNKNOWN,1,,TensorShapeProto *,15,<empty>,,4943,1,CPPASTTypeId,,<empty>
238030,UNKNOWN,1,,const TensorShapeProto &,19,<empty>,,4944,1,CPPASTTypeId,,<empty>
238046,UNKNOWN,1,,void,4,<empty>,,4952,1,CPPASTTypeId,,<empty>
238228,UNKNOWN,1,,char*,27,<empty>,,5022,1,CPPASTTypeId,,<empty>
238231,UNKNOWN,1,,size_t,54,<empty>,,5022,1,CPPASTTypeId,,<empty>
238234,UNKNOWN,1,,char*,22,<empty>,,5023,1,CPPASTTypeId,,<empty>
238238,UNKNOWN,1,,char*,57,<empty>,,5023,1,CPPASTTypeId,,<empty>
238243,UNKNOWN,1,,size_t,20,<empty>,,5024,1,CPPASTTypeId,,<empty>
238246,UNKNOWN,1,,char*,45,<empty>,,5024,1,CPPASTTypeId,,<empty>
238250,UNKNOWN,1,,char*,22,<empty>,,5025,1,CPPASTTypeId,,<empty>
238294,UNKNOWN,1,,TypeProto_Tensor*,47,<empty>,,5041,1,CPPASTTypeId,,<empty>
238297,UNKNOWN,1,,void,4,<empty>,,5042,1,CPPASTTypeId,,<empty>
238323,UNKNOWN,1,,void,4,<empty>,,5054,1,CPPASTTypeId,,<empty>
238396,UNKNOWN,1,,uint8_t,47,<empty>,,5075,1,CPPASTTypeId,,<empty>
238430,UNKNOWN,1,,::opencv_onnx::TensorProto_DataType,49,<empty>,,5079,1,CPPASTTypeId,,<empty>
238453,UNKNOWN,1,,uint8_t,47,<empty>,,5088,1,CPPASTTypeId,,<empty>
238551,UNKNOWN,1,,void,4,<empty>,,5122,1,CPPASTTypeId,,<empty>
238663,UNKNOWN,1,,void,4,<empty>,,5154,1,CPPASTTypeId,,<empty>
238748,UNKNOWN,1,,TypeProto_Tensor *,15,<empty>,,5183,1,CPPASTTypeId,,<empty>
238752,UNKNOWN,1,,const TypeProto_Tensor &,19,<empty>,,5184,1,CPPASTTypeId,,<empty>
238768,UNKNOWN,1,,void,4,<empty>,,5192,1,CPPASTTypeId,,<empty>
238886,UNKNOWN,1,,char*,28,<empty>,,5226,1,CPPASTTypeId,,<empty>
238890,UNKNOWN,1,,char*,28,<empty>,,5227,1,CPPASTTypeId,,<empty>
239139,UNKNOWN,1,,TypeProto*,40,<empty>,,5324,1,CPPASTTypeId,,<empty>
239142,UNKNOWN,1,,void,4,<empty>,,5325,1,CPPASTTypeId,,<empty>
239197,UNKNOWN,1,,void,4,<empty>,,5354,1,CPPASTTypeId,,<empty>
239264,UNKNOWN,1,,uint8_t,47,<empty>,,5374,1,CPPASTTypeId,,<empty>
239295,UNKNOWN,1,,uint8_t,47,<empty>,,5382,1,CPPASTTypeId,,<empty>
239408,UNKNOWN,1,,void,4,<empty>,,5420,1,CPPASTTypeId,,<empty>
239464,UNKNOWN,1,,int,56,<empty>,,5434,1,CPPASTTypeId,,<empty>
239539,UNKNOWN,1,,void,4,<empty>,,5455,1,CPPASTTypeId,,<empty>
239627,UNKNOWN,1,,TypeProto *,15,<empty>,,5488,1,CPPASTTypeId,,<empty>
239631,UNKNOWN,1,,const TypeProto &,19,<empty>,,5489,1,CPPASTTypeId,,<empty>
239647,UNKNOWN,1,,void,4,<empty>,,5497,1,CPPASTTypeId,,<empty>
239951,UNKNOWN,1,,OperatorSetIdProto*,49,<empty>,,5605,1,CPPASTTypeId,,<empty>
239954,UNKNOWN,1,,void,4,<empty>,,5606,1,CPPASTTypeId,,<empty>
239980,UNKNOWN,1,,void,4,<empty>,,5618,1,CPPASTTypeId,,<empty>
240051,UNKNOWN,1,,uint8_t,47,<empty>,,5638,1,CPPASTTypeId,,<empty>
240097,UNKNOWN,1,,uint8_t,47,<empty>,,5650,1,CPPASTTypeId,,<empty>
240203,UNKNOWN,1,,void,4,<empty>,,5685,1,CPPASTTypeId,,<empty>
240231,UNKNOWN,1,,int,52,<empty>,,5691,1,CPPASTTypeId,,<empty>
240334,UNKNOWN,1,,void,4,<empty>,,5718,1,CPPASTTypeId,,<empty>
240419,UNKNOWN,1,,OperatorSetIdProto *,15,<empty>,,5746,1,CPPASTTypeId,,<empty>
240423,UNKNOWN,1,,const OperatorSetIdProto &,19,<empty>,,5747,1,CPPASTTypeId,,<empty>
240439,UNKNOWN,1,,void,4,<empty>,,5755,1,CPPASTTypeId,,<empty>
240591,UNKNOWN,23,,PROTOBUF_NAMESPACE_OPEN,1,<empty>,,5803,23,CPPASTProblemDeclaration,,<empty>
240787,UNKNOWN,37,,PROTOBUF_NAMESPACE_CLOSE,1,<empty>,,5843,37,CPPASTProblemDeclaration,,<empty>
240829,UNKNOWN,1,,PROTOBUF_NAMESPACE_OPEN,1,<empty>,,38,1,CPPASTProblemDeclaration,,<empty>
240832,UNKNOWN,3,,PROTOBUF_NAMESPACE_CLOSE,1,<empty>,,42,3,CPPASTProblemDeclaration,,<empty>
240835,UNKNOWN,-1,,],75,<empty>,,46,2,CPPASTProblemDeclaration,,<empty>
240838,UNKNOWN,-1,,],80,<empty>,,48,5,CPPASTProblemDeclaration,,<empty>
240841,UNKNOWN,-1,,],71,<empty>,,50,8,CPPASTProblemDeclaration,,<empty>
240898,UNKNOWN,7,,PROTOBUF_NAMESPACE_OPEN,1,<empty>,,98,7,CPPASTProblemDeclaration,,<empty>
240964,UNKNOWN,21,,PROTOBUF_NAMESPACE_CLOSE,1,<empty>,,112,21,CPPASTProblemDeclaration,,<empty>
241463,UNKNOWN,1,,const AttributeProto*,29,<empty>,,262,1,CPPASTTypeId,,<empty>
241559,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,302,23,CPPASTProblemDeclaration,,<empty>
242066,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,517,128,CPPASTProblemDeclaration,,<empty>
242080,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);,3,<empty>,,521,132,CPPASTProblemDeclaration,,<empty>
242111,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,535,140,CPPASTProblemDeclaration,,<empty>
242125,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_s(const std::string& value);,3,<empty>,,539,144,CPPASTProblemDeclaration,,<empty>
242156,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,553,152,CPPASTProblemDeclaration,,<empty>
242170,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_doc_string(const std::string& value);,3,<empty>,,557,156,CPPASTProblemDeclaration,,<empty>
242201,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,571,164,CPPASTProblemDeclaration,,<empty>
242215,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_ref_attr_name(const std::string& value);,3,<empty>,,575,168,CPPASTProblemDeclaration,,<empty>
242608,UNKNOWN,1,,const ValueInfoProto*,29,<empty>,,732,1,CPPASTTypeId,,<empty>
242704,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,772,23,CPPASTProblemDeclaration,,<empty>
242831,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,824,49,CPPASTProblemDeclaration,,<empty>
242845,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);,3,<empty>,,828,53,CPPASTProblemDeclaration,,<empty>
242876,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,842,61,CPPASTProblemDeclaration,,<empty>
242890,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_doc_string(const std::string& value);,3,<empty>,,846,65,CPPASTProblemDeclaration,,<empty>
243094,UNKNOWN,1,,const NodeProto*,29,<empty>,,935,1,CPPASTTypeId,,<empty>
243190,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,975,23,CPPASTProblemDeclaration,,<empty>
243532,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,1097,91,CPPASTProblemDeclaration,,<empty>
243546,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);,3,<empty>,,1101,95,CPPASTProblemDeclaration,,<empty>
243577,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,1115,103,CPPASTProblemDeclaration,,<empty>
243591,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_op_type(const std::string& value);,3,<empty>,,1119,107,CPPASTProblemDeclaration,,<empty>
243622,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,1133,115,CPPASTProblemDeclaration,,<empty>
243636,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_doc_string(const std::string& value);,3,<empty>,,1137,119,CPPASTProblemDeclaration,,<empty>
243667,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,1151,127,CPPASTProblemDeclaration,,<empty>
243681,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(const std::string& value);,3,<empty>,,1155,131,CPPASTProblemDeclaration,,<empty>
243843,UNKNOWN,1,,const ModelProto*,29,<empty>,,1230,1,CPPASTTypeId,,<empty>
243939,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,1270,23,CPPASTProblemDeclaration,,<empty>
244176,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,1364,69,CPPASTProblemDeclaration,,<empty>
244190,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_producer_name(const std::string& value);,3,<empty>,,1368,73,CPPASTProblemDeclaration,,<empty>
244221,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,1382,81,CPPASTProblemDeclaration,,<empty>
244235,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_producer_version(const std::string& value);,3,<empty>,,1386,85,CPPASTProblemDeclaration,,<empty>
244266,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,1400,93,CPPASTProblemDeclaration,,<empty>
244280,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(const std::string& value);,3,<empty>,,1404,97,CPPASTProblemDeclaration,,<empty>
244311,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,1418,105,CPPASTProblemDeclaration,,<empty>
244325,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_doc_string(const std::string& value);,3,<empty>,,1422,109,CPPASTProblemDeclaration,,<empty>
244595,UNKNOWN,1,,const StringStringEntryProto*,29,<empty>,,1543,1,CPPASTTypeId,,<empty>
244691,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,1583,23,CPPASTProblemDeclaration,,<empty>
244814,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,1634,49,CPPASTProblemDeclaration,,<empty>
244828,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);,3,<empty>,,1638,53,CPPASTProblemDeclaration,,<empty>
244859,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,1652,61,CPPASTProblemDeclaration,,<empty>
244873,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);,3,<empty>,,1656,65,CPPASTProblemDeclaration,,<empty>
245030,UNKNOWN,1,,const GraphProto*,29,<empty>,,1726,1,CPPASTTypeId,,<empty>
245126,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,1766,23,CPPASTProblemDeclaration,,<empty>
245484,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,1912,99,CPPASTProblemDeclaration,,<empty>
245498,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);,3,<empty>,,1916,103,CPPASTProblemDeclaration,,<empty>
245529,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,1930,111,CPPASTProblemDeclaration,,<empty>
245543,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_doc_string(const std::string& value);,3,<empty>,,1934,115,CPPASTProblemDeclaration,,<empty>
245705,UNKNOWN,1,,const TensorProto_Segment*,29,<empty>,,2009,1,CPPASTTypeId,,<empty>
245801,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,2049,23,CPPASTProblemDeclaration,,<empty>
246110,UNKNOWN,1,,const TensorProto*,29,<empty>,,2182,1,CPPASTTypeId,,<empty>
246206,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,2222,23,CPPASTProblemDeclaration,,<empty>
246841,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,2499,162,CPPASTProblemDeclaration,,<empty>
246855,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);,3,<empty>,,2503,166,CPPASTProblemDeclaration,,<empty>
246886,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,2517,174,CPPASTProblemDeclaration,,<empty>
246900,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_raw_data(const std::string& value);,3,<empty>,,2521,178,CPPASTProblemDeclaration,,<empty>
246931,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,2535,186,CPPASTProblemDeclaration,,<empty>
246945,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_doc_string(const std::string& value);,3,<empty>,,2539,190,CPPASTProblemDeclaration,,<empty>
247265,UNKNOWN,1,,const TensorShapeProto_Dimension*,29,<empty>,,2659,1,CPPASTTypeId,,<empty>
247361,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,2699,24,CPPASTProblemDeclaration,,<empty>
247488,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,2751,50,CPPASTProblemDeclaration,,<empty>
247502,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_denotation(const std::string& value);,3,<empty>,,2755,54,CPPASTProblemDeclaration,,<empty>
247563,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,2782,69,CPPASTProblemDeclaration,,<empty>
247577,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_dim_param(const std::string& value);,3,<empty>,,2786,73,CPPASTProblemDeclaration,,<empty>
247769,UNKNOWN,1,,const TensorShapeProto*,29,<empty>,,2870,1,CPPASTTypeId,,<empty>
247865,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,2910,23,CPPASTProblemDeclaration,,<empty>
248152,UNKNOWN,1,,const TypeProto_Tensor*,29,<empty>,,3034,1,CPPASTTypeId,,<empty>
248248,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,3074,23,CPPASTProblemDeclaration,,<empty>
248586,UNKNOWN,1,,const TypeProto*,29,<empty>,,3217,1,CPPASTTypeId,,<empty>
248682,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,3257,24,CPPASTProblemDeclaration,,<empty>
248806,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,3310,51,CPPASTProblemDeclaration,,<empty>
248820,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_denotation(const std::string& value);,3,<empty>,,3314,55,CPPASTProblemDeclaration,,<empty>
249053,UNKNOWN,1,,const OperatorSetIdProto*,29,<empty>,,3414,1,CPPASTTypeId,,<empty>
249149,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,3454,23,CPPASTProblemDeclaration,,<empty>
249272,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,3505,49,CPPASTProblemDeclaration,,<empty>
249286,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(const std::string& value);,3,<empty>,,3509,53,CPPASTProblemDeclaration,,<empty>
249379,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AttributeProto::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_onnx.AttributeProto.name)
}",1,<empty>,,3566,51,CPPASTProblemDeclaration,,<empty>
249545,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AttributeProto::set_ref_attr_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 ref_attr_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_onnx.AttributeProto.ref_attr_name)
}",1,<empty>,,3635,62,CPPASTProblemDeclaration,,<empty>
249711,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AttributeProto::set_doc_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 doc_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_onnx.AttributeProto.doc_string)
}",1,<empty>,,3704,73,CPPASTProblemDeclaration,,<empty>
249874,UNKNOWN,1,,::opencv_onnx::AttributeProto_AttributeType,23,<empty>,,3770,1,CPPASTTypeId,,<empty>
250088,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AttributeProto::set_s(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 s_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_onnx.AttributeProto.s)
}",1,<empty>,,3858,105,CPPASTProblemDeclaration,,<empty>
250274,UNKNOWN,1,,const ::opencv_onnx::TensorProto&,47,<empty>,,3926,1,CPPASTTypeId,,<empty>
250296,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,3936,1,CPPASTTypeId,,<empty>
250541,UNKNOWN,1,,const ::opencv_onnx::GraphProto&,47,<empty>,,4016,1,CPPASTTypeId,,<empty>
250563,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,4026,1,CPPASTTypeId,,<empty>
251068,UNKNOWN,1,,const char*,22,<empty>,,4226,1,CPPASTTypeId,,<empty>
251138,UNKNOWN,1,,const char*,43,<empty>,,4246,1,CPPASTTypeId,,<empty>
251368,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ValueInfoProto::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_onnx.ValueInfoProto.name)
}",1,<empty>,,4360,200,CPPASTProblemDeclaration,,<empty>
251554,UNKNOWN,1,,const ::opencv_onnx::TypeProto&,47,<empty>,,4428,1,CPPASTTypeId,,<empty>
251576,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,4438,1,CPPASTTypeId,,<empty>
251801,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ValueInfoProto::set_doc_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 doc_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_onnx.ValueInfoProto.doc_string)
}",1,<empty>,,4519,222,CPPASTProblemDeclaration,,<empty>
252055,UNKNOWN,1,,const char*,22,<empty>,,4617,1,CPPASTTypeId,,<empty>
252125,UNKNOWN,1,,const char*,41,<empty>,,4637,1,CPPASTTypeId,,<empty>
252273,UNKNOWN,1,,const char*,22,<empty>,,4692,1,CPPASTTypeId,,<empty>
252343,UNKNOWN,1,,const char*,42,<empty>,,4712,1,CPPASTTypeId,,<empty>
252403,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeProto::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_onnx.NodeProto.name)
}",1,<empty>,,4742,269,CPPASTProblemDeclaration,,<empty>
252569,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeProto::set_op_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 op_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_onnx.NodeProto.op_type)
}",1,<empty>,,4811,280,CPPASTProblemDeclaration,,<empty>
252735,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeProto::set_domain(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_onnx.NodeProto.domain)
}",1,<empty>,,4880,291,CPPASTProblemDeclaration,,<empty>
252986,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeProto::set_doc_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 doc_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_onnx.NodeProto.doc_string)
}",1,<empty>,,4989,312,CPPASTProblemDeclaration,,<empty>
253306,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelProto::set_producer_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 producer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_onnx.ModelProto.producer_name)
}",1,<empty>,,5130,340,CPPASTProblemDeclaration,,<empty>
253472,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelProto::set_producer_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 producer_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_onnx.ModelProto.producer_version)
}",1,<empty>,,5199,351,CPPASTProblemDeclaration,,<empty>
253638,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelProto::set_domain(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_onnx.ModelProto.domain)
}",1,<empty>,,5268,362,CPPASTProblemDeclaration,,<empty>
253873,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelProto::set_doc_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 doc_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_onnx.ModelProto.doc_string)
}",1,<empty>,,5365,380,CPPASTProblemDeclaration,,<empty>
254059,UNKNOWN,1,,const ::opencv_onnx::GraphProto&,47,<empty>,,5433,1,CPPASTTypeId,,<empty>
254081,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,5443,1,CPPASTTypeId,,<empty>
254391,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StringStringEntryProto::set_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_onnx.StringStringEntryProto.key)
}",1,<empty>,,5568,412,CPPASTProblemDeclaration,,<empty>
254557,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StringStringEntryProto::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_onnx.StringStringEntryProto.value)
}",1,<empty>,,5637,423,CPPASTProblemDeclaration,,<empty>
254808,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GraphProto::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_onnx.GraphProto.name)
}",1,<empty>,,5750,444,CPPASTProblemDeclaration,,<empty>
255059,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GraphProto::set_doc_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 doc_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_onnx.GraphProto.doc_string)
}",1,<empty>,,5859,465,CPPASTProblemDeclaration,,<empty>
255711,UNKNOWN,1,,::opencv_onnx::TensorProto_DataType,23,<empty>,,6156,1,CPPASTTypeId,,<empty>
255809,UNKNOWN,1,,const ::opencv_onnx::TensorProto_Segment&,47,<empty>,,6187,1,CPPASTTypeId,,<empty>
255831,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,6197,1,CPPASTTypeId,,<empty>
256336,UNKNOWN,1,,const char*,22,<empty>,,6397,1,CPPASTTypeId,,<empty>
256406,UNKNOWN,1,,const char*,47,<empty>,,6417,1,CPPASTTypeId,,<empty>
256562,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TensorProto::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_onnx.TensorProto.name)
}",1,<empty>,,6494,604,CPPASTProblemDeclaration,,<empty>
256728,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TensorProto::set_doc_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 doc_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_onnx.TensorProto.doc_string)
}",1,<empty>,,6563,615,CPPASTProblemDeclaration,,<empty>
256894,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TensorProto::set_raw_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 raw_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_onnx.TensorProto.raw_data)
}",1,<empty>,,6632,626,CPPASTProblemDeclaration,,<empty>
257370,UNKNOWN,1,,ArgT0 &&,104,<empty>,,6848,1,CPPASTTypeId,,<empty>
257579,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TensorShapeProto_Dimension::set_denotation(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 denotation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_onnx.TensorShapeProto.Dimension.denotation)
}",1,<empty>,,6919,681,CPPASTProblemDeclaration,,<empty>
257856,UNKNOWN,1,,::opencv_onnx::TensorProto_DataType,23,<empty>,,7042,1,CPPASTTypeId,,<empty>
257954,UNKNOWN,1,,const ::opencv_onnx::TensorShapeProto&,47,<empty>,,7073,1,CPPASTTypeId,,<empty>
257976,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,7083,1,CPPASTTypeId,,<empty>
258248,UNKNOWN,1,,::opencv_onnx::TypeProto_Tensor&,27,<empty>,,7187,1,CPPASTTypeId,,<empty>
258377,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TypeProto::set_denotation(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 denotation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_onnx.TypeProto.denotation)
}",1,<empty>,,7242,734,CPPASTProblemDeclaration,,<empty>
258572,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OperatorSetIdProto::set_domain(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_onnx.OperatorSetIdProto.domain)
}",1,<empty>,,7324,748,CPPASTProblemDeclaration,,<empty>
258765,UNKNOWN,23,,PROTOBUF_NAMESPACE_OPEN,1,<empty>,,7437,23,CPPASTProblemDeclaration,,<empty>
258796,UNKNOWN,30,,PROTOBUF_NAMESPACE_CLOSE,1,<empty>,,7455,30,CPPASTProblemDeclaration,,<empty>
258829,UNKNOWN,1,,PROTOBUF_PRAGMA_INIT_SEG,1,<empty>,,18,1,CPPASTProblemDeclaration,,<empty>
258847,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,39,3,CPPASTProblemDeclaration,,<empty>
258865,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,51,7,CPPASTProblemDeclaration,,<empty>
258883,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,62,11,CPPASTProblemDeclaration,,<empty>
258901,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,75,15,CPPASTProblemDeclaration,,<empty>
258914,UNKNOWN,9,,"const uint32_t TableStruct_attr_5fvalue_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::AttrValue_ListValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::AttrValue_ListValue, s_),
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::AttrValue_ListValue, i_),
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::AttrValue_ListValue, f_),
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::AttrValue_ListValue, b_),
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::AttrValue_ListValue, type_),
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::AttrValue_ListValue, shape_),
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::AttrValue_ListValue, tensor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::AttrValue, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD...",1,<empty>,,81,9,CPPASTProblemDeclaration,,<empty>
258915,UNKNOWN,10,,"static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::opencv_tensorflow::AttrValue_ListValue)},
  { 13, -1, -1, sizeof(::opencv_tensorflow::AttrValue)},
  { 30, 38, -1, sizeof(::opencv_tensorflow::NameAttrList_AttrEntry_DoNotUse)},
  { 40, -1, -1, sizeof(::opencv_tensorflow::NameAttrList)},
};",1,<empty>,,131,10,CPPASTProblemDeclaration,,<empty>
258921,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,139,1,CPPASTTypeId,,<empty>
258927,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,140,1,CPPASTTypeId,,<empty>
258933,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,141,1,CPPASTTypeId,,<empty>
258939,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,142,1,CPPASTTypeId,,<empty>
258944,UNKNOWN,13,,"const char descriptor_table_protodef_attr_5fvalue_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  ""\n\020attr_value.proto\022\021opencv_tensorflow\032\014t""
  ""ensor.proto\032\022tensor_shape.proto\032\013types.p""
  ""roto\""\266\004\n\tAttrValue\022\013\n\001s\030\002 \001(\014H\000\022\013\n\001i\030\003 \001""
  ""(\003H\000\022\013\n\001f\030\004 \001(\002H\000\022\013\n\001b\030\005 \001(\010H\000\022+\n\004type\030\006""
  "" \001(\0162\033.opencv_tensorflow.DataTypeH\000\0224\n\005s""
  ""hape\030\007 \001(\0132#.opencv_tensorflow.TensorSha""
  ""peProtoH\000\0220\n\006tensor\030\010 \001(\0132\036.opencv_tenso""
  ""rflow.TensorProtoH\000\0226\n\004list\030\001 \001(\0132&.open""
  ""cv_tensorflow.AttrValue.ListValueH\000\022/\n\004f""
  ""unc\030\n \001(\0132\037.opencv_tensorflow.NameAttrLi""
  ""stH\000\022\025\n\013placeholder\030\t \001(\tH\000\032\326\001\n\tListValu""
  ""e\022\t\n\001s\030\002 \003(\014\022\r\n\001i\030\003 \003(\003B\002\020\001\022\r\n\001f\030\004 \003(\002B\...",1,<empty>,,145,13,CPPASTProblemDeclaration,,<empty>
258984,UNKNOWN,19,,PROTOBUF_ATTRIBUTE_WEAK,1,<empty>,,181,19,CPPASTProblemDeclaration,,<empty>
258992,UNKNOWN,21,,PROTOBUF_ATTRIBUTE_INIT_PRIORITY,1,<empty>,,186,21,CPPASTProblemDeclaration,,<empty>
259078,UNKNOWN,1,,AttrValue_ListValue*,50,<empty>,,245,1,CPPASTTypeId,,<empty>
259081,UNKNOWN,1,,void,4,<empty>,,246,1,CPPASTTypeId,,<empty>
259107,UNKNOWN,1,,void,4,<empty>,,258,1,CPPASTTypeId,,<empty>
259179,UNKNOWN,1,,uint8_t,47,<empty>,,278,1,CPPASTTypeId,,<empty>
259243,UNKNOWN,1,,uint8_t,47,<empty>,,292,1,CPPASTTypeId,,<empty>
259272,UNKNOWN,1,,uint8_t,32,<empty>,,295,1,CPPASTTypeId,,<empty>
259304,UNKNOWN,1,,uint8_t,47,<empty>,,303,1,CPPASTTypeId,,<empty>
259333,UNKNOWN,1,,uint8_t,32,<empty>,,306,1,CPPASTTypeId,,<empty>
259359,UNKNOWN,1,,uint8_t,47,<empty>,,314,1,CPPASTTypeId,,<empty>
259388,UNKNOWN,1,,uint8_t,32,<empty>,,317,1,CPPASTTypeId,,<empty>
259420,UNKNOWN,1,,uint8_t,47,<empty>,,325,1,CPPASTTypeId,,<empty>
259449,UNKNOWN,1,,uint8_t,32,<empty>,,328,1,CPPASTTypeId,,<empty>
259475,UNKNOWN,1,,::opencv_tensorflow::DataType,42,<empty>,,331,1,CPPASTTypeId,,<empty>
259487,UNKNOWN,1,,uint8_t,47,<empty>,,337,1,CPPASTTypeId,,<empty>
259544,UNKNOWN,1,,uint8_t,47,<empty>,,350,1,CPPASTTypeId,,<empty>
259663,UNKNOWN,1,,void,4,<empty>,,388,1,CPPASTTypeId,,<empty>
259797,UNKNOWN,1,,unsigned int,23,<empty>,,426,1,CPPASTTypeId,,<empty>
259843,UNKNOWN,1,,unsigned int,23,<empty>,,434,1,CPPASTTypeId,,<empty>
259926,UNKNOWN,1,,void,4,<empty>,,454,1,CPPASTTypeId,,<empty>
260009,UNKNOWN,1,,int32_t,25,<empty>,,471,1,CPPASTTypeId,,<empty>
260037,UNKNOWN,1,,unsigned int,38,<empty>,,481,1,CPPASTTypeId,,<empty>
260066,UNKNOWN,1,,int32_t,25,<empty>,,486,1,CPPASTTypeId,,<empty>
260076,UNKNOWN,1,,unsigned int,38,<empty>,,493,1,CPPASTTypeId,,<empty>
260105,UNKNOWN,1,,int32_t,25,<empty>,,498,1,CPPASTTypeId,,<empty>
260119,UNKNOWN,1,,unsigned int,38,<empty>,,506,1,CPPASTTypeId,,<empty>
260151,UNKNOWN,1,,int,42,<empty>,,508,1,CPPASTTypeId,,<empty>
260171,UNKNOWN,1,,int32_t,25,<empty>,,513,1,CPPASTTypeId,,<empty>
260277,UNKNOWN,1,,AttrValue_ListValue *,15,<empty>,,546,1,CPPASTTypeId,,<empty>
260281,UNKNOWN,1,,const AttrValue_ListValue &,19,<empty>,,547,1,CPPASTTypeId,,<empty>
260297,UNKNOWN,1,,void,4,<empty>,,555,1,CPPASTTypeId,,<empty>
260567,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,34,<empty>,,629,1,CPPASTTypeId,,<empty>
260639,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,34,<empty>,,654,1,CPPASTTypeId,,<empty>
260969,UNKNOWN,1,,AttrValue*,40,<empty>,,782,1,CPPASTTypeId,,<empty>
260972,UNKNOWN,1,,void,4,<empty>,,783,1,CPPASTTypeId,,<empty>
261108,UNKNOWN,1,,void,4,<empty>,,854,1,CPPASTTypeId,,<empty>
261153,UNKNOWN,1,,uint8_t,47,<empty>,,868,1,CPPASTTypeId,,<empty>
261184,UNKNOWN,1,,uint8_t,47,<empty>,,876,1,CPPASTTypeId,,<empty>
261222,UNKNOWN,1,,uint8_t,47,<empty>,,885,1,CPPASTTypeId,,<empty>
261254,UNKNOWN,1,,uint8_t,47,<empty>,,893,1,CPPASTTypeId,,<empty>
261280,UNKNOWN,1,,uint8_t,47,<empty>,,901,1,CPPASTTypeId,,<empty>
261312,UNKNOWN,1,,uint8_t,47,<empty>,,909,1,CPPASTTypeId,,<empty>
261338,UNKNOWN,1,,::opencv_tensorflow::DataType,42,<empty>,,912,1,CPPASTTypeId,,<empty>
261350,UNKNOWN,1,,uint8_t,47,<empty>,,918,1,CPPASTTypeId,,<empty>
261381,UNKNOWN,1,,uint8_t,47,<empty>,,926,1,CPPASTTypeId,,<empty>
261412,UNKNOWN,1,,uint8_t,47,<empty>,,934,1,CPPASTTypeId,,<empty>
261465,UNKNOWN,1,,uint8_t,47,<empty>,,944,1,CPPASTTypeId,,<empty>
261558,UNKNOWN,1,,void,4,<empty>,,977,1,CPPASTTypeId,,<empty>
261782,UNKNOWN,1,,int,57,<empty>,,1037,1,CPPASTTypeId,,<empty>
261885,UNKNOWN,1,,void,4,<empty>,,1066,1,CPPASTTypeId,,<empty>
262103,UNKNOWN,1,,AttrValue *,15,<empty>,,1147,1,CPPASTTypeId,,<empty>
262107,UNKNOWN,1,,const AttrValue &,19,<empty>,,1148,1,CPPASTTypeId,,<empty>
262123,UNKNOWN,1,,void,4,<empty>,,1156,1,CPPASTTypeId,,<empty>
262475,UNKNOWN,1,,NameAttrList*,43,<empty>,,1295,1,CPPASTTypeId,,<empty>
262478,UNKNOWN,1,,void,4,<empty>,,1296,1,CPPASTTypeId,,<empty>
262524,UNKNOWN,1,,void,4,<empty>,,1312,1,CPPASTTypeId,,<empty>
262576,UNKNOWN,1,,uint8_t,47,<empty>,,1327,1,CPPASTTypeId,,<empty>
262629,UNKNOWN,1,,uint8_t,47,<empty>,,1337,1,CPPASTTypeId,,<empty>
262749,UNKNOWN,1,,void,4,<empty>,,1375,1,CPPASTTypeId,,<empty>
262777,UNKNOWN,1,,int,50,<empty>,,1380,1,CPPASTTypeId,,<empty>
262874,UNKNOWN,1,,ptrdiff_t,27,<empty>,,1412,1,CPPASTTypeId,,<empty>
262892,UNKNOWN,1,,ptrdiff_t,49,<empty>,,1414,1,CPPASTTypeId,,<empty>
262920,UNKNOWN,1,,ptrdiff_t,97,<empty>,,1416,1,CPPASTTypeId,,<empty>
262927,UNKNOWN,1,,ptrdiff_t,138,<empty>,,1416,1,CPPASTTypeId,,<empty>
262941,UNKNOWN,1,,ptrdiff_t,47,<empty>,,1417,1,CPPASTTypeId,,<empty>
263040,UNKNOWN,1,,void,4,<empty>,,1443,1,CPPASTTypeId,,<empty>
263153,UNKNOWN,1,,NameAttrList *,15,<empty>,,1472,1,CPPASTTypeId,,<empty>
263157,UNKNOWN,1,,const NameAttrList &,19,<empty>,,1473,1,CPPASTTypeId,,<empty>
263173,UNKNOWN,1,,void,4,<empty>,,1481,1,CPPASTTypeId,,<empty>
263304,UNKNOWN,25,,PROTOBUF_NAMESPACE_OPEN,1,<empty>,,1522,25,CPPASTProblemDeclaration,,<empty>
263365,UNKNOWN,30,,PROTOBUF_NAMESPACE_CLOSE,1,<empty>,,1535,30,CPPASTProblemDeclaration,,<empty>
263417,UNKNOWN,1,,PROTOBUF_NAMESPACE_OPEN,1,<empty>,,43,1,CPPASTProblemDeclaration,,<empty>
263420,UNKNOWN,3,,PROTOBUF_NAMESPACE_CLOSE,1,<empty>,,47,3,CPPASTProblemDeclaration,,<empty>
263423,UNKNOWN,-1,,],75,<empty>,,51,2,CPPASTProblemDeclaration,,<empty>
263426,UNKNOWN,-1,,],80,<empty>,,53,5,CPPASTProblemDeclaration,,<empty>
263429,UNKNOWN,-1,,],70,<empty>,,55,8,CPPASTProblemDeclaration,,<empty>
263459,UNKNOWN,7,,PROTOBUF_NAMESPACE_OPEN,1,<empty>,,76,7,CPPASTProblemDeclaration,,<empty>
263480,UNKNOWN,12,,PROTOBUF_NAMESPACE_CLOSE,1,<empty>,,81,12,CPPASTProblemDeclaration,,<empty>
263591,UNKNOWN,1,,const AttrValue_ListValue*,29,<empty>,,130,1,CPPASTTypeId,,<empty>
263687,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,170,21,CPPASTProblemDeclaration,,<empty>
264360,UNKNOWN,1,,const AttrValue*,29,<empty>,,438,1,CPPASTTypeId,,<empty>
264456,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,478,22,CPPASTProblemDeclaration,,<empty>
264612,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,539,49,CPPASTProblemDeclaration,,<empty>
264626,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_s(const std::string& value);,3,<empty>,,543,53,CPPASTProblemDeclaration,,<empty>
264961,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,681,133,CPPASTProblemDeclaration,,<empty>
264975,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_placeholder(const std::string& value);,3,<empty>,,685,137,CPPASTProblemDeclaration,,<empty>
265090,UNKNOWN,1,,const NameAttrList_AttrEntry_DoNotUse*,103,<empty>,,746,1,CPPASTTypeId,,<empty>
265112,UNKNOWN,1,,int,103,<empty>,,748,1,CPPASTTypeId,,<empty>
265247,UNKNOWN,1,,const NameAttrList*,29,<empty>,,801,1,CPPASTTypeId,,<empty>
265343,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,841,21,CPPASTProblemDeclaration,,<empty>
265486,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,906,52,CPPASTProblemDeclaration,,<empty>
265500,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);,3,<empty>,,910,56,CPPASTProblemDeclaration,,<empty>
265650,UNKNOWN,1,,const char*,22,<empty>,,982,1,CPPASTTypeId,,<empty>
265720,UNKNOWN,1,,const char*,37,<empty>,,1002,1,CPPASTTypeId,,<empty>
266054,UNKNOWN,1,,::opencv_tensorflow::DataType,23,<empty>,,1168,1,CPPASTTypeId,,<empty>
266350,UNKNOWN,1,,ArgT0 &&,101,<empty>,,1305,1,CPPASTTypeId,,<empty>
266798,UNKNOWN,1,,::opencv_tensorflow::DataType,25,<empty>,,1492,1,CPPASTTypeId,,<empty>
266804,UNKNOWN,1,,::opencv_tensorflow::DataType,23,<empty>,,1494,1,CPPASTTypeId,,<empty>
266909,UNKNOWN,1,,::opencv_tensorflow::TensorShapeProto&,27,<empty>,,1539,1,CPPASTTypeId,,<empty>
267068,UNKNOWN,1,,::opencv_tensorflow::TensorProto&,27,<empty>,,1605,1,CPPASTTypeId,,<empty>
267244,UNKNOWN,1,,::opencv_tensorflow::AttrValue_ListValue&,27,<empty>,,1679,1,CPPASTTypeId,,<empty>
267420,UNKNOWN,1,,::opencv_tensorflow::NameAttrList&,27,<empty>,,1753,1,CPPASTTypeId,,<empty>
267585,UNKNOWN,1,,ArgT0 &&,106,<empty>,,1819,1,CPPASTTypeId,,<empty>
267795,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NameAttrList::set_name(ArgT0&& arg0, ArgT... args) {

 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_tensorflow.NameAttrList.name)
}",1,<empty>,,1897,191,CPPASTProblemDeclaration,,<empty>
267962,UNKNOWN,1,,PROTOBUF_PRAGMA_INIT_SEG,1,<empty>,,18,1,CPPASTProblemDeclaration,,<empty>
267980,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,32,3,CPPASTProblemDeclaration,,<empty>
267998,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,43,7,CPPASTProblemDeclaration,,<empty>
268016,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,59,11,CPPASTProblemDeclaration,,<empty>
268034,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,72,15,CPPASTProblemDeclaration,,<empty>
268052,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,85,19,CPPASTProblemDeclaration,,<empty>
268065,UNKNOWN,9,,"const uint32_t TableStruct_function_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::FunctionDefLibrary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::FunctionDefLibrary, function_),
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::FunctionDefLibrary, gradient_),
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::FunctionDef_Node_AttrEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::FunctionDef_Node_AttrEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::FunctionDef_Node_AttrEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::FunctionDef_Node_AttrEntry_DoNotUse, value_),
  0...",1,<empty>,,91,9,CPPASTProblemDeclaration,,<empty>
268066,UNKNOWN,10,,"static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::opencv_tensorflow::FunctionDefLibrary)},
  { 8, 16, -1, sizeof(::opencv_tensorflow::FunctionDef_Node_AttrEntry_DoNotUse)},
  { 18, -1, -1, sizeof(::opencv_tensorflow::FunctionDef_Node)},
  { 29, -1, -1, sizeof(::opencv_tensorflow::FunctionDef)},
  { 37, -1, -1, sizeof(::opencv_tensorflow::GradientDef)},
};",1,<empty>,,138,10,CPPASTProblemDeclaration,,<empty>
268072,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,147,1,CPPASTTypeId,,<empty>
268078,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,148,1,CPPASTTypeId,,<empty>
268084,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,149,1,CPPASTTypeId,,<empty>
268090,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,150,1,CPPASTTypeId,,<empty>
268096,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,151,1,CPPASTTypeId,,<empty>
268101,UNKNOWN,13,,"const char descriptor_table_protodef_function_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  ""\n\016function.proto\022\021opencv_tensorflow\032\020att""
  ""r_value.proto\032\014op_def.proto\""x\n\022FunctionD""
  ""efLibrary\0220\n\010function\030\001 \003(\0132\036.opencv_ten""
  ""sorflow.FunctionDef\0220\n\010gradient\030\002 \003(\0132\036.""
  ""opencv_tensorflow.GradientDef\""\261\002\n\013Functi""
  ""onDef\022+\n\tsignature\030\001 \001(\0132\030.opencv_tensor""
  ""flow.OpDef\0221\n\004node\030\002 \003(\0132#.opencv_tensor""
  ""flow.FunctionDef.Node\032\301\001\n\004Node\022\013\n\003ret\030\001 ""
  ""\003(\t\022\n\n\002op\030\002 \001(\t\022\013\n\003arg\030\003 \003(\t\022\013\n\003dep\030\004 \003(""
  ""\t\022;\n\004attr\030\005 \003(\0132-.opencv_tensorflow.Func""
  ""tionDef.Node.AttrEntry\032I\n\tAttrEntry\022\013\n\003k""
  ""ey\030\001 \001(\t\022+\n\005value\030\002 \001(\0132\034.opencv_tensorf""
  ""low.AttrValue:\0028\001\"";\n\013GradientDef\022\025\n\rfunc""
  ""tion_name\03...",1,<empty>,,154,13,CPPASTProblemDeclaration,,<empty>
268137,UNKNOWN,19,,PROTOBUF_ATTRIBUTE_WEAK,1,<empty>,,183,19,CPPASTProblemDeclaration,,<empty>
268145,UNKNOWN,21,,PROTOBUF_ATTRIBUTE_INIT_PRIORITY,1,<empty>,,188,21,CPPASTProblemDeclaration,,<empty>
268215,UNKNOWN,1,,FunctionDefLibrary*,49,<empty>,,231,1,CPPASTTypeId,,<empty>
268218,UNKNOWN,1,,void,4,<empty>,,232,1,CPPASTTypeId,,<empty>
268244,UNKNOWN,1,,void,4,<empty>,,244,1,CPPASTTypeId,,<empty>
268296,UNKNOWN,1,,uint8_t,47,<empty>,,259,1,CPPASTTypeId,,<empty>
268353,UNKNOWN,1,,uint8_t,47,<empty>,,272,1,CPPASTTypeId,,<empty>
268472,UNKNOWN,1,,void,4,<empty>,,310,1,CPPASTTypeId,,<empty>
268484,UNKNOWN,1,,unsigned int,23,<empty>,,314,1,CPPASTTypeId,,<empty>
268530,UNKNOWN,1,,unsigned int,23,<empty>,,322,1,CPPASTTypeId,,<empty>
268613,UNKNOWN,1,,void,4,<empty>,,342,1,CPPASTTypeId,,<empty>
268698,UNKNOWN,1,,FunctionDefLibrary *,15,<empty>,,369,1,CPPASTTypeId,,<empty>
268702,UNKNOWN,1,,const FunctionDefLibrary &,19,<empty>,,370,1,CPPASTTypeId,,<empty>
268718,UNKNOWN,1,,void,4,<empty>,,378,1,CPPASTTypeId,,<empty>
268982,UNKNOWN,1,,FunctionDef_Node*,47,<empty>,,483,1,CPPASTTypeId,,<empty>
268985,UNKNOWN,1,,void,4,<empty>,,484,1,CPPASTTypeId,,<empty>
269031,UNKNOWN,1,,void,4,<empty>,,500,1,CPPASTTypeId,,<empty>
269095,UNKNOWN,1,,uint8_t,47,<empty>,,518,1,CPPASTTypeId,,<empty>
269174,UNKNOWN,1,,uint8_t,47,<empty>,,533,1,CPPASTTypeId,,<empty>
269227,UNKNOWN,1,,uint8_t,47,<empty>,,543,1,CPPASTTypeId,,<empty>
269306,UNKNOWN,1,,uint8_t,47,<empty>,,558,1,CPPASTTypeId,,<empty>
269385,UNKNOWN,1,,uint8_t,47,<empty>,,573,1,CPPASTTypeId,,<empty>
269505,UNKNOWN,1,,void,4,<empty>,,611,1,CPPASTTypeId,,<empty>
269547,UNKNOWN,1,,int,29,<empty>,,617,1,CPPASTTypeId,,<empty>
269595,UNKNOWN,1,,int,48,<empty>,,626,1,CPPASTTypeId,,<empty>
269663,UNKNOWN,1,,int,29,<empty>,,637,1,CPPASTTypeId,,<empty>
269725,UNKNOWN,1,,int,29,<empty>,,647,1,CPPASTTypeId,,<empty>
269816,UNKNOWN,1,,ptrdiff_t,27,<empty>,,678,1,CPPASTTypeId,,<empty>
269834,UNKNOWN,1,,ptrdiff_t,49,<empty>,,680,1,CPPASTTypeId,,<empty>
269862,UNKNOWN,1,,ptrdiff_t,101,<empty>,,682,1,CPPASTTypeId,,<empty>
269869,UNKNOWN,1,,ptrdiff_t,142,<empty>,,682,1,CPPASTTypeId,,<empty>
269883,UNKNOWN,1,,ptrdiff_t,47,<empty>,,683,1,CPPASTTypeId,,<empty>
269982,UNKNOWN,1,,void,4,<empty>,,709,1,CPPASTTypeId,,<empty>
270239,UNKNOWN,1,,FunctionDef_Node *,15,<empty>,,762,1,CPPASTTypeId,,<empty>
270243,UNKNOWN,1,,const FunctionDef_Node &,19,<empty>,,763,1,CPPASTTypeId,,<empty>
270259,UNKNOWN,1,,void,4,<empty>,,771,1,CPPASTTypeId,,<empty>
270561,UNKNOWN,1,,FunctionDef*,42,<empty>,,872,1,CPPASTTypeId,,<empty>
270564,UNKNOWN,1,,void,4,<empty>,,873,1,CPPASTTypeId,,<empty>
270590,UNKNOWN,1,,void,4,<empty>,,885,1,CPPASTTypeId,,<empty>
270652,UNKNOWN,1,,uint8_t,47,<empty>,,903,1,CPPASTTypeId,,<empty>
270683,UNKNOWN,1,,uint8_t,47,<empty>,,911,1,CPPASTTypeId,,<empty>
270802,UNKNOWN,1,,void,4,<empty>,,949,1,CPPASTTypeId,,<empty>
270845,UNKNOWN,1,,unsigned int,23,<empty>,,961,1,CPPASTTypeId,,<empty>
270928,UNKNOWN,1,,void,4,<empty>,,981,1,CPPASTTypeId,,<empty>
271008,UNKNOWN,1,,FunctionDef *,15,<empty>,,1008,1,CPPASTTypeId,,<empty>
271012,UNKNOWN,1,,const FunctionDef &,19,<empty>,,1009,1,CPPASTTypeId,,<empty>
271028,UNKNOWN,1,,void,4,<empty>,,1017,1,CPPASTTypeId,,<empty>
271301,UNKNOWN,1,,GradientDef*,42,<empty>,,1112,1,CPPASTTypeId,,<empty>
271304,UNKNOWN,1,,void,4,<empty>,,1113,1,CPPASTTypeId,,<empty>
271330,UNKNOWN,1,,void,4,<empty>,,1125,1,CPPASTTypeId,,<empty>
271382,UNKNOWN,1,,uint8_t,47,<empty>,,1140,1,CPPASTTypeId,,<empty>
271435,UNKNOWN,1,,uint8_t,47,<empty>,,1150,1,CPPASTTypeId,,<empty>
271550,UNKNOWN,1,,void,4,<empty>,,1185,1,CPPASTTypeId,,<empty>
271578,UNKNOWN,1,,int,59,<empty>,,1190,1,CPPASTTypeId,,<empty>
271632,UNKNOWN,1,,int,59,<empty>,,1200,1,CPPASTTypeId,,<empty>
271707,UNKNOWN,1,,void,4,<empty>,,1221,1,CPPASTTypeId,,<empty>
271794,UNKNOWN,1,,GradientDef *,15,<empty>,,1248,1,CPPASTTypeId,,<empty>
271798,UNKNOWN,1,,const GradientDef &,19,<empty>,,1249,1,CPPASTTypeId,,<empty>
271814,UNKNOWN,1,,void,4,<empty>,,1257,1,CPPASTTypeId,,<empty>
271968,UNKNOWN,25,,PROTOBUF_NAMESPACE_OPEN,1,<empty>,,1304,25,CPPASTProblemDeclaration,,<empty>
272044,UNKNOWN,31,,PROTOBUF_NAMESPACE_CLOSE,1,<empty>,,1320,31,CPPASTProblemDeclaration,,<empty>
272094,UNKNOWN,1,,PROTOBUF_NAMESPACE_OPEN,1,<empty>,,42,1,CPPASTProblemDeclaration,,<empty>
272097,UNKNOWN,3,,PROTOBUF_NAMESPACE_CLOSE,1,<empty>,,46,3,CPPASTProblemDeclaration,,<empty>
272100,UNKNOWN,-1,,],75,<empty>,,50,2,CPPASTProblemDeclaration,,<empty>
272103,UNKNOWN,-1,,],80,<empty>,,52,5,CPPASTProblemDeclaration,,<empty>
272106,UNKNOWN,-1,,],70,<empty>,,54,8,CPPASTProblemDeclaration,,<empty>
272139,UNKNOWN,7,,PROTOBUF_NAMESPACE_OPEN,1,<empty>,,78,7,CPPASTProblemDeclaration,,<empty>
272165,UNKNOWN,13,,PROTOBUF_NAMESPACE_CLOSE,1,<empty>,,84,13,CPPASTProblemDeclaration,,<empty>
272276,UNKNOWN,1,,const FunctionDefLibrary*,29,<empty>,,133,1,CPPASTTypeId,,<empty>
272372,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,173,21,CPPASTProblemDeclaration,,<empty>
272591,UNKNOWN,1,,const FunctionDef_Node_AttrEntry_DoNotUse*,107,<empty>,,278,1,CPPASTTypeId,,<empty>
272613,UNKNOWN,1,,int,103,<empty>,,280,1,CPPASTTypeId,,<empty>
272748,UNKNOWN,1,,const FunctionDef_Node*,29,<empty>,,333,1,CPPASTTypeId,,<empty>
272844,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,373,21,CPPASTProblemDeclaration,,<empty>
273233,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,513,100,CPPASTProblemDeclaration,,<empty>
273247,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_op(const std::string& value);,3,<empty>,,517,104,CPPASTProblemDeclaration,,<empty>
273379,UNKNOWN,1,,const FunctionDef*,29,<empty>,,586,1,CPPASTTypeId,,<empty>
273475,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,626,21,CPPASTProblemDeclaration,,<empty>
273786,UNKNOWN,1,,const GradientDef*,29,<empty>,,763,1,CPPASTTypeId,,<empty>
273882,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,803,21,CPPASTProblemDeclaration,,<empty>
273997,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,850,45,CPPASTProblemDeclaration,,<empty>
274011,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_function_name(const std::string& value);,3,<empty>,,854,49,CPPASTProblemDeclaration,,<empty>
274034,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,864,55,CPPASTProblemDeclaration,,<empty>
274048,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_gradient_func(const std::string& value);,3,<empty>,,868,59,CPPASTProblemDeclaration,,<empty>
274368,UNKNOWN,1,,const char*,22,<empty>,,1022,1,CPPASTTypeId,,<empty>
274438,UNKNOWN,1,,const char*,39,<empty>,,1042,1,CPPASTTypeId,,<empty>
274470,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FunctionDef_Node::set_op(ArgT0&& arg0, ArgT... args) {

 op_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_tensorflow.FunctionDef.Node.op)
}",1,<empty>,,1064,46,CPPASTProblemDeclaration,,<empty>
274687,UNKNOWN,1,,const char*,22,<empty>,,1148,1,CPPASTTypeId,,<empty>
274757,UNKNOWN,1,,const char*,39,<empty>,,1168,1,CPPASTTypeId,,<empty>
274905,UNKNOWN,1,,const char*,22,<empty>,,1223,1,CPPASTTypeId,,<empty>
274975,UNKNOWN,1,,const char*,39,<empty>,,1243,1,CPPASTTypeId,,<empty>
275070,UNKNOWN,1,,const ::opencv_tensorflow::OpDef&,47,<empty>,,1296,1,CPPASTTypeId,,<empty>
275092,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,1306,1,CPPASTTypeId,,<empty>
275192,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,30,<empty>,,1354,1,CPPASTTypeId,,<empty>
275215,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,34,<empty>,,1360,1,CPPASTTypeId,,<empty>
275339,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GradientDef::set_function_name(ArgT0&& arg0, ArgT... args) {

 function_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_tensorflow.GradientDef.function_name)
}",1,<empty>,,1425,117,CPPASTProblemDeclaration,,<empty>
275440,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GradientDef::set_gradient_func(ArgT0&& arg0, ArgT... args) {

 gradient_func_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_tensorflow.GradientDef.gradient_func)
}",1,<empty>,,1476,126,CPPASTProblemDeclaration,,<empty>
275554,UNKNOWN,1,,PROTOBUF_PRAGMA_INIT_SEG,1,<empty>,,18,1,CPPASTProblemDeclaration,,<empty>
275572,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,34,3,CPPASTProblemDeclaration,,<empty>
275590,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,45,7,CPPASTProblemDeclaration,,<empty>
275608,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,61,11,CPPASTProblemDeclaration,,<empty>
275621,UNKNOWN,9,,"const uint32_t TableStruct_graph_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::GraphDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::GraphDef, node_),
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::GraphDef, versions_),
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::GraphDef, version_),
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::GraphDef, library_),
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::NodeDef_AttrEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::NodeDef_AttrEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::NodeDef_AttrEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::...",1,<empty>,,67,9,CPPASTProblemDeclaration,,<empty>
275622,UNKNOWN,10,,"static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::opencv_tensorflow::GraphDef)},
  { 10, 18, -1, sizeof(::opencv_tensorflow::NodeDef_AttrEntry_DoNotUse)},
  { 20, -1, -1, sizeof(::opencv_tensorflow::NodeDef)},
};",1,<empty>,,100,10,CPPASTProblemDeclaration,,<empty>
275628,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,107,1,CPPASTTypeId,,<empty>
275634,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,108,1,CPPASTTypeId,,<empty>
275640,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,109,1,CPPASTTypeId,,<empty>
275645,UNKNOWN,13,,"const char descriptor_table_protodef_graph_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  ""\n\013graph.proto\022\021opencv_tensorflow\032\020attr_v""
  ""alue.proto\032\016function.proto\032\016versions.pro""
  ""to\""\262\001\n\010GraphDef\022(\n\004node\030\001 \003(\0132\032.opencv_t""
  ""ensorflow.NodeDef\022/\n\010versions\030\004 \001(\0132\035.op""
  ""encv_tensorflow.VersionDef\022\023\n\007version\030\003 ""
  ""\001(\005B\002\030\001\0226\n\007library\030\002 \001(\0132%.opencv_tensor""
  ""flow.FunctionDefLibrary\""\301\001\n\007NodeDef\022\014\n\004n""
  ""ame\030\001 \001(\t\022\n\n\002op\030\002 \001(\t\022\r\n\005input\030\003 \003(\t\022\016\n\006""
  ""device\030\004 \001(\t\0222\n\004attr\030\005 \003(\0132$.opencv_tens""
  ""orflow.NodeDef.AttrEntry\032I\n\tAttrEntry\022\013\n""
  ""\003key\030\001 \001(\t\022+\n\005value\030\002 \001(\0132\034.opencv_tenso""
  ""rflow.AttrValue:\0028\001B,\n\030org.tensorflow.fr""
  ""ameworkB\013GraphProtosP\001\370\001\001b\006proto3""
  ;",1,<empty>,,112,13,CPPASTProblemDeclaration,,<empty>
275685,UNKNOWN,19,,PROTOBUF_ATTRIBUTE_WEAK,1,<empty>,,139,19,CPPASTProblemDeclaration,,<empty>
275693,UNKNOWN,21,,PROTOBUF_ATTRIBUTE_INIT_PRIORITY,1,<empty>,,144,21,CPPASTProblemDeclaration,,<empty>
275846,UNKNOWN,1,,char*,27,<empty>,,204,1,CPPASTTypeId,,<empty>
275849,UNKNOWN,1,,size_t,54,<empty>,,204,1,CPPASTTypeId,,<empty>
275852,UNKNOWN,1,,char*,22,<empty>,,205,1,CPPASTTypeId,,<empty>
275856,UNKNOWN,1,,char*,59,<empty>,,205,1,CPPASTTypeId,,<empty>
275861,UNKNOWN,1,,size_t,20,<empty>,,206,1,CPPASTTypeId,,<empty>
275864,UNKNOWN,1,,char*,45,<empty>,,206,1,CPPASTTypeId,,<empty>
275868,UNKNOWN,1,,char*,22,<empty>,,207,1,CPPASTTypeId,,<empty>
275919,UNKNOWN,1,,GraphDef*,39,<empty>,,224,1,CPPASTTypeId,,<empty>
275922,UNKNOWN,1,,void,4,<empty>,,225,1,CPPASTTypeId,,<empty>
275948,UNKNOWN,1,,void,4,<empty>,,237,1,CPPASTTypeId,,<empty>
276027,UNKNOWN,1,,uint8_t,47,<empty>,,260,1,CPPASTTypeId,,<empty>
276084,UNKNOWN,1,,uint8_t,47,<empty>,,273,1,CPPASTTypeId,,<empty>
276115,UNKNOWN,1,,uint8_t,47,<empty>,,281,1,CPPASTTypeId,,<empty>
276148,UNKNOWN,1,,uint8_t,47,<empty>,,289,1,CPPASTTypeId,,<empty>
276241,UNKNOWN,1,,void,4,<empty>,,322,1,CPPASTTypeId,,<empty>
276253,UNKNOWN,1,,unsigned int,23,<empty>,,326,1,CPPASTTypeId,,<empty>
276429,UNKNOWN,1,,void,4,<empty>,,368,1,CPPASTTypeId,,<empty>
276551,UNKNOWN,1,,GraphDef *,15,<empty>,,407,1,CPPASTTypeId,,<empty>
276555,UNKNOWN,1,,const GraphDef &,19,<empty>,,408,1,CPPASTTypeId,,<empty>
276571,UNKNOWN,1,,void,4,<empty>,,416,1,CPPASTTypeId,,<empty>
276696,UNKNOWN,1,,char*,28,<empty>,,450,1,CPPASTTypeId,,<empty>
276700,UNKNOWN,1,,char*,28,<empty>,,451,1,CPPASTTypeId,,<empty>
277000,UNKNOWN,1,,NodeDef*,38,<empty>,,556,1,CPPASTTypeId,,<empty>
277003,UNKNOWN,1,,void,4,<empty>,,557,1,CPPASTTypeId,,<empty>
277049,UNKNOWN,1,,void,4,<empty>,,573,1,CPPASTTypeId,,<empty>
277113,UNKNOWN,1,,uint8_t,47,<empty>,,591,1,CPPASTTypeId,,<empty>
277166,UNKNOWN,1,,uint8_t,47,<empty>,,601,1,CPPASTTypeId,,<empty>
277219,UNKNOWN,1,,uint8_t,47,<empty>,,611,1,CPPASTTypeId,,<empty>
277298,UNKNOWN,1,,uint8_t,47,<empty>,,626,1,CPPASTTypeId,,<empty>
277351,UNKNOWN,1,,uint8_t,47,<empty>,,636,1,CPPASTTypeId,,<empty>
277471,UNKNOWN,1,,void,4,<empty>,,674,1,CPPASTTypeId,,<empty>
277499,UNKNOWN,1,,int,50,<empty>,,679,1,CPPASTTypeId,,<empty>
277553,UNKNOWN,1,,int,48,<empty>,,689,1,CPPASTTypeId,,<empty>
277621,UNKNOWN,1,,int,29,<empty>,,700,1,CPPASTTypeId,,<empty>
277669,UNKNOWN,1,,int,52,<empty>,,709,1,CPPASTTypeId,,<empty>
277766,UNKNOWN,1,,ptrdiff_t,27,<empty>,,741,1,CPPASTTypeId,,<empty>
277784,UNKNOWN,1,,ptrdiff_t,49,<empty>,,743,1,CPPASTTypeId,,<empty>
277812,UNKNOWN,1,,ptrdiff_t,92,<empty>,,745,1,CPPASTTypeId,,<empty>
277819,UNKNOWN,1,,ptrdiff_t,133,<empty>,,745,1,CPPASTTypeId,,<empty>
277833,UNKNOWN,1,,ptrdiff_t,47,<empty>,,746,1,CPPASTTypeId,,<empty>
277932,UNKNOWN,1,,void,4,<empty>,,772,1,CPPASTTypeId,,<empty>
278145,UNKNOWN,1,,NodeDef *,15,<empty>,,823,1,CPPASTTypeId,,<empty>
278149,UNKNOWN,1,,const NodeDef &,19,<empty>,,824,1,CPPASTTypeId,,<empty>
278165,UNKNOWN,1,,void,4,<empty>,,832,1,CPPASTTypeId,,<empty>
278387,UNKNOWN,25,,PROTOBUF_NAMESPACE_OPEN,1,<empty>,,891,25,CPPASTProblemDeclaration,,<empty>
278433,UNKNOWN,29,,PROTOBUF_NAMESPACE_CLOSE,1,<empty>,,901,29,CPPASTProblemDeclaration,,<empty>
278485,UNKNOWN,1,,PROTOBUF_NAMESPACE_OPEN,1,<empty>,,43,1,CPPASTProblemDeclaration,,<empty>
278488,UNKNOWN,3,,PROTOBUF_NAMESPACE_CLOSE,1,<empty>,,47,3,CPPASTProblemDeclaration,,<empty>
278491,UNKNOWN,-1,,],75,<empty>,,51,2,CPPASTProblemDeclaration,,<empty>
278494,UNKNOWN,-1,,],80,<empty>,,53,5,CPPASTProblemDeclaration,,<empty>
278497,UNKNOWN,-1,,],70,<empty>,,55,8,CPPASTProblemDeclaration,,<empty>
278524,UNKNOWN,7,,PROTOBUF_NAMESPACE_OPEN,1,<empty>,,73,7,CPPASTProblemDeclaration,,<empty>
278540,UNKNOWN,11,,PROTOBUF_NAMESPACE_CLOSE,1,<empty>,,77,11,CPPASTProblemDeclaration,,<empty>
278651,UNKNOWN,1,,const GraphDef*,29,<empty>,,126,1,CPPASTTypeId,,<empty>
278747,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,166,21,CPPASTProblemDeclaration,,<empty>
278987,UNKNOWN,-1,,PROTOBUF_DEPRECATED,3,<empty>,,264,73,CPPASTProblemDeclaration,,<empty>
278992,UNKNOWN,-1,,PROTOBUF_DEPRECATED,3,<empty>,,265,75,CPPASTProblemDeclaration,,<empty>
278997,UNKNOWN,-1,,PROTOBUF_DEPRECATED,3,<empty>,,266,77,CPPASTProblemDeclaration,,<empty>
279050,UNKNOWN,1,,const NodeDef_AttrEntry_DoNotUse*,98,<empty>,,302,1,CPPASTTypeId,,<empty>
279072,UNKNOWN,1,,int,103,<empty>,,304,1,CPPASTTypeId,,<empty>
279207,UNKNOWN,1,,const NodeDef*,29,<empty>,,357,1,CPPASTTypeId,,<empty>
279303,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,397,21,CPPASTProblemDeclaration,,<empty>
279536,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,489,68,CPPASTProblemDeclaration,,<empty>
279550,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);,3,<empty>,,493,72,CPPASTProblemDeclaration,,<empty>
279573,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,503,78,CPPASTProblemDeclaration,,<empty>
279587,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_op(const std::string& value);,3,<empty>,,507,82,CPPASTProblemDeclaration,,<empty>
279610,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,517,88,CPPASTProblemDeclaration,,<empty>
279624,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_device(const std::string& value);,3,<empty>,,521,92,CPPASTProblemDeclaration,,<empty>
279764,UNKNOWN,1,,const ::opencv_tensorflow::VersionDef&,47,<empty>,,604,1,CPPASTTypeId,,<empty>
279786,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,614,1,CPPASTTypeId,,<empty>
279886,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,30,<empty>,,662,1,CPPASTTypeId,,<empty>
279909,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,34,<empty>,,668,1,CPPASTTypeId,,<empty>
280000,UNKNOWN,1,,const ::opencv_tensorflow::FunctionDefLibrary&,47,<empty>,,710,1,CPPASTTypeId,,<empty>
280022,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,720,1,CPPASTTypeId,,<empty>
280122,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,30,<empty>,,768,1,CPPASTTypeId,,<empty>
280145,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,34,<empty>,,774,1,CPPASTTypeId,,<empty>
280184,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeDef::set_name(ArgT0&& arg0, ArgT... args) {

 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_tensorflow.NodeDef.name)
}",1,<empty>,,801,41,CPPASTProblemDeclaration,,<empty>
280285,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeDef::set_op(ArgT0&& arg0, ArgT... args) {

 op_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_tensorflow.NodeDef.op)
}",1,<empty>,,852,50,CPPASTProblemDeclaration,,<empty>
280502,UNKNOWN,1,,const char*,22,<empty>,,936,1,CPPASTTypeId,,<empty>
280572,UNKNOWN,1,,const char*,41,<empty>,,956,1,CPPASTTypeId,,<empty>
280604,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeDef::set_device(ArgT0&& arg0, ArgT... args) {

 device_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_tensorflow.NodeDef.device)
}",1,<empty>,,978,77,CPPASTProblemDeclaration,,<empty>
280763,UNKNOWN,1,,PROTOBUF_PRAGMA_INIT_SEG,1,<empty>,,18,1,CPPASTProblemDeclaration,,<empty>
280781,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,38,3,CPPASTProblemDeclaration,,<empty>
280799,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,56,7,CPPASTProblemDeclaration,,<empty>
280817,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,78,11,CPPASTProblemDeclaration,,<empty>
280835,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,91,15,CPPASTProblemDeclaration,,<empty>
280853,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,103,19,CPPASTProblemDeclaration,,<empty>
280866,UNKNOWN,9,,"const uint32_t TableStruct_op_5fdef_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::OpDef_ArgDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::OpDef_ArgDef, name_),
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::OpDef_ArgDef, description_),
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::OpDef_ArgDef, type_),
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::OpDef_ArgDef, type_attr_),
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::OpDef_ArgDef, number_attr_),
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::OpDef_ArgDef, type_list_attr_),
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::OpDef_ArgDef, is_ref_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::OpDef_AttrDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u...",1,<empty>,,109,9,CPPASTProblemDeclaration,,<empty>
280867,UNKNOWN,10,,"static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::opencv_tensorflow::OpDef_ArgDef)},
  { 13, -1, -1, sizeof(::opencv_tensorflow::OpDef_AttrDef)},
  { 26, -1, -1, sizeof(::opencv_tensorflow::OpDef)},
  { 43, -1, -1, sizeof(::opencv_tensorflow::OpDeprecation)},
  { 51, -1, -1, sizeof(::opencv_tensorflow::OpList)},
};",1,<empty>,,169,10,CPPASTProblemDeclaration,,<empty>
280873,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,178,1,CPPASTTypeId,,<empty>
280879,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,179,1,CPPASTTypeId,,<empty>
280885,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,180,1,CPPASTTypeId,,<empty>
280891,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,181,1,CPPASTTypeId,,<empty>
280897,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,182,1,CPPASTTypeId,,<empty>
280902,UNKNOWN,13,,"const char descriptor_table_protodef_op_5fdef_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  ""\n\014op_def.proto\022\021opencv_tensorflow\032\020attr_""
  ""value.proto\032\013types.proto\""\351\005\n\005OpDef\022\014\n\004na""
  ""me\030\001 \001(\t\0222\n\tinput_arg\030\002 \003(\0132\037.opencv_ten""
  ""sorflow.OpDef.ArgDef\0223\n\noutput_arg\030\003 \003(\013""
  ""2\037.opencv_tensorflow.OpDef.ArgDef\022.\n\004att""
  ""r\030\004 \003(\0132 .opencv_tensorflow.OpDef.AttrDe""
  ""f\0225\n\013deprecation\030\010 \001(\0132 .opencv_tensorfl""
  ""ow.OpDeprecation\022\017\n\007summary\030\005 \001(\t\022\023\n\013des""
  ""cription\030\006 \001(\t\022\026\n\016is_commutative\030\022 \001(\010\022\024""
  ""\n\014is_aggregate\030\020 \001(\010\022\023\n\013is_stateful\030\021 \001(""
  ""\010\022\""\n\032allows_uninitialized_input\030\023 \001(\010\032\246\001""
  ""\n\006ArgDef\022\014\n\004name\030\001 \001(\t\022\023\n\013description\030\002 ""
  ""\001(\t\022)\n\004type\030\003 \001(\0162\033.op...",1,<empty>,,185,13,CPPASTProblemDeclaration,,<empty>
280938,UNKNOWN,19,,PROTOBUF_ATTRIBUTE_WEAK,1,<empty>,,223,19,CPPASTProblemDeclaration,,<empty>
280946,UNKNOWN,21,,PROTOBUF_ATTRIBUTE_INIT_PRIORITY,1,<empty>,,228,21,CPPASTProblemDeclaration,,<empty>
281152,UNKNOWN,1,,size_t,17,<empty>,,290,1,CPPASTTypeId,,<empty>
281155,UNKNOWN,1,,char*,42,<empty>,,290,1,CPPASTTypeId,,<empty>
281159,UNKNOWN,1,,char*,22,<empty>,,291,1,CPPASTTypeId,,<empty>
281229,UNKNOWN,1,,char*,27,<empty>,,316,1,CPPASTTypeId,,<empty>
281232,UNKNOWN,1,,size_t,54,<empty>,,316,1,CPPASTTypeId,,<empty>
281235,UNKNOWN,1,,char*,22,<empty>,,317,1,CPPASTTypeId,,<empty>
281239,UNKNOWN,1,,char*,56,<empty>,,317,1,CPPASTTypeId,,<empty>
281244,UNKNOWN,1,,size_t,20,<empty>,,318,1,CPPASTTypeId,,<empty>
281247,UNKNOWN,1,,char*,45,<empty>,,318,1,CPPASTTypeId,,<empty>
281251,UNKNOWN,1,,char*,22,<empty>,,319,1,CPPASTTypeId,,<empty>
281343,UNKNOWN,1,,OpDef_ArgDef*,43,<empty>,,339,1,CPPASTTypeId,,<empty>
281346,UNKNOWN,1,,void,4,<empty>,,340,1,CPPASTTypeId,,<empty>
281372,UNKNOWN,1,,void,4,<empty>,,352,1,CPPASTTypeId,,<empty>
281403,UNKNOWN,1,,size_t,35,<empty>,,359,1,CPPASTTypeId,,<empty>
281406,UNKNOWN,1,,char*,24,<empty>,,360,1,CPPASTTypeId,,<empty>
281410,UNKNOWN,1,,char*,24,<empty>,,361,1,CPPASTTypeId,,<empty>
281457,UNKNOWN,1,,uint8_t,47,<empty>,,373,1,CPPASTTypeId,,<empty>
281510,UNKNOWN,1,,uint8_t,47,<empty>,,383,1,CPPASTTypeId,,<empty>
281563,UNKNOWN,1,,uint8_t,47,<empty>,,393,1,CPPASTTypeId,,<empty>
281589,UNKNOWN,1,,::opencv_tensorflow::DataType,42,<empty>,,396,1,CPPASTTypeId,,<empty>
281601,UNKNOWN,1,,uint8_t,47,<empty>,,402,1,CPPASTTypeId,,<empty>
281654,UNKNOWN,1,,uint8_t,47,<empty>,,412,1,CPPASTTypeId,,<empty>
281707,UNKNOWN,1,,uint8_t,47,<empty>,,422,1,CPPASTTypeId,,<empty>
281760,UNKNOWN,1,,uint8_t,47,<empty>,,432,1,CPPASTTypeId,,<empty>
281855,UNKNOWN,1,,void,4,<empty>,,465,1,CPPASTTypeId,,<empty>
281883,UNKNOWN,1,,int,50,<empty>,,470,1,CPPASTTypeId,,<empty>
281937,UNKNOWN,1,,int,57,<empty>,,480,1,CPPASTTypeId,,<empty>
282022,UNKNOWN,1,,int,55,<empty>,,497,1,CPPASTTypeId,,<empty>
282076,UNKNOWN,1,,int,57,<empty>,,507,1,CPPASTTypeId,,<empty>
282130,UNKNOWN,1,,int,60,<empty>,,517,1,CPPASTTypeId,,<empty>
282236,UNKNOWN,1,,void,4,<empty>,,544,1,CPPASTTypeId,,<empty>
282438,UNKNOWN,1,,OpDef_ArgDef *,15,<empty>,,603,1,CPPASTTypeId,,<empty>
282442,UNKNOWN,1,,const OpDef_ArgDef &,19,<empty>,,604,1,CPPASTTypeId,,<empty>
282458,UNKNOWN,1,,void,4,<empty>,,612,1,CPPASTTypeId,,<empty>
282754,UNKNOWN,1,,char*,28,<empty>,,683,1,CPPASTTypeId,,<empty>
282758,UNKNOWN,1,,char*,28,<empty>,,684,1,CPPASTTypeId,,<empty>
283023,UNKNOWN,1,,size_t,17,<empty>,,768,1,CPPASTTypeId,,<empty>
283026,UNKNOWN,1,,char*,42,<empty>,,768,1,CPPASTTypeId,,<empty>
283030,UNKNOWN,1,,char*,22,<empty>,,769,1,CPPASTTypeId,,<empty>
283078,UNKNOWN,1,,char*,27,<empty>,,786,1,CPPASTTypeId,,<empty>
283081,UNKNOWN,1,,size_t,54,<empty>,,786,1,CPPASTTypeId,,<empty>
283084,UNKNOWN,1,,char*,22,<empty>,,787,1,CPPASTTypeId,,<empty>
283088,UNKNOWN,1,,char*,65,<empty>,,787,1,CPPASTTypeId,,<empty>
283093,UNKNOWN,1,,size_t,20,<empty>,,788,1,CPPASTTypeId,,<empty>
283096,UNKNOWN,1,,char*,45,<empty>,,788,1,CPPASTTypeId,,<empty>
283100,UNKNOWN,1,,char*,22,<empty>,,789,1,CPPASTTypeId,,<empty>
283184,UNKNOWN,1,,OpDef_AttrDef*,44,<empty>,,809,1,CPPASTTypeId,,<empty>
283187,UNKNOWN,1,,void,4,<empty>,,810,1,CPPASTTypeId,,<empty>
283213,UNKNOWN,1,,void,4,<empty>,,822,1,CPPASTTypeId,,<empty>
283264,UNKNOWN,1,,size_t,38,<empty>,,835,1,CPPASTTypeId,,<empty>
283267,UNKNOWN,1,,char*,24,<empty>,,836,1,CPPASTTypeId,,<empty>
283271,UNKNOWN,1,,char*,24,<empty>,,837,1,CPPASTTypeId,,<empty>
283318,UNKNOWN,1,,uint8_t,47,<empty>,,849,1,CPPASTTypeId,,<empty>
283371,UNKNOWN,1,,uint8_t,47,<empty>,,859,1,CPPASTTypeId,,<empty>
283424,UNKNOWN,1,,uint8_t,47,<empty>,,869,1,CPPASTTypeId,,<empty>
283455,UNKNOWN,1,,uint8_t,47,<empty>,,877,1,CPPASTTypeId,,<empty>
283508,UNKNOWN,1,,uint8_t,47,<empty>,,887,1,CPPASTTypeId,,<empty>
283541,UNKNOWN,1,,uint8_t,47,<empty>,,895,1,CPPASTTypeId,,<empty>
283574,UNKNOWN,1,,uint8_t,47,<empty>,,903,1,CPPASTTypeId,,<empty>
283667,UNKNOWN,1,,void,4,<empty>,,936,1,CPPASTTypeId,,<empty>
283695,UNKNOWN,1,,int,50,<empty>,,941,1,CPPASTTypeId,,<empty>
283749,UNKNOWN,1,,int,50,<empty>,,951,1,CPPASTTypeId,,<empty>
283834,UNKNOWN,1,,int,57,<empty>,,969,1,CPPASTTypeId,,<empty>
284002,UNKNOWN,1,,void,4,<empty>,,1010,1,CPPASTTypeId,,<empty>
284190,UNKNOWN,1,,OpDef_AttrDef *,15,<empty>,,1068,1,CPPASTTypeId,,<empty>
284194,UNKNOWN,1,,const OpDef_AttrDef &,19,<empty>,,1069,1,CPPASTTypeId,,<empty>
284210,UNKNOWN,1,,void,4,<empty>,,1077,1,CPPASTTypeId,,<empty>
284458,UNKNOWN,1,,char*,28,<empty>,,1138,1,CPPASTTypeId,,<empty>
284462,UNKNOWN,1,,char*,28,<empty>,,1139,1,CPPASTTypeId,,<empty>
284657,UNKNOWN,1,,size_t,17,<empty>,,1207,1,CPPASTTypeId,,<empty>
284660,UNKNOWN,1,,char*,42,<empty>,,1207,1,CPPASTTypeId,,<empty>
284664,UNKNOWN,1,,char*,22,<empty>,,1208,1,CPPASTTypeId,,<empty>
284712,UNKNOWN,1,,char*,27,<empty>,,1225,1,CPPASTTypeId,,<empty>
284715,UNKNOWN,1,,size_t,54,<empty>,,1225,1,CPPASTTypeId,,<empty>
284718,UNKNOWN,1,,char*,22,<empty>,,1226,1,CPPASTTypeId,,<empty>
284722,UNKNOWN,1,,char*,63,<empty>,,1226,1,CPPASTTypeId,,<empty>
284727,UNKNOWN,1,,size_t,20,<empty>,,1227,1,CPPASTTypeId,,<empty>
284730,UNKNOWN,1,,char*,45,<empty>,,1227,1,CPPASTTypeId,,<empty>
284734,UNKNOWN,1,,char*,22,<empty>,,1228,1,CPPASTTypeId,,<empty>
284811,UNKNOWN,1,,OpDef*,36,<empty>,,1247,1,CPPASTTypeId,,<empty>
284814,UNKNOWN,1,,void,4,<empty>,,1248,1,CPPASTTypeId,,<empty>
284840,UNKNOWN,1,,void,4,<empty>,,1260,1,CPPASTTypeId,,<empty>
284889,UNKNOWN,1,,size_t,45,<empty>,,1272,1,CPPASTTypeId,,<empty>
284892,UNKNOWN,1,,char*,24,<empty>,,1273,1,CPPASTTypeId,,<empty>
284896,UNKNOWN,1,,char*,24,<empty>,,1274,1,CPPASTTypeId,,<empty>
284943,UNKNOWN,1,,uint8_t,47,<empty>,,1286,1,CPPASTTypeId,,<empty>
284996,UNKNOWN,1,,uint8_t,47,<empty>,,1296,1,CPPASTTypeId,,<empty>
285053,UNKNOWN,1,,uint8_t,47,<empty>,,1309,1,CPPASTTypeId,,<empty>
285110,UNKNOWN,1,,uint8_t,47,<empty>,,1322,1,CPPASTTypeId,,<empty>
285167,UNKNOWN,1,,uint8_t,47,<empty>,,1335,1,CPPASTTypeId,,<empty>
285220,UNKNOWN,1,,uint8_t,47,<empty>,,1345,1,CPPASTTypeId,,<empty>
285273,UNKNOWN,1,,uint8_t,47,<empty>,,1355,1,CPPASTTypeId,,<empty>
285304,UNKNOWN,1,,uint8_t,47,<empty>,,1363,1,CPPASTTypeId,,<empty>
285337,UNKNOWN,1,,uint8_t,47,<empty>,,1371,1,CPPASTTypeId,,<empty>
285370,UNKNOWN,1,,uint8_t,47,<empty>,,1379,1,CPPASTTypeId,,<empty>
285403,UNKNOWN,1,,uint8_t,47,<empty>,,1387,1,CPPASTTypeId,,<empty>
285498,UNKNOWN,1,,void,4,<empty>,,1420,1,CPPASTTypeId,,<empty>
285526,UNKNOWN,1,,int,50,<empty>,,1425,1,CPPASTTypeId,,<empty>
285564,UNKNOWN,1,,unsigned int,23,<empty>,,1434,1,CPPASTTypeId,,<empty>
285610,UNKNOWN,1,,unsigned int,23,<empty>,,1442,1,CPPASTTypeId,,<empty>
285656,UNKNOWN,1,,unsigned int,23,<empty>,,1450,1,CPPASTTypeId,,<empty>
285718,UNKNOWN,1,,int,53,<empty>,,1459,1,CPPASTTypeId,,<empty>
285772,UNKNOWN,1,,int,57,<empty>,,1469,1,CPPASTTypeId,,<empty>
286002,UNKNOWN,1,,void,4,<empty>,,1522,1,CPPASTTypeId,,<empty>
286262,UNKNOWN,1,,OpDef *,15,<empty>,,1604,1,CPPASTTypeId,,<empty>
286266,UNKNOWN,1,,const OpDef &,19,<empty>,,1605,1,CPPASTTypeId,,<empty>
286282,UNKNOWN,1,,void,4,<empty>,,1613,1,CPPASTTypeId,,<empty>
286587,UNKNOWN,1,,char*,28,<empty>,,1683,1,CPPASTTypeId,,<empty>
286591,UNKNOWN,1,,char*,28,<empty>,,1684,1,CPPASTTypeId,,<empty>
286742,UNKNOWN,1,,OpDeprecation*,44,<empty>,,1744,1,CPPASTTypeId,,<empty>
286745,UNKNOWN,1,,void,4,<empty>,,1745,1,CPPASTTypeId,,<empty>
286771,UNKNOWN,1,,void,4,<empty>,,1757,1,CPPASTTypeId,,<empty>
286822,UNKNOWN,1,,uint8_t,47,<empty>,,1772,1,CPPASTTypeId,,<empty>
286855,UNKNOWN,1,,uint8_t,47,<empty>,,1780,1,CPPASTTypeId,,<empty>
286970,UNKNOWN,1,,void,4,<empty>,,1815,1,CPPASTTypeId,,<empty>
287029,UNKNOWN,1,,int,57,<empty>,,1826,1,CPPASTTypeId,,<empty>
287104,UNKNOWN,1,,void,4,<empty>,,1847,1,CPPASTTypeId,,<empty>
287187,UNKNOWN,1,,OpDeprecation *,15,<empty>,,1872,1,CPPASTTypeId,,<empty>
287191,UNKNOWN,1,,const OpDeprecation &,19,<empty>,,1873,1,CPPASTTypeId,,<empty>
287207,UNKNOWN,1,,void,4,<empty>,,1881,1,CPPASTTypeId,,<empty>
287405,UNKNOWN,1,,OpList*,37,<empty>,,1960,1,CPPASTTypeId,,<empty>
287408,UNKNOWN,1,,void,4,<empty>,,1961,1,CPPASTTypeId,,<empty>
287434,UNKNOWN,1,,void,4,<empty>,,1973,1,CPPASTTypeId,,<empty>
287482,UNKNOWN,1,,uint8_t,47,<empty>,,1987,1,CPPASTTypeId,,<empty>
287601,UNKNOWN,1,,void,4,<empty>,,2025,1,CPPASTTypeId,,<empty>
287613,UNKNOWN,1,,unsigned int,23,<empty>,,2029,1,CPPASTTypeId,,<empty>
287696,UNKNOWN,1,,void,4,<empty>,,2049,1,CPPASTTypeId,,<empty>
287756,UNKNOWN,1,,OpList *,15,<empty>,,2069,1,CPPASTTypeId,,<empty>
287760,UNKNOWN,1,,const OpList &,19,<empty>,,2070,1,CPPASTTypeId,,<empty>
287776,UNKNOWN,1,,void,4,<empty>,,2078,1,CPPASTTypeId,,<empty>
287858,UNKNOWN,25,,PROTOBUF_NAMESPACE_OPEN,1,<empty>,,2109,25,CPPASTProblemDeclaration,,<empty>
287934,UNKNOWN,31,,PROTOBUF_NAMESPACE_CLOSE,1,<empty>,,2125,31,CPPASTProblemDeclaration,,<empty>
287978,UNKNOWN,1,,PROTOBUF_NAMESPACE_OPEN,1,<empty>,,39,1,CPPASTProblemDeclaration,,<empty>
287981,UNKNOWN,3,,PROTOBUF_NAMESPACE_CLOSE,1,<empty>,,43,3,CPPASTProblemDeclaration,,<empty>
287984,UNKNOWN,-1,,],75,<empty>,,47,2,CPPASTProblemDeclaration,,<empty>
287987,UNKNOWN,-1,,],80,<empty>,,49,5,CPPASTProblemDeclaration,,<empty>
287990,UNKNOWN,-1,,],70,<empty>,,51,8,CPPASTProblemDeclaration,,<empty>
288023,UNKNOWN,7,,PROTOBUF_NAMESPACE_OPEN,1,<empty>,,75,7,CPPASTProblemDeclaration,,<empty>
288049,UNKNOWN,13,,PROTOBUF_NAMESPACE_CLOSE,1,<empty>,,81,13,CPPASTProblemDeclaration,,<empty>
288160,UNKNOWN,1,,const OpDef_ArgDef*,29,<empty>,,130,1,CPPASTTypeId,,<empty>
288256,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,170,21,CPPASTProblemDeclaration,,<empty>
288391,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,222,45,CPPASTProblemDeclaration,,<empty>
288405,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);,3,<empty>,,226,49,CPPASTProblemDeclaration,,<empty>
288428,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,236,55,CPPASTProblemDeclaration,,<empty>
288442,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);,3,<empty>,,240,59,CPPASTProblemDeclaration,,<empty>
288465,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,250,65,CPPASTProblemDeclaration,,<empty>
288479,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_attr(const std::string& value);,3,<empty>,,254,69,CPPASTProblemDeclaration,,<empty>
288502,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,264,75,CPPASTProblemDeclaration,,<empty>
288516,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_number_attr(const std::string& value);,3,<empty>,,268,79,CPPASTProblemDeclaration,,<empty>
288539,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,278,85,CPPASTProblemDeclaration,,<empty>
288553,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_list_attr(const std::string& value);,3,<empty>,,282,89,CPPASTProblemDeclaration,,<empty>
288731,UNKNOWN,1,,const OpDef_AttrDef*,29,<empty>,,367,1,CPPASTTypeId,,<empty>
288827,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,407,21,CPPASTProblemDeclaration,,<empty>
288962,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,459,45,CPPASTProblemDeclaration,,<empty>
288976,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);,3,<empty>,,463,49,CPPASTProblemDeclaration,,<empty>
288999,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,473,55,CPPASTProblemDeclaration,,<empty>
289013,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);,3,<empty>,,477,59,CPPASTProblemDeclaration,,<empty>
289036,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,487,65,CPPASTProblemDeclaration,,<empty>
289050,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);,3,<empty>,,491,69,CPPASTProblemDeclaration,,<empty>
289320,UNKNOWN,1,,const OpDef*,29,<empty>,,612,1,CPPASTTypeId,,<empty>
289416,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,652,21,CPPASTProblemDeclaration,,<empty>
289698,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,765,77,CPPASTProblemDeclaration,,<empty>
289712,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);,3,<empty>,,769,81,CPPASTProblemDeclaration,,<empty>
289735,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,779,87,CPPASTProblemDeclaration,,<empty>
289749,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_summary(const std::string& value);,3,<empty>,,783,91,CPPASTProblemDeclaration,,<empty>
289772,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,793,97,CPPASTProblemDeclaration,,<empty>
289786,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);,3,<empty>,,797,101,CPPASTProblemDeclaration,,<empty>
290058,UNKNOWN,1,,const OpDeprecation*,29,<empty>,,922,1,CPPASTTypeId,,<empty>
290154,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,962,21,CPPASTProblemDeclaration,,<empty>
290269,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,1009,45,CPPASTProblemDeclaration,,<empty>
290283,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_explanation(const std::string& value);,3,<empty>,,1013,49,CPPASTProblemDeclaration,,<empty>
290434,UNKNOWN,1,,const OpList*,29,<empty>,,1084,1,CPPASTTypeId,,<empty>
290530,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,1124,21,CPPASTProblemDeclaration,,<empty>
290694,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpDef_ArgDef::set_name(ArgT0&& arg0, ArgT... args) {

 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_tensorflow.OpDef.ArgDef.name)
}",1,<empty>,,1212,8,CPPASTProblemDeclaration,,<empty>
290795,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpDef_ArgDef::set_description(ArgT0&& arg0, ArgT... args) {

 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_tensorflow.OpDef.ArgDef.description)
}",1,<empty>,,1263,17,CPPASTProblemDeclaration,,<empty>
290893,UNKNOWN,1,,::opencv_tensorflow::DataType,23,<empty>,,1311,1,CPPASTTypeId,,<empty>
290932,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpDef_ArgDef::set_type_attr(ArgT0&& arg0, ArgT... args) {

 type_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_tensorflow.OpDef.ArgDef.type_attr)
}",1,<empty>,,1334,31,CPPASTProblemDeclaration,,<empty>
291033,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpDef_ArgDef::set_number_attr(ArgT0&& arg0, ArgT... args) {

 number_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_tensorflow.OpDef.ArgDef.number_attr)
}",1,<empty>,,1385,40,CPPASTProblemDeclaration,,<empty>
291134,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpDef_ArgDef::set_type_list_attr(ArgT0&& arg0, ArgT... args) {

 type_list_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_tensorflow.OpDef.ArgDef.type_list_attr)
}",1,<empty>,,1436,49,CPPASTProblemDeclaration,,<empty>
291269,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpDef_AttrDef::set_name(ArgT0&& arg0, ArgT... args) {

 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_tensorflow.OpDef.AttrDef.name)
}",1,<empty>,,1511,63,CPPASTProblemDeclaration,,<empty>
291370,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpDef_AttrDef::set_type(ArgT0&& arg0, ArgT... args) {

 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_tensorflow.OpDef.AttrDef.type)
}",1,<empty>,,1562,72,CPPASTProblemDeclaration,,<empty>
291489,UNKNOWN,1,,const ::opencv_tensorflow::AttrValue&,47,<empty>,,1614,1,CPPASTTypeId,,<empty>
291511,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,1624,1,CPPASTTypeId,,<empty>
291611,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,30,<empty>,,1672,1,CPPASTTypeId,,<empty>
291634,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,34,<empty>,,1678,1,CPPASTTypeId,,<empty>
291673,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpDef_AttrDef::set_description(ArgT0&& arg0, ArgT... args) {

 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_tensorflow.OpDef.AttrDef.description)
}",1,<empty>,,1699,91,CPPASTProblemDeclaration,,<empty>
291862,UNKNOWN,1,,const ::opencv_tensorflow::AttrValue&,47,<empty>,,1791,1,CPPASTTypeId,,<empty>
291884,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,1801,1,CPPASTTypeId,,<empty>
291984,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,30,<empty>,,1849,1,CPPASTTypeId,,<empty>
292007,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,34,<empty>,,1855,1,CPPASTTypeId,,<empty>
292046,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpDef::set_name(ArgT0&& arg0, ArgT... args) {

 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_tensorflow.OpDef.name)
}",1,<empty>,,1880,120,CPPASTProblemDeclaration,,<empty>
292438,UNKNOWN,1,,const ::opencv_tensorflow::OpDeprecation&,47,<empty>,,2058,1,CPPASTTypeId,,<empty>
292460,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,2068,1,CPPASTTypeId,,<empty>
292618,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpDef::set_summary(ArgT0&& arg0, ArgT... args) {

 summary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_tensorflow.OpDef.summary)
}",1,<empty>,,2141,170,CPPASTProblemDeclaration,,<empty>
292719,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpDef::set_description(ArgT0&& arg0, ArgT... args) {

 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_tensorflow.OpDef.description)
}",1,<empty>,,2192,179,CPPASTProblemDeclaration,,<empty>
292990,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpDeprecation::set_explanation(ArgT0&& arg0, ArgT... args) {

 explanation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_tensorflow.OpDeprecation.explanation)
}",1,<empty>,,2347,213,CPPASTProblemDeclaration,,<empty>
293189,UNKNOWN,1,,PROTOBUF_PRAGMA_INIT_SEG,1,<empty>,,18,1,CPPASTProblemDeclaration,,<empty>
293207,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,47,3,CPPASTProblemDeclaration,,<empty>
293220,UNKNOWN,9,,"const uint32_t TableStruct_tensor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::TensorProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::TensorProto, dtype_),
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::TensorProto, tensor_shape_),
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::TensorProto, version_number_),
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::TensorProto, tensor_content_),
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::TensorProto, half_val_),
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::TensorProto, float_val_),
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::TensorProto, double_val_),
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::TensorProto, int_val_),
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::TensorProto, string_val_),
  PROTOBUF_FIELD_OFFSE...",1,<empty>,,53,9,CPPASTProblemDeclaration,,<empty>
293221,UNKNOWN,10,,"static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::opencv_tensorflow::TensorProto)},
};",1,<empty>,,74,10,CPPASTProblemDeclaration,,<empty>
293227,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,79,1,CPPASTTypeId,,<empty>
293232,UNKNOWN,13,,"const char descriptor_table_protodef_tensor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  ""\n\014tensor.proto\022\021opencv_tensorflow\032\022tenso""
  ""r_shape.proto\032\013types.proto\""\363\002\n\013TensorPro""
  ""to\022*\n\005dtype\030\001 \001(\0162\033.opencv_tensorflow.Da""
  ""taType\0229\n\014tensor_shape\030\002 \001(\0132#.opencv_te""
  ""nsorflow.TensorShapeProto\022\026\n\016version_num""
  ""ber\030\003 \001(\005\022\026\n\016tensor_content\030\004 \001(\014\022\024\n\010hal""
  ""f_val\030\r \003(\005B\002\020\001\022\025\n\tfloat_val\030\005 \003(\002B\002\020\001\022\026""
  ""\n\ndouble_val\030\006 \003(\001B\002\020\001\022\023\n\007int_val\030\007 \003(\005B""
  ""\002\020\001\022\022\n\nstring_val\030\010 \003(\014\022\030\n\014scomplex_val\030""
  ""\t \003(\002B\002\020\001\022\025\n\tint64_val\030\n \003(\003B\002\020\001\022\024\n\010bool""
  ""_val\030\013 \003(\010B\002\020\001\022\030\n\014dcomplex_val\030\014 \003(\001B\002\020\001""
  ""B-\n\030org.tensorflow.fram...",1,<empty>,,82,13,CPPASTProblemDeclaration,,<empty>
293268,UNKNOWN,19,,PROTOBUF_ATTRIBUTE_WEAK,1,<empty>,,108,19,CPPASTProblemDeclaration,,<empty>
293276,UNKNOWN,21,,PROTOBUF_ATTRIBUTE_INIT_PRIORITY,1,<empty>,,113,21,CPPASTProblemDeclaration,,<empty>
293406,UNKNOWN,1,,size_t,17,<empty>,,177,1,CPPASTTypeId,,<empty>
293409,UNKNOWN,1,,char*,42,<empty>,,177,1,CPPASTTypeId,,<empty>
293413,UNKNOWN,1,,char*,22,<empty>,,178,1,CPPASTTypeId,,<empty>
293439,UNKNOWN,1,,char*,27,<empty>,,187,1,CPPASTTypeId,,<empty>
293442,UNKNOWN,1,,size_t,54,<empty>,,187,1,CPPASTTypeId,,<empty>
293445,UNKNOWN,1,,char*,22,<empty>,,188,1,CPPASTTypeId,,<empty>
293449,UNKNOWN,1,,char*,64,<empty>,,188,1,CPPASTTypeId,,<empty>
293454,UNKNOWN,1,,size_t,20,<empty>,,189,1,CPPASTTypeId,,<empty>
293457,UNKNOWN,1,,char*,45,<empty>,,189,1,CPPASTTypeId,,<empty>
293461,UNKNOWN,1,,char*,22,<empty>,,190,1,CPPASTTypeId,,<empty>
293516,UNKNOWN,1,,TensorProto*,42,<empty>,,207,1,CPPASTTypeId,,<empty>
293519,UNKNOWN,1,,void,4,<empty>,,208,1,CPPASTTypeId,,<empty>
293545,UNKNOWN,1,,void,4,<empty>,,220,1,CPPASTTypeId,,<empty>
293610,UNKNOWN,1,,size_t,36,<empty>,,236,1,CPPASTTypeId,,<empty>
293613,UNKNOWN,1,,char*,24,<empty>,,237,1,CPPASTTypeId,,<empty>
293617,UNKNOWN,1,,char*,24,<empty>,,238,1,CPPASTTypeId,,<empty>
293664,UNKNOWN,1,,uint8_t,47,<empty>,,250,1,CPPASTTypeId,,<empty>
293690,UNKNOWN,1,,::opencv_tensorflow::DataType,43,<empty>,,253,1,CPPASTTypeId,,<empty>
293702,UNKNOWN,1,,uint8_t,47,<empty>,,259,1,CPPASTTypeId,,<empty>
293733,UNKNOWN,1,,uint8_t,47,<empty>,,267,1,CPPASTTypeId,,<empty>
293766,UNKNOWN,1,,uint8_t,47,<empty>,,275,1,CPPASTTypeId,,<empty>
293804,UNKNOWN,1,,uint8_t,47,<empty>,,284,1,CPPASTTypeId,,<empty>
293833,UNKNOWN,1,,uint8_t,32,<empty>,,287,1,CPPASTTypeId,,<empty>
293859,UNKNOWN,1,,uint8_t,47,<empty>,,295,1,CPPASTTypeId,,<empty>
293888,UNKNOWN,1,,uint8_t,32,<empty>,,298,1,CPPASTTypeId,,<empty>
293914,UNKNOWN,1,,uint8_t,47,<empty>,,306,1,CPPASTTypeId,,<empty>
293943,UNKNOWN,1,,uint8_t,32,<empty>,,309,1,CPPASTTypeId,,<empty>
293975,UNKNOWN,1,,uint8_t,47,<empty>,,317,1,CPPASTTypeId,,<empty>
294039,UNKNOWN,1,,uint8_t,47,<empty>,,331,1,CPPASTTypeId,,<empty>
294068,UNKNOWN,1,,uint8_t,32,<empty>,,334,1,CPPASTTypeId,,<empty>
294094,UNKNOWN,1,,uint8_t,47,<empty>,,342,1,CPPASTTypeId,,<empty>
294123,UNKNOWN,1,,uint8_t,32,<empty>,,345,1,CPPASTTypeId,,<empty>
294155,UNKNOWN,1,,uint8_t,47,<empty>,,353,1,CPPASTTypeId,,<empty>
294184,UNKNOWN,1,,uint8_t,32,<empty>,,356,1,CPPASTTypeId,,<empty>
294216,UNKNOWN,1,,uint8_t,47,<empty>,,364,1,CPPASTTypeId,,<empty>
294245,UNKNOWN,1,,uint8_t,32,<empty>,,367,1,CPPASTTypeId,,<empty>
294271,UNKNOWN,1,,uint8_t,47,<empty>,,375,1,CPPASTTypeId,,<empty>
294300,UNKNOWN,1,,uint8_t,32,<empty>,,378,1,CPPASTTypeId,,<empty>
294394,UNKNOWN,1,,void,4,<empty>,,411,1,CPPASTTypeId,,<empty>
294757,UNKNOWN,1,,void,4,<empty>,,512,1,CPPASTTypeId,,<empty>
294764,UNKNOWN,1,,unsigned int,38,<empty>,,516,1,CPPASTTypeId,,<empty>
294793,UNKNOWN,1,,int32_t,25,<empty>,,521,1,CPPASTTypeId,,<empty>
294803,UNKNOWN,1,,unsigned int,38,<empty>,,528,1,CPPASTTypeId,,<empty>
294832,UNKNOWN,1,,int32_t,25,<empty>,,533,1,CPPASTTypeId,,<empty>
294870,UNKNOWN,1,,int32_t,25,<empty>,,545,1,CPPASTTypeId,,<empty>
294946,UNKNOWN,1,,unsigned int,38,<empty>,,563,1,CPPASTTypeId,,<empty>
294975,UNKNOWN,1,,int32_t,25,<empty>,,568,1,CPPASTTypeId,,<empty>
295013,UNKNOWN,1,,int32_t,25,<empty>,,580,1,CPPASTTypeId,,<empty>
295041,UNKNOWN,1,,unsigned int,38,<empty>,,590,1,CPPASTTypeId,,<empty>
295070,UNKNOWN,1,,int32_t,25,<empty>,,595,1,CPPASTTypeId,,<empty>
295080,UNKNOWN,1,,unsigned int,38,<empty>,,602,1,CPPASTTypeId,,<empty>
295109,UNKNOWN,1,,int32_t,25,<empty>,,607,1,CPPASTTypeId,,<empty>
295147,UNKNOWN,1,,int32_t,25,<empty>,,619,1,CPPASTTypeId,,<empty>
295295,UNKNOWN,1,,TensorProto *,15,<empty>,,663,1,CPPASTTypeId,,<empty>
295299,UNKNOWN,1,,const TensorProto &,19,<empty>,,664,1,CPPASTTypeId,,<empty>
295315,UNKNOWN,1,,void,4,<empty>,,672,1,CPPASTTypeId,,<empty>
295608,UNKNOWN,1,,char*,28,<empty>,,732,1,CPPASTTypeId,,<empty>
295612,UNKNOWN,1,,char*,28,<empty>,,733,1,CPPASTTypeId,,<empty>
295637,UNKNOWN,25,,PROTOBUF_NAMESPACE_OPEN,1,<empty>,,744,25,CPPASTProblemDeclaration,,<empty>
295653,UNKNOWN,27,,PROTOBUF_NAMESPACE_CLOSE,1,<empty>,,748,27,CPPASTProblemDeclaration,,<empty>
295697,UNKNOWN,1,,N,23,<empty>,,39,1,CPPASTProblemDeclaration,,<empty>
295700,UNKNOWN,3,,PROTOBUF_NAMESPACE_CLOSE,1,<empty>,,43,3,CPPASTProblemDeclaration,,<empty>
295703,UNKNOWN,-1,,],75,<empty>,,47,2,CPPASTProblemDeclaration,,<empty>
295706,UNKNOWN,-1,,],80,<empty>,,49,5,CPPASTProblemDeclaration,,<empty>
295709,UNKNOWN,-1,,],70,<empty>,,51,8,CPPASTProblemDeclaration,,<empty>
295730,UNKNOWN,7,,PROTOBUF_NAMESPACE_OPEN,1,<empty>,,63,7,CPPASTProblemDeclaration,,<empty>
295736,UNKNOWN,9,,PROTOBUF_NAMESPACE_CLOSE,1,<empty>,,65,9,CPPASTProblemDeclaration,,<empty>
295847,UNKNOWN,1,,const TensorProto*,29,<empty>,,114,1,CPPASTTypeId,,<empty>
295943,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,154,21,CPPASTProblemDeclaration,,<empty>
296612,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,412,157,CPPASTProblemDeclaration,,<empty>
296626,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_tensor_content(const std::string& value);,3,<empty>,,416,161,CPPASTProblemDeclaration,,<empty>
296761,UNKNOWN,1,,::opencv_tensorflow::DataType,23,<empty>,,498,1,CPPASTTypeId,,<empty>
296818,UNKNOWN,1,,const ::opencv_tensorflow::TensorShapeProto&,47,<empty>,,522,1,CPPASTTypeId,,<empty>
296840,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,29,<empty>,,532,1,CPPASTTypeId,,<empty>
296940,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,30,<empty>,,580,1,CPPASTTypeId,,<empty>
296963,UNKNOWN,1,,::PROTOBUF_NAMESPACE_ID::MessageLite*,34,<empty>,,586,1,CPPASTTypeId,,<empty>
297036,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TensorProto::set_tensor_content(ArgT0&& arg0, ArgT... args) {

 tensor_content_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_tensorflow.TensorProto.tensor_content)
}",1,<empty>,,627,24,CPPASTProblemDeclaration,,<empty>
297637,UNKNOWN,1,,const char*,22,<empty>,,899,1,CPPASTTypeId,,<empty>
297707,UNKNOWN,1,,const char*,46,<empty>,,919,1,CPPASTTypeId,,<empty>
298136,UNKNOWN,1,,PROTOBUF_PRAGMA_INIT_SEG,1,<empty>,,18,1,CPPASTProblemDeclaration,,<empty>
298154,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,32,3,CPPASTProblemDeclaration,,<empty>
298172,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,45,7,CPPASTProblemDeclaration,,<empty>
298185,UNKNOWN,9,,"const uint32_t TableStruct_tensor_5fshape_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::TensorShapeProto_Dim, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::TensorShapeProto_Dim, size_),
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::TensorShapeProto_Dim, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::TensorShapeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::TensorShapeProto, dim_),
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::TensorShapeProto, unknown_rank_),
};",1,<empty>,,51,9,CPPASTProblemDeclaration,,<empty>
298186,UNKNOWN,10,,"static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::opencv_tensorflow::TensorShapeProto_Dim)},
  { 8, -1, -1, sizeof(::opencv_tensorflow::TensorShapeProto)},
};",1,<empty>,,69,10,CPPASTProblemDeclaration,,<empty>
298192,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,75,1,CPPASTTypeId,,<empty>
298198,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,76,1,CPPASTTypeId,,<empty>
298203,UNKNOWN,13,,"const char descriptor_table_protodef_tensor_5fshape_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  ""\n\022tensor_shape.proto\022\021opencv_tensorflow\""""
  ""\201\001\n\020TensorShapeProto\0224\n\003dim\030\002 \003(\0132\'.open""
  ""cv_tensorflow.TensorShapeProto.Dim\022\024\n\014un""
  ""known_rank\030\003 \001(\010\032!\n\003Dim\022\014\n\004size\030\001 \001(\003\022\014\n""
  ""\004name\030\002 \001(\tB2\n\030org.tensorflow.frameworkB""
  ""\021TensorShapeProtosP\001\370\001\001b\006proto3""
  ;",1,<empty>,,79,13,CPPASTProblemDeclaration,,<empty>
298227,UNKNOWN,17,,PROTOBUF_ATTRIBUTE_WEAK,1,<empty>,,94,17,CPPASTProblemDeclaration,,<empty>
298235,UNKNOWN,19,,PROTOBUF_ATTRIBUTE_INIT_PRIORITY,1,<empty>,,99,19,CPPASTProblemDeclaration,,<empty>
298369,UNKNOWN,1,,TensorShapeProto_Dim*,51,<empty>,,153,1,CPPASTTypeId,,<empty>
298372,UNKNOWN,1,,void,4,<empty>,,154,1,CPPASTTypeId,,<empty>
298398,UNKNOWN,1,,void,4,<empty>,,166,1,CPPASTTypeId,,<empty>
298451,UNKNOWN,1,,uint8_t,47,<empty>,,181,1,CPPASTTypeId,,<empty>
298484,UNKNOWN,1,,uint8_t,47,<empty>,,189,1,CPPASTTypeId,,<empty>
298599,UNKNOWN,1,,void,4,<empty>,,224,1,CPPASTTypeId,,<empty>
298658,UNKNOWN,1,,int,50,<empty>,,235,1,CPPASTTypeId,,<empty>
298733,UNKNOWN,1,,void,4,<empty>,,256,1,CPPASTTypeId,,<empty>
298816,UNKNOWN,1,,TensorShapeProto_Dim *,15,<empty>,,281,1,CPPASTTypeId,,<empty>
298820,UNKNOWN,1,,const TensorShapeProto_Dim &,19,<empty>,,282,1,CPPASTTypeId,,<empty>
298836,UNKNOWN,1,,void,4,<empty>,,290,1,CPPASTTypeId,,<empty>
299042,UNKNOWN,1,,TensorShapeProto*,47,<empty>,,371,1,CPPASTTypeId,,<empty>
299045,UNKNOWN,1,,void,4,<empty>,,372,1,CPPASTTypeId,,<empty>
299071,UNKNOWN,1,,void,4,<empty>,,384,1,CPPASTTypeId,,<empty>
299122,UNKNOWN,1,,uint8_t,47,<empty>,,399,1,CPPASTTypeId,,<empty>
299179,UNKNOWN,1,,uint8_t,47,<empty>,,412,1,CPPASTTypeId,,<empty>
299274,UNKNOWN,1,,void,4,<empty>,,445,1,CPPASTTypeId,,<empty>
299286,UNKNOWN,1,,unsigned int,23,<empty>,,449,1,CPPASTTypeId,,<empty>
299400,UNKNOWN,1,,void,4,<empty>,,475,1,CPPASTTypeId,,<empty>
299473,UNKNOWN,1,,TensorShapeProto *,15,<empty>,,500,1,CPPASTTypeId,,<empty>
299477,UNKNOWN,1,,const TensorShapeProto &,19,<empty>,,501,1,CPPASTTypeId,,<empty>
299493,UNKNOWN,1,,void,4,<empty>,,509,1,CPPASTTypeId,,<empty>
299593,UNKNOWN,23,,PROTOBUF_NAMESPACE_OPEN,1,<empty>,,544,23,CPPASTProblemDeclaration,,<empty>
299624,UNKNOWN,26,,PROTOBUF_NAMESPACE_CLOSE,1,<empty>,,551,26,CPPASTProblemDeclaration,,<empty>
299664,UNKNOWN,1,,PROTOBUF_NAMESPACE_OPEN,1,<empty>,,37,1,CPPASTProblemDeclaration,,<empty>
299667,UNKNOWN,3,,PROTOBUF_NAMESPACE_CLOSE,1,<empty>,,41,3,CPPASTProblemDeclaration,,<empty>
299670,UNKNOWN,-1,,],75,<empty>,,45,2,CPPASTProblemDeclaration,,<empty>
299673,UNKNOWN,-1,,],80,<empty>,,47,5,CPPASTProblemDeclaration,,<empty>
299676,UNKNOWN,-1,,],70,<empty>,,49,8,CPPASTProblemDeclaration,,<empty>
299700,UNKNOWN,7,,PROTOBUF_NAMESPACE_OPEN,1,<empty>,,64,7,CPPASTProblemDeclaration,,<empty>
299711,UNKNOWN,10,,PROTOBUF_NAMESPACE_CLOSE,1,<empty>,,67,10,CPPASTProblemDeclaration,,<empty>
299822,UNKNOWN,1,,const TensorShapeProto_Dim*,29,<empty>,,116,1,CPPASTTypeId,,<empty>
299918,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,156,21,CPPASTProblemDeclaration,,<empty>
300033,UNKNOWN,-1,,PROTOBUF_NODISCARD,3,<empty>,,203,45,CPPASTProblemDeclaration,,<empty>
300047,UNKNOWN,-1,,inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);,3,<empty>,,207,49,CPPASTProblemDeclaration,,<empty>
300198,UNKNOWN,1,,const TensorShapeProto*,29,<empty>,,278,1,CPPASTTypeId,,<empty>
300294,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,318,21,CPPASTProblemDeclaration,,<empty>
300522,UNKNOWN,-1,,"template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TensorShapeProto_Dim::set_name(ArgT0&& arg0, ArgT... args) {

 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opencv_tensorflow.TensorShapeProto.Dim.name)
}",1,<empty>,,439,10,CPPASTProblemDeclaration,,<empty>
300755,UNKNOWN,1,,G,24,<empty>,,18,1,CPPASTProblemDeclaration,,<empty>
300776,UNKNOWN,13,,"const char descriptor_table_protodef_types_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  ""\n\013types.proto\022\021opencv_tensorflow*\234\005\n\010Dat""
  ""aType\022\016\n\nDT_INVALID\020\000\022\014\n\010DT_FLOAT\020\001\022\r\n\tD""
  ""T_DOUBLE\020\002\022\014\n\010DT_INT32\020\003\022\014\n\010DT_UINT8\020\004\022\014""
  ""\n\010DT_INT16\020\005\022\013\n\007DT_INT8\020\006\022\r\n\tDT_STRING\020\007""
  ""\022\020\n\014DT_COMPLEX64\020\010\022\014\n\010DT_INT64\020\t\022\013\n\007DT_B""
  ""OOL\020\n\022\014\n\010DT_QINT8\020\013\022\r\n\tDT_QUINT8\020\014\022\r\n\tDT""
  ""_QINT32\020\r\022\017\n\013DT_BFLOAT16\020\016\022\r\n\tDT_QINT16\020""
  ""\017\022\016\n\nDT_QUINT16\020\020\022\r\n\tDT_UINT16\020\021\022\021\n\rDT_C""
  ""OMPLEX128\020\022\022\013\n\007DT_HALF\020\023\022\020\n\014DT_FLOAT_REF""
  ""\020e\022\021\n\rDT_DOUBLE_REF\020f\022\020\n\014DT_INT32_REF\020g\022""
  ""\020\n\014DT_UINT8_REF\020h\022\020\n\014DT_INT16_REF\020i\022\017\n\013D""
  ""T_INT8_REF\020j\022\021\n...",1,<empty>,,27,13,CPPASTProblemDeclaration,,<empty>
300800,UNKNOWN,17,,PROTOBUF_ATTRIBUTE_WEAK,1,<empty>,,55,17,CPPASTProblemDeclaration,,<empty>
300808,UNKNOWN,19,,PROTOBUF_ATTRIBUTE_INIT_PRIORITY,1,<empty>,,60,19,CPPASTProblemDeclaration,,<empty>
300921,UNKNOWN,23,,"PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE",1,<empty>,,116,23,CPPASTProblemDeclaration,,<empty>
300959,UNKNOWN,1,,PROTOBUF_NAMESPACE_OPEN,1,<empty>,,36,1,CPPASTProblemDeclaration,,<empty>
300962,UNKNOWN,3,,PROTOBUF_NAMESPACE_CLOSE,1,<empty>,,40,3,CPPASTProblemDeclaration,,<empty>
300965,UNKNOWN,-1,,],75,<empty>,,44,2,CPPASTProblemDeclaration,,<empty>
300968,UNKNOWN,-1,,],80,<empty>,,46,5,CPPASTProblemDeclaration,,<empty>
300971,UNKNOWN,-1,,],70,<empty>,,48,8,CPPASTProblemDeclaration,,<empty>
300989,UNKNOWN,7,,E,24,<empty>,,56,7,CPPASTProblemDeclaration,,<empty>
301252,UNKNOWN,9,,PROTOBUF_NAMESPACE_OPEN,1,<empty>,,141,9,CPPASTProblemDeclaration,,<empty>
301263,UNKNOWN,12,,PROTOBUF_NAMESPACE_CLOSE,1,<empty>,,149,12,CPPASTProblemDeclaration,,<empty>
301291,UNKNOWN,1,,PROTOBUF_PRAGMA_INIT_SEG,1,<empty>,,18,1,CPPASTProblemDeclaration,,<empty>
301309,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT,1,<empty>,,34,3,CPPASTProblemDeclaration,,<empty>
301322,UNKNOWN,9,,"const uint32_t TableStruct_versions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::VersionDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::VersionDef, producer_),
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::VersionDef, min_consumer_),
  PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::VersionDef, bad_consumers_),
};",1,<empty>,,40,9,CPPASTProblemDeclaration,,<empty>
301323,UNKNOWN,10,,"static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::opencv_tensorflow::VersionDef)},
};",1,<empty>,,51,10,CPPASTProblemDeclaration,,<empty>
301329,UNKNOWN,1,,const ::PROTOBUF_NAMESPACE_ID::Message*,20,<empty>,,56,1,CPPASTTypeId,,<empty>
301334,UNKNOWN,13,,"const char descriptor_table_protodef_versions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  ""\n\016versions.proto\022\021opencv_tensorflow\""K\n\nV""
  ""ersionDef\022\020\n\010producer\030\001 \001(\005\022\024\n\014min_consu""
  ""mer\030\002 \001(\005\022\025\n\rbad_consumers\030\003 \003(\005B/\n\030org.""
  ""tensorflow.frameworkB\016VersionsProtosP\001\370\001""
  ""\001b\006proto3""
  ;",1,<empty>,,59,13,CPPASTProblemDeclaration,,<empty>
301358,UNKNOWN,17,,PROTOBUF_ATTRIBUTE_WEAK,1,<empty>,,73,17,CPPASTProblemDeclaration,,<empty>
301366,UNKNOWN,19,,PROTOBUF_ATTRIBUTE_INIT_PRIORITY,1,<empty>,,78,19,CPPASTProblemDeclaration,,<empty>
301412,UNKNOWN,1,,size_t,17,<empty>,,102,1,CPPASTTypeId,,<empty>
301415,UNKNOWN,1,,char*,42,<empty>,,102,1,CPPASTTypeId,,<empty>
301419,UNKNOWN,1,,char*,22,<empty>,,103,1,CPPASTTypeId,,<empty>
301434,UNKNOWN,1,,char*,27,<empty>,,108,1,CPPASTTypeId,,<empty>
301437,UNKNOWN,1,,size_t,54,<empty>,,108,1,CPPASTTypeId,,<empty>
301440,UNKNOWN,1,,char*,22,<empty>,,109,1,CPPASTTypeId,,<empty>
301444,UNKNOWN,1,,char*,60,<empty>,,109,1,CPPASTTypeId,,<empty>
301449,UNKNOWN,1,,size_t,20,<empty>,,110,1,CPPASTTypeId,,<empty>
301452,UNKNOWN,1,,char*,45,<empty>,,110,1,CPPASTTypeId,,<empty>
301456,UNKNOWN,1,,char*,22,<empty>,,111,1,CPPASTTypeId,,<empty>
301493,UNKNOWN,1,,VersionDef*,41,<empty>,,126,1,CPPASTTypeId,,<empty>
301496,UNKNOWN,1,,void,4,<empty>,,127,1,CPPASTTypeId,,<empty>
301522,UNKNOWN,1,,void,4,<empty>,,139,1,CPPASTTypeId,,<empty>
301537,UNKNOWN,1,,size_t,39,<empty>,,142,1,CPPASTTypeId,,<empty>
301540,UNKNOWN,1,,char*,24,<empty>,,143,1,CPPASTTypeId,,<empty>
301544,UNKNOWN,1,,char*,24,<empty>,,144,1,CPPASTTypeId,,<empty>
301591,UNKNOWN,1,,uint8_t,47,<empty>,,156,1,CPPASTTypeId,,<empty>
301624,UNKNOWN,1,,uint8_t,47,<empty>,,164,1,CPPASTTypeId,,<empty>
301657,UNKNOWN,1,,uint8_t,47,<empty>,,172,1,CPPASTTypeId,,<empty>
301686,UNKNOWN,1,,uint8_t,32,<empty>,,175,1,CPPASTTypeId,,<empty>
301780,UNKNOWN,1,,void,4,<empty>,,208,1,CPPASTTypeId,,<empty>
301917,UNKNOWN,1,,void,4,<empty>,,245,1,CPPASTTypeId,,<empty>
301952,UNKNOWN,1,,int32_t,25,<empty>,,254,1,CPPASTTypeId,,<empty>
302052,UNKNOWN,1,,VersionDef *,15,<empty>,,283,1,CPPASTTypeId,,<empty>
302056,UNKNOWN,1,,const VersionDef &,19,<empty>,,284,1,CPPASTTypeId,,<empty>
302072,UNKNOWN,1,,void,4,<empty>,,292,1,CPPASTTypeId,,<empty>
302182,UNKNOWN,1,,char*,28,<empty>,,323,1,CPPASTTypeId,,<empty>
302186,UNKNOWN,1,,char*,28,<empty>,,324,1,CPPASTTypeId,,<empty>
302211,UNKNOWN,23,,PROTOBUF_NAMESPACE_OPEN,1,<empty>,,335,23,CPPASTProblemDeclaration,,<empty>
302227,UNKNOWN,25,,PROTOBUF_NAMESPACE_CLOSE,1,<empty>,,339,25,CPPASTProblemDeclaration,,<empty>
302267,UNKNOWN,1,,PROTOBUF_NAMESPACE_OPEN,1,<empty>,,37,1,CPPASTProblemDeclaration,,<empty>
302270,UNKNOWN,3,,PROTOBUF_NAMESPACE_CLOSE,1,<empty>,,41,3,CPPASTProblemDeclaration,,<empty>
302273,UNKNOWN,-1,,],75,<empty>,,45,2,CPPASTProblemDeclaration,,<empty>
302276,UNKNOWN,-1,,],80,<empty>,,47,5,CPPASTProblemDeclaration,,<empty>
302279,UNKNOWN,-1,,],70,<empty>,,49,8,CPPASTProblemDeclaration,,<empty>
302300,UNKNOWN,7,,PROTOBUF_NAMESPACE_OPEN,1,<empty>,,61,7,CPPASTProblemDeclaration,,<empty>
302306,UNKNOWN,9,,PROTOBUF_NAMESPACE_CLOSE,1,<empty>,,63,9,CPPASTProblemDeclaration,,<empty>
302417,UNKNOWN,1,,const VersionDef*,29,<empty>,,112,1,CPPASTTypeId,,<empty>
302513,UNKNOWN,-1,,PROTOBUF_ATTRIBUTE_REINITIALIZES,3,<empty>,,152,21,CPPASTProblemDeclaration,,<empty>
303354,UNKNOWN,1,,size_t,36,<empty>,,512,1,CPPASTTypeId,,<empty>
303426,UNKNOWN,1,,size_t,36,<empty>,,542,1,CPPASTTypeId,,<empty>
303530,UNKNOWN,1,,size_t,36,<empty>,,583,1,CPPASTTypeId,,<empty>
303614,UNKNOWN,1,,size_t,36,<empty>,,619,1,CPPASTTypeId,,<empty>
304678,UNKNOWN,1,,size_t,36,<empty>,,1139,1,CPPASTTypeId,,<empty>
305482,UNKNOWN,1,,size_t,36,<empty>,,1535,1,CPPASTTypeId,,<empty>
306684,UNKNOWN,1,,size_t,36,<empty>,,2064,1,CPPASTTypeId,,<empty>
306780,UNKNOWN,1,,size_t,36,<empty>,,2106,1,CPPASTTypeId,,<empty>
306858,UNKNOWN,1,,size_t,36,<empty>,,2139,1,CPPASTTypeId,,<empty>
306930,UNKNOWN,1,,size_t,36,<empty>,,2169,1,CPPASTTypeId,,<empty>
307002,UNKNOWN,1,,size_t,36,<empty>,,2199,1,CPPASTTypeId,,<empty>
307080,UNKNOWN,1,,size_t,36,<empty>,,2232,1,CPPASTTypeId,,<empty>
307152,UNKNOWN,1,,size_t,36,<empty>,,2262,1,CPPASTTypeId,,<empty>
307218,UNKNOWN,1,,size_t,36,<empty>,,2289,1,CPPASTTypeId,,<empty>
307226,UNKNOWN,-1,,"struct CustomQuantization FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CustomQuantizationBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CUSTOM = 4
  };
  const ::flatbuffers::Vector<uint8_t> *custom() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_CUSTOM);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CUSTOM) &&
           verifier.VerifyVector(custom()) &&
           verifier.EndTable();
  }
};",1,<empty>,,2293,473,CPPASTProblemDeclaration,,<empty>
307339,UNKNOWN,-1,,"struct QuantizationParameters FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef QuantizationParametersBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MIN = 4,
    VT_MAX = 6,
    VT_SCALE = 8,
    VT_ZERO_POINT = 10,
    VT_DETAILS_TYPE = 12,
    VT_DETAILS = 14,
    VT_QUANTIZED_DIMENSION = 16
  };
  const ::flatbuffers::Vector<float> *min() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_MIN);
  }
  const ::flatbuffers::Vector<float> *max() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_MAX);
  }
  const ::flatbuffers::Vector<float> *scale() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_SCALE);
  }
  const ::flatbuffers::Vector<int64_t> *zero_point() const {
    return GetPointer<const ::flatbuffers::Vector<int64_t> *>(VT_ZERO_POINT);
  }
  opencv_tflite::QuantizationDetails details_type() const {
    return static_cast<opencv_tflite::QuantizationDet...",1,<empty>,,2345,477,CPPASTProblemDeclaration,,<empty>
307417,UNKNOWN,1,,uint8_t,83,<empty>,,2420,1,CPPASTTypeId,,<empty>
307618,UNKNOWN,-1,,"struct Int32Vector FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Int32VectorBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUES = 4
  };
  const ::flatbuffers::Vector<int32_t> *values() const {
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_VALUES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUES) &&
           verifier.VerifyVector(values()) &&
           verifier.EndTable();
  }
};",1,<empty>,,2483,482,CPPASTProblemDeclaration,,<empty>
307717,UNKNOWN,-1,,"struct Uint16Vector FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Uint16VectorBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUES = 4
  };
  const ::flatbuffers::Vector<uint16_t> *values() const {
    return GetPointer<const ::flatbuffers::Vector<uint16_t> *>(VT_VALUES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUES) &&
           verifier.VerifyVector(values()) &&
           verifier.EndTable();
  }
};",1,<empty>,,2534,486,CPPASTProblemDeclaration,,<empty>
307830,UNKNOWN,-1,,"struct Uint8Vector FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Uint8VectorBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUES = 4
  };
  const ::flatbuffers::Vector<uint8_t> *values() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_VALUES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUES) &&
           verifier.VerifyVector(values()) &&
           verifier.EndTable();
  }
};",1,<empty>,,2586,490,CPPASTProblemDeclaration,,<empty>
307943,UNKNOWN,-1,,"struct DimensionMetadata FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DimensionMetadataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FORMAT = 4,
    VT_DENSE_SIZE = 6,
    VT_ARRAY_SEGMENTS_TYPE = 8,
    VT_ARRAY_SEGMENTS = 10,
    VT_ARRAY_INDICES_TYPE = 12,
    VT_ARRAY_INDICES = 14
  };
  opencv_tflite::DimensionType format() const {
    return static_cast<opencv_tflite::DimensionType>(GetField<int8_t>(VT_FORMAT, 0));
  }
  int32_t dense_size() const {
    return GetField<int32_t>(VT_DENSE_SIZE, 0);
  }
  opencv_tflite::SparseIndexVector array_segments_type() const {
    return static_cast<opencv_tflite::SparseIndexVector>(GetField<uint8_t>(VT_ARRAY_SEGMENTS_TYPE, 0));
  }
  const void *array_segments() const {
    return GetPointer<const void *>(VT_ARRAY_SEGMENTS);
  }
  template<typename T> const T *array_segments_as() const;
  const opencv_tflite::Int32Vector *array_segments_as_Int32Vector() const {
    return...",1,<empty>,,2638,494,CPPASTProblemDeclaration,,<empty>
307999,UNKNOWN,1,,int8_t,71,<empty>,,2729,1,CPPASTTypeId,,<empty>
308037,UNKNOWN,1,,uint8_t,85,<empty>,,2735,1,CPPASTTypeId,,<empty>
308070,UNKNOWN,1,,uint8_t,84,<empty>,,2741,1,CPPASTTypeId,,<empty>
308172,UNKNOWN,-1,,"struct SparsityParameters FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SparsityParametersBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TRAVERSAL_ORDER = 4,
    VT_BLOCK_MAP = 6,
    VT_DIM_METADATA = 8
  };
  const ::flatbuffers::Vector<int32_t> *traversal_order() const {
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_TRAVERSAL_ORDER);
  }
  const ::flatbuffers::Vector<int32_t> *block_map() const {
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_BLOCK_MAP);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<opencv_tflite::DimensionMetadata>> *dim_metadata() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<opencv_tflite::DimensionMetadata>> *>(VT_DIM_METADATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TRAVERSAL_ORDER) &&
           verifier.VerifyVect...",1,<empty>,,2775,503,CPPASTProblemDeclaration,,<empty>
308347,UNKNOWN,-1,,"struct VariantSubType FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef VariantSubTypeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SHAPE = 4,
    VT_TYPE = 6,
    VT_HAS_RANK = 8
  };
  const ::flatbuffers::Vector<int32_t> *shape() const {
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_SHAPE);
  }
  opencv_tflite::TensorType type() const {
    return static_cast<opencv_tflite::TensorType>(GetField<int8_t>(VT_TYPE, 0));
  }
  bool has_rank() const {
    return GetField<uint8_t>(VT_HAS_RANK, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SHAPE) &&
           verifier.VerifyVector(shape()) &&
           VerifyField<int8_t>(verifier, VT_TYPE, 1) &&
           VerifyField<uint8_t>(verifier, VT_HAS_RANK, 1) &&
           verifier.EndTable();
  }
};",1,<empty>,,2855,507,CPPASTProblemDeclaration,,<empty>
308380,UNKNOWN,1,,int8_t,66,<empty>,,2889,1,CPPASTTypeId,,<empty>
308400,UNKNOWN,1,,uint8_t,71,<empty>,,2892,1,CPPASTTypeId,,<empty>
308502,UNKNOWN,-1,,"struct Tensor FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TensorBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SHAPE = 4,
    VT_TYPE = 6,
    VT_BUFFER = 8,
    VT_NAME = 10,
    VT_QUANTIZATION = 12,
    VT_IS_VARIABLE = 14,
    VT_SPARSITY = 16,
    VT_SHAPE_SIGNATURE = 18,
    VT_HAS_RANK = 20,
    VT_VARIANT_TENSORS = 22
  };
  const ::flatbuffers::Vector<int32_t> *shape() const {
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_SHAPE);
  }
  opencv_tflite::TensorType type() const {
    return static_cast<opencv_tflite::TensorType>(GetField<int8_t>(VT_TYPE, 0));
  }
  uint32_t buffer() const {
    return GetField<uint32_t>(VT_BUFFER, 0);
  }
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const opencv_tflite::QuantizationParameters *quantization() const {
    return GetPointer<const opencv_tflite::QuantizationParameters *>(VT_QUA...",1,<empty>,,2930,511,CPPASTProblemDeclaration,,<empty>
308535,UNKNOWN,1,,int8_t,58,<empty>,,3005,1,CPPASTTypeId,,<empty>
308599,UNKNOWN,1,,uint8_t,66,<empty>,,3017,1,CPPASTTypeId,,<empty>
308645,UNKNOWN,1,,uint8_t,63,<empty>,,3026,1,CPPASTTypeId,,<empty>
308861,UNKNOWN,-1,,"struct Conv2DOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Conv2DOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PADDING = 4,
    VT_STRIDE_W = 6,
    VT_STRIDE_H = 8,
    VT_FUSED_ACTIVATION_FUNCTION = 10,
    VT_DILATION_W_FACTOR = 12,
    VT_DILATION_H_FACTOR = 14
  };
  opencv_tflite::Padding padding() const {
    return static_cast<opencv_tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
  }
  int32_t stride_w() const {
    return GetField<int32_t>(VT_STRIDE_W, 0);
  }
  int32_t stride_h() const {
    return GetField<int32_t>(VT_STRIDE_H, 0);
  }
  opencv_tflite::ActivationFunctionType fused_activation_function() const {
    return static_cast<opencv_tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
  }
  int32_t dilation_w_factor() const {
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
  }
  int32_t dilation_h_factor() const {
    return GetField<int32_t>(...",1,<empty>,,3098,515,CPPASTProblemDeclaration,,<empty>
308881,UNKNOWN,1,,int8_t,68,<empty>,,3143,1,CPPASTTypeId,,<empty>
308937,UNKNOWN,1,,int8_t,86,<empty>,,3152,1,CPPASTTypeId,,<empty>
309062,UNKNOWN,-1,,"struct Conv3DOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Conv3DOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PADDING = 4,
    VT_STRIDE_D = 6,
    VT_STRIDE_W = 8,
    VT_STRIDE_H = 10,
    VT_FUSED_ACTIVATION_FUNCTION = 12,
    VT_DILATION_D_FACTOR = 14,
    VT_DILATION_W_FACTOR = 16,
    VT_DILATION_H_FACTOR = 18
  };
  opencv_tflite::Padding padding() const {
    return static_cast<opencv_tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
  }
  int32_t stride_d() const {
    return GetField<int32_t>(VT_STRIDE_D, 0);
  }
  int32_t stride_w() const {
    return GetField<int32_t>(VT_STRIDE_W, 0);
  }
  int32_t stride_h() const {
    return GetField<int32_t>(VT_STRIDE_H, 0);
  }
  opencv_tflite::ActivationFunctionType fused_activation_function() const {
    return static_cast<opencv_tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
  }
  int32_t dilation_d_factor() co...",1,<empty>,,3189,518,CPPASTProblemDeclaration,,<empty>
309082,UNKNOWN,1,,int8_t,68,<empty>,,3244,1,CPPASTTypeId,,<empty>
309156,UNKNOWN,1,,int8_t,86,<empty>,,3256,1,CPPASTTypeId,,<empty>
309311,UNKNOWN,-1,,"struct Pool2DOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Pool2DOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PADDING = 4,
    VT_STRIDE_W = 6,
    VT_STRIDE_H = 8,
    VT_FILTER_WIDTH = 10,
    VT_FILTER_HEIGHT = 12,
    VT_FUSED_ACTIVATION_FUNCTION = 14
  };
  opencv_tflite::Padding padding() const {
    return static_cast<opencv_tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
  }
  int32_t stride_w() const {
    return GetField<int32_t>(VT_STRIDE_W, 0);
  }
  int32_t stride_h() const {
    return GetField<int32_t>(VT_STRIDE_H, 0);
  }
  int32_t filter_width() const {
    return GetField<int32_t>(VT_FILTER_WIDTH, 0);
  }
  int32_t filter_height() const {
    return GetField<int32_t>(VT_FILTER_HEIGHT, 0);
  }
  opencv_tflite::ActivationFunctionType fused_activation_function() const {
    return static_cast<opencv_tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 ...",1,<empty>,,3300,521,CPPASTProblemDeclaration,,<empty>
309331,UNKNOWN,1,,int8_t,68,<empty>,,3345,1,CPPASTTypeId,,<empty>
309423,UNKNOWN,1,,int8_t,86,<empty>,,3360,1,CPPASTTypeId,,<empty>
309512,UNKNOWN,-1,,"struct DepthwiseConv2DOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DepthwiseConv2DOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PADDING = 4,
    VT_STRIDE_W = 6,
    VT_STRIDE_H = 8,
    VT_DEPTH_MULTIPLIER = 10,
    VT_FUSED_ACTIVATION_FUNCTION = 12,
    VT_DILATION_W_FACTOR = 14,
    VT_DILATION_H_FACTOR = 16
  };
  opencv_tflite::Padding padding() const {
    return static_cast<opencv_tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
  }
  int32_t stride_w() const {
    return GetField<int32_t>(VT_STRIDE_W, 0);
  }
  int32_t stride_h() const {
    return GetField<int32_t>(VT_STRIDE_H, 0);
  }
  int32_t depth_multiplier() const {
    return GetField<int32_t>(VT_DEPTH_MULTIPLIER, 0);
  }
  opencv_tflite::ActivationFunctionType fused_activation_function() const {
    return static_cast<opencv_tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
  }
  int32_t dilation_w_...",1,<empty>,,3391,524,CPPASTProblemDeclaration,,<empty>
309532,UNKNOWN,1,,int8_t,77,<empty>,,3441,1,CPPASTTypeId,,<empty>
309606,UNKNOWN,1,,int8_t,95,<empty>,,3453,1,CPPASTTypeId,,<empty>
309737,UNKNOWN,-1,,"struct ConcatEmbeddingsOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ConcatEmbeddingsOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NUM_CHANNELS = 4,
    VT_NUM_COLUMNS_PER_CHANNEL = 6,
    VT_EMBEDDING_DIM_PER_CHANNEL = 8
  };
  int32_t num_channels() const {
    return GetField<int32_t>(VT_NUM_CHANNELS, 0);
  }
  const ::flatbuffers::Vector<int32_t> *num_columns_per_channel() const {
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_NUM_COLUMNS_PER_CHANNEL);
  }
  const ::flatbuffers::Vector<int32_t> *embedding_dim_per_channel() const {
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_EMBEDDING_DIM_PER_CHANNEL);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_NUM_CHANNELS, 4) &&
           VerifyOffset(verifier, VT_NUM_COLUMNS_PER_CHANNEL) &&
           verifier.VerifyVecto...",1,<empty>,,3492,527,CPPASTProblemDeclaration,,<empty>
309897,UNKNOWN,-1,,"struct LSHProjectionOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LSHProjectionOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4
  };
  opencv_tflite::LSHProjectionType type() const {
    return static_cast<opencv_tflite::LSHProjectionType>(GetField<int8_t>(VT_TYPE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_TYPE, 1) &&
           verifier.EndTable();
  }
};",1,<empty>,,3569,531,CPPASTProblemDeclaration,,<empty>
309917,UNKNOWN,1,,int8_t,72,<empty>,,3589,1,CPPASTTypeId,,<empty>
309976,UNKNOWN,-1,,"struct SVDFOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SVDFOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RANK = 4,
    VT_FUSED_ACTIVATION_FUNCTION = 6,
    VT_ASYMMETRIC_QUANTIZE_INPUTS = 8
  };
  int32_t rank() const {
    return GetField<int32_t>(VT_RANK, 0);
  }
  opencv_tflite::ActivationFunctionType fused_activation_function() const {
    return static_cast<opencv_tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
  }
  bool asymmetric_quantize_inputs() const {
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_RANK, 4) &&
           VerifyField<int8_t>(verifier, VT_FUSED_ACTIVATION_FUNCTION, 1) &&
           VerifyField<uint8_t>(verifier, VT_ASYMMETRIC_QUANTIZE_INPUTS, 1) &&
           verifier.EndT...",1,<empty>,,3610,534,CPPASTProblemDeclaration,,<empty>
310014,UNKNOWN,1,,int8_t,84,<empty>,,3643,1,CPPASTTypeId,,<empty>
310034,UNKNOWN,1,,uint8_t,86,<empty>,,3646,1,CPPASTTypeId,,<empty>
310105,UNKNOWN,-1,,"struct RNNOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RNNOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FUSED_ACTIVATION_FUNCTION = 4,
    VT_ASYMMETRIC_QUANTIZE_INPUTS = 6
  };
  opencv_tflite::ActivationFunctionType fused_activation_function() const {
    return static_cast<opencv_tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
  }
  bool asymmetric_quantize_inputs() const {
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_FUSED_ACTIVATION_FUNCTION, 1) &&
           VerifyField<uint8_t>(verifier, VT_ASYMMETRIC_QUANTIZE_INPUTS, 1) &&
           verifier.EndTable();
  }
};",1,<empty>,,3671,537,CPPASTProblemDeclaration,,<empty>
310125,UNKNOWN,1,,int8_t,83,<empty>,,3696,1,CPPASTTypeId,,<empty>
310145,UNKNOWN,1,,uint8_t,85,<empty>,,3699,1,CPPASTTypeId,,<empty>
310210,UNKNOWN,-1,,"struct SequenceRNNOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SequenceRNNOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TIME_MAJOR = 4,
    VT_FUSED_ACTIVATION_FUNCTION = 6,
    VT_ASYMMETRIC_QUANTIZE_INPUTS = 8
  };
  bool time_major() const {
    return GetField<uint8_t>(VT_TIME_MAJOR, 0) != 0;
  }
  opencv_tflite::ActivationFunctionType fused_activation_function() const {
    return static_cast<opencv_tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
  }
  bool asymmetric_quantize_inputs() const {
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_TIME_MAJOR, 1) &&
           VerifyField<int8_t>(verifier, VT_FUSED_ACTIVATION_FUNCTION, 1) &&
           VerifyField<uint8_t>(verifier, VT_ASYMMETRIC_QUANTIZ...",1,<empty>,,3722,540,CPPASTProblemDeclaration,,<empty>
310230,UNKNOWN,1,,uint8_t,77,<empty>,,3752,1,CPPASTTypeId,,<empty>
310250,UNKNOWN,1,,int8_t,91,<empty>,,3755,1,CPPASTTypeId,,<empty>
310270,UNKNOWN,1,,uint8_t,93,<empty>,,3758,1,CPPASTTypeId,,<empty>
310341,UNKNOWN,-1,,"struct BidirectionalSequenceRNNOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BidirectionalSequenceRNNOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TIME_MAJOR = 4,
    VT_FUSED_ACTIVATION_FUNCTION = 6,
    VT_MERGE_OUTPUTS = 8,
    VT_ASYMMETRIC_QUANTIZE_INPUTS = 10
  };
  bool time_major() const {
    return GetField<uint8_t>(VT_TIME_MAJOR, 0) != 0;
  }
  opencv_tflite::ActivationFunctionType fused_activation_function() const {
    return static_cast<opencv_tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
  }
  bool merge_outputs() const {
    return GetField<uint8_t>(VT_MERGE_OUTPUTS, 0) != 0;
  }
  bool asymmetric_quantize_inputs() const {
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_TIME_MAJOR, 1)...",1,<empty>,,3783,543,CPPASTProblemDeclaration,,<empty>
310361,UNKNOWN,1,,uint8_t,90,<empty>,,3818,1,CPPASTTypeId,,<empty>
310381,UNKNOWN,1,,int8_t,104,<empty>,,3821,1,CPPASTTypeId,,<empty>
310401,UNKNOWN,1,,uint8_t,93,<empty>,,3824,1,CPPASTTypeId,,<empty>
310421,UNKNOWN,1,,uint8_t,106,<empty>,,3827,1,CPPASTTypeId,,<empty>
310498,UNKNOWN,-1,,"struct FullyConnectedOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FullyConnectedOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FUSED_ACTIVATION_FUNCTION = 4,
    VT_WEIGHTS_FORMAT = 6,
    VT_KEEP_NUM_DIMS = 8,
    VT_ASYMMETRIC_QUANTIZE_INPUTS = 10
  };
  opencv_tflite::ActivationFunctionType fused_activation_function() const {
    return static_cast<opencv_tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
  }
  opencv_tflite::FullyConnectedOptionsWeightsFormat weights_format() const {
    return static_cast<opencv_tflite::FullyConnectedOptionsWeightsFormat>(GetField<int8_t>(VT_WEIGHTS_FORMAT, 0));
  }
  bool keep_num_dims() const {
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
  }
  bool asymmetric_quantize_inputs() const {
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    r...",1,<empty>,,3854,546,CPPASTProblemDeclaration,,<empty>
310518,UNKNOWN,1,,int8_t,94,<empty>,,3889,1,CPPASTTypeId,,<empty>
310538,UNKNOWN,1,,int8_t,83,<empty>,,3892,1,CPPASTTypeId,,<empty>
310558,UNKNOWN,1,,uint8_t,83,<empty>,,3895,1,CPPASTTypeId,,<empty>
310578,UNKNOWN,1,,uint8_t,96,<empty>,,3898,1,CPPASTTypeId,,<empty>
310655,UNKNOWN,-1,,"struct SoftmaxOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SoftmaxOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BETA = 4
  };
  float beta() const {
    return GetField<float>(VT_BETA, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_BETA, 4) &&
           verifier.EndTable();
  }
};",1,<empty>,,3925,549,CPPASTProblemDeclaration,,<empty>
310728,UNKNOWN,-1,,"struct ConcatenationOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ConcatenationOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_AXIS = 4,
    VT_FUSED_ACTIVATION_FUNCTION = 6
  };
  int32_t axis() const {
    return GetField<int32_t>(VT_AXIS, 0);
  }
  opencv_tflite::ActivationFunctionType fused_activation_function() const {
    return static_cast<opencv_tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_AXIS, 4) &&
           VerifyField<int8_t>(verifier, VT_FUSED_ACTIVATION_FUNCTION, 1) &&
           verifier.EndTable();
  }
};",1,<empty>,,3966,552,CPPASTProblemDeclaration,,<empty>
310766,UNKNOWN,1,,int8_t,93,<empty>,,3994,1,CPPASTTypeId,,<empty>
310831,UNKNOWN,-1,,"struct AddOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AddOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FUSED_ACTIVATION_FUNCTION = 4,
    VT_POT_SCALE_INT16 = 6
  };
  opencv_tflite::ActivationFunctionType fused_activation_function() const {
    return static_cast<opencv_tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
  }
  bool pot_scale_int16() const {
    return GetField<uint8_t>(VT_POT_SCALE_INT16, 1) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_FUSED_ACTIVATION_FUNCTION, 1) &&
           VerifyField<uint8_t>(verifier, VT_POT_SCALE_INT16, 1) &&
           verifier.EndTable();
  }
};",1,<empty>,,4017,555,CPPASTProblemDeclaration,,<empty>
310851,UNKNOWN,1,,int8_t,83,<empty>,,4042,1,CPPASTTypeId,,<empty>
310871,UNKNOWN,1,,uint8_t,74,<empty>,,4045,1,CPPASTTypeId,,<empty>
310936,UNKNOWN,-1,,"struct MulOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MulOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FUSED_ACTIVATION_FUNCTION = 4
  };
  opencv_tflite::ActivationFunctionType fused_activation_function() const {
    return static_cast<opencv_tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_FUSED_ACTIVATION_FUNCTION, 1) &&
           verifier.EndTable();
  }
};",1,<empty>,,4068,558,CPPASTProblemDeclaration,,<empty>
310956,UNKNOWN,1,,int8_t,83,<empty>,,4088,1,CPPASTTypeId,,<empty>
311015,UNKNOWN,-1,,"struct L2NormOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef L2NormOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FUSED_ACTIVATION_FUNCTION = 4
  };
  opencv_tflite::ActivationFunctionType fused_activation_function() const {
    return static_cast<opencv_tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_FUSED_ACTIVATION_FUNCTION, 1) &&
           verifier.EndTable();
  }
};",1,<empty>,,4109,561,CPPASTProblemDeclaration,,<empty>
311035,UNKNOWN,1,,int8_t,86,<empty>,,4129,1,CPPASTTypeId,,<empty>
311094,UNKNOWN,-1,,"struct LocalResponseNormalizationOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LocalResponseNormalizationOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RADIUS = 4,
    VT_BIAS = 6,
    VT_ALPHA = 8,
    VT_BETA = 10
  };
  int32_t radius() const {
    return GetField<int32_t>(VT_RADIUS, 0);
  }
  float bias() const {
    return GetField<float>(VT_BIAS, 0.0f);
  }
  float alpha() const {
    return GetField<float>(VT_ALPHA, 0.0f);
  }
  float beta() const {
    return GetField<float>(VT_BETA, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_RADIUS, 4) &&
           VerifyField<float>(verifier, VT_BIAS, 4) &&
           VerifyField<float>(verifier, VT_ALPHA, 4) &&
           VerifyField<float>(verifier, VT_BETA, 4) &&
           verifier.EndTable();
  }
};",1,<empty>,,4150,564,CPPASTProblemDeclaration,,<empty>
311231,UNKNOWN,-1,,"struct LSTMOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LSTMOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FUSED_ACTIVATION_FUNCTION = 4,
    VT_CELL_CLIP = 6,
    VT_PROJ_CLIP = 8,
    VT_KERNEL_TYPE = 10,
    VT_ASYMMETRIC_QUANTIZE_INPUTS = 12
  };
  opencv_tflite::ActivationFunctionType fused_activation_function() const {
    return static_cast<opencv_tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
  }
  float cell_clip() const {
    return GetField<float>(VT_CELL_CLIP, 0.0f);
  }
  float proj_clip() const {
    return GetField<float>(VT_PROJ_CLIP, 0.0f);
  }
  opencv_tflite::LSTMKernelType kernel_type() const {
    return static_cast<opencv_tflite::LSTMKernelType>(GetField<int8_t>(VT_KERNEL_TYPE, 0));
  }
  bool asymmetric_quantize_inputs() const {
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &veri...",1,<empty>,,4221,567,CPPASTProblemDeclaration,,<empty>
311251,UNKNOWN,1,,int8_t,84,<empty>,,4261,1,CPPASTTypeId,,<empty>
311299,UNKNOWN,1,,int8_t,70,<empty>,,4270,1,CPPASTTypeId,,<empty>
311319,UNKNOWN,1,,uint8_t,86,<empty>,,4273,1,CPPASTTypeId,,<empty>
311402,UNKNOWN,-1,,"struct UnidirectionalSequenceLSTMOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UnidirectionalSequenceLSTMOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FUSED_ACTIVATION_FUNCTION = 4,
    VT_CELL_CLIP = 6,
    VT_PROJ_CLIP = 8,
    VT_TIME_MAJOR = 10,
    VT_ASYMMETRIC_QUANTIZE_INPUTS = 12,
    VT_DIAGONAL_RECURRENT_TENSORS = 14
  };
  opencv_tflite::ActivationFunctionType fused_activation_function() const {
    return static_cast<opencv_tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
  }
  float cell_clip() const {
    return GetField<float>(VT_CELL_CLIP, 0.0f);
  }
  float proj_clip() const {
    return GetField<float>(VT_PROJ_CLIP, 0.0f);
  }
  bool time_major() const {
    return GetField<uint8_t>(VT_TIME_MAJOR, 0) != 0;
  }
  bool asymmetric_quantize_inputs() const {
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
  }
  bool diagonal_recurrent...",1,<empty>,,4302,570,CPPASTProblemDeclaration,,<empty>
311422,UNKNOWN,1,,int8_t,106,<empty>,,4347,1,CPPASTTypeId,,<empty>
311470,UNKNOWN,1,,uint8_t,92,<empty>,,4356,1,CPPASTTypeId,,<empty>
311490,UNKNOWN,1,,uint8_t,108,<empty>,,4359,1,CPPASTTypeId,,<empty>
311510,UNKNOWN,1,,uint8_t,108,<empty>,,4362,1,CPPASTTypeId,,<empty>
311599,UNKNOWN,-1,,"struct BidirectionalSequenceLSTMOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BidirectionalSequenceLSTMOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FUSED_ACTIVATION_FUNCTION = 4,
    VT_CELL_CLIP = 6,
    VT_PROJ_CLIP = 8,
    VT_MERGE_OUTPUTS = 10,
    VT_TIME_MAJOR = 12,
    VT_ASYMMETRIC_QUANTIZE_INPUTS = 14
  };
  opencv_tflite::ActivationFunctionType fused_activation_function() const {
    return static_cast<opencv_tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
  }
  float cell_clip() const {
    return GetField<float>(VT_CELL_CLIP, 0.0f);
  }
  float proj_clip() const {
    return GetField<float>(VT_PROJ_CLIP, 0.0f);
  }
  bool merge_outputs() const {
    return GetField<uint8_t>(VT_MERGE_OUTPUTS, 0) != 0;
  }
  bool time_major() const {
    return GetField<uint8_t>(VT_TIME_MAJOR, 1) != 0;
  }
  bool asymmetric_quantize_inputs() const {
    return GetField<ui...",1,<empty>,,4393,573,CPPASTProblemDeclaration,,<empty>
311619,UNKNOWN,1,,int8_t,105,<empty>,,4438,1,CPPASTTypeId,,<empty>
311667,UNKNOWN,1,,uint8_t,94,<empty>,,4447,1,CPPASTTypeId,,<empty>
311687,UNKNOWN,1,,uint8_t,91,<empty>,,4450,1,CPPASTTypeId,,<empty>
311707,UNKNOWN,1,,uint8_t,107,<empty>,,4453,1,CPPASTTypeId,,<empty>
311796,UNKNOWN,-1,,"struct ResizeBilinearOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ResizeBilinearOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ALIGN_CORNERS = 8,
    VT_HALF_PIXEL_CENTERS = 10
  };
  bool align_corners() const {
    return GetField<uint8_t>(VT_ALIGN_CORNERS, 0) != 0;
  }
  bool half_pixel_centers() const {
    return GetField<uint8_t>(VT_HALF_PIXEL_CENTERS, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_ALIGN_CORNERS, 1) &&
           VerifyField<uint8_t>(verifier, VT_HALF_PIXEL_CENTERS, 1) &&
           verifier.EndTable();
  }
};",1,<empty>,,4484,576,CPPASTProblemDeclaration,,<empty>
311816,UNKNOWN,1,,uint8_t,83,<empty>,,4509,1,CPPASTTypeId,,<empty>
311836,UNKNOWN,1,,uint8_t,88,<empty>,,4512,1,CPPASTTypeId,,<empty>
311901,UNKNOWN,-1,,"struct ResizeNearestNeighborOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ResizeNearestNeighborOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ALIGN_CORNERS = 4,
    VT_HALF_PIXEL_CENTERS = 6
  };
  bool align_corners() const {
    return GetField<uint8_t>(VT_ALIGN_CORNERS, 0) != 0;
  }
  bool half_pixel_centers() const {
    return GetField<uint8_t>(VT_HALF_PIXEL_CENTERS, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_ALIGN_CORNERS, 1) &&
           VerifyField<uint8_t>(verifier, VT_HALF_PIXEL_CENTERS, 1) &&
           verifier.EndTable();
  }
};",1,<empty>,,4535,579,CPPASTProblemDeclaration,,<empty>
311921,UNKNOWN,1,,uint8_t,90,<empty>,,4560,1,CPPASTTypeId,,<empty>
311941,UNKNOWN,1,,uint8_t,95,<empty>,,4563,1,CPPASTTypeId,,<empty>
312006,UNKNOWN,-1,,"struct CallOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CallOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SUBGRAPH = 4
  };
  uint32_t subgraph() const {
    return GetField<uint32_t>(VT_SUBGRAPH, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_SUBGRAPH, 4) &&
           verifier.EndTable();
  }
};",1,<empty>,,4586,582,CPPASTProblemDeclaration,,<empty>
312083,UNKNOWN,-1,,"struct PadOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PadOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,4627,585,CPPASTProblemDeclaration,,<empty>
312136,UNKNOWN,-1,,"struct PadV2Options FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PadV2OptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,4656,588,CPPASTProblemDeclaration,,<empty>
312189,UNKNOWN,-1,,"struct ReshapeOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ReshapeOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NEW_SHAPE = 4
  };
  const ::flatbuffers::Vector<int32_t> *new_shape() const {
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_NEW_SHAPE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NEW_SHAPE) &&
           verifier.VerifyVector(new_shape()) &&
           verifier.EndTable();
  }
};",1,<empty>,,4685,591,CPPASTProblemDeclaration,,<empty>
312288,UNKNOWN,-1,,"struct SpaceToBatchNDOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SpaceToBatchNDOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,4736,595,CPPASTProblemDeclaration,,<empty>
312341,UNKNOWN,-1,,"struct BatchToSpaceNDOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BatchToSpaceNDOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,4765,598,CPPASTProblemDeclaration,,<empty>
312394,UNKNOWN,-1,,"struct SkipGramOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SkipGramOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NGRAM_SIZE = 4,
    VT_MAX_SKIP_SIZE = 6,
    VT_INCLUDE_ALL_NGRAMS = 8
  };
  int32_t ngram_size() const {
    return GetField<int32_t>(VT_NGRAM_SIZE, 0);
  }
  int32_t max_skip_size() const {
    return GetField<int32_t>(VT_MAX_SKIP_SIZE, 0);
  }
  bool include_all_ngrams() const {
    return GetField<uint8_t>(VT_INCLUDE_ALL_NGRAMS, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_NGRAM_SIZE, 4) &&
           VerifyField<int32_t>(verifier, VT_MAX_SKIP_SIZE, 4) &&
           VerifyField<uint8_t>(verifier, VT_INCLUDE_ALL_NGRAMS, 1) &&
           verifier.EndTable();
  }
};",1,<empty>,,4794,601,CPPASTProblemDeclaration,,<empty>
312450,UNKNOWN,1,,uint8_t,82,<empty>,,4830,1,CPPASTTypeId,,<empty>
312521,UNKNOWN,-1,,"struct SpaceToDepthOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SpaceToDepthOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BLOCK_SIZE = 4
  };
  int32_t block_size() const {
    return GetField<int32_t>(VT_BLOCK_SIZE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_BLOCK_SIZE, 4) &&
           verifier.EndTable();
  }
};",1,<empty>,,4855,604,CPPASTProblemDeclaration,,<empty>
312598,UNKNOWN,-1,,"struct DepthToSpaceOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DepthToSpaceOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BLOCK_SIZE = 4
  };
  int32_t block_size() const {
    return GetField<int32_t>(VT_BLOCK_SIZE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_BLOCK_SIZE, 4) &&
           verifier.EndTable();
  }
};",1,<empty>,,4896,607,CPPASTProblemDeclaration,,<empty>
312675,UNKNOWN,-1,,"struct SubOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SubOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FUSED_ACTIVATION_FUNCTION = 4,
    VT_POT_SCALE_INT16 = 6
  };
  opencv_tflite::ActivationFunctionType fused_activation_function() const {
    return static_cast<opencv_tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
  }
  bool pot_scale_int16() const {
    return GetField<uint8_t>(VT_POT_SCALE_INT16, 1) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_FUSED_ACTIVATION_FUNCTION, 1) &&
           VerifyField<uint8_t>(verifier, VT_POT_SCALE_INT16, 1) &&
           verifier.EndTable();
  }
};",1,<empty>,,4937,610,CPPASTProblemDeclaration,,<empty>
312695,UNKNOWN,1,,int8_t,83,<empty>,,4962,1,CPPASTTypeId,,<empty>
312715,UNKNOWN,1,,uint8_t,74,<empty>,,4965,1,CPPASTTypeId,,<empty>
312780,UNKNOWN,-1,,"struct DivOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DivOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FUSED_ACTIVATION_FUNCTION = 4
  };
  opencv_tflite::ActivationFunctionType fused_activation_function() const {
    return static_cast<opencv_tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_FUSED_ACTIVATION_FUNCTION, 1) &&
           verifier.EndTable();
  }
};",1,<empty>,,4988,613,CPPASTProblemDeclaration,,<empty>
312800,UNKNOWN,1,,int8_t,83,<empty>,,5008,1,CPPASTTypeId,,<empty>
312859,UNKNOWN,-1,,"struct TopKV2Options FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TopKV2OptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,5029,616,CPPASTProblemDeclaration,,<empty>
312912,UNKNOWN,-1,,"struct EmbeddingLookupSparseOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EmbeddingLookupSparseOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_COMBINER = 4
  };
  opencv_tflite::CombinerType combiner() const {
    return static_cast<opencv_tflite::CombinerType>(GetField<int8_t>(VT_COMBINER, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_COMBINER, 1) &&
           verifier.EndTable();
  }
};",1,<empty>,,5058,619,CPPASTProblemDeclaration,,<empty>
312932,UNKNOWN,1,,int8_t,84,<empty>,,5078,1,CPPASTTypeId,,<empty>
312991,UNKNOWN,-1,,"struct GatherOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GatherOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_AXIS = 4,
    VT_BATCH_DIMS = 6
  };
  int32_t axis() const {
    return GetField<int32_t>(VT_AXIS, 0);
  }
  int32_t batch_dims() const {
    return GetField<int32_t>(VT_BATCH_DIMS, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_AXIS, 4) &&
           VerifyField<int32_t>(verifier, VT_BATCH_DIMS, 4) &&
           verifier.EndTable();
  }
};",1,<empty>,,5099,622,CPPASTProblemDeclaration,,<empty>
313092,UNKNOWN,-1,,"struct TransposeOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TransposeOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,5150,625,CPPASTProblemDeclaration,,<empty>
313145,UNKNOWN,-1,,"struct ExpOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ExpOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,5179,628,CPPASTProblemDeclaration,,<empty>
313198,UNKNOWN,-1,,"struct CosOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CosOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,5208,631,CPPASTProblemDeclaration,,<empty>
313251,UNKNOWN,-1,,"struct ReducerOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ReducerOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEEP_DIMS = 4
  };
  bool keep_dims() const {
    return GetField<uint8_t>(VT_KEEP_DIMS, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_KEEP_DIMS, 1) &&
           verifier.EndTable();
  }
};",1,<empty>,,5237,634,CPPASTProblemDeclaration,,<empty>
313271,UNKNOWN,1,,uint8_t,72,<empty>,,5257,1,CPPASTTypeId,,<empty>
313330,UNKNOWN,-1,,"struct SqueezeOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SqueezeOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SQUEEZE_DIMS = 4
  };
  const ::flatbuffers::Vector<int32_t> *squeeze_dims() const {
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_SQUEEZE_DIMS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SQUEEZE_DIMS) &&
           verifier.VerifyVector(squeeze_dims()) &&
           verifier.EndTable();
  }
};",1,<empty>,,5278,637,CPPASTProblemDeclaration,,<empty>
313429,UNKNOWN,-1,,"struct SplitOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SplitOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NUM_SPLITS = 4
  };
  int32_t num_splits() const {
    return GetField<int32_t>(VT_NUM_SPLITS, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_NUM_SPLITS, 4) &&
           verifier.EndTable();
  }
};",1,<empty>,,5329,641,CPPASTProblemDeclaration,,<empty>
313506,UNKNOWN,-1,,"struct SplitVOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SplitVOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NUM_SPLITS = 4
  };
  int32_t num_splits() const {
    return GetField<int32_t>(VT_NUM_SPLITS, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_NUM_SPLITS, 4) &&
           verifier.EndTable();
  }
};",1,<empty>,,5370,644,CPPASTProblemDeclaration,,<empty>
313583,UNKNOWN,-1,,"struct StridedSliceOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef StridedSliceOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BEGIN_MASK = 4,
    VT_END_MASK = 6,
    VT_ELLIPSIS_MASK = 8,
    VT_NEW_AXIS_MASK = 10,
    VT_SHRINK_AXIS_MASK = 12
  };
  int32_t begin_mask() const {
    return GetField<int32_t>(VT_BEGIN_MASK, 0);
  }
  int32_t end_mask() const {
    return GetField<int32_t>(VT_END_MASK, 0);
  }
  int32_t ellipsis_mask() const {
    return GetField<int32_t>(VT_ELLIPSIS_MASK, 0);
  }
  int32_t new_axis_mask() const {
    return GetField<int32_t>(VT_NEW_AXIS_MASK, 0);
  }
  int32_t shrink_axis_mask() const {
    return GetField<int32_t>(VT_SHRINK_AXIS_MASK, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_BEGIN_MASK, 4) &&
           VerifyField<int32_t>(verifier, VT_END_MASK, 4) &&
           ...",1,<empty>,,5411,647,CPPASTProblemDeclaration,,<empty>
313756,UNKNOWN,-1,,"struct LogSoftmaxOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LogSoftmaxOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,5492,650,CPPASTProblemDeclaration,,<empty>
313809,UNKNOWN,-1,,"struct CastOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CastOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_IN_DATA_TYPE = 4,
    VT_OUT_DATA_TYPE = 6
  };
  opencv_tflite::TensorType in_data_type() const {
    return static_cast<opencv_tflite::TensorType>(GetField<int8_t>(VT_IN_DATA_TYPE, 0));
  }
  opencv_tflite::TensorType out_data_type() const {
    return static_cast<opencv_tflite::TensorType>(GetField<int8_t>(VT_OUT_DATA_TYPE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_IN_DATA_TYPE, 1) &&
           VerifyField<int8_t>(verifier, VT_OUT_DATA_TYPE, 1) &&
           verifier.EndTable();
  }
};",1,<empty>,,5521,653,CPPASTProblemDeclaration,,<empty>
313829,UNKNOWN,1,,int8_t,71,<empty>,,5546,1,CPPASTTypeId,,<empty>
313849,UNKNOWN,1,,int8_t,72,<empty>,,5549,1,CPPASTTypeId,,<empty>
313914,UNKNOWN,-1,,"struct DequantizeOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DequantizeOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,5572,656,CPPASTProblemDeclaration,,<empty>
313967,UNKNOWN,-1,,"struct MaximumMinimumOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MaximumMinimumOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,5601,659,CPPASTProblemDeclaration,,<empty>
314020,UNKNOWN,-1,,"struct TileOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TileOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,5630,662,CPPASTProblemDeclaration,,<empty>
314073,UNKNOWN,-1,,"struct ArgMaxOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ArgMaxOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OUTPUT_TYPE = 4
  };
  opencv_tflite::TensorType output_type() const {
    return static_cast<opencv_tflite::TensorType>(GetField<int8_t>(VT_OUTPUT_TYPE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_OUTPUT_TYPE, 1) &&
           verifier.EndTable();
  }
};",1,<empty>,,5659,665,CPPASTProblemDeclaration,,<empty>
314093,UNKNOWN,1,,int8_t,72,<empty>,,5679,1,CPPASTTypeId,,<empty>
314152,UNKNOWN,-1,,"struct ArgMinOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ArgMinOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OUTPUT_TYPE = 4
  };
  opencv_tflite::TensorType output_type() const {
    return static_cast<opencv_tflite::TensorType>(GetField<int8_t>(VT_OUTPUT_TYPE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_OUTPUT_TYPE, 1) &&
           verifier.EndTable();
  }
};",1,<empty>,,5700,668,CPPASTProblemDeclaration,,<empty>
314172,UNKNOWN,1,,int8_t,72,<empty>,,5720,1,CPPASTTypeId,,<empty>
314231,UNKNOWN,-1,,"struct GreaterOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GreaterOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,5741,671,CPPASTProblemDeclaration,,<empty>
314284,UNKNOWN,-1,,"struct GreaterEqualOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GreaterEqualOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,5770,674,CPPASTProblemDeclaration,,<empty>
314337,UNKNOWN,-1,,"struct LessOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LessOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,5799,677,CPPASTProblemDeclaration,,<empty>
314390,UNKNOWN,-1,,"struct LessEqualOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LessEqualOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,5828,680,CPPASTProblemDeclaration,,<empty>
314443,UNKNOWN,-1,,"struct NegOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef NegOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,5857,683,CPPASTProblemDeclaration,,<empty>
314496,UNKNOWN,-1,,"struct SelectOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SelectOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,5886,686,CPPASTProblemDeclaration,,<empty>
314549,UNKNOWN,-1,,"struct SliceOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SliceOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,5915,689,CPPASTProblemDeclaration,,<empty>
314602,UNKNOWN,-1,,"struct TransposeConvOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TransposeConvOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PADDING = 4,
    VT_STRIDE_W = 6,
    VT_STRIDE_H = 8,
    VT_FUSED_ACTIVATION_FUNCTION = 10
  };
  opencv_tflite::Padding padding() const {
    return static_cast<opencv_tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
  }
  int32_t stride_w() const {
    return GetField<int32_t>(VT_STRIDE_W, 0);
  }
  int32_t stride_h() const {
    return GetField<int32_t>(VT_STRIDE_H, 0);
  }
  opencv_tflite::ActivationFunctionType fused_activation_function() const {
    return static_cast<opencv_tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_PADDING, 1) &&
           VerifyField<int32_t>(verifier, VT_STRIDE_W, ...",1,<empty>,,5944,692,CPPASTProblemDeclaration,,<empty>
314622,UNKNOWN,1,,int8_t,75,<empty>,,5979,1,CPPASTTypeId,,<empty>
314678,UNKNOWN,1,,int8_t,93,<empty>,,5988,1,CPPASTTypeId,,<empty>
314755,UNKNOWN,-1,,"struct ExpandDimsOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ExpandDimsOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,6015,695,CPPASTProblemDeclaration,,<empty>
314808,UNKNOWN,-1,,"struct SparseToDenseOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SparseToDenseOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALIDATE_INDICES = 4
  };
  bool validate_indices() const {
    return GetField<uint8_t>(VT_VALIDATE_INDICES, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_VALIDATE_INDICES, 1) &&
           verifier.EndTable();
  }
};",1,<empty>,,6044,698,CPPASTProblemDeclaration,,<empty>
314828,UNKNOWN,1,,uint8_t,85,<empty>,,6064,1,CPPASTTypeId,,<empty>
314887,UNKNOWN,-1,,"struct EqualOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EqualOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,6085,701,CPPASTProblemDeclaration,,<empty>
314940,UNKNOWN,-1,,"struct NotEqualOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef NotEqualOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,6114,704,CPPASTProblemDeclaration,,<empty>
314993,UNKNOWN,-1,,"struct ShapeOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ShapeOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OUT_TYPE = 4
  };
  opencv_tflite::TensorType out_type() const {
    return static_cast<opencv_tflite::TensorType>(GetField<int8_t>(VT_OUT_TYPE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_OUT_TYPE, 1) &&
           verifier.EndTable();
  }
};",1,<empty>,,6143,707,CPPASTProblemDeclaration,,<empty>
315013,UNKNOWN,1,,int8_t,68,<empty>,,6163,1,CPPASTTypeId,,<empty>
315072,UNKNOWN,-1,,"struct RankOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RankOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,6184,710,CPPASTProblemDeclaration,,<empty>
315125,UNKNOWN,-1,,"struct PowOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PowOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,6213,713,CPPASTProblemDeclaration,,<empty>
315178,UNKNOWN,-1,,"struct FakeQuantOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FakeQuantOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MIN = 4,
    VT_MAX = 6,
    VT_NUM_BITS = 8,
    VT_NARROW_RANGE = 10
  };
  float min() const {
    return GetField<float>(VT_MIN, 0.0f);
  }
  float max() const {
    return GetField<float>(VT_MAX, 0.0f);
  }
  int32_t num_bits() const {
    return GetField<int32_t>(VT_NUM_BITS, 0);
  }
  bool narrow_range() const {
    return GetField<uint8_t>(VT_NARROW_RANGE, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_MIN, 4) &&
           VerifyField<float>(verifier, VT_MAX, 4) &&
           VerifyField<int32_t>(verifier, VT_NUM_BITS, 4) &&
           VerifyField<uint8_t>(verifier, VT_NARROW_RANGE, 1) &&
           verifier.EndTable();
  }
};",1,<empty>,,6242,716,CPPASTProblemDeclaration,,<empty>
315244,UNKNOWN,1,,uint8_t,77,<empty>,,6286,1,CPPASTTypeId,,<empty>
315321,UNKNOWN,-1,,"struct PackOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PackOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUES_COUNT = 4,
    VT_AXIS = 6
  };
  int32_t values_count() const {
    return GetField<int32_t>(VT_VALUES_COUNT, 0);
  }
  int32_t axis() const {
    return GetField<int32_t>(VT_AXIS, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_VALUES_COUNT, 4) &&
           VerifyField<int32_t>(verifier, VT_AXIS, 4) &&
           verifier.EndTable();
  }
};",1,<empty>,,6313,719,CPPASTProblemDeclaration,,<empty>
315422,UNKNOWN,-1,,"struct LogicalOrOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LogicalOrOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,6364,722,CPPASTProblemDeclaration,,<empty>
315475,UNKNOWN,-1,,"struct OneHotOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OneHotOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_AXIS = 4
  };
  int32_t axis() const {
    return GetField<int32_t>(VT_AXIS, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_AXIS, 4) &&
           verifier.EndTable();
  }
};",1,<empty>,,6393,725,CPPASTProblemDeclaration,,<empty>
315552,UNKNOWN,-1,,"struct AbsOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AbsOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,6434,728,CPPASTProblemDeclaration,,<empty>
315605,UNKNOWN,-1,,"struct HardSwishOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef HardSwishOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,6463,731,CPPASTProblemDeclaration,,<empty>
315658,UNKNOWN,-1,,"struct LogicalAndOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LogicalAndOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,6492,734,CPPASTProblemDeclaration,,<empty>
315711,UNKNOWN,-1,,"struct LogicalNotOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LogicalNotOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,6521,737,CPPASTProblemDeclaration,,<empty>
315764,UNKNOWN,-1,,"struct UnpackOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UnpackOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NUM = 4,
    VT_AXIS = 6
  };
  int32_t num() const {
    return GetField<int32_t>(VT_NUM, 0);
  }
  int32_t axis() const {
    return GetField<int32_t>(VT_AXIS, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_NUM, 4) &&
           VerifyField<int32_t>(verifier, VT_AXIS, 4) &&
           verifier.EndTable();
  }
};",1,<empty>,,6550,740,CPPASTProblemDeclaration,,<empty>
315865,UNKNOWN,-1,,"struct FloorDivOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FloorDivOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,6601,743,CPPASTProblemDeclaration,,<empty>
315918,UNKNOWN,-1,,"struct SquareOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SquareOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,6630,746,CPPASTProblemDeclaration,,<empty>
315971,UNKNOWN,-1,,"struct ZerosLikeOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ZerosLikeOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,6659,749,CPPASTProblemDeclaration,,<empty>
316024,UNKNOWN,-1,,"struct FillOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FillOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,6688,752,CPPASTProblemDeclaration,,<empty>
316077,UNKNOWN,-1,,"struct FloorModOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FloorModOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,6717,755,CPPASTProblemDeclaration,,<empty>
316130,UNKNOWN,-1,,"struct RangeOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RangeOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,6746,758,CPPASTProblemDeclaration,,<empty>
316183,UNKNOWN,-1,,"struct LeakyReluOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LeakyReluOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ALPHA = 4
  };
  float alpha() const {
    return GetField<float>(VT_ALPHA, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_ALPHA, 4) &&
           verifier.EndTable();
  }
};",1,<empty>,,6775,761,CPPASTProblemDeclaration,,<empty>
316256,UNKNOWN,-1,,"struct SquaredDifferenceOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SquaredDifferenceOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,6816,764,CPPASTProblemDeclaration,,<empty>
316309,UNKNOWN,-1,,"struct MirrorPadOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MirrorPadOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MODE = 4
  };
  opencv_tflite::MirrorPadMode mode() const {
    return static_cast<opencv_tflite::MirrorPadMode>(GetField<int8_t>(VT_MODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_MODE, 1) &&
           verifier.EndTable();
  }
};",1,<empty>,,6845,767,CPPASTProblemDeclaration,,<empty>
316329,UNKNOWN,1,,int8_t,68,<empty>,,6865,1,CPPASTTypeId,,<empty>
316388,UNKNOWN,-1,,"struct UniqueOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UniqueOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_IDX_OUT_TYPE = 4
  };
  opencv_tflite::TensorType idx_out_type() const {
    return static_cast<opencv_tflite::TensorType>(GetField<int8_t>(VT_IDX_OUT_TYPE, 2));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_IDX_OUT_TYPE, 1) &&
           verifier.EndTable();
  }
};",1,<empty>,,6886,770,CPPASTProblemDeclaration,,<empty>
316408,UNKNOWN,1,,int8_t,73,<empty>,,6906,1,CPPASTTypeId,,<empty>
316467,UNKNOWN,-1,,"struct ReverseV2Options FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ReverseV2OptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,6927,773,CPPASTProblemDeclaration,,<empty>
316520,UNKNOWN,-1,,"struct AddNOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AddNOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,6956,776,CPPASTProblemDeclaration,,<empty>
316573,UNKNOWN,-1,,"struct GatherNdOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GatherNdOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,6985,779,CPPASTProblemDeclaration,,<empty>
316626,UNKNOWN,-1,,"struct WhereOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef WhereOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,7014,782,CPPASTProblemDeclaration,,<empty>
316679,UNKNOWN,-1,,"struct ReverseSequenceOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ReverseSequenceOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SEQ_DIM = 4,
    VT_BATCH_DIM = 6
  };
  int32_t seq_dim() const {
    return GetField<int32_t>(VT_SEQ_DIM, 0);
  }
  int32_t batch_dim() const {
    return GetField<int32_t>(VT_BATCH_DIM, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_SEQ_DIM, 4) &&
           VerifyField<int32_t>(verifier, VT_BATCH_DIM, 4) &&
           verifier.EndTable();
  }
};",1,<empty>,,7043,785,CPPASTProblemDeclaration,,<empty>
316780,UNKNOWN,-1,,"struct MatrixDiagOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MatrixDiagOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,7094,788,CPPASTProblemDeclaration,,<empty>
316833,UNKNOWN,-1,,"struct QuantizeOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef QuantizeOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,7123,791,CPPASTProblemDeclaration,,<empty>
316886,UNKNOWN,-1,,"struct MatrixSetDiagOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MatrixSetDiagOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,7152,794,CPPASTProblemDeclaration,,<empty>
316939,UNKNOWN,-1,,"struct IfOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef IfOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_THEN_SUBGRAPH_INDEX = 4,
    VT_ELSE_SUBGRAPH_INDEX = 6
  };
  int32_t then_subgraph_index() const {
    return GetField<int32_t>(VT_THEN_SUBGRAPH_INDEX, 0);
  }
  int32_t else_subgraph_index() const {
    return GetField<int32_t>(VT_ELSE_SUBGRAPH_INDEX, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_THEN_SUBGRAPH_INDEX, 4) &&
           VerifyField<int32_t>(verifier, VT_ELSE_SUBGRAPH_INDEX, 4) &&
           verifier.EndTable();
  }
};",1,<empty>,,7181,797,CPPASTProblemDeclaration,,<empty>
317040,UNKNOWN,-1,,"struct CallOnceOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CallOnceOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INIT_SUBGRAPH_INDEX = 4
  };
  int32_t init_subgraph_index() const {
    return GetField<int32_t>(VT_INIT_SUBGRAPH_INDEX, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_INIT_SUBGRAPH_INDEX, 4) &&
           verifier.EndTable();
  }
};",1,<empty>,,7232,800,CPPASTProblemDeclaration,,<empty>
317117,UNKNOWN,-1,,"struct WhileOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef WhileOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_COND_SUBGRAPH_INDEX = 4,
    VT_BODY_SUBGRAPH_INDEX = 6
  };
  int32_t cond_subgraph_index() const {
    return GetField<int32_t>(VT_COND_SUBGRAPH_INDEX, 0);
  }
  int32_t body_subgraph_index() const {
    return GetField<int32_t>(VT_BODY_SUBGRAPH_INDEX, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_COND_SUBGRAPH_INDEX, 4) &&
           VerifyField<int32_t>(verifier, VT_BODY_SUBGRAPH_INDEX, 4) &&
           verifier.EndTable();
  }
};",1,<empty>,,7273,803,CPPASTProblemDeclaration,,<empty>
317218,UNKNOWN,-1,,"struct NonMaxSuppressionV4Options FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef NonMaxSuppressionV4OptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,7324,806,CPPASTProblemDeclaration,,<empty>
317271,UNKNOWN,-1,,"struct NonMaxSuppressionV5Options FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef NonMaxSuppressionV5OptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,7353,809,CPPASTProblemDeclaration,,<empty>
317324,UNKNOWN,-1,,"struct ScatterNdOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ScatterNdOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,7382,812,CPPASTProblemDeclaration,,<empty>
317377,UNKNOWN,-1,,"struct SelectV2Options FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SelectV2OptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,7411,815,CPPASTProblemDeclaration,,<empty>
317430,UNKNOWN,-1,,"struct DensifyOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DensifyOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,7440,818,CPPASTProblemDeclaration,,<empty>
317483,UNKNOWN,-1,,"struct SegmentSumOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SegmentSumOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,7469,821,CPPASTProblemDeclaration,,<empty>
317536,UNKNOWN,-1,,"struct BatchMatMulOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BatchMatMulOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ADJ_X = 4,
    VT_ADJ_Y = 6,
    VT_ASYMMETRIC_QUANTIZE_INPUTS = 8
  };
  bool adj_x() const {
    return GetField<uint8_t>(VT_ADJ_X, 0) != 0;
  }
  bool adj_y() const {
    return GetField<uint8_t>(VT_ADJ_Y, 0) != 0;
  }
  bool asymmetric_quantize_inputs() const {
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_ADJ_X, 1) &&
           VerifyField<uint8_t>(verifier, VT_ADJ_Y, 1) &&
           VerifyField<uint8_t>(verifier, VT_ASYMMETRIC_QUANTIZE_INPUTS, 1) &&
           verifier.EndTable();
  }
};",1,<empty>,,7498,824,CPPASTProblemDeclaration,,<empty>
317556,UNKNOWN,1,,uint8_t,72,<empty>,,7528,1,CPPASTTypeId,,<empty>
317576,UNKNOWN,1,,uint8_t,72,<empty>,,7531,1,CPPASTTypeId,,<empty>
317596,UNKNOWN,1,,uint8_t,93,<empty>,,7534,1,CPPASTTypeId,,<empty>
317667,UNKNOWN,-1,,"struct CumsumOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CumsumOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_EXCLUSIVE = 4,
    VT_REVERSE = 6
  };
  bool exclusive() const {
    return GetField<uint8_t>(VT_EXCLUSIVE, 0) != 0;
  }
  bool reverse() const {
    return GetField<uint8_t>(VT_REVERSE, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_EXCLUSIVE, 1) &&
           VerifyField<uint8_t>(verifier, VT_REVERSE, 1) &&
           verifier.EndTable();
  }
};",1,<empty>,,7559,827,CPPASTProblemDeclaration,,<empty>
317687,UNKNOWN,1,,uint8_t,71,<empty>,,7584,1,CPPASTTypeId,,<empty>
317707,UNKNOWN,1,,uint8_t,69,<empty>,,7587,1,CPPASTTypeId,,<empty>
317772,UNKNOWN,-1,,"struct BroadcastToOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BroadcastToOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,7610,830,CPPASTProblemDeclaration,,<empty>
317825,UNKNOWN,-1,,"struct Rfft2dOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Rfft2dOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,7639,833,CPPASTProblemDeclaration,,<empty>
317878,UNKNOWN,-1,,"struct HashtableOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef HashtableOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TABLE_ID = 4,
    VT_KEY_DTYPE = 6,
    VT_VALUE_DTYPE = 8
  };
  int32_t table_id() const {
    return GetField<int32_t>(VT_TABLE_ID, 0);
  }
  opencv_tflite::TensorType key_dtype() const {
    return static_cast<opencv_tflite::TensorType>(GetField<int8_t>(VT_KEY_DTYPE, 0));
  }
  opencv_tflite::TensorType value_dtype() const {
    return static_cast<opencv_tflite::TensorType>(GetField<int8_t>(VT_VALUE_DTYPE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_TABLE_ID, 4) &&
           VerifyField<int8_t>(verifier, VT_KEY_DTYPE, 1) &&
           VerifyField<int8_t>(verifier, VT_VALUE_DTYPE, 1) &&
           verifier.EndTable();
  }
};",1,<empty>,,7668,836,CPPASTProblemDeclaration,,<empty>
317916,UNKNOWN,1,,int8_t,73,<empty>,,7701,1,CPPASTTypeId,,<empty>
317936,UNKNOWN,1,,int8_t,75,<empty>,,7704,1,CPPASTTypeId,,<empty>
318007,UNKNOWN,-1,,"struct HashtableFindOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef HashtableFindOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,7729,839,CPPASTProblemDeclaration,,<empty>
318060,UNKNOWN,-1,,"struct HashtableImportOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef HashtableImportOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,7758,842,CPPASTProblemDeclaration,,<empty>
318113,UNKNOWN,-1,,"struct HashtableSizeOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef HashtableSizeOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,7787,845,CPPASTProblemDeclaration,,<empty>
318166,UNKNOWN,-1,,"struct VarHandleOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef VarHandleOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CONTAINER = 4,
    VT_SHARED_NAME = 6
  };
  const ::flatbuffers::String *container() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CONTAINER);
  }
  const ::flatbuffers::String *shared_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SHARED_NAME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CONTAINER) &&
           verifier.VerifyString(container()) &&
           VerifyOffset(verifier, VT_SHARED_NAME) &&
           verifier.VerifyString(shared_name()) &&
           verifier.EndTable();
  }
};",1,<empty>,,7816,848,CPPASTProblemDeclaration,,<empty>
318294,UNKNOWN,-1,,"struct ReadVariableOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ReadVariableOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,7881,852,CPPASTProblemDeclaration,,<empty>
318347,UNKNOWN,-1,,"struct AssignVariableOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AssignVariableOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,7910,855,CPPASTProblemDeclaration,,<empty>
318400,UNKNOWN,-1,,"struct RandomOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RandomOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SEED = 4,
    VT_SEED2 = 6
  };
  int64_t seed() const {
    return GetField<int64_t>(VT_SEED, 0);
  }
  int64_t seed2() const {
    return GetField<int64_t>(VT_SEED2, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_SEED, 8) &&
           VerifyField<int64_t>(verifier, VT_SEED2, 8) &&
           verifier.EndTable();
  }
};",1,<empty>,,7939,858,CPPASTProblemDeclaration,,<empty>
318501,UNKNOWN,-1,,"struct BucketizeOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BucketizeOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BOUNDARIES = 4
  };
  const ::flatbuffers::Vector<float> *boundaries() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_BOUNDARIES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_BOUNDARIES) &&
           verifier.VerifyVector(boundaries()) &&
           verifier.EndTable();
  }
};",1,<empty>,,7990,861,CPPASTProblemDeclaration,,<empty>
318598,UNKNOWN,-1,,"struct GeluOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GeluOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_APPROXIMATE = 4
  };
  bool approximate() const {
    return GetField<uint8_t>(VT_APPROXIMATE, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_APPROXIMATE, 1) &&
           verifier.EndTable();
  }
};",1,<empty>,,8041,865,CPPASTProblemDeclaration,,<empty>
318618,UNKNOWN,1,,uint8_t,71,<empty>,,8061,1,CPPASTTypeId,,<empty>
318677,UNKNOWN,-1,,"struct DynamicUpdateSliceOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DynamicUpdateSliceOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,8082,868,CPPASTProblemDeclaration,,<empty>
318730,UNKNOWN,-1,,"struct UnsortedSegmentProdOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UnsortedSegmentProdOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,8111,871,CPPASTProblemDeclaration,,<empty>
318783,UNKNOWN,-1,,"struct UnsortedSegmentMaxOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UnsortedSegmentMaxOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,8140,874,CPPASTProblemDeclaration,,<empty>
318836,UNKNOWN,-1,,"struct UnsortedSegmentSumOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UnsortedSegmentSumOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,8169,877,CPPASTProblemDeclaration,,<empty>
318889,UNKNOWN,-1,,"struct ATan2Options FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ATan2OptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,8198,880,CPPASTProblemDeclaration,,<empty>
318942,UNKNOWN,-1,,"struct UnsortedSegmentMinOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UnsortedSegmentMinOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,8227,883,CPPASTProblemDeclaration,,<empty>
318995,UNKNOWN,-1,,"struct SignOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SignOptionsBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};",1,<empty>,,8256,886,CPPASTProblemDeclaration,,<empty>
319048,UNKNOWN,-1,,"struct OperatorCode FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OperatorCodeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DEPRECATED_BUILTIN_CODE = 4,
    VT_CUSTOM_CODE = 6,
    VT_VERSION = 8,
    VT_BUILTIN_CODE = 10
  };
  int8_t deprecated_builtin_code() const {
    return GetField<int8_t>(VT_DEPRECATED_BUILTIN_CODE, 0);
  }
  const ::flatbuffers::String *custom_code() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CUSTOM_CODE);
  }
  int32_t version() const {
    return GetField<int32_t>(VT_VERSION, 1);
  }
  opencv_tflite::BuiltinOperator builtin_code() const {
    return static_cast<opencv_tflite::BuiltinOperator>(GetField<int32_t>(VT_BUILTIN_CODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_DEPRECATED_BUILTIN_CODE, 1) &&
           VerifyOffset(verifier, VT_CUSTOM_CODE) &&
           ...",1,<empty>,,8285,889,CPPASTProblemDeclaration,,<empty>
319117,UNKNOWN,1,,int32_t,73,<empty>,,8330,1,CPPASTTypeId,,<empty>
319224,UNKNOWN,-1,,"struct Operator FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OperatorBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OPCODE_INDEX = 4,
    VT_INPUTS = 6,
    VT_OUTPUTS = 8,
    VT_BUILTIN_OPTIONS_TYPE = 10,
    VT_BUILTIN_OPTIONS = 12,
    VT_CUSTOM_OPTIONS = 14,
    VT_CUSTOM_OPTIONS_FORMAT = 16,
    VT_MUTATING_VARIABLE_INPUTS = 18,
    VT_INTERMEDIATES = 20
  };
  uint32_t opcode_index() const {
    return GetField<uint32_t>(VT_OPCODE_INDEX, 0);
  }
  const ::flatbuffers::Vector<int32_t> *inputs() const {
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_INPUTS);
  }
  const ::flatbuffers::Vector<int32_t> *outputs() const {
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
  }
  opencv_tflite::BuiltinOptions builtin_options_type() const {
    return static_cast<opencv_tflite::BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
  }
  const void *builtin_options() ...",1,<empty>,,8372,893,CPPASTProblemDeclaration,,<empty>
320026,UNKNOWN,1,,uint8_t,77,<empty>,,9309,1,CPPASTTypeId,,<empty>
320072,UNKNOWN,1,,int8_t,77,<empty>,,9318,1,CPPASTTypeId,,<empty>
320304,UNKNOWN,-1,,"struct SubGraph FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SubGraphBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TENSORS = 4,
    VT_INPUTS = 6,
    VT_OUTPUTS = 8,
    VT_OPERATORS = 10,
    VT_NAME = 12
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<opencv_tflite::Tensor>> *tensors() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<opencv_tflite::Tensor>> *>(VT_TENSORS);
  }
  const ::flatbuffers::Vector<int32_t> *inputs() const {
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_INPUTS);
  }
  const ::flatbuffers::Vector<int32_t> *outputs() const {
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<opencv_tflite::Operator>> *operators() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<opencv_tflite::Operator>> *>(VT_OPERATORS);
  }
  const ::flatb...",1,<empty>,,9390,1020,CPPASTProblemDeclaration,,<empty>
320552,UNKNOWN,-1,,"struct Buffer FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BufferBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4
  };
  const ::flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};",1,<empty>,,9499,1024,CPPASTProblemDeclaration,,<empty>
320665,UNKNOWN,-1,,"struct Metadata FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MetadataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_BUFFER = 6
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  uint32_t buffer() const {
    return GetField<uint32_t>(VT_BUFFER, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint32_t>(verifier, VT_BUFFER, 4) &&
           verifier.EndTable();
  }
};",1,<empty>,,9551,1028,CPPASTProblemDeclaration,,<empty>
320787,UNKNOWN,-1,,"struct TensorMap FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TensorMapBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_TENSOR_INDEX = 6
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  uint32_t tensor_index() const {
    return GetField<uint32_t>(VT_TENSOR_INDEX, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint32_t>(verifier, VT_TENSOR_INDEX, 4) &&
           verifier.EndTable();
  }
};",1,<empty>,,9614,1032,CPPASTProblemDeclaration,,<empty>
320909,UNKNOWN,-1,,"struct SignatureDef FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SignatureDefBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INPUTS = 4,
    VT_OUTPUTS = 6,
    VT_SIGNATURE_KEY = 8,
    VT_SUBGRAPH_INDEX = 12
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<opencv_tflite::TensorMap>> *inputs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<opencv_tflite::TensorMap>> *>(VT_INPUTS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<opencv_tflite::TensorMap>> *outputs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<opencv_tflite::TensorMap>> *>(VT_OUTPUTS);
  }
  const ::flatbuffers::String *signature_key() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SIGNATURE_KEY);
  }
  uint32_t subgraph_index() const {
    return GetField<uint32_t>(VT_SUBGRAPH_INDEX, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
   ...",1,<empty>,,9677,1036,CPPASTProblemDeclaration,,<empty>
321113,UNKNOWN,-1,,"struct Model FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ModelBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERSION = 4,
    VT_OPERATOR_CODES = 6,
    VT_SUBGRAPHS = 8,
    VT_DESCRIPTION = 10,
    VT_BUFFERS = 12,
    VT_METADATA_BUFFER = 14,
    VT_METADATA = 16,
    VT_SIGNATURE_DEFS = 18
  };
  uint32_t version() const {
    return GetField<uint32_t>(VT_VERSION, 0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<opencv_tflite::OperatorCode>> *operator_codes() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<opencv_tflite::OperatorCode>> *>(VT_OPERATOR_CODES);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<opencv_tflite::SubGraph>> *subgraphs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<opencv_tflite::SubGraph>> *>(VT_SUBGRAPHS);
  }
  const ::flatbuffers::String *description() const {
    return GetPointer<const ::flatbuffers...",1,<empty>,,9770,1040,CPPASTProblemDeclaration,,<empty>
321495,UNKNOWN,1,,const opencv_tflite::CustomQuantization *,35,<empty>,,9928,1,CPPASTTypeId,,<empty>
321597,UNKNOWN,1,,const opencv_tflite::Int32Vector *,35,<empty>,,9953,1,CPPASTTypeId,,<empty>
321612,UNKNOWN,1,,const opencv_tflite::Uint16Vector *,35,<empty>,,9957,1,CPPASTTypeId,,<empty>
321627,UNKNOWN,1,,const opencv_tflite::Uint8Vector *,35,<empty>,,9961,1,CPPASTTypeId,,<empty>
321729,UNKNOWN,1,,const opencv_tflite::Conv2DOptions *,35,<empty>,,9986,1,CPPASTTypeId,,<empty>
321744,UNKNOWN,1,,const opencv_tflite::DepthwiseConv2DOptions *,35,<empty>,,9990,1,CPPASTTypeId,,<empty>
321759,UNKNOWN,1,,const opencv_tflite::ConcatEmbeddingsOptions *,35,<empty>,,9994,1,CPPASTTypeId,,<empty>
321774,UNKNOWN,1,,const opencv_tflite::LSHProjectionOptions *,35,<empty>,,9998,1,CPPASTTypeId,,<empty>
321789,UNKNOWN,1,,const opencv_tflite::Pool2DOptions *,35,<empty>,,10002,1,CPPASTTypeId,,<empty>
321804,UNKNOWN,1,,const opencv_tflite::SVDFOptions *,35,<empty>,,10006,1,CPPASTTypeId,,<empty>
321819,UNKNOWN,1,,const opencv_tflite::RNNOptions *,35,<empty>,,10010,1,CPPASTTypeId,,<empty>
321834,UNKNOWN,1,,const opencv_tflite::FullyConnectedOptions *,35,<empty>,,10014,1,CPPASTTypeId,,<empty>
321849,UNKNOWN,1,,const opencv_tflite::SoftmaxOptions *,35,<empty>,,10018,1,CPPASTTypeId,,<empty>
321864,UNKNOWN,1,,const opencv_tflite::ConcatenationOptions *,35,<empty>,,10022,1,CPPASTTypeId,,<empty>
321879,UNKNOWN,1,,const opencv_tflite::AddOptions *,35,<empty>,,10026,1,CPPASTTypeId,,<empty>
321894,UNKNOWN,1,,const opencv_tflite::L2NormOptions *,35,<empty>,,10030,1,CPPASTTypeId,,<empty>
321909,UNKNOWN,1,,const opencv_tflite::LocalResponseNormalizationOptions *,35,<empty>,,10034,1,CPPASTTypeId,,<empty>
321924,UNKNOWN,1,,const opencv_tflite::LSTMOptions *,35,<empty>,,10038,1,CPPASTTypeId,,<empty>
321939,UNKNOWN,1,,const opencv_tflite::ResizeBilinearOptions *,35,<empty>,,10042,1,CPPASTTypeId,,<empty>
321954,UNKNOWN,1,,const opencv_tflite::CallOptions *,35,<empty>,,10046,1,CPPASTTypeId,,<empty>
321969,UNKNOWN,1,,const opencv_tflite::ReshapeOptions *,35,<empty>,,10050,1,CPPASTTypeId,,<empty>
321984,UNKNOWN,1,,const opencv_tflite::SkipGramOptions *,35,<empty>,,10054,1,CPPASTTypeId,,<empty>
321999,UNKNOWN,1,,const opencv_tflite::SpaceToDepthOptions *,35,<empty>,,10058,1,CPPASTTypeId,,<empty>
322014,UNKNOWN,1,,const opencv_tflite::EmbeddingLookupSparseOptions *,35,<empty>,,10062,1,CPPASTTypeId,,<empty>
322029,UNKNOWN,1,,const opencv_tflite::MulOptions *,35,<empty>,,10066,1,CPPASTTypeId,,<empty>
322044,UNKNOWN,1,,const opencv_tflite::PadOptions *,35,<empty>,,10070,1,CPPASTTypeId,,<empty>
322059,UNKNOWN,1,,const opencv_tflite::GatherOptions *,35,<empty>,,10074,1,CPPASTTypeId,,<empty>
322074,UNKNOWN,1,,const opencv_tflite::BatchToSpaceNDOptions *,35,<empty>,,10078,1,CPPASTTypeId,,<empty>
322089,UNKNOWN,1,,const opencv_tflite::SpaceToBatchNDOptions *,35,<empty>,,10082,1,CPPASTTypeId,,<empty>
322104,UNKNOWN,1,,const opencv_tflite::TransposeOptions *,35,<empty>,,10086,1,CPPASTTypeId,,<empty>
322119,UNKNOWN,1,,const opencv_tflite::ReducerOptions *,35,<empty>,,10090,1,CPPASTTypeId,,<empty>
322134,UNKNOWN,1,,const opencv_tflite::SubOptions *,35,<empty>,,10094,1,CPPASTTypeId,,<empty>
322149,UNKNOWN,1,,const opencv_tflite::DivOptions *,35,<empty>,,10098,1,CPPASTTypeId,,<empty>
322164,UNKNOWN,1,,const opencv_tflite::SqueezeOptions *,35,<empty>,,10102,1,CPPASTTypeId,,<empty>
322179,UNKNOWN,1,,const opencv_tflite::SequenceRNNOptions *,35,<empty>,,10106,1,CPPASTTypeId,,<empty>
322194,UNKNOWN,1,,const opencv_tflite::StridedSliceOptions *,35,<empty>,,10110,1,CPPASTTypeId,,<empty>
322209,UNKNOWN,1,,const opencv_tflite::ExpOptions *,35,<empty>,,10114,1,CPPASTTypeId,,<empty>
322224,UNKNOWN,1,,const opencv_tflite::TopKV2Options *,35,<empty>,,10118,1,CPPASTTypeId,,<empty>
322239,UNKNOWN,1,,const opencv_tflite::SplitOptions *,35,<empty>,,10122,1,CPPASTTypeId,,<empty>
322254,UNKNOWN,1,,const opencv_tflite::LogSoftmaxOptions *,35,<empty>,,10126,1,CPPASTTypeId,,<empty>
322269,UNKNOWN,1,,const opencv_tflite::CastOptions *,35,<empty>,,10130,1,CPPASTTypeId,,<empty>
322284,UNKNOWN,1,,const opencv_tflite::DequantizeOptions *,35,<empty>,,10134,1,CPPASTTypeId,,<empty>
322299,UNKNOWN,1,,const opencv_tflite::MaximumMinimumOptions *,35,<empty>,,10138,1,CPPASTTypeId,,<empty>
322314,UNKNOWN,1,,const opencv_tflite::ArgMaxOptions *,35,<empty>,,10142,1,CPPASTTypeId,,<empty>
322329,UNKNOWN,1,,const opencv_tflite::LessOptions *,35,<empty>,,10146,1,CPPASTTypeId,,<empty>
322344,UNKNOWN,1,,const opencv_tflite::NegOptions *,35,<empty>,,10150,1,CPPASTTypeId,,<empty>
322359,UNKNOWN,1,,const opencv_tflite::PadV2Options *,35,<empty>,,10154,1,CPPASTTypeId,,<empty>
322374,UNKNOWN,1,,const opencv_tflite::GreaterOptions *,35,<empty>,,10158,1,CPPASTTypeId,,<empty>
322389,UNKNOWN,1,,const opencv_tflite::GreaterEqualOptions *,35,<empty>,,10162,1,CPPASTTypeId,,<empty>
322404,UNKNOWN,1,,const opencv_tflite::LessEqualOptions *,35,<empty>,,10166,1,CPPASTTypeId,,<empty>
322419,UNKNOWN,1,,const opencv_tflite::SelectOptions *,35,<empty>,,10170,1,CPPASTTypeId,,<empty>
322434,UNKNOWN,1,,const opencv_tflite::SliceOptions *,35,<empty>,,10174,1,CPPASTTypeId,,<empty>
322449,UNKNOWN,1,,const opencv_tflite::TransposeConvOptions *,35,<empty>,,10178,1,CPPASTTypeId,,<empty>
322464,UNKNOWN,1,,const opencv_tflite::SparseToDenseOptions *,35,<empty>,,10182,1,CPPASTTypeId,,<empty>
322479,UNKNOWN,1,,const opencv_tflite::TileOptions *,35,<empty>,,10186,1,CPPASTTypeId,,<empty>
322494,UNKNOWN,1,,const opencv_tflite::ExpandDimsOptions *,35,<empty>,,10190,1,CPPASTTypeId,,<empty>
322509,UNKNOWN,1,,const opencv_tflite::EqualOptions *,35,<empty>,,10194,1,CPPASTTypeId,,<empty>
322524,UNKNOWN,1,,const opencv_tflite::NotEqualOptions *,35,<empty>,,10198,1,CPPASTTypeId,,<empty>
322539,UNKNOWN,1,,const opencv_tflite::ShapeOptions *,35,<empty>,,10202,1,CPPASTTypeId,,<empty>
322554,UNKNOWN,1,,const opencv_tflite::PowOptions *,35,<empty>,,10206,1,CPPASTTypeId,,<empty>
322569,UNKNOWN,1,,const opencv_tflite::ArgMinOptions *,35,<empty>,,10210,1,CPPASTTypeId,,<empty>
322584,UNKNOWN,1,,const opencv_tflite::FakeQuantOptions *,35,<empty>,,10214,1,CPPASTTypeId,,<empty>
322599,UNKNOWN,1,,const opencv_tflite::PackOptions *,35,<empty>,,10218,1,CPPASTTypeId,,<empty>
322614,UNKNOWN,1,,const opencv_tflite::LogicalOrOptions *,35,<empty>,,10222,1,CPPASTTypeId,,<empty>
322629,UNKNOWN,1,,const opencv_tflite::OneHotOptions *,35,<empty>,,10226,1,CPPASTTypeId,,<empty>
322644,UNKNOWN,1,,const opencv_tflite::LogicalAndOptions *,35,<empty>,,10230,1,CPPASTTypeId,,<empty>
322659,UNKNOWN,1,,const opencv_tflite::LogicalNotOptions *,35,<empty>,,10234,1,CPPASTTypeId,,<empty>
322674,UNKNOWN,1,,const opencv_tflite::UnpackOptions *,35,<empty>,,10238,1,CPPASTTypeId,,<empty>
322689,UNKNOWN,1,,const opencv_tflite::FloorDivOptions *,35,<empty>,,10242,1,CPPASTTypeId,,<empty>
322704,UNKNOWN,1,,const opencv_tflite::SquareOptions *,35,<empty>,,10246,1,CPPASTTypeId,,<empty>
322719,UNKNOWN,1,,const opencv_tflite::ZerosLikeOptions *,35,<empty>,,10250,1,CPPASTTypeId,,<empty>
322734,UNKNOWN,1,,const opencv_tflite::FillOptions *,35,<empty>,,10254,1,CPPASTTypeId,,<empty>
322749,UNKNOWN,1,,const opencv_tflite::BidirectionalSequenceLSTMOptions *,35,<empty>,,10258,1,CPPASTTypeId,,<empty>
322764,UNKNOWN,1,,const opencv_tflite::BidirectionalSequenceRNNOptions *,35,<empty>,,10262,1,CPPASTTypeId,,<empty>
322779,UNKNOWN,1,,const opencv_tflite::UnidirectionalSequenceLSTMOptions *,35,<empty>,,10266,1,CPPASTTypeId,,<empty>
322794,UNKNOWN,1,,const opencv_tflite::FloorModOptions *,35,<empty>,,10270,1,CPPASTTypeId,,<empty>
322809,UNKNOWN,1,,const opencv_tflite::RangeOptions *,35,<empty>,,10274,1,CPPASTTypeId,,<empty>
322824,UNKNOWN,1,,const opencv_tflite::ResizeNearestNeighborOptions *,35,<empty>,,10278,1,CPPASTTypeId,,<empty>
322839,UNKNOWN,1,,const opencv_tflite::LeakyReluOptions *,35,<empty>,,10282,1,CPPASTTypeId,,<empty>
322854,UNKNOWN,1,,const opencv_tflite::SquaredDifferenceOptions *,35,<empty>,,10286,1,CPPASTTypeId,,<empty>
322869,UNKNOWN,1,,const opencv_tflite::MirrorPadOptions *,35,<empty>,,10290,1,CPPASTTypeId,,<empty>
322884,UNKNOWN,1,,const opencv_tflite::AbsOptions *,35,<empty>,,10294,1,CPPASTTypeId,,<empty>
322899,UNKNOWN,1,,const opencv_tflite::SplitVOptions *,35,<empty>,,10298,1,CPPASTTypeId,,<empty>
322914,UNKNOWN,1,,const opencv_tflite::UniqueOptions *,35,<empty>,,10302,1,CPPASTTypeId,,<empty>
322929,UNKNOWN,1,,const opencv_tflite::ReverseV2Options *,35,<empty>,,10306,1,CPPASTTypeId,,<empty>
322944,UNKNOWN,1,,const opencv_tflite::AddNOptions *,35,<empty>,,10310,1,CPPASTTypeId,,<empty>
322959,UNKNOWN,1,,const opencv_tflite::GatherNdOptions *,35,<empty>,,10314,1,CPPASTTypeId,,<empty>
322974,UNKNOWN,1,,const opencv_tflite::CosOptions *,35,<empty>,,10318,1,CPPASTTypeId,,<empty>
322989,UNKNOWN,1,,const opencv_tflite::WhereOptions *,35,<empty>,,10322,1,CPPASTTypeId,,<empty>
323004,UNKNOWN,1,,const opencv_tflite::RankOptions *,35,<empty>,,10326,1,CPPASTTypeId,,<empty>
323019,UNKNOWN,1,,const opencv_tflite::ReverseSequenceOptions *,35,<empty>,,10330,1,CPPASTTypeId,,<empty>
323034,UNKNOWN,1,,const opencv_tflite::MatrixDiagOptions *,35,<empty>,,10334,1,CPPASTTypeId,,<empty>
323049,UNKNOWN,1,,const opencv_tflite::QuantizeOptions *,35,<empty>,,10338,1,CPPASTTypeId,,<empty>
323064,UNKNOWN,1,,const opencv_tflite::MatrixSetDiagOptions *,35,<empty>,,10342,1,CPPASTTypeId,,<empty>
323079,UNKNOWN,1,,const opencv_tflite::HardSwishOptions *,35,<empty>,,10346,1,CPPASTTypeId,,<empty>
323094,UNKNOWN,1,,const opencv_tflite::IfOptions *,35,<empty>,,10350,1,CPPASTTypeId,,<empty>
323109,UNKNOWN,1,,const opencv_tflite::WhileOptions *,35,<empty>,,10354,1,CPPASTTypeId,,<empty>
323124,UNKNOWN,1,,const opencv_tflite::DepthToSpaceOptions *,35,<empty>,,10358,1,CPPASTTypeId,,<empty>
323139,UNKNOWN,1,,const opencv_tflite::NonMaxSuppressionV4Options *,35,<empty>,,10362,1,CPPASTTypeId,,<empty>
323154,UNKNOWN,1,,const opencv_tflite::NonMaxSuppressionV5Options *,35,<empty>,,10366,1,CPPASTTypeId,,<empty>
323169,UNKNOWN,1,,const opencv_tflite::ScatterNdOptions *,35,<empty>,,10370,1,CPPASTTypeId,,<empty>
323184,UNKNOWN,1,,const opencv_tflite::SelectV2Options *,35,<empty>,,10374,1,CPPASTTypeId,,<empty>
323199,UNKNOWN,1,,const opencv_tflite::DensifyOptions *,35,<empty>,,10378,1,CPPASTTypeId,,<empty>
323214,UNKNOWN,1,,const opencv_tflite::SegmentSumOptions *,35,<empty>,,10382,1,CPPASTTypeId,,<empty>
323229,UNKNOWN,1,,const opencv_tflite::BatchMatMulOptions *,35,<empty>,,10386,1,CPPASTTypeId,,<empty>
323244,UNKNOWN,1,,const opencv_tflite::CumsumOptions *,35,<empty>,,10390,1,CPPASTTypeId,,<empty>
323259,UNKNOWN,1,,const opencv_tflite::CallOnceOptions *,35,<empty>,,10394,1,CPPASTTypeId,,<empty>
323274,UNKNOWN,1,,const opencv_tflite::BroadcastToOptions *,35,<empty>,,10398,1,CPPASTTypeId,,<empty>
323289,UNKNOWN,1,,const opencv_tflite::Rfft2dOptions *,35,<empty>,,10402,1,CPPASTTypeId,,<empty>
323304,UNKNOWN,1,,const opencv_tflite::Conv3DOptions *,35,<empty>,,10406,1,CPPASTTypeId,,<empty>
323319,UNKNOWN,1,,const opencv_tflite::HashtableOptions *,35,<empty>,,10410,1,CPPASTTypeId,,<empty>
323334,UNKNOWN,1,,const opencv_tflite::HashtableFindOptions *,35,<empty>,,10414,1,CPPASTTypeId,,<empty>
323349,UNKNOWN,1,,const opencv_tflite::HashtableImportOptions *,35,<empty>,,10418,1,CPPASTTypeId,,<empty>
323364,UNKNOWN,1,,const opencv_tflite::HashtableSizeOptions *,35,<empty>,,10422,1,CPPASTTypeId,,<empty>
323379,UNKNOWN,1,,const opencv_tflite::VarHandleOptions *,35,<empty>,,10426,1,CPPASTTypeId,,<empty>
323394,UNKNOWN,1,,const opencv_tflite::ReadVariableOptions *,35,<empty>,,10430,1,CPPASTTypeId,,<empty>
323409,UNKNOWN,1,,const opencv_tflite::AssignVariableOptions *,35,<empty>,,10434,1,CPPASTTypeId,,<empty>
323424,UNKNOWN,1,,const opencv_tflite::RandomOptions *,35,<empty>,,10438,1,CPPASTTypeId,,<empty>
323439,UNKNOWN,1,,const opencv_tflite::BucketizeOptions *,35,<empty>,,10442,1,CPPASTTypeId,,<empty>
323454,UNKNOWN,1,,const opencv_tflite::GeluOptions *,35,<empty>,,10446,1,CPPASTTypeId,,<empty>
323469,UNKNOWN,1,,const opencv_tflite::DynamicUpdateSliceOptions *,35,<empty>,,10450,1,CPPASTTypeId,,<empty>
323484,UNKNOWN,1,,const opencv_tflite::UnsortedSegmentProdOptions *,35,<empty>,,10454,1,CPPASTTypeId,,<empty>
323499,UNKNOWN,1,,const opencv_tflite::UnsortedSegmentMaxOptions *,35,<empty>,,10458,1,CPPASTTypeId,,<empty>
323514,UNKNOWN,1,,const opencv_tflite::UnsortedSegmentMinOptions *,35,<empty>,,10462,1,CPPASTTypeId,,<empty>
323529,UNKNOWN,1,,const opencv_tflite::UnsortedSegmentSumOptions *,35,<empty>,,10466,1,CPPASTTypeId,,<empty>
323544,UNKNOWN,1,,const opencv_tflite::ATan2Options *,35,<empty>,,10470,1,CPPASTTypeId,,<empty>
323559,UNKNOWN,1,,const opencv_tflite::SignOptions *,35,<empty>,,10474,1,CPPASTTypeId,,<empty>
343404,UNKNOWN,1,,int,34,<empty>,,780,1,CPPASTTypeId,,<empty>
343470,UNKNOWN,1,,Size,23,<empty>,,790,1,CPPASTTypeId,,<empty>
343531,UNKNOWN,1,,Size,11,<empty>,,795,1,CPPASTTypeId,,<empty>
343544,UNKNOWN,1,,Size,28,<empty>,,796,1,CPPASTTypeId,,<empty>
343553,UNKNOWN,1,,Size,11,<empty>,,797,1,CPPASTTypeId,,<empty>
343566,UNKNOWN,1,,Size,28,<empty>,,798,1,CPPASTTypeId,,<empty>
343575,UNKNOWN,1,,Size,12,<empty>,,799,1,CPPASTTypeId,,<empty>
343587,UNKNOWN,1,,Size,28,<empty>,,800,1,CPPASTTypeId,,<empty>
343596,UNKNOWN,1,,Size,12,<empty>,,801,1,CPPASTTypeId,,<empty>
343608,UNKNOWN,1,,Size,31,<empty>,,802,1,CPPASTTypeId,,<empty>
343617,UNKNOWN,1,,std::string,12,<empty>,,803,1,CPPASTTypeId,,<empty>
343629,UNKNOWN,1,,std::string,29,<empty>,,804,1,CPPASTTypeId,,<empty>
344126,UNKNOWN,-1,,"PERF_TEST_P_(Conv, conv)
{
    const ConvParam_t& params = get<0>(GetParam());
    Backend backendId = get<0>(get<1>(GetParam()));
    Target targetId = get<1>(get<1>(GetParam()));
    Net net = build_net(params, backendId, targetId);

    TEST_CYCLE()
    {
        Mat res = net.forward();
    }
    SANITY_CHECK_NOTHING();
}",1,<empty>,,912,20,CPPASTProblemDeclaration,,<empty>
344127,UNKNOWN,-1,,"PERF_TEST_P_(Conv_1x1, conv)
{
    const ConvParam_t& params = get<0>(GetParam());
    Backend backendId = get<0>(get<1>(GetParam()));
    Target targetId = get<1>(get<1>(GetParam()));
    Net net = build_net(params, backendId, targetId);

    TEST_CYCLE()
    {
        Mat res = net.forward();
    }
    SANITY_CHECK_NOTHING();
}",1,<empty>,,926,21,CPPASTProblemDeclaration,,<empty>
344128,UNKNOWN,-1,,"PERF_TEST_P_(Conv_3x3S1D1, conv)
{
    const ConvParam_t& params = get<0>(GetParam());
    Backend backendId = get<0>(get<1>(GetParam()));
    Target targetId = get<1>(get<1>(GetParam()));
    bool winograd = get<2>(GetParam());
    Net net = build_net(params, backendId, targetId,
        [=](Net& net)
        {
            net.enableWinograd(winograd);
        }
    );

    TEST_CYCLE()
    {
        Mat res = net.forward();
    }
    SANITY_CHECK_NOTHING();
}",1,<empty>,,940,22,CPPASTProblemDeclaration,,<empty>
344129,UNKNOWN,-1,,"PERF_TEST_P_(Conv_Depthwise, conv)
{
    const ConvParam_t& params = get<0>(GetParam());
    Backend backendId = get<0>(get<1>(GetParam()));
    Target targetId = get<1>(get<1>(GetParam()));
    Net net = build_net(params, backendId, targetId, std::function<void(Net&)>(),
        0/*flops_limit_debug_long*/, 0/*flops_limit_debug_verylong*/);

    TEST_CYCLE()
    {
        Mat res = net.forward();
    }
    SANITY_CHECK_NOTHING();
}",1,<empty>,,960,23,CPPASTProblemDeclaration,,<empty>
344140,UNKNOWN,-1,,"INSTANTIATE_TEST_CASE_P(/**/, Conv, Combine(
    conv_params.all(),
    dnnBackendsAndTargets(false, false)  // defined in ../test/test_common.hpp
));",1,<empty>,,976,26,CPPASTProblemDeclaration,,<empty>
344151,UNKNOWN,-1,,"INSTANTIATE_TEST_CASE_P(/**/, Conv_1x1, Combine(
    conv_1x1_params.all(),
    dnnBackendsAndTargets(false, false)  // defined in ../test/test_common.hpp
));",1,<empty>,,982,29,CPPASTProblemDeclaration,,<empty>
344162,UNKNOWN,-1,,"INSTANTIATE_TEST_CASE_P(/**/, Conv_3x3S1D1, Combine(
    conv_3x3S1D1_params.all(),
    dnnBackendsAndTargets(false, false),  // defined in ../test/test_common.hpp
    testing::Values(true, false)  // enable Winograd or not
));",1,<empty>,,988,32,CPPASTProblemDeclaration,,<empty>
344173,UNKNOWN,-1,,"INSTANTIATE_TEST_CASE_P(/**/, Conv_Depthwise, Combine(
    conv_depthwise_params.all(),
    dnnBackendsAndTargets(false, false)  // defined in ../test/test_common.hpp
));",1,<empty>,,995,35,CPPASTProblemDeclaration,,<empty>
344335,UNKNOWN,1,,int,16,<empty>,,47,1,CPPASTTypeId,,<empty>
344341,UNKNOWN,1,,int,40,<empty>,,47,1,CPPASTTypeId,,<empty>
344352,UNKNOWN,1,,int,56,<empty>,,48,1,CPPASTTypeId,,<empty>
344502,UNKNOWN,1,,std::string,12,<empty>,,62,1,CPPASTTypeId,,<empty>
344514,UNKNOWN,1,,std::string,29,<empty>,,63,1,CPPASTTypeId,,<empty>
344531,UNKNOWN,-1,,"PERF_TEST_P_(Conv1D, conv1d)
{
    int test_id = (int)get<0>(GetParam());
    ASSERT_GE(test_id, 0); ASSERT_LT(test_id, Conv1DParamID::CONV_LAST);
    const Conv1DParam_t& params = testConvolution1DConfigs[test_id];
    double declared_flops = params.declared_flops;

    DictValue kernel   = DictValue::arrayInt(&params.kernel, 1);
    DictValue stride   = DictValue::arrayInt(&params.stride, 1);
    DictValue pad      = DictValue::arrayInt(&params.pad[0], 2);
    DictValue dilation = DictValue::arrayInt(&params.dilation, 1);

    MatShape inputShape = MatShape(params.shapeIn.dims, params.shapeIn.dims + 3);
    int outChannels = params.outCN;
    int groups = params.groups;
    std::string padMode(params.padMode);

    bool hasBias = params.hasBias;
    Backend backendId = get<0>(get<1>(GetParam()));
    Target targetId = get<1>(get<1>(GetParam()));

    if (targetId != DNN_TARGET_CPU)
        throw SkipTestException(""Only CPU is supported"");

    int inChannels = inputShape[1];

    ...",1,<empty>,,72,8,CPPASTProblemDeclaration,,<empty>
344532,UNKNOWN,-1,,"INSTANTIATE_TEST_CASE_P(/**/, Conv1D, Combine(
        Conv1DParamID::all(),
        dnnBackendsAndTargets(false, false)  // defined in ../test/test_common.hpp
));",1,<empty>,,158,9,CPPASTProblemDeclaration,,<empty>
345165,UNKNOWN,1,,int,16,<empty>,,65,1,CPPASTTypeId,,<empty>
345171,UNKNOWN,1,,int,40,<empty>,,65,1,CPPASTTypeId,,<empty>
345182,UNKNOWN,1,,int,56,<empty>,,66,1,CPPASTTypeId,,<empty>
345502,UNKNOWN,1,,std::string,12,<empty>,,83,1,CPPASTTypeId,,<empty>
345514,UNKNOWN,1,,std::string,29,<empty>,,84,1,CPPASTTypeId,,<empty>
345531,UNKNOWN,-1,,"PERF_TEST_P_(Conv3D, conv3d)
{
    int test_id = (int)get<0>(GetParam());
    ASSERT_GE(test_id, 0); ASSERT_LT(test_id, Conv3DParamID::CONV_LAST);
    const Conv3DParam_t& params = testConvolution3DConfigs[test_id];
    double declared_flops = params.declared_flops;

    DictValue kernel   = DictValue::arrayInt(&params.kernel[0], 3);
    DictValue stride   = DictValue::arrayInt(&params.stride[0], 3);
    DictValue pad      = DictValue::arrayInt(&params.pad[0], 6);
    DictValue dilation = DictValue::arrayInt(&params.dilation[0], 3);

    MatShape inputShape = MatShape(params.shapeIn.dims, params.shapeIn.dims + 5);
    int outChannels = params.outCN;
    int groups = params.groups;
    std::string padMode(params.padMode);

    bool hasBias = params.hasBias;
    Backend backendId = get<0>(get<1>(GetParam()));
    Target targetId = get<1>(get<1>(GetParam()));

    if (targetId != DNN_TARGET_CPU && backendId != DNN_BACKEND_CUDA)
        throw SkipTestException(""Only CPU and CUDA is supp...",1,<empty>,,93,8,CPPASTProblemDeclaration,,<empty>
345532,UNKNOWN,-1,,"INSTANTIATE_TEST_CASE_P(/**/, Conv3D, Combine(
    Conv3DParamID::all(),
    dnnBackendsAndTargets(false, false)  // defined in ../test/test_common.hpp
));",1,<empty>,,177,9,CPPASTProblemDeclaration,,<empty>
345783,UNKNOWN,-1,,"PERF_TEST_P_(Layer_Einsum, einsum) {
    const EinsumParams& params = GetParam();
    LayerParams lp;
    lp.type = ""Einsum"";
    lp.name = ""testEinsum"";
    lp.set(""equation"", params.equation);
    lp.set(""inputSize"", params.inputSize);
    lp.set(""outputSize"", 1);

    CV_CheckFalse(params.einsumInpShapes.empty(), ""ERROR no inputs shapes provided"");

    for (int i = 0; i < params.einsumInpShapes.size(); i++) {
        lp.set(""inputShapes"" + cv::format(""%d"", i), DictValue::arrayInt(params.einsumInpShapes[i].begin(), params.einsumInpShapes[i].size()));
    }

    Net net;
    std::vector<Mat> inputs;
    std::vector<std::string> input_names;
    int id = net.addLayer(lp.name, lp.type, lp);

    for (int i = 0; i < params.inputSize; ++i) {
        // create inputs
        inputs.emplace_back(Mat(params.einsumInpShapes[i].size(), params.einsumInpShapes[i].data(), CV_32FC1));

        // connect each input to the layer
        net.connect(0, i, id, i);

        // create input names d...",1,<empty>,,61,6,CPPASTProblemDeclaration,,<empty>
345784,UNKNOWN,-1,,"INSTANTIATE_TEST_CASE_P(/**/, Layer_Einsum, testing::ValuesIn(testEinsumConfigs));",1,<empty>,,107,7,CPPASTProblemDeclaration,,<empty>
346198,UNKNOWN,1,,int,16,<empty>,,122,1,CPPASTTypeId,,<empty>
346204,UNKNOWN,1,,int,40,<empty>,,122,1,CPPASTTypeId,,<empty>
346215,UNKNOWN,1,,int,47,<empty>,,123,1,CPPASTTypeId,,<empty>
346254,UNKNOWN,-1,,"PERF_TEST_P_(Gemm, gemm)
{
    int test_id = (int)get<0>(GetParam());
    ASSERT_GE(test_id, 0); ASSERT_LT(test_id, GemmParamId::GEMM_LAST);
    const GemmParam_t& params = test_gemm_configs[test_id];
    auto a_shape = params.a_shape;
    auto b_shape = params.b_shape;
    auto c_shape = params.c_shape;
    auto trans_a = params.trans_a;
    auto trans_b = params.trans_b;
    float alpha = 1.f;
    float beta = 1.f;

    Backend backend_id = get<0>(get<1>(GetParam()));
    Target target_id = get<1>(get<1>(GetParam()));

    bool have_bias = c_shape.empty() ? false : true;

    Mat A(static_cast<int>(a_shape.size()), a_shape.data(), CV_32F);
    randu(A, -1.0f, 1.0f);
    Mat B(static_cast<int>(b_shape.size()), b_shape.data(), CV_32F);
    randu(B, -1.0f, 1.0f);

    LayerParams lp;
    lp.type = ""Gemm"";
    lp.name = ""testLayer"";
    lp.set(""transA"", trans_a);
    lp.set(""transB"", trans_b);
    lp.set(""alpha"", alpha);
    lp.set(""beta"", beta);
    lp.set(""real_ndims_C"", static_cast...",1,<empty>,,149,11,CPPASTProblemDeclaration,,<empty>
346255,UNKNOWN,-1,,"PERF_TEST_P_(Gemm, innerproduct)
{
    int test_id = (int)get<0>(GetParam());
    ASSERT_GE(test_id, 0); ASSERT_LT(test_id, GemmParamId::GEMM_LAST);
    const GemmParam_t& params = test_gemm_configs[test_id];
    auto a_shape = params.a_shape;
    auto b_shape = params.b_shape;
    auto c_shape = params.c_shape;
    auto trans_a = params.trans_a;
    auto trans_b = params.trans_b;

    Backend backend_id = get<0>(get<1>(GetParam()));
    Target target_id = get<1>(get<1>(GetParam()));

    bool have_bias = c_shape.empty() ? false : true;

    Mat A(static_cast<int>(a_shape.size()), a_shape.data(), CV_32F);
    randu(A, -1.0f, 1.0f);
    Mat B(static_cast<int>(b_shape.size()), b_shape.data(), CV_32F);
    randu(B, -1.0f, 1.0f);

    LayerParams lp;
    lp.type = ""InnerProduct"";
    lp.name = ""testLayer"";
    if (trans_a) {
        cv::transpose(A, A);
    }
    if (!trans_b) {
        cv::transpose(B, B);
    }
    lp.blobs.push_back(B);
    lp.set(""num_output"", B.size[0]);
    if (ha...",1,<empty>,,210,12,CPPASTProblemDeclaration,,<empty>
346262,UNKNOWN,1,,int,16,<empty>,,275,1,CPPASTTypeId,,<empty>
346268,UNKNOWN,1,,int,40,<empty>,,275,1,CPPASTTypeId,,<empty>
346279,UNKNOWN,1,,int,49,<empty>,,276,1,CPPASTTypeId,,<empty>
346318,UNKNOWN,-1,,"PERF_TEST_P_(MatMul, matmul)
{
    int test_id = (int)get<0>(GetParam());
    ASSERT_GE(test_id, 0); ASSERT_LT(test_id, MatMulParamId::MATMUL_LAST);
    const GemmParam_t& params = test_matmul_configs[test_id];
    auto a_shape = params.a_shape;
    auto b_shape = params.b_shape;
    auto trans_a = params.trans_a;
    auto trans_b = params.trans_b;
    float alpha = 1.f;
    float beta = 1.f;

    Backend backend_id = get<0>(get<1>(GetParam()));
    Target target_id = get<1>(get<1>(GetParam()));

    Mat A(a_shape, CV_32F);
    randu(A, -1.0f, 1.0f);
    Mat B(b_shape, CV_32F);
    randu(B, -1.0f, 1.0f);

    LayerParams lp;
    lp.type = ""MatMul"";
    lp.name = ""testLayer"";
    lp.set(""transA"", trans_a);
    lp.set(""transB"", trans_b);
    lp.set(""alpha"", alpha);
    lp.set(""beta"", beta);
    lp.blobs.push_back(B);

    Net net;
    net.addLayerToPrev(lp.name, lp.type, lp);
    net.setPreferableBackend(backend_id);
    net.setPreferableTarget(target_id);

    // warmup
    {
       ...",1,<empty>,,302,16,CPPASTProblemDeclaration,,<empty>
346319,UNKNOWN,-1,,"PERF_TEST_P_(MatMul, innerproduct)
{
    int test_id = (int)get<0>(GetParam());
    ASSERT_GE(test_id, 0); ASSERT_LT(test_id, MatMulParamId::MATMUL_LAST);
    const GemmParam_t& params = test_matmul_configs[test_id];
    auto a_shape = params.a_shape;
    auto b_shape = params.b_shape;

    Backend backend_id = get<0>(get<1>(GetParam()));
    Target target_id = get<1>(get<1>(GetParam()));

    Mat A(a_shape, CV_32F);
    randu(A, -1.0f, 1.0f);
    Mat B(b_shape, CV_32F);
    randu(B, -1.0f, 1.0f);

    LayerParams lp;
    lp.type = ""InnerProduct"";
    lp.name = ""testLayer"";
    lp.set(""axis"", (int)(a_shape.size() - 1));
    lp.set(""bias_term"", false);

    // pre-transpose
    std::vector<int> order(b_shape.size());
    std::iota(order.begin(), order.end(), 0);
    std::swap(order.back(), order[b_shape.size() - 2]);
    Mat B_transposed;
    transposeND(B, order, B_transposed);
    lp.blobs.push_back(B_transposed);
    lp.set(""num_output"", int(B_transposed.total(0, b_shape.size() - ...",1,<empty>,,352,17,CPPASTProblemDeclaration,,<empty>
346320,UNKNOWN,-1,,"INSTANTIATE_TEST_CASE_P(/**/, Gemm, Combine(
    GemmParamId::all(),
    dnnBackendsAndTargets(false, false)  // defined in ../test/test_common.hpp
));",1,<empty>,,405,18,CPPASTProblemDeclaration,,<empty>
346321,UNKNOWN,-1,,"INSTANTIATE_TEST_CASE_P(/**/, MatMul, Combine(
    MatMulParamId::all(),
    dnnBackendsAndTargets(false, false)  // defined in ../test/test_common.hpp
));",1,<empty>,,410,19,CPPASTProblemDeclaration,,<empty>
346367,UNKNOWN,1,,int,30,<empty>,,19,1,CPPASTTypeId,,<empty>
346382,UNKNOWN,1,,float,38,<empty>,,20,1,CPPASTTypeId,,<empty>
346438,UNKNOWN,1,,int*,52,<empty>,,30,1,CPPASTTypeId,,<empty>
346454,UNKNOWN,1,,int*,50,<empty>,,31,1,CPPASTTypeId,,<empty>
346503,UNKNOWN,-1,,),20,<empty>,,49,19,CPPASTProblemStatement,,<empty>
346759,UNKNOWN,-1,,),20,<empty>,,113,26,CPPASTProblemStatement,,<empty>
346791,UNKNOWN,-1,,"PERF_TEST_P_(Layer_NaryEltwise, NCHW_NCHW_add)
{
    test_layer({N, C, H, W}, {N, C, H, W}, ""add"");
}",1,<empty>,,128,5,CPPASTProblemDeclaration,,<empty>
346792,UNKNOWN,-1,,"PERF_TEST_P_(Layer_NaryEltwise, NCHW_NCHW_div)
{
    test_layer({N, C, H, W}, {N, C, H, W}, ""div"");
}",1,<empty>,,133,6,CPPASTProblemDeclaration,,<empty>
346793,UNKNOWN,-1,,"PERF_TEST_P_(Layer_NaryEltwise, NCHW_NCHW_ref_div)
{
    test_layer({N, C, H, W}, {N, C, H, W}, ""div"", true);
}",1,<empty>,,138,7,CPPASTProblemDeclaration,,<empty>
346794,UNKNOWN,-1,,"PERF_TEST_P_(Layer_NaryEltwise, NCHW_NCHW_equal)
{
    test_layer({N, C, H, W}, {N, C, H, W}, ""equal"");
}",1,<empty>,,143,8,CPPASTProblemDeclaration,,<empty>
346795,UNKNOWN,-1,,"PERF_TEST_P_(Layer_NaryEltwise, NCHW_NCHW_greater)
{
    test_layer({N, C, H, W}, {N, C, H, W}, ""greater"");
}",1,<empty>,,148,9,CPPASTProblemDeclaration,,<empty>
346796,UNKNOWN,-1,,"PERF_TEST_P_(Layer_NaryEltwise, NCHW_NCHW_less)
{
    test_layer({N, C, H, W}, {N, C, H, W}, ""less"");
}",1,<empty>,,153,10,CPPASTProblemDeclaration,,<empty>
346797,UNKNOWN,-1,,"PERF_TEST_P_(Layer_NaryEltwise, NCHW_NCHW_max)
{
    test_layer({N, C, H, W}, {N, C, H, W}, ""max"");
}",1,<empty>,,158,11,CPPASTProblemDeclaration,,<empty>
346798,UNKNOWN,-1,,"PERF_TEST_P_(Layer_NaryEltwise, NCHW_NCHW_ref_max)
{
    test_layer({N, C, H, W}, {N, C, H, W}, ""max"", true);
}",1,<empty>,,163,12,CPPASTProblemDeclaration,,<empty>
346799,UNKNOWN,-1,,"PERF_TEST_P_(Layer_NaryEltwise, NCHW_NCHW_mean)
{
    test_layer({N, C, H, W}, {N, C, H, W}, ""mean"");
}",1,<empty>,,168,13,CPPASTProblemDeclaration,,<empty>
346800,UNKNOWN,-1,,"PERF_TEST_P_(Layer_NaryEltwise, NCHW_NCHW_min)
{
    test_layer({N, C, H, W}, {N, C, H, W}, ""min"");
}",1,<empty>,,173,14,CPPASTProblemDeclaration,,<empty>
346801,UNKNOWN,-1,,"PERF_TEST_P_(Layer_NaryEltwise, NCHW_NCHW_ref_min)
{
    test_layer({N, C, H, W}, {N, C, H, W}, ""min"", true);
}",1,<empty>,,178,15,CPPASTProblemDeclaration,,<empty>
346802,UNKNOWN,-1,,"PERF_TEST_P_(Layer_NaryEltwise, NCHW_NCHW_mul)
{
    test_layer({N, C, H, W}, {N, C, H, W}, ""mul"");
}",1,<empty>,,183,16,CPPASTProblemDeclaration,,<empty>
346803,UNKNOWN,-1,,"PERF_TEST_P_(Layer_NaryEltwise, NCHW_NCHW_ref_mul)
{
    test_layer({N, C, H, W}, {N, C, H, W}, ""prod"", true);
}",1,<empty>,,188,17,CPPASTProblemDeclaration,,<empty>
346804,UNKNOWN,-1,,"PERF_TEST_P_(Layer_NaryEltwise, NCHW_NCHW_pow)
{
    test_layer({N, C, H, W}, {N, C, H, W}, ""pow"");
}",1,<empty>,,193,18,CPPASTProblemDeclaration,,<empty>
346805,UNKNOWN,-1,,"PERF_TEST_P_(Layer_NaryEltwise, NCHW_NCHW_sub)
{
    test_layer({N, C, H, W}, {N, C, H, W}, ""sub"");
}",1,<empty>,,198,19,CPPASTProblemDeclaration,,<empty>
346806,UNKNOWN,-1,,"PERF_TEST_P_(Layer_NaryEltwise, NCHW_NCHW_sum)
{
    test_layer({N, C, H, W}, {N, C, H, W}, ""sum"");
}",1,<empty>,,203,20,CPPASTProblemDeclaration,,<empty>
346807,UNKNOWN,-1,,"PERF_TEST_P_(Layer_NaryEltwise, NCHW_NCHW_ref_sum)
{
    test_layer({N, C, H, W}, {N, C, H, W}, ""sum"", true);
}",1,<empty>,,208,21,CPPASTProblemDeclaration,,<empty>
346808,UNKNOWN,-1,,"PERF_TEST_P_(Layer_NaryEltwise, NCHW_C_sum)
{
    test_layer({N, C, H, W}, {C, 1, 1}, ""sum"");
}",1,<empty>,,213,22,CPPASTProblemDeclaration,,<empty>
346809,UNKNOWN,-1,,"PERF_TEST_P_(Layer_NaryEltwise, NHWC_C)
{
    test_layer({N, H, W, C}, {1, C}, ""sum"");
}",1,<empty>,,218,23,CPPASTProblemDeclaration,,<empty>
346810,UNKNOWN,-1,,"PERF_TEST_P_(Layer_NaryEltwise, NHWC_H)
{
    test_layer({N, H, W, C}, {1, H, 1, 1}, ""sum"");
}",1,<empty>,,223,24,CPPASTProblemDeclaration,,<empty>
346811,UNKNOWN,-1,,"PERF_TEST_P_(Layer_Slice, YOLOv4_tiny_1)
{
    const int inputShape[4] = {1, 64, 104, 104};
    const int begin[] = {0, 32, 0, 0};
    const int end[] = {1, 64, 104, 104};
    test_slice<4>(inputShape, begin, end);
}",1,<empty>,,228,25,CPPASTProblemDeclaration,,<empty>
346812,UNKNOWN,-1,,"PERF_TEST_P_(Layer_Slice, YOLOv4_tiny_2)
{
    const int inputShape[4] = {1, 128, 52, 52};
    const int begin[] = {0, 64, 0, 0};
    const int end[] = {1, 128, 52, 52};
    test_slice<4>(inputShape, begin, end);
}",1,<empty>,,236,26,CPPASTProblemDeclaration,,<empty>
346813,UNKNOWN,-1,,"PERF_TEST_P_(Layer_Slice, YOLOv4_tiny_3)
{
    const int inputShape[4] = {1, 256, 26, 26};
    const int begin[] = {0, 128, 0, 0};
    const int end[] = {1, 256, 26, 26};
    test_slice<4>(inputShape, begin, end);
}",1,<empty>,,244,27,CPPASTProblemDeclaration,,<empty>
346814,UNKNOWN,-1,,"PERF_TEST_P_(Layer_Slice, FastNeuralStyle_eccv16)
{
    const int inputShape[4] = {1, 128, 80, 100};
    const int begin[] = {0, 0, 2, 2};
    const int end[] = {1, 128, 76, 96};
    test_slice<4>(inputShape, begin, end);
}",1,<empty>,,253,28,CPPASTProblemDeclaration,,<empty>
347013,UNKNOWN,-1,,),20,<empty>,,308,32,CPPASTProblemStatement,,<empty>
347045,UNKNOWN,-1,,"PERF_TEST_P_(Layer_Scatter, DISABLED_Scatter)
{
    test_layer({N, C, H, W});
}",1,<empty>,,322,30,CPPASTProblemDeclaration,,<empty>
347046,UNKNOWN,-1,,"PERF_TEST_P_(Layer_Scatter, DISABLED_Scatter_add)
{
    test_layer({N, C, H, W}, ""add"");
}",1,<empty>,,327,31,CPPASTProblemDeclaration,,<empty>
347201,UNKNOWN,1,,int,34,<empty>,,366,1,CPPASTTypeId,,<empty>
347393,UNKNOWN,-1,,),20,<empty>,,406,44,CPPASTProblemStatement,,<empty>
347425,UNKNOWN,-1,,"PERF_TEST_P_(Layer_ScatterND, DISABLED_ScatterND)
{
    test_layer({N, C, H ,W});
}",1,<empty>,,420,33,CPPASTProblemDeclaration,,<empty>
347426,UNKNOWN,-1,,"PERF_TEST_P_(Layer_ScatterND, DISABLED_ScatterND_add)
{
    test_layer({N, C, H , W}, ""add"");
}",1,<empty>,,425,34,CPPASTProblemDeclaration,,<empty>
347612,UNKNOWN,-1,,),20,<empty>,,473,27,CPPASTProblemStatement,,<empty>
347640,UNKNOWN,-1,,"PERF_TEST_P_(Layer_LayerNorm, LayerNorm)
{
    test_layer({N, H ,W});
}",1,<empty>,,486,36,CPPASTProblemDeclaration,,<empty>
348341,UNKNOWN,-1,,),20,<empty>,,618,112,CPPASTProblemStatement,,<empty>
348369,UNKNOWN,-1,,"PERF_TEST_P_(Layer_LayerNormExpanded, DISABLED_LayerNormExpanded)
{
    test_layer({N, H ,W});
}",1,<empty>,,631,38,CPPASTProblemDeclaration,,<empty>
348516,UNKNOWN,-1,,),20,<empty>,,672,22,CPPASTProblemStatement,,<empty>
348528,UNKNOWN,-1,,"PERF_TEST_P_(Layer_GatherElements, GatherElements)
{
    test_layer({2700, 1, 2914}, {2700, 1, 81}, 2);
}",1,<empty>,,681,40,CPPASTProblemDeclaration,,<empty>
348688,UNKNOWN,-1,,),20,<empty>,,723,25,CPPASTProblemStatement,,<empty>
348720,UNKNOWN,-1,,"PERF_TEST_P_(Layer_InstanceNorm, InstanceNorm)
{
    test_layer({N, C, H, W});
}",1,<empty>,,737,42,CPPASTProblemDeclaration,,<empty>
348932,UNKNOWN,-1,,),20,<empty>,,785,35,CPPASTProblemStatement,,<empty>
348944,UNKNOWN,-1,,"PERF_TEST_P_(Layer_Attention, VisionTransformer) {
    test_layer({1, 197, 768}, {768, 768, 768}, 12);
}",1,<empty>,,794,44,CPPASTProblemDeclaration,,<empty>
348945,UNKNOWN,-1,,"INSTANTIATE_TEST_CASE_P(/**/, Layer_Slice, dnnBackendsAndTargets(false, false));",1,<empty>,,798,45,CPPASTProblemDeclaration,,<empty>
348946,UNKNOWN,-1,,"INSTANTIATE_TEST_CASE_P(/**/, Layer_NaryEltwise, testing::Values(std::make_tuple(DNN_BACKEND_OPENCV, DNN_TARGET_CPU)));",1,<empty>,,799,46,CPPASTProblemDeclaration,,<empty>
348947,UNKNOWN,-1,,"INSTANTIATE_TEST_CASE_P(/**/, Layer_Scatter, testing::Values(std::make_tuple(DNN_BACKEND_OPENCV, DNN_TARGET_CPU)));",1,<empty>,,803,47,CPPASTProblemDeclaration,,<empty>
348948,UNKNOWN,-1,,"INSTANTIATE_TEST_CASE_P(/**/, Layer_ScatterND, testing::Values(std::make_tuple(DNN_BACKEND_OPENCV, DNN_TARGET_CPU)));",1,<empty>,,804,48,CPPASTProblemDeclaration,,<empty>
348949,UNKNOWN,-1,,"INSTANTIATE_TEST_CASE_P(/**/, Layer_LayerNorm, testing::Values(std::make_tuple(DNN_BACKEND_OPENCV, DNN_TARGET_CPU)));",1,<empty>,,805,49,CPPASTProblemDeclaration,,<empty>
348950,UNKNOWN,-1,,"INSTANTIATE_TEST_CASE_P(/**/, Layer_LayerNormExpanded, testing::Values(std::make_tuple(DNN_BACKEND_OPENCV, DNN_TARGET_CPU)));",1,<empty>,,806,50,CPPASTProblemDeclaration,,<empty>
348951,UNKNOWN,-1,,"INSTANTIATE_TEST_CASE_P(/**/, Layer_GatherElements, testing::Values(std::make_tuple(DNN_BACKEND_OPENCV, DNN_TARGET_CPU)));",1,<empty>,,807,51,CPPASTProblemDeclaration,,<empty>
348952,UNKNOWN,-1,,"INSTANTIATE_TEST_CASE_P(/**/, Layer_InstanceNorm, testing::Values(std::make_tuple(DNN_BACKEND_OPENCV, DNN_TARGET_CPU)));",1,<empty>,,808,52,CPPASTProblemDeclaration,,<empty>
348953,UNKNOWN,-1,,"INSTANTIATE_TEST_CASE_P(/**/, Layer_Attention, testing::Values(std::make_tuple(DNN_BACKEND_OPENCV, DNN_TARGET_CPU)));",1,<empty>,,809,53,CPPASTProblemDeclaration,,<empty>
348955,UNKNOWN,-1,,"PERF_TEST_P_(Layer_FullyConnected, fc)
{
    std::vector<int> inpShape;
    inpShape.reserve(4);
    for (int i = 0; i < 4; ++i) {
        int dim = get<0>(GetParam())[i];
        if (dim == 0)
            break;
        inpShape.push_back(dim);
    }
    Mat input(inpShape, CV_32F);
    randn(input, 0, 1);

    int axis = input.dims - 1;
    int outDims = get<1>(GetParam());
    bool isMatMul = get<2>(GetParam());
    int backendId = get<0>(get<3>(GetParam()));
    int targetId = get<1>(get<3>(GetParam()));

    if (inpShape.size() == 4 && inpShape[0] == 5 && inpShape[1] == 16 && inpShape[2] == 512 && inpShape[3] == 128 && outDims >= 512)
        applyTestTag(CV_TEST_TAG_DEBUG_VERYLONG);

    std::vector<int> weightShape;
    if (isMatMul) {
        weightShape = inpShape;
        weightShape[weightShape.size() - 2] = outDims;
    } else {
        weightShape = {outDims, (int)input.total(axis, input.dims)};
    }
    Mat weights(weightShape, CV_32F);
    randn(weights, 0, 1);

    ...",1,<empty>,,813,55,CPPASTProblemDeclaration,,<empty>
348956,UNKNOWN,-1,,"INSTANTIATE_TEST_CASE_P(/**/, Layer_FullyConnected, Combine(
    Values(                // input size
        Vec4i(5, 512, 384),
        Vec4i(5, 16, 512, 128)
    ),
    Values(256, 512, 1024),  // output dimension
    testing::Bool(),         // is_matmul
    dnnBackendsAndTargets()
));",1,<empty>,,868,56,CPPASTProblemDeclaration,,<empty>
348958,UNKNOWN,-1,,"PERF_TEST_P_(Layer_Softmax, softmax_3d) {
    std::vector<int> shape = get<0>(GetParam());
    int axis = get<1>(GetParam());
    int backendId = get<0>(get<2>(GetParam()));
    int targetId = get<1>(get<2>(GetParam()));

    Mat data(shape, CV_32FC1);
    Scalar mean = 0.f;
    Scalar std = 1.f;
    randn(data, mean, std);

    Net net;
    LayerParams lp;
    lp.type = ""Softmax"";
    lp.name = ""testLayer"";
    lp.set(""axis"", axis);

    net.addLayerToPrev(lp.name, lp.type, lp);
    // warmup
    {
        net.setInput(data);
        net.setPreferableBackend(backendId);
        net.setPreferableTarget(targetId);
        Mat out = net.forward();
    }

    TEST_CYCLE() {
        Mat res = net.forward();
    }

    SANITY_CHECK_NOTHING();
}",1,<empty>,,879,58,CPPASTProblemDeclaration,,<empty>
348959,UNKNOWN,-1,,"INSTANTIATE_TEST_CASE_P(/**/, Layer_Softmax, Combine(
    Values(                // input size
            std::vector<int>({16, 50, 50}",1,<empty>,,912,59,CPPASTProblemDeclaration,,<empty>
348960,UNKNOWN,-1,,"),
            std::vector<int>({16, 197, 197}",42,<empty>,,914,60,CPPASTProblemDeclaration,,<empty>
348961,UNKNOWN,-1,,"),
            std::vector<int>({16, 1024, 1024}",44,<empty>,,915,61,CPPASTProblemDeclaration,,<empty>
348962,UNKNOWN,-1,,")
    ),
    Values(0, 1, 2),  // axis
    dnnBackendsAndTargets(/* withInferenceEngine= */ false,
                          /* withHalide= */          false,
                          /* withCpuOCV= */          true,
                          /* withVkCom= */           false,
                          /* withCUDA= */            false,
                          /* withNgraph= */          false,
                          /* withWebnn= */           false,
                          /* withCann= */            false) // only test on CPU
));",46,<empty>,,916,62,CPPASTProblemDeclaration,,<empty>
348977,UNKNOWN,3,,"CV_PERF_TEST_MAIN(dnn,
    extraTestDataPath ? (void)cvtest::addDataSearchPath(extraTestDataPath) : (void)0
)",1,<empty>,,14,3,CPPASTProblemDeclaration,,<empty>
349003,UNKNOWN,1,,dnn::Backend,20,<empty>,,27,1,CPPASTTypeId,,<empty>
349005,UNKNOWN,1,,int,34,<empty>,,27,1,CPPASTTypeId,,<empty>
349014,UNKNOWN,1,,dnn::Target,19,<empty>,,28,1,CPPASTTypeId,,<empty>
349016,UNKNOWN,1,,int,32,<empty>,,28,1,CPPASTTypeId,,<empty>
349247,UNKNOWN,-1,,),27,<empty>,,73,25,CPPASTProblemStatement,,<empty>
349253,UNKNOWN,-1,,),25,<empty>,,75,28,CPPASTProblemStatement,,<empty>
349310,UNKNOWN,-1,,"PERF_TEST_P_(DNNTestNetwork, AlexNet)
{
    processNet(""dnn/bvlc_alexnet.caffemodel"", ""dnn/bvlc_alexnet.prototxt"",
            ""alexnet.yml"", cv::Size(227, 227));
}",1,<empty>,,96,2,CPPASTProblemDeclaration,,<empty>
349311,UNKNOWN,-1,,"PERF_TEST_P_(DNNTestNetwork, GoogLeNet)
{
    processNet(""dnn/bvlc_googlenet.caffemodel"", ""dnn/bvlc_googlenet.prototxt"",
            """", cv::Size(224, 224));
}",1,<empty>,,102,3,CPPASTProblemDeclaration,,<empty>
349312,UNKNOWN,-1,,"PERF_TEST_P_(DNNTestNetwork, ResNet_50)
{
    processNet(""dnn/ResNet-50-model.caffemodel"", ""dnn/ResNet-50-deploy.prototxt"",
            ""resnet_50.yml"", cv::Size(224, 224));
}",1,<empty>,,108,4,CPPASTProblemDeclaration,,<empty>
349313,UNKNOWN,-1,,"PERF_TEST_P_(DNNTestNetwork, SqueezeNet_v1_1)
{
    processNet(""dnn/squeezenet_v1.1.caffemodel"", ""dnn/squeezenet_v1.1.prototxt"",
            ""squeezenet_v1_1.yml"", cv::Size(227, 227));
}",1,<empty>,,114,5,CPPASTProblemDeclaration,,<empty>
349314,UNKNOWN,-1,,"PERF_TEST_P_(DNNTestNetwork, Inception_5h)
{
    if (backend == DNN_BACKEND_INFERENCE_ENGINE_NN_BUILDER_2019) throw SkipTestException("""");
    processNet(""dnn/tensorflow_inception_graph.pb"", """",
            ""inception_5h.yml"",
            cv::Size(224, 224), ""softmax2"");
}",1,<empty>,,120,6,CPPASTProblemDeclaration,,<empty>
349315,UNKNOWN,-1,,"PERF_TEST_P_(DNNTestNetwork, ENet)
{
    if ((backend == DNN_BACKEND_INFERENCE_ENGINE_NN_BUILDER_2019 && target != DNN_TARGET_CPU) ||
        (backend == DNN_BACKEND_OPENCV && target == DNN_TARGET_OPENCL_FP16))
        throw SkipTestException("""");
#if defined(INF_ENGINE_RELEASE) && INF_ENGINE_VER_MAJOR_GE(2021010000)
    if (backend == DNN_BACKEND_INFERENCE_ENGINE_NGRAPH)
        throw SkipTestException("""");
#endif
    processNet(""dnn/Enet-model-best.net"", """", ""enet.yml"",
            cv::Size(512, 256));
}",1,<empty>,,128,7,CPPASTProblemDeclaration,,<empty>
349316,UNKNOWN,-1,,"PERF_TEST_P_(DNNTestNetwork, SSD)
{
    applyTestTag(CV_TEST_TAG_DEBUG_VERYLONG);

    processNet(""dnn/VGG_ILSVRC2016_SSD_300x300_iter_440000.caffemodel"", ""dnn/ssd_vgg16.prototxt"", ""disabled"",
            cv::Size(300, 300));
}",1,<empty>,,141,8,CPPASTProblemDeclaration,,<empty>
349317,UNKNOWN,-1,,"PERF_TEST_P_(DNNTestNetwork, OpenFace)
{
    if (backend == DNN_BACKEND_HALIDE)
        throw SkipTestException("""");
#if defined(INF_ENGINE_RELEASE) && INF_ENGINE_VER_MAJOR_EQ(2018050000)
    if (backend == DNN_BACKEND_INFERENCE_ENGINE_NN_BUILDER_2019 && (target == DNN_TARGET_MYRIAD || target == DNN_TARGET_HDDL))
        throw SkipTestException("""");
#endif
    processNet(""dnn/openface_nn4.small2.v1.t7"", """", """",
            cv::Size(96, 96));
}",1,<empty>,,149,9,CPPASTProblemDeclaration,,<empty>
349318,UNKNOWN,-1,,"PERF_TEST_P_(DNNTestNetwork, MobileNet_SSD_Caffe)
{
    if (backend == DNN_BACKEND_HALIDE)
        throw SkipTestException("""");
    processNet(""dnn/MobileNetSSD_deploy_19e3ec3.caffemodel"", ""dnn/MobileNetSSD_deploy_19e3ec3.prototxt"", """",
            cv::Size(300, 300));
}",1,<empty>,,161,10,CPPASTProblemDeclaration,,<empty>
349319,UNKNOWN,-1,,"PERF_TEST_P_(DNNTestNetwork, MobileNet_SSD_v1_TensorFlow)
{
    if (backend == DNN_BACKEND_HALIDE)
        throw SkipTestException("""");
    processNet(""dnn/ssd_mobilenet_v1_coco_2017_11_17.pb"", ""ssd_mobilenet_v1_coco_2017_11_17.pbtxt"", """",
            cv::Size(300, 300));
}",1,<empty>,,169,11,CPPASTProblemDeclaration,,<empty>
349320,UNKNOWN,-1,,"PERF_TEST_P_(DNNTestNetwork, MobileNet_SSD_v2_TensorFlow)
{
    if (backend == DNN_BACKEND_HALIDE)
        throw SkipTestException("""");
    processNet(""dnn/ssd_mobilenet_v2_coco_2018_03_29.pb"", ""ssd_mobilenet_v2_coco_2018_03_29.pbtxt"", """",
            cv::Size(300, 300));
}",1,<empty>,,177,12,CPPASTProblemDeclaration,,<empty>
349321,UNKNOWN,-1,,"PERF_TEST_P_(DNNTestNetwork, DenseNet_121)
{
    if (backend == DNN_BACKEND_HALIDE)
        throw SkipTestException("""");
    processNet(""dnn/DenseNet_121.caffemodel"", ""dnn/DenseNet_121.prototxt"", """",
               cv::Size(224, 224));
}",1,<empty>,,185,13,CPPASTProblemDeclaration,,<empty>
349322,UNKNOWN,-1,,"PERF_TEST_P_(DNNTestNetwork, OpenPose_pose_mpi_faster_4_stages)
{
    applyTestTag(CV_TEST_TAG_DEBUG_VERYLONG);

    if (backend == DNN_BACKEND_HALIDE ||
        (backend == DNN_BACKEND_INFERENCE_ENGINE_NN_BUILDER_2019 && (target == DNN_TARGET_MYRIAD || target == DNN_TARGET_HDDL)))
        throw SkipTestException("""");
    // The same .caffemodel but modified .prototxt
    // See https://github.com/CMU-Perceptual-Computing-Lab/openpose/blob/master/src/openpose/pose/poseParameters.cpp
    processNet(""dnn/openpose_pose_mpi.caffemodel"", ""dnn/openpose_pose_mpi_faster_4_stages.prototxt"", """",
               cv::Size(368, 368));
}",1,<empty>,,193,14,CPPASTProblemDeclaration,,<empty>
349323,UNKNOWN,-1,,"PERF_TEST_P_(DNNTestNetwork, opencv_face_detector)
{
    if (backend == DNN_BACKEND_HALIDE)
        throw SkipTestException("""");
    processNet(""dnn/opencv_face_detector.caffemodel"", ""dnn/opencv_face_detector.prototxt"", """",
               cv::Size(300, 300));
}",1,<empty>,,206,15,CPPASTProblemDeclaration,,<empty>
349324,UNKNOWN,-1,,"PERF_TEST_P_(DNNTestNetwork, Inception_v2_SSD_TensorFlow)
{
    applyTestTag(CV_TEST_TAG_DEBUG_VERYLONG);

    if (backend == DNN_BACKEND_HALIDE)
        throw SkipTestException("""");
    processNet(""dnn/ssd_inception_v2_coco_2017_11_17.pb"", ""ssd_inception_v2_coco_2017_11_17.pbtxt"", """",
            cv::Size(300, 300));
}",1,<empty>,,214,16,CPPASTProblemDeclaration,,<empty>
349325,UNKNOWN,-1,,"PERF_TEST_P_(DNNTestNetwork, YOLOv3)
{
    applyTestTag(
        CV_TEST_TAG_MEMORY_2GB,
        CV_TEST_TAG_DEBUG_VERYLONG
    );
    if (backend == DNN_BACKEND_HALIDE)
        throw SkipTestException("""");
#if defined(INF_ENGINE_RELEASE) && INF_ENGINE_VER_MAJOR_EQ(2020040000)  // nGraph compilation failure
    if (backend == DNN_BACKEND_INFERENCE_ENGINE_NGRAPH && target == DNN_TARGET_OPENCL)
        throw SkipTestException(""Test is disabled in OpenVINO 2020.4"");
    if (backend == DNN_BACKEND_INFERENCE_ENGINE_NGRAPH && target == DNN_TARGET_OPENCL_FP16)
        throw SkipTestException(""Test is disabled in OpenVINO 2020.4"");
#endif
#if defined(INF_ENGINE_RELEASE) && INF_ENGINE_VER_MAJOR_GE(2021010000)  // nGraph compilation failure
    if (target == DNN_TARGET_MYRIAD)
        throw SkipTestException("""");
#endif

    Mat sample = imread(findDataFile(""dnn/dog416.png""));
    Mat inp = blobFromImage(sample, 1.0 / 255.0, Size(), Scalar(), true);
    processNet(""dnn/yolov3.weights"", ""dnn/y...",1,<empty>,,224,17,CPPASTProblemDeclaration,,<empty>
349326,UNKNOWN,-1,,"PERF_TEST_P_(DNNTestNetwork, YOLOv4)
{
    applyTestTag(
        CV_TEST_TAG_MEMORY_2GB,
        CV_TEST_TAG_DEBUG_VERYLONG
    );
    if (backend == DNN_BACKEND_HALIDE)
        throw SkipTestException("""");
    if (target == DNN_TARGET_MYRIAD)  // not enough resources
        throw SkipTestException("""");
#if defined(INF_ENGINE_RELEASE) && INF_ENGINE_VER_MAJOR_EQ(2020040000)  // nGraph compilation failure
    if (backend == DNN_BACKEND_INFERENCE_ENGINE_NGRAPH && target == DNN_TARGET_OPENCL)
        throw SkipTestException(""Test is disabled in OpenVINO 2020.4"");
    if (backend == DNN_BACKEND_INFERENCE_ENGINE_NGRAPH && target == DNN_TARGET_OPENCL_FP16)
        throw SkipTestException(""Test is disabled in OpenVINO 2020.4"");
#endif
    Mat sample = imread(findDataFile(""dnn/dog416.png""));
    Mat inp = blobFromImage(sample, 1.0 / 255.0, Size(), Scalar(), true);
    processNet(""dnn/yolov4.weights"", ""dnn/yolov4.cfg"", """", inp);
}",1,<empty>,,248,18,CPPASTProblemDeclaration,,<empty>
349327,UNKNOWN,-1,,"PERF_TEST_P_(DNNTestNetwork, YOLOv4_tiny)
{
    if (backend == DNN_BACKEND_HALIDE)
        throw SkipTestException("""");
#if defined(INF_ENGINE_RELEASE) && INF_ENGINE_VER_MAJOR_GE(2021010000)  // nGraph compilation failure
    if (target == DNN_TARGET_MYRIAD)
        throw SkipTestException("""");
#endif
    Mat sample = imread(findDataFile(""dnn/dog416.png""));
    Mat inp = blobFromImage(sample, 1.0 / 255.0, Size(), Scalar(), true);
    processNet(""dnn/yolov4-tiny-2020-12.weights"", ""dnn/yolov4-tiny-2020-12.cfg"", """", inp);
}",1,<empty>,,269,19,CPPASTProblemDeclaration,,<empty>
349328,UNKNOWN,-1,,"PERF_TEST_P_(DNNTestNetwork, YOLOv5) {
    applyTestTag(CV_TEST_TAG_MEMORY_512MB);
    Mat sample = imread(findDataFile(""dnn/dog416.png""));
    Mat inp = blobFromImage(sample, 1.0 / 255.0, Size(640, 640), Scalar(), true);
    processNet("""", ""dnn/yolov5n.onnx"", """", inp);
}",1,<empty>,,282,20,CPPASTProblemDeclaration,,<empty>
349329,UNKNOWN,-1,,"PERF_TEST_P_(DNNTestNetwork, YOLOv8)
{
    applyTestTag(
        CV_TEST_TAG_MEMORY_512MB,
        CV_TEST_TAG_DEBUG_LONG
    );

    Mat sample = imread(findDataFile(""dnn/dog416.png""));
    Mat inp = blobFromImage(sample, 1.0 / 255.0, Size(640, 640), Scalar(), true);
    processNet("""", ""dnn/yolov8n.onnx"", """", inp);
}",1,<empty>,,289,21,CPPASTProblemDeclaration,,<empty>
349330,UNKNOWN,-1,,"PERF_TEST_P_(DNNTestNetwork, YOLOX) {
    applyTestTag(
        CV_TEST_TAG_MEMORY_512MB,
        CV_TEST_TAG_DEBUG_VERYLONG
    );
    Mat sample = imread(findDataFile(""dnn/dog416.png""));
    Mat inp = blobFromImage(sample, 1.0 / 255.0, Size(640, 640), Scalar(), true);
    processNet("""", ""dnn/yolox_s.onnx"", """", inp);
}",1,<empty>,,301,22,CPPASTProblemDeclaration,,<empty>
349331,UNKNOWN,-1,,"PERF_TEST_P_(DNNTestNetwork, EAST_text_detection)
{
    applyTestTag(CV_TEST_TAG_DEBUG_VERYLONG);

    if (backend == DNN_BACKEND_HALIDE)
        throw SkipTestException("""");
    processNet(""dnn/frozen_east_text_detection.pb"", """", """", cv::Size(320, 320));
}",1,<empty>,,311,23,CPPASTProblemDeclaration,,<empty>
349332,UNKNOWN,-1,,"PERF_TEST_P_(DNNTestNetwork, FastNeuralStyle_eccv16)
{
    applyTestTag(CV_TEST_TAG_DEBUG_VERYLONG);

    if (backend == DNN_BACKEND_HALIDE)
        throw SkipTestException("""");
    processNet(""dnn/fast_neural_style_eccv16_starry_night.t7"", """", """", cv::Size(320, 240));
}",1,<empty>,,320,24,CPPASTProblemDeclaration,,<empty>
349333,UNKNOWN,-1,,"PERF_TEST_P_(DNNTestNetwork, Inception_v2_Faster_RCNN)
{
    applyTestTag(CV_TEST_TAG_DEBUG_VERYLONG);

#if defined(INF_ENGINE_RELEASE) && INF_ENGINE_VER_MAJOR_EQ(2019010000)
    if (backend == DNN_BACKEND_INFERENCE_ENGINE_NN_BUILDER_2019)
        throw SkipTestException(""Test is disabled in OpenVINO 2019R1"");
#endif
#if defined(INF_ENGINE_RELEASE) && INF_ENGINE_VER_MAJOR_EQ(2019020000)
    if (backend == DNN_BACKEND_INFERENCE_ENGINE_NN_BUILDER_2019)
        throw SkipTestException(""Test is disabled in OpenVINO 2019R2"");
#endif
#if defined(INF_ENGINE_RELEASE) && INF_ENGINE_VER_MAJOR_GE(2021010000)
    if (target == DNN_TARGET_MYRIAD)
        throw SkipTestException(""Test is disabled in OpenVINO 2021.1+ / MYRIAD"");
#endif
    if (backend == DNN_BACKEND_HALIDE ||
        (backend == DNN_BACKEND_INFERENCE_ENGINE_NN_BUILDER_2019 && target != DNN_TARGET_CPU) ||
        (backend == DNN_BACKEND_OPENCV && target == DNN_TARGET_OPENCL_FP16))
        throw SkipTestException("""");
    processNet...",1,<empty>,,329,25,CPPASTProblemDeclaration,,<empty>
349334,UNKNOWN,-1,,"PERF_TEST_P_(DNNTestNetwork, EfficientDet)
{
    if (backend == DNN_BACKEND_HALIDE || target != DNN_TARGET_CPU)
        throw SkipTestException("""");
    Mat sample = imread(findDataFile(""dnn/dog416.png""));
    Mat inp = blobFromImage(sample, 1.0 / 255.0, Size(512, 512), Scalar(), true);
    processNet(""dnn/efficientdet-d0.pb"", ""dnn/efficientdet-d0.pbtxt"", """", inp);
}",1,<empty>,,354,26,CPPASTProblemDeclaration,,<empty>
349335,UNKNOWN,-1,,"PERF_TEST_P_(DNNTestNetwork, EfficientNet)
{
    Mat sample = imread(findDataFile(""dnn/dog416.png""));
    Mat inp = blobFromImage(sample, 1.0 / 255.0, Size(224, 224), Scalar(), true);
    transposeND(inp, {0, 2, 3, 1}, inp);
    processNet("""", ""dnn/efficientnet-lite4.onnx"", """", inp);
}",1,<empty>,,363,27,CPPASTProblemDeclaration,,<empty>
349336,UNKNOWN,-1,,"PERF_TEST_P_(DNNTestNetwork, YuNet) {
    processNet("""", ""dnn/onnx/models/yunet-202303.onnx"", """",  cv::Size(640, 640));
}",1,<empty>,,371,28,CPPASTProblemDeclaration,,<empty>
349337,UNKNOWN,-1,,"PERF_TEST_P_(DNNTestNetwork, SFace) {
    processNet("""", ""dnn/face_recognition_sface_2021dec.onnx"", """",  cv::Size(112, 112));
}",1,<empty>,,375,29,CPPASTProblemDeclaration,,<empty>
349338,UNKNOWN,-1,,"PERF_TEST_P_(DNNTestNetwork, MPPalm) {
    Mat inp(cv::Size(192, 192), CV_32FC3);
    randu(inp, 0.0f, 1.0f);
    inp = blobFromImage(inp, 1.0, Size(), Scalar(), false);
    transposeND(inp, {0, 2, 3, 1}, inp);
    processNet("""", ""dnn/palm_detection_mediapipe_2023feb.onnx"", """", inp);
}",1,<empty>,,379,30,CPPASTProblemDeclaration,,<empty>
349339,UNKNOWN,-1,,"PERF_TEST_P_(DNNTestNetwork, MPHand) {
    Mat inp(cv::Size(224, 224), CV_32FC3);
    randu(inp, 0.0f, 1.0f);
    inp = blobFromImage(inp, 1.0, Size(), Scalar(), false);
    transposeND(inp, {0, 2, 3, 1}, inp);
    processNet("""", ""dnn/handpose_estimation_mediapipe_2023feb.onnx"", """",  inp);
}",1,<empty>,,387,31,CPPASTProblemDeclaration,,<empty>
349340,UNKNOWN,-1,,"PERF_TEST_P_(DNNTestNetwork, MPPose) {
    Mat inp(cv::Size(256, 256), CV_32FC3);
    randu(inp, 0.0f, 1.0f);
    inp = blobFromImage(inp, 1.0, Size(), Scalar(), false);
    transposeND(inp, {0, 2, 3, 1}, inp);
    processNet("""", ""dnn/pose_estimation_mediapipe_2023mar.onnx"", """",  inp);
}",1,<empty>,,395,32,CPPASTProblemDeclaration,,<empty>
349341,UNKNOWN,-1,,"PERF_TEST_P_(DNNTestNetwork, PPOCRv3) {
    applyTestTag(CV_TEST_TAG_MEMORY_512MB);
    processNet("""", ""dnn/onnx/models/PP_OCRv3_DB_text_det.onnx"", """", cv::Size(736, 736));
}",1,<empty>,,403,33,CPPASTProblemDeclaration,,<empty>
349342,UNKNOWN,-1,,"PERF_TEST_P_(DNNTestNetwork, PPHumanSeg) {
    processNet("""", ""dnn/human_segmentation_pphumanseg_2023mar.onnx"", """", cv::Size(192, 192));
}",1,<empty>,,408,34,CPPASTProblemDeclaration,,<empty>
349343,UNKNOWN,-1,,"PERF_TEST_P_(DNNTestNetwork, CRNN) {
    Mat inp(cv::Size(100, 32), CV_32FC1);
    randu(inp, 0.0f, 1.0f);
    inp = blobFromImage(inp, 1.0, Size(), Scalar(), false);
    processNet("""", ""dnn/text_recognition_CRNN_EN_2021sep.onnx"", """", inp);
}",1,<empty>,,412,35,CPPASTProblemDeclaration,,<empty>
349344,UNKNOWN,-1,,"PERF_TEST_P_(DNNTestNetwork, VitTrack) {
    Mat inp1(cv::Size(128, 128), CV_32FC3);
    Mat inp2(cv::Size(256, 256), CV_32FC3);
    randu(inp1, 0.0f, 1.0f);
    randu(inp2, 0.0f, 1.0f);
    inp1 = blobFromImage(inp1, 1.0, Size(), Scalar(), false);
    inp2 = blobFromImage(inp2, 1.0, Size(), Scalar(), false);
    processNet("""", ""dnn/onnx/models/object_tracking_vittrack_2023sep.onnx"", """",  {std::make_tuple(inp1, ""template""), std::make_tuple(inp2, ""search"")});
}",1,<empty>,,419,36,CPPASTProblemDeclaration,,<empty>
349345,UNKNOWN,-1,,"PERF_TEST_P_(DNNTestNetwork, EfficientDet_int8)
{
    if (target != DNN_TARGET_CPU || (backend != DNN_BACKEND_OPENCV &&
        backend != DNN_BACKEND_TIMVX && backend != DNN_BACKEND_INFERENCE_ENGINE_NGRAPH)) {
        throw SkipTestException("""");
    }
    Mat inp = imread(findDataFile(""dnn/dog416.png""));
    inp = blobFromImage(inp, 1.0 / 255.0, Size(320, 320), Scalar(), true);
    processNet("""", ""dnn/tflite/coco_efficientdet_lite0_v1_1.0_quant_2021_09_06.tflite"", """", inp);
}",1,<empty>,,429,37,CPPASTProblemDeclaration,,<empty>
349346,UNKNOWN,-1,,"PERF_TEST_P_(DNNTestNetwork, VIT_B_32)
{
    applyTestTag(CV_TEST_TAG_DEBUG_VERYLONG);

    processNet("""", ""dnn/onnx/models/vit_b_32.onnx"", """", cv::Size(224, 224));
}",1,<empty>,,440,38,CPPASTProblemDeclaration,,<empty>
349347,UNKNOWN,-1,,"INSTANTIATE_TEST_CASE_P(/*nothing*/, DNNTestNetwork, dnnBackendsAndTargets());",1,<empty>,,447,39,CPPASTProblemDeclaration,,<empty>
349470,UNKNOWN,-1,,"PERF_TEST_P_(Layer_LSTM, lstm) {
    const LstmParams& params = GetParam();
    LayerParams lp;
    lp.type = ""LSTM"";
    lp.name = ""testLstm"";
    lp.set(""produce_cell_output"", false);
    lp.set(""use_timestamp_dim"", true);

    Mat weightH(params.hiddenSize * 4, params.hiddenSize, CV_32FC1, cv::Scalar(0));
    Mat weightX(params.hiddenSize * 4, params.inputSize, CV_32FC1, cv::Scalar(0));
    Mat bias(params.hiddenSize * 4, 1, CV_32FC1, cv::Scalar(0));
    Mat hInternal(params.nrSteps, params.hiddenSize, CV_32FC1, cv::Scalar(0));
    Mat cInternal(params.nrSteps, params.hiddenSize, CV_32FC1, cv::Scalar(0));
    lp.blobs.push_back(weightH);
    lp.blobs.push_back(weightX);
    lp.blobs.push_back(bias);
    lp.blobs.push_back(hInternal);
    lp.blobs.push_back(cInternal);

    std::vector<int> inputDims;
    inputDims.push_back(params.nrSamples);
    inputDims.push_back(params.nrSteps);
    inputDims.push_back(params.inputSize);
    Mat input(inputDims.size(), inputDims.data(), CV_32...",1,<empty>,,47,6,CPPASTProblemDeclaration,,<empty>
349471,UNKNOWN,-1,,"INSTANTIATE_TEST_CASE_P(/**/, Layer_LSTM, testing::ValuesIn(testLstmConfigs));",1,<empty>,,88,7,CPPASTProblemDeclaration,,<empty>
349512,UNKNOWN,-1,,"class CV_EXPORTS NetworkBackend
{
public:
    virtual ~NetworkBackend();

    virtual void switchBackend(Net& net) = 0;

    /**
    @param loaderID use empty """" for auto
    @param model see cv::dnn::readNetwork
    @param config see cv::dnn::readNetwork
    */
    virtual Net readNetwork(const std::string& loaderID, const std::string& model, const std::string& config) = 0;

    /** @overload */
    virtual Net readNetwork(
        const std::string& loaderID,
        const uchar* bufferModelConfigPtr, size_t bufferModelConfigSize,
        const uchar* bufferWeightsPtr, size_t bufferWeightsSize
    ) = 0;

    // TODO: target as string + configuration
    virtual bool checkTarget(Target target) = 0;
};",1,<empty>,,14,1,CPPASTProblemDeclaration,,<empty>
349542,UNKNOWN,-1,,CV__DNN_INLINE_NS_BEGIN,1,<empty>,,60,1,CPPASTProblemDeclaration,,<empty>
349584,UNKNOWN,-1,,"CV__DNN_INLINE_NS_END
",1,<empty>,,616,5,CPPASTProblemDeclaration,,<empty>
349634,UNKNOWN,-1,,CV__DNN_INLINE_NS_BEGIN,1,<empty>,,16,1,CPPASTProblemDeclaration,,<empty>
349649,UNKNOWN,-1,,"CV__DNN_INLINE_NS_END
",1,<empty>,,79,3,CPPASTProblemDeclaration,,<empty>
350092,UNKNOWN,1,,bool,70,<empty>,,115,1,CPPASTTypeId,,<empty>
350132,UNKNOWN,1,,bool,70,<empty>,,146,1,CPPASTTypeId,,<empty>
350207,UNKNOWN,1,,int,35,<empty>,,201,1,CPPASTTypeId,,<empty>
350212,UNKNOWN,1,,int,35,<empty>,,202,1,CPPASTTypeId,,<empty>
350217,UNKNOWN,1,,int,39,<empty>,,203,1,CPPASTTypeId,,<empty>
350222,UNKNOWN,1,,int,32,<empty>,,204,1,CPPASTTypeId,,<empty>
350227,UNKNOWN,1,,int,32,<empty>,,205,1,CPPASTTypeId,,<empty>
350232,UNKNOWN,1,,int,32,<empty>,,206,1,CPPASTTypeId,,<empty>
350325,UNKNOWN,1,,int,35,<empty>,,232,1,CPPASTTypeId,,<empty>
350330,UNKNOWN,1,,int,35,<empty>,,233,1,CPPASTTypeId,,<empty>
350335,UNKNOWN,1,,int,39,<empty>,,234,1,CPPASTTypeId,,<empty>
350340,UNKNOWN,1,,int,32,<empty>,,235,1,CPPASTTypeId,,<empty>
350345,UNKNOWN,1,,int,32,<empty>,,236,1,CPPASTTypeId,,<empty>
350350,UNKNOWN,1,,int,32,<empty>,,237,1,CPPASTTypeId,,<empty>
350469,UNKNOWN,1,,int,42,<empty>,,300,1,CPPASTTypeId,,<empty>
350474,UNKNOWN,1,,int,42,<empty>,,301,1,CPPASTTypeId,,<empty>
350479,UNKNOWN,1,,int,46,<empty>,,302,1,CPPASTTypeId,,<empty>
350484,UNKNOWN,1,,int,39,<empty>,,303,1,CPPASTTypeId,,<empty>
350489,UNKNOWN,1,,int,39,<empty>,,304,1,CPPASTTypeId,,<empty>
350494,UNKNOWN,1,,int,39,<empty>,,305,1,CPPASTTypeId,,<empty>
350500,UNKNOWN,1,,int,46,<empty>,,307,1,CPPASTTypeId,,<empty>
350508,UNKNOWN,1,,long long int,43,<empty>,,308,1,CPPASTTypeId,,<empty>
350513,UNKNOWN,1,,long long int,43,<empty>,,309,1,CPPASTTypeId,,<empty>
350518,UNKNOWN,1,,long long int,43,<empty>,,310,1,CPPASTTypeId,,<empty>
350625,UNKNOWN,1,,int,42,<empty>,,340,1,CPPASTTypeId,,<empty>
350630,UNKNOWN,1,,int,42,<empty>,,341,1,CPPASTTypeId,,<empty>
350635,UNKNOWN,1,,int,46,<empty>,,342,1,CPPASTTypeId,,<empty>
350640,UNKNOWN,1,,int,39,<empty>,,343,1,CPPASTTypeId,,<empty>
350645,UNKNOWN,1,,int,39,<empty>,,344,1,CPPASTTypeId,,<empty>
350650,UNKNOWN,1,,int,39,<empty>,,345,1,CPPASTTypeId,,<empty>
350656,UNKNOWN,1,,int,46,<empty>,,347,1,CPPASTTypeId,,<empty>
350664,UNKNOWN,1,,long long int,43,<empty>,,348,1,CPPASTTypeId,,<empty>
350669,UNKNOWN,1,,long long int,43,<empty>,,349,1,CPPASTTypeId,,<empty>
350674,UNKNOWN,1,,long long int,43,<empty>,,350,1,CPPASTTypeId,,<empty>
350803,UNKNOWN,1,,int,37,<empty>,,419,1,CPPASTTypeId,,<empty>
350808,UNKNOWN,1,,int,37,<empty>,,420,1,CPPASTTypeId,,<empty>
350813,UNKNOWN,1,,int,37,<empty>,,421,1,CPPASTTypeId,,<empty>
350818,UNKNOWN,1,,int,39,<empty>,,422,1,CPPASTTypeId,,<empty>
350823,UNKNOWN,1,,int,39,<empty>,,423,1,CPPASTTypeId,,<empty>
350828,UNKNOWN,1,,int,39,<empty>,,424,1,CPPASTTypeId,,<empty>
350834,UNKNOWN,1,,int,46,<empty>,,426,1,CPPASTTypeId,,<empty>
350848,UNKNOWN,1,,half**,26,<empty>,,429,1,CPPASTTypeId,,<empty>
350883,UNKNOWN,1,,half*,28,<empty>,,434,1,CPPASTTypeId,,<empty>
350897,UNKNOWN,1,,half*,28,<empty>,,435,1,CPPASTTypeId,,<empty>
350911,UNKNOWN,1,,half*,28,<empty>,,436,1,CPPASTTypeId,,<empty>
350933,UNKNOWN,1,,void**,21,<empty>,,441,1,CPPASTTypeId,,<empty>
350942,UNKNOWN,1,,void**,21,<empty>,,442,1,CPPASTTypeId,,<empty>
350951,UNKNOWN,1,,void**,21,<empty>,,443,1,CPPASTTypeId,,<empty>
351075,UNKNOWN,1,,int,37,<empty>,,469,1,CPPASTTypeId,,<empty>
351080,UNKNOWN,1,,int,37,<empty>,,470,1,CPPASTTypeId,,<empty>
351085,UNKNOWN,1,,int,37,<empty>,,471,1,CPPASTTypeId,,<empty>
351090,UNKNOWN,1,,int,39,<empty>,,472,1,CPPASTTypeId,,<empty>
351095,UNKNOWN,1,,int,39,<empty>,,473,1,CPPASTTypeId,,<empty>
351100,UNKNOWN,1,,int,39,<empty>,,474,1,CPPASTTypeId,,<empty>
351106,UNKNOWN,1,,int,46,<empty>,,476,1,CPPASTTypeId,,<empty>
351117,UNKNOWN,1,,float**,26,<empty>,,479,1,CPPASTTypeId,,<empty>
351152,UNKNOWN,1,,float*,28,<empty>,,484,1,CPPASTTypeId,,<empty>
351166,UNKNOWN,1,,float*,28,<empty>,,485,1,CPPASTTypeId,,<empty>
351180,UNKNOWN,1,,float*,28,<empty>,,486,1,CPPASTTypeId,,<empty>
351202,UNKNOWN,1,,void**,21,<empty>,,491,1,CPPASTTypeId,,<empty>
351211,UNKNOWN,1,,void**,21,<empty>,,492,1,CPPASTTypeId,,<empty>
351220,UNKNOWN,1,,void**,21,<empty>,,493,1,CPPASTTypeId,,<empty>
351558,UNKNOWN,1,,int,68,<empty>,,80,1,CPPASTTypeId,,<empty>
352487,UNKNOWN,1,,void *,9,<empty>,,411,1,CPPASTTypeId,,<empty>
352583,UNKNOWN,1,,void *,9,<empty>,,441,1,CPPASTTypeId,,<empty>
352677,UNKNOWN,1,,void *,9,<empty>,,496,1,CPPASTTypeId,,<empty>
352795,UNKNOWN,1,,void *,9,<empty>,,528,1,CPPASTTypeId,,<empty>
352908,UNKNOWN,1,,void *,9,<empty>,,588,1,CPPASTTypeId,,<empty>
353029,UNKNOWN,1,,void *,9,<empty>,,623,1,CPPASTTypeId,,<empty>
353368,UNKNOWN,1,,bool,70,<empty>,,110,1,CPPASTTypeId,,<empty>
353408,UNKNOWN,1,,bool,70,<empty>,,141,1,CPPASTTypeId,,<empty>
353481,UNKNOWN,1,,int,68,<empty>,,192,1,CPPASTTypeId,,<empty>
354293,UNKNOWN,1,,void *,13,<empty>,,146,1,CPPASTTypeId,,<empty>
354296,UNKNOWN,1,,void *,13,<empty>,,146,1,CPPASTTypeId,,<empty>
354496,UNKNOWN,1,,void *,13,<empty>,,190,1,CPPASTTypeId,,<empty>
354499,UNKNOWN,1,,void *,13,<empty>,,190,1,CPPASTTypeId,,<empty>
355783,UNKNOWN,1,,void *,5,<empty>,,182,1,CPPASTTypeId,,<empty>
356565,UNKNOWN,1,,void *,9,<empty>,,139,1,CPPASTTypeId,,<empty>
356659,UNKNOWN,1,,void *,9,<empty>,,168,1,CPPASTTypeId,,<empty>
357202,UNKNOWN,1,,element_type*,62,<empty>,,56,1,CPPASTTypeId,,<empty>
358156,UNKNOWN,1,,T*,32,<empty>,,173,1,CPPASTTypeId,,<empty>
358320,UNKNOWN,1,,T*,45,<empty>,,227,1,CPPASTTypeId,,<empty>
358362,UNKNOWN,1,,std::intptr_t,38,<empty>,,247,1,CPPASTTypeId,,<empty>
359151,UNKNOWN,1,,bool,70,<empty>,,104,1,CPPASTTypeId,,<empty>
359762,UNKNOWN,1,,size_type,79,<empty>,,227,1,CPPASTTypeId,,<empty>
364027,UNKNOWN,1,,DevicePtr<T>,32,<empty>,,73,1,CPPASTTypeId,,<empty>
364067,UNKNOWN,1,,DevicePtr<T>,40,<empty>,,90,1,CPPASTTypeId,,<empty>
364107,UNKNOWN,1,,DevicePtr<T>,46,<empty>,,100,1,CPPASTTypeId,,<empty>
364251,UNKNOWN,1,,DevicePtr<std::int8_t>,35,<empty>,,156,1,CPPASTTypeId,,<empty>
364259,UNKNOWN,1,,DevicePtr<T>,40,<empty>,,157,1,CPPASTTypeId,,<empty>
364327,UNKNOWN,1,,bool,58,<empty>,,35,1,CPPASTTypeId,,<empty>
366492,UNKNOWN,1,,const Op<T>*,29,<empty>,,40,1,CPPASTTypeId,,<empty>
370395,UNKNOWN,1,,csl::View<T>,73,<empty>,,42,1,CPPASTTypeId,,<empty>
371119,UNKNOWN,1,,std::size_t,79,<empty>,,237,1,CPPASTTypeId,,<empty>
372235,UNKNOWN,1,,size_t,32,<empty>,,34,1,CPPASTTypeId,,<empty>
374481,UNKNOWN,1,,T,39,<empty>,,114,1,CPPASTTypeId,,<empty>
376434,UNKNOWN,1,,int,70,<empty>,,49,1,CPPASTTypeId,,<empty>
376848,UNKNOWN,1,,T,49,<empty>,,124,1,CPPASTTypeId,,<empty>
376894,UNKNOWN,1,,float*,50,<empty>,,129,1,CPPASTTypeId,,<empty>
377491,UNKNOWN,1,,float,41,<empty>,,58,1,CPPASTTypeId,,<empty>
377500,UNKNOWN,1,,float,41,<empty>,,59,1,CPPASTTypeId,,<empty>
377818,UNKNOWN,1,,int,40,<empty>,,132,1,CPPASTTypeId,,<empty>
379933,UNKNOWN,-1,,__host__ __device__,9,<empty>,,32,12,CPPASTProblemDeclaration,,<empty>
379942,UNKNOWN,-1,,__host__ __device__,9,<empty>,,33,14,CPPASTProblemDeclaration,,<empty>
379949,UNKNOWN,-1,,__host__ __device__,9,<empty>,,35,16,CPPASTProblemDeclaration,,<empty>
379956,UNKNOWN,-1,,__host__ __device__,9,<empty>,,36,18,CPPASTProblemDeclaration,,<empty>
379965,UNKNOWN,-1,,__host__ __device__,9,<empty>,,37,20,CPPASTProblemDeclaration,,<empty>
379972,UNKNOWN,-1,,__host__ __device__,9,<empty>,,38,22,CPPASTProblemDeclaration,,<empty>
379981,UNKNOWN,-1,,__host__ __device__,9,<empty>,,40,24,CPPASTProblemDeclaration,,<empty>
379988,UNKNOWN,-1,,__host__ __device__,9,<empty>,,41,26,CPPASTProblemDeclaration,,<empty>
379997,UNKNOWN,-1,,__host__ __device__,9,<empty>,,43,28,CPPASTProblemDeclaration,,<empty>
380006,UNKNOWN,-1,,__host__ __device__,9,<empty>,,44,30,CPPASTProblemDeclaration,,<empty>
380013,UNKNOWN,-1,,__host__ __device__,9,<empty>,,45,32,CPPASTProblemDeclaration,,<empty>
380022,UNKNOWN,-1,,__host__ __device__,9,<empty>,,46,34,CPPASTProblemDeclaration,,<empty>
380029,UNKNOWN,-1,,__host__ __device__,9,<empty>,,48,36,CPPASTProblemDeclaration,,<empty>
380038,UNKNOWN,-1,,__host__ __device__,9,<empty>,,49,38,CPPASTProblemDeclaration,,<empty>
380045,UNKNOWN,-1,,"template <class InputItr>
        __host__ void assign(InputItr first, InputItr last) {
            std::copy(first, last, std::begin(ptr));
        }",9,<empty>,,51,40,CPPASTProblemDeclaration,,<empty>
380046,UNKNOWN,-1,,__host__ __device__,9,<empty>,,56,41,CPPASTProblemDeclaration,,<empty>
380056,UNKNOWN,-1,,__host__ __device__,9,<empty>,,57,43,CPPASTProblemDeclaration,,<empty>
380066,UNKNOWN,-1,,__host__ __device__,9,<empty>,,59,45,CPPASTProblemDeclaration,,<empty>
380075,UNKNOWN,-1,,__host__ __device__,9,<empty>,,60,47,CPPASTProblemDeclaration,,<empty>
380084,UNKNOWN,-1,,__host__ __device__,9,<empty>,,62,49,CPPASTProblemDeclaration,,<empty>
380095,UNKNOWN,-1,,__host__ __device__,9,<empty>,,63,51,CPPASTProblemDeclaration,,<empty>
380106,UNKNOWN,-1,,__host__ __device__,9,<empty>,,65,53,CPPASTProblemDeclaration,,<empty>
380113,UNKNOWN,-1,,__host__ __device__,9,<empty>,,66,55,CPPASTProblemDeclaration,,<empty>
380154,UNKNOWN,-1,,"template <bool NORMALIZED_BBOX>
    __device__ __forceinline__ float compute_bbox_size(BoundingBox bbox)
    {
        float width = bbox.xmax - bbox.xmin;
        float height = bbox.ymax - bbox.ymin;
        if (width < 0 || height < 0)
            return 0.0;

        if (!NORMALIZED_BBOX)
        {
            width += 1;
            height += 1;
        }

        using csl::device::mul_ftz;
        return mul_ftz(width, height);
    }",5,<empty>,,19,2,CPPASTProblemDeclaration,,<empty>
380189,UNKNOWN,-1,,__device__,9,<empty>,,29,2,CPPASTProblemDeclaration,,<empty>
380196,UNKNOWN,-1,,__device__,9,<empty>,,31,4,CPPASTProblemDeclaration,,<empty>
380216,UNKNOWN,-1,,__device__,9,<empty>,,37,6,CPPASTProblemDeclaration,,<empty>
380229,UNKNOWN,-1,,__device__,5,<empty>,,50,4,CPPASTProblemDeclaration,,<empty>
380239,UNKNOWN,-1,,__device__,5,<empty>,,54,6,CPPASTProblemDeclaration,,<empty>
380396,UNKNOWN,-1,,"kernel <<<policy.grid, policy.block>>> (args...);",9,<empty>,,66,3,CPPASTProblemStatement,,<empty>
380405,UNKNOWN,-1,,"kernel <<<grid, block>>> (args...);",9,<empty>,,71,1,CPPASTProblemStatement,,<empty>
380413,UNKNOWN,-1,,"kernel <<<policy.grid, policy.block, policy.sharedMem, policy.stream>>> (args...);",9,<empty>,,76,1,CPPASTProblemStatement,,<empty>
380571,UNKNOWN,1,,T,47,<empty>,,96,1,CPPASTTypeId,,<empty>
380937,UNKNOWN,1,,T,34,<empty>,,302,1,CPPASTTypeId,,<empty>
381175,UNKNOWN,1,,T,50,<empty>,,452,1,CPPASTTypeId,,<empty>
381178,UNKNOWN,1,,T,72,<empty>,,452,1,CPPASTTypeId,,<empty>
381181,UNKNOWN,1,,T,94,<empty>,,452,1,CPPASTTypeId,,<empty>
381184,UNKNOWN,1,,T,115,<empty>,,452,1,CPPASTTypeId,,<empty>
381280,UNKNOWN,1,,T,37,<empty>,,512,1,CPPASTTypeId,,<empty>
381457,UNKNOWN,1,,T,28,<empty>,,602,1,CPPASTTypeId,,<empty>
381462,UNKNOWN,1,,T,60,<empty>,,602,1,CPPASTTypeId,,<empty>
381468,UNKNOWN,1,,T,94,<empty>,,602,1,CPPASTTypeId,,<empty>
381919,UNKNOWN,-1,,__device__,9,<empty>,,29,2,CPPASTProblemDeclaration,,<empty>
381926,UNKNOWN,-1,,__device__,9,<empty>,,31,4,CPPASTProblemDeclaration,,<empty>
381934,UNKNOWN,1,,index_type,52,<empty>,,32,1,CPPASTTypeId,,<empty>
381941,UNKNOWN,-1,,__device__,9,<empty>,,36,6,CPPASTProblemDeclaration,,<empty>
381954,UNKNOWN,-1,,__device__,5,<empty>,,49,4,CPPASTProblemDeclaration,,<empty>
381968,UNKNOWN,-1,,__device__,5,<empty>,,53,6,CPPASTProblemDeclaration,,<empty>
381999,UNKNOWN,-1,,template <int>  __device__ detail::dim3_member_type getGridDim();,1,<empty>,,19,2,CPPASTProblemDeclaration,,<empty>
382000,UNKNOWN,-1,,template <> inline __device__ detail::dim3_member_type getGridDim<0>() { return gridDim.x; },1,<empty>,,20,3,CPPASTProblemDeclaration,,<empty>
382001,UNKNOWN,-1,,template <> inline __device__ detail::dim3_member_type getGridDim<1>() { return gridDim.y; },1,<empty>,,21,4,CPPASTProblemDeclaration,,<empty>
382002,UNKNOWN,-1,,template <> inline __device__ detail::dim3_member_type getGridDim<2>() { return gridDim.z; },1,<empty>,,22,5,CPPASTProblemDeclaration,,<empty>
382003,UNKNOWN,-1,,template <int> __device__ detail::dim3_member_type getBlockDim();,1,<empty>,,24,6,CPPASTProblemDeclaration,,<empty>
382004,UNKNOWN,-1,,template <> inline __device__ detail::dim3_member_type getBlockDim<0>() { return blockDim.x; },1,<empty>,,25,7,CPPASTProblemDeclaration,,<empty>
382005,UNKNOWN,-1,,template <> inline __device__ detail::dim3_member_type getBlockDim<1>() { return blockDim.y; },1,<empty>,,26,8,CPPASTProblemDeclaration,,<empty>
382006,UNKNOWN,-1,,template <> inline __device__ detail::dim3_member_type getBlockDim<2>() { return blockDim.z; },1,<empty>,,27,9,CPPASTProblemDeclaration,,<empty>
382007,UNKNOWN,-1,,template <int> __device__ detail::uint3_member_type getBlockIdx();,1,<empty>,,29,10,CPPASTProblemDeclaration,,<empty>
382008,UNKNOWN,-1,,template <> inline __device__ detail::uint3_member_type getBlockIdx<0>() { return blockIdx.x; },1,<empty>,,30,11,CPPASTProblemDeclaration,,<empty>
382009,UNKNOWN,-1,,template <> inline __device__ detail::uint3_member_type getBlockIdx<1>() { return blockIdx.y; },1,<empty>,,31,12,CPPASTProblemDeclaration,,<empty>
382010,UNKNOWN,-1,,template <> inline __device__ detail::uint3_member_type getBlockIdx<2>() { return blockIdx.z; },1,<empty>,,32,13,CPPASTProblemDeclaration,,<empty>
382011,UNKNOWN,-1,,template <int> __device__ detail::uint3_member_type getThreadIdx();,1,<empty>,,34,14,CPPASTProblemDeclaration,,<empty>
382012,UNKNOWN,-1,,template <> inline __device__ detail::uint3_member_type getThreadIdx<0>() { return threadIdx.x; },1,<empty>,,35,15,CPPASTProblemDeclaration,,<empty>
382013,UNKNOWN,-1,,template <> inline __device__ detail::uint3_member_type getThreadIdx<1>() { return threadIdx.y; },1,<empty>,,36,16,CPPASTProblemDeclaration,,<empty>
382014,UNKNOWN,-1,,template <> inline __device__ detail::uint3_member_type getThreadIdx<2>() { return threadIdx.z; },1,<empty>,,37,17,CPPASTProblemDeclaration,,<empty>
382042,UNKNOWN,-1,,__device__,9,<empty>,,21,1,CPPASTProblemDeclaration,,<empty>
382049,UNKNOWN,-1,,__device__,9,<empty>,,22,3,CPPASTProblemDeclaration,,<empty>
382056,UNKNOWN,-1,,__device__,9,<empty>,,23,5,CPPASTProblemDeclaration,,<empty>
382065,UNKNOWN,-1,,__device__,9,<empty>,,29,1,CPPASTProblemDeclaration,,<empty>
382072,UNKNOWN,-1,,__device__,9,<empty>,,30,3,CPPASTProblemDeclaration,,<empty>
382079,UNKNOWN,-1,,__device__,9,<empty>,,31,5,CPPASTProblemDeclaration,,<empty>
382101,UNKNOWN,-1,,template <class T> __device__ T abs(T val) { return (val < T(0) ? -val : val); },5,<empty>,,13,1,CPPASTProblemDeclaration,,<empty>
382102,UNKNOWN,-1,,template <> inline __device__ float abs(float val) { return fabsf(val); },5,<empty>,,14,2,CPPASTProblemDeclaration,,<empty>
382103,UNKNOWN,-1,,template <> inline __device__ double abs(double val) { return fabs(val); },5,<empty>,,15,3,CPPASTProblemDeclaration,,<empty>
382104,UNKNOWN,-1,,template <class T> __device__ T exp(T val);,5,<empty>,,17,4,CPPASTProblemDeclaration,,<empty>
382105,UNKNOWN,-1,,template <> inline __device__ __half exp(__half val) { return hexp(val); },5,<empty>,,19,5,CPPASTProblemDeclaration,,<empty>
382106,UNKNOWN,-1,,template <> inline __device__ float exp(float val) { return expf(val); },5,<empty>,,21,6,CPPASTProblemDeclaration,,<empty>
382107,UNKNOWN,-1,,template <> inline __device__ double exp(double val) { return ::exp(val); },5,<empty>,,22,7,CPPASTProblemDeclaration,,<empty>
382108,UNKNOWN,-1,,template <class T> __device__ T expm1(T val);,5,<empty>,,24,8,CPPASTProblemDeclaration,,<empty>
382109,UNKNOWN,-1,,template <> inline __device__ __half expm1(__half val) { return hexp(val) - __half(1); },5,<empty>,,26,9,CPPASTProblemDeclaration,,<empty>
382110,UNKNOWN,-1,,template <> inline __device__ float expm1(float val) { return expm1f(val); },5,<empty>,,28,10,CPPASTProblemDeclaration,,<empty>
382111,UNKNOWN,-1,,template <> inline __device__ double expm1(double val) { return ::expm1(val); },5,<empty>,,29,11,CPPASTProblemDeclaration,,<empty>
382112,UNKNOWN,-1,,"template <class T> __device__ T max(T x, T y) { return (x > y ? x : y); }",5,<empty>,,31,12,CPPASTProblemDeclaration,,<empty>
382113,UNKNOWN,-1,,"template <> inline __device__ float max(float x, float y) { return fmaxf(x, y); }",5,<empty>,,32,13,CPPASTProblemDeclaration,,<empty>
382114,UNKNOWN,-1,,"template <> inline __device__ double max(double x, double y) { return fmax(x, y); }",5,<empty>,,33,14,CPPASTProblemDeclaration,,<empty>
382115,UNKNOWN,-1,,"template <class T> __device__ T min(T x, T y) { return (x > y ? y : x); }",5,<empty>,,35,15,CPPASTProblemDeclaration,,<empty>
382116,UNKNOWN,-1,,"template <> inline __device__ float min(float x, float y) { return fminf(x, y); }",5,<empty>,,36,16,CPPASTProblemDeclaration,,<empty>
382117,UNKNOWN,-1,,"template <> inline __device__ double min(double x, double y) { return fmin(x, y); }",5,<empty>,,37,17,CPPASTProblemDeclaration,,<empty>
382118,UNKNOWN,-1,,template <class T> __device__ T log1p(T val);,5,<empty>,,39,18,CPPASTProblemDeclaration,,<empty>
382119,UNKNOWN,-1,,template <> inline __device__ __half log1p(__half val) { return hlog(__half(1) + val); },5,<empty>,,41,19,CPPASTProblemDeclaration,,<empty>
382120,UNKNOWN,-1,,template <> inline __device__ float log1p(float val) { return log1pf(val); },5,<empty>,,43,20,CPPASTProblemDeclaration,,<empty>
382121,UNKNOWN,-1,,template <class T> __device__ T log1pexp(T val);,5,<empty>,,45,21,CPPASTProblemDeclaration,,<empty>
382122,UNKNOWN,-1,,"template <> inline __device__ __half log1pexp(__half val) {
        if (val <= __half(-4.0))
            return exp(val);
        else if (val <= __half(8.0))
            return log1p(exp(val));
        else if (val <= __half(8.7))
            return val + exp(-val);
        else
            return val;
    }",5,<empty>,,47,22,CPPASTProblemDeclaration,,<empty>
382123,UNKNOWN,-1,,"template <> inline __device__ float log1pexp(float val) {
        if (val <= -20)
            return expf(val);
        else if (val <= 9.0)
            return log1pf(expf(val));
        else if (val <= 14.6)
            return val + exp(-val);
        else
            return val;
    }",5,<empty>,,58,23,CPPASTProblemDeclaration,,<empty>
382124,UNKNOWN,-1,,"template <> inline __device__ double log1pexp(double val) {
        if (val <= -37)
            return exp(val);
        else if (val <= 18)
            return log1p(exp(val));
        else if (val <= 33.3)
            return val + exp(-val);
        else
            return val;
    }",5,<empty>,,68,24,CPPASTProblemDeclaration,,<empty>
382125,UNKNOWN,-1,,template <class T> __device__ T tanh(T val);,5,<empty>,,79,25,CPPASTProblemDeclaration,,<empty>
382126,UNKNOWN,-1,,template <> inline __device__ __half tanh(__half val) { return tanhf(val); },5,<empty>,,81,26,CPPASTProblemDeclaration,,<empty>
382127,UNKNOWN,-1,,template <> inline __device__ float tanh(float val) { return tanhf(val); },5,<empty>,,83,27,CPPASTProblemDeclaration,,<empty>
382128,UNKNOWN,-1,,template <> inline __device__ double tanh(double val) { return ::tanh(val); },5,<empty>,,84,28,CPPASTProblemDeclaration,,<empty>
382129,UNKNOWN,-1,,"template <class T> __device__ T pow(T val, T exp);",5,<empty>,,86,29,CPPASTProblemDeclaration,,<empty>
382130,UNKNOWN,-1,,"template <> inline __device__ __half pow(__half val, __half exp) { return powf(val, exp); }",5,<empty>,,88,30,CPPASTProblemDeclaration,,<empty>
382131,UNKNOWN,-1,,"template <> inline __device__ float pow(float val, float exp) { return powf(val, exp); }",5,<empty>,,90,31,CPPASTProblemDeclaration,,<empty>
382132,UNKNOWN,-1,,"template <> inline __device__ double pow(double val, double exp) { return ::pow(val, exp); }",5,<empty>,,91,32,CPPASTProblemDeclaration,,<empty>
382133,UNKNOWN,-1,,template <class T> __device__ T sqrt(T val);,5,<empty>,,93,33,CPPASTProblemDeclaration,,<empty>
382134,UNKNOWN,-1,,template <> inline __device__ __half sqrt(__half val) { return hsqrt(val); },5,<empty>,,95,34,CPPASTProblemDeclaration,,<empty>
382135,UNKNOWN,-1,,template <> inline __device__ float sqrt(float val) { return sqrtf(val); },5,<empty>,,97,35,CPPASTProblemDeclaration,,<empty>
382136,UNKNOWN,-1,,template <> inline __device__ double sqrt(double val) { return ::sqrt(val); },5,<empty>,,98,36,CPPASTProblemDeclaration,,<empty>
382137,UNKNOWN,-1,,template <class T> __device__ T rsqrt(T val);,5,<empty>,,100,37,CPPASTProblemDeclaration,,<empty>
382138,UNKNOWN,-1,,template <> inline __device__ __half rsqrt(__half val) { return hrsqrt(val); },5,<empty>,,102,38,CPPASTProblemDeclaration,,<empty>
382139,UNKNOWN,-1,,template <> inline __device__ float rsqrt(float val) { return rsqrtf(val); },5,<empty>,,104,39,CPPASTProblemDeclaration,,<empty>
382140,UNKNOWN,-1,,template <> inline __device__ double rsqrt(double val) { return ::rsqrt(val); },5,<empty>,,105,40,CPPASTProblemDeclaration,,<empty>
382141,UNKNOWN,-1,,template <class T> __device__ T sigmoid(T val) { return T(1) / (T(1) + exp(-val)); },5,<empty>,,107,41,CPPASTProblemDeclaration,,<empty>
382142,UNKNOWN,-1,,"template <class T> __device__ T clamp(T value, T lower, T upper) { return min(max(value, lower), upper); }",5,<empty>,,109,42,CPPASTProblemDeclaration,,<empty>
382143,UNKNOWN,-1,,template <class T> __device__ long lround(T value);,5,<empty>,,111,43,CPPASTProblemDeclaration,,<empty>
382144,UNKNOWN,-1,,template <> inline __device__ long lround(double value) { return ::lround(value); },5,<empty>,,112,44,CPPASTProblemDeclaration,,<empty>
382145,UNKNOWN,-1,,template <> inline __device__ long lround(float value) { return lroundf(value); },5,<empty>,,113,45,CPPASTProblemDeclaration,,<empty>
382146,UNKNOWN,-1,,template <class T> __device__ T round(T value);,5,<empty>,,115,46,CPPASTProblemDeclaration,,<empty>
382147,UNKNOWN,-1,,template <> inline __device__ double round(double value) { return ::round(value); },5,<empty>,,116,47,CPPASTProblemDeclaration,,<empty>
382148,UNKNOWN,-1,,template <> inline __device__ float round(float value) { return roundf(value); },5,<empty>,,117,48,CPPASTProblemDeclaration,,<empty>
382149,UNKNOWN,-1,,template <> inline __device__ __half round(__half value) { return hrint(value); },5,<empty>,,119,49,CPPASTProblemDeclaration,,<empty>
382150,UNKNOWN,-1,,template <class T> __device__ T floor(T value);,5,<empty>,,122,50,CPPASTProblemDeclaration,,<empty>
382151,UNKNOWN,-1,,template <> inline __device__ double floor(double value) { return ::floor(value); },5,<empty>,,123,51,CPPASTProblemDeclaration,,<empty>
382152,UNKNOWN,-1,,template <> inline __device__ float floor(float value) { return floorf(value); },5,<empty>,,124,52,CPPASTProblemDeclaration,,<empty>
382153,UNKNOWN,-1,,template <> inline __device__ __half floor(__half value) { return hfloor(value); },5,<empty>,,126,53,CPPASTProblemDeclaration,,<empty>
382154,UNKNOWN,-1,,template <class T> __device__ T log(T value);,5,<empty>,,129,54,CPPASTProblemDeclaration,,<empty>
382155,UNKNOWN,-1,,template <> inline __device__ double log(double value) { return ::log(value); },5,<empty>,,130,55,CPPASTProblemDeclaration,,<empty>
382156,UNKNOWN,-1,,template <> inline __device__ float log(float value) { return logf(value); },5,<empty>,,131,56,CPPASTProblemDeclaration,,<empty>
382157,UNKNOWN,-1,,template <> inline __device__ __half log(__half value) { return hlog(value); },5,<empty>,,133,57,CPPASTProblemDeclaration,,<empty>
382158,UNKNOWN,-1,,template <class T> __device__ T rint(T value);,5,<empty>,,136,58,CPPASTProblemDeclaration,,<empty>
382159,UNKNOWN,-1,,template <> inline __device__ double rint(double value) { return ::rint(value); },5,<empty>,,137,59,CPPASTProblemDeclaration,,<empty>
382160,UNKNOWN,-1,,template <> inline __device__ float rint(float value) { return rintf(value); },5,<empty>,,138,60,CPPASTProblemDeclaration,,<empty>
382161,UNKNOWN,-1,,template <> inline __device__ __half rint(__half value) { return hrint(value); },5,<empty>,,140,61,CPPASTProblemDeclaration,,<empty>
382162,UNKNOWN,-1,,template <class T> __device__ T acos(T value);,5,<empty>,,143,62,CPPASTProblemDeclaration,,<empty>
382163,UNKNOWN,-1,,template <> inline __device__ double acos(double value) { return ::acos(value); },5,<empty>,,144,63,CPPASTProblemDeclaration,,<empty>
382164,UNKNOWN,-1,,template <> inline __device__ float acos(float value) { return acosf(value); },5,<empty>,,145,64,CPPASTProblemDeclaration,,<empty>
382165,UNKNOWN,-1,,template <> inline __device__ __half acos(__half value) { return acosf(value); },5,<empty>,,147,65,CPPASTProblemDeclaration,,<empty>
382166,UNKNOWN,-1,,template <class T> __device__ T acosh(T value);,5,<empty>,,150,66,CPPASTProblemDeclaration,,<empty>
382167,UNKNOWN,-1,,template <> inline __device__ double acosh(double value) { return ::acosh(value); },5,<empty>,,151,67,CPPASTProblemDeclaration,,<empty>
382168,UNKNOWN,-1,,template <> inline __device__ float acosh(float value) { return acoshf(value); },5,<empty>,,152,68,CPPASTProblemDeclaration,,<empty>
382169,UNKNOWN,-1,,template <> inline __device__ __half acosh(__half value) { return acoshf(value); },5,<empty>,,154,69,CPPASTProblemDeclaration,,<empty>
382170,UNKNOWN,-1,,template <class T> __device__ T asin(T value);,5,<empty>,,157,70,CPPASTProblemDeclaration,,<empty>
382171,UNKNOWN,-1,,template <> inline __device__ double asin(double value) { return ::asin(value); },5,<empty>,,158,71,CPPASTProblemDeclaration,,<empty>
382172,UNKNOWN,-1,,template <> inline __device__ float asin(float value) { return asinf(value); },5,<empty>,,159,72,CPPASTProblemDeclaration,,<empty>
382173,UNKNOWN,-1,,template <> inline __device__ __half asin(__half value) { return asinf(value); },5,<empty>,,161,73,CPPASTProblemDeclaration,,<empty>
382174,UNKNOWN,-1,,template <class T> __device__ T asinh(T value);,5,<empty>,,164,74,CPPASTProblemDeclaration,,<empty>
382175,UNKNOWN,-1,,template <> inline __device__ double asinh(double value) { return ::asinh(value); },5,<empty>,,165,75,CPPASTProblemDeclaration,,<empty>
382176,UNKNOWN,-1,,template <> inline __device__ float asinh(float value) { return asinhf(value); },5,<empty>,,166,76,CPPASTProblemDeclaration,,<empty>
382177,UNKNOWN,-1,,template <> inline __device__ __half asinh(__half value) { return asinhf(value); },5,<empty>,,168,77,CPPASTProblemDeclaration,,<empty>
382178,UNKNOWN,-1,,template <class T> __device__ T atan(T value);,5,<empty>,,171,78,CPPASTProblemDeclaration,,<empty>
382179,UNKNOWN,-1,,template <> inline __device__ double atan(double value) { return ::atan(value); },5,<empty>,,172,79,CPPASTProblemDeclaration,,<empty>
382180,UNKNOWN,-1,,template <> inline __device__ float atan(float value) { return atanf(value); },5,<empty>,,173,80,CPPASTProblemDeclaration,,<empty>
382181,UNKNOWN,-1,,template <> inline __device__ __half atan(__half value) { return atanf(value); },5,<empty>,,175,81,CPPASTProblemDeclaration,,<empty>
382182,UNKNOWN,-1,,template <class T> __device__ T atanh(T value);,5,<empty>,,178,82,CPPASTProblemDeclaration,,<empty>
382183,UNKNOWN,-1,,template <> inline __device__ double atanh(double value) { return ::atanh(value); },5,<empty>,,179,83,CPPASTProblemDeclaration,,<empty>
382184,UNKNOWN,-1,,template <> inline __device__ float atanh(float value) { return atanhf(value); },5,<empty>,,180,84,CPPASTProblemDeclaration,,<empty>
382185,UNKNOWN,-1,,template <> inline __device__ __half atanh(__half value) { return atanhf(value); },5,<empty>,,182,85,CPPASTProblemDeclaration,,<empty>
382186,UNKNOWN,-1,,template <class T> __device__ T cos(T value);,5,<empty>,,185,86,CPPASTProblemDeclaration,,<empty>
382187,UNKNOWN,-1,,template <> inline __device__ double cos(double value) { return ::cos(value); },5,<empty>,,186,87,CPPASTProblemDeclaration,,<empty>
382188,UNKNOWN,-1,,template <> inline __device__ float cos(float value) { return cosf(value); },5,<empty>,,187,88,CPPASTProblemDeclaration,,<empty>
382189,UNKNOWN,-1,,template <> inline __device__ __half cos(__half value) { return hcos(value); },5,<empty>,,189,89,CPPASTProblemDeclaration,,<empty>
382190,UNKNOWN,-1,,template <class T> __device__ T cosh(T value);,5,<empty>,,192,90,CPPASTProblemDeclaration,,<empty>
382191,UNKNOWN,-1,,template <> inline __device__ double cosh(double value) { return ::cosh(value); },5,<empty>,,193,91,CPPASTProblemDeclaration,,<empty>
382192,UNKNOWN,-1,,template <> inline __device__ float cosh(float value) { return coshf(value); },5,<empty>,,194,92,CPPASTProblemDeclaration,,<empty>
382193,UNKNOWN,-1,,template <> inline __device__ __half cosh(__half value) { return coshf(value); },5,<empty>,,196,93,CPPASTProblemDeclaration,,<empty>
382194,UNKNOWN,-1,,template <class T> __device__ T erf(T value);,5,<empty>,,199,94,CPPASTProblemDeclaration,,<empty>
382195,UNKNOWN,-1,,template <> inline __device__ double erf(double value) { return ::erf(value); },5,<empty>,,200,95,CPPASTProblemDeclaration,,<empty>
382196,UNKNOWN,-1,,template <> inline __device__ float erf(float value) { return erff(value); },5,<empty>,,201,96,CPPASTProblemDeclaration,,<empty>
382197,UNKNOWN,-1,,template <> inline __device__ __half erf(__half value) { return erff(value); },5,<empty>,,203,97,CPPASTProblemDeclaration,,<empty>
382198,UNKNOWN,-1,,template <class T> __device__ T sin(T value);,5,<empty>,,206,98,CPPASTProblemDeclaration,,<empty>
382199,UNKNOWN,-1,,template <> inline __device__ double sin(double value) { return ::sin(value); },5,<empty>,,207,99,CPPASTProblemDeclaration,,<empty>
382200,UNKNOWN,-1,,template <> inline __device__ float sin(float value) { return sinf(value); },5,<empty>,,208,100,CPPASTProblemDeclaration,,<empty>
382201,UNKNOWN,-1,,template <> inline __device__ __half sin(__half value) { return hsin(value); },5,<empty>,,210,101,CPPASTProblemDeclaration,,<empty>
382202,UNKNOWN,-1,,template <class T> __device__ T sinh(T value);,5,<empty>,,213,102,CPPASTProblemDeclaration,,<empty>
382203,UNKNOWN,-1,,template <> inline __device__ double sinh(double value) { return ::sinh(value); },5,<empty>,,214,103,CPPASTProblemDeclaration,,<empty>
382204,UNKNOWN,-1,,template <> inline __device__ float sinh(float value) { return sinhf(value); },5,<empty>,,215,104,CPPASTProblemDeclaration,,<empty>
382205,UNKNOWN,-1,,template <> inline __device__ __half sinh(__half value) { return sinhf(value); },5,<empty>,,217,105,CPPASTProblemDeclaration,,<empty>
382206,UNKNOWN,-1,,template <class T> __device__ T tan(T value);,5,<empty>,,220,106,CPPASTProblemDeclaration,,<empty>
382207,UNKNOWN,-1,,template <> inline __device__ double tan(double value) { return ::tan(value); },5,<empty>,,221,107,CPPASTProblemDeclaration,,<empty>
382208,UNKNOWN,-1,,template <> inline __device__ float tan(float value) { return tanf(value); },5,<empty>,,222,108,CPPASTProblemDeclaration,,<empty>
382209,UNKNOWN,-1,,template <> inline __device__ __half tan(__half value) { return tanf(value); },5,<empty>,,224,109,CPPASTProblemDeclaration,,<empty>
382210,UNKNOWN,-1,,template <class T> __device__ T ceil(T value);,5,<empty>,,227,110,CPPASTProblemDeclaration,,<empty>
382211,UNKNOWN,-1,,template <> inline __device__ double ceil(double value) { return ::ceil(value); },5,<empty>,,228,111,CPPASTProblemDeclaration,,<empty>
382212,UNKNOWN,-1,,template <> inline __device__ float ceil(float value) { return ceilf(value); },5,<empty>,,229,112,CPPASTProblemDeclaration,,<empty>
382213,UNKNOWN,-1,,template <> inline __device__ __half ceil(__half value) { return hceil(value); },5,<empty>,,231,113,CPPASTProblemDeclaration,,<empty>
382214,UNKNOWN,-1,,"template <class T> __device__ T mul_ftz(T x, T y) { return x * y; }",5,<empty>,,234,114,CPPASTProblemDeclaration,,<empty>
382215,UNKNOWN,-1,,"template <> inline __device__ float mul_ftz(float x, float y) {
        float result;
        asm(""mul.ftz.f32 %0, %1, %2;"" : ""=f""(result) : ""f""(x), ""f""(y));
        return result;
    }",5,<empty>,,235,115,CPPASTProblemDeclaration,,<empty>
382216,UNKNOWN,-1,,"template <class T> __device__ T fast_divide(T x, T y) { return x / y; }",5,<empty>,,241,116,CPPASTProblemDeclaration,,<empty>
382217,UNKNOWN,-1,,"template <> inline __device__ float fast_divide(float x, float y) { return __fdividef(x, y); }",5,<empty>,,242,117,CPPASTProblemDeclaration,,<empty>
382218,UNKNOWN,-1,,"template <class T> __device__ T fast_divide_ftz(T x, T y) { return fast_divide(x, y); }",5,<empty>,,244,118,CPPASTProblemDeclaration,,<empty>
382219,UNKNOWN,-1,,"template <> inline __device__ float fast_divide_ftz(float x, float y) {
        float result;
        asm(""div.approx.ftz.f32 %0, %1, %2;"" : ""=f""(result) : ""f""(x), ""f""(y));
        return result;
    }",5,<empty>,,245,119,CPPASTProblemDeclaration,,<empty>
382220,UNKNOWN,-1,,template <class T> __device__ T fast_exp(T value) { return exp(value); },5,<empty>,,251,120,CPPASTProblemDeclaration,,<empty>
382221,UNKNOWN,-1,,template <> inline __device__ float fast_exp(float value) { return __expf(value); },5,<empty>,,252,121,CPPASTProblemDeclaration,,<empty>
382222,UNKNOWN,-1,,template <class T> __device__ T fast_sigmoid(T value) { return sigmoid(value); },5,<empty>,,254,122,CPPASTProblemDeclaration,,<empty>
382223,UNKNOWN,-1,,"template <> inline __device__ float fast_sigmoid(float value) { return __fdividef(1, 1 + __expf(-value)); }",5,<empty>,,255,123,CPPASTProblemDeclaration,,<empty>
382236,UNKNOWN,-1,,"template <class T>
__device__ T load_ldg(const T& src) {
#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ >= 350)
    return __ldg(&src);
#else
    return src;
#endif
}",1,<empty>,,12,1,CPPASTProblemDeclaration,,<empty>
382237,UNKNOWN,-1,,"template <class T>
__device__ T load_ldg(const T* src) {
#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ >= 350)
    return __ldg(src);
#else
    return *src;
#endif
}",1,<empty>,,21,2,CPPASTProblemDeclaration,,<empty>
382307,UNKNOWN,-1,,__device__,9,<empty>,,62,4,CPPASTProblemDeclaration,,<empty>
382316,UNKNOWN,-1,,"template <class U> static __device__
        typename std::enable_if<std::is_const<U>::value, const vector_type*>
        ::type get_pointer(csl::DevicePtr<U> ptr) {
            return reinterpret_cast<const vector_type*>(ptr.get());
        }",9,<empty>,,67,8,CPPASTProblemDeclaration,,<empty>
382317,UNKNOWN,-1,,"template <class U> static __device__
        typename std::enable_if<!std::is_const<U>::value, vector_type*>
        ::type get_pointer(csl::DevicePtr<U> ptr) {
            return reinterpret_cast<vector_type*>(ptr.get());
        }",9,<empty>,,73,9,CPPASTProblemDeclaration,,<empty>
382324,UNKNOWN,-1,,"template <class V>
    __device__ void v_load(V& dest, const V& src) {
        dest.raw = src.raw;
    }",5,<empty>,,80,3,CPPASTProblemDeclaration,,<empty>
382325,UNKNOWN,-1,,"template <class V>
    __device__ void v_load(V& dest, const V* src) {
        dest.raw = src->raw;
    }",5,<empty>,,85,4,CPPASTProblemDeclaration,,<empty>
382326,UNKNOWN,-1,,"template <class V>
    __device__ void v_load_ldg(V& dest, const V& src) {
        dest.raw = load_ldg(src.raw);
    }",5,<empty>,,90,5,CPPASTProblemDeclaration,,<empty>
382327,UNKNOWN,-1,,"template <class V>
    __device__ void v_load_ldg(V& dest, const V* src) {
        dest.raw = load_ldg(src->raw);
    }",5,<empty>,,95,6,CPPASTProblemDeclaration,,<empty>
382328,UNKNOWN,-1,,"template <class V>
    __device__ void v_store(V* dest, const V& src) {
        dest->raw = src.raw;
    }",5,<empty>,,100,7,CPPASTProblemDeclaration,,<empty>
382329,UNKNOWN,-1,,"template <class V>
    __device__ void v_store(V& dest, const V& src) {
        dest.raw = src.raw;
    }",5,<empty>,,105,8,CPPASTProblemDeclaration,,<empty>
382356,UNKNOWN,-1,,CV__DNN_INLINE_NS_BEGIN,1,<empty>,,58,1,CPPASTProblemDeclaration,,<empty>
382626,UNKNOWN,1,,int,25,<empty>,,149,1,CPPASTTypeId,,<empty>
382704,UNKNOWN,1,,int,21,<empty>,,171,1,CPPASTTypeId,,<empty>
382879,UNKNOWN,1,,char*,32,<empty>,,229,1,CPPASTTypeId,,<empty>
382933,UNKNOWN,1,,const char*,49,<empty>,,250,1,CPPASTTypeId,,<empty>
382948,UNKNOWN,1,,const char*,51,<empty>,,252,1,CPPASTTypeId,,<empty>
382967,UNKNOWN,-1,,"CV__DNN_INLINE_NS_END
",1,<empty>,,257,7,CPPASTProblemDeclaration,,<empty>
383563,UNKNOWN,1,,float,60,<empty>,,271,1,CPPASTTypeId,,<empty>
383574,UNKNOWN,1,,float,59,<empty>,,272,1,CPPASTTypeId,,<empty>
383585,UNKNOWN,1,,float,60,<empty>,,273,1,CPPASTTypeId,,<empty>
383596,UNKNOWN,1,,float,59,<empty>,,274,1,CPPASTTypeId,,<empty>
386844,UNKNOWN,1,,char *,45,<empty>,,976,1,CPPASTTypeId,,<empty>
386854,UNKNOWN,1,,char *,45,<empty>,,977,1,CPPASTTypeId,,<empty>
386864,UNKNOWN,1,,char *,45,<empty>,,978,1,CPPASTTypeId,,<empty>
386884,UNKNOWN,1,,char *,49,<empty>,,982,1,CPPASTTypeId,,<empty>
386900,UNKNOWN,1,,char *,49,<empty>,,986,1,CPPASTTypeId,,<empty>
387188,UNKNOWN,1,,char *,53,<empty>,,1048,1,CPPASTTypeId,,<empty>
387205,UNKNOWN,1,,char *,57,<empty>,,1050,1,CPPASTTypeId,,<empty>
387219,UNKNOWN,1,,char *,57,<empty>,,1051,1,CPPASTTypeId,,<empty>
387233,UNKNOWN,1,,char *,57,<empty>,,1052,1,CPPASTTypeId,,<empty>
387247,UNKNOWN,1,,char *,53,<empty>,,1054,1,CPPASTTypeId,,<empty>
387558,UNKNOWN,-1,,CV__DNN_INLINE_NS_BEGIN,1,<empty>,,14,1,CPPASTProblemDeclaration,,<empty>
387728,UNKNOWN,-1,,"CV__DNN_INLINE_NS_END
",1,<empty>,,87,12,CPPASTProblemDeclaration,,<empty>
387749,UNKNOWN,-1,,CV__DNN_INLINE_NS_BEGIN,1,<empty>,,14,1,CPPASTProblemDeclaration,,<empty>
388076,UNKNOWN,-1,,CV__DNN_INLINE_NS_END,1,<empty>,,174,16,CPPASTProblemDeclaration,,<empty>
388101,UNKNOWN,-1,,CV__DNN_INLINE_NS_BEGIN,1,<empty>,,12,1,CPPASTProblemDeclaration,,<empty>
388138,UNKNOWN,1,,int,45,<empty>,,38,1,CPPASTTypeId,,<empty>
388145,UNKNOWN,1,,size_t,14,<empty>,,42,1,CPPASTTypeId,,<empty>
388196,UNKNOWN,-1,,"CV__DNN_INLINE_NS_END
",1,<empty>,,66,8,CPPASTProblemDeclaration,,<empty>
388206,UNKNOWN,-1,,CV__DNN_INLINE_NS_BEGIN,1,<empty>,,10,1,CPPASTProblemDeclaration,,<empty>
388634,UNKNOWN,-1,,"CV__DNN_INLINE_NS_END
",1,<empty>,,102,7,CPPASTProblemDeclaration,,<empty>
389325,UNKNOWN,1,,float,61,<empty>,,179,1,CPPASTTypeId,,<empty>
389334,UNKNOWN,1,,float,62,<empty>,,180,1,CPPASTTypeId,,<empty>
389405,UNKNOWN,1,,float,61,<empty>,,189,1,CPPASTTypeId,,<empty>
389414,UNKNOWN,1,,float,62,<empty>,,190,1,CPPASTTypeId,,<empty>
389599,UNKNOWN,1,,int,27,<empty>,,222,1,CPPASTTypeId,,<empty>
389735,UNKNOWN,1,,int,27,<empty>,,246,1,CPPASTTypeId,,<empty>
389831,UNKNOWN,1,,int,82,<empty>,,259,1,CPPASTTypeId,,<empty>
389848,UNKNOWN,1,,int,23,<empty>,,265,1,CPPASTTypeId,,<empty>
389958,UNKNOWN,1,,int,80,<empty>,,280,1,CPPASTTypeId,,<empty>
389980,UNKNOWN,1,,int,80,<empty>,,284,1,CPPASTTypeId,,<empty>
390523,UNKNOWN,1,,float,57,<empty>,,403,1,CPPASTTypeId,,<empty>
390532,UNKNOWN,1,,float,32,<empty>,,404,1,CPPASTTypeId,,<empty>
390629,UNKNOWN,1,,float,57,<empty>,,415,1,CPPASTTypeId,,<empty>
390638,UNKNOWN,1,,float,32,<empty>,,416,1,CPPASTTypeId,,<empty>
390771,UNKNOWN,1,,float,46,<empty>,,434,1,CPPASTTypeId,,<empty>
390786,UNKNOWN,1,,float,46,<empty>,,435,1,CPPASTTypeId,,<empty>
390801,UNKNOWN,1,,float,50,<empty>,,436,1,CPPASTTypeId,,<empty>
390816,UNKNOWN,1,,float,51,<empty>,,437,1,CPPASTTypeId,,<empty>
390830,UNKNOWN,-1,,"CV__DNN_INLINE_NS_END
",1,<empty>,,446,21,CPPASTProblemDeclaration,,<empty>
390921,UNKNOWN,1,,int,23,<empty>,,25,1,CPPASTTypeId,,<empty>
390972,UNKNOWN,1,,int,33,<empty>,,34,1,CPPASTTypeId,,<empty>
391037,UNKNOWN,1,,int,36,<empty>,,48,1,CPPASTTypeId,,<empty>
391045,UNKNOWN,1,,int,23,<empty>,,49,1,CPPASTTypeId,,<empty>
391197,UNKNOWN,1,,int,27,<empty>,,107,1,CPPASTTypeId,,<empty>
392309,UNKNOWN,-1,,CV__DNN_INLINE_NS_BEGIN,1,<empty>,,51,1,CPPASTProblemDeclaration,,<empty>
392766,UNKNOWN,-1,,"CV__DNN_INLINE_NS_END
",1,<empty>,,239,8,CPPASTProblemDeclaration,,<empty>
392784,UNKNOWN,-1,,"class BatchNormLayerInt8Impl CV_FINAL : public BatchNormLayerInt8
{
public:
    Mat origin_weights, origin_bias;
    Mat weights_, bias_;
    mutable int dims;

    BatchNormLayerInt8Impl(const LayerParams& params)
        : dims(-1)
    {
        setParamsFrom(params);
        useGlobalStats = params.get<bool>(""use_global_stats"", true);
        input_sc = params.get<float>(""input_scale"");
        input_zp = params.get<int>(""input_zeropoint"");
        output_sc = params.get<float>(""scales"");
        output_zp = params.get<int>(""zeropoints"");

        CV_Assert(blobs.size() == 2);
        size_t n = blobs[0].total();
        CV_Assert(blobs[1].total() == n &&
                  blobs[0].isContinuous() && blobs[1].isContinuous() &&
                  blobs[0].type() == CV_32F && blobs[1].type() == CV_32F);

        origin_weights = blobs[0];
        origin_bias = blobs[1];
    }

    virtual void finalize(InputArrayOfArrays, OutputArrayOfArrays) CV_OVERRIDE
    {
        origin_weights....",1,<empty>,,17,1,CPPASTProblemDeclaration,,<empty>
393015,UNKNOWN,-1,,),89,<empty>,,76,3,CPPASTProblemDeclaration,,<empty>
393016,UNKNOWN,-1,,"CV_OVERRIDE
    {
        std::vector<Mat> inputs, outputs;
        inputs_arr.getMatVector(inputs);
        outputs_arr.getMatVector(outputs);

        // blobs[0] - Weights (INT8)
        // blobs[1] - Biases (INT32)
        // blobs[2] - Multipliers for convolution output stage (FP32)
        CV_Assert(!inputs.empty() && blobs.size() == 3);
        MatSize weightShape = blobs[0].size;

        CV_Assert(inputs[0].dims == outputs[0].dims);
        if (weightShape.dims() == 3)
        {
            kernel_size.resize(1, kernel_size[0]);
            strides.resize(1, strides[0]);
            dilations.resize(1, dilations[0]);
            pads_begin.resize(1, pads_begin[0]);
            pads_end.resize(1, pads_end[0]);
        }
        CV_Assert(weightShape.dims() == kernel_size.size() + 2);
        for (int i = 0; i < kernel_size.size(); i++) {
            CV_Assert(weightShape[i + 2] == kernel_size[i]);
        }

        const Mat &input = inputs[0];
        CV_Assert(((input.dim...",91,<empty>,,76,4,CPPASTProblemDeclaration,,<empty>
393068,UNKNOWN,-1,,),41,<empty>,,137,8,CPPASTProblemDeclaration,,<empty>
393069,UNKNOWN,-1,,"CV_OVERRIDE
    {
        Mat w, b;
        top->getScaleShift(w, b);
        if (w.empty() && b.empty())
            return false;

        CV_Assert((w.empty() || w.type() == CV_32F) &&
                  (b.empty() || b.type() == CV_32F));

        float new_sc;
        int new_zp;
        top->getScaleZeropoint(new_sc, new_zp);
        fuseWeights(w, b, new_sc);
        output_sc = new_sc;
        output_zp = new_zp;
        return true;
    }",43,<empty>,,137,9,CPPASTProblemDeclaration,,<empty>
393077,UNKNOWN,-1,,"class ConvolutionLayerInt8Impl CV_FINAL : public BaseConvolutionLayerInt8Impl
{
public:
    enum { VEC_ALIGN = 32, DFT_TYPE = CV_8S };
    Mat weightsMat;
    std::vector<int> biasvec;
    std::vector<float> outputMultiplier;
    Mat activationLUT;
    Ptr<ActivationLayerInt8> activ;

    ConvolutionLayerInt8Impl(const LayerParams &params) : BaseConvolutionLayerInt8Impl(params){}

    MatShape computeColRowShape(const MatShape &inpShape, const MatShape &outShape) const CV_OVERRIDE
    {
        CV_Assert(!blobs.empty());
        int dims = inpShape.size();
        int inpD = dims == 5 ? inpShape[2] : 1;
        int inpH = inpShape[dims - 2];
        int inpW = inpShape.back();
        int inpGroupCn = blobs[0].size[1];
        int ksize = inpGroupCn * std::accumulate(kernel_size.begin(), kernel_size.end(),
                                                 1, std::multiplies<size_t>());
        return shape(inpD * inpH * inpW, ksize);
    }

    virtual bool supportBackend(int backend...",1,<empty>,,160,2,CPPASTProblemDeclaration,,<empty>
393110,UNKNOWN,-1,,"class ActivationLayerInt8Impl CV_FINAL : public ActivationLayerInt8
{
public:
    int input_zp, output_zp;
    float input_sc, output_sc;
    float slope = 0.0f;

#ifdef HAVE_TIMVX
    tvActivationType tvActType;
#endif
    ActivationLayerInt8Impl(const LayerParams &params)
    {
        setParamsFrom(params);
        activationLUT = !blobs.empty() ? blobs[0] : Mat();

        input_zp = params.get<int>(""input_zeropoint"");
        input_sc = params.get<float>(""input_scale"");
        output_zp = params.get<int>(""zeropoints"");
        output_sc = params.get<float>(""scales"");

        if (params.has(""slope""))
        {
            slope = params.get<float>(""slope"");
        }

#ifdef HAVE_TIMVX
        tvActType = getTimVXActType(type);
#endif

    }

    virtual bool supportBackend(int backendId) CV_OVERRIDE
    {
#ifdef HAVE_TIMVX
        if (backendId == DNN_BACKEND_TIMVX)
        {
            // TODO!: Leaky ReLU will be supported in future.
            if (tvActType == tvActReLU ...",1,<empty>,,18,1,CPPASTProblemDeclaration,,<empty>
393141,UNKNOWN,-1,,"class EltwiseLayerInt8Impl CV_FINAL : public EltwiseLayerInt8
{
public:
    enum EltwiseOp
    {
        PROD = 0,
        SUM = 1,
        MAX = 2
    } op;
    std::vector<float> coeffs;
    std::vector<int> zeropoints;
    std::vector<float> scales;

    int output_zp;
    float output_sc;

    enum OutputChannelsMode
    {
        ELTWISE_CHANNNELS_SAME = 0,              //!< number of channels from inputs must be the same and equal to output's number of channels
        ELTWISE_CHANNNELS_INPUT_0,               //!< number of channels from inputs may be different,
                                                 //!< output's number of channels is equal to number of channels of first input
                                                 //!< number of channels of other inputs should not be greater than number of channels of first input
        ELTWISE_CHANNNELS_INPUT_0_TRUNCATE,      //!< number of channels from inputs may be different,
                                         ...",1,<empty>,,16,1,CPPASTProblemDeclaration,,<empty>
393172,UNKNOWN,-1,,"class FullyConnectedLayerInt8Impl CV_FINAL : public InnerProductLayerInt8
{
public:
    enum { VEC_ALIGN = 32 };
    FullyConnectedLayerInt8Impl(const LayerParams& params)
    {
        setParamsFrom(params);

        input_sc = params.get<float>(""input_scale"");
        input_zp = params.get<int>(""input_zeropoint"");
        output_zp = params.get<int>(""zeropoints"");
        output_sc = params.get<float>(""scales"");
        axis = params.get<int>(""axis"", 1);
        per_channel = params.get<bool>(""per_channel"", true);

        if (blobs.size() == 3)
        {
            // blobs[0] - Weights
            // blobs[1] - Bias fused with offset
            // blobs[2] - Multipliers for output stage
            int numOutput = params.get<int>(""num_output"");
            int innerSize = (int)blobs[0].total() / numOutput;

            CV_Assert(blobs[0].dims >= 2 && (size_t)(innerSize * numOutput) == blobs[0].total());
            CV_Assert((size_t)numOutput == blobs[1].total());

           ...",1,<empty>,,17,1,CPPASTProblemDeclaration,,<empty>
393256,UNKNOWN,-1,,CV_CPU_OPTIMIZATION_NAMESPACE_BEGIN,1,<empty>,,9,1,CPPASTProblemDeclaration,,<empty>
393311,UNKNOWN,-1,,"CV_CPU_OPTIMIZATION_NAMESPACE_END
",1,<empty>,,1260,5,CPPASTProblemDeclaration,,<empty>
393335,UNKNOWN,-1,,"class PoolingLayerInt8Impl CV_FINAL : public PoolingLayerInt8
{
public:
    PoolingLayerInt8Impl(const LayerParams& params)
    {
        computeMaxIdx = false;
        globalPooling = false;
        isGlobalPooling = std::vector<bool>(3, false);
        output_zp = params.get<int>(""zeropoints"", 0);
        input_zp = params.get<int>(""input_zeropoint"", output_zp);
        multiplier = params.get<float>(""multiplier"", 1.f);

        output_sc = params.get<float>(""scales"", 1.f);
        input_sc =  multiplier * output_sc;

        hasDynamicShapes = params.get<bool>(""has_dynamic_shapes"", false);
        shapesInitialized = !hasDynamicShapes;

        if (params.has(""pool"") || params.has(""kernel_size"") ||
            params.has(""kernel_w"") || params.has(""kernel_h""))
        {
            String pool = toLowerCase(params.get<String>(""pool"", ""max""));
            if (pool == ""max"")
                type = MAX;
            else if (pool == ""ave"")
                type = AVE;
            else ...",1,<empty>,,22,1,CPPASTProblemDeclaration,,<empty>
393570,UNKNOWN,1,,float,21,<empty>,,57,1,CPPASTTypeId,,<empty>
393584,UNKNOWN,-1,,"class QuantizeLayerImpl CV_FINAL : public QuantizeLayer
{
public:
    int axis;
    bool is1D;
    Mat scalesMat, zeropointsMat; // Saving the broadcasetd scales data.

    QuantizeLayerImpl(const LayerParams& params)
    {
        is1D = params.get<bool>(""is1D"", false);
        axis = params.get<int>(""axis"", 1);
        if (!is1D)
        {
            scales.push_back(params.get<float>(""scales"", 1.0f));
            zeropoints.push_back(params.get<int>(""zeropoints"", 0));
        }
        else
        {
            DictValue paramScales = params.get(""scales"");
            int i, n = paramScales.size();

            CV_Assert(n > 0);
            scales.resize(n, 0.);
            for (i = 0; i < n; i++)
                scales[i] = paramScales.get<float>(i);

            zeropoints.resize(n, 0);
            DictValue paramZp = params.get(""zeropoints"");
            n = paramZp.size();

            for (i = 0; i < n; i++)
                zeropoints[i] = paramZp.get<int>(i);
        }
  ...",1,<empty>,,64,3,CPPASTProblemDeclaration,,<empty>
393585,UNKNOWN,-1,,"class DequantizeLayerImpl CV_FINAL : public DequantizeLayer
{
public:
    int axis;
    bool is1D;
    Mat scalesMat, zeropointsMat; // Saving the broadcasetd scales data.

    DequantizeLayerImpl(const LayerParams& params)
    {
        is1D = params.get<bool>(""is1D"", false);
        axis = params.get<int>(""axis"", 1);

        if (!is1D)
        {
            scales.push_back(params.get<float>(""scales"", 1.0f));
            zeropoints.push_back(params.get<int>(""zeropoints"", 0));
        }
        else
        {
            DictValue paramScales = params.get(""scales"");
            int i, n = paramScales.size();

            CV_Assert(n > 0);
            scales.resize(n);
            for (i = 0; i < n; i++)
                scales[i] = paramScales.get<float>(i);

            zeropoints.resize(n, 0);
            DictValue paramZp = params.get(""zeropoints"");
            n = paramZp.size();

            for (i = 0; i < n; i++)
                zeropoints[i] = paramZp.get<int>(i);
        }...",1,<empty>,,189,4,CPPASTProblemDeclaration,,<empty>
393586,UNKNOWN,-1,,"class RequantizeLayerImpl CV_FINAL : public RequantizeLayer
{
public:
    bool isEltwise;
    RequantizeLayerImpl(const LayerParams& params)
    {
        scale = params.get<float>(""scale"", 1.f);
        shift = params.get<float>(""shift"", 0.f);
        isEltwise = params.get<bool>(""isEltwise"", false);
        setParamsFrom(params);
    }

    virtual bool supportBackend(int backendId) CV_OVERRIDE
    {
        if (backendId == DNN_BACKEND_TIMVX && haveTimVX() && !isEltwise)
        {
            return true;
        }
        return backendId == DNN_BACKEND_OPENCV;
    }

    bool getMemoryShapes(const std::vector<MatShape> &inputs,
                         const int requiredOutputs,
                         std::vector<MatShape> &outputs,
                         std::vector<MatShape> &internals) const CV_OVERRIDE
    {
        CV_Assert(inputs.size() == 1);
        Layer::getMemoryShapes(inputs, requiredOutputs, outputs, internals);
        return false;
    }

    virtual void fi...",1,<empty>,,313,5,CPPASTProblemDeclaration,,<empty>
393643,UNKNOWN,-1,,"class ScaleLayerInt8Impl CV_FINAL : public ScaleLayerInt8
{
public:
    Mat weights, bias;
    ScaleLayerInt8Impl(const LayerParams& params)
    {
        setParamsFrom(params);
        hasBias = params.get<bool>(""bias_term"", false);
        axis = params.get<int>(""axis"", 1);
        hasWeights = false;

        output_sc = params.get<float>(""scales"");
        output_zp = params.get<int>(""zeropoints"");

        DictValue inpSc = params.get(""input_scales"");
        DictValue inpZp = params.get(""input_zeropoints"");

        for (int i = 0; i < inpSc.size(); i++)
        {
            inp_sc.push_back(inpSc.get<float>(i));
            inp_zp.push_back(inpZp.get<int>(i));
        }
    }

    bool getMemoryShapes(const std::vector<MatShape> &inputs,
                         const int requiredOutputs,
                         std::vector<MatShape> &outputs,
                         std::vector<MatShape> &internals) const CV_OVERRIDE
    {
        outputs.assign(1, inputs[0]);
        ret...",1,<empty>,,16,1,CPPASTProblemDeclaration,,<empty>
393710,UNKNOWN,-1,,"class SoftMaxLayerInt8Impl CV_FINAL : public SoftmaxLayerInt8
{
public:
    float input_sc;
    int input_zp;

    SoftMaxLayerInt8Impl(const LayerParams& params)
    {
        setParamsFrom(params);

        axis = params.get<int>(""axis"", 1);
        logSoftMax = params.get<bool>(""log_softmax"", false);
        coerced_2d = params.get<bool>(""coerced_2d"", false);

        input_sc = params.get<float>(""input_scale"");
        input_zp = params.get<int>(""input_zeropoint"");

        output_sc = params.get<float>(""scales"");
        output_zp = params.get<int>(""zeropoints"");

        if (blobs.empty()) // if no lookUpTable is found
        {
            Mat lookUpTable(1, 256, CV_32F);
            float* table = lookUpTable.ptr<float>();
            for (int i = -128; i < 128; i++)
            {
                float x = input_sc * (i - 127); // ensures exp(x) is always between (0, 1)
                table[i + 128] = std::exp(x);
            }
            blobs.push_back(lookUpTable);
    ...",1,<empty>,,18,1,CPPASTProblemDeclaration,,<empty>
393995,UNKNOWN,1,,T*,28,<empty>,,125,1,CPPASTTypeId,,<empty>
394012,UNKNOWN,1,,InputArrayOfArrays,21,<empty>,,131,1,CPPASTTypeId,,<empty>
394015,UNKNOWN,1,,OutputArrayOfArrays,49,<empty>,,131,1,CPPASTTypeId,,<empty>
394459,UNKNOWN,1,,int,47,<empty>,,256,1,CPPASTTypeId,,<empty>
394478,UNKNOWN,-1,,"CV__DNN_INLINE_NS_END
",1,<empty>,,265,33,CPPASTProblemDeclaration,,<empty>
394490,UNKNOWN,-1,,CV__DNN_INLINE_NS_BEGIN,1,<empty>,,12,1,CPPASTProblemDeclaration,,<empty>
394767,UNKNOWN,-1,,"CV__DNN_INLINE_NS_END
",1,<empty>,,108,9,CPPASTProblemDeclaration,,<empty>
394775,UNKNOWN,-1,,CV__DNN_INLINE_NS_BEGIN,1,<empty>,,9,1,CPPASTProblemDeclaration,,<empty>
394961,UNKNOWN,-1,,),46,<empty>,,135,3,CPPASTProblemDeclaration,,<empty>
394962,UNKNOWN,-1,,"CV_OVERRIDE
    {
        return backendId == DNN_BACKEND_OPENCV;
    }",48,<empty>,,135,4,CPPASTProblemDeclaration,,<empty>
394970,UNKNOWN,-1,,),115,<empty>,,140,6,CPPASTProblemDeclaration,,<empty>
394971,UNKNOWN,-1,,"CV_OVERRIDE
    {
        CV_TRACE_FUNCTION();
        CV_TRACE_ARG_VALUE(name, ""name"", name.c_str());

        // FIXIT: add wrapper without exception suppression
        CV_OCL_RUN(IS_DNN_OPENCL_TARGET(preferableTarget),
                forward_ocl(inputs_arr, outputs_arr, internals_arr))

        bool isFP16 = outputs_arr.depth() == CV_16S;

        std::vector<Mat> outputs, internals;
        outputs_arr.getMatVector(outputs);
        internals_arr.getMatVector(internals);

        for (int i = 0; i < inputsData.size(); ++i)
        {
            double scale = scaleFactors[i];
            Scalar& mean = means[i];

            CV_Assert(mean == Scalar() || inputsData[i].size[1] <= 4);
            if (isFP16)
                CV_CheckTypeEQ(outputs[i].type(), CV_16SC1, """");
            else
                CV_CheckTypeEQ(outputs[i].type(), CV_32FC1, """");

            bool singleMean = true;
            for (int j = 1; j < std::min(4, inputsData[i].size[1]) && singleMean; ++j)
    ...",117,<empty>,,140,7,CPPASTProblemDeclaration,,<empty>
394977,UNKNOWN,-1,,),48,<empty>,,280,9,CPPASTProblemDeclaration,,<empty>
394978,UNKNOWN,-1,,"CV_OVERRIDE
    {
        int idx = (int)(std::find(outNames.begin(), outNames.end(), tgtName) - outNames.begin());
        return (idx < (int)outNames.size()) ? idx : -1;
    }",50,<empty>,,280,10,CPPASTProblemDeclaration,,<empty>
395041,UNKNOWN,1,,int,20,<empty>,,297,1,CPPASTTypeId,,<empty>
395052,UNKNOWN,1,,int,26,<empty>,,299,1,CPPASTTypeId,,<empty>
395081,UNKNOWN,-1,,t,51,<empty>,,307,14,CPPASTProblemDeclaration,,<empty>
395082,UNKNOWN,-1,,"CV_OVERRIDE
    {
        CV_Assert(inputs.size() == requiredOutputs);
        outputs.assign(inputs.begin(), inputs.end());
        return false;
    }",53,<empty>,,307,15,CPPASTProblemDeclaration,,<empty>
395089,UNKNOWN,-1,,),78,<empty>,,314,17,CPPASTProblemDeclaration,,<empty>
395090,UNKNOWN,-1,,"CV_OVERRIDE
    {
        std::vector<Mat> outputs;
        outputs_arr.getMatVector(outputs);

        CV_Assert_N(outputs.size() == scaleFactors.size(), outputs.size() == means.size(),
                inputsData.size() == outputs.size());
        skip = true;
        for (int i = 0; skip && i < inputsData.size(); ++i)
        {
            if (inputsData[i].data != outputs[i].data || scaleFactors[i] != 1.0 || means[i] != Scalar())
                skip = false;
        }
    }",80,<empty>,,314,18,CPPASTProblemDeclaration,,<empty>
395097,UNKNOWN,-1,,"CV__DNN_INLINE_NS_END
",1,<empty>,,341,3,CPPASTProblemDeclaration,,<empty>
395109,UNKNOWN,-1,,"class AccumLayerImpl CV_FINAL : public AccumLayer
{
public:
    AccumLayerImpl(const LayerParams& params)
    {
        setParamsFrom(params);
        top_height = params.get<int>(""top_height"", 0);
        top_width = params.get<int>(""top_width"", 0);
        divisor = params.get<int>(""size_divisible_by"", 0);
        have_reference = params.get<String>(""have_reference"", ""false"") == ""true"";
    }

    virtual bool getMemoryShapes(const std::vector<MatShape> &inputs,
                                 const int requiredOutputs,
                                 std::vector<MatShape> &outputs,
                                 std::vector<MatShape> &internals) const CV_OVERRIDE
    {
        std::vector<int> outShape;
        int batch = inputs[0][0];
        outShape.push_back(batch);

        if (have_reference)
        {
            CV_Assert(inputs.size() >= 2);
            int totalchannels = 0;
            for (int i = 0; i < inputs.size() - 1; i++) {
                CV_Assert(inputs[...",1,<empty>,,14,1,CPPASTProblemDeclaration,,<empty>
395134,UNKNOWN,-1,,"class ArgLayerImpl CV_FINAL : public ArgLayer
{
public:
    enum class ArgOp
    {
        MIN = 0,
        MAX = 1,
    };

    ArgLayerImpl(const LayerParams& params)
    {
        setParamsFrom(params);

        axis = params.get<int>(""axis"", 0);
        keepdims = (params.get<int>(""keepdims"", 1) == 1);
        select_last_index = (params.get<int>(""select_last_index"", 0) == 1);

        const std::string& argOp = params.get<std::string>(""op"");

        if (argOp == ""max"")
        {
            op = ArgOp::MAX;
        }
        else if (argOp == ""min"")
        {
            op = ArgOp::MIN;
        }
        else
        {
            CV_Error(Error::StsBadArg, ""Unsupported operation"");
        }
    }

    virtual bool supportBackend(int backendId) CV_OVERRIDE
    {
        return backendId == DNN_BACKEND_OPENCV && preferableTarget == DNN_TARGET_CPU;
    }

    void handleKeepDims(MatShape& shape, const int axis_) const
    {
        if (keepdims)
        {
            shape[axi...",1,<empty>,,11,1,CPPASTProblemDeclaration,,<empty>
395226,UNKNOWN,-1,,"class AttentionLayerImpl CV_FINAL : public AttentionLayer {
 public:
    AttentionLayerImpl(const LayerParams &params) {
        setParamsFrom(params);

        CV_CheckTrue(params.has(""num_heads""), ""DNN/Attention: num_heads is required but missing"");
        num_heads = params.get<int>(""num_heads""); // required, no default value

        CV_CheckTrue(params.has(""qkv_hidden_sizes""), ""DNN/Attention: qkv_hidden_sizes is required but missing"");
        auto param_qkv_hidden_sizes = params.get(""qkv_hidden_sizes"");
        CV_CheckEQ(param_qkv_hidden_sizes.size(), 3, ""DNN/Attention: qkv_hidden_sizes must and only have three elements"");

        qkv_hidden_sizes.clear();
        qkv_hidden_sizes.resize(3);
        qkv_hidden_sizes[0] = static_cast<size_t>(param_qkv_hidden_sizes.get<int>(0));
        qkv_hidden_sizes[1] = static_cast<size_t>(param_qkv_hidden_sizes.get<int>(1));
        /* v_hidden_size needs to be initialized in finalize in case v_slice_end=INT_MAX */

        qkv_head_siz...",1,<empty>,,28,2,CPPASTProblemDeclaration,,<empty>
395267,UNKNOWN,-1,,"class BatchNormLayerImpl CV_FINAL : public BatchNormLayer
{
public:
    Mat origin_weights, origin_bias;
    Mat weights_, bias_;
    UMat umat_weight, umat_bias;
    mutable int dims;
    float momentum;


    BatchNormLayerImpl(const LayerParams& params)
        : dims(-1)
    {
        setParamsFrom(params);
        CV_Assert(blobs.size() >= 2);

        hasWeights = params.get<bool>(""has_weight"", false);
        hasBias = params.get<bool>(""has_bias"", false);
        useGlobalStats = params.get<bool>(""use_global_stats"", true);
        if(params.get<bool>(""scale_bias"", false))
            hasWeights = hasBias = true;
        epsilon = params.get<float>(""eps"", 1E-5);

        // std::cout << params.get<float>(""momentum"", 0.9) << std::endl;
        momentum = params.get<float>(""momentum"", 0.9);

        size_t n = blobs[0].total();
        CV_Assert(blobs[1].total() == n &&
                  blobs[0].isContinuous() && blobs[1].isContinuous() &&
                  blobs[0].type() == C...",1,<empty>,,37,1,CPPASTProblemDeclaration,,<empty>
395300,UNKNOWN,-1,,"class BlankLayerImpl CV_FINAL : public BlankLayer
{
public:
    BlankLayerImpl(const LayerParams& params)
    {
        setParamsFrom(params);
    }

    virtual bool supportBackend(int backendId) CV_OVERRIDE
    {
#ifdef HAVE_INF_ENGINE
        if (backendId == DNN_BACKEND_INFERENCE_ENGINE_NGRAPH)
            return true;
#endif
        return backendId == DNN_BACKEND_OPENCV ||
               backendId == DNN_BACKEND_CUDA ||
               backendId == DNN_BACKEND_CANN;
    }

    bool getMemoryShapes(const std::vector<MatShape> &inputs,
                         const int requiredOutputs,
                         std::vector<MatShape> &outputs,
                         std::vector<MatShape> &internals) const CV_OVERRIDE
    {
        Layer::getMemoryShapes(inputs, requiredOutputs, outputs, internals);
        return true;
    }

#ifdef HAVE_OPENCL
    bool forward_ocl(InputArrayOfArrays inputs_, OutputArrayOfArrays outputs_, OutputArrayOfArrays internals_)
    {
        std::vector...",1,<empty>,,57,1,CPPASTProblemDeclaration,,<empty>
395396,UNKNOWN,-1,,"class ConcatLayerImpl CV_FINAL : public ConcatLayer
{
public:
    ConcatLayerImpl(const LayerParams& params)
    {
        setParamsFrom(params);
        axis = params.get<int>(""axis"", 1);
        padding = params.get<bool>(""padding"", false);
        paddingValue = params.get<int>(""padding_value"", 0);

        zeropoint = params.get<int>(""zeropoints"", 0);
        scale = params.get<float>(""scales"", 1.0f);
    }

    virtual bool getMemoryShapes(const std::vector<MatShape> &inputs,
                                 const int requiredOutputs,
                                 std::vector<MatShape> &outputs,
                                 std::vector<MatShape> &internals) const CV_OVERRIDE
    {
        CV_Assert(inputs.size() > 0);
        outputs.resize(1, inputs[0]);
        int cAxis = normalize_axis(axis, inputs[0]);

        int axisSum = 0;
        for (size_t i = 0; i < inputs.size(); i++)
        {
            MatShape curShape = inputs[i];

            if (padding)
          ...",1,<empty>,,68,1,CPPASTProblemDeclaration,,<empty>
395437,UNKNOWN,-1,,"class ConstLayerImpl CV_FINAL : public ConstLayer
{
public:
    ConstLayerImpl(const LayerParams& params)
    {
        setParamsFrom(params);
        CV_Assert(blobs.size() == 1);
    }

    virtual bool supportBackend(int backendId) CV_OVERRIDE
    {
#ifdef HAVE_INF_ENGINE
        if (backendId == DNN_BACKEND_INFERENCE_ENGINE_NGRAPH)
            return true;
#endif
        return backendId == DNN_BACKEND_OPENCV ||
               backendId == DNN_BACKEND_WEBNN ||
               backendId == DNN_BACKEND_CUDA ||
               backendId == DNN_BACKEND_CANN;
    }

    virtual bool getMemoryShapes(const std::vector<MatShape> &inputs,
                                 const int requiredOutputs,
                                 std::vector<MatShape> &outputs,
                                 std::vector<MatShape> &internals) const CV_OVERRIDE
    {
        CV_Assert(inputs.empty());
        outputs.assign(1, shape(blobs[0]));
        return false;
    }

#ifdef HAVE_OPENCL
    bool forwa...",1,<empty>,,29,1,CPPASTProblemDeclaration,,<empty>
395633,UNKNOWN,-1,,),89,<empty>,,118,7,CPPASTProblemDeclaration,,<empty>
395634,UNKNOWN,-1,,"CV_OVERRIDE
    {
        std::vector<Mat> inputs, outputs;
        inputs_arr.getMatVector(inputs);
        outputs_arr.getMatVector(outputs);

        CV_Assert((inputs.size() > outputs.size() && blobs.empty()) ||
                  (!inputs.empty() && (blobs.size() == 1 || blobs.size() == 2)));
        MatSize weightShape = blobs.empty() ? inputs[1].size : blobs[0].size;

        CV_Assert(inputs[0].dims == outputs[0].dims);
        if (weightShape.dims() == 3)
        {
            kernel_size.resize(1, kernel_size[0]);
            strides.resize(1, strides[0]);
            dilations.resize(1, dilations[0]);
            pads_begin.resize(1, pads_begin[0]);
            pads_end.resize(1, pads_end[0]);
        }
        CV_Assert(weightShape.dims() == kernel_size.size() + 2);
        for (int i = 0; i < kernel_size.size(); i++) {
            CV_Assert(weightShape[i + 2] == kernel_size[i]);
        }

        const Mat &input = inputs[0];
        CV_Assert(((input.dims == 3 && kerne...",91,<empty>,,118,8,CPPASTProblemDeclaration,,<empty>
395697,UNKNOWN,-1,,),41,<empty>,,180,13,CPPASTProblemDeclaration,,<empty>
395698,UNKNOWN,-1,,"CV_OVERRIDE
    {
        if (fusedAdd)   // If the Conv layer has fused Add layer, it cannot fuse other layers.
            return false;

        Ptr<BlankLayer> blank_layer = top.dynamicCast<BlankLayer>();
        if (blank_layer)
            return true;

        Mat w, b;
        top->getScaleShift(w, b);
        if (!w.empty() || !b.empty())
        {
            fuseWeights(w, b);
            fusedWeights = fusedWeights || !w.empty();
            fusedBias = fusedBias || (hasBias() && !w.empty()) || !b.empty();
            return true;
        }
        return false;
    }",43,<empty>,,180,14,CPPASTProblemDeclaration,,<empty>
395713,UNKNOWN,-1,,t,57,<empty>,,206,17,CPPASTProblemDeclaration,,<empty>
395714,UNKNOWN,-1,,"CV_OVERRIDE
    {
#ifdef HAVE_HALIDE
        if (targetId != DNN_TARGET_CPU)
        {
            Layer::applyHalideScheduler(node, inputs, outputs, targetId);
            return;
        }
        Halide::Var x(""x""), y(""y""), c(""c""), n(""n""), tile(""tile""), yi(""yi""), yo(""yo""), co(""co""), ci(""ci"");
        Halide::Func& top = node.dynamicCast<HalideBackendNode>()->funcs[1];
        Halide::Func& padded_input = node.dynamicCast<HalideBackendNode>()->funcs[0];

        int outW, outH, outC, outN;
        getCanonicalSize(outputs[0].size, &outW, &outH, &outC, &outN);

        if (outW == 1 || outH <= 2)
            return;

        if (is1x1() || outC <= 16)
            top.reorder(x, c, y)
               .split(y, yo, yi, 2)
               .fuse(yo, n, tile)
               .parallel(tile)
               .unroll(yi)
               .vectorize(x, outW >= 16 ? 16 : outW);
        else
            top.reorder(x, c, y)
               .split(y, yo, yi, 2)
               .split(c, co, ci, 16)
  ...",59,<empty>,,206,18,CPPASTProblemDeclaration,,<empty>
395715,UNKNOWN,-1,,"class ConvolutionLayerImpl CV_FINAL : public BaseConvolutionLayerImpl
{
public:
    enum { VEC_ALIGN = 8, DFT_TYPE = CV_32F };
    Mat weightsMat;  // Used to store weight params. It will be used for layer fusion and memory alignment.
    std::vector<float> biasvec;
    std::vector<float> reluslope;
    Ptr<ActivationLayer> activ;

    Ptr<FastConv> fastConvImpl;

#ifdef HAVE_OPENCL
    Ptr<OCL4DNNConvSpatial<float> > convolutionOp;
    std::vector<UMat> umat_blobs;
    bool newActiv;
    ocl4dnnFusedActiv_t activType;
    float power;
#endif

#ifdef HAVE_CUDA
    cuda4dnn::ConvolutionConfiguration::FusionMode cudaFusionMode;
    cuda4dnn::ConvolutionConfiguration::ActivationType cudaActType;
    float cuda_relu_slope, cuda_crelu_floor, cuda_crelu_ceil;
    float cuda_power_exp, cuda_power_scale, cuda_power_shift;
#endif

    ConvolutionLayerImpl(const LayerParams &params) : BaseConvolutionLayerImpl(params)
    {
#ifdef HAVE_OPENCL
        newActiv = false;
        activType = OCL4D...",1,<empty>,,246,2,CPPASTProblemDeclaration,,<empty>
395716,UNKNOWN,-1,,"class DeConvolutionLayerImpl CV_FINAL : public BaseConvolutionLayerImpl
{
public:
    Mat weightsMat, biasesMat;
    UMat umat_weights;
    UMat umat_biases;

    DeConvolutionLayerImpl(const LayerParams& params) : BaseConvolutionLayerImpl(params) {}

    MatShape computeColRowShape(const MatShape &inpShape, const MatShape &outShape) const CV_OVERRIDE
    {
        int dims = inpShape.size();
        int inpCn = inpShape[1];
        int inpD = dims == 5 ? inpShape[2] : 1;
        int inpH = inpShape[dims - 2];
        int inpW = inpShape.back();
        int outCn = outShape[1];
        int ngroups = inpCn / blobs[0].size[0];
        int outGroupCn = outCn / ngroups;
        int ksize = outGroupCn * std::accumulate(kernel_size.begin(), kernel_size.end(),
                                                 1, std::multiplies<size_t>());
        return shape(ksize, inpD * inpH * inpW);
    }

    virtual bool supportBackend(int backendId) CV_OVERRIDE
    {
        if (backendId == DNN_BAC...",1,<empty>,,1462,3,CPPASTProblemDeclaration,,<empty>
395756,UNKNOWN,-1,,"class CorrelationLayerImpl CV_FINAL : public CorrelationLayer
{
public:
    CorrelationLayerImpl(const LayerParams& params)
    {
        setParamsFrom(params);
        pad = params.get<int>(""pad"", 0);
        CV_Assert_N(params.has(""kernel_size""), params.has(""max_displacement""));
        max_displacement = params.get<int>(""max_displacement"");
        kernel = params.get<int>(""kernel_size"");
        if (kernel % 2 == 0)
            CV_Error(Error::StsNotImplemented, ""Odd kernel size required."");

        stride_1 = params.get<int>(""stride_1"", 1);
        stride_2 = params.get<int>(""stride_2"", 1);
    }

    virtual bool getMemoryShapes(const std::vector<MatShape> &inputs,
                                 const int requiredOutputs,
                                 std::vector<MatShape> &outputs,
                                 std::vector<MatShape> &internals) const CV_OVERRIDE
    {
        CV_Assert_N(inputs.size() == 2, inputs[0].size() == 4, inputs[1].size() == 4);

        int ...",1,<empty>,,14,1,CPPASTProblemDeclaration,,<empty>
395779,UNKNOWN,-1,,CV_CPU_OPTIMIZATION_NAMESPACE_BEGIN,1,<empty>,,9,1,CPPASTProblemDeclaration,,<empty>
395821,UNKNOWN,-1,,"CV_CPU_OPTIMIZATION_NAMESPACE_END
",1,<empty>,,725,5,CPPASTProblemDeclaration,,<empty>
395923,UNKNOWN,1,,int,52,<empty>,,137,1,CPPASTTypeId,,<empty>
396177,UNKNOWN,1,,size_t,35,<empty>,,58,1,CPPASTTypeId,,<empty>
396184,UNKNOWN,1,,size_t,35,<empty>,,59,1,CPPASTTypeId,,<empty>
397354,UNKNOWN,-1,,CV_CPU_OPTIMIZATION_NAMESPACE_BEGIN,1,<empty>,,9,1,CPPASTProblemDeclaration,,<empty>
397377,UNKNOWN,-1,,"CV_CPU_OPTIMIZATION_NAMESPACE_END
",1,<empty>,,590,3,CPPASTProblemDeclaration,,<empty>
397431,UNKNOWN,-1,,CV_CPU_OPTIMIZATION_NAMESPACE_BEGIN,1,<empty>,,9,1,CPPASTProblemDeclaration,,<empty>
397506,UNKNOWN,-1,,"CV_CPU_OPTIMIZATION_NAMESPACE_END
",1,<empty>,,916,8,CPPASTProblemDeclaration,,<empty>
398196,UNKNOWN,1,,size_t,45,<empty>,,1341,1,CPPASTTypeId,,<empty>
398506,UNKNOWN,1,,float *,30,<empty>,,1382,1,CPPASTTypeId,,<empty>
398516,UNKNOWN,1,,char*,31,<empty>,,1383,1,CPPASTTypeId,,<empty>
398524,UNKNOWN,1,,int,21,<empty>,,1385,1,CPPASTTypeId,,<empty>
398528,UNKNOWN,1,,size_t,27,<empty>,,1385,1,CPPASTTypeId,,<empty>
398536,UNKNOWN,1,,int,21,<empty>,,1386,1,CPPASTTypeId,,<empty>
398540,UNKNOWN,1,,size_t,27,<empty>,,1386,1,CPPASTTypeId,,<empty>
398659,UNKNOWN,1,,int,30,<empty>,,1405,1,CPPASTTypeId,,<empty>
398687,UNKNOWN,1,,int,70,<empty>,,1413,1,CPPASTTypeId,,<empty>
398788,UNKNOWN,1,,char *,32,<empty>,,1445,1,CPPASTTypeId,,<empty>
398933,UNKNOWN,1,,const float *,53,<empty>,,1487,1,CPPASTTypeId,,<empty>
398936,UNKNOWN,1,,const float *,77,<empty>,,1487,1,CPPASTTypeId,,<empty>
399148,UNKNOWN,1,,float16_t*,52,<empty>,,1522,1,CPPASTTypeId,,<empty>
399189,UNKNOWN,1,,const float *,57,<empty>,,1551,1,CPPASTTypeId,,<empty>
399192,UNKNOWN,1,,const float *,78,<empty>,,1551,1,CPPASTTypeId,,<empty>
399226,UNKNOWN,1,,const float16_t *,51,<empty>,,1558,1,CPPASTTypeId,,<empty>
399554,UNKNOWN,1,,int,37,<empty>,,105,1,CPPASTTypeId,,<empty>
399567,UNKNOWN,1,,int,41,<empty>,,106,1,CPPASTTypeId,,<empty>
399579,UNKNOWN,1,,int,15,<empty>,,107,1,CPPASTTypeId,,<empty>
399601,UNKNOWN,1,,int,46,<empty>,,110,1,CPPASTTypeId,,<empty>
399616,UNKNOWN,1,,int,48,<empty>,,111,1,CPPASTTypeId,,<empty>
399630,UNKNOWN,1,,int,23,<empty>,,112,1,CPPASTTypeId,,<empty>
399644,UNKNOWN,1,,int,47,<empty>,,114,1,CPPASTTypeId,,<empty>
399659,UNKNOWN,1,,int,51,<empty>,,115,1,CPPASTTypeId,,<empty>
399673,UNKNOWN,1,,int,24,<empty>,,116,1,CPPASTTypeId,,<empty>
399686,UNKNOWN,1,,int,43,<empty>,,118,1,CPPASTTypeId,,<empty>
399700,UNKNOWN,1,,int,47,<empty>,,119,1,CPPASTTypeId,,<empty>
399713,UNKNOWN,1,,int,21,<empty>,,120,1,CPPASTTypeId,,<empty>
399726,UNKNOWN,1,,int,45,<empty>,,122,1,CPPASTTypeId,,<empty>
399740,UNKNOWN,1,,int,49,<empty>,,123,1,CPPASTTypeId,,<empty>
399753,UNKNOWN,1,,int,23,<empty>,,124,1,CPPASTTypeId,,<empty>
400091,UNKNOWN,1,,float *,26,<empty>,,195,1,CPPASTTypeId,,<empty>
400506,UNKNOWN,1,,float*,24,<empty>,,473,1,CPPASTTypeId,,<empty>
400518,UNKNOWN,1,,float*,32,<empty>,,506,1,CPPASTTypeId,,<empty>
400917,UNKNOWN,1,,float *,33,<empty>,,588,1,CPPASTTypeId,,<empty>
401400,UNKNOWN,1,,float *,51,<empty>,,725,1,CPPASTTypeId,,<empty>
401692,UNKNOWN,1,,float *,51,<empty>,,790,1,CPPASTTypeId,,<empty>
402077,UNKNOWN,1,,float*,51,<empty>,,866,1,CPPASTTypeId,,<empty>
402264,UNKNOWN,1,,float*,41,<empty>,,898,1,CPPASTTypeId,,<empty>
402307,UNKNOWN,1,,unsigned,26,<empty>,,907,1,CPPASTTypeId,,<empty>
402310,UNKNOWN,1,,unsigned,42,<empty>,,907,1,CPPASTTypeId,,<empty>
402314,UNKNOWN,1,,unsigned,59,<empty>,,907,1,CPPASTTypeId,,<empty>
402317,UNKNOWN,1,,unsigned,75,<empty>,,907,1,CPPASTTypeId,,<empty>
402321,UNKNOWN,1,,unsigned,26,<empty>,,908,1,CPPASTTypeId,,<empty>
402324,UNKNOWN,1,,unsigned,42,<empty>,,908,1,CPPASTTypeId,,<empty>
403398,UNKNOWN,1,,size_t,35,<empty>,,1200,1,CPPASTTypeId,,<empty>
403407,UNKNOWN,1,,size_t,35,<empty>,,1201,1,CPPASTTypeId,,<empty>
403824,UNKNOWN,1,,int,32,<empty>,,1281,1,CPPASTTypeId,,<empty>
403962,UNKNOWN,1,,int,48,<empty>,,1314,1,CPPASTTypeId,,<empty>
404619,UNKNOWN,1,,float*,27,<empty>,,166,1,CPPASTTypeId,,<empty>
404685,UNKNOWN,1,,const float*,37,<empty>,,172,1,CPPASTTypeId,,<empty>
404762,UNKNOWN,1,,size_t,28,<empty>,,45,1,CPPASTTypeId,,<empty>
404877,UNKNOWN,1,,char*,27,<empty>,,114,1,CPPASTTypeId,,<empty>
404955,UNKNOWN,1,,const char *,22,<empty>,,130,1,CPPASTTypeId,,<empty>
404961,UNKNOWN,1,,char *,23,<empty>,,131,1,CPPASTTypeId,,<empty>
404986,UNKNOWN,1,,const float*,23,<empty>,,162,1,CPPASTTypeId,,<empty>
405003,UNKNOWN,1,,int,43,<empty>,,182,1,CPPASTTypeId,,<empty>
405013,UNKNOWN,1,,size_t,28,<empty>,,183,1,CPPASTTypeId,,<empty>
405051,UNKNOWN,1,,const char *,22,<empty>,,194,1,CPPASTTypeId,,<empty>
405057,UNKNOWN,1,,const char *,29,<empty>,,195,1,CPPASTTypeId,,<empty>
405063,UNKNOWN,1,,char *,16,<empty>,,196,1,CPPASTTypeId,,<empty>
405128,UNKNOWN,1,,const char *,22,<empty>,,231,1,CPPASTTypeId,,<empty>
405134,UNKNOWN,1,,const char *,22,<empty>,,232,1,CPPASTTypeId,,<empty>
405140,UNKNOWN,1,,char *,16,<empty>,,233,1,CPPASTTypeId,,<empty>
405197,UNKNOWN,1,,uint64_t,46,<empty>,,246,1,CPPASTTypeId,,<empty>
405293,UNKNOWN,1,,size_t,44,<empty>,,293,1,CPPASTTypeId,,<empty>
405307,UNKNOWN,1,,size_t,44,<empty>,,295,1,CPPASTTypeId,,<empty>
405321,UNKNOWN,1,,size_t,44,<empty>,,297,1,CPPASTTypeId,,<empty>
405435,UNKNOWN,1,,const char *,22,<empty>,,316,1,CPPASTTypeId,,<empty>
405441,UNKNOWN,1,,const char *,22,<empty>,,317,1,CPPASTTypeId,,<empty>
405447,UNKNOWN,1,,char *,16,<empty>,,318,1,CPPASTTypeId,,<empty>
405497,UNKNOWN,1,,const char *,22,<empty>,,348,1,CPPASTTypeId,,<empty>
405503,UNKNOWN,1,,const char *,22,<empty>,,349,1,CPPASTTypeId,,<empty>
405509,UNKNOWN,1,,char *,16,<empty>,,350,1,CPPASTTypeId,,<empty>
405593,UNKNOWN,1,,size_t,44,<empty>,,387,1,CPPASTTypeId,,<empty>
405602,UNKNOWN,1,,size_t,44,<empty>,,388,1,CPPASTTypeId,,<empty>
406145,UNKNOWN,1,,int,35,<empty>,,132,1,CPPASTTypeId,,<empty>
406398,UNKNOWN,1,,char*,27,<empty>,,201,1,CPPASTTypeId,,<empty>
406549,UNKNOWN,1,,float*,35,<empty>,,219,1,CPPASTTypeId,,<empty>
406677,UNKNOWN,1,,char*,27,<empty>,,267,1,CPPASTTypeId,,<empty>
406831,UNKNOWN,1,,float*,35,<empty>,,286,1,CPPASTTypeId,,<empty>
406858,UNKNOWN,1,,int,35,<empty>,,292,1,CPPASTTypeId,,<empty>
406961,UNKNOWN,1,,char*,27,<empty>,,335,1,CPPASTTypeId,,<empty>
407006,UNKNOWN,1,,int,49,<empty>,,341,1,CPPASTTypeId,,<empty>
407014,UNKNOWN,1,,int,51,<empty>,,342,1,CPPASTTypeId,,<empty>
407026,UNKNOWN,1,,int,51,<empty>,,343,1,CPPASTTypeId,,<empty>
407162,UNKNOWN,1,,float*,35,<empty>,,359,1,CPPASTTypeId,,<empty>
407293,UNKNOWN,1,,char*,27,<empty>,,409,1,CPPASTTypeId,,<empty>
407332,UNKNOWN,1,,int,49,<empty>,,415,1,CPPASTTypeId,,<empty>
407340,UNKNOWN,1,,int,51,<empty>,,416,1,CPPASTTypeId,,<empty>
407352,UNKNOWN,1,,int,51,<empty>,,417,1,CPPASTTypeId,,<empty>
407493,UNKNOWN,1,,float*,35,<empty>,,433,1,CPPASTTypeId,,<empty>
407520,UNKNOWN,1,,int,35,<empty>,,439,1,CPPASTTypeId,,<empty>
407737,UNKNOWN,1,,const float *,1,<empty>,,98,1,CPPASTTypeId,,<empty>
407743,UNKNOWN,1,,float *,1,<empty>,,98,1,CPPASTTypeId,,<empty>
407975,UNKNOWN,1,,const float *,1,<empty>,,99,1,CPPASTTypeId,,<empty>
407981,UNKNOWN,1,,float *,1,<empty>,,99,1,CPPASTTypeId,,<empty>
408286,UNKNOWN,1,,int,24,<empty>,,105,1,CPPASTTypeId,,<empty>
408394,UNKNOWN,1,,int,31,<empty>,,117,1,CPPASTTypeId,,<empty>
408466,UNKNOWN,1,,const float*,23,<empty>,,128,1,CPPASTTypeId,,<empty>
408472,UNKNOWN,1,,const float*,23,<empty>,,129,1,CPPASTTypeId,,<empty>
408478,UNKNOWN,1,,float*,17,<empty>,,130,1,CPPASTTypeId,,<empty>
408719,UNKNOWN,1,,bool,29,<empty>,,161,1,CPPASTTypeId,,<empty>
408742,UNKNOWN,1,,char *,25,<empty>,,164,1,CPPASTTypeId,,<empty>
408965,UNKNOWN,1,,int,43,<empty>,,240,1,CPPASTTypeId,,<empty>
408983,UNKNOWN,1,,size_t,28,<empty>,,241,1,CPPASTTypeId,,<empty>
409123,UNKNOWN,1,,int,43,<empty>,,308,1,CPPASTTypeId,,<empty>
409141,UNKNOWN,1,,size_t,28,<empty>,,309,1,CPPASTTypeId,,<empty>
409286,UNKNOWN,1,,int,39,<empty>,,385,1,CPPASTTypeId,,<empty>
409304,UNKNOWN,1,,size_t,24,<empty>,,386,1,CPPASTTypeId,,<empty>
409440,UNKNOWN,1,,int,39,<empty>,,458,1,CPPASTTypeId,,<empty>
409458,UNKNOWN,1,,size_t,24,<empty>,,459,1,CPPASTTypeId,,<empty>
409480,UNKNOWN,1,,char*,27,<empty>,,590,1,CPPASTTypeId,,<empty>
409631,UNKNOWN,1,,float*,35,<empty>,,608,1,CPPASTTypeId,,<empty>
409719,UNKNOWN,1,,char*,27,<empty>,,678,1,CPPASTTypeId,,<empty>
409873,UNKNOWN,1,,float*,35,<empty>,,697,1,CPPASTTypeId,,<empty>
409900,UNKNOWN,1,,int,35,<empty>,,703,1,CPPASTTypeId,,<empty>
409983,UNKNOWN,1,,char*,27,<empty>,,757,1,CPPASTTypeId,,<empty>
410028,UNKNOWN,1,,int,49,<empty>,,763,1,CPPASTTypeId,,<empty>
410036,UNKNOWN,1,,int,51,<empty>,,764,1,CPPASTTypeId,,<empty>
410048,UNKNOWN,1,,int,51,<empty>,,765,1,CPPASTTypeId,,<empty>
410184,UNKNOWN,1,,float*,35,<empty>,,781,1,CPPASTTypeId,,<empty>
410277,UNKNOWN,1,,char*,27,<empty>,,847,1,CPPASTTypeId,,<empty>
410316,UNKNOWN,1,,int,49,<empty>,,853,1,CPPASTTypeId,,<empty>
410324,UNKNOWN,1,,int,51,<empty>,,854,1,CPPASTTypeId,,<empty>
410336,UNKNOWN,1,,int,51,<empty>,,855,1,CPPASTTypeId,,<empty>
410477,UNKNOWN,1,,float*,35,<empty>,,871,1,CPPASTTypeId,,<empty>
410504,UNKNOWN,1,,int,35,<empty>,,877,1,CPPASTTypeId,,<empty>
410594,UNKNOWN,-1,,CV_CPU_OPTIMIZATION_NAMESPACE_BEGIN,1,<empty>,,116,1,CPPASTProblemDeclaration,,<empty>
410803,UNKNOWN,1,,bool,29,<empty>,,509,1,CPPASTTypeId,,<empty>
410826,UNKNOWN,1,,char *,25,<empty>,,512,1,CPPASTTypeId,,<empty>
410925,UNKNOWN,1,,int,24,<empty>,,539,1,CPPASTTypeId,,<empty>
411033,UNKNOWN,1,,int,31,<empty>,,551,1,CPPASTTypeId,,<empty>
411224,UNKNOWN,1,,int,43,<empty>,,650,1,CPPASTTypeId,,<empty>
411242,UNKNOWN,1,,size_t,28,<empty>,,651,1,CPPASTTypeId,,<empty>
411385,UNKNOWN,1,,int,43,<empty>,,730,1,CPPASTTypeId,,<empty>
411403,UNKNOWN,1,,size_t,28,<empty>,,731,1,CPPASTTypeId,,<empty>
411552,UNKNOWN,1,,int,39,<empty>,,823,1,CPPASTTypeId,,<empty>
411570,UNKNOWN,1,,size_t,24,<empty>,,824,1,CPPASTTypeId,,<empty>
411708,UNKNOWN,1,,int,39,<empty>,,904,1,CPPASTTypeId,,<empty>
411726,UNKNOWN,1,,size_t,24,<empty>,,905,1,CPPASTTypeId,,<empty>
411740,UNKNOWN,-1,,"CV_CPU_OPTIMIZATION_NAMESPACE_END

",1,<empty>,,911,15,CPPASTProblemDeclaration,,<empty>
412422,UNKNOWN,1,,size_t,32,<empty>,,14,1,CPPASTTypeId,,<empty>
412427,UNKNOWN,1,,int,74,<empty>,,14,1,CPPASTTypeId,,<empty>
412432,UNKNOWN,1,,size_t,36,<empty>,,15,1,CPPASTTypeId,,<empty>
412436,UNKNOWN,1,,int,75,<empty>,,15,1,CPPASTTypeId,,<empty>
412484,UNKNOWN,1,,size_t,32,<empty>,,49,1,CPPASTTypeId,,<empty>
412489,UNKNOWN,1,,int,74,<empty>,,49,1,CPPASTTypeId,,<empty>
412494,UNKNOWN,1,,size_t,36,<empty>,,50,1,CPPASTTypeId,,<empty>
412498,UNKNOWN,1,,int,75,<empty>,,50,1,CPPASTTypeId,,<empty>
412556,UNKNOWN,1,,size_t,32,<empty>,,86,1,CPPASTTypeId,,<empty>
412561,UNKNOWN,1,,int,74,<empty>,,86,1,CPPASTTypeId,,<empty>
412566,UNKNOWN,1,,size_t,36,<empty>,,87,1,CPPASTTypeId,,<empty>
412570,UNKNOWN,1,,int,75,<empty>,,87,1,CPPASTTypeId,,<empty>
412649,UNKNOWN,1,,size_t,36,<empty>,,127,1,CPPASTTypeId,,<empty>
413005,UNKNOWN,1,,double,24,<empty>,,34,1,CPPASTTypeId,,<empty>
413020,UNKNOWN,1,,int,29,<empty>,,44,1,CPPASTTypeId,,<empty>
413106,UNKNOWN,-1,,"class CropAndResizeLayerImpl CV_FINAL : public CropAndResizeLayer
{
public:
    CropAndResizeLayerImpl(const LayerParams& params)
    {
        setParamsFrom(params);
        CV_Assert_N(params.has(""width""), params.has(""height""));
        outWidth = params.get<float>(""width"");
        outHeight = params.get<float>(""height"");
    }

    virtual bool supportBackend(int backendId) CV_OVERRIDE
    {
        return backendId == DNN_BACKEND_OPENCV
               || backendId == DNN_BACKEND_INFERENCE_ENGINE_NGRAPH
               || backendId == DNN_BACKEND_CUDA
        ;
    }

    bool getMemoryShapes(const std::vector<MatShape> &inputs,
                         const int requiredOutputs,
                         std::vector<MatShape> &outputs,
                         std::vector<MatShape> &internals) const CV_OVERRIDE
    {
        CV_Assert_N(inputs.size() == 2, inputs[0].size() == 4);
        if (inputs[0][0] != 1)
            CV_Error(Error::StsNotImplemented, """");
        outputs.re...",1,<empty>,,18,1,CPPASTProblemDeclaration,,<empty>
413133,UNKNOWN,-1,,"class CumSumLayerImpl CV_FINAL : public CumSumLayer
{
public:
    CumSumLayerImpl(const LayerParams &params)
    {
        axis_raw = params.get<int>(""axis"", 0);
        exclusive_raw = params.get<int>(""exclusive"", 0);
        reverse_raw = params.get<int>(""reverse"", 0);
        setParamsFrom(params);
    }

    bool getMemoryShapes(const std::vector<MatShape> &inputs,
                         const int requiredOutputs,
                         std::vector<MatShape> &outputs,
                         std::vector<MatShape> &internals) const CV_OVERRIDE
    {
        Layer::getMemoryShapes(inputs, requiredOutputs, outputs, internals);
        return exclusive_raw == 0;
    }

    void forward(InputArrayOfArrays inputs_arr, OutputArrayOfArrays outputs_arr, OutputArrayOfArrays internals_arr) CV_OVERRIDE
    {
        CV_TRACE_FUNCTION();
        CV_TRACE_ARG_VALUE(name, ""name"", name.c_str());

        if (inputs_arr.depth() == CV_16S)
        {
            forward_fallback(inputs_arr, o...",1,<empty>,,15,1,CPPASTProblemDeclaration,,<empty>
413249,UNKNOWN,-1,,"class DetectionOutputLayerImpl CV_FINAL : public DetectionOutputLayer
{
public:
    unsigned _numClasses;
    bool _shareLocation;
    int _numLocClasses;

    int _backgroundLabelId;

    cv::String _codeType;

    bool _varianceEncodedInTarget;
    int _keepTopK;
    float _confidenceThreshold;

    float _nmsThreshold;
    int _topK;
    // Whenever predicted bounding boxes are represented in YXHW instead of XYWH layout.
    bool _locPredTransposed;
    // It's true whenever predicted bounding boxes and proposals are normalized to [0, 1].
    bool _bboxesNormalized;
    bool _clip;
    bool _groupByClasses;

    enum { _numAxes = 4 };
    static const std::string _layerName;

    typedef std::map<int, std::vector<util::NormalizedBBox> > LabelBBox;

    inline int getNumOfTargetClasses() {
        unsigned numBackground =
            (_backgroundLabelId >= 0 && _backgroundLabelId < _numClasses) ? 1 : 0;
        return (_numClasses - numBackground);
    }

    bool getParameterDict...",1,<empty>,,112,2,CPPASTProblemDeclaration,,<empty>
414200,UNKNOWN,1,,int,28,<empty>,,273,1,CPPASTTypeId,,<empty>
414216,UNKNOWN,1,,int,28,<empty>,,277,1,CPPASTTypeId,,<empty>
414219,UNKNOWN,1,,int,52,<empty>,,277,1,CPPASTTypeId,,<empty>
414227,UNKNOWN,-1,,"class LayerEinsumImpl CV_FINAL : public EinsumLayer
{
private:
    Ptr<ReduceLayer> reduce;
public:
    // Number of inputs and outputs of the layer
    int numInputs;

    // inputShapes;
    std::vector<MatShape> einsumInpShapes;

    // Preprocessed inputs
    std::vector<Mat> preProcessedInputs;

    // This is container for preporcessed inputs
    std::vector<MatShape> homogenizedInputDims;

    // Collect outpus dimentions
    MatShape einsumOutDims; // vector to store output dimentions

    // These hold equation subring, left hand side and right it of
    String lhs_eq, rhs_eq;

    // Holds token from left hand side of the equation
    std::vector<String> lhs_eq_tokens;

    // Idicates if equation substring is defined in explit way such as ""ij, jk->ik""
    // as opposed to ""ij->""
    bool explicitEquation = false;

    // Stores the subscript indices for each input in the equation
    std::vector<std::vector<int>> inputSubscriptIndices;

    // Keeps track of the input ind...",1,<empty>,,286,9,CPPASTProblemDeclaration,,<empty>
415023,UNKNOWN,1,,int,88,<empty>,,813,1,CPPASTTypeId,,<empty>
415089,UNKNOWN,1,,int,96,<empty>,,835,1,CPPASTTypeId,,<empty>
415118,UNKNOWN,1,,int,28,<empty>,,854,1,CPPASTTypeId,,<empty>
415206,UNKNOWN,1,,int,64,<empty>,,890,1,CPPASTTypeId,,<empty>
415230,UNKNOWN,1,,size_t,71,<empty>,,901,1,CPPASTTypeId,,<empty>
415238,UNKNOWN,1,,size_t,61,<empty>,,904,1,CPPASTTypeId,,<empty>
415356,UNKNOWN,1,,size_t,120,<empty>,,951,1,CPPASTTypeId,,<empty>
415594,UNKNOWN,1,,int,32,<empty>,,1051,1,CPPASTTypeId,,<empty>
415603,UNKNOWN,1,,int,33,<empty>,,1052,1,CPPASTTypeId,,<empty>
416509,UNKNOWN,1,,int,31,<empty>,,1263,1,CPPASTTypeId,,<empty>
416512,UNKNOWN,1,,int,59,<empty>,,1263,1,CPPASTTypeId,,<empty>
416515,UNKNOWN,1,,int,86,<empty>,,1263,1,CPPASTTypeId,,<empty>
416528,UNKNOWN,1,,int,31,<empty>,,1265,1,CPPASTTypeId,,<empty>
416531,UNKNOWN,1,,int,59,<empty>,,1265,1,CPPASTTypeId,,<empty>
416534,UNKNOWN,1,,int,91,<empty>,,1265,1,CPPASTTypeId,,<empty>
416625,UNKNOWN,1,,size_t,45,<empty>,,1305,1,CPPASTTypeId,,<empty>
416634,UNKNOWN,1,,size_t,45,<empty>,,1306,1,CPPASTTypeId,,<empty>
416639,UNKNOWN,1,,size_t,17,<empty>,,1307,1,CPPASTTypeId,,<empty>
416644,UNKNOWN,1,,size_t,50,<empty>,,1307,1,CPPASTTypeId,,<empty>
416651,UNKNOWN,1,,size_t,17,<empty>,,1308,1,CPPASTTypeId,,<empty>
416656,UNKNOWN,1,,size_t,50,<empty>,,1308,1,CPPASTTypeId,,<empty>
417076,UNKNOWN,1,,int,36,<empty>,,1393,1,CPPASTTypeId,,<empty>
417221,UNKNOWN,-1,,t,45,<empty>,,117,7,CPPASTProblemDeclaration,,<empty>
417222,UNKNOWN,-1,,"CV_OVERRIDE
        {
            int nstripes = nstripes_, nsamples = 1, outCn = 1;
            size_t planeSize = 1;

            if (src_->dims > 1)
            {
                nsamples = src_->size[0];
                outCn = src_->size[1];
            }
            else
                outCn = src_->size[0];

            for (int i = 2; i < src_->dims; ++i)
                planeSize *= src_->size[i];

            size_t stripeSize = (planeSize + nstripes - 1)/nstripes;
            size_t stripeStart = r.start*stripeSize;
            size_t stripeEnd = std::min(r.end*stripeSize, planeSize);

            for( int i = 0; i < nsamples; i++ )
            {
                const float* srcptr = src_->ptr<float>(i) + stripeStart;
                float* dstptr = dst_->ptr<float>(i) + stripeStart;
                func_->apply(srcptr, dstptr, stripeStart, (int)(stripeEnd - stripeStart), planeSize, 0, outCn);
            }
        }",47,<empty>,,117,8,CPPASTProblemDeclaration,,<empty>
417236,UNKNOWN,-1,,),46,<empty>,,148,4,CPPASTProblemDeclaration,,<empty>
417237,UNKNOWN,-1,,"CV_OVERRIDE
    {
        return func.supportBackend(backendId, this->preferableTarget);
    }",48,<empty>,,148,5,CPPASTProblemDeclaration,,<empty>
417244,UNKNOWN,-1,,),66,<empty>,,153,7,CPPASTProblemDeclaration,,<empty>
417245,UNKNOWN,-1,,"CV_OVERRIDE
    {
        func.finalize();
    }",68,<empty>,,153,8,CPPASTProblemDeclaration,,<empty>
417251,UNKNOWN,-1,,),68,<empty>,,158,10,CPPASTProblemDeclaration,,<empty>
417252,UNKNOWN,-1,,"CV_OVERRIDE
    {
        switch (node->backendId)
        {
            case DNN_BACKEND_HALIDE:
            {
#ifdef HAVE_HALIDE
                auto base = node.dynamicCast<HalideBackendNode>();
                Halide::Func& input = base->funcs.back();
                Halide::Var x(""x""), y(""y""), c(""c""), n(""n"");
                Halide::Func top = (this->name.empty() ? Halide::Func() : Halide::Func(this->name));
                func.attachHalide(input(x, y, c, n), top);
                return Ptr<BackendNode>(new HalideBackendNode(base, top));
#endif  // HAVE_HALIDE
                break;
            }
        }
        return Ptr<BackendNode>();
    }",70,<empty>,,158,11,CPPASTProblemDeclaration,,<empty>
417258,UNKNOWN,-1,,),88,<empty>,,178,13,CPPASTProblemDeclaration,,<empty>
417259,UNKNOWN,-1,,"CV_OVERRIDE
    {
#ifdef HAVE_HALIDE
        Halide::Buffer<float> input = halideBuffer(inputs[0]);
        Halide::Var x(""x""), y(""y""), c(""c""), n(""n"");
        Halide::Func top = (this->name.empty() ? Halide::Func() : Halide::Func(this->name));
        func.attachHalide(input(x, y, c, n), top);
        return Ptr<BackendNode>(new HalideBackendNode(top));
#endif  // HAVE_HALIDE
        return Ptr<BackendNode>();
    }",90,<empty>,,178,14,CPPASTProblemDeclaration,,<empty>
417265,UNKNOWN,-1,,),46,<empty>,,220,16,CPPASTProblemDeclaration,,<empty>
417266,UNKNOWN,-1,,"CV_OVERRIDE
    {
        return func.tryFuse(top);
    }",48,<empty>,,220,17,CPPASTProblemDeclaration,,<empty>
417273,UNKNOWN,-1,,t,54,<empty>,,225,19,CPPASTProblemDeclaration,,<empty>
417274,UNKNOWN,-1,,"CV_OVERRIDE
    {
        func.getScaleShift(scale_, shift_);
    }",56,<empty>,,225,20,CPPASTProblemDeclaration,,<empty>
417283,UNKNOWN,-1,,t,64,<empty>,,233,22,CPPASTProblemDeclaration,,<empty>
417284,UNKNOWN,-1,,"CV_OVERRIDE
    {
        Layer::getMemoryShapes(inputs, requiredOutputs, outputs, internals);
        return true;
    }",66,<empty>,,233,23,CPPASTProblemDeclaration,,<empty>
417292,UNKNOWN,-1,,),115,<empty>,,239,25,CPPASTProblemDeclaration,,<empty>
417293,UNKNOWN,-1,,"CV_OVERRIDE
    {
        CV_TRACE_FUNCTION();

        CV_OCL_RUN(IS_DNN_OPENCL_TARGET(this->preferableTarget),
                   func.applyOCL(inputs_arr, outputs_arr, internals_arr))

        if (inputs_arr.depth() == CV_16S)
        {
            Layer::forward_fallback(inputs_arr, outputs_arr, internals_arr);
            return;
        }

        std::vector<Mat> inputs, outputs;
        inputs_arr.getMatVector(inputs);
        outputs_arr.getMatVector(outputs);

        for (size_t i = 0; i < inputs.size(); i++)
        {
            const Mat &src = inputs[i];
            Mat &dst = outputs[i];
            CV_Assert(src.size == dst.size && src.type() == dst.type() &&
                      src.isContinuous() && dst.isContinuous() && src.type() == CV_32F);

            const int nstripes = getNumThreads();
            PBody body(func, src, dst, nstripes);
            parallel_for_(Range(0, nstripes), body, nstripes);
        }
    }",117,<empty>,,239,26,CPPASTProblemDeclaration,,<empty>
417304,UNKNOWN,-1,,t,102,<empty>,,269,28,CPPASTProblemDeclaration,,<empty>
417305,UNKNOWN,-1,,"CV_OVERRIDE
    {
        func.apply(src, dst, -1, len, planeSize, cn0, cn1);
    }",104,<empty>,,269,29,CPPASTProblemDeclaration,,<empty>
417313,UNKNOWN,-1,,),99,<empty>,,287,31,CPPASTProblemDeclaration,,<empty>
417314,UNKNOWN,-1,,"CV_OVERRIDE
    {
        return func.tryQuantize(scales, zeropoints, params);
    }",101,<empty>,,287,32,CPPASTProblemDeclaration,,<empty>
417321,UNKNOWN,-1,,t,70,<empty>,,293,34,CPPASTProblemDeclaration,,<empty>
417322,UNKNOWN,-1,,"CV_OVERRIDE
    {
        long flops = 0;
        for (int i = 0; i < outputs.size(); i++)
        {
            flops += total(outputs[i]) * func.getFLOPSPerElement();
        }
        return flops;
    }",72,<empty>,,293,35,CPPASTProblemDeclaration,,<empty>
417582,UNKNOWN,1,,int,42,<empty>,,524,1,CPPASTTypeId,,<empty>
417890,UNKNOWN,1,,const T*,41,<empty>,,717,1,CPPASTTypeId,,<empty>
417976,UNKNOWN,1,,float,46,<empty>,,763,1,CPPASTTypeId,,<empty>
417986,UNKNOWN,1,,T const*,35,<empty>,,764,1,CPPASTTypeId,,<empty>
417996,UNKNOWN,1,,int,49,<empty>,,765,1,CPPASTTypeId,,<empty>
420549,UNKNOWN,1,,int,53,<empty>,,2505,1,CPPASTTypeId,,<empty>
422149,UNKNOWN,-1,,"class EltwiseLayerImpl CV_FINAL : public EltwiseLayer
{
public:
    enum EltwiseOp
    {
        PROD = 0,
        SUM = 1,
        MAX = 2,
        DIV = 3,
        MIN = 4,
    } op;
    std::vector<float> coeffs;

    enum OutputChannelsMode
    {
        ELTWISE_CHANNNELS_SAME = 0,              //!< number of channels from inputs must be the same and equal to output's number of channels
        ELTWISE_CHANNNELS_INPUT_0,               //!< number of channels from inputs may be different,
                                                 //!< output's number of channels is equal to number of channels of first input
                                                 //!< number of channels of other inputs should not be greater than number of channels of first input
        ELTWISE_CHANNNELS_INPUT_0_TRUNCATE,      //!< number of channels from inputs may be different,
                                                 //!< output's number of channels is equal to number of channels of fir...",1,<empty>,,68,1,CPPASTProblemDeclaration,,<empty>
422174,UNKNOWN,-1,,"class ExpandLayerImpl CV_FINAL : public ExpandLayer
{
public:
    ExpandLayerImpl(const LayerParams &params) {
        setParamsFrom(params);

        // shape as param
        CV_CheckTrue(params.has(""shape""), ""DNN/Expand: shape is required in Expand layer initialization"");
        DictValue param_shape = params.get(""shape"");
        int ndims_shape = param_shape.size();
        CV_CheckGT(ndims_shape, 0, ""DNN/Expand: ndims of shape must be > 0"");
        target_shape.resize(ndims_shape);
        for (int i = 0; i < ndims_shape; i++) {
            target_shape[i] = param_shape.get<int>(i);
        }

        // FIXME: remove when 0d/1d mat is available
        const_input_1d = params.get(""const_input_1d"", false);
    }

    virtual bool supportBackend(int backendId) CV_OVERRIDE {
        return backendId == DNN_BACKEND_OPENCV;
    }

    virtual bool getMemoryShapes(const std::vector<MatShape> &inputs,
                                 const int requiredOutputs,
                    ...",1,<empty>,,10,1,CPPASTProblemDeclaration,,<empty>
422213,UNKNOWN,-1,,"class FlattenLayerImpl CV_FINAL : public FlattenLayer
{
public:
    FlattenLayerImpl(const LayerParams &params)
    {
        _startAxis = params.get<int>(""axis"", 1);
        _endAxis = params.get<int>(""end_axis"", -1);
        setParamsFrom(params);
    }

    virtual bool supportBackend(int backendId) CV_OVERRIDE
    {
#ifdef HAVE_INF_ENGINE
        if (backendId == DNN_BACKEND_INFERENCE_ENGINE_NGRAPH)
            return true;
#endif
        return backendId == DNN_BACKEND_OPENCV ||
               backendId == DNN_BACKEND_CUDA ||
               backendId == DNN_BACKEND_CANN;
    }

    bool getMemoryShapes(const std::vector<MatShape> &inputs,
                         const int requiredOutputs,
                         std::vector<MatShape> &outputs,
                         std::vector<MatShape> &internals) const CV_OVERRIDE
    {
        CV_Assert(inputs.size() > 0);
        for (size_t i = 1; i < inputs.size(); i++)
        {
            CV_Assert(inputs[i] == inputs[0]);
       ...",1,<empty>,,64,1,CPPASTProblemDeclaration,,<empty>
422238,UNKNOWN,-1,,"class FlowWarpLayerImpl CV_FINAL : public FlowWarpLayer
{
public:
    FlowWarpLayerImpl(const LayerParams& params)
    {
        setParamsFrom(params);
        String fill_string = toLowerCase(params.get<String>(""FillParameter"", ""ZERO""));
        if (fill_string != ""zero"")
            CV_Error(Error::StsNotImplemented, ""Only zero filling supported."");
        fill_value = 0;
    }

    virtual bool getMemoryShapes(const std::vector<MatShape> &inputs,
                                 const int requiredOutputs,
                                 std::vector<MatShape> &outputs,
                                 std::vector<MatShape> &internals) const CV_OVERRIDE
    {
        CV_Assert(inputs.size() == 2);
        CV_Assert_N(inputs[0][0] == inputs[1][0], inputs[1][1] == 2,
                    inputs[0][2] == inputs[1][2], inputs[0][3] == inputs[1][3]);

        outputs.assign(1, inputs[0]);
        return false;
    }

    void forward(InputArrayOfArrays inputs_arr, OutputArrayOfArrays o...",1,<empty>,,14,1,CPPASTProblemDeclaration,,<empty>
422285,UNKNOWN,-1,,"class FullyConnectedLayerImpl CV_FINAL : public InnerProductLayer
{
public:
    enum { VEC_ALIGN = 8 };

#ifdef HAVE_OPENCL
    Ptr<OCL4DNNInnerProduct<float> > innerProductOp;
    std::vector<UMat> umat_blobs;
    std::vector<UMat> half_blobs;
#endif

    FullyConnectedLayerImpl(const LayerParams& params)
    {
        setParamsFrom(params);
        transA = params.get<bool>(""transA"", false);
        transB = params.get<bool>(""transB"", false);

        bias = params.get<bool>(""bias_term"", true);
        axis = params.get<int>(""axis"", 1);
        isMatMul = params.get<bool>(""is_matmul"", false);
        if (!blobs.empty())
        {
            CV_Assert(1 <= blobs.size() && blobs.size() <= 2);
            int numOutput = params.get<int>(""num_output"");
            int innerSize = (int)blobs[0].total() / numOutput;

            CV_Assert(blobs[0].dims >= 2 && (size_t)(innerSize * numOutput) == blobs[0].total());
            CV_Assert(!bias || (blobs.size() == 2 && (size_t)numOutput ==...",1,<empty>,,71,1,CPPASTProblemDeclaration,,<empty>
422327,UNKNOWN,1,,int,33,<empty>,,12,1,CPPASTTypeId,,<empty>
422366,UNKNOWN,-1,,"class GatherElementsLayerImpl CV_FINAL : public GatherElementsLayer
{
public:
    GatherElementsLayerImpl(const LayerParams& params)
    {
        setParamsFrom(params);
        axis = params.get<int>(""axis"", 0);
    }

    virtual bool supportBackend(int backendId) CV_OVERRIDE
    {
        return backendId == DNN_BACKEND_OPENCV;
    }

    virtual bool getMemoryShapes(const std::vector<MatShape> &inputs,
                                 const int requiredOutputs,
                                 std::vector<MatShape> &outputs,
                                 std::vector<MatShape> &internals) const CV_OVERRIDE
    {
        CV_CheckEQ(inputs.size(), 2ull, ""GatherElements: requires two inputs"");

        const auto &data = inputs[0];
        const auto &indices = inputs[1];
        CV_CheckEQ(data.size(), indices.size(), ""GatherElements: data and indices should have the same dimension"");

        int normalized_axis = normalize_axis(axis, static_cast<int>(data.size()));
        CV_...",1,<empty>,,22,2,CPPASTProblemDeclaration,,<empty>
422389,UNKNOWN,-1,,"class GatherLayerImpl CV_FINAL : public GatherLayer
{
public:
    GatherLayerImpl(const LayerParams& params)
    {
        setParamsFrom(params);
        m_axis = params.get<int>(""axis"", 0);
        m_real_ndims = params.get<int>(""real_ndims"", -1);
    }

    virtual bool supportBackend(int backendId) CV_OVERRIDE
    {
        return backendId == DNN_BACKEND_OPENCV;
    }

    virtual bool getMemoryShapes(const std::vector<MatShape> &inputs,
                                 const int requiredOutputs,
                                 std::vector<MatShape> &outputs,
                                 std::vector<MatShape> &internals) const CV_OVERRIDE
    {
        CV_CheckEQ(inputs.size(), 2ull, """");
        MatShape inpShape = inputs[0];
        const int axis = normalize_axis(m_axis, inpShape);

        inpShape.erase(inpShape.begin() + axis);
        auto end = m_real_ndims == -1 ? inputs[1].end() : inputs[1].begin() + m_real_ndims;
        inpShape.insert(inpShape.begin() + axis, i...",1,<empty>,,11,1,CPPASTProblemDeclaration,,<empty>
422426,UNKNOWN,-1,,"class GemmLayerImpl CV_FINAL : public GemmLayer {
public:
    GemmLayerImpl(const LayerParams& params) {
        setParamsFrom(params);

        trans_a = params.get<bool>(""transA"", false);
        trans_b = params.get<bool>(""transB"", false);
        alpha = params.get<float>(""alpha"", 1.0f);
        beta = params.get<float>(""beta"", 1.0f);

        const_B = params.get<bool>(""constB"", false); // true means blobs[0] is B
        const_C = params.get<bool>(""constC"", false); // true means blobs.back() is C
        have_bias = params.get<bool>(""have_bias"", false); // NOTE: have_bias being true does not mean bias is constant

        real_ndims_C = params.get<int>(""real_ndims_C"", -1);
    }

    virtual bool supportBackend(int backendId) CV_OVERRIDE {
        return backendId == DNN_BACKEND_OPENCV ||
               (backendId == DNN_BACKEND_CUDA && const_B && !trans_a) ||
               backendId == DNN_BACKEND_CANN ||
               backendId == DNN_BACKEND_INFERENCE_ENGINE_NGRAPH ||
   ...",1,<empty>,,23,1,CPPASTProblemDeclaration,,<empty>
422465,UNKNOWN,-1,,"class InstanceNormLayerImpl CV_FINAL : public InstanceNormLayer {
public:
    InstanceNormLayerImpl(const LayerParams &params) {
        setParamsFrom(params);

        epsilon = params.get<float>(""epsilon"", 1e-5);
    }

    virtual bool supportBackend(int backendId) CV_OVERRIDE {
#ifdef HAVE_INF_ENGINE
        if (backendId == DNN_BACKEND_INFERENCE_ENGINE_NGRAPH)
            return true;
#endif
        return backendId == DNN_BACKEND_OPENCV ||
               backendId == DNN_BACKEND_CUDA;
            //    backendId == DNN_BACKEND_CANN; // not supported due to 1d mat shape issue
    }

    bool getMemoryShapes(const std::vector<MatShape> &inputs,
                         const int requiredOutputs,
                         std::vector<MatShape> &outputs,
                         std::vector<MatShape> &internals) const CV_OVERRIDE {
        const auto &input = inputs[0];
        const auto &scale = inputs[1];
        const auto &bias = inputs[2];
        CV_CheckGE(input.size(), sta...",1,<empty>,,32,1,CPPASTProblemDeclaration,,<empty>
422506,UNKNOWN,-1,,"class LayerNormLayerImpl CV_FINAL : public LayerNormLayer
{
public:
    LayerNormLayerImpl(const LayerParams& params)
    {
        setParamsFrom(params);

        // standard attr
        axis = params.get<int>(""axis"", -1);
        epsilon = params.get<float>(""epsilon"", 1e-5);
    }

    virtual bool supportBackend(int backendId) CV_OVERRIDE
    {
#ifdef HAVE_INF_ENGINE
        if (backendId == DNN_BACKEND_INFERENCE_ENGINE_NGRAPH)
            return true;
#endif
        return backendId == DNN_BACKEND_OPENCV ||
               backendId == DNN_BACKEND_CUDA   ||
               (backendId == DNN_BACKEND_CANN && axis != -1); // axis=-1 not supported due to 1d mat shape problem
    }

    virtual bool getMemoryShapes(const std::vector<MatShape> &inputs,
                                 const int requiredOutputs,
                                 std::vector<MatShape> &outputs,
                                 std::vector<MatShape> &internals) const CV_OVERRIDE
    {
        // check shap...",1,<empty>,,32,1,CPPASTProblemDeclaration,,<empty>
423708,UNKNOWN,-1,,CV_CPU_OPTIMIZATION_NAMESPACE_BEGIN,1,<empty>,,47,1,CPPASTProblemDeclaration,,<empty>
423733,UNKNOWN,-1,,"CV_CPU_OPTIMIZATION_NAMESPACE_END
",1,<empty>,,658,4,CPPASTProblemDeclaration,,<empty>
423769,UNKNOWN,-1,,"class LRNLayerImpl CV_FINAL : public LRNLayer
{
public:
    LRNLayerImpl(const LayerParams& params)
    {
        setParamsFrom(params);
        type = -1;
        String nrmType = params.get<String>(""norm_region"", ""ACROSS_CHANNELS"");
        if (nrmType == ""ACROSS_CHANNELS"")
            type = CHANNEL_NRM;
        else if (nrmType == ""WITHIN_CHANNEL"")
            type = SPATIAL_NRM;
        else
            CV_Error(Error::StsBadArg, ""Unknown region type \"""" + nrmType + ""\"""");

        size = params.get<int>(""local_size"", 5);
        if (size % 2 != 1 || size <= 0)
            CV_Error(Error::StsBadArg, ""LRN layer supports only positive odd values for local_size"");

        alpha = params.get<double>(""alpha"", 0.0001);
        beta = params.get<double>(""beta"", 0.75);
        bias = params.get<double>(""bias"", 1);
        normBySize = params.get<bool>(""norm_by_size"", true);
    }

#ifdef HAVE_OPENCL
    Ptr<OCL4DNNLRN<float> > lrnOp;
#endif

    virtual bool supportBackend(int backend...",1,<empty>,,72,1,CPPASTProblemDeclaration,,<empty>
423806,UNKNOWN,-1,,"class MatMulLayerImpl CV_FINAL : public MatMulLayer {
 public:
    MatMulLayerImpl(const LayerParams& params) {
        setParamsFrom(params);

        trans_a = params.get<bool>(""transA"", false);
        trans_b = params.get<bool>(""transB"", false);
        alpha = params.get<float>(""alpha"", 1.f);
        beta = params.get<float>(""beta"", 1.f);
    }

    virtual bool supportBackend(int backendId) CV_OVERRIDE {
        return backendId == DNN_BACKEND_OPENCV ||
               backendId == DNN_BACKEND_INFERENCE_ENGINE_NGRAPH ||
               (backendId == DNN_BACKEND_VKCOM && haveVulkan() && !trans_a && !trans_b) ||
               backendId == DNN_BACKEND_CUDA ||
               backendId == DNN_BACKEND_CANN;
    }

    virtual bool getMemoryShapes(const std::vector<MatShape> &inputs,
                                 const int requiredOutputs,
                                 std::vector<MatShape> &outputs,
                                 std::vector<MatShape> &internals) const CV_OVE...",1,<empty>,,28,1,CPPASTProblemDeclaration,,<empty>
423841,UNKNOWN,-1,,"class MaxUnpoolLayerImpl CV_FINAL : public MaxUnpoolLayer
{
public:
    MaxUnpoolLayerImpl(const LayerParams& params)
    {
        setParamsFrom(params);
        poolKernel = Size(params.get<int>(""pool_k_w""), params.get<int>(""pool_k_h""));
        poolPad = Size(params.get<int>(""pool_pad_w""), params.get<int>(""pool_pad_h""));
        poolStride = Size(params.get<int>(""pool_stride_w""), params.get<int>(""pool_stride_h""));
    }

    virtual bool supportBackend(int backendId) CV_OVERRIDE
    {
        return backendId == DNN_BACKEND_OPENCV ||
               backendId == DNN_BACKEND_CUDA ||
               backendId == DNN_BACKEND_INFERENCE_ENGINE_NGRAPH ||
               (backendId == DNN_BACKEND_HALIDE && haveHalide() && !poolPad.width && !poolPad.height);
    }

    bool getMemoryShapes(const std::vector<MatShape> &inputs,
                         const int requiredOutputs,
                         std::vector<MatShape> &outputs,
                         std::vector<MatShape> &internals)...",1,<empty>,,30,1,CPPASTProblemDeclaration,,<empty>
423882,UNKNOWN,-1,,"class MVNLayerImpl CV_FINAL : public MVNLayer
{
public:
    MVNLayerImpl(const LayerParams& params)
    {
        setParamsFrom(params);

        // Caffe params
        normVariance = params.get<bool>(""normalize_variance"", true);
        acrossChannels = params.get<bool>(""across_channels"", false);
        eps = params.get<double>(""eps"", 1e-9);

        fuse_batch_norm = false;
        fuse_relu = false;
        relu_slope = 0.f;
        zeroDev = false;
    }

    Mat scale, shift;
#ifdef HAVE_OPENCL
    UMat umat_scale, umat_shift;
#endif
    bool fuse_batch_norm;

    Ptr<ReLULayer> activ_relu;
    float relu_slope;
    bool fuse_relu;
    bool zeroDev;  // TODO: Doesn't considered in Intel's Inference Engine backend.
    bool setActivation(const Ptr<ActivationLayer>& layer) CV_OVERRIDE
    {
        if (!layer.empty() && !fuse_relu && !fuse_batch_norm)
        {
            layer->getScaleShift(scale, shift);
            fuse_batch_norm = !scale.empty() || !shift.empty();
      ...",1,<empty>,,68,1,CPPASTProblemDeclaration,,<empty>
423923,UNKNOWN,-1,,"class NaryEltwiseLayerImpl CV_FINAL : public NaryEltwiseLayer
{
public:
    enum class OPERATION
    {
        AND = 0,
        EQUAL,
        GREATER,
        GREATER_EQUAL,
        LESS,
        LESS_EQUAL,
        OR,
        POW,
        XOR,
        BITSHIFT,
        MAX,
        MEAN,
        MIN,
        MOD,
        PROD,
        SUB,
        SUM,
        ADD,
        DIV,
        WHERE,
    } op;

    NaryEltwiseLayerImpl(const LayerParams& params)
    {
        setParamsFrom(params);

        String operation = toLowerCase(params.get<String>(""operation"", ""sum""));

        if (operation == ""equal"")
            op = OPERATION::EQUAL;
        else if (operation == ""greater"")
            op = OPERATION::GREATER;
        else if (operation == ""greaterorequal"")
            op = OPERATION::GREATER_EQUAL;
        else if (operation == ""less"")
            op = OPERATION::LESS;
        else if (operation == ""lessorequal"")
            op = OPERATION::LESS_EQUAL;
        else if (oper...",1,<empty>,,27,1,CPPASTProblemDeclaration,,<empty>
423956,UNKNOWN,-1,,"class NormalizeBBoxLayerImpl CV_FINAL : public NormalizeBBoxLayer
{
public:
    NormalizeBBoxLayerImpl(const LayerParams& params)
    {
        setParamsFrom(params);
        pnorm = params.get<float>(""p"", 2);
        epsilon = params.get<float>(""eps"", 1e-10f);
        acrossSpatial = params.get<bool>(""across_spatial"", true);
        startAxis = params.get<int>(""start_axis"", 1);
        CV_Assert(!params.has(""across_spatial"") || !params.has(""end_axis""));
        endAxis = params.get<int>(""end_axis"", acrossSpatial ? -1 : startAxis);
        CV_Assert(pnorm > 0);
    }

    virtual bool supportBackend(int backendId) CV_OVERRIDE
    {
#ifdef HAVE_INF_ENGINE
        if (backendId == DNN_BACKEND_INFERENCE_ENGINE_NGRAPH)
        {
            if (pnorm != 2)
                return false;

            return startAxis == 1;
        }
#endif
        return backendId == DNN_BACKEND_OPENCV ||
               (backendId == DNN_BACKEND_CUDA && (pnorm == 1 || pnorm == 2));
    }

    bool getMemo...",1,<empty>,,56,1,CPPASTProblemDeclaration,,<empty>
423981,UNKNOWN,-1,,CV__DNN_INLINE_NS_BEGIN,1,<empty>,,9,1,CPPASTProblemDeclaration,,<empty>
423983,UNKNOWN,-1,,"class NotImplementedImpl CV_FINAL : public NotImplemented
{
public:
    NotImplementedImpl(const LayerParams& params)
    {
        setParamsFrom(params);
        CV_Assert(params.has(""type""));
        std::stringstream ss;
        ss << ""Node for layer '"" << params.name << ""' of type '"" << params.get(""type"") << ""' wasn't initialized."";
        msg = ss.str();
    }

    CV_DEPRECATED_EXTERNAL
    virtual void finalize(const std::vector<Mat*> &input, std::vector<Mat> &output) CV_OVERRIDE
    {
        CV_Error(Error::StsNotImplemented, msg);
    }

    virtual void finalize(InputArrayOfArrays inputs, OutputArrayOfArrays outputs) CV_OVERRIDE
    {
        CV_Error(Error::StsNotImplemented, msg);
    }

    CV_DEPRECATED_EXTERNAL
    virtual void forward(std::vector<Mat*> &input, std::vector<Mat> &output, std::vector<Mat> &internals) CV_OVERRIDE
    {
        CV_Error(Error::StsNotImplemented, msg);
    }

    virtual void forward(InputArrayOfArrays inputs_arr, OutputArrayOfArrays out...",1,<empty>,,13,1,CPPASTProblemDeclaration,,<empty>
424029,UNKNOWN,-1,,"CV__DNN_INLINE_NS_END
",1,<empty>,,189,3,CPPASTProblemDeclaration,,<empty>
424055,UNKNOWN,-1,,"class PaddingLayerImpl CV_FINAL : public PaddingLayer
{
public:
    PaddingLayerImpl(const LayerParams &params)
    {
        setParamsFrom(params);
        paddingValue = params.get<float>(""value"", 0);
        inputDims = params.get<int>(""input_dims"", -1);
        paddingType = params.get<String>(""type"", ""constant"");

        CV_Assert(params.has(""paddings""));
        const DictValue& paddingsParam = params.get(""paddings"");
        CV_Assert((paddingsParam.size() & 1) == 0);

        paddings.resize(paddingsParam.size() / 2);
        for (int i = 0; i < paddings.size(); ++i)
        {
            paddings[i].first = paddingsParam.get<int>(i * 2);  // Pad before.
            paddings[i].second = paddingsParam.get<int>(i * 2 + 1);  // Pad after.
            CV_Assert_N(paddings[i].first >= 0, paddings[i].second >= 0);
        }
    }

    bool getMemoryShapes(const std::vector<MatShape> &inputs,
                         const int requiredOutputs,
                         std::vector<...",1,<empty>,,32,1,CPPASTProblemDeclaration,,<empty>
424102,UNKNOWN,-1,,"class PermuteLayerImpl CV_FINAL : public PermuteLayer
{
public:
    void checkNeedForPermutation()
    {
        _needsPermute = false;
        for (size_t i = 0; i < _numAxes; ++i)
        {
            if (_order[i] != i)
            {
                _needsPermute = true;
                break;
            }
        }
    }

    PermuteLayerImpl(const LayerParams &params)
        : _count(0), _needsPermute(false), _numAxes(0)
    {
        if (!params.has(""order""))
        {
            return;
        }

        DictValue paramOrder = params.get(""order"");
        _numAxes = paramOrder.size();

        for (size_t i = 0; i < _numAxes; i++)
        {
            int currentOrder = paramOrder.get<int>(i);
            if (currentOrder < 0 || currentOrder > _numAxes)
            {
                CV_Error(Error::StsBadArg,
                         format(""Orders of dimensions in Permute layer parameter""
                                ""must be in [0...%zu]"", _numAxes - 1));
         ...",1,<empty>,,69,1,CPPASTProblemDeclaration,,<empty>
424172,UNKNOWN,1,,int,13,<empty>,,99,1,CPPASTTypeId,,<empty>
424184,UNKNOWN,-1,,"class PoolingLayerImpl CV_FINAL : public PoolingLayer
{
public:
    PoolingLayerImpl(const LayerParams& params)
    {
        computeMaxIdx = true;
        globalPooling = false;
        isGlobalPooling = std::vector<bool>(3, false);

        hasDynamicShapes = params.get<bool>(""has_dynamic_shapes"", false);
        shapesInitialized = !hasDynamicShapes;

        if (params.has(""pool"") || params.has(""kernel_size"") ||
            params.has(""kernel_w"") || params.has(""kernel_h""))
        {
            String pool = toLowerCase(params.get<String>(""pool"", ""max""));
            if (pool == ""max"")
                type = MAX;
            else if (pool == ""ave"")
                type = AVE;
            else if (pool == ""stochastic"")
                type = STOCHASTIC;
            else if (pool == ""sum"")
                type = SUM;
            else
                CV_Error(Error::StsBadArg, ""Unknown pooling type \"""" + pool + ""\"""");

            getPoolingKernelParams(params, kernel_size, isGloba...",1,<empty>,,102,2,CPPASTProblemDeclaration,,<empty>
424235,UNKNOWN,-1,,"class PriorBoxLayerImpl CV_FINAL : public PriorBoxLayer
{
public:
    static bool getParameterDict(const LayerParams &params,
                                 const std::string &parameterName,
                                 DictValue& result)
    {
        if (!params.has(parameterName))
        {
            return false;
        }

        result = params.get(parameterName);
        return true;
    }

    template<typename T>
    T getParameter(const LayerParams &params,
                   const std::string &parameterName,
                   const size_t &idx=0,
                   const bool required=true,
                   const T& defaultValue=T())
    {
        DictValue dictValue;
        bool success = getParameterDict(params, parameterName, dictValue);
        if(!success)
        {
            if(required)
            {
                std::string message = _layerName;
                message += "" layer parameter does not contain "";
                message += parameterN...",1,<empty>,,79,1,CPPASTProblemDeclaration,,<empty>
424276,UNKNOWN,-1,,"class ProposalLayerImpl CV_FINAL : public ProposalLayer
{
public:
    ProposalLayerImpl(const LayerParams& params)
    {
        setParamsFrom(params);

        featStride = params.get<uint32_t>(""feat_stride"", 16);
        baseSize = params.get<uint32_t>(""base_size"", 16);
        // uint32_t minSize = params.get<uint32_t>(""min_size"", 16);
        keepTopBeforeNMS = params.get<uint32_t>(""pre_nms_topn"", 6000);
        keepTopAfterNMS = params.get<uint32_t>(""post_nms_topn"", 300);
        nmsThreshold = params.get<float>(""nms_thresh"", 0.7);
        ratios = params.get(""ratio"");
        scales = params.get(""scale"");

        {
            LayerParams lp;
            lp.set(""step"", featStride);
            lp.set(""flip"", false);
            lp.set(""clip"", false);
            lp.set(""normalized_bbox"", false);
            lp.set(""offset"", 0.5 * baseSize / featStride);

            // Unused values.
            float variance[] = {0.1f, 0.1f, 0.2f, 0.2f};
            lp.set(""variance"", DictV...",1,<empty>,,22,1,CPPASTProblemDeclaration,,<empty>
424363,UNKNOWN,1,,const int*,27,<empty>,,73,1,CPPASTTypeId,,<empty>
424469,UNKNOWN,-1,,"class LSTMLayerImpl CV_FINAL : public LSTMLayer
{
    int numTimeStamps, numSamples, numHidden;
    bool allocated;

    MatShape outTailShape;  //shape of single output sample
    MatShape outTsShape;    //shape of N output samples

    enum layout_t : int {
        SEQ_BATCH_HID = 0,
        BATCH_SEQ_HID = 1
    };

    bool useTimestampDim;
    bool produceCellOutput;
    float forgetBias, cellClip;
    bool useCellClip, usePeephole;
    bool reverse;   // If true, go in negative direction along the time axis
    bool bidirectional;  // If true, produces both forward and reversed directions along time axis
    layout_t layout;  // If layout == BATCH_SEQ_HID, uses batch_size x seq_length x num_hidden for input and output
                      // else uses seq_length x batch_size x num_hidden

    ActivationFunction f_activation;
    ActivationFunction g_activation;
    ActivationFunction h_activation;
    bool isDefaultActivations{true};

#if CV_TRY_AVX
    bool useAVX;
#endif
#i...",1,<empty>,,108,6,CPPASTProblemDeclaration,,<empty>
424557,UNKNOWN,-1,,),53,<empty>,,812,16,CPPASTProblemDeclaration,,<empty>
424558,UNKNOWN,-1,,"CV_OVERRIDE
    {
        produceH = produce;
    }",55,<empty>,,812,17,CPPASTProblemDeclaration,,<empty>
424568,UNKNOWN,-1,,),102,<empty>,,817,19,CPPASTProblemDeclaration,,<empty>
424569,UNKNOWN,-1,,"CV_OVERRIDE
    {
        CV_Assert(W_hh.dims == 2 && W_xh.dims == 2);
        CV_Assert(W_hh.size[0] == W_xh.size[0] && W_hh.size[0] == W_hh.size[1] && (int)b_h.total() == W_xh.size[0]);
        CV_Assert(W_ho.size[0] == (int)b_o.total());
        CV_Assert(W_ho.size[1] == W_hh.size[1]);

        blobs.resize(5);
        blobs[0] = Mat(W_xh.clone());
        blobs[1] = Mat(b_h.clone());
        blobs[2] = Mat(W_hh.clone());
        blobs[3] = Mat(W_ho.clone());
        blobs[4] = Mat(b_o.clone());
    }",104,<empty>,,817,20,CPPASTProblemDeclaration,,<empty>
424578,UNKNOWN,-1,,t,64,<empty>,,835,22,CPPASTProblemDeclaration,,<empty>
424579,UNKNOWN,-1,,"CV_OVERRIDE
    {
        CV_Assert(inputs.size() >= 1 && inputs.size() <= 2);

        Mat Who_ = blobs[3];
        Mat Wxh_ = blobs[0];

        int numTimestamps_ = inputs[0][0];
        int numSamples_ = inputs[0][1];

        int numO_ = Who_.rows;
        int numH_ = Wxh_.rows;

        outputs.clear();
        int dims[] = {numTimestamps_, numSamples_, numO_};
        outputs.push_back(shape(dims, 3));
        dims[2] = numH_;
        if (produceH)
            outputs.push_back(shape(dims, 3));

        internals.assign(2, shape(numSamples_, numH_));
        internals.push_back(shape(numSamples_, 1));

        return false;
    }",66,<empty>,,835,23,CPPASTProblemDeclaration,,<empty>
424586,UNKNOWN,-1,,),69,<empty>,,861,25,CPPASTProblemDeclaration,,<empty>
424587,UNKNOWN,-1,,"CV_OVERRIDE
    {
        std::vector<Mat> input, outputs;
        inputs_arr.getMatVector(input);

        CV_Assert(input.size() >= 1 && input.size() <= 2);

        Wxh = blobs[0];
        bh  = blobs[1];
        Whh = blobs[2];
        Who = blobs[3];
        bo  = blobs[4];

        numH = Wxh.rows;
        numX = Wxh.cols;
        numO = Who.rows;

        const Mat& inp0 = input[0];

        CV_Assert(inp0.dims >= 2);
        CV_Assert(inp0.total(2) == numX);
        dtype = CV_32F;
        CV_Assert(inp0.type() == dtype);
        numTimestamps = inp0.size[0];
        numSamples = inp0.size[1];
        numSamplesTotal = numTimestamps * numSamples;

        bh = bh.reshape(1, 1); //is 1 x numH Mat
        bo = bo.reshape(1, 1); //is 1 x numO Mat
    }",71,<empty>,,861,26,CPPASTProblemDeclaration,,<empty>
424643,UNKNOWN,-1,,),115,<empty>,,904,29,CPPASTProblemDeclaration,,<empty>
424644,UNKNOWN,-1,,"CV_OVERRIDE
    {
        CV_TRACE_FUNCTION();
        CV_TRACE_ARG_VALUE(name, ""name"", name.c_str());

        if (inputs_arr.depth() == CV_16S)
        {
            forward_fallback(inputs_arr, outputs_arr, internals_arr);
            return;
        }

        std::vector<Mat> input, output, internals;
        inputs_arr.getMatVector(input);
        outputs_arr.getMatVector(output);
        internals_arr.getMatVector(internals);

        Mat xTs = input[0].reshape(1, numSamplesTotal);
        Mat oTs = output[0].reshape(1, numSamplesTotal);
        Mat hTs = produceH ? output[1].reshape(1, numSamplesTotal) : Mat();
        Mat hCurr = internals[0];
        Mat hPrev = internals[1];
        Mat dummyBiasOnes = internals[2];

        hPrev.setTo(0.);
        dummyBiasOnes.setTo(1.);

        for (int ts = 0; ts < numTimestamps; ts++)
        {
            Range curRowRange = Range(ts * numSamples, (ts + 1) * numSamples);
            Mat xCurr = xTs.rowRange(curRowRange);

        ...",117,<empty>,,904,30,CPPASTProblemDeclaration,,<empty>
424645,UNKNOWN,-1,,CV_EXPORTS_W,1,<empty>,,951,11,CPPASTProblemDeclaration,,<empty>
424659,UNKNOWN,-1,,"class GRULayerImpl CV_FINAL : public GRULayer
{
    int numTimeStamps, numSamples;
    bool allocated;

    MatShape outTailShape;  //shape of single output sample
    MatShape outTsShape;    //shape of N output samples
    bool bidirectional;     // If true, produces both forward and reversed directions along time axis

public:

    GRULayerImpl(const LayerParams& params) : numTimeStamps(0), numSamples(0)
    {
        setParamsFrom(params);

        bidirectional = params.get<bool>(""bidirectional"", false);
        if (!blobs.empty())
        {
            CV_Assert(blobs.size() >= 3);

            blobs[2] = blobs[2].reshape(1, 1);

            const Mat& Wh = blobs[0];
            const Mat& Wx = blobs[1];
            const Mat& bias = blobs[2];
            const Mat& hInternal = blobs[3];
            CV_CheckEQ(Wh.dims, 2, """");
            CV_CheckEQ(Wx.dims, 2, """");
            CV_CheckEQ(Wh.rows, Wx.rows, """");
            CV_CheckEQ(Wh.rows, (1 + static_cast<int>(bidirectional...",1,<empty>,,956,13,CPPASTProblemDeclaration,,<empty>
424684,UNKNOWN,-1,,"class ReduceLayerImpl CV_FINAL : public ReduceLayer
{
public:
    ReduceLayerImpl(const LayerParams& params) {
        setParamsFrom(params);

        // set reduce type
        CV_Assert(params.has(""reduce""));
        String op_type = toLowerCase(params.get<String>(""reduce""));
        if (op_type == ""max"")
            reduce_type = ReduceType::MAX;
        else if (op_type == ""min"")
            reduce_type = ReduceType::MIN;
        else if (op_type == ""mean"")
            reduce_type = ReduceType::MEAN;
        else if (op_type == ""sum"")
            reduce_type = ReduceType::SUM;
        else if (op_type == ""sum_square"")
            reduce_type = ReduceType::SUM_SQUARE;
        else if (op_type == ""l1"")
            reduce_type = ReduceType::L1;
        else if (op_type == ""l2"")
            reduce_type = ReduceType::L2;
        else if (op_type == ""log_sum"")
            reduce_type = ReduceType::LOG_SUM;
        else if (op_type == ""log_sum_exp"")
            reduce_type = ReduceType...",1,<empty>,,11,1,CPPASTProblemDeclaration,,<empty>
424723,UNKNOWN,-1,,"class RegionLayerImpl CV_FINAL : public RegionLayer
{
public:
    int coords, classes, anchors, classfix;
    float thresh, scale_x_y;
    int new_coords;
    bool useSoftmax, useLogistic;
#ifdef HAVE_OPENCL
    UMat blob_umat;
#endif

    RegionLayerImpl(const LayerParams& params)
    {
        setParamsFrom(params);
        CV_Assert(blobs.size() == 1);

        thresh = params.get<float>(""thresh"", 0.2);
        coords = params.get<int>(""coords"", 4);
        classes = params.get<int>(""classes"", 0);
        anchors = params.get<int>(""anchors"", 5);
        classfix = params.get<int>(""classfix"", 0);
        useSoftmax = params.get<bool>(""softmax"", false);
        useLogistic = params.get<bool>(""logistic"", false);
        nmsThreshold = params.get<float>(""nms_threshold"", 0.4);
        scale_x_y = params.get<float>(""scale_x_y"", 1.0); // Yolov4
        new_coords = params.get<int>(""new_coords"", 0); // Yolov4x-mish

        CV_Assert(nmsThreshold >= 0.);
        CV_Assert(coords == 4);
 ...",1,<empty>,,69,1,CPPASTProblemDeclaration,,<empty>
424764,UNKNOWN,-1,,"class ReorgLayerImpl CV_FINAL : public ReorgLayer
{
    int reorgStride;
public:

    ReorgLayerImpl(const LayerParams& params)
    {
        setParamsFrom(params);

        reorgStride = params.get<int>(""reorg_stride"", 2);
        CV_Assert(reorgStride > 0);
    }

    bool getMemoryShapes(const std::vector<MatShape> &inputs,
                         const int requiredOutputs,
                         std::vector<MatShape> &outputs,
                         std::vector<MatShape> &internals) const CV_OVERRIDE
    {
        CV_Assert(inputs.size() > 0);
        outputs = std::vector<MatShape>(inputs.size(), shape(
            inputs[0][0],
            inputs[0][1] * reorgStride * reorgStride,
            inputs[0][2] / reorgStride,
            inputs[0][3] / reorgStride));

        CV_Assert(outputs[0][0] > 0 && outputs[0][1] > 0 && outputs[0][2] > 0 && outputs[0][3] > 0);
        CV_Assert(total(outputs[0]) == total(inputs[0]));

        return false;
    }

    virtual void finaliz...",1,<empty>,,73,1,CPPASTProblemDeclaration,,<empty>
424815,UNKNOWN,1,,int,25,<empty>,,69,1,CPPASTTypeId,,<empty>
424824,UNKNOWN,1,,int,26,<empty>,,70,1,CPPASTTypeId,,<empty>
425220,UNKNOWN,1,,int,31,<empty>,,152,1,CPPASTTypeId,,<empty>
425232,UNKNOWN,-1,,"class ReshapeLayerImpl CV_FINAL : public ReshapeLayer
{
public:
    ReshapeLayerImpl(const LayerParams& params)
    {
        setParamsFrom(params);
        axis = params.get<int>(""axis"", 0);
        numAxes = params.get<int>(""num_axes"", -1);
        hasDynamicShapes = params.get<bool>(""has_dynamic_shapes"", false);
        shapesInitialized = !hasDynamicShapes;

        zeropoint = params.get<int>(""zeropoints"", 0);
        scale = params.get<float>(""scales"", 1.0f);

        CV_Assert(numAxes >= -1);
        newShapeRange = (numAxes == -1) ? Range(axis, INT_MAX) : Range(axis, axis + numAxes);

        newShapeDesc.clear();
        if (params.has(""dim""))
        {
            const DictValue &paramShape = params.get(""dim"");
            int i, dims = paramShape.size();
            newShapeDesc.resize(dims);
            for (i = 0; i < dims; i++)
                newShapeDesc[i] = paramShape.get<int>(i);
        }
        if (hasDynamicShapes)
        {
            dynamicShapes.clear();...",1,<empty>,,161,2,CPPASTProblemDeclaration,,<empty>
425400,UNKNOWN,-1,,t,64,<empty>,,60,3,CPPASTProblemDeclaration,,<empty>
425401,UNKNOWN,-1,,"CV_OVERRIDE
    {
        CV_Assert_N(inputs.size() == 1 || inputs.size() == 2, inputs[0].size() == 4);
        outputs.resize(1, inputs[0]);
        if (inputs.size() == 1) {
            outputs[0][2] = zoomFactorHeight > 0 ? (outputs[0][2] * zoomFactorHeight) : outHeight;
            outputs[0][3] = zoomFactorWidth > 0 ? (outputs[0][3] * zoomFactorWidth) : outWidth;
        } else {
            CV_CheckGE(inputs[1].size(), (size_t)4, """");
            outputs[0][2] = inputs[1][2];
            outputs[0][3] = inputs[1][3];
        }
        // We can work in-place (do nothing) if input shape == output shape.
        return (outputs[0][2] == inputs[0][2]) && (outputs[0][3] == inputs[0][3]);
    }",66,<empty>,,60,4,CPPASTProblemDeclaration,,<empty>
425407,UNKNOWN,-1,,),46,<empty>,,76,6,CPPASTProblemDeclaration,,<empty>
425408,UNKNOWN,-1,,"CV_OVERRIDE
    {
        if (backendId == DNN_BACKEND_CUDA)
            return interpolation == ""nearest"" || interpolation == ""bilinear"" || interpolation == ""opencv_linear"";

        if (backendId == DNN_BACKEND_CANN)
            return interpolation == ""nearest"" || interpolation == ""bilinear"" || interpolation == ""opencv_linear"";

#ifdef HAVE_INF_ENGINE
        if (backendId == DNN_BACKEND_INFERENCE_ENGINE_NGRAPH)
        {
            return (interpolation == ""nearest"" && scaleWidth == scaleHeight) ||
                   (interpolation == ""bilinear"");
        }
#endif
        return backendId == DNN_BACKEND_OPENCV;
    }",48,<empty>,,76,7,CPPASTProblemDeclaration,,<empty>
425415,UNKNOWN,-1,,),89,<empty>,,94,9,CPPASTProblemDeclaration,,<empty>
425416,UNKNOWN,-1,,"CV_OVERRIDE
    {
        std::vector<Mat> inputs, outputs;
        inputs_arr.getMatVector(inputs);
        outputs_arr.getMatVector(outputs);

        outHeight = outputs[0].size[2];
        outWidth = outputs[0].size[3];
        if (alignCorners && outHeight > 1)
            scaleHeight = static_cast<float>(inputs[0].size[2] - 1) / (outHeight - 1);
        else
            scaleHeight = static_cast<float>(inputs[0].size[2]) / outHeight;

        if (alignCorners && outWidth > 1)
            scaleWidth = static_cast<float>(inputs[0].size[3] - 1) / (outWidth - 1);
        else
            scaleWidth = static_cast<float>(inputs[0].size[3]) / outWidth;
    }",91,<empty>,,94,10,CPPASTProblemDeclaration,,<empty>
425424,UNKNOWN,-1,,),115,<empty>,,113,12,CPPASTProblemDeclaration,,<empty>
425425,UNKNOWN,-1,,"CV_OVERRIDE
    {
        CV_TRACE_FUNCTION();
        CV_TRACE_ARG_VALUE(name, ""name"", name.c_str());

        if (inputs_arr.depth() == CV_16S)
        {
            forward_fallback(inputs_arr, outputs_arr, internals_arr);
            return;
        }

        std::vector<Mat> inputs, outputs, internals;
        inputs_arr.getMatVector(inputs);
        outputs_arr.getMatVector(outputs);
        internals_arr.getMatVector(internals);

        if (outHeight == inputs[0].size[2] && outWidth == inputs[0].size[3])
        {
            // outputs[0] = inputs[0] doesn't work due to BlobManager optimizations
            if (inputs[0].data != outputs[0].data)
            {
                inputs[0].copyTo(outputs[0]);
            }
            return;
        }

        Mat& inp = inputs[0];
        Mat& out = outputs[0];
        int depth = inp.depth();
        if ((interpolation == ""nearest"" && !alignCorners && !halfPixelCenters) || (interpolation == ""opencv_linear"" && depth != CV_8S)...",117,<empty>,,113,13,CPPASTProblemDeclaration,,<empty>
425433,UNKNOWN,-1,,),99,<empty>,,494,15,CPPASTProblemDeclaration,,<empty>
425434,UNKNOWN,-1,,"CV_OVERRIDE
    {
        return true;
    }",101,<empty>,,494,16,CPPASTProblemDeclaration,,<empty>
425457,UNKNOWN,-1,,"class InterpLayerImpl CV_FINAL : public ResizeLayerImpl
{
public:
    InterpLayerImpl(const LayerParams& params) : ResizeLayerImpl(params) {}

    bool getMemoryShapes(const std::vector<MatShape> &inputs,
                         const int requiredOutputs,
                         std::vector<MatShape> &outputs,
                         std::vector<MatShape> &internals) const CV_OVERRIDE
    {
        CV_Assert_N(inputs.size() == 1, inputs[0].size() == 4);
        outputs.resize(1, inputs[0]);
        outputs[0][2] = zoomFactorHeight > 0 ? (1 + zoomFactorHeight * (outputs[0][2] - 1)) : outHeight;
        outputs[0][3] = zoomFactorWidth > 0 ? (1 + zoomFactorWidth * (outputs[0][3] - 1)) : outWidth;
        // We can work in-place (do nothing) if input shape == output shape.
        return (outputs[0][2] == inputs[0][2]) && (outputs[0][3] == inputs[0][3]);
    }
};",1,<empty>,,514,3,CPPASTProblemDeclaration,,<empty>
425513,UNKNOWN,-1,,"class ScaleLayerImpl CV_FINAL : public ScaleLayer
{
public:
#ifdef HAVE_WEBNN
    mutable int dims;
    mutable int numChannels;
#endif
    ScaleLayerImpl(const LayerParams& params)
    {
        setParamsFrom(params);
        hasBias = params.get<bool>(""bias_term"", false);
        axis = params.get<int>(""axis"", 1);
        hasWeights = false;
        mode = params.get<String>(""mode"", ""scale"");
    }

    bool getMemoryShapes(const std::vector<MatShape> &inputs,
                         const int requiredOutputs,
                         std::vector<MatShape> &outputs,
                         std::vector<MatShape> &internals) const CV_OVERRIDE
    {
        outputs.assign(1, inputs[0]);
#ifdef HAVE_WEBNN
        dims = inputs[0].size();
        numChannels = 1;
        if (inputs.size() > 1)
        {
            for (const size_t& dim : inputs[1])
                numChannels *= dim;
        }
#endif
        return true;
    }

    virtual void finalize(InputArrayOfArrays inputs_ar...",1,<empty>,,33,1,CPPASTProblemDeclaration,,<empty>
425629,UNKNOWN,-1,,"class DataAugmentationLayerImpl CV_FINAL : public DataAugmentationLayer
{
public:
    DataAugmentationLayerImpl(const LayerParams& params)
    {
        setParamsFrom(params);
        recompute_mean = params.get<int>(""recompute_mean"", 1);
        CV_CheckGT(recompute_mean, 0, """");
        mean_per_pixel = params.get<bool>(""mean_per_pixel"", false);
    }

    bool getMemoryShapes(const std::vector<MatShape> &inputs,
                         const int requiredOutputs,
                         std::vector<MatShape> &outputs,
                         std::vector<MatShape> &internals) const CV_OVERRIDE
    {
        CV_Assert_N(inputs.size() == 1, blobs.size() == 3);
        CV_Assert_N(blobs[0].total() == 1,
                    blobs[2].total() == inputs[0][1]);

        outputs.assign(1, inputs[0]);
        return true;
    }

    void forward(InputArrayOfArrays inputs_arr, OutputArrayOfArrays outputs_arr, OutputArrayOfArrays internals_arr) CV_OVERRIDE
    {
        CV_TRACE_FUNCTION()...",1,<empty>,,480,5,CPPASTProblemDeclaration,,<empty>
425656,UNKNOWN,-1,,"class ScatterNDLayerImpl CV_FINAL : public ScatterNDLayer
{
public:
    enum class REDUCTION
    {
        NONE = 1,
        ADD,
        MUL,
        MAX,
        MIN
    } reduction;

    ScatterNDLayerImpl(const LayerParams& params)
    {
        setParamsFrom(params);

        String reduction_name = toLowerCase(params.get<String>(""reduction"", ""none""));
        if (reduction_name == ""none"")
            reduction = REDUCTION::NONE;
        else if (reduction_name == ""add"")
            reduction = REDUCTION::ADD;
        else if (reduction_name == ""mul"")
            reduction = REDUCTION::MUL;
        else if (reduction_name == ""max"")
            reduction = REDUCTION::MAX;
        else if (reduction_name == ""min"")
            reduction = REDUCTION::MIN;
        else
            CV_Error(cv::Error::StsBadArg, ""Unkown reduction \"""" + reduction_name + ""\"""");
    }

    virtual bool supportBackend(int backendId) CV_OVERRIDE
    {
        return backendId == DNN_BACKEND_OPENCV;
    }
...",1,<empty>,,12,1,CPPASTProblemDeclaration,,<empty>
425681,UNKNOWN,-1,,"class ScatterLayerImpl CV_FINAL : public ScatterLayer
{
public:
    enum class REDUCTION
    {
        NONE = 1,
        ADD,
        MUL,
        MAX,
        MIN
    } reduction;

    ScatterLayerImpl(const LayerParams& params)
    {
        setParamsFrom(params);

        axis = params.get<int>(""axis"", 0);
        String reduction_name = toLowerCase(params.get<String>(""reduction"", ""none""));
        if (reduction_name == ""none"")
            reduction = REDUCTION::NONE;
        else if (reduction_name == ""add"")
            reduction = REDUCTION::ADD;
        else if (reduction_name == ""mul"")
            reduction = REDUCTION::MUL;
        else if (reduction_name == ""max"")
            reduction = REDUCTION::MAX;
        else if (reduction_name == ""min"")
            reduction = REDUCTION::MIN;
        else
            CV_Error(cv::Error::StsBadArg, ""Unkown reduction \"""" + reduction_name + ""\"""");
    }

    virtual bool supportBackend(int backendId) CV_OVERRIDE
    {
        return ba...",1,<empty>,,12,1,CPPASTProblemDeclaration,,<empty>
425706,UNKNOWN,-1,,"class ShuffleChannelLayerImpl CV_FINAL : public ShuffleChannelLayer
{
public:
    ShuffleChannelLayerImpl(const LayerParams& params)
    {
        group = params.get<int>(""group"", 1);
        setParamsFrom(params);
    }

    virtual bool supportBackend(int backendId) CV_OVERRIDE
    {
        return backendId == DNN_BACKEND_OPENCV ||
               backendId == DNN_BACKEND_CUDA;
    }

    bool getMemoryShapes(const std::vector<MatShape> &inputs,
                         const int requiredOutputs,
                         std::vector<MatShape> &outputs,
                         std::vector<MatShape> &internals) const CV_OVERRIDE
    {
        CV_Assert(inputs.size() == 1 && inputs[0].size() == 4);
        CV_Assert(inputs[0][1] % group == 0);
        Layer::getMemoryShapes(inputs, requiredOutputs, outputs, internals);
        return group == 1;
    }

    virtual void finalize(InputArrayOfArrays inputs_arr, OutputArrayOfArrays outputs_arr) CV_OVERRIDE
    {
        if (group != 1)
...",1,<empty>,,17,1,CPPASTProblemDeclaration,,<empty>
425979,UNKNOWN,1,,int,32,<empty>,,121,1,CPPASTTypeId,,<empty>
426542,UNKNOWN,-1,,),46,<empty>,,225,3,CPPASTProblemDeclaration,,<empty>
426543,UNKNOWN,-1,,"CV_OVERRIDE
    {
#ifdef HAVE_INF_ENGINE
        if (backendId == DNN_BACKEND_INFERENCE_ENGINE_NGRAPH)
            return sliceRanges.size() == 1 && !hasSteps && neg_step_dims.empty();
#endif
#ifdef HAVE_CUDA
        if (backendId == DNN_BACKEND_CUDA)
            return !hasSteps && neg_step_dims.empty();
#endif
        return backendId == DNN_BACKEND_OPENCV || backendId == DNN_BACKEND_CANN;
    }",48,<empty>,,225,4,CPPASTProblemDeclaration,,<empty>
426552,UNKNOWN,-1,,t,67,<empty>,,241,6,CPPASTProblemDeclaration,,<empty>
426553,UNKNOWN,-1,,"CV_OVERRIDE
    {
        CV_Assert(inputs.size() == 1);
        MatShape inpShape = inputs[0];

        std::vector<std::vector<int> > sliceSteps_ = sliceSteps;
        std::vector<std::vector<cv::Range> > sliceRanges_ = sliceRanges;
        if (hasSteps && !neg_step_dims.empty())
            tranformForNegSteps(inpShape, sliceRanges_, sliceSteps_);

        int axis_rw = axis;
        std::vector<std::vector<cv::Range> > sliceRanges_rw = finalizeSliceRange(inpShape, axis_rw, sliceRanges_);

        if (!sliceRanges_rw.empty())
        {
            outputs.resize(sliceRanges_rw.size(), inpShape);
            for (int i = 0; i < outputs.size(); ++i)
            {
                CV_Assert(sliceRanges_rw[i].size() <= inpShape.size());
                for (int j = 0; j < sliceRanges_rw[i].size(); ++j)
                {
                    if (shapesInitialized || inpShape[j] > 0)
                        outputs[i][j] = normalizeRange(sliceRanges_rw[i][j], inpShape[j]).size();

      ...",69,<empty>,,241,7,CPPASTProblemDeclaration,,<empty>
426559,UNKNOWN,-1,,),64,<empty>,,281,9,CPPASTProblemDeclaration,,<empty>
426560,UNKNOWN,-1,,"CV_OVERRIDE
    {
        shapesInitialized = true;
        return true;
    }",66,<empty>,,281,10,CPPASTProblemDeclaration,,<empty>
426567,UNKNOWN,-1,,),81,<empty>,,287,12,CPPASTProblemDeclaration,,<empty>
426568,UNKNOWN,-1,,"CV_OVERRIDE
    {
#ifdef HAVE_OPENCL
        ocl_exec_cache.clear();
#endif

        std::vector<Mat> inputs, outputs;
        inputs_arr.getMatVector(inputs);
        outputs_arr.getMatVector(outputs);

        CV_Assert(inputs.size() == 1);
        MatShape inpShape = shape(inputs[0]);

        if (hasSteps && !neg_step_dims.empty())
            tranformForNegSteps(inpShape, sliceRanges, sliceSteps);

        finalSliceRanges = finalizeSliceRange(shape(inputs[0]), axis, sliceRanges);

        if (sliceRanges.empty())
        {
            // Divide input blob on equal parts by axis.
            int outAxisSize = inpShape[axis] / outputs.size();
            finalSliceRanges.resize(outputs.size(),
                                    std::vector<Range>(axis + 1, Range::all()));
            int prevSlice = 0;
            for (int i = 0; i < outputs.size(); ++i)
            {
                finalSliceRanges[i][axis].start = prevSlice;
                finalSliceRanges[i][axis].end = fi...",83,<empty>,,287,13,CPPASTProblemDeclaration,,<empty>
426576,UNKNOWN,-1,,),115,<empty>,,594,15,CPPASTProblemDeclaration,,<empty>
426577,UNKNOWN,-1,,"CV_OVERRIDE
    {
        CV_TRACE_FUNCTION();
        CV_TRACE_ARG_VALUE(name, ""name"", name.c_str());

        CV_OCL_RUN(IS_DNN_OPENCL_TARGET(preferableTarget),
                   forward_ocl(inputs_arr, outputs_arr, internals_arr))

        std::vector<Mat> inputs, outputs;
        inputs_arr.getMatVector(inputs);
        outputs_arr.getMatVector(outputs);

        const Mat& inpMat = inputs[0];
        CV_Assert(outputs.size() == finalSliceRanges.size());

        if (!hasSteps)
        {
            for (size_t i = 0; i < outputs.size(); i++)
            {
                inpMat(finalSliceRanges[i]).copyTo(outputs[i]);
            }
        }
        else
        {
            int dimsNum = inpMat.dims;

            for (size_t i = 0; i < outputs.size(); i++)
            {
                std::vector<int> inpIdx(dimsNum, 0);
                std::vector<int> outIdx(dimsNum, 0);
                if (inpMat.type() == CV_16S)
                    getSliceRecursive<int16_t>(inpMat, in...",117,<empty>,,594,16,CPPASTProblemDeclaration,,<empty>
426585,UNKNOWN,-1,,),99,<empty>,,809,18,CPPASTProblemDeclaration,,<empty>
426586,UNKNOWN,-1,,"CV_OVERRIDE
    {
        const int numOutputs = scales[1].size();
        for (int i = 0; i < numOutputs; i++)
        {
            if (scales[1][i] != scales[0][0])
             return false;
        }
        return true;
    }",101,<empty>,,809,19,CPPASTProblemDeclaration,,<empty>
426732,UNKNOWN,-1,,"class CropLayerImpl CV_FINAL : public SliceLayerImpl
{
public:
    CropLayerImpl(const LayerParams& params) : SliceLayerImpl(LayerParams())
    {
        setParamsFrom(params);
        axis = params.get<int>(""axis"", 2);
        const DictValue *paramOffset = params.ptr(""offset"");

        if (paramOffset)
        {
            for (int i = 0; i < paramOffset->size(); i++)
                offset.push_back(paramOffset->get<int>(i));
        }
    }

    bool getMemoryShapes(const std::vector<MatShape> &inputs,
                         const int requiredOutputs,
                         std::vector<MatShape> &outputs,
                         std::vector<MatShape> &internals) const CV_OVERRIDE
    {
        CV_Assert(inputs.size() == 2);

        MatShape dstShape = inputs[0];
        int start = normalize_axis(axis, dstShape);
        for (int i = start; i < dstShape.size(); i++)
        {
            dstShape[i] = inputs[1][i];
        }
        outputs.resize(1, dstShape);
        r...",1,<empty>,,858,5,CPPASTProblemDeclaration,,<empty>
426794,UNKNOWN,-1,,"class SoftMaxLayerImpl CV_FINAL : public SoftmaxLayer
{
public:

    SoftMaxLayerImpl(const LayerParams& params)
    {
        axisRaw = params.get<int>(""axis"", -1);
        logSoftMax = params.get<bool>(""log_softmax"", false);
        setParamsFrom(params);
    }

#ifdef HAVE_OPENCL
    Ptr<OCL4DNNSoftmax<float> > softmaxOp;
#endif

    bool getMemoryShapes(const std::vector<MatShape> &inputs,
                         const int requiredOutputs,
                         std::vector<MatShape> &outputs,
                         std::vector<MatShape> &internals) const CV_OVERRIDE
    {
        bool inplace = Layer::getMemoryShapes(inputs, requiredOutputs, outputs, internals);
        MatShape shape = inputs[0];
        int cAxis = normalize_axis(axisRaw, shape.size());
        shape[cAxis] = 1;
        internals.assign(1, shape);
        return inplace;
    }

    virtual bool supportBackend(int backendId) CV_OVERRIDE
    {
#ifdef HAVE_INF_ENGINE
        if (backendId == DNN_BACKEND_INF...",1,<empty>,,73,1,CPPASTProblemDeclaration,,<empty>
426823,UNKNOWN,-1,,"class SplitLayerImpl CV_FINAL : public SplitLayer
{
public:
    SplitLayerImpl(const LayerParams &params)
    {
        setParamsFrom(params);
        //TODO: maybe ""top_count"" param is useless because it can be determined by output connections number
        if (params.has(""top_count""))
        {
            outputsCount = params.get<int>(""top_count"");
            CV_Assert(outputsCount >= 0);
        }
        else
        {
            outputsCount = -1;
        }
    }

    virtual bool supportBackend(int backendId) CV_OVERRIDE
    {
        return backendId == DNN_BACKEND_OPENCV ||
               backendId == DNN_BACKEND_CUDA;
    }

    bool getMemoryShapes(const std::vector<MatShape> &inputs,
                         const int requiredOutputs,
                         std::vector<MatShape> &outputs,
                         std::vector<MatShape> &internals) const CV_OVERRIDE
    {
        CV_Assert(inputs.size() == 1);

        Layer::getMemoryShapes(inputs, max(1, outputsCou...",1,<empty>,,57,1,CPPASTProblemDeclaration,,<empty>
426850,UNKNOWN,-1,,"class TileLayerImpl CV_FINAL : public TileLayer
{
public:
    TileLayerImpl(const LayerParams& params)
    {
        setParamsFrom(params);
        if (params.has(""repeats""))
        {
            DictValue param_repeats = params.get(""repeats"");
            int n_repeats = param_repeats.size();

            CV_Assert(n_repeats > 0);
            repeats.resize(n_repeats);
            for (int i = 0; i < n_repeats; i++)
                repeats[i] = param_repeats.get<int>(i);
        }
        else
            CV_Error(Error::StsNotImplemented, ""Tile: repeats needs to be treated as parameter but it is missing."");
    }

    virtual bool supportBackend(int backendId) CV_OVERRIDE
    {
        return backendId == DNN_BACKEND_OPENCV;
    }

    virtual bool getMemoryShapes(const std::vector<MatShape> &inputs,
                                 const int requiredOutputs,
                                 std::vector<MatShape> &outputs,
                                 std::vector<MatShape> &i...",1,<empty>,,12,1,CPPASTProblemDeclaration,,<empty>
426889,UNKNOWN,-1,,"CV__DNN_INLINE_NS_BEGIN


BackendNode::BackendNode(int backendId)
    : backendId(backendId)
{}

BackendNode::~BackendNode() {}

BackendWrapper::BackendWrapper(int backendId, int targetId)
    : backendId(backendId)
    , targetId(targetId)
{}

BackendWrapper::BackendWrapper(int targetId, const cv::Mat& m)
{
    CV_Error(Error::StsNotImplemented,
            ""Constructor of backend wrapper must be implemented"");
}

BackendWrapper::BackendWrapper(const Ptr<BackendWrapper>& base, const MatShape& shape)
{
    CV_Error(Error::StsNotImplemented,
            ""Constructor of backend wrapper must be implemented"");
}

BackendWrapper::~BackendWrapper() {}



inline namespace detail {


Ptr<BackendWrapper> wrapMat(int backendId, int targetId, cv::Mat& m)
{
    if (backendId == DNN_BACKEND_OPENCV)
    {
        if (targetId == DNN_TARGET_CPU)
            return Ptr<BackendWrapper>();
#ifdef HAVE_OPENCL
        else if (IS_DNN_OPENCL_TARGET(targetId))
            return OpenCLBackendWrapper::cre...",1,<empty>,,20,1,CPPASTProblemDeclaration,,<empty>
426899,UNKNOWN,-1,,CV__DNN_INLINE_NS_BEGIN,1,<empty>,,11,1,CPPASTProblemDeclaration,,<empty>
427351,UNKNOWN,1,,size_t,38,<empty>,,241,1,CPPASTTypeId,,<empty>
427700,UNKNOWN,-1,,"CV__DNN_INLINE_NS_END
",1,<empty>,,337,3,CPPASTProblemDeclaration,,<empty>
427848,UNKNOWN,1,,Net&,57,<empty>,,36,1,CPPASTTypeId,,<empty>
428741,UNKNOWN,1,,float,25,<empty>,,355,1,CPPASTTypeId,,<empty>
428750,UNKNOWN,1,,float,25,<empty>,,356,1,CPPASTTypeId,,<empty>
429153,UNKNOWN,-1,,"void DetectionModel::detect(InputArray frame, CV_OUT std::vector<int>& classIds,
                            CV_OUT std::vector<float>& confidences, CV_OUT std::vector<Rect>& boxes,
                            float confThreshold, float nmsThreshold)
{
    CV_Assert(impl != nullptr && impl.dynamicCast<DetectionModel_Impl>() != nullptr); // remove once default constructor is removed

    std::vector<Mat> detections;
    impl->processFrame(frame, detections);

    boxes.clear();
    confidences.clear();
    classIds.clear();

    int frameWidth  = frame.cols();
    int frameHeight = frame.rows();
    if (getNetwork_().getLayer(0)->outputNameToIndex(""im_info"") != -1)
    {
        frameWidth = impl->size.width;
        frameHeight = impl->size.height;
    }

    std::vector<String> layerNames = getNetwork_().getLayerNames();
    int lastLayerId = getNetwork_().getLayerId(layerNames.back());
    Ptr<Layer> lastLayer = getNetwork_().getLayer(lastLayerId);

    if (lastLayer->type == ""Det...",1,<empty>,,481,36,CPPASTProblemDeclaration,,<empty>
429306,UNKNOWN,1,,int,32,<empty>,,708,1,CPPASTTypeId,,<empty>
429692,UNKNOWN,1,,int,43,<empty>,,833,1,CPPASTTypeId,,<empty>
429915,UNKNOWN,1,,int,54,<empty>,,879,1,CPPASTTypeId,,<empty>
430025,UNKNOWN,1,,size_t,34,<empty>,,902,1,CPPASTTypeId,,<empty>
430035,UNKNOWN,-1,,"virtual
    void recognize(InputArray frame, InputArrayOfArrays roiRects, CV_OUT std::vector<std::string>& results)
    {
        CV_TRACE_FUNCTION();
        results.clear();
        if (roiRects.empty())
        {
            auto s = recognize(frame);
            results.push_back(s);
            return;
        }

        std::vector<Rect> rects;
        roiRects.copyTo(rects);

        // Predict for each RoI
        Mat input = frame.getMat();
        for (size_t i = 0; i < rects.size(); i++)
        {
            Rect roiRect = rects[i];
            Mat roi = input(roiRect);
            auto s = recognize(roi);
            results.push_back(s);
        }
    }",5,<empty>,,906,18,CPPASTProblemDeclaration,,<empty>
430044,UNKNOWN,1,,TextRecognitionModel_Impl*,19,<empty>,,936,1,CPPASTTypeId,,<empty>
430190,UNKNOWN,-1,,"void TextRecognitionModel::recognize(InputArray frame, InputArrayOfArrays roiRects, CV_OUT std::vector<std::string>& results) const
{
    TextRecognitionModel_Impl::from(impl).recognize(frame, roiRects, results);
}",1,<empty>,,983,46,CPPASTProblemDeclaration,,<empty>
430204,UNKNOWN,-1,,"virtual
    std::vector< std::vector<Point2f> > detect(InputArray frame, CV_OUT std::vector<float>& confidences)
    {
        CV_TRACE_FUNCTION();
        std::vector<RotatedRect> rects = detectTextRectangles(frame, confidences);
        std::vector< std::vector<Point2f> > results;
        for (const RotatedRect& rect : rects)
        {
            Point2f vertices[4] = {};
            rect.points(vertices);
            std::vector<Point2f> result = { vertices[0], vertices[1], vertices[2], vertices[3] };
            results.emplace_back(result);
        }
        return results;
    }",5,<empty>,,1001,3,CPPASTProblemDeclaration,,<empty>
430216,UNKNOWN,-1,,"virtual
    std::vector<RotatedRect> detectTextRectangles(InputArray frame, CV_OUT std::vector<float>& confidences)
    {
        CV_Error(Error::StsNotImplemented, """");
    }",5,<empty>,,1025,5,CPPASTProblemDeclaration,,<empty>
430236,UNKNOWN,1,,TextDetectionModel_Impl*,19,<empty>,,1043,1,CPPASTTypeId,,<empty>
430247,UNKNOWN,-1,,"static
void to32s(
        const std::vector< std::vector<Point2f> >& detections_f,
        CV_OUT std::vector< std::vector<Point> >& detections
)
{
    detections.resize(detections_f.size());
    for (size_t i = 0; i < detections_f.size(); i++)
    {
        const auto& contour_f = detections_f[i];
        std::vector<Point> contour(contour_f.size());
        for (size_t j = 0; j < contour_f.size(); j++)
        {
            contour[j].x = cvRound(contour_f[j].x);
            contour[j].y = cvRound(contour_f[j].y);
        }
        swap(detections[i], contour);
    }
}",1,<empty>,,1054,49,CPPASTProblemDeclaration,,<empty>
430248,UNKNOWN,-1,,"void TextDetectionModel::detect(
        InputArray frame,
        CV_OUT std::vector< std::vector<Point> >& detections,
        CV_OUT std::vector<float>& confidences
) const
{
    std::vector< std::vector<Point2f> > detections_f = TextDetectionModel_Impl::from(impl).detect(frame, confidences);
    to32s(detections_f, detections);
    return;
}",1,<empty>,,1074,50,CPPASTProblemDeclaration,,<empty>
430249,UNKNOWN,-1,,"void TextDetectionModel::detect(
        InputArray frame,
        CV_OUT std::vector< std::vector<Point> >& detections
) const
{
    std::vector< std::vector<Point2f> > detections_f = TextDetectionModel_Impl::from(impl).detect(frame);
    to32s(detections_f, detections);
    return;
}",1,<empty>,,1085,51,CPPASTProblemDeclaration,,<empty>
430250,UNKNOWN,-1,,"void TextDetectionModel::detectTextRectangles(
        InputArray frame,
        CV_OUT std::vector<cv::RotatedRect>& detections,
        CV_OUT std::vector<float>& confidences
) const
{
    detections = TextDetectionModel_Impl::from(impl).detectTextRectangles(frame, confidences);
    return;
}",1,<empty>,,1095,52,CPPASTProblemDeclaration,,<empty>
430251,UNKNOWN,-1,,"void TextDetectionModel::detectTextRectangles(
        InputArray frame,
        CV_OUT std::vector<cv::RotatedRect>& detections
) const
{
    detections = TextDetectionModel_Impl::from(impl).detectTextRectangles(frame);
    return;
}",1,<empty>,,1105,53,CPPASTProblemDeclaration,,<empty>
430296,UNKNOWN,-1,,"virtual
    std::vector< std::vector<Point2f> > detect(InputArray frame, CV_OUT std::vector<float>& confidences) CV_OVERRIDE
",5,<empty>,,1142,9,CPPASTProblemDeclaration,,<empty>
430297,UNKNOWN,-1,,"virtual
    std::vector<cv::RotatedRect> detectTextRectangles(InputArray frame, CV_OUT std::vector<float>& confidences) CV_OVERRIDE
    {
        CV_TRACE_FUNCTION();
        std::vector<cv::RotatedRect> results;

        std::vector<Mat> outs;
        processFrame(frame, outs);
        CV_CheckEQ(outs.size(), (size_t)2, """");
        Mat geometry = outs[0];
        Mat scoreMap = outs[1];

        CV_CheckEQ(scoreMap.dims, 4, """");
        CV_CheckEQ(geometry.dims, 4, """");
        CV_CheckEQ(scoreMap.size[0], 1, """");
        CV_CheckEQ(geometry.size[0], 1, """");
        CV_CheckEQ(scoreMap.size[1], 1, """");
        CV_CheckEQ(geometry.size[1], 5, """");
        CV_CheckEQ(scoreMap.size[2], geometry.size[2], """");
        CV_CheckEQ(scoreMap.size[3], geometry.size[3], """");

        CV_CheckType(scoreMap.type(), CV_32FC1, """");
        CV_CheckType(geometry.type(), CV_32FC1, """");

        std::vector<RotatedRect> boxes;
        std::vector<float> scores;
        const int height = scoreMap.s...",5,<empty>,,1146,10,CPPASTProblemDeclaration,,<empty>
430306,UNKNOWN,1,,TextDetectionModel_EAST_Impl*,19,<empty>,,1271,1,CPPASTTypeId,,<empty>
430482,UNKNOWN,-1,,"virtual
    std::vector<cv::RotatedRect> detectTextRectangles(InputArray frame, CV_OUT std::vector<float>& confidences) CV_OVERRIDE
    {
        CV_TRACE_FUNCTION();
        std::vector< std::vector<Point2f> > contours = detect(frame, confidences);
        std::vector<cv::RotatedRect> results; results.reserve(contours.size());
        for (size_t i = 0; i < contours.size(); i++)
        {
            auto& contour = contours[i];
            RotatedRect box = minAreaRect(contour);

            // minArea() rect is not normalized, it may return rectangles with angle=-90 or height < width
            const float angle_threshold = 60;  // do not expect vertical text, TODO detection algo property
            bool swap_size = false;
            if (box.size.width < box.size.height)  // horizontal-wide text area is expected
                swap_size = true;
            else if (std::fabs(box.angle) >= angle_threshold)  // don't work with vertical rectangles
                swap_size = tru...",5,<empty>,,1346,15,CPPASTProblemDeclaration,,<empty>
430483,UNKNOWN,-1,,"std::vector< std::vector<Point2f> > detect(InputArray frame, CV_OUT std::vector<float>& confidences) CV_OVERRIDE
    {
        CV_TRACE_FUNCTION();
        std::vector< std::vector<Point2f> > results;
        confidences.clear();
        std::vector<Mat> outs;
        processFrame(frame, outs);
        CV_Assert(outs.size() == 1);
        Mat binary = outs[0];

        // Threshold
        Mat bitmap;
        threshold(binary, bitmap, binaryThreshold, 255, THRESH_BINARY);

        // Scale ratio
        float scaleHeight = (float)(frame.rows()) / (float)(binary.size[0]);
        float scaleWidth = (float)(frame.cols()) / (float)(binary.size[1]);

        // Find contours
        std::vector< std::vector<Point> > contours;
        bitmap.convertTo(bitmap, CV_8UC1);
        findContours(bitmap, contours, RETR_LIST, CHAIN_APPROX_SIMPLE);

        // Candidate number limitation
        size_t numCandidate = std::min(contours.size(), (size_t)(maxCandidates > 0 ? maxCandidates : INT_MAX))...",5,<empty>,,1378,16,CPPASTProblemDeclaration,,<empty>
430760,UNKNOWN,1,,float,32,<empty>,,1503,1,CPPASTTypeId,,<empty>
430964,UNKNOWN,1,,double,39,<empty>,,1525,1,CPPASTTypeId,,<empty>
430977,UNKNOWN,1,,double,67,<empty>,,1525,1,CPPASTTypeId,,<empty>
430990,UNKNOWN,1,,double,39,<empty>,,1526,1,CPPASTTypeId,,<empty>
431003,UNKNOWN,1,,double,67,<empty>,,1526,1,CPPASTTypeId,,<empty>
431021,UNKNOWN,1,,double,37,<empty>,,1527,1,CPPASTTypeId,,<empty>
431034,UNKNOWN,1,,double,65,<empty>,,1527,1,CPPASTTypeId,,<empty>
431047,UNKNOWN,1,,double,93,<empty>,,1527,1,CPPASTTypeId,,<empty>
431110,UNKNOWN,1,,TextDetectionModel_DB_Impl*,19,<empty>,,1544,1,CPPASTTypeId,,<empty>
431283,UNKNOWN,-1,,"CV__DNN_INLINE_NS_BEGIN

Net::Net()
    : impl(makePtr<Net::Impl>())
{
}

Net::~Net()
{
}

int Net::addLayer(const String& name, const String& type, const int& dtype, LayerParams& params)
{
    CV_TRACE_FUNCTION();
    CV_Assert(impl);
    return impl->addLayer(name, type, dtype, params);
}

int Net::addLayer(const String& name, const String& type, LayerParams& params)
{
    CV_TRACE_FUNCTION();
    return addLayer(name, type, CV_32F, params);
}

int Net::addLayerToPrev(const String& name, const String& type, const int& dtype, LayerParams& params)
{
    CV_TRACE_FUNCTION();
    CV_Assert(impl);
    return impl->addLayerToPrev(name, type, dtype, params);
}

int Net::addLayerToPrev(const String& name, const String& type, LayerParams& params)
{
    CV_TRACE_FUNCTION();
    return addLayerToPrev(name, type, CV_32F, params);
}

void Net::connect(int outLayerId, int outNum, int inpLayerId, int inpNum)
{
    CV_TRACE_FUNCTION();
    CV_Assert(impl);
    impl->connect(outLayerId, outNum, in...",1,<empty>,,11,1,CPPASTProblemDeclaration,,<empty>
431297,UNKNOWN,-1,,"CV__DNN_INLINE_NS_BEGIN

#ifdef HAVE_CANN

static std::shared_ptr<ge::ModelBufferData> compileCannGraph(std::shared_ptr<ge::Graph> graph);

class NetImplCann CV_FINAL : public Net::Impl
{
public:
    typedef Net::Impl Base;

    bool newWasSupported, netWasConverted;

    explicit NetImplCann(const Ptr<Net::Impl>& basePtr)
        : Net::Impl()
    {
        CV_LOG_INFO(NULL, ""Initializing NetImplCann"");
        basePtr_ = basePtr;
        newWasSupported = true;
        netWasConverted = false;

        init();

        CV_LOG_INFO(NULL, ""Finished initializing NetImplCann"");
    }

    void init()
    {
        CV_TRACE_FUNCTION();
        CV_Assert(basePtr_);
        Net::Impl& base = *basePtr_;
        CV_Assert(!base.netWasAllocated);
        CV_Assert(!base.netWasQuantized); // does not support quantized net for now
        netInputLayer = base.netInputLayer;
        blobsToKeep = base.blobsToKeep;
        layers = base.layers;
        for (MapIdToLayerData::iterator it = layer...",1,<empty>,,12,1,CPPASTProblemDeclaration,,<empty>
431309,UNKNOWN,-1,,"CV__DNN_INLINE_NS_BEGIN


static int g_networkId = 0;


detail::NetImplBase::NetImplBase()
    : networkId(CV_XADD(&g_networkId, 1))
    , networkDumpCounter(0)
    , dumpLevel(getParam_DNN_NETWORK_DUMP())
{
    // nothing
}


std::string detail::NetImplBase::getDumpFileNameBase() const
{
    std::string dumpFileNameBase = cv::format(""ocv_dnn_net_%05d_%02d"", networkId, networkDumpCounter++);
    return dumpFileNameBase;
}


Net::Impl::~Impl()
{
#ifdef HAVE_VULKAN
    if (context)
        context->reset();
#endif
}


Net::Impl::Impl()
{
    // allocate fake net input layer
    netInputLayer = Ptr<DataLayer>(new DataLayer());
    LayerData& inpl = layers.insert(make_pair(0, LayerData())).first->second;
    inpl.id = 0;
    netInputLayer->name = inpl.name = ""_input"";
    inpl.type = ""__NetInputLayer__"";
    inpl.layerInstance = netInputLayer;
    layerNameToId.insert(std::make_pair(inpl.name, inpl.id));

    lastLayerId = 0;
    netWasAllocated = false;
    netWasQuantized = false;
   ...",1,<empty>,,11,1,CPPASTProblemDeclaration,,<empty>
431347,UNKNOWN,-1,,"CV__DNN_INLINE_NS_BEGIN

using std::make_pair;
using std::string;

// NB: Implementation is divided between of multiple .cpp files
struct Net::Impl : public detail::NetImplBase
{
    typedef std::map<int, LayerShapes> LayersShapesMap;
    typedef std::map<int, LayerData> MapIdToLayerData;

    virtual ~Impl();
    Impl();
    Impl(const Impl&) = delete;

    // Inheritance support
    Ptr<Net::Impl> basePtr_;

    Ptr<DataLayer> netInputLayer;
    std::vector<LayerPin> blobsToKeep;
    MapIdToLayerData layers;
    std::map<String, int> layerNameToId;
    std::map<std::string, int> outputNameToId;  // use registerOutput() to populate outputs
    BlobManager blobManager;
    int preferableBackend;
    int preferableTarget;
    String halideConfigFile;
    bool hasDynamicShapes;
    // Map host data to backend specific wrapper.
    std::map<void*, Ptr<BackendWrapper>> backendWrappers;

    int lastLayerId;

    bool netWasAllocated;
    bool netWasQuantized;
    bool fusion;
    bool i...",1,<empty>,,31,1,CPPASTProblemDeclaration,,<empty>
431365,UNKNOWN,-1,,"CV__DNN_INLINE_NS_BEGIN


Ptr<BackendWrapper> Net::Impl::wrap(Mat& host)
{
    if (preferableBackend == DNN_BACKEND_OPENCV &&
            (preferableTarget == DNN_TARGET_CPU || preferableTarget == DNN_TARGET_CPU_FP16))
        return Ptr<BackendWrapper>();

    MatShape shape(host.dims);
    for (int i = 0; i < host.dims; ++i)
        shape[i] = host.size[i];

    void* data = host.data;
    if (backendWrappers.find(data) != backendWrappers.end())
    {
        Ptr<BackendWrapper> baseBuffer = backendWrappers[data];
        if (preferableBackend == DNN_BACKEND_OPENCV)
        {
#ifdef HAVE_OPENCL
            CV_Assert(IS_DNN_OPENCL_TARGET(preferableTarget));
            return OpenCLBackendWrapper::create(baseBuffer, host);
#else
            CV_Error(Error::StsInternal, """");
#endif
        }
        else if (preferableBackend == DNN_BACKEND_HALIDE)
        {
            CV_Assert(haveHalide());
#ifdef HAVE_HALIDE
            return Ptr<BackendWrapper>(new HalideBackendWrapper(baseBu...",1,<empty>,,15,1,CPPASTProblemDeclaration,,<empty>
431379,UNKNOWN,-1,,"CV__DNN_INLINE_NS_BEGIN


void Net::Impl::enableFusion(bool fusion_)
{
    if (fusion != fusion_)
    {
        fusion = fusion_;
        clear();
    }
}


#if 0
#define printf_(args) printf args
#else
#define printf_(args)
#endif


void Net::Impl::fuseLayers(const std::vector<LayerPin>& blobsToKeep_)
{
    CV_TRACE_FUNCTION();

    if(!fusion || (preferableBackend != DNN_BACKEND_OPENCV &&
                    preferableBackend != DNN_BACKEND_CUDA &&
                    preferableBackend != DNN_BACKEND_INFERENCE_ENGINE_NGRAPH &&
                    preferableBackend != DNN_BACKEND_TIMVX &&
                    preferableBackend != DNN_BACKEND_VKCOM))
       return;

#if 0  // FIXIT mode without fusion is broken due to unsupported layers and handling of ""custom"" nodes
    if (preferableBackend == DNN_BACKEND_INFERENCE_ENGINE_NGRAPH)
        return;
#endif

    // scan through all the layers. If there is convolution layer followed by the activation layer,
    // we try to embed this ac...",1,<empty>,,15,1,CPPASTProblemDeclaration,,<empty>
431403,UNKNOWN,-1,,"CV__DNN_INLINE_NS_BEGIN

#ifdef HAVE_INF_ENGINE

// TODO: use ""string"" target specifier
class NetImplOpenVINO CV_FINAL : public Net::Impl
{
public:
    typedef Net::Impl Base;

    // this default constructor is used with OpenVINO native loader
    // TODO: dedicated Impl?
    NetImplOpenVINO()
        : Net::Impl()
    {
        preferableBackend = DNN_BACKEND_INFERENCE_ENGINE_NGRAPH;
    }

    // constructor to derive execution implementation from the loaded network
    explicit NetImplOpenVINO(const Ptr<Net::Impl>& basePtr)
        : Net::Impl()
    {
        basePtr_ = basePtr;
        init();
    }

    void init()
    {
        CV_TRACE_FUNCTION();
        CV_Assert(basePtr_);
        Net::Impl& base = *basePtr_;
        CV_Assert(!base.netWasAllocated);
        netInputLayer = base.netInputLayer;
        blobsToKeep = base.blobsToKeep;
        layers = base.layers;
        for (MapIdToLayerData::iterator it = layers.begin(); it != layers.end(); it++)
        {
            La...",1,<empty>,,19,1,CPPASTProblemDeclaration,,<empty>
431415,UNKNOWN,-1,,"CV__DNN_INLINE_NS_BEGIN


// FIXIT drop from inference API
static
void getQuantizationParams(const Mat& src, std::vector<float>& scales, std::vector<int>& zeropoints)
{
    const int qmin = -128; // INT8_MIN
    const int qmax = 127;  // INT8_MAX

    double rmin, rmax, sc, zp;
    cv::minMaxIdx(src, &rmin, &rmax);

    // 0 must be present in the range [rmin, rmax]
    rmin = std::min(rmin, 0.0);
    rmax = std::max(rmax, 0.0);

    sc = (rmax == rmin) ? 1.0 : (rmax - rmin)/(qmax - qmin);
    zp = qmin - (rmin/sc);

    scales.push_back((float)sc);
    zeropoints.push_back((int)std::round(zp));
}

// FIXIT drop from inference API
Net Net::Impl::quantize(Net& net, InputArrayOfArrays calibData, int inputsDtype, int outputsDtype, bool perChannel)
{
    // Net can be quantized only once.
    if (netWasQuantized)
        CV_Error(Error::StsBadArg, ""Cannot quantize a quantized net"");

    CV_CheckType(inputsDtype, inputsDtype == CV_32F || inputsDtype == CV_8S, ""Input depth should be CV_3...",1,<empty>,,11,1,CPPASTProblemDeclaration,,<empty>
431459,UNKNOWN,-1,,CV__DNN_INLINE_NS_BEGIN,1,<empty>,,14,1,CPPASTProblemDeclaration,,<empty>
431468,UNKNOWN,1,,float,30,<empty>,,19,1,CPPASTTypeId,,<empty>
432066,UNKNOWN,1,,int,39,<empty>,,158,1,CPPASTTypeId,,<empty>
432173,UNKNOWN,-1,,"CV__DNN_INLINE_NS_END
",1,<empty>,,193,11,CPPASTProblemDeclaration,,<empty>
432264,UNKNOWN,1,,int,31,<empty>,,51,1,CPPASTTypeId,,<empty>
432357,UNKNOWN,1,,int,30,<empty>,,87,1,CPPASTTypeId,,<empty>
434822,UNKNOWN,1,,int,45,<empty>,,246,1,CPPASTTypeId,,<empty>
434834,UNKNOWN,1,,int,46,<empty>,,247,1,CPPASTTypeId,,<empty>
434904,UNKNOWN,1,,int,52,<empty>,,256,1,CPPASTTypeId,,<empty>
435991,UNKNOWN,1,,float,18,<empty>,,516,1,CPPASTTypeId,,<empty>
435994,UNKNOWN,1,,float,32,<empty>,,516,1,CPPASTTypeId,,<empty>
436062,UNKNOWN,1,,float,14,<empty>,,533,1,CPPASTTypeId,,<empty>
436065,UNKNOWN,1,,float,28,<empty>,,533,1,CPPASTTypeId,,<empty>
436125,UNKNOWN,1,,Dtype,45,<empty>,,554,1,CPPASTTypeId,,<empty>
436132,UNKNOWN,1,,Dtype,68,<empty>,,554,1,CPPASTTypeId,,<empty>
436155,UNKNOWN,1,,Dtype,45,<empty>,,560,1,CPPASTTypeId,,<empty>
436162,UNKNOWN,1,,Dtype,74,<empty>,,560,1,CPPASTTypeId,,<empty>
437538,UNKNOWN,1,,float,35,<empty>,,274,1,CPPASTTypeId,,<empty>
437566,UNKNOWN,1,,float,35,<empty>,,280,1,CPPASTTypeId,,<empty>
437578,UNKNOWN,1,,float,35,<empty>,,283,1,CPPASTTypeId,,<empty>
437587,UNKNOWN,1,,float,35,<empty>,,284,1,CPPASTTypeId,,<empty>
437827,UNKNOWN,1,,int,40,<empty>,,379,1,CPPASTTypeId,,<empty>
437863,UNKNOWN,1,,int,34,<empty>,,385,1,CPPASTTypeId,,<empty>
437878,UNKNOWN,1,,int,38,<empty>,,388,1,CPPASTTypeId,,<empty>
438285,UNKNOWN,1,,uchar*,53,<empty>,,535,1,CPPASTTypeId,,<empty>
438602,UNKNOWN,1,,int,31,<empty>,,635,1,CPPASTTypeId,,<empty>
439044,UNKNOWN,1,,int,42,<empty>,,741,1,CPPASTTypeId,,<empty>
439051,UNKNOWN,1,,int,51,<empty>,,742,1,CPPASTTypeId,,<empty>
439206,UNKNOWN,1,,Dtype *,30,<empty>,,792,1,CPPASTTypeId,,<empty>
439215,UNKNOWN,1,,Dtype *,39,<empty>,,793,1,CPPASTTypeId,,<empty>
439403,UNKNOWN,1,,size_t,35,<empty>,,840,1,CPPASTTypeId,,<empty>
439406,UNKNOWN,1,,size_t,54,<empty>,,840,1,CPPASTTypeId,,<empty>
439409,UNKNOWN,1,,size_t,73,<empty>,,840,1,CPPASTTypeId,,<empty>
439427,UNKNOWN,1,,const size_t*,84,<empty>,,841,1,CPPASTTypeId,,<empty>
439673,UNKNOWN,1,,int,35,<empty>,,899,1,CPPASTTypeId,,<empty>
439687,UNKNOWN,1,,uint16_t,35,<empty>,,901,1,CPPASTTypeId,,<empty>
439696,UNKNOWN,1,,uint16_t,35,<empty>,,902,1,CPPASTTypeId,,<empty>
439705,UNKNOWN,1,,uint16_t,35,<empty>,,903,1,CPPASTTypeId,,<empty>
439714,UNKNOWN,1,,uint16_t,35,<empty>,,904,1,CPPASTTypeId,,<empty>
439864,UNKNOWN,1,,int,35,<empty>,,934,1,CPPASTTypeId,,<empty>
439873,UNKNOWN,1,,int,35,<empty>,,935,1,CPPASTTypeId,,<empty>
439900,UNKNOWN,1,,int,35,<empty>,,938,1,CPPASTTypeId,,<empty>
439909,UNKNOWN,1,,int,35,<empty>,,939,1,CPPASTTypeId,,<empty>
439939,UNKNOWN,1,,int,39,<empty>,,944,1,CPPASTTypeId,,<empty>
439962,UNKNOWN,1,,int,35,<empty>,,948,1,CPPASTTypeId,,<empty>
439977,UNKNOWN,1,,int,35,<empty>,,949,1,CPPASTTypeId,,<empty>
439980,UNKNOWN,1,,int,57,<empty>,,949,1,CPPASTTypeId,,<empty>
439993,UNKNOWN,1,,uint16_t,35,<empty>,,951,1,CPPASTTypeId,,<empty>
440002,UNKNOWN,1,,uint16_t,35,<empty>,,952,1,CPPASTTypeId,,<empty>
440011,UNKNOWN,1,,uint16_t,35,<empty>,,953,1,CPPASTTypeId,,<empty>
440020,UNKNOWN,1,,uint16_t,35,<empty>,,954,1,CPPASTTypeId,,<empty>
440057,UNKNOWN,1,,uint32_t,35,<empty>,,960,1,CPPASTTypeId,,<empty>
440066,UNKNOWN,1,,uint32_t,35,<empty>,,961,1,CPPASTTypeId,,<empty>
440075,UNKNOWN,1,,uint32_t,35,<empty>,,962,1,CPPASTTypeId,,<empty>
440084,UNKNOWN,1,,uint32_t,35,<empty>,,963,1,CPPASTTypeId,,<empty>
440285,UNKNOWN,1,,int,31,<empty>,,997,1,CPPASTTypeId,,<empty>
440298,UNKNOWN,1,,uint16_t,31,<empty>,,998,1,CPPASTTypeId,,<empty>
440307,UNKNOWN,1,,uint16_t,31,<empty>,,999,1,CPPASTTypeId,,<empty>
440316,UNKNOWN,1,,uint16_t,31,<empty>,,1000,1,CPPASTTypeId,,<empty>
440325,UNKNOWN,1,,uint16_t,31,<empty>,,1001,1,CPPASTTypeId,,<empty>
440357,UNKNOWN,1,,size_t,36,<empty>,,1010,1,CPPASTTypeId,,<empty>
440363,UNKNOWN,1,,unsigned,88,<empty>,,1010,1,CPPASTTypeId,,<empty>
440551,UNKNOWN,1,,void *,43,<empty>,,1042,1,CPPASTTypeId,,<empty>
440580,UNKNOWN,1,,int,39,<empty>,,1045,1,CPPASTTypeId,,<empty>
440600,UNKNOWN,1,,uint16_t,39,<empty>,,1047,1,CPPASTTypeId,,<empty>
440609,UNKNOWN,1,,uint16_t,39,<empty>,,1048,1,CPPASTTypeId,,<empty>
440618,UNKNOWN,1,,uint16_t,39,<empty>,,1049,1,CPPASTTypeId,,<empty>
440627,UNKNOWN,1,,uint16_t,39,<empty>,,1050,1,CPPASTTypeId,,<empty>
440636,UNKNOWN,1,,uint16_t,39,<empty>,,1051,1,CPPASTTypeId,,<empty>
440645,UNKNOWN,1,,uint16_t,39,<empty>,,1052,1,CPPASTTypeId,,<empty>
440676,UNKNOWN,1,,size_t,44,<empty>,,1061,1,CPPASTTypeId,,<empty>
440681,UNKNOWN,1,,unsigned,80,<empty>,,1061,1,CPPASTTypeId,,<empty>
440936,UNKNOWN,1,,size_t,30,<empty>,,1142,1,CPPASTTypeId,,<empty>
441233,UNKNOWN,1,,int,52,<empty>,,1199,1,CPPASTTypeId,,<empty>
441242,UNKNOWN,1,,int,59,<empty>,,1200,1,CPPASTTypeId,,<empty>
441313,UNKNOWN,1,,int,34,<empty>,,1221,1,CPPASTTypeId,,<empty>
441329,UNKNOWN,1,,int,35,<empty>,,1222,1,CPPASTTypeId,,<empty>
441504,UNKNOWN,-1,,),57,<empty>,,1240,2,CPPASTProblemStatement,,<empty>
441522,UNKNOWN,1,,long long int,126,<empty>,,1245,1,CPPASTTypeId,,<empty>
441701,UNKNOWN,1,,size_t,18,<empty>,,1305,1,CPPASTTypeId,,<empty>
441709,UNKNOWN,1,,size_t,18,<empty>,,1306,1,CPPASTTypeId,,<empty>
441737,UNKNOWN,1,,size_t,45,<empty>,,1310,1,CPPASTTypeId,,<empty>
441852,UNKNOWN,1,,size_t,10,<empty>,,1347,1,CPPASTTypeId,,<empty>
441857,UNKNOWN,1,,size_t,10,<empty>,,1348,1,CPPASTTypeId,,<empty>
441863,UNKNOWN,1,,size_t,10,<empty>,,1349,1,CPPASTTypeId,,<empty>
441875,UNKNOWN,1,,size_t,48,<empty>,,1350,1,CPPASTTypeId,,<empty>
442415,UNKNOWN,1,,float,59,<empty>,,1512,1,CPPASTTypeId,,<empty>
444162,UNKNOWN,1,,Dtype,57,<empty>,,77,1,CPPASTTypeId,,<empty>
444169,UNKNOWN,1,,Dtype,57,<empty>,,78,1,CPPASTTypeId,,<empty>
444515,UNKNOWN,1,,size_t,37,<empty>,,96,1,CPPASTTypeId,,<empty>
444933,UNKNOWN,1,,size_t,26,<empty>,,104,1,CPPASTTypeId,,<empty>
445520,UNKNOWN,1,,size_t,40,<empty>,,105,1,CPPASTTypeId,,<empty>
445769,UNKNOWN,-1,,CV__DNN_INLINE_NS_BEGIN,1,<empty>,,50,1,CPPASTProblemDeclaration,,<empty>
445820,UNKNOWN,-1,,"CV__DNN_INLINE_NS_END
",1,<empty>,,4114,7,CPPASTProblemDeclaration,,<empty>
445965,UNKNOWN,-1,,"CV__DNN_INLINE_NS_BEGIN


void Net::Impl::setHalideScheduler(const String& scheduler)
{
    halideConfigFile = scheduler;
}


#ifdef HAVE_HALIDE


void Net::Impl::compileHalide()
{
    CV_TRACE_FUNCTION();

    CV_Assert(preferableBackend == DNN_BACKEND_HALIDE);

    HalideScheduler scheduler(halideConfigFile);
    std::vector< std::reference_wrapper<LayerData> > compileList; compileList.reserve(64);
    for (MapIdToLayerData::iterator it = layers.begin(); it != layers.end(); ++it)
    {
        LayerData& ld = it->second;
        Ptr<Layer> layer = ld.layerInstance;
        if (layer->supportBackend(DNN_BACKEND_HALIDE) && !ld.skip)
        {
            CV_Assert(!ld.backendNodes[DNN_BACKEND_HALIDE].empty());
            bool scheduled = scheduler.process(ld.backendNodes[DNN_BACKEND_HALIDE]);
            if (!scheduled)
            {
                // Use automatic scheduling provided by layer.
                layer->applyHalideScheduler(ld.backendNodes[DNN_BACKEND_HALIDE],
      ...",1,<empty>,,22,1,CPPASTProblemDeclaration,,<empty>
446064,UNKNOWN,-1,,"CV__DNN_INLINE_NS_BEGIN


void Layer::applyHalideScheduler(Ptr<BackendNode>& node, const std::vector<Mat*> &inputs,
                                 const std::vector<Mat> &outputs, int targetId) const
{
#ifndef HAVE_HALIDE
    CV_Error(Error::StsNotImplemented, """");
#else
    CV_TRACE_FUNCTION();

    Halide::Var x(""x""), y(""y""), c(""c""), n(""n""), co(""co""), ci(""ci""),
                xo(""xo""), xi(""xi""), yo(""yo""), yi(""yi""), tile(""tile"");
    Halide::Func& top = node.dynamicCast<HalideBackendNode>()->funcs.back();

    int outW, outH, outC, outN;
    getCanonicalSize(outputs[0].size, &outW, &outH, &outC, &outN);

    if (targetId == DNN_TARGET_CPU)
    {
        if (outW == 1 && outH == 1)
        {
            if (outC + outN == 1)
                return;

            if (outC > 8)
              top.split(c, co, ci, 8)
                 .fuse(x, y, tile).fuse(co, tile, tile).fuse(n, tile, tile)
                 .parallel(tile)
                 .vectorize(ci, 8);
            else
        ...",1,<empty>,,351,7,CPPASTProblemDeclaration,,<empty>
446132,UNKNOWN,-1,,"CV__DNN_INLINE_NS_BEGIN

void resetMyriadDevice()
{
#ifdef HAVE_INF_ENGINE
    CV_LOG_INFO(NULL, ""DNN: Unregistering both 'MYRIAD' and 'HETERO:MYRIAD,CPU' plugins"");

    AutoLock lock(getInitializationMutex());

    InferenceEngine::Core& ie = getCore(""MYRIAD"");
    try
    {
        ie.UnregisterPlugin(""MYRIAD"");
        ie.UnregisterPlugin(""HETERO"");
    }
    catch (...) {}
#endif  // HAVE_INF_ENGINE
}

void releaseHDDLPlugin()
{
#ifdef HAVE_INF_ENGINE
    CV_LOG_INFO(NULL, ""DNN: Unregistering both 'HDDL' and 'HETERO:HDDL,CPU' plugins"");

    AutoLock lock(getInitializationMutex());

    InferenceEngine::Core& ie = getCore(""HDDL"");
    try
    {
        ie.UnregisterPlugin(""HDDL"");
        ie.UnregisterPlugin(""HETERO"");
    }
    catch (...) {}
#endif  // HAVE_INF_ENGINE
}

#ifdef HAVE_INF_ENGINE
bool isMyriadX()
{
    static bool myriadX = getInferenceEngineVPUType() == CV_DNN_INFERENCE_ENGINE_VPU_TYPE_MYRIAD_X;
    return myriadX;
}

bool isArmComputePlugin()
{
    static bool...",1,<empty>,,253,1,CPPASTProblemDeclaration,,<empty>
446160,UNKNOWN,-1,,"CV__DNN_INLINE_NS_BEGIN
namespace openvino {

// TODO: use std::string as parameter
bool checkTarget(Target target);

}  // namespace openvino
CV__DNN_INLINE_NS_END",1,<empty>,,66,1,CPPASTProblemDeclaration,,<empty>
446358,UNKNOWN,-1,,CvResult (CV_API_CALL *getInstance)(CV_OUT CvPluginDNNNetworkBackend* handle) CV_NOEXCEPT;,5,<empty>,,44,1,CPPASTProblemDeclaration,,<empty>
446365,UNKNOWN,6,,"typedef const OpenCV_DNN_Plugin_API* (CV_API_CALL *FN_opencv_dnn_plugin_init_t)
        (int requested_abi_version, int requested_api_version, void* reserved /*NULL*/);",1,<empty>,,68,6,CPPASTProblemDeclaration,,<empty>
446517,UNKNOWN,-1,,"CV__DNN_INLINE_NS_BEGIN


class BackendRegistry
{
public:
    typedef std::vector< std::pair<Backend, Target> > BackendsList;
    const BackendsList & getBackends() const { return backends; }
    static BackendRegistry & getRegistry()
    {
        static BackendRegistry impl;
        return impl;
    }


private:
    BackendRegistry()
    {
#ifdef HAVE_HALIDE
        backends.push_back(std::make_pair(DNN_BACKEND_HALIDE, DNN_TARGET_CPU));
#ifdef HAVE_OPENCL
        if (cv::ocl::useOpenCL())
            backends.push_back(std::make_pair(DNN_BACKEND_HALIDE, DNN_TARGET_OPENCL));
#endif
#endif  // HAVE_HALIDE

        bool haveBackendOpenVINO = false;
#ifdef HAVE_INF_ENGINE
        haveBackendOpenVINO = true;
#elif defined(ENABLE_PLUGINS)
        {
            auto factory = dnn_backend::createPluginDNNBackendFactory(""openvino"");
            if (factory)
            {
                auto backend = factory->createNetworkBackend();
                if (backend)
                    haveBac...",1,<empty>,,23,1,CPPASTProblemDeclaration,,<empty>
446569,UNKNOWN,-1,,CV__DNN_INLINE_NS_BEGIN,1,<empty>,,35,1,CPPASTProblemDeclaration,,<empty>
446625,UNKNOWN,-1,,"CV__DNN_INLINE_NS_END
",1,<empty>,,3344,7,CPPASTProblemDeclaration,,<empty>
446740,UNKNOWN,-1,,CV__DNN_INLINE_NS_BEGIN,1,<empty>,,19,1,CPPASTProblemDeclaration,,<empty>
446778,UNKNOWN,-1,,"CV__DNN_INLINE_NS_END
",1,<empty>,,1047,5,CPPASTProblemDeclaration,,<empty>
446806,UNKNOWN,1,,THDiskFile*,25,<empty>,,21,1,CPPASTTypeId,,<empty>
446904,UNKNOWN,1,,THDiskFile*,25,<empty>,,109,1,CPPASTTypeId,,<empty>
446921,UNKNOWN,1,,off_t,30,<empty>,,118,1,CPPASTTypeId,,<empty>
446964,UNKNOWN,1,,THDiskFile*,25,<empty>,,129,1,CPPASTTypeId,,<empty>
447021,UNKNOWN,1,,THDiskFile*,25,<empty>,,149,1,CPPASTTypeId,,<empty>
447046,UNKNOWN,1,,long,15,<empty>,,160,1,CPPASTTypeId,,<empty>
447082,UNKNOWN,1,,THDiskFile*,25,<empty>,,169,1,CPPASTTypeId,,<empty>
447124,UNKNOWN,1,,char*,22,<empty>,,182,1,CPPASTTypeId,,<empty>
447130,UNKNOWN,1,,char*,22,<empty>,,183,1,CPPASTTypeId,,<empty>
447201,UNKNOWN,1,,char *,16,<empty>,,202,1,CPPASTTypeId,,<empty>
447234,UNKNOWN,1,,THDiskFile*,25,<empty>,,217,1,CPPASTTypeId,,<empty>
447258,UNKNOWN,1,,THDiskFile*,25,<empty>,,224,1,CPPASTTypeId,,<empty>
447282,UNKNOWN,1,,THDiskFile*,25,<empty>,,231,1,CPPASTTypeId,,<empty>
447308,UNKNOWN,1,,THDiskFile*,25,<empty>,,240,1,CPPASTTypeId,,<empty>
447346,UNKNOWN,1,,THDiskFile*,25,<empty>,,248,1,CPPASTTypeId,,<empty>
447387,UNKNOWN,1,,THDiskFile*,25,<empty>,,257,1,CPPASTTypeId,,<empty>
447413,UNKNOWN,1,,THDiskFile *,1,<empty>,,264,1,CPPASTTypeId,,<empty>
447571,UNKNOWN,1,,THDiskFile *,1,<empty>,,268,1,CPPASTTypeId,,<empty>
447729,UNKNOWN,1,,THDiskFile *,1,<empty>,,272,1,CPPASTTypeId,,<empty>
447899,UNKNOWN,1,,THDiskFile *,1,<empty>,,276,1,CPPASTTypeId,,<empty>
448069,UNKNOWN,1,,THDiskFile *,1,<empty>,,284,1,CPPASTTypeId,,<empty>
448239,UNKNOWN,1,,THDiskFile *,1,<empty>,,288,1,CPPASTTypeId,,<empty>
448409,UNKNOWN,1,,THDiskFile*,25,<empty>,,296,1,CPPASTTypeId,,<empty>
448544,UNKNOWN,1,,int *,23,<empty>,,316,1,CPPASTTypeId,,<empty>
448560,UNKNOWN,1,,int32_t*,26,<empty>,,321,1,CPPASTTypeId,,<empty>
448760,UNKNOWN,1,,THDiskFile*,25,<empty>,,363,1,CPPASTTypeId,,<empty>
448820,UNKNOWN,1,,char*,16,<empty>,,374,1,CPPASTTypeId,,<empty>
448872,UNKNOWN,1,,char*,24,<empty>,,385,1,CPPASTTypeId,,<empty>
448976,UNKNOWN,1,,char*,16,<empty>,,413,1,CPPASTTypeId,,<empty>
449029,UNKNOWN,1,,char*,24,<empty>,,425,1,CPPASTTypeId,,<empty>
449256,UNKNOWN,1,,THDiskFile*,11,<empty>,,511,1,CPPASTTypeId,,<empty>
449346,UNKNOWN,1,,THFile*,11,<empty>,,527,1,CPPASTTypeId,,<empty>
450206,UNKNOWN,-1,,CV__DNN_INLINE_NS_BEGIN,1,<empty>,,57,1,CPPASTProblemDeclaration,,<empty>
450448,UNKNOWN,1,,char*,45,<empty>,,182,1,CPPASTTypeId,,<empty>
450683,UNKNOWN,1,,float*,40,<empty>,,264,1,CPPASTTypeId,,<empty>
450701,UNKNOWN,1,,double*,41,<empty>,,268,1,CPPASTTypeId,,<empty>
450719,UNKNOWN,1,,uchar*,39,<empty>,,272,1,CPPASTTypeId,,<empty>
450737,UNKNOWN,1,,uchar*,39,<empty>,,276,1,CPPASTTypeId,,<empty>
450755,UNKNOWN,1,,short*,40,<empty>,,280,1,CPPASTTypeId,,<empty>
450773,UNKNOWN,1,,int*,38,<empty>,,284,1,CPPASTTypeId,,<empty>
450799,UNKNOWN,1,,int64*,39,<empty>,,290,1,CPPASTTypeId,,<empty>
450808,UNKNOWN,1,,size_t,30,<empty>,,292,1,CPPASTTypeId,,<empty>
450820,UNKNOWN,1,,int64*,28,<empty>,,293,1,CPPASTTypeId,,<empty>
451273,UNKNOWN,1,,size_t,32,<empty>,,426,1,CPPASTTypeId,,<empty>
451277,UNKNOWN,1,,size_t,49,<empty>,,426,1,CPPASTTypeId,,<empty>
451282,UNKNOWN,1,,size_t,68,<empty>,,426,1,CPPASTTypeId,,<empty>
451335,UNKNOWN,1,,int,26,<empty>,,436,1,CPPASTTypeId,,<empty>
451345,UNKNOWN,1,,size_t,26,<empty>,,437,1,CPPASTTypeId,,<empty>
452098,UNKNOWN,1,,int,29,<empty>,,622,1,CPPASTTypeId,,<empty>
452499,UNKNOWN,1,,int,53,<empty>,,709,1,CPPASTTypeId,,<empty>
452976,UNKNOWN,1,,int,57,<empty>,,813,1,CPPASTTypeId,,<empty>
452988,UNKNOWN,1,,int,57,<empty>,,814,1,CPPASTTypeId,,<empty>
453000,UNKNOWN,1,,int,54,<empty>,,815,1,CPPASTTypeId,,<empty>
453012,UNKNOWN,1,,int,54,<empty>,,816,1,CPPASTTypeId,,<empty>
453024,UNKNOWN,1,,int,57,<empty>,,817,1,CPPASTTypeId,,<empty>
453036,UNKNOWN,1,,int,57,<empty>,,818,1,CPPASTTypeId,,<empty>
453048,UNKNOWN,1,,int,59,<empty>,,819,1,CPPASTTypeId,,<empty>
453060,UNKNOWN,1,,int,59,<empty>,,820,1,CPPASTTypeId,,<empty>
453072,UNKNOWN,1,,int,59,<empty>,,821,1,CPPASTTypeId,,<empty>
453199,UNKNOWN,1,,int,57,<empty>,,846,1,CPPASTTypeId,,<empty>
453211,UNKNOWN,1,,int,57,<empty>,,847,1,CPPASTTypeId,,<empty>
453223,UNKNOWN,1,,int,54,<empty>,,848,1,CPPASTTypeId,,<empty>
453235,UNKNOWN,1,,int,54,<empty>,,849,1,CPPASTTypeId,,<empty>
453247,UNKNOWN,1,,int,57,<empty>,,850,1,CPPASTTypeId,,<empty>
453259,UNKNOWN,1,,int,57,<empty>,,851,1,CPPASTTypeId,,<empty>
453271,UNKNOWN,1,,int,54,<empty>,,852,1,CPPASTTypeId,,<empty>
453283,UNKNOWN,1,,int,54,<empty>,,853,1,CPPASTTypeId,,<empty>
453295,UNKNOWN,1,,int,59,<empty>,,854,1,CPPASTTypeId,,<empty>
454242,UNKNOWN,1,,int,38,<empty>,,1063,1,CPPASTTypeId,,<empty>
454360,UNKNOWN,1,,int,38,<empty>,,1088,1,CPPASTTypeId,,<empty>
454531,UNKNOWN,1,,int,38,<empty>,,1119,1,CPPASTTypeId,,<empty>
454638,UNKNOWN,1,,int,38,<empty>,,1139,1,CPPASTTypeId,,<empty>
455235,UNKNOWN,-1,,"CV__DNN_INLINE_NS_END
",1,<empty>,,1269,12,CPPASTProblemDeclaration,,<empty>
